
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fe5c  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fe8  0801ff94  0801ff94  0002ff94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  08020f7c  08020f7c  00030f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08021054  08021054  00040140  2**0
                  CONTENTS
  5 .ARM          00000008  08021054  08021054  00031054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0802105c  0802105c  00040140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0802105c  0802105c  0003105c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08021060  08021060  00031060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000140  20000000  08021064  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002118  20000140  080211a4  00040140  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002258  080211a4  00042258  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00040140  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0004016a  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004ce22  00000000  00000000  000401ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000b558  00000000  00000000  0008cfcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003908  00000000  00000000  00098528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002b78  00000000  00000000  0009be30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002d6ea  00000000  00000000  0009e9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00044835  00000000  00000000  000cc092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d51fe  00000000  00000000  001108c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000ed00  00000000  00000000  001e5ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  001f47c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000140 	.word	0x20000140
 8000154:	00000000 	.word	0x00000000
 8000158:	0801ff7c 	.word	0x0801ff7c

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000144 	.word	0x20000144
 8000174:	0801ff7c 	.word	0x0801ff7c

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_fmul>:
 8000d40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d48:	bf1e      	ittt	ne
 8000d4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d4e:	ea92 0f0c 	teqne	r2, ip
 8000d52:	ea93 0f0c 	teqne	r3, ip
 8000d56:	d06f      	beq.n	8000e38 <__aeabi_fmul+0xf8>
 8000d58:	441a      	add	r2, r3
 8000d5a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d5e:	0240      	lsls	r0, r0, #9
 8000d60:	bf18      	it	ne
 8000d62:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d66:	d01e      	beq.n	8000da6 <__aeabi_fmul+0x66>
 8000d68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d6c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d70:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d74:	fba0 3101 	umull	r3, r1, r0, r1
 8000d78:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d7c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d80:	bf3e      	ittt	cc
 8000d82:	0049      	lslcc	r1, r1, #1
 8000d84:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d88:	005b      	lslcc	r3, r3, #1
 8000d8a:	ea40 0001 	orr.w	r0, r0, r1
 8000d8e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d92:	2afd      	cmp	r2, #253	; 0xfd
 8000d94:	d81d      	bhi.n	8000dd2 <__aeabi_fmul+0x92>
 8000d96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9e:	bf08      	it	eq
 8000da0:	f020 0001 	biceq.w	r0, r0, #1
 8000da4:	4770      	bx	lr
 8000da6:	f090 0f00 	teq	r0, #0
 8000daa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dae:	bf08      	it	eq
 8000db0:	0249      	lsleq	r1, r1, #9
 8000db2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dba:	3a7f      	subs	r2, #127	; 0x7f
 8000dbc:	bfc2      	ittt	gt
 8000dbe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc6:	4770      	bxgt	lr
 8000dc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	3a01      	subs	r2, #1
 8000dd2:	dc5d      	bgt.n	8000e90 <__aeabi_fmul+0x150>
 8000dd4:	f112 0f19 	cmn.w	r2, #25
 8000dd8:	bfdc      	itt	le
 8000dda:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dde:	4770      	bxle	lr
 8000de0:	f1c2 0200 	rsb	r2, r2, #0
 8000de4:	0041      	lsls	r1, r0, #1
 8000de6:	fa21 f102 	lsr.w	r1, r1, r2
 8000dea:	f1c2 0220 	rsb	r2, r2, #32
 8000dee:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000df6:	f140 0000 	adc.w	r0, r0, #0
 8000dfa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dfe:	bf08      	it	eq
 8000e00:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e04:	4770      	bx	lr
 8000e06:	f092 0f00 	teq	r2, #0
 8000e0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e0e:	bf02      	ittt	eq
 8000e10:	0040      	lsleq	r0, r0, #1
 8000e12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e16:	3a01      	subeq	r2, #1
 8000e18:	d0f9      	beq.n	8000e0e <__aeabi_fmul+0xce>
 8000e1a:	ea40 000c 	orr.w	r0, r0, ip
 8000e1e:	f093 0f00 	teq	r3, #0
 8000e22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0049      	lsleq	r1, r1, #1
 8000e2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e2e:	3b01      	subeq	r3, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xe6>
 8000e32:	ea41 010c 	orr.w	r1, r1, ip
 8000e36:	e78f      	b.n	8000d58 <__aeabi_fmul+0x18>
 8000e38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	bf18      	it	ne
 8000e42:	ea93 0f0c 	teqne	r3, ip
 8000e46:	d00a      	beq.n	8000e5e <__aeabi_fmul+0x11e>
 8000e48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e4c:	bf18      	it	ne
 8000e4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	d1d8      	bne.n	8000e06 <__aeabi_fmul+0xc6>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	4770      	bx	lr
 8000e5e:	f090 0f00 	teq	r0, #0
 8000e62:	bf17      	itett	ne
 8000e64:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e68:	4608      	moveq	r0, r1
 8000e6a:	f091 0f00 	teqne	r1, #0
 8000e6e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e72:	d014      	beq.n	8000e9e <__aeabi_fmul+0x15e>
 8000e74:	ea92 0f0c 	teq	r2, ip
 8000e78:	d101      	bne.n	8000e7e <__aeabi_fmul+0x13e>
 8000e7a:	0242      	lsls	r2, r0, #9
 8000e7c:	d10f      	bne.n	8000e9e <__aeabi_fmul+0x15e>
 8000e7e:	ea93 0f0c 	teq	r3, ip
 8000e82:	d103      	bne.n	8000e8c <__aeabi_fmul+0x14c>
 8000e84:	024b      	lsls	r3, r1, #9
 8000e86:	bf18      	it	ne
 8000e88:	4608      	movne	r0, r1
 8000e8a:	d108      	bne.n	8000e9e <__aeabi_fmul+0x15e>
 8000e8c:	ea80 0001 	eor.w	r0, r0, r1
 8000e90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e9c:	4770      	bx	lr
 8000e9e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ea6:	4770      	bx	lr

08000ea8 <__aeabi_fdiv>:
 8000ea8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb0:	bf1e      	ittt	ne
 8000eb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eb6:	ea92 0f0c 	teqne	r2, ip
 8000eba:	ea93 0f0c 	teqne	r3, ip
 8000ebe:	d069      	beq.n	8000f94 <__aeabi_fdiv+0xec>
 8000ec0:	eba2 0203 	sub.w	r2, r2, r3
 8000ec4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ec8:	0249      	lsls	r1, r1, #9
 8000eca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ece:	d037      	beq.n	8000f40 <__aeabi_fdiv+0x98>
 8000ed0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ed8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000edc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	bf38      	it	cc
 8000ee4:	005b      	lslcc	r3, r3, #1
 8000ee6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	bf24      	itt	cs
 8000ef2:	1a5b      	subcs	r3, r3, r1
 8000ef4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ef8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f02:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f06:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0a:	bf24      	itt	cs
 8000f0c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f14:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f18:	bf24      	itt	cs
 8000f1a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f1e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f22:	011b      	lsls	r3, r3, #4
 8000f24:	bf18      	it	ne
 8000f26:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2a:	d1e0      	bne.n	8000eee <__aeabi_fdiv+0x46>
 8000f2c:	2afd      	cmp	r2, #253	; 0xfd
 8000f2e:	f63f af50 	bhi.w	8000dd2 <__aeabi_fmul+0x92>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f38:	bf08      	it	eq
 8000f3a:	f020 0001 	biceq.w	r0, r0, #1
 8000f3e:	4770      	bx	lr
 8000f40:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f44:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f48:	327f      	adds	r2, #127	; 0x7f
 8000f4a:	bfc2      	ittt	gt
 8000f4c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f50:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f54:	4770      	bxgt	lr
 8000f56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5a:	f04f 0300 	mov.w	r3, #0
 8000f5e:	3a01      	subs	r2, #1
 8000f60:	e737      	b.n	8000dd2 <__aeabi_fmul+0x92>
 8000f62:	f092 0f00 	teq	r2, #0
 8000f66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6a:	bf02      	ittt	eq
 8000f6c:	0040      	lsleq	r0, r0, #1
 8000f6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f72:	3a01      	subeq	r2, #1
 8000f74:	d0f9      	beq.n	8000f6a <__aeabi_fdiv+0xc2>
 8000f76:	ea40 000c 	orr.w	r0, r0, ip
 8000f7a:	f093 0f00 	teq	r3, #0
 8000f7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0049      	lsleq	r1, r1, #1
 8000f86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8a:	3b01      	subeq	r3, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xda>
 8000f8e:	ea41 010c 	orr.w	r1, r1, ip
 8000f92:	e795      	b.n	8000ec0 <__aeabi_fdiv+0x18>
 8000f94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f98:	ea92 0f0c 	teq	r2, ip
 8000f9c:	d108      	bne.n	8000fb0 <__aeabi_fdiv+0x108>
 8000f9e:	0242      	lsls	r2, r0, #9
 8000fa0:	f47f af7d 	bne.w	8000e9e <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	f47f af70 	bne.w	8000e8c <__aeabi_fmul+0x14c>
 8000fac:	4608      	mov	r0, r1
 8000fae:	e776      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fb0:	ea93 0f0c 	teq	r3, ip
 8000fb4:	d104      	bne.n	8000fc0 <__aeabi_fdiv+0x118>
 8000fb6:	024b      	lsls	r3, r1, #9
 8000fb8:	f43f af4c 	beq.w	8000e54 <__aeabi_fmul+0x114>
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	e76e      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc4:	bf18      	it	ne
 8000fc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fca:	d1ca      	bne.n	8000f62 <__aeabi_fdiv+0xba>
 8000fcc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd0:	f47f af5c 	bne.w	8000e8c <__aeabi_fmul+0x14c>
 8000fd4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fd8:	f47f af3c 	bne.w	8000e54 <__aeabi_fmul+0x114>
 8000fdc:	e75f      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_f2iz>:
 8000fe0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fe8:	d30f      	bcc.n	800100a <__aeabi_f2iz+0x2a>
 8000fea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff2:	d90d      	bls.n	8001010 <__aeabi_f2iz+0x30>
 8000ff4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ff8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ffc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001000:	fa23 f002 	lsr.w	r0, r3, r2
 8001004:	bf18      	it	ne
 8001006:	4240      	negne	r0, r0
 8001008:	4770      	bx	lr
 800100a:	f04f 0000 	mov.w	r0, #0
 800100e:	4770      	bx	lr
 8001010:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001014:	d101      	bne.n	800101a <__aeabi_f2iz+0x3a>
 8001016:	0242      	lsls	r2, r0, #9
 8001018:	d105      	bne.n	8001026 <__aeabi_f2iz+0x46>
 800101a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800101e:	bf08      	it	eq
 8001020:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001024:	4770      	bx	lr
 8001026:	f04f 0000 	mov.w	r0, #0
 800102a:	4770      	bx	lr

0800102c <__aeabi_f2uiz>:
 800102c:	0042      	lsls	r2, r0, #1
 800102e:	d20e      	bcs.n	800104e <__aeabi_f2uiz+0x22>
 8001030:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001034:	d30b      	bcc.n	800104e <__aeabi_f2uiz+0x22>
 8001036:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800103e:	d409      	bmi.n	8001054 <__aeabi_f2uiz+0x28>
 8001040:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001044:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001048:	fa23 f002 	lsr.w	r0, r3, r2
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2uiz+0x32>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d102      	bne.n	8001064 <__aeabi_f2uiz+0x38>
 800105e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001062:	4770      	bx	lr
 8001064:	f04f 0000 	mov.w	r0, #0
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop

0800106c <__aeabi_uldivmod>:
 800106c:	b953      	cbnz	r3, 8001084 <__aeabi_uldivmod+0x18>
 800106e:	b94a      	cbnz	r2, 8001084 <__aeabi_uldivmod+0x18>
 8001070:	2900      	cmp	r1, #0
 8001072:	bf08      	it	eq
 8001074:	2800      	cmpeq	r0, #0
 8001076:	bf1c      	itt	ne
 8001078:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800107c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001080:	f000 b970 	b.w	8001364 <__aeabi_idiv0>
 8001084:	f1ad 0c08 	sub.w	ip, sp, #8
 8001088:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800108c:	f000 f806 	bl	800109c <__udivmoddi4>
 8001090:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001094:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001098:	b004      	add	sp, #16
 800109a:	4770      	bx	lr

0800109c <__udivmoddi4>:
 800109c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010a0:	9e08      	ldr	r6, [sp, #32]
 80010a2:	460d      	mov	r5, r1
 80010a4:	4604      	mov	r4, r0
 80010a6:	460f      	mov	r7, r1
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d14a      	bne.n	8001142 <__udivmoddi4+0xa6>
 80010ac:	428a      	cmp	r2, r1
 80010ae:	4694      	mov	ip, r2
 80010b0:	d965      	bls.n	800117e <__udivmoddi4+0xe2>
 80010b2:	fab2 f382 	clz	r3, r2
 80010b6:	b143      	cbz	r3, 80010ca <__udivmoddi4+0x2e>
 80010b8:	fa02 fc03 	lsl.w	ip, r2, r3
 80010bc:	f1c3 0220 	rsb	r2, r3, #32
 80010c0:	409f      	lsls	r7, r3
 80010c2:	fa20 f202 	lsr.w	r2, r0, r2
 80010c6:	4317      	orrs	r7, r2
 80010c8:	409c      	lsls	r4, r3
 80010ca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80010ce:	fa1f f58c 	uxth.w	r5, ip
 80010d2:	fbb7 f1fe 	udiv	r1, r7, lr
 80010d6:	0c22      	lsrs	r2, r4, #16
 80010d8:	fb0e 7711 	mls	r7, lr, r1, r7
 80010dc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80010e0:	fb01 f005 	mul.w	r0, r1, r5
 80010e4:	4290      	cmp	r0, r2
 80010e6:	d90a      	bls.n	80010fe <__udivmoddi4+0x62>
 80010e8:	eb1c 0202 	adds.w	r2, ip, r2
 80010ec:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80010f0:	f080 811b 	bcs.w	800132a <__udivmoddi4+0x28e>
 80010f4:	4290      	cmp	r0, r2
 80010f6:	f240 8118 	bls.w	800132a <__udivmoddi4+0x28e>
 80010fa:	3902      	subs	r1, #2
 80010fc:	4462      	add	r2, ip
 80010fe:	1a12      	subs	r2, r2, r0
 8001100:	b2a4      	uxth	r4, r4
 8001102:	fbb2 f0fe 	udiv	r0, r2, lr
 8001106:	fb0e 2210 	mls	r2, lr, r0, r2
 800110a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800110e:	fb00 f505 	mul.w	r5, r0, r5
 8001112:	42a5      	cmp	r5, r4
 8001114:	d90a      	bls.n	800112c <__udivmoddi4+0x90>
 8001116:	eb1c 0404 	adds.w	r4, ip, r4
 800111a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800111e:	f080 8106 	bcs.w	800132e <__udivmoddi4+0x292>
 8001122:	42a5      	cmp	r5, r4
 8001124:	f240 8103 	bls.w	800132e <__udivmoddi4+0x292>
 8001128:	4464      	add	r4, ip
 800112a:	3802      	subs	r0, #2
 800112c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001130:	1b64      	subs	r4, r4, r5
 8001132:	2100      	movs	r1, #0
 8001134:	b11e      	cbz	r6, 800113e <__udivmoddi4+0xa2>
 8001136:	40dc      	lsrs	r4, r3
 8001138:	2300      	movs	r3, #0
 800113a:	e9c6 4300 	strd	r4, r3, [r6]
 800113e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001142:	428b      	cmp	r3, r1
 8001144:	d908      	bls.n	8001158 <__udivmoddi4+0xbc>
 8001146:	2e00      	cmp	r6, #0
 8001148:	f000 80ec 	beq.w	8001324 <__udivmoddi4+0x288>
 800114c:	2100      	movs	r1, #0
 800114e:	e9c6 0500 	strd	r0, r5, [r6]
 8001152:	4608      	mov	r0, r1
 8001154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001158:	fab3 f183 	clz	r1, r3
 800115c:	2900      	cmp	r1, #0
 800115e:	d149      	bne.n	80011f4 <__udivmoddi4+0x158>
 8001160:	42ab      	cmp	r3, r5
 8001162:	d302      	bcc.n	800116a <__udivmoddi4+0xce>
 8001164:	4282      	cmp	r2, r0
 8001166:	f200 80f7 	bhi.w	8001358 <__udivmoddi4+0x2bc>
 800116a:	1a84      	subs	r4, r0, r2
 800116c:	eb65 0203 	sbc.w	r2, r5, r3
 8001170:	2001      	movs	r0, #1
 8001172:	4617      	mov	r7, r2
 8001174:	2e00      	cmp	r6, #0
 8001176:	d0e2      	beq.n	800113e <__udivmoddi4+0xa2>
 8001178:	e9c6 4700 	strd	r4, r7, [r6]
 800117c:	e7df      	b.n	800113e <__udivmoddi4+0xa2>
 800117e:	b902      	cbnz	r2, 8001182 <__udivmoddi4+0xe6>
 8001180:	deff      	udf	#255	; 0xff
 8001182:	fab2 f382 	clz	r3, r2
 8001186:	2b00      	cmp	r3, #0
 8001188:	f040 808f 	bne.w	80012aa <__udivmoddi4+0x20e>
 800118c:	1a8a      	subs	r2, r1, r2
 800118e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001192:	fa1f fe8c 	uxth.w	lr, ip
 8001196:	2101      	movs	r1, #1
 8001198:	fbb2 f5f7 	udiv	r5, r2, r7
 800119c:	fb07 2015 	mls	r0, r7, r5, r2
 80011a0:	0c22      	lsrs	r2, r4, #16
 80011a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80011a6:	fb0e f005 	mul.w	r0, lr, r5
 80011aa:	4290      	cmp	r0, r2
 80011ac:	d908      	bls.n	80011c0 <__udivmoddi4+0x124>
 80011ae:	eb1c 0202 	adds.w	r2, ip, r2
 80011b2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80011b6:	d202      	bcs.n	80011be <__udivmoddi4+0x122>
 80011b8:	4290      	cmp	r0, r2
 80011ba:	f200 80ca 	bhi.w	8001352 <__udivmoddi4+0x2b6>
 80011be:	4645      	mov	r5, r8
 80011c0:	1a12      	subs	r2, r2, r0
 80011c2:	b2a4      	uxth	r4, r4
 80011c4:	fbb2 f0f7 	udiv	r0, r2, r7
 80011c8:	fb07 2210 	mls	r2, r7, r0, r2
 80011cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011d0:	fb0e fe00 	mul.w	lr, lr, r0
 80011d4:	45a6      	cmp	lr, r4
 80011d6:	d908      	bls.n	80011ea <__udivmoddi4+0x14e>
 80011d8:	eb1c 0404 	adds.w	r4, ip, r4
 80011dc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80011e0:	d202      	bcs.n	80011e8 <__udivmoddi4+0x14c>
 80011e2:	45a6      	cmp	lr, r4
 80011e4:	f200 80ba 	bhi.w	800135c <__udivmoddi4+0x2c0>
 80011e8:	4610      	mov	r0, r2
 80011ea:	eba4 040e 	sub.w	r4, r4, lr
 80011ee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80011f2:	e79f      	b.n	8001134 <__udivmoddi4+0x98>
 80011f4:	f1c1 0720 	rsb	r7, r1, #32
 80011f8:	408b      	lsls	r3, r1
 80011fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80011fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8001202:	fa05 f401 	lsl.w	r4, r5, r1
 8001206:	fa20 f307 	lsr.w	r3, r0, r7
 800120a:	40fd      	lsrs	r5, r7
 800120c:	4323      	orrs	r3, r4
 800120e:	fa00 f901 	lsl.w	r9, r0, r1
 8001212:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8001216:	fa1f fe8c 	uxth.w	lr, ip
 800121a:	fbb5 f8f0 	udiv	r8, r5, r0
 800121e:	0c1c      	lsrs	r4, r3, #16
 8001220:	fb00 5518 	mls	r5, r0, r8, r5
 8001224:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001228:	fb08 f50e 	mul.w	r5, r8, lr
 800122c:	42a5      	cmp	r5, r4
 800122e:	fa02 f201 	lsl.w	r2, r2, r1
 8001232:	d90b      	bls.n	800124c <__udivmoddi4+0x1b0>
 8001234:	eb1c 0404 	adds.w	r4, ip, r4
 8001238:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800123c:	f080 8087 	bcs.w	800134e <__udivmoddi4+0x2b2>
 8001240:	42a5      	cmp	r5, r4
 8001242:	f240 8084 	bls.w	800134e <__udivmoddi4+0x2b2>
 8001246:	f1a8 0802 	sub.w	r8, r8, #2
 800124a:	4464      	add	r4, ip
 800124c:	1b64      	subs	r4, r4, r5
 800124e:	b29d      	uxth	r5, r3
 8001250:	fbb4 f3f0 	udiv	r3, r4, r0
 8001254:	fb00 4413 	mls	r4, r0, r3, r4
 8001258:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800125c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001260:	45a6      	cmp	lr, r4
 8001262:	d908      	bls.n	8001276 <__udivmoddi4+0x1da>
 8001264:	eb1c 0404 	adds.w	r4, ip, r4
 8001268:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 800126c:	d26b      	bcs.n	8001346 <__udivmoddi4+0x2aa>
 800126e:	45a6      	cmp	lr, r4
 8001270:	d969      	bls.n	8001346 <__udivmoddi4+0x2aa>
 8001272:	3b02      	subs	r3, #2
 8001274:	4464      	add	r4, ip
 8001276:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800127a:	fba0 8302 	umull	r8, r3, r0, r2
 800127e:	eba4 040e 	sub.w	r4, r4, lr
 8001282:	429c      	cmp	r4, r3
 8001284:	46c6      	mov	lr, r8
 8001286:	461d      	mov	r5, r3
 8001288:	d355      	bcc.n	8001336 <__udivmoddi4+0x29a>
 800128a:	d052      	beq.n	8001332 <__udivmoddi4+0x296>
 800128c:	b156      	cbz	r6, 80012a4 <__udivmoddi4+0x208>
 800128e:	ebb9 030e 	subs.w	r3, r9, lr
 8001292:	eb64 0405 	sbc.w	r4, r4, r5
 8001296:	fa04 f707 	lsl.w	r7, r4, r7
 800129a:	40cb      	lsrs	r3, r1
 800129c:	40cc      	lsrs	r4, r1
 800129e:	431f      	orrs	r7, r3
 80012a0:	e9c6 7400 	strd	r7, r4, [r6]
 80012a4:	2100      	movs	r1, #0
 80012a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012aa:	f1c3 0120 	rsb	r1, r3, #32
 80012ae:	fa02 fc03 	lsl.w	ip, r2, r3
 80012b2:	fa20 f201 	lsr.w	r2, r0, r1
 80012b6:	fa25 f101 	lsr.w	r1, r5, r1
 80012ba:	409d      	lsls	r5, r3
 80012bc:	432a      	orrs	r2, r5
 80012be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012c2:	fa1f fe8c 	uxth.w	lr, ip
 80012c6:	fbb1 f0f7 	udiv	r0, r1, r7
 80012ca:	fb07 1510 	mls	r5, r7, r0, r1
 80012ce:	0c11      	lsrs	r1, r2, #16
 80012d0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80012d4:	fb00 f50e 	mul.w	r5, r0, lr
 80012d8:	428d      	cmp	r5, r1
 80012da:	fa04 f403 	lsl.w	r4, r4, r3
 80012de:	d908      	bls.n	80012f2 <__udivmoddi4+0x256>
 80012e0:	eb1c 0101 	adds.w	r1, ip, r1
 80012e4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80012e8:	d22f      	bcs.n	800134a <__udivmoddi4+0x2ae>
 80012ea:	428d      	cmp	r5, r1
 80012ec:	d92d      	bls.n	800134a <__udivmoddi4+0x2ae>
 80012ee:	3802      	subs	r0, #2
 80012f0:	4461      	add	r1, ip
 80012f2:	1b49      	subs	r1, r1, r5
 80012f4:	b292      	uxth	r2, r2
 80012f6:	fbb1 f5f7 	udiv	r5, r1, r7
 80012fa:	fb07 1115 	mls	r1, r7, r5, r1
 80012fe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001302:	fb05 f10e 	mul.w	r1, r5, lr
 8001306:	4291      	cmp	r1, r2
 8001308:	d908      	bls.n	800131c <__udivmoddi4+0x280>
 800130a:	eb1c 0202 	adds.w	r2, ip, r2
 800130e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8001312:	d216      	bcs.n	8001342 <__udivmoddi4+0x2a6>
 8001314:	4291      	cmp	r1, r2
 8001316:	d914      	bls.n	8001342 <__udivmoddi4+0x2a6>
 8001318:	3d02      	subs	r5, #2
 800131a:	4462      	add	r2, ip
 800131c:	1a52      	subs	r2, r2, r1
 800131e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001322:	e739      	b.n	8001198 <__udivmoddi4+0xfc>
 8001324:	4631      	mov	r1, r6
 8001326:	4630      	mov	r0, r6
 8001328:	e709      	b.n	800113e <__udivmoddi4+0xa2>
 800132a:	4639      	mov	r1, r7
 800132c:	e6e7      	b.n	80010fe <__udivmoddi4+0x62>
 800132e:	4610      	mov	r0, r2
 8001330:	e6fc      	b.n	800112c <__udivmoddi4+0x90>
 8001332:	45c1      	cmp	r9, r8
 8001334:	d2aa      	bcs.n	800128c <__udivmoddi4+0x1f0>
 8001336:	ebb8 0e02 	subs.w	lr, r8, r2
 800133a:	eb63 050c 	sbc.w	r5, r3, ip
 800133e:	3801      	subs	r0, #1
 8001340:	e7a4      	b.n	800128c <__udivmoddi4+0x1f0>
 8001342:	4645      	mov	r5, r8
 8001344:	e7ea      	b.n	800131c <__udivmoddi4+0x280>
 8001346:	4603      	mov	r3, r0
 8001348:	e795      	b.n	8001276 <__udivmoddi4+0x1da>
 800134a:	4640      	mov	r0, r8
 800134c:	e7d1      	b.n	80012f2 <__udivmoddi4+0x256>
 800134e:	46d0      	mov	r8, sl
 8001350:	e77c      	b.n	800124c <__udivmoddi4+0x1b0>
 8001352:	3d02      	subs	r5, #2
 8001354:	4462      	add	r2, ip
 8001356:	e733      	b.n	80011c0 <__udivmoddi4+0x124>
 8001358:	4608      	mov	r0, r1
 800135a:	e70b      	b.n	8001174 <__udivmoddi4+0xd8>
 800135c:	4464      	add	r4, ip
 800135e:	3802      	subs	r0, #2
 8001360:	e743      	b.n	80011ea <__udivmoddi4+0x14e>
 8001362:	bf00      	nop

08001364 <__aeabi_idiv0>:
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop

08001368 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001374:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001376:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4313      	orrs	r3, r2
 800137e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001384:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4013      	ands	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800138c:	68fb      	ldr	r3, [r7, #12]
}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80013a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013ae:	4013      	ands	r3, r2
 80013b0:	660b      	str	r3, [r1, #96]	; 0x60
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80013c0:	4b23      	ldr	r3, [pc, #140]	; (8001450 <MX_ADC_Init+0x94>)
 80013c2:	4a24      	ldr	r2, [pc, #144]	; (8001454 <MX_ADC_Init+0x98>)
 80013c4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013c6:	4b22      	ldr	r3, [pc, #136]	; (8001450 <MX_ADC_Init+0x94>)
 80013c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80013cc:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80013ce:	4b20      	ldr	r3, [pc, #128]	; (8001450 <MX_ADC_Init+0x94>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013d4:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <MX_ADC_Init+0x94>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013da:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <MX_ADC_Init+0x94>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <MX_ADC_Init+0x94>)
 80013e2:	2204      	movs	r2, #4
 80013e4:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <MX_ADC_Init+0x94>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <MX_ADC_Init+0x94>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80013f2:	4b17      	ldr	r3, [pc, #92]	; (8001450 <MX_ADC_Init+0x94>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80013f8:	4b15      	ldr	r3, [pc, #84]	; (8001450 <MX_ADC_Init+0x94>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80013fe:	4b14      	ldr	r3, [pc, #80]	; (8001450 <MX_ADC_Init+0x94>)
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <MX_ADC_Init+0x94>)
 8001408:	2200      	movs	r2, #0
 800140a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800140c:	4b10      	ldr	r3, [pc, #64]	; (8001450 <MX_ADC_Init+0x94>)
 800140e:	2200      	movs	r2, #0
 8001410:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <MX_ADC_Init+0x94>)
 8001414:	2200      	movs	r2, #0
 8001416:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <MX_ADC_Init+0x94>)
 800141c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001420:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <MX_ADC_Init+0x94>)
 8001424:	2207      	movs	r2, #7
 8001426:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <MX_ADC_Init+0x94>)
 800142a:	2207      	movs	r2, #7
 800142c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <MX_ADC_Init+0x94>)
 8001430:	2200      	movs	r2, #0
 8001432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <MX_ADC_Init+0x94>)
 8001438:	2200      	movs	r2, #0
 800143a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800143c:	4804      	ldr	r0, [pc, #16]	; (8001450 <MX_ADC_Init+0x94>)
 800143e:	f003 fe11 	bl	8005064 <HAL_ADC_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001448:	f000 fd40 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000015c 	.word	0x2000015c
 8001454:	40012400 	.word	0x40012400

08001458 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a05      	ldr	r2, [pc, #20]	; (800147c <HAL_ADC_MspInit+0x24>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d103      	bne.n	8001472 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800146a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800146e:	f7ff ff7b 	bl	8001368 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40012400 	.word	0x40012400

08001480 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <HAL_ADC_MspDeInit+0x24>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d103      	bne.n	800149a <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001492:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001496:	f7ff ff7f 	bl	8001398 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40012400 	.word	0x40012400

080014a8 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <SYS_InitMeasurement+0x14>)
 80014ae:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <SYS_InitMeasurement+0x18>)
 80014b0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	2000015c 	.word	0x2000015c
 80014c0:	40012400 	.word	0x40012400

080014c4 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80014d2:	4813      	ldr	r0, [pc, #76]	; (8001520 <SYS_GetBatteryLevel+0x5c>)
 80014d4:	f000 f82a 	bl	800152c <ADC_ReadChannels>
 80014d8:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	80fb      	strh	r3, [r7, #6]
 80014e4:	e016      	b.n	8001514 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80014e6:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <SYS_GetBatteryLevel+0x60>)
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d00b      	beq.n	800150a <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <SYS_GetBatteryLevel+0x60>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	f640 43e4 	movw	r3, #3300	; 0xce4
 80014fc:	fb03 f202 	mul.w	r2, r3, r2
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	fbb2 f3f3 	udiv	r3, r2, r3
 8001506:	80fb      	strh	r3, [r7, #6]
 8001508:	e004      	b.n	8001514 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800150a:	4a07      	ldr	r2, [pc, #28]	; (8001528 <SYS_GetBatteryLevel+0x64>)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001512:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001514:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	b4002000 	.word	0xb4002000
 8001524:	1fff75aa 	.word	0x1fff75aa
 8001528:	004c08d8 	.word	0x004c08d8

0800152c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001538:	f107 0308 	add.w	r3, r7, #8
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001544:	f7ff ff3a 	bl	80013bc <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001548:	481a      	ldr	r0, [pc, #104]	; (80015b4 <ADC_ReadChannels+0x88>)
 800154a:	f004 fbaa 	bl	8005ca2 <HAL_ADCEx_Calibration_Start>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001554:	f000 fcba 	bl	8001ecc <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001564:	f107 0308 	add.w	r3, r7, #8
 8001568:	4619      	mov	r1, r3
 800156a:	4812      	ldr	r0, [pc, #72]	; (80015b4 <ADC_ReadChannels+0x88>)
 800156c:	f004 f8b6 	bl	80056dc <HAL_ADC_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001576:	f000 fca9 	bl	8001ecc <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800157a:	480e      	ldr	r0, [pc, #56]	; (80015b4 <ADC_ReadChannels+0x88>)
 800157c:	f003 ff92 	bl	80054a4 <HAL_ADC_Start>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001586:	f000 fca1 	bl	8001ecc <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800158a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800158e:	4809      	ldr	r0, [pc, #36]	; (80015b4 <ADC_ReadChannels+0x88>)
 8001590:	f004 f800 	bl	8005594 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001594:	4807      	ldr	r0, [pc, #28]	; (80015b4 <ADC_ReadChannels+0x88>)
 8001596:	f003 ffcb 	bl	8005530 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800159a:	4806      	ldr	r0, [pc, #24]	; (80015b4 <ADC_ReadChannels+0x88>)
 800159c:	f004 f891 	bl	80056c2 <HAL_ADC_GetValue>
 80015a0:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80015a2:	4804      	ldr	r0, [pc, #16]	; (80015b4 <ADC_ReadChannels+0x88>)
 80015a4:	f003 fef2 	bl	800538c <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80015a8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000015c 	.word	0x2000015c

080015b8 <LL_AHB1_GRP1_EnableClock>:
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80015c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80015d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4013      	ands	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015dc:	68fb      	ldr	r3, [r7, #12]
}
 80015de:	bf00      	nop
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80015ec:	2004      	movs	r0, #4
 80015ee:	f7ff ffe3 	bl	80015b8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015f2:	2001      	movs	r0, #1
 80015f4:	f7ff ffe0 	bl	80015b8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2102      	movs	r1, #2
 80015fc:	200b      	movs	r0, #11
 80015fe:	f004 fcf6 	bl	8005fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001602:	200b      	movs	r0, #11
 8001604:	f004 fd0d 	bl	8006022 <HAL_NVIC_EnableIRQ>

}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}

0800160c <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001618:	23ff      	movs	r3, #255	; 0xff
 800161a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001622:	d311      	bcc.n	8001648 <FLASH_IF_Write+0x3c>
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <FLASH_IF_Write+0x48>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	029a      	lsls	r2, r3, #10
 800162a:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <FLASH_IF_Write+0x4c>)
 800162c:	4013      	ands	r3, r2
 800162e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001632:	3b01      	subs	r3, #1
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	4293      	cmp	r3, r2
 8001638:	d306      	bcc.n	8001648 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f000 f85a 	bl	80016f8 <FLASH_IF_INT_Write>
 8001644:	4603      	mov	r3, r0
 8001646:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8001648:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	1fff75e0 	.word	0x1fff75e0
 8001658:	03fffc00 	.word	0x03fffc00

0800165c <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001668:	23ff      	movs	r3, #255	; 0xff
 800166a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001672:	d311      	bcc.n	8001698 <FLASH_IF_Read+0x3c>
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <FLASH_IF_Read+0x48>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	029a      	lsls	r2, r3, #10
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <FLASH_IF_Read+0x4c>)
 800167c:	4013      	ands	r3, r2
 800167e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001682:	3b01      	subs	r3, #1
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	4293      	cmp	r3, r2
 8001688:	d306      	bcc.n	8001698 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f000 f93a 	bl	8001908 <FLASH_IF_INT_Read>
 8001694:	4603      	mov	r3, r0
 8001696:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 8001698:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	1fff75e0 	.word	0x1fff75e0
 80016a8:	03fffc00 	.word	0x03fffc00

080016ac <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80016b6:	23ff      	movs	r3, #255	; 0xff
 80016b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80016c0:	d310      	bcc.n	80016e4 <FLASH_IF_Erase+0x38>
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <FLASH_IF_Erase+0x44>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	029a      	lsls	r2, r3, #10
 80016c8:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <FLASH_IF_Erase+0x48>)
 80016ca:	4013      	ands	r3, r2
 80016cc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80016d0:	3b01      	subs	r3, #1
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d305      	bcc.n	80016e4 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 80016d8:	6839      	ldr	r1, [r7, #0]
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f932 	bl	8001944 <FLASH_IF_INT_Erase>
 80016e0:	4603      	mov	r3, r0
 80016e2:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 80016e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	1fff75e0 	.word	0x1fff75e0
 80016f4:	03fffc00 	.word	0x03fffc00

080016f8 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b090      	sub	sp, #64	; 0x40
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t uSource = (uint32_t)pSource;
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t length = uLength;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00c      	beq.n	8001736 <FLASH_IF_INT_Write+0x3e>
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d009      	beq.n	8001736 <FLASH_IF_INT_Write+0x3e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	2b00      	cmp	r3, #0
 800172a:	d104      	bne.n	8001736 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	2b00      	cmp	r3, #0
 8001734:	d002      	beq.n	800173c <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 8001736:	f06f 0305 	mvn.w	r3, #5
 800173a:	e0da      	b.n	80018f2 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 800173c:	f000 f992 	bl	8001a64 <FLASH_IF_INT_Clear_Error>
 8001740:	4603      	mov	r3, r0
 8001742:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (ret_status == FLASH_IF_OK)
 8001746:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800174a:	2b00      	cmp	r3, #0
 800174c:	f040 80cf 	bne.w	80018ee <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001750:	f005 f8b2 	bl	80068b8 <HAL_FLASH_Unlock>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	f040 80c6 	bne.w	80018e8 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 800175c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800175e:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001762:	4b66      	ldr	r3, [pc, #408]	; (80018fc <FLASH_IF_INT_Write+0x204>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	0299      	lsls	r1, r3, #10
 8001768:	4b65      	ldr	r3, [pc, #404]	; (8001900 <FLASH_IF_INT_Write+0x208>)
 800176a:	400b      	ands	r3, r1
 800176c:	fbb2 f1f3 	udiv	r1, r2, r3
 8001770:	fb01 f303 	mul.w	r3, r1, r3
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	0adb      	lsrs	r3, r3, #11
 8001778:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 800177a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4413      	add	r3, r2
 8001780:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001784:	3b01      	subs	r3, #1
 8001786:	4a5d      	ldr	r2, [pc, #372]	; (80018fc <FLASH_IF_INT_Write+0x204>)
 8001788:	6812      	ldr	r2, [r2, #0]
 800178a:	0291      	lsls	r1, r2, #10
 800178c:	4a5c      	ldr	r2, [pc, #368]	; (8001900 <FLASH_IF_INT_Write+0x208>)
 800178e:	400a      	ands	r2, r1
 8001790:	fbb3 f1f2 	udiv	r1, r3, r2
 8001794:	fb01 f202 	mul.w	r2, r1, r2
 8001798:	1a9b      	subs	r3, r3, r2
 800179a:	0ada      	lsrs	r2, r3, #11
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	3301      	adds	r3, #1
 80017a2:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d905      	bls.n	80017b6 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 80017aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017b0:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80017b4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017ba:	e089      	b.n	80018d0 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 80017bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017be:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80017c2:	02db      	lsls	r3, r3, #11
 80017c4:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 80017c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f000 f925 	bl	8001a18 <FLASH_IF_INT_IsEmpty>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d031      	beq.n	8001838 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 80017d4:	4b4b      	ldr	r3, [pc, #300]	; (8001904 <FLASH_IF_INT_Write+0x20c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d103      	bne.n	80017e4 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 80017dc:	23fa      	movs	r3, #250	; 0xfa
 80017de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 80017e2:	e07e      	b.n	80018e2 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 80017e4:	4b47      	ldr	r3, [pc, #284]	; (8001904 <FLASH_IF_INT_Write+0x20c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6939      	ldr	r1, [r7, #16]
 80017ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 f88a 	bl	8001908 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 80017f4:	4b43      	ldr	r3, [pc, #268]	; (8001904 <FLASH_IF_INT_Write+0x20c>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017fe:	4413      	add	r3, r2
 8001800:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001802:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001804:	b292      	uxth	r2, r2
 8001806:	4618      	mov	r0, r3
 8001808:	f01d f942 	bl	801ea90 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001812:	4618      	mov	r0, r3
 8001814:	f000 f896 	bl	8001944 <FLASH_IF_INT_Erase>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 800181e:	23fe      	movs	r3, #254	; 0xfe
 8001820:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 8001824:	e05d      	b.n	80018e2 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 800182a:	4b36      	ldr	r3, [pc, #216]	; (8001904 <FLASH_IF_INT_Write+0x20c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 8001830:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001834:	61fb      	str	r3, [r7, #28]
 8001836:	e005      	b.n	8001844 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 8001838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = uSource;
 800183c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800183e:	623b      	str	r3, [r7, #32]
          current_length = length;
 8001840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001842:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001844:	2300      	movs	r3, #0
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
 8001848:	e026      	b.n	8001898 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 800184a:	6a3a      	ldr	r2, [r7, #32]
 800184c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184e:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001856:	2001      	movs	r0, #1
 8001858:	f004 ffea 	bl	8006830 <HAL_FLASH_Program>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d113      	bne.n	800188a <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001868:	6a3a      	ldr	r2, [r7, #32]
 800186a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800186c:	4413      	add	r3, r2
 800186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001872:	4299      	cmp	r1, r3
 8001874:	bf08      	it	eq
 8001876:	4290      	cmpeq	r0, r2
 8001878:	d003      	beq.n	8001882 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 800187a:	23fc      	movs	r3, #252	; 0xfc
 800187c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 8001880:	e00e      	b.n	80018a0 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	3308      	adds	r3, #8
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
 8001888:	e003      	b.n	8001892 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 800188a:	23fc      	movs	r3, #252	; 0xfc
 800188c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 8001890:	e006      	b.n	80018a0 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001894:	3308      	adds	r3, #8
 8001896:	62bb      	str	r3, [r7, #40]	; 0x28
 8001898:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	429a      	cmp	r2, r3
 800189e:	d3d4      	bcc.n	800184a <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 80018a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d11b      	bne.n	80018e0 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 80018a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ac:	4413      	add	r3, r2
 80018ae:	63bb      	str	r3, [r7, #56]	; 0x38
        uSource += length;
 80018b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b4:	4413      	add	r3, r2
 80018b6:	637b      	str	r3, [r7, #52]	; 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018c2:	bf28      	it	cs
 80018c4:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 80018c8:	633b      	str	r3, [r7, #48]	; 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80018ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018cc:	3301      	adds	r3, #1
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	4413      	add	r3, r2
 80018d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018d8:	429a      	cmp	r2, r3
 80018da:	f4ff af6f 	bcc.w	80017bc <FLASH_IF_INT_Write+0xc4>
 80018de:	e000      	b.n	80018e2 <FLASH_IF_INT_Write+0x1ea>
          break;
 80018e0:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 80018e2:	f005 f80b 	bl	80068fc <HAL_FLASH_Lock>
 80018e6:	e002      	b.n	80018ee <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 80018e8:	23fb      	movs	r3, #251	; 0xfb
 80018ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 80018ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3740      	adds	r7, #64	; 0x40
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	1fff75e0 	.word	0x1fff75e0
 8001900:	03fffc00 	.word	0x03fffc00
 8001904:	200001c0 	.word	0x200001c0

08001908 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <FLASH_IF_INT_Read+0x1c>
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8001924:	f06f 0305 	mvn.w	r3, #5
 8001928:	e008      	b.n	800193c <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	b29b      	uxth	r3, r3
 800192e:	461a      	mov	r2, r3
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f01d f8ac 	bl	801ea90 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001938:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 800194e:	2300      	movs	r3, #0
 8001950:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001964:	f06f 0305 	mvn.w	r3, #5
 8001968:	e04e      	b.n	8001a08 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 800196a:	f000 f87b 	bl	8001a64 <FLASH_IF_INT_Clear_Error>
 800196e:	4603      	mov	r3, r0
 8001970:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 8001972:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d144      	bne.n	8001a04 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 800197a:	f004 ff9d 	bl	80068b8 <HAL_FLASH_Unlock>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d13d      	bne.n	8001a00 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001984:	2302      	movs	r3, #2
 8001986:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <FLASH_IF_INT_Erase+0xcc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	0299      	lsls	r1, r3, #10
 8001994:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <FLASH_IF_INT_Erase+0xd0>)
 8001996:	400b      	ands	r3, r1
 8001998:	fbb2 f1f3 	udiv	r1, r2, r3
 800199c:	fb01 f303 	mul.w	r3, r1, r3
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	0adb      	lsrs	r3, r3, #11
 80019a4:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	4413      	add	r3, r2
 80019ac:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80019b0:	3b01      	subs	r3, #1
 80019b2:	4a17      	ldr	r2, [pc, #92]	; (8001a10 <FLASH_IF_INT_Erase+0xcc>)
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	0291      	lsls	r1, r2, #10
 80019b8:	4a16      	ldr	r2, [pc, #88]	; (8001a14 <FLASH_IF_INT_Erase+0xd0>)
 80019ba:	400a      	ands	r2, r1
 80019bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80019c0:	fb01 f202 	mul.w	r2, r1, r2
 80019c4:	1a9b      	subs	r3, r3, r2
 80019c6:	0ada      	lsrs	r2, r3, #11
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	3301      	adds	r3, #1
 80019ce:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 80019d0:	f107 0214 	add.w	r2, r7, #20
 80019d4:	f107 0308 	add.w	r3, r7, #8
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f005 f86e 	bl	8006abc <HAL_FLASHEx_Erase>
 80019e0:	4603      	mov	r3, r0
 80019e2:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 80019e4:	7fbb      	ldrb	r3, [r7, #30]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d007      	beq.n	80019fa <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 80019ea:	7fbb      	ldrb	r3, [r7, #30]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d101      	bne.n	80019f4 <FLASH_IF_INT_Erase+0xb0>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e001      	b.n	80019f8 <FLASH_IF_INT_Erase+0xb4>
 80019f4:	f06f 0301 	mvn.w	r3, #1
 80019f8:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 80019fa:	f004 ff7f 	bl	80068fc <HAL_FLASH_Lock>
 80019fe:	e001      	b.n	8001a04 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001a00:	23fb      	movs	r3, #251	; 0xfb
 8001a02:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001a04:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3720      	adds	r7, #32
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	1fff75e0 	.word	0x1fff75e0
 8001a14:	03fffc00 	.word	0x03fffc00

08001a18 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	e011      	b.n	8001a50 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a36:	bf08      	it	eq
 8001a38:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8001a3c:	d002      	beq.n	8001a44 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	60fb      	str	r3, [r7, #12]
      break;
 8001a42:	e009      	b.n	8001a58 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3308      	adds	r3, #8
 8001a48:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	3308      	adds	r3, #8
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d3e9      	bcc.n	8001a2c <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001a58:	68fb      	ldr	r3, [r7, #12]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001a6a:	23fb      	movs	r3, #251	; 0xfb
 8001a6c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001a6e:	f004 ff23 	bl	80068b8 <HAL_FLASH_Unlock>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d110      	bne.n	8001a9a <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <FLASH_IF_INT_Clear_Error+0x44>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <FLASH_IF_INT_Clear_Error+0x44>)
 8001a7e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001a82:	6193      	str	r3, [r2, #24]
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <FLASH_IF_INT_Clear_Error+0x44>)
 8001a86:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001a8a:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001a8c:	f004 ff36 	bl	80068fc <HAL_FLASH_Lock>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	58004000 	.word	0x58004000

08001aac <LL_AHB2_GRP1_EnableClock>:
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001aba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4013      	ands	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
}
 8001ad2:	bf00      	nop
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af0:	2001      	movs	r0, #1
 8001af2:	f7ff ffdb 	bl	8001aac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	2002      	movs	r0, #2
 8001af8:	f7ff ffd8 	bl	8001aac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001afc:	2004      	movs	r0, #4
 8001afe:	f7ff ffd5 	bl	8001aac <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 8001b02:	2200      	movs	r2, #0
 8001b04:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8001b08:	4821      	ldr	r0, [pc, #132]	; (8001b90 <MX_GPIO_Init+0xb4>)
 8001b0a:	f005 fad9 	bl	80070c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001b0e:	2201      	movs	r2, #1
 8001b10:	2120      	movs	r1, #32
 8001b12:	481f      	ldr	r0, [pc, #124]	; (8001b90 <MX_GPIO_Init+0xb4>)
 8001b14:	f005 fad4 	bl	80070c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2131      	movs	r1, #49	; 0x31
 8001b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b20:	f005 face 	bl	80070c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 8001b24:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001b28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b32:	2303      	movs	r3, #3
 8001b34:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4815      	ldr	r0, [pc, #84]	; (8001b90 <MX_GPIO_Init+0xb4>)
 8001b3c:	f005 f892 	bl	8006c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001b40:	2331      	movs	r3, #49	; 0x31
 8001b42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b44:	2301      	movs	r3, #1
 8001b46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	4619      	mov	r1, r3
 8001b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b58:	f005 f884 	bl	8006c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8001b5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b62:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4807      	ldr	r0, [pc, #28]	; (8001b90 <MX_GPIO_Init+0xb4>)
 8001b72:	f005 f877 	bl	8006c64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2100      	movs	r1, #0
 8001b7a:	2029      	movs	r0, #41	; 0x29
 8001b7c:	f004 fa37 	bl	8005fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b80:	2029      	movs	r0, #41	; 0x29
 8001b82:	f004 fa4e 	bl	8006022 <HAL_NVIC_EnableIRQ>

}
 8001b86:	bf00      	nop
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	48000400 	.word	0x48000400

08001b94 <LL_AHB2_GRP1_EnableClock>:
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
}
 8001bba:	bf00      	nop
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <LL_APB1_GRP1_EnableClock>:
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4013      	ands	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001be8:	68fb      	ldr	r3, [r7, #12]
}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <MX_I2C2_Init+0x74>)
 8001bfa:	4a1c      	ldr	r2, [pc, #112]	; (8001c6c <MX_I2C2_Init+0x78>)
 8001bfc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <MX_I2C2_Init+0x74>)
 8001c00:	4a1b      	ldr	r2, [pc, #108]	; (8001c70 <MX_I2C2_Init+0x7c>)
 8001c02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <MX_I2C2_Init+0x74>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <MX_I2C2_Init+0x74>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c10:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <MX_I2C2_Init+0x74>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001c16:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <MX_I2C2_Init+0x74>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <MX_I2C2_Init+0x74>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <MX_I2C2_Init+0x74>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c28:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <MX_I2C2_Init+0x74>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c2e:	480e      	ldr	r0, [pc, #56]	; (8001c68 <MX_I2C2_Init+0x74>)
 8001c30:	f005 fa76 	bl	8007120 <HAL_I2C_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001c3a:	f000 f947 	bl	8001ecc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4809      	ldr	r0, [pc, #36]	; (8001c68 <MX_I2C2_Init+0x74>)
 8001c42:	f005 ffc3 	bl	8007bcc <HAL_I2CEx_ConfigAnalogFilter>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001c4c:	f000 f93e 	bl	8001ecc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c50:	2100      	movs	r1, #0
 8001c52:	4805      	ldr	r0, [pc, #20]	; (8001c68 <MX_I2C2_Init+0x74>)
 8001c54:	f006 f804 	bl	8007c60 <HAL_I2CEx_ConfigDigitalFilter>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001c5e:	f000 f935 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200001c4 	.word	0x200001c4
 8001c6c:	40005800 	.word	0x40005800
 8001c70:	20303e5d 	.word	0x20303e5d

08001c74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b096      	sub	sp, #88	; 0x58
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	2238      	movs	r2, #56	; 0x38
 8001c92:	2100      	movs	r1, #0
 8001c94:	4618      	mov	r0, r3
 8001c96:	f01e f937 	bl	801ff08 <memset>
  if(i2cHandle->Instance==I2C2)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a21      	ldr	r2, [pc, #132]	; (8001d24 <HAL_I2C_MspInit+0xb0>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d13b      	bne.n	8001d1c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001ca8:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cae:	f107 030c 	add.w	r3, r7, #12
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f007 f9ee 	bl	8009094 <HAL_RCCEx_PeriphCLKConfig>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001cbe:	f000 f905 	bl	8001ecc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f7ff ff66 	bl	8001b94 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc8:	2002      	movs	r0, #2
 8001cca:	f7ff ff63 	bl	8001b94 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cd2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cd4:	2312      	movs	r3, #18
 8001cd6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cee:	f004 ffb9 	bl	8006c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cf6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cf8:	2312      	movs	r3, #18
 8001cfa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d00:	2300      	movs	r3, #0
 8001d02:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d04:	2304      	movs	r3, #4
 8001d06:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d08:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4806      	ldr	r0, [pc, #24]	; (8001d28 <HAL_I2C_MspInit+0xb4>)
 8001d10:	f004 ffa8 	bl	8006c64 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d14:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001d18:	f7ff ff54 	bl	8001bc4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	3758      	adds	r7, #88	; 0x58
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40005800 	.word	0x40005800
 8001d28:	48000400 	.word	0x48000400

08001d2c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3c:	f023 0218 	bic.w	r2, r3, #24
 8001d40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr
	...

08001d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d58:	b590      	push	{r4, r7, lr}
 8001d5a:	b0c3      	sub	sp, #268	; 0x10c
 8001d5c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d5e:	f002 ffaf 	bl	8004cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d62:	f000 f84f 	bl	8001e04 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d66:	f7ff feb9 	bl	8001adc <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001d6a:	f00a fd2b 	bl	800c7c4 <MX_LoRaWAN_Init>
  MX_I2C2_Init();
 8001d6e:	f7ff ff41 	bl	8001bf4 <MX_I2C2_Init>
    } else {
    	APP_LOG(TS_ON, VLEVEL_M, "Incorrect device ID: %x \r\n", bmp390_device_id);
    }
*/

  EnvionmentSensors envSensors(&hi2c2);
 8001d72:	463b      	mov	r3, r7
 8001d74:	491e      	ldr	r1, [pc, #120]	; (8001df0 <main+0x98>)
 8001d76:	4618      	mov	r0, r3
 8001d78:	f002 fe88 	bl	8004a8c <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef>
  float temperature = -99;
 8001d7c:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <main+0x9c>)
 8001d7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	temperature = envSensors.getTemperature();
 8001d82:	463b      	mov	r3, r7
 8001d84:	4618      	mov	r0, r3
 8001d86:	f002 febd 	bl	8004b04 <_ZN17EnvionmentSensors14getTemperatureEv>
 8001d8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
  	temperature *= 100;
 8001d8e:	491a      	ldr	r1, [pc, #104]	; (8001df8 <main+0xa0>)
 8001d90:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8001d94:	f7fe ffd4 	bl	8000d40 <__aeabi_fmul>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  	APP_LOG(TS_ON, VLEVEL_M, "temp: %u.%u \r\n", (uint8_t)temperature/100, (uint8_t)temperature%100);
 8001d9e:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8001da2:	f7ff f943 	bl	800102c <__aeabi_f2uiz>
 8001da6:	4603      	mov	r3, r0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	4a14      	ldr	r2, [pc, #80]	; (8001dfc <main+0xa4>)
 8001dac:	fba2 2303 	umull	r2, r3, r2, r3
 8001db0:	095b      	lsrs	r3, r3, #5
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	461c      	mov	r4, r3
 8001db6:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8001dba:	f7ff f937 	bl	800102c <__aeabi_f2uiz>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	4a0e      	ldr	r2, [pc, #56]	; (8001dfc <main+0xa4>)
 8001dc4:	fba2 1203 	umull	r1, r2, r2, r3
 8001dc8:	0952      	lsrs	r2, r2, #5
 8001dca:	2164      	movs	r1, #100	; 0x64
 8001dcc:	fb01 f202 	mul.w	r2, r1, r2
 8001dd0:	1a9b      	subs	r3, r3, r2
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	9400      	str	r4, [sp, #0]
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <main+0xa8>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	2100      	movs	r1, #0
 8001dde:	2002      	movs	r0, #2
 8001de0:	f01d fd9a 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
  	HAL_Delay(2000);
 8001de4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001de8:	f000 fb74 	bl	80024d4 <HAL_Delay>
  	temperature = envSensors.getTemperature();
 8001dec:	e7c9      	b.n	8001d82 <main+0x2a>
 8001dee:	bf00      	nop
 8001df0:	200001c4 	.word	0x200001c4
 8001df4:	c2c60000 	.word	0xc2c60000
 8001df8:	42c80000 	.word	0x42c80000
 8001dfc:	51eb851f 	.word	0x51eb851f
 8001e00:	0801ff94 	.word	0x0801ff94

08001e04 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b09a      	sub	sp, #104	; 0x68
 8001e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e0a:	f107 0320 	add.w	r3, r7, #32
 8001e0e:	2248      	movs	r2, #72	; 0x48
 8001e10:	2100      	movs	r1, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f01e f878 	bl	801ff08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e18:	f107 0308 	add.w	r3, r7, #8
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
 8001e28:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001e2a:	f005 ff65 	bl	8007cf8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f7ff ff7c 	bl	8001d2c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e34:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <_Z18SystemClock_Configv+0xc4>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e3c:	4a22      	ldr	r2, [pc, #136]	; (8001ec8 <_Z18SystemClock_Configv+0xc4>)
 8001e3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <_Z18SystemClock_Configv+0xc4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001e50:	2324      	movs	r3, #36	; 0x24
 8001e52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001e54:	2381      	movs	r3, #129	; 0x81
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001e60:	23b0      	movs	r3, #176	; 0xb0
 8001e62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e68:	f107 0320 	add.w	r3, r7, #32
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f006 f9ed 	bl	800824c <HAL_RCC_OscConfig>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	bf14      	ite	ne
 8001e78:	2301      	movne	r3, #1
 8001e7a:	2300      	moveq	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 8001e82:	f000 f823 	bl	8001ecc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001e86:	234f      	movs	r3, #79	; 0x4f
 8001e88:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e9e:	f107 0308 	add.w	r3, r7, #8
 8001ea2:	2102      	movs	r1, #2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f006 fd53 	bl	8008950 <HAL_RCC_ClockConfig>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	bf14      	ite	ne
 8001eb0:	2301      	movne	r3, #1
 8001eb2:	2300      	moveq	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8001eba:	f000 f807 	bl	8001ecc <Error_Handler>
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	3768      	adds	r7, #104	; 0x68
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	58000400 	.word	0x58000400

08001ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed0:	b672      	cpsid	i
}
 8001ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <Error_Handler+0x8>

08001ed6 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001eee:	bf00      	nop
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr

08001ef6 <LL_APB1_GRP1_EnableClock>:
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b085      	sub	sp, #20
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4013      	ands	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
	...

08001f28 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08c      	sub	sp, #48	; 0x30
 8001f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	222c      	movs	r2, #44	; 0x2c
 8001f32:	2100      	movs	r1, #0
 8001f34:	4618      	mov	r0, r3
 8001f36:	f01d ffe7 	bl	801ff08 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f3a:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <MX_RTC_Init+0x9c>)
 8001f3c:	4a22      	ldr	r2, [pc, #136]	; (8001fc8 <MX_RTC_Init+0xa0>)
 8001f3e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001f40:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <MX_RTC_Init+0x9c>)
 8001f42:	221f      	movs	r2, #31
 8001f44:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f46:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <MX_RTC_Init+0x9c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <MX_RTC_Init+0x9c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f52:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <MX_RTC_Init+0x9c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f58:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <MX_RTC_Init+0x9c>)
 8001f5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f5e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001f60:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <MX_RTC_Init+0x9c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001f66:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <MX_RTC_Init+0x9c>)
 8001f68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f6e:	4815      	ldr	r0, [pc, #84]	; (8001fc4 <MX_RTC_Init+0x9c>)
 8001f70:	f007 f9aa 	bl	80092c8 <HAL_RTC_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001f7a:	f7ff ffa7 	bl	8001ecc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001f7e:	4811      	ldr	r0, [pc, #68]	; (8001fc4 <MX_RTC_Init+0x9c>)
 8001f80:	f007 fca0 	bl	80098c4 <HAL_RTCEx_SetSSRU_IT>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001f8a:	f7ff ff9f 	bl	8001ecc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001f9a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f9e:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001fa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001fa6:	1d3b      	adds	r3, r7, #4
 8001fa8:	2200      	movs	r2, #0
 8001faa:	4619      	mov	r1, r3
 8001fac:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <MX_RTC_Init+0x9c>)
 8001fae:	f007 fa0d 	bl	80093cc <HAL_RTC_SetAlarm_IT>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001fb8:	f7ff ff88 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001fbc:	bf00      	nop
 8001fbe:	3730      	adds	r7, #48	; 0x30
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000218 	.word	0x20000218
 8001fc8:	40002800 	.word	0x40002800

08001fcc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b090      	sub	sp, #64	; 0x40
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fd4:	f107 0308 	add.w	r3, r7, #8
 8001fd8:	2238      	movs	r2, #56	; 0x38
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f01d ff93 	bl	801ff08 <memset>
  if(rtcHandle->Instance==RTC)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a16      	ldr	r2, [pc, #88]	; (8002040 <HAL_RTC_MspInit+0x74>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d125      	bne.n	8002038 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001fec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ff0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001ff2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ff6:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ff8:	f107 0308 	add.w	r3, r7, #8
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f007 f849 	bl	8009094 <HAL_RCCEx_PeriphCLKConfig>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002008:	f7ff ff60 	bl	8001ecc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800200c:	f7ff ff63 	bl	8001ed6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002010:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002014:	f7ff ff6f 	bl	8001ef6 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8002018:	2200      	movs	r2, #0
 800201a:	2100      	movs	r1, #0
 800201c:	2002      	movs	r0, #2
 800201e:	f003 ffe6 	bl	8005fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8002022:	2002      	movs	r0, #2
 8002024:	f003 fffd 	bl	8006022 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002028:	2200      	movs	r2, #0
 800202a:	2100      	movs	r1, #0
 800202c:	202a      	movs	r0, #42	; 0x2a
 800202e:	f003 ffde 	bl	8005fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002032:	202a      	movs	r0, #42	; 0x2a
 8002034:	f003 fff5 	bl	8006022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002038:	bf00      	nop
 800203a:	3740      	adds	r7, #64	; 0x40
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40002800 	.word	0x40002800

08002044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr

08002050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <NMI_Handler+0x4>

08002056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800205a:	e7fe      	b.n	800205a <HardFault_Handler+0x4>

0800205c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002060:	e7fe      	b.n	8002060 <MemManage_Handler+0x4>

08002062 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002066:	e7fe      	b.n	8002066 <BusFault_Handler+0x4>

08002068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800206c:	e7fe      	b.n	800206c <UsageFault_Handler+0x4>

0800206e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr

0800207a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr

08002086 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr

08002092 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr
	...

080020a0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80020a4:	4802      	ldr	r0, [pc, #8]	; (80020b0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80020a6:	f007 fc49 	bl	800993c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000218 	.word	0x20000218

080020b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80020b8:	4802      	ldr	r0, [pc, #8]	; (80020c4 <DMA1_Channel1_IRQHandler+0x10>)
 80020ba:	f004 fa49 	bl	8006550 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200002f8 	.word	0x200002f8

080020c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020cc:	4802      	ldr	r0, [pc, #8]	; (80020d8 <USART1_IRQHandler+0x10>)
 80020ce:	f008 fa7f 	bl	800a5d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000264 	.word	0x20000264

080020dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 80020e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020e4:	f005 f804 	bl	80070f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}

080020ec <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80020f0:	4802      	ldr	r0, [pc, #8]	; (80020fc <RTC_Alarm_IRQHandler+0x10>)
 80020f2:	f007 fad3 	bl	800969c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000218 	.word	0x20000218

08002100 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <SUBGHZ_Radio_IRQHandler+0x10>)
 8002106:	f007 ff87 	bl	800a018 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000250 	.word	0x20000250

08002114 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800211c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002120:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002122:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4313      	orrs	r3, r2
 800212a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800212c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002130:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4013      	ands	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002138:	68fb      	ldr	r3, [r7, #12]
}
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr

08002144 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <MX_SUBGHZ_Init+0x20>)
 800214a:	2208      	movs	r2, #8
 800214c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800214e:	4805      	ldr	r0, [pc, #20]	; (8002164 <MX_SUBGHZ_Init+0x20>)
 8002150:	f007 fce0 	bl	8009b14 <HAL_SUBGHZ_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800215a:	f7ff feb7 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000250 	.word	0x20000250

08002168 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002170:	2001      	movs	r0, #1
 8002172:	f7ff ffcf 	bl	8002114 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8002176:	2200      	movs	r2, #0
 8002178:	2100      	movs	r1, #0
 800217a:	2032      	movs	r0, #50	; 0x32
 800217c:	f003 ff37 	bl	8005fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002180:	2032      	movs	r0, #50	; 0x32
 8002182:	f003 ff4e 	bl	8006022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <LL_RCC_SetClkAfterWakeFromStop>:
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8002196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80021a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	608b      	str	r3, [r1, #8]
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80021b8:	4b02      	ldr	r3, [pc, #8]	; (80021c4 <LL_FLASH_GetUDN+0x10>)
 80021ba:	681b      	ldr	r3, [r3, #0]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr
 80021c4:	1fff7580 	.word	0x1fff7580

080021c8 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80021cc:	4b03      	ldr	r3, [pc, #12]	; (80021dc <LL_FLASH_GetDeviceID+0x14>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	b2db      	uxtb	r3, r3
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	1fff7584 	.word	0x1fff7584

080021e0 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80021e4:	4b03      	ldr	r3, [pc, #12]	; (80021f4 <LL_FLASH_GetSTCompanyID+0x14>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	0a1b      	lsrs	r3, r3, #8
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	1fff7584 	.word	0x1fff7584

080021f8 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 80021fc:	2000      	movs	r0, #0
 80021fe:	f7ff ffc6 	bl	800218e <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8002202:	f01d f8cb 	bl	801f39c <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <SystemApp_Init+0x48>)
 8002208:	2201      	movs	r2, #1
 800220a:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 800220c:	f000 f986 	bl	800251c <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002210:	f01d fb54 	bl	801f8bc <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002214:	480b      	ldr	r0, [pc, #44]	; (8002244 <SystemApp_Init+0x4c>)
 8002216:	f01d fbff 	bl	801fa18 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800221a:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <SystemApp_Init+0x50>)
 800221c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002220:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002222:	2002      	movs	r0, #2
 8002224:	f01d fc06 	bl	801fa34 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8002228:	f7ff f93e 	bl	80014a8 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 800222c:	f000 f9fc 	bl	8002628 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8002230:	f01c fbbe 	bl	801e9b0 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002234:	2101      	movs	r1, #1
 8002236:	2001      	movs	r0, #1
 8002238:	f01c fbfa 	bl	801ea30 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}
 8002240:	2000025c 	.word	0x2000025c
 8002244:	0800240d 	.word	0x0800240d
 8002248:	58004000 	.word	0x58004000

0800224c <GetBatteryLevel>:

  /* USER CODE END UTIL_SEQ_Idle_2 */
}

uint8_t GetBatteryLevel(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8002256:	f7ff f935 	bl	80014c4 <SYS_GetBatteryLevel>
 800225a:	4603      	mov	r3, r0
 800225c:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 800225e:	88bb      	ldrh	r3, [r7, #4]
 8002260:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002264:	4293      	cmp	r3, r2
 8002266:	d902      	bls.n	800226e <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8002268:	23fe      	movs	r3, #254	; 0xfe
 800226a:	71fb      	strb	r3, [r7, #7]
 800226c:	e014      	b.n	8002298 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 800226e:	88bb      	ldrh	r3, [r7, #4]
 8002270:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8002274:	d202      	bcs.n	800227c <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	71fb      	strb	r3, [r7, #7]
 800227a:	e00d      	b.n	8002298 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 800227c:	88bb      	ldrh	r3, [r7, #4]
 800227e:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8002282:	461a      	mov	r2, r3
 8002284:	4613      	mov	r3, r2
 8002286:	01db      	lsls	r3, r3, #7
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	461a      	mov	r2, r3
 800228e:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <GetBatteryLevel+0x58>)
 8002290:	fba3 2302 	umull	r2, r3, r3, r2
 8002294:	09db      	lsrs	r3, r3, #7
 8002296:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8002298:	79fb      	ldrb	r3, [r7, #7]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	1b4e81b5 	.word	0x1b4e81b5

080022a8 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 f98d 	bl	80025d4 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe fe8f 	bl	8000fe0 <__aeabi_f2iz>
 80022c2:	4603      	mov	r3, r0
 80022c4:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 80022c6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3720      	adds	r7, #32
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 80022d2:	b590      	push	{r4, r7, lr}
 80022d4:	b087      	sub	sp, #28
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 80022de:	f7ff ff69 	bl	80021b4 <LL_FLASH_GetUDN>
 80022e2:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022ea:	d138      	bne.n	800235e <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 80022ec:	f002 fd08 	bl	8004d00 <HAL_GetUIDw0>
 80022f0:	4604      	mov	r4, r0
 80022f2:	f002 fd19 	bl	8004d28 <HAL_GetUIDw2>
 80022f6:	4603      	mov	r3, r0
 80022f8:	4423      	add	r3, r4
 80022fa:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 80022fc:	f002 fd0a 	bl	8004d14 <HAL_GetUIDw1>
 8002300:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	0e1a      	lsrs	r2, r3, #24
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3307      	adds	r3, #7
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	0c1a      	lsrs	r2, r3, #16
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3306      	adds	r3, #6
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	0a1a      	lsrs	r2, r3, #8
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3305      	adds	r3, #5
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3304      	adds	r3, #4
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	0e1a      	lsrs	r2, r3, #24
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3303      	adds	r3, #3
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	0c1a      	lsrs	r2, r3, #16
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3302      	adds	r3, #2
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	0a1a      	lsrs	r2, r3, #8
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3301      	adds	r3, #1
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	b2da      	uxtb	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 800235c:	e031      	b.n	80023c2 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3307      	adds	r3, #7
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	0a1a      	lsrs	r2, r3, #8
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3306      	adds	r3, #6
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	0c1a      	lsrs	r2, r3, #16
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3305      	adds	r3, #5
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	0e1a      	lsrs	r2, r3, #24
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3304      	adds	r3, #4
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 800238c:	f7ff ff1c 	bl	80021c8 <LL_FLASH_GetDeviceID>
 8002390:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3303      	adds	r3, #3
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 800239c:	f7ff ff20 	bl	80021e0 <LL_FLASH_GetSTCompanyID>
 80023a0:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3302      	adds	r3, #2
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	0a1a      	lsrs	r2, r3, #8
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3301      	adds	r3, #1
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	0c1b      	lsrs	r3, r3, #16
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	701a      	strb	r2, [r3, #0]
}
 80023c2:	bf00      	nop
 80023c4:	371c      	adds	r7, #28
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd90      	pop	{r4, r7, pc}

080023ca <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 80023ca:	b590      	push	{r4, r7, lr}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 80023d2:	f7ff feef 	bl	80021b4 <LL_FLASH_GetUDN>
 80023d6:	4602      	mov	r2, r0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023e4:	d10d      	bne.n	8002402 <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80023e6:	f002 fc8b 	bl	8004d00 <HAL_GetUIDw0>
 80023ea:	4604      	mov	r4, r0
 80023ec:	f002 fc92 	bl	8004d14 <HAL_GetUIDw1>
 80023f0:	4603      	mov	r3, r0
 80023f2:	405c      	eors	r4, r3
 80023f4:	f002 fc98 	bl	8004d28 <HAL_GetUIDw2>
 80023f8:	4603      	mov	r3, r0
 80023fa:	ea84 0203 	eor.w	r2, r4, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	bd90      	pop	{r4, r7, pc}
	...

0800240c <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af02      	add	r7, sp, #8
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8002416:	f107 0308 	add.w	r3, r7, #8
 800241a:	4618      	mov	r0, r3
 800241c:	f01c fc12 	bl	801ec44 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002426:	9200      	str	r2, [sp, #0]
 8002428:	4a07      	ldr	r2, [pc, #28]	; (8002448 <TimestampNow+0x3c>)
 800242a:	2110      	movs	r1, #16
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f81d 	bl	800246c <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7fd fea0 	bl	8000178 <strlen>
 8002438:	4603      	mov	r3, r0
 800243a:	b29a      	uxth	r2, r3
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002440:	bf00      	nop
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	0801ffa4 	.word	0x0801ffa4

0800244c <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002450:	2101      	movs	r1, #1
 8002452:	2002      	movs	r0, #2
 8002454:	f01c fabc 	bl	801e9d0 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}

0800245c <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002460:	2100      	movs	r1, #0
 8002462:	2002      	movs	r0, #2
 8002464:	f01c fab4 	bl	801e9d0 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002468:	bf00      	nop
 800246a:	bd80      	pop	{r7, pc}

0800246c <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 800246c:	b40c      	push	{r2, r3}
 800246e:	b580      	push	{r7, lr}
 8002470:	b084      	sub	sp, #16
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002478:	f107 031c 	add.w	r3, r7, #28
 800247c:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800247e:	6839      	ldr	r1, [r7, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f01c fdaf 	bl	801efe8 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 800248a:	bf00      	nop
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002494:	b002      	add	sp, #8
 8002496:	4770      	bx	lr

08002498 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr

080024ac <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_GetTick+0x24>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d002      	beq.n	80024c4 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80024be:	f000 f97f 	bl	80027c0 <TIMER_IF_GetTimerValue>
 80024c2:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80024c4:	687b      	ldr	r3, [r7, #4]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	2000025c 	.word	0x2000025c

080024d4 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 f9f5 	bl	80028ce <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <LL_AHB2_GRP1_EnableClock>:
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80024f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4313      	orrs	r3, r2
 8002502:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002508:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4013      	ands	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002510:	68fb      	ldr	r3, [r7, #12]
}
 8002512:	bf00      	nop
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8002522:	f002 fc0b 	bl	8004d3c <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8002526:	f002 fc0f 	bl	8004d48 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 800252a:	f002 fc13 	bl	8004d54 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 800252e:	1d3b      	adds	r3, r7, #4
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 800253c:	2301      	movs	r3, #1
 800253e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8002544:	2303      	movs	r3, #3
 8002546:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8002548:	2001      	movs	r0, #1
 800254a:	f7ff ffcf 	bl	80024ec <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 800254e:	2002      	movs	r0, #2
 8002550:	f7ff ffcc 	bl	80024ec <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 8002554:	2002      	movs	r0, #2
 8002556:	f7ff ffc9 	bl	80024ec <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 800255a:	2002      	movs	r0, #2
 800255c:	f7ff ffc6 	bl	80024ec <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8002560:	2301      	movs	r3, #1
 8002562:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8002564:	1d3b      	adds	r3, r7, #4
 8002566:	4619      	mov	r1, r3
 8002568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800256c:	f004 fb7a 	bl	8006c64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8002570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002574:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8002576:	1d3b      	adds	r3, r7, #4
 8002578:	4619      	mov	r1, r3
 800257a:	4815      	ldr	r0, [pc, #84]	; (80025d0 <DBG_Init+0xb4>)
 800257c:	f004 fb72 	bl	8006c64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8002580:	2308      	movs	r3, #8
 8002582:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8002584:	1d3b      	adds	r3, r7, #4
 8002586:	4619      	mov	r1, r3
 8002588:	4811      	ldr	r0, [pc, #68]	; (80025d0 <DBG_Init+0xb4>)
 800258a:	f004 fb6b 	bl	8006c64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 800258e:	2310      	movs	r3, #16
 8002590:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8002592:	1d3b      	adds	r3, r7, #4
 8002594:	4619      	mov	r1, r3
 8002596:	480e      	ldr	r0, [pc, #56]	; (80025d0 <DBG_Init+0xb4>)
 8002598:	f004 fb64 	bl	8006c64 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 800259c:	2200      	movs	r2, #0
 800259e:	2101      	movs	r1, #1
 80025a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a4:	f004 fd8c 	bl	80070c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 80025a8:	2200      	movs	r2, #0
 80025aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025ae:	4808      	ldr	r0, [pc, #32]	; (80025d0 <DBG_Init+0xb4>)
 80025b0:	f004 fd86 	bl	80070c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 80025b4:	2200      	movs	r2, #0
 80025b6:	2108      	movs	r1, #8
 80025b8:	4805      	ldr	r0, [pc, #20]	; (80025d0 <DBG_Init+0xb4>)
 80025ba:	f004 fd81 	bl	80070c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 80025be:	2200      	movs	r2, #0
 80025c0:	2110      	movs	r1, #16
 80025c2:	4803      	ldr	r0, [pc, #12]	; (80025d0 <DBG_Init+0xb4>)
 80025c4:	f004 fd7c 	bl	80070c0 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80025c8:	bf00      	nop
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	48000400 	.word	0x48000400

080025d4 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b087      	sub	sp, #28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 80025dc:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <EnvSensors_Read+0x40>)
 80025de:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 80025e0:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <EnvSensors_Read+0x44>)
 80025e2:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 80025e4:	4b0d      	ldr	r3, [pc, #52]	; (800261c <EnvSensors_Read+0x48>)
 80025e6:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a08      	ldr	r2, [pc, #32]	; (8002620 <EnvSensors_Read+0x4c>)
 80025fe:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a08      	ldr	r2, [pc, #32]	; (8002624 <EnvSensors_Read+0x50>)
 8002604:	611a      	str	r2, [r3, #16]

  return 0;
 8002606:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002608:	4618      	mov	r0, r3
 800260a:	371c      	adds	r7, #28
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	42480000 	.word	0x42480000
 8002618:	41900000 	.word	0x41900000
 800261c:	447a0000 	.word	0x447a0000
 8002620:	003e090d 	.word	0x003e090d
 8002624:	000503ab 	.word	0x000503ab

08002628 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8002632:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8002634:	4618      	mov	r0, r3
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr

0800263e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr

0800264a <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
}
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 800266a:	4b14      	ldr	r3, [pc, #80]	; (80026bc <TIMER_IF_Init+0x5c>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	f083 0301 	eor.w	r3, r3, #1
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d01b      	beq.n	80026b0 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002678:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <TIMER_IF_Init+0x60>)
 800267a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800267e:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002680:	f7ff fc52 	bl	8001f28 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002684:	f000 f856 	bl	8002734 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800268c:	480c      	ldr	r0, [pc, #48]	; (80026c0 <TIMER_IF_Init+0x60>)
 800268e:	f006 ffa9 	bl	80095e4 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002692:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <TIMER_IF_Init+0x60>)
 8002694:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002698:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800269a:	4809      	ldr	r0, [pc, #36]	; (80026c0 <TIMER_IF_Init+0x60>)
 800269c:	f007 f8e0 	bl	8009860 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 80026a0:	2000      	movs	r0, #0
 80026a2:	f000 f9d3 	bl	8002a4c <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 80026a6:	f000 f85f 	bl	8002768 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 80026aa:	4b04      	ldr	r3, [pc, #16]	; (80026bc <TIMER_IF_Init+0x5c>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 80026b0:	79fb      	ldrb	r3, [r7, #7]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	2000025d 	.word	0x2000025d
 80026c0:	20000218 	.word	0x20000218

080026c4 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08e      	sub	sp, #56	; 0x38
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80026d2:	f107 0308 	add.w	r3, r7, #8
 80026d6:	222c      	movs	r2, #44	; 0x2c
 80026d8:	2100      	movs	r1, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	f01d fc14 	bl	801ff08 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80026e0:	f000 f828 	bl	8002734 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <TIMER_IF_StartTimer+0x68>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	4413      	add	r3, r2
 80026ec:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80026ee:	2300      	movs	r3, #0
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80026fc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002700:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002702:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002706:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002708:	f107 0308 	add.w	r3, r7, #8
 800270c:	2201      	movs	r2, #1
 800270e:	4619      	mov	r1, r3
 8002710:	4807      	ldr	r0, [pc, #28]	; (8002730 <TIMER_IF_StartTimer+0x6c>)
 8002712:	f006 fe5b 	bl	80093cc <HAL_RTC_SetAlarm_IT>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 800271c:	f7ff fbd6 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002720:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002724:	4618      	mov	r0, r3
 8002726:	3738      	adds	r7, #56	; 0x38
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20000260 	.word	0x20000260
 8002730:	20000218 	.word	0x20000218

08002734 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <TIMER_IF_StopTimer+0x2c>)
 8002740:	2201      	movs	r2, #1
 8002742:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002744:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002748:	4806      	ldr	r0, [pc, #24]	; (8002764 <TIMER_IF_StopTimer+0x30>)
 800274a:	f006 ff4b 	bl	80095e4 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800274e:	4b05      	ldr	r3, [pc, #20]	; (8002764 <TIMER_IF_StopTimer+0x30>)
 8002750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002754:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002756:	79fb      	ldrb	r3, [r7, #7]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40002800 	.word	0x40002800
 8002764:	20000218 	.word	0x20000218

08002768 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 800276c:	f000 f98e 	bl	8002a8c <GetTimerTicks>
 8002770:	4603      	mov	r3, r0
 8002772:	4a03      	ldr	r2, [pc, #12]	; (8002780 <TIMER_IF_SetTimerContext+0x18>)
 8002774:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002776:	4b02      	ldr	r3, [pc, #8]	; (8002780 <TIMER_IF_SetTimerContext+0x18>)
 8002778:	681b      	ldr	r3, [r3, #0]
}
 800277a:	4618      	mov	r0, r3
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000260 	.word	0x20000260

08002784 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002788:	4b02      	ldr	r3, [pc, #8]	; (8002794 <TIMER_IF_GetTimerContext+0x10>)
 800278a:	681b      	ldr	r3, [r3, #0]
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr
 8002794:	20000260 	.word	0x20000260

08002798 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80027a2:	f000 f973 	bl	8002a8c <GetTimerTicks>
 80027a6:	4602      	mov	r2, r0
 80027a8:	4b04      	ldr	r3, [pc, #16]	; (80027bc <TIMER_IF_GetTimerElapsedTime+0x24>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 80027b0:	687b      	ldr	r3, [r7, #4]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20000260 	.word	0x20000260

080027c0 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <TIMER_IF_GetTimerValue+0x24>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80027d2:	f000 f95b 	bl	8002a8c <GetTimerTicks>
 80027d6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80027d8:	687b      	ldr	r3, [r7, #4]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	2000025d 	.word	0x2000025d

080027e8 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80027ee:	2300      	movs	r3, #0
 80027f0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 80027f2:	2303      	movs	r3, #3
 80027f4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 80027f6:	687b      	ldr	r3, [r7, #4]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr

08002802 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002802:	b5b0      	push	{r4, r5, r7, lr}
 8002804:	b084      	sub	sp, #16
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800280a:	2100      	movs	r1, #0
 800280c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	2000      	movs	r0, #0
 8002812:	460a      	mov	r2, r1
 8002814:	4603      	mov	r3, r0
 8002816:	0d95      	lsrs	r5, r2, #22
 8002818:	0294      	lsls	r4, r2, #10
 800281a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800281e:	f04f 0300 	mov.w	r3, #0
 8002822:	4620      	mov	r0, r4
 8002824:	4629      	mov	r1, r5
 8002826:	f7fe fc21 	bl	800106c <__aeabi_uldivmod>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4613      	mov	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002832:	68fb      	ldr	r3, [r7, #12]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bdb0      	pop	{r4, r5, r7, pc}

0800283c <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 800283c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002840:	b085      	sub	sp, #20
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002846:	2100      	movs	r1, #0
 8002848:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	2000      	movs	r0, #0
 800284e:	460c      	mov	r4, r1
 8002850:	4605      	mov	r5, r0
 8002852:	4620      	mov	r0, r4
 8002854:	4629      	mov	r1, r5
 8002856:	f04f 0a00 	mov.w	sl, #0
 800285a:	f04f 0b00 	mov.w	fp, #0
 800285e:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002862:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002866:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800286a:	4650      	mov	r0, sl
 800286c:	4659      	mov	r1, fp
 800286e:	1b02      	subs	r2, r0, r4
 8002870:	eb61 0305 	sbc.w	r3, r1, r5
 8002874:	f04f 0000 	mov.w	r0, #0
 8002878:	f04f 0100 	mov.w	r1, #0
 800287c:	0099      	lsls	r1, r3, #2
 800287e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002882:	0090      	lsls	r0, r2, #2
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	eb12 0804 	adds.w	r8, r2, r4
 800288c:	eb43 0905 	adc.w	r9, r3, r5
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	f04f 0300 	mov.w	r3, #0
 8002898:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800289c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028a4:	4690      	mov	r8, r2
 80028a6:	4699      	mov	r9, r3
 80028a8:	4640      	mov	r0, r8
 80028aa:	4649      	mov	r1, r9
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	0a82      	lsrs	r2, r0, #10
 80028b6:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80028ba:	0a8b      	lsrs	r3, r1, #10
 80028bc:	4613      	mov	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 80028c0:	68fb      	ldr	r3, [r7, #12]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80028cc:	4770      	bx	lr

080028ce <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b084      	sub	sp, #16
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff ff93 	bl	8002802 <TIMER_IF_Convert_ms2Tick>
 80028dc:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 80028de:	f000 f8d5 	bl	8002a8c <GetTimerTicks>
 80028e2:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80028e4:	e000      	b.n	80028e8 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 80028e6:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80028e8:	f000 f8d0 	bl	8002a8c <GetTimerTicks>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d8f6      	bhi.n	80028e6 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 80028f8:	bf00      	nop
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800290a:	f01c fe95 	bl	801f638 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800291e:	f000 f8a5 	bl	8002a6c <TIMER_IF_BkUp_Read_MSBticks>
 8002922:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	3301      	adds	r3, #1
 8002928:	4618      	mov	r0, r3
 800292a:	f000 f88f 	bl	8002a4c <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 800292e:	bf00      	nop
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002936:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800293a:	b08c      	sub	sp, #48	; 0x30
 800293c:	af00      	add	r7, sp, #0
 800293e:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002944:	f000 f8a2 	bl	8002a8c <GetTimerTicks>
 8002948:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800294a:	f000 f88f 	bl	8002a6c <TIMER_IF_BkUp_Read_MSBticks>
 800294e:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	2200      	movs	r2, #0
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	60fa      	str	r2, [r7, #12]
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	000b      	movs	r3, r1
 8002964:	2200      	movs	r2, #0
 8002966:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002968:	2000      	movs	r0, #0
 800296a:	460c      	mov	r4, r1
 800296c:	4605      	mov	r5, r0
 800296e:	eb12 0804 	adds.w	r8, r2, r4
 8002972:	eb43 0905 	adc.w	r9, r3, r5
 8002976:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800297a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	f04f 0300 	mov.w	r3, #0
 8002986:	0a82      	lsrs	r2, r0, #10
 8002988:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800298c:	0a8b      	lsrs	r3, r1, #10
 800298e:	4613      	mov	r3, r2
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	2200      	movs	r2, #0
 8002996:	603b      	str	r3, [r7, #0]
 8002998:	607a      	str	r2, [r7, #4]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80029a0:	f04f 0b00 	mov.w	fp, #0
 80029a4:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff ff46 	bl	800283c <TIMER_IF_Convert_Tick2ms>
 80029b0:	4603      	mov	r3, r0
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80029b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3730      	adds	r7, #48	; 0x30
 80029be:	46bd      	mov	sp, r7
 80029c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080029c4 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	2100      	movs	r1, #0
 80029d0:	4803      	ldr	r0, [pc, #12]	; (80029e0 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 80029d2:	f006 ffd7 	bl	8009984 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000218 	.word	0x20000218

080029e4 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	2101      	movs	r1, #1
 80029f0:	4803      	ldr	r0, [pc, #12]	; (8002a00 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80029f2:	f006 ffc7 	bl	8009984 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000218 	.word	0x20000218

08002a04 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4804      	ldr	r0, [pc, #16]	; (8002a24 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002a12:	f006 ffcf 	bl	80099b4 <HAL_RTCEx_BKUPRead>
 8002a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002a18:	687b      	ldr	r3, [r7, #4]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000218 	.word	0x20000218

08002a28 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002a32:	2101      	movs	r1, #1
 8002a34:	4804      	ldr	r0, [pc, #16]	; (8002a48 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002a36:	f006 ffbd 	bl	80099b4 <HAL_RTCEx_BKUPRead>
 8002a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002a3c:	687b      	ldr	r3, [r7, #4]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000218 	.word	0x20000218

08002a4c <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	2102      	movs	r1, #2
 8002a58:	4803      	ldr	r0, [pc, #12]	; (8002a68 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002a5a:	f006 ff93 	bl	8009984 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000218 	.word	0x20000218

08002a6c <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002a72:	2102      	movs	r1, #2
 8002a74:	4804      	ldr	r0, [pc, #16]	; (8002a88 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002a76:	f006 ff9d 	bl	80099b4 <HAL_RTCEx_BKUPRead>
 8002a7a:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002a7c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20000218 	.word	0x20000218

08002a8c <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002a92:	480b      	ldr	r0, [pc, #44]	; (8002ac0 <GetTimerTicks+0x34>)
 8002a94:	f7ff fdd9 	bl	800264a <LL_RTC_TIME_GetSubSecond>
 8002a98:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002a9a:	e003      	b.n	8002aa4 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002a9c:	4808      	ldr	r0, [pc, #32]	; (8002ac0 <GetTimerTicks+0x34>)
 8002a9e:	f7ff fdd4 	bl	800264a <LL_RTC_TIME_GetSubSecond>
 8002aa2:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002aa4:	4806      	ldr	r0, [pc, #24]	; (8002ac0 <GetTimerTicks+0x34>)
 8002aa6:	f7ff fdd0 	bl	800264a <LL_RTC_TIME_GetSubSecond>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d1f4      	bne.n	8002a9c <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40002800 	.word	0x40002800

08002ac4 <LL_AHB2_GRP1_EnableClock>:
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ad2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
}
 8002aea:	bf00      	nop
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr

08002af4 <LL_APB2_GRP1_EnableClock>:
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4013      	ands	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b18:	68fb      	ldr	r3, [r7, #12]
}
 8002b1a:	bf00      	nop
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <LL_APB2_GRP1_DisableClock>:
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	43db      	mvns	r3, r3
 8002b36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	660b      	str	r3, [r1, #96]	; 0x60
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b4c:	4b22      	ldr	r3, [pc, #136]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002b4e:	4a23      	ldr	r2, [pc, #140]	; (8002bdc <MX_USART1_UART_Init+0x94>)
 8002b50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b52:	4b21      	ldr	r3, [pc, #132]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b5a:	4b1f      	ldr	r3, [pc, #124]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b60:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b66:	4b1c      	ldr	r3, [pc, #112]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b6c:	4b1a      	ldr	r3, [pc, #104]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002b6e:	220c      	movs	r2, #12
 8002b70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b72:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b78:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b7e:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b84:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b8a:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b90:	4811      	ldr	r0, [pc, #68]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002b92:	f007 fc00 	bl	800a396 <HAL_UART_Init>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002b9c:	f7ff f996 	bl	8001ecc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	480d      	ldr	r0, [pc, #52]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002ba4:	f009 fd23 	bl	800c5ee <HAL_UARTEx_SetTxFifoThreshold>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002bae:	f7ff f98d 	bl	8001ecc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	4808      	ldr	r0, [pc, #32]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002bb6:	f009 fd58 	bl	800c66a <HAL_UARTEx_SetRxFifoThreshold>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002bc0:	f7ff f984 	bl	8001ecc <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002bc4:	4804      	ldr	r0, [pc, #16]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002bc6:	f009 fcd7 	bl	800c578 <HAL_UARTEx_EnableFifoMode>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002bd0:	f7ff f97c 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bd4:	bf00      	nop
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	20000264 	.word	0x20000264
 8002bdc:	40013800 	.word	0x40013800

08002be0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b096      	sub	sp, #88	; 0x58
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bf8:	f107 030c 	add.w	r3, r7, #12
 8002bfc:	2238      	movs	r2, #56	; 0x38
 8002bfe:	2100      	movs	r1, #0
 8002c00:	4618      	mov	r0, r3
 8002c02:	f01d f981 	bl	801ff08 <memset>
  if(uartHandle->Instance==USART1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a2f      	ldr	r2, [pc, #188]	; (8002cc8 <HAL_UART_MspInit+0xe8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d156      	bne.n	8002cbe <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c10:	2301      	movs	r3, #1
 8002c12:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c14:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002c18:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c1a:	f107 030c 	add.w	r3, r7, #12
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f006 fa38 	bl	8009094 <HAL_RCCEx_PeriphCLKConfig>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002c2a:	f7ff f94f 	bl	8001ecc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c2e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c32:	f7ff ff5f 	bl	8002af4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c36:	2002      	movs	r0, #2
 8002c38:	f7ff ff44 	bl	8002ac4 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002c3c:	23c0      	movs	r3, #192	; 0xc0
 8002c3e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c40:	2302      	movs	r3, #2
 8002c42:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c4c:	2307      	movs	r3, #7
 8002c4e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c54:	4619      	mov	r1, r3
 8002c56:	481d      	ldr	r0, [pc, #116]	; (8002ccc <HAL_UART_MspInit+0xec>)
 8002c58:	f004 f804 	bl	8006c64 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002c5c:	4b1c      	ldr	r3, [pc, #112]	; (8002cd0 <HAL_UART_MspInit+0xf0>)
 8002c5e:	4a1d      	ldr	r2, [pc, #116]	; (8002cd4 <HAL_UART_MspInit+0xf4>)
 8002c60:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002c62:	4b1b      	ldr	r3, [pc, #108]	; (8002cd0 <HAL_UART_MspInit+0xf0>)
 8002c64:	2212      	movs	r2, #18
 8002c66:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c68:	4b19      	ldr	r3, [pc, #100]	; (8002cd0 <HAL_UART_MspInit+0xf0>)
 8002c6a:	2210      	movs	r2, #16
 8002c6c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c6e:	4b18      	ldr	r3, [pc, #96]	; (8002cd0 <HAL_UART_MspInit+0xf0>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c74:	4b16      	ldr	r3, [pc, #88]	; (8002cd0 <HAL_UART_MspInit+0xf0>)
 8002c76:	2280      	movs	r2, #128	; 0x80
 8002c78:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c7a:	4b15      	ldr	r3, [pc, #84]	; (8002cd0 <HAL_UART_MspInit+0xf0>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c80:	4b13      	ldr	r3, [pc, #76]	; (8002cd0 <HAL_UART_MspInit+0xf0>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002c86:	4b12      	ldr	r3, [pc, #72]	; (8002cd0 <HAL_UART_MspInit+0xf0>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c8c:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <HAL_UART_MspInit+0xf0>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002c92:	480f      	ldr	r0, [pc, #60]	; (8002cd0 <HAL_UART_MspInit+0xf0>)
 8002c94:	f003 f9e2 	bl	800605c <HAL_DMA_Init>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002c9e:	f7ff f915 	bl	8001ecc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a0a      	ldr	r2, [pc, #40]	; (8002cd0 <HAL_UART_MspInit+0xf0>)
 8002ca6:	67da      	str	r2, [r3, #124]	; 0x7c
 8002ca8:	4a09      	ldr	r2, [pc, #36]	; (8002cd0 <HAL_UART_MspInit+0xf0>)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2102      	movs	r1, #2
 8002cb2:	2024      	movs	r0, #36	; 0x24
 8002cb4:	f003 f99b 	bl	8005fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cb8:	2024      	movs	r0, #36	; 0x24
 8002cba:	f003 f9b2 	bl	8006022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002cbe:	bf00      	nop
 8002cc0:	3758      	adds	r7, #88	; 0x58
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40013800 	.word	0x40013800
 8002ccc:	48000400 	.word	0x48000400
 8002cd0:	200002f8 	.word	0x200002f8
 8002cd4:	40020008 	.word	0x40020008

08002cd8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a0b      	ldr	r2, [pc, #44]	; (8002d14 <HAL_UART_MspDeInit+0x3c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d10f      	bne.n	8002d0a <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002cea:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002cee:	f7ff ff19 	bl	8002b24 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8002cf2:	21c0      	movs	r1, #192	; 0xc0
 8002cf4:	4808      	ldr	r0, [pc, #32]	; (8002d18 <HAL_UART_MspDeInit+0x40>)
 8002cf6:	f004 f915 	bl	8006f24 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f003 fa54 	bl	80061ac <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002d04:	2024      	movs	r0, #36	; 0x24
 8002d06:	f003 f99a 	bl	800603e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40013800 	.word	0x40013800
 8002d18:	48000400 	.word	0x48000400

08002d1c <LL_APB2_GRP1_ForceReset>:
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr

08002d3e <LL_APB2_GRP1_ReleaseReset>:
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8002d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d54:	4013      	ands	r3, r2
 8002d56:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr
	...

08002d64 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002d6c:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <LL_EXTI_EnableIT_0_31+0x24>)
 8002d6e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002d72:	4905      	ldr	r1, [pc, #20]	; (8002d88 <LL_EXTI_EnableIT_0_31+0x24>)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	58000800 	.word	0x58000800

08002d8c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002d94:	4a07      	ldr	r2, [pc, #28]	; (8002db4 <vcom_Init+0x28>)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002d9a:	f7fe fc25 	bl	80015e8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002d9e:	f7ff fed3 	bl	8002b48 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8002da2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002da6:	f7ff ffdd 	bl	8002d64 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002daa:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	2000035c 	.word	0x2000035c

08002db8 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002dbc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002dc0:	f7ff ffac 	bl	8002d1c <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8002dc4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002dc8:	f7ff ffb9 	bl	8002d3e <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002dcc:	4804      	ldr	r0, [pc, #16]	; (8002de0 <vcom_DeInit+0x28>)
 8002dce:	f7ff ff83 	bl	8002cd8 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002dd2:	200f      	movs	r0, #15
 8002dd4:	f003 f933 	bl	800603e <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002dd8:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000264 	.word	0x20000264

08002de4 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002df0:	887b      	ldrh	r3, [r7, #2]
 8002df2:	461a      	mov	r2, r3
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	4804      	ldr	r0, [pc, #16]	; (8002e08 <vcom_Trace_DMA+0x24>)
 8002df8:	f007 fb6a 	bl	800a4d0 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002dfc:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000264 	.word	0x20000264

08002e0c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002e14:	4a19      	ldr	r2, [pc, #100]	; (8002e7c <vcom_ReceiveInit+0x70>)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002e1a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e1e:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002e20:	f107 0308 	add.w	r3, r7, #8
 8002e24:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002e28:	4815      	ldr	r0, [pc, #84]	; (8002e80 <vcom_ReceiveInit+0x74>)
 8002e2a:	f009 fb18 	bl	800c45e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002e2e:	bf00      	nop
 8002e30:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <vcom_ReceiveInit+0x74>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e3e:	d0f7      	beq.n	8002e30 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002e40:	bf00      	nop
 8002e42:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <vcom_ReceiveInit+0x74>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e50:	d1f7      	bne.n	8002e42 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002e52:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <vcom_ReceiveInit+0x74>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <vcom_ReceiveInit+0x74>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002e60:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002e62:	4807      	ldr	r0, [pc, #28]	; (8002e80 <vcom_ReceiveInit+0x74>)
 8002e64:	f009 fb56 	bl	800c514 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002e68:	2201      	movs	r2, #1
 8002e6a:	4906      	ldr	r1, [pc, #24]	; (8002e84 <vcom_ReceiveInit+0x78>)
 8002e6c:	4804      	ldr	r0, [pc, #16]	; (8002e80 <vcom_ReceiveInit+0x74>)
 8002e6e:	f007 fae3 	bl	800a438 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002e72:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20000360 	.word	0x20000360
 8002e80:	20000264 	.word	0x20000264
 8002e84:	20000358 	.word	0x20000358

08002e88 <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a05      	ldr	r2, [pc, #20]	; (8002eac <HAL_UART_TxCpltCallback+0x24>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d103      	bne.n	8002ea2 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002e9a:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <HAL_UART_TxCpltCallback+0x28>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40013800 	.word	0x40013800
 8002eb0:	2000035c 	.word	0x2000035c

08002eb4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a0d      	ldr	r2, [pc, #52]	; (8002ef8 <HAL_UART_RxCpltCallback+0x44>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d113      	bne.n	8002eee <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002ec6:	4b0d      	ldr	r3, [pc, #52]	; (8002efc <HAL_UART_RxCpltCallback+0x48>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <HAL_UART_RxCpltCallback+0x30>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d105      	bne.n	8002ee4 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002ed8:	4b08      	ldr	r3, [pc, #32]	; (8002efc <HAL_UART_RxCpltCallback+0x48>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2200      	movs	r2, #0
 8002ede:	2101      	movs	r1, #1
 8002ee0:	4807      	ldr	r0, [pc, #28]	; (8002f00 <HAL_UART_RxCpltCallback+0x4c>)
 8002ee2:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	4906      	ldr	r1, [pc, #24]	; (8002f00 <HAL_UART_RxCpltCallback+0x4c>)
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f007 faa5 	bl	800a438 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002eee:	bf00      	nop
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40013800 	.word	0x40013800
 8002efc:	20000360 	.word	0x20000360
 8002f00:	20000358 	.word	0x20000358

08002f04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f04:	480d      	ldr	r0, [pc, #52]	; (8002f3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f06:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f08:	f7ff fb99 	bl	800263e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f0c:	480c      	ldr	r0, [pc, #48]	; (8002f40 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f0e:	490d      	ldr	r1, [pc, #52]	; (8002f44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f10:	4a0d      	ldr	r2, [pc, #52]	; (8002f48 <LoopForever+0xe>)
  movs r3, #0
 8002f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f14:	e002      	b.n	8002f1c <LoopCopyDataInit>

08002f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f1a:	3304      	adds	r3, #4

08002f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f20:	d3f9      	bcc.n	8002f16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f22:	4a0a      	ldr	r2, [pc, #40]	; (8002f4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f24:	4c0a      	ldr	r4, [pc, #40]	; (8002f50 <LoopForever+0x16>)
  movs r3, #0
 8002f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f28:	e001      	b.n	8002f2e <LoopFillZerobss>

08002f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f2c:	3204      	adds	r2, #4

08002f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f30:	d3fb      	bcc.n	8002f2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f32:	f01c fff1 	bl	801ff18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f36:	f7fe ff0f 	bl	8001d58 <main>

08002f3a <LoopForever>:

LoopForever:
    b LoopForever
 8002f3a:	e7fe      	b.n	8002f3a <LoopForever>
  ldr   r0, =_estack
 8002f3c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f44:	20000140 	.word	0x20000140
  ldr r2, =_sidata
 8002f48:	08021064 	.word	0x08021064
  ldr r2, =_sbss
 8002f4c:	20000140 	.word	0x20000140
  ldr r4, =_ebss
 8002f50:	20002258 	.word	0x20002258

08002f54 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f54:	e7fe      	b.n	8002f54 <ADC_IRQHandler>

08002f56 <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b084      	sub	sp, #16
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f001 fae2 	bl	800452c <null_ptr_check>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8002f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d131      	bne.n	8002fd8 <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	7a1b      	ldrb	r3, [r3, #8]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d003      	beq.n	8002f84 <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	729a      	strb	r2, [r3, #10]
 8002f82:	e002      	b.n	8002f8a <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	729a      	strb	r2, [r3, #10]
        }

        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 8002f8a:	f107 010e 	add.w	r1, r7, #14
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	2000      	movs	r0, #0
 8002f94:	f000 f826 	bl	8002fe4 <bmp3_get_regs>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8002f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d119      	bne.n	8002fd8 <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 8002fa4:	7bbb      	ldrb	r3, [r7, #14]
 8002fa6:	2b50      	cmp	r3, #80	; 0x50
 8002fa8:	d002      	beq.n	8002fb0 <bmp3_init+0x5a>
 8002faa:	7bbb      	ldrb	r3, [r7, #14]
 8002fac:	2b60      	cmp	r3, #96	; 0x60
 8002fae:	d111      	bne.n	8002fd4 <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 8002fb0:	7bba      	ldrb	r2, [r7, #14]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f98f 	bl	80032da <bmp3_soft_reset>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8002fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d107      	bne.n	8002fd8 <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 fb37 	bl	800363c <get_calib_data>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8002fd2:	e001      	b.n	8002fd8 <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 8002fd4:	23fe      	movs	r3, #254	; 0xfe
 8002fd6:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8002fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8002fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fe8:	b08b      	sub	sp, #44	; 0x2c
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	603b      	str	r3, [r7, #0]
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002ff6:	6838      	ldr	r0, [r7, #0]
 8002ff8:	f001 fa98 	bl	800452c <null_ptr_check>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 8003002:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003006:	2b00      	cmp	r3, #0
 8003008:	d172      	bne.n	80030f0 <bmp3_get_regs+0x10c>
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d06f      	beq.n	80030f0 <bmp3_get_regs+0x10c>
    {
 8003010:	466b      	mov	r3, sp
 8003012:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	7a9b      	ldrb	r3, [r3, #10]
 8003018:	461a      	mov	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4413      	add	r3, r2
 800301e:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	7a9b      	ldrb	r3, [r3, #10]
 8003024:	461a      	mov	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	18d1      	adds	r1, r2, r3
 800302a:	460b      	mov	r3, r1
 800302c:	3b01      	subs	r3, #1
 800302e:	61bb      	str	r3, [r7, #24]
 8003030:	2300      	movs	r3, #0
 8003032:	4688      	mov	r8, r1
 8003034:	4699      	mov	r9, r3
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003042:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003046:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800304a:	2300      	movs	r3, #0
 800304c:	460c      	mov	r4, r1
 800304e:	461d      	mov	r5, r3
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	00eb      	lsls	r3, r5, #3
 800305a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800305e:	00e2      	lsls	r2, r4, #3
 8003060:	1dcb      	adds	r3, r1, #7
 8003062:	08db      	lsrs	r3, r3, #3
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	ebad 0d03 	sub.w	sp, sp, r3
 800306a:	466b      	mov	r3, sp
 800306c:	3300      	adds	r3, #0
 800306e:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	7a1b      	ldrb	r3, [r3, #8]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d025      	beq.n	80030c4 <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 8003078:	7bfb      	ldrb	r3, [r7, #15]
 800307a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800307e:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68dc      	ldr	r4, [r3, #12]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	7bf8      	ldrb	r0, [r7, #15]
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	6979      	ldr	r1, [r7, #20]
 800308e:	47a0      	blx	r4
 8003090:	4603      	mov	r3, r0
 8003092:	461a      	mov	r2, r3
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 8003098:	2300      	movs	r3, #0
 800309a:	623b      	str	r3, [r7, #32]
 800309c:	e00d      	b.n	80030ba <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	7a9b      	ldrb	r3, [r3, #10]
 80030a2:	461a      	mov	r2, r3
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	441a      	add	r2, r3
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	440b      	add	r3, r1
 80030ae:	6979      	ldr	r1, [r7, #20]
 80030b0:	5c8a      	ldrb	r2, [r1, r2]
 80030b2:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	3301      	adds	r3, #1
 80030b8:	623b      	str	r3, [r7, #32]
 80030ba:	6a3a      	ldr	r2, [r7, #32]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d3ed      	bcc.n	800309e <bmp3_get_regs+0xba>
 80030c2:	e00b      	b.n	80030dc <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68dc      	ldr	r4, [r3, #12]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	7bf8      	ldrb	r0, [r7, #15]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	47a0      	blx	r4
 80030d4:	4603      	mov	r3, r0
 80030d6:	461a      	mov	r2, r3
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 80030e6:	23f9      	movs	r3, #249	; 0xf9
 80030e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80030ec:	46b5      	mov	sp, r6
    {
 80030ee:	e002      	b.n	80030f6 <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80030f0:	23ff      	movs	r3, #255	; 0xff
 80030f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 80030f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	372c      	adds	r7, #44	; 0x2c
 80030fe:	46bd      	mov	sp, r7
 8003100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003104 <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8003104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003108:	b08b      	sub	sp, #44	; 0x2c
 800310a:	af00      	add	r7, sp, #0
 800310c:	60f8      	str	r0, [r7, #12]
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	607a      	str	r2, [r7, #4]
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	466b      	mov	r3, sp
 8003116:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	0059      	lsls	r1, r3, #1
 800311c:	460b      	mov	r3, r1
 800311e:	3b01      	subs	r3, #1
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	2300      	movs	r3, #0
 8003124:	4688      	mov	r8, r1
 8003126:	4699      	mov	r9, r3
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003134:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003138:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800313c:	2300      	movs	r3, #0
 800313e:	460c      	mov	r4, r1
 8003140:	461d      	mov	r5, r3
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	00eb      	lsls	r3, r5, #3
 800314c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003150:	00e2      	lsls	r2, r4, #3
 8003152:	1dcb      	adds	r3, r1, #7
 8003154:	08db      	lsrs	r3, r3, #3
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	ebad 0d03 	sub.w	sp, sp, r3
 800315c:	466b      	mov	r3, sp
 800315e:	3300      	adds	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003162:	6838      	ldr	r0, [r7, #0]
 8003164:	f001 f9e2 	bl	800452c <null_ptr_check>
 8003168:	4603      	mov	r3, r0
 800316a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 800316e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003172:	2b00      	cmp	r3, #0
 8003174:	d14e      	bne.n	8003214 <bmp3_set_regs+0x110>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d04b      	beq.n	8003214 <bmp3_set_regs+0x110>
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d048      	beq.n	8003214 <bmp3_set_regs+0x110>
    {
        if (len != 0)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d041      	beq.n	800320c <bmp3_set_regs+0x108>
        {
            temp_buff[0] = reg_data[0];
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	781a      	ldrb	r2, [r3, #0]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	7a1b      	ldrb	r3, [r3, #8]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d114      	bne.n	80031c2 <bmp3_set_regs+0xbe>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003198:	2300      	movs	r3, #0
 800319a:	77fb      	strb	r3, [r7, #31]
 800319c:	e00d      	b.n	80031ba <bmp3_set_regs+0xb6>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800319e:	7ffb      	ldrb	r3, [r7, #31]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	4413      	add	r3, r2
 80031a4:	781a      	ldrb	r2, [r3, #0]
 80031a6:	7ffb      	ldrb	r3, [r7, #31]
 80031a8:	68f9      	ldr	r1, [r7, #12]
 80031aa:	440b      	add	r3, r1
 80031ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80031b4:	7ffb      	ldrb	r3, [r7, #31]
 80031b6:	3301      	adds	r3, #1
 80031b8:	77fb      	strb	r3, [r7, #31]
 80031ba:	7ffb      	ldrb	r3, [r7, #31]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d8ed      	bhi.n	800319e <bmp3_set_regs+0x9a>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d909      	bls.n	80031dc <bmp3_set_regs+0xd8>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	6979      	ldr	r1, [r7, #20]
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 fa59 	bl	8003686 <interleave_reg_addr>
                temp_len = len * 2;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	623b      	str	r3, [r7, #32]
 80031da:	e001      	b.n	80031e0 <bmp3_set_regs+0xdc>
            }
            else
            {
                temp_len = len;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	691c      	ldr	r4, [r3, #16]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	7818      	ldrb	r0, [r3, #0]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	6a3a      	ldr	r2, [r7, #32]
 80031ee:	6979      	ldr	r1, [r7, #20]
 80031f0:	47a0      	blx	r4
 80031f2:	4603      	mov	r3, r0
 80031f4:	461a      	mov	r2, r3
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00b      	beq.n	800321c <bmp3_set_regs+0x118>
            {
                rslt = BMP3_E_COMM_FAIL;
 8003204:	23f9      	movs	r3, #249	; 0xf9
 8003206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len != 0)
 800320a:	e007      	b.n	800321c <bmp3_set_regs+0x118>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 800320c:	23fa      	movs	r3, #250	; 0xfa
 800320e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len != 0)
 8003212:	e003      	b.n	800321c <bmp3_set_regs+0x118>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8003214:	23ff      	movs	r3, #255	; 0xff
 8003216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800321a:	e000      	b.n	800321e <bmp3_set_regs+0x11a>
        if (len != 0)
 800321c:	bf00      	nop
    }

    return rslt;
 800321e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003222:	46b5      	mov	sp, r6
}
 8003224:	4618      	mov	r0, r3
 8003226:	372c      	adds	r7, #44	; 0x2c
 8003228:	46bd      	mov	sp, r7
 800322a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800322e <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b084      	sub	sp, #16
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003238:	6838      	ldr	r0, [r7, #0]
 800323a:	f001 f977 	bl	800452c <null_ptr_check>
 800323e:	4603      	mov	r3, r0
 8003240:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8003242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d141      	bne.n	80032ce <bmp3_set_sensor_settings+0xa0>
    {
        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	2006      	movs	r0, #6
 800324e:	f001 f956 	bl	80044fe <are_settings_changed>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <bmp3_set_sensor_settings+0x36>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, dev);
 8003258:	6839      	ldr	r1, [r7, #0]
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 fa77 	bl	800374e <set_pwr_ctrl_settings>
 8003260:	4603      	mov	r3, r0
 8003262:	73fb      	strb	r3, [r7, #15]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings) && (!rslt))
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	20f0      	movs	r0, #240	; 0xf0
 8003268:	f001 f949 	bl	80044fe <are_settings_changed>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d009      	beq.n	8003286 <bmp3_set_sensor_settings+0x58>
 8003272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d105      	bne.n	8003286 <bmp3_set_sensor_settings+0x58>
        {
            /* Set the over sampling, ODR and filter settings*/
            rslt = set_odr_filter_settings(desired_settings, dev);
 800327a:	6839      	ldr	r1, [r7, #0]
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 fab5 	bl	80037ec <set_odr_filter_settings>
 8003282:	4603      	mov	r3, r0
 8003284:	73fb      	strb	r3, [r7, #15]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings) && (!rslt))
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 800328c:	f001 f937 	bl	80044fe <are_settings_changed>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d009      	beq.n	80032aa <bmp3_set_sensor_settings+0x7c>
 8003296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d105      	bne.n	80032aa <bmp3_set_sensor_settings+0x7c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, dev);
 800329e:	6839      	ldr	r1, [r7, #0]
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 fb11 	bl	80038c8 <set_int_ctrl_settings>
 80032a6:	4603      	mov	r3, r0
 80032a8:	73fb      	strb	r3, [r7, #15]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings) && (!rslt))
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80032b0:	f001 f925 	bl	80044fe <are_settings_changed>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d009      	beq.n	80032ce <bmp3_set_sensor_settings+0xa0>
 80032ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d105      	bne.n	80032ce <bmp3_set_sensor_settings+0xa0>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, dev);
 80032c2:	6839      	ldr	r1, [r7, #0]
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 fb78 	bl	80039ba <set_advance_settings>
 80032ca:	4603      	mov	r3, r0
 80032cc:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80032ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 80032e2:	237e      	movs	r3, #126	; 0x7e
 80032e4:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 80032e6:	23b6      	movs	r3, #182	; 0xb6
 80032e8:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f001 f91e 	bl	800452c <null_ptr_check>
 80032f0:	4603      	mov	r3, r0
 80032f2:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 80032f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d140      	bne.n	800337e <bmp3_soft_reset+0xa4>
    {
        /* Check for command ready status */
        rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 80032fc:	f107 010c 	add.w	r1, r7, #12
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	2003      	movs	r0, #3
 8003306:	f7ff fe6d 	bl	8002fe4 <bmp3_get_regs>
 800330a:	4603      	mov	r3, r0
 800330c:	73fb      	strb	r3, [r7, #15]

        /* Device is ready to accept new command */
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 800330e:	7b3b      	ldrb	r3, [r7, #12]
 8003310:	f003 0310 	and.w	r3, r3, #16
 8003314:	2b00      	cmp	r3, #0
 8003316:	d02e      	beq.n	8003376 <bmp3_soft_reset+0x9c>
 8003318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d12a      	bne.n	8003376 <bmp3_soft_reset+0x9c>
        {
            /* Write the soft reset command in the sensor */
            rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8003320:	f107 010d 	add.w	r1, r7, #13
 8003324:	f107 000e 	add.w	r0, r7, #14
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f7ff feea 	bl	8003104 <bmp3_set_regs>
 8003330:	4603      	mov	r3, r0
 8003332:	73fb      	strb	r3, [r7, #15]

            /* Proceed if everything is fine until now */
            if (rslt == BMP3_OK)
 8003334:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d11f      	bne.n	800337c <bmp3_soft_reset+0xa2>
            {
                /* Wait for 2 ms */
                dev->delay_us(2000, dev->intf_ptr);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6852      	ldr	r2, [r2, #4]
 8003344:	4611      	mov	r1, r2
 8003346:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800334a:	4798      	blx	r3

                /* Read for command error status */
                rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 800334c:	f107 010b 	add.w	r1, r7, #11
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	2002      	movs	r0, #2
 8003356:	f7ff fe45 	bl	8002fe4 <bmp3_get_regs>
 800335a:	4603      	mov	r3, r0
 800335c:	73fb      	strb	r3, [r7, #15]

                /* check for command error status */
                if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 800335e:	7afb      	ldrb	r3, [r7, #11]
 8003360:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003364:	2b00      	cmp	r3, #0
 8003366:	d103      	bne.n	8003370 <bmp3_soft_reset+0x96>
 8003368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d005      	beq.n	800337c <bmp3_soft_reset+0xa2>
                {
                    /* Command not written hence return
                     * error */
                    rslt = BMP3_E_CMD_EXEC_FAILED;
 8003370:	23fc      	movs	r3, #252	; 0xfc
 8003372:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMP3_OK)
 8003374:	e002      	b.n	800337c <bmp3_soft_reset+0xa2>
                }
            }
        }
        else
        {
            rslt = BMP3_E_CMD_EXEC_FAILED;
 8003376:	23fc      	movs	r3, #252	; 0xfc
 8003378:	73fb      	strb	r3, [r7, #15]
 800337a:	e000      	b.n	800337e <bmp3_soft_reset+0xa4>
            if (rslt == BMP3_OK)
 800337c:	bf00      	nop
        }
    }

    return rslt;
 800337e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_dev *dev)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f001 f8ca 	bl	800452c <null_ptr_check>
 8003398:	4603      	mov	r3, r0
 800339a:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800339c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d130      	bne.n	8003406 <bmp3_set_op_mode+0x7c>
    {
        uint8_t curr_mode = dev->settings.op_mode;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80033aa:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 80033ac:	f107 030d 	add.w	r3, r7, #13
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 f82d 	bl	8003412 <bmp3_get_op_mode>
 80033b8:	4603      	mov	r3, r0
 80033ba:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if (last_set_mode != BMP3_MODE_SLEEP)
 80033bc:	7b7b      	ldrb	r3, [r7, #13]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00c      	beq.n	80033dc <bmp3_set_op_mode+0x52>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f8fa 	bl	80035bc <put_device_to_sleep>
 80033c8:	4603      	mov	r3, r0
 80033ca:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6852      	ldr	r2, [r2, #4]
 80033d4:	4611      	mov	r1, r2
 80033d6:	f241 3088 	movw	r0, #5000	; 0x1388
 80033da:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 80033dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d110      	bne.n	8003406 <bmp3_set_op_mode+0x7c>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 80033e4:	7bbb      	ldrb	r3, [r7, #14]
 80033e6:	2b03      	cmp	r3, #3
 80033e8:	d105      	bne.n	80033f6 <bmp3_set_op_mode+0x6c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(dev);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f880 	bl	80034f0 <set_normal_mode>
 80033f0:	4603      	mov	r3, r0
 80033f2:	73fb      	strb	r3, [r7, #15]
 80033f4:	e007      	b.n	8003406 <bmp3_set_op_mode+0x7c>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 80033f6:	7bbb      	ldrb	r3, [r7, #14]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d104      	bne.n	8003406 <bmp3_set_op_mode+0x7c>
            {
                /* Set forced mode */
                rslt = write_power_mode(dev);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f8a7 	bl	8003550 <write_power_mode>
 8003402:	4603      	mov	r3, r0
 8003404:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8003406:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b084      	sub	sp, #16
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
 800341a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800341c:	6838      	ldr	r0, [r7, #0]
 800341e:	f001 f885 	bl	800452c <null_ptr_check>
 8003422:	4603      	mov	r3, r0
 8003424:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (op_mode != NULL))
 8003426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d114      	bne.n	8003458 <bmp3_get_op_mode+0x46>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d011      	beq.n	8003458 <bmp3_get_op_mode+0x46>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2201      	movs	r2, #1
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	201b      	movs	r0, #27
 800343c:	f7ff fdd2 	bl	8002fe4 <bmp3_get_regs>
 8003440:	4603      	mov	r3, r0
 8003442:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	111b      	asrs	r3, r3, #4
 800344a:	b2db      	uxtb	r3, r3
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	b2da      	uxtb	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	701a      	strb	r2, [r3, #0]
 8003456:	e001      	b.n	800345c <bmp3_get_op_mode+0x4a>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8003458:	23ff      	movs	r3, #255	; 0xff
 800345a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800345c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 8003476:	2300      	movs	r3, #0
 8003478:	61bb      	str	r3, [r7, #24]
 800347a:	2300      	movs	r3, #0
 800347c:	83bb      	strh	r3, [r7, #28]
    struct bmp3_uncomp_data uncomp_data = { 0 };
 800347e:	f107 0310 	add.w	r3, r7, #16
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	605a      	str	r2, [r3, #4]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f001 f84f 	bl	800452c <null_ptr_check>
 800348e:	4603      	mov	r3, r0
 8003490:	77fb      	strb	r3, [r7, #31]

    if ((rslt == BMP3_OK) && (comp_data != NULL))
 8003492:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d122      	bne.n	80034e0 <bmp3_get_sensor_data+0x78>
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01f      	beq.n	80034e0 <bmp3_get_sensor_data+0x78>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 80034a0:	f107 0118 	add.w	r1, r7, #24
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2206      	movs	r2, #6
 80034a8:	2004      	movs	r0, #4
 80034aa:	f7ff fd9b 	bl	8002fe4 <bmp3_get_regs>
 80034ae:	4603      	mov	r3, r0
 80034b0:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMP3_OK)
 80034b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d114      	bne.n	80034e4 <bmp3_get_sensor_data+0x7c>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 80034ba:	f107 0210 	add.w	r2, r7, #16
 80034be:	f107 0318 	add.w	r3, r7, #24
 80034c2:	4611      	mov	r1, r2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 fc66 	bl	8003d96 <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3318      	adds	r3, #24
 80034ce:	f107 0110 	add.w	r1, r7, #16
 80034d2:	7bf8      	ldrb	r0, [r7, #15]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	f000 fc91 	bl	8003dfc <compensate_data>
 80034da:	4603      	mov	r3, r0
 80034dc:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMP3_OK)
 80034de:	e001      	b.n	80034e4 <bmp3_get_sensor_data+0x7c>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80034e0:	23ff      	movs	r3, #255	; 0xff
 80034e2:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80034e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3720      	adds	r7, #32
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_dev *dev)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(dev);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f887 	bl	800360c <validate_normal_mode_settings>
 80034fe:	4603      	mov	r3, r0
 8003500:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 8003502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d11c      	bne.n	8003544 <set_normal_mode+0x54>
    {
        rslt = write_power_mode(dev);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f820 	bl	8003550 <write_power_mode>
 8003510:	4603      	mov	r3, r0
 8003512:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 8003514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d113      	bne.n	8003544 <set_normal_mode+0x54>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 800351c:	f107 010e 	add.w	r1, r7, #14
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	2002      	movs	r0, #2
 8003526:	f7ff fd5d 	bl	8002fe4 <bmp3_get_regs>
 800352a:	4603      	mov	r3, r0
 800352c:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 800352e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d106      	bne.n	8003544 <set_normal_mode+0x54>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 8003536:	7bbb      	ldrb	r3, [r7, #14]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <set_normal_mode+0x54>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 8003540:	23fb      	movs	r3, #251	; 0xfb
 8003542:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8003544:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(struct bmp3_dev *dev)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8003558:	231b      	movs	r3, #27
 800355a:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = dev->settings.op_mode;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003562:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 8003564:	7b78      	ldrb	r0, [r7, #13]
 8003566:	f107 010c 	add.w	r1, r7, #12
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f7ff fd39 	bl	8002fe4 <bmp3_get_regs>
 8003572:	4603      	mov	r3, r0
 8003574:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 8003576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d118      	bne.n	80035b0 <write_power_mode+0x60>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 800357e:	7b3b      	ldrb	r3, [r7, #12]
 8003580:	b25b      	sxtb	r3, r3
 8003582:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003586:	b25a      	sxtb	r2, r3
 8003588:	7bbb      	ldrb	r3, [r7, #14]
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	b25b      	sxtb	r3, r3
 800358e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003592:	b25b      	sxtb	r3, r3
 8003594:	4313      	orrs	r3, r2
 8003596:	b25b      	sxtb	r3, r3
 8003598:	b2db      	uxtb	r3, r3
 800359a:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 800359c:	f107 010c 	add.w	r1, r7, #12
 80035a0:	f107 000d 	add.w	r0, r7, #13
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f7ff fdac 	bl	8003104 <bmp3_set_regs>
 80035ac:	4603      	mov	r3, r0
 80035ae:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80035b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80035c4:	231b      	movs	r3, #27
 80035c6:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 80035c8:	f107 010d 	add.w	r1, r7, #13
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	201b      	movs	r0, #27
 80035d2:	f7ff fd07 	bl	8002fe4 <bmp3_get_regs>
 80035d6:	4603      	mov	r3, r0
 80035d8:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80035da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10e      	bne.n	8003600 <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 80035e2:	7b7b      	ldrb	r3, [r7, #13]
 80035e4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 80035ec:	f107 010d 	add.w	r1, r7, #13
 80035f0:	f107 000e 	add.w	r0, r7, #14
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f7ff fd84 	bl	8003104 <bmp3_set_regs>
 80035fc:	4603      	mov	r3, r0
 80035fe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003600:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_dev *dev)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = get_odr_filter_settings(dev);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 fa22 	bl	8003a5e <get_odr_filter_settings>
 800361a:	4603      	mov	r3, r0
 800361c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800361e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d104      	bne.n	8003630 <validate_normal_mode_settings+0x24>
    {
        rslt = validate_osr_and_odr_settings(dev);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fa36 	bl	8003a98 <validate_osr_and_odr_settings>
 800362c:	4603      	mov	r3, r0
 800362e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003630:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 8003644:	2331      	movs	r3, #49	; 0x31
 8003646:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 8003648:	2300      	movs	r3, #0
 800364a:	60bb      	str	r3, [r7, #8]
 800364c:	f107 030c 	add.w	r3, r7, #12
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	605a      	str	r2, [r3, #4]
 8003656:	609a      	str	r2, [r3, #8]
 8003658:	60da      	str	r2, [r3, #12]
 800365a:	741a      	strb	r2, [r3, #16]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 800365c:	f107 0108 	add.w	r1, r7, #8
 8003660:	7ff8      	ldrb	r0, [r7, #31]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2215      	movs	r2, #21
 8003666:	f7ff fcbd 	bl	8002fe4 <bmp3_get_regs>
 800366a:	4603      	mov	r3, r0
 800366c:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 800366e:	f107 0308 	add.w	r3, r7, #8
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4618      	mov	r0, r3
 8003676:	f000 fbf9 	bl	8003e6c <parse_calib_data>

    return rslt;
 800367a:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3720      	adds	r7, #32
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8003686:	b480      	push	{r7}
 8003688:	b087      	sub	sp, #28
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8003694:	2301      	movs	r3, #1
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	e015      	b.n	80036c6 <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	441a      	add	r2, r3
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	3b01      	subs	r3, #1
 80036a6:	68b9      	ldr	r1, [r7, #8]
 80036a8:	440b      	add	r3, r1
 80036aa:	7812      	ldrb	r2, [r2, #0]
 80036ac:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	441a      	add	r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	440b      	add	r3, r1
 80036bc:	7812      	ldrb	r2, [r2, #0]
 80036be:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	3301      	adds	r3, #1
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d3e5      	bcc.n	800369a <interleave_reg_addr+0x14>
    }
}
 80036ce:	bf00      	nop
 80036d0:	bf00      	nop
 80036d2:	371c      	adds	r7, #28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr

080036da <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 80036da:	b480      	push	{r7}
 80036dc:	b085      	sub	sp, #20
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	4413      	add	r3, r2
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	4413      	add	r3, r2
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	10db      	asrs	r3, r3, #3
 8003704:	b2db      	uxtb	r3, r3
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	b2da      	uxtb	r2, r3
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	3301      	adds	r3, #1
 8003714:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 8003716:	7bfb      	ldrb	r3, [r7, #15]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	4413      	add	r3, r2
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	f003 031f 	and.w	r3, r3, #31
 8003722:	b2da      	uxtb	r2, r3
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	3302      	adds	r3, #2
 800372c:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	4413      	add	r3, r2
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	105b      	asrs	r3, r3, #1
 8003738:	b2db      	uxtb	r3, r3
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	b2da      	uxtb	r2, r3
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	709a      	strb	r2, [r3, #2]
}
 8003744:	bf00      	nop
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr

0800374e <set_pwr_ctrl_settings>:
/*!
 * @brief This API sets the pressure enable and temperature enable
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b084      	sub	sp, #16
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8003758:	231b      	movs	r3, #27
 800375a:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 800375c:	7bb8      	ldrb	r0, [r7, #14]
 800375e:	f107 010d 	add.w	r1, r7, #13
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2201      	movs	r2, #1
 8003766:	f7ff fc3d 	bl	8002fe4 <bmp3_get_regs>
 800376a:	4603      	mov	r3, r0
 800376c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800376e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d134      	bne.n	80037e0 <set_pwr_ctrl_settings+0x92>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00f      	beq.n	80037a0 <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, dev->settings.press_en);
 8003780:	7b7b      	ldrb	r3, [r7, #13]
 8003782:	b25b      	sxtb	r3, r3
 8003784:	f023 0301 	bic.w	r3, r3, #1
 8003788:	b25a      	sxtb	r2, r3
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003790:	b25b      	sxtb	r3, r3
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	b25b      	sxtb	r3, r3
 8003798:	4313      	orrs	r3, r2
 800379a:	b25b      	sxtb	r3, r3
 800379c:	b2db      	uxtb	r3, r3
 800379e:	737b      	strb	r3, [r7, #13]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d010      	beq.n	80037cc <set_pwr_ctrl_settings+0x7e>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, dev->settings.temp_en);
 80037aa:	7b7b      	ldrb	r3, [r7, #13]
 80037ac:	b25b      	sxtb	r3, r3
 80037ae:	f023 0302 	bic.w	r3, r3, #2
 80037b2:	b25a      	sxtb	r2, r3
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	b25b      	sxtb	r3, r3
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	b25b      	sxtb	r3, r3
 80037c4:	4313      	orrs	r3, r2
 80037c6:	b25b      	sxtb	r3, r3
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	737b      	strb	r3, [r7, #13]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 80037cc:	f107 010d 	add.w	r1, r7, #13
 80037d0:	f107 000e 	add.w	r0, r7, #14
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f7ff fc94 	bl	8003104 <bmp3_set_regs>
 80037dc:	4603      	mov	r3, r0
 80037de:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80037e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 80037f6:	4b33      	ldr	r3, [pc, #204]	; (80038c4 <set_odr_filter_settings+0xd8>)
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	82bb      	strh	r3, [r7, #20]
 80037fc:	2300      	movs	r3, #0
 80037fe:	75bb      	strb	r3, [r7, #22]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	73fb      	strb	r3, [r7, #15]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8003804:	f107 0110 	add.w	r1, r7, #16
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2204      	movs	r2, #4
 800380c:	201c      	movs	r0, #28
 800380e:	f7ff fbe9 	bl	8002fe4 <bmp3_get_regs>
 8003812:	4603      	mov	r3, r0
 8003814:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8003816:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d14b      	bne.n	80038b6 <set_odr_filter_settings+0xca>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	2030      	movs	r0, #48	; 0x30
 8003822:	f000 fe6c 	bl	80044fe <are_settings_changed>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00b      	beq.n	8003844 <set_odr_filter_settings+0x58>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, dev);
 800382c:	f107 000f 	add.w	r0, r7, #15
 8003830:	f107 0210 	add.w	r2, r7, #16
 8003834:	f107 0114 	add.w	r1, r7, #20
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	4603      	mov	r3, r0
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f9e4 	bl	8003c0c <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	2080      	movs	r0, #128	; 0x80
 8003848:	f000 fe59 	bl	80044fe <are_settings_changed>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d008      	beq.n	8003864 <set_odr_filter_settings+0x78>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, dev);
 8003852:	f107 020f 	add.w	r2, r7, #15
 8003856:	f107 0110 	add.w	r1, r7, #16
 800385a:	f107 0014 	add.w	r0, r7, #20
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	f000 fa2b 	bl	8003cba <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	2040      	movs	r0, #64	; 0x40
 8003868:	f000 fe49 	bl	80044fe <are_settings_changed>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d008      	beq.n	8003884 <set_odr_filter_settings+0x98>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, dev);
 8003872:	f107 020f 	add.w	r2, r7, #15
 8003876:	f107 0110 	add.w	r1, r7, #16
 800387a:	f107 0014 	add.w	r0, r7, #20
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	f000 fa54 	bl	8003d2c <fill_filter_data>
        }

        if (dev->settings.op_mode == BMP3_MODE_NORMAL)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800388a:	2b03      	cmp	r3, #3
 800388c:	d104      	bne.n	8003898 <set_odr_filter_settings+0xac>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(dev);
 800388e:	6838      	ldr	r0, [r7, #0]
 8003890:	f000 f902 	bl	8003a98 <validate_osr_and_odr_settings>
 8003894:	4603      	mov	r3, r0
 8003896:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMP3_OK)
 8003898:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10a      	bne.n	80038b6 <set_odr_filter_settings+0xca>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	461a      	mov	r2, r3
 80038a4:	f107 0110 	add.w	r1, r7, #16
 80038a8:	f107 0014 	add.w	r0, r7, #20
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	f7ff fc29 	bl	8003104 <bmp3_set_regs>
 80038b2:	4603      	mov	r3, r0
 80038b4:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 80038b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	0801ffb0 	.word	0x0801ffb0

080038c8 <set_int_ctrl_settings>:
 * @brief This internal API sets the interrupt control (output mode, level,
 * latch and data ready) settings of the sensor based on the settings
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 80038d2:	2319      	movs	r3, #25
 80038d4:	737b      	strb	r3, [r7, #13]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80038d6:	7b78      	ldrb	r0, [r7, #13]
 80038d8:	f107 010e 	add.w	r1, r7, #14
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2201      	movs	r2, #1
 80038e0:	f7ff fb80 	bl	8002fe4 <bmp3_get_regs>
 80038e4:	4603      	mov	r3, r0
 80038e6:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80038e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d15e      	bne.n	80039ae <set_int_ctrl_settings+0xe6>
    {
        int_settings = dev->settings.int_settings;
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	f107 0308 	add.w	r3, r7, #8
 80038f6:	32b7      	adds	r2, #183	; 0xb7
 80038f8:	6810      	ldr	r0, [r2, #0]
 80038fa:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00d      	beq.n	8003922 <set_int_ctrl_settings+0x5a>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 8003906:	7bbb      	ldrb	r3, [r7, #14]
 8003908:	b25b      	sxtb	r3, r3
 800390a:	f023 0301 	bic.w	r3, r3, #1
 800390e:	b25a      	sxtb	r2, r3
 8003910:	7a3b      	ldrb	r3, [r7, #8]
 8003912:	b25b      	sxtb	r3, r3
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	b25b      	sxtb	r3, r3
 800391a:	4313      	orrs	r3, r2
 800391c:	b25b      	sxtb	r3, r3
 800391e:	b2db      	uxtb	r3, r3
 8003920:	73bb      	strb	r3, [r7, #14]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00e      	beq.n	800394a <set_int_ctrl_settings+0x82>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 800392c:	7bbb      	ldrb	r3, [r7, #14]
 800392e:	b25b      	sxtb	r3, r3
 8003930:	f023 0302 	bic.w	r3, r3, #2
 8003934:	b25a      	sxtb	r2, r3
 8003936:	7a7b      	ldrb	r3, [r7, #9]
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	b25b      	sxtb	r3, r3
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	b25b      	sxtb	r3, r3
 8003942:	4313      	orrs	r3, r2
 8003944:	b25b      	sxtb	r3, r3
 8003946:	b2db      	uxtb	r3, r3
 8003948:	73bb      	strb	r3, [r7, #14]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00e      	beq.n	8003972 <set_int_ctrl_settings+0xaa>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 8003954:	7bbb      	ldrb	r3, [r7, #14]
 8003956:	b25b      	sxtb	r3, r3
 8003958:	f023 0304 	bic.w	r3, r3, #4
 800395c:	b25a      	sxtb	r2, r3
 800395e:	7abb      	ldrb	r3, [r7, #10]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	b25b      	sxtb	r3, r3
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	b25b      	sxtb	r3, r3
 800396a:	4313      	orrs	r3, r2
 800396c:	b25b      	sxtb	r3, r3
 800396e:	b2db      	uxtb	r3, r3
 8003970:	73bb      	strb	r3, [r7, #14]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00e      	beq.n	800399a <set_int_ctrl_settings+0xd2>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 800397c:	7bbb      	ldrb	r3, [r7, #14]
 800397e:	b25b      	sxtb	r3, r3
 8003980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003984:	b25a      	sxtb	r2, r3
 8003986:	7afb      	ldrb	r3, [r7, #11]
 8003988:	019b      	lsls	r3, r3, #6
 800398a:	b25b      	sxtb	r3, r3
 800398c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003990:	b25b      	sxtb	r3, r3
 8003992:	4313      	orrs	r3, r2
 8003994:	b25b      	sxtb	r3, r3
 8003996:	b2db      	uxtb	r3, r3
 8003998:	73bb      	strb	r3, [r7, #14]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 800399a:	f107 010e 	add.w	r1, r7, #14
 800399e:	f107 000d 	add.w	r0, r7, #13
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f7ff fbad 	bl	8003104 <bmp3_set_regs>
 80039aa:	4603      	mov	r3, r0
 80039ac:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80039ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <set_advance_settings>:
/*!
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b084      	sub	sp, #16
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
 80039c2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = dev->settings.adv_settings;
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	f107 0308 	add.w	r3, r7, #8
 80039ca:	32bb      	adds	r2, #187	; 0xbb
 80039cc:	8812      	ldrh	r2, [r2, #0]
 80039ce:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 80039d0:	231a      	movs	r3, #26
 80039d2:	73bb      	strb	r3, [r7, #14]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80039d4:	7bb8      	ldrb	r0, [r7, #14]
 80039d6:	f107 010d 	add.w	r1, r7, #13
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2201      	movs	r2, #1
 80039de:	f7ff fb01 	bl	8002fe4 <bmp3_get_regs>
 80039e2:	4603      	mov	r3, r0
 80039e4:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80039e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d131      	bne.n	8003a52 <set_advance_settings+0x98>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00e      	beq.n	8003a16 <set_advance_settings+0x5c>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 80039f8:	7b7b      	ldrb	r3, [r7, #13]
 80039fa:	b25b      	sxtb	r3, r3
 80039fc:	f023 0302 	bic.w	r3, r3, #2
 8003a00:	b25a      	sxtb	r2, r3
 8003a02:	7a3b      	ldrb	r3, [r7, #8]
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	b25b      	sxtb	r3, r3
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	b25b      	sxtb	r3, r3
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	b25b      	sxtb	r3, r3
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	737b      	strb	r3, [r7, #13]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00e      	beq.n	8003a3e <set_advance_settings+0x84>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 8003a20:	7b7b      	ldrb	r3, [r7, #13]
 8003a22:	b25b      	sxtb	r3, r3
 8003a24:	f023 0304 	bic.w	r3, r3, #4
 8003a28:	b25a      	sxtb	r2, r3
 8003a2a:	7a7b      	ldrb	r3, [r7, #9]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	b25b      	sxtb	r3, r3
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	b25b      	sxtb	r3, r3
 8003a36:	4313      	orrs	r3, r2
 8003a38:	b25b      	sxtb	r3, r3
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	737b      	strb	r3, [r7, #13]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8003a3e:	f107 010d 	add.w	r1, r7, #13
 8003a42:	f107 000e 	add.w	r0, r7, #14
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f7ff fb5b 	bl	8003104 <bmp3_set_regs>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_dev *dev)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8003a66:	f107 0108 	add.w	r1, r7, #8
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2204      	movs	r2, #4
 8003a6e:	201c      	movs	r0, #28
 8003a70:	f7ff fab8 	bl	8002fe4 <bmp3_get_regs>
 8003a74:	4603      	mov	r3, r0
 8003a76:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &dev->settings.odr_filter);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f103 02b3 	add.w	r2, r3, #179	; 0xb3
 8003a7e:	f107 0308 	add.w	r3, r7, #8
 8003a82:	4611      	mov	r1, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff fe28 	bl	80036da <parse_odr_filter_settings>

    return rslt;
 8003a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_dev *dev)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b098      	sub	sp, #96	; 0x60
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 8003aa0:	23ea      	movs	r3, #234	; 0xea
 8003aa2:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t meas_t_p = 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 8003aa8:	4a1c      	ldr	r2, [pc, #112]	; (8003b1c <validate_osr_and_odr_settings+0x84>)
 8003aaa:	f107 030c 	add.w	r3, r7, #12
 8003aae:	4611      	mov	r1, r2
 8003ab0:	2248      	movs	r2, #72	; 0x48
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f01c fa54 	bl	801ff60 <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (dev->settings.press_en)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d006      	beq.n	8003ad0 <validate_osr_and_odr_settings+0x38>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(dev);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f842 	bl	8003b4c <calculate_press_meas_time>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003acc:	4413      	add	r3, r2
 8003ace:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if (dev->settings.temp_en)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d006      	beq.n	8003ae8 <validate_osr_and_odr_settings+0x50>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(dev);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f866 	bl	8003bac <calculate_temp_meas_time>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ae4:	4413      	add	r3, r2
 8003ae6:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 8003ae8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aec:	4413      	add	r3, r2
 8003aee:	65bb      	str	r3, [r7, #88]	; 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[dev->settings.odr_filter.odr]);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	3360      	adds	r3, #96	; 0x60
 8003afa:	443b      	add	r3, r7
 8003afc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003b00:	4619      	mov	r1, r3
 8003b02:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003b04:	f000 f80c 	bl	8003b20 <verify_meas_time_and_odr_duration>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    return rslt;
 8003b0e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3760      	adds	r7, #96	; 0x60
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	0801ffb4 	.word	0x0801ffb4

08003b20 <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d202      	bcs.n	8003b38 <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 8003b32:	2300      	movs	r3, #0
 8003b34:	73fb      	strb	r3, [r7, #15]
 8003b36:	e001      	b.n	8003b3c <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 8003b38:	23fd      	movs	r3, #253	; 0xfd
 8003b3a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bc80      	pop	{r7}
 8003b48:	4770      	bx	lr
	...

08003b4c <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_dev *dev)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = dev->settings.odr_filter;
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	f107 030c 	add.w	r3, r7, #12
 8003b5a:	32b3      	adds	r2, #179	; 0xb3
 8003b5c:	6810      	ldr	r0, [r2, #0]
 8003b5e:	6018      	str	r0, [r3, #0]

#ifdef BMP3_DOUBLE_PRECISION_COMPENSATION
    double base = 2.0;
 8003b60:	f04f 0200 	mov.w	r2, #0
 8003b64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b68:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_DOUBLE_PRECISION_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 8003b6c:	7b3b      	ldrb	r3, [r7, #12]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003b74:	f000 fca2 	bl	80044bc <pow_bmp3>
 8003b78:	6178      	str	r0, [r7, #20]
    press_meas_t = (BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 8003b7a:	490a      	ldr	r1, [pc, #40]	; (8003ba4 <calculate_press_meas_time+0x58>)
 8003b7c:	6978      	ldr	r0, [r7, #20]
 8003b7e:	f7fd f8df 	bl	8000d40 <__aeabi_fmul>
 8003b82:	4603      	mov	r3, r0
 8003b84:	4908      	ldr	r1, [pc, #32]	; (8003ba8 <calculate_press_meas_time+0x5c>)
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fc ffd2 	bl	8000b30 <__addsf3>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fd fa4c 	bl	800102c <__aeabi_f2uiz>
 8003b94:	4603      	mov	r3, r0
 8003b96:	613b      	str	r3, [r7, #16]

    /* Output in microseconds */
    return press_meas_t;
 8003b98:	693b      	ldr	r3, [r7, #16]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3720      	adds	r7, #32
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	44fa0000 	.word	0x44fa0000
 8003ba8:	43c40000 	.word	0x43c40000

08003bac <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_dev *dev)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = dev->settings.odr_filter;
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	f107 030c 	add.w	r3, r7, #12
 8003bba:	32b3      	adds	r2, #179	; 0xb3
 8003bbc:	6810      	ldr	r0, [r2, #0]
 8003bbe:	6018      	str	r0, [r3, #0]

#ifdef BMP3_DOUBLE_PRECISION_COMPENSATION
    double base = 2.0;
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003bc8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_DOUBLE_PRECISION_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8003bcc:	7b7b      	ldrb	r3, [r7, #13]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003bd4:	f000 fc72 	bl	80044bc <pow_bmp3>
 8003bd8:	6178      	str	r0, [r7, #20]
    temp_meas_t = (BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 8003bda:	490a      	ldr	r1, [pc, #40]	; (8003c04 <calculate_temp_meas_time+0x58>)
 8003bdc:	6978      	ldr	r0, [r7, #20]
 8003bde:	f7fd f8af 	bl	8000d40 <__aeabi_fmul>
 8003be2:	4603      	mov	r3, r0
 8003be4:	4908      	ldr	r1, [pc, #32]	; (8003c08 <calculate_temp_meas_time+0x5c>)
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fc ffa2 	bl	8000b30 <__addsf3>
 8003bec:	4603      	mov	r3, r0
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fd fa1c 	bl	800102c <__aeabi_f2uiz>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	613b      	str	r3, [r7, #16]

    /* Output in uint32_t */
    return temp_meas_t;
 8003bf8:	693b      	ldr	r3, [r7, #16]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3720      	adds	r7, #32
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	44fa0000 	.word	0x44fa0000
 8003c08:	439c8000 	.word	0x439c8000

08003c0c <fill_osr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the over sampling settings for burst write operation.
 */
static void fill_osr_data(uint32_t settings, uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_dev *dev)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
 8003c18:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = dev->settings.odr_filter;
 8003c1a:	6a3a      	ldr	r2, [r7, #32]
 8003c1c:	f107 0314 	add.w	r3, r7, #20
 8003c20:	32b3      	adds	r2, #179	; 0xb3
 8003c22:	6810      	ldr	r0, [r2, #0]
 8003c24:	6018      	str	r0, [r3, #0]

    if (settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d03f      	beq.n	8003cb0 <fill_osr_data+0xa4>
    {
        /* Pressure over sampling settings check */
        if (settings & BMP3_SEL_PRESS_OS)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d013      	beq.n	8003c62 <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	b25b      	sxtb	r3, r3
 8003c40:	f023 0307 	bic.w	r3, r3, #7
 8003c44:	b25a      	sxtb	r2, r3
 8003c46:	7d3b      	ldrb	r3, [r7, #20]
 8003c48:	b25b      	sxtb	r3, r3
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	b25b      	sxtb	r3, r3
 8003c50:	4313      	orrs	r3, r2
 8003c52:	b25a      	sxtb	r2, r3
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	4619      	mov	r1, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	440b      	add	r3, r1
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (settings & BMP3_SEL_TEMP_OS)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f003 0320 	and.w	r3, r3, #32
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d014      	beq.n	8003c96 <fill_osr_data+0x8a>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	b25b      	sxtb	r3, r3
 8003c72:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003c76:	b25a      	sxtb	r2, r3
 8003c78:	7d7b      	ldrb	r3, [r7, #21]
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	b25b      	sxtb	r3, r3
 8003c7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c82:	b25b      	sxtb	r3, r3
 8003c84:	4313      	orrs	r3, r2
 8003c86:	b25a      	sxtb	r2, r3
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	440b      	add	r3, r1
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	221c      	movs	r2, #28
 8003ca2:	701a      	strb	r2, [r3, #0]
        (*len)++;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	701a      	strb	r2, [r3, #0]
    }
}
 8003cb0:	bf00      	nop
 8003cb2:	371c      	adds	r7, #28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr

08003cba <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_dev *dev)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b087      	sub	sp, #28
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
 8003cc6:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &dev->settings.odr_filter;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	33b3      	adds	r3, #179	; 0xb3
 8003ccc:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	78db      	ldrb	r3, [r3, #3]
 8003cd2:	2b11      	cmp	r3, #17
 8003cd4:	d902      	bls.n	8003cdc <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2211      	movs	r2, #17
 8003cda:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	b25b      	sxtb	r3, r3
 8003ce4:	f023 031f 	bic.w	r3, r3, #31
 8003ce8:	b25a      	sxtb	r2, r3
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	78db      	ldrb	r3, [r3, #3]
 8003cee:	b25b      	sxtb	r3, r3
 8003cf0:	f003 031f 	and.w	r3, r3, #31
 8003cf4:	b25b      	sxtb	r3, r3
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	b25a      	sxtb	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	4619      	mov	r1, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	440b      	add	r3, r1
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4413      	add	r3, r2
 8003d12:	221d      	movs	r2, #29
 8003d14:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	701a      	strb	r2, [r3, #0]
}
 8003d22:	bf00      	nop
 8003d24:	371c      	adds	r7, #28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr

08003d2c <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_dev *dev)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
 8003d38:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = dev->settings.odr_filter;
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	f107 0314 	add.w	r3, r7, #20
 8003d40:	32b3      	adds	r2, #179	; 0xb3
 8003d42:	6810      	ldr	r0, [r2, #0]
 8003d44:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	3303      	adds	r3, #3
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	b25b      	sxtb	r3, r3
 8003d4e:	f023 030e 	bic.w	r3, r3, #14
 8003d52:	b25a      	sxtb	r2, r3
 8003d54:	7dbb      	ldrb	r3, [r7, #22]
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	b25b      	sxtb	r3, r3
 8003d5a:	f003 030e 	and.w	r3, r3, #14
 8003d5e:	b25b      	sxtb	r3, r3
 8003d60:	4313      	orrs	r3, r2
 8003d62:	b25a      	sxtb	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	4619      	mov	r1, r3
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	440b      	add	r3, r1
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	221f      	movs	r2, #31
 8003d7e:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	3301      	adds	r3, #1
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	701a      	strb	r2, [r3, #0]
}
 8003d8c:	bf00      	nop
 8003d8e:	371c      	adds	r7, #28
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr

08003d96 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b087      	sub	sp, #28
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	3301      	adds	r3, #1
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	021b      	lsls	r3, r3, #8
 8003dae:	613b      	str	r3, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3302      	adds	r3, #2
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	041b      	lsls	r3, r3, #16
 8003db8:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3303      	adds	r3, #3
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	021b      	lsls	r3, r3, #8
 8003dd8:	613b      	str	r3, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3305      	adds	r3, #5
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	041b      	lsls	r3, r3, #16
 8003de2:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	431a      	orrs	r2, r3
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	431a      	orrs	r2, r3
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	605a      	str	r2, [r3, #4]
}
 8003df2:	bf00      	nop
 8003df4:	371c      	adds	r7, #28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bc80      	pop	{r7}
 8003dfa:	4770      	bx	lr

08003dfc <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60b9      	str	r1, [r7, #8]
 8003e04:	607a      	str	r2, [r7, #4]
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	4603      	mov	r3, r0
 8003e0a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d022      	beq.n	8003e5c <compensate_data+0x60>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d01f      	beq.n	8003e5c <compensate_data+0x60>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d01c      	beq.n	8003e5c <compensate_data+0x60>
    {
        /* If pressure or temperature component is selected */
        if (sensor_comp & (BMP3_PRESS | BMP3_TEMP))
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
 8003e24:	f003 0303 	and.w	r3, r3, #3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <compensate_data+0x42>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8003e2c:	6839      	ldr	r1, [r7, #0]
 8003e2e:	68b8      	ldr	r0, [r7, #8]
 8003e30:	f000 f9e4 	bl	80041fc <compensate_temperature>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	e9c1 2300 	strd	r2, r3, [r1]
        }

        if (sensor_comp & BMP3_PRESS)
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00b      	beq.n	8003e60 <compensate_data+0x64>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8003e48:	6839      	ldr	r1, [r7, #0]
 8003e4a:	68b8      	ldr	r0, [r7, #8]
 8003e4c:	f000 fa19 	bl	8004282 <compensate_pressure>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp & BMP3_PRESS)
 8003e5a:	e001      	b.n	8003e60 <compensate_data+0x64>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8003e5c:	23ff      	movs	r3, #255	; 0xff
 8003e5e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003e60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	3390      	adds	r3, #144	; 0x90
 8003e7a:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	3318      	adds	r3, #24
 8003e80:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	4ba4      	ldr	r3, [pc, #656]	; (8004118 <parse_calib_data+0x2ac>)
 8003e88:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	b21a      	sxth	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	b21b      	sxth	r3, r3
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	b21b      	sxth	r3, r3
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fc faae 	bl	800040c <__aeabi_ui2d>
 8003eb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eb4:	f7fc fc4e 	bl	8000754 <__aeabi_ddiv>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	6939      	ldr	r1, [r7, #16]
 8003ebe:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3303      	adds	r3, #3
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	021b      	lsls	r3, r3, #8
 8003eca:	b21a      	sxth	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3302      	adds	r3, #2
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	b21b      	sxth	r3, r3
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	b21b      	sxth	r3, r3
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	4b8e      	ldr	r3, [pc, #568]	; (800411c <parse_calib_data+0x2b0>)
 8003ee4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	885b      	ldrh	r3, [r3, #2]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fc fa8d 	bl	800040c <__aeabi_ui2d>
 8003ef2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ef6:	f7fc fc2d 	bl	8000754 <__aeabi_ddiv>
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	6939      	ldr	r1, [r7, #16]
 8003f00:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3304      	adds	r3, #4
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	b25a      	sxtb	r2, r3
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	4b82      	ldr	r3, [pc, #520]	; (8004120 <parse_calib_data+0x2b4>)
 8003f16:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fc fa83 	bl	800042c <__aeabi_i2d>
 8003f26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f2a:	f7fc fc13 	bl	8000754 <__aeabi_ddiv>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	6939      	ldr	r1, [r7, #16]
 8003f34:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3306      	adds	r3, #6
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	021b      	lsls	r3, r3, #8
 8003f40:	b21a      	sxth	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3305      	adds	r3, #5
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	b21b      	sxth	r3, r3
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	b21a      	sxth	r2, r3
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	4b73      	ldr	r3, [pc, #460]	; (8004124 <parse_calib_data+0x2b8>)
 8003f58:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003f62:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fc fa60 	bl	800042c <__aeabi_i2d>
 8003f6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f70:	f7fc fbf0 	bl	8000754 <__aeabi_ddiv>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	6939      	ldr	r1, [r7, #16]
 8003f7a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	3308      	adds	r3, #8
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	021b      	lsls	r3, r3, #8
 8003f86:	b21a      	sxth	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3307      	adds	r3, #7
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	b21b      	sxth	r3, r3
 8003f90:	4313      	orrs	r3, r2
 8003f92:	b21a      	sxth	r2, r3
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	4b62      	ldr	r3, [pc, #392]	; (8004128 <parse_calib_data+0x2bc>)
 8003f9e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003fa8:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fc fa3d 	bl	800042c <__aeabi_i2d>
 8003fb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fb6:	f7fc fbcd 	bl	8000754 <__aeabi_ddiv>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	6939      	ldr	r1, [r7, #16]
 8003fc0:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3309      	adds	r3, #9
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	b25a      	sxtb	r2, r3
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	4b55      	ldr	r3, [pc, #340]	; (800412c <parse_calib_data+0x2c0>)
 8003fd6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fc fa23 	bl	800042c <__aeabi_i2d>
 8003fe6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fea:	f7fc fbb3 	bl	8000754 <__aeabi_ddiv>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	6939      	ldr	r1, [r7, #16]
 8003ff4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	330a      	adds	r3, #10
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	b25a      	sxtb	r2, r3
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	4b49      	ldr	r3, [pc, #292]	; (8004130 <parse_calib_data+0x2c4>)
 800400a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8004014:	4618      	mov	r0, r3
 8004016:	f7fc fa09 	bl	800042c <__aeabi_i2d>
 800401a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800401e:	f7fc fb99 	bl	8000754 <__aeabi_ddiv>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	6939      	ldr	r1, [r7, #16]
 8004028:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	330c      	adds	r3, #12
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	021b      	lsls	r3, r3, #8
 8004034:	b21a      	sxth	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	330b      	adds	r3, #11
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	b21b      	sxth	r3, r3
 800403e:	4313      	orrs	r3, r2
 8004040:	b21b      	sxth	r3, r3
 8004042:	b29a      	uxth	r2, r3
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004050:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	899b      	ldrh	r3, [r3, #12]
 8004058:	4618      	mov	r0, r3
 800405a:	f7fc f9d7 	bl	800040c <__aeabi_ui2d>
 800405e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004062:	f7fc fb77 	bl	8000754 <__aeabi_ddiv>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	6939      	ldr	r1, [r7, #16]
 800406c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	330e      	adds	r3, #14
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	021b      	lsls	r3, r3, #8
 8004078:	b21a      	sxth	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	330d      	adds	r3, #13
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	b21b      	sxth	r3, r3
 8004082:	4313      	orrs	r3, r2
 8004084:	b21b      	sxth	r3, r3
 8004086:	b29a      	uxth	r2, r3
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	4b28      	ldr	r3, [pc, #160]	; (8004134 <parse_calib_data+0x2c8>)
 8004092:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	89db      	ldrh	r3, [r3, #14]
 800409a:	4618      	mov	r0, r3
 800409c:	f7fc f9b6 	bl	800040c <__aeabi_ui2d>
 80040a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040a4:	f7fc fb56 	bl	8000754 <__aeabi_ddiv>
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	6939      	ldr	r1, [r7, #16]
 80040ae:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	330f      	adds	r3, #15
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	b25a      	sxtb	r2, r3
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	4b1d      	ldr	r3, [pc, #116]	; (8004138 <parse_calib_data+0x2cc>)
 80040c4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fc f9ac 	bl	800042c <__aeabi_i2d>
 80040d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040d8:	f7fc fb3c 	bl	8000754 <__aeabi_ddiv>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	6939      	ldr	r1, [r7, #16]
 80040e2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3310      	adds	r3, #16
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	b25a      	sxtb	r2, r3
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	4b11      	ldr	r3, [pc, #68]	; (800413c <parse_calib_data+0x2d0>)
 80040f8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8004102:	4618      	mov	r0, r3
 8004104:	f7fc f992 	bl	800042c <__aeabi_i2d>
 8004108:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800410c:	f7fc fb22 	bl	8000754 <__aeabi_ddiv>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	6939      	ldr	r1, [r7, #16]
 8004116:	e013      	b.n	8004140 <parse_calib_data+0x2d4>
 8004118:	3f700000 	.word	0x3f700000
 800411c:	41d00000 	.word	0x41d00000
 8004120:	42f00000 	.word	0x42f00000
 8004124:	41300000 	.word	0x41300000
 8004128:	41c00000 	.word	0x41c00000
 800412c:	41f00000 	.word	0x41f00000
 8004130:	42400000 	.word	0x42400000
 8004134:	40500000 	.word	0x40500000
 8004138:	40700000 	.word	0x40700000
 800413c:	40e00000 	.word	0x40e00000
 8004140:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3312      	adds	r3, #18
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	021b      	lsls	r3, r3, #8
 800414c:	b21a      	sxth	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3311      	adds	r3, #17
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	b21b      	sxth	r3, r3
 8004156:	4313      	orrs	r3, r2
 8004158:	b21a      	sxth	r2, r3
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 800415e:	f04f 0200 	mov.w	r2, #0
 8004162:	4b25      	ldr	r3, [pc, #148]	; (80041f8 <parse_calib_data+0x38c>)
 8004164:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800416e:	4618      	mov	r0, r3
 8004170:	f7fc f95c 	bl	800042c <__aeabi_i2d>
 8004174:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004178:	f7fc faec 	bl	8000754 <__aeabi_ddiv>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	6939      	ldr	r1, [r7, #16]
 8004182:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3313      	adds	r3, #19
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	b25a      	sxtb	r2, r3
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	4b18      	ldr	r3, [pc, #96]	; (80041f8 <parse_calib_data+0x38c>)
 8004198:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fc f942 	bl	800042c <__aeabi_i2d>
 80041a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041ac:	f7fc fad2 	bl	8000754 <__aeabi_ddiv>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	6939      	ldr	r1, [r7, #16]
 80041b6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3314      	adds	r3, #20
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	b25a      	sxtb	r2, r3
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 80041ce:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fc f927 	bl	800042c <__aeabi_i2d>
 80041de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041e2:	f7fc fab7 	bl	8000754 <__aeabi_ddiv>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	6939      	ldr	r1, [r7, #16]
 80041ec:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 80041f0:	bf00      	nop
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	42f00000 	.word	0x42f00000

080041fc <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 * for e.g. returns temperature 24.26 deg Celsius
 */
static double compensate_temperature(const struct bmp3_uncomp_data *uncomp_data, struct bmp3_calib_data *calib_data)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
    uint32_t uncomp_temp = uncomp_data->temperature;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	61fb      	str	r3, [r7, #28]
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 800420c:	69f8      	ldr	r0, [r7, #28]
 800420e:	f7fc f8fd 	bl	800040c <__aeabi_ui2d>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004218:	f7fb ffba 	bl	8000190 <__aeabi_dsub>
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	e9c7 2304 	strd	r2, r3, [r7, #16]
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800422a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800422e:	f7fc f967 	bl	8000500 <__aeabi_dmul>
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	e9c7 2302 	strd	r2, r3, [r7, #8]

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 800423a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800423e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004242:	f7fc f95d 	bl	8000500 <__aeabi_dmul>
 8004246:	4602      	mov	r2, r0
 8004248:	460b      	mov	r3, r1
 800424a:	4610      	mov	r0, r2
 800424c:	4619      	mov	r1, r3
                                             calib_data->quantized_calib_data.par_t3;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8004254:	f7fc f954 	bl	8000500 <__aeabi_dmul>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	4610      	mov	r0, r2
 800425e:	4619      	mov	r1, r3
 8004260:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004264:	f7fb ff96 	bl	8000194 <__adddf3>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	6839      	ldr	r1, [r7, #0]
 800426e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

    /* Returns compensated temperature */
    return calib_data->quantized_calib_data.t_lin;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
}
 8004278:	4610      	mov	r0, r2
 800427a:	4619      	mov	r1, r3
 800427c:	3720      	adds	r7, #32
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 * For e.g. returns pressure in Pascal p = 95305.295 which is 953.05295 hecto pascal
 */
static double compensate_pressure(const struct bmp3_uncomp_data *uncomp_data, const struct bmp3_calib_data *calib_data)
{
 8004282:	b5b0      	push	{r4, r5, r7, lr}
 8004284:	b092      	sub	sp, #72	; 0x48
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	6039      	str	r1, [r7, #0]
    const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	647b      	str	r3, [r7, #68]	; 0x44
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 8004290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004292:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8004296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004298:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800429c:	f7fc f930 	bl	8000500 <__aeabi_dmul>
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 80042a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042aa:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 80042ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042b0:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 80042b4:	2202      	movs	r2, #2
 80042b6:	f000 f901 	bl	80044bc <pow_bmp3>
 80042ba:	4603      	mov	r3, r0
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fc f8c7 	bl	8000450 <__aeabi_f2d>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	4620      	mov	r0, r4
 80042c8:	4629      	mov	r1, r5
 80042ca:	f7fc f919 	bl	8000500 <__aeabi_dmul>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 80042d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042d8:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80042dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042de:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 80042e2:	2203      	movs	r2, #3
 80042e4:	f000 f8ea 	bl	80044bc <pow_bmp3>
 80042e8:	4603      	mov	r3, r0
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fc f8b0 	bl	8000450 <__aeabi_f2d>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4620      	mov	r0, r4
 80042f6:	4629      	mov	r1, r5
 80042f8:	f7fc f902 	bl	8000500 <__aeabi_dmul>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 8004304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004306:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800430a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800430e:	f7fb ff41 	bl	8000194 <__adddf3>
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	4610      	mov	r0, r2
 8004318:	4619      	mov	r1, r3
 800431a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800431e:	f7fb ff39 	bl	8000194 <__adddf3>
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800432a:	f7fb ff33 	bl	8000194 <__adddf3>
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 8004336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004338:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800433c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800433e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004342:	f7fc f8dd 	bl	8000500 <__aeabi_dmul>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 800434e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004350:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8004354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004356:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800435a:	2202      	movs	r2, #2
 800435c:	f000 f8ae 	bl	80044bc <pow_bmp3>
 8004360:	4603      	mov	r3, r0
 8004362:	4618      	mov	r0, r3
 8004364:	f7fc f874 	bl	8000450 <__aeabi_f2d>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4620      	mov	r0, r4
 800436e:	4629      	mov	r1, r5
 8004370:	f7fc f8c6 	bl	8000500 <__aeabi_dmul>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 800437c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800437e:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8004382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004384:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8004388:	2203      	movs	r2, #3
 800438a:	f000 f897 	bl	80044bc <pow_bmp3>
 800438e:	4603      	mov	r3, r0
 8004390:	4618      	mov	r0, r3
 8004392:	f7fc f85d 	bl	8000450 <__aeabi_f2d>
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	4620      	mov	r0, r4
 800439c:	4629      	mov	r1, r5
 800439e:	f7fc f8af 	bl	8000500 <__aeabi_dmul>
 80043a2:	4602      	mov	r2, r0
 80043a4:	460b      	mov	r3, r1
 80043a6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out2 = uncomp_data->pressure *
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fc f82c 	bl	800040c <__aeabi_ui2d>
 80043b4:	4604      	mov	r4, r0
 80043b6:	460d      	mov	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 80043b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043ba:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80043be:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043c2:	f7fb fee7 	bl	8000194 <__adddf3>
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	4610      	mov	r0, r2
 80043cc:	4619      	mov	r1, r3
 80043ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80043d2:	f7fb fedf 	bl	8000194 <__adddf3>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	4610      	mov	r0, r2
 80043dc:	4619      	mov	r1, r3
 80043de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043e2:	f7fb fed7 	bl	8000194 <__adddf3>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
    partial_out2 = uncomp_data->pressure *
 80043ea:	4620      	mov	r0, r4
 80043ec:	4629      	mov	r1, r5
 80043ee:	f7fc f887 	bl	8000500 <__aeabi_dmul>
 80043f2:	4602      	mov	r2, r0
 80043f4:	460b      	mov	r3, r1
 80043f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fc f804 	bl	800040c <__aeabi_ui2d>
 8004404:	2202      	movs	r2, #2
 8004406:	f000 f859 	bl	80044bc <pow_bmp3>
 800440a:	4603      	mov	r3, r0
 800440c:	4618      	mov	r0, r3
 800440e:	f7fc f81f 	bl	8000450 <__aeabi_f2d>
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 800441a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800441c:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8004420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004422:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8004426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004428:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800442c:	f7fc f868 	bl	8000500 <__aeabi_dmul>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4620      	mov	r0, r4
 8004436:	4629      	mov	r1, r5
 8004438:	f7fb feac 	bl	8000194 <__adddf3>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = partial_data1 * partial_data2;
 8004444:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004448:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800444c:	f7fc f858 	bl	8000500 <__aeabi_dmul>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4618      	mov	r0, r3
 800445e:	f7fb ffd5 	bl	800040c <__aeabi_ui2d>
 8004462:	2203      	movs	r2, #3
 8004464:	f000 f82a 	bl	80044bc <pow_bmp3>
 8004468:	4603      	mov	r3, r0
 800446a:	4618      	mov	r0, r3
 800446c:	f7fb fff0 	bl	8000450 <__aeabi_f2d>
 8004470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004472:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004476:	f7fc f843 	bl	8000500 <__aeabi_dmul>
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004482:	f7fb fe87 	bl	8000194 <__adddf3>
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    comp_press = partial_out1 + partial_out2 + partial_data4;
 800448e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004492:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004496:	f7fb fe7d 	bl	8000194 <__adddf3>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80044a2:	f7fb fe77 	bl	8000194 <__adddf3>
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return comp_press;
 80044ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80044b2:	4610      	mov	r0, r2
 80044b4:	4619      	mov	r1, r3
 80044b6:	3748      	adds	r7, #72	; 0x48
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bdb0      	pop	{r4, r5, r7, pc}

080044bc <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80044c6:	4613      	mov	r3, r2
 80044c8:	71fb      	strb	r3, [r7, #7]
    float pow_output = 1;
 80044ca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80044ce:	617b      	str	r3, [r7, #20]

    while (power != 0)
 80044d0:	e00d      	b.n	80044ee <pow_bmp3+0x32>
    {
        pow_output = (float) base * pow_output;
 80044d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044d6:	f7fc fad5 	bl	8000a84 <__aeabi_d2f>
 80044da:	4603      	mov	r3, r0
 80044dc:	4619      	mov	r1, r3
 80044de:	6978      	ldr	r0, [r7, #20]
 80044e0:	f7fc fc2e 	bl	8000d40 <__aeabi_fmul>
 80044e4:	4603      	mov	r3, r0
 80044e6:	617b      	str	r3, [r7, #20]
        power--;
 80044e8:	79fb      	ldrb	r3, [r7, #7]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	71fb      	strb	r3, [r7, #7]
    while (power != 0)
 80044ee:	79fb      	ldrb	r3, [r7, #7]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1ee      	bne.n	80044d2 <pow_bmp3+0x16>
    }

    return pow_output;
 80044f4:	697b      	ldr	r3, [r7, #20]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 80044fe:	b480      	push	{r7}
 8004500:	b085      	sub	sp, #20
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 8004508:	2300      	movs	r3, #0
 800450a:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	4013      	ands	r3, r2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8004516:	2301      	movs	r3, #1
 8004518:	73fb      	strb	r3, [r7, #15]
 800451a:	e001      	b.n	8004520 <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 800451c:	2300      	movs	r3, #0
 800451e:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 8004520:	7bfb      	ldrb	r3, [r7, #15]
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	4770      	bx	lr

0800452c <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00f      	beq.n	800455a <null_ptr_check+0x2e>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00b      	beq.n	800455a <null_ptr_check+0x2e>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d007      	beq.n	800455a <null_ptr_check+0x2e>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8004556:	2b00      	cmp	r3, #0
 8004558:	d102      	bne.n	8004560 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 800455a:	23ff      	movs	r3, #255	; 0xff
 800455c:	73fb      	strb	r3, [r7, #15]
 800455e:	e001      	b.n	8004564 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 8004560:	2300      	movs	r3, #0
 8004562:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004564:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	bc80      	pop	{r7}
 8004570:	4770      	bx	lr
 8004572:	0000      	movs	r0, r0
 8004574:	0000      	movs	r0, r0
	...

08004578 <_ZN6BMP390C1EP19__I2C_HandleTypeDef>:
static int8_t bmp390_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr);
static int8_t bmp390_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr);
static int8_t validate_trimming_param(struct bmp3_dev *dev);
static int8_t cal_crc(uint8_t seed, uint8_t data);

BMP390::BMP390(I2C_HandleTypeDef *pntr_hi2c) {
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  _meas_end = 0;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  _filterEnabled = _tempOSEnabled = _presOSEnabled = false;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 20e2 	ldrb.w	r2, [r3, #226]	; 0xe2
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
  temperature = -999;
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	a312      	add	r3, pc, #72	; (adr r3, 80045f8 <_ZN6BMP390C1EP19__I2C_HandleTypeDef+0x80>)
 80045ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b2:	e9c1 2300 	strd	r2, r3, [r1]
  pressure = -999;
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	a30f      	add	r3, pc, #60	; (adr r3, 80045f8 <_ZN6BMP390C1EP19__I2C_HandleTypeDef+0x80>)
 80045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045be:	e9c1 2302 	strd	r2, r3, [r1, #8]

  the_sensor.chip_id = BMP390_I2C_ADDRESS;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	22ee      	movs	r2, #238	; 0xee
 80045c6:	741a      	strb	r2, [r3, #16]
  the_sensor.intf = BMP3_I2C_INTF;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	761a      	strb	r2, [r3, #24]
  the_sensor.read = &bmp390_i2c_read;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a0b      	ldr	r2, [pc, #44]	; (8004600 <_ZN6BMP390C1EP19__I2C_HandleTypeDef+0x88>)
 80045d2:	61da      	str	r2, [r3, #28]
  the_sensor.write = &bmp390_i2c_write;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a0b      	ldr	r2, [pc, #44]	; (8004604 <_ZN6BMP390C1EP19__I2C_HandleTypeDef+0x8c>)
 80045d8:	621a      	str	r2, [r3, #32]
  the_sensor.intf_ptr = (void *)pntr_hi2c;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	615a      	str	r2, [r3, #20]
  the_sensor.dummy_byte = 0;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	769a      	strb	r2, [r3, #26]
  the_sensor.delay_us = &delay_usec;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a07      	ldr	r2, [pc, #28]	; (8004608 <_ZN6BMP390C1EP19__I2C_HandleTypeDef+0x90>)
 80045ea:	625a      	str	r2, [r3, #36]	; 0x24
}
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4618      	mov	r0, r3
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bc80      	pop	{r7}
 80045f6:	4770      	bx	lr
 80045f8:	00000000 	.word	0x00000000
 80045fc:	c08f3800 	.word	0xc08f3800
 8004600:	08004933 	.word	0x08004933
 8004604:	080048e1 	.word	0x080048e1
 8004608:	080047bd 	.word	0x080047bd

0800460c <_ZN6BMP3904initEv>:

bool BMP390::init(){
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
	int8_t rslt = BMP3_OK;
 8004614:	2300      	movs	r3, #0
 8004616:	73fb      	strb	r3, [r7, #15]
	/* Reset the sensor */
	rslt = bmp3_soft_reset(&the_sensor);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3310      	adds	r3, #16
 800461c:	4618      	mov	r0, r3
 800461e:	f7fe fe5c 	bl	80032da <bmp3_soft_reset>
 8004622:	4603      	mov	r3, r0
 8004624:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMP3_OK) { return false; }
 8004626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <_ZN6BMP3904initEv+0x26>
 800462e:	2300      	movs	r3, #0
 8004630:	e028      	b.n	8004684 <_ZN6BMP3904initEv+0x78>

	rslt = bmp3_init(&the_sensor);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	3310      	adds	r3, #16
 8004636:	4618      	mov	r0, r3
 8004638:	f7fe fc8d 	bl	8002f56 <bmp3_init>
 800463c:	4603      	mov	r3, r0
 800463e:	73fb      	strb	r3, [r7, #15]
	rslt = validate_trimming_param(&the_sensor);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3310      	adds	r3, #16
 8004644:	4618      	mov	r0, r3
 8004646:	f000 f99d 	bl	8004984 <_ZL23validate_trimming_paramP8bmp3_dev>
 800464a:	4603      	mov	r3, r0
 800464c:	73fb      	strb	r3, [r7, #15]

	if (rslt != BMP3_OK) { return false; }
 800464e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <_ZN6BMP3904initEv+0x4e>
 8004656:	2300      	movs	r3, #0
 8004658:	e014      	b.n	8004684 <_ZN6BMP3904initEv+0x78>

	setTemperatureOversampling(BMP3_NO_OVERSAMPLING);
 800465a:	2100      	movs	r1, #0
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f8c3 	bl	80047e8 <_ZN6BMP39026setTemperatureOversamplingEh>
	setPressureOversampling(BMP3_NO_OVERSAMPLING);
 8004662:	2100      	movs	r1, #0
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f8e0 	bl	800482a <_ZN6BMP39023setPressureOversamplingEh>
	setIIRFilterCoeff(BMP3_IIR_FILTER_DISABLE);
 800466a:	2100      	movs	r1, #0
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f8fd 	bl	800486c <_ZN6BMP39017setIIRFilterCoeffEh>
	setOutputDataRate(BMP3_ODR_25_HZ);
 8004672:	2103      	movs	r1, #3
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f91a 	bl	80048ae <_ZN6BMP39017setOutputDataRateEh>

	// don't do anything till we request a reading
	the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

	return true;
 8004682:	2301      	movs	r3, #1
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <_ZN6BMP39015readTemperatureEv>:

float BMP390::readTemperature(void) {
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  performReading();
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f80c 	bl	80046b2 <_ZN6BMP39014performReadingEv>
  return temperature;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a0:	4610      	mov	r0, r2
 80046a2:	4619      	mov	r1, r3
 80046a4:	f7fc f9ee 	bl	8000a84 <__aeabi_d2f>
 80046a8:	4603      	mov	r3, r0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <_ZN6BMP39014performReadingEv>:

  float atmospheric = readPressure() / 100.0F;
  return 44330.0 * (1.0 - std::pow(atmospheric / seaLevel, 0.1903));
}

bool BMP390::performReading(void) {
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b088      	sub	sp, #32
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  /* Used to select the settings user needs to change */
  uint16_t settings_sel = 0;
 80046ba:	2300      	movs	r3, #0
 80046bc:	83fb      	strh	r3, [r7, #30]
  /* Variable used to select the sensor component */
  uint8_t sensor_comp = 0;
 80046be:	2300      	movs	r3, #0
 80046c0:	777b      	strb	r3, [r7, #29]

  /* Select the pressure and temperature sensor to be enabled */
  the_sensor.settings.temp_en = BMP3_ENABLE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
  settings_sel |= BMP3_SEL_TEMP_EN;
 80046ca:	8bfb      	ldrh	r3, [r7, #30]
 80046cc:	f043 0304 	orr.w	r3, r3, #4
 80046d0:	83fb      	strh	r3, [r7, #30]
  sensor_comp |= BMP3_TEMP;
 80046d2:	7f7b      	ldrb	r3, [r7, #29]
 80046d4:	f043 0302 	orr.w	r3, r3, #2
 80046d8:	777b      	strb	r3, [r7, #29]
  if (_tempOSEnabled) {
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <_ZN6BMP39014performReadingEv+0x3a>
    settings_sel |= BMP3_SEL_TEMP_OS;
 80046e4:	8bfb      	ldrh	r3, [r7, #30]
 80046e6:	f043 0320 	orr.w	r3, r3, #32
 80046ea:	83fb      	strh	r3, [r7, #30]
  }

  the_sensor.settings.press_en = BMP3_ENABLE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
  settings_sel |= BMP3_SEL_PRESS_EN;
 80046f4:	8bfb      	ldrh	r3, [r7, #30]
 80046f6:	f043 0302 	orr.w	r3, r3, #2
 80046fa:	83fb      	strh	r3, [r7, #30]
  sensor_comp |= BMP3_PRESS;
 80046fc:	7f7b      	ldrb	r3, [r7, #29]
 80046fe:	f043 0301 	orr.w	r3, r3, #1
 8004702:	777b      	strb	r3, [r7, #29]
  if (_presOSEnabled) {
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <_ZN6BMP39014performReadingEv+0x64>
    settings_sel |= BMP3_SEL_PRESS_OS;
 800470e:	8bfb      	ldrh	r3, [r7, #30]
 8004710:	f043 0310 	orr.w	r3, r3, #16
 8004714:	83fb      	strh	r3, [r7, #30]
  }

  if (_filterEnabled) {
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <_ZN6BMP39014performReadingEv+0x76>
    settings_sel |= BMP3_SEL_IIR_FILTER;
 8004720:	8bfb      	ldrh	r3, [r7, #30]
 8004722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004726:	83fb      	strh	r3, [r7, #30]
  }

  if (_ODREnabled) {
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <_ZN6BMP39014performReadingEv+0x88>
    settings_sel |= BMP3_SEL_ODR;
 8004732:	8bfb      	ldrh	r3, [r7, #30]
 8004734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004738:	83fb      	strh	r3, [r7, #30]

  // set interrupt to data ready
  // settings_sel |= BMP3_DRDY_EN_SEL | BMP3_LEVEL_SEL | BMP3_LATCH_SEL;

  /* Set the desired sensor configuration */
  rslt = bmp3_set_sensor_settings(settings_sel, &the_sensor);
 800473a:	8bfa      	ldrh	r2, [r7, #30]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3310      	adds	r3, #16
 8004740:	4619      	mov	r1, r3
 8004742:	4610      	mov	r0, r2
 8004744:	f7fe fd73 	bl	800322e <bmp3_set_sensor_settings>
 8004748:	4603      	mov	r3, r0
 800474a:	773b      	strb	r3, [r7, #28]

  if (rslt != BMP3_OK)
 800474c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <_ZN6BMP39014performReadingEv+0xa6>
    return false;
 8004754:	2300      	movs	r3, #0
 8004756:	e02c      	b.n	80047b2 <_ZN6BMP39014performReadingEv+0x100>

  /* Set the power mode */
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
  rslt = bmp3_set_op_mode(&the_sensor);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3310      	adds	r3, #16
 8004764:	4618      	mov	r0, r3
 8004766:	f7fe fe10 	bl	800338a <bmp3_set_op_mode>
 800476a:	4603      	mov	r3, r0
 800476c:	773b      	strb	r3, [r7, #28]
  if (rslt != BMP3_OK)
 800476e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <_ZN6BMP39014performReadingEv+0xc8>
    return false;
 8004776:	2300      	movs	r3, #0
 8004778:	e01b      	b.n	80047b2 <_ZN6BMP39014performReadingEv+0x100>

  /* Variable used to store the compensated data */
  struct bmp3_data data;

  /* Temperature and Pressure data are read and stored in the bmp3_data instance */
  rslt = bmp3_get_sensor_data(sensor_comp, &data, &the_sensor);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f103 0210 	add.w	r2, r3, #16
 8004780:	f107 0108 	add.w	r1, r7, #8
 8004784:	7f7b      	ldrb	r3, [r7, #29]
 8004786:	4618      	mov	r0, r3
 8004788:	f7fe fe6e 	bl	8003468 <bmp3_get_sensor_data>
 800478c:	4603      	mov	r3, r0
 800478e:	773b      	strb	r3, [r7, #28]
  if (rslt != BMP3_OK)
 8004790:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <_ZN6BMP39014performReadingEv+0xea>
    return false;
 8004798:	2300      	movs	r3, #0
 800479a:	e00a      	b.n	80047b2 <_ZN6BMP39014performReadingEv+0x100>


  /* Save the temperature and pressure data */
  temperature = data.temperature;
 800479c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047a0:	6879      	ldr	r1, [r7, #4]
 80047a2:	e9c1 2300 	strd	r2, r3, [r1]
  pressure = data.pressure;
 80047a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	e9c1 2302 	strd	r2, r3, [r1, #8]

  return true;
 80047b0:	2301      	movs	r3, #1
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3720      	adds	r7, #32
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
	...

080047bc <_ZL10delay_usecmPv>:

// Our hardware interface functions
static void delay_usec(uint32_t us, void *intf_ptr){
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
	uint8_t ms = us/1000;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a06      	ldr	r2, [pc, #24]	; (80047e4 <_ZL10delay_usecmPv+0x28>)
 80047ca:	fba2 2303 	umull	r2, r3, r2, r3
 80047ce:	099b      	lsrs	r3, r3, #6
 80047d0:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(ms);
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fd fe7d 	bl	80024d4 <HAL_Delay>
}
 80047da:	bf00      	nop
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	10624dd3 	.word	0x10624dd3

080047e8 <_ZN6BMP39026setTemperatureOversamplingEh>:

bool BMP390::setTemperatureOversampling(uint8_t oversample) {
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	70fb      	strb	r3, [r7, #3]
  if (oversample > BMP3_OVERSAMPLING_32X)
 80047f4:	78fb      	ldrb	r3, [r7, #3]
 80047f6:	2b05      	cmp	r3, #5
 80047f8:	d901      	bls.n	80047fe <_ZN6BMP39026setTemperatureOversamplingEh+0x16>
    return false;
 80047fa:	2300      	movs	r3, #0
 80047fc:	e010      	b.n	8004820 <_ZN6BMP39026setTemperatureOversamplingEh+0x38>

  the_sensor.settings.odr_filter.temp_os = oversample;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	78fa      	ldrb	r2, [r7, #3]
 8004802:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

  if (oversample == BMP3_NO_OVERSAMPLING)
 8004806:	78fb      	ldrb	r3, [r7, #3]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d104      	bne.n	8004816 <_ZN6BMP39026setTemperatureOversamplingEh+0x2e>
    _tempOSEnabled = false;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8004814:	e003      	b.n	800481e <_ZN6BMP39026setTemperatureOversamplingEh+0x36>
  else
    _tempOSEnabled = true;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1

  return true;
 800481e:	2301      	movs	r3, #1
}
 8004820:	4618      	mov	r0, r3
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	bc80      	pop	{r7}
 8004828:	4770      	bx	lr

0800482a <_ZN6BMP39023setPressureOversamplingEh>:
   BMP3_OVERSAMPLING_2X, BMP3_OVERSAMPLING_4X, BMP3_OVERSAMPLING_8X,
   BMP3_OVERSAMPLING_16X, BMP3_OVERSAMPLING_32X
    @return True on success, False on failure
*/
/**************************************************************************/
bool BMP390::setPressureOversampling(uint8_t oversample) {
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	460b      	mov	r3, r1
 8004834:	70fb      	strb	r3, [r7, #3]
  if (oversample > BMP3_OVERSAMPLING_32X)
 8004836:	78fb      	ldrb	r3, [r7, #3]
 8004838:	2b05      	cmp	r3, #5
 800483a:	d901      	bls.n	8004840 <_ZN6BMP39023setPressureOversamplingEh+0x16>
    return false;
 800483c:	2300      	movs	r3, #0
 800483e:	e010      	b.n	8004862 <_ZN6BMP39023setPressureOversamplingEh+0x38>

  the_sensor.settings.odr_filter.press_os = oversample;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	78fa      	ldrb	r2, [r7, #3]
 8004844:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

  if (oversample == BMP3_NO_OVERSAMPLING)
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d104      	bne.n	8004858 <_ZN6BMP39023setPressureOversamplingEh+0x2e>
    _presOSEnabled = false;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8004856:	e003      	b.n	8004860 <_ZN6BMP39023setPressureOversamplingEh+0x36>
  else
    _presOSEnabled = true;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2

  return true;
 8004860:	2301      	movs	r3, #1
}
 8004862:	4618      	mov	r0, r3
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <_ZN6BMP39017setIIRFilterCoeffEh>:
   BMP3_IIR_FILTER_COEFF_31, BMP3_IIR_FILTER_COEFF_63, BMP3_IIR_FILTER_COEFF_127
    @return True on success, False on failure

*/
/**************************************************************************/
bool BMP390::setIIRFilterCoeff(uint8_t filtercoeff) {
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	70fb      	strb	r3, [r7, #3]
  if (filtercoeff > BMP3_IIR_FILTER_COEFF_127)
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	2b07      	cmp	r3, #7
 800487c:	d901      	bls.n	8004882 <_ZN6BMP39017setIIRFilterCoeffEh+0x16>
    return false;
 800487e:	2300      	movs	r3, #0
 8004880:	e010      	b.n	80048a4 <_ZN6BMP39017setIIRFilterCoeffEh+0x38>

  the_sensor.settings.odr_filter.iir_filter = filtercoeff;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	78fa      	ldrb	r2, [r7, #3]
 8004886:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

  if (filtercoeff == BMP3_IIR_FILTER_DISABLE)
 800488a:	78fb      	ldrb	r3, [r7, #3]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d104      	bne.n	800489a <_ZN6BMP39017setIIRFilterCoeffEh+0x2e>
    _filterEnabled = false;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 8004898:	e003      	b.n	80048a2 <_ZN6BMP39017setIIRFilterCoeffEh+0x36>
  else
    _filterEnabled = true;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0

  return true;
 80048a2:	2301      	movs	r3, #1
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bc80      	pop	{r7}
 80048ac:	4770      	bx	lr

080048ae <_ZN6BMP39017setOutputDataRateEh>:
   BMP3_ODR_0_01_HZ, BMP3_ODR_0_006_HZ, BMP3_ODR_0_003_HZ, or BMP3_ODR_0_001_HZ
    @return True on success, False on failure

*/
/**************************************************************************/
bool BMP390::setOutputDataRate(uint8_t odr) {
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	460b      	mov	r3, r1
 80048b8:	70fb      	strb	r3, [r7, #3]
  if (odr > BMP3_ODR_0_001_HZ)
 80048ba:	78fb      	ldrb	r3, [r7, #3]
 80048bc:	2b11      	cmp	r3, #17
 80048be:	d901      	bls.n	80048c4 <_ZN6BMP39017setOutputDataRateEh+0x16>
    return false;
 80048c0:	2300      	movs	r3, #0
 80048c2:	e008      	b.n	80048d6 <_ZN6BMP39017setOutputDataRateEh+0x28>

  the_sensor.settings.odr_filter.odr = odr;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	78fa      	ldrb	r2, [r7, #3]
 80048c8:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6

  _ODREnabled = true;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3

  return true;
 80048d4:	2301      	movs	r3, #1
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	bc80      	pop	{r7}
 80048de:	4770      	bx	lr

080048e0 <_ZL16bmp390_i2c_writehPKhmPv>:

static int8_t bmp390_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr){
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08a      	sub	sp, #40	; 0x28
 80048e4:	af04      	add	r7, sp, #16
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	607a      	str	r2, [r7, #4]
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	4603      	mov	r3, r0
 80048ee:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	617b      	str	r3, [r7, #20]
	if (HAL_I2C_Mem_Write(hi2c, BMP390_I2C_ADDRESS, reg_addr, I2C_MEMADD_SIZE_8BIT, (uint8_t *)reg_data, len, HAL_MAX_DELAY) != HAL_OK) {
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004900:	9102      	str	r1, [sp, #8]
 8004902:	9301      	str	r3, [sp, #4]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	2301      	movs	r3, #1
 800490a:	21ee      	movs	r1, #238	; 0xee
 800490c:	6978      	ldr	r0, [r7, #20]
 800490e:	f002 fc97 	bl	8007240 <HAL_I2C_Mem_Write>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	bf14      	ite	ne
 8004918:	2301      	movne	r3, #1
 800491a:	2300      	moveq	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <_ZL16bmp390_i2c_writehPKhmPv+0x48>
		// Error handling: You can handle write errors here
		return -1;
 8004922:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004926:	e000      	b.n	800492a <_ZL16bmp390_i2c_writehPKhmPv+0x4a>
	}
	return 0;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <_ZL15bmp390_i2c_readhPhmPv>:

static int8_t bmp390_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr){
 8004932:	b580      	push	{r7, lr}
 8004934:	b08a      	sub	sp, #40	; 0x28
 8004936:	af04      	add	r7, sp, #16
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	603b      	str	r3, [r7, #0]
 800493e:	4603      	mov	r3, r0
 8004940:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	617b      	str	r3, [r7, #20]
	if (HAL_I2C_Mem_Read(hi2c, BMP390_I2C_ADDRESS, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, len, HAL_MAX_DELAY) != HAL_OK) {
 8004946:	7bfb      	ldrb	r3, [r7, #15]
 8004948:	b29a      	uxth	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	b29b      	uxth	r3, r3
 800494e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004952:	9102      	str	r1, [sp, #8]
 8004954:	9301      	str	r3, [sp, #4]
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	2301      	movs	r3, #1
 800495c:	21ee      	movs	r1, #238	; 0xee
 800495e:	6978      	ldr	r0, [r7, #20]
 8004960:	f002 fd82 	bl	8007468 <HAL_I2C_Mem_Read>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	bf14      	ite	ne
 800496a:	2301      	movne	r3, #1
 800496c:	2300      	moveq	r3, #0
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <_ZL15bmp390_i2c_readhPhmPv+0x48>
		// Error handling: You can handle write errors here
		return -1;
 8004974:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004978:	e000      	b.n	800497c <_ZL15bmp390_i2c_readhPhmPv+0x4a>
	}
	return 0;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <_ZL23validate_trimming_paramP8bmp3_dev>:

static int8_t validate_trimming_param(struct bmp3_dev *dev) {
 8004984:	b580      	push	{r7, lr}
 8004986:	b08a      	sub	sp, #40	; 0x28
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint8_t crc = 0xFF;
 800498c:	23ff      	movs	r3, #255	; 0xff
 800498e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t stored_crc;
  uint8_t trim_param[21];
  uint8_t i;

  rslt = bmp3_get_regs(BMP3_REG_CALIB_DATA, trim_param, 21, dev);
 8004992:	f107 010c 	add.w	r1, r7, #12
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2215      	movs	r2, #21
 800499a:	2031      	movs	r0, #49	; 0x31
 800499c:	f7fe fb22 	bl	8002fe4 <bmp3_get_regs>
 80049a0:	4603      	mov	r3, r0
 80049a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (rslt == BMP3_OK) {
 80049a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d133      	bne.n	8004a16 <_ZL23validate_trimming_paramP8bmp3_dev+0x92>
    for (i = 0; i < 21; i++) {
 80049ae:	2300      	movs	r3, #0
 80049b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80049b4:	e013      	b.n	80049de <_ZL23validate_trimming_paramP8bmp3_dev+0x5a>
      crc = (uint8_t)cal_crc(crc, trim_param[i]);
 80049b6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80049ba:	3328      	adds	r3, #40	; 0x28
 80049bc:	443b      	add	r3, r7
 80049be:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 80049c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80049c6:	4611      	mov	r1, r2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 f82a 	bl	8004a22 <_ZL7cal_crchh>
 80049ce:	4603      	mov	r3, r0
 80049d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (i = 0; i < 21; i++) {
 80049d4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80049d8:	3301      	adds	r3, #1
 80049da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80049de:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80049e2:	2b14      	cmp	r3, #20
 80049e4:	d9e7      	bls.n	80049b6 <_ZL23validate_trimming_paramP8bmp3_dev+0x32>
    }

    crc = (crc ^ 0xFF);
 80049e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80049ea:	43db      	mvns	r3, r3
 80049ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    rslt = bmp3_get_regs(0x30, &stored_crc, 1, dev);
 80049f0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	2030      	movs	r0, #48	; 0x30
 80049fa:	f7fe faf3 	bl	8002fe4 <bmp3_get_regs>
 80049fe:	4603      	mov	r3, r0
 8004a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (stored_crc != crc) {
 8004a04:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a08:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d002      	beq.n	8004a16 <_ZL23validate_trimming_paramP8bmp3_dev+0x92>
      rslt = -1;
 8004a10:	23ff      	movs	r3, #255	; 0xff
 8004a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  return rslt;
 8004a16:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3728      	adds	r7, #40	; 0x28
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <_ZL7cal_crchh>:

/*
 * @brief function to calculate CRC for the trimming parameters
 * */
static int8_t cal_crc(uint8_t seed, uint8_t data) {
 8004a22:	b480      	push	{r7}
 8004a24:	b085      	sub	sp, #20
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	4603      	mov	r3, r0
 8004a2a:	460a      	mov	r2, r1
 8004a2c:	71fb      	strb	r3, [r7, #7]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	71bb      	strb	r3, [r7, #6]
  int8_t poly = 0x1D;
 8004a32:	231d      	movs	r3, #29
 8004a34:	737b      	strb	r3, [r7, #13]
  int8_t var2;
  uint8_t i;

  for (i = 0; i < 8; i++) {
 8004a36:	2300      	movs	r3, #0
 8004a38:	73bb      	strb	r3, [r7, #14]
 8004a3a:	e01c      	b.n	8004a76 <_ZL7cal_crchh+0x54>
    if ((seed & 0x80) ^ (data & 0x80)) {
 8004a3c:	79fa      	ldrb	r2, [r7, #7]
 8004a3e:	79bb      	ldrb	r3, [r7, #6]
 8004a40:	4053      	eors	r3, r2
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	b25b      	sxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	da02      	bge.n	8004a50 <_ZL7cal_crchh+0x2e>
      var2 = 1;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	73fb      	strb	r3, [r7, #15]
 8004a4e:	e001      	b.n	8004a54 <_ZL7cal_crchh+0x32>
    } else {
      var2 = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	73fb      	strb	r3, [r7, #15]
    }

    seed = (seed & 0x7F) << 1;
 8004a54:	79fb      	ldrb	r3, [r7, #7]
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	71fb      	strb	r3, [r7, #7]
    data = (data & 0x7F) << 1;
 8004a5a:	79bb      	ldrb	r3, [r7, #6]
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	71bb      	strb	r3, [r7, #6]
    seed = seed ^ (uint8_t)(poly * var2);
 8004a60:	7b7a      	ldrb	r2, [r7, #13]
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
 8004a64:	fb12 f303 	smulbb	r3, r2, r3
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	4053      	eors	r3, r2
 8004a6e:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8004a70:	7bbb      	ldrb	r3, [r7, #14]
 8004a72:	3301      	adds	r3, #1
 8004a74:	73bb      	strb	r3, [r7, #14]
 8004a76:	7bbb      	ldrb	r3, [r7, #14]
 8004a78:	2b07      	cmp	r3, #7
 8004a7a:	d9df      	bls.n	8004a3c <_ZL7cal_crchh+0x1a>
  }

  return (int8_t)seed;
 8004a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bc80      	pop	{r7}
 8004a88:	4770      	bx	lr
	...

08004a8c <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef>:
#include <env_sensors.hpp>

EnvionmentSensors::EnvionmentSensors(I2C_HandleTypeDef *pntr_hi2c) : bmp(pntr_hi2c) {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6839      	ldr	r1, [r7, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff fd6c 	bl	8004578 <_ZN6BMP390C1EP19__I2C_HandleTypeDef>
  if(bmp.init()){
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff fdb2 	bl	800460c <_ZN6BMP3904initEv>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d006      	beq.n	8004abc <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef+0x30>
  	APP_LOG(TS_ON, VLEVEL_M, "bmp390 setup valid \r\n");
 8004aae:	4b13      	ldr	r3, [pc, #76]	; (8004afc <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef+0x70>)
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	2002      	movs	r0, #2
 8004ab6:	f01a ff2f 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
 8004aba:	e005      	b.n	8004ac8 <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef+0x3c>
  } else {
  	APP_LOG(TS_ON, VLEVEL_M, "bmp390 setup failed \r\n");
 8004abc:	4b10      	ldr	r3, [pc, #64]	; (8004b00 <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef+0x74>)
 8004abe:	2201      	movs	r2, #1
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	2002      	movs	r0, #2
 8004ac4:	f01a ff28 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
  }
  bmp.setTemperatureOversampling(BMP3_OVERSAMPLING_8X);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2103      	movs	r1, #3
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7ff fe8b 	bl	80047e8 <_ZN6BMP39026setTemperatureOversamplingEh>
	bmp.setPressureOversampling(BMP3_OVERSAMPLING_4X);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2102      	movs	r1, #2
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7ff fea7 	bl	800482a <_ZN6BMP39023setPressureOversamplingEh>
	bmp.setIIRFilterCoeff(BMP3_IIR_FILTER_COEFF_3);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2102      	movs	r1, #2
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7ff fec3 	bl	800486c <_ZN6BMP39017setIIRFilterCoeffEh>
	bmp.setOutputDataRate(BMP3_ODR_50_HZ);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2102      	movs	r1, #2
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff fedf 	bl	80048ae <_ZN6BMP39017setOutputDataRateEh>

}
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4618      	mov	r0, r3
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	0801fffc 	.word	0x0801fffc
 8004b00:	08020014 	.word	0x08020014

08004b04 <_ZN17EnvionmentSensors14getTemperatureEv>:

float EnvionmentSensors::getPressure(){
	return bmp.readPressure();
}

float EnvionmentSensors::getTemperature(){
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
	return bmp.readTemperature();
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff fdbc 	bl	800468c <_ZN6BMP39015readTemperatureEv>
 8004b14:	4603      	mov	r3, r0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b086      	sub	sp, #24
 8004b22:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8004b24:	1d3b      	adds	r3, r7, #4
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	605a      	str	r2, [r3, #4]
 8004b2c:	609a      	str	r2, [r3, #8]
 8004b2e:	60da      	str	r2, [r3, #12]
 8004b30:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8004b32:	2310      	movs	r3, #16
 8004b34:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8004b36:	2301      	movs	r3, #1
 8004b38:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8004b42:	1d3b      	adds	r3, r7, #4
 8004b44:	4619      	mov	r1, r3
 8004b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b4a:	f002 f88b 	bl	8006c64 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8004b4e:	2320      	movs	r3, #32
 8004b50:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8004b52:	1d3b      	adds	r3, r7, #4
 8004b54:	4619      	mov	r1, r3
 8004b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b5a:	f002 f883 	bl	8006c64 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8004b5e:	2200      	movs	r2, #0
 8004b60:	2120      	movs	r1, #32
 8004b62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b66:	f002 faab 	bl	80070c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	2110      	movs	r1, #16
 8004b6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b72:	f002 faa5 	bl	80070c0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	4603      	mov	r3, r0
 8004b88:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8004b8a:	79fb      	ldrb	r3, [r7, #7]
 8004b8c:	2b03      	cmp	r3, #3
 8004b8e:	d83f      	bhi.n	8004c10 <BSP_RADIO_ConfigRFSwitch+0x90>
 8004b90:	a201      	add	r2, pc, #4	; (adr r2, 8004b98 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8004b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b96:	bf00      	nop
 8004b98:	08004ba9 	.word	0x08004ba9
 8004b9c:	08004bc3 	.word	0x08004bc3
 8004ba0:	08004bdd 	.word	0x08004bdd
 8004ba4:	08004bf7 	.word	0x08004bf7
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8004ba8:	2200      	movs	r2, #0
 8004baa:	2110      	movs	r1, #16
 8004bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bb0:	f002 fa86 	bl	80070c0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2120      	movs	r1, #32
 8004bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bbc:	f002 fa80 	bl	80070c0 <HAL_GPIO_WritePin>
      break;      
 8004bc0:	e027      	b.n	8004c12 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	2110      	movs	r1, #16
 8004bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bca:	f002 fa79 	bl	80070c0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8004bce:	2200      	movs	r2, #0
 8004bd0:	2120      	movs	r1, #32
 8004bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bd6:	f002 fa73 	bl	80070c0 <HAL_GPIO_WritePin>
      break;
 8004bda:	e01a      	b.n	8004c12 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8004bdc:	2201      	movs	r2, #1
 8004bde:	2110      	movs	r1, #16
 8004be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004be4:	f002 fa6c 	bl	80070c0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8004be8:	2201      	movs	r2, #1
 8004bea:	2120      	movs	r1, #32
 8004bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bf0:	f002 fa66 	bl	80070c0 <HAL_GPIO_WritePin>
      break;
 8004bf4:	e00d      	b.n	8004c12 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	2110      	movs	r1, #16
 8004bfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bfe:	f002 fa5f 	bl	80070c0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8004c02:	2201      	movs	r2, #1
 8004c04:	2120      	movs	r1, #32
 8004c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c0a:	f002 fa59 	bl	80070c0 <HAL_GPIO_WritePin>
      break;
 8004c0e:	e000      	b.n	8004c12 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8004c10:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8004c20:	2302      	movs	r3, #2
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bc80      	pop	{r7}
 8004c28:	4770      	bx	lr

08004c2a <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8004c2e:	2301      	movs	r3, #1
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bc80      	pop	{r7}
 8004c36:	4770      	bx	lr

08004c38 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8004c3c:	2301      	movs	r3, #1
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bc80      	pop	{r7}
 8004c44:	4770      	bx	lr

08004c46 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b085      	sub	sp, #20
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d102      	bne.n	8004c5c <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8004c56:	230f      	movs	r3, #15
 8004c58:	60fb      	str	r3, [r7, #12]
 8004c5a:	e001      	b.n	8004c60 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8004c5c:	2316      	movs	r3, #22
 8004c5e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004c60:	68fb      	ldr	r3, [r7, #12]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bc80      	pop	{r7}
 8004c6a:	4770      	bx	lr

08004c6c <LL_DBGMCU_DisableDBGSleepMode>:
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004c70:	4b04      	ldr	r3, [pc, #16]	; (8004c84 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	4a03      	ldr	r2, [pc, #12]	; (8004c84 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8004c76:	f023 0301 	bic.w	r3, r3, #1
 8004c7a:	6053      	str	r3, [r2, #4]
}
 8004c7c:	bf00      	nop
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr
 8004c84:	e0042000 	.word	0xe0042000

08004c88 <LL_DBGMCU_DisableDBGStopMode>:
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8004c8c:	4b04      	ldr	r3, [pc, #16]	; (8004ca0 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	4a03      	ldr	r2, [pc, #12]	; (8004ca0 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8004c92:	f023 0302 	bic.w	r3, r3, #2
 8004c96:	6053      	str	r3, [r2, #4]
}
 8004c98:	bf00      	nop
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr
 8004ca0:	e0042000 	.word	0xe0042000

08004ca4 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8004ca8:	4b04      	ldr	r3, [pc, #16]	; (8004cbc <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	4a03      	ldr	r2, [pc, #12]	; (8004cbc <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8004cae:	f023 0304 	bic.w	r3, r3, #4
 8004cb2:	6053      	str	r3, [r2, #4]
}
 8004cb4:	bf00      	nop
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr
 8004cbc:	e0042000 	.word	0xe0042000

08004cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cca:	2003      	movs	r0, #3
 8004ccc:	f001 f984 	bl	8005fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004cd0:	f004 f802 	bl	8008cd8 <HAL_RCC_GetHCLKFreq>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	4a09      	ldr	r2, [pc, #36]	; (8004cfc <HAL_Init+0x3c>)
 8004cd8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004cda:	200f      	movs	r0, #15
 8004cdc:	f7fd fbdc 	bl	8002498 <HAL_InitTick>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	71fb      	strb	r3, [r7, #7]
 8004cea:	e001      	b.n	8004cf0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004cec:	f7fd f9aa 	bl	8002044 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004cf0:	79fb      	ldrb	r3, [r7, #7]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	20000000 	.word	0x20000000

08004d00 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8004d04:	4b02      	ldr	r3, [pc, #8]	; (8004d10 <HAL_GetUIDw0+0x10>)
 8004d06:	681b      	ldr	r3, [r3, #0]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bc80      	pop	{r7}
 8004d0e:	4770      	bx	lr
 8004d10:	1fff7590 	.word	0x1fff7590

08004d14 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8004d18:	4b02      	ldr	r3, [pc, #8]	; (8004d24 <HAL_GetUIDw1+0x10>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bc80      	pop	{r7}
 8004d22:	4770      	bx	lr
 8004d24:	1fff7594 	.word	0x1fff7594

08004d28 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8004d2c:	4b02      	ldr	r3, [pc, #8]	; (8004d38 <HAL_GetUIDw2+0x10>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr
 8004d38:	1fff7598 	.word	0x1fff7598

08004d3c <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8004d40:	f7ff ff94 	bl	8004c6c <LL_DBGMCU_DisableDBGSleepMode>
}
 8004d44:	bf00      	nop
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8004d4c:	f7ff ff9c 	bl	8004c88 <LL_DBGMCU_DisableDBGStopMode>
}
 8004d50:	bf00      	nop
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8004d58:	f7ff ffa4 	bl	8004ca4 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8004d5c:	bf00      	nop
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	431a      	orrs	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	601a      	str	r2, [r3, #0]
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bc80      	pop	{r7}
 8004d82:	4770      	bx	lr

08004d84 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bc80      	pop	{r7}
 8004d9c:	4770      	bx	lr

08004d9e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b085      	sub	sp, #20
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	60f8      	str	r0, [r7, #12]
 8004da6:	60b9      	str	r1, [r7, #8]
 8004da8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	695a      	ldr	r2, [r3, #20]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2107      	movs	r1, #7
 8004db6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dba:	43db      	mvns	r3, r3
 8004dbc:	401a      	ands	r2, r3
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	6879      	ldr	r1, [r7, #4]
 8004dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004dd0:	bf00      	nop
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bc80      	pop	{r7}
 8004dd8:	4770      	bx	lr

08004dda <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	695a      	ldr	r2, [r3, #20]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	f003 0304 	and.w	r3, r3, #4
 8004dee:	2107      	movs	r1, #7
 8004df0:	fa01 f303 	lsl.w	r3, r1, r3
 8004df4:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bc80      	pop	{r7}
 8004e08:	4770      	bx	lr

08004e0a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bc80      	pop	{r7}
 8004e2c:	4770      	bx	lr

08004e2e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b085      	sub	sp, #20
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	60b9      	str	r1, [r7, #8]
 8004e38:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	f003 031f 	and.w	r3, r3, #31
 8004e44:	210f      	movs	r1, #15
 8004e46:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4a:	43db      	mvns	r3, r3
 8004e4c:	401a      	ands	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	0e9b      	lsrs	r3, r3, #26
 8004e52:	f003 010f 	and.w	r1, r3, #15
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f003 031f 	and.w	r3, r3, #31
 8004e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e60:	431a      	orrs	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004e66:	bf00      	nop
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bc80      	pop	{r7}
 8004e6e:	4770      	bx	lr

08004e70 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bc80      	pop	{r7}
 8004e92:	4770      	bx	lr

08004e94 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004ea8:	43db      	mvns	r3, r3
 8004eaa:	401a      	ands	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr

08004eba <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b085      	sub	sp, #20
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	60f8      	str	r0, [r7, #12]
 8004ec2:	60b9      	str	r1, [r7, #8]
 8004ec4:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	695a      	ldr	r2, [r3, #20]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	021b      	lsls	r3, r3, #8
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	401a      	ands	r2, r3
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	0219      	lsls	r1, r3, #8
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	400b      	ands	r3, r1
 8004eda:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8004ede:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8004ee8:	bf00      	nop
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bc80      	pop	{r7}
 8004ef0:	4770      	bx	lr

08004ef2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004f02:	f023 0317 	bic.w	r3, r3, #23
 8004f06:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bc80      	pop	{r7}
 8004f16:	4770      	bx	lr

08004f18 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004f28:	f023 0317 	bic.w	r3, r3, #23
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6093      	str	r3, [r2, #8]
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bc80      	pop	{r7}
 8004f38:	4770      	bx	lr

08004f3a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f4e:	d101      	bne.n	8004f54 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004f50:	2301      	movs	r3, #1
 8004f52:	e000      	b.n	8004f56 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bc80      	pop	{r7}
 8004f5e:	4770      	bx	lr

08004f60 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f70:	f023 0317 	bic.w	r3, r3, #23
 8004f74:	f043 0201 	orr.w	r2, r3, #1
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bc80      	pop	{r7}
 8004f84:	4770      	bx	lr

08004f86 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f96:	f023 0317 	bic.w	r3, r3, #23
 8004f9a:	f043 0202 	orr.w	r2, r3, #2
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004fa2:	bf00      	nop
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bc80      	pop	{r7}
 8004faa:	4770      	bx	lr

08004fac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d101      	bne.n	8004fc4 <LL_ADC_IsEnabled+0x18>
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e000      	b.n	8004fc6 <LL_ADC_IsEnabled+0x1a>
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bc80      	pop	{r7}
 8004fce:	4770      	bx	lr

08004fd0 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d101      	bne.n	8004fe8 <LL_ADC_IsDisableOngoing+0x18>
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e000      	b.n	8004fea <LL_ADC_IsDisableOngoing+0x1a>
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bc80      	pop	{r7}
 8004ff2:	4770      	bx	lr

08004ff4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005004:	f023 0317 	bic.w	r3, r3, #23
 8005008:	f043 0204 	orr.w	r2, r3, #4
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	bc80      	pop	{r7}
 8005018:	4770      	bx	lr

0800501a <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800501a:	b480      	push	{r7}
 800501c:	b083      	sub	sp, #12
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800502a:	f023 0317 	bic.w	r3, r3, #23
 800502e:	f043 0210 	orr.w	r2, r3, #16
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	bc80      	pop	{r7}
 800503e:	4770      	bx	lr

08005040 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b04      	cmp	r3, #4
 8005052:	d101      	bne.n	8005058 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005054:	2301      	movs	r3, #1
 8005056:	e000      	b.n	800505a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	bc80      	pop	{r7}
 8005062:	4770      	bx	lr

08005064 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b088      	sub	sp, #32
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800506c:	2300      	movs	r3, #0
 800506e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8005070:	2300      	movs	r3, #0
 8005072:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8005074:	2300      	movs	r3, #0
 8005076:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005078:	2300      	movs	r3, #0
 800507a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e17e      	b.n	8005384 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005090:	2b00      	cmp	r3, #0
 8005092:	d109      	bne.n	80050a8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7fc f9df 	bl	8001458 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7ff ff44 	bl	8004f3a <LL_ADC_IsInternalRegulatorEnabled>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d115      	bne.n	80050e4 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff ff18 	bl	8004ef2 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80050c2:	4b9e      	ldr	r3, [pc, #632]	; (800533c <HAL_ADC_Init+0x2d8>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	099b      	lsrs	r3, r3, #6
 80050c8:	4a9d      	ldr	r2, [pc, #628]	; (8005340 <HAL_ADC_Init+0x2dc>)
 80050ca:	fba2 2303 	umull	r2, r3, r2, r3
 80050ce:	099b      	lsrs	r3, r3, #6
 80050d0:	3301      	adds	r3, #1
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80050d6:	e002      	b.n	80050de <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	3b01      	subs	r3, #1
 80050dc:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1f9      	bne.n	80050d8 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7ff ff26 	bl	8004f3a <LL_ADC_IsInternalRegulatorEnabled>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10d      	bne.n	8005110 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f8:	f043 0210 	orr.w	r2, r3, #16
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005104:	f043 0201 	orr.w	r2, r3, #1
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff ff93 	bl	8005040 <LL_ADC_REG_IsConversionOngoing>
 800511a:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005120:	f003 0310 	and.w	r3, r3, #16
 8005124:	2b00      	cmp	r3, #0
 8005126:	f040 8124 	bne.w	8005372 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	f040 8120 	bne.w	8005372 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005136:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800513a:	f043 0202 	orr.w	r2, r3, #2
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff ff30 	bl	8004fac <LL_ADC_IsEnabled>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	f040 80a7 	bne.w	80052a2 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	7e1b      	ldrb	r3, [r3, #24]
 800515c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800515e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	7e5b      	ldrb	r3, [r3, #25]
 8005164:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005166:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	7e9b      	ldrb	r3, [r3, #26]
 800516c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800516e:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005174:	2a00      	cmp	r2, #0
 8005176:	d002      	beq.n	800517e <HAL_ADC_Init+0x11a>
 8005178:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800517c:	e000      	b.n	8005180 <HAL_ADC_Init+0x11c>
 800517e:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005180:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005186:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	2b00      	cmp	r3, #0
 800518e:	da04      	bge.n	800519a <HAL_ADC_Init+0x136>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005198:	e001      	b.n	800519e <HAL_ADC_Init+0x13a>
 800519a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 800519e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80051a6:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80051a8:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d114      	bne.n	80051e4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	7e9b      	ldrb	r3, [r3, #26]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d104      	bne.n	80051cc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051c8:	61bb      	str	r3, [r7, #24]
 80051ca:	e00b      	b.n	80051e4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d0:	f043 0220 	orr.w	r2, r3, #32
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051dc:	f043 0201 	orr.w	r2, r3, #1
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d009      	beq.n	8005200 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80051f8:	4313      	orrs	r3, r2
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 800520a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	6812      	ldr	r2, [r2, #0]
 8005212:	69b9      	ldr	r1, [r7, #24]
 8005214:	430b      	orrs	r3, r1
 8005216:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005224:	4313      	orrs	r3, r2
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005232:	2b01      	cmp	r3, #1
 8005234:	d111      	bne.n	800525a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005242:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8005248:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800524e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	4313      	orrs	r3, r2
 8005254:	f043 0301 	orr.w	r3, r3, #1
 8005258:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	691a      	ldr	r2, [r3, #16]
 8005260:	4b38      	ldr	r3, [pc, #224]	; (8005344 <HAL_ADC_Init+0x2e0>)
 8005262:	4013      	ands	r3, r2
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6812      	ldr	r2, [r2, #0]
 8005268:	6979      	ldr	r1, [r7, #20]
 800526a:	430b      	orrs	r3, r1
 800526c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005276:	d014      	beq.n	80052a2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800527c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005280:	d00f      	beq.n	80052a2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800528a:	d00a      	beq.n	80052a2 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800528c:	4b2e      	ldr	r3, [pc, #184]	; (8005348 <HAL_ADC_Init+0x2e4>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800529c:	492a      	ldr	r1, [pc, #168]	; (8005348 <HAL_ADC_Init+0x2e4>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6818      	ldr	r0, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052aa:	461a      	mov	r2, r3
 80052ac:	2100      	movs	r1, #0
 80052ae:	f7ff fd76 	bl	8004d9e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6818      	ldr	r0, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	461a      	mov	r2, r3
 80052bc:	4923      	ldr	r1, [pc, #140]	; (800534c <HAL_ADC_Init+0x2e8>)
 80052be:	f7ff fd6e 	bl	8004d9e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d108      	bne.n	80052dc <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f062 020f 	orn	r2, r2, #15
 80052d8:	629a      	str	r2, [r3, #40]	; 0x28
 80052da:	e017      	b.n	800530c <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052e4:	d112      	bne.n	800530c <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	3b01      	subs	r3, #1
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	f003 031c 	and.w	r3, r3, #28
 80052f8:	f06f 020f 	mvn.w	r2, #15
 80052fc:	fa02 f103 	lsl.w	r1, r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2100      	movs	r1, #0
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff fd61 	bl	8004dda <LL_ADC_GetSamplingTimeCommonChannels>
 8005318:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800531e:	429a      	cmp	r2, r3
 8005320:	d116      	bne.n	8005350 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800532c:	f023 0303 	bic.w	r3, r3, #3
 8005330:	f043 0201 	orr.w	r2, r3, #1
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005338:	e023      	b.n	8005382 <HAL_ADC_Init+0x31e>
 800533a:	bf00      	nop
 800533c:	20000000 	.word	0x20000000
 8005340:	053e2d63 	.word	0x053e2d63
 8005344:	1ffffc02 	.word	0x1ffffc02
 8005348:	40012708 	.word	0x40012708
 800534c:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005354:	f023 0312 	bic.w	r3, r3, #18
 8005358:	f043 0210 	orr.w	r2, r3, #16
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005364:	f043 0201 	orr.w	r2, r3, #1
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005370:	e007      	b.n	8005382 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005376:	f043 0210 	orr.w	r2, r3, #16
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8005382:	7ffb      	ldrb	r3, [r7, #31]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3720      	adds	r7, #32
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e07a      	b.n	8005494 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a2:	f043 0202 	orr.w	r2, r3, #2
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 face 	bl	800594c <ADC_ConversionStop>
 80053b0:	4603      	mov	r3, r0
 80053b2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80053b4:	7bfb      	ldrb	r3, [r7, #15]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10f      	bne.n	80053da <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fb92 	bl	8005ae4 <ADC_Disable>
 80053c0:	4603      	mov	r3, r0
 80053c2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d102      	bne.n	80053d0 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff fd9f 	bl	8004f18 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6812      	ldr	r2, [r2, #0]
 80053e4:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80053e8:	f023 0303 	bic.w	r3, r3, #3
 80053ec:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f240 329f 	movw	r2, #927	; 0x39f
 80053f6:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68d9      	ldr	r1, [r3, #12]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	4b26      	ldr	r3, [pc, #152]	; (800549c <HAL_ADC_DeInit+0x110>)
 8005404:	400b      	ands	r3, r1
 8005406:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	691a      	ldr	r2, [r3, #16]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8005416:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695a      	ldr	r2, [r3, #20]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0207 	bic.w	r2, r2, #7
 8005426:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6a1a      	ldr	r2, [r3, #32]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8005436:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8005446:	625a      	str	r2, [r3, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8005456:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2200      	movs	r2, #0
 8005464:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8005466:	4b0e      	ldr	r3, [pc, #56]	; (80054a0 <HAL_ADC_DeInit+0x114>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a0d      	ldr	r2, [pc, #52]	; (80054a0 <HAL_ADC_DeInit+0x114>)
 800546c:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8005470:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7fc f804 	bl	8001480 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8005492:	7bfb      	ldrb	r3, [r7, #15]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	833e0200 	.word	0x833e0200
 80054a0:	40012708 	.word	0x40012708

080054a4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff fdc5 	bl	8005040 <LL_ADC_REG_IsConversionOngoing>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d132      	bne.n	8005522 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d101      	bne.n	80054ca <HAL_ADC_Start+0x26>
 80054c6:	2302      	movs	r3, #2
 80054c8:	e02e      	b.n	8005528 <HAL_ADC_Start+0x84>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 fa80 	bl	80059d8 <ADC_Enable>
 80054d8:	4603      	mov	r3, r0
 80054da:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80054dc:	7bfb      	ldrb	r3, [r7, #15]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d11a      	bne.n	8005518 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054ea:	f023 0301 	bic.w	r3, r3, #1
 80054ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	221c      	movs	r2, #28
 8005502:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4618      	mov	r0, r3
 8005512:	f7ff fd6f 	bl	8004ff4 <LL_ADC_REG_StartConversion>
 8005516:	e006      	b.n	8005526 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8005520:	e001      	b.n	8005526 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005522:	2302      	movs	r3, #2
 8005524:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8005526:	7bfb      	ldrb	r3, [r7, #15]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800553e:	2b01      	cmp	r3, #1
 8005540:	d101      	bne.n	8005546 <HAL_ADC_Stop+0x16>
 8005542:	2302      	movs	r3, #2
 8005544:	e022      	b.n	800558c <HAL_ADC_Stop+0x5c>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f9fc 	bl	800594c <ADC_ConversionStop>
 8005554:	4603      	mov	r3, r0
 8005556:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005558:	7bfb      	ldrb	r3, [r7, #15]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d111      	bne.n	8005582 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fac0 	bl	8005ae4 <ADC_Disable>
 8005564:	4603      	mov	r3, r0
 8005566:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005568:	7bfb      	ldrb	r3, [r7, #15]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d109      	bne.n	8005582 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005572:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005576:	f023 0301 	bic.w	r3, r3, #1
 800557a:	f043 0201 	orr.w	r2, r3, #1
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800558a:	7bfb      	ldrb	r3, [r7, #15]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	2b08      	cmp	r3, #8
 80055a4:	d102      	bne.n	80055ac <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80055a6:	2308      	movs	r3, #8
 80055a8:	60fb      	str	r3, [r7, #12]
 80055aa:	e010      	b.n	80055ce <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d007      	beq.n	80055ca <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055be:	f043 0220 	orr.w	r2, r3, #32
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e077      	b.n	80056ba <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80055ca:	2304      	movs	r3, #4
 80055cc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80055ce:	f7fc ff6d 	bl	80024ac <HAL_GetTick>
 80055d2:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80055d4:	e021      	b.n	800561a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055dc:	d01d      	beq.n	800561a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80055de:	f7fc ff65 	bl	80024ac <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d302      	bcc.n	80055f4 <HAL_ADC_PollForConversion+0x60>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d112      	bne.n	800561a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4013      	ands	r3, r2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10b      	bne.n	800561a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005606:	f043 0204 	orr.w	r2, r3, #4
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e04f      	b.n	80056ba <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4013      	ands	r3, r2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0d6      	beq.n	80055d6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800562c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4618      	mov	r0, r3
 800563a:	f7ff fbe6 	bl	8004e0a <LL_ADC_REG_IsTriggerSourceSWStart>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d031      	beq.n	80056a8 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	7e9b      	ldrb	r3, [r3, #26]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d12d      	bne.n	80056a8 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0308 	and.w	r3, r3, #8
 8005656:	2b08      	cmp	r3, #8
 8005658:	d126      	bne.n	80056a8 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4618      	mov	r0, r3
 8005660:	f7ff fcee 	bl	8005040 <LL_ADC_REG_IsConversionOngoing>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d112      	bne.n	8005690 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 020c 	bic.w	r2, r2, #12
 8005678:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005682:	f023 0301 	bic.w	r3, r3, #1
 8005686:	f043 0201 	orr.w	r2, r3, #1
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	659a      	str	r2, [r3, #88]	; 0x58
 800568e:	e00b      	b.n	80056a8 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005694:	f043 0220 	orr.w	r2, r3, #32
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056a0:	f043 0201 	orr.w	r2, r3, #1
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	7e1b      	ldrb	r3, [r3, #24]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d103      	bne.n	80056b8 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	220c      	movs	r2, #12
 80056b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bc80      	pop	{r7}
 80056d8:	4770      	bx	lr
	...

080056dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b088      	sub	sp, #32
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056e6:	2300      	movs	r3, #0
 80056e8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_ADC_ConfigChannel+0x28>
 8005700:	2302      	movs	r3, #2
 8005702:	e110      	b.n	8005926 <HAL_ADC_ConfigChannel+0x24a>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff fc95 	bl	8005040 <LL_ADC_REG_IsConversionOngoing>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	f040 80f7 	bne.w	800590c <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	2b02      	cmp	r3, #2
 8005724:	f000 80b1 	beq.w	800588a <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005730:	d004      	beq.n	800573c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005736:	4a7e      	ldr	r2, [pc, #504]	; (8005930 <HAL_ADC_ConfigChannel+0x254>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d108      	bne.n	800574e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4619      	mov	r1, r3
 8005746:	4610      	mov	r0, r2
 8005748:	f7ff fb92 	bl	8004e70 <LL_ADC_REG_SetSequencerChAdd>
 800574c:	e041      	b.n	80057d2 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f003 031f 	and.w	r3, r3, #31
 800575a:	210f      	movs	r1, #15
 800575c:	fa01 f303 	lsl.w	r3, r1, r3
 8005760:	43db      	mvns	r3, r3
 8005762:	401a      	ands	r2, r3
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800576c:	2b00      	cmp	r3, #0
 800576e:	d105      	bne.n	800577c <HAL_ADC_ConfigChannel+0xa0>
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	0e9b      	lsrs	r3, r3, #26
 8005776:	f003 031f 	and.w	r3, r3, #31
 800577a:	e011      	b.n	80057a0 <HAL_ADC_ConfigChannel+0xc4>
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	fa93 f3a3 	rbit	r3, r3
 8005788:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8005794:	2320      	movs	r3, #32
 8005796:	e003      	b.n	80057a0 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	fab3 f383 	clz	r3, r3
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	6839      	ldr	r1, [r7, #0]
 80057a2:	6849      	ldr	r1, [r1, #4]
 80057a4:	f001 011f 	and.w	r1, r1, #31
 80057a8:	408b      	lsls	r3, r1
 80057aa:	431a      	orrs	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	089b      	lsrs	r3, r3, #2
 80057b6:	1c5a      	adds	r2, r3, #1
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d808      	bhi.n	80057d2 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6818      	ldr	r0, [r3, #0]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	6859      	ldr	r1, [r3, #4]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	461a      	mov	r2, r3
 80057ce:	f7ff fb2e 	bl	8004e2e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6818      	ldr	r0, [r3, #0]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	6819      	ldr	r1, [r3, #0]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	461a      	mov	r2, r3
 80057e0:	f7ff fb6b 	bl	8004eba <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f280 8097 	bge.w	800591c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80057ee:	4851      	ldr	r0, [pc, #324]	; (8005934 <HAL_ADC_ConfigChannel+0x258>)
 80057f0:	f7ff fac8 	bl	8004d84 <LL_ADC_GetCommonPathInternalCh>
 80057f4:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a4f      	ldr	r2, [pc, #316]	; (8005938 <HAL_ADC_ConfigChannel+0x25c>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d120      	bne.n	8005842 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005806:	2b00      	cmp	r3, #0
 8005808:	d11b      	bne.n	8005842 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005810:	4619      	mov	r1, r3
 8005812:	4848      	ldr	r0, [pc, #288]	; (8005934 <HAL_ADC_ConfigChannel+0x258>)
 8005814:	f7ff faa4 	bl	8004d60 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005818:	4b48      	ldr	r3, [pc, #288]	; (800593c <HAL_ADC_ConfigChannel+0x260>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	099b      	lsrs	r3, r3, #6
 800581e:	4a48      	ldr	r2, [pc, #288]	; (8005940 <HAL_ADC_ConfigChannel+0x264>)
 8005820:	fba2 2303 	umull	r2, r3, r2, r3
 8005824:	099b      	lsrs	r3, r3, #6
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	4613      	mov	r3, r2
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	4413      	add	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005832:	e002      	b.n	800583a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	3b01      	subs	r3, #1
 8005838:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1f9      	bne.n	8005834 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005840:	e06c      	b.n	800591c <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a3f      	ldr	r2, [pc, #252]	; (8005944 <HAL_ADC_ConfigChannel+0x268>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d10c      	bne.n	8005866 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d107      	bne.n	8005866 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800585c:	4619      	mov	r1, r3
 800585e:	4835      	ldr	r0, [pc, #212]	; (8005934 <HAL_ADC_ConfigChannel+0x258>)
 8005860:	f7ff fa7e 	bl	8004d60 <LL_ADC_SetCommonPathInternalCh>
 8005864:	e05a      	b.n	800591c <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a37      	ldr	r2, [pc, #220]	; (8005948 <HAL_ADC_ConfigChannel+0x26c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d155      	bne.n	800591c <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005876:	2b00      	cmp	r3, #0
 8005878:	d150      	bne.n	800591c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005880:	4619      	mov	r1, r3
 8005882:	482c      	ldr	r0, [pc, #176]	; (8005934 <HAL_ADC_ConfigChannel+0x258>)
 8005884:	f7ff fa6c 	bl	8004d60 <LL_ADC_SetCommonPathInternalCh>
 8005888:	e048      	b.n	800591c <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005892:	d004      	beq.n	800589e <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005898:	4a25      	ldr	r2, [pc, #148]	; (8005930 <HAL_ADC_ConfigChannel+0x254>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d107      	bne.n	80058ae <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4619      	mov	r1, r3
 80058a8:	4610      	mov	r0, r2
 80058aa:	f7ff faf3 	bl	8004e94 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	da32      	bge.n	800591c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80058b6:	481f      	ldr	r0, [pc, #124]	; (8005934 <HAL_ADC_ConfigChannel+0x258>)
 80058b8:	f7ff fa64 	bl	8004d84 <LL_ADC_GetCommonPathInternalCh>
 80058bc:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a1d      	ldr	r2, [pc, #116]	; (8005938 <HAL_ADC_ConfigChannel+0x25c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d107      	bne.n	80058d8 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80058ce:	4619      	mov	r1, r3
 80058d0:	4818      	ldr	r0, [pc, #96]	; (8005934 <HAL_ADC_ConfigChannel+0x258>)
 80058d2:	f7ff fa45 	bl	8004d60 <LL_ADC_SetCommonPathInternalCh>
 80058d6:	e021      	b.n	800591c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a19      	ldr	r2, [pc, #100]	; (8005944 <HAL_ADC_ConfigChannel+0x268>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d107      	bne.n	80058f2 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058e8:	4619      	mov	r1, r3
 80058ea:	4812      	ldr	r0, [pc, #72]	; (8005934 <HAL_ADC_ConfigChannel+0x258>)
 80058ec:	f7ff fa38 	bl	8004d60 <LL_ADC_SetCommonPathInternalCh>
 80058f0:	e014      	b.n	800591c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a14      	ldr	r2, [pc, #80]	; (8005948 <HAL_ADC_ConfigChannel+0x26c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d10f      	bne.n	800591c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005902:	4619      	mov	r1, r3
 8005904:	480b      	ldr	r0, [pc, #44]	; (8005934 <HAL_ADC_ConfigChannel+0x258>)
 8005906:	f7ff fa2b 	bl	8004d60 <LL_ADC_SetCommonPathInternalCh>
 800590a:	e007      	b.n	800591c <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005910:	f043 0220 	orr.w	r2, r3, #32
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8005924:	7ffb      	ldrb	r3, [r7, #31]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3720      	adds	r7, #32
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	80000004 	.word	0x80000004
 8005934:	40012708 	.word	0x40012708
 8005938:	b0001000 	.word	0xb0001000
 800593c:	20000000 	.word	0x20000000
 8005940:	053e2d63 	.word	0x053e2d63
 8005944:	b8004000 	.word	0xb8004000
 8005948:	b4002000 	.word	0xb4002000

0800594c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4618      	mov	r0, r3
 800595a:	f7ff fb71 	bl	8005040 <LL_ADC_REG_IsConversionOngoing>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d033      	beq.n	80059cc <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4618      	mov	r0, r3
 800596a:	f7ff fb31 	bl	8004fd0 <LL_ADC_IsDisableOngoing>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d104      	bne.n	800597e <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4618      	mov	r0, r3
 800597a:	f7ff fb4e 	bl	800501a <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800597e:	f7fc fd95 	bl	80024ac <HAL_GetTick>
 8005982:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8005984:	e01b      	b.n	80059be <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005986:	f7fc fd91 	bl	80024ac <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d914      	bls.n	80059be <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 0304 	and.w	r3, r3, #4
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00d      	beq.n	80059be <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a6:	f043 0210 	orr.w	r2, r3, #16
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b2:	f043 0201 	orr.w	r2, r3, #1
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e007      	b.n	80059ce <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1dc      	bne.n	8005986 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
	...

080059d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80059e0:	2300      	movs	r3, #0
 80059e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7ff fadf 	bl	8004fac <LL_ADC_IsEnabled>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d169      	bne.n	8005ac8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689a      	ldr	r2, [r3, #8]
 80059fa:	4b36      	ldr	r3, [pc, #216]	; (8005ad4 <ADC_Enable+0xfc>)
 80059fc:	4013      	ands	r3, r2
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00d      	beq.n	8005a1e <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a06:	f043 0210 	orr.w	r2, r3, #16
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a12:	f043 0201 	orr.w	r2, r3, #1
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e055      	b.n	8005aca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7ff fa9c 	bl	8004f60 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8005a28:	482b      	ldr	r0, [pc, #172]	; (8005ad8 <ADC_Enable+0x100>)
 8005a2a:	f7ff f9ab 	bl	8004d84 <LL_ADC_GetCommonPathInternalCh>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00f      	beq.n	8005a58 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a38:	4b28      	ldr	r3, [pc, #160]	; (8005adc <ADC_Enable+0x104>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	099b      	lsrs	r3, r3, #6
 8005a3e:	4a28      	ldr	r2, [pc, #160]	; (8005ae0 <ADC_Enable+0x108>)
 8005a40:	fba2 2303 	umull	r2, r3, r2, r3
 8005a44:	099b      	lsrs	r3, r3, #6
 8005a46:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8005a48:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005a4a:	e002      	b.n	8005a52 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1f9      	bne.n	8005a4c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	7e5b      	ldrb	r3, [r3, #25]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d033      	beq.n	8005ac8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8005a60:	f7fc fd24 	bl	80024ac <HAL_GetTick>
 8005a64:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a66:	e028      	b.n	8005aba <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7ff fa9d 	bl	8004fac <LL_ADC_IsEnabled>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d104      	bne.n	8005a82 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7ff fa6f 	bl	8004f60 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005a82:	f7fc fd13 	bl	80024ac <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d914      	bls.n	8005aba <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d00d      	beq.n	8005aba <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa2:	f043 0210 	orr.w	r2, r3, #16
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aae:	f043 0201 	orr.w	r2, r3, #1
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e007      	b.n	8005aca <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d1cf      	bne.n	8005a68 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	80000017 	.word	0x80000017
 8005ad8:	40012708 	.word	0x40012708
 8005adc:	20000000 	.word	0x20000000
 8005ae0:	053e2d63 	.word	0x053e2d63

08005ae4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7ff fa6d 	bl	8004fd0 <LL_ADC_IsDisableOngoing>
 8005af6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7ff fa55 	bl	8004fac <LL_ADC_IsEnabled>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d047      	beq.n	8005b98 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d144      	bne.n	8005b98 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f003 0305 	and.w	r3, r3, #5
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d10c      	bne.n	8005b36 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7ff fa30 	bl	8004f86 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2203      	movs	r2, #3
 8005b2c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005b2e:	f7fc fcbd 	bl	80024ac <HAL_GetTick>
 8005b32:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b34:	e029      	b.n	8005b8a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b3a:	f043 0210 	orr.w	r2, r3, #16
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b46:	f043 0201 	orr.w	r2, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e023      	b.n	8005b9a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005b52:	f7fc fcab 	bl	80024ac <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d914      	bls.n	8005b8a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00d      	beq.n	8005b8a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b72:	f043 0210 	orr.w	r2, r3, #16
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b7e:	f043 0201 	orr.w	r2, r3, #1
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e007      	b.n	8005b9a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1dc      	bne.n	8005b52 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <LL_ADC_SetCalibrationFactor>:
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005bb2:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bc80      	pop	{r7}
 8005bc8:	4770      	bx	lr

08005bca <LL_ADC_GetCalibrationFactor>:
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b083      	sub	sp, #12
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bc80      	pop	{r7}
 8005be4:	4770      	bx	lr

08005be6 <LL_ADC_Enable>:
{
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bf6:	f023 0317 	bic.w	r3, r3, #23
 8005bfa:	f043 0201 	orr.w	r2, r3, #1
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	609a      	str	r2, [r3, #8]
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bc80      	pop	{r7}
 8005c0a:	4770      	bx	lr

08005c0c <LL_ADC_Disable>:
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c1c:	f023 0317 	bic.w	r3, r3, #23
 8005c20:	f043 0202 	orr.w	r2, r3, #2
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	609a      	str	r2, [r3, #8]
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bc80      	pop	{r7}
 8005c30:	4770      	bx	lr

08005c32 <LL_ADC_IsEnabled>:
{
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d101      	bne.n	8005c4a <LL_ADC_IsEnabled+0x18>
 8005c46:	2301      	movs	r3, #1
 8005c48:	e000      	b.n	8005c4c <LL_ADC_IsEnabled+0x1a>
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bc80      	pop	{r7}
 8005c54:	4770      	bx	lr

08005c56 <LL_ADC_StartCalibration>:
{
 8005c56:	b480      	push	{r7}
 8005c58:	b083      	sub	sp, #12
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c66:	f023 0317 	bic.w	r3, r3, #23
 8005c6a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	609a      	str	r2, [r3, #8]
}
 8005c72:	bf00      	nop
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bc80      	pop	{r7}
 8005c7a:	4770      	bx	lr

08005c7c <LL_ADC_IsCalibrationOnGoing>:
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c90:	d101      	bne.n	8005c96 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005c92:	2301      	movs	r3, #1
 8005c94:	e000      	b.n	8005c98 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bc80      	pop	{r7}
 8005ca0:	4770      	bx	lr

08005ca2 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b088      	sub	sp, #32
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005caa:	2300      	movs	r3, #0
 8005cac:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <HAL_ADCEx_Calibration_Start+0x1e>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e0b9      	b.n	8005e34 <HAL_ADCEx_Calibration_Start+0x192>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7ff ff0b 	bl	8005ae4 <ADC_Disable>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7ff ffab 	bl	8005c32 <LL_ADC_IsEnabled>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f040 809d 	bne.w	8005e1e <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005cec:	f043 0202 	orr.w	r2, r3, #2
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	f248 0303 	movw	r3, #32771	; 0x8003
 8005cfe:	4013      	ands	r3, r2
 8005d00:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	6812      	ldr	r2, [r2, #0]
 8005d0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d10:	f023 0303 	bic.w	r3, r3, #3
 8005d14:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8005d16:	2300      	movs	r3, #0
 8005d18:	61fb      	str	r3, [r7, #28]
 8005d1a:	e02e      	b.n	8005d7a <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7ff ff98 	bl	8005c56 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005d26:	e014      	b.n	8005d52 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8005d34:	d30d      	bcc.n	8005d52 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d3a:	f023 0312 	bic.w	r3, r3, #18
 8005d3e:	f043 0210 	orr.w	r2, r3, #16
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e070      	b.n	8005e34 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7ff ff90 	bl	8005c7c <LL_ADC_IsCalibrationOnGoing>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1e2      	bne.n	8005d28 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7ff ff2f 	bl	8005bca <LL_ADC_GetCalibrationFactor>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	4413      	add	r3, r2
 8005d72:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	3301      	adds	r3, #1
 8005d78:	61fb      	str	r3, [r7, #28]
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	2b07      	cmp	r3, #7
 8005d7e:	d9cd      	bls.n	8005d1c <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d88:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff ff29 	bl	8005be6 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	69b9      	ldr	r1, [r7, #24]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7ff ff01 	bl	8005ba2 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7ff ff31 	bl	8005c0c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005daa:	f7fc fb7f 	bl	80024ac <HAL_GetTick>
 8005dae:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005db0:	e01c      	b.n	8005dec <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005db2:	f7fc fb7b 	bl	80024ac <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d915      	bls.n	8005dec <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7ff ff34 	bl	8005c32 <LL_ADC_IsEnabled>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00d      	beq.n	8005dec <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd4:	f043 0210 	orr.w	r2, r3, #16
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005de0:	f043 0201 	orr.w	r2, r3, #1
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e023      	b.n	8005e34 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7ff ff1e 	bl	8005c32 <LL_ADC_IsEnabled>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1da      	bne.n	8005db2 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68d9      	ldr	r1, [r3, #12]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e10:	f023 0303 	bic.w	r3, r3, #3
 8005e14:	f043 0201 	orr.w	r2, r3, #1
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	659a      	str	r2, [r3, #88]	; 0x58
 8005e1c:	e005      	b.n	8005e2a <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e22:	f043 0210 	orr.w	r2, r3, #16
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8005e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3720      	adds	r7, #32
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f003 0307 	and.w	r3, r3, #7
 8005e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e4c:	4b0c      	ldr	r3, [pc, #48]	; (8005e80 <__NVIC_SetPriorityGrouping+0x44>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e58:	4013      	ands	r3, r2
 8005e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e6e:	4a04      	ldr	r2, [pc, #16]	; (8005e80 <__NVIC_SetPriorityGrouping+0x44>)
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	60d3      	str	r3, [r2, #12]
}
 8005e74:	bf00      	nop
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bc80      	pop	{r7}
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	e000ed00 	.word	0xe000ed00

08005e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e84:	b480      	push	{r7}
 8005e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e88:	4b04      	ldr	r3, [pc, #16]	; (8005e9c <__NVIC_GetPriorityGrouping+0x18>)
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	0a1b      	lsrs	r3, r3, #8
 8005e8e:	f003 0307 	and.w	r3, r3, #7
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bc80      	pop	{r7}
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	e000ed00 	.word	0xe000ed00

08005ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	db0b      	blt.n	8005eca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005eb2:	79fb      	ldrb	r3, [r7, #7]
 8005eb4:	f003 021f 	and.w	r2, r3, #31
 8005eb8:	4906      	ldr	r1, [pc, #24]	; (8005ed4 <__NVIC_EnableIRQ+0x34>)
 8005eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ebe:	095b      	lsrs	r3, r3, #5
 8005ec0:	2001      	movs	r0, #1
 8005ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8005ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005eca:	bf00      	nop
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bc80      	pop	{r7}
 8005ed2:	4770      	bx	lr
 8005ed4:	e000e100 	.word	0xe000e100

08005ed8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	4603      	mov	r3, r0
 8005ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	db12      	blt.n	8005f10 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005eea:	79fb      	ldrb	r3, [r7, #7]
 8005eec:	f003 021f 	and.w	r2, r3, #31
 8005ef0:	490a      	ldr	r1, [pc, #40]	; (8005f1c <__NVIC_DisableIRQ+0x44>)
 8005ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ef6:	095b      	lsrs	r3, r3, #5
 8005ef8:	2001      	movs	r0, #1
 8005efa:	fa00 f202 	lsl.w	r2, r0, r2
 8005efe:	3320      	adds	r3, #32
 8005f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f04:	f3bf 8f4f 	dsb	sy
}
 8005f08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005f0a:	f3bf 8f6f 	isb	sy
}
 8005f0e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bc80      	pop	{r7}
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	e000e100 	.word	0xe000e100

08005f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	4603      	mov	r3, r0
 8005f28:	6039      	str	r1, [r7, #0]
 8005f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	db0a      	blt.n	8005f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	490c      	ldr	r1, [pc, #48]	; (8005f6c <__NVIC_SetPriority+0x4c>)
 8005f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f3e:	0112      	lsls	r2, r2, #4
 8005f40:	b2d2      	uxtb	r2, r2
 8005f42:	440b      	add	r3, r1
 8005f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f48:	e00a      	b.n	8005f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	4908      	ldr	r1, [pc, #32]	; (8005f70 <__NVIC_SetPriority+0x50>)
 8005f50:	79fb      	ldrb	r3, [r7, #7]
 8005f52:	f003 030f 	and.w	r3, r3, #15
 8005f56:	3b04      	subs	r3, #4
 8005f58:	0112      	lsls	r2, r2, #4
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	440b      	add	r3, r1
 8005f5e:	761a      	strb	r2, [r3, #24]
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bc80      	pop	{r7}
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	e000e100 	.word	0xe000e100
 8005f70:	e000ed00 	.word	0xe000ed00

08005f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b089      	sub	sp, #36	; 0x24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f003 0307 	and.w	r3, r3, #7
 8005f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	f1c3 0307 	rsb	r3, r3, #7
 8005f8e:	2b04      	cmp	r3, #4
 8005f90:	bf28      	it	cs
 8005f92:	2304      	movcs	r3, #4
 8005f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	3304      	adds	r3, #4
 8005f9a:	2b06      	cmp	r3, #6
 8005f9c:	d902      	bls.n	8005fa4 <NVIC_EncodePriority+0x30>
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	3b03      	subs	r3, #3
 8005fa2:	e000      	b.n	8005fa6 <NVIC_EncodePriority+0x32>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb2:	43da      	mvns	r2, r3
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	401a      	ands	r2, r3
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc6:	43d9      	mvns	r1, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fcc:	4313      	orrs	r3, r2
         );
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3724      	adds	r7, #36	; 0x24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bc80      	pop	{r7}
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff ff2b 	bl	8005e3c <__NVIC_SetPriorityGrouping>
}
 8005fe6:	bf00      	nop
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b086      	sub	sp, #24
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	60b9      	str	r1, [r7, #8]
 8005ff8:	607a      	str	r2, [r7, #4]
 8005ffa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005ffc:	f7ff ff42 	bl	8005e84 <__NVIC_GetPriorityGrouping>
 8006000:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	68b9      	ldr	r1, [r7, #8]
 8006006:	6978      	ldr	r0, [r7, #20]
 8006008:	f7ff ffb4 	bl	8005f74 <NVIC_EncodePriority>
 800600c:	4602      	mov	r2, r0
 800600e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006012:	4611      	mov	r1, r2
 8006014:	4618      	mov	r0, r3
 8006016:	f7ff ff83 	bl	8005f20 <__NVIC_SetPriority>
}
 800601a:	bf00      	nop
 800601c:	3718      	adds	r7, #24
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b082      	sub	sp, #8
 8006026:	af00      	add	r7, sp, #0
 8006028:	4603      	mov	r3, r0
 800602a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800602c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006030:	4618      	mov	r0, r3
 8006032:	f7ff ff35 	bl	8005ea0 <__NVIC_EnableIRQ>
}
 8006036:	bf00      	nop
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b082      	sub	sp, #8
 8006042:	af00      	add	r7, sp, #0
 8006044:	4603      	mov	r3, r0
 8006046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800604c:	4618      	mov	r0, r3
 800604e:	f7ff ff43 	bl	8005ed8 <__NVIC_DisableIRQ>
}
 8006052:	bf00      	nop
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e08e      	b.n	800618c <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	461a      	mov	r2, r3
 8006074:	4b47      	ldr	r3, [pc, #284]	; (8006194 <HAL_DMA_Init+0x138>)
 8006076:	429a      	cmp	r2, r3
 8006078:	d80f      	bhi.n	800609a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	461a      	mov	r2, r3
 8006080:	4b45      	ldr	r3, [pc, #276]	; (8006198 <HAL_DMA_Init+0x13c>)
 8006082:	4413      	add	r3, r2
 8006084:	4a45      	ldr	r2, [pc, #276]	; (800619c <HAL_DMA_Init+0x140>)
 8006086:	fba2 2303 	umull	r2, r3, r2, r3
 800608a:	091b      	lsrs	r3, r3, #4
 800608c:	009a      	lsls	r2, r3, #2
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a42      	ldr	r2, [pc, #264]	; (80061a0 <HAL_DMA_Init+0x144>)
 8006096:	641a      	str	r2, [r3, #64]	; 0x40
 8006098:	e00e      	b.n	80060b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	4b40      	ldr	r3, [pc, #256]	; (80061a4 <HAL_DMA_Init+0x148>)
 80060a2:	4413      	add	r3, r2
 80060a4:	4a3d      	ldr	r2, [pc, #244]	; (800619c <HAL_DMA_Init+0x140>)
 80060a6:	fba2 2303 	umull	r2, r3, r2, r3
 80060aa:	091b      	lsrs	r3, r3, #4
 80060ac:	009a      	lsls	r2, r3, #2
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a3c      	ldr	r2, [pc, #240]	; (80061a8 <HAL_DMA_Init+0x14c>)
 80060b6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	6812      	ldr	r2, [r2, #0]
 80060ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80060ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d2:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6819      	ldr	r1, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	689a      	ldr	r2, [r3, #8]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	431a      	orrs	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	431a      	orrs	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	431a      	orrs	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	431a      	orrs	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	69db      	ldr	r3, [r3, #28]
 80060fa:	431a      	orrs	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	431a      	orrs	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 fb24 	bl	8006758 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006118:	d102      	bne.n	8006120 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685a      	ldr	r2, [r3, #4]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006128:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800612c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006136:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d010      	beq.n	8006162 <HAL_DMA_Init+0x106>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	2b04      	cmp	r3, #4
 8006146:	d80c      	bhi.n	8006162 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 fb4d 	bl	80067e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006152:	2200      	movs	r2, #0
 8006154:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800615e:	605a      	str	r2, [r3, #4]
 8006160:	e008      	b.n	8006174 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	40020407 	.word	0x40020407
 8006198:	bffdfff8 	.word	0xbffdfff8
 800619c:	cccccccd 	.word	0xcccccccd
 80061a0:	40020000 	.word	0x40020000
 80061a4:	bffdfbf8 	.word	0xbffdfbf8
 80061a8:	40020400 	.word	0x40020400

080061ac <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e07b      	b.n	80062b6 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 0201 	bic.w	r2, r2, #1
 80061cc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	461a      	mov	r2, r3
 80061d4:	4b3a      	ldr	r3, [pc, #232]	; (80062c0 <HAL_DMA_DeInit+0x114>)
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d80f      	bhi.n	80061fa <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	461a      	mov	r2, r3
 80061e0:	4b38      	ldr	r3, [pc, #224]	; (80062c4 <HAL_DMA_DeInit+0x118>)
 80061e2:	4413      	add	r3, r2
 80061e4:	4a38      	ldr	r2, [pc, #224]	; (80062c8 <HAL_DMA_DeInit+0x11c>)
 80061e6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ea:	091b      	lsrs	r3, r3, #4
 80061ec:	009a      	lsls	r2, r3, #2
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a35      	ldr	r2, [pc, #212]	; (80062cc <HAL_DMA_DeInit+0x120>)
 80061f6:	641a      	str	r2, [r3, #64]	; 0x40
 80061f8:	e00e      	b.n	8006218 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	4b33      	ldr	r3, [pc, #204]	; (80062d0 <HAL_DMA_DeInit+0x124>)
 8006202:	4413      	add	r3, r2
 8006204:	4a30      	ldr	r2, [pc, #192]	; (80062c8 <HAL_DMA_DeInit+0x11c>)
 8006206:	fba2 2303 	umull	r2, r3, r2, r3
 800620a:	091b      	lsrs	r3, r3, #4
 800620c:	009a      	lsls	r2, r3, #2
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a2f      	ldr	r2, [pc, #188]	; (80062d4 <HAL_DMA_DeInit+0x128>)
 8006216:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2200      	movs	r2, #0
 800621e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006224:	f003 021c 	and.w	r2, r3, #28
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622c:	2101      	movs	r1, #1
 800622e:	fa01 f202 	lsl.w	r2, r1, r2
 8006232:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fa8f 	bl	8006758 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800623e:	2200      	movs	r2, #0
 8006240:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800624a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00f      	beq.n	8006274 <HAL_DMA_DeInit+0xc8>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	2b04      	cmp	r3, #4
 800625a:	d80b      	bhi.n	8006274 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 fac3 	bl	80067e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006266:	2200      	movs	r2, #0
 8006268:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006272:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3708      	adds	r7, #8
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	40020407 	.word	0x40020407
 80062c4:	bffdfff8 	.word	0xbffdfff8
 80062c8:	cccccccd 	.word	0xcccccccd
 80062cc:	40020000 	.word	0x40020000
 80062d0:	bffdfbf8 	.word	0xbffdfbf8
 80062d4:	40020400 	.word	0x40020400

080062d8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
 80062e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062e6:	2300      	movs	r3, #0
 80062e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d101      	bne.n	80062f8 <HAL_DMA_Start_IT+0x20>
 80062f4:	2302      	movs	r3, #2
 80062f6:	e069      	b.n	80063cc <HAL_DMA_Start_IT+0xf4>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b01      	cmp	r3, #1
 800630a:	d155      	bne.n	80063b8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0201 	bic.w	r2, r2, #1
 8006328:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	68b9      	ldr	r1, [r7, #8]
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f000 f9d3 	bl	80066dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633a:	2b00      	cmp	r3, #0
 800633c:	d008      	beq.n	8006350 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f042 020e 	orr.w	r2, r2, #14
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	e00f      	b.n	8006370 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f022 0204 	bic.w	r2, r2, #4
 800635e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 020a 	orr.w	r2, r2, #10
 800636e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d007      	beq.n	800638e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006388:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800638c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006392:	2b00      	cmp	r3, #0
 8006394:	d007      	beq.n	80063a6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063a4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f042 0201 	orr.w	r2, r2, #1
 80063b4:	601a      	str	r2, [r3, #0]
 80063b6:	e008      	b.n	80063ca <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2280      	movs	r2, #128	; 0x80
 80063bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80063ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3718      	adds	r7, #24
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e04f      	b.n	8006486 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d008      	beq.n	8006404 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2204      	movs	r2, #4
 80063f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e040      	b.n	8006486 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 020e 	bic.w	r2, r2, #14
 8006412:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800641e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006422:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f022 0201 	bic.w	r2, r2, #1
 8006432:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006438:	f003 021c 	and.w	r2, r3, #28
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006440:	2101      	movs	r1, #1
 8006442:	fa01 f202 	lsl.w	r2, r1, r2
 8006446:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006450:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00c      	beq.n	8006474 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006464:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006468:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006472:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	bc80      	pop	{r7}
 800648e:	4770      	bx	lr

08006490 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006498:	2300      	movs	r3, #0
 800649a:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d005      	beq.n	80064b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2204      	movs	r2, #4
 80064ac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	73fb      	strb	r3, [r7, #15]
 80064b2:	e047      	b.n	8006544 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 020e 	bic.w	r2, r2, #14
 80064c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f022 0201 	bic.w	r2, r2, #1
 80064d2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064e8:	f003 021c 	and.w	r2, r3, #28
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f0:	2101      	movs	r1, #1
 80064f2:	fa01 f202 	lsl.w	r2, r1, r2
 80064f6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006500:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00c      	beq.n	8006524 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006514:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006518:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006522:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006538:	2b00      	cmp	r3, #0
 800653a:	d003      	beq.n	8006544 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	4798      	blx	r3
    }
  }
  return status;
 8006544:	7bfb      	ldrb	r3, [r7, #15]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800656c:	f003 031c 	and.w	r3, r3, #28
 8006570:	2204      	movs	r2, #4
 8006572:	409a      	lsls	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4013      	ands	r3, r2
 8006578:	2b00      	cmp	r3, #0
 800657a:	d027      	beq.n	80065cc <HAL_DMA_IRQHandler+0x7c>
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	f003 0304 	and.w	r3, r3, #4
 8006582:	2b00      	cmp	r3, #0
 8006584:	d022      	beq.n	80065cc <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0320 	and.w	r3, r3, #32
 8006590:	2b00      	cmp	r3, #0
 8006592:	d107      	bne.n	80065a4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0204 	bic.w	r2, r2, #4
 80065a2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a8:	f003 021c 	and.w	r2, r3, #28
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b0:	2104      	movs	r1, #4
 80065b2:	fa01 f202 	lsl.w	r2, r1, r2
 80065b6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f000 8081 	beq.w	80066c4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80065ca:	e07b      	b.n	80066c4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d0:	f003 031c 	and.w	r3, r3, #28
 80065d4:	2202      	movs	r2, #2
 80065d6:	409a      	lsls	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	4013      	ands	r3, r2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d03d      	beq.n	800665c <HAL_DMA_IRQHandler+0x10c>
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d038      	beq.n	800665c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0320 	and.w	r3, r3, #32
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10b      	bne.n	8006610 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f022 020a 	bic.w	r2, r2, #10
 8006606:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	461a      	mov	r2, r3
 8006616:	4b2e      	ldr	r3, [pc, #184]	; (80066d0 <HAL_DMA_IRQHandler+0x180>)
 8006618:	429a      	cmp	r2, r3
 800661a:	d909      	bls.n	8006630 <HAL_DMA_IRQHandler+0xe0>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006620:	f003 031c 	and.w	r3, r3, #28
 8006624:	4a2b      	ldr	r2, [pc, #172]	; (80066d4 <HAL_DMA_IRQHandler+0x184>)
 8006626:	2102      	movs	r1, #2
 8006628:	fa01 f303 	lsl.w	r3, r1, r3
 800662c:	6053      	str	r3, [r2, #4]
 800662e:	e008      	b.n	8006642 <HAL_DMA_IRQHandler+0xf2>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006634:	f003 031c 	and.w	r3, r3, #28
 8006638:	4a27      	ldr	r2, [pc, #156]	; (80066d8 <HAL_DMA_IRQHandler+0x188>)
 800663a:	2102      	movs	r1, #2
 800663c:	fa01 f303 	lsl.w	r3, r1, r3
 8006640:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664e:	2b00      	cmp	r3, #0
 8006650:	d038      	beq.n	80066c4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800665a:	e033      	b.n	80066c4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006660:	f003 031c 	and.w	r3, r3, #28
 8006664:	2208      	movs	r2, #8
 8006666:	409a      	lsls	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4013      	ands	r3, r2
 800666c:	2b00      	cmp	r3, #0
 800666e:	d02a      	beq.n	80066c6 <HAL_DMA_IRQHandler+0x176>
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f003 0308 	and.w	r3, r3, #8
 8006676:	2b00      	cmp	r3, #0
 8006678:	d025      	beq.n	80066c6 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 020e 	bic.w	r2, r2, #14
 8006688:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668e:	f003 021c 	and.w	r2, r3, #28
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006696:	2101      	movs	r1, #1
 8006698:	fa01 f202 	lsl.w	r2, r1, r2
 800669c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d004      	beq.n	80066c6 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80066c4:	bf00      	nop
 80066c6:	bf00      	nop
}
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	40020080 	.word	0x40020080
 80066d4:	40020400 	.word	0x40020400
 80066d8:	40020000 	.word	0x40020000

080066dc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
 80066e8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80066f2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d004      	beq.n	8006706 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006704:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800670a:	f003 021c 	and.w	r2, r3, #28
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006712:	2101      	movs	r1, #1
 8006714:	fa01 f202 	lsl.w	r2, r1, r2
 8006718:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	2b10      	cmp	r3, #16
 8006728:	d108      	bne.n	800673c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800673a:	e007      	b.n	800674c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	60da      	str	r2, [r3, #12]
}
 800674c:	bf00      	nop
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	bc80      	pop	{r7}
 8006754:	4770      	bx	lr
	...

08006758 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	461a      	mov	r2, r3
 8006766:	4b1c      	ldr	r3, [pc, #112]	; (80067d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8006768:	429a      	cmp	r2, r3
 800676a:	d813      	bhi.n	8006794 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006770:	089b      	lsrs	r3, r3, #2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006778:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	b2db      	uxtb	r3, r3
 8006786:	3b08      	subs	r3, #8
 8006788:	4a14      	ldr	r2, [pc, #80]	; (80067dc <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800678a:	fba2 2303 	umull	r2, r3, r2, r3
 800678e:	091b      	lsrs	r3, r3, #4
 8006790:	60fb      	str	r3, [r7, #12]
 8006792:	e011      	b.n	80067b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006798:	089b      	lsrs	r3, r3, #2
 800679a:	009a      	lsls	r2, r3, #2
 800679c:	4b10      	ldr	r3, [pc, #64]	; (80067e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800679e:	4413      	add	r3, r2
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	3b08      	subs	r3, #8
 80067ac:	4a0b      	ldr	r2, [pc, #44]	; (80067dc <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80067ae:	fba2 2303 	umull	r2, r3, r2, r3
 80067b2:	091b      	lsrs	r3, r3, #4
 80067b4:	3307      	adds	r3, #7
 80067b6:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a0a      	ldr	r2, [pc, #40]	; (80067e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80067bc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f003 031f 	and.w	r3, r3, #31
 80067c4:	2201      	movs	r2, #1
 80067c6:	409a      	lsls	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	651a      	str	r2, [r3, #80]	; 0x50
}
 80067cc:	bf00      	nop
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bc80      	pop	{r7}
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	40020407 	.word	0x40020407
 80067dc:	cccccccd 	.word	0xcccccccd
 80067e0:	4002081c 	.word	0x4002081c
 80067e4:	40020880 	.word	0x40020880

080067e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067f8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	4b0a      	ldr	r3, [pc, #40]	; (8006828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80067fe:	4413      	add	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	461a      	mov	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a08      	ldr	r2, [pc, #32]	; (800682c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800680c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	3b01      	subs	r3, #1
 8006812:	f003 0303 	and.w	r3, r3, #3
 8006816:	2201      	movs	r2, #1
 8006818:	409a      	lsls	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800681e:	bf00      	nop
 8006820:	3714      	adds	r7, #20
 8006822:	46bd      	mov	sp, r7
 8006824:	bc80      	pop	{r7}
 8006826:	4770      	bx	lr
 8006828:	1000823f 	.word	0x1000823f
 800682c:	40020940 	.word	0x40020940

08006830 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800683e:	4b1c      	ldr	r3, [pc, #112]	; (80068b0 <HAL_FLASH_Program+0x80>)
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d101      	bne.n	800684a <HAL_FLASH_Program+0x1a>
 8006846:	2302      	movs	r3, #2
 8006848:	e02d      	b.n	80068a6 <HAL_FLASH_Program+0x76>
 800684a:	4b19      	ldr	r3, [pc, #100]	; (80068b0 <HAL_FLASH_Program+0x80>)
 800684c:	2201      	movs	r2, #1
 800684e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006850:	4b17      	ldr	r3, [pc, #92]	; (80068b0 <HAL_FLASH_Program+0x80>)
 8006852:	2200      	movs	r2, #0
 8006854:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006856:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800685a:	f000 f869 	bl	8006930 <FLASH_WaitForLastOperation>
 800685e:	4603      	mov	r3, r0
 8006860:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8006862:	7dfb      	ldrb	r3, [r7, #23]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d11a      	bne.n	800689e <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d105      	bne.n	800687a <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800686e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006872:	68b8      	ldr	r0, [r7, #8]
 8006874:	f000 f8be 	bl	80069f4 <FLASH_Program_DoubleWord>
 8006878:	e004      	b.n	8006884 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	4619      	mov	r1, r3
 800687e:	68b8      	ldr	r0, [r7, #8]
 8006880:	f000 f8de 	bl	8006a40 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006884:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006888:	f000 f852 	bl	8006930 <FLASH_WaitForLastOperation>
 800688c:	4603      	mov	r3, r0
 800688e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8006890:	4b08      	ldr	r3, [pc, #32]	; (80068b4 <HAL_FLASH_Program+0x84>)
 8006892:	695a      	ldr	r2, [r3, #20]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	43db      	mvns	r3, r3
 8006898:	4906      	ldr	r1, [pc, #24]	; (80068b4 <HAL_FLASH_Program+0x84>)
 800689a:	4013      	ands	r3, r2
 800689c:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800689e:	4b04      	ldr	r3, [pc, #16]	; (80068b0 <HAL_FLASH_Program+0x80>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80068a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	20000364 	.word	0x20000364
 80068b4:	58004000 	.word	0x58004000

080068b8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80068be:	2300      	movs	r3, #0
 80068c0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80068c2:	4b0b      	ldr	r3, [pc, #44]	; (80068f0 <HAL_FLASH_Unlock+0x38>)
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	da0b      	bge.n	80068e2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80068ca:	4b09      	ldr	r3, [pc, #36]	; (80068f0 <HAL_FLASH_Unlock+0x38>)
 80068cc:	4a09      	ldr	r2, [pc, #36]	; (80068f4 <HAL_FLASH_Unlock+0x3c>)
 80068ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80068d0:	4b07      	ldr	r3, [pc, #28]	; (80068f0 <HAL_FLASH_Unlock+0x38>)
 80068d2:	4a09      	ldr	r2, [pc, #36]	; (80068f8 <HAL_FLASH_Unlock+0x40>)
 80068d4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80068d6:	4b06      	ldr	r3, [pc, #24]	; (80068f0 <HAL_FLASH_Unlock+0x38>)
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	da01      	bge.n	80068e2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80068e2:	79fb      	ldrb	r3, [r7, #7]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bc80      	pop	{r7}
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	58004000 	.word	0x58004000
 80068f4:	45670123 	.word	0x45670123
 80068f8:	cdef89ab 	.word	0xcdef89ab

080068fc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006902:	2300      	movs	r3, #0
 8006904:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006906:	4b09      	ldr	r3, [pc, #36]	; (800692c <HAL_FLASH_Lock+0x30>)
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	4a08      	ldr	r2, [pc, #32]	; (800692c <HAL_FLASH_Lock+0x30>)
 800690c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006910:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8006912:	4b06      	ldr	r3, [pc, #24]	; (800692c <HAL_FLASH_Lock+0x30>)
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	2b00      	cmp	r3, #0
 8006918:	db01      	blt.n	800691e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800691e:	79fb      	ldrb	r3, [r7, #7]
}
 8006920:	4618      	mov	r0, r3
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	bc80      	pop	{r7}
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	58004000 	.word	0x58004000

08006930 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8006938:	f7fb fdb8 	bl	80024ac <HAL_GetTick>
 800693c:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800693e:	e009      	b.n	8006954 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8006940:	f7fb fdb4 	bl	80024ac <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	429a      	cmp	r2, r3
 800694e:	d801      	bhi.n	8006954 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e047      	b.n	80069e4 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006954:	4b25      	ldr	r3, [pc, #148]	; (80069ec <FLASH_WaitForLastOperation+0xbc>)
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800695c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006960:	d0ee      	beq.n	8006940 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8006962:	4b22      	ldr	r3, [pc, #136]	; (80069ec <FLASH_WaitForLastOperation+0xbc>)
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006972:	4b1e      	ldr	r3, [pc, #120]	; (80069ec <FLASH_WaitForLastOperation+0xbc>)
 8006974:	2201      	movs	r2, #1
 8006976:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800697e:	4013      	ands	r3, r2
 8006980:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d007      	beq.n	800699c <FLASH_WaitForLastOperation+0x6c>
 800698c:	4b17      	ldr	r3, [pc, #92]	; (80069ec <FLASH_WaitForLastOperation+0xbc>)
 800698e:	699a      	ldr	r2, [r3, #24]
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006996:	4915      	ldr	r1, [pc, #84]	; (80069ec <FLASH_WaitForLastOperation+0xbc>)
 8006998:	4313      	orrs	r3, r2
 800699a:	618b      	str	r3, [r1, #24]
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d004      	beq.n	80069b0 <FLASH_WaitForLastOperation+0x80>
 80069a6:	4a11      	ldr	r2, [pc, #68]	; (80069ec <FLASH_WaitForLastOperation+0xbc>)
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80069ae:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00e      	beq.n	80069d4 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80069b6:	4a0e      	ldr	r2, [pc, #56]	; (80069f0 <FLASH_WaitForLastOperation+0xc0>)
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e011      	b.n	80069e4 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80069c0:	f7fb fd74 	bl	80024ac <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d801      	bhi.n	80069d4 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e007      	b.n	80069e4 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80069d4:	4b05      	ldr	r3, [pc, #20]	; (80069ec <FLASH_WaitForLastOperation+0xbc>)
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069e0:	d0ee      	beq.n	80069c0 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	58004000 	.word	0x58004000
 80069f0:	20000364 	.word	0x20000364

080069f4 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006a00:	4b0e      	ldr	r3, [pc, #56]	; (8006a3c <FLASH_Program_DoubleWord+0x48>)
 8006a02:	695b      	ldr	r3, [r3, #20]
 8006a04:	4a0d      	ldr	r2, [pc, #52]	; (8006a3c <FLASH_Program_DoubleWord+0x48>)
 8006a06:	f043 0301 	orr.w	r3, r3, #1
 8006a0a:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	683a      	ldr	r2, [r7, #0]
 8006a10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006a12:	f3bf 8f6f 	isb	sy
}
 8006a16:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8006a18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a1c:	f04f 0200 	mov.w	r2, #0
 8006a20:	f04f 0300 	mov.w	r3, #0
 8006a24:	000a      	movs	r2, r1
 8006a26:	2300      	movs	r3, #0
 8006a28:	68f9      	ldr	r1, [r7, #12]
 8006a2a:	3104      	adds	r1, #4
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	600b      	str	r3, [r1, #0]
}
 8006a30:	bf00      	nop
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bc80      	pop	{r7}
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	58004000 	.word	0x58004000

08006a40 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8006a40:	b480      	push	{r7}
 8006a42:	b089      	sub	sp, #36	; 0x24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8006a4a:	2340      	movs	r3, #64	; 0x40
 8006a4c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8006a56:	4b18      	ldr	r3, [pc, #96]	; (8006ab8 <FLASH_Program_Fast+0x78>)
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	4a17      	ldr	r2, [pc, #92]	; (8006ab8 <FLASH_Program_Fast+0x78>)
 8006a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a60:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a62:	f3ef 8310 	mrs	r3, PRIMASK
 8006a66:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a68:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8006a6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a6c:	b672      	cpsid	i
}
 8006a6e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	3304      	adds	r3, #4
 8006a82:	617b      	str	r3, [r7, #20]
    row_index--;
 8006a84:	7ffb      	ldrb	r3, [r7, #31]
 8006a86:	3b01      	subs	r3, #1
 8006a88:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8006a8a:	7ffb      	ldrb	r3, [r7, #31]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1ef      	bne.n	8006a70 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8006a90:	bf00      	nop
 8006a92:	4b09      	ldr	r3, [pc, #36]	; (8006ab8 <FLASH_Program_Fast+0x78>)
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a9e:	d0f8      	beq.n	8006a92 <FLASH_Program_Fast+0x52>
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f383 8810 	msr	PRIMASK, r3
}
 8006aaa:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006aac:	bf00      	nop
 8006aae:	3724      	adds	r7, #36	; 0x24
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bc80      	pop	{r7}
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	58004000 	.word	0x58004000

08006abc <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006ac6:	4b28      	ldr	r3, [pc, #160]	; (8006b68 <HAL_FLASHEx_Erase+0xac>)
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d101      	bne.n	8006ad2 <HAL_FLASHEx_Erase+0x16>
 8006ace:	2302      	movs	r3, #2
 8006ad0:	e046      	b.n	8006b60 <HAL_FLASHEx_Erase+0xa4>
 8006ad2:	4b25      	ldr	r3, [pc, #148]	; (8006b68 <HAL_FLASHEx_Erase+0xac>)
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006ad8:	4b23      	ldr	r3, [pc, #140]	; (8006b68 <HAL_FLASHEx_Erase+0xac>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006ade:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ae2:	f7ff ff25 	bl	8006930 <FLASH_WaitForLastOperation>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006aea:	7bfb      	ldrb	r3, [r7, #15]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d133      	bne.n	8006b58 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b04      	cmp	r3, #4
 8006af6:	d108      	bne.n	8006b0a <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8006af8:	f000 f838 	bl	8006b6c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006afc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b00:	f7ff ff16 	bl	8006930 <FLASH_WaitForLastOperation>
 8006b04:	4603      	mov	r3, r0
 8006b06:	73fb      	strb	r3, [r7, #15]
 8006b08:	e024      	b.n	8006b54 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b10:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	60bb      	str	r3, [r7, #8]
 8006b18:	e012      	b.n	8006b40 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8006b1a:	68b8      	ldr	r0, [r7, #8]
 8006b1c:	f000 f836 	bl	8006b8c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006b20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b24:	f7ff ff04 	bl	8006930 <FLASH_WaitForLastOperation>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	601a      	str	r2, [r3, #0]
          break;
 8006b38:	e00a      	b.n	8006b50 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	60bb      	str	r3, [r7, #8]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685a      	ldr	r2, [r3, #4]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	4413      	add	r3, r2
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d3e4      	bcc.n	8006b1a <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8006b50:	f000 f878 	bl	8006c44 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006b54:	f000 f832 	bl	8006bbc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006b58:	4b03      	ldr	r3, [pc, #12]	; (8006b68 <HAL_FLASHEx_Erase+0xac>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	701a      	strb	r2, [r3, #0]

  return status;
 8006b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	20000364 	.word	0x20000364

08006b6c <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8006b70:	4b05      	ldr	r3, [pc, #20]	; (8006b88 <FLASH_MassErase+0x1c>)
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	4a04      	ldr	r2, [pc, #16]	; (8006b88 <FLASH_MassErase+0x1c>)
 8006b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b7a:	f043 0304 	orr.w	r3, r3, #4
 8006b7e:	6153      	str	r3, [r2, #20]
#endif
}
 8006b80:	bf00      	nop
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bc80      	pop	{r7}
 8006b86:	4770      	bx	lr
 8006b88:	58004000 	.word	0x58004000

08006b8c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8006b94:	4b08      	ldr	r3, [pc, #32]	; (8006bb8 <FLASH_PageErase+0x2c>)
 8006b96:	695b      	ldr	r3, [r3, #20]
 8006b98:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	00db      	lsls	r3, r3, #3
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	4a05      	ldr	r2, [pc, #20]	; (8006bb8 <FLASH_PageErase+0x2c>)
 8006ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ba8:	f043 0302 	orr.w	r3, r3, #2
 8006bac:	6153      	str	r3, [r2, #20]
#endif
}
 8006bae:	bf00      	nop
 8006bb0:	370c      	adds	r7, #12
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bc80      	pop	{r7}
 8006bb6:	4770      	bx	lr
 8006bb8:	58004000 	.word	0x58004000

08006bbc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8006bc0:	4b1f      	ldr	r3, [pc, #124]	; (8006c40 <FLASH_FlushCaches+0x84>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d117      	bne.n	8006bfc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006bcc:	4b1c      	ldr	r3, [pc, #112]	; (8006c40 <FLASH_FlushCaches+0x84>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a1b      	ldr	r2, [pc, #108]	; (8006c40 <FLASH_FlushCaches+0x84>)
 8006bd2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bd6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006bd8:	4b19      	ldr	r3, [pc, #100]	; (8006c40 <FLASH_FlushCaches+0x84>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a18      	ldr	r2, [pc, #96]	; (8006c40 <FLASH_FlushCaches+0x84>)
 8006bde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006be2:	6013      	str	r3, [r2, #0]
 8006be4:	4b16      	ldr	r3, [pc, #88]	; (8006c40 <FLASH_FlushCaches+0x84>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a15      	ldr	r2, [pc, #84]	; (8006c40 <FLASH_FlushCaches+0x84>)
 8006bea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bee:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006bf0:	4b13      	ldr	r3, [pc, #76]	; (8006c40 <FLASH_FlushCaches+0x84>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a12      	ldr	r2, [pc, #72]	; (8006c40 <FLASH_FlushCaches+0x84>)
 8006bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006bfa:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8006bfc:	4b10      	ldr	r3, [pc, #64]	; (8006c40 <FLASH_FlushCaches+0x84>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d117      	bne.n	8006c38 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006c08:	4b0d      	ldr	r3, [pc, #52]	; (8006c40 <FLASH_FlushCaches+0x84>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a0c      	ldr	r2, [pc, #48]	; (8006c40 <FLASH_FlushCaches+0x84>)
 8006c0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c12:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006c14:	4b0a      	ldr	r3, [pc, #40]	; (8006c40 <FLASH_FlushCaches+0x84>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a09      	ldr	r2, [pc, #36]	; (8006c40 <FLASH_FlushCaches+0x84>)
 8006c1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	4b07      	ldr	r3, [pc, #28]	; (8006c40 <FLASH_FlushCaches+0x84>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a06      	ldr	r2, [pc, #24]	; (8006c40 <FLASH_FlushCaches+0x84>)
 8006c26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c2a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006c2c:	4b04      	ldr	r3, [pc, #16]	; (8006c40 <FLASH_FlushCaches+0x84>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a03      	ldr	r2, [pc, #12]	; (8006c40 <FLASH_FlushCaches+0x84>)
 8006c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c36:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8006c38:	bf00      	nop
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bc80      	pop	{r7}
 8006c3e:	4770      	bx	lr
 8006c40:	58004000 	.word	0x58004000

08006c44 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8006c44:	b480      	push	{r7}
 8006c46:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8006c48:	4b05      	ldr	r3, [pc, #20]	; (8006c60 <FLASH_AcknowledgePageErase+0x1c>)
 8006c4a:	695b      	ldr	r3, [r3, #20]
 8006c4c:	4a04      	ldr	r2, [pc, #16]	; (8006c60 <FLASH_AcknowledgePageErase+0x1c>)
 8006c4e:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8006c52:	f023 0302 	bic.w	r3, r3, #2
 8006c56:	6153      	str	r3, [r2, #20]
#endif
}
 8006c58:	bf00      	nop
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bc80      	pop	{r7}
 8006c5e:	4770      	bx	lr
 8006c60:	58004000 	.word	0x58004000

08006c64 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c72:	e140      	b.n	8006ef6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	2101      	movs	r1, #1
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c80:	4013      	ands	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f000 8132 	beq.w	8006ef0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f003 0303 	and.w	r3, r3, #3
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d005      	beq.n	8006ca4 <HAL_GPIO_Init+0x40>
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f003 0303 	and.w	r3, r3, #3
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d130      	bne.n	8006d06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	2203      	movs	r2, #3
 8006cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb4:	43db      	mvns	r3, r3
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	4013      	ands	r3, r2
 8006cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	68da      	ldr	r2, [r3, #12]
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	005b      	lsls	r3, r3, #1
 8006cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006cda:	2201      	movs	r2, #1
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce2:	43db      	mvns	r3, r3
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	091b      	lsrs	r3, r3, #4
 8006cf0:	f003 0201 	and.w	r2, r3, #1
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f003 0303 	and.w	r3, r3, #3
 8006d0e:	2b03      	cmp	r3, #3
 8006d10:	d017      	beq.n	8006d42 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	005b      	lsls	r3, r3, #1
 8006d1c:	2203      	movs	r2, #3
 8006d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d22:	43db      	mvns	r3, r3
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	4013      	ands	r3, r2
 8006d28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	689a      	ldr	r2, [r3, #8]
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	fa02 f303 	lsl.w	r3, r2, r3
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	693a      	ldr	r2, [r7, #16]
 8006d40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	f003 0303 	and.w	r3, r3, #3
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d123      	bne.n	8006d96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	08da      	lsrs	r2, r3, #3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	3208      	adds	r2, #8
 8006d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f003 0307 	and.w	r3, r3, #7
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	220f      	movs	r2, #15
 8006d66:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6a:	43db      	mvns	r3, r3
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	4013      	ands	r3, r2
 8006d70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	691a      	ldr	r2, [r3, #16]
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	f003 0307 	and.w	r3, r3, #7
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	08da      	lsrs	r2, r3, #3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	3208      	adds	r2, #8
 8006d90:	6939      	ldr	r1, [r7, #16]
 8006d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	005b      	lsls	r3, r3, #1
 8006da0:	2203      	movs	r2, #3
 8006da2:	fa02 f303 	lsl.w	r3, r2, r3
 8006da6:	43db      	mvns	r3, r3
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	4013      	ands	r3, r2
 8006dac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f003 0203 	and.w	r2, r3, #3
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	fa02 f303 	lsl.w	r3, r2, r3
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 808c 	beq.w	8006ef0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8006dd8:	4a4e      	ldr	r2, [pc, #312]	; (8006f14 <HAL_GPIO_Init+0x2b0>)
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	089b      	lsrs	r3, r3, #2
 8006dde:	3302      	adds	r3, #2
 8006de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006de4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f003 0303 	and.w	r3, r3, #3
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	2207      	movs	r2, #7
 8006df0:	fa02 f303 	lsl.w	r3, r2, r3
 8006df4:	43db      	mvns	r3, r3
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	4013      	ands	r3, r2
 8006dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006e02:	d00d      	beq.n	8006e20 <HAL_GPIO_Init+0x1bc>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a44      	ldr	r2, [pc, #272]	; (8006f18 <HAL_GPIO_Init+0x2b4>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d007      	beq.n	8006e1c <HAL_GPIO_Init+0x1b8>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a43      	ldr	r2, [pc, #268]	; (8006f1c <HAL_GPIO_Init+0x2b8>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d101      	bne.n	8006e18 <HAL_GPIO_Init+0x1b4>
 8006e14:	2302      	movs	r3, #2
 8006e16:	e004      	b.n	8006e22 <HAL_GPIO_Init+0x1be>
 8006e18:	2307      	movs	r3, #7
 8006e1a:	e002      	b.n	8006e22 <HAL_GPIO_Init+0x1be>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e000      	b.n	8006e22 <HAL_GPIO_Init+0x1be>
 8006e20:	2300      	movs	r3, #0
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	f002 0203 	and.w	r2, r2, #3
 8006e28:	0092      	lsls	r2, r2, #2
 8006e2a:	4093      	lsls	r3, r2
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006e32:	4938      	ldr	r1, [pc, #224]	; (8006f14 <HAL_GPIO_Init+0x2b0>)
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	089b      	lsrs	r3, r3, #2
 8006e38:	3302      	adds	r3, #2
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e40:	4b37      	ldr	r3, [pc, #220]	; (8006f20 <HAL_GPIO_Init+0x2bc>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	43db      	mvns	r3, r3
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d003      	beq.n	8006e64 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006e64:	4a2e      	ldr	r2, [pc, #184]	; (8006f20 <HAL_GPIO_Init+0x2bc>)
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006e6a:	4b2d      	ldr	r3, [pc, #180]	; (8006f20 <HAL_GPIO_Init+0x2bc>)
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	43db      	mvns	r3, r3
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	4013      	ands	r3, r2
 8006e78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006e8e:	4a24      	ldr	r2, [pc, #144]	; (8006f20 <HAL_GPIO_Init+0x2bc>)
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8006e94:	4b22      	ldr	r3, [pc, #136]	; (8006f20 <HAL_GPIO_Init+0x2bc>)
 8006e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e9a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	43db      	mvns	r3, r3
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8006eba:	4a19      	ldr	r2, [pc, #100]	; (8006f20 <HAL_GPIO_Init+0x2bc>)
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8006ec2:	4b17      	ldr	r3, [pc, #92]	; (8006f20 <HAL_GPIO_Init+0x2bc>)
 8006ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ec8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	43db      	mvns	r3, r3
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8006ee8:	4a0d      	ldr	r2, [pc, #52]	; (8006f20 <HAL_GPIO_Init+0x2bc>)
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	fa22 f303 	lsr.w	r3, r2, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f47f aeb7 	bne.w	8006c74 <HAL_GPIO_Init+0x10>
  }
}
 8006f06:	bf00      	nop
 8006f08:	bf00      	nop
 8006f0a:	371c      	adds	r7, #28
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bc80      	pop	{r7}
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	40010000 	.word	0x40010000
 8006f18:	48000400 	.word	0x48000400
 8006f1c:	48000800 	.word	0x48000800
 8006f20:	58000800 	.word	0x58000800

08006f24 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006f32:	e0af      	b.n	8007094 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006f34:	2201      	movs	r2, #1
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	4013      	ands	r3, r2
 8006f40:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f000 80a2 	beq.w	800708e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006f4a:	4a59      	ldr	r2, [pc, #356]	; (80070b0 <HAL_GPIO_DeInit+0x18c>)
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	089b      	lsrs	r3, r3, #2
 8006f50:	3302      	adds	r3, #2
 8006f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f56:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	f003 0303 	and.w	r3, r3, #3
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	2207      	movs	r2, #7
 8006f62:	fa02 f303 	lsl.w	r3, r2, r3
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	4013      	ands	r3, r2
 8006f6a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006f72:	d00d      	beq.n	8006f90 <HAL_GPIO_DeInit+0x6c>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a4f      	ldr	r2, [pc, #316]	; (80070b4 <HAL_GPIO_DeInit+0x190>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d007      	beq.n	8006f8c <HAL_GPIO_DeInit+0x68>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a4e      	ldr	r2, [pc, #312]	; (80070b8 <HAL_GPIO_DeInit+0x194>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d101      	bne.n	8006f88 <HAL_GPIO_DeInit+0x64>
 8006f84:	2302      	movs	r3, #2
 8006f86:	e004      	b.n	8006f92 <HAL_GPIO_DeInit+0x6e>
 8006f88:	2307      	movs	r3, #7
 8006f8a:	e002      	b.n	8006f92 <HAL_GPIO_DeInit+0x6e>
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e000      	b.n	8006f92 <HAL_GPIO_DeInit+0x6e>
 8006f90:	2300      	movs	r3, #0
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	f002 0203 	and.w	r2, r2, #3
 8006f98:	0092      	lsls	r2, r2, #2
 8006f9a:	4093      	lsls	r3, r2
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d136      	bne.n	8007010 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8006fa2:	4b46      	ldr	r3, [pc, #280]	; (80070bc <HAL_GPIO_DeInit+0x198>)
 8006fa4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	43db      	mvns	r3, r3
 8006fac:	4943      	ldr	r1, [pc, #268]	; (80070bc <HAL_GPIO_DeInit+0x198>)
 8006fae:	4013      	ands	r3, r2
 8006fb0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8006fb4:	4b41      	ldr	r3, [pc, #260]	; (80070bc <HAL_GPIO_DeInit+0x198>)
 8006fb6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	43db      	mvns	r3, r3
 8006fbe:	493f      	ldr	r1, [pc, #252]	; (80070bc <HAL_GPIO_DeInit+0x198>)
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8006fc6:	4b3d      	ldr	r3, [pc, #244]	; (80070bc <HAL_GPIO_DeInit+0x198>)
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	43db      	mvns	r3, r3
 8006fce:	493b      	ldr	r1, [pc, #236]	; (80070bc <HAL_GPIO_DeInit+0x198>)
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8006fd4:	4b39      	ldr	r3, [pc, #228]	; (80070bc <HAL_GPIO_DeInit+0x198>)
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	43db      	mvns	r3, r3
 8006fdc:	4937      	ldr	r1, [pc, #220]	; (80070bc <HAL_GPIO_DeInit+0x198>)
 8006fde:	4013      	ands	r3, r2
 8006fe0:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f003 0303 	and.w	r3, r3, #3
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	2207      	movs	r2, #7
 8006fec:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006ff2:	4a2f      	ldr	r2, [pc, #188]	; (80070b0 <HAL_GPIO_DeInit+0x18c>)
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	089b      	lsrs	r3, r3, #2
 8006ff8:	3302      	adds	r3, #2
 8006ffa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	43da      	mvns	r2, r3
 8007002:	482b      	ldr	r0, [pc, #172]	; (80070b0 <HAL_GPIO_DeInit+0x18c>)
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	089b      	lsrs	r3, r3, #2
 8007008:	400a      	ands	r2, r1
 800700a:	3302      	adds	r3, #2
 800700c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	005b      	lsls	r3, r3, #1
 8007018:	2103      	movs	r1, #3
 800701a:	fa01 f303 	lsl.w	r3, r1, r3
 800701e:	431a      	orrs	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	08da      	lsrs	r2, r3, #3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	3208      	adds	r2, #8
 800702c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	f003 0307 	and.w	r3, r3, #7
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	220f      	movs	r2, #15
 800703a:	fa02 f303 	lsl.w	r3, r2, r3
 800703e:	43db      	mvns	r3, r3
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	08d2      	lsrs	r2, r2, #3
 8007044:	4019      	ands	r1, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	3208      	adds	r2, #8
 800704a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	689a      	ldr	r2, [r3, #8]
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	005b      	lsls	r3, r3, #1
 8007056:	2103      	movs	r1, #3
 8007058:	fa01 f303 	lsl.w	r3, r1, r3
 800705c:	43db      	mvns	r3, r3
 800705e:	401a      	ands	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	2101      	movs	r1, #1
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	fa01 f303 	lsl.w	r3, r1, r3
 8007070:	43db      	mvns	r3, r3
 8007072:	401a      	ands	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	68da      	ldr	r2, [r3, #12]
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	2103      	movs	r1, #3
 8007082:	fa01 f303 	lsl.w	r3, r1, r3
 8007086:	43db      	mvns	r3, r3
 8007088:	401a      	ands	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	60da      	str	r2, [r3, #12]
    }

    position++;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	3301      	adds	r3, #1
 8007092:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	fa22 f303 	lsr.w	r3, r2, r3
 800709c:	2b00      	cmp	r3, #0
 800709e:	f47f af49 	bne.w	8006f34 <HAL_GPIO_DeInit+0x10>
  }
}
 80070a2:	bf00      	nop
 80070a4:	bf00      	nop
 80070a6:	371c      	adds	r7, #28
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bc80      	pop	{r7}
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	40010000 	.word	0x40010000
 80070b4:	48000400 	.word	0x48000400
 80070b8:	48000800 	.word	0x48000800
 80070bc:	58000800 	.word	0x58000800

080070c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	460b      	mov	r3, r1
 80070ca:	807b      	strh	r3, [r7, #2]
 80070cc:	4613      	mov	r3, r2
 80070ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80070d0:	787b      	ldrb	r3, [r7, #1]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d003      	beq.n	80070de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80070d6:	887a      	ldrh	r2, [r7, #2]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80070dc:	e002      	b.n	80070e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80070de:	887a      	ldrh	r2, [r7, #2]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bc80      	pop	{r7}
 80070ec:	4770      	bx	lr
	...

080070f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	4603      	mov	r3, r0
 80070f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80070fa:	4b08      	ldr	r3, [pc, #32]	; (800711c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80070fc:	68da      	ldr	r2, [r3, #12]
 80070fe:	88fb      	ldrh	r3, [r7, #6]
 8007100:	4013      	ands	r3, r2
 8007102:	2b00      	cmp	r3, #0
 8007104:	d006      	beq.n	8007114 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007106:	4a05      	ldr	r2, [pc, #20]	; (800711c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007108:	88fb      	ldrh	r3, [r7, #6]
 800710a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800710c:	88fb      	ldrh	r3, [r7, #6]
 800710e:	4618      	mov	r0, r3
 8007110:	f005 fc68 	bl	800c9e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8007114:	bf00      	nop
 8007116:	3708      	adds	r7, #8
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	58000800 	.word	0x58000800

08007120 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e081      	b.n	8007236 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d106      	bne.n	800714c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7fa fd94 	bl	8001c74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2224      	movs	r2, #36	; 0x24
 8007150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 0201 	bic.w	r2, r2, #1
 8007162:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007170:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	689a      	ldr	r2, [r3, #8]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007180:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d107      	bne.n	800719a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	689a      	ldr	r2, [r3, #8]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007196:	609a      	str	r2, [r3, #8]
 8007198:	e006      	b.n	80071a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	689a      	ldr	r2, [r3, #8]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80071a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d104      	bne.n	80071ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	6812      	ldr	r2, [r2, #0]
 80071c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80071c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68da      	ldr	r2, [r3, #12]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	691a      	ldr	r2, [r3, #16]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	69d9      	ldr	r1, [r3, #28]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a1a      	ldr	r2, [r3, #32]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	430a      	orrs	r2, r1
 8007206:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f042 0201 	orr.w	r2, r2, #1
 8007216:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2220      	movs	r2, #32
 8007222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
	...

08007240 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b088      	sub	sp, #32
 8007244:	af02      	add	r7, sp, #8
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	4608      	mov	r0, r1
 800724a:	4611      	mov	r1, r2
 800724c:	461a      	mov	r2, r3
 800724e:	4603      	mov	r3, r0
 8007250:	817b      	strh	r3, [r7, #10]
 8007252:	460b      	mov	r3, r1
 8007254:	813b      	strh	r3, [r7, #8]
 8007256:	4613      	mov	r3, r2
 8007258:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b20      	cmp	r3, #32
 8007264:	f040 80f9 	bne.w	800745a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007268:	6a3b      	ldr	r3, [r7, #32]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d002      	beq.n	8007274 <HAL_I2C_Mem_Write+0x34>
 800726e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007270:	2b00      	cmp	r3, #0
 8007272:	d105      	bne.n	8007280 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800727a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e0ed      	b.n	800745c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007286:	2b01      	cmp	r3, #1
 8007288:	d101      	bne.n	800728e <HAL_I2C_Mem_Write+0x4e>
 800728a:	2302      	movs	r3, #2
 800728c:	e0e6      	b.n	800745c <HAL_I2C_Mem_Write+0x21c>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007296:	f7fb f909 	bl	80024ac <HAL_GetTick>
 800729a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	2319      	movs	r3, #25
 80072a2:	2201      	movs	r2, #1
 80072a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 fac2 	bl	8007832 <I2C_WaitOnFlagUntilTimeout>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d001      	beq.n	80072b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e0d1      	b.n	800745c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2221      	movs	r2, #33	; 0x21
 80072bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2240      	movs	r2, #64	; 0x40
 80072c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6a3a      	ldr	r2, [r7, #32]
 80072d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80072d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072e0:	88f8      	ldrh	r0, [r7, #6]
 80072e2:	893a      	ldrh	r2, [r7, #8]
 80072e4:	8979      	ldrh	r1, [r7, #10]
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	9301      	str	r3, [sp, #4]
 80072ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	4603      	mov	r3, r0
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f000 f9d3 	bl	800769c <I2C_RequestMemoryWrite>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d005      	beq.n	8007308 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e0a9      	b.n	800745c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800730c:	b29b      	uxth	r3, r3
 800730e:	2bff      	cmp	r3, #255	; 0xff
 8007310:	d90e      	bls.n	8007330 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	22ff      	movs	r2, #255	; 0xff
 8007316:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800731c:	b2da      	uxtb	r2, r3
 800731e:	8979      	ldrh	r1, [r7, #10]
 8007320:	2300      	movs	r3, #0
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f000 fc1f 	bl	8007b6c <I2C_TransferConfig>
 800732e:	e00f      	b.n	8007350 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007334:	b29a      	uxth	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800733e:	b2da      	uxtb	r2, r3
 8007340:	8979      	ldrh	r1, [r7, #10]
 8007342:	2300      	movs	r3, #0
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f000 fc0e 	bl	8007b6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f000 faac 	bl	80078b2 <I2C_WaitOnTXISFlagUntilTimeout>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e07b      	b.n	800745c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007368:	781a      	ldrb	r2, [r3, #0]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007374:	1c5a      	adds	r2, r3, #1
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800737e:	b29b      	uxth	r3, r3
 8007380:	3b01      	subs	r3, #1
 8007382:	b29a      	uxth	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800738c:	3b01      	subs	r3, #1
 800738e:	b29a      	uxth	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007398:	b29b      	uxth	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d034      	beq.n	8007408 <HAL_I2C_Mem_Write+0x1c8>
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d130      	bne.n	8007408 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ac:	2200      	movs	r2, #0
 80073ae:	2180      	movs	r1, #128	; 0x80
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 fa3e 	bl	8007832 <I2C_WaitOnFlagUntilTimeout>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e04d      	b.n	800745c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	2bff      	cmp	r3, #255	; 0xff
 80073c8:	d90e      	bls.n	80073e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	22ff      	movs	r2, #255	; 0xff
 80073ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073d4:	b2da      	uxtb	r2, r3
 80073d6:	8979      	ldrh	r1, [r7, #10]
 80073d8:	2300      	movs	r3, #0
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f000 fbc3 	bl	8007b6c <I2C_TransferConfig>
 80073e6:	e00f      	b.n	8007408 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073f6:	b2da      	uxtb	r2, r3
 80073f8:	8979      	ldrh	r1, [r7, #10]
 80073fa:	2300      	movs	r3, #0
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f000 fbb2 	bl	8007b6c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800740c:	b29b      	uxth	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d19e      	bne.n	8007350 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f000 fa8b 	bl	8007932 <I2C_WaitOnSTOPFlagUntilTimeout>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e01a      	b.n	800745c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2220      	movs	r2, #32
 800742c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	6859      	ldr	r1, [r3, #4]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	4b0a      	ldr	r3, [pc, #40]	; (8007464 <HAL_I2C_Mem_Write+0x224>)
 800743a:	400b      	ands	r3, r1
 800743c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2220      	movs	r2, #32
 8007442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007456:	2300      	movs	r3, #0
 8007458:	e000      	b.n	800745c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800745a:	2302      	movs	r3, #2
  }
}
 800745c:	4618      	mov	r0, r3
 800745e:	3718      	adds	r7, #24
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	fe00e800 	.word	0xfe00e800

08007468 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b088      	sub	sp, #32
 800746c:	af02      	add	r7, sp, #8
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	4608      	mov	r0, r1
 8007472:	4611      	mov	r1, r2
 8007474:	461a      	mov	r2, r3
 8007476:	4603      	mov	r3, r0
 8007478:	817b      	strh	r3, [r7, #10]
 800747a:	460b      	mov	r3, r1
 800747c:	813b      	strh	r3, [r7, #8]
 800747e:	4613      	mov	r3, r2
 8007480:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b20      	cmp	r3, #32
 800748c:	f040 80fd 	bne.w	800768a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d002      	beq.n	800749c <HAL_I2C_Mem_Read+0x34>
 8007496:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007498:	2b00      	cmp	r3, #0
 800749a:	d105      	bne.n	80074a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e0f1      	b.n	800768c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d101      	bne.n	80074b6 <HAL_I2C_Mem_Read+0x4e>
 80074b2:	2302      	movs	r3, #2
 80074b4:	e0ea      	b.n	800768c <HAL_I2C_Mem_Read+0x224>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80074be:	f7fa fff5 	bl	80024ac <HAL_GetTick>
 80074c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	2319      	movs	r3, #25
 80074ca:	2201      	movs	r2, #1
 80074cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f000 f9ae 	bl	8007832 <I2C_WaitOnFlagUntilTimeout>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e0d5      	b.n	800768c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2222      	movs	r2, #34	; 0x22
 80074e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2240      	movs	r2, #64	; 0x40
 80074ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6a3a      	ldr	r2, [r7, #32]
 80074fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007500:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007508:	88f8      	ldrh	r0, [r7, #6]
 800750a:	893a      	ldrh	r2, [r7, #8]
 800750c:	8979      	ldrh	r1, [r7, #10]
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	9301      	str	r3, [sp, #4]
 8007512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	4603      	mov	r3, r0
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f000 f913 	bl	8007744 <I2C_RequestMemoryRead>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d005      	beq.n	8007530 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e0ad      	b.n	800768c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007534:	b29b      	uxth	r3, r3
 8007536:	2bff      	cmp	r3, #255	; 0xff
 8007538:	d90e      	bls.n	8007558 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	22ff      	movs	r2, #255	; 0xff
 800753e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007544:	b2da      	uxtb	r2, r3
 8007546:	8979      	ldrh	r1, [r7, #10]
 8007548:	4b52      	ldr	r3, [pc, #328]	; (8007694 <HAL_I2C_Mem_Read+0x22c>)
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 fb0b 	bl	8007b6c <I2C_TransferConfig>
 8007556:	e00f      	b.n	8007578 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800755c:	b29a      	uxth	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007566:	b2da      	uxtb	r2, r3
 8007568:	8979      	ldrh	r1, [r7, #10]
 800756a:	4b4a      	ldr	r3, [pc, #296]	; (8007694 <HAL_I2C_Mem_Read+0x22c>)
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f000 fafa 	bl	8007b6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757e:	2200      	movs	r2, #0
 8007580:	2104      	movs	r1, #4
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f000 f955 	bl	8007832 <I2C_WaitOnFlagUntilTimeout>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d001      	beq.n	8007592 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e07c      	b.n	800768c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759c:	b2d2      	uxtb	r2, r2
 800759e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	1c5a      	adds	r2, r3, #1
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ae:	3b01      	subs	r3, #1
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	3b01      	subs	r3, #1
 80075be:	b29a      	uxth	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d034      	beq.n	8007638 <HAL_I2C_Mem_Read+0x1d0>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d130      	bne.n	8007638 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075dc:	2200      	movs	r2, #0
 80075de:	2180      	movs	r1, #128	; 0x80
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 f926 	bl	8007832 <I2C_WaitOnFlagUntilTimeout>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d001      	beq.n	80075f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e04d      	b.n	800768c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	2bff      	cmp	r3, #255	; 0xff
 80075f8:	d90e      	bls.n	8007618 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	22ff      	movs	r2, #255	; 0xff
 80075fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007604:	b2da      	uxtb	r2, r3
 8007606:	8979      	ldrh	r1, [r7, #10]
 8007608:	2300      	movs	r3, #0
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f000 faab 	bl	8007b6c <I2C_TransferConfig>
 8007616:	e00f      	b.n	8007638 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800761c:	b29a      	uxth	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007626:	b2da      	uxtb	r2, r3
 8007628:	8979      	ldrh	r1, [r7, #10]
 800762a:	2300      	movs	r3, #0
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f000 fa9a 	bl	8007b6c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800763c:	b29b      	uxth	r3, r3
 800763e:	2b00      	cmp	r3, #0
 8007640:	d19a      	bne.n	8007578 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f000 f973 	bl	8007932 <I2C_WaitOnSTOPFlagUntilTimeout>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d001      	beq.n	8007656 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e01a      	b.n	800768c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2220      	movs	r2, #32
 800765c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	6859      	ldr	r1, [r3, #4]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	4b0b      	ldr	r3, [pc, #44]	; (8007698 <HAL_I2C_Mem_Read+0x230>)
 800766a:	400b      	ands	r3, r1
 800766c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2220      	movs	r2, #32
 8007672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	e000      	b.n	800768c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800768a:	2302      	movs	r3, #2
  }
}
 800768c:	4618      	mov	r0, r3
 800768e:	3718      	adds	r7, #24
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	80002400 	.word	0x80002400
 8007698:	fe00e800 	.word	0xfe00e800

0800769c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af02      	add	r7, sp, #8
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	4608      	mov	r0, r1
 80076a6:	4611      	mov	r1, r2
 80076a8:	461a      	mov	r2, r3
 80076aa:	4603      	mov	r3, r0
 80076ac:	817b      	strh	r3, [r7, #10]
 80076ae:	460b      	mov	r3, r1
 80076b0:	813b      	strh	r3, [r7, #8]
 80076b2:	4613      	mov	r3, r2
 80076b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80076b6:	88fb      	ldrh	r3, [r7, #6]
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	8979      	ldrh	r1, [r7, #10]
 80076bc:	4b20      	ldr	r3, [pc, #128]	; (8007740 <I2C_RequestMemoryWrite+0xa4>)
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f000 fa51 	bl	8007b6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076ca:	69fa      	ldr	r2, [r7, #28]
 80076cc:	69b9      	ldr	r1, [r7, #24]
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f000 f8ef 	bl	80078b2 <I2C_WaitOnTXISFlagUntilTimeout>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e02c      	b.n	8007738 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076de:	88fb      	ldrh	r3, [r7, #6]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d105      	bne.n	80076f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80076e4:	893b      	ldrh	r3, [r7, #8]
 80076e6:	b2da      	uxtb	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	629a      	str	r2, [r3, #40]	; 0x28
 80076ee:	e015      	b.n	800771c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80076f0:	893b      	ldrh	r3, [r7, #8]
 80076f2:	0a1b      	lsrs	r3, r3, #8
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076fe:	69fa      	ldr	r2, [r7, #28]
 8007700:	69b9      	ldr	r1, [r7, #24]
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f000 f8d5 	bl	80078b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d001      	beq.n	8007712 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e012      	b.n	8007738 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007712:	893b      	ldrh	r3, [r7, #8]
 8007714:	b2da      	uxtb	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	2200      	movs	r2, #0
 8007724:	2180      	movs	r1, #128	; 0x80
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 f883 	bl	8007832 <I2C_WaitOnFlagUntilTimeout>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d001      	beq.n	8007736 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e000      	b.n	8007738 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	80002000 	.word	0x80002000

08007744 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af02      	add	r7, sp, #8
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	4608      	mov	r0, r1
 800774e:	4611      	mov	r1, r2
 8007750:	461a      	mov	r2, r3
 8007752:	4603      	mov	r3, r0
 8007754:	817b      	strh	r3, [r7, #10]
 8007756:	460b      	mov	r3, r1
 8007758:	813b      	strh	r3, [r7, #8]
 800775a:	4613      	mov	r3, r2
 800775c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800775e:	88fb      	ldrh	r3, [r7, #6]
 8007760:	b2da      	uxtb	r2, r3
 8007762:	8979      	ldrh	r1, [r7, #10]
 8007764:	4b20      	ldr	r3, [pc, #128]	; (80077e8 <I2C_RequestMemoryRead+0xa4>)
 8007766:	9300      	str	r3, [sp, #0]
 8007768:	2300      	movs	r3, #0
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 f9fe 	bl	8007b6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007770:	69fa      	ldr	r2, [r7, #28]
 8007772:	69b9      	ldr	r1, [r7, #24]
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 f89c 	bl	80078b2 <I2C_WaitOnTXISFlagUntilTimeout>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e02c      	b.n	80077de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007784:	88fb      	ldrh	r3, [r7, #6]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d105      	bne.n	8007796 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800778a:	893b      	ldrh	r3, [r7, #8]
 800778c:	b2da      	uxtb	r2, r3
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	629a      	str	r2, [r3, #40]	; 0x28
 8007794:	e015      	b.n	80077c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007796:	893b      	ldrh	r3, [r7, #8]
 8007798:	0a1b      	lsrs	r3, r3, #8
 800779a:	b29b      	uxth	r3, r3
 800779c:	b2da      	uxtb	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077a4:	69fa      	ldr	r2, [r7, #28]
 80077a6:	69b9      	ldr	r1, [r7, #24]
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f000 f882 	bl	80078b2 <I2C_WaitOnTXISFlagUntilTimeout>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e012      	b.n	80077de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077b8:	893b      	ldrh	r3, [r7, #8]
 80077ba:	b2da      	uxtb	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	9300      	str	r3, [sp, #0]
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	2200      	movs	r2, #0
 80077ca:	2140      	movs	r1, #64	; 0x40
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 f830 	bl	8007832 <I2C_WaitOnFlagUntilTimeout>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e000      	b.n	80077de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	80002000 	.word	0x80002000

080077ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	f003 0302 	and.w	r3, r3, #2
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d103      	bne.n	800780a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2200      	movs	r2, #0
 8007808:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	f003 0301 	and.w	r3, r3, #1
 8007814:	2b01      	cmp	r3, #1
 8007816:	d007      	beq.n	8007828 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	699a      	ldr	r2, [r3, #24]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f042 0201 	orr.w	r2, r2, #1
 8007826:	619a      	str	r2, [r3, #24]
  }
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	bc80      	pop	{r7}
 8007830:	4770      	bx	lr

08007832 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	60f8      	str	r0, [r7, #12]
 800783a:	60b9      	str	r1, [r7, #8]
 800783c:	603b      	str	r3, [r7, #0]
 800783e:	4613      	mov	r3, r2
 8007840:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007842:	e022      	b.n	800788a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800784a:	d01e      	beq.n	800788a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800784c:	f7fa fe2e 	bl	80024ac <HAL_GetTick>
 8007850:	4602      	mov	r2, r0
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	683a      	ldr	r2, [r7, #0]
 8007858:	429a      	cmp	r2, r3
 800785a:	d302      	bcc.n	8007862 <I2C_WaitOnFlagUntilTimeout+0x30>
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d113      	bne.n	800788a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007866:	f043 0220 	orr.w	r2, r3, #32
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2220      	movs	r2, #32
 8007872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e00f      	b.n	80078aa <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	699a      	ldr	r2, [r3, #24]
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	4013      	ands	r3, r2
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	429a      	cmp	r2, r3
 8007898:	bf0c      	ite	eq
 800789a:	2301      	moveq	r3, #1
 800789c:	2300      	movne	r3, #0
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	461a      	mov	r2, r3
 80078a2:	79fb      	ldrb	r3, [r7, #7]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d0cd      	beq.n	8007844 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b084      	sub	sp, #16
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	60f8      	str	r0, [r7, #12]
 80078ba:	60b9      	str	r1, [r7, #8]
 80078bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80078be:	e02c      	b.n	800791a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	68b9      	ldr	r1, [r7, #8]
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f000 f871 	bl	80079ac <I2C_IsErrorOccurred>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e02a      	b.n	800792a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078da:	d01e      	beq.n	800791a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078dc:	f7fa fde6 	bl	80024ac <HAL_GetTick>
 80078e0:	4602      	mov	r2, r0
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d302      	bcc.n	80078f2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d113      	bne.n	800791a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f6:	f043 0220 	orr.w	r2, r3, #32
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2220      	movs	r2, #32
 8007902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e007      	b.n	800792a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	f003 0302 	and.w	r3, r3, #2
 8007924:	2b02      	cmp	r3, #2
 8007926:	d1cb      	bne.n	80078c0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b084      	sub	sp, #16
 8007936:	af00      	add	r7, sp, #0
 8007938:	60f8      	str	r0, [r7, #12]
 800793a:	60b9      	str	r1, [r7, #8]
 800793c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800793e:	e028      	b.n	8007992 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	68b9      	ldr	r1, [r7, #8]
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f000 f831 	bl	80079ac <I2C_IsErrorOccurred>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d001      	beq.n	8007954 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	e026      	b.n	80079a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007954:	f7fa fdaa 	bl	80024ac <HAL_GetTick>
 8007958:	4602      	mov	r2, r0
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	429a      	cmp	r2, r3
 8007962:	d302      	bcc.n	800796a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d113      	bne.n	8007992 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800796e:	f043 0220 	orr.w	r2, r3, #32
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2220      	movs	r2, #32
 800797a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e007      	b.n	80079a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	f003 0320 	and.w	r3, r3, #32
 800799c:	2b20      	cmp	r3, #32
 800799e:	d1cf      	bne.n	8007940 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
	...

080079ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b08a      	sub	sp, #40	; 0x28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	699b      	ldr	r3, [r3, #24]
 80079c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80079c6:	2300      	movs	r3, #0
 80079c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	f003 0310 	and.w	r3, r3, #16
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d068      	beq.n	8007aaa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2210      	movs	r2, #16
 80079de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80079e0:	e049      	b.n	8007a76 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079e8:	d045      	beq.n	8007a76 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80079ea:	f7fa fd5f 	bl	80024ac <HAL_GetTick>
 80079ee:	4602      	mov	r2, r0
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d302      	bcc.n	8007a00 <I2C_IsErrorOccurred+0x54>
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d13a      	bne.n	8007a76 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a0a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a12:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a22:	d121      	bne.n	8007a68 <I2C_IsErrorOccurred+0xbc>
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a2a:	d01d      	beq.n	8007a68 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007a2c:	7cfb      	ldrb	r3, [r7, #19]
 8007a2e:	2b20      	cmp	r3, #32
 8007a30:	d01a      	beq.n	8007a68 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	685a      	ldr	r2, [r3, #4]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a40:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007a42:	f7fa fd33 	bl	80024ac <HAL_GetTick>
 8007a46:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a48:	e00e      	b.n	8007a68 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007a4a:	f7fa fd2f 	bl	80024ac <HAL_GetTick>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	2b19      	cmp	r3, #25
 8007a56:	d907      	bls.n	8007a68 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007a58:	6a3b      	ldr	r3, [r7, #32]
 8007a5a:	f043 0320 	orr.w	r3, r3, #32
 8007a5e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007a66:	e006      	b.n	8007a76 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	f003 0320 	and.w	r3, r3, #32
 8007a72:	2b20      	cmp	r3, #32
 8007a74:	d1e9      	bne.n	8007a4a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	f003 0320 	and.w	r3, r3, #32
 8007a80:	2b20      	cmp	r3, #32
 8007a82:	d003      	beq.n	8007a8c <I2C_IsErrorOccurred+0xe0>
 8007a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d0aa      	beq.n	80079e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d103      	bne.n	8007a9c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2220      	movs	r2, #32
 8007a9a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007a9c:	6a3b      	ldr	r3, [r7, #32]
 8007a9e:	f043 0304 	orr.w	r3, r3, #4
 8007aa2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00b      	beq.n	8007ad4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007abc:	6a3b      	ldr	r3, [r7, #32]
 8007abe:	f043 0301 	orr.w	r3, r3, #1
 8007ac2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007acc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00b      	beq.n	8007af6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007ade:	6a3b      	ldr	r3, [r7, #32]
 8007ae0:	f043 0308 	orr.w	r3, r3, #8
 8007ae4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007aee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00b      	beq.n	8007b18 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007b00:	6a3b      	ldr	r3, [r7, #32]
 8007b02:	f043 0302 	orr.w	r3, r3, #2
 8007b06:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d01c      	beq.n	8007b5a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f7ff fe63 	bl	80077ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	6859      	ldr	r1, [r3, #4]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	4b0d      	ldr	r3, [pc, #52]	; (8007b68 <I2C_IsErrorOccurred+0x1bc>)
 8007b32:	400b      	ands	r3, r1
 8007b34:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b3a:	6a3b      	ldr	r3, [r7, #32]
 8007b3c:	431a      	orrs	r2, r3
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2220      	movs	r2, #32
 8007b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3728      	adds	r7, #40	; 0x28
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	fe00e800 	.word	0xfe00e800

08007b6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	607b      	str	r3, [r7, #4]
 8007b76:	460b      	mov	r3, r1
 8007b78:	817b      	strh	r3, [r7, #10]
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b7e:	897b      	ldrh	r3, [r7, #10]
 8007b80:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007b84:	7a7b      	ldrb	r3, [r7, #9]
 8007b86:	041b      	lsls	r3, r3, #16
 8007b88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b8c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b92:	6a3b      	ldr	r3, [r7, #32]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b9a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	685a      	ldr	r2, [r3, #4]
 8007ba2:	6a3b      	ldr	r3, [r7, #32]
 8007ba4:	0d5b      	lsrs	r3, r3, #21
 8007ba6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007baa:	4b07      	ldr	r3, [pc, #28]	; (8007bc8 <I2C_TransferConfig+0x5c>)
 8007bac:	430b      	orrs	r3, r1
 8007bae:	43db      	mvns	r3, r3
 8007bb0:	ea02 0103 	and.w	r1, r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	697a      	ldr	r2, [r7, #20]
 8007bba:	430a      	orrs	r2, r1
 8007bbc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007bbe:	bf00      	nop
 8007bc0:	371c      	adds	r7, #28
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bc80      	pop	{r7}
 8007bc6:	4770      	bx	lr
 8007bc8:	03ff63ff 	.word	0x03ff63ff

08007bcc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	2b20      	cmp	r3, #32
 8007be0:	d138      	bne.n	8007c54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d101      	bne.n	8007bf0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007bec:	2302      	movs	r3, #2
 8007bee:	e032      	b.n	8007c56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2224      	movs	r2, #36	; 0x24
 8007bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f022 0201 	bic.w	r2, r2, #1
 8007c0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6819      	ldr	r1, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	683a      	ldr	r2, [r7, #0]
 8007c2c:	430a      	orrs	r2, r1
 8007c2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f042 0201 	orr.w	r2, r2, #1
 8007c3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2220      	movs	r2, #32
 8007c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c50:	2300      	movs	r3, #0
 8007c52:	e000      	b.n	8007c56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c54:	2302      	movs	r3, #2
  }
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	370c      	adds	r7, #12
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bc80      	pop	{r7}
 8007c5e:	4770      	bx	lr

08007c60 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	2b20      	cmp	r3, #32
 8007c74:	d139      	bne.n	8007cea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d101      	bne.n	8007c84 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007c80:	2302      	movs	r3, #2
 8007c82:	e033      	b.n	8007cec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2224      	movs	r2, #36	; 0x24
 8007c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 0201 	bic.w	r2, r2, #1
 8007ca2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007cb2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	021b      	lsls	r3, r3, #8
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f042 0201 	orr.w	r2, r2, #1
 8007cd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2220      	movs	r2, #32
 8007cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	e000      	b.n	8007cec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007cea:	2302      	movs	r3, #2
  }
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3714      	adds	r7, #20
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bc80      	pop	{r7}
 8007cf4:	4770      	bx	lr
	...

08007cf8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007cfc:	4b04      	ldr	r3, [pc, #16]	; (8007d10 <HAL_PWR_EnableBkUpAccess+0x18>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a03      	ldr	r2, [pc, #12]	; (8007d10 <HAL_PWR_EnableBkUpAccess+0x18>)
 8007d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d06:	6013      	str	r3, [r2, #0]
}
 8007d08:	bf00      	nop
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bc80      	pop	{r7}
 8007d0e:	4770      	bx	lr
 8007d10:	58000400 	.word	0x58000400

08007d14 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007d14:	b480      	push	{r7}
 8007d16:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8007d18:	4b03      	ldr	r3, [pc, #12]	; (8007d28 <HAL_PWREx_GetVoltageRange+0x14>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bc80      	pop	{r7}
 8007d26:	4770      	bx	lr
 8007d28:	58000400 	.word	0x58000400

08007d2c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8007d30:	4b06      	ldr	r3, [pc, #24]	; (8007d4c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d3c:	d101      	bne.n	8007d42 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e000      	b.n	8007d44 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bc80      	pop	{r7}
 8007d4a:	4770      	bx	lr
 8007d4c:	58000400 	.word	0x58000400

08007d50 <LL_RCC_HSE_EnableTcxo>:
{
 8007d50:	b480      	push	{r7}
 8007d52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8007d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d62:	6013      	str	r3, [r2, #0]
}
 8007d64:	bf00      	nop
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bc80      	pop	{r7}
 8007d6a:	4770      	bx	lr

08007d6c <LL_RCC_HSE_DisableTcxo>:
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8007d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d7e:	6013      	str	r3, [r2, #0]
}
 8007d80:	bf00      	nop
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bc80      	pop	{r7}
 8007d86:	4770      	bx	lr

08007d88 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007d88:	b480      	push	{r7}
 8007d8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d9a:	d101      	bne.n	8007da0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e000      	b.n	8007da2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bc80      	pop	{r7}
 8007da8:	4770      	bx	lr

08007daa <LL_RCC_HSE_Enable>:
{
 8007daa:	b480      	push	{r7}
 8007dac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dbc:	6013      	str	r3, [r2, #0]
}
 8007dbe:	bf00      	nop
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bc80      	pop	{r7}
 8007dc4:	4770      	bx	lr

08007dc6 <LL_RCC_HSE_Disable>:
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8007dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dd8:	6013      	str	r3, [r2, #0]
}
 8007dda:	bf00      	nop
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bc80      	pop	{r7}
 8007de0:	4770      	bx	lr

08007de2 <LL_RCC_HSE_IsReady>:
{
 8007de2:	b480      	push	{r7}
 8007de4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007df0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007df4:	d101      	bne.n	8007dfa <LL_RCC_HSE_IsReady+0x18>
 8007df6:	2301      	movs	r3, #1
 8007df8:	e000      	b.n	8007dfc <LL_RCC_HSE_IsReady+0x1a>
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bc80      	pop	{r7}
 8007e02:	4770      	bx	lr

08007e04 <LL_RCC_HSI_Enable>:
{
 8007e04:	b480      	push	{r7}
 8007e06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e16:	6013      	str	r3, [r2, #0]
}
 8007e18:	bf00      	nop
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bc80      	pop	{r7}
 8007e1e:	4770      	bx	lr

08007e20 <LL_RCC_HSI_Disable>:
{
 8007e20:	b480      	push	{r7}
 8007e22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8007e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e32:	6013      	str	r3, [r2, #0]
}
 8007e34:	bf00      	nop
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bc80      	pop	{r7}
 8007e3a:	4770      	bx	lr

08007e3c <LL_RCC_HSI_IsReady>:
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e4e:	d101      	bne.n	8007e54 <LL_RCC_HSI_IsReady+0x18>
 8007e50:	2301      	movs	r3, #1
 8007e52:	e000      	b.n	8007e56 <LL_RCC_HSI_IsReady+0x1a>
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bc80      	pop	{r7}
 8007e5c:	4770      	bx	lr

08007e5e <LL_RCC_HSI_SetCalibTrimming>:
{
 8007e5e:	b480      	push	{r7}
 8007e60:	b083      	sub	sp, #12
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	061b      	lsls	r3, r3, #24
 8007e74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	604b      	str	r3, [r1, #4]
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bc80      	pop	{r7}
 8007e84:	4770      	bx	lr

08007e86 <LL_RCC_LSE_IsReady>:
{
 8007e86:	b480      	push	{r7}
 8007e88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e92:	f003 0302 	and.w	r3, r3, #2
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d101      	bne.n	8007e9e <LL_RCC_LSE_IsReady+0x18>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e000      	b.n	8007ea0 <LL_RCC_LSE_IsReady+0x1a>
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bc80      	pop	{r7}
 8007ea6:	4770      	bx	lr

08007ea8 <LL_RCC_LSI_Enable>:
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8007eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007eb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007eb8:	f043 0301 	orr.w	r3, r3, #1
 8007ebc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007ec0:	bf00      	nop
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bc80      	pop	{r7}
 8007ec6:	4770      	bx	lr

08007ec8 <LL_RCC_LSI_Disable>:
{
 8007ec8:	b480      	push	{r7}
 8007eca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8007ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ed4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ed8:	f023 0301 	bic.w	r3, r3, #1
 8007edc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007ee0:	bf00      	nop
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bc80      	pop	{r7}
 8007ee6:	4770      	bx	lr

08007ee8 <LL_RCC_LSI_IsReady>:
{
 8007ee8:	b480      	push	{r7}
 8007eea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8007eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ef4:	f003 0302 	and.w	r3, r3, #2
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d101      	bne.n	8007f00 <LL_RCC_LSI_IsReady+0x18>
 8007efc:	2301      	movs	r3, #1
 8007efe:	e000      	b.n	8007f02 <LL_RCC_LSI_IsReady+0x1a>
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bc80      	pop	{r7}
 8007f08:	4770      	bx	lr

08007f0a <LL_RCC_MSI_Enable>:
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f18:	f043 0301 	orr.w	r3, r3, #1
 8007f1c:	6013      	str	r3, [r2, #0]
}
 8007f1e:	bf00      	nop
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bc80      	pop	{r7}
 8007f24:	4770      	bx	lr

08007f26 <LL_RCC_MSI_Disable>:
{
 8007f26:	b480      	push	{r7}
 8007f28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8007f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f34:	f023 0301 	bic.w	r3, r3, #1
 8007f38:	6013      	str	r3, [r2, #0]
}
 8007f3a:	bf00      	nop
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bc80      	pop	{r7}
 8007f40:	4770      	bx	lr

08007f42 <LL_RCC_MSI_IsReady>:
{
 8007f42:	b480      	push	{r7}
 8007f44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 0302 	and.w	r3, r3, #2
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	d101      	bne.n	8007f58 <LL_RCC_MSI_IsReady+0x16>
 8007f54:	2301      	movs	r3, #1
 8007f56:	e000      	b.n	8007f5a <LL_RCC_MSI_IsReady+0x18>
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bc80      	pop	{r7}
 8007f60:	4770      	bx	lr

08007f62 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8007f62:	b480      	push	{r7}
 8007f64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8007f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 0308 	and.w	r3, r3, #8
 8007f70:	2b08      	cmp	r3, #8
 8007f72:	d101      	bne.n	8007f78 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8007f74:	2301      	movs	r3, #1
 8007f76:	e000      	b.n	8007f7a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bc80      	pop	{r7}
 8007f80:	4770      	bx	lr

08007f82 <LL_RCC_MSI_GetRange>:
{
 8007f82:	b480      	push	{r7}
 8007f84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8007f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bc80      	pop	{r7}
 8007f96:	4770      	bx	lr

08007f98 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8007f98:	b480      	push	{r7}
 8007f9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8007f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fa4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bc80      	pop	{r7}
 8007fae:	4770      	bx	lr

08007fb0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8007fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	021b      	lsls	r3, r3, #8
 8007fc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	604b      	str	r3, [r1, #4]
}
 8007fce:	bf00      	nop
 8007fd0:	370c      	adds	r7, #12
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bc80      	pop	{r7}
 8007fd6:	4770      	bx	lr

08007fd8 <LL_RCC_SetSysClkSource>:
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f023 0203 	bic.w	r2, r3, #3
 8007fea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	608b      	str	r3, [r1, #8]
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bc80      	pop	{r7}
 8007ffc:	4770      	bx	lr

08007ffe <LL_RCC_GetSysClkSource>:
{
 8007ffe:	b480      	push	{r7}
 8008000:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	f003 030c 	and.w	r3, r3, #12
}
 800800c:	4618      	mov	r0, r3
 800800e:	46bd      	mov	sp, r7
 8008010:	bc80      	pop	{r7}
 8008012:	4770      	bx	lr

08008014 <LL_RCC_SetAHBPrescaler>:
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800801c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008026:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4313      	orrs	r3, r2
 800802e:	608b      	str	r3, [r1, #8]
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	bc80      	pop	{r7}
 8008038:	4770      	bx	lr

0800803a <LL_RCC_SetAHB3Prescaler>:
{
 800803a:	b480      	push	{r7}
 800803c:	b083      	sub	sp, #12
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8008042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008046:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800804a:	f023 020f 	bic.w	r2, r3, #15
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	091b      	lsrs	r3, r3, #4
 8008052:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008056:	4313      	orrs	r3, r2
 8008058:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	bc80      	pop	{r7}
 8008064:	4770      	bx	lr

08008066 <LL_RCC_SetAPB1Prescaler>:
{
 8008066:	b480      	push	{r7}
 8008068:	b083      	sub	sp, #12
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800806e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008078:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4313      	orrs	r3, r2
 8008080:	608b      	str	r3, [r1, #8]
}
 8008082:	bf00      	nop
 8008084:	370c      	adds	r7, #12
 8008086:	46bd      	mov	sp, r7
 8008088:	bc80      	pop	{r7}
 800808a:	4770      	bx	lr

0800808c <LL_RCC_SetAPB2Prescaler>:
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8008094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800809e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	608b      	str	r3, [r1, #8]
}
 80080a8:	bf00      	nop
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bc80      	pop	{r7}
 80080b0:	4770      	bx	lr

080080b2 <LL_RCC_GetAHBPrescaler>:
{
 80080b2:	b480      	push	{r7}
 80080b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80080b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bc80      	pop	{r7}
 80080c6:	4770      	bx	lr

080080c8 <LL_RCC_GetAHB3Prescaler>:
{
 80080c8:	b480      	push	{r7}
 80080ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80080cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80080d4:	011b      	lsls	r3, r3, #4
 80080d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	46bd      	mov	sp, r7
 80080de:	bc80      	pop	{r7}
 80080e0:	4770      	bx	lr

080080e2 <LL_RCC_GetAPB1Prescaler>:
{
 80080e2:	b480      	push	{r7}
 80080e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80080e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bc80      	pop	{r7}
 80080f6:	4770      	bx	lr

080080f8 <LL_RCC_GetAPB2Prescaler>:
{
 80080f8:	b480      	push	{r7}
 80080fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80080fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8008106:	4618      	mov	r0, r3
 8008108:	46bd      	mov	sp, r7
 800810a:	bc80      	pop	{r7}
 800810c:	4770      	bx	lr

0800810e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800810e:	b480      	push	{r7}
 8008110:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800811c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008120:	6013      	str	r3, [r2, #0]
}
 8008122:	bf00      	nop
 8008124:	46bd      	mov	sp, r7
 8008126:	bc80      	pop	{r7}
 8008128:	4770      	bx	lr

0800812a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800812a:	b480      	push	{r7}
 800812c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800812e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008138:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800813c:	6013      	str	r3, [r2, #0]
}
 800813e:	bf00      	nop
 8008140:	46bd      	mov	sp, r7
 8008142:	bc80      	pop	{r7}
 8008144:	4770      	bx	lr

08008146 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8008146:	b480      	push	{r7}
 8008148:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800814a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008154:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008158:	d101      	bne.n	800815e <LL_RCC_PLL_IsReady+0x18>
 800815a:	2301      	movs	r3, #1
 800815c:	e000      	b.n	8008160 <LL_RCC_PLL_IsReady+0x1a>
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	46bd      	mov	sp, r7
 8008164:	bc80      	pop	{r7}
 8008166:	4770      	bx	lr

08008168 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8008168:	b480      	push	{r7}
 800816a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800816c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	0a1b      	lsrs	r3, r3, #8
 8008174:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8008178:	4618      	mov	r0, r3
 800817a:	46bd      	mov	sp, r7
 800817c:	bc80      	pop	{r7}
 800817e:	4770      	bx	lr

08008180 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8008180:	b480      	push	{r7}
 8008182:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8008184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800818e:	4618      	mov	r0, r3
 8008190:	46bd      	mov	sp, r7
 8008192:	bc80      	pop	{r7}
 8008194:	4770      	bx	lr

08008196 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8008196:	b480      	push	{r7}
 8008198:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800819a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bc80      	pop	{r7}
 80081aa:	4770      	bx	lr

080081ac <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80081ac:	b480      	push	{r7}
 80081ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80081b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	f003 0303 	and.w	r3, r3, #3
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	46bd      	mov	sp, r7
 80081be:	bc80      	pop	{r7}
 80081c0:	4770      	bx	lr

080081c2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80081c2:	b480      	push	{r7}
 80081c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80081c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081d4:	d101      	bne.n	80081da <LL_RCC_IsActiveFlag_HPRE+0x18>
 80081d6:	2301      	movs	r3, #1
 80081d8:	e000      	b.n	80081dc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	46bd      	mov	sp, r7
 80081e0:	bc80      	pop	{r7}
 80081e2:	4770      	bx	lr

080081e4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80081e4:	b480      	push	{r7}
 80081e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80081e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80081f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081f8:	d101      	bne.n	80081fe <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80081fa:	2301      	movs	r3, #1
 80081fc:	e000      	b.n	8008200 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	46bd      	mov	sp, r7
 8008204:	bc80      	pop	{r7}
 8008206:	4770      	bx	lr

08008208 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8008208:	b480      	push	{r7}
 800820a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800820c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008216:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800821a:	d101      	bne.n	8008220 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800821c:	2301      	movs	r3, #1
 800821e:	e000      	b.n	8008222 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	46bd      	mov	sp, r7
 8008226:	bc80      	pop	{r7}
 8008228:	4770      	bx	lr

0800822a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800822a:	b480      	push	{r7}
 800822c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800822e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008238:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800823c:	d101      	bne.n	8008242 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800823e:	2301      	movs	r3, #1
 8008240:	e000      	b.n	8008244 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	46bd      	mov	sp, r7
 8008248:	bc80      	pop	{r7}
 800824a:	4770      	bx	lr

0800824c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b088      	sub	sp, #32
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d101      	bne.n	800825e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e36f      	b.n	800893e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800825e:	f7ff fece 	bl	8007ffe <LL_RCC_GetSysClkSource>
 8008262:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008264:	f7ff ffa2 	bl	80081ac <LL_RCC_PLL_GetMainSource>
 8008268:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 0320 	and.w	r3, r3, #32
 8008272:	2b00      	cmp	r3, #0
 8008274:	f000 80c4 	beq.w	8008400 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d005      	beq.n	800828a <HAL_RCC_OscConfig+0x3e>
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	2b0c      	cmp	r3, #12
 8008282:	d176      	bne.n	8008372 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	2b01      	cmp	r3, #1
 8008288:	d173      	bne.n	8008372 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a1b      	ldr	r3, [r3, #32]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d101      	bne.n	8008296 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e353      	b.n	800893e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800829a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f003 0308 	and.w	r3, r3, #8
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d005      	beq.n	80082b4 <HAL_RCC_OscConfig+0x68>
 80082a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082b2:	e006      	b.n	80082c2 <HAL_RCC_OscConfig+0x76>
 80082b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082bc:	091b      	lsrs	r3, r3, #4
 80082be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d222      	bcs.n	800830c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 fd3c 	bl	8008d48 <RCC_SetFlashLatencyFromMSIRange>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d001      	beq.n	80082da <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e331      	b.n	800893e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80082da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082e4:	f043 0308 	orr.w	r3, r3, #8
 80082e8:	6013      	str	r3, [r2, #0]
 80082ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80082fc:	4313      	orrs	r3, r2
 80082fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008304:	4618      	mov	r0, r3
 8008306:	f7ff fe53 	bl	8007fb0 <LL_RCC_MSI_SetCalibTrimming>
 800830a:	e021      	b.n	8008350 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800830c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008316:	f043 0308 	orr.w	r3, r3, #8
 800831a:	6013      	str	r3, [r2, #0]
 800831c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800832a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800832e:	4313      	orrs	r3, r2
 8008330:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008336:	4618      	mov	r0, r3
 8008338:	f7ff fe3a 	bl	8007fb0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008340:	4618      	mov	r0, r3
 8008342:	f000 fd01 	bl	8008d48 <RCC_SetFlashLatencyFromMSIRange>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e2f6      	b.n	800893e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008350:	f000 fcc2 	bl	8008cd8 <HAL_RCC_GetHCLKFreq>
 8008354:	4603      	mov	r3, r0
 8008356:	4aa7      	ldr	r2, [pc, #668]	; (80085f4 <HAL_RCC_OscConfig+0x3a8>)
 8008358:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800835a:	4ba7      	ldr	r3, [pc, #668]	; (80085f8 <HAL_RCC_OscConfig+0x3ac>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4618      	mov	r0, r3
 8008360:	f7fa f89a 	bl	8002498 <HAL_InitTick>
 8008364:	4603      	mov	r3, r0
 8008366:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8008368:	7cfb      	ldrb	r3, [r7, #19]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d047      	beq.n	80083fe <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800836e:	7cfb      	ldrb	r3, [r7, #19]
 8008370:	e2e5      	b.n	800893e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d02c      	beq.n	80083d4 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800837a:	f7ff fdc6 	bl	8007f0a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800837e:	f7fa f895 	bl	80024ac <HAL_GetTick>
 8008382:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8008384:	e008      	b.n	8008398 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008386:	f7fa f891 	bl	80024ac <HAL_GetTick>
 800838a:	4602      	mov	r2, r0
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	2b02      	cmp	r3, #2
 8008392:	d901      	bls.n	8008398 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8008394:	2303      	movs	r3, #3
 8008396:	e2d2      	b.n	800893e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8008398:	f7ff fdd3 	bl	8007f42 <LL_RCC_MSI_IsReady>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d0f1      	beq.n	8008386 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80083a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80083ac:	f043 0308 	orr.w	r3, r3, #8
 80083b0:	6013      	str	r3, [r2, #0]
 80083b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80083c4:	4313      	orrs	r3, r2
 80083c6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7ff fdef 	bl	8007fb0 <LL_RCC_MSI_SetCalibTrimming>
 80083d2:	e015      	b.n	8008400 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80083d4:	f7ff fda7 	bl	8007f26 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80083d8:	f7fa f868 	bl	80024ac <HAL_GetTick>
 80083dc:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80083de:	e008      	b.n	80083f2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80083e0:	f7fa f864 	bl	80024ac <HAL_GetTick>
 80083e4:	4602      	mov	r2, r0
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	2b02      	cmp	r3, #2
 80083ec:	d901      	bls.n	80083f2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80083ee:	2303      	movs	r3, #3
 80083f0:	e2a5      	b.n	800893e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80083f2:	f7ff fda6 	bl	8007f42 <LL_RCC_MSI_IsReady>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1f1      	bne.n	80083e0 <HAL_RCC_OscConfig+0x194>
 80083fc:	e000      	b.n	8008400 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80083fe:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0301 	and.w	r3, r3, #1
 8008408:	2b00      	cmp	r3, #0
 800840a:	d058      	beq.n	80084be <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	2b08      	cmp	r3, #8
 8008410:	d005      	beq.n	800841e <HAL_RCC_OscConfig+0x1d2>
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	2b0c      	cmp	r3, #12
 8008416:	d108      	bne.n	800842a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	2b03      	cmp	r3, #3
 800841c:	d105      	bne.n	800842a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d14b      	bne.n	80084be <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e289      	b.n	800893e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800842a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800843c:	4313      	orrs	r3, r2
 800843e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008448:	d102      	bne.n	8008450 <HAL_RCC_OscConfig+0x204>
 800844a:	f7ff fcae 	bl	8007daa <LL_RCC_HSE_Enable>
 800844e:	e00d      	b.n	800846c <HAL_RCC_OscConfig+0x220>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8008458:	d104      	bne.n	8008464 <HAL_RCC_OscConfig+0x218>
 800845a:	f7ff fc79 	bl	8007d50 <LL_RCC_HSE_EnableTcxo>
 800845e:	f7ff fca4 	bl	8007daa <LL_RCC_HSE_Enable>
 8008462:	e003      	b.n	800846c <HAL_RCC_OscConfig+0x220>
 8008464:	f7ff fcaf 	bl	8007dc6 <LL_RCC_HSE_Disable>
 8008468:	f7ff fc80 	bl	8007d6c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d012      	beq.n	800849a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008474:	f7fa f81a 	bl	80024ac <HAL_GetTick>
 8008478:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800847a:	e008      	b.n	800848e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800847c:	f7fa f816 	bl	80024ac <HAL_GetTick>
 8008480:	4602      	mov	r2, r0
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	2b64      	cmp	r3, #100	; 0x64
 8008488:	d901      	bls.n	800848e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e257      	b.n	800893e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800848e:	f7ff fca8 	bl	8007de2 <LL_RCC_HSE_IsReady>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d0f1      	beq.n	800847c <HAL_RCC_OscConfig+0x230>
 8008498:	e011      	b.n	80084be <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800849a:	f7fa f807 	bl	80024ac <HAL_GetTick>
 800849e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80084a0:	e008      	b.n	80084b4 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084a2:	f7fa f803 	bl	80024ac <HAL_GetTick>
 80084a6:	4602      	mov	r2, r0
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	2b64      	cmp	r3, #100	; 0x64
 80084ae:	d901      	bls.n	80084b4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80084b0:	2303      	movs	r3, #3
 80084b2:	e244      	b.n	800893e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80084b4:	f7ff fc95 	bl	8007de2 <LL_RCC_HSE_IsReady>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1f1      	bne.n	80084a2 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0302 	and.w	r3, r3, #2
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d046      	beq.n	8008558 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	2b04      	cmp	r3, #4
 80084ce:	d005      	beq.n	80084dc <HAL_RCC_OscConfig+0x290>
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	2b0c      	cmp	r3, #12
 80084d4:	d10e      	bne.n	80084f4 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d10b      	bne.n	80084f4 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	691b      	ldr	r3, [r3, #16]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d101      	bne.n	80084e8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e22a      	b.n	800893e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	695b      	ldr	r3, [r3, #20]
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7ff fcb6 	bl	8007e5e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80084f2:	e031      	b.n	8008558 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d019      	beq.n	8008530 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80084fc:	f7ff fc82 	bl	8007e04 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008500:	f7f9 ffd4 	bl	80024ac <HAL_GetTick>
 8008504:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8008506:	e008      	b.n	800851a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008508:	f7f9 ffd0 	bl	80024ac <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	2b02      	cmp	r3, #2
 8008514:	d901      	bls.n	800851a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	e211      	b.n	800893e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800851a:	f7ff fc8f 	bl	8007e3c <LL_RCC_HSI_IsReady>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d0f1      	beq.n	8008508 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	695b      	ldr	r3, [r3, #20]
 8008528:	4618      	mov	r0, r3
 800852a:	f7ff fc98 	bl	8007e5e <LL_RCC_HSI_SetCalibTrimming>
 800852e:	e013      	b.n	8008558 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008530:	f7ff fc76 	bl	8007e20 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008534:	f7f9 ffba 	bl	80024ac <HAL_GetTick>
 8008538:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800853a:	e008      	b.n	800854e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800853c:	f7f9 ffb6 	bl	80024ac <HAL_GetTick>
 8008540:	4602      	mov	r2, r0
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	2b02      	cmp	r3, #2
 8008548:	d901      	bls.n	800854e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800854a:	2303      	movs	r3, #3
 800854c:	e1f7      	b.n	800893e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800854e:	f7ff fc75 	bl	8007e3c <LL_RCC_HSI_IsReady>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d1f1      	bne.n	800853c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f003 0308 	and.w	r3, r3, #8
 8008560:	2b00      	cmp	r3, #0
 8008562:	d06e      	beq.n	8008642 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	699b      	ldr	r3, [r3, #24]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d056      	beq.n	800861a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800856c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008574:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	69da      	ldr	r2, [r3, #28]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f003 0310 	and.w	r3, r3, #16
 8008580:	429a      	cmp	r2, r3
 8008582:	d031      	beq.n	80085e8 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f003 0302 	and.w	r3, r3, #2
 800858a:	2b00      	cmp	r3, #0
 800858c:	d006      	beq.n	800859c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8008594:	2b00      	cmp	r3, #0
 8008596:	d101      	bne.n	800859c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e1d0      	b.n	800893e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f003 0301 	and.w	r3, r3, #1
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d013      	beq.n	80085ce <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80085a6:	f7ff fc8f 	bl	8007ec8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80085aa:	f7f9 ff7f 	bl	80024ac <HAL_GetTick>
 80085ae:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80085b0:	e008      	b.n	80085c4 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085b2:	f7f9 ff7b 	bl	80024ac <HAL_GetTick>
 80085b6:	4602      	mov	r2, r0
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	2b11      	cmp	r3, #17
 80085be:	d901      	bls.n	80085c4 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80085c0:	2303      	movs	r3, #3
 80085c2:	e1bc      	b.n	800893e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80085c4:	f7ff fc90 	bl	8007ee8 <LL_RCC_LSI_IsReady>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1f1      	bne.n	80085b2 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80085ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085d6:	f023 0210 	bic.w	r2, r3, #16
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	69db      	ldr	r3, [r3, #28]
 80085de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085e2:	4313      	orrs	r3, r2
 80085e4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085e8:	f7ff fc5e 	bl	8007ea8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085ec:	f7f9 ff5e 	bl	80024ac <HAL_GetTick>
 80085f0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80085f2:	e00c      	b.n	800860e <HAL_RCC_OscConfig+0x3c2>
 80085f4:	20000000 	.word	0x20000000
 80085f8:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085fc:	f7f9 ff56 	bl	80024ac <HAL_GetTick>
 8008600:	4602      	mov	r2, r0
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	2b11      	cmp	r3, #17
 8008608:	d901      	bls.n	800860e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800860a:	2303      	movs	r3, #3
 800860c:	e197      	b.n	800893e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800860e:	f7ff fc6b 	bl	8007ee8 <LL_RCC_LSI_IsReady>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d0f1      	beq.n	80085fc <HAL_RCC_OscConfig+0x3b0>
 8008618:	e013      	b.n	8008642 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800861a:	f7ff fc55 	bl	8007ec8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800861e:	f7f9 ff45 	bl	80024ac <HAL_GetTick>
 8008622:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8008624:	e008      	b.n	8008638 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008626:	f7f9 ff41 	bl	80024ac <HAL_GetTick>
 800862a:	4602      	mov	r2, r0
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	1ad3      	subs	r3, r2, r3
 8008630:	2b11      	cmp	r3, #17
 8008632:	d901      	bls.n	8008638 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8008634:	2303      	movs	r3, #3
 8008636:	e182      	b.n	800893e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8008638:	f7ff fc56 	bl	8007ee8 <LL_RCC_LSI_IsReady>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d1f1      	bne.n	8008626 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 0304 	and.w	r3, r3, #4
 800864a:	2b00      	cmp	r3, #0
 800864c:	f000 80d8 	beq.w	8008800 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008650:	f7ff fb6c 	bl	8007d2c <LL_PWR_IsEnabledBkUpAccess>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d113      	bne.n	8008682 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800865a:	f7ff fb4d 	bl	8007cf8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800865e:	f7f9 ff25 	bl	80024ac <HAL_GetTick>
 8008662:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008664:	e008      	b.n	8008678 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008666:	f7f9 ff21 	bl	80024ac <HAL_GetTick>
 800866a:	4602      	mov	r2, r0
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	2b02      	cmp	r3, #2
 8008672:	d901      	bls.n	8008678 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8008674:	2303      	movs	r3, #3
 8008676:	e162      	b.n	800893e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008678:	f7ff fb58 	bl	8007d2c <LL_PWR_IsEnabledBkUpAccess>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d0f1      	beq.n	8008666 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d07b      	beq.n	8008782 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	2b85      	cmp	r3, #133	; 0x85
 8008690:	d003      	beq.n	800869a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	2b05      	cmp	r3, #5
 8008698:	d109      	bne.n	80086ae <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800869a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800869e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086a6:	f043 0304 	orr.w	r3, r3, #4
 80086aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086ae:	f7f9 fefd 	bl	80024ac <HAL_GetTick>
 80086b2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80086b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086c0:	f043 0301 	orr.w	r3, r3, #1
 80086c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80086c8:	e00a      	b.n	80086e0 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086ca:	f7f9 feef 	bl	80024ac <HAL_GetTick>
 80086ce:	4602      	mov	r2, r0
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80086d8:	4293      	cmp	r3, r2
 80086da:	d901      	bls.n	80086e0 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80086dc:	2303      	movs	r3, #3
 80086de:	e12e      	b.n	800893e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80086e0:	f7ff fbd1 	bl	8007e86 <LL_RCC_LSE_IsReady>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d0ef      	beq.n	80086ca <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	2b81      	cmp	r3, #129	; 0x81
 80086f0:	d003      	beq.n	80086fa <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	2b85      	cmp	r3, #133	; 0x85
 80086f8:	d121      	bne.n	800873e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086fa:	f7f9 fed7 	bl	80024ac <HAL_GetTick>
 80086fe:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008708:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800870c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008714:	e00a      	b.n	800872c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008716:	f7f9 fec9 	bl	80024ac <HAL_GetTick>
 800871a:	4602      	mov	r2, r0
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	f241 3288 	movw	r2, #5000	; 0x1388
 8008724:	4293      	cmp	r3, r2
 8008726:	d901      	bls.n	800872c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8008728:	2303      	movs	r3, #3
 800872a:	e108      	b.n	800893e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800872c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008738:	2b00      	cmp	r3, #0
 800873a:	d0ec      	beq.n	8008716 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800873c:	e060      	b.n	8008800 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800873e:	f7f9 feb5 	bl	80024ac <HAL_GetTick>
 8008742:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800874c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008750:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008758:	e00a      	b.n	8008770 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800875a:	f7f9 fea7 	bl	80024ac <HAL_GetTick>
 800875e:	4602      	mov	r2, r0
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	f241 3288 	movw	r2, #5000	; 0x1388
 8008768:	4293      	cmp	r3, r2
 800876a:	d901      	bls.n	8008770 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800876c:	2303      	movs	r3, #3
 800876e:	e0e6      	b.n	800893e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800877c:	2b00      	cmp	r3, #0
 800877e:	d1ec      	bne.n	800875a <HAL_RCC_OscConfig+0x50e>
 8008780:	e03e      	b.n	8008800 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008782:	f7f9 fe93 	bl	80024ac <HAL_GetTick>
 8008786:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800878c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008790:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008794:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800879c:	e00a      	b.n	80087b4 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800879e:	f7f9 fe85 	bl	80024ac <HAL_GetTick>
 80087a2:	4602      	mov	r2, r0
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d901      	bls.n	80087b4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80087b0:	2303      	movs	r3, #3
 80087b2:	e0c4      	b.n	800893e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80087b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d1ec      	bne.n	800879e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087c4:	f7f9 fe72 	bl	80024ac <HAL_GetTick>
 80087c8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80087ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80087d6:	f023 0301 	bic.w	r3, r3, #1
 80087da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80087de:	e00a      	b.n	80087f6 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087e0:	f7f9 fe64 	bl	80024ac <HAL_GetTick>
 80087e4:	4602      	mov	r2, r0
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d901      	bls.n	80087f6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80087f2:	2303      	movs	r3, #3
 80087f4:	e0a3      	b.n	800893e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80087f6:	f7ff fb46 	bl	8007e86 <LL_RCC_LSE_IsReady>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1ef      	bne.n	80087e0 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008804:	2b00      	cmp	r3, #0
 8008806:	f000 8099 	beq.w	800893c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	2b0c      	cmp	r3, #12
 800880e:	d06c      	beq.n	80088ea <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008814:	2b02      	cmp	r3, #2
 8008816:	d14b      	bne.n	80088b0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008818:	f7ff fc87 	bl	800812a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800881c:	f7f9 fe46 	bl	80024ac <HAL_GetTick>
 8008820:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8008822:	e008      	b.n	8008836 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008824:	f7f9 fe42 	bl	80024ac <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	2b0a      	cmp	r3, #10
 8008830:	d901      	bls.n	8008836 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e083      	b.n	800893e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8008836:	f7ff fc86 	bl	8008146 <LL_RCC_PLL_IsReady>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1f1      	bne.n	8008824 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008844:	68da      	ldr	r2, [r3, #12]
 8008846:	4b40      	ldr	r3, [pc, #256]	; (8008948 <HAL_RCC_OscConfig+0x6fc>)
 8008848:	4013      	ands	r3, r2
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008852:	4311      	orrs	r1, r2
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008858:	0212      	lsls	r2, r2, #8
 800885a:	4311      	orrs	r1, r2
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008860:	4311      	orrs	r1, r2
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008866:	4311      	orrs	r1, r2
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800886c:	430a      	orrs	r2, r1
 800886e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008872:	4313      	orrs	r3, r2
 8008874:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008876:	f7ff fc4a 	bl	800810e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800887a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008888:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800888a:	f7f9 fe0f 	bl	80024ac <HAL_GetTick>
 800888e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8008890:	e008      	b.n	80088a4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008892:	f7f9 fe0b 	bl	80024ac <HAL_GetTick>
 8008896:	4602      	mov	r2, r0
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	1ad3      	subs	r3, r2, r3
 800889c:	2b0a      	cmp	r3, #10
 800889e:	d901      	bls.n	80088a4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e04c      	b.n	800893e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80088a4:	f7ff fc4f 	bl	8008146 <LL_RCC_PLL_IsReady>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d0f1      	beq.n	8008892 <HAL_RCC_OscConfig+0x646>
 80088ae:	e045      	b.n	800893c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088b0:	f7ff fc3b 	bl	800812a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088b4:	f7f9 fdfa 	bl	80024ac <HAL_GetTick>
 80088b8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80088ba:	e008      	b.n	80088ce <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088bc:	f7f9 fdf6 	bl	80024ac <HAL_GetTick>
 80088c0:	4602      	mov	r2, r0
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	2b0a      	cmp	r3, #10
 80088c8:	d901      	bls.n	80088ce <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e037      	b.n	800893e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80088ce:	f7ff fc3a 	bl	8008146 <LL_RCC_PLL_IsReady>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1f1      	bne.n	80088bc <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80088d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088dc:	68da      	ldr	r2, [r3, #12]
 80088de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088e2:	4b1a      	ldr	r3, [pc, #104]	; (800894c <HAL_RCC_OscConfig+0x700>)
 80088e4:	4013      	ands	r3, r2
 80088e6:	60cb      	str	r3, [r1, #12]
 80088e8:	e028      	b.n	800893c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d101      	bne.n	80088f6 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e023      	b.n	800893e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80088f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	f003 0203 	and.w	r2, r3, #3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008908:	429a      	cmp	r2, r3
 800890a:	d115      	bne.n	8008938 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008916:	429a      	cmp	r2, r3
 8008918:	d10e      	bne.n	8008938 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008924:	021b      	lsls	r3, r3, #8
 8008926:	429a      	cmp	r2, r3
 8008928:	d106      	bne.n	8008938 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008934:	429a      	cmp	r2, r3
 8008936:	d001      	beq.n	800893c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	e000      	b.n	800893e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3720      	adds	r7, #32
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	11c1808c 	.word	0x11c1808c
 800894c:	eefefffc 	.word	0xeefefffc

08008950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d101      	bne.n	8008964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e10f      	b.n	8008b84 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008964:	4b89      	ldr	r3, [pc, #548]	; (8008b8c <HAL_RCC_ClockConfig+0x23c>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 0307 	and.w	r3, r3, #7
 800896c:	683a      	ldr	r2, [r7, #0]
 800896e:	429a      	cmp	r2, r3
 8008970:	d91b      	bls.n	80089aa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008972:	4b86      	ldr	r3, [pc, #536]	; (8008b8c <HAL_RCC_ClockConfig+0x23c>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f023 0207 	bic.w	r2, r3, #7
 800897a:	4984      	ldr	r1, [pc, #528]	; (8008b8c <HAL_RCC_ClockConfig+0x23c>)
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	4313      	orrs	r3, r2
 8008980:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008982:	f7f9 fd93 	bl	80024ac <HAL_GetTick>
 8008986:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008988:	e008      	b.n	800899c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800898a:	f7f9 fd8f 	bl	80024ac <HAL_GetTick>
 800898e:	4602      	mov	r2, r0
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	1ad3      	subs	r3, r2, r3
 8008994:	2b02      	cmp	r3, #2
 8008996:	d901      	bls.n	800899c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8008998:	2303      	movs	r3, #3
 800899a:	e0f3      	b.n	8008b84 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800899c:	4b7b      	ldr	r3, [pc, #492]	; (8008b8c <HAL_RCC_ClockConfig+0x23c>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f003 0307 	and.w	r3, r3, #7
 80089a4:	683a      	ldr	r2, [r7, #0]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d1ef      	bne.n	800898a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 0302 	and.w	r3, r3, #2
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d016      	beq.n	80089e4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7ff fb2a 	bl	8008014 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80089c0:	f7f9 fd74 	bl	80024ac <HAL_GetTick>
 80089c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80089c6:	e008      	b.n	80089da <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80089c8:	f7f9 fd70 	bl	80024ac <HAL_GetTick>
 80089cc:	4602      	mov	r2, r0
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d901      	bls.n	80089da <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80089d6:	2303      	movs	r3, #3
 80089d8:	e0d4      	b.n	8008b84 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80089da:	f7ff fbf2 	bl	80081c2 <LL_RCC_IsActiveFlag_HPRE>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d0f1      	beq.n	80089c8 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d016      	beq.n	8008a1e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	695b      	ldr	r3, [r3, #20]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7ff fb20 	bl	800803a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80089fa:	f7f9 fd57 	bl	80024ac <HAL_GetTick>
 80089fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008a00:	e008      	b.n	8008a14 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008a02:	f7f9 fd53 	bl	80024ac <HAL_GetTick>
 8008a06:	4602      	mov	r2, r0
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	1ad3      	subs	r3, r2, r3
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d901      	bls.n	8008a14 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008a10:	2303      	movs	r3, #3
 8008a12:	e0b7      	b.n	8008b84 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008a14:	f7ff fbe6 	bl	80081e4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d0f1      	beq.n	8008a02 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0304 	and.w	r3, r3, #4
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d016      	beq.n	8008a58 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7ff fb19 	bl	8008066 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008a34:	f7f9 fd3a 	bl	80024ac <HAL_GetTick>
 8008a38:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008a3a:	e008      	b.n	8008a4e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008a3c:	f7f9 fd36 	bl	80024ac <HAL_GetTick>
 8008a40:	4602      	mov	r2, r0
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d901      	bls.n	8008a4e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	e09a      	b.n	8008b84 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008a4e:	f7ff fbdb 	bl	8008208 <LL_RCC_IsActiveFlag_PPRE1>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d0f1      	beq.n	8008a3c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 0308 	and.w	r3, r3, #8
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d017      	beq.n	8008a94 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	00db      	lsls	r3, r3, #3
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7ff fb0e 	bl	800808c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008a70:	f7f9 fd1c 	bl	80024ac <HAL_GetTick>
 8008a74:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008a76:	e008      	b.n	8008a8a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008a78:	f7f9 fd18 	bl	80024ac <HAL_GetTick>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	d901      	bls.n	8008a8a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8008a86:	2303      	movs	r3, #3
 8008a88:	e07c      	b.n	8008b84 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008a8a:	f7ff fbce 	bl	800822a <LL_RCC_IsActiveFlag_PPRE2>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d0f1      	beq.n	8008a78 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 0301 	and.w	r3, r3, #1
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d043      	beq.n	8008b28 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d106      	bne.n	8008ab6 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8008aa8:	f7ff f99b 	bl	8007de2 <LL_RCC_HSE_IsReady>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d11e      	bne.n	8008af0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e066      	b.n	8008b84 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	2b03      	cmp	r3, #3
 8008abc:	d106      	bne.n	8008acc <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8008abe:	f7ff fb42 	bl	8008146 <LL_RCC_PLL_IsReady>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d113      	bne.n	8008af0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e05b      	b.n	8008b84 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d106      	bne.n	8008ae2 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8008ad4:	f7ff fa35 	bl	8007f42 <LL_RCC_MSI_IsReady>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d108      	bne.n	8008af0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e050      	b.n	8008b84 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8008ae2:	f7ff f9ab 	bl	8007e3c <LL_RCC_HSI_IsReady>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d101      	bne.n	8008af0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	e049      	b.n	8008b84 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7ff fa6f 	bl	8007fd8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008afa:	f7f9 fcd7 	bl	80024ac <HAL_GetTick>
 8008afe:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b00:	e00a      	b.n	8008b18 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b02:	f7f9 fcd3 	bl	80024ac <HAL_GetTick>
 8008b06:	4602      	mov	r2, r0
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d901      	bls.n	8008b18 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8008b14:	2303      	movs	r3, #3
 8008b16:	e035      	b.n	8008b84 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b18:	f7ff fa71 	bl	8007ffe <LL_RCC_GetSysClkSource>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d1ec      	bne.n	8008b02 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008b28:	4b18      	ldr	r3, [pc, #96]	; (8008b8c <HAL_RCC_ClockConfig+0x23c>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 0307 	and.w	r3, r3, #7
 8008b30:	683a      	ldr	r2, [r7, #0]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d21b      	bcs.n	8008b6e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b36:	4b15      	ldr	r3, [pc, #84]	; (8008b8c <HAL_RCC_ClockConfig+0x23c>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f023 0207 	bic.w	r2, r3, #7
 8008b3e:	4913      	ldr	r1, [pc, #76]	; (8008b8c <HAL_RCC_ClockConfig+0x23c>)
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b46:	f7f9 fcb1 	bl	80024ac <HAL_GetTick>
 8008b4a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b4c:	e008      	b.n	8008b60 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008b4e:	f7f9 fcad 	bl	80024ac <HAL_GetTick>
 8008b52:	4602      	mov	r2, r0
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	1ad3      	subs	r3, r2, r3
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	d901      	bls.n	8008b60 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e011      	b.n	8008b84 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b60:	4b0a      	ldr	r3, [pc, #40]	; (8008b8c <HAL_RCC_ClockConfig+0x23c>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 0307 	and.w	r3, r3, #7
 8008b68:	683a      	ldr	r2, [r7, #0]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d1ef      	bne.n	8008b4e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008b6e:	f000 f8b3 	bl	8008cd8 <HAL_RCC_GetHCLKFreq>
 8008b72:	4603      	mov	r3, r0
 8008b74:	4a06      	ldr	r2, [pc, #24]	; (8008b90 <HAL_RCC_ClockConfig+0x240>)
 8008b76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8008b78:	4b06      	ldr	r3, [pc, #24]	; (8008b94 <HAL_RCC_ClockConfig+0x244>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7f9 fc8b 	bl	8002498 <HAL_InitTick>
 8008b82:	4603      	mov	r3, r0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	58004000 	.word	0x58004000
 8008b90:	20000000 	.word	0x20000000
 8008b94:	20000004 	.word	0x20000004

08008b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b98:	b590      	push	{r4, r7, lr}
 8008b9a:	b087      	sub	sp, #28
 8008b9c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ba6:	f7ff fa2a 	bl	8007ffe <LL_RCC_GetSysClkSource>
 8008baa:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008bac:	f7ff fafe 	bl	80081ac <LL_RCC_PLL_GetMainSource>
 8008bb0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d005      	beq.n	8008bc4 <HAL_RCC_GetSysClockFreq+0x2c>
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	2b0c      	cmp	r3, #12
 8008bbc:	d139      	bne.n	8008c32 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d136      	bne.n	8008c32 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8008bc4:	f7ff f9cd 	bl	8007f62 <LL_RCC_MSI_IsEnabledRangeSelect>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d115      	bne.n	8008bfa <HAL_RCC_GetSysClockFreq+0x62>
 8008bce:	f7ff f9c8 	bl	8007f62 <LL_RCC_MSI_IsEnabledRangeSelect>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d106      	bne.n	8008be6 <HAL_RCC_GetSysClockFreq+0x4e>
 8008bd8:	f7ff f9d3 	bl	8007f82 <LL_RCC_MSI_GetRange>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	0a1b      	lsrs	r3, r3, #8
 8008be0:	f003 030f 	and.w	r3, r3, #15
 8008be4:	e005      	b.n	8008bf2 <HAL_RCC_GetSysClockFreq+0x5a>
 8008be6:	f7ff f9d7 	bl	8007f98 <LL_RCC_MSI_GetRangeAfterStandby>
 8008bea:	4603      	mov	r3, r0
 8008bec:	0a1b      	lsrs	r3, r3, #8
 8008bee:	f003 030f 	and.w	r3, r3, #15
 8008bf2:	4a36      	ldr	r2, [pc, #216]	; (8008ccc <HAL_RCC_GetSysClockFreq+0x134>)
 8008bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bf8:	e014      	b.n	8008c24 <HAL_RCC_GetSysClockFreq+0x8c>
 8008bfa:	f7ff f9b2 	bl	8007f62 <LL_RCC_MSI_IsEnabledRangeSelect>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d106      	bne.n	8008c12 <HAL_RCC_GetSysClockFreq+0x7a>
 8008c04:	f7ff f9bd 	bl	8007f82 <LL_RCC_MSI_GetRange>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	091b      	lsrs	r3, r3, #4
 8008c0c:	f003 030f 	and.w	r3, r3, #15
 8008c10:	e005      	b.n	8008c1e <HAL_RCC_GetSysClockFreq+0x86>
 8008c12:	f7ff f9c1 	bl	8007f98 <LL_RCC_MSI_GetRangeAfterStandby>
 8008c16:	4603      	mov	r3, r0
 8008c18:	091b      	lsrs	r3, r3, #4
 8008c1a:	f003 030f 	and.w	r3, r3, #15
 8008c1e:	4a2b      	ldr	r2, [pc, #172]	; (8008ccc <HAL_RCC_GetSysClockFreq+0x134>)
 8008c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c24:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d115      	bne.n	8008c58 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008c30:	e012      	b.n	8008c58 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	2b04      	cmp	r3, #4
 8008c36:	d102      	bne.n	8008c3e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008c38:	4b25      	ldr	r3, [pc, #148]	; (8008cd0 <HAL_RCC_GetSysClockFreq+0x138>)
 8008c3a:	617b      	str	r3, [r7, #20]
 8008c3c:	e00c      	b.n	8008c58 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	2b08      	cmp	r3, #8
 8008c42:	d109      	bne.n	8008c58 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008c44:	f7ff f8a0 	bl	8007d88 <LL_RCC_HSE_IsEnabledDiv2>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d102      	bne.n	8008c54 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008c4e:	4b20      	ldr	r3, [pc, #128]	; (8008cd0 <HAL_RCC_GetSysClockFreq+0x138>)
 8008c50:	617b      	str	r3, [r7, #20]
 8008c52:	e001      	b.n	8008c58 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008c54:	4b1f      	ldr	r3, [pc, #124]	; (8008cd4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008c56:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008c58:	f7ff f9d1 	bl	8007ffe <LL_RCC_GetSysClkSource>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b0c      	cmp	r3, #12
 8008c60:	d12f      	bne.n	8008cc2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008c62:	f7ff faa3 	bl	80081ac <LL_RCC_PLL_GetMainSource>
 8008c66:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d003      	beq.n	8008c76 <HAL_RCC_GetSysClockFreq+0xde>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2b03      	cmp	r3, #3
 8008c72:	d003      	beq.n	8008c7c <HAL_RCC_GetSysClockFreq+0xe4>
 8008c74:	e00d      	b.n	8008c92 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8008c76:	4b16      	ldr	r3, [pc, #88]	; (8008cd0 <HAL_RCC_GetSysClockFreq+0x138>)
 8008c78:	60fb      	str	r3, [r7, #12]
        break;
 8008c7a:	e00d      	b.n	8008c98 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008c7c:	f7ff f884 	bl	8007d88 <LL_RCC_HSE_IsEnabledDiv2>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d102      	bne.n	8008c8c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8008c86:	4b12      	ldr	r3, [pc, #72]	; (8008cd0 <HAL_RCC_GetSysClockFreq+0x138>)
 8008c88:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008c8a:	e005      	b.n	8008c98 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8008c8c:	4b11      	ldr	r3, [pc, #68]	; (8008cd4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008c8e:	60fb      	str	r3, [r7, #12]
        break;
 8008c90:	e002      	b.n	8008c98 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	60fb      	str	r3, [r7, #12]
        break;
 8008c96:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008c98:	f7ff fa66 	bl	8008168 <LL_RCC_PLL_GetN>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	fb03 f402 	mul.w	r4, r3, r2
 8008ca4:	f7ff fa77 	bl	8008196 <LL_RCC_PLL_GetDivider>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	091b      	lsrs	r3, r3, #4
 8008cac:	3301      	adds	r3, #1
 8008cae:	fbb4 f4f3 	udiv	r4, r4, r3
 8008cb2:	f7ff fa65 	bl	8008180 <LL_RCC_PLL_GetR>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	0f5b      	lsrs	r3, r3, #29
 8008cba:	3301      	adds	r3, #1
 8008cbc:	fbb4 f3f3 	udiv	r3, r4, r3
 8008cc0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8008cc2:	697b      	ldr	r3, [r7, #20]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	371c      	adds	r7, #28
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd90      	pop	{r4, r7, pc}
 8008ccc:	08020924 	.word	0x08020924
 8008cd0:	00f42400 	.word	0x00f42400
 8008cd4:	01e84800 	.word	0x01e84800

08008cd8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008cd8:	b598      	push	{r3, r4, r7, lr}
 8008cda:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008cdc:	f7ff ff5c 	bl	8008b98 <HAL_RCC_GetSysClockFreq>
 8008ce0:	4604      	mov	r4, r0
 8008ce2:	f7ff f9e6 	bl	80080b2 <LL_RCC_GetAHBPrescaler>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	091b      	lsrs	r3, r3, #4
 8008cea:	f003 030f 	and.w	r3, r3, #15
 8008cee:	4a03      	ldr	r2, [pc, #12]	; (8008cfc <HAL_RCC_GetHCLKFreq+0x24>)
 8008cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cf4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	bd98      	pop	{r3, r4, r7, pc}
 8008cfc:	080208c4 	.word	0x080208c4

08008d00 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d00:	b598      	push	{r3, r4, r7, lr}
 8008d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008d04:	f7ff ffe8 	bl	8008cd8 <HAL_RCC_GetHCLKFreq>
 8008d08:	4604      	mov	r4, r0
 8008d0a:	f7ff f9ea 	bl	80080e2 <LL_RCC_GetAPB1Prescaler>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	0a1b      	lsrs	r3, r3, #8
 8008d12:	4a03      	ldr	r2, [pc, #12]	; (8008d20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d18:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	bd98      	pop	{r3, r4, r7, pc}
 8008d20:	08020904 	.word	0x08020904

08008d24 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d24:	b598      	push	{r3, r4, r7, lr}
 8008d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8008d28:	f7ff ffd6 	bl	8008cd8 <HAL_RCC_GetHCLKFreq>
 8008d2c:	4604      	mov	r4, r0
 8008d2e:	f7ff f9e3 	bl	80080f8 <LL_RCC_GetAPB2Prescaler>
 8008d32:	4603      	mov	r3, r0
 8008d34:	0adb      	lsrs	r3, r3, #11
 8008d36:	4a03      	ldr	r2, [pc, #12]	; (8008d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d3c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	bd98      	pop	{r3, r4, r7, pc}
 8008d44:	08020904 	.word	0x08020904

08008d48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008d48:	b590      	push	{r4, r7, lr}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	091b      	lsrs	r3, r3, #4
 8008d54:	f003 030f 	and.w	r3, r3, #15
 8008d58:	4a10      	ldr	r2, [pc, #64]	; (8008d9c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8008d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d5e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8008d60:	f7ff f9b2 	bl	80080c8 <LL_RCC_GetAHB3Prescaler>
 8008d64:	4603      	mov	r3, r0
 8008d66:	091b      	lsrs	r3, r3, #4
 8008d68:	f003 030f 	and.w	r3, r3, #15
 8008d6c:	4a0c      	ldr	r2, [pc, #48]	; (8008da0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8008d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d78:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	4a09      	ldr	r2, [pc, #36]	; (8008da4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8008d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d82:	0c9c      	lsrs	r4, r3, #18
 8008d84:	f7fe ffc6 	bl	8007d14 <HAL_PWREx_GetVoltageRange>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f000 f80b 	bl	8008da8 <RCC_SetFlashLatency>
 8008d92:	4603      	mov	r3, r0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3714      	adds	r7, #20
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd90      	pop	{r4, r7, pc}
 8008d9c:	08020924 	.word	0x08020924
 8008da0:	080208c4 	.word	0x080208c4
 8008da4:	431bde83 	.word	0x431bde83

08008da8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b08e      	sub	sp, #56	; 0x38
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8008db2:	4a3a      	ldr	r2, [pc, #232]	; (8008e9c <RCC_SetFlashLatency+0xf4>)
 8008db4:	f107 0320 	add.w	r3, r7, #32
 8008db8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008dbc:	6018      	str	r0, [r3, #0]
 8008dbe:	3304      	adds	r3, #4
 8008dc0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8008dc2:	4a37      	ldr	r2, [pc, #220]	; (8008ea0 <RCC_SetFlashLatency+0xf8>)
 8008dc4:	f107 0318 	add.w	r3, r7, #24
 8008dc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008dcc:	6018      	str	r0, [r3, #0]
 8008dce:	3304      	adds	r3, #4
 8008dd0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8008dd2:	4a34      	ldr	r2, [pc, #208]	; (8008ea4 <RCC_SetFlashLatency+0xfc>)
 8008dd4:	f107 030c 	add.w	r3, r7, #12
 8008dd8:	ca07      	ldmia	r2, {r0, r1, r2}
 8008dda:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8008dde:	2300      	movs	r3, #0
 8008de0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008de8:	d11b      	bne.n	8008e22 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008dea:	2300      	movs	r3, #0
 8008dec:	633b      	str	r3, [r7, #48]	; 0x30
 8008dee:	e014      	b.n	8008e1a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8008df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df2:	005b      	lsls	r3, r3, #1
 8008df4:	3338      	adds	r3, #56	; 0x38
 8008df6:	443b      	add	r3, r7
 8008df8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d807      	bhi.n	8008e14 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	3338      	adds	r3, #56	; 0x38
 8008e0a:	443b      	add	r3, r7
 8008e0c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008e10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e12:	e021      	b.n	8008e58 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e16:	3301      	adds	r3, #1
 8008e18:	633b      	str	r3, [r7, #48]	; 0x30
 8008e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d9e7      	bls.n	8008df0 <RCC_SetFlashLatency+0x48>
 8008e20:	e01a      	b.n	8008e58 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008e22:	2300      	movs	r3, #0
 8008e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e26:	e014      	b.n	8008e52 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8008e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2a:	005b      	lsls	r3, r3, #1
 8008e2c:	3338      	adds	r3, #56	; 0x38
 8008e2e:	443b      	add	r3, r7
 8008e30:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8008e34:	461a      	mov	r2, r3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d807      	bhi.n	8008e4c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	3338      	adds	r3, #56	; 0x38
 8008e42:	443b      	add	r3, r7
 8008e44:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008e48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e4a:	e005      	b.n	8008e58 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4e:	3301      	adds	r3, #1
 8008e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d9e7      	bls.n	8008e28 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008e58:	4b13      	ldr	r3, [pc, #76]	; (8008ea8 <RCC_SetFlashLatency+0x100>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f023 0207 	bic.w	r2, r3, #7
 8008e60:	4911      	ldr	r1, [pc, #68]	; (8008ea8 <RCC_SetFlashLatency+0x100>)
 8008e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e64:	4313      	orrs	r3, r2
 8008e66:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008e68:	f7f9 fb20 	bl	80024ac <HAL_GetTick>
 8008e6c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008e6e:	e008      	b.n	8008e82 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008e70:	f7f9 fb1c 	bl	80024ac <HAL_GetTick>
 8008e74:	4602      	mov	r2, r0
 8008e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d901      	bls.n	8008e82 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8008e7e:	2303      	movs	r3, #3
 8008e80:	e007      	b.n	8008e92 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008e82:	4b09      	ldr	r3, [pc, #36]	; (8008ea8 <RCC_SetFlashLatency+0x100>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f003 0307 	and.w	r3, r3, #7
 8008e8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d1ef      	bne.n	8008e70 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3738      	adds	r7, #56	; 0x38
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	0802002c 	.word	0x0802002c
 8008ea0:	08020034 	.word	0x08020034
 8008ea4:	0802003c 	.word	0x0802003c
 8008ea8:	58004000 	.word	0x58004000

08008eac <LL_RCC_LSE_IsReady>:
{
 8008eac:	b480      	push	{r7}
 8008eae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eb8:	f003 0302 	and.w	r3, r3, #2
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d101      	bne.n	8008ec4 <LL_RCC_LSE_IsReady+0x18>
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e000      	b.n	8008ec6 <LL_RCC_LSE_IsReady+0x1a>
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bc80      	pop	{r7}
 8008ecc:	4770      	bx	lr

08008ece <LL_RCC_SetUSARTClockSource>:
{
 8008ece:	b480      	push	{r7}
 8008ed0:	b083      	sub	sp, #12
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8008ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008eda:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	0c1b      	lsrs	r3, r3, #16
 8008ee2:	43db      	mvns	r3, r3
 8008ee4:	401a      	ands	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bc80      	pop	{r7}
 8008efc:	4770      	bx	lr

08008efe <LL_RCC_SetI2SClockSource>:
{
 8008efe:	b480      	push	{r7}
 8008f00:	b083      	sub	sp, #12
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8008f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008f1e:	bf00      	nop
 8008f20:	370c      	adds	r7, #12
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bc80      	pop	{r7}
 8008f26:	4770      	bx	lr

08008f28 <LL_RCC_SetLPUARTClockSource>:
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f38:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008f3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008f48:	bf00      	nop
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bc80      	pop	{r7}
 8008f50:	4770      	bx	lr

08008f52 <LL_RCC_SetI2CClockSource>:
{
 8008f52:	b480      	push	{r7}
 8008f54:	b083      	sub	sp, #12
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	091b      	lsrs	r3, r3, #4
 8008f66:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008f6a:	43db      	mvns	r3, r3
 8008f6c:	401a      	ands	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	011b      	lsls	r3, r3, #4
 8008f72:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008f76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008f80:	bf00      	nop
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bc80      	pop	{r7}
 8008f88:	4770      	bx	lr

08008f8a <LL_RCC_SetLPTIMClockSource>:
{
 8008f8a:	b480      	push	{r7}
 8008f8c:	b083      	sub	sp, #12
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8008f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f96:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	0c1b      	lsrs	r3, r3, #16
 8008f9e:	041b      	lsls	r3, r3, #16
 8008fa0:	43db      	mvns	r3, r3
 8008fa2:	401a      	ands	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	041b      	lsls	r3, r3, #16
 8008fa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008fac:	4313      	orrs	r3, r2
 8008fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008fb2:	bf00      	nop
 8008fb4:	370c      	adds	r7, #12
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bc80      	pop	{r7}
 8008fba:	4770      	bx	lr

08008fbc <LL_RCC_SetRNGClockSource>:
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fcc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008fd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008fdc:	bf00      	nop
 8008fde:	370c      	adds	r7, #12
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bc80      	pop	{r7}
 8008fe4:	4770      	bx	lr

08008fe6 <LL_RCC_SetADCClockSource>:
{
 8008fe6:	b480      	push	{r7}
 8008fe8:	b083      	sub	sp, #12
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8008fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ff6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008ffa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4313      	orrs	r3, r2
 8009002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009006:	bf00      	nop
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	bc80      	pop	{r7}
 800900e:	4770      	bx	lr

08009010 <LL_RCC_SetRTCClockSource>:
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800901c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009020:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009024:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4313      	orrs	r3, r2
 800902c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	bc80      	pop	{r7}
 8009038:	4770      	bx	lr

0800903a <LL_RCC_GetRTCClockSource>:
{
 800903a:	b480      	push	{r7}
 800903c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800903e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009046:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800904a:	4618      	mov	r0, r3
 800904c:	46bd      	mov	sp, r7
 800904e:	bc80      	pop	{r7}
 8009050:	4770      	bx	lr

08009052 <LL_RCC_ForceBackupDomainReset>:
{
 8009052:	b480      	push	{r7}
 8009054:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800905a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800905e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800906a:	bf00      	nop
 800906c:	46bd      	mov	sp, r7
 800906e:	bc80      	pop	{r7}
 8009070:	4770      	bx	lr

08009072 <LL_RCC_ReleaseBackupDomainReset>:
{
 8009072:	b480      	push	{r7}
 8009074:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800907a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800907e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800908a:	bf00      	nop
 800908c:	46bd      	mov	sp, r7
 800908e:	bc80      	pop	{r7}
 8009090:	4770      	bx	lr
	...

08009094 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b086      	sub	sp, #24
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800909c:	2300      	movs	r3, #0
 800909e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80090a0:	2300      	movs	r3, #0
 80090a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80090a4:	2300      	movs	r3, #0
 80090a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d058      	beq.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80090b4:	f7fe fe20 	bl	8007cf8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80090b8:	f7f9 f9f8 	bl	80024ac <HAL_GetTick>
 80090bc:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80090be:	e009      	b.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090c0:	f7f9 f9f4 	bl	80024ac <HAL_GetTick>
 80090c4:	4602      	mov	r2, r0
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	d902      	bls.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80090ce:	2303      	movs	r3, #3
 80090d0:	74fb      	strb	r3, [r7, #19]
        break;
 80090d2:	e006      	b.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80090d4:	4b7b      	ldr	r3, [pc, #492]	; (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090e0:	d1ee      	bne.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80090e2:	7cfb      	ldrb	r3, [r7, #19]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d13c      	bne.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80090e8:	f7ff ffa7 	bl	800903a <LL_RCC_GetRTCClockSource>
 80090ec:	4602      	mov	r2, r0
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d00f      	beq.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80090f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009102:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009104:	f7ff ffa5 	bl	8009052 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009108:	f7ff ffb3 	bl	8009072 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800910c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	f003 0302 	and.w	r3, r3, #2
 800911c:	2b00      	cmp	r3, #0
 800911e:	d014      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009120:	f7f9 f9c4 	bl	80024ac <HAL_GetTick>
 8009124:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8009126:	e00b      	b.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009128:	f7f9 f9c0 	bl	80024ac <HAL_GetTick>
 800912c:	4602      	mov	r2, r0
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	f241 3288 	movw	r2, #5000	; 0x1388
 8009136:	4293      	cmp	r3, r2
 8009138:	d902      	bls.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800913a:	2303      	movs	r3, #3
 800913c:	74fb      	strb	r3, [r7, #19]
            break;
 800913e:	e004      	b.n	800914a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8009140:	f7ff feb4 	bl	8008eac <LL_RCC_LSE_IsReady>
 8009144:	4603      	mov	r3, r0
 8009146:	2b01      	cmp	r3, #1
 8009148:	d1ee      	bne.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800914a:	7cfb      	ldrb	r3, [r7, #19]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d105      	bne.n	800915c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009154:	4618      	mov	r0, r3
 8009156:	f7ff ff5b 	bl	8009010 <LL_RCC_SetRTCClockSource>
 800915a:	e004      	b.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800915c:	7cfb      	ldrb	r3, [r7, #19]
 800915e:	74bb      	strb	r3, [r7, #18]
 8009160:	e001      	b.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009162:	7cfb      	ldrb	r3, [r7, #19]
 8009164:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f003 0301 	and.w	r3, r3, #1
 800916e:	2b00      	cmp	r3, #0
 8009170:	d004      	beq.n	800917c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	4618      	mov	r0, r3
 8009178:	f7ff fea9 	bl	8008ece <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 0302 	and.w	r3, r3, #2
 8009184:	2b00      	cmp	r3, #0
 8009186:	d004      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	4618      	mov	r0, r3
 800918e:	f7ff fe9e 	bl	8008ece <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 0320 	and.w	r3, r3, #32
 800919a:	2b00      	cmp	r3, #0
 800919c:	d004      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7ff fec0 	bl	8008f28 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d004      	beq.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a1b      	ldr	r3, [r3, #32]
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7ff fee6 	bl	8008f8a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d004      	beq.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7ff fedb 	bl	8008f8a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d004      	beq.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7ff fed0 	bl	8008f8a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d004      	beq.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	695b      	ldr	r3, [r3, #20]
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7ff fea9 	bl	8008f52 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009208:	2b00      	cmp	r3, #0
 800920a:	d004      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	699b      	ldr	r3, [r3, #24]
 8009210:	4618      	mov	r0, r3
 8009212:	f7ff fe9e 	bl	8008f52 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800921e:	2b00      	cmp	r3, #0
 8009220:	d004      	beq.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	69db      	ldr	r3, [r3, #28]
 8009226:	4618      	mov	r0, r3
 8009228:	f7ff fe93 	bl	8008f52 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 0310 	and.w	r3, r3, #16
 8009234:	2b00      	cmp	r3, #0
 8009236:	d011      	beq.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	4618      	mov	r0, r3
 800923e:	f7ff fe5e 	bl	8008efe <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800924a:	d107      	bne.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800924c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800925a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009264:	2b00      	cmp	r3, #0
 8009266:	d010      	beq.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800926c:	4618      	mov	r0, r3
 800926e:	f7ff fea5 	bl	8008fbc <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009276:	2b00      	cmp	r3, #0
 8009278:	d107      	bne.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800927a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009284:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009288:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009292:	2b00      	cmp	r3, #0
 8009294:	d011      	beq.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800929a:	4618      	mov	r0, r3
 800929c:	f7ff fea3 	bl	8008fe6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092a8:	d107      	bne.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80092aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80092b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092b8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80092ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3718      	adds	r7, #24
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	58000400 	.word	0x58000400

080092c8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d071      	beq.n	80093be <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d106      	bne.n	80092f4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f7f8 fe6c 	bl	8001fcc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2202      	movs	r2, #2
 80092f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80092fc:	4b32      	ldr	r3, [pc, #200]	; (80093c8 <HAL_RTC_Init+0x100>)
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	f003 0310 	and.w	r3, r3, #16
 8009304:	2b10      	cmp	r3, #16
 8009306:	d051      	beq.n	80093ac <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009308:	4b2f      	ldr	r3, [pc, #188]	; (80093c8 <HAL_RTC_Init+0x100>)
 800930a:	22ca      	movs	r2, #202	; 0xca
 800930c:	625a      	str	r2, [r3, #36]	; 0x24
 800930e:	4b2e      	ldr	r3, [pc, #184]	; (80093c8 <HAL_RTC_Init+0x100>)
 8009310:	2253      	movs	r2, #83	; 0x53
 8009312:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 fa11 	bl	800973c <RTC_EnterInitMode>
 800931a:	4603      	mov	r3, r0
 800931c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800931e:	7bfb      	ldrb	r3, [r7, #15]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d13f      	bne.n	80093a4 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8009324:	4b28      	ldr	r3, [pc, #160]	; (80093c8 <HAL_RTC_Init+0x100>)
 8009326:	699b      	ldr	r3, [r3, #24]
 8009328:	4a27      	ldr	r2, [pc, #156]	; (80093c8 <HAL_RTC_Init+0x100>)
 800932a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800932e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009332:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8009334:	4b24      	ldr	r3, [pc, #144]	; (80093c8 <HAL_RTC_Init+0x100>)
 8009336:	699a      	ldr	r2, [r3, #24]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6859      	ldr	r1, [r3, #4]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	4319      	orrs	r1, r3
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	430b      	orrs	r3, r1
 8009348:	491f      	ldr	r1, [pc, #124]	; (80093c8 <HAL_RTC_Init+0x100>)
 800934a:	4313      	orrs	r3, r2
 800934c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	68da      	ldr	r2, [r3, #12]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	041b      	lsls	r3, r3, #16
 8009358:	491b      	ldr	r1, [pc, #108]	; (80093c8 <HAL_RTC_Init+0x100>)
 800935a:	4313      	orrs	r3, r2
 800935c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800935e:	4b1a      	ldr	r3, [pc, #104]	; (80093c8 <HAL_RTC_Init+0x100>)
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800936e:	430b      	orrs	r3, r1
 8009370:	4915      	ldr	r1, [pc, #84]	; (80093c8 <HAL_RTC_Init+0x100>)
 8009372:	4313      	orrs	r3, r2
 8009374:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 fa14 	bl	80097a4 <RTC_ExitInitMode>
 800937c:	4603      	mov	r3, r0
 800937e:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8009380:	7bfb      	ldrb	r3, [r7, #15]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d10e      	bne.n	80093a4 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8009386:	4b10      	ldr	r3, [pc, #64]	; (80093c8 <HAL_RTC_Init+0x100>)
 8009388:	699b      	ldr	r3, [r3, #24]
 800938a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a19      	ldr	r1, [r3, #32]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	69db      	ldr	r3, [r3, #28]
 8009396:	4319      	orrs	r1, r3
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	695b      	ldr	r3, [r3, #20]
 800939c:	430b      	orrs	r3, r1
 800939e:	490a      	ldr	r1, [pc, #40]	; (80093c8 <HAL_RTC_Init+0x100>)
 80093a0:	4313      	orrs	r3, r2
 80093a2:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093a4:	4b08      	ldr	r3, [pc, #32]	; (80093c8 <HAL_RTC_Init+0x100>)
 80093a6:	22ff      	movs	r2, #255	; 0xff
 80093a8:	625a      	str	r2, [r3, #36]	; 0x24
 80093aa:	e001      	b.n	80093b0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80093ac:	2300      	movs	r3, #0
 80093ae:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80093b0:	7bfb      	ldrb	r3, [r7, #15]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d103      	bne.n	80093be <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2201      	movs	r2, #1
 80093ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80093be:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3710      	adds	r7, #16
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	40002800 	.word	0x40002800

080093cc <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80093cc:	b590      	push	{r4, r7, lr}
 80093ce:	b087      	sub	sp, #28
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80093d8:	2300      	movs	r3, #0
 80093da:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d101      	bne.n	80093ea <HAL_RTC_SetAlarm_IT+0x1e>
 80093e6:	2302      	movs	r3, #2
 80093e8:	e0f3      	b.n	80095d2 <HAL_RTC_SetAlarm_IT+0x206>
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2201      	movs	r2, #1
 80093ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2202      	movs	r2, #2
 80093f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80093fa:	4b78      	ldr	r3, [pc, #480]	; (80095dc <HAL_RTC_SetAlarm_IT+0x210>)
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009402:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800940a:	d06a      	beq.n	80094e2 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d13a      	bne.n	8009488 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8009412:	4b72      	ldr	r3, [pc, #456]	; (80095dc <HAL_RTC_SetAlarm_IT+0x210>)
 8009414:	699b      	ldr	r3, [r3, #24]
 8009416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800941a:	2b00      	cmp	r3, #0
 800941c:	d102      	bne.n	8009424 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	2200      	movs	r2, #0
 8009422:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	695b      	ldr	r3, [r3, #20]
 8009428:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	4618      	mov	r0, r3
 8009432:	f000 f9f5 	bl	8009820 <RTC_ByteToBcd2>
 8009436:	4603      	mov	r3, r0
 8009438:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	785b      	ldrb	r3, [r3, #1]
 800943e:	4618      	mov	r0, r3
 8009440:	f000 f9ee 	bl	8009820 <RTC_ByteToBcd2>
 8009444:	4603      	mov	r3, r0
 8009446:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009448:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	789b      	ldrb	r3, [r3, #2]
 800944e:	4618      	mov	r0, r3
 8009450:	f000 f9e6 	bl	8009820 <RTC_ByteToBcd2>
 8009454:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009456:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	78db      	ldrb	r3, [r3, #3]
 800945e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009460:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800946a:	4618      	mov	r0, r3
 800946c:	f000 f9d8 	bl	8009820 <RTC_ByteToBcd2>
 8009470:	4603      	mov	r3, r0
 8009472:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009474:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800947c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009482:	4313      	orrs	r3, r2
 8009484:	617b      	str	r3, [r7, #20]
 8009486:	e02c      	b.n	80094e2 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	695b      	ldr	r3, [r3, #20]
 800948c:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8009490:	d00d      	beq.n	80094ae <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	695b      	ldr	r3, [r3, #20]
 8009496:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800949a:	d008      	beq.n	80094ae <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800949c:	4b4f      	ldr	r3, [pc, #316]	; (80095dc <HAL_RTC_SetAlarm_IT+0x210>)
 800949e:	699b      	ldr	r3, [r3, #24]
 80094a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d102      	bne.n	80094ae <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	2200      	movs	r2, #0
 80094ac:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	785b      	ldrb	r3, [r3, #1]
 80094b8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80094ba:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80094c0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	78db      	ldrb	r3, [r3, #3]
 80094c6:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80094c8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80094d0:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80094d2:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80094d8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80094de:	4313      	orrs	r3, r2
 80094e0:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80094e2:	4b3e      	ldr	r3, [pc, #248]	; (80095dc <HAL_RTC_SetAlarm_IT+0x210>)
 80094e4:	22ca      	movs	r2, #202	; 0xca
 80094e6:	625a      	str	r2, [r3, #36]	; 0x24
 80094e8:	4b3c      	ldr	r3, [pc, #240]	; (80095dc <HAL_RTC_SetAlarm_IT+0x210>)
 80094ea:	2253      	movs	r2, #83	; 0x53
 80094ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094f6:	d12c      	bne.n	8009552 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80094f8:	4b38      	ldr	r3, [pc, #224]	; (80095dc <HAL_RTC_SetAlarm_IT+0x210>)
 80094fa:	699b      	ldr	r3, [r3, #24]
 80094fc:	4a37      	ldr	r2, [pc, #220]	; (80095dc <HAL_RTC_SetAlarm_IT+0x210>)
 80094fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009502:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8009504:	4b35      	ldr	r3, [pc, #212]	; (80095dc <HAL_RTC_SetAlarm_IT+0x210>)
 8009506:	2201      	movs	r2, #1
 8009508:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009510:	d107      	bne.n	8009522 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	699a      	ldr	r2, [r3, #24]
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	69db      	ldr	r3, [r3, #28]
 800951a:	4930      	ldr	r1, [pc, #192]	; (80095dc <HAL_RTC_SetAlarm_IT+0x210>)
 800951c:	4313      	orrs	r3, r2
 800951e:	644b      	str	r3, [r1, #68]	; 0x44
 8009520:	e006      	b.n	8009530 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8009522:	4a2e      	ldr	r2, [pc, #184]	; (80095dc <HAL_RTC_SetAlarm_IT+0x210>)
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8009528:	4a2c      	ldr	r2, [pc, #176]	; (80095dc <HAL_RTC_SetAlarm_IT+0x210>)
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	699b      	ldr	r3, [r3, #24]
 800952e:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8009530:	4a2a      	ldr	r2, [pc, #168]	; (80095dc <HAL_RTC_SetAlarm_IT+0x210>)
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800953c:	f043 0201 	orr.w	r2, r3, #1
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8009544:	4b25      	ldr	r3, [pc, #148]	; (80095dc <HAL_RTC_SetAlarm_IT+0x210>)
 8009546:	699b      	ldr	r3, [r3, #24]
 8009548:	4a24      	ldr	r2, [pc, #144]	; (80095dc <HAL_RTC_SetAlarm_IT+0x210>)
 800954a:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800954e:	6193      	str	r3, [r2, #24]
 8009550:	e02b      	b.n	80095aa <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8009552:	4b22      	ldr	r3, [pc, #136]	; (80095dc <HAL_RTC_SetAlarm_IT+0x210>)
 8009554:	699b      	ldr	r3, [r3, #24]
 8009556:	4a21      	ldr	r2, [pc, #132]	; (80095dc <HAL_RTC_SetAlarm_IT+0x210>)
 8009558:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800955c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800955e:	4b1f      	ldr	r3, [pc, #124]	; (80095dc <HAL_RTC_SetAlarm_IT+0x210>)
 8009560:	2202      	movs	r2, #2
 8009562:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800956a:	d107      	bne.n	800957c <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	699a      	ldr	r2, [r3, #24]
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	69db      	ldr	r3, [r3, #28]
 8009574:	4919      	ldr	r1, [pc, #100]	; (80095dc <HAL_RTC_SetAlarm_IT+0x210>)
 8009576:	4313      	orrs	r3, r2
 8009578:	64cb      	str	r3, [r1, #76]	; 0x4c
 800957a:	e006      	b.n	800958a <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800957c:	4a17      	ldr	r2, [pc, #92]	; (80095dc <HAL_RTC_SetAlarm_IT+0x210>)
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8009582:	4a16      	ldr	r2, [pc, #88]	; (80095dc <HAL_RTC_SetAlarm_IT+0x210>)
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	699b      	ldr	r3, [r3, #24]
 8009588:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800958a:	4a14      	ldr	r2, [pc, #80]	; (80095dc <HAL_RTC_SetAlarm_IT+0x210>)
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009596:	f043 0202 	orr.w	r2, r3, #2
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800959e:	4b0f      	ldr	r3, [pc, #60]	; (80095dc <HAL_RTC_SetAlarm_IT+0x210>)
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	4a0e      	ldr	r2, [pc, #56]	; (80095dc <HAL_RTC_SetAlarm_IT+0x210>)
 80095a4:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80095a8:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80095aa:	4b0d      	ldr	r3, [pc, #52]	; (80095e0 <HAL_RTC_SetAlarm_IT+0x214>)
 80095ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095b0:	4a0b      	ldr	r2, [pc, #44]	; (80095e0 <HAL_RTC_SetAlarm_IT+0x214>)
 80095b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095b6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095ba:	4b08      	ldr	r3, [pc, #32]	; (80095dc <HAL_RTC_SetAlarm_IT+0x210>)
 80095bc:	22ff      	movs	r2, #255	; 0xff
 80095be:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	371c      	adds	r7, #28
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd90      	pop	{r4, r7, pc}
 80095da:	bf00      	nop
 80095dc:	40002800 	.word	0x40002800
 80095e0:	58000800 	.word	0x58000800

080095e4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d101      	bne.n	80095fc <HAL_RTC_DeactivateAlarm+0x18>
 80095f8:	2302      	movs	r3, #2
 80095fa:	e048      	b.n	800968e <HAL_RTC_DeactivateAlarm+0xaa>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2201      	movs	r2, #1
 8009600:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2202      	movs	r2, #2
 8009608:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800960c:	4b22      	ldr	r3, [pc, #136]	; (8009698 <HAL_RTC_DeactivateAlarm+0xb4>)
 800960e:	22ca      	movs	r2, #202	; 0xca
 8009610:	625a      	str	r2, [r3, #36]	; 0x24
 8009612:	4b21      	ldr	r3, [pc, #132]	; (8009698 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009614:	2253      	movs	r2, #83	; 0x53
 8009616:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800961e:	d115      	bne.n	800964c <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8009620:	4b1d      	ldr	r3, [pc, #116]	; (8009698 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009622:	699b      	ldr	r3, [r3, #24]
 8009624:	4a1c      	ldr	r2, [pc, #112]	; (8009698 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009626:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800962a:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800962c:	4b1a      	ldr	r3, [pc, #104]	; (8009698 <HAL_RTC_DeactivateAlarm+0xb4>)
 800962e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009630:	4a19      	ldr	r2, [pc, #100]	; (8009698 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009632:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009636:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800963c:	f023 0201 	bic.w	r2, r3, #1
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8009644:	4b14      	ldr	r3, [pc, #80]	; (8009698 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009646:	2201      	movs	r2, #1
 8009648:	65da      	str	r2, [r3, #92]	; 0x5c
 800964a:	e014      	b.n	8009676 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800964c:	4b12      	ldr	r3, [pc, #72]	; (8009698 <HAL_RTC_DeactivateAlarm+0xb4>)
 800964e:	699b      	ldr	r3, [r3, #24]
 8009650:	4a11      	ldr	r2, [pc, #68]	; (8009698 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009652:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8009656:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8009658:	4b0f      	ldr	r3, [pc, #60]	; (8009698 <HAL_RTC_DeactivateAlarm+0xb4>)
 800965a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800965c:	4a0e      	ldr	r2, [pc, #56]	; (8009698 <HAL_RTC_DeactivateAlarm+0xb4>)
 800965e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009662:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009668:	f023 0202 	bic.w	r2, r3, #2
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8009670:	4b09      	ldr	r3, [pc, #36]	; (8009698 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009672:	2202      	movs	r2, #2
 8009674:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009676:	4b08      	ldr	r3, [pc, #32]	; (8009698 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009678:	22ff      	movs	r2, #255	; 0xff
 800967a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	370c      	adds	r7, #12
 8009692:	46bd      	mov	sp, r7
 8009694:	bc80      	pop	{r7}
 8009696:	4770      	bx	lr
 8009698:	40002800 	.word	0x40002800

0800969c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80096a4:	4b11      	ldr	r3, [pc, #68]	; (80096ec <HAL_RTC_AlarmIRQHandler+0x50>)
 80096a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ac:	4013      	ands	r3, r2
 80096ae:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f003 0301 	and.w	r3, r3, #1
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d005      	beq.n	80096c6 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80096ba:	4b0c      	ldr	r3, [pc, #48]	; (80096ec <HAL_RTC_AlarmIRQHandler+0x50>)
 80096bc:	2201      	movs	r2, #1
 80096be:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f7f9 f91e 	bl	8002902 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f003 0302 	and.w	r3, r3, #2
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d005      	beq.n	80096dc <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80096d0:	4b06      	ldr	r3, [pc, #24]	; (80096ec <HAL_RTC_AlarmIRQHandler+0x50>)
 80096d2:	2202      	movs	r2, #2
 80096d4:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f94a 	bl	8009970 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2201      	movs	r2, #1
 80096e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80096e4:	bf00      	nop
 80096e6:	3710      	adds	r7, #16
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	40002800 	.word	0x40002800

080096f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80096f8:	4b0f      	ldr	r3, [pc, #60]	; (8009738 <HAL_RTC_WaitForSynchro+0x48>)
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	4a0e      	ldr	r2, [pc, #56]	; (8009738 <HAL_RTC_WaitForSynchro+0x48>)
 80096fe:	f023 0320 	bic.w	r3, r3, #32
 8009702:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8009704:	f7f8 fed2 	bl	80024ac <HAL_GetTick>
 8009708:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800970a:	e009      	b.n	8009720 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800970c:	f7f8 fece 	bl	80024ac <HAL_GetTick>
 8009710:	4602      	mov	r2, r0
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	1ad3      	subs	r3, r2, r3
 8009716:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800971a:	d901      	bls.n	8009720 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800971c:	2303      	movs	r3, #3
 800971e:	e006      	b.n	800972e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009720:	4b05      	ldr	r3, [pc, #20]	; (8009738 <HAL_RTC_WaitForSynchro+0x48>)
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	f003 0320 	and.w	r3, r3, #32
 8009728:	2b00      	cmp	r3, #0
 800972a:	d0ef      	beq.n	800970c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	40002800 	.word	0x40002800

0800973c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009744:	2300      	movs	r3, #0
 8009746:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009748:	4b15      	ldr	r3, [pc, #84]	; (80097a0 <RTC_EnterInitMode+0x64>)
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009750:	2b00      	cmp	r3, #0
 8009752:	d120      	bne.n	8009796 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009754:	4b12      	ldr	r3, [pc, #72]	; (80097a0 <RTC_EnterInitMode+0x64>)
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	4a11      	ldr	r2, [pc, #68]	; (80097a0 <RTC_EnterInitMode+0x64>)
 800975a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800975e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8009760:	f7f8 fea4 	bl	80024ac <HAL_GetTick>
 8009764:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009766:	e00d      	b.n	8009784 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009768:	f7f8 fea0 	bl	80024ac <HAL_GetTick>
 800976c:	4602      	mov	r2, r0
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	1ad3      	subs	r3, r2, r3
 8009772:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009776:	d905      	bls.n	8009784 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009778:	2303      	movs	r3, #3
 800977a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2203      	movs	r2, #3
 8009780:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009784:	4b06      	ldr	r3, [pc, #24]	; (80097a0 <RTC_EnterInitMode+0x64>)
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800978c:	2b00      	cmp	r3, #0
 800978e:	d102      	bne.n	8009796 <RTC_EnterInitMode+0x5a>
 8009790:	7bfb      	ldrb	r3, [r7, #15]
 8009792:	2b03      	cmp	r3, #3
 8009794:	d1e8      	bne.n	8009768 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8009796:	7bfb      	ldrb	r3, [r7, #15]
}
 8009798:	4618      	mov	r0, r3
 800979a:	3710      	adds	r7, #16
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	40002800 	.word	0x40002800

080097a4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097ac:	2300      	movs	r3, #0
 80097ae:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80097b0:	4b1a      	ldr	r3, [pc, #104]	; (800981c <RTC_ExitInitMode+0x78>)
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	4a19      	ldr	r2, [pc, #100]	; (800981c <RTC_ExitInitMode+0x78>)
 80097b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097ba:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80097bc:	4b17      	ldr	r3, [pc, #92]	; (800981c <RTC_ExitInitMode+0x78>)
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	f003 0320 	and.w	r3, r3, #32
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d10c      	bne.n	80097e2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f7ff ff91 	bl	80096f0 <HAL_RTC_WaitForSynchro>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d01e      	beq.n	8009812 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2203      	movs	r2, #3
 80097d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80097dc:	2303      	movs	r3, #3
 80097de:	73fb      	strb	r3, [r7, #15]
 80097e0:	e017      	b.n	8009812 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80097e2:	4b0e      	ldr	r3, [pc, #56]	; (800981c <RTC_ExitInitMode+0x78>)
 80097e4:	699b      	ldr	r3, [r3, #24]
 80097e6:	4a0d      	ldr	r2, [pc, #52]	; (800981c <RTC_ExitInitMode+0x78>)
 80097e8:	f023 0320 	bic.w	r3, r3, #32
 80097ec:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f7ff ff7e 	bl	80096f0 <HAL_RTC_WaitForSynchro>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d005      	beq.n	8009806 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2203      	movs	r2, #3
 80097fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009802:	2303      	movs	r3, #3
 8009804:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009806:	4b05      	ldr	r3, [pc, #20]	; (800981c <RTC_ExitInitMode+0x78>)
 8009808:	699b      	ldr	r3, [r3, #24]
 800980a:	4a04      	ldr	r2, [pc, #16]	; (800981c <RTC_ExitInitMode+0x78>)
 800980c:	f043 0320 	orr.w	r3, r3, #32
 8009810:	6193      	str	r3, [r2, #24]
  }

  return status;
 8009812:	7bfb      	ldrb	r3, [r7, #15]
}
 8009814:	4618      	mov	r0, r3
 8009816:	3710      	adds	r7, #16
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	40002800 	.word	0x40002800

08009820 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
 8009826:	4603      	mov	r3, r0
 8009828:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800982a:	2300      	movs	r3, #0
 800982c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800982e:	79fb      	ldrb	r3, [r7, #7]
 8009830:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8009832:	e005      	b.n	8009840 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	3301      	adds	r3, #1
 8009838:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800983a:	7afb      	ldrb	r3, [r7, #11]
 800983c:	3b0a      	subs	r3, #10
 800983e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8009840:	7afb      	ldrb	r3, [r7, #11]
 8009842:	2b09      	cmp	r3, #9
 8009844:	d8f6      	bhi.n	8009834 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	b2db      	uxtb	r3, r3
 800984a:	011b      	lsls	r3, r3, #4
 800984c:	b2da      	uxtb	r2, r3
 800984e:	7afb      	ldrb	r3, [r7, #11]
 8009850:	4313      	orrs	r3, r2
 8009852:	b2db      	uxtb	r3, r3
}
 8009854:	4618      	mov	r0, r3
 8009856:	3714      	adds	r7, #20
 8009858:	46bd      	mov	sp, r7
 800985a:	bc80      	pop	{r7}
 800985c:	4770      	bx	lr
	...

08009860 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800986e:	2b01      	cmp	r3, #1
 8009870:	d101      	bne.n	8009876 <HAL_RTCEx_EnableBypassShadow+0x16>
 8009872:	2302      	movs	r3, #2
 8009874:	e01f      	b.n	80098b6 <HAL_RTCEx_EnableBypassShadow+0x56>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2201      	movs	r2, #1
 800987a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2202      	movs	r2, #2
 8009882:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009886:	4b0e      	ldr	r3, [pc, #56]	; (80098c0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009888:	22ca      	movs	r2, #202	; 0xca
 800988a:	625a      	str	r2, [r3, #36]	; 0x24
 800988c:	4b0c      	ldr	r3, [pc, #48]	; (80098c0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800988e:	2253      	movs	r2, #83	; 0x53
 8009890:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009892:	4b0b      	ldr	r3, [pc, #44]	; (80098c0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009894:	699b      	ldr	r3, [r3, #24]
 8009896:	4a0a      	ldr	r2, [pc, #40]	; (80098c0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009898:	f043 0320 	orr.w	r3, r3, #32
 800989c:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800989e:	4b08      	ldr	r3, [pc, #32]	; (80098c0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80098a0:	22ff      	movs	r2, #255	; 0xff
 80098a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2201      	movs	r2, #1
 80098a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80098b4:	2300      	movs	r3, #0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	370c      	adds	r7, #12
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bc80      	pop	{r7}
 80098be:	4770      	bx	lr
 80098c0:	40002800 	.word	0x40002800

080098c4 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d101      	bne.n	80098da <HAL_RTCEx_SetSSRU_IT+0x16>
 80098d6:	2302      	movs	r3, #2
 80098d8:	e027      	b.n	800992a <HAL_RTCEx_SetSSRU_IT+0x66>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2201      	movs	r2, #1
 80098de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2202      	movs	r2, #2
 80098e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80098ea:	4b12      	ldr	r3, [pc, #72]	; (8009934 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80098ec:	22ca      	movs	r2, #202	; 0xca
 80098ee:	625a      	str	r2, [r3, #36]	; 0x24
 80098f0:	4b10      	ldr	r3, [pc, #64]	; (8009934 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80098f2:	2253      	movs	r2, #83	; 0x53
 80098f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80098f6:	4b0f      	ldr	r3, [pc, #60]	; (8009934 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80098f8:	699b      	ldr	r3, [r3, #24]
 80098fa:	4a0e      	ldr	r2, [pc, #56]	; (8009934 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80098fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009900:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8009902:	4b0d      	ldr	r3, [pc, #52]	; (8009938 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8009904:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009908:	4a0b      	ldr	r2, [pc, #44]	; (8009938 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800990a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800990e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009912:	4b08      	ldr	r3, [pc, #32]	; (8009934 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009914:	22ff      	movs	r2, #255	; 0xff
 8009916:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	370c      	adds	r7, #12
 800992e:	46bd      	mov	sp, r7
 8009930:	bc80      	pop	{r7}
 8009932:	4770      	bx	lr
 8009934:	40002800 	.word	0x40002800
 8009938:	58000800 	.word	0x58000800

0800993c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8009944:	4b09      	ldr	r3, [pc, #36]	; (800996c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8009946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800994c:	2b00      	cmp	r3, #0
 800994e:	d005      	beq.n	800995c <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8009950:	4b06      	ldr	r3, [pc, #24]	; (800996c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8009952:	2240      	movs	r2, #64	; 0x40
 8009954:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f7f8 ffdd 	bl	8002916 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2201      	movs	r2, #1
 8009960:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8009964:	bf00      	nop
 8009966:	3708      	adds	r7, #8
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	40002800 	.word	0x40002800

08009970 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8009978:	bf00      	nop
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	bc80      	pop	{r7}
 8009980:	4770      	bx	lr
	...

08009984 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009984:	b480      	push	{r7}
 8009986:	b087      	sub	sp, #28
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8009990:	4b07      	ldr	r3, [pc, #28]	; (80099b0 <HAL_RTCEx_BKUPWrite+0x2c>)
 8009992:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	697a      	ldr	r2, [r7, #20]
 800999a:	4413      	add	r3, r2
 800999c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	601a      	str	r2, [r3, #0]
}
 80099a4:	bf00      	nop
 80099a6:	371c      	adds	r7, #28
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bc80      	pop	{r7}
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop
 80099b0:	4000b100 	.word	0x4000b100

080099b4 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80099be:	4b07      	ldr	r3, [pc, #28]	; (80099dc <HAL_RTCEx_BKUPRead+0x28>)
 80099c0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	4413      	add	r3, r2
 80099ca:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3714      	adds	r7, #20
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bc80      	pop	{r7}
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	4000b100 	.word	0x4000b100

080099e0 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80099e8:	4b06      	ldr	r3, [pc, #24]	; (8009a04 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80099f0:	4904      	ldr	r1, [pc, #16]	; (8009a04 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4313      	orrs	r3, r2
 80099f6:	608b      	str	r3, [r1, #8]
}
 80099f8:	bf00      	nop
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bc80      	pop	{r7}
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	58000400 	.word	0x58000400

08009a08 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009a0c:	4b05      	ldr	r3, [pc, #20]	; (8009a24 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8009a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a12:	4a04      	ldr	r2, [pc, #16]	; (8009a24 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8009a14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009a1c:	bf00      	nop
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bc80      	pop	{r7}
 8009a22:	4770      	bx	lr
 8009a24:	58000400 	.word	0x58000400

08009a28 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009a2c:	4b05      	ldr	r3, [pc, #20]	; (8009a44 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8009a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a32:	4a04      	ldr	r2, [pc, #16]	; (8009a44 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8009a34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009a3c:	bf00      	nop
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bc80      	pop	{r7}
 8009a42:	4770      	bx	lr
 8009a44:	58000400 	.word	0x58000400

08009a48 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8009a4c:	4b03      	ldr	r3, [pc, #12]	; (8009a5c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8009a4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a52:	619a      	str	r2, [r3, #24]
}
 8009a54:	bf00      	nop
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bc80      	pop	{r7}
 8009a5a:	4770      	bx	lr
 8009a5c:	58000400 	.word	0x58000400

08009a60 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8009a60:	b480      	push	{r7}
 8009a62:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8009a64:	4b06      	ldr	r3, [pc, #24]	; (8009a80 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8009a66:	695b      	ldr	r3, [r3, #20]
 8009a68:	f003 0302 	and.w	r3, r3, #2
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	d101      	bne.n	8009a74 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8009a70:	2301      	movs	r3, #1
 8009a72:	e000      	b.n	8009a76 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bc80      	pop	{r7}
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	58000400 	.word	0x58000400

08009a84 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8009a84:	b480      	push	{r7}
 8009a86:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8009a88:	4b06      	ldr	r3, [pc, #24]	; (8009aa4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8009a8a:	695b      	ldr	r3, [r3, #20]
 8009a8c:	f003 0304 	and.w	r3, r3, #4
 8009a90:	2b04      	cmp	r3, #4
 8009a92:	d101      	bne.n	8009a98 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8009a94:	2301      	movs	r3, #1
 8009a96:	e000      	b.n	8009a9a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bc80      	pop	{r7}
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	58000400 	.word	0x58000400

08009aa8 <LL_RCC_RF_DisableReset>:
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8009aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ab4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009ab8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009abc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009ac0:	bf00      	nop
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bc80      	pop	{r7}
 8009ac6:	4770      	bx	lr

08009ac8 <LL_RCC_IsRFUnderReset>:
{
 8009ac8:	b480      	push	{r7}
 8009aca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8009acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ad8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009adc:	d101      	bne.n	8009ae2 <LL_RCC_IsRFUnderReset+0x1a>
 8009ade:	2301      	movs	r3, #1
 8009ae0:	e000      	b.n	8009ae4 <LL_RCC_IsRFUnderReset+0x1c>
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bc80      	pop	{r7}
 8009aea:	4770      	bx	lr

08009aec <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8009af4:	4b06      	ldr	r3, [pc, #24]	; (8009b10 <LL_EXTI_EnableIT_32_63+0x24>)
 8009af6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009afa:	4905      	ldr	r1, [pc, #20]	; (8009b10 <LL_EXTI_EnableIT_32_63+0x24>)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4313      	orrs	r3, r2
 8009b00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009b04:	bf00      	nop
 8009b06:	370c      	adds	r7, #12
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bc80      	pop	{r7}
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	58000800 	.word	0x58000800

08009b14 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d103      	bne.n	8009b2a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	73fb      	strb	r3, [r7, #15]
    return status;
 8009b26:	7bfb      	ldrb	r3, [r7, #15]
 8009b28:	e052      	b.n	8009bd0 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	799b      	ldrb	r3, [r3, #6]
 8009b32:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8009b34:	7bbb      	ldrb	r3, [r7, #14]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d002      	beq.n	8009b40 <HAL_SUBGHZ_Init+0x2c>
 8009b3a:	7bbb      	ldrb	r3, [r7, #14]
 8009b3c:	2b03      	cmp	r3, #3
 8009b3e:	d109      	bne.n	8009b54 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f7f8 fb0e 	bl	8002168 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8009b4c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009b50:	f7ff ffcc 	bl	8009aec <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8009b54:	7bbb      	ldrb	r3, [r7, #14]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d126      	bne.n	8009ba8 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2202      	movs	r2, #2
 8009b5e:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8009b60:	f7ff ffa2 	bl	8009aa8 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009b64:	4b1c      	ldr	r3, [pc, #112]	; (8009bd8 <HAL_SUBGHZ_Init+0xc4>)
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	4613      	mov	r3, r2
 8009b6a:	00db      	lsls	r3, r3, #3
 8009b6c:	1a9b      	subs	r3, r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	0cdb      	lsrs	r3, r3, #19
 8009b72:	2264      	movs	r2, #100	; 0x64
 8009b74:	fb02 f303 	mul.w	r3, r2, r3
 8009b78:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d105      	bne.n	8009b8c <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2201      	movs	r2, #1
 8009b88:	609a      	str	r2, [r3, #8]
        break;
 8009b8a:	e007      	b.n	8009b9c <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8009b92:	f7ff ff99 	bl	8009ac8 <LL_RCC_IsRFUnderReset>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d1ee      	bne.n	8009b7a <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009b9c:	f7ff ff34 	bl	8009a08 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8009ba0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009ba4:	f7ff ff1c 	bl	80099e0 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8009ba8:	f7ff ff4e 	bl	8009a48 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8009bac:	7bfb      	ldrb	r3, [r7, #15]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d10a      	bne.n	8009bc8 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f000 faac 	bl	800a114 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	719a      	strb	r2, [r3, #6]

  return status;
 8009bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3710      	adds	r7, #16
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	20000000 	.word	0x20000000

08009bdc <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b086      	sub	sp, #24
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	607a      	str	r2, [r7, #4]
 8009be6:	461a      	mov	r2, r3
 8009be8:	460b      	mov	r3, r1
 8009bea:	817b      	strh	r3, [r7, #10]
 8009bec:	4613      	mov	r3, r2
 8009bee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	799b      	ldrb	r3, [r3, #6]
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d14a      	bne.n	8009c90 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	795b      	ldrb	r3, [r3, #5]
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d101      	bne.n	8009c06 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8009c02:	2302      	movs	r3, #2
 8009c04:	e045      	b.n	8009c92 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2202      	movs	r2, #2
 8009c10:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009c12:	68f8      	ldr	r0, [r7, #12]
 8009c14:	f000 fb4c 	bl	800a2b0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009c18:	f7ff ff06 	bl	8009a28 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8009c1c:	210d      	movs	r1, #13
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f000 fa98 	bl	800a154 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8009c24:	897b      	ldrh	r3, [r7, #10]
 8009c26:	0a1b      	lsrs	r3, r3, #8
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	68f8      	ldr	r0, [r7, #12]
 8009c30:	f000 fa90 	bl	800a154 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8009c34:	897b      	ldrh	r3, [r7, #10]
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	4619      	mov	r1, r3
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	f000 fa8a 	bl	800a154 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009c40:	2300      	movs	r3, #0
 8009c42:	82bb      	strh	r3, [r7, #20]
 8009c44:	e00a      	b.n	8009c5c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009c46:	8abb      	ldrh	r3, [r7, #20]
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	4413      	add	r3, r2
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	4619      	mov	r1, r3
 8009c50:	68f8      	ldr	r0, [r7, #12]
 8009c52:	f000 fa7f 	bl	800a154 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009c56:	8abb      	ldrh	r3, [r7, #20]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	82bb      	strh	r3, [r7, #20]
 8009c5c:	8aba      	ldrh	r2, [r7, #20]
 8009c5e:	893b      	ldrh	r3, [r7, #8]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d3f0      	bcc.n	8009c46 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009c64:	f7ff fed0 	bl	8009a08 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f000 fb45 	bl	800a2f8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d002      	beq.n	8009c7c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	75fb      	strb	r3, [r7, #23]
 8009c7a:	e001      	b.n	8009c80 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2201      	movs	r2, #1
 8009c84:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	715a      	strb	r2, [r3, #5]

    return status;
 8009c8c:	7dfb      	ldrb	r3, [r7, #23]
 8009c8e:	e000      	b.n	8009c92 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8009c90:	2302      	movs	r3, #2
  }
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3718      	adds	r7, #24
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b088      	sub	sp, #32
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	60f8      	str	r0, [r7, #12]
 8009ca2:	607a      	str	r2, [r7, #4]
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	817b      	strh	r3, [r7, #10]
 8009caa:	4613      	mov	r3, r2
 8009cac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	799b      	ldrb	r3, [r3, #6]
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d14a      	bne.n	8009d52 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	795b      	ldrb	r3, [r3, #5]
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d101      	bne.n	8009cc8 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8009cc4:	2302      	movs	r3, #2
 8009cc6:	e045      	b.n	8009d54 <HAL_SUBGHZ_ReadRegisters+0xba>
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f000 faee 	bl	800a2b0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009cd4:	f7ff fea8 	bl	8009a28 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8009cd8:	211d      	movs	r1, #29
 8009cda:	68f8      	ldr	r0, [r7, #12]
 8009cdc:	f000 fa3a 	bl	800a154 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8009ce0:	897b      	ldrh	r3, [r7, #10]
 8009ce2:	0a1b      	lsrs	r3, r3, #8
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	4619      	mov	r1, r3
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f000 fa32 	bl	800a154 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8009cf0:	897b      	ldrh	r3, [r7, #10]
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f000 fa2c 	bl	800a154 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f000 fa28 	bl	800a154 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009d04:	2300      	movs	r3, #0
 8009d06:	82fb      	strh	r3, [r7, #22]
 8009d08:	e009      	b.n	8009d1e <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8009d0a:	69b9      	ldr	r1, [r7, #24]
 8009d0c:	68f8      	ldr	r0, [r7, #12]
 8009d0e:	f000 fa77 	bl	800a200 <SUBGHZSPI_Receive>
      pData++;
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	3301      	adds	r3, #1
 8009d16:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8009d18:	8afb      	ldrh	r3, [r7, #22]
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	82fb      	strh	r3, [r7, #22]
 8009d1e:	8afa      	ldrh	r2, [r7, #22]
 8009d20:	893b      	ldrh	r3, [r7, #8]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d3f1      	bcc.n	8009d0a <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009d26:	f7ff fe6f 	bl	8009a08 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	f000 fae4 	bl	800a2f8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d002      	beq.n	8009d3e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	77fb      	strb	r3, [r7, #31]
 8009d3c:	e001      	b.n	8009d42 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2201      	movs	r2, #1
 8009d46:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	715a      	strb	r2, [r3, #5]

    return status;
 8009d4e:	7ffb      	ldrb	r3, [r7, #31]
 8009d50:	e000      	b.n	8009d54 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8009d52:	2302      	movs	r3, #2
  }
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3720      	adds	r7, #32
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b086      	sub	sp, #24
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	607a      	str	r2, [r7, #4]
 8009d66:	461a      	mov	r2, r3
 8009d68:	460b      	mov	r3, r1
 8009d6a:	72fb      	strb	r3, [r7, #11]
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	799b      	ldrb	r3, [r3, #6]
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d14a      	bne.n	8009e10 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	795b      	ldrb	r3, [r3, #5]
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d101      	bne.n	8009d86 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8009d82:	2302      	movs	r3, #2
 8009d84:	e045      	b.n	8009e12 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2201      	movs	r2, #1
 8009d8a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009d8c:	68f8      	ldr	r0, [r7, #12]
 8009d8e:	f000 fa8f 	bl	800a2b0 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8009d92:	7afb      	ldrb	r3, [r7, #11]
 8009d94:	2b84      	cmp	r3, #132	; 0x84
 8009d96:	d002      	beq.n	8009d9e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8009d98:	7afb      	ldrb	r3, [r7, #11]
 8009d9a:	2b94      	cmp	r3, #148	; 0x94
 8009d9c:	d103      	bne.n	8009da6 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2201      	movs	r2, #1
 8009da2:	711a      	strb	r2, [r3, #4]
 8009da4:	e002      	b.n	8009dac <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2200      	movs	r2, #0
 8009daa:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009dac:	f7ff fe3c 	bl	8009a28 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8009db0:	7afb      	ldrb	r3, [r7, #11]
 8009db2:	4619      	mov	r1, r3
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	f000 f9cd 	bl	800a154 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009dba:	2300      	movs	r3, #0
 8009dbc:	82bb      	strh	r3, [r7, #20]
 8009dbe:	e00a      	b.n	8009dd6 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009dc0:	8abb      	ldrh	r3, [r7, #20]
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	4619      	mov	r1, r3
 8009dca:	68f8      	ldr	r0, [r7, #12]
 8009dcc:	f000 f9c2 	bl	800a154 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009dd0:	8abb      	ldrh	r3, [r7, #20]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	82bb      	strh	r3, [r7, #20]
 8009dd6:	8aba      	ldrh	r2, [r7, #20]
 8009dd8:	893b      	ldrh	r3, [r7, #8]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d3f0      	bcc.n	8009dc0 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009dde:	f7ff fe13 	bl	8009a08 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8009de2:	7afb      	ldrb	r3, [r7, #11]
 8009de4:	2b84      	cmp	r3, #132	; 0x84
 8009de6:	d002      	beq.n	8009dee <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009de8:	68f8      	ldr	r0, [r7, #12]
 8009dea:	f000 fa85 	bl	800a2f8 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d002      	beq.n	8009dfc <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	75fb      	strb	r3, [r7, #23]
 8009dfa:	e001      	b.n	8009e00 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2201      	movs	r2, #1
 8009e04:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	715a      	strb	r2, [r3, #5]

    return status;
 8009e0c:	7dfb      	ldrb	r3, [r7, #23]
 8009e0e:	e000      	b.n	8009e12 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8009e10:	2302      	movs	r3, #2
  }
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3718      	adds	r7, #24
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b088      	sub	sp, #32
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	60f8      	str	r0, [r7, #12]
 8009e22:	607a      	str	r2, [r7, #4]
 8009e24:	461a      	mov	r2, r3
 8009e26:	460b      	mov	r3, r1
 8009e28:	72fb      	strb	r3, [r7, #11]
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	799b      	ldrb	r3, [r3, #6]
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d13d      	bne.n	8009eb8 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	795b      	ldrb	r3, [r3, #5]
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d101      	bne.n	8009e48 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8009e44:	2302      	movs	r3, #2
 8009e46:	e038      	b.n	8009eba <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009e4e:	68f8      	ldr	r0, [r7, #12]
 8009e50:	f000 fa2e 	bl	800a2b0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009e54:	f7ff fde8 	bl	8009a28 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8009e58:	7afb      	ldrb	r3, [r7, #11]
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f000 f979 	bl	800a154 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8009e62:	2100      	movs	r1, #0
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f000 f975 	bl	800a154 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	82fb      	strh	r3, [r7, #22]
 8009e6e:	e009      	b.n	8009e84 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8009e70:	69b9      	ldr	r1, [r7, #24]
 8009e72:	68f8      	ldr	r0, [r7, #12]
 8009e74:	f000 f9c4 	bl	800a200 <SUBGHZSPI_Receive>
      pData++;
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8009e7e:	8afb      	ldrh	r3, [r7, #22]
 8009e80:	3301      	adds	r3, #1
 8009e82:	82fb      	strh	r3, [r7, #22]
 8009e84:	8afa      	ldrh	r2, [r7, #22]
 8009e86:	893b      	ldrh	r3, [r7, #8]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d3f1      	bcc.n	8009e70 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009e8c:	f7ff fdbc 	bl	8009a08 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f000 fa31 	bl	800a2f8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d002      	beq.n	8009ea4 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	77fb      	strb	r3, [r7, #31]
 8009ea2:	e001      	b.n	8009ea8 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	715a      	strb	r2, [r3, #5]

    return status;
 8009eb4:	7ffb      	ldrb	r3, [r7, #31]
 8009eb6:	e000      	b.n	8009eba <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009eb8:	2302      	movs	r3, #2
  }
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3720      	adds	r7, #32
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b086      	sub	sp, #24
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	60f8      	str	r0, [r7, #12]
 8009eca:	607a      	str	r2, [r7, #4]
 8009ecc:	461a      	mov	r2, r3
 8009ece:	460b      	mov	r3, r1
 8009ed0:	72fb      	strb	r3, [r7, #11]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	799b      	ldrb	r3, [r3, #6]
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d13e      	bne.n	8009f5e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	795b      	ldrb	r3, [r3, #5]
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d101      	bne.n	8009eec <HAL_SUBGHZ_WriteBuffer+0x2a>
 8009ee8:	2302      	movs	r3, #2
 8009eea:	e039      	b.n	8009f60 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009ef2:	68f8      	ldr	r0, [r7, #12]
 8009ef4:	f000 f9dc 	bl	800a2b0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009ef8:	f7ff fd96 	bl	8009a28 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8009efc:	210e      	movs	r1, #14
 8009efe:	68f8      	ldr	r0, [r7, #12]
 8009f00:	f000 f928 	bl	800a154 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8009f04:	7afb      	ldrb	r3, [r7, #11]
 8009f06:	4619      	mov	r1, r3
 8009f08:	68f8      	ldr	r0, [r7, #12]
 8009f0a:	f000 f923 	bl	800a154 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009f0e:	2300      	movs	r3, #0
 8009f10:	82bb      	strh	r3, [r7, #20]
 8009f12:	e00a      	b.n	8009f2a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009f14:	8abb      	ldrh	r3, [r7, #20]
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	4413      	add	r3, r2
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	68f8      	ldr	r0, [r7, #12]
 8009f20:	f000 f918 	bl	800a154 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009f24:	8abb      	ldrh	r3, [r7, #20]
 8009f26:	3301      	adds	r3, #1
 8009f28:	82bb      	strh	r3, [r7, #20]
 8009f2a:	8aba      	ldrh	r2, [r7, #20]
 8009f2c:	893b      	ldrh	r3, [r7, #8]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d3f0      	bcc.n	8009f14 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009f32:	f7ff fd69 	bl	8009a08 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009f36:	68f8      	ldr	r0, [r7, #12]
 8009f38:	f000 f9de 	bl	800a2f8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d002      	beq.n	8009f4a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8009f44:	2301      	movs	r3, #1
 8009f46:	75fb      	strb	r3, [r7, #23]
 8009f48:	e001      	b.n	8009f4e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2201      	movs	r2, #1
 8009f52:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2200      	movs	r2, #0
 8009f58:	715a      	strb	r2, [r3, #5]

    return status;
 8009f5a:	7dfb      	ldrb	r3, [r7, #23]
 8009f5c:	e000      	b.n	8009f60 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8009f5e:	2302      	movs	r3, #2
  }
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3718      	adds	r7, #24
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b088      	sub	sp, #32
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	607a      	str	r2, [r7, #4]
 8009f72:	461a      	mov	r2, r3
 8009f74:	460b      	mov	r3, r1
 8009f76:	72fb      	strb	r3, [r7, #11]
 8009f78:	4613      	mov	r3, r2
 8009f7a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	799b      	ldrb	r3, [r3, #6]
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d141      	bne.n	800a00e <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	795b      	ldrb	r3, [r3, #5]
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d101      	bne.n	8009f96 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8009f92:	2302      	movs	r3, #2
 8009f94:	e03c      	b.n	800a010 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009f9c:	68f8      	ldr	r0, [r7, #12]
 8009f9e:	f000 f987 	bl	800a2b0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009fa2:	f7ff fd41 	bl	8009a28 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8009fa6:	211e      	movs	r1, #30
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f000 f8d3 	bl	800a154 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8009fae:	7afb      	ldrb	r3, [r7, #11]
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	68f8      	ldr	r0, [r7, #12]
 8009fb4:	f000 f8ce 	bl	800a154 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8009fb8:	2100      	movs	r1, #0
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f000 f8ca 	bl	800a154 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	82fb      	strh	r3, [r7, #22]
 8009fc4:	e009      	b.n	8009fda <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8009fc6:	69b9      	ldr	r1, [r7, #24]
 8009fc8:	68f8      	ldr	r0, [r7, #12]
 8009fca:	f000 f919 	bl	800a200 <SUBGHZSPI_Receive>
      pData++;
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8009fd4:	8afb      	ldrh	r3, [r7, #22]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	82fb      	strh	r3, [r7, #22]
 8009fda:	8afa      	ldrh	r2, [r7, #22]
 8009fdc:	893b      	ldrh	r3, [r7, #8]
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d3f1      	bcc.n	8009fc6 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009fe2:	f7ff fd11 	bl	8009a08 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	f000 f986 	bl	800a2f8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d002      	beq.n	8009ffa <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	77fb      	strb	r3, [r7, #31]
 8009ff8:	e001      	b.n	8009ffe <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2201      	movs	r2, #1
 800a002:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2200      	movs	r2, #0
 800a008:	715a      	strb	r2, [r3, #5]

    return status;
 800a00a:	7ffb      	ldrb	r3, [r7, #31]
 800a00c:	e000      	b.n	800a010 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800a00e:	2302      	movs	r3, #2
  }
}
 800a010:	4618      	mov	r0, r3
 800a012:	3720      	adds	r7, #32
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800a020:	2300      	movs	r3, #0
 800a022:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800a024:	f107 020c 	add.w	r2, r7, #12
 800a028:	2302      	movs	r3, #2
 800a02a:	2112      	movs	r1, #18
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f7ff fef4 	bl	8009e1a <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800a032:	7b3b      	ldrb	r3, [r7, #12]
 800a034:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800a036:	89fb      	ldrh	r3, [r7, #14]
 800a038:	021b      	lsls	r3, r3, #8
 800a03a:	b21a      	sxth	r2, r3
 800a03c:	7b7b      	ldrb	r3, [r7, #13]
 800a03e:	b21b      	sxth	r3, r3
 800a040:	4313      	orrs	r3, r2
 800a042:	b21b      	sxth	r3, r3
 800a044:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800a046:	f107 020c 	add.w	r2, r7, #12
 800a04a:	2302      	movs	r3, #2
 800a04c:	2102      	movs	r1, #2
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f7ff fe84 	bl	8009d5c <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800a054:	89fb      	ldrh	r3, [r7, #14]
 800a056:	f003 0301 	and.w	r3, r3, #1
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d002      	beq.n	800a064 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f014 faca 	bl	801e5f8 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800a064:	89fb      	ldrh	r3, [r7, #14]
 800a066:	f003 0302 	and.w	r3, r3, #2
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d002      	beq.n	800a074 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f014 fad0 	bl	801e614 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800a074:	89fb      	ldrh	r3, [r7, #14]
 800a076:	f003 0304 	and.w	r3, r3, #4
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d002      	beq.n	800a084 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f014 fb20 	bl	801e6c4 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800a084:	89fb      	ldrh	r3, [r7, #14]
 800a086:	f003 0308 	and.w	r3, r3, #8
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d002      	beq.n	800a094 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f014 fb26 	bl	801e6e0 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800a094:	89fb      	ldrh	r3, [r7, #14]
 800a096:	f003 0310 	and.w	r3, r3, #16
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d002      	beq.n	800a0a4 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f014 fb2c 	bl	801e6fc <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800a0a4:	89fb      	ldrh	r3, [r7, #14]
 800a0a6:	f003 0320 	and.w	r3, r3, #32
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d002      	beq.n	800a0b4 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f014 fafa 	bl	801e6a8 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800a0b4:	89fb      	ldrh	r3, [r7, #14]
 800a0b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d002      	beq.n	800a0c4 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f014 fab6 	bl	801e630 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800a0c4:	89fb      	ldrh	r3, [r7, #14]
 800a0c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d00d      	beq.n	800a0ea <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800a0ce:	89fb      	ldrh	r3, [r7, #14]
 800a0d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d004      	beq.n	800a0e2 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800a0d8:	2101      	movs	r1, #1
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f014 fab6 	bl	801e64c <HAL_SUBGHZ_CADStatusCallback>
 800a0e0:	e003      	b.n	800a0ea <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800a0e2:	2100      	movs	r1, #0
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f014 fab1 	bl	801e64c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800a0ea:	89fb      	ldrh	r3, [r7, #14]
 800a0ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d002      	beq.n	800a0fa <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f014 fac7 	bl	801e688 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800a0fa:	89fb      	ldrh	r3, [r7, #14]
 800a0fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a100:	2b00      	cmp	r3, #0
 800a102:	d002      	beq.n	800a10a <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f014 fb07 	bl	801e718 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800a10a:	bf00      	nop
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
	...

0800a114 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800a11c:	4b0c      	ldr	r3, [pc, #48]	; (800a150 <SUBGHZSPI_Init+0x3c>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a0b      	ldr	r2, [pc, #44]	; (800a150 <SUBGHZSPI_Init+0x3c>)
 800a122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a126:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800a128:	4a09      	ldr	r2, [pc, #36]	; (800a150 <SUBGHZSPI_Init+0x3c>)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800a130:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800a132:	4b07      	ldr	r3, [pc, #28]	; (800a150 <SUBGHZSPI_Init+0x3c>)
 800a134:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800a138:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800a13a:	4b05      	ldr	r3, [pc, #20]	; (800a150 <SUBGHZSPI_Init+0x3c>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a04      	ldr	r2, [pc, #16]	; (800a150 <SUBGHZSPI_Init+0x3c>)
 800a140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a144:	6013      	str	r3, [r2, #0]
}
 800a146:	bf00      	nop
 800a148:	370c      	adds	r7, #12
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bc80      	pop	{r7}
 800a14e:	4770      	bx	lr
 800a150:	58010000 	.word	0x58010000

0800a154 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800a154:	b480      	push	{r7}
 800a156:	b087      	sub	sp, #28
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	460b      	mov	r3, r1
 800a15e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800a160:	2300      	movs	r3, #0
 800a162:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a164:	4b23      	ldr	r3, [pc, #140]	; (800a1f4 <SUBGHZSPI_Transmit+0xa0>)
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	4613      	mov	r3, r2
 800a16a:	00db      	lsls	r3, r3, #3
 800a16c:	1a9b      	subs	r3, r3, r2
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	0cdb      	lsrs	r3, r3, #19
 800a172:	2264      	movs	r2, #100	; 0x64
 800a174:	fb02 f303 	mul.w	r3, r2, r3
 800a178:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d105      	bne.n	800a18c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2201      	movs	r2, #1
 800a188:	609a      	str	r2, [r3, #8]
      break;
 800a18a:	e008      	b.n	800a19e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	3b01      	subs	r3, #1
 800a190:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800a192:	4b19      	ldr	r3, [pc, #100]	; (800a1f8 <SUBGHZSPI_Transmit+0xa4>)
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	f003 0302 	and.w	r3, r3, #2
 800a19a:	2b02      	cmp	r3, #2
 800a19c:	d1ed      	bne.n	800a17a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800a19e:	4b17      	ldr	r3, [pc, #92]	; (800a1fc <SUBGHZSPI_Transmit+0xa8>)
 800a1a0:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	78fa      	ldrb	r2, [r7, #3]
 800a1a6:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a1a8:	4b12      	ldr	r3, [pc, #72]	; (800a1f4 <SUBGHZSPI_Transmit+0xa0>)
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	4613      	mov	r3, r2
 800a1ae:	00db      	lsls	r3, r3, #3
 800a1b0:	1a9b      	subs	r3, r3, r2
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	0cdb      	lsrs	r3, r3, #19
 800a1b6:	2264      	movs	r2, #100	; 0x64
 800a1b8:	fb02 f303 	mul.w	r3, r2, r3
 800a1bc:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d105      	bne.n	800a1d0 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	609a      	str	r2, [r3, #8]
      break;
 800a1ce:	e008      	b.n	800a1e2 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800a1d6:	4b08      	ldr	r3, [pc, #32]	; (800a1f8 <SUBGHZSPI_Transmit+0xa4>)
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	f003 0301 	and.w	r3, r3, #1
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d1ed      	bne.n	800a1be <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800a1e2:	4b05      	ldr	r3, [pc, #20]	; (800a1f8 <SUBGHZSPI_Transmit+0xa4>)
 800a1e4:	68db      	ldr	r3, [r3, #12]

  return status;
 800a1e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	371c      	adds	r7, #28
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bc80      	pop	{r7}
 800a1f0:	4770      	bx	lr
 800a1f2:	bf00      	nop
 800a1f4:	20000000 	.word	0x20000000
 800a1f8:	58010000 	.word	0x58010000
 800a1fc:	5801000c 	.word	0x5801000c

0800a200 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800a200:	b480      	push	{r7}
 800a202:	b087      	sub	sp, #28
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a20a:	2300      	movs	r3, #0
 800a20c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a20e:	4b25      	ldr	r3, [pc, #148]	; (800a2a4 <SUBGHZSPI_Receive+0xa4>)
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	4613      	mov	r3, r2
 800a214:	00db      	lsls	r3, r3, #3
 800a216:	1a9b      	subs	r3, r3, r2
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	0cdb      	lsrs	r3, r3, #19
 800a21c:	2264      	movs	r2, #100	; 0x64
 800a21e:	fb02 f303 	mul.w	r3, r2, r3
 800a222:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d105      	bne.n	800a236 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2201      	movs	r2, #1
 800a232:	609a      	str	r2, [r3, #8]
      break;
 800a234:	e008      	b.n	800a248 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	3b01      	subs	r3, #1
 800a23a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800a23c:	4b1a      	ldr	r3, [pc, #104]	; (800a2a8 <SUBGHZSPI_Receive+0xa8>)
 800a23e:	689b      	ldr	r3, [r3, #8]
 800a240:	f003 0302 	and.w	r3, r3, #2
 800a244:	2b02      	cmp	r3, #2
 800a246:	d1ed      	bne.n	800a224 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800a248:	4b18      	ldr	r3, [pc, #96]	; (800a2ac <SUBGHZSPI_Receive+0xac>)
 800a24a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	22ff      	movs	r2, #255	; 0xff
 800a250:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a252:	4b14      	ldr	r3, [pc, #80]	; (800a2a4 <SUBGHZSPI_Receive+0xa4>)
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	4613      	mov	r3, r2
 800a258:	00db      	lsls	r3, r3, #3
 800a25a:	1a9b      	subs	r3, r3, r2
 800a25c:	009b      	lsls	r3, r3, #2
 800a25e:	0cdb      	lsrs	r3, r3, #19
 800a260:	2264      	movs	r2, #100	; 0x64
 800a262:	fb02 f303 	mul.w	r3, r2, r3
 800a266:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d105      	bne.n	800a27a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2201      	movs	r2, #1
 800a276:	609a      	str	r2, [r3, #8]
      break;
 800a278:	e008      	b.n	800a28c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	3b01      	subs	r3, #1
 800a27e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800a280:	4b09      	ldr	r3, [pc, #36]	; (800a2a8 <SUBGHZSPI_Receive+0xa8>)
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	f003 0301 	and.w	r3, r3, #1
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d1ed      	bne.n	800a268 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800a28c:	4b06      	ldr	r3, [pc, #24]	; (800a2a8 <SUBGHZSPI_Receive+0xa8>)
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	b2da      	uxtb	r2, r3
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	701a      	strb	r2, [r3, #0]

  return status;
 800a296:	7dfb      	ldrb	r3, [r7, #23]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	371c      	adds	r7, #28
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bc80      	pop	{r7}
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop
 800a2a4:	20000000 	.word	0x20000000
 800a2a8:	58010000 	.word	0x58010000
 800a2ac:	5801000c 	.word	0x5801000c

0800a2b0 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	791b      	ldrb	r3, [r3, #4]
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d111      	bne.n	800a2e4 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800a2c0:	4b0c      	ldr	r3, [pc, #48]	; (800a2f4 <SUBGHZ_CheckDeviceReady+0x44>)
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	005b      	lsls	r3, r3, #1
 800a2c8:	4413      	add	r3, r2
 800a2ca:	00db      	lsls	r3, r3, #3
 800a2cc:	0c1b      	lsrs	r3, r3, #16
 800a2ce:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a2d0:	f7ff fbaa 	bl	8009a28 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d1f9      	bne.n	800a2d4 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a2e0:	f7ff fb92 	bl	8009a08 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 f807 	bl	800a2f8 <SUBGHZ_WaitOnBusy>
 800a2ea:	4603      	mov	r3, r0
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	20000000 	.word	0x20000000

0800a2f8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b086      	sub	sp, #24
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800a300:	2300      	movs	r3, #0
 800a302:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800a304:	4b12      	ldr	r3, [pc, #72]	; (800a350 <SUBGHZ_WaitOnBusy+0x58>)
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	4613      	mov	r3, r2
 800a30a:	005b      	lsls	r3, r3, #1
 800a30c:	4413      	add	r3, r2
 800a30e:	00db      	lsls	r3, r3, #3
 800a310:	0d1b      	lsrs	r3, r3, #20
 800a312:	2264      	movs	r2, #100	; 0x64
 800a314:	fb02 f303 	mul.w	r3, r2, r3
 800a318:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800a31a:	f7ff fbb3 	bl	8009a84 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800a31e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d105      	bne.n	800a332 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2202      	movs	r2, #2
 800a32e:	609a      	str	r2, [r3, #8]
      break;
 800a330:	e009      	b.n	800a346 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	3b01      	subs	r3, #1
 800a336:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800a338:	f7ff fb92 	bl	8009a60 <LL_PWR_IsActiveFlag_RFBUSYS>
 800a33c:	4602      	mov	r2, r0
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	4013      	ands	r3, r2
 800a342:	2b01      	cmp	r3, #1
 800a344:	d0e9      	beq.n	800a31a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800a346:	7dfb      	ldrb	r3, [r7, #23]
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3718      	adds	r7, #24
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	20000000 	.word	0x20000000

0800a354 <LL_RCC_GetUSARTClockSource>:
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800a35c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a360:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	401a      	ands	r2, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	041b      	lsls	r3, r3, #16
 800a36c:	4313      	orrs	r3, r2
}
 800a36e:	4618      	mov	r0, r3
 800a370:	370c      	adds	r7, #12
 800a372:	46bd      	mov	sp, r7
 800a374:	bc80      	pop	{r7}
 800a376:	4770      	bx	lr

0800a378 <LL_RCC_GetLPUARTClockSource>:
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800a380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a384:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4013      	ands	r3, r2
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	370c      	adds	r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	bc80      	pop	{r7}
 800a394:	4770      	bx	lr

0800a396 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b082      	sub	sp, #8
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d101      	bne.n	800a3a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e042      	b.n	800a42e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d106      	bne.n	800a3c0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f7f8 fc10 	bl	8002be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2224      	movs	r2, #36	; 0x24
 800a3c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f022 0201 	bic.w	r2, r2, #1
 800a3d6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 fc3b 	bl	800ac54 <UART_SetConfig>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d101      	bne.n	800a3e8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	e022      	b.n	800a42e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d002      	beq.n	800a3f6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 fea3 	bl	800b13c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	685a      	ldr	r2, [r3, #4]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a404:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	689a      	ldr	r2, [r3, #8]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a414:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f042 0201 	orr.w	r2, r2, #1
 800a424:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 ff29 	bl	800b27e <UART_CheckIdleState>
 800a42c:	4603      	mov	r3, r0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3708      	adds	r7, #8
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
	...

0800a438 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b08a      	sub	sp, #40	; 0x28
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	4613      	mov	r3, r2
 800a444:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a44c:	2b20      	cmp	r3, #32
 800a44e:	d137      	bne.n	800a4c0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d002      	beq.n	800a45c <HAL_UART_Receive_IT+0x24>
 800a456:	88fb      	ldrh	r3, [r7, #6]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d101      	bne.n	800a460 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a45c:	2301      	movs	r3, #1
 800a45e:	e030      	b.n	800a4c2 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2200      	movs	r2, #0
 800a464:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a18      	ldr	r2, [pc, #96]	; (800a4cc <HAL_UART_Receive_IT+0x94>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d01f      	beq.n	800a4b0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d018      	beq.n	800a4b0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	e853 3f00 	ldrex	r3, [r3]
 800a48a:	613b      	str	r3, [r7, #16]
   return(result);
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a492:	627b      	str	r3, [r7, #36]	; 0x24
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	461a      	mov	r2, r3
 800a49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49c:	623b      	str	r3, [r7, #32]
 800a49e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a0:	69f9      	ldr	r1, [r7, #28]
 800a4a2:	6a3a      	ldr	r2, [r7, #32]
 800a4a4:	e841 2300 	strex	r3, r2, [r1]
 800a4a8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d1e6      	bne.n	800a47e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a4b0:	88fb      	ldrh	r3, [r7, #6]
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	68b9      	ldr	r1, [r7, #8]
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	f000 fff8 	bl	800b4ac <UART_Start_Receive_IT>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	e000      	b.n	800a4c2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a4c0:	2302      	movs	r3, #2
  }
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3728      	adds	r7, #40	; 0x28
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	40008000 	.word	0x40008000

0800a4d0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b08a      	sub	sp, #40	; 0x28
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	4613      	mov	r3, r2
 800a4dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4e4:	2b20      	cmp	r3, #32
 800a4e6:	d167      	bne.n	800a5b8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d002      	beq.n	800a4f4 <HAL_UART_Transmit_DMA+0x24>
 800a4ee:	88fb      	ldrh	r3, [r7, #6]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d101      	bne.n	800a4f8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e060      	b.n	800a5ba <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	68ba      	ldr	r2, [r7, #8]
 800a4fc:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	88fa      	ldrh	r2, [r7, #6]
 800a502:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	88fa      	ldrh	r2, [r7, #6]
 800a50a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2200      	movs	r2, #0
 800a512:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2221      	movs	r2, #33	; 0x21
 800a51a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a522:	2b00      	cmp	r3, #0
 800a524:	d028      	beq.n	800a578 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a52a:	4a26      	ldr	r2, [pc, #152]	; (800a5c4 <HAL_UART_Transmit_DMA+0xf4>)
 800a52c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a532:	4a25      	ldr	r2, [pc, #148]	; (800a5c8 <HAL_UART_Transmit_DMA+0xf8>)
 800a534:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a53a:	4a24      	ldr	r2, [pc, #144]	; (800a5cc <HAL_UART_Transmit_DMA+0xfc>)
 800a53c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a542:	2200      	movs	r2, #0
 800a544:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a54e:	4619      	mov	r1, r3
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	3328      	adds	r3, #40	; 0x28
 800a556:	461a      	mov	r2, r3
 800a558:	88fb      	ldrh	r3, [r7, #6]
 800a55a:	f7fb febd 	bl	80062d8 <HAL_DMA_Start_IT>
 800a55e:	4603      	mov	r3, r0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d009      	beq.n	800a578 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2210      	movs	r2, #16
 800a568:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2220      	movs	r2, #32
 800a570:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800a574:	2301      	movs	r3, #1
 800a576:	e020      	b.n	800a5ba <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2240      	movs	r2, #64	; 0x40
 800a57e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	3308      	adds	r3, #8
 800a586:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	e853 3f00 	ldrex	r3, [r3]
 800a58e:	613b      	str	r3, [r7, #16]
   return(result);
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a596:	627b      	str	r3, [r7, #36]	; 0x24
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	3308      	adds	r3, #8
 800a59e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5a0:	623a      	str	r2, [r7, #32]
 800a5a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a4:	69f9      	ldr	r1, [r7, #28]
 800a5a6:	6a3a      	ldr	r2, [r7, #32]
 800a5a8:	e841 2300 	strex	r3, r2, [r1]
 800a5ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d1e5      	bne.n	800a580 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	e000      	b.n	800a5ba <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a5b8:	2302      	movs	r3, #2
  }
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3728      	adds	r7, #40	; 0x28
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	0800b837 	.word	0x0800b837
 800a5c8:	0800b8d1 	.word	0x0800b8d1
 800a5cc:	0800b8ed 	.word	0x0800b8ed

0800a5d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b0ba      	sub	sp, #232	; 0xe8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	69db      	ldr	r3, [r3, #28]
 800a5de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a5f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a5fa:	f640 030f 	movw	r3, #2063	; 0x80f
 800a5fe:	4013      	ands	r3, r2
 800a600:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a604:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d11b      	bne.n	800a644 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a60c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a610:	f003 0320 	and.w	r3, r3, #32
 800a614:	2b00      	cmp	r3, #0
 800a616:	d015      	beq.n	800a644 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a61c:	f003 0320 	and.w	r3, r3, #32
 800a620:	2b00      	cmp	r3, #0
 800a622:	d105      	bne.n	800a630 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a624:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d009      	beq.n	800a644 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a634:	2b00      	cmp	r3, #0
 800a636:	f000 82e3 	beq.w	800ac00 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	4798      	blx	r3
      }
      return;
 800a642:	e2dd      	b.n	800ac00 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a644:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a648:	2b00      	cmp	r3, #0
 800a64a:	f000 8123 	beq.w	800a894 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a64e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a652:	4b8d      	ldr	r3, [pc, #564]	; (800a888 <HAL_UART_IRQHandler+0x2b8>)
 800a654:	4013      	ands	r3, r2
 800a656:	2b00      	cmp	r3, #0
 800a658:	d106      	bne.n	800a668 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a65a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a65e:	4b8b      	ldr	r3, [pc, #556]	; (800a88c <HAL_UART_IRQHandler+0x2bc>)
 800a660:	4013      	ands	r3, r2
 800a662:	2b00      	cmp	r3, #0
 800a664:	f000 8116 	beq.w	800a894 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a66c:	f003 0301 	and.w	r3, r3, #1
 800a670:	2b00      	cmp	r3, #0
 800a672:	d011      	beq.n	800a698 <HAL_UART_IRQHandler+0xc8>
 800a674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d00b      	beq.n	800a698 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	2201      	movs	r2, #1
 800a686:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a68e:	f043 0201 	orr.w	r2, r3, #1
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a69c:	f003 0302 	and.w	r3, r3, #2
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d011      	beq.n	800a6c8 <HAL_UART_IRQHandler+0xf8>
 800a6a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6a8:	f003 0301 	and.w	r3, r3, #1
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d00b      	beq.n	800a6c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	2202      	movs	r2, #2
 800a6b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6be:	f043 0204 	orr.w	r2, r3, #4
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6cc:	f003 0304 	and.w	r3, r3, #4
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d011      	beq.n	800a6f8 <HAL_UART_IRQHandler+0x128>
 800a6d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6d8:	f003 0301 	and.w	r3, r3, #1
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d00b      	beq.n	800a6f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2204      	movs	r2, #4
 800a6e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6ee:	f043 0202 	orr.w	r2, r3, #2
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a6f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6fc:	f003 0308 	and.w	r3, r3, #8
 800a700:	2b00      	cmp	r3, #0
 800a702:	d017      	beq.n	800a734 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a708:	f003 0320 	and.w	r3, r3, #32
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d105      	bne.n	800a71c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a710:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a714:	4b5c      	ldr	r3, [pc, #368]	; (800a888 <HAL_UART_IRQHandler+0x2b8>)
 800a716:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d00b      	beq.n	800a734 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2208      	movs	r2, #8
 800a722:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a72a:	f043 0208 	orr.w	r2, r3, #8
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d012      	beq.n	800a766 <HAL_UART_IRQHandler+0x196>
 800a740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a744:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d00c      	beq.n	800a766 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a754:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a75c:	f043 0220 	orr.w	r2, r3, #32
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	f000 8249 	beq.w	800ac04 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a776:	f003 0320 	and.w	r3, r3, #32
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d013      	beq.n	800a7a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a77e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a782:	f003 0320 	and.w	r3, r3, #32
 800a786:	2b00      	cmp	r3, #0
 800a788:	d105      	bne.n	800a796 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a78a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a78e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a792:	2b00      	cmp	r3, #0
 800a794:	d007      	beq.n	800a7a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d003      	beq.n	800a7a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ba:	2b40      	cmp	r3, #64	; 0x40
 800a7bc:	d005      	beq.n	800a7ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a7be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d054      	beq.n	800a874 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 ffce 	bl	800b76c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7da:	2b40      	cmp	r3, #64	; 0x40
 800a7dc:	d146      	bne.n	800a86c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	3308      	adds	r3, #8
 800a7e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a7ec:	e853 3f00 	ldrex	r3, [r3]
 800a7f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a7f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a7f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	3308      	adds	r3, #8
 800a806:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a80a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a80e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a812:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a816:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a81a:	e841 2300 	strex	r3, r2, [r1]
 800a81e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a822:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1d9      	bne.n	800a7de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a830:	2b00      	cmp	r3, #0
 800a832:	d017      	beq.n	800a864 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a83a:	4a15      	ldr	r2, [pc, #84]	; (800a890 <HAL_UART_IRQHandler+0x2c0>)
 800a83c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a844:	4618      	mov	r0, r3
 800a846:	f7fb fe23 	bl	8006490 <HAL_DMA_Abort_IT>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d019      	beq.n	800a884 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800a85e:	4610      	mov	r0, r2
 800a860:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a862:	e00f      	b.n	800a884 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 f9e0 	bl	800ac2a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a86a:	e00b      	b.n	800a884 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 f9dc 	bl	800ac2a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a872:	e007      	b.n	800a884 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 f9d8 	bl	800ac2a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2200      	movs	r2, #0
 800a87e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800a882:	e1bf      	b.n	800ac04 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a884:	bf00      	nop
    return;
 800a886:	e1bd      	b.n	800ac04 <HAL_UART_IRQHandler+0x634>
 800a888:	10000001 	.word	0x10000001
 800a88c:	04000120 	.word	0x04000120
 800a890:	0800b96d 	.word	0x0800b96d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a898:	2b01      	cmp	r3, #1
 800a89a:	f040 8153 	bne.w	800ab44 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a89e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8a2:	f003 0310 	and.w	r3, r3, #16
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	f000 814c 	beq.w	800ab44 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a8ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8b0:	f003 0310 	and.w	r3, r3, #16
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	f000 8145 	beq.w	800ab44 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	2210      	movs	r2, #16
 800a8c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	689b      	ldr	r3, [r3, #8]
 800a8c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8cc:	2b40      	cmp	r3, #64	; 0x40
 800a8ce:	f040 80bb 	bne.w	800aa48 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a8e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	f000 818f 	beq.w	800ac08 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a8f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	f080 8187 	bcs.w	800ac08 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a900:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f003 0320 	and.w	r3, r3, #32
 800a912:	2b00      	cmp	r3, #0
 800a914:	f040 8087 	bne.w	800aa26 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a920:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a924:	e853 3f00 	ldrex	r3, [r3]
 800a928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a92c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a934:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	461a      	mov	r2, r3
 800a93e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a942:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a946:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a94a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a94e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a952:	e841 2300 	strex	r3, r2, [r1]
 800a956:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a95a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d1da      	bne.n	800a918 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	3308      	adds	r3, #8
 800a968:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a96a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a96c:	e853 3f00 	ldrex	r3, [r3]
 800a970:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a972:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a974:	f023 0301 	bic.w	r3, r3, #1
 800a978:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	3308      	adds	r3, #8
 800a982:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a986:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a98a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a98c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a98e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a992:	e841 2300 	strex	r3, r2, [r1]
 800a996:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a998:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d1e1      	bne.n	800a962 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	3308      	adds	r3, #8
 800a9a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9a8:	e853 3f00 	ldrex	r3, [r3]
 800a9ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a9ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	3308      	adds	r3, #8
 800a9be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a9c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a9c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a9c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a9ca:	e841 2300 	strex	r3, r2, [r1]
 800a9ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a9d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d1e3      	bne.n	800a99e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2220      	movs	r2, #32
 800a9da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9ec:	e853 3f00 	ldrex	r3, [r3]
 800a9f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a9f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9f4:	f023 0310 	bic.w	r3, r3, #16
 800a9f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	461a      	mov	r2, r3
 800aa02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa06:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa08:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aa0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa0e:	e841 2300 	strex	r3, r2, [r1]
 800aa12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aa14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d1e4      	bne.n	800a9e4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7fb fcd7 	bl	80063d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2202      	movs	r2, #2
 800aa2a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	1ad3      	subs	r3, r2, r3
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	4619      	mov	r1, r3
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 f8fb 	bl	800ac3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aa46:	e0df      	b.n	800ac08 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	1ad3      	subs	r3, r2, r3
 800aa58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f000 80d1 	beq.w	800ac0c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800aa6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	f000 80cc 	beq.w	800ac0c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7c:	e853 3f00 	ldrex	r3, [r3]
 800aa80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aa82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	461a      	mov	r2, r3
 800aa92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aa96:	647b      	str	r3, [r7, #68]	; 0x44
 800aa98:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aa9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa9e:	e841 2300 	strex	r3, r2, [r1]
 800aaa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aaa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d1e4      	bne.n	800aa74 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	3308      	adds	r3, #8
 800aab0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab4:	e853 3f00 	ldrex	r3, [r3]
 800aab8:	623b      	str	r3, [r7, #32]
   return(result);
 800aaba:	6a3b      	ldr	r3, [r7, #32]
 800aabc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aac0:	f023 0301 	bic.w	r3, r3, #1
 800aac4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	3308      	adds	r3, #8
 800aace:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aad2:	633a      	str	r2, [r7, #48]	; 0x30
 800aad4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aada:	e841 2300 	strex	r3, r2, [r1]
 800aade:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d1e1      	bne.n	800aaaa <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2220      	movs	r2, #32
 800aaea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	e853 3f00 	ldrex	r3, [r3]
 800ab06:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f023 0310 	bic.w	r3, r3, #16
 800ab0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	461a      	mov	r2, r3
 800ab18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ab1c:	61fb      	str	r3, [r7, #28]
 800ab1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab20:	69b9      	ldr	r1, [r7, #24]
 800ab22:	69fa      	ldr	r2, [r7, #28]
 800ab24:	e841 2300 	strex	r3, r2, [r1]
 800ab28:	617b      	str	r3, [r7, #20]
   return(result);
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d1e4      	bne.n	800aafa <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2202      	movs	r2, #2
 800ab34:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ab36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 f87d 	bl	800ac3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ab42:	e063      	b.n	800ac0c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ab44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d00e      	beq.n	800ab6e <HAL_UART_IRQHandler+0x59e>
 800ab50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d008      	beq.n	800ab6e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ab64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f001 fc5e 	bl	800c428 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab6c:	e051      	b.n	800ac12 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ab6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d014      	beq.n	800aba4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ab7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d105      	bne.n	800ab92 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ab86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d008      	beq.n	800aba4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d03a      	beq.n	800ac10 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	4798      	blx	r3
    }
    return;
 800aba2:	e035      	b.n	800ac10 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abac:	2b00      	cmp	r3, #0
 800abae:	d009      	beq.n	800abc4 <HAL_UART_IRQHandler+0x5f4>
 800abb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d003      	beq.n	800abc4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f000 feeb 	bl	800b998 <UART_EndTransmit_IT>
    return;
 800abc2:	e026      	b.n	800ac12 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800abc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d009      	beq.n	800abe4 <HAL_UART_IRQHandler+0x614>
 800abd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d003      	beq.n	800abe4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f001 fc35 	bl	800c44c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800abe2:	e016      	b.n	800ac12 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800abe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800abec:	2b00      	cmp	r3, #0
 800abee:	d010      	beq.n	800ac12 <HAL_UART_IRQHandler+0x642>
 800abf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	da0c      	bge.n	800ac12 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f001 fc1e 	bl	800c43a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800abfe:	e008      	b.n	800ac12 <HAL_UART_IRQHandler+0x642>
      return;
 800ac00:	bf00      	nop
 800ac02:	e006      	b.n	800ac12 <HAL_UART_IRQHandler+0x642>
    return;
 800ac04:	bf00      	nop
 800ac06:	e004      	b.n	800ac12 <HAL_UART_IRQHandler+0x642>
      return;
 800ac08:	bf00      	nop
 800ac0a:	e002      	b.n	800ac12 <HAL_UART_IRQHandler+0x642>
      return;
 800ac0c:	bf00      	nop
 800ac0e:	e000      	b.n	800ac12 <HAL_UART_IRQHandler+0x642>
    return;
 800ac10:	bf00      	nop
  }
}
 800ac12:	37e8      	adds	r7, #232	; 0xe8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ac20:	bf00      	nop
 800ac22:	370c      	adds	r7, #12
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bc80      	pop	{r7}
 800ac28:	4770      	bx	lr

0800ac2a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ac2a:	b480      	push	{r7}
 800ac2c:	b083      	sub	sp, #12
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ac32:	bf00      	nop
 800ac34:	370c      	adds	r7, #12
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bc80      	pop	{r7}
 800ac3a:	4770      	bx	lr

0800ac3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	460b      	mov	r3, r1
 800ac46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ac48:	bf00      	nop
 800ac4a:	370c      	adds	r7, #12
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bc80      	pop	{r7}
 800ac50:	4770      	bx	lr
	...

0800ac54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac58:	b08c      	sub	sp, #48	; 0x30
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	689a      	ldr	r2, [r3, #8]
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	691b      	ldr	r3, [r3, #16]
 800ac6c:	431a      	orrs	r2, r3
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	695b      	ldr	r3, [r3, #20]
 800ac72:	431a      	orrs	r2, r3
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	69db      	ldr	r3, [r3, #28]
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	4b94      	ldr	r3, [pc, #592]	; (800aed4 <UART_SetConfig+0x280>)
 800ac84:	4013      	ands	r3, r2
 800ac86:	697a      	ldr	r2, [r7, #20]
 800ac88:	6812      	ldr	r2, [r2, #0]
 800ac8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac8c:	430b      	orrs	r3, r1
 800ac8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	68da      	ldr	r2, [r3, #12]
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	430a      	orrs	r2, r1
 800aca4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	699b      	ldr	r3, [r3, #24]
 800acaa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a89      	ldr	r2, [pc, #548]	; (800aed8 <UART_SetConfig+0x284>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d004      	beq.n	800acc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	6a1b      	ldr	r3, [r3, #32]
 800acba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acbc:	4313      	orrs	r3, r2
 800acbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	689b      	ldr	r3, [r3, #8]
 800acc6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800acca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800acce:	697a      	ldr	r2, [r7, #20]
 800acd0:	6812      	ldr	r2, [r2, #0]
 800acd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800acd4:	430b      	orrs	r3, r1
 800acd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acde:	f023 010f 	bic.w	r1, r3, #15
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	430a      	orrs	r2, r1
 800acec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a7a      	ldr	r2, [pc, #488]	; (800aedc <UART_SetConfig+0x288>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d127      	bne.n	800ad48 <UART_SetConfig+0xf4>
 800acf8:	2003      	movs	r0, #3
 800acfa:	f7ff fb2b 	bl	800a354 <LL_RCC_GetUSARTClockSource>
 800acfe:	4603      	mov	r3, r0
 800ad00:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800ad04:	2b03      	cmp	r3, #3
 800ad06:	d81b      	bhi.n	800ad40 <UART_SetConfig+0xec>
 800ad08:	a201      	add	r2, pc, #4	; (adr r2, 800ad10 <UART_SetConfig+0xbc>)
 800ad0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad0e:	bf00      	nop
 800ad10:	0800ad21 	.word	0x0800ad21
 800ad14:	0800ad31 	.word	0x0800ad31
 800ad18:	0800ad29 	.word	0x0800ad29
 800ad1c:	0800ad39 	.word	0x0800ad39
 800ad20:	2301      	movs	r3, #1
 800ad22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad26:	e080      	b.n	800ae2a <UART_SetConfig+0x1d6>
 800ad28:	2302      	movs	r3, #2
 800ad2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad2e:	e07c      	b.n	800ae2a <UART_SetConfig+0x1d6>
 800ad30:	2304      	movs	r3, #4
 800ad32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad36:	e078      	b.n	800ae2a <UART_SetConfig+0x1d6>
 800ad38:	2308      	movs	r3, #8
 800ad3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad3e:	e074      	b.n	800ae2a <UART_SetConfig+0x1d6>
 800ad40:	2310      	movs	r3, #16
 800ad42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad46:	e070      	b.n	800ae2a <UART_SetConfig+0x1d6>
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a64      	ldr	r2, [pc, #400]	; (800aee0 <UART_SetConfig+0x28c>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d138      	bne.n	800adc4 <UART_SetConfig+0x170>
 800ad52:	200c      	movs	r0, #12
 800ad54:	f7ff fafe 	bl	800a354 <LL_RCC_GetUSARTClockSource>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800ad5e:	2b0c      	cmp	r3, #12
 800ad60:	d82c      	bhi.n	800adbc <UART_SetConfig+0x168>
 800ad62:	a201      	add	r2, pc, #4	; (adr r2, 800ad68 <UART_SetConfig+0x114>)
 800ad64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad68:	0800ad9d 	.word	0x0800ad9d
 800ad6c:	0800adbd 	.word	0x0800adbd
 800ad70:	0800adbd 	.word	0x0800adbd
 800ad74:	0800adbd 	.word	0x0800adbd
 800ad78:	0800adad 	.word	0x0800adad
 800ad7c:	0800adbd 	.word	0x0800adbd
 800ad80:	0800adbd 	.word	0x0800adbd
 800ad84:	0800adbd 	.word	0x0800adbd
 800ad88:	0800ada5 	.word	0x0800ada5
 800ad8c:	0800adbd 	.word	0x0800adbd
 800ad90:	0800adbd 	.word	0x0800adbd
 800ad94:	0800adbd 	.word	0x0800adbd
 800ad98:	0800adb5 	.word	0x0800adb5
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ada2:	e042      	b.n	800ae2a <UART_SetConfig+0x1d6>
 800ada4:	2302      	movs	r3, #2
 800ada6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800adaa:	e03e      	b.n	800ae2a <UART_SetConfig+0x1d6>
 800adac:	2304      	movs	r3, #4
 800adae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800adb2:	e03a      	b.n	800ae2a <UART_SetConfig+0x1d6>
 800adb4:	2308      	movs	r3, #8
 800adb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800adba:	e036      	b.n	800ae2a <UART_SetConfig+0x1d6>
 800adbc:	2310      	movs	r3, #16
 800adbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800adc2:	e032      	b.n	800ae2a <UART_SetConfig+0x1d6>
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4a43      	ldr	r2, [pc, #268]	; (800aed8 <UART_SetConfig+0x284>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d12a      	bne.n	800ae24 <UART_SetConfig+0x1d0>
 800adce:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800add2:	f7ff fad1 	bl	800a378 <LL_RCC_GetLPUARTClockSource>
 800add6:	4603      	mov	r3, r0
 800add8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800addc:	d01a      	beq.n	800ae14 <UART_SetConfig+0x1c0>
 800adde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ade2:	d81b      	bhi.n	800ae1c <UART_SetConfig+0x1c8>
 800ade4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ade8:	d00c      	beq.n	800ae04 <UART_SetConfig+0x1b0>
 800adea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800adee:	d815      	bhi.n	800ae1c <UART_SetConfig+0x1c8>
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d003      	beq.n	800adfc <UART_SetConfig+0x1a8>
 800adf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adf8:	d008      	beq.n	800ae0c <UART_SetConfig+0x1b8>
 800adfa:	e00f      	b.n	800ae1c <UART_SetConfig+0x1c8>
 800adfc:	2300      	movs	r3, #0
 800adfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae02:	e012      	b.n	800ae2a <UART_SetConfig+0x1d6>
 800ae04:	2302      	movs	r3, #2
 800ae06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae0a:	e00e      	b.n	800ae2a <UART_SetConfig+0x1d6>
 800ae0c:	2304      	movs	r3, #4
 800ae0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae12:	e00a      	b.n	800ae2a <UART_SetConfig+0x1d6>
 800ae14:	2308      	movs	r3, #8
 800ae16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae1a:	e006      	b.n	800ae2a <UART_SetConfig+0x1d6>
 800ae1c:	2310      	movs	r3, #16
 800ae1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae22:	e002      	b.n	800ae2a <UART_SetConfig+0x1d6>
 800ae24:	2310      	movs	r3, #16
 800ae26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4a2a      	ldr	r2, [pc, #168]	; (800aed8 <UART_SetConfig+0x284>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	f040 80a4 	bne.w	800af7e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ae36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ae3a:	2b08      	cmp	r3, #8
 800ae3c:	d823      	bhi.n	800ae86 <UART_SetConfig+0x232>
 800ae3e:	a201      	add	r2, pc, #4	; (adr r2, 800ae44 <UART_SetConfig+0x1f0>)
 800ae40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae44:	0800ae69 	.word	0x0800ae69
 800ae48:	0800ae87 	.word	0x0800ae87
 800ae4c:	0800ae71 	.word	0x0800ae71
 800ae50:	0800ae87 	.word	0x0800ae87
 800ae54:	0800ae77 	.word	0x0800ae77
 800ae58:	0800ae87 	.word	0x0800ae87
 800ae5c:	0800ae87 	.word	0x0800ae87
 800ae60:	0800ae87 	.word	0x0800ae87
 800ae64:	0800ae7f 	.word	0x0800ae7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae68:	f7fd ff4a 	bl	8008d00 <HAL_RCC_GetPCLK1Freq>
 800ae6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae6e:	e010      	b.n	800ae92 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae70:	4b1c      	ldr	r3, [pc, #112]	; (800aee4 <UART_SetConfig+0x290>)
 800ae72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ae74:	e00d      	b.n	800ae92 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae76:	f7fd fe8f 	bl	8008b98 <HAL_RCC_GetSysClockFreq>
 800ae7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae7c:	e009      	b.n	800ae92 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ae84:	e005      	b.n	800ae92 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800ae86:	2300      	movs	r3, #0
 800ae88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ae90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ae92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	f000 8137 	beq.w	800b108 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9e:	4a12      	ldr	r2, [pc, #72]	; (800aee8 <UART_SetConfig+0x294>)
 800aea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aea4:	461a      	mov	r2, r3
 800aea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea8:	fbb3 f3f2 	udiv	r3, r3, r2
 800aeac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	685a      	ldr	r2, [r3, #4]
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	005b      	lsls	r3, r3, #1
 800aeb6:	4413      	add	r3, r2
 800aeb8:	69ba      	ldr	r2, [r7, #24]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d305      	bcc.n	800aeca <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aec4:	69ba      	ldr	r2, [r7, #24]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d910      	bls.n	800aeec <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800aeca:	2301      	movs	r3, #1
 800aecc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800aed0:	e11a      	b.n	800b108 <UART_SetConfig+0x4b4>
 800aed2:	bf00      	nop
 800aed4:	cfff69f3 	.word	0xcfff69f3
 800aed8:	40008000 	.word	0x40008000
 800aedc:	40013800 	.word	0x40013800
 800aee0:	40004400 	.word	0x40004400
 800aee4:	00f42400 	.word	0x00f42400
 800aee8:	080209b4 	.word	0x080209b4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aeec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeee:	2200      	movs	r2, #0
 800aef0:	60bb      	str	r3, [r7, #8]
 800aef2:	60fa      	str	r2, [r7, #12]
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef8:	4a8e      	ldr	r2, [pc, #568]	; (800b134 <UART_SetConfig+0x4e0>)
 800aefa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aefe:	b29b      	uxth	r3, r3
 800af00:	2200      	movs	r2, #0
 800af02:	603b      	str	r3, [r7, #0]
 800af04:	607a      	str	r2, [r7, #4]
 800af06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800af0e:	f7f6 f8ad 	bl	800106c <__aeabi_uldivmod>
 800af12:	4602      	mov	r2, r0
 800af14:	460b      	mov	r3, r1
 800af16:	4610      	mov	r0, r2
 800af18:	4619      	mov	r1, r3
 800af1a:	f04f 0200 	mov.w	r2, #0
 800af1e:	f04f 0300 	mov.w	r3, #0
 800af22:	020b      	lsls	r3, r1, #8
 800af24:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800af28:	0202      	lsls	r2, r0, #8
 800af2a:	6979      	ldr	r1, [r7, #20]
 800af2c:	6849      	ldr	r1, [r1, #4]
 800af2e:	0849      	lsrs	r1, r1, #1
 800af30:	2000      	movs	r0, #0
 800af32:	460c      	mov	r4, r1
 800af34:	4605      	mov	r5, r0
 800af36:	eb12 0804 	adds.w	r8, r2, r4
 800af3a:	eb43 0905 	adc.w	r9, r3, r5
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	2200      	movs	r2, #0
 800af44:	469a      	mov	sl, r3
 800af46:	4693      	mov	fp, r2
 800af48:	4652      	mov	r2, sl
 800af4a:	465b      	mov	r3, fp
 800af4c:	4640      	mov	r0, r8
 800af4e:	4649      	mov	r1, r9
 800af50:	f7f6 f88c 	bl	800106c <__aeabi_uldivmod>
 800af54:	4602      	mov	r2, r0
 800af56:	460b      	mov	r3, r1
 800af58:	4613      	mov	r3, r2
 800af5a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800af5c:	6a3b      	ldr	r3, [r7, #32]
 800af5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af62:	d308      	bcc.n	800af76 <UART_SetConfig+0x322>
 800af64:	6a3b      	ldr	r3, [r7, #32]
 800af66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af6a:	d204      	bcs.n	800af76 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	6a3a      	ldr	r2, [r7, #32]
 800af72:	60da      	str	r2, [r3, #12]
 800af74:	e0c8      	b.n	800b108 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800af76:	2301      	movs	r3, #1
 800af78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800af7c:	e0c4      	b.n	800b108 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	69db      	ldr	r3, [r3, #28]
 800af82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af86:	d167      	bne.n	800b058 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800af88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800af8c:	2b08      	cmp	r3, #8
 800af8e:	d828      	bhi.n	800afe2 <UART_SetConfig+0x38e>
 800af90:	a201      	add	r2, pc, #4	; (adr r2, 800af98 <UART_SetConfig+0x344>)
 800af92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af96:	bf00      	nop
 800af98:	0800afbd 	.word	0x0800afbd
 800af9c:	0800afc5 	.word	0x0800afc5
 800afa0:	0800afcd 	.word	0x0800afcd
 800afa4:	0800afe3 	.word	0x0800afe3
 800afa8:	0800afd3 	.word	0x0800afd3
 800afac:	0800afe3 	.word	0x0800afe3
 800afb0:	0800afe3 	.word	0x0800afe3
 800afb4:	0800afe3 	.word	0x0800afe3
 800afb8:	0800afdb 	.word	0x0800afdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afbc:	f7fd fea0 	bl	8008d00 <HAL_RCC_GetPCLK1Freq>
 800afc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800afc2:	e014      	b.n	800afee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800afc4:	f7fd feae 	bl	8008d24 <HAL_RCC_GetPCLK2Freq>
 800afc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800afca:	e010      	b.n	800afee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800afcc:	4b5a      	ldr	r3, [pc, #360]	; (800b138 <UART_SetConfig+0x4e4>)
 800afce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800afd0:	e00d      	b.n	800afee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800afd2:	f7fd fde1 	bl	8008b98 <HAL_RCC_GetSysClockFreq>
 800afd6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800afd8:	e009      	b.n	800afee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800afda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800afde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800afe0:	e005      	b.n	800afee <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800afe2:	2300      	movs	r3, #0
 800afe4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800afe6:	2301      	movs	r3, #1
 800afe8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800afec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800afee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	f000 8089 	beq.w	800b108 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affa:	4a4e      	ldr	r2, [pc, #312]	; (800b134 <UART_SetConfig+0x4e0>)
 800affc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b000:	461a      	mov	r2, r3
 800b002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b004:	fbb3 f3f2 	udiv	r3, r3, r2
 800b008:	005a      	lsls	r2, r3, #1
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	085b      	lsrs	r3, r3, #1
 800b010:	441a      	add	r2, r3
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	fbb2 f3f3 	udiv	r3, r2, r3
 800b01a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b01c:	6a3b      	ldr	r3, [r7, #32]
 800b01e:	2b0f      	cmp	r3, #15
 800b020:	d916      	bls.n	800b050 <UART_SetConfig+0x3fc>
 800b022:	6a3b      	ldr	r3, [r7, #32]
 800b024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b028:	d212      	bcs.n	800b050 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b02a:	6a3b      	ldr	r3, [r7, #32]
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	f023 030f 	bic.w	r3, r3, #15
 800b032:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b034:	6a3b      	ldr	r3, [r7, #32]
 800b036:	085b      	lsrs	r3, r3, #1
 800b038:	b29b      	uxth	r3, r3
 800b03a:	f003 0307 	and.w	r3, r3, #7
 800b03e:	b29a      	uxth	r2, r3
 800b040:	8bfb      	ldrh	r3, [r7, #30]
 800b042:	4313      	orrs	r3, r2
 800b044:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	8bfa      	ldrh	r2, [r7, #30]
 800b04c:	60da      	str	r2, [r3, #12]
 800b04e:	e05b      	b.n	800b108 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b050:	2301      	movs	r3, #1
 800b052:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b056:	e057      	b.n	800b108 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b058:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b05c:	2b08      	cmp	r3, #8
 800b05e:	d828      	bhi.n	800b0b2 <UART_SetConfig+0x45e>
 800b060:	a201      	add	r2, pc, #4	; (adr r2, 800b068 <UART_SetConfig+0x414>)
 800b062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b066:	bf00      	nop
 800b068:	0800b08d 	.word	0x0800b08d
 800b06c:	0800b095 	.word	0x0800b095
 800b070:	0800b09d 	.word	0x0800b09d
 800b074:	0800b0b3 	.word	0x0800b0b3
 800b078:	0800b0a3 	.word	0x0800b0a3
 800b07c:	0800b0b3 	.word	0x0800b0b3
 800b080:	0800b0b3 	.word	0x0800b0b3
 800b084:	0800b0b3 	.word	0x0800b0b3
 800b088:	0800b0ab 	.word	0x0800b0ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b08c:	f7fd fe38 	bl	8008d00 <HAL_RCC_GetPCLK1Freq>
 800b090:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b092:	e014      	b.n	800b0be <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b094:	f7fd fe46 	bl	8008d24 <HAL_RCC_GetPCLK2Freq>
 800b098:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b09a:	e010      	b.n	800b0be <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b09c:	4b26      	ldr	r3, [pc, #152]	; (800b138 <UART_SetConfig+0x4e4>)
 800b09e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b0a0:	e00d      	b.n	800b0be <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b0a2:	f7fd fd79 	bl	8008b98 <HAL_RCC_GetSysClockFreq>
 800b0a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b0a8:	e009      	b.n	800b0be <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b0b0:	e005      	b.n	800b0be <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b0bc:	bf00      	nop
    }

    if (pclk != 0U)
 800b0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d021      	beq.n	800b108 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c8:	4a1a      	ldr	r2, [pc, #104]	; (800b134 <UART_SetConfig+0x4e0>)
 800b0ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d2:	fbb3 f2f2 	udiv	r2, r3, r2
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	085b      	lsrs	r3, r3, #1
 800b0dc:	441a      	add	r2, r3
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0e8:	6a3b      	ldr	r3, [r7, #32]
 800b0ea:	2b0f      	cmp	r3, #15
 800b0ec:	d909      	bls.n	800b102 <UART_SetConfig+0x4ae>
 800b0ee:	6a3b      	ldr	r3, [r7, #32]
 800b0f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0f4:	d205      	bcs.n	800b102 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b0f6:	6a3b      	ldr	r3, [r7, #32]
 800b0f8:	b29a      	uxth	r2, r3
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	60da      	str	r2, [r3, #12]
 800b100:	e002      	b.n	800b108 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b102:	2301      	movs	r3, #1
 800b104:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	2201      	movs	r2, #1
 800b10c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	2201      	movs	r2, #1
 800b114:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	2200      	movs	r2, #0
 800b11c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	2200      	movs	r2, #0
 800b122:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b124:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3730      	adds	r7, #48	; 0x30
 800b12c:	46bd      	mov	sp, r7
 800b12e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b132:	bf00      	nop
 800b134:	080209b4 	.word	0x080209b4
 800b138:	00f42400 	.word	0x00f42400

0800b13c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b148:	f003 0301 	and.w	r3, r3, #1
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d00a      	beq.n	800b166 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	430a      	orrs	r2, r1
 800b164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b16a:	f003 0302 	and.w	r3, r3, #2
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d00a      	beq.n	800b188 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	430a      	orrs	r2, r1
 800b186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b18c:	f003 0304 	and.w	r3, r3, #4
 800b190:	2b00      	cmp	r3, #0
 800b192:	d00a      	beq.n	800b1aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	430a      	orrs	r2, r1
 800b1a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ae:	f003 0308 	and.w	r3, r3, #8
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d00a      	beq.n	800b1cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	430a      	orrs	r2, r1
 800b1ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1d0:	f003 0310 	and.w	r3, r3, #16
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d00a      	beq.n	800b1ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	430a      	orrs	r2, r1
 800b1ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1f2:	f003 0320 	and.w	r3, r3, #32
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d00a      	beq.n	800b210 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	689b      	ldr	r3, [r3, #8]
 800b200:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	430a      	orrs	r2, r1
 800b20e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d01a      	beq.n	800b252 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	430a      	orrs	r2, r1
 800b230:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b23a:	d10a      	bne.n	800b252 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	430a      	orrs	r2, r1
 800b250:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d00a      	beq.n	800b274 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	430a      	orrs	r2, r1
 800b272:	605a      	str	r2, [r3, #4]
  }
}
 800b274:	bf00      	nop
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	bc80      	pop	{r7}
 800b27c:	4770      	bx	lr

0800b27e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b27e:	b580      	push	{r7, lr}
 800b280:	b086      	sub	sp, #24
 800b282:	af02      	add	r7, sp, #8
 800b284:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2200      	movs	r2, #0
 800b28a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b28e:	f7f7 f90d 	bl	80024ac <HAL_GetTick>
 800b292:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f003 0308 	and.w	r3, r3, #8
 800b29e:	2b08      	cmp	r3, #8
 800b2a0:	d10e      	bne.n	800b2c0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b2a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b2a6:	9300      	str	r3, [sp, #0]
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f000 f832 	bl	800b31a <UART_WaitOnFlagUntilTimeout>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d001      	beq.n	800b2c0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b2bc:	2303      	movs	r3, #3
 800b2be:	e028      	b.n	800b312 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f003 0304 	and.w	r3, r3, #4
 800b2ca:	2b04      	cmp	r3, #4
 800b2cc:	d10e      	bne.n	800b2ec <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b2ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b2d2:	9300      	str	r3, [sp, #0]
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 f81c 	bl	800b31a <UART_WaitOnFlagUntilTimeout>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d001      	beq.n	800b2ec <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b2e8:	2303      	movs	r3, #3
 800b2ea:	e012      	b.n	800b312 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2220      	movs	r2, #32
 800b2f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2220      	movs	r2, #32
 800b2f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	3710      	adds	r7, #16
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}

0800b31a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b31a:	b580      	push	{r7, lr}
 800b31c:	b09c      	sub	sp, #112	; 0x70
 800b31e:	af00      	add	r7, sp, #0
 800b320:	60f8      	str	r0, [r7, #12]
 800b322:	60b9      	str	r1, [r7, #8]
 800b324:	603b      	str	r3, [r7, #0]
 800b326:	4613      	mov	r3, r2
 800b328:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b32a:	e0a9      	b.n	800b480 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b32c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b32e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b332:	f000 80a5 	beq.w	800b480 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b336:	f7f7 f8b9 	bl	80024ac <HAL_GetTick>
 800b33a:	4602      	mov	r2, r0
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	1ad3      	subs	r3, r2, r3
 800b340:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b342:	429a      	cmp	r2, r3
 800b344:	d302      	bcc.n	800b34c <UART_WaitOnFlagUntilTimeout+0x32>
 800b346:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d140      	bne.n	800b3ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b354:	e853 3f00 	ldrex	r3, [r3]
 800b358:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b35a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b35c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b360:	667b      	str	r3, [r7, #100]	; 0x64
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	461a      	mov	r2, r3
 800b368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b36a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b36c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b36e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b370:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b372:	e841 2300 	strex	r3, r2, [r1]
 800b376:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d1e6      	bne.n	800b34c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	3308      	adds	r3, #8
 800b384:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b388:	e853 3f00 	ldrex	r3, [r3]
 800b38c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b390:	f023 0301 	bic.w	r3, r3, #1
 800b394:	663b      	str	r3, [r7, #96]	; 0x60
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	3308      	adds	r3, #8
 800b39c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b39e:	64ba      	str	r2, [r7, #72]	; 0x48
 800b3a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b3a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3a6:	e841 2300 	strex	r3, r2, [r1]
 800b3aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b3ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1e5      	bne.n	800b37e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2220      	movs	r2, #32
 800b3b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2220      	movs	r2, #32
 800b3be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800b3ca:	2303      	movs	r3, #3
 800b3cc:	e069      	b.n	800b4a2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f003 0304 	and.w	r3, r3, #4
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d051      	beq.n	800b480 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	69db      	ldr	r3, [r3, #28]
 800b3e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3ea:	d149      	bne.n	800b480 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b3f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3fe:	e853 3f00 	ldrex	r3, [r3]
 800b402:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b406:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b40a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	461a      	mov	r2, r3
 800b412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b414:	637b      	str	r3, [r7, #52]	; 0x34
 800b416:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b418:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b41a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b41c:	e841 2300 	strex	r3, r2, [r1]
 800b420:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b424:	2b00      	cmp	r3, #0
 800b426:	d1e6      	bne.n	800b3f6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	3308      	adds	r3, #8
 800b42e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	e853 3f00 	ldrex	r3, [r3]
 800b436:	613b      	str	r3, [r7, #16]
   return(result);
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	f023 0301 	bic.w	r3, r3, #1
 800b43e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	3308      	adds	r3, #8
 800b446:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b448:	623a      	str	r2, [r7, #32]
 800b44a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b44c:	69f9      	ldr	r1, [r7, #28]
 800b44e:	6a3a      	ldr	r2, [r7, #32]
 800b450:	e841 2300 	strex	r3, r2, [r1]
 800b454:	61bb      	str	r3, [r7, #24]
   return(result);
 800b456:	69bb      	ldr	r3, [r7, #24]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d1e5      	bne.n	800b428 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2220      	movs	r2, #32
 800b460:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2220      	movs	r2, #32
 800b468:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2220      	movs	r2, #32
 800b470:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2200      	movs	r2, #0
 800b478:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b47c:	2303      	movs	r3, #3
 800b47e:	e010      	b.n	800b4a2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	69da      	ldr	r2, [r3, #28]
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	4013      	ands	r3, r2
 800b48a:	68ba      	ldr	r2, [r7, #8]
 800b48c:	429a      	cmp	r2, r3
 800b48e:	bf0c      	ite	eq
 800b490:	2301      	moveq	r3, #1
 800b492:	2300      	movne	r3, #0
 800b494:	b2db      	uxtb	r3, r3
 800b496:	461a      	mov	r2, r3
 800b498:	79fb      	ldrb	r3, [r7, #7]
 800b49a:	429a      	cmp	r2, r3
 800b49c:	f43f af46 	beq.w	800b32c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b4a0:	2300      	movs	r3, #0
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3770      	adds	r7, #112	; 0x70
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
	...

0800b4ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b0a3      	sub	sp, #140	; 0x8c
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	60b9      	str	r1, [r7, #8]
 800b4b6:	4613      	mov	r3, r2
 800b4b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	68ba      	ldr	r2, [r7, #8]
 800b4be:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	88fa      	ldrh	r2, [r7, #6]
 800b4c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	88fa      	ldrh	r2, [r7, #6]
 800b4cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	689b      	ldr	r3, [r3, #8]
 800b4da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4de:	d10e      	bne.n	800b4fe <UART_Start_Receive_IT+0x52>
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	691b      	ldr	r3, [r3, #16]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d105      	bne.n	800b4f4 <UART_Start_Receive_IT+0x48>
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b4ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b4f2:	e02d      	b.n	800b550 <UART_Start_Receive_IT+0xa4>
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	22ff      	movs	r2, #255	; 0xff
 800b4f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b4fc:	e028      	b.n	800b550 <UART_Start_Receive_IT+0xa4>
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	689b      	ldr	r3, [r3, #8]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d10d      	bne.n	800b522 <UART_Start_Receive_IT+0x76>
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	691b      	ldr	r3, [r3, #16]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d104      	bne.n	800b518 <UART_Start_Receive_IT+0x6c>
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	22ff      	movs	r2, #255	; 0xff
 800b512:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b516:	e01b      	b.n	800b550 <UART_Start_Receive_IT+0xa4>
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	227f      	movs	r2, #127	; 0x7f
 800b51c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b520:	e016      	b.n	800b550 <UART_Start_Receive_IT+0xa4>
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b52a:	d10d      	bne.n	800b548 <UART_Start_Receive_IT+0x9c>
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	691b      	ldr	r3, [r3, #16]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d104      	bne.n	800b53e <UART_Start_Receive_IT+0x92>
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	227f      	movs	r2, #127	; 0x7f
 800b538:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b53c:	e008      	b.n	800b550 <UART_Start_Receive_IT+0xa4>
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	223f      	movs	r2, #63	; 0x3f
 800b542:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b546:	e003      	b.n	800b550 <UART_Start_Receive_IT+0xa4>
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2200      	movs	r2, #0
 800b54c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2200      	movs	r2, #0
 800b554:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2222      	movs	r2, #34	; 0x22
 800b55c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	3308      	adds	r3, #8
 800b566:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b56a:	e853 3f00 	ldrex	r3, [r3]
 800b56e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b570:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b572:	f043 0301 	orr.w	r3, r3, #1
 800b576:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	3308      	adds	r3, #8
 800b580:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b584:	673a      	str	r2, [r7, #112]	; 0x70
 800b586:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b588:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b58a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b58c:	e841 2300 	strex	r3, r2, [r1]
 800b590:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b592:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b594:	2b00      	cmp	r3, #0
 800b596:	d1e3      	bne.n	800b560 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b59c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5a0:	d14f      	bne.n	800b642 <UART_Start_Receive_IT+0x196>
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b5a8:	88fa      	ldrh	r2, [r7, #6]
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d349      	bcc.n	800b642 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5b6:	d107      	bne.n	800b5c8 <UART_Start_Receive_IT+0x11c>
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	691b      	ldr	r3, [r3, #16]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d103      	bne.n	800b5c8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	4a46      	ldr	r2, [pc, #280]	; (800b6dc <UART_Start_Receive_IT+0x230>)
 800b5c4:	675a      	str	r2, [r3, #116]	; 0x74
 800b5c6:	e002      	b.n	800b5ce <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	4a45      	ldr	r2, [pc, #276]	; (800b6e0 <UART_Start_Receive_IT+0x234>)
 800b5cc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	691b      	ldr	r3, [r3, #16]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d01a      	beq.n	800b60c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5de:	e853 3f00 	ldrex	r3, [r3]
 800b5e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b5e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b5f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b5fa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b5fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b600:	e841 2300 	strex	r3, r2, [r1]
 800b604:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d1e4      	bne.n	800b5d6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	3308      	adds	r3, #8
 800b612:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b616:	e853 3f00 	ldrex	r3, [r3]
 800b61a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b61e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b622:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	3308      	adds	r3, #8
 800b62a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b62c:	64ba      	str	r2, [r7, #72]	; 0x48
 800b62e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b630:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b632:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b634:	e841 2300 	strex	r3, r2, [r1]
 800b638:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b63a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d1e5      	bne.n	800b60c <UART_Start_Receive_IT+0x160>
 800b640:	e046      	b.n	800b6d0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	689b      	ldr	r3, [r3, #8]
 800b646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b64a:	d107      	bne.n	800b65c <UART_Start_Receive_IT+0x1b0>
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	691b      	ldr	r3, [r3, #16]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d103      	bne.n	800b65c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	4a23      	ldr	r2, [pc, #140]	; (800b6e4 <UART_Start_Receive_IT+0x238>)
 800b658:	675a      	str	r2, [r3, #116]	; 0x74
 800b65a:	e002      	b.n	800b662 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	4a22      	ldr	r2, [pc, #136]	; (800b6e8 <UART_Start_Receive_IT+0x23c>)
 800b660:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	691b      	ldr	r3, [r3, #16]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d019      	beq.n	800b69e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b672:	e853 3f00 	ldrex	r3, [r3]
 800b676:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b67e:	677b      	str	r3, [r7, #116]	; 0x74
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	461a      	mov	r2, r3
 800b686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b688:	637b      	str	r3, [r7, #52]	; 0x34
 800b68a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b68c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b68e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b690:	e841 2300 	strex	r3, r2, [r1]
 800b694:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d1e6      	bne.n	800b66a <UART_Start_Receive_IT+0x1be>
 800b69c:	e018      	b.n	800b6d0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	e853 3f00 	ldrex	r3, [r3]
 800b6aa:	613b      	str	r3, [r7, #16]
   return(result);
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	f043 0320 	orr.w	r3, r3, #32
 800b6b2:	67bb      	str	r3, [r7, #120]	; 0x78
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b6bc:	623b      	str	r3, [r7, #32]
 800b6be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c0:	69f9      	ldr	r1, [r7, #28]
 800b6c2:	6a3a      	ldr	r2, [r7, #32]
 800b6c4:	e841 2300 	strex	r3, r2, [r1]
 800b6c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800b6ca:	69bb      	ldr	r3, [r7, #24]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d1e6      	bne.n	800b69e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b6d0:	2300      	movs	r3, #0
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	378c      	adds	r7, #140	; 0x8c
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bc80      	pop	{r7}
 800b6da:	4770      	bx	lr
 800b6dc:	0800c0c1 	.word	0x0800c0c1
 800b6e0:	0800bd61 	.word	0x0800bd61
 800b6e4:	0800bba9 	.word	0x0800bba9
 800b6e8:	0800b9f1 	.word	0x0800b9f1

0800b6ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b08f      	sub	sp, #60	; 0x3c
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6fa:	6a3b      	ldr	r3, [r7, #32]
 800b6fc:	e853 3f00 	ldrex	r3, [r3]
 800b700:	61fb      	str	r3, [r7, #28]
   return(result);
 800b702:	69fb      	ldr	r3, [r7, #28]
 800b704:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b708:	637b      	str	r3, [r7, #52]	; 0x34
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	461a      	mov	r2, r3
 800b710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b712:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b714:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b716:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b71a:	e841 2300 	strex	r3, r2, [r1]
 800b71e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b722:	2b00      	cmp	r3, #0
 800b724:	d1e6      	bne.n	800b6f4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	3308      	adds	r3, #8
 800b72c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	e853 3f00 	ldrex	r3, [r3]
 800b734:	60bb      	str	r3, [r7, #8]
   return(result);
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b73c:	633b      	str	r3, [r7, #48]	; 0x30
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	3308      	adds	r3, #8
 800b744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b746:	61ba      	str	r2, [r7, #24]
 800b748:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b74a:	6979      	ldr	r1, [r7, #20]
 800b74c:	69ba      	ldr	r2, [r7, #24]
 800b74e:	e841 2300 	strex	r3, r2, [r1]
 800b752:	613b      	str	r3, [r7, #16]
   return(result);
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d1e5      	bne.n	800b726 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2220      	movs	r2, #32
 800b75e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800b762:	bf00      	nop
 800b764:	373c      	adds	r7, #60	; 0x3c
 800b766:	46bd      	mov	sp, r7
 800b768:	bc80      	pop	{r7}
 800b76a:	4770      	bx	lr

0800b76c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b095      	sub	sp, #84	; 0x54
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b77a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b77c:	e853 3f00 	ldrex	r3, [r3]
 800b780:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b784:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b788:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	461a      	mov	r2, r3
 800b790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b792:	643b      	str	r3, [r7, #64]	; 0x40
 800b794:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b796:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b798:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b79a:	e841 2300 	strex	r3, r2, [r1]
 800b79e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d1e6      	bne.n	800b774 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	3308      	adds	r3, #8
 800b7ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ae:	6a3b      	ldr	r3, [r7, #32]
 800b7b0:	e853 3f00 	ldrex	r3, [r3]
 800b7b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b7b6:	69fb      	ldr	r3, [r7, #28]
 800b7b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b7bc:	f023 0301 	bic.w	r3, r3, #1
 800b7c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	3308      	adds	r3, #8
 800b7c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b7cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b7d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7d2:	e841 2300 	strex	r3, r2, [r1]
 800b7d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d1e3      	bne.n	800b7a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d118      	bne.n	800b818 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	e853 3f00 	ldrex	r3, [r3]
 800b7f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	f023 0310 	bic.w	r3, r3, #16
 800b7fa:	647b      	str	r3, [r7, #68]	; 0x44
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	461a      	mov	r2, r3
 800b802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b804:	61bb      	str	r3, [r7, #24]
 800b806:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b808:	6979      	ldr	r1, [r7, #20]
 800b80a:	69ba      	ldr	r2, [r7, #24]
 800b80c:	e841 2300 	strex	r3, r2, [r1]
 800b810:	613b      	str	r3, [r7, #16]
   return(result);
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d1e6      	bne.n	800b7e6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2220      	movs	r2, #32
 800b81c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2200      	movs	r2, #0
 800b824:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2200      	movs	r2, #0
 800b82a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b82c:	bf00      	nop
 800b82e:	3754      	adds	r7, #84	; 0x54
 800b830:	46bd      	mov	sp, r7
 800b832:	bc80      	pop	{r7}
 800b834:	4770      	bx	lr

0800b836 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b836:	b580      	push	{r7, lr}
 800b838:	b090      	sub	sp, #64	; 0x40
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b842:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f003 0320 	and.w	r3, r3, #32
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d137      	bne.n	800b8c2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b854:	2200      	movs	r2, #0
 800b856:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b85a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	3308      	adds	r3, #8
 800b860:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b864:	e853 3f00 	ldrex	r3, [r3]
 800b868:	623b      	str	r3, [r7, #32]
   return(result);
 800b86a:	6a3b      	ldr	r3, [r7, #32]
 800b86c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b870:	63bb      	str	r3, [r7, #56]	; 0x38
 800b872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	3308      	adds	r3, #8
 800b878:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b87a:	633a      	str	r2, [r7, #48]	; 0x30
 800b87c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b882:	e841 2300 	strex	r3, r2, [r1]
 800b886:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d1e5      	bne.n	800b85a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b88e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	e853 3f00 	ldrex	r3, [r3]
 800b89a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8a2:	637b      	str	r3, [r7, #52]	; 0x34
 800b8a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ac:	61fb      	str	r3, [r7, #28]
 800b8ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b0:	69b9      	ldr	r1, [r7, #24]
 800b8b2:	69fa      	ldr	r2, [r7, #28]
 800b8b4:	e841 2300 	strex	r3, r2, [r1]
 800b8b8:	617b      	str	r3, [r7, #20]
   return(result);
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d1e6      	bne.n	800b88e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b8c0:	e002      	b.n	800b8c8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b8c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b8c4:	f7f7 fae0 	bl	8002e88 <HAL_UART_TxCpltCallback>
}
 800b8c8:	bf00      	nop
 800b8ca:	3740      	adds	r7, #64	; 0x40
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8dc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f7ff f99a 	bl	800ac18 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8e4:	bf00      	nop
 800b8e6:	3710      	adds	r7, #16
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b086      	sub	sp, #24
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8f8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b900:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b908:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	689b      	ldr	r3, [r3, #8]
 800b910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b914:	2b80      	cmp	r3, #128	; 0x80
 800b916:	d109      	bne.n	800b92c <UART_DMAError+0x40>
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	2b21      	cmp	r3, #33	; 0x21
 800b91c:	d106      	bne.n	800b92c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	2200      	movs	r2, #0
 800b922:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800b926:	6978      	ldr	r0, [r7, #20]
 800b928:	f7ff fee0 	bl	800b6ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	689b      	ldr	r3, [r3, #8]
 800b932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b936:	2b40      	cmp	r3, #64	; 0x40
 800b938:	d109      	bne.n	800b94e <UART_DMAError+0x62>
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2b22      	cmp	r3, #34	; 0x22
 800b93e:	d106      	bne.n	800b94e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	2200      	movs	r2, #0
 800b944:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b948:	6978      	ldr	r0, [r7, #20]
 800b94a:	f7ff ff0f 	bl	800b76c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b954:	f043 0210 	orr.w	r2, r3, #16
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b95e:	6978      	ldr	r0, [r7, #20]
 800b960:	f7ff f963 	bl	800ac2a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b964:	bf00      	nop
 800b966:	3718      	adds	r7, #24
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b978:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2200      	movs	r2, #0
 800b97e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2200      	movs	r2, #0
 800b986:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	f7ff f94d 	bl	800ac2a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b990:	bf00      	nop
 800b992:	3710      	adds	r7, #16
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b088      	sub	sp, #32
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	e853 3f00 	ldrex	r3, [r3]
 800b9ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9b4:	61fb      	str	r3, [r7, #28]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	69fb      	ldr	r3, [r7, #28]
 800b9be:	61bb      	str	r3, [r7, #24]
 800b9c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9c2:	6979      	ldr	r1, [r7, #20]
 800b9c4:	69ba      	ldr	r2, [r7, #24]
 800b9c6:	e841 2300 	strex	r3, r2, [r1]
 800b9ca:	613b      	str	r3, [r7, #16]
   return(result);
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d1e6      	bne.n	800b9a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2220      	movs	r2, #32
 800b9d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f7f7 fa51 	bl	8002e88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b9e6:	bf00      	nop
 800b9e8:	3720      	adds	r7, #32
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}
	...

0800b9f0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b09c      	sub	sp, #112	; 0x70
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b9fe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba08:	2b22      	cmp	r3, #34	; 0x22
 800ba0a:	f040 80be 	bne.w	800bb8a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba14:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ba18:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ba1c:	b2d9      	uxtb	r1, r3
 800ba1e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ba22:	b2da      	uxtb	r2, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba28:	400a      	ands	r2, r1
 800ba2a:	b2d2      	uxtb	r2, r2
 800ba2c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba32:	1c5a      	adds	r2, r3, #1
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	3b01      	subs	r3, #1
 800ba42:	b29a      	uxth	r2, r3
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	f040 80a1 	bne.w	800bb9a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba60:	e853 3f00 	ldrex	r3, [r3]
 800ba64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ba66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ba6c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	461a      	mov	r2, r3
 800ba74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba76:	65bb      	str	r3, [r7, #88]	; 0x58
 800ba78:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ba7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba7e:	e841 2300 	strex	r3, r2, [r1]
 800ba82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ba84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d1e6      	bne.n	800ba58 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	3308      	adds	r3, #8
 800ba90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba94:	e853 3f00 	ldrex	r3, [r3]
 800ba98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ba9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba9c:	f023 0301 	bic.w	r3, r3, #1
 800baa0:	667b      	str	r3, [r7, #100]	; 0x64
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	3308      	adds	r3, #8
 800baa8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800baaa:	647a      	str	r2, [r7, #68]	; 0x44
 800baac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bab0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bab2:	e841 2300 	strex	r3, r2, [r1]
 800bab6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baba:	2b00      	cmp	r3, #0
 800babc:	d1e5      	bne.n	800ba8a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2220      	movs	r2, #32
 800bac2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2200      	movs	r2, #0
 800baca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4a33      	ldr	r2, [pc, #204]	; (800bba4 <UART_RxISR_8BIT+0x1b4>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d01f      	beq.n	800bb1c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d018      	beq.n	800bb1c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf2:	e853 3f00 	ldrex	r3, [r3]
 800baf6:	623b      	str	r3, [r7, #32]
   return(result);
 800baf8:	6a3b      	ldr	r3, [r7, #32]
 800bafa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bafe:	663b      	str	r3, [r7, #96]	; 0x60
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	461a      	mov	r2, r3
 800bb06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb08:	633b      	str	r3, [r7, #48]	; 0x30
 800bb0a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb10:	e841 2300 	strex	r3, r2, [r1]
 800bb14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d1e6      	bne.n	800baea <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d12e      	bne.n	800bb82 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2200      	movs	r2, #0
 800bb28:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	e853 3f00 	ldrex	r3, [r3]
 800bb36:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f023 0310 	bic.w	r3, r3, #16
 800bb3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	461a      	mov	r2, r3
 800bb46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb48:	61fb      	str	r3, [r7, #28]
 800bb4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb4c:	69b9      	ldr	r1, [r7, #24]
 800bb4e:	69fa      	ldr	r2, [r7, #28]
 800bb50:	e841 2300 	strex	r3, r2, [r1]
 800bb54:	617b      	str	r3, [r7, #20]
   return(result);
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d1e6      	bne.n	800bb2a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	69db      	ldr	r3, [r3, #28]
 800bb62:	f003 0310 	and.w	r3, r3, #16
 800bb66:	2b10      	cmp	r3, #16
 800bb68:	d103      	bne.n	800bb72 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	2210      	movs	r2, #16
 800bb70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bb78:	4619      	mov	r1, r3
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f7ff f85e 	bl	800ac3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bb80:	e00b      	b.n	800bb9a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f7f7 f996 	bl	8002eb4 <HAL_UART_RxCpltCallback>
}
 800bb88:	e007      	b.n	800bb9a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	699a      	ldr	r2, [r3, #24]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f042 0208 	orr.w	r2, r2, #8
 800bb98:	619a      	str	r2, [r3, #24]
}
 800bb9a:	bf00      	nop
 800bb9c:	3770      	adds	r7, #112	; 0x70
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop
 800bba4:	40008000 	.word	0x40008000

0800bba8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b09c      	sub	sp, #112	; 0x70
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bbb6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbc0:	2b22      	cmp	r3, #34	; 0x22
 800bbc2:	f040 80be 	bne.w	800bd42 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbcc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbd4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800bbd6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800bbda:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800bbde:	4013      	ands	r3, r2
 800bbe0:	b29a      	uxth	r2, r3
 800bbe2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bbe4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbea:	1c9a      	adds	r2, r3, #2
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bbf6:	b29b      	uxth	r3, r3
 800bbf8:	3b01      	subs	r3, #1
 800bbfa:	b29a      	uxth	r2, r3
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	f040 80a1 	bne.w	800bd52 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc18:	e853 3f00 	ldrex	r3, [r3]
 800bc1c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bc1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc24:	667b      	str	r3, [r7, #100]	; 0x64
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc2e:	657b      	str	r3, [r7, #84]	; 0x54
 800bc30:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bc34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bc36:	e841 2300 	strex	r3, r2, [r1]
 800bc3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bc3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d1e6      	bne.n	800bc10 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	3308      	adds	r3, #8
 800bc48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc4c:	e853 3f00 	ldrex	r3, [r3]
 800bc50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bc52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc54:	f023 0301 	bic.w	r3, r3, #1
 800bc58:	663b      	str	r3, [r7, #96]	; 0x60
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	3308      	adds	r3, #8
 800bc60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bc62:	643a      	str	r2, [r7, #64]	; 0x40
 800bc64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bc68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc6a:	e841 2300 	strex	r3, r2, [r1]
 800bc6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d1e5      	bne.n	800bc42 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2220      	movs	r2, #32
 800bc7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2200      	movs	r2, #0
 800bc82:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2200      	movs	r2, #0
 800bc88:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4a33      	ldr	r2, [pc, #204]	; (800bd5c <UART_RxISR_16BIT+0x1b4>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d01f      	beq.n	800bcd4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d018      	beq.n	800bcd4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca8:	6a3b      	ldr	r3, [r7, #32]
 800bcaa:	e853 3f00 	ldrex	r3, [r3]
 800bcae:	61fb      	str	r3, [r7, #28]
   return(result);
 800bcb0:	69fb      	ldr	r3, [r7, #28]
 800bcb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bcb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bcc2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bcc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcc8:	e841 2300 	strex	r3, r2, [r1]
 800bccc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bcce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d1e6      	bne.n	800bca2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d12e      	bne.n	800bd3a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2200      	movs	r2, #0
 800bce0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	e853 3f00 	ldrex	r3, [r3]
 800bcee:	60bb      	str	r3, [r7, #8]
   return(result);
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	f023 0310 	bic.w	r3, r3, #16
 800bcf6:	65bb      	str	r3, [r7, #88]	; 0x58
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd00:	61bb      	str	r3, [r7, #24]
 800bd02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd04:	6979      	ldr	r1, [r7, #20]
 800bd06:	69ba      	ldr	r2, [r7, #24]
 800bd08:	e841 2300 	strex	r3, r2, [r1]
 800bd0c:	613b      	str	r3, [r7, #16]
   return(result);
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d1e6      	bne.n	800bce2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	69db      	ldr	r3, [r3, #28]
 800bd1a:	f003 0310 	and.w	r3, r3, #16
 800bd1e:	2b10      	cmp	r3, #16
 800bd20:	d103      	bne.n	800bd2a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	2210      	movs	r2, #16
 800bd28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bd30:	4619      	mov	r1, r3
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f7fe ff82 	bl	800ac3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bd38:	e00b      	b.n	800bd52 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f7f7 f8ba 	bl	8002eb4 <HAL_UART_RxCpltCallback>
}
 800bd40:	e007      	b.n	800bd52 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	699a      	ldr	r2, [r3, #24]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f042 0208 	orr.w	r2, r2, #8
 800bd50:	619a      	str	r2, [r3, #24]
}
 800bd52:	bf00      	nop
 800bd54:	3770      	adds	r7, #112	; 0x70
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	bf00      	nop
 800bd5c:	40008000 	.word	0x40008000

0800bd60 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b0ac      	sub	sp, #176	; 0xb0
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bd6e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	69db      	ldr	r3, [r3, #28]
 800bd78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	689b      	ldr	r3, [r3, #8]
 800bd8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd96:	2b22      	cmp	r3, #34	; 0x22
 800bd98:	f040 8182 	bne.w	800c0a0 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bda2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bda6:	e125      	b.n	800bff4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdae:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bdb2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800bdb6:	b2d9      	uxtb	r1, r3
 800bdb8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800bdbc:	b2da      	uxtb	r2, r3
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdc2:	400a      	ands	r2, r1
 800bdc4:	b2d2      	uxtb	r2, r2
 800bdc6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdcc:	1c5a      	adds	r2, r3, #1
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	3b01      	subs	r3, #1
 800bddc:	b29a      	uxth	r2, r3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	69db      	ldr	r3, [r3, #28]
 800bdea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bdee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bdf2:	f003 0307 	and.w	r3, r3, #7
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d053      	beq.n	800bea2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bdfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bdfe:	f003 0301 	and.w	r3, r3, #1
 800be02:	2b00      	cmp	r3, #0
 800be04:	d011      	beq.n	800be2a <UART_RxISR_8BIT_FIFOEN+0xca>
 800be06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800be0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d00b      	beq.n	800be2a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	2201      	movs	r2, #1
 800be18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be20:	f043 0201 	orr.w	r2, r3, #1
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be2e:	f003 0302 	and.w	r3, r3, #2
 800be32:	2b00      	cmp	r3, #0
 800be34:	d011      	beq.n	800be5a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800be36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800be3a:	f003 0301 	and.w	r3, r3, #1
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00b      	beq.n	800be5a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	2202      	movs	r2, #2
 800be48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be50:	f043 0204 	orr.w	r2, r3, #4
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be5e:	f003 0304 	and.w	r3, r3, #4
 800be62:	2b00      	cmp	r3, #0
 800be64:	d011      	beq.n	800be8a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800be66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800be6a:	f003 0301 	and.w	r3, r3, #1
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d00b      	beq.n	800be8a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	2204      	movs	r2, #4
 800be78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be80:	f043 0202 	orr.w	r2, r3, #2
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be90:	2b00      	cmp	r3, #0
 800be92:	d006      	beq.n	800bea2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f7fe fec8 	bl	800ac2a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2200      	movs	r2, #0
 800be9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bea8:	b29b      	uxth	r3, r3
 800beaa:	2b00      	cmp	r3, #0
 800beac:	f040 80a2 	bne.w	800bff4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800beb8:	e853 3f00 	ldrex	r3, [r3]
 800bebc:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800bebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bec4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	461a      	mov	r2, r3
 800bece:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bed2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bed4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bed6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800bed8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800beda:	e841 2300 	strex	r3, r2, [r1]
 800bede:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800bee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d1e4      	bne.n	800beb0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	3308      	adds	r3, #8
 800beec:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bef0:	e853 3f00 	ldrex	r3, [r3]
 800bef4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800bef6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800befc:	f023 0301 	bic.w	r3, r3, #1
 800bf00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	3308      	adds	r3, #8
 800bf0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bf0e:	66ba      	str	r2, [r7, #104]	; 0x68
 800bf10:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf12:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800bf14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bf16:	e841 2300 	strex	r3, r2, [r1]
 800bf1a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800bf1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d1e1      	bne.n	800bee6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2220      	movs	r2, #32
 800bf26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4a5f      	ldr	r2, [pc, #380]	; (800c0b8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d021      	beq.n	800bf84 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d01a      	beq.n	800bf84 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf56:	e853 3f00 	ldrex	r3, [r3]
 800bf5a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bf5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bf62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf70:	657b      	str	r3, [r7, #84]	; 0x54
 800bf72:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf74:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bf76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bf78:	e841 2300 	strex	r3, r2, [r1]
 800bf7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bf7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d1e4      	bne.n	800bf4e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d130      	bne.n	800bfee <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf9a:	e853 3f00 	ldrex	r3, [r3]
 800bf9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bfa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa2:	f023 0310 	bic.w	r3, r3, #16
 800bfa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	461a      	mov	r2, r3
 800bfb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bfb4:	643b      	str	r3, [r7, #64]	; 0x40
 800bfb6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bfba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bfbc:	e841 2300 	strex	r3, r2, [r1]
 800bfc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d1e4      	bne.n	800bf92 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	69db      	ldr	r3, [r3, #28]
 800bfce:	f003 0310 	and.w	r3, r3, #16
 800bfd2:	2b10      	cmp	r3, #16
 800bfd4:	d103      	bne.n	800bfde <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	2210      	movs	r2, #16
 800bfdc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f7fe fe28 	bl	800ac3c <HAL_UARTEx_RxEventCallback>
 800bfec:	e002      	b.n	800bff4 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f7f6 ff60 	bl	8002eb4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bff4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d006      	beq.n	800c00a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800bffc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c000:	f003 0320 	and.w	r3, r3, #32
 800c004:	2b00      	cmp	r3, #0
 800c006:	f47f aecf 	bne.w	800bda8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c010:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c014:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d049      	beq.n	800c0b0 <UART_RxISR_8BIT_FIFOEN+0x350>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c022:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800c026:	429a      	cmp	r2, r3
 800c028:	d242      	bcs.n	800c0b0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	3308      	adds	r3, #8
 800c030:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c032:	6a3b      	ldr	r3, [r7, #32]
 800c034:	e853 3f00 	ldrex	r3, [r3]
 800c038:	61fb      	str	r3, [r7, #28]
   return(result);
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c040:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	3308      	adds	r3, #8
 800c04a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c04e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c050:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c052:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c056:	e841 2300 	strex	r3, r2, [r1]
 800c05a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d1e3      	bne.n	800c02a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	4a15      	ldr	r2, [pc, #84]	; (800c0bc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c066:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	e853 3f00 	ldrex	r3, [r3]
 800c074:	60bb      	str	r3, [r7, #8]
   return(result);
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	f043 0320 	orr.w	r3, r3, #32
 800c07c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	461a      	mov	r2, r3
 800c086:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c08a:	61bb      	str	r3, [r7, #24]
 800c08c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c08e:	6979      	ldr	r1, [r7, #20]
 800c090:	69ba      	ldr	r2, [r7, #24]
 800c092:	e841 2300 	strex	r3, r2, [r1]
 800c096:	613b      	str	r3, [r7, #16]
   return(result);
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d1e4      	bne.n	800c068 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c09e:	e007      	b.n	800c0b0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	699a      	ldr	r2, [r3, #24]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f042 0208 	orr.w	r2, r2, #8
 800c0ae:	619a      	str	r2, [r3, #24]
}
 800c0b0:	bf00      	nop
 800c0b2:	37b0      	adds	r7, #176	; 0xb0
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}
 800c0b8:	40008000 	.word	0x40008000
 800c0bc:	0800b9f1 	.word	0x0800b9f1

0800c0c0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b0ae      	sub	sp, #184	; 0xb8
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c0ce:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	69db      	ldr	r3, [r3, #28]
 800c0d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	689b      	ldr	r3, [r3, #8]
 800c0ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0f6:	2b22      	cmp	r3, #34	; 0x22
 800c0f8:	f040 8186 	bne.w	800c408 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c102:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c106:	e129      	b.n	800c35c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c10e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c116:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c11a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800c11e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800c122:	4013      	ands	r3, r2
 800c124:	b29a      	uxth	r2, r3
 800c126:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c12a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c130:	1c9a      	adds	r2, r3, #2
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	3b01      	subs	r3, #1
 800c140:	b29a      	uxth	r2, r3
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	69db      	ldr	r3, [r3, #28]
 800c14e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c152:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c156:	f003 0307 	and.w	r3, r3, #7
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d053      	beq.n	800c206 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c15e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c162:	f003 0301 	and.w	r3, r3, #1
 800c166:	2b00      	cmp	r3, #0
 800c168:	d011      	beq.n	800c18e <UART_RxISR_16BIT_FIFOEN+0xce>
 800c16a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c16e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c172:	2b00      	cmp	r3, #0
 800c174:	d00b      	beq.n	800c18e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	2201      	movs	r2, #1
 800c17c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c184:	f043 0201 	orr.w	r2, r3, #1
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c18e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c192:	f003 0302 	and.w	r3, r3, #2
 800c196:	2b00      	cmp	r3, #0
 800c198:	d011      	beq.n	800c1be <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c19a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c19e:	f003 0301 	and.w	r3, r3, #1
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d00b      	beq.n	800c1be <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	2202      	movs	r2, #2
 800c1ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1b4:	f043 0204 	orr.w	r2, r3, #4
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c1be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c1c2:	f003 0304 	and.w	r3, r3, #4
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d011      	beq.n	800c1ee <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c1ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c1ce:	f003 0301 	and.w	r3, r3, #1
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d00b      	beq.n	800c1ee <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	2204      	movs	r2, #4
 800c1dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1e4:	f043 0202 	orr.w	r2, r3, #2
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d006      	beq.n	800c206 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f7fe fd16 	bl	800ac2a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2200      	movs	r2, #0
 800c202:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c20c:	b29b      	uxth	r3, r3
 800c20e:	2b00      	cmp	r3, #0
 800c210:	f040 80a4 	bne.w	800c35c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c21a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c21c:	e853 3f00 	ldrex	r3, [r3]
 800c220:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c222:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c228:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	461a      	mov	r2, r3
 800c232:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c236:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c23a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c23c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c23e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c242:	e841 2300 	strex	r3, r2, [r1]
 800c246:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d1e2      	bne.n	800c214 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	3308      	adds	r3, #8
 800c254:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c258:	e853 3f00 	ldrex	r3, [r3]
 800c25c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c25e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c264:	f023 0301 	bic.w	r3, r3, #1
 800c268:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	3308      	adds	r3, #8
 800c272:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c276:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c278:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c27a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c27c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c27e:	e841 2300 	strex	r3, r2, [r1]
 800c282:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c286:	2b00      	cmp	r3, #0
 800c288:	d1e1      	bne.n	800c24e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2220      	movs	r2, #32
 800c28e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2200      	movs	r2, #0
 800c296:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2200      	movs	r2, #0
 800c29c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	4a5f      	ldr	r2, [pc, #380]	; (800c420 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d021      	beq.n	800c2ec <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d01a      	beq.n	800c2ec <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2be:	e853 3f00 	ldrex	r3, [r3]
 800c2c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c2c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c2ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c2d8:	65bb      	str	r3, [r7, #88]	; 0x58
 800c2da:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c2de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c2e0:	e841 2300 	strex	r3, r2, [r1]
 800c2e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c2e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d1e4      	bne.n	800c2b6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d130      	bne.n	800c356 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c302:	e853 3f00 	ldrex	r3, [r3]
 800c306:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c30a:	f023 0310 	bic.w	r3, r3, #16
 800c30e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	461a      	mov	r2, r3
 800c318:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c31c:	647b      	str	r3, [r7, #68]	; 0x44
 800c31e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c320:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c322:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c324:	e841 2300 	strex	r3, r2, [r1]
 800c328:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c32a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d1e4      	bne.n	800c2fa <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	69db      	ldr	r3, [r3, #28]
 800c336:	f003 0310 	and.w	r3, r3, #16
 800c33a:	2b10      	cmp	r3, #16
 800c33c:	d103      	bne.n	800c346 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2210      	movs	r2, #16
 800c344:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c34c:	4619      	mov	r1, r3
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f7fe fc74 	bl	800ac3c <HAL_UARTEx_RxEventCallback>
 800c354:	e002      	b.n	800c35c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f7f6 fdac 	bl	8002eb4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c35c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800c360:	2b00      	cmp	r3, #0
 800c362:	d006      	beq.n	800c372 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800c364:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c368:	f003 0320 	and.w	r3, r3, #32
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	f47f aecb 	bne.w	800c108 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c378:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c37c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c380:	2b00      	cmp	r3, #0
 800c382:	d049      	beq.n	800c418 <UART_RxISR_16BIT_FIFOEN+0x358>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c38a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800c38e:	429a      	cmp	r2, r3
 800c390:	d242      	bcs.n	800c418 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	3308      	adds	r3, #8
 800c398:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c39c:	e853 3f00 	ldrex	r3, [r3]
 800c3a0:	623b      	str	r3, [r7, #32]
   return(result);
 800c3a2:	6a3b      	ldr	r3, [r7, #32]
 800c3a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c3a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	3308      	adds	r3, #8
 800c3b2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c3b6:	633a      	str	r2, [r7, #48]	; 0x30
 800c3b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c3bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3be:	e841 2300 	strex	r3, r2, [r1]
 800c3c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d1e3      	bne.n	800c392 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	4a15      	ldr	r2, [pc, #84]	; (800c424 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800c3ce:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	e853 3f00 	ldrex	r3, [r3]
 800c3dc:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f043 0320 	orr.w	r3, r3, #32
 800c3e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	461a      	mov	r2, r3
 800c3ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c3f2:	61fb      	str	r3, [r7, #28]
 800c3f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f6:	69b9      	ldr	r1, [r7, #24]
 800c3f8:	69fa      	ldr	r2, [r7, #28]
 800c3fa:	e841 2300 	strex	r3, r2, [r1]
 800c3fe:	617b      	str	r3, [r7, #20]
   return(result);
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d1e4      	bne.n	800c3d0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c406:	e007      	b.n	800c418 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	699a      	ldr	r2, [r3, #24]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f042 0208 	orr.w	r2, r2, #8
 800c416:	619a      	str	r2, [r3, #24]
}
 800c418:	bf00      	nop
 800c41a:	37b8      	adds	r7, #184	; 0xb8
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}
 800c420:	40008000 	.word	0x40008000
 800c424:	0800bba9 	.word	0x0800bba9

0800c428 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c428:	b480      	push	{r7}
 800c42a:	b083      	sub	sp, #12
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c430:	bf00      	nop
 800c432:	370c      	adds	r7, #12
 800c434:	46bd      	mov	sp, r7
 800c436:	bc80      	pop	{r7}
 800c438:	4770      	bx	lr

0800c43a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c43a:	b480      	push	{r7}
 800c43c:	b083      	sub	sp, #12
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c442:	bf00      	nop
 800c444:	370c      	adds	r7, #12
 800c446:	46bd      	mov	sp, r7
 800c448:	bc80      	pop	{r7}
 800c44a:	4770      	bx	lr

0800c44c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b083      	sub	sp, #12
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c454:	bf00      	nop
 800c456:	370c      	adds	r7, #12
 800c458:	46bd      	mov	sp, r7
 800c45a:	bc80      	pop	{r7}
 800c45c:	4770      	bx	lr

0800c45e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800c45e:	b580      	push	{r7, lr}
 800c460:	b088      	sub	sp, #32
 800c462:	af02      	add	r7, sp, #8
 800c464:	60f8      	str	r0, [r7, #12]
 800c466:	1d3b      	adds	r3, r7, #4
 800c468:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800c46c:	2300      	movs	r3, #0
 800c46e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c476:	2b01      	cmp	r3, #1
 800c478:	d101      	bne.n	800c47e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800c47a:	2302      	movs	r3, #2
 800c47c:	e046      	b.n	800c50c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	2201      	movs	r2, #1
 800c482:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2224      	movs	r2, #36	; 0x24
 800c48a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	681a      	ldr	r2, [r3, #0]
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f022 0201 	bic.w	r2, r2, #1
 800c49c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	689b      	ldr	r3, [r3, #8]
 800c4a4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	430a      	orrs	r2, r1
 800c4b0:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d105      	bne.n	800c4c4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800c4b8:	1d3b      	adds	r3, r7, #4
 800c4ba:	e893 0006 	ldmia.w	r3, {r1, r2}
 800c4be:	68f8      	ldr	r0, [r7, #12]
 800c4c0:	f000 f911 	bl	800c6e6 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	681a      	ldr	r2, [r3, #0]
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f042 0201 	orr.w	r2, r2, #1
 800c4d2:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c4d4:	f7f5 ffea 	bl	80024ac <HAL_GetTick>
 800c4d8:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c4de:	9300      	str	r3, [sp, #0]
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c4e8:	68f8      	ldr	r0, [r7, #12]
 800c4ea:	f7fe ff16 	bl	800b31a <UART_WaitOnFlagUntilTimeout>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d002      	beq.n	800c4fa <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800c4f4:	2303      	movs	r3, #3
 800c4f6:	75fb      	strb	r3, [r7, #23]
 800c4f8:	e003      	b.n	800c502 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	2220      	movs	r2, #32
 800c4fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	2200      	movs	r2, #0
 800c506:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 800c50a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3718      	adds	r7, #24
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}

0800c514 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800c514:	b480      	push	{r7}
 800c516:	b089      	sub	sp, #36	; 0x24
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c522:	2b01      	cmp	r3, #1
 800c524:	d101      	bne.n	800c52a <HAL_UARTEx_EnableStopMode+0x16>
 800c526:	2302      	movs	r3, #2
 800c528:	e021      	b.n	800c56e <HAL_UARTEx_EnableStopMode+0x5a>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2201      	movs	r2, #1
 800c52e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	e853 3f00 	ldrex	r3, [r3]
 800c53e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	f043 0302 	orr.w	r3, r3, #2
 800c546:	61fb      	str	r3, [r7, #28]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	461a      	mov	r2, r3
 800c54e:	69fb      	ldr	r3, [r7, #28]
 800c550:	61bb      	str	r3, [r7, #24]
 800c552:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c554:	6979      	ldr	r1, [r7, #20]
 800c556:	69ba      	ldr	r2, [r7, #24]
 800c558:	e841 2300 	strex	r3, r2, [r1]
 800c55c:	613b      	str	r3, [r7, #16]
   return(result);
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d1e6      	bne.n	800c532 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2200      	movs	r2, #0
 800c568:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c56c:	2300      	movs	r3, #0
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3724      	adds	r7, #36	; 0x24
 800c572:	46bd      	mov	sp, r7
 800c574:	bc80      	pop	{r7}
 800c576:	4770      	bx	lr

0800c578 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c586:	2b01      	cmp	r3, #1
 800c588:	d101      	bne.n	800c58e <HAL_UARTEx_EnableFifoMode+0x16>
 800c58a:	2302      	movs	r3, #2
 800c58c:	e02b      	b.n	800c5e6 <HAL_UARTEx_EnableFifoMode+0x6e>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2201      	movs	r2, #1
 800c592:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2224      	movs	r2, #36	; 0x24
 800c59a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f022 0201 	bic.w	r2, r2, #1
 800c5b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c5bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c5c4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	68fa      	ldr	r2, [r7, #12]
 800c5cc:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 f8ac 	bl	800c72c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2220      	movs	r2, #32
 800c5d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c5e4:	2300      	movs	r3, #0
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3710      	adds	r7, #16
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}

0800c5ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c5ee:	b580      	push	{r7, lr}
 800c5f0:	b084      	sub	sp, #16
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
 800c5f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	d101      	bne.n	800c606 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c602:	2302      	movs	r3, #2
 800c604:	e02d      	b.n	800c662 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2201      	movs	r2, #1
 800c60a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2224      	movs	r2, #36	; 0x24
 800c612:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f022 0201 	bic.w	r2, r2, #1
 800c62c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	689b      	ldr	r3, [r3, #8]
 800c634:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	683a      	ldr	r2, [r7, #0]
 800c63e:	430a      	orrs	r2, r1
 800c640:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f000 f872 	bl	800c72c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	68fa      	ldr	r2, [r7, #12]
 800c64e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2220      	movs	r2, #32
 800c654:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2200      	movs	r2, #0
 800c65c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c660:	2300      	movs	r3, #0
}
 800c662:	4618      	mov	r0, r3
 800c664:	3710      	adds	r7, #16
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}

0800c66a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c66a:	b580      	push	{r7, lr}
 800c66c:	b084      	sub	sp, #16
 800c66e:	af00      	add	r7, sp, #0
 800c670:	6078      	str	r0, [r7, #4]
 800c672:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	d101      	bne.n	800c682 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c67e:	2302      	movs	r3, #2
 800c680:	e02d      	b.n	800c6de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2201      	movs	r2, #1
 800c686:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2224      	movs	r2, #36	; 0x24
 800c68e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	681a      	ldr	r2, [r3, #0]
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f022 0201 	bic.w	r2, r2, #1
 800c6a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	689b      	ldr	r3, [r3, #8]
 800c6b0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	683a      	ldr	r2, [r7, #0]
 800c6ba:	430a      	orrs	r2, r1
 800c6bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 f834 	bl	800c72c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	68fa      	ldr	r2, [r7, #12]
 800c6ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2220      	movs	r2, #32
 800c6d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c6dc:	2300      	movs	r3, #0
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3710      	adds	r7, #16
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}

0800c6e6 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800c6e6:	b480      	push	{r7}
 800c6e8:	b085      	sub	sp, #20
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	60f8      	str	r0, [r7, #12]
 800c6ee:	1d3b      	adds	r3, r7, #4
 800c6f0:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	f023 0210 	bic.w	r2, r3, #16
 800c6fe:	893b      	ldrh	r3, [r7, #8]
 800c700:	4619      	mov	r1, r3
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	430a      	orrs	r2, r1
 800c708:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800c714:	7abb      	ldrb	r3, [r7, #10]
 800c716:	061a      	lsls	r2, r3, #24
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	430a      	orrs	r2, r1
 800c71e:	605a      	str	r2, [r3, #4]
}
 800c720:	bf00      	nop
 800c722:	3714      	adds	r7, #20
 800c724:	46bd      	mov	sp, r7
 800c726:	bc80      	pop	{r7}
 800c728:	4770      	bx	lr
	...

0800c72c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c72c:	b480      	push	{r7}
 800c72e:	b085      	sub	sp, #20
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d108      	bne.n	800c74e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2201      	movs	r2, #1
 800c740:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2201      	movs	r2, #1
 800c748:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c74c:	e031      	b.n	800c7b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c74e:	2308      	movs	r3, #8
 800c750:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c752:	2308      	movs	r3, #8
 800c754:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	689b      	ldr	r3, [r3, #8]
 800c75c:	0e5b      	lsrs	r3, r3, #25
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	f003 0307 	and.w	r3, r3, #7
 800c764:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	689b      	ldr	r3, [r3, #8]
 800c76c:	0f5b      	lsrs	r3, r3, #29
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	f003 0307 	and.w	r3, r3, #7
 800c774:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c776:	7bbb      	ldrb	r3, [r7, #14]
 800c778:	7b3a      	ldrb	r2, [r7, #12]
 800c77a:	4910      	ldr	r1, [pc, #64]	; (800c7bc <UARTEx_SetNbDataToProcess+0x90>)
 800c77c:	5c8a      	ldrb	r2, [r1, r2]
 800c77e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c782:	7b3a      	ldrb	r2, [r7, #12]
 800c784:	490e      	ldr	r1, [pc, #56]	; (800c7c0 <UARTEx_SetNbDataToProcess+0x94>)
 800c786:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c788:	fb93 f3f2 	sdiv	r3, r3, r2
 800c78c:	b29a      	uxth	r2, r3
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c794:	7bfb      	ldrb	r3, [r7, #15]
 800c796:	7b7a      	ldrb	r2, [r7, #13]
 800c798:	4908      	ldr	r1, [pc, #32]	; (800c7bc <UARTEx_SetNbDataToProcess+0x90>)
 800c79a:	5c8a      	ldrb	r2, [r1, r2]
 800c79c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c7a0:	7b7a      	ldrb	r2, [r7, #13]
 800c7a2:	4907      	ldr	r1, [pc, #28]	; (800c7c0 <UARTEx_SetNbDataToProcess+0x94>)
 800c7a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c7a6:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7aa:	b29a      	uxth	r2, r3
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c7b2:	bf00      	nop
 800c7b4:	3714      	adds	r7, #20
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bc80      	pop	{r7}
 800c7ba:	4770      	bx	lr
 800c7bc:	080209cc 	.word	0x080209cc
 800c7c0:	080209d4 	.word	0x080209d4

0800c7c4 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800c7c8:	f7f5 fd16 	bl	80021f8 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800c7cc:	f000 f818 	bl	800c800 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800c7d0:	bf00      	nop
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800c7d8:	f3bf 8f4f 	dsb	sy
}
 800c7dc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800c7de:	4b06      	ldr	r3, [pc, #24]	; (800c7f8 <__NVIC_SystemReset+0x24>)
 800c7e0:	68db      	ldr	r3, [r3, #12]
 800c7e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800c7e6:	4904      	ldr	r1, [pc, #16]	; (800c7f8 <__NVIC_SystemReset+0x24>)
 800c7e8:	4b04      	ldr	r3, [pc, #16]	; (800c7fc <__NVIC_SystemReset+0x28>)
 800c7ea:	4313      	orrs	r3, r2
 800c7ec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c7ee:	f3bf 8f4f 	dsb	sy
}
 800c7f2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800c7f4:	bf00      	nop
 800c7f6:	e7fd      	b.n	800c7f4 <__NVIC_SystemReset+0x20>
 800c7f8:	e000ed00 	.word	0xe000ed00
 800c7fc:	05fa0004 	.word	0x05fa0004

0800c800 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b086      	sub	sp, #24
 800c804:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800c806:	2300      	movs	r3, #0
 800c808:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800c80a:	2300      	movs	r3, #0
 800c80c:	9302      	str	r3, [sp, #8]
 800c80e:	2303      	movs	r3, #3
 800c810:	9301      	str	r3, [sp, #4]
 800c812:	2301      	movs	r3, #1
 800c814:	9300      	str	r3, [sp, #0]
 800c816:	4b59      	ldr	r3, [pc, #356]	; (800c97c <LoRaWAN_Init+0x17c>)
 800c818:	2200      	movs	r2, #0
 800c81a:	2100      	movs	r1, #0
 800c81c:	2002      	movs	r0, #2
 800c81e:	f013 f87b 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800c822:	2300      	movs	r3, #0
 800c824:	9302      	str	r3, [sp, #8]
 800c826:	2305      	movs	r3, #5
 800c828:	9301      	str	r3, [sp, #4]
 800c82a:	2302      	movs	r3, #2
 800c82c:	9300      	str	r3, [sp, #0]
 800c82e:	4b54      	ldr	r3, [pc, #336]	; (800c980 <LoRaWAN_Init+0x180>)
 800c830:	2200      	movs	r2, #0
 800c832:	2100      	movs	r1, #0
 800c834:	2002      	movs	r0, #2
 800c836:	f013 f86f 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800c83a:	2300      	movs	r3, #0
 800c83c:	9302      	str	r3, [sp, #8]
 800c83e:	2303      	movs	r3, #3
 800c840:	9301      	str	r3, [sp, #4]
 800c842:	2301      	movs	r3, #1
 800c844:	9300      	str	r3, [sp, #0]
 800c846:	4b4f      	ldr	r3, [pc, #316]	; (800c984 <LoRaWAN_Init+0x184>)
 800c848:	2200      	movs	r2, #0
 800c84a:	2100      	movs	r1, #0
 800c84c:	2002      	movs	r0, #2
 800c84e:	f013 f863 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800c852:	1d3b      	adds	r3, r7, #4
 800c854:	4619      	mov	r1, r3
 800c856:	2000      	movs	r0, #0
 800c858:	f003 fa34 	bl	800fcc4 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	0e1b      	lsrs	r3, r3, #24
 800c860:	b2db      	uxtb	r3, r3
 800c862:	461a      	mov	r2, r3
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	0c1b      	lsrs	r3, r3, #16
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	4619      	mov	r1, r3
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	0a1b      	lsrs	r3, r3, #8
 800c870:	b2db      	uxtb	r3, r3
 800c872:	9302      	str	r3, [sp, #8]
 800c874:	9101      	str	r1, [sp, #4]
 800c876:	9200      	str	r2, [sp, #0]
 800c878:	4b43      	ldr	r3, [pc, #268]	; (800c988 <LoRaWAN_Init+0x188>)
 800c87a:	2200      	movs	r2, #0
 800c87c:	2100      	movs	r1, #0
 800c87e:	2002      	movs	r0, #2
 800c880:	f013 f84a 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800c884:	1d3b      	adds	r3, r7, #4
 800c886:	4619      	mov	r1, r3
 800c888:	2001      	movs	r0, #1
 800c88a:	f003 fa1b 	bl	800fcc4 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	0e1b      	lsrs	r3, r3, #24
 800c892:	b2db      	uxtb	r3, r3
 800c894:	461a      	mov	r2, r3
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	0c1b      	lsrs	r3, r3, #16
 800c89a:	b2db      	uxtb	r3, r3
 800c89c:	4619      	mov	r1, r3
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	0a1b      	lsrs	r3, r3, #8
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	b2c0      	uxtb	r0, r0
 800c8a8:	9003      	str	r0, [sp, #12]
 800c8aa:	9302      	str	r3, [sp, #8]
 800c8ac:	9101      	str	r1, [sp, #4]
 800c8ae:	9200      	str	r2, [sp, #0]
 800c8b0:	4b36      	ldr	r3, [pc, #216]	; (800c98c <LoRaWAN_Init+0x18c>)
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	2100      	movs	r1, #0
 800c8b6:	2002      	movs	r0, #2
 800c8b8:	f013 f82e 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800c8bc:	2300      	movs	r3, #0
 800c8be:	9300      	str	r3, [sp, #0]
 800c8c0:	4b33      	ldr	r3, [pc, #204]	; (800c990 <LoRaWAN_Init+0x190>)
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c8c8:	4832      	ldr	r0, [pc, #200]	; (800c994 <LoRaWAN_Init+0x194>)
 800c8ca:	f012 fd77 	bl	801f3bc <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	4b31      	ldr	r3, [pc, #196]	; (800c998 <LoRaWAN_Init+0x198>)
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c8da:	4830      	ldr	r0, [pc, #192]	; (800c99c <LoRaWAN_Init+0x19c>)
 800c8dc:	f012 fd6e 	bl	801f3bc <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	9300      	str	r3, [sp, #0]
 800c8e4:	4b2e      	ldr	r3, [pc, #184]	; (800c9a0 <LoRaWAN_Init+0x1a0>)
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c8ec:	482d      	ldr	r0, [pc, #180]	; (800c9a4 <LoRaWAN_Init+0x1a4>)
 800c8ee:	f012 fd65 	bl	801f3bc <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	9300      	str	r3, [sp, #0]
 800c8f6:	4b2c      	ldr	r3, [pc, #176]	; (800c9a8 <LoRaWAN_Init+0x1a8>)
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800c8fe:	482b      	ldr	r0, [pc, #172]	; (800c9ac <LoRaWAN_Init+0x1ac>)
 800c900:	f012 fd5c 	bl	801f3bc <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800c904:	4a2a      	ldr	r2, [pc, #168]	; (800c9b0 <LoRaWAN_Init+0x1b0>)
 800c906:	2100      	movs	r1, #0
 800c908:	2001      	movs	r0, #1
 800c90a:	f012 fcbf 	bl	801f28c <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800c90e:	4a29      	ldr	r2, [pc, #164]	; (800c9b4 <LoRaWAN_Init+0x1b4>)
 800c910:	2100      	movs	r1, #0
 800c912:	2002      	movs	r0, #2
 800c914:	f012 fcba 	bl	801f28c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800c918:	4a27      	ldr	r2, [pc, #156]	; (800c9b8 <LoRaWAN_Init+0x1b8>)
 800c91a:	2100      	movs	r1, #0
 800c91c:	2004      	movs	r0, #4
 800c91e:	f012 fcb5 	bl	801f28c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800c922:	4a26      	ldr	r2, [pc, #152]	; (800c9bc <LoRaWAN_Init+0x1bc>)
 800c924:	2100      	movs	r1, #0
 800c926:	2008      	movs	r0, #8
 800c928:	f012 fcb0 	bl	801f28c <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800c92c:	f000 fd22 	bl	800d374 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800c930:	4923      	ldr	r1, [pc, #140]	; (800c9c0 <LoRaWAN_Init+0x1c0>)
 800c932:	4824      	ldr	r0, [pc, #144]	; (800c9c4 <LoRaWAN_Init+0x1c4>)
 800c934:	f002 fa38 	bl	800eda8 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800c938:	4823      	ldr	r0, [pc, #140]	; (800c9c8 <LoRaWAN_Init+0x1c8>)
 800c93a:	f002 faa3 	bl	800ee84 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800c93e:	4819      	ldr	r0, [pc, #100]	; (800c9a4 <LoRaWAN_Init+0x1a4>)
 800c940:	f012 fd72 	bl	801f428 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800c944:	4b21      	ldr	r3, [pc, #132]	; (800c9cc <LoRaWAN_Init+0x1cc>)
 800c946:	781b      	ldrb	r3, [r3, #0]
 800c948:	4a21      	ldr	r2, [pc, #132]	; (800c9d0 <LoRaWAN_Init+0x1d0>)
 800c94a:	7812      	ldrb	r2, [r2, #0]
 800c94c:	4611      	mov	r1, r2
 800c94e:	4618      	mov	r0, r3
 800c950:	f002 fbf0 	bl	800f134 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800c954:	4b1f      	ldr	r3, [pc, #124]	; (800c9d4 <LoRaWAN_Init+0x1d4>)
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d10b      	bne.n	800c974 <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800c95c:	4b1e      	ldr	r3, [pc, #120]	; (800c9d8 <LoRaWAN_Init+0x1d8>)
 800c95e:	6819      	ldr	r1, [r3, #0]
 800c960:	2300      	movs	r3, #0
 800c962:	9300      	str	r3, [sp, #0]
 800c964:	4b1d      	ldr	r3, [pc, #116]	; (800c9dc <LoRaWAN_Init+0x1dc>)
 800c966:	2200      	movs	r2, #0
 800c968:	481d      	ldr	r0, [pc, #116]	; (800c9e0 <LoRaWAN_Init+0x1e0>)
 800c96a:	f012 fd27 	bl	801f3bc <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800c96e:	481c      	ldr	r0, [pc, #112]	; (800c9e0 <LoRaWAN_Init+0x1e0>)
 800c970:	f012 fd5a 	bl	801f428 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800c974:	bf00      	nop
 800c976:	3708      	adds	r7, #8
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}
 800c97c:	08020068 	.word	0x08020068
 800c980:	0802008c 	.word	0x0802008c
 800c984:	080200b0 	.word	0x080200b0
 800c988:	080200d4 	.word	0x080200d4
 800c98c:	080200f8 	.word	0x080200f8
 800c990:	0800ce95 	.word	0x0800ce95
 800c994:	200004a4 	.word	0x200004a4
 800c998:	0800cea7 	.word	0x0800cea7
 800c99c:	200004bc 	.word	0x200004bc
 800c9a0:	0800ceb9 	.word	0x0800ceb9
 800c9a4:	200004d4 	.word	0x200004d4
 800c9a8:	0800d275 	.word	0x0800d275
 800c9ac:	20000398 	.word	0x20000398
 800c9b0:	0800f0c9 	.word	0x0800f0c9
 800c9b4:	0800cb55 	.word	0x0800cb55
 800c9b8:	0800d299 	.word	0x0800d299
 800c9bc:	0800d1f5 	.word	0x0800d1f5
 800c9c0:	01030000 	.word	0x01030000
 800c9c4:	20000024 	.word	0x20000024
 800c9c8:	20000070 	.word	0x20000070
 800c9cc:	20000020 	.word	0x20000020
 800c9d0:	20000021 	.word	0x20000021
 800c9d4:	2000037c 	.word	0x2000037c
 800c9d8:	20000088 	.word	0x20000088
 800c9dc:	0800ce71 	.word	0x0800ce71
 800c9e0:	20000380 	.word	0x20000380

0800c9e4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b082      	sub	sp, #8
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800c9ee:	88fb      	ldrh	r3, [r7, #6]
 800c9f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c9f4:	d104      	bne.n	800ca00 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800c9f6:	2100      	movs	r1, #0
 800c9f8:	2002      	movs	r0, #2
 800c9fa:	f012 fc69 	bl	801f2d0 <UTIL_SEQ_SetTask>
      }
      break;
 800c9fe:	e000      	b.n	800ca02 <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 800ca00:	bf00      	nop
  }
}
 800ca02:	bf00      	nop
 800ca04:	3708      	adds	r7, #8
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}
	...

0800ca0c <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800ca0c:	b5b0      	push	{r4, r5, r7, lr}
 800ca0e:	b08a      	sub	sp, #40	; 0x28
 800ca10:	af06      	add	r7, sp, #24
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800ca16:	2300      	movs	r3, #0
 800ca18:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	f000 8086 	beq.w	800cb2e <OnRxData+0x122>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800ca22:	4845      	ldr	r0, [pc, #276]	; (800cb38 <OnRxData+0x12c>)
 800ca24:	f012 fd00 	bl	801f428 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d05a      	beq.n	800cae6 <OnRxData+0xda>
    {
      if (appData != NULL)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d057      	beq.n	800cae6 <OnRxData+0xda>
      {
        RxPort = appData->Port;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d050      	beq.n	800cae6 <OnRxData+0xda>
        {
          switch (appData->Port)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	2b02      	cmp	r3, #2
 800ca4a:	d01f      	beq.n	800ca8c <OnRxData+0x80>
 800ca4c:	2b03      	cmp	r3, #3
 800ca4e:	d145      	bne.n	800cadc <OnRxData+0xd0>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	785b      	ldrb	r3, [r3, #1]
 800ca54:	2b01      	cmp	r3, #1
 800ca56:	d143      	bne.n	800cae0 <OnRxData+0xd4>
              {
                switch (appData->Buffer[0])
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	2b02      	cmp	r3, #2
 800ca60:	d00e      	beq.n	800ca80 <OnRxData+0x74>
 800ca62:	2b02      	cmp	r3, #2
 800ca64:	dc10      	bgt.n	800ca88 <OnRxData+0x7c>
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d002      	beq.n	800ca70 <OnRxData+0x64>
 800ca6a:	2b01      	cmp	r3, #1
 800ca6c:	d004      	beq.n	800ca78 <OnRxData+0x6c>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800ca6e:	e00b      	b.n	800ca88 <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_A);
 800ca70:	2000      	movs	r0, #0
 800ca72:	f002 fd13 	bl	800f49c <LmHandlerRequestClass>
                    break;
 800ca76:	e008      	b.n	800ca8a <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_B);
 800ca78:	2001      	movs	r0, #1
 800ca7a:	f002 fd0f 	bl	800f49c <LmHandlerRequestClass>
                    break;
 800ca7e:	e004      	b.n	800ca8a <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_C);
 800ca80:	2002      	movs	r0, #2
 800ca82:	f002 fd0b 	bl	800f49c <LmHandlerRequestClass>
                    break;
 800ca86:	e000      	b.n	800ca8a <OnRxData+0x7e>
                    break;
 800ca88:	bf00      	nop
                }
              }
              break;
 800ca8a:	e029      	b.n	800cae0 <OnRxData+0xd4>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	785b      	ldrb	r3, [r3, #1]
 800ca90:	2b01      	cmp	r3, #1
 800ca92:	d127      	bne.n	800cae4 <OnRxData+0xd8>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	685b      	ldr	r3, [r3, #4]
 800ca98:	781b      	ldrb	r3, [r3, #0]
 800ca9a:	f003 0301 	and.w	r3, r3, #1
 800ca9e:	b2da      	uxtb	r2, r3
 800caa0:	4b26      	ldr	r3, [pc, #152]	; (800cb3c <OnRxData+0x130>)
 800caa2:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800caa4:	4b25      	ldr	r3, [pc, #148]	; (800cb3c <OnRxData+0x130>)
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d10b      	bne.n	800cac4 <OnRxData+0xb8>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800caac:	4b24      	ldr	r3, [pc, #144]	; (800cb40 <OnRxData+0x134>)
 800caae:	2200      	movs	r2, #0
 800cab0:	2100      	movs	r1, #0
 800cab2:	2003      	movs	r0, #3
 800cab4:	f012 ff30 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800cab8:	2201      	movs	r2, #1
 800caba:	2120      	movs	r1, #32
 800cabc:	4821      	ldr	r0, [pc, #132]	; (800cb44 <OnRxData+0x138>)
 800cabe:	f7fa faff 	bl	80070c0 <HAL_GPIO_WritePin>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
                }
              }
              break;
 800cac2:	e00f      	b.n	800cae4 <OnRxData+0xd8>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800cac4:	4b20      	ldr	r3, [pc, #128]	; (800cb48 <OnRxData+0x13c>)
 800cac6:	2200      	movs	r2, #0
 800cac8:	2100      	movs	r1, #0
 800caca:	2003      	movs	r0, #3
 800cacc:	f012 ff24 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800cad0:	2200      	movs	r2, #0
 800cad2:	2120      	movs	r1, #32
 800cad4:	481b      	ldr	r0, [pc, #108]	; (800cb44 <OnRxData+0x138>)
 800cad6:	f7fa faf3 	bl	80070c0 <HAL_GPIO_WritePin>
              break;
 800cada:	e003      	b.n	800cae4 <OnRxData+0xd8>

            default:

              break;
 800cadc:	bf00      	nop
 800cade:	e002      	b.n	800cae6 <OnRxData+0xda>
              break;
 800cae0:	bf00      	nop
 800cae2:	e000      	b.n	800cae6 <OnRxData+0xda>
              break;
 800cae4:	bf00      	nop
          }
        }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	7c1b      	ldrb	r3, [r3, #16]
 800caea:	2b05      	cmp	r3, #5
 800caec:	d81f      	bhi.n	800cb2e <OnRxData+0x122>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	68db      	ldr	r3, [r3, #12]
 800caf2:	7bfa      	ldrb	r2, [r7, #15]
 800caf4:	6839      	ldr	r1, [r7, #0]
 800caf6:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800cafa:	460c      	mov	r4, r1
 800cafc:	6839      	ldr	r1, [r7, #0]
 800cafe:	7c09      	ldrb	r1, [r1, #16]
 800cb00:	4608      	mov	r0, r1
 800cb02:	4912      	ldr	r1, [pc, #72]	; (800cb4c <OnRxData+0x140>)
 800cb04:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800cb08:	6838      	ldr	r0, [r7, #0]
 800cb0a:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800cb0e:	4605      	mov	r5, r0
 800cb10:	6838      	ldr	r0, [r7, #0]
 800cb12:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800cb16:	9005      	str	r0, [sp, #20]
 800cb18:	9504      	str	r5, [sp, #16]
 800cb1a:	9103      	str	r1, [sp, #12]
 800cb1c:	9402      	str	r4, [sp, #8]
 800cb1e:	9201      	str	r2, [sp, #4]
 800cb20:	9300      	str	r3, [sp, #0]
 800cb22:	4b0b      	ldr	r3, [pc, #44]	; (800cb50 <OnRxData+0x144>)
 800cb24:	2200      	movs	r2, #0
 800cb26:	2100      	movs	r1, #0
 800cb28:	2003      	movs	r0, #3
 800cb2a:	f012 fef5 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800cb2e:	bf00      	nop
 800cb30:	3710      	adds	r7, #16
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bdb0      	pop	{r4, r5, r7, pc}
 800cb36:	bf00      	nop
 800cb38:	200004bc 	.word	0x200004bc
 800cb3c:	200004a2 	.word	0x200004a2
 800cb40:	0802011c 	.word	0x0802011c
 800cb44:	48000400 	.word	0x48000400
 800cb48:	08020128 	.word	0x08020128
 800cb4c:	20000008 	.word	0x20000008
 800cb50:	08020134 	.word	0x08020134

0800cb54 <SendTxData>:

static void SendTxData(void)
{
 800cb54:	b590      	push	{r4, r7, lr}
 800cb56:	b091      	sub	sp, #68	; 0x44
 800cb58:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800cb5a:	23ff      	movs	r3, #255	; 0xff
 800cb5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t batteryLevel = GetBatteryLevel();
 800cb60:	f7f5 fb74 	bl	800224c <GetBatteryLevel>
 800cb64:	4603      	mov	r3, r0
 800cb66:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t pressure = 0;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	85bb      	strh	r3, [r7, #44]	; 0x2c
  int16_t temperature = 0;
 800cb72:	2300      	movs	r3, #0
 800cb74:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t humidity = 0;
 800cb76:	2300      	movs	r3, #0
 800cb78:	853b      	strh	r3, [r7, #40]	; 0x28
  uint32_t i = 0;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	633b      	str	r3, [r7, #48]	; 0x30
  int32_t latitude = 0;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t longitude = 0;
 800cb82:	2300      	movs	r3, #0
 800cb84:	623b      	str	r3, [r7, #32]
  uint16_t altitudeGps = 0;
 800cb86:	2300      	movs	r3, #0
 800cb88:	83fb      	strh	r3, [r7, #30]
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800cb8a:	1d3b      	adds	r3, r7, #4
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7f5 fd21 	bl	80025d4 <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800cb92:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cb96:	9300      	str	r3, [sp, #0]
 800cb98:	4b8f      	ldr	r3, [pc, #572]	; (800cdd8 <SendTxData+0x284>)
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	2100      	movs	r1, #0
 800cb9e:	2002      	movs	r0, #2
 800cba0:	f012 feba 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	4618      	mov	r0, r3
 800cba8:	f7f4 fa1a 	bl	8000fe0 <__aeabi_f2iz>
 800cbac:	4603      	mov	r3, r0
 800cbae:	b21b      	sxth	r3, r3
 800cbb0:	9300      	str	r3, [sp, #0]
 800cbb2:	4b8a      	ldr	r3, [pc, #552]	; (800cddc <SendTxData+0x288>)
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	2100      	movs	r1, #0
 800cbb8:	2002      	movs	r0, #2
 800cbba:	f012 fead 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800cbbe:	4b88      	ldr	r3, [pc, #544]	; (800cde0 <SendTxData+0x28c>)
 800cbc0:	2202      	movs	r2, #2
 800cbc2:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	4987      	ldr	r1, [pc, #540]	; (800cde4 <SendTxData+0x290>)
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f7f4 f8b9 	bl	8000d40 <__aeabi_fmul>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7f4 fa2b 	bl	800102c <__aeabi_f2uiz>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	853b      	strh	r3, [r7, #40]	; 0x28
  temperature = (int16_t)(sensor_data.temperature);
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f7f4 f9ff 	bl	8000fe0 <__aeabi_f2iz>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	857b      	strh	r3, [r7, #42]	; 0x2a
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	497f      	ldr	r1, [pc, #508]	; (800cde8 <SendTxData+0x294>)
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7f4 f8a8 	bl	8000d40 <__aeabi_fmul>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	497c      	ldr	r1, [pc, #496]	; (800cde4 <SendTxData+0x290>)
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7f4 f957 	bl	8000ea8 <__aeabi_fdiv>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f7f4 fa15 	bl	800102c <__aeabi_f2uiz>
 800cc02:	4603      	mov	r3, r0
 800cc04:	85bb      	strh	r3, [r7, #44]	; 0x2c

  AppData.Buffer[i++] = AppLedStateOn;
 800cc06:	4b76      	ldr	r3, [pc, #472]	; (800cde0 <SendTxData+0x28c>)
 800cc08:	685a      	ldr	r2, [r3, #4]
 800cc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0c:	1c59      	adds	r1, r3, #1
 800cc0e:	6339      	str	r1, [r7, #48]	; 0x30
 800cc10:	4413      	add	r3, r2
 800cc12:	4a76      	ldr	r2, [pc, #472]	; (800cdec <SendTxData+0x298>)
 800cc14:	7812      	ldrb	r2, [r2, #0]
 800cc16:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800cc18:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cc1a:	0a1b      	lsrs	r3, r3, #8
 800cc1c:	b298      	uxth	r0, r3
 800cc1e:	4b70      	ldr	r3, [pc, #448]	; (800cde0 <SendTxData+0x28c>)
 800cc20:	685a      	ldr	r2, [r3, #4]
 800cc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc24:	1c59      	adds	r1, r3, #1
 800cc26:	6339      	str	r1, [r7, #48]	; 0x30
 800cc28:	4413      	add	r3, r2
 800cc2a:	b2c2      	uxtb	r2, r0
 800cc2c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800cc2e:	4b6c      	ldr	r3, [pc, #432]	; (800cde0 <SendTxData+0x28c>)
 800cc30:	685a      	ldr	r2, [r3, #4]
 800cc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc34:	1c59      	adds	r1, r3, #1
 800cc36:	6339      	str	r1, [r7, #48]	; 0x30
 800cc38:	4413      	add	r3, r2
 800cc3a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800cc3c:	b2d2      	uxtb	r2, r2
 800cc3e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800cc40:	4b67      	ldr	r3, [pc, #412]	; (800cde0 <SendTxData+0x28c>)
 800cc42:	685a      	ldr	r2, [r3, #4]
 800cc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc46:	1c59      	adds	r1, r3, #1
 800cc48:	6339      	str	r1, [r7, #48]	; 0x30
 800cc4a:	4413      	add	r3, r2
 800cc4c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800cc4e:	b2d2      	uxtb	r2, r2
 800cc50:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800cc52:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cc54:	0a1b      	lsrs	r3, r3, #8
 800cc56:	b298      	uxth	r0, r3
 800cc58:	4b61      	ldr	r3, [pc, #388]	; (800cde0 <SendTxData+0x28c>)
 800cc5a:	685a      	ldr	r2, [r3, #4]
 800cc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc5e:	1c59      	adds	r1, r3, #1
 800cc60:	6339      	str	r1, [r7, #48]	; 0x30
 800cc62:	4413      	add	r3, r2
 800cc64:	b2c2      	uxtb	r2, r0
 800cc66:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800cc68:	4b5d      	ldr	r3, [pc, #372]	; (800cde0 <SendTxData+0x28c>)
 800cc6a:	685a      	ldr	r2, [r3, #4]
 800cc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6e:	1c59      	adds	r1, r3, #1
 800cc70:	6339      	str	r1, [r7, #48]	; 0x30
 800cc72:	4413      	add	r3, r2
 800cc74:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800cc76:	b2d2      	uxtb	r2, r2
 800cc78:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800cc7a:	4b5d      	ldr	r3, [pc, #372]	; (800cdf0 <SendTxData+0x29c>)
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	2b08      	cmp	r3, #8
 800cc80:	d007      	beq.n	800cc92 <SendTxData+0x13e>
 800cc82:	4b5b      	ldr	r3, [pc, #364]	; (800cdf0 <SendTxData+0x29c>)
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	2b01      	cmp	r3, #1
 800cc88:	d003      	beq.n	800cc92 <SendTxData+0x13e>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800cc8a:	4b59      	ldr	r3, [pc, #356]	; (800cdf0 <SendTxData+0x29c>)
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d120      	bne.n	800ccd4 <SendTxData+0x180>
  {
    AppData.Buffer[i++] = 0;
 800cc92:	4b53      	ldr	r3, [pc, #332]	; (800cde0 <SendTxData+0x28c>)
 800cc94:	685a      	ldr	r2, [r3, #4]
 800cc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc98:	1c59      	adds	r1, r3, #1
 800cc9a:	6339      	str	r1, [r7, #48]	; 0x30
 800cc9c:	4413      	add	r3, r2
 800cc9e:	2200      	movs	r2, #0
 800cca0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800cca2:	4b4f      	ldr	r3, [pc, #316]	; (800cde0 <SendTxData+0x28c>)
 800cca4:	685a      	ldr	r2, [r3, #4]
 800cca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca8:	1c59      	adds	r1, r3, #1
 800ccaa:	6339      	str	r1, [r7, #48]	; 0x30
 800ccac:	4413      	add	r3, r2
 800ccae:	2200      	movs	r2, #0
 800ccb0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800ccb2:	4b4b      	ldr	r3, [pc, #300]	; (800cde0 <SendTxData+0x28c>)
 800ccb4:	685a      	ldr	r2, [r3, #4]
 800ccb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb8:	1c59      	adds	r1, r3, #1
 800ccba:	6339      	str	r1, [r7, #48]	; 0x30
 800ccbc:	4413      	add	r3, r2
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800ccc2:	4b47      	ldr	r3, [pc, #284]	; (800cde0 <SendTxData+0x28c>)
 800ccc4:	685a      	ldr	r2, [r3, #4]
 800ccc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc8:	1c59      	adds	r1, r3, #1
 800ccca:	6339      	str	r1, [r7, #48]	; 0x30
 800cccc:	4413      	add	r3, r2
 800ccce:	2200      	movs	r2, #0
 800ccd0:	701a      	strb	r2, [r3, #0]
 800ccd2:	e05b      	b.n	800cd8c <SendTxData+0x238>
  }
  else
  {
    latitude = sensor_data.latitude;
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	627b      	str	r3, [r7, #36]	; 0x24
    longitude = sensor_data.longitude;
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	623b      	str	r3, [r7, #32]

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800ccdc:	4b40      	ldr	r3, [pc, #256]	; (800cde0 <SendTxData+0x28c>)
 800ccde:	685a      	ldr	r2, [r3, #4]
 800cce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce2:	1c59      	adds	r1, r3, #1
 800cce4:	6339      	str	r1, [r7, #48]	; 0x30
 800cce6:	18d4      	adds	r4, r2, r3
 800cce8:	f7f5 fab0 	bl	800224c <GetBatteryLevel>
 800ccec:	4603      	mov	r3, r0
 800ccee:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800ccf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf2:	1418      	asrs	r0, r3, #16
 800ccf4:	4b3a      	ldr	r3, [pc, #232]	; (800cde0 <SendTxData+0x28c>)
 800ccf6:	685a      	ldr	r2, [r3, #4]
 800ccf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfa:	1c59      	adds	r1, r3, #1
 800ccfc:	6339      	str	r1, [r7, #48]	; 0x30
 800ccfe:	4413      	add	r3, r2
 800cd00:	b2c2      	uxtb	r2, r0
 800cd02:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800cd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd06:	1218      	asrs	r0, r3, #8
 800cd08:	4b35      	ldr	r3, [pc, #212]	; (800cde0 <SendTxData+0x28c>)
 800cd0a:	685a      	ldr	r2, [r3, #4]
 800cd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd0e:	1c59      	adds	r1, r3, #1
 800cd10:	6339      	str	r1, [r7, #48]	; 0x30
 800cd12:	4413      	add	r3, r2
 800cd14:	b2c2      	uxtb	r2, r0
 800cd16:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800cd18:	4b31      	ldr	r3, [pc, #196]	; (800cde0 <SendTxData+0x28c>)
 800cd1a:	685a      	ldr	r2, [r3, #4]
 800cd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd1e:	1c59      	adds	r1, r3, #1
 800cd20:	6339      	str	r1, [r7, #48]	; 0x30
 800cd22:	4413      	add	r3, r2
 800cd24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd26:	b2d2      	uxtb	r2, r2
 800cd28:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800cd2a:	6a3b      	ldr	r3, [r7, #32]
 800cd2c:	1418      	asrs	r0, r3, #16
 800cd2e:	4b2c      	ldr	r3, [pc, #176]	; (800cde0 <SendTxData+0x28c>)
 800cd30:	685a      	ldr	r2, [r3, #4]
 800cd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd34:	1c59      	adds	r1, r3, #1
 800cd36:	6339      	str	r1, [r7, #48]	; 0x30
 800cd38:	4413      	add	r3, r2
 800cd3a:	b2c2      	uxtb	r2, r0
 800cd3c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800cd3e:	6a3b      	ldr	r3, [r7, #32]
 800cd40:	1218      	asrs	r0, r3, #8
 800cd42:	4b27      	ldr	r3, [pc, #156]	; (800cde0 <SendTxData+0x28c>)
 800cd44:	685a      	ldr	r2, [r3, #4]
 800cd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd48:	1c59      	adds	r1, r3, #1
 800cd4a:	6339      	str	r1, [r7, #48]	; 0x30
 800cd4c:	4413      	add	r3, r2
 800cd4e:	b2c2      	uxtb	r2, r0
 800cd50:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800cd52:	4b23      	ldr	r3, [pc, #140]	; (800cde0 <SendTxData+0x28c>)
 800cd54:	685a      	ldr	r2, [r3, #4]
 800cd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd58:	1c59      	adds	r1, r3, #1
 800cd5a:	6339      	str	r1, [r7, #48]	; 0x30
 800cd5c:	4413      	add	r3, r2
 800cd5e:	6a3a      	ldr	r2, [r7, #32]
 800cd60:	b2d2      	uxtb	r2, r2
 800cd62:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800cd64:	8bfb      	ldrh	r3, [r7, #30]
 800cd66:	0a1b      	lsrs	r3, r3, #8
 800cd68:	b298      	uxth	r0, r3
 800cd6a:	4b1d      	ldr	r3, [pc, #116]	; (800cde0 <SendTxData+0x28c>)
 800cd6c:	685a      	ldr	r2, [r3, #4]
 800cd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd70:	1c59      	adds	r1, r3, #1
 800cd72:	6339      	str	r1, [r7, #48]	; 0x30
 800cd74:	4413      	add	r3, r2
 800cd76:	b2c2      	uxtb	r2, r0
 800cd78:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800cd7a:	4b19      	ldr	r3, [pc, #100]	; (800cde0 <SendTxData+0x28c>)
 800cd7c:	685a      	ldr	r2, [r3, #4]
 800cd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd80:	1c59      	adds	r1, r3, #1
 800cd82:	6339      	str	r1, [r7, #48]	; 0x30
 800cd84:	4413      	add	r3, r2
 800cd86:	8bfa      	ldrh	r2, [r7, #30]
 800cd88:	b2d2      	uxtb	r2, r2
 800cd8a:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800cd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8e:	b2da      	uxtb	r2, r3
 800cd90:	4b13      	ldr	r3, [pc, #76]	; (800cde0 <SendTxData+0x28c>)
 800cd92:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800cd94:	4b17      	ldr	r3, [pc, #92]	; (800cdf4 <SendTxData+0x2a0>)
 800cd96:	7a5b      	ldrb	r3, [r3, #9]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d007      	beq.n	800cdac <SendTxData+0x258>
 800cd9c:	f002 fa6c 	bl	800f278 <LmHandlerJoinStatus>
 800cda0:	4603      	mov	r3, r0
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d102      	bne.n	800cdac <SendTxData+0x258>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800cda6:	4813      	ldr	r0, [pc, #76]	; (800cdf4 <SendTxData+0x2a0>)
 800cda8:	f012 fbac 	bl	801f504 <UTIL_TIMER_Stop>
#if 0   // XXX:
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800cdac:	4b10      	ldr	r3, [pc, #64]	; (800cdf0 <SendTxData+0x29c>)
 800cdae:	78db      	ldrb	r3, [r3, #3]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	4619      	mov	r1, r3
 800cdb4:	480a      	ldr	r0, [pc, #40]	; (800cde0 <SendTxData+0x28c>)
 800cdb6:	f002 fa7b 	bl	800f2b0 <LmHandlerSend>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (LORAMAC_HANDLER_SUCCESS == status)
 800cdc0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d119      	bne.n	800cdfc <SendTxData+0x2a8>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800cdc8:	4b0b      	ldr	r3, [pc, #44]	; (800cdf8 <SendTxData+0x2a4>)
 800cdca:	2201      	movs	r2, #1
 800cdcc:	2100      	movs	r1, #0
 800cdce:	2001      	movs	r0, #1
 800cdd0:	f012 fda2 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
 800cdd4:	e029      	b.n	800ce2a <SendTxData+0x2d6>
 800cdd6:	bf00      	nop
 800cdd8:	0802017c 	.word	0x0802017c
 800cddc:	08020188 	.word	0x08020188
 800cde0:	2000008c 	.word	0x2000008c
 800cde4:	41200000 	.word	0x41200000
 800cde8:	42c80000 	.word	0x42c80000
 800cdec:	200004a2 	.word	0x200004a2
 800cdf0:	20000070 	.word	0x20000070
 800cdf4:	200004d4 	.word	0x200004d4
 800cdf8:	08020194 	.word	0x08020194
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800cdfc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ce00:	f113 0f06 	cmn.w	r3, #6
 800ce04:	d111      	bne.n	800ce2a <SendTxData+0x2d6>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800ce06:	f002 f98b 	bl	800f120 <LmHandlerGetDutyCycleWaitTime>
 800ce0a:	6378      	str	r0, [r7, #52]	; 0x34
    if (nextTxIn > 0)
 800ce0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d00b      	beq.n	800ce2a <SendTxData+0x2d6>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800ce12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce14:	4a11      	ldr	r2, [pc, #68]	; (800ce5c <SendTxData+0x308>)
 800ce16:	fba2 2303 	umull	r2, r3, r2, r3
 800ce1a:	099b      	lsrs	r3, r3, #6
 800ce1c:	9300      	str	r3, [sp, #0]
 800ce1e:	4b10      	ldr	r3, [pc, #64]	; (800ce60 <SendTxData+0x30c>)
 800ce20:	2201      	movs	r2, #1
 800ce22:	2100      	movs	r1, #0
 800ce24:	2001      	movs	r0, #1
 800ce26:	f012 fd77 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800ce2a:	4b0e      	ldr	r3, [pc, #56]	; (800ce64 <SendTxData+0x310>)
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d10f      	bne.n	800ce52 <SendTxData+0x2fe>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800ce32:	480d      	ldr	r0, [pc, #52]	; (800ce68 <SendTxData+0x314>)
 800ce34:	f012 fb66 	bl	801f504 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800ce38:	4b0c      	ldr	r3, [pc, #48]	; (800ce6c <SendTxData+0x318>)
 800ce3a:	681a      	ldr	r2, [r3, #0]
 800ce3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	bf38      	it	cc
 800ce42:	4613      	movcc	r3, r2
 800ce44:	4619      	mov	r1, r3
 800ce46:	4808      	ldr	r0, [pc, #32]	; (800ce68 <SendTxData+0x314>)
 800ce48:	f012 fbcc 	bl	801f5e4 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800ce4c:	4806      	ldr	r0, [pc, #24]	; (800ce68 <SendTxData+0x314>)
 800ce4e:	f012 faeb 	bl	801f428 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800ce52:	bf00      	nop
 800ce54:	373c      	adds	r7, #60	; 0x3c
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd90      	pop	{r4, r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	10624dd3 	.word	0x10624dd3
 800ce60:	080201a4 	.word	0x080201a4
 800ce64:	2000037c 	.word	0x2000037c
 800ce68:	20000380 	.word	0x20000380
 800ce6c:	20000088 	.word	0x20000088

0800ce70 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800ce78:	2100      	movs	r1, #0
 800ce7a:	2002      	movs	r0, #2
 800ce7c:	f012 fa28 	bl	801f2d0 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800ce80:	4803      	ldr	r0, [pc, #12]	; (800ce90 <OnTxTimerEvent+0x20>)
 800ce82:	f012 fad1 	bl	801f428 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800ce86:	bf00      	nop
 800ce88:	3708      	adds	r7, #8
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
 800ce8e:	bf00      	nop
 800ce90:	20000380 	.word	0x20000380

0800ce94 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b083      	sub	sp, #12
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800ce9c:	bf00      	nop
 800ce9e:	370c      	adds	r7, #12
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bc80      	pop	{r7}
 800cea4:	4770      	bx	lr

0800cea6 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800cea6:	b480      	push	{r7}
 800cea8:	b083      	sub	sp, #12
 800ceaa:	af00      	add	r7, sp, #0
 800ceac:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800ceae:	bf00      	nop
 800ceb0:	370c      	adds	r7, #12
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bc80      	pop	{r7}
 800ceb6:	4770      	bx	lr

0800ceb8 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b083      	sub	sp, #12
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800cec0:	bf00      	nop
 800cec2:	370c      	adds	r7, #12
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bc80      	pop	{r7}
 800cec8:	4770      	bx	lr
	...

0800cecc <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b086      	sub	sp, #24
 800ced0:	af04      	add	r7, sp, #16
 800ced2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d041      	beq.n	800cf5e <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d03d      	beq.n	800cf5e <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800cee2:	4821      	ldr	r0, [pc, #132]	; (800cf68 <OnTxData+0x9c>)
 800cee4:	f012 faa0 	bl	801f428 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800cee8:	4b20      	ldr	r3, [pc, #128]	; (800cf6c <OnTxData+0xa0>)
 800ceea:	2200      	movs	r2, #0
 800ceec:	2100      	movs	r1, #0
 800ceee:	2002      	movs	r0, #2
 800cef0:	f012 fd12 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	68db      	ldr	r3, [r3, #12]
 800cef8:	687a      	ldr	r2, [r7, #4]
 800cefa:	7c12      	ldrb	r2, [r2, #16]
 800cefc:	4611      	mov	r1, r2
 800cefe:	687a      	ldr	r2, [r7, #4]
 800cf00:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800cf04:	4610      	mov	r0, r2
 800cf06:	687a      	ldr	r2, [r7, #4]
 800cf08:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800cf0c:	9203      	str	r2, [sp, #12]
 800cf0e:	9002      	str	r0, [sp, #8]
 800cf10:	9101      	str	r1, [sp, #4]
 800cf12:	9300      	str	r3, [sp, #0]
 800cf14:	4b16      	ldr	r3, [pc, #88]	; (800cf70 <OnTxData+0xa4>)
 800cf16:	2200      	movs	r2, #0
 800cf18:	2100      	movs	r1, #0
 800cf1a:	2003      	movs	r0, #3
 800cf1c:	f012 fcfc 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800cf20:	4b14      	ldr	r3, [pc, #80]	; (800cf74 <OnTxData+0xa8>)
 800cf22:	2200      	movs	r2, #0
 800cf24:	2100      	movs	r1, #0
 800cf26:	2003      	movs	r0, #3
 800cf28:	f012 fcf6 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	7a1b      	ldrb	r3, [r3, #8]
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	d10e      	bne.n	800cf52 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	7a5b      	ldrb	r3, [r3, #9]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d001      	beq.n	800cf40 <OnTxData+0x74>
 800cf3c:	4b0e      	ldr	r3, [pc, #56]	; (800cf78 <OnTxData+0xac>)
 800cf3e:	e000      	b.n	800cf42 <OnTxData+0x76>
 800cf40:	4b0e      	ldr	r3, [pc, #56]	; (800cf7c <OnTxData+0xb0>)
 800cf42:	9300      	str	r3, [sp, #0]
 800cf44:	4b0e      	ldr	r3, [pc, #56]	; (800cf80 <OnTxData+0xb4>)
 800cf46:	2200      	movs	r2, #0
 800cf48:	2100      	movs	r1, #0
 800cf4a:	2003      	movs	r0, #3
 800cf4c:	f012 fce4 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800cf50:	e005      	b.n	800cf5e <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800cf52:	4b0c      	ldr	r3, [pc, #48]	; (800cf84 <OnTxData+0xb8>)
 800cf54:	2200      	movs	r2, #0
 800cf56:	2100      	movs	r1, #0
 800cf58:	2003      	movs	r0, #3
 800cf5a:	f012 fcdd 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
}
 800cf5e:	bf00      	nop
 800cf60:	3708      	adds	r7, #8
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	200004a4 	.word	0x200004a4
 800cf6c:	080201c4 	.word	0x080201c4
 800cf70:	080201f8 	.word	0x080201f8
 800cf74:	0802022c 	.word	0x0802022c
 800cf78:	0802023c 	.word	0x0802023c
 800cf7c:	08020240 	.word	0x08020240
 800cf80:	08020248 	.word	0x08020248
 800cf84:	0802025c 	.word	0x0802025c

0800cf88 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b082      	sub	sp, #8
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d039      	beq.n	800d00a <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d11e      	bne.n	800cfde <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800cfa0:	2100      	movs	r1, #0
 800cfa2:	2004      	movs	r0, #4
 800cfa4:	f012 f994 	bl	801f2d0 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800cfa8:	481a      	ldr	r0, [pc, #104]	; (800d014 <OnJoinRequest+0x8c>)
 800cfaa:	f012 faab 	bl	801f504 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800cfae:	4b1a      	ldr	r3, [pc, #104]	; (800d018 <OnJoinRequest+0x90>)
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	2100      	movs	r1, #0
 800cfb4:	2002      	movs	r0, #2
 800cfb6:	f012 fcaf 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	79db      	ldrb	r3, [r3, #7]
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	d106      	bne.n	800cfd0 <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800cfc2:	4b16      	ldr	r3, [pc, #88]	; (800d01c <OnJoinRequest+0x94>)
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	2100      	movs	r1, #0
 800cfc8:	2002      	movs	r0, #2
 800cfca:	f012 fca5 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800cfce:	e01c      	b.n	800d00a <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800cfd0:	4b13      	ldr	r3, [pc, #76]	; (800d020 <OnJoinRequest+0x98>)
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	2100      	movs	r1, #0
 800cfd6:	2002      	movs	r0, #2
 800cfd8:	f012 fc9e 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
}
 800cfdc:	e015      	b.n	800d00a <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800cfde:	4b11      	ldr	r3, [pc, #68]	; (800d024 <OnJoinRequest+0x9c>)
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	2100      	movs	r1, #0
 800cfe4:	2002      	movs	r0, #2
 800cfe6:	f012 fc97 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	79db      	ldrb	r3, [r3, #7]
 800cfee:	2b02      	cmp	r3, #2
 800cff0:	d10b      	bne.n	800d00a <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800cff2:	4b0d      	ldr	r3, [pc, #52]	; (800d028 <OnJoinRequest+0xa0>)
 800cff4:	2200      	movs	r2, #0
 800cff6:	2100      	movs	r1, #0
 800cff8:	2002      	movs	r0, #2
 800cffa:	f012 fc8d 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800cffe:	4b0b      	ldr	r3, [pc, #44]	; (800d02c <OnJoinRequest+0xa4>)
 800d000:	781b      	ldrb	r3, [r3, #0]
 800d002:	2101      	movs	r1, #1
 800d004:	4618      	mov	r0, r3
 800d006:	f002 f895 	bl	800f134 <LmHandlerJoin>
}
 800d00a:	bf00      	nop
 800d00c:	3708      	adds	r7, #8
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	200004d4 	.word	0x200004d4
 800d018:	0802026c 	.word	0x0802026c
 800d01c:	08020284 	.word	0x08020284
 800d020:	080202a4 	.word	0x080202a4
 800d024:	080202c4 	.word	0x080202c4
 800d028:	080202e0 	.word	0x080202e0
 800d02c:	20000020 	.word	0x20000020

0800d030 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800d030:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d032:	b093      	sub	sp, #76	; 0x4c
 800d034:	af0c      	add	r7, sp, #48	; 0x30
 800d036:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d056      	beq.n	800d0ec <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	785b      	ldrb	r3, [r3, #1]
 800d042:	2b02      	cmp	r3, #2
 800d044:	d008      	beq.n	800d058 <OnBeaconStatusChange+0x28>
 800d046:	2b03      	cmp	r3, #3
 800d048:	d049      	beq.n	800d0de <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800d04a:	4b2a      	ldr	r3, [pc, #168]	; (800d0f4 <OnBeaconStatusChange+0xc4>)
 800d04c:	2200      	movs	r2, #0
 800d04e:	2100      	movs	r1, #0
 800d050:	2002      	movs	r0, #2
 800d052:	f012 fc61 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800d056:	e049      	b.n	800d0ec <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	7c1b      	ldrb	r3, [r3, #16]
 800d05c:	4618      	mov	r0, r3
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800d064:	461c      	mov	r4, r3
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800d06c:	461d      	mov	r5, r3
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	68db      	ldr	r3, [r3, #12]
 800d072:	697a      	ldr	r2, [r7, #20]
 800d074:	6852      	ldr	r2, [r2, #4]
 800d076:	6979      	ldr	r1, [r7, #20]
 800d078:	7d89      	ldrb	r1, [r1, #22]
 800d07a:	460e      	mov	r6, r1
 800d07c:	6979      	ldr	r1, [r7, #20]
 800d07e:	7dc9      	ldrb	r1, [r1, #23]
 800d080:	6139      	str	r1, [r7, #16]
 800d082:	6979      	ldr	r1, [r7, #20]
 800d084:	7e09      	ldrb	r1, [r1, #24]
 800d086:	60f9      	str	r1, [r7, #12]
 800d088:	6979      	ldr	r1, [r7, #20]
 800d08a:	7e49      	ldrb	r1, [r1, #25]
 800d08c:	60b9      	str	r1, [r7, #8]
 800d08e:	6979      	ldr	r1, [r7, #20]
 800d090:	7e89      	ldrb	r1, [r1, #26]
 800d092:	6079      	str	r1, [r7, #4]
 800d094:	6979      	ldr	r1, [r7, #20]
 800d096:	7ec9      	ldrb	r1, [r1, #27]
 800d098:	6039      	str	r1, [r7, #0]
 800d09a:	6979      	ldr	r1, [r7, #20]
 800d09c:	7f09      	ldrb	r1, [r1, #28]
 800d09e:	910b      	str	r1, [sp, #44]	; 0x2c
 800d0a0:	f8d7 c000 	ldr.w	ip, [r7]
 800d0a4:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800d0a8:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800d0ac:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800d0b0:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800d0b4:	f8cd c020 	str.w	ip, [sp, #32]
 800d0b8:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800d0bc:	f8cd c01c 	str.w	ip, [sp, #28]
 800d0c0:	6939      	ldr	r1, [r7, #16]
 800d0c2:	9106      	str	r1, [sp, #24]
 800d0c4:	9605      	str	r6, [sp, #20]
 800d0c6:	9204      	str	r2, [sp, #16]
 800d0c8:	9303      	str	r3, [sp, #12]
 800d0ca:	9502      	str	r5, [sp, #8]
 800d0cc:	9401      	str	r4, [sp, #4]
 800d0ce:	9000      	str	r0, [sp, #0]
 800d0d0:	4b09      	ldr	r3, [pc, #36]	; (800d0f8 <OnBeaconStatusChange+0xc8>)
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	2100      	movs	r1, #0
 800d0d6:	2002      	movs	r0, #2
 800d0d8:	f012 fc1e 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800d0dc:	e006      	b.n	800d0ec <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800d0de:	4b07      	ldr	r3, [pc, #28]	; (800d0fc <OnBeaconStatusChange+0xcc>)
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	2100      	movs	r1, #0
 800d0e4:	2002      	movs	r0, #2
 800d0e6:	f012 fc17 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800d0ea:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800d0ec:	bf00      	nop
 800d0ee:	371c      	adds	r7, #28
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0f4:	08020304 	.word	0x08020304
 800d0f8:	0802031c 	.word	0x0802031c
 800d0fc:	08020390 	.word	0x08020390

0800d100 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800d100:	b480      	push	{r7}
 800d102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800d104:	bf00      	nop
 800d106:	46bd      	mov	sp, r7
 800d108:	bc80      	pop	{r7}
 800d10a:	4770      	bx	lr

0800d10c <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b084      	sub	sp, #16
 800d110:	af02      	add	r7, sp, #8
 800d112:	4603      	mov	r3, r0
 800d114:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800d116:	79fb      	ldrb	r3, [r7, #7]
 800d118:	4a06      	ldr	r2, [pc, #24]	; (800d134 <OnClassChange+0x28>)
 800d11a:	5cd3      	ldrb	r3, [r2, r3]
 800d11c:	9300      	str	r3, [sp, #0]
 800d11e:	4b06      	ldr	r3, [pc, #24]	; (800d138 <OnClassChange+0x2c>)
 800d120:	2200      	movs	r2, #0
 800d122:	2100      	movs	r1, #0
 800d124:	2002      	movs	r0, #2
 800d126:	f012 fbf7 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800d12a:	bf00      	nop
 800d12c:	3708      	adds	r7, #8
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
 800d132:	bf00      	nop
 800d134:	080203cc 	.word	0x080203cc
 800d138:	080203b0 	.word	0x080203b0

0800d13c <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800d140:	2100      	movs	r1, #0
 800d142:	2001      	movs	r0, #1
 800d144:	f012 f8c4 	bl	801f2d0 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800d148:	bf00      	nop
 800d14a:	bd80      	pop	{r7, pc}

0800d14c <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800d154:	4a0d      	ldr	r2, [pc, #52]	; (800d18c <OnTxPeriodicityChanged+0x40>)
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800d15a:	4b0c      	ldr	r3, [pc, #48]	; (800d18c <OnTxPeriodicityChanged+0x40>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d103      	bne.n	800d16a <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800d162:	4b0a      	ldr	r3, [pc, #40]	; (800d18c <OnTxPeriodicityChanged+0x40>)
 800d164:	f242 7210 	movw	r2, #10000	; 0x2710
 800d168:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800d16a:	4809      	ldr	r0, [pc, #36]	; (800d190 <OnTxPeriodicityChanged+0x44>)
 800d16c:	f012 f9ca 	bl	801f504 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800d170:	4b06      	ldr	r3, [pc, #24]	; (800d18c <OnTxPeriodicityChanged+0x40>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	4619      	mov	r1, r3
 800d176:	4806      	ldr	r0, [pc, #24]	; (800d190 <OnTxPeriodicityChanged+0x44>)
 800d178:	f012 fa34 	bl	801f5e4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800d17c:	4804      	ldr	r0, [pc, #16]	; (800d190 <OnTxPeriodicityChanged+0x44>)
 800d17e:	f012 f953 	bl	801f428 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800d182:	bf00      	nop
 800d184:	3708      	adds	r7, #8
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
 800d18a:	bf00      	nop
 800d18c:	20000088 	.word	0x20000088
 800d190:	20000380 	.word	0x20000380

0800d194 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800d194:	b480      	push	{r7}
 800d196:	b083      	sub	sp, #12
 800d198:	af00      	add	r7, sp, #0
 800d19a:	4603      	mov	r3, r0
 800d19c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800d19e:	4a04      	ldr	r2, [pc, #16]	; (800d1b0 <OnTxFrameCtrlChanged+0x1c>)
 800d1a0:	79fb      	ldrb	r3, [r7, #7]
 800d1a2:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800d1a4:	bf00      	nop
 800d1a6:	370c      	adds	r7, #12
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bc80      	pop	{r7}
 800d1ac:	4770      	bx	lr
 800d1ae:	bf00      	nop
 800d1b0:	20000070 	.word	0x20000070

0800d1b4 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b083      	sub	sp, #12
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800d1be:	4a04      	ldr	r2, [pc, #16]	; (800d1d0 <OnPingSlotPeriodicityChanged+0x1c>)
 800d1c0:	79fb      	ldrb	r3, [r7, #7]
 800d1c2:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800d1c4:	bf00      	nop
 800d1c6:	370c      	adds	r7, #12
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bc80      	pop	{r7}
 800d1cc:	4770      	bx	lr
 800d1ce:	bf00      	nop
 800d1d0:	20000070 	.word	0x20000070

0800d1d4 <OnSystemReset>:

static void OnSystemReset(void)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800d1d8:	f002 fda5 	bl	800fd26 <LmHandlerHalt>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d106      	bne.n	800d1f0 <OnSystemReset+0x1c>
 800d1e2:	f002 f849 	bl	800f278 <LmHandlerJoinStatus>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	2b01      	cmp	r3, #1
 800d1ea:	d101      	bne.n	800d1f0 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800d1ec:	f7ff faf2 	bl	800c7d4 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800d1f0:	bf00      	nop
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <StopJoin>:

static void StopJoin(void)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800d1f8:	4817      	ldr	r0, [pc, #92]	; (800d258 <StopJoin+0x64>)
 800d1fa:	f012 f983 	bl	801f504 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800d1fe:	f002 fd85 	bl	800fd0c <LmHandlerStop>
 800d202:	4603      	mov	r3, r0
 800d204:	2b00      	cmp	r3, #0
 800d206:	d006      	beq.n	800d216 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800d208:	4b14      	ldr	r3, [pc, #80]	; (800d25c <StopJoin+0x68>)
 800d20a:	2200      	movs	r2, #0
 800d20c:	2100      	movs	r1, #0
 800d20e:	2002      	movs	r0, #2
 800d210:	f012 fb82 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
 800d214:	e01a      	b.n	800d24c <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800d216:	4b12      	ldr	r3, [pc, #72]	; (800d260 <StopJoin+0x6c>)
 800d218:	2200      	movs	r2, #0
 800d21a:	2100      	movs	r1, #0
 800d21c:	2002      	movs	r0, #2
 800d21e:	f012 fb7b 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800d222:	4b10      	ldr	r3, [pc, #64]	; (800d264 <StopJoin+0x70>)
 800d224:	2201      	movs	r2, #1
 800d226:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800d228:	4b0f      	ldr	r3, [pc, #60]	; (800d268 <StopJoin+0x74>)
 800d22a:	2200      	movs	r2, #0
 800d22c:	2100      	movs	r1, #0
 800d22e:	2002      	movs	r0, #2
 800d230:	f012 fb72 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800d234:	480d      	ldr	r0, [pc, #52]	; (800d26c <StopJoin+0x78>)
 800d236:	f001 fe25 	bl	800ee84 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800d23a:	4b0a      	ldr	r3, [pc, #40]	; (800d264 <StopJoin+0x70>)
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	2101      	movs	r1, #1
 800d240:	4618      	mov	r0, r3
 800d242:	f001 ff77 	bl	800f134 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800d246:	4804      	ldr	r0, [pc, #16]	; (800d258 <StopJoin+0x64>)
 800d248:	f012 f8ee 	bl	801f428 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800d24c:	4808      	ldr	r0, [pc, #32]	; (800d270 <StopJoin+0x7c>)
 800d24e:	f012 f8eb 	bl	801f428 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800d252:	bf00      	nop
 800d254:	bd80      	pop	{r7, pc}
 800d256:	bf00      	nop
 800d258:	20000380 	.word	0x20000380
 800d25c:	080203d0 	.word	0x080203d0
 800d260:	080203f0 	.word	0x080203f0
 800d264:	20000020 	.word	0x20000020
 800d268:	08020404 	.word	0x08020404
 800d26c:	20000070 	.word	0x20000070
 800d270:	20000398 	.word	0x20000398

0800d274 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b082      	sub	sp, #8
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800d27c:	4b05      	ldr	r3, [pc, #20]	; (800d294 <OnStopJoinTimerEvent+0x20>)
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	2b02      	cmp	r3, #2
 800d282:	d103      	bne.n	800d28c <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800d284:	2100      	movs	r1, #0
 800d286:	2008      	movs	r0, #8
 800d288:	f012 f822 	bl	801f2d0 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800d28c:	bf00      	nop
 800d28e:	3708      	adds	r7, #8
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}
 800d294:	20000020 	.word	0x20000020

0800d298 <StoreContext>:

static void StoreContext(void)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b082      	sub	sp, #8
 800d29c:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800d29e:	23ff      	movs	r3, #255	; 0xff
 800d2a0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800d2a2:	f002 fd75 	bl	800fd90 <LmHandlerNvmDataStore>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800d2aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2ae:	f113 0f08 	cmn.w	r3, #8
 800d2b2:	d106      	bne.n	800d2c2 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800d2b4:	4b0a      	ldr	r3, [pc, #40]	; (800d2e0 <StoreContext+0x48>)
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	2100      	movs	r1, #0
 800d2ba:	2002      	movs	r0, #2
 800d2bc:	f012 fb2c 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800d2c0:	e00a      	b.n	800d2d8 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800d2c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d2ca:	d105      	bne.n	800d2d8 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800d2cc:	4b05      	ldr	r3, [pc, #20]	; (800d2e4 <StoreContext+0x4c>)
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	2100      	movs	r1, #0
 800d2d2:	2002      	movs	r0, #2
 800d2d4:	f012 fb20 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
}
 800d2d8:	bf00      	nop
 800d2da:	3708      	adds	r7, #8
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}
 800d2e0:	08020424 	.word	0x08020424
 800d2e4:	0802043c 	.word	0x0802043c

0800d2e8 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b082      	sub	sp, #8
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800d2f2:	79fb      	ldrb	r3, [r7, #7]
 800d2f4:	2b01      	cmp	r3, #1
 800d2f6:	d106      	bne.n	800d306 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800d2f8:	4b08      	ldr	r3, [pc, #32]	; (800d31c <OnNvmDataChange+0x34>)
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	2100      	movs	r1, #0
 800d2fe:	2002      	movs	r0, #2
 800d300:	f012 fb0a 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800d304:	e005      	b.n	800d312 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800d306:	4b06      	ldr	r3, [pc, #24]	; (800d320 <OnNvmDataChange+0x38>)
 800d308:	2200      	movs	r2, #0
 800d30a:	2100      	movs	r1, #0
 800d30c:	2002      	movs	r0, #2
 800d30e:	f012 fb03 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
}
 800d312:	bf00      	nop
 800d314:	3708      	adds	r7, #8
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
 800d31a:	bf00      	nop
 800d31c:	08020454 	.word	0x08020454
 800d320:	08020468 	.word	0x08020468

0800d324 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b082      	sub	sp, #8
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800d32e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d332:	4807      	ldr	r0, [pc, #28]	; (800d350 <OnStoreContextRequest+0x2c>)
 800d334:	f7f4 f9ba 	bl	80016ac <FLASH_IF_Erase>
 800d338:	4603      	mov	r3, r0
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d104      	bne.n	800d348 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800d33e:	683a      	ldr	r2, [r7, #0]
 800d340:	6879      	ldr	r1, [r7, #4]
 800d342:	4803      	ldr	r0, [pc, #12]	; (800d350 <OnStoreContextRequest+0x2c>)
 800d344:	f7f4 f962 	bl	800160c <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800d348:	bf00      	nop
 800d34a:	3708      	adds	r7, #8
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}
 800d350:	0803f000 	.word	0x0803f000

0800d354 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b082      	sub	sp, #8
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800d35e:	683a      	ldr	r2, [r7, #0]
 800d360:	4903      	ldr	r1, [pc, #12]	; (800d370 <OnRestoreContextRequest+0x1c>)
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f7f4 f97a 	bl	800165c <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800d368:	bf00      	nop
 800d36a:	3708      	adds	r7, #8
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}
 800d370:	0803f000 	.word	0x0803f000

0800d374 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800d378:	4b18      	ldr	r3, [pc, #96]	; (800d3dc <LoraInfo_Init+0x68>)
 800d37a:	2200      	movs	r2, #0
 800d37c:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800d37e:	4b17      	ldr	r3, [pc, #92]	; (800d3dc <LoraInfo_Init+0x68>)
 800d380:	2200      	movs	r2, #0
 800d382:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800d384:	4b15      	ldr	r3, [pc, #84]	; (800d3dc <LoraInfo_Init+0x68>)
 800d386:	2200      	movs	r2, #0
 800d388:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800d38a:	4b14      	ldr	r3, [pc, #80]	; (800d3dc <LoraInfo_Init+0x68>)
 800d38c:	2200      	movs	r2, #0
 800d38e:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800d390:	4b12      	ldr	r3, [pc, #72]	; (800d3dc <LoraInfo_Init+0x68>)
 800d392:	685b      	ldr	r3, [r3, #4]
 800d394:	f043 0320 	orr.w	r3, r3, #32
 800d398:	4a10      	ldr	r2, [pc, #64]	; (800d3dc <LoraInfo_Init+0x68>)
 800d39a:	6053      	str	r3, [r2, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 800d39c:	4b0f      	ldr	r3, [pc, #60]	; (800d3dc <LoraInfo_Init+0x68>)
 800d39e:	685b      	ldr	r3, [r3, #4]
 800d3a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d3a4:	4a0d      	ldr	r2, [pc, #52]	; (800d3dc <LoraInfo_Init+0x68>)
 800d3a6:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800d3a8:	4b0c      	ldr	r3, [pc, #48]	; (800d3dc <LoraInfo_Init+0x68>)
 800d3aa:	685b      	ldr	r3, [r3, #4]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d10c      	bne.n	800d3ca <LoraInfo_Init+0x56>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800d3b0:	4b0b      	ldr	r3, [pc, #44]	; (800d3e0 <LoraInfo_Init+0x6c>)
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	2100      	movs	r1, #0
 800d3b6:	2000      	movs	r0, #0
 800d3b8:	f012 faae 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800d3bc:	bf00      	nop
 800d3be:	f012 fa99 	bl	801f8f4 <UTIL_ADV_TRACE_IsBufferEmpty>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	2b01      	cmp	r3, #1
 800d3c6:	d1fa      	bne.n	800d3be <LoraInfo_Init+0x4a>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800d3c8:	e7fe      	b.n	800d3c8 <LoraInfo_Init+0x54>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800d3ca:	4b04      	ldr	r3, [pc, #16]	; (800d3dc <LoraInfo_Init+0x68>)
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800d3d0:	4b02      	ldr	r3, [pc, #8]	; (800d3dc <LoraInfo_Init+0x68>)
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800d3d6:	bf00      	nop
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	200004ec 	.word	0x200004ec
 800d3e0:	0802047c 	.word	0x0802047c

0800d3e4 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800d3e8:	4b02      	ldr	r3, [pc, #8]	; (800d3f4 <LoraInfo_GetPtr+0x10>)
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bc80      	pop	{r7}
 800d3f0:	4770      	bx	lr
 800d3f2:	bf00      	nop
 800d3f4:	200004ec 	.word	0x200004ec

0800d3f8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800d3fc:	f7f7 fb8f 	bl	8004b1e <BSP_RADIO_Init>
 800d400:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800d402:	4618      	mov	r0, r3
 800d404:	bd80      	pop	{r7, pc}

0800d406 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800d406:	b580      	push	{r7, lr}
 800d408:	b082      	sub	sp, #8
 800d40a:	af00      	add	r7, sp, #0
 800d40c:	4603      	mov	r3, r0
 800d40e:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800d410:	79fb      	ldrb	r3, [r7, #7]
 800d412:	4618      	mov	r0, r3
 800d414:	f7f7 fbb4 	bl	8004b80 <BSP_RADIO_ConfigRFSwitch>
 800d418:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3708      	adds	r7, #8
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}

0800d422 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800d422:	b580      	push	{r7, lr}
 800d424:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800d426:	f7f7 fbf9 	bl	8004c1c <BSP_RADIO_GetTxConfig>
 800d42a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800d434:	f7f7 fbf9 	bl	8004c2a <BSP_RADIO_IsTCXO>
 800d438:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	bd80      	pop	{r7, pc}

0800d43e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800d43e:	b580      	push	{r7, lr}
 800d440:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800d442:	f7f7 fbf9 	bl	8004c38 <BSP_RADIO_IsDCDC>
 800d446:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800d448:	4618      	mov	r0, r3
 800d44a:	bd80      	pop	{r7, pc}

0800d44c <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b082      	sub	sp, #8
 800d450:	af00      	add	r7, sp, #0
 800d452:	4603      	mov	r3, r0
 800d454:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800d456:	79fb      	ldrb	r3, [r7, #7]
 800d458:	4618      	mov	r0, r3
 800d45a:	f7f7 fbf4 	bl	8004c46 <BSP_RADIO_GetRFOMaxPowerConfig>
 800d45e:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800d460:	4618      	mov	r0, r3
 800d462:	3708      	adds	r7, #8
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	33f1      	adds	r3, #241	; 0xf1
 800d474:	2210      	movs	r2, #16
 800d476:	2100      	movs	r1, #0
 800d478:	4618      	mov	r0, r3
 800d47a:	f00e f821 	bl	801b4c0 <memset1>
    ctx->M_n = 0;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2200      	movs	r2, #0
 800d482:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	22f0      	movs	r2, #240	; 0xf0
 800d48a:	2100      	movs	r1, #0
 800d48c:	4618      	mov	r0, r3
 800d48e:	f00e f817 	bl	801b4c0 <memset1>
}
 800d492:	bf00      	nop
 800d494:	3708      	adds	r7, #8
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}

0800d49a <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800d49a:	b580      	push	{r7, lr}
 800d49c:	b082      	sub	sp, #8
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	6078      	str	r0, [r7, #4]
 800d4a2:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	2110      	movs	r1, #16
 800d4aa:	6838      	ldr	r0, [r7, #0]
 800d4ac:	f000 fe5c 	bl	800e168 <lorawan_aes_set_key>
}
 800d4b0:	bf00      	nop
 800d4b2:	3708      	adds	r7, #8
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}

0800d4b8 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b08c      	sub	sp, #48	; 0x30
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	60f8      	str	r0, [r7, #12]
 800d4c0:	60b9      	str	r1, [r7, #8]
 800d4c2:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	f000 80a1 	beq.w	800d612 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d4d6:	f1c3 0310 	rsb	r3, r3, #16
 800d4da:	687a      	ldr	r2, [r7, #4]
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	bf28      	it	cs
 800d4e0:	4613      	movcs	r3, r2
 800d4e2:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	f203 1201 	addw	r2, r3, #257	; 0x101
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d4f0:	4413      	add	r3, r2
 800d4f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4f4:	b292      	uxth	r2, r2
 800d4f6:	68b9      	ldr	r1, [r7, #8]
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f00d ffa6 	bl	801b44a <memcpy1>
        ctx->M_n += mlen;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800d504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d506:	441a      	add	r2, r3
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d514:	2b0f      	cmp	r3, #15
 800d516:	f240 808d 	bls.w	800d634 <AES_CMAC_Update+0x17c>
 800d51a:	687a      	ldr	r2, [r7, #4]
 800d51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51e:	429a      	cmp	r2, r3
 800d520:	f000 8088 	beq.w	800d634 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800d524:	2300      	movs	r3, #0
 800d526:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d528:	e015      	b.n	800d556 <AES_CMAC_Update+0x9e>
 800d52a:	68fa      	ldr	r2, [r7, #12]
 800d52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d52e:	4413      	add	r3, r2
 800d530:	33f1      	adds	r3, #241	; 0xf1
 800d532:	781a      	ldrb	r2, [r3, #0]
 800d534:	68f9      	ldr	r1, [r7, #12]
 800d536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d538:	440b      	add	r3, r1
 800d53a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d53e:	781b      	ldrb	r3, [r3, #0]
 800d540:	4053      	eors	r3, r2
 800d542:	b2d9      	uxtb	r1, r3
 800d544:	68fa      	ldr	r2, [r7, #12]
 800d546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d548:	4413      	add	r3, r2
 800d54a:	33f1      	adds	r3, #241	; 0xf1
 800d54c:	460a      	mov	r2, r1
 800d54e:	701a      	strb	r2, [r3, #0]
 800d550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d552:	3301      	adds	r3, #1
 800d554:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d558:	2b0f      	cmp	r3, #15
 800d55a:	dde6      	ble.n	800d52a <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800d562:	f107 0314 	add.w	r3, r7, #20
 800d566:	2210      	movs	r2, #16
 800d568:	4618      	mov	r0, r3
 800d56a:	f00d ff6e 	bl	801b44a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800d56e:	68fa      	ldr	r2, [r7, #12]
 800d570:	f107 0114 	add.w	r1, r7, #20
 800d574:	f107 0314 	add.w	r3, r7, #20
 800d578:	4618      	mov	r0, r3
 800d57a:	f000 fed3 	bl	800e324 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	33f1      	adds	r3, #241	; 0xf1
 800d582:	f107 0114 	add.w	r1, r7, #20
 800d586:	2210      	movs	r2, #16
 800d588:	4618      	mov	r0, r3
 800d58a:	f00d ff5e 	bl	801b44a <memcpy1>

        data += mlen;
 800d58e:	68ba      	ldr	r2, [r7, #8]
 800d590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d592:	4413      	add	r3, r2
 800d594:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800d596:	687a      	ldr	r2, [r7, #4]
 800d598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59a:	1ad3      	subs	r3, r2, r3
 800d59c:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800d59e:	e038      	b.n	800d612 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5a4:	e013      	b.n	800d5ce <AES_CMAC_Update+0x116>
 800d5a6:	68fa      	ldr	r2, [r7, #12]
 800d5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5aa:	4413      	add	r3, r2
 800d5ac:	33f1      	adds	r3, #241	; 0xf1
 800d5ae:	781a      	ldrb	r2, [r3, #0]
 800d5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5b2:	68b9      	ldr	r1, [r7, #8]
 800d5b4:	440b      	add	r3, r1
 800d5b6:	781b      	ldrb	r3, [r3, #0]
 800d5b8:	4053      	eors	r3, r2
 800d5ba:	b2d9      	uxtb	r1, r3
 800d5bc:	68fa      	ldr	r2, [r7, #12]
 800d5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c0:	4413      	add	r3, r2
 800d5c2:	33f1      	adds	r3, #241	; 0xf1
 800d5c4:	460a      	mov	r2, r1
 800d5c6:	701a      	strb	r2, [r3, #0]
 800d5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d0:	2b0f      	cmp	r3, #15
 800d5d2:	dde8      	ble.n	800d5a6 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800d5da:	f107 0314 	add.w	r3, r7, #20
 800d5de:	2210      	movs	r2, #16
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f00d ff32 	bl	801b44a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800d5e6:	68fa      	ldr	r2, [r7, #12]
 800d5e8:	f107 0114 	add.w	r1, r7, #20
 800d5ec:	f107 0314 	add.w	r3, r7, #20
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f000 fe97 	bl	800e324 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	33f1      	adds	r3, #241	; 0xf1
 800d5fa:	f107 0114 	add.w	r1, r7, #20
 800d5fe:	2210      	movs	r2, #16
 800d600:	4618      	mov	r0, r3
 800d602:	f00d ff22 	bl	801b44a <memcpy1>

        data += 16;
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	3310      	adds	r3, #16
 800d60a:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	3b10      	subs	r3, #16
 800d610:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2b10      	cmp	r3, #16
 800d616:	d8c3      	bhi.n	800d5a0 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d61e:	687a      	ldr	r2, [r7, #4]
 800d620:	b292      	uxth	r2, r2
 800d622:	68b9      	ldr	r1, [r7, #8]
 800d624:	4618      	mov	r0, r3
 800d626:	f00d ff10 	bl	801b44a <memcpy1>
    ctx->M_n = len;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	687a      	ldr	r2, [r7, #4]
 800d62e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800d632:	e000      	b.n	800d636 <AES_CMAC_Update+0x17e>
            return;
 800d634:	bf00      	nop
}
 800d636:	3730      	adds	r7, #48	; 0x30
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}

0800d63c <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b092      	sub	sp, #72	; 0x48
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
 800d644:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800d646:	f107 031c 	add.w	r3, r7, #28
 800d64a:	2210      	movs	r2, #16
 800d64c:	2100      	movs	r1, #0
 800d64e:	4618      	mov	r0, r3
 800d650:	f00d ff36 	bl	801b4c0 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800d654:	683a      	ldr	r2, [r7, #0]
 800d656:	f107 011c 	add.w	r1, r7, #28
 800d65a:	f107 031c 	add.w	r3, r7, #28
 800d65e:	4618      	mov	r0, r3
 800d660:	f000 fe60 	bl	800e324 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800d664:	7f3b      	ldrb	r3, [r7, #28]
 800d666:	b25b      	sxtb	r3, r3
 800d668:	2b00      	cmp	r3, #0
 800d66a:	da30      	bge.n	800d6ce <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800d66c:	2300      	movs	r3, #0
 800d66e:	647b      	str	r3, [r7, #68]	; 0x44
 800d670:	e01b      	b.n	800d6aa <AES_CMAC_Final+0x6e>
 800d672:	f107 021c 	add.w	r2, r7, #28
 800d676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d678:	4413      	add	r3, r2
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	005b      	lsls	r3, r3, #1
 800d67e:	b25a      	sxtb	r2, r3
 800d680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d682:	3301      	adds	r3, #1
 800d684:	3348      	adds	r3, #72	; 0x48
 800d686:	443b      	add	r3, r7
 800d688:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800d68c:	09db      	lsrs	r3, r3, #7
 800d68e:	b2db      	uxtb	r3, r3
 800d690:	b25b      	sxtb	r3, r3
 800d692:	4313      	orrs	r3, r2
 800d694:	b25b      	sxtb	r3, r3
 800d696:	b2d9      	uxtb	r1, r3
 800d698:	f107 021c 	add.w	r2, r7, #28
 800d69c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d69e:	4413      	add	r3, r2
 800d6a0:	460a      	mov	r2, r1
 800d6a2:	701a      	strb	r2, [r3, #0]
 800d6a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	647b      	str	r3, [r7, #68]	; 0x44
 800d6aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6ac:	2b0e      	cmp	r3, #14
 800d6ae:	dde0      	ble.n	800d672 <AES_CMAC_Final+0x36>
 800d6b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d6b4:	005b      	lsls	r3, r3, #1
 800d6b6:	b2db      	uxtb	r3, r3
 800d6b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800d6bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d6c0:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800d6c4:	43db      	mvns	r3, r3
 800d6c6:	b2db      	uxtb	r3, r3
 800d6c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d6cc:	e027      	b.n	800d71e <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	643b      	str	r3, [r7, #64]	; 0x40
 800d6d2:	e01b      	b.n	800d70c <AES_CMAC_Final+0xd0>
 800d6d4:	f107 021c 	add.w	r2, r7, #28
 800d6d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6da:	4413      	add	r3, r2
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	005b      	lsls	r3, r3, #1
 800d6e0:	b25a      	sxtb	r2, r3
 800d6e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6e4:	3301      	adds	r3, #1
 800d6e6:	3348      	adds	r3, #72	; 0x48
 800d6e8:	443b      	add	r3, r7
 800d6ea:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800d6ee:	09db      	lsrs	r3, r3, #7
 800d6f0:	b2db      	uxtb	r3, r3
 800d6f2:	b25b      	sxtb	r3, r3
 800d6f4:	4313      	orrs	r3, r2
 800d6f6:	b25b      	sxtb	r3, r3
 800d6f8:	b2d9      	uxtb	r1, r3
 800d6fa:	f107 021c 	add.w	r2, r7, #28
 800d6fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d700:	4413      	add	r3, r2
 800d702:	460a      	mov	r2, r1
 800d704:	701a      	strb	r2, [r3, #0]
 800d706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d708:	3301      	adds	r3, #1
 800d70a:	643b      	str	r3, [r7, #64]	; 0x40
 800d70c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d70e:	2b0e      	cmp	r3, #14
 800d710:	dde0      	ble.n	800d6d4 <AES_CMAC_Final+0x98>
 800d712:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d716:	005b      	lsls	r3, r3, #1
 800d718:	b2db      	uxtb	r3, r3
 800d71a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d724:	2b10      	cmp	r3, #16
 800d726:	d11d      	bne.n	800d764 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800d728:	2300      	movs	r3, #0
 800d72a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d72c:	e016      	b.n	800d75c <AES_CMAC_Final+0x120>
 800d72e:	683a      	ldr	r2, [r7, #0]
 800d730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d732:	4413      	add	r3, r2
 800d734:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d738:	781a      	ldrb	r2, [r3, #0]
 800d73a:	f107 011c 	add.w	r1, r7, #28
 800d73e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d740:	440b      	add	r3, r1
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	4053      	eors	r3, r2
 800d746:	b2d9      	uxtb	r1, r3
 800d748:	683a      	ldr	r2, [r7, #0]
 800d74a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d74c:	4413      	add	r3, r2
 800d74e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d752:	460a      	mov	r2, r1
 800d754:	701a      	strb	r2, [r3, #0]
 800d756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d758:	3301      	adds	r3, #1
 800d75a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d75c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d75e:	2b0f      	cmp	r3, #15
 800d760:	dde5      	ble.n	800d72e <AES_CMAC_Final+0xf2>
 800d762:	e096      	b.n	800d892 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800d764:	7f3b      	ldrb	r3, [r7, #28]
 800d766:	b25b      	sxtb	r3, r3
 800d768:	2b00      	cmp	r3, #0
 800d76a:	da30      	bge.n	800d7ce <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800d76c:	2300      	movs	r3, #0
 800d76e:	63bb      	str	r3, [r7, #56]	; 0x38
 800d770:	e01b      	b.n	800d7aa <AES_CMAC_Final+0x16e>
 800d772:	f107 021c 	add.w	r2, r7, #28
 800d776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d778:	4413      	add	r3, r2
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	005b      	lsls	r3, r3, #1
 800d77e:	b25a      	sxtb	r2, r3
 800d780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d782:	3301      	adds	r3, #1
 800d784:	3348      	adds	r3, #72	; 0x48
 800d786:	443b      	add	r3, r7
 800d788:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800d78c:	09db      	lsrs	r3, r3, #7
 800d78e:	b2db      	uxtb	r3, r3
 800d790:	b25b      	sxtb	r3, r3
 800d792:	4313      	orrs	r3, r2
 800d794:	b25b      	sxtb	r3, r3
 800d796:	b2d9      	uxtb	r1, r3
 800d798:	f107 021c 	add.w	r2, r7, #28
 800d79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d79e:	4413      	add	r3, r2
 800d7a0:	460a      	mov	r2, r1
 800d7a2:	701a      	strb	r2, [r3, #0]
 800d7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	63bb      	str	r3, [r7, #56]	; 0x38
 800d7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ac:	2b0e      	cmp	r3, #14
 800d7ae:	dde0      	ble.n	800d772 <AES_CMAC_Final+0x136>
 800d7b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d7b4:	005b      	lsls	r3, r3, #1
 800d7b6:	b2db      	uxtb	r3, r3
 800d7b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800d7bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d7c0:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800d7c4:	43db      	mvns	r3, r3
 800d7c6:	b2db      	uxtb	r3, r3
 800d7c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d7cc:	e027      	b.n	800d81e <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	637b      	str	r3, [r7, #52]	; 0x34
 800d7d2:	e01b      	b.n	800d80c <AES_CMAC_Final+0x1d0>
 800d7d4:	f107 021c 	add.w	r2, r7, #28
 800d7d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7da:	4413      	add	r3, r2
 800d7dc:	781b      	ldrb	r3, [r3, #0]
 800d7de:	005b      	lsls	r3, r3, #1
 800d7e0:	b25a      	sxtb	r2, r3
 800d7e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	3348      	adds	r3, #72	; 0x48
 800d7e8:	443b      	add	r3, r7
 800d7ea:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800d7ee:	09db      	lsrs	r3, r3, #7
 800d7f0:	b2db      	uxtb	r3, r3
 800d7f2:	b25b      	sxtb	r3, r3
 800d7f4:	4313      	orrs	r3, r2
 800d7f6:	b25b      	sxtb	r3, r3
 800d7f8:	b2d9      	uxtb	r1, r3
 800d7fa:	f107 021c 	add.w	r2, r7, #28
 800d7fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d800:	4413      	add	r3, r2
 800d802:	460a      	mov	r2, r1
 800d804:	701a      	strb	r2, [r3, #0]
 800d806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d808:	3301      	adds	r3, #1
 800d80a:	637b      	str	r3, [r7, #52]	; 0x34
 800d80c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d80e:	2b0e      	cmp	r3, #14
 800d810:	dde0      	ble.n	800d7d4 <AES_CMAC_Final+0x198>
 800d812:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d816:	005b      	lsls	r3, r3, #1
 800d818:	b2db      	uxtb	r3, r3
 800d81a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d824:	683a      	ldr	r2, [r7, #0]
 800d826:	4413      	add	r3, r2
 800d828:	2280      	movs	r2, #128	; 0x80
 800d82a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800d82e:	e007      	b.n	800d840 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d836:	683a      	ldr	r2, [r7, #0]
 800d838:	4413      	add	r3, r2
 800d83a:	2200      	movs	r2, #0
 800d83c:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d846:	1c5a      	adds	r2, r3, #1
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d854:	2b0f      	cmp	r3, #15
 800d856:	d9eb      	bls.n	800d830 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800d858:	2300      	movs	r3, #0
 800d85a:	633b      	str	r3, [r7, #48]	; 0x30
 800d85c:	e016      	b.n	800d88c <AES_CMAC_Final+0x250>
 800d85e:	683a      	ldr	r2, [r7, #0]
 800d860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d862:	4413      	add	r3, r2
 800d864:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d868:	781a      	ldrb	r2, [r3, #0]
 800d86a:	f107 011c 	add.w	r1, r7, #28
 800d86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d870:	440b      	add	r3, r1
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	4053      	eors	r3, r2
 800d876:	b2d9      	uxtb	r1, r3
 800d878:	683a      	ldr	r2, [r7, #0]
 800d87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d87c:	4413      	add	r3, r2
 800d87e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d882:	460a      	mov	r2, r1
 800d884:	701a      	strb	r2, [r3, #0]
 800d886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d888:	3301      	adds	r3, #1
 800d88a:	633b      	str	r3, [r7, #48]	; 0x30
 800d88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d88e:	2b0f      	cmp	r3, #15
 800d890:	dde5      	ble.n	800d85e <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800d892:	2300      	movs	r3, #0
 800d894:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d896:	e015      	b.n	800d8c4 <AES_CMAC_Final+0x288>
 800d898:	683a      	ldr	r2, [r7, #0]
 800d89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89c:	4413      	add	r3, r2
 800d89e:	33f1      	adds	r3, #241	; 0xf1
 800d8a0:	781a      	ldrb	r2, [r3, #0]
 800d8a2:	6839      	ldr	r1, [r7, #0]
 800d8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a6:	440b      	add	r3, r1
 800d8a8:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d8ac:	781b      	ldrb	r3, [r3, #0]
 800d8ae:	4053      	eors	r3, r2
 800d8b0:	b2d9      	uxtb	r1, r3
 800d8b2:	683a      	ldr	r2, [r7, #0]
 800d8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b6:	4413      	add	r3, r2
 800d8b8:	33f1      	adds	r3, #241	; 0xf1
 800d8ba:	460a      	mov	r2, r1
 800d8bc:	701a      	strb	r2, [r3, #0]
 800d8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c6:	2b0f      	cmp	r3, #15
 800d8c8:	dde6      	ble.n	800d898 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800d8d0:	f107 030c 	add.w	r3, r7, #12
 800d8d4:	2210      	movs	r2, #16
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f00d fdb7 	bl	801b44a <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800d8dc:	683a      	ldr	r2, [r7, #0]
 800d8de:	f107 030c 	add.w	r3, r7, #12
 800d8e2:	6879      	ldr	r1, [r7, #4]
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f000 fd1d 	bl	800e324 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800d8ea:	f107 031c 	add.w	r3, r7, #28
 800d8ee:	2210      	movs	r2, #16
 800d8f0:	2100      	movs	r1, #0
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f00d fde4 	bl	801b4c0 <memset1>
}
 800d8f8:	bf00      	nop
 800d8fa:	3748      	adds	r7, #72	; 0x48
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}

0800d900 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800d900:	b480      	push	{r7}
 800d902:	b083      	sub	sp, #12
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
 800d908:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	781a      	ldrb	r2, [r3, #0]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	3301      	adds	r3, #1
 800d916:	683a      	ldr	r2, [r7, #0]
 800d918:	7852      	ldrb	r2, [r2, #1]
 800d91a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	3302      	adds	r3, #2
 800d920:	683a      	ldr	r2, [r7, #0]
 800d922:	7892      	ldrb	r2, [r2, #2]
 800d924:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	3303      	adds	r3, #3
 800d92a:	683a      	ldr	r2, [r7, #0]
 800d92c:	78d2      	ldrb	r2, [r2, #3]
 800d92e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	3304      	adds	r3, #4
 800d934:	683a      	ldr	r2, [r7, #0]
 800d936:	7912      	ldrb	r2, [r2, #4]
 800d938:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	3305      	adds	r3, #5
 800d93e:	683a      	ldr	r2, [r7, #0]
 800d940:	7952      	ldrb	r2, [r2, #5]
 800d942:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	3306      	adds	r3, #6
 800d948:	683a      	ldr	r2, [r7, #0]
 800d94a:	7992      	ldrb	r2, [r2, #6]
 800d94c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	3307      	adds	r3, #7
 800d952:	683a      	ldr	r2, [r7, #0]
 800d954:	79d2      	ldrb	r2, [r2, #7]
 800d956:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	3308      	adds	r3, #8
 800d95c:	683a      	ldr	r2, [r7, #0]
 800d95e:	7a12      	ldrb	r2, [r2, #8]
 800d960:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	3309      	adds	r3, #9
 800d966:	683a      	ldr	r2, [r7, #0]
 800d968:	7a52      	ldrb	r2, [r2, #9]
 800d96a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	330a      	adds	r3, #10
 800d970:	683a      	ldr	r2, [r7, #0]
 800d972:	7a92      	ldrb	r2, [r2, #10]
 800d974:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	330b      	adds	r3, #11
 800d97a:	683a      	ldr	r2, [r7, #0]
 800d97c:	7ad2      	ldrb	r2, [r2, #11]
 800d97e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	330c      	adds	r3, #12
 800d984:	683a      	ldr	r2, [r7, #0]
 800d986:	7b12      	ldrb	r2, [r2, #12]
 800d988:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	330d      	adds	r3, #13
 800d98e:	683a      	ldr	r2, [r7, #0]
 800d990:	7b52      	ldrb	r2, [r2, #13]
 800d992:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	330e      	adds	r3, #14
 800d998:	683a      	ldr	r2, [r7, #0]
 800d99a:	7b92      	ldrb	r2, [r2, #14]
 800d99c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	330f      	adds	r3, #15
 800d9a2:	683a      	ldr	r2, [r7, #0]
 800d9a4:	7bd2      	ldrb	r2, [r2, #15]
 800d9a6:	701a      	strb	r2, [r3, #0]
#endif
}
 800d9a8:	bf00      	nop
 800d9aa:	370c      	adds	r7, #12
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bc80      	pop	{r7}
 800d9b0:	4770      	bx	lr

0800d9b2 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800d9b2:	b480      	push	{r7}
 800d9b4:	b085      	sub	sp, #20
 800d9b6:	af00      	add	r7, sp, #0
 800d9b8:	60f8      	str	r0, [r7, #12]
 800d9ba:	60b9      	str	r1, [r7, #8]
 800d9bc:	4613      	mov	r3, r2
 800d9be:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800d9c0:	e007      	b.n	800d9d2 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800d9c2:	68ba      	ldr	r2, [r7, #8]
 800d9c4:	1c53      	adds	r3, r2, #1
 800d9c6:	60bb      	str	r3, [r7, #8]
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	1c59      	adds	r1, r3, #1
 800d9cc:	60f9      	str	r1, [r7, #12]
 800d9ce:	7812      	ldrb	r2, [r2, #0]
 800d9d0:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800d9d2:	79fb      	ldrb	r3, [r7, #7]
 800d9d4:	1e5a      	subs	r2, r3, #1
 800d9d6:	71fa      	strb	r2, [r7, #7]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d1f2      	bne.n	800d9c2 <copy_block_nn+0x10>
}
 800d9dc:	bf00      	nop
 800d9de:	bf00      	nop
 800d9e0:	3714      	adds	r7, #20
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bc80      	pop	{r7}
 800d9e6:	4770      	bx	lr

0800d9e8 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b083      	sub	sp, #12
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
 800d9f0:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	781a      	ldrb	r2, [r3, #0]
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	781b      	ldrb	r3, [r3, #0]
 800d9fa:	4053      	eors	r3, r2
 800d9fc:	b2da      	uxtb	r2, r3
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	3301      	adds	r3, #1
 800da06:	7819      	ldrb	r1, [r3, #0]
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	3301      	adds	r3, #1
 800da0c:	781a      	ldrb	r2, [r3, #0]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	3301      	adds	r3, #1
 800da12:	404a      	eors	r2, r1
 800da14:	b2d2      	uxtb	r2, r2
 800da16:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	3302      	adds	r3, #2
 800da1c:	7819      	ldrb	r1, [r3, #0]
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	3302      	adds	r3, #2
 800da22:	781a      	ldrb	r2, [r3, #0]
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	3302      	adds	r3, #2
 800da28:	404a      	eors	r2, r1
 800da2a:	b2d2      	uxtb	r2, r2
 800da2c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	3303      	adds	r3, #3
 800da32:	7819      	ldrb	r1, [r3, #0]
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	3303      	adds	r3, #3
 800da38:	781a      	ldrb	r2, [r3, #0]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	3303      	adds	r3, #3
 800da3e:	404a      	eors	r2, r1
 800da40:	b2d2      	uxtb	r2, r2
 800da42:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	3304      	adds	r3, #4
 800da48:	7819      	ldrb	r1, [r3, #0]
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	3304      	adds	r3, #4
 800da4e:	781a      	ldrb	r2, [r3, #0]
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	3304      	adds	r3, #4
 800da54:	404a      	eors	r2, r1
 800da56:	b2d2      	uxtb	r2, r2
 800da58:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	3305      	adds	r3, #5
 800da5e:	7819      	ldrb	r1, [r3, #0]
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	3305      	adds	r3, #5
 800da64:	781a      	ldrb	r2, [r3, #0]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	3305      	adds	r3, #5
 800da6a:	404a      	eors	r2, r1
 800da6c:	b2d2      	uxtb	r2, r2
 800da6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	3306      	adds	r3, #6
 800da74:	7819      	ldrb	r1, [r3, #0]
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	3306      	adds	r3, #6
 800da7a:	781a      	ldrb	r2, [r3, #0]
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	3306      	adds	r3, #6
 800da80:	404a      	eors	r2, r1
 800da82:	b2d2      	uxtb	r2, r2
 800da84:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	3307      	adds	r3, #7
 800da8a:	7819      	ldrb	r1, [r3, #0]
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	3307      	adds	r3, #7
 800da90:	781a      	ldrb	r2, [r3, #0]
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	3307      	adds	r3, #7
 800da96:	404a      	eors	r2, r1
 800da98:	b2d2      	uxtb	r2, r2
 800da9a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	3308      	adds	r3, #8
 800daa0:	7819      	ldrb	r1, [r3, #0]
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	3308      	adds	r3, #8
 800daa6:	781a      	ldrb	r2, [r3, #0]
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	3308      	adds	r3, #8
 800daac:	404a      	eors	r2, r1
 800daae:	b2d2      	uxtb	r2, r2
 800dab0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	3309      	adds	r3, #9
 800dab6:	7819      	ldrb	r1, [r3, #0]
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	3309      	adds	r3, #9
 800dabc:	781a      	ldrb	r2, [r3, #0]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	3309      	adds	r3, #9
 800dac2:	404a      	eors	r2, r1
 800dac4:	b2d2      	uxtb	r2, r2
 800dac6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	330a      	adds	r3, #10
 800dacc:	7819      	ldrb	r1, [r3, #0]
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	330a      	adds	r3, #10
 800dad2:	781a      	ldrb	r2, [r3, #0]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	330a      	adds	r3, #10
 800dad8:	404a      	eors	r2, r1
 800dada:	b2d2      	uxtb	r2, r2
 800dadc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	330b      	adds	r3, #11
 800dae2:	7819      	ldrb	r1, [r3, #0]
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	330b      	adds	r3, #11
 800dae8:	781a      	ldrb	r2, [r3, #0]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	330b      	adds	r3, #11
 800daee:	404a      	eors	r2, r1
 800daf0:	b2d2      	uxtb	r2, r2
 800daf2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	330c      	adds	r3, #12
 800daf8:	7819      	ldrb	r1, [r3, #0]
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	330c      	adds	r3, #12
 800dafe:	781a      	ldrb	r2, [r3, #0]
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	330c      	adds	r3, #12
 800db04:	404a      	eors	r2, r1
 800db06:	b2d2      	uxtb	r2, r2
 800db08:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	330d      	adds	r3, #13
 800db0e:	7819      	ldrb	r1, [r3, #0]
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	330d      	adds	r3, #13
 800db14:	781a      	ldrb	r2, [r3, #0]
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	330d      	adds	r3, #13
 800db1a:	404a      	eors	r2, r1
 800db1c:	b2d2      	uxtb	r2, r2
 800db1e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	330e      	adds	r3, #14
 800db24:	7819      	ldrb	r1, [r3, #0]
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	330e      	adds	r3, #14
 800db2a:	781a      	ldrb	r2, [r3, #0]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	330e      	adds	r3, #14
 800db30:	404a      	eors	r2, r1
 800db32:	b2d2      	uxtb	r2, r2
 800db34:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	330f      	adds	r3, #15
 800db3a:	7819      	ldrb	r1, [r3, #0]
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	330f      	adds	r3, #15
 800db40:	781a      	ldrb	r2, [r3, #0]
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	330f      	adds	r3, #15
 800db46:	404a      	eors	r2, r1
 800db48:	b2d2      	uxtb	r2, r2
 800db4a:	701a      	strb	r2, [r3, #0]
#endif
}
 800db4c:	bf00      	nop
 800db4e:	370c      	adds	r7, #12
 800db50:	46bd      	mov	sp, r7
 800db52:	bc80      	pop	{r7}
 800db54:	4770      	bx	lr

0800db56 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800db56:	b480      	push	{r7}
 800db58:	b085      	sub	sp, #20
 800db5a:	af00      	add	r7, sp, #0
 800db5c:	60f8      	str	r0, [r7, #12]
 800db5e:	60b9      	str	r1, [r7, #8]
 800db60:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	781a      	ldrb	r2, [r3, #0]
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	4053      	eors	r3, r2
 800db6c:	b2da      	uxtb	r2, r3
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	3301      	adds	r3, #1
 800db76:	7819      	ldrb	r1, [r3, #0]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	3301      	adds	r3, #1
 800db7c:	781a      	ldrb	r2, [r3, #0]
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	3301      	adds	r3, #1
 800db82:	404a      	eors	r2, r1
 800db84:	b2d2      	uxtb	r2, r2
 800db86:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	3302      	adds	r3, #2
 800db8c:	7819      	ldrb	r1, [r3, #0]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	3302      	adds	r3, #2
 800db92:	781a      	ldrb	r2, [r3, #0]
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	3302      	adds	r3, #2
 800db98:	404a      	eors	r2, r1
 800db9a:	b2d2      	uxtb	r2, r2
 800db9c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	3303      	adds	r3, #3
 800dba2:	7819      	ldrb	r1, [r3, #0]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	3303      	adds	r3, #3
 800dba8:	781a      	ldrb	r2, [r3, #0]
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	3303      	adds	r3, #3
 800dbae:	404a      	eors	r2, r1
 800dbb0:	b2d2      	uxtb	r2, r2
 800dbb2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	3304      	adds	r3, #4
 800dbb8:	7819      	ldrb	r1, [r3, #0]
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	3304      	adds	r3, #4
 800dbbe:	781a      	ldrb	r2, [r3, #0]
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	3304      	adds	r3, #4
 800dbc4:	404a      	eors	r2, r1
 800dbc6:	b2d2      	uxtb	r2, r2
 800dbc8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	3305      	adds	r3, #5
 800dbce:	7819      	ldrb	r1, [r3, #0]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	3305      	adds	r3, #5
 800dbd4:	781a      	ldrb	r2, [r3, #0]
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	3305      	adds	r3, #5
 800dbda:	404a      	eors	r2, r1
 800dbdc:	b2d2      	uxtb	r2, r2
 800dbde:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	3306      	adds	r3, #6
 800dbe4:	7819      	ldrb	r1, [r3, #0]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	3306      	adds	r3, #6
 800dbea:	781a      	ldrb	r2, [r3, #0]
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	3306      	adds	r3, #6
 800dbf0:	404a      	eors	r2, r1
 800dbf2:	b2d2      	uxtb	r2, r2
 800dbf4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	3307      	adds	r3, #7
 800dbfa:	7819      	ldrb	r1, [r3, #0]
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	3307      	adds	r3, #7
 800dc00:	781a      	ldrb	r2, [r3, #0]
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	3307      	adds	r3, #7
 800dc06:	404a      	eors	r2, r1
 800dc08:	b2d2      	uxtb	r2, r2
 800dc0a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	3308      	adds	r3, #8
 800dc10:	7819      	ldrb	r1, [r3, #0]
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	3308      	adds	r3, #8
 800dc16:	781a      	ldrb	r2, [r3, #0]
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	3308      	adds	r3, #8
 800dc1c:	404a      	eors	r2, r1
 800dc1e:	b2d2      	uxtb	r2, r2
 800dc20:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	3309      	adds	r3, #9
 800dc26:	7819      	ldrb	r1, [r3, #0]
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	3309      	adds	r3, #9
 800dc2c:	781a      	ldrb	r2, [r3, #0]
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	3309      	adds	r3, #9
 800dc32:	404a      	eors	r2, r1
 800dc34:	b2d2      	uxtb	r2, r2
 800dc36:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	330a      	adds	r3, #10
 800dc3c:	7819      	ldrb	r1, [r3, #0]
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	330a      	adds	r3, #10
 800dc42:	781a      	ldrb	r2, [r3, #0]
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	330a      	adds	r3, #10
 800dc48:	404a      	eors	r2, r1
 800dc4a:	b2d2      	uxtb	r2, r2
 800dc4c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	330b      	adds	r3, #11
 800dc52:	7819      	ldrb	r1, [r3, #0]
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	330b      	adds	r3, #11
 800dc58:	781a      	ldrb	r2, [r3, #0]
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	330b      	adds	r3, #11
 800dc5e:	404a      	eors	r2, r1
 800dc60:	b2d2      	uxtb	r2, r2
 800dc62:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	330c      	adds	r3, #12
 800dc68:	7819      	ldrb	r1, [r3, #0]
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	330c      	adds	r3, #12
 800dc6e:	781a      	ldrb	r2, [r3, #0]
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	330c      	adds	r3, #12
 800dc74:	404a      	eors	r2, r1
 800dc76:	b2d2      	uxtb	r2, r2
 800dc78:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	330d      	adds	r3, #13
 800dc7e:	7819      	ldrb	r1, [r3, #0]
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	330d      	adds	r3, #13
 800dc84:	781a      	ldrb	r2, [r3, #0]
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	330d      	adds	r3, #13
 800dc8a:	404a      	eors	r2, r1
 800dc8c:	b2d2      	uxtb	r2, r2
 800dc8e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	330e      	adds	r3, #14
 800dc94:	7819      	ldrb	r1, [r3, #0]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	330e      	adds	r3, #14
 800dc9a:	781a      	ldrb	r2, [r3, #0]
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	330e      	adds	r3, #14
 800dca0:	404a      	eors	r2, r1
 800dca2:	b2d2      	uxtb	r2, r2
 800dca4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	330f      	adds	r3, #15
 800dcaa:	7819      	ldrb	r1, [r3, #0]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	330f      	adds	r3, #15
 800dcb0:	781a      	ldrb	r2, [r3, #0]
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	330f      	adds	r3, #15
 800dcb6:	404a      	eors	r2, r1
 800dcb8:	b2d2      	uxtb	r2, r2
 800dcba:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800dcbc:	bf00      	nop
 800dcbe:	3714      	adds	r7, #20
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bc80      	pop	{r7}
 800dcc4:	4770      	bx	lr

0800dcc6 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800dcc6:	b580      	push	{r7, lr}
 800dcc8:	b082      	sub	sp, #8
 800dcca:	af00      	add	r7, sp, #0
 800dccc:	6078      	str	r0, [r7, #4]
 800dcce:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800dcd0:	6839      	ldr	r1, [r7, #0]
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f7ff fe88 	bl	800d9e8 <xor_block>
}
 800dcd8:	bf00      	nop
 800dcda:	3708      	adds	r7, #8
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}

0800dce0 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800dce0:	b480      	push	{r7}
 800dce2:	b085      	sub	sp, #20
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	461a      	mov	r2, r3
 800dcee:	4b48      	ldr	r3, [pc, #288]	; (800de10 <shift_sub_rows+0x130>)
 800dcf0:	5c9a      	ldrb	r2, [r3, r2]
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	701a      	strb	r2, [r3, #0]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	3304      	adds	r3, #4
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	4619      	mov	r1, r3
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	3304      	adds	r3, #4
 800dd02:	4a43      	ldr	r2, [pc, #268]	; (800de10 <shift_sub_rows+0x130>)
 800dd04:	5c52      	ldrb	r2, [r2, r1]
 800dd06:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	3308      	adds	r3, #8
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	4619      	mov	r1, r3
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	3308      	adds	r3, #8
 800dd14:	4a3e      	ldr	r2, [pc, #248]	; (800de10 <shift_sub_rows+0x130>)
 800dd16:	5c52      	ldrb	r2, [r2, r1]
 800dd18:	701a      	strb	r2, [r3, #0]
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	330c      	adds	r3, #12
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	4619      	mov	r1, r3
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	330c      	adds	r3, #12
 800dd26:	4a3a      	ldr	r2, [pc, #232]	; (800de10 <shift_sub_rows+0x130>)
 800dd28:	5c52      	ldrb	r2, [r2, r1]
 800dd2a:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	785b      	ldrb	r3, [r3, #1]
 800dd30:	73fb      	strb	r3, [r7, #15]
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	3305      	adds	r3, #5
 800dd36:	781b      	ldrb	r3, [r3, #0]
 800dd38:	4619      	mov	r1, r3
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	3301      	adds	r3, #1
 800dd3e:	4a34      	ldr	r2, [pc, #208]	; (800de10 <shift_sub_rows+0x130>)
 800dd40:	5c52      	ldrb	r2, [r2, r1]
 800dd42:	701a      	strb	r2, [r3, #0]
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	3309      	adds	r3, #9
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	4619      	mov	r1, r3
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	3305      	adds	r3, #5
 800dd50:	4a2f      	ldr	r2, [pc, #188]	; (800de10 <shift_sub_rows+0x130>)
 800dd52:	5c52      	ldrb	r2, [r2, r1]
 800dd54:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	330d      	adds	r3, #13
 800dd5a:	781b      	ldrb	r3, [r3, #0]
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	3309      	adds	r3, #9
 800dd62:	4a2b      	ldr	r2, [pc, #172]	; (800de10 <shift_sub_rows+0x130>)
 800dd64:	5c52      	ldrb	r2, [r2, r1]
 800dd66:	701a      	strb	r2, [r3, #0]
 800dd68:	7bfa      	ldrb	r2, [r7, #15]
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	330d      	adds	r3, #13
 800dd6e:	4928      	ldr	r1, [pc, #160]	; (800de10 <shift_sub_rows+0x130>)
 800dd70:	5c8a      	ldrb	r2, [r1, r2]
 800dd72:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	789b      	ldrb	r3, [r3, #2]
 800dd78:	73fb      	strb	r3, [r7, #15]
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	330a      	adds	r3, #10
 800dd7e:	781b      	ldrb	r3, [r3, #0]
 800dd80:	4619      	mov	r1, r3
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	3302      	adds	r3, #2
 800dd86:	4a22      	ldr	r2, [pc, #136]	; (800de10 <shift_sub_rows+0x130>)
 800dd88:	5c52      	ldrb	r2, [r2, r1]
 800dd8a:	701a      	strb	r2, [r3, #0]
 800dd8c:	7bfa      	ldrb	r2, [r7, #15]
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	330a      	adds	r3, #10
 800dd92:	491f      	ldr	r1, [pc, #124]	; (800de10 <shift_sub_rows+0x130>)
 800dd94:	5c8a      	ldrb	r2, [r1, r2]
 800dd96:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	799b      	ldrb	r3, [r3, #6]
 800dd9c:	73fb      	strb	r3, [r7, #15]
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	330e      	adds	r3, #14
 800dda2:	781b      	ldrb	r3, [r3, #0]
 800dda4:	4619      	mov	r1, r3
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	3306      	adds	r3, #6
 800ddaa:	4a19      	ldr	r2, [pc, #100]	; (800de10 <shift_sub_rows+0x130>)
 800ddac:	5c52      	ldrb	r2, [r2, r1]
 800ddae:	701a      	strb	r2, [r3, #0]
 800ddb0:	7bfa      	ldrb	r2, [r7, #15]
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	330e      	adds	r3, #14
 800ddb6:	4916      	ldr	r1, [pc, #88]	; (800de10 <shift_sub_rows+0x130>)
 800ddb8:	5c8a      	ldrb	r2, [r1, r2]
 800ddba:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	7bdb      	ldrb	r3, [r3, #15]
 800ddc0:	73fb      	strb	r3, [r7, #15]
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	330b      	adds	r3, #11
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	4619      	mov	r1, r3
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	330f      	adds	r3, #15
 800ddce:	4a10      	ldr	r2, [pc, #64]	; (800de10 <shift_sub_rows+0x130>)
 800ddd0:	5c52      	ldrb	r2, [r2, r1]
 800ddd2:	701a      	strb	r2, [r3, #0]
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	3307      	adds	r3, #7
 800ddd8:	781b      	ldrb	r3, [r3, #0]
 800ddda:	4619      	mov	r1, r3
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	330b      	adds	r3, #11
 800dde0:	4a0b      	ldr	r2, [pc, #44]	; (800de10 <shift_sub_rows+0x130>)
 800dde2:	5c52      	ldrb	r2, [r2, r1]
 800dde4:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	3303      	adds	r3, #3
 800ddea:	781b      	ldrb	r3, [r3, #0]
 800ddec:	4619      	mov	r1, r3
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	3307      	adds	r3, #7
 800ddf2:	4a07      	ldr	r2, [pc, #28]	; (800de10 <shift_sub_rows+0x130>)
 800ddf4:	5c52      	ldrb	r2, [r2, r1]
 800ddf6:	701a      	strb	r2, [r3, #0]
 800ddf8:	7bfa      	ldrb	r2, [r7, #15]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	3303      	adds	r3, #3
 800ddfe:	4904      	ldr	r1, [pc, #16]	; (800de10 <shift_sub_rows+0x130>)
 800de00:	5c8a      	ldrb	r2, [r1, r2]
 800de02:	701a      	strb	r2, [r3, #0]
}
 800de04:	bf00      	nop
 800de06:	3714      	adds	r7, #20
 800de08:	46bd      	mov	sp, r7
 800de0a:	bc80      	pop	{r7}
 800de0c:	4770      	bx	lr
 800de0e:	bf00      	nop
 800de10:	080209dc 	.word	0x080209dc

0800de14 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800de14:	b580      	push	{r7, lr}
 800de16:	b086      	sub	sp, #24
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800de1c:	f107 0308 	add.w	r3, r7, #8
 800de20:	6879      	ldr	r1, [r7, #4]
 800de22:	4618      	mov	r0, r3
 800de24:	f7ff fd6c 	bl	800d900 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800de28:	7a3b      	ldrb	r3, [r7, #8]
 800de2a:	461a      	mov	r2, r3
 800de2c:	4b9a      	ldr	r3, [pc, #616]	; (800e098 <mix_sub_columns+0x284>)
 800de2e:	5c9a      	ldrb	r2, [r3, r2]
 800de30:	7b7b      	ldrb	r3, [r7, #13]
 800de32:	4619      	mov	r1, r3
 800de34:	4b99      	ldr	r3, [pc, #612]	; (800e09c <mix_sub_columns+0x288>)
 800de36:	5c5b      	ldrb	r3, [r3, r1]
 800de38:	4053      	eors	r3, r2
 800de3a:	b2da      	uxtb	r2, r3
 800de3c:	7cbb      	ldrb	r3, [r7, #18]
 800de3e:	4619      	mov	r1, r3
 800de40:	4b97      	ldr	r3, [pc, #604]	; (800e0a0 <mix_sub_columns+0x28c>)
 800de42:	5c5b      	ldrb	r3, [r3, r1]
 800de44:	4053      	eors	r3, r2
 800de46:	b2da      	uxtb	r2, r3
 800de48:	7dfb      	ldrb	r3, [r7, #23]
 800de4a:	4619      	mov	r1, r3
 800de4c:	4b94      	ldr	r3, [pc, #592]	; (800e0a0 <mix_sub_columns+0x28c>)
 800de4e:	5c5b      	ldrb	r3, [r3, r1]
 800de50:	4053      	eors	r3, r2
 800de52:	b2da      	uxtb	r2, r3
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800de58:	7a3b      	ldrb	r3, [r7, #8]
 800de5a:	461a      	mov	r2, r3
 800de5c:	4b90      	ldr	r3, [pc, #576]	; (800e0a0 <mix_sub_columns+0x28c>)
 800de5e:	5c9a      	ldrb	r2, [r3, r2]
 800de60:	7b7b      	ldrb	r3, [r7, #13]
 800de62:	4619      	mov	r1, r3
 800de64:	4b8c      	ldr	r3, [pc, #560]	; (800e098 <mix_sub_columns+0x284>)
 800de66:	5c5b      	ldrb	r3, [r3, r1]
 800de68:	4053      	eors	r3, r2
 800de6a:	b2da      	uxtb	r2, r3
 800de6c:	7cbb      	ldrb	r3, [r7, #18]
 800de6e:	4619      	mov	r1, r3
 800de70:	4b8a      	ldr	r3, [pc, #552]	; (800e09c <mix_sub_columns+0x288>)
 800de72:	5c5b      	ldrb	r3, [r3, r1]
 800de74:	4053      	eors	r3, r2
 800de76:	b2d9      	uxtb	r1, r3
 800de78:	7dfb      	ldrb	r3, [r7, #23]
 800de7a:	461a      	mov	r2, r3
 800de7c:	4b88      	ldr	r3, [pc, #544]	; (800e0a0 <mix_sub_columns+0x28c>)
 800de7e:	5c9a      	ldrb	r2, [r3, r2]
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	3301      	adds	r3, #1
 800de84:	404a      	eors	r2, r1
 800de86:	b2d2      	uxtb	r2, r2
 800de88:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800de8a:	7a3b      	ldrb	r3, [r7, #8]
 800de8c:	461a      	mov	r2, r3
 800de8e:	4b84      	ldr	r3, [pc, #528]	; (800e0a0 <mix_sub_columns+0x28c>)
 800de90:	5c9a      	ldrb	r2, [r3, r2]
 800de92:	7b7b      	ldrb	r3, [r7, #13]
 800de94:	4619      	mov	r1, r3
 800de96:	4b82      	ldr	r3, [pc, #520]	; (800e0a0 <mix_sub_columns+0x28c>)
 800de98:	5c5b      	ldrb	r3, [r3, r1]
 800de9a:	4053      	eors	r3, r2
 800de9c:	b2da      	uxtb	r2, r3
 800de9e:	7cbb      	ldrb	r3, [r7, #18]
 800dea0:	4619      	mov	r1, r3
 800dea2:	4b7d      	ldr	r3, [pc, #500]	; (800e098 <mix_sub_columns+0x284>)
 800dea4:	5c5b      	ldrb	r3, [r3, r1]
 800dea6:	4053      	eors	r3, r2
 800dea8:	b2d9      	uxtb	r1, r3
 800deaa:	7dfb      	ldrb	r3, [r7, #23]
 800deac:	461a      	mov	r2, r3
 800deae:	4b7b      	ldr	r3, [pc, #492]	; (800e09c <mix_sub_columns+0x288>)
 800deb0:	5c9a      	ldrb	r2, [r3, r2]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	3302      	adds	r3, #2
 800deb6:	404a      	eors	r2, r1
 800deb8:	b2d2      	uxtb	r2, r2
 800deba:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800debc:	7a3b      	ldrb	r3, [r7, #8]
 800debe:	461a      	mov	r2, r3
 800dec0:	4b76      	ldr	r3, [pc, #472]	; (800e09c <mix_sub_columns+0x288>)
 800dec2:	5c9a      	ldrb	r2, [r3, r2]
 800dec4:	7b7b      	ldrb	r3, [r7, #13]
 800dec6:	4619      	mov	r1, r3
 800dec8:	4b75      	ldr	r3, [pc, #468]	; (800e0a0 <mix_sub_columns+0x28c>)
 800deca:	5c5b      	ldrb	r3, [r3, r1]
 800decc:	4053      	eors	r3, r2
 800dece:	b2da      	uxtb	r2, r3
 800ded0:	7cbb      	ldrb	r3, [r7, #18]
 800ded2:	4619      	mov	r1, r3
 800ded4:	4b72      	ldr	r3, [pc, #456]	; (800e0a0 <mix_sub_columns+0x28c>)
 800ded6:	5c5b      	ldrb	r3, [r3, r1]
 800ded8:	4053      	eors	r3, r2
 800deda:	b2d9      	uxtb	r1, r3
 800dedc:	7dfb      	ldrb	r3, [r7, #23]
 800dede:	461a      	mov	r2, r3
 800dee0:	4b6d      	ldr	r3, [pc, #436]	; (800e098 <mix_sub_columns+0x284>)
 800dee2:	5c9a      	ldrb	r2, [r3, r2]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	3303      	adds	r3, #3
 800dee8:	404a      	eors	r2, r1
 800deea:	b2d2      	uxtb	r2, r2
 800deec:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800deee:	7b3b      	ldrb	r3, [r7, #12]
 800def0:	461a      	mov	r2, r3
 800def2:	4b69      	ldr	r3, [pc, #420]	; (800e098 <mix_sub_columns+0x284>)
 800def4:	5c9a      	ldrb	r2, [r3, r2]
 800def6:	7c7b      	ldrb	r3, [r7, #17]
 800def8:	4619      	mov	r1, r3
 800defa:	4b68      	ldr	r3, [pc, #416]	; (800e09c <mix_sub_columns+0x288>)
 800defc:	5c5b      	ldrb	r3, [r3, r1]
 800defe:	4053      	eors	r3, r2
 800df00:	b2da      	uxtb	r2, r3
 800df02:	7dbb      	ldrb	r3, [r7, #22]
 800df04:	4619      	mov	r1, r3
 800df06:	4b66      	ldr	r3, [pc, #408]	; (800e0a0 <mix_sub_columns+0x28c>)
 800df08:	5c5b      	ldrb	r3, [r3, r1]
 800df0a:	4053      	eors	r3, r2
 800df0c:	b2d9      	uxtb	r1, r3
 800df0e:	7afb      	ldrb	r3, [r7, #11]
 800df10:	461a      	mov	r2, r3
 800df12:	4b63      	ldr	r3, [pc, #396]	; (800e0a0 <mix_sub_columns+0x28c>)
 800df14:	5c9a      	ldrb	r2, [r3, r2]
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	3304      	adds	r3, #4
 800df1a:	404a      	eors	r2, r1
 800df1c:	b2d2      	uxtb	r2, r2
 800df1e:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800df20:	7b3b      	ldrb	r3, [r7, #12]
 800df22:	461a      	mov	r2, r3
 800df24:	4b5e      	ldr	r3, [pc, #376]	; (800e0a0 <mix_sub_columns+0x28c>)
 800df26:	5c9a      	ldrb	r2, [r3, r2]
 800df28:	7c7b      	ldrb	r3, [r7, #17]
 800df2a:	4619      	mov	r1, r3
 800df2c:	4b5a      	ldr	r3, [pc, #360]	; (800e098 <mix_sub_columns+0x284>)
 800df2e:	5c5b      	ldrb	r3, [r3, r1]
 800df30:	4053      	eors	r3, r2
 800df32:	b2da      	uxtb	r2, r3
 800df34:	7dbb      	ldrb	r3, [r7, #22]
 800df36:	4619      	mov	r1, r3
 800df38:	4b58      	ldr	r3, [pc, #352]	; (800e09c <mix_sub_columns+0x288>)
 800df3a:	5c5b      	ldrb	r3, [r3, r1]
 800df3c:	4053      	eors	r3, r2
 800df3e:	b2d9      	uxtb	r1, r3
 800df40:	7afb      	ldrb	r3, [r7, #11]
 800df42:	461a      	mov	r2, r3
 800df44:	4b56      	ldr	r3, [pc, #344]	; (800e0a0 <mix_sub_columns+0x28c>)
 800df46:	5c9a      	ldrb	r2, [r3, r2]
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	3305      	adds	r3, #5
 800df4c:	404a      	eors	r2, r1
 800df4e:	b2d2      	uxtb	r2, r2
 800df50:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800df52:	7b3b      	ldrb	r3, [r7, #12]
 800df54:	461a      	mov	r2, r3
 800df56:	4b52      	ldr	r3, [pc, #328]	; (800e0a0 <mix_sub_columns+0x28c>)
 800df58:	5c9a      	ldrb	r2, [r3, r2]
 800df5a:	7c7b      	ldrb	r3, [r7, #17]
 800df5c:	4619      	mov	r1, r3
 800df5e:	4b50      	ldr	r3, [pc, #320]	; (800e0a0 <mix_sub_columns+0x28c>)
 800df60:	5c5b      	ldrb	r3, [r3, r1]
 800df62:	4053      	eors	r3, r2
 800df64:	b2da      	uxtb	r2, r3
 800df66:	7dbb      	ldrb	r3, [r7, #22]
 800df68:	4619      	mov	r1, r3
 800df6a:	4b4b      	ldr	r3, [pc, #300]	; (800e098 <mix_sub_columns+0x284>)
 800df6c:	5c5b      	ldrb	r3, [r3, r1]
 800df6e:	4053      	eors	r3, r2
 800df70:	b2d9      	uxtb	r1, r3
 800df72:	7afb      	ldrb	r3, [r7, #11]
 800df74:	461a      	mov	r2, r3
 800df76:	4b49      	ldr	r3, [pc, #292]	; (800e09c <mix_sub_columns+0x288>)
 800df78:	5c9a      	ldrb	r2, [r3, r2]
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	3306      	adds	r3, #6
 800df7e:	404a      	eors	r2, r1
 800df80:	b2d2      	uxtb	r2, r2
 800df82:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800df84:	7b3b      	ldrb	r3, [r7, #12]
 800df86:	461a      	mov	r2, r3
 800df88:	4b44      	ldr	r3, [pc, #272]	; (800e09c <mix_sub_columns+0x288>)
 800df8a:	5c9a      	ldrb	r2, [r3, r2]
 800df8c:	7c7b      	ldrb	r3, [r7, #17]
 800df8e:	4619      	mov	r1, r3
 800df90:	4b43      	ldr	r3, [pc, #268]	; (800e0a0 <mix_sub_columns+0x28c>)
 800df92:	5c5b      	ldrb	r3, [r3, r1]
 800df94:	4053      	eors	r3, r2
 800df96:	b2da      	uxtb	r2, r3
 800df98:	7dbb      	ldrb	r3, [r7, #22]
 800df9a:	4619      	mov	r1, r3
 800df9c:	4b40      	ldr	r3, [pc, #256]	; (800e0a0 <mix_sub_columns+0x28c>)
 800df9e:	5c5b      	ldrb	r3, [r3, r1]
 800dfa0:	4053      	eors	r3, r2
 800dfa2:	b2d9      	uxtb	r1, r3
 800dfa4:	7afb      	ldrb	r3, [r7, #11]
 800dfa6:	461a      	mov	r2, r3
 800dfa8:	4b3b      	ldr	r3, [pc, #236]	; (800e098 <mix_sub_columns+0x284>)
 800dfaa:	5c9a      	ldrb	r2, [r3, r2]
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	3307      	adds	r3, #7
 800dfb0:	404a      	eors	r2, r1
 800dfb2:	b2d2      	uxtb	r2, r2
 800dfb4:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800dfb6:	7c3b      	ldrb	r3, [r7, #16]
 800dfb8:	461a      	mov	r2, r3
 800dfba:	4b37      	ldr	r3, [pc, #220]	; (800e098 <mix_sub_columns+0x284>)
 800dfbc:	5c9a      	ldrb	r2, [r3, r2]
 800dfbe:	7d7b      	ldrb	r3, [r7, #21]
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	4b36      	ldr	r3, [pc, #216]	; (800e09c <mix_sub_columns+0x288>)
 800dfc4:	5c5b      	ldrb	r3, [r3, r1]
 800dfc6:	4053      	eors	r3, r2
 800dfc8:	b2da      	uxtb	r2, r3
 800dfca:	7abb      	ldrb	r3, [r7, #10]
 800dfcc:	4619      	mov	r1, r3
 800dfce:	4b34      	ldr	r3, [pc, #208]	; (800e0a0 <mix_sub_columns+0x28c>)
 800dfd0:	5c5b      	ldrb	r3, [r3, r1]
 800dfd2:	4053      	eors	r3, r2
 800dfd4:	b2d9      	uxtb	r1, r3
 800dfd6:	7bfb      	ldrb	r3, [r7, #15]
 800dfd8:	461a      	mov	r2, r3
 800dfda:	4b31      	ldr	r3, [pc, #196]	; (800e0a0 <mix_sub_columns+0x28c>)
 800dfdc:	5c9a      	ldrb	r2, [r3, r2]
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	3308      	adds	r3, #8
 800dfe2:	404a      	eors	r2, r1
 800dfe4:	b2d2      	uxtb	r2, r2
 800dfe6:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800dfe8:	7c3b      	ldrb	r3, [r7, #16]
 800dfea:	461a      	mov	r2, r3
 800dfec:	4b2c      	ldr	r3, [pc, #176]	; (800e0a0 <mix_sub_columns+0x28c>)
 800dfee:	5c9a      	ldrb	r2, [r3, r2]
 800dff0:	7d7b      	ldrb	r3, [r7, #21]
 800dff2:	4619      	mov	r1, r3
 800dff4:	4b28      	ldr	r3, [pc, #160]	; (800e098 <mix_sub_columns+0x284>)
 800dff6:	5c5b      	ldrb	r3, [r3, r1]
 800dff8:	4053      	eors	r3, r2
 800dffa:	b2da      	uxtb	r2, r3
 800dffc:	7abb      	ldrb	r3, [r7, #10]
 800dffe:	4619      	mov	r1, r3
 800e000:	4b26      	ldr	r3, [pc, #152]	; (800e09c <mix_sub_columns+0x288>)
 800e002:	5c5b      	ldrb	r3, [r3, r1]
 800e004:	4053      	eors	r3, r2
 800e006:	b2d9      	uxtb	r1, r3
 800e008:	7bfb      	ldrb	r3, [r7, #15]
 800e00a:	461a      	mov	r2, r3
 800e00c:	4b24      	ldr	r3, [pc, #144]	; (800e0a0 <mix_sub_columns+0x28c>)
 800e00e:	5c9a      	ldrb	r2, [r3, r2]
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	3309      	adds	r3, #9
 800e014:	404a      	eors	r2, r1
 800e016:	b2d2      	uxtb	r2, r2
 800e018:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800e01a:	7c3b      	ldrb	r3, [r7, #16]
 800e01c:	461a      	mov	r2, r3
 800e01e:	4b20      	ldr	r3, [pc, #128]	; (800e0a0 <mix_sub_columns+0x28c>)
 800e020:	5c9a      	ldrb	r2, [r3, r2]
 800e022:	7d7b      	ldrb	r3, [r7, #21]
 800e024:	4619      	mov	r1, r3
 800e026:	4b1e      	ldr	r3, [pc, #120]	; (800e0a0 <mix_sub_columns+0x28c>)
 800e028:	5c5b      	ldrb	r3, [r3, r1]
 800e02a:	4053      	eors	r3, r2
 800e02c:	b2da      	uxtb	r2, r3
 800e02e:	7abb      	ldrb	r3, [r7, #10]
 800e030:	4619      	mov	r1, r3
 800e032:	4b19      	ldr	r3, [pc, #100]	; (800e098 <mix_sub_columns+0x284>)
 800e034:	5c5b      	ldrb	r3, [r3, r1]
 800e036:	4053      	eors	r3, r2
 800e038:	b2d9      	uxtb	r1, r3
 800e03a:	7bfb      	ldrb	r3, [r7, #15]
 800e03c:	461a      	mov	r2, r3
 800e03e:	4b17      	ldr	r3, [pc, #92]	; (800e09c <mix_sub_columns+0x288>)
 800e040:	5c9a      	ldrb	r2, [r3, r2]
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	330a      	adds	r3, #10
 800e046:	404a      	eors	r2, r1
 800e048:	b2d2      	uxtb	r2, r2
 800e04a:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800e04c:	7c3b      	ldrb	r3, [r7, #16]
 800e04e:	461a      	mov	r2, r3
 800e050:	4b12      	ldr	r3, [pc, #72]	; (800e09c <mix_sub_columns+0x288>)
 800e052:	5c9a      	ldrb	r2, [r3, r2]
 800e054:	7d7b      	ldrb	r3, [r7, #21]
 800e056:	4619      	mov	r1, r3
 800e058:	4b11      	ldr	r3, [pc, #68]	; (800e0a0 <mix_sub_columns+0x28c>)
 800e05a:	5c5b      	ldrb	r3, [r3, r1]
 800e05c:	4053      	eors	r3, r2
 800e05e:	b2da      	uxtb	r2, r3
 800e060:	7abb      	ldrb	r3, [r7, #10]
 800e062:	4619      	mov	r1, r3
 800e064:	4b0e      	ldr	r3, [pc, #56]	; (800e0a0 <mix_sub_columns+0x28c>)
 800e066:	5c5b      	ldrb	r3, [r3, r1]
 800e068:	4053      	eors	r3, r2
 800e06a:	b2d9      	uxtb	r1, r3
 800e06c:	7bfb      	ldrb	r3, [r7, #15]
 800e06e:	461a      	mov	r2, r3
 800e070:	4b09      	ldr	r3, [pc, #36]	; (800e098 <mix_sub_columns+0x284>)
 800e072:	5c9a      	ldrb	r2, [r3, r2]
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	330b      	adds	r3, #11
 800e078:	404a      	eors	r2, r1
 800e07a:	b2d2      	uxtb	r2, r2
 800e07c:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800e07e:	7d3b      	ldrb	r3, [r7, #20]
 800e080:	461a      	mov	r2, r3
 800e082:	4b05      	ldr	r3, [pc, #20]	; (800e098 <mix_sub_columns+0x284>)
 800e084:	5c9a      	ldrb	r2, [r3, r2]
 800e086:	7a7b      	ldrb	r3, [r7, #9]
 800e088:	4619      	mov	r1, r3
 800e08a:	4b04      	ldr	r3, [pc, #16]	; (800e09c <mix_sub_columns+0x288>)
 800e08c:	5c5b      	ldrb	r3, [r3, r1]
 800e08e:	4053      	eors	r3, r2
 800e090:	b2da      	uxtb	r2, r3
 800e092:	7bbb      	ldrb	r3, [r7, #14]
 800e094:	4619      	mov	r1, r3
 800e096:	e005      	b.n	800e0a4 <mix_sub_columns+0x290>
 800e098:	08020adc 	.word	0x08020adc
 800e09c:	08020bdc 	.word	0x08020bdc
 800e0a0:	080209dc 	.word	0x080209dc
 800e0a4:	4b2d      	ldr	r3, [pc, #180]	; (800e15c <mix_sub_columns+0x348>)
 800e0a6:	5c5b      	ldrb	r3, [r3, r1]
 800e0a8:	4053      	eors	r3, r2
 800e0aa:	b2d9      	uxtb	r1, r3
 800e0ac:	7cfb      	ldrb	r3, [r7, #19]
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	4b2a      	ldr	r3, [pc, #168]	; (800e15c <mix_sub_columns+0x348>)
 800e0b2:	5c9a      	ldrb	r2, [r3, r2]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	330c      	adds	r3, #12
 800e0b8:	404a      	eors	r2, r1
 800e0ba:	b2d2      	uxtb	r2, r2
 800e0bc:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800e0be:	7d3b      	ldrb	r3, [r7, #20]
 800e0c0:	461a      	mov	r2, r3
 800e0c2:	4b26      	ldr	r3, [pc, #152]	; (800e15c <mix_sub_columns+0x348>)
 800e0c4:	5c9a      	ldrb	r2, [r3, r2]
 800e0c6:	7a7b      	ldrb	r3, [r7, #9]
 800e0c8:	4619      	mov	r1, r3
 800e0ca:	4b25      	ldr	r3, [pc, #148]	; (800e160 <mix_sub_columns+0x34c>)
 800e0cc:	5c5b      	ldrb	r3, [r3, r1]
 800e0ce:	4053      	eors	r3, r2
 800e0d0:	b2da      	uxtb	r2, r3
 800e0d2:	7bbb      	ldrb	r3, [r7, #14]
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	4b23      	ldr	r3, [pc, #140]	; (800e164 <mix_sub_columns+0x350>)
 800e0d8:	5c5b      	ldrb	r3, [r3, r1]
 800e0da:	4053      	eors	r3, r2
 800e0dc:	b2d9      	uxtb	r1, r3
 800e0de:	7cfb      	ldrb	r3, [r7, #19]
 800e0e0:	461a      	mov	r2, r3
 800e0e2:	4b1e      	ldr	r3, [pc, #120]	; (800e15c <mix_sub_columns+0x348>)
 800e0e4:	5c9a      	ldrb	r2, [r3, r2]
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	330d      	adds	r3, #13
 800e0ea:	404a      	eors	r2, r1
 800e0ec:	b2d2      	uxtb	r2, r2
 800e0ee:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800e0f0:	7d3b      	ldrb	r3, [r7, #20]
 800e0f2:	461a      	mov	r2, r3
 800e0f4:	4b19      	ldr	r3, [pc, #100]	; (800e15c <mix_sub_columns+0x348>)
 800e0f6:	5c9a      	ldrb	r2, [r3, r2]
 800e0f8:	7a7b      	ldrb	r3, [r7, #9]
 800e0fa:	4619      	mov	r1, r3
 800e0fc:	4b17      	ldr	r3, [pc, #92]	; (800e15c <mix_sub_columns+0x348>)
 800e0fe:	5c5b      	ldrb	r3, [r3, r1]
 800e100:	4053      	eors	r3, r2
 800e102:	b2da      	uxtb	r2, r3
 800e104:	7bbb      	ldrb	r3, [r7, #14]
 800e106:	4619      	mov	r1, r3
 800e108:	4b15      	ldr	r3, [pc, #84]	; (800e160 <mix_sub_columns+0x34c>)
 800e10a:	5c5b      	ldrb	r3, [r3, r1]
 800e10c:	4053      	eors	r3, r2
 800e10e:	b2d9      	uxtb	r1, r3
 800e110:	7cfb      	ldrb	r3, [r7, #19]
 800e112:	461a      	mov	r2, r3
 800e114:	4b13      	ldr	r3, [pc, #76]	; (800e164 <mix_sub_columns+0x350>)
 800e116:	5c9a      	ldrb	r2, [r3, r2]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	330e      	adds	r3, #14
 800e11c:	404a      	eors	r2, r1
 800e11e:	b2d2      	uxtb	r2, r2
 800e120:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800e122:	7d3b      	ldrb	r3, [r7, #20]
 800e124:	461a      	mov	r2, r3
 800e126:	4b0f      	ldr	r3, [pc, #60]	; (800e164 <mix_sub_columns+0x350>)
 800e128:	5c9a      	ldrb	r2, [r3, r2]
 800e12a:	7a7b      	ldrb	r3, [r7, #9]
 800e12c:	4619      	mov	r1, r3
 800e12e:	4b0b      	ldr	r3, [pc, #44]	; (800e15c <mix_sub_columns+0x348>)
 800e130:	5c5b      	ldrb	r3, [r3, r1]
 800e132:	4053      	eors	r3, r2
 800e134:	b2da      	uxtb	r2, r3
 800e136:	7bbb      	ldrb	r3, [r7, #14]
 800e138:	4619      	mov	r1, r3
 800e13a:	4b08      	ldr	r3, [pc, #32]	; (800e15c <mix_sub_columns+0x348>)
 800e13c:	5c5b      	ldrb	r3, [r3, r1]
 800e13e:	4053      	eors	r3, r2
 800e140:	b2d9      	uxtb	r1, r3
 800e142:	7cfb      	ldrb	r3, [r7, #19]
 800e144:	461a      	mov	r2, r3
 800e146:	4b06      	ldr	r3, [pc, #24]	; (800e160 <mix_sub_columns+0x34c>)
 800e148:	5c9a      	ldrb	r2, [r3, r2]
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	330f      	adds	r3, #15
 800e14e:	404a      	eors	r2, r1
 800e150:	b2d2      	uxtb	r2, r2
 800e152:	701a      	strb	r2, [r3, #0]
  }
 800e154:	bf00      	nop
 800e156:	3718      	adds	r7, #24
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}
 800e15c:	080209dc 	.word	0x080209dc
 800e160:	08020adc 	.word	0x08020adc
 800e164:	08020bdc 	.word	0x08020bdc

0800e168 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b086      	sub	sp, #24
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	60f8      	str	r0, [r7, #12]
 800e170:	460b      	mov	r3, r1
 800e172:	607a      	str	r2, [r7, #4]
 800e174:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800e176:	7afb      	ldrb	r3, [r7, #11]
 800e178:	3b10      	subs	r3, #16
 800e17a:	2b10      	cmp	r3, #16
 800e17c:	bf8c      	ite	hi
 800e17e:	2201      	movhi	r2, #1
 800e180:	2200      	movls	r2, #0
 800e182:	b2d2      	uxtb	r2, r2
 800e184:	2a00      	cmp	r2, #0
 800e186:	d10b      	bne.n	800e1a0 <lorawan_aes_set_key+0x38>
 800e188:	4a64      	ldr	r2, [pc, #400]	; (800e31c <lorawan_aes_set_key+0x1b4>)
 800e18a:	fa22 f303 	lsr.w	r3, r2, r3
 800e18e:	f003 0301 	and.w	r3, r3, #1
 800e192:	2b00      	cmp	r3, #0
 800e194:	bf14      	ite	ne
 800e196:	2301      	movne	r3, #1
 800e198:	2300      	moveq	r3, #0
 800e19a:	b2db      	uxtb	r3, r3
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d105      	bne.n	800e1ac <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800e1a8:	23ff      	movs	r3, #255	; 0xff
 800e1aa:	e0b2      	b.n	800e312 <lorawan_aes_set_key+0x1aa>
        break;
 800e1ac:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	7afa      	ldrb	r2, [r7, #11]
 800e1b2:	68f9      	ldr	r1, [r7, #12]
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f7ff fbfc 	bl	800d9b2 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800e1ba:	7afb      	ldrb	r3, [r7, #11]
 800e1bc:	331c      	adds	r3, #28
 800e1be:	b2db      	uxtb	r3, r3
 800e1c0:	009b      	lsls	r3, r3, #2
 800e1c2:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800e1c4:	7c7b      	ldrb	r3, [r7, #17]
 800e1c6:	091b      	lsrs	r3, r3, #4
 800e1c8:	b2db      	uxtb	r3, r3
 800e1ca:	3b01      	subs	r3, #1
 800e1cc:	b2da      	uxtb	r2, r3
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e1d4:	7afb      	ldrb	r3, [r7, #11]
 800e1d6:	75fb      	strb	r3, [r7, #23]
 800e1d8:	2301      	movs	r3, #1
 800e1da:	75bb      	strb	r3, [r7, #22]
 800e1dc:	e093      	b.n	800e306 <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800e1de:	7dfb      	ldrb	r3, [r7, #23]
 800e1e0:	3b04      	subs	r3, #4
 800e1e2:	687a      	ldr	r2, [r7, #4]
 800e1e4:	5cd3      	ldrb	r3, [r2, r3]
 800e1e6:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800e1e8:	7dfb      	ldrb	r3, [r7, #23]
 800e1ea:	3b03      	subs	r3, #3
 800e1ec:	687a      	ldr	r2, [r7, #4]
 800e1ee:	5cd3      	ldrb	r3, [r2, r3]
 800e1f0:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800e1f2:	7dfb      	ldrb	r3, [r7, #23]
 800e1f4:	3b02      	subs	r3, #2
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	5cd3      	ldrb	r3, [r2, r3]
 800e1fa:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800e1fc:	7dfb      	ldrb	r3, [r7, #23]
 800e1fe:	3b01      	subs	r3, #1
 800e200:	687a      	ldr	r2, [r7, #4]
 800e202:	5cd3      	ldrb	r3, [r2, r3]
 800e204:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800e206:	7dfb      	ldrb	r3, [r7, #23]
 800e208:	7afa      	ldrb	r2, [r7, #11]
 800e20a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e20e:	fb01 f202 	mul.w	r2, r1, r2
 800e212:	1a9b      	subs	r3, r3, r2
 800e214:	b2db      	uxtb	r3, r3
 800e216:	2b00      	cmp	r3, #0
 800e218:	d127      	bne.n	800e26a <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800e21a:	7d7b      	ldrb	r3, [r7, #21]
 800e21c:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800e21e:	7d3b      	ldrb	r3, [r7, #20]
 800e220:	4a3f      	ldr	r2, [pc, #252]	; (800e320 <lorawan_aes_set_key+0x1b8>)
 800e222:	5cd2      	ldrb	r2, [r2, r3]
 800e224:	7dbb      	ldrb	r3, [r7, #22]
 800e226:	4053      	eors	r3, r2
 800e228:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800e22a:	7cfb      	ldrb	r3, [r7, #19]
 800e22c:	4a3c      	ldr	r2, [pc, #240]	; (800e320 <lorawan_aes_set_key+0x1b8>)
 800e22e:	5cd3      	ldrb	r3, [r2, r3]
 800e230:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800e232:	7cbb      	ldrb	r3, [r7, #18]
 800e234:	4a3a      	ldr	r2, [pc, #232]	; (800e320 <lorawan_aes_set_key+0x1b8>)
 800e236:	5cd3      	ldrb	r3, [r2, r3]
 800e238:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800e23a:	7c3b      	ldrb	r3, [r7, #16]
 800e23c:	4a38      	ldr	r2, [pc, #224]	; (800e320 <lorawan_aes_set_key+0x1b8>)
 800e23e:	5cd3      	ldrb	r3, [r2, r3]
 800e240:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800e242:	7dbb      	ldrb	r3, [r7, #22]
 800e244:	005b      	lsls	r3, r3, #1
 800e246:	b25a      	sxtb	r2, r3
 800e248:	7dbb      	ldrb	r3, [r7, #22]
 800e24a:	09db      	lsrs	r3, r3, #7
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	4619      	mov	r1, r3
 800e250:	0049      	lsls	r1, r1, #1
 800e252:	440b      	add	r3, r1
 800e254:	4619      	mov	r1, r3
 800e256:	00c8      	lsls	r0, r1, #3
 800e258:	4619      	mov	r1, r3
 800e25a:	4603      	mov	r3, r0
 800e25c:	440b      	add	r3, r1
 800e25e:	b2db      	uxtb	r3, r3
 800e260:	b25b      	sxtb	r3, r3
 800e262:	4053      	eors	r3, r2
 800e264:	b25b      	sxtb	r3, r3
 800e266:	75bb      	strb	r3, [r7, #22]
 800e268:	e01c      	b.n	800e2a4 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800e26a:	7afb      	ldrb	r3, [r7, #11]
 800e26c:	2b18      	cmp	r3, #24
 800e26e:	d919      	bls.n	800e2a4 <lorawan_aes_set_key+0x13c>
 800e270:	7dfb      	ldrb	r3, [r7, #23]
 800e272:	7afa      	ldrb	r2, [r7, #11]
 800e274:	fbb3 f1f2 	udiv	r1, r3, r2
 800e278:	fb01 f202 	mul.w	r2, r1, r2
 800e27c:	1a9b      	subs	r3, r3, r2
 800e27e:	b2db      	uxtb	r3, r3
 800e280:	2b10      	cmp	r3, #16
 800e282:	d10f      	bne.n	800e2a4 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800e284:	7d7b      	ldrb	r3, [r7, #21]
 800e286:	4a26      	ldr	r2, [pc, #152]	; (800e320 <lorawan_aes_set_key+0x1b8>)
 800e288:	5cd3      	ldrb	r3, [r2, r3]
 800e28a:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800e28c:	7d3b      	ldrb	r3, [r7, #20]
 800e28e:	4a24      	ldr	r2, [pc, #144]	; (800e320 <lorawan_aes_set_key+0x1b8>)
 800e290:	5cd3      	ldrb	r3, [r2, r3]
 800e292:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800e294:	7cfb      	ldrb	r3, [r7, #19]
 800e296:	4a22      	ldr	r2, [pc, #136]	; (800e320 <lorawan_aes_set_key+0x1b8>)
 800e298:	5cd3      	ldrb	r3, [r2, r3]
 800e29a:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800e29c:	7cbb      	ldrb	r3, [r7, #18]
 800e29e:	4a20      	ldr	r2, [pc, #128]	; (800e320 <lorawan_aes_set_key+0x1b8>)
 800e2a0:	5cd3      	ldrb	r3, [r2, r3]
 800e2a2:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800e2a4:	7dfa      	ldrb	r2, [r7, #23]
 800e2a6:	7afb      	ldrb	r3, [r7, #11]
 800e2a8:	1ad3      	subs	r3, r2, r3
 800e2aa:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800e2ac:	7c3b      	ldrb	r3, [r7, #16]
 800e2ae:	687a      	ldr	r2, [r7, #4]
 800e2b0:	5cd1      	ldrb	r1, [r2, r3]
 800e2b2:	7dfb      	ldrb	r3, [r7, #23]
 800e2b4:	7d7a      	ldrb	r2, [r7, #21]
 800e2b6:	404a      	eors	r2, r1
 800e2b8:	b2d1      	uxtb	r1, r2
 800e2ba:	687a      	ldr	r2, [r7, #4]
 800e2bc:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800e2be:	7c3b      	ldrb	r3, [r7, #16]
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	687a      	ldr	r2, [r7, #4]
 800e2c4:	5cd1      	ldrb	r1, [r2, r3]
 800e2c6:	7dfb      	ldrb	r3, [r7, #23]
 800e2c8:	3301      	adds	r3, #1
 800e2ca:	7d3a      	ldrb	r2, [r7, #20]
 800e2cc:	404a      	eors	r2, r1
 800e2ce:	b2d1      	uxtb	r1, r2
 800e2d0:	687a      	ldr	r2, [r7, #4]
 800e2d2:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800e2d4:	7c3b      	ldrb	r3, [r7, #16]
 800e2d6:	3302      	adds	r3, #2
 800e2d8:	687a      	ldr	r2, [r7, #4]
 800e2da:	5cd1      	ldrb	r1, [r2, r3]
 800e2dc:	7dfb      	ldrb	r3, [r7, #23]
 800e2de:	3302      	adds	r3, #2
 800e2e0:	7cfa      	ldrb	r2, [r7, #19]
 800e2e2:	404a      	eors	r2, r1
 800e2e4:	b2d1      	uxtb	r1, r2
 800e2e6:	687a      	ldr	r2, [r7, #4]
 800e2e8:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800e2ea:	7c3b      	ldrb	r3, [r7, #16]
 800e2ec:	3303      	adds	r3, #3
 800e2ee:	687a      	ldr	r2, [r7, #4]
 800e2f0:	5cd1      	ldrb	r1, [r2, r3]
 800e2f2:	7dfb      	ldrb	r3, [r7, #23]
 800e2f4:	3303      	adds	r3, #3
 800e2f6:	7cba      	ldrb	r2, [r7, #18]
 800e2f8:	404a      	eors	r2, r1
 800e2fa:	b2d1      	uxtb	r1, r2
 800e2fc:	687a      	ldr	r2, [r7, #4]
 800e2fe:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e300:	7dfb      	ldrb	r3, [r7, #23]
 800e302:	3304      	adds	r3, #4
 800e304:	75fb      	strb	r3, [r7, #23]
 800e306:	7dfa      	ldrb	r2, [r7, #23]
 800e308:	7c7b      	ldrb	r3, [r7, #17]
 800e30a:	429a      	cmp	r2, r3
 800e30c:	f4ff af67 	bcc.w	800e1de <lorawan_aes_set_key+0x76>
    }
    return 0;
 800e310:	2300      	movs	r3, #0
}
 800e312:	4618      	mov	r0, r3
 800e314:	3718      	adds	r7, #24
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}
 800e31a:	bf00      	nop
 800e31c:	00010101 	.word	0x00010101
 800e320:	080209dc 	.word	0x080209dc

0800e324 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b08a      	sub	sp, #40	; 0x28
 800e328:	af00      	add	r7, sp, #0
 800e32a:	60f8      	str	r0, [r7, #12]
 800e32c:	60b9      	str	r1, [r7, #8]
 800e32e:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800e336:	2b00      	cmp	r3, #0
 800e338:	d038      	beq.n	800e3ac <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800e33a:	687a      	ldr	r2, [r7, #4]
 800e33c:	f107 0314 	add.w	r3, r7, #20
 800e340:	68f9      	ldr	r1, [r7, #12]
 800e342:	4618      	mov	r0, r3
 800e344:	f7ff fc07 	bl	800db56 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800e348:	2301      	movs	r3, #1
 800e34a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e34e:	e014      	b.n	800e37a <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800e350:	f107 0314 	add.w	r3, r7, #20
 800e354:	4618      	mov	r0, r3
 800e356:	f7ff fd5d 	bl	800de14 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e360:	0112      	lsls	r2, r2, #4
 800e362:	441a      	add	r2, r3
 800e364:	f107 0314 	add.w	r3, r7, #20
 800e368:	4611      	mov	r1, r2
 800e36a:	4618      	mov	r0, r3
 800e36c:	f7ff fcab 	bl	800dcc6 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800e370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e374:	3301      	adds	r3, #1
 800e376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800e380:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e384:	429a      	cmp	r2, r3
 800e386:	d3e3      	bcc.n	800e350 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800e388:	f107 0314 	add.w	r3, r7, #20
 800e38c:	4618      	mov	r0, r3
 800e38e:	f7ff fca7 	bl	800dce0 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e398:	0112      	lsls	r2, r2, #4
 800e39a:	441a      	add	r2, r3
 800e39c:	f107 0314 	add.w	r3, r7, #20
 800e3a0:	4619      	mov	r1, r3
 800e3a2:	68b8      	ldr	r0, [r7, #8]
 800e3a4:	f7ff fbd7 	bl	800db56 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	e000      	b.n	800e3ae <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800e3ac:	23ff      	movs	r3, #255	; 0xff
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3728      	adds	r7, #40	; 0x28
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}
	...

0800e3b8 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800e3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3ba:	b0a1      	sub	sp, #132	; 0x84
 800e3bc:	af12      	add	r7, sp, #72	; 0x48
 800e3be:	4603      	mov	r3, r0
 800e3c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800e3c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e3c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3cc:	4611      	mov	r1, r2
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f000 fa12 	bl	800e7f8 <SecureElementGetKeyByID>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d174      	bne.n	800e4c4 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e3da:	2300      	movs	r3, #0
 800e3dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e3e0:	e06c      	b.n	800e4bc <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800e3e2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e3e6:	4939      	ldr	r1, [pc, #228]	; (800e4cc <PrintKey+0x114>)
 800e3e8:	4613      	mov	r3, r2
 800e3ea:	005b      	lsls	r3, r3, #1
 800e3ec:	4413      	add	r3, r2
 800e3ee:	009b      	lsls	r3, r3, #2
 800e3f0:	440b      	add	r3, r1
 800e3f2:	781b      	ldrb	r3, [r3, #0]
 800e3f4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	d15a      	bne.n	800e4b2 <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800e3fc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e400:	4932      	ldr	r1, [pc, #200]	; (800e4cc <PrintKey+0x114>)
 800e402:	4613      	mov	r3, r2
 800e404:	005b      	lsls	r3, r3, #1
 800e406:	4413      	add	r3, r2
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	440b      	add	r3, r1
 800e40c:	3308      	adds	r3, #8
 800e40e:	6819      	ldr	r1, [r3, #0]
 800e410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e412:	785b      	ldrb	r3, [r3, #1]
 800e414:	461d      	mov	r5, r3
 800e416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e418:	789b      	ldrb	r3, [r3, #2]
 800e41a:	461e      	mov	r6, r3
 800e41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e41e:	78db      	ldrb	r3, [r3, #3]
 800e420:	62bb      	str	r3, [r7, #40]	; 0x28
 800e422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e424:	791b      	ldrb	r3, [r3, #4]
 800e426:	627b      	str	r3, [r7, #36]	; 0x24
 800e428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e42a:	795b      	ldrb	r3, [r3, #5]
 800e42c:	623b      	str	r3, [r7, #32]
 800e42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e430:	799b      	ldrb	r3, [r3, #6]
 800e432:	61fb      	str	r3, [r7, #28]
 800e434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e436:	79db      	ldrb	r3, [r3, #7]
 800e438:	61bb      	str	r3, [r7, #24]
 800e43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e43c:	7a1b      	ldrb	r3, [r3, #8]
 800e43e:	617b      	str	r3, [r7, #20]
 800e440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e442:	7a5b      	ldrb	r3, [r3, #9]
 800e444:	613b      	str	r3, [r7, #16]
 800e446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e448:	7a9b      	ldrb	r3, [r3, #10]
 800e44a:	60fb      	str	r3, [r7, #12]
 800e44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e44e:	7adb      	ldrb	r3, [r3, #11]
 800e450:	60bb      	str	r3, [r7, #8]
 800e452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e454:	7b1b      	ldrb	r3, [r3, #12]
 800e456:	607b      	str	r3, [r7, #4]
 800e458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e45a:	7b5b      	ldrb	r3, [r3, #13]
 800e45c:	461c      	mov	r4, r3
 800e45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e460:	7b9b      	ldrb	r3, [r3, #14]
 800e462:	4618      	mov	r0, r3
 800e464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e466:	7bdb      	ldrb	r3, [r3, #15]
 800e468:	461a      	mov	r2, r3
 800e46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e46c:	7c1b      	ldrb	r3, [r3, #16]
 800e46e:	9310      	str	r3, [sp, #64]	; 0x40
 800e470:	920f      	str	r2, [sp, #60]	; 0x3c
 800e472:	900e      	str	r0, [sp, #56]	; 0x38
 800e474:	940d      	str	r4, [sp, #52]	; 0x34
 800e476:	687a      	ldr	r2, [r7, #4]
 800e478:	920c      	str	r2, [sp, #48]	; 0x30
 800e47a:	68ba      	ldr	r2, [r7, #8]
 800e47c:	920b      	str	r2, [sp, #44]	; 0x2c
 800e47e:	68fa      	ldr	r2, [r7, #12]
 800e480:	920a      	str	r2, [sp, #40]	; 0x28
 800e482:	693a      	ldr	r2, [r7, #16]
 800e484:	9209      	str	r2, [sp, #36]	; 0x24
 800e486:	697a      	ldr	r2, [r7, #20]
 800e488:	9208      	str	r2, [sp, #32]
 800e48a:	69ba      	ldr	r2, [r7, #24]
 800e48c:	9207      	str	r2, [sp, #28]
 800e48e:	69fa      	ldr	r2, [r7, #28]
 800e490:	9206      	str	r2, [sp, #24]
 800e492:	6a3a      	ldr	r2, [r7, #32]
 800e494:	9205      	str	r2, [sp, #20]
 800e496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e498:	9204      	str	r2, [sp, #16]
 800e49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e49c:	9303      	str	r3, [sp, #12]
 800e49e:	9602      	str	r6, [sp, #8]
 800e4a0:	9501      	str	r5, [sp, #4]
 800e4a2:	9100      	str	r1, [sp, #0]
 800e4a4:	4b0a      	ldr	r3, [pc, #40]	; (800e4d0 <PrintKey+0x118>)
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	2100      	movs	r1, #0
 800e4aa:	2002      	movs	r0, #2
 800e4ac:	f011 fa34 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
 800e4b0:	e008      	b.n	800e4c4 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e4b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e4bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e4c0:	2b0a      	cmp	r3, #10
 800e4c2:	d98e      	bls.n	800e3e2 <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800e4c4:	373c      	adds	r7, #60	; 0x3c
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4ca:	bf00      	nop
 800e4cc:	08020cdc 	.word	0x08020cdc
 800e4d0:	08020560 	.word	0x08020560

0800e4d4 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800e4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4d6:	b091      	sub	sp, #68	; 0x44
 800e4d8:	af08      	add	r7, sp, #32
 800e4da:	4603      	mov	r3, r0
 800e4dc:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800e4e2:	f107 0310 	add.w	r3, r7, #16
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f000 fbda 	bl	800eca0 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800e4ec:	7c3b      	ldrb	r3, [r7, #16]
 800e4ee:	7c7a      	ldrb	r2, [r7, #17]
 800e4f0:	7cb9      	ldrb	r1, [r7, #18]
 800e4f2:	7cf8      	ldrb	r0, [r7, #19]
 800e4f4:	7d3c      	ldrb	r4, [r7, #20]
 800e4f6:	7d7d      	ldrb	r5, [r7, #21]
 800e4f8:	7dbe      	ldrb	r6, [r7, #22]
 800e4fa:	f897 c017 	ldrb.w	ip, [r7, #23]
 800e4fe:	f8cd c01c 	str.w	ip, [sp, #28]
 800e502:	9606      	str	r6, [sp, #24]
 800e504:	9505      	str	r5, [sp, #20]
 800e506:	9404      	str	r4, [sp, #16]
 800e508:	9003      	str	r0, [sp, #12]
 800e50a:	9102      	str	r1, [sp, #8]
 800e50c:	9201      	str	r2, [sp, #4]
 800e50e:	9300      	str	r3, [sp, #0]
 800e510:	4b24      	ldr	r3, [pc, #144]	; (800e5a4 <PrintIds+0xd0>)
 800e512:	2200      	movs	r2, #0
 800e514:	2100      	movs	r1, #0
 800e516:	2002      	movs	r0, #2
 800e518:	f011 f9fe 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800e51c:	f107 0318 	add.w	r3, r7, #24
 800e520:	4618      	mov	r0, r3
 800e522:	f000 fbed 	bl	800ed00 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800e526:	7e3b      	ldrb	r3, [r7, #24]
 800e528:	7e7a      	ldrb	r2, [r7, #25]
 800e52a:	7eb9      	ldrb	r1, [r7, #26]
 800e52c:	7ef8      	ldrb	r0, [r7, #27]
 800e52e:	7f3c      	ldrb	r4, [r7, #28]
 800e530:	7f7d      	ldrb	r5, [r7, #29]
 800e532:	7fbe      	ldrb	r6, [r7, #30]
 800e534:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800e538:	f8cd c01c 	str.w	ip, [sp, #28]
 800e53c:	9606      	str	r6, [sp, #24]
 800e53e:	9505      	str	r5, [sp, #20]
 800e540:	9404      	str	r4, [sp, #16]
 800e542:	9003      	str	r0, [sp, #12]
 800e544:	9102      	str	r1, [sp, #8]
 800e546:	9201      	str	r2, [sp, #4]
 800e548:	9300      	str	r3, [sp, #0]
 800e54a:	4b17      	ldr	r3, [pc, #92]	; (800e5a8 <PrintIds+0xd4>)
 800e54c:	2200      	movs	r2, #0
 800e54e:	2100      	movs	r1, #0
 800e550:	2002      	movs	r0, #2
 800e552:	f011 f9e1 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800e556:	f107 020c 	add.w	r2, r7, #12
 800e55a:	79fb      	ldrb	r3, [r7, #7]
 800e55c:	4611      	mov	r1, r2
 800e55e:	4618      	mov	r0, r3
 800e560:	f000 fc00 	bl	800ed64 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800e564:	f107 030c 	add.w	r3, r7, #12
 800e568:	3303      	adds	r3, #3
 800e56a:	781b      	ldrb	r3, [r3, #0]
 800e56c:	461a      	mov	r2, r3
 800e56e:	f107 030c 	add.w	r3, r7, #12
 800e572:	3302      	adds	r3, #2
 800e574:	781b      	ldrb	r3, [r3, #0]
 800e576:	4619      	mov	r1, r3
 800e578:	f107 030c 	add.w	r3, r7, #12
 800e57c:	3301      	adds	r3, #1
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	4618      	mov	r0, r3
 800e582:	f107 030c 	add.w	r3, r7, #12
 800e586:	781b      	ldrb	r3, [r3, #0]
 800e588:	9303      	str	r3, [sp, #12]
 800e58a:	9002      	str	r0, [sp, #8]
 800e58c:	9101      	str	r1, [sp, #4]
 800e58e:	9200      	str	r2, [sp, #0]
 800e590:	4b06      	ldr	r3, [pc, #24]	; (800e5ac <PrintIds+0xd8>)
 800e592:	2200      	movs	r2, #0
 800e594:	2100      	movs	r1, #0
 800e596:	2002      	movs	r0, #2
 800e598:	f011 f9be 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800e59c:	bf00      	nop
 800e59e:	3724      	adds	r7, #36	; 0x24
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5a4:	080205bc 	.word	0x080205bc
 800e5a8:	080205fc 	.word	0x080205fc
 800e5ac:	0802063c 	.word	0x0802063c

0800e5b0 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800e5b0:	b480      	push	{r7}
 800e5b2:	b085      	sub	sp, #20
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	6039      	str	r1, [r7, #0]
 800e5ba:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e5bc:	2300      	movs	r3, #0
 800e5be:	73fb      	strb	r3, [r7, #15]
 800e5c0:	e01a      	b.n	800e5f8 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800e5c2:	4b12      	ldr	r3, [pc, #72]	; (800e60c <GetKeyByID+0x5c>)
 800e5c4:	6819      	ldr	r1, [r3, #0]
 800e5c6:	7bfa      	ldrb	r2, [r7, #15]
 800e5c8:	4613      	mov	r3, r2
 800e5ca:	011b      	lsls	r3, r3, #4
 800e5cc:	4413      	add	r3, r2
 800e5ce:	440b      	add	r3, r1
 800e5d0:	3318      	adds	r3, #24
 800e5d2:	781b      	ldrb	r3, [r3, #0]
 800e5d4:	79fa      	ldrb	r2, [r7, #7]
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d10b      	bne.n	800e5f2 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800e5da:	4b0c      	ldr	r3, [pc, #48]	; (800e60c <GetKeyByID+0x5c>)
 800e5dc:	6819      	ldr	r1, [r3, #0]
 800e5de:	7bfa      	ldrb	r2, [r7, #15]
 800e5e0:	4613      	mov	r3, r2
 800e5e2:	011b      	lsls	r3, r3, #4
 800e5e4:	4413      	add	r3, r2
 800e5e6:	3318      	adds	r3, #24
 800e5e8:	18ca      	adds	r2, r1, r3
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	e006      	b.n	800e600 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e5f2:	7bfb      	ldrb	r3, [r7, #15]
 800e5f4:	3301      	adds	r3, #1
 800e5f6:	73fb      	strb	r3, [r7, #15]
 800e5f8:	7bfb      	ldrb	r3, [r7, #15]
 800e5fa:	2b0a      	cmp	r3, #10
 800e5fc:	d9e1      	bls.n	800e5c2 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e5fe:	2303      	movs	r3, #3
}
 800e600:	4618      	mov	r0, r3
 800e602:	3714      	adds	r7, #20
 800e604:	46bd      	mov	sp, r7
 800e606:	bc80      	pop	{r7}
 800e608:	4770      	bx	lr
 800e60a:	bf00      	nop
 800e60c:	200004fc 	.word	0x200004fc

0800e610 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800e610:	b590      	push	{r4, r7, lr}
 800e612:	b0d1      	sub	sp, #324	; 0x144
 800e614:	af00      	add	r7, sp, #0
 800e616:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800e61a:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800e61e:	6020      	str	r0, [r4, #0]
 800e620:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800e624:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800e628:	6001      	str	r1, [r0, #0]
 800e62a:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800e62e:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800e632:	600a      	str	r2, [r1, #0]
 800e634:	461a      	mov	r2, r3
 800e636:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e63a:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800e63e:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800e640:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e644:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d003      	beq.n	800e656 <ComputeCmac+0x46>
 800e64e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800e652:	2b00      	cmp	r3, #0
 800e654:	d101      	bne.n	800e65a <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e656:	2302      	movs	r3, #2
 800e658:	e05d      	b.n	800e716 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800e65a:	f107 0314 	add.w	r3, r7, #20
 800e65e:	4618      	mov	r0, r3
 800e660:	f7fe ff02 	bl	800d468 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800e664:	f107 0210 	add.w	r2, r7, #16
 800e668:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e66c:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800e670:	781b      	ldrb	r3, [r3, #0]
 800e672:	4611      	mov	r1, r2
 800e674:	4618      	mov	r0, r3
 800e676:	f7ff ff9b 	bl	800e5b0 <GetKeyByID>
 800e67a:	4603      	mov	r3, r0
 800e67c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800e680:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800e684:	2b00      	cmp	r3, #0
 800e686:	d144      	bne.n	800e712 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800e688:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e68c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	1c5a      	adds	r2, r3, #1
 800e694:	f107 0314 	add.w	r3, r7, #20
 800e698:	4611      	mov	r1, r2
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7fe fefd 	bl	800d49a <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800e6a0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e6a4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d009      	beq.n	800e6c2 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800e6ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e6b2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800e6b6:	f107 0014 	add.w	r0, r7, #20
 800e6ba:	2210      	movs	r2, #16
 800e6bc:	6819      	ldr	r1, [r3, #0]
 800e6be:	f7fe fefb 	bl	800d4b8 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800e6c2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e6c6:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800e6ca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e6ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800e6d2:	f107 0014 	add.w	r0, r7, #20
 800e6d6:	6812      	ldr	r2, [r2, #0]
 800e6d8:	6819      	ldr	r1, [r3, #0]
 800e6da:	f7fe feed 	bl	800d4b8 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800e6de:	f107 0214 	add.w	r2, r7, #20
 800e6e2:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800e6e6:	4611      	mov	r1, r2
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7fe ffa7 	bl	800d63c <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800e6ee:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800e6f2:	461a      	mov	r2, r3
 800e6f4:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800e6f8:	021b      	lsls	r3, r3, #8
 800e6fa:	431a      	orrs	r2, r3
 800e6fc:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800e700:	041b      	lsls	r3, r3, #16
 800e702:	431a      	orrs	r2, r3
 800e704:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800e708:	061b      	lsls	r3, r3, #24
 800e70a:	431a      	orrs	r2, r3
 800e70c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800e710:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800e712:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800e716:	4618      	mov	r0, r3
 800e718:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd90      	pop	{r4, r7, pc}

0800e720 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b082      	sub	sp, #8
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d101      	bne.n	800e732 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e72e:	2302      	movs	r3, #2
 800e730:	e00a      	b.n	800e748 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800e732:	4a07      	ldr	r2, [pc, #28]	; (800e750 <SecureElementInit+0x30>)
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800e738:	4b05      	ldr	r3, [pc, #20]	; (800e750 <SecureElementInit+0x30>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	22d8      	movs	r2, #216	; 0xd8
 800e73e:	4905      	ldr	r1, [pc, #20]	; (800e754 <SecureElementInit+0x34>)
 800e740:	4618      	mov	r0, r3
 800e742:	f00c fe82 	bl	801b44a <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800e746:	2300      	movs	r3, #0
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3708      	adds	r7, #8
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}
 800e750:	200004fc 	.word	0x200004fc
 800e754:	08020f7c 	.word	0x08020f7c

0800e758 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b086      	sub	sp, #24
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
 800e760:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800e762:	2300      	movs	r3, #0
 800e764:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800e766:	f107 030c 	add.w	r3, r7, #12
 800e76a:	4618      	mov	r0, r3
 800e76c:	f000 fa98 	bl	800eca0 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800e770:	f107 0308 	add.w	r3, r7, #8
 800e774:	4619      	mov	r1, r3
 800e776:	2001      	movs	r0, #1
 800e778:	f000 faf4 	bl	800ed64 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d024      	beq.n	800e7cc <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800e782:	2300      	movs	r3, #0
 800e784:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800e786:	2300      	movs	r3, #0
 800e788:	75bb      	strb	r3, [r7, #22]
 800e78a:	e00c      	b.n	800e7a6 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800e78c:	7dbb      	ldrb	r3, [r7, #22]
 800e78e:	3318      	adds	r3, #24
 800e790:	443b      	add	r3, r7
 800e792:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d002      	beq.n	800e7a0 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800e79a:	2301      	movs	r3, #1
 800e79c:	75fb      	strb	r3, [r7, #23]
                break;
 800e79e:	e005      	b.n	800e7ac <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800e7a0:	7dbb      	ldrb	r3, [r7, #22]
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	75bb      	strb	r3, [r7, #22]
 800e7a6:	7dbb      	ldrb	r3, [r7, #22]
 800e7a8:	2b07      	cmp	r3, #7
 800e7aa:	d9ef      	bls.n	800e78c <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800e7ac:	7dfb      	ldrb	r3, [r7, #23]
 800e7ae:	f083 0301 	eor.w	r3, r3, #1
 800e7b2:	b2db      	uxtb	r3, r3
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d009      	beq.n	800e7cc <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800e7b8:	f107 020c 	add.w	r2, r7, #12
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	4610      	mov	r0, r2
 800e7c0:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800e7c2:	f107 030c 	add.w	r3, r7, #12
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	f000 fa52 	bl	800ec70 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d00c      	beq.n	800e7ec <SecureElementInitMcuID+0x94>
 800e7d2:	68bb      	ldr	r3, [r7, #8]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d109      	bne.n	800e7ec <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800e7d8:	f107 0208 	add.w	r2, r7, #8
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	4610      	mov	r0, r2
 800e7e0:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	4619      	mov	r1, r3
 800e7e6:	2001      	movs	r0, #1
 800e7e8:	f000 faa2 	bl	800ed30 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800e7ec:	2300      	movs	r3, #0
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	3718      	adds	r7, #24
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}
	...

0800e7f8 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b085      	sub	sp, #20
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	4603      	mov	r3, r0
 800e800:	6039      	str	r1, [r7, #0]
 800e802:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e804:	2300      	movs	r3, #0
 800e806:	73fb      	strb	r3, [r7, #15]
 800e808:	e01a      	b.n	800e840 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800e80a:	4b12      	ldr	r3, [pc, #72]	; (800e854 <SecureElementGetKeyByID+0x5c>)
 800e80c:	6819      	ldr	r1, [r3, #0]
 800e80e:	7bfa      	ldrb	r2, [r7, #15]
 800e810:	4613      	mov	r3, r2
 800e812:	011b      	lsls	r3, r3, #4
 800e814:	4413      	add	r3, r2
 800e816:	440b      	add	r3, r1
 800e818:	3318      	adds	r3, #24
 800e81a:	781b      	ldrb	r3, [r3, #0]
 800e81c:	79fa      	ldrb	r2, [r7, #7]
 800e81e:	429a      	cmp	r2, r3
 800e820:	d10b      	bne.n	800e83a <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800e822:	4b0c      	ldr	r3, [pc, #48]	; (800e854 <SecureElementGetKeyByID+0x5c>)
 800e824:	6819      	ldr	r1, [r3, #0]
 800e826:	7bfa      	ldrb	r2, [r7, #15]
 800e828:	4613      	mov	r3, r2
 800e82a:	011b      	lsls	r3, r3, #4
 800e82c:	4413      	add	r3, r2
 800e82e:	3318      	adds	r3, #24
 800e830:	18ca      	adds	r2, r1, r3
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800e836:	2300      	movs	r3, #0
 800e838:	e006      	b.n	800e848 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e83a:	7bfb      	ldrb	r3, [r7, #15]
 800e83c:	3301      	adds	r3, #1
 800e83e:	73fb      	strb	r3, [r7, #15]
 800e840:	7bfb      	ldrb	r3, [r7, #15]
 800e842:	2b0a      	cmp	r3, #10
 800e844:	d9e1      	bls.n	800e80a <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e846:	2303      	movs	r3, #3
}
 800e848:	4618      	mov	r0, r3
 800e84a:	3714      	adds	r7, #20
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bc80      	pop	{r7}
 800e850:	4770      	bx	lr
 800e852:	bf00      	nop
 800e854:	200004fc 	.word	0x200004fc

0800e858 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800e85c:	2000      	movs	r0, #0
 800e85e:	f7ff fdab 	bl	800e3b8 <PrintKey>
    PrintKey( NWK_KEY );
 800e862:	2001      	movs	r0, #1
 800e864:	f7ff fda8 	bl	800e3b8 <PrintKey>
    PrintKey( APP_S_KEY );
 800e868:	2009      	movs	r0, #9
 800e86a:	f7ff fda5 	bl	800e3b8 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800e86e:	2008      	movs	r0, #8
 800e870:	f7ff fda2 	bl	800e3b8 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800e874:	2000      	movs	r0, #0
 800e876:	f7ff fe2d 	bl	800e4d4 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800e87a:	2300      	movs	r3, #0
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	bd80      	pop	{r7, pc}

0800e880 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b082      	sub	sp, #8
 800e884:	af00      	add	r7, sp, #0
 800e886:	4603      	mov	r3, r0
 800e888:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800e88a:	200b      	movs	r0, #11
 800e88c:	f7ff fd94 	bl	800e3b8 <PrintKey>
    PrintKey( MC_KE_KEY );
 800e890:	200c      	movs	r0, #12
 800e892:	f7ff fd91 	bl	800e3b8 <PrintKey>
    PrintKey( APP_S_KEY );
 800e896:	2009      	movs	r0, #9
 800e898:	f7ff fd8e 	bl	800e3b8 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800e89c:	2008      	movs	r0, #8
 800e89e:	f7ff fd8b 	bl	800e3b8 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800e8a2:	200a      	movs	r0, #10
 800e8a4:	f7ff fd88 	bl	800e3b8 <PrintKey>
    PrintIds( mode );
 800e8a8:	79fb      	ldrb	r3, [r7, #7]
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f7ff fe12 	bl	800e4d4 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800e8b0:	2300      	movs	r3, #0
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3708      	adds	r7, #8
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
	...

0800e8bc <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b088      	sub	sp, #32
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	6039      	str	r1, [r7, #0]
 800e8c6:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d101      	bne.n	800e8d2 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e8ce:	2302      	movs	r3, #2
 800e8d0:	e04c      	b.n	800e96c <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	77fb      	strb	r3, [r7, #31]
 800e8d6:	e045      	b.n	800e964 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800e8d8:	4b26      	ldr	r3, [pc, #152]	; (800e974 <SecureElementSetKey+0xb8>)
 800e8da:	6819      	ldr	r1, [r3, #0]
 800e8dc:	7ffa      	ldrb	r2, [r7, #31]
 800e8de:	4613      	mov	r3, r2
 800e8e0:	011b      	lsls	r3, r3, #4
 800e8e2:	4413      	add	r3, r2
 800e8e4:	440b      	add	r3, r1
 800e8e6:	3318      	adds	r3, #24
 800e8e8:	781b      	ldrb	r3, [r3, #0]
 800e8ea:	79fa      	ldrb	r2, [r7, #7]
 800e8ec:	429a      	cmp	r2, r3
 800e8ee:	d136      	bne.n	800e95e <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800e8f0:	79fb      	ldrb	r3, [r7, #7]
 800e8f2:	2b0d      	cmp	r3, #13
 800e8f4:	d123      	bne.n	800e93e <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800e8f6:	2306      	movs	r3, #6
 800e8f8:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	60fb      	str	r3, [r7, #12]
 800e8fe:	f107 0310 	add.w	r3, r7, #16
 800e902:	2200      	movs	r2, #0
 800e904:	601a      	str	r2, [r3, #0]
 800e906:	605a      	str	r2, [r3, #4]
 800e908:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800e90a:	f107 030c 	add.w	r3, r7, #12
 800e90e:	220c      	movs	r2, #12
 800e910:	2110      	movs	r1, #16
 800e912:	6838      	ldr	r0, [r7, #0]
 800e914:	f000 f876 	bl	800ea04 <SecureElementAesEncrypt>
 800e918:	4603      	mov	r3, r0
 800e91a:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800e91c:	4b15      	ldr	r3, [pc, #84]	; (800e974 <SecureElementSetKey+0xb8>)
 800e91e:	6819      	ldr	r1, [r3, #0]
 800e920:	7ffa      	ldrb	r2, [r7, #31]
 800e922:	4613      	mov	r3, r2
 800e924:	011b      	lsls	r3, r3, #4
 800e926:	4413      	add	r3, r2
 800e928:	3318      	adds	r3, #24
 800e92a:	440b      	add	r3, r1
 800e92c:	3301      	adds	r3, #1
 800e92e:	f107 010c 	add.w	r1, r7, #12
 800e932:	2210      	movs	r2, #16
 800e934:	4618      	mov	r0, r3
 800e936:	f00c fd88 	bl	801b44a <memcpy1>
                return retval;
 800e93a:	7fbb      	ldrb	r3, [r7, #30]
 800e93c:	e016      	b.n	800e96c <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800e93e:	4b0d      	ldr	r3, [pc, #52]	; (800e974 <SecureElementSetKey+0xb8>)
 800e940:	6819      	ldr	r1, [r3, #0]
 800e942:	7ffa      	ldrb	r2, [r7, #31]
 800e944:	4613      	mov	r3, r2
 800e946:	011b      	lsls	r3, r3, #4
 800e948:	4413      	add	r3, r2
 800e94a:	3318      	adds	r3, #24
 800e94c:	440b      	add	r3, r1
 800e94e:	3301      	adds	r3, #1
 800e950:	2210      	movs	r2, #16
 800e952:	6839      	ldr	r1, [r7, #0]
 800e954:	4618      	mov	r0, r3
 800e956:	f00c fd78 	bl	801b44a <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800e95a:	2300      	movs	r3, #0
 800e95c:	e006      	b.n	800e96c <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e95e:	7ffb      	ldrb	r3, [r7, #31]
 800e960:	3301      	adds	r3, #1
 800e962:	77fb      	strb	r3, [r7, #31]
 800e964:	7ffb      	ldrb	r3, [r7, #31]
 800e966:	2b0a      	cmp	r3, #10
 800e968:	d9b6      	bls.n	800e8d8 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e96a:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3720      	adds	r7, #32
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}
 800e974:	200004fc 	.word	0x200004fc

0800e978 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b086      	sub	sp, #24
 800e97c:	af02      	add	r7, sp, #8
 800e97e:	60f8      	str	r0, [r7, #12]
 800e980:	60b9      	str	r1, [r7, #8]
 800e982:	607a      	str	r2, [r7, #4]
 800e984:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800e986:	78fb      	ldrb	r3, [r7, #3]
 800e988:	2b0b      	cmp	r3, #11
 800e98a:	d901      	bls.n	800e990 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e98c:	2303      	movs	r3, #3
 800e98e:	e009      	b.n	800e9a4 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800e990:	78fa      	ldrb	r2, [r7, #3]
 800e992:	69bb      	ldr	r3, [r7, #24]
 800e994:	9300      	str	r3, [sp, #0]
 800e996:	4613      	mov	r3, r2
 800e998:	687a      	ldr	r2, [r7, #4]
 800e99a:	68b9      	ldr	r1, [r7, #8]
 800e99c:	68f8      	ldr	r0, [r7, #12]
 800e99e:	f7ff fe37 	bl	800e610 <ComputeCmac>
 800e9a2:	4603      	mov	r3, r0
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3710      	adds	r7, #16
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}

0800e9ac <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b088      	sub	sp, #32
 800e9b0:	af02      	add	r7, sp, #8
 800e9b2:	60f8      	str	r0, [r7, #12]
 800e9b4:	60b9      	str	r1, [r7, #8]
 800e9b6:	607a      	str	r2, [r7, #4]
 800e9b8:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d101      	bne.n	800e9c4 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e9c0:	2302      	movs	r3, #2
 800e9c2:	e01b      	b.n	800e9fc <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800e9c4:	2306      	movs	r3, #6
 800e9c6:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800e9cc:	78fa      	ldrb	r2, [r7, #3]
 800e9ce:	f107 0310 	add.w	r3, r7, #16
 800e9d2:	9300      	str	r3, [sp, #0]
 800e9d4:	4613      	mov	r3, r2
 800e9d6:	68ba      	ldr	r2, [r7, #8]
 800e9d8:	68f9      	ldr	r1, [r7, #12]
 800e9da:	2000      	movs	r0, #0
 800e9dc:	f7ff fe18 	bl	800e610 <ComputeCmac>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e9e4:	7dfb      	ldrb	r3, [r7, #23]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d001      	beq.n	800e9ee <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800e9ea:	7dfb      	ldrb	r3, [r7, #23]
 800e9ec:	e006      	b.n	800e9fc <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800e9ee:	693b      	ldr	r3, [r7, #16]
 800e9f0:	687a      	ldr	r2, [r7, #4]
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	d001      	beq.n	800e9fa <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800e9fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	3718      	adds	r7, #24
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}

0800ea04 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b0c2      	sub	sp, #264	; 0x108
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	60f8      	str	r0, [r7, #12]
 800ea0c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ea10:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800ea14:	6001      	str	r1, [r0, #0]
 800ea16:	4611      	mov	r1, r2
 800ea18:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800ea1c:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800ea20:	6013      	str	r3, [r2, #0]
 800ea22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea26:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800ea2a:	460a      	mov	r2, r1
 800ea2c:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d006      	beq.n	800ea42 <SecureElementAesEncrypt+0x3e>
 800ea34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d101      	bne.n	800ea46 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ea42:	2302      	movs	r3, #2
 800ea44:	e059      	b.n	800eafa <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800ea46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea4a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	f003 030f 	and.w	r3, r3, #15
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d001      	beq.n	800ea5c <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800ea58:	2305      	movs	r3, #5
 800ea5a:	e04e      	b.n	800eafa <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800ea5c:	f107 0314 	add.w	r3, r7, #20
 800ea60:	22f0      	movs	r2, #240	; 0xf0
 800ea62:	2100      	movs	r1, #0
 800ea64:	4618      	mov	r0, r3
 800ea66:	f00c fd2b 	bl	801b4c0 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800ea6a:	f107 0210 	add.w	r2, r7, #16
 800ea6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea72:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800ea76:	781b      	ldrb	r3, [r3, #0]
 800ea78:	4611      	mov	r1, r2
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f7ff fd98 	bl	800e5b0 <GetKeyByID>
 800ea80:	4603      	mov	r3, r0
 800ea82:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ea86:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d133      	bne.n	800eaf6 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800ea8e:	693b      	ldr	r3, [r7, #16]
 800ea90:	3301      	adds	r3, #1
 800ea92:	f107 0214 	add.w	r2, r7, #20
 800ea96:	2110      	movs	r1, #16
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f7ff fb65 	bl	800e168 <lorawan_aes_set_key>

        uint8_t block = 0;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800eaa4:	e020      	b.n	800eae8 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800eaa6:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800eaaa:	68fa      	ldr	r2, [r7, #12]
 800eaac:	18d0      	adds	r0, r2, r3
 800eaae:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800eab2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800eab6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800eaba:	6812      	ldr	r2, [r2, #0]
 800eabc:	4413      	add	r3, r2
 800eabe:	f107 0214 	add.w	r2, r7, #20
 800eac2:	4619      	mov	r1, r3
 800eac4:	f7ff fc2e 	bl	800e324 <lorawan_aes_encrypt>
            block = block + 16;
 800eac8:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800eacc:	3310      	adds	r3, #16
 800eace:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800ead2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ead6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800eada:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800eade:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800eae2:	6812      	ldr	r2, [r2, #0]
 800eae4:	3a10      	subs	r2, #16
 800eae6:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800eae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eaec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d1d7      	bne.n	800eaa6 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800eaf6:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}

0800eb04 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b088      	sub	sp, #32
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	460b      	mov	r3, r1
 800eb0e:	70fb      	strb	r3, [r7, #3]
 800eb10:	4613      	mov	r3, r2
 800eb12:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d101      	bne.n	800eb1e <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800eb1a:	2302      	movs	r3, #2
 800eb1c:	e02e      	b.n	800eb7c <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800eb1e:	2306      	movs	r3, #6
 800eb20:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800eb22:	78bb      	ldrb	r3, [r7, #2]
 800eb24:	2b0c      	cmp	r3, #12
 800eb26:	d104      	bne.n	800eb32 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800eb28:	78fb      	ldrb	r3, [r7, #3]
 800eb2a:	2b0b      	cmp	r3, #11
 800eb2c:	d001      	beq.n	800eb32 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800eb2e:	2303      	movs	r3, #3
 800eb30:	e024      	b.n	800eb7c <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800eb32:	2300      	movs	r3, #0
 800eb34:	60fb      	str	r3, [r7, #12]
 800eb36:	f107 0310 	add.w	r3, r7, #16
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	601a      	str	r2, [r3, #0]
 800eb3e:	605a      	str	r2, [r3, #4]
 800eb40:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800eb42:	f107 030c 	add.w	r3, r7, #12
 800eb46:	78fa      	ldrb	r2, [r7, #3]
 800eb48:	2110      	movs	r1, #16
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f7ff ff5a 	bl	800ea04 <SecureElementAesEncrypt>
 800eb50:	4603      	mov	r3, r0
 800eb52:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800eb54:	7ffb      	ldrb	r3, [r7, #31]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d001      	beq.n	800eb5e <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800eb5a:	7ffb      	ldrb	r3, [r7, #31]
 800eb5c:	e00e      	b.n	800eb7c <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800eb5e:	f107 020c 	add.w	r2, r7, #12
 800eb62:	78bb      	ldrb	r3, [r7, #2]
 800eb64:	4611      	mov	r1, r2
 800eb66:	4618      	mov	r0, r3
 800eb68:	f7ff fea8 	bl	800e8bc <SecureElementSetKey>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800eb70:	7ffb      	ldrb	r3, [r7, #31]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d001      	beq.n	800eb7a <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800eb76:	7ffb      	ldrb	r3, [r7, #31]
 800eb78:	e000      	b.n	800eb7c <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800eb7a:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	3720      	adds	r7, #32
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bd80      	pop	{r7, pc}

0800eb84 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b086      	sub	sp, #24
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	60b9      	str	r1, [r7, #8]
 800eb8c:	607b      	str	r3, [r7, #4]
 800eb8e:	4603      	mov	r3, r0
 800eb90:	73fb      	strb	r3, [r7, #15]
 800eb92:	4613      	mov	r3, r2
 800eb94:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d005      	beq.n	800eba8 <SecureElementProcessJoinAccept+0x24>
 800eb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d002      	beq.n	800eba8 <SecureElementProcessJoinAccept+0x24>
 800eba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d101      	bne.n	800ebac <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800eba8:	2302      	movs	r3, #2
 800ebaa:	e05c      	b.n	800ec66 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800ebac:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ebb0:	2b21      	cmp	r3, #33	; 0x21
 800ebb2:	d901      	bls.n	800ebb8 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800ebb4:	2305      	movs	r3, #5
 800ebb6:	e056      	b.n	800ec66 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800ebb8:	2301      	movs	r3, #1
 800ebba:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800ebbc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ebc0:	b29b      	uxth	r3, r3
 800ebc2:	461a      	mov	r2, r3
 800ebc4:	6879      	ldr	r1, [r7, #4]
 800ebc6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ebc8:	f00c fc3f 	bl	801b44a <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	1c58      	adds	r0, r3, #1
 800ebd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ebd4:	3b01      	subs	r3, #1
 800ebd6:	4619      	mov	r1, r3
 800ebd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebda:	3301      	adds	r3, #1
 800ebdc:	7dfa      	ldrb	r2, [r7, #23]
 800ebde:	f7ff ff11 	bl	800ea04 <SecureElementAesEncrypt>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d001      	beq.n	800ebec <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800ebe8:	2307      	movs	r3, #7
 800ebea:	e03c      	b.n	800ec66 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800ebec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebee:	330b      	adds	r3, #11
 800ebf0:	781b      	ldrb	r3, [r3, #0]
 800ebf2:	09db      	lsrs	r3, r3, #7
 800ebf4:	b2da      	uxtb	r2, r3
 800ebf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf8:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800ebfa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ebfe:	3b04      	subs	r3, #4
 800ec00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec02:	4413      	add	r3, r2
 800ec04:	781b      	ldrb	r3, [r3, #0]
 800ec06:	4619      	mov	r1, r3
 800ec08:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ec0c:	3b03      	subs	r3, #3
 800ec0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec10:	4413      	add	r3, r2
 800ec12:	781b      	ldrb	r3, [r3, #0]
 800ec14:	021b      	lsls	r3, r3, #8
 800ec16:	ea41 0203 	orr.w	r2, r1, r3
 800ec1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ec1e:	3b02      	subs	r3, #2
 800ec20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec22:	440b      	add	r3, r1
 800ec24:	781b      	ldrb	r3, [r3, #0]
 800ec26:	041b      	lsls	r3, r3, #16
 800ec28:	431a      	orrs	r2, r3
 800ec2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ec2e:	3b01      	subs	r3, #1
 800ec30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec32:	440b      	add	r3, r1
 800ec34:	781b      	ldrb	r3, [r3, #0]
 800ec36:	061b      	lsls	r3, r3, #24
 800ec38:	4313      	orrs	r3, r2
 800ec3a:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800ec3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec3e:	781b      	ldrb	r3, [r3, #0]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d10d      	bne.n	800ec60 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800ec44:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ec48:	3b04      	subs	r3, #4
 800ec4a:	4619      	mov	r1, r3
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	693a      	ldr	r2, [r7, #16]
 800ec50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec52:	f7ff feab 	bl	800e9ac <SecureElementVerifyAesCmac>
 800ec56:	4603      	mov	r3, r0
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d003      	beq.n	800ec64 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	e002      	b.n	800ec66 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800ec60:	2304      	movs	r3, #4
 800ec62:	e000      	b.n	800ec66 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800ec64:	2300      	movs	r3, #0
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	3718      	adds	r7, #24
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}
	...

0800ec70 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b082      	sub	sp, #8
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d101      	bne.n	800ec82 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ec7e:	2302      	movs	r3, #2
 800ec80:	e007      	b.n	800ec92 <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800ec82:	4b06      	ldr	r3, [pc, #24]	; (800ec9c <SecureElementSetDevEui+0x2c>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	2208      	movs	r2, #8
 800ec88:	6879      	ldr	r1, [r7, #4]
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f00c fbdd 	bl	801b44a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800ec90:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800ec92:	4618      	mov	r0, r3
 800ec94:	3708      	adds	r7, #8
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}
 800ec9a:	bf00      	nop
 800ec9c:	200004fc 	.word	0x200004fc

0800eca0 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b082      	sub	sp, #8
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d101      	bne.n	800ecb2 <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ecae:	2302      	movs	r3, #2
 800ecb0:	e007      	b.n	800ecc2 <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800ecb2:	4b06      	ldr	r3, [pc, #24]	; (800eccc <SecureElementGetDevEui+0x2c>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	2208      	movs	r2, #8
 800ecb8:	4619      	mov	r1, r3
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f00c fbc5 	bl	801b44a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800ecc0:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	3708      	adds	r7, #8
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}
 800ecca:	bf00      	nop
 800eccc:	200004fc 	.word	0x200004fc

0800ecd0 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b082      	sub	sp, #8
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d101      	bne.n	800ece2 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ecde:	2302      	movs	r3, #2
 800ece0:	e008      	b.n	800ecf4 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800ece2:	4b06      	ldr	r3, [pc, #24]	; (800ecfc <SecureElementSetJoinEui+0x2c>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	3308      	adds	r3, #8
 800ece8:	2208      	movs	r2, #8
 800ecea:	6879      	ldr	r1, [r7, #4]
 800ecec:	4618      	mov	r0, r3
 800ecee:	f00c fbac 	bl	801b44a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800ecf2:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	3708      	adds	r7, #8
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}
 800ecfc:	200004fc 	.word	0x200004fc

0800ed00 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b082      	sub	sp, #8
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d101      	bne.n	800ed12 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ed0e:	2302      	movs	r3, #2
 800ed10:	e008      	b.n	800ed24 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800ed12:	4b06      	ldr	r3, [pc, #24]	; (800ed2c <SecureElementGetJoinEui+0x2c>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	3308      	adds	r3, #8
 800ed18:	2208      	movs	r2, #8
 800ed1a:	4619      	mov	r1, r3
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f00c fb94 	bl	801b44a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800ed22:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800ed24:	4618      	mov	r0, r3
 800ed26:	3708      	adds	r7, #8
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}
 800ed2c:	200004fc 	.word	0x200004fc

0800ed30 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800ed30:	b480      	push	{r7}
 800ed32:	b083      	sub	sp, #12
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	4603      	mov	r3, r0
 800ed38:	6039      	str	r1, [r7, #0]
 800ed3a:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800ed3c:	79fb      	ldrb	r3, [r7, #7]
 800ed3e:	2b02      	cmp	r3, #2
 800ed40:	d104      	bne.n	800ed4c <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800ed42:	4b07      	ldr	r3, [pc, #28]	; (800ed60 <SecureElementSetDevAddr+0x30>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	683a      	ldr	r2, [r7, #0]
 800ed48:	611a      	str	r2, [r3, #16]
 800ed4a:	e003      	b.n	800ed54 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800ed4c:	4b04      	ldr	r3, [pc, #16]	; (800ed60 <SecureElementSetDevAddr+0x30>)
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	683a      	ldr	r2, [r7, #0]
 800ed52:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800ed54:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	370c      	adds	r7, #12
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bc80      	pop	{r7}
 800ed5e:	4770      	bx	lr
 800ed60:	200004fc 	.word	0x200004fc

0800ed64 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800ed64:	b480      	push	{r7}
 800ed66:	b083      	sub	sp, #12
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	6039      	str	r1, [r7, #0]
 800ed6e:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d101      	bne.n	800ed7a <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ed76:	2302      	movs	r3, #2
 800ed78:	e00e      	b.n	800ed98 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800ed7a:	79fb      	ldrb	r3, [r7, #7]
 800ed7c:	2b02      	cmp	r3, #2
 800ed7e:	d105      	bne.n	800ed8c <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800ed80:	4b08      	ldr	r3, [pc, #32]	; (800eda4 <SecureElementGetDevAddr+0x40>)
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	691a      	ldr	r2, [r3, #16]
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	601a      	str	r2, [r3, #0]
 800ed8a:	e004      	b.n	800ed96 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800ed8c:	4b05      	ldr	r3, [pc, #20]	; (800eda4 <SecureElementGetDevAddr+0x40>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	695a      	ldr	r2, [r3, #20]
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800ed96:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	370c      	adds	r7, #12
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bc80      	pop	{r7}
 800eda0:	4770      	bx	lr
 800eda2:	bf00      	nop
 800eda4:	200004fc 	.word	0x200004fc

0800eda8 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b082      	sub	sp, #8
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
 800edb0:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800edb2:	4a29      	ldr	r2, [pc, #164]	; (800ee58 <LmHandlerInit+0xb0>)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800edb8:	4b28      	ldr	r3, [pc, #160]	; (800ee5c <LmHandlerInit+0xb4>)
 800edba:	4a29      	ldr	r2, [pc, #164]	; (800ee60 <LmHandlerInit+0xb8>)
 800edbc:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800edbe:	4b27      	ldr	r3, [pc, #156]	; (800ee5c <LmHandlerInit+0xb4>)
 800edc0:	4a28      	ldr	r2, [pc, #160]	; (800ee64 <LmHandlerInit+0xbc>)
 800edc2:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800edc4:	4b25      	ldr	r3, [pc, #148]	; (800ee5c <LmHandlerInit+0xb4>)
 800edc6:	4a28      	ldr	r2, [pc, #160]	; (800ee68 <LmHandlerInit+0xc0>)
 800edc8:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800edca:	4b24      	ldr	r3, [pc, #144]	; (800ee5c <LmHandlerInit+0xb4>)
 800edcc:	4a27      	ldr	r2, [pc, #156]	; (800ee6c <LmHandlerInit+0xc4>)
 800edce:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800edd0:	4b21      	ldr	r3, [pc, #132]	; (800ee58 <LmHandlerInit+0xb0>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	4a26      	ldr	r2, [pc, #152]	; (800ee70 <LmHandlerInit+0xc8>)
 800edd8:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800edda:	4b1f      	ldr	r3, [pc, #124]	; (800ee58 <LmHandlerInit+0xb0>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	685b      	ldr	r3, [r3, #4]
 800ede0:	4a23      	ldr	r2, [pc, #140]	; (800ee70 <LmHandlerInit+0xc8>)
 800ede2:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800ede4:	4b1c      	ldr	r3, [pc, #112]	; (800ee58 <LmHandlerInit+0xb0>)
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	689b      	ldr	r3, [r3, #8]
 800edea:	4a21      	ldr	r2, [pc, #132]	; (800ee70 <LmHandlerInit+0xc8>)
 800edec:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800edee:	4b1a      	ldr	r3, [pc, #104]	; (800ee58 <LmHandlerInit+0xb0>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	68db      	ldr	r3, [r3, #12]
 800edf4:	4a1e      	ldr	r2, [pc, #120]	; (800ee70 <LmHandlerInit+0xc8>)
 800edf6:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800edf8:	4b1d      	ldr	r3, [pc, #116]	; (800ee70 <LmHandlerInit+0xc8>)
 800edfa:	4a1e      	ldr	r2, [pc, #120]	; (800ee74 <LmHandlerInit+0xcc>)
 800edfc:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800edfe:	4b16      	ldr	r3, [pc, #88]	; (800ee58 <LmHandlerInit+0xb0>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	699b      	ldr	r3, [r3, #24]
 800ee04:	4a1a      	ldr	r2, [pc, #104]	; (800ee70 <LmHandlerInit+0xc8>)
 800ee06:	6153      	str	r3, [r2, #20]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	4a1b      	ldr	r2, [pc, #108]	; (800ee78 <LmHandlerInit+0xd0>)
 800ee0c:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800ee0e:	4b12      	ldr	r3, [pc, #72]	; (800ee58 <LmHandlerInit+0xb0>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee14:	4a18      	ldr	r2, [pc, #96]	; (800ee78 <LmHandlerInit+0xd0>)
 800ee16:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 800ee18:	4b17      	ldr	r3, [pc, #92]	; (800ee78 <LmHandlerInit+0xd0>)
 800ee1a:	4a18      	ldr	r2, [pc, #96]	; (800ee7c <LmHandlerInit+0xd4>)
 800ee1c:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800ee1e:	4b16      	ldr	r3, [pc, #88]	; (800ee78 <LmHandlerInit+0xd0>)
 800ee20:	4a17      	ldr	r2, [pc, #92]	; (800ee80 <LmHandlerInit+0xd8>)
 800ee22:	60da      	str	r2, [r3, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800ee24:	4914      	ldr	r1, [pc, #80]	; (800ee78 <LmHandlerInit+0xd0>)
 800ee26:	2000      	movs	r0, #0
 800ee28:	f000 fdb4 	bl	800f994 <LmHandlerPackageRegister>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d002      	beq.n	800ee38 <LmHandlerInit+0x90>
    {
        return LORAMAC_HANDLER_ERROR;
 800ee32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee36:	e00a      	b.n	800ee4e <LmHandlerInit+0xa6>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800ee38:	463b      	mov	r3, r7
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f001 fd2a 	bl	8010894 <LmhpPackagesRegistrationInit>
 800ee40:	4603      	mov	r3, r0
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d002      	beq.n	800ee4c <LmHandlerInit+0xa4>
    {
        return LORAMAC_HANDLER_ERROR;
 800ee46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee4a:	e000      	b.n	800ee4e <LmHandlerInit+0xa6>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800ee4c:	2300      	movs	r3, #0
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3708      	adds	r7, #8
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
 800ee56:	bf00      	nop
 800ee58:	20000554 	.word	0x20000554
 800ee5c:	20000558 	.word	0x20000558
 800ee60:	0800f66d 	.word	0x0800f66d
 800ee64:	0800f6e1 	.word	0x0800f6e1
 800ee68:	0800f7b1 	.word	0x0800f7b1
 800ee6c:	0800f901 	.word	0x0800f901
 800ee70:	20000568 	.word	0x20000568
 800ee74:	0800fe41 	.word	0x0800fe41
 800ee78:	20000518 	.word	0x20000518
 800ee7c:	0800fc55 	.word	0x0800fc55
 800ee80:	0800fc8d 	.word	0x0800fc8d

0800ee84 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b092      	sub	sp, #72	; 0x48
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800ee8c:	2218      	movs	r2, #24
 800ee8e:	6879      	ldr	r1, [r7, #4]
 800ee90:	4884      	ldr	r0, [pc, #528]	; (800f0a4 <LmHandlerConfigure+0x220>)
 800ee92:	f00c fada 	bl	801b44a <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 800ee96:	4b84      	ldr	r3, [pc, #528]	; (800f0a8 <LmHandlerConfigure+0x224>)
 800ee98:	2200      	movs	r2, #0
 800ee9a:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800ee9c:	f7fe faa2 	bl	800d3e4 <LoraInfo_GetPtr>
 800eea0:	6478      	str	r0, [r7, #68]	; 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800eea2:	4b80      	ldr	r3, [pc, #512]	; (800f0a4 <LmHandlerConfigure+0x220>)
 800eea4:	781b      	ldrb	r3, [r3, #0]
 800eea6:	461a      	mov	r2, r3
 800eea8:	2301      	movs	r3, #1
 800eeaa:	4093      	lsls	r3, r2
 800eeac:	461a      	mov	r2, r3
 800eeae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eeb0:	685b      	ldr	r3, [r3, #4]
 800eeb2:	4013      	ands	r3, r2
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d106      	bne.n	800eec6 <LmHandlerConfigure+0x42>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800eeb8:	4b7c      	ldr	r3, [pc, #496]	; (800f0ac <LmHandlerConfigure+0x228>)
 800eeba:	2201      	movs	r2, #1
 800eebc:	2100      	movs	r1, #0
 800eebe:	2000      	movs	r0, #0
 800eec0:	f010 fd2a 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800eec4:	e7fe      	b.n	800eec4 <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800eec6:	4b77      	ldr	r3, [pc, #476]	; (800f0a4 <LmHandlerConfigure+0x220>)
 800eec8:	781b      	ldrb	r3, [r3, #0]
 800eeca:	461a      	mov	r2, r3
 800eecc:	4978      	ldr	r1, [pc, #480]	; (800f0b0 <LmHandlerConfigure+0x22c>)
 800eece:	4879      	ldr	r0, [pc, #484]	; (800f0b4 <LmHandlerConfigure+0x230>)
 800eed0:	f004 ffd4 	bl	8013e7c <LoRaMacInitialization>
 800eed4:	4603      	mov	r3, r0
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d002      	beq.n	800eee0 <LmHandlerConfigure+0x5c>
    {
        return LORAMAC_HANDLER_ERROR;
 800eeda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eede:	e0dc      	b.n	800f09a <LmHandlerConfigure+0x216>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 800eee0:	2327      	movs	r3, #39	; 0x27
 800eee2:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800eee4:	f107 0318 	add.w	r3, r7, #24
 800eee8:	4618      	mov	r0, r3
 800eeea:	f005 fd53 	bl	8014994 <LoRaMacMibSetRequestConfirm>
 800eeee:	4603      	mov	r3, r0
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d103      	bne.n	800eefc <LmHandlerConfigure+0x78>
    {
        CtxRestoreDone = true;
 800eef4:	4b70      	ldr	r3, [pc, #448]	; (800f0b8 <LmHandlerConfigure+0x234>)
 800eef6:	2201      	movs	r2, #1
 800eef8:	701a      	strb	r2, [r3, #0]
 800eefa:	e02a      	b.n	800ef52 <LmHandlerConfigure+0xce>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800eefc:	2328      	movs	r3, #40	; 0x28
 800eefe:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800ef00:	4b6e      	ldr	r3, [pc, #440]	; (800f0bc <LmHandlerConfigure+0x238>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	691b      	ldr	r3, [r3, #16]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d00c      	beq.n	800ef24 <LmHandlerConfigure+0xa0>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800ef0a:	f107 0318 	add.w	r3, r7, #24
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f005 fb68 	bl	80145e4 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800ef14:	4b69      	ldr	r3, [pc, #420]	; (800f0bc <LmHandlerConfigure+0x238>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	691b      	ldr	r3, [r3, #16]
 800ef1a:	69fa      	ldr	r2, [r7, #28]
 800ef1c:	f240 51cc 	movw	r1, #1484	; 0x5cc
 800ef20:	4610      	mov	r0, r2
 800ef22:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 800ef24:	2327      	movs	r3, #39	; 0x27
 800ef26:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800ef28:	f107 0318 	add.w	r3, r7, #24
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f005 fd31 	bl	8014994 <LoRaMacMibSetRequestConfirm>
 800ef32:	4603      	mov	r3, r0
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d10c      	bne.n	800ef52 <LmHandlerConfigure+0xce>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800ef38:	2301      	movs	r3, #1
 800ef3a:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800ef3c:	f107 0318 	add.w	r3, r7, #24
 800ef40:	4618      	mov	r0, r3
 800ef42:	f005 fb4f 	bl	80145e4 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800ef46:	7f3b      	ldrb	r3, [r7, #28]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d002      	beq.n	800ef52 <LmHandlerConfigure+0xce>
            {
                CtxRestoreDone = true;
 800ef4c:	4b5a      	ldr	r3, [pc, #360]	; (800f0b8 <LmHandlerConfigure+0x234>)
 800ef4e:	2201      	movs	r2, #1
 800ef50:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 800ef52:	4b59      	ldr	r3, [pc, #356]	; (800f0b8 <LmHandlerConfigure+0x234>)
 800ef54:	781b      	ldrb	r3, [r3, #0]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d022      	beq.n	800efa0 <LmHandlerConfigure+0x11c>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800ef5a:	4b58      	ldr	r3, [pc, #352]	; (800f0bc <LmHandlerConfigure+0x238>)
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	69db      	ldr	r3, [r3, #28]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d004      	beq.n	800ef6e <LmHandlerConfigure+0xea>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800ef64:	4b55      	ldr	r3, [pc, #340]	; (800f0bc <LmHandlerConfigure+0x238>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	69db      	ldr	r3, [r3, #28]
 800ef6a:	2000      	movs	r0, #0
 800ef6c:	4798      	blx	r3
        }

        mibReq.Type = MIB_NVM_CTXS;
 800ef6e:	2327      	movs	r3, #39	; 0x27
 800ef70:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800ef72:	f107 0318 	add.w	r3, r7, #24
 800ef76:	4618      	mov	r0, r3
 800ef78:	f005 fb34 	bl	80145e4 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800ef7c:	69fb      	ldr	r3, [r7, #28]
 800ef7e:	643b      	str	r3, [r7, #64]	; 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800ef80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef82:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ef86:	4b47      	ldr	r3, [pc, #284]	; (800f0a4 <LmHandlerConfigure+0x220>)
 800ef88:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800ef8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef8c:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 800ef90:	4b44      	ldr	r3, [pc, #272]	; (800f0a4 <LmHandlerConfigure+0x220>)
 800ef92:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800ef94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef96:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 800ef9a:	4b42      	ldr	r3, [pc, #264]	; (800f0a4 <LmHandlerConfigure+0x220>)
 800ef9c:	709a      	strb	r2, [r3, #2]
 800ef9e:	e008      	b.n	800efb2 <LmHandlerConfigure+0x12e>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800efa0:	2305      	movs	r3, #5
 800efa2:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800efa4:	2300      	movs	r3, #0
 800efa6:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800efa8:	f107 0318 	add.w	r3, r7, #24
 800efac:	4618      	mov	r0, r3
 800efae:	f005 fcf1 	bl	8014994 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800efb2:	4b3f      	ldr	r3, [pc, #252]	; (800f0b0 <LmHandlerConfigure+0x22c>)
 800efb4:	689b      	ldr	r3, [r3, #8]
 800efb6:	4a3e      	ldr	r2, [pc, #248]	; (800f0b0 <LmHandlerConfigure+0x22c>)
 800efb8:	68d2      	ldr	r2, [r2, #12]
 800efba:	4611      	mov	r1, r2
 800efbc:	4618      	mov	r0, r3
 800efbe:	f7ff fbcb 	bl	800e758 <SecureElementInitMcuID>
 800efc2:	4603      	mov	r3, r0
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d002      	beq.n	800efce <LmHandlerConfigure+0x14a>
    {
        return LORAMAC_HANDLER_ERROR;
 800efc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800efcc:	e065      	b.n	800f09a <LmHandlerConfigure+0x216>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800efce:	2306      	movs	r3, #6
 800efd0:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800efd2:	f107 0318 	add.w	r3, r7, #24
 800efd6:	4618      	mov	r0, r3
 800efd8:	f005 fb04 	bl	80145e4 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800efdc:	69fb      	ldr	r3, [r7, #28]
 800efde:	4a38      	ldr	r2, [pc, #224]	; (800f0c0 <LmHandlerConfigure+0x23c>)
 800efe0:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800efe2:	f107 0318 	add.w	r3, r7, #24
 800efe6:	4618      	mov	r0, r3
 800efe8:	f005 fcd4 	bl	8014994 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800efec:	2302      	movs	r3, #2
 800efee:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800eff0:	4b33      	ldr	r3, [pc, #204]	; (800f0c0 <LmHandlerConfigure+0x23c>)
 800eff2:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800eff4:	f107 0318 	add.w	r3, r7, #24
 800eff8:	4618      	mov	r0, r3
 800effa:	f005 faf3 	bl	80145e4 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800effe:	2303      	movs	r3, #3
 800f000:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800f002:	4b30      	ldr	r3, [pc, #192]	; (800f0c4 <LmHandlerConfigure+0x240>)
 800f004:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f006:	f107 0318 	add.w	r3, r7, #24
 800f00a:	4618      	mov	r0, r3
 800f00c:	f005 faea 	bl	80145e4 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800f010:	f7ff fc22 	bl	800e858 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800f014:	230f      	movs	r3, #15
 800f016:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800f018:	2301      	movs	r3, #1
 800f01a:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f01c:	f107 0318 	add.w	r3, r7, #24
 800f020:	4618      	mov	r0, r3
 800f022:	f005 fcb7 	bl	8014994 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800f026:	2310      	movs	r3, #16
 800f028:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800f02a:	2300      	movs	r3, #0
 800f02c:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f02e:	f107 0318 	add.w	r3, r7, #24
 800f032:	4618      	mov	r0, r3
 800f034:	f005 fcae 	bl	8014994 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800f038:	2304      	movs	r3, #4
 800f03a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800f03c:	4b19      	ldr	r3, [pc, #100]	; (800f0a4 <LmHandlerConfigure+0x220>)
 800f03e:	789b      	ldrb	r3, [r3, #2]
 800f040:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f042:	f107 0318 	add.w	r3, r7, #24
 800f046:	4618      	mov	r0, r3
 800f048:	f005 fca4 	bl	8014994 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800f04c:	233a      	movs	r3, #58	; 0x3a
 800f04e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800f050:	4b14      	ldr	r3, [pc, #80]	; (800f0a4 <LmHandlerConfigure+0x220>)
 800f052:	695b      	ldr	r3, [r3, #20]
 800f054:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f056:	f107 0318 	add.w	r3, r7, #24
 800f05a:	4618      	mov	r0, r3
 800f05c:	f005 fc9a 	bl	8014994 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800f060:	230f      	movs	r3, #15
 800f062:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800f064:	4b0f      	ldr	r3, [pc, #60]	; (800f0a4 <LmHandlerConfigure+0x220>)
 800f066:	781b      	ldrb	r3, [r3, #0]
 800f068:	f107 0210 	add.w	r2, r7, #16
 800f06c:	4611      	mov	r1, r2
 800f06e:	4618      	mov	r0, r3
 800f070:	f008 fbea 	bl	8017848 <RegionGetPhyParam>
 800f074:	4603      	mov	r3, r0
 800f076:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	bf14      	ite	ne
 800f07e:	2301      	movne	r3, #1
 800f080:	2300      	moveq	r3, #0
 800f082:	b2da      	uxtb	r2, r3
 800f084:	4b07      	ldr	r3, [pc, #28]	; (800f0a4 <LmHandlerConfigure+0x220>)
 800f086:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800f088:	2014      	movs	r0, #20
 800f08a:	f000 fad7 	bl	800f63c <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800f08e:	4b05      	ldr	r3, [pc, #20]	; (800f0a4 <LmHandlerConfigure+0x220>)
 800f090:	79db      	ldrb	r3, [r3, #7]
 800f092:	4618      	mov	r0, r3
 800f094:	f006 faf8 	bl	8015688 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800f098:	2300      	movs	r3, #0
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	3748      	adds	r7, #72	; 0x48
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}
 800f0a2:	bf00      	nop
 800f0a4:	2000053c 	.word	0x2000053c
 800f0a8:	20000584 	.word	0x20000584
 800f0ac:	08020668 	.word	0x08020668
 800f0b0:	20000568 	.word	0x20000568
 800f0b4:	20000558 	.word	0x20000558
 800f0b8:	2000067a 	.word	0x2000067a
 800f0bc:	20000554 	.word	0x20000554
 800f0c0:	20000500 	.word	0x20000500
 800f0c4:	20000508 	.word	0x20000508

0800f0c8 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b082      	sub	sp, #8
 800f0cc:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800f0ce:	f002 fe49 	bl	8011d64 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800f0d2:	f000 fd8b 	bl	800fbec <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800f0d6:	f000 fd5f 	bl	800fb98 <LmHandlerPackageIsTxPending>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d117      	bne.n	800f110 <LmHandlerProcess+0x48>
        return;
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    /* If a MAC layer scheduled uplink is still pending try to send it. */
    if( IsUplinkTxPending == true )
 800f0e0:	4b0d      	ldr	r3, [pc, #52]	; (800f118 <LmHandlerProcess+0x50>)
 800f0e2:	781b      	ldrb	r3, [r3, #0]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d014      	beq.n	800f112 <LmHandlerProcess+0x4a>
    {
        /* Send an empty message */
        LmHandlerAppData_t appData =
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	703b      	strb	r3, [r7, #0]
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	707b      	strb	r3, [r7, #1]
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800f0f4:	4b09      	ldr	r3, [pc, #36]	; (800f11c <LmHandlerProcess+0x54>)
 800f0f6:	78d9      	ldrb	r1, [r3, #3]
 800f0f8:	463b      	mov	r3, r7
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f000 f8d7 	bl	800f2b0 <LmHandlerSend>
 800f102:	4603      	mov	r3, r0
 800f104:	2b00      	cmp	r3, #0
 800f106:	d104      	bne.n	800f112 <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800f108:	4b03      	ldr	r3, [pc, #12]	; (800f118 <LmHandlerProcess+0x50>)
 800f10a:	2200      	movs	r2, #0
 800f10c:	701a      	strb	r2, [r3, #0]
 800f10e:	e000      	b.n	800f112 <LmHandlerProcess+0x4a>
        return;
 800f110:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800f112:	3708      	adds	r7, #8
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}
 800f118:	20000584 	.word	0x20000584
 800f11c:	2000053c 	.word	0x2000053c

0800f120 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800f120:	b480      	push	{r7}
 800f122:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800f124:	4b02      	ldr	r3, [pc, #8]	; (800f130 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800f126:	681b      	ldr	r3, [r3, #0]
}
 800f128:	4618      	mov	r0, r3
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bc80      	pop	{r7}
 800f12e:	4770      	bx	lr
 800f130:	20000580 	.word	0x20000580

0800f134 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b092      	sub	sp, #72	; 0x48
 800f138:	af00      	add	r7, sp, #0
 800f13a:	4603      	mov	r3, r0
 800f13c:	460a      	mov	r2, r1
 800f13e:	71fb      	strb	r3, [r7, #7]
 800f140:	4613      	mov	r3, r2
 800f142:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800f144:	2301      	movs	r3, #1
 800f146:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800f14a:	4b46      	ldr	r3, [pc, #280]	; (800f264 <LmHandlerJoin+0x130>)
 800f14c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f150:	b2db      	uxtb	r3, r3
 800f152:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800f156:	4b43      	ldr	r3, [pc, #268]	; (800f264 <LmHandlerJoin+0x130>)
 800f158:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f15c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800f160:	79fb      	ldrb	r3, [r7, #7]
 800f162:	2b02      	cmp	r3, #2
 800f164:	d10b      	bne.n	800f17e <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f166:	2302      	movs	r3, #2
 800f168:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800f16c:	4b3e      	ldr	r3, [pc, #248]	; (800f268 <LmHandlerJoin+0x134>)
 800f16e:	2202      	movs	r2, #2
 800f170:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800f172:	4a3d      	ldr	r2, [pc, #244]	; (800f268 <LmHandlerJoin+0x134>)
 800f174:	79bb      	ldrb	r3, [r7, #6]
 800f176:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800f178:	f005 f936 	bl	80143e8 <LoRaMacStart>
 800f17c:	e05c      	b.n	800f238 <LmHandlerJoin+0x104>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800f17e:	2301      	movs	r3, #1
 800f180:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800f184:	4b38      	ldr	r3, [pc, #224]	; (800f268 <LmHandlerJoin+0x134>)
 800f186:	2201      	movs	r2, #1
 800f188:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800f18a:	4b36      	ldr	r3, [pc, #216]	; (800f264 <LmHandlerJoin+0x130>)
 800f18c:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800f190:	4b35      	ldr	r3, [pc, #212]	; (800f268 <LmHandlerJoin+0x134>)
 800f192:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800f194:	4b33      	ldr	r3, [pc, #204]	; (800f264 <LmHandlerJoin+0x130>)
 800f196:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800f19a:	4b33      	ldr	r3, [pc, #204]	; (800f268 <LmHandlerJoin+0x134>)
 800f19c:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800f19e:	4b32      	ldr	r3, [pc, #200]	; (800f268 <LmHandlerJoin+0x134>)
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800f1a4:	4a30      	ldr	r2, [pc, #192]	; (800f268 <LmHandlerJoin+0x134>)
 800f1a6:	79bb      	ldrb	r3, [r7, #6]
 800f1a8:	7213      	strb	r3, [r2, #8]

        if( CtxRestoreDone == false )
 800f1aa:	4b30      	ldr	r3, [pc, #192]	; (800f26c <LmHandlerJoin+0x138>)
 800f1ac:	781b      	ldrb	r3, [r3, #0]
 800f1ae:	f083 0301 	eor.w	r3, r3, #1
 800f1b2:	b2db      	uxtb	r3, r3
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d034      	beq.n	800f222 <LmHandlerJoin+0xee>
        {
            /* Configure the default datarate */
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800f1b8:	231f      	movs	r3, #31
 800f1ba:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800f1bc:	4b29      	ldr	r3, [pc, #164]	; (800f264 <LmHandlerJoin+0x130>)
 800f1be:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f1c2:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f1c4:	f107 030c 	add.w	r3, r7, #12
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f005 fbe3 	bl	8014994 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800f1ce:	2320      	movs	r3, #32
 800f1d0:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800f1d2:	4b24      	ldr	r3, [pc, #144]	; (800f264 <LmHandlerJoin+0x130>)
 800f1d4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f1d8:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f1da:	f107 030c 	add.w	r3, r7, #12
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f005 fbd8 	bl	8014994 <LoRaMacMibSetRequestConfirm>

            /* Configure the default Tx Power */
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800f1e4:	2322      	movs	r3, #34	; 0x22
 800f1e6:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800f1e8:	4b1e      	ldr	r3, [pc, #120]	; (800f264 <LmHandlerJoin+0x130>)
 800f1ea:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f1ee:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f1f0:	f107 030c 	add.w	r3, r7, #12
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f005 fbcd 	bl	8014994 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800f1fa:	2321      	movs	r3, #33	; 0x21
 800f1fc:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800f1fe:	4b19      	ldr	r3, [pc, #100]	; (800f264 <LmHandlerJoin+0x130>)
 800f200:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f204:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f206:	f107 030c 	add.w	r3, r7, #12
 800f20a:	4618      	mov	r0, r3
 800f20c:	f005 fbc2 	bl	8014994 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800f210:	2329      	movs	r3, #41	; 0x29
 800f212:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800f214:	4b16      	ldr	r3, [pc, #88]	; (800f270 <LmHandlerJoin+0x13c>)
 800f216:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f218:	f107 030c 	add.w	r3, r7, #12
 800f21c:	4618      	mov	r0, r3
 800f21e:	f005 fbb9 	bl	8014994 <LoRaMacMibSetRequestConfirm>
        }

        LoRaMacStart();
 800f222:	f005 f8e1 	bl	80143e8 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800f226:	2301      	movs	r3, #1
 800f228:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800f22a:	2301      	movs	r3, #1
 800f22c:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800f22e:	f107 030c 	add.w	r3, r7, #12
 800f232:	4618      	mov	r0, r3
 800f234:	f005 fbae 	bl	8014994 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
#endif /* LORAMAC_VERSION */
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 800f238:	4b0c      	ldr	r3, [pc, #48]	; (800f26c <LmHandlerJoin+0x138>)
 800f23a:	781b      	ldrb	r3, [r3, #0]
 800f23c:	f083 0301 	eor.w	r3, r3, #1
 800f240:	b2db      	uxtb	r3, r3
 800f242:	2b00      	cmp	r3, #0
 800f244:	d102      	bne.n	800f24c <LmHandlerJoin+0x118>
 800f246:	79bb      	ldrb	r3, [r7, #6]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d004      	beq.n	800f256 <LmHandlerJoin+0x122>
    {
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800f24c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f250:	4618      	mov	r0, r3
 800f252:	f005 ff49 	bl	80150e8 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800f256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f258:	4a06      	ldr	r2, [pc, #24]	; (800f274 <LmHandlerJoin+0x140>)
 800f25a:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800f25c:	bf00      	nop
 800f25e:	3748      	adds	r7, #72	; 0x48
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}
 800f264:	2000053c 	.word	0x2000053c
 800f268:	20000094 	.word	0x20000094
 800f26c:	2000067a 	.word	0x2000067a
 800f270:	01000400 	.word	0x01000400
 800f274:	20000580 	.word	0x20000580

0800f278 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b08c      	sub	sp, #48	; 0x30
 800f27c:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800f27e:	2301      	movs	r3, #1
 800f280:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800f282:	1d3b      	adds	r3, r7, #4
 800f284:	4618      	mov	r0, r3
 800f286:	f005 f9ad 	bl	80145e4 <LoRaMacMibGetRequestConfirm>
 800f28a:	4603      	mov	r3, r0
 800f28c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( status == LORAMAC_STATUS_OK )
 800f290:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f294:	2b00      	cmp	r3, #0
 800f296:	d106      	bne.n	800f2a6 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f298:	7a3b      	ldrb	r3, [r7, #8]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d101      	bne.n	800f2a2 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	e002      	b.n	800f2a8 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800f2a2:	2301      	movs	r3, #1
 800f2a4:	e000      	b.n	800f2a8 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800f2a6:	2300      	movs	r3, #0
    }
}
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	3730      	adds	r7, #48	; 0x30
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}

0800f2b0 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b08a      	sub	sp, #40	; 0x28
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	460b      	mov	r3, r1
 800f2ba:	70fb      	strb	r3, [r7, #3]
 800f2bc:	4613      	mov	r3, r2
 800f2be:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800f2c0:	23ff      	movs	r3, #255	; 0xff
 800f2c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800f2c6:	f002 faa7 	bl	8011818 <LoRaMacIsBusy>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d002      	beq.n	800f2d6 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f2d0:	f06f 0301 	mvn.w	r3, #1
 800f2d4:	e0ab      	b.n	800f42e <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 800f2d6:	f002 fac7 	bl	8011868 <LoRaMacIsStopped>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d002      	beq.n	800f2e6 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f2e0:	f06f 0302 	mvn.w	r3, #2
 800f2e4:	e0a3      	b.n	800f42e <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800f2e6:	f7ff ffc7 	bl	800f278 <LmHandlerJoinStatus>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	2b01      	cmp	r3, #1
 800f2ee:	d00a      	beq.n	800f306 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800f2f0:	4b51      	ldr	r3, [pc, #324]	; (800f438 <LmHandlerSend+0x188>)
 800f2f2:	79db      	ldrb	r3, [r3, #7]
 800f2f4:	4a50      	ldr	r2, [pc, #320]	; (800f438 <LmHandlerSend+0x188>)
 800f2f6:	7a12      	ldrb	r2, [r2, #8]
 800f2f8:	4611      	mov	r1, r2
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f7ff ff1a 	bl	800f134 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f300:	f06f 0302 	mvn.w	r3, #2
 800f304:	e093      	b.n	800f42e <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800f306:	4a4d      	ldr	r2, [pc, #308]	; (800f43c <LmHandlerSend+0x18c>)
 800f308:	78fb      	ldrb	r3, [r7, #3]
 800f30a:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800f30c:	78fb      	ldrb	r3, [r7, #3]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	bf14      	ite	ne
 800f312:	2301      	movne	r3, #1
 800f314:	2300      	moveq	r3, #0
 800f316:	b2db      	uxtb	r3, r3
 800f318:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800f31a:	4b49      	ldr	r3, [pc, #292]	; (800f440 <LmHandlerSend+0x190>)
 800f31c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f320:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	785b      	ldrb	r3, [r3, #1]
 800f326:	f107 020c 	add.w	r2, r7, #12
 800f32a:	4611      	mov	r1, r2
 800f32c:	4618      	mov	r0, r3
 800f32e:	f005 f8c9 	bl	80144c4 <LoRaMacQueryTxPossible>
 800f332:	4603      	mov	r3, r0
 800f334:	2b00      	cmp	r3, #0
 800f336:	d009      	beq.n	800f34c <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800f338:	2300      	movs	r3, #0
 800f33a:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800f33c:	2300      	movs	r3, #0
 800f33e:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800f340:	2300      	movs	r3, #0
 800f342:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800f344:	23f9      	movs	r3, #249	; 0xf9
 800f346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f34a:	e009      	b.n	800f360 <LmHandlerSend+0xb0>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	781b      	ldrb	r3, [r3, #0]
 800f350:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	785b      	ldrb	r3, [r3, #1]
 800f356:	b29b      	uxth	r3, r3
 800f358:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	685b      	ldr	r3, [r3, #4]
 800f35e:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800f360:	4b36      	ldr	r3, [pc, #216]	; (800f43c <LmHandlerSend+0x18c>)
 800f362:	687a      	ldr	r2, [r7, #4]
 800f364:	3310      	adds	r3, #16
 800f366:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f36a:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800f36e:	4b34      	ldr	r3, [pc, #208]	; (800f440 <LmHandlerSend+0x190>)
 800f370:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800f374:	4b31      	ldr	r3, [pc, #196]	; (800f43c <LmHandlerSend+0x18c>)
 800f376:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800f378:	78ba      	ldrb	r2, [r7, #2]
 800f37a:	f107 0310 	add.w	r3, r7, #16
 800f37e:	4611      	mov	r1, r2
 800f380:	4618      	mov	r0, r3
 800f382:	f006 f849 	bl	8015418 <LoRaMacMcpsRequest>
 800f386:	4603      	mov	r3, r0
 800f388:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800f38c:	6a3b      	ldr	r3, [r7, #32]
 800f38e:	4a2d      	ldr	r2, [pc, #180]	; (800f444 <LmHandlerSend+0x194>)
 800f390:	6013      	str	r3, [r2, #0]

    switch( status )
 800f392:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f396:	2b11      	cmp	r3, #17
 800f398:	d842      	bhi.n	800f420 <LmHandlerSend+0x170>
 800f39a:	a201      	add	r2, pc, #4	; (adr r2, 800f3a0 <LmHandlerSend+0xf0>)
 800f39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3a0:	0800f3e9 	.word	0x0800f3e9
 800f3a4:	0800f401 	.word	0x0800f401
 800f3a8:	0800f421 	.word	0x0800f421
 800f3ac:	0800f421 	.word	0x0800f421
 800f3b0:	0800f421 	.word	0x0800f421
 800f3b4:	0800f421 	.word	0x0800f421
 800f3b8:	0800f421 	.word	0x0800f421
 800f3bc:	0800f409 	.word	0x0800f409
 800f3c0:	0800f421 	.word	0x0800f421
 800f3c4:	0800f421 	.word	0x0800f421
 800f3c8:	0800f421 	.word	0x0800f421
 800f3cc:	0800f419 	.word	0x0800f419
 800f3d0:	0800f421 	.word	0x0800f421
 800f3d4:	0800f421 	.word	0x0800f421
 800f3d8:	0800f401 	.word	0x0800f401
 800f3dc:	0800f401 	.word	0x0800f401
 800f3e0:	0800f401 	.word	0x0800f401
 800f3e4:	0800f411 	.word	0x0800f411
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 800f3e8:	4b17      	ldr	r3, [pc, #92]	; (800f448 <LmHandlerSend+0x198>)
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800f3ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f3f2:	f113 0f07 	cmn.w	r3, #7
 800f3f6:	d017      	beq.n	800f428 <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800f3fe:	e013      	b.n	800f428 <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800f400:	23fe      	movs	r3, #254	; 0xfe
 800f402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f406:	e010      	b.n	800f42a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f408:	23fd      	movs	r3, #253	; 0xfd
 800f40a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f40e:	e00c      	b.n	800f42a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800f410:	23fb      	movs	r3, #251	; 0xfb
 800f412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f416:	e008      	b.n	800f42a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800f418:	23fa      	movs	r3, #250	; 0xfa
 800f41a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f41e:	e004      	b.n	800f42a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800f420:	23ff      	movs	r3, #255	; 0xff
 800f422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f426:	e000      	b.n	800f42a <LmHandlerSend+0x17a>
            break;
 800f428:	bf00      	nop
    }

    return lmhStatus;
 800f42a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f42e:	4618      	mov	r0, r3
 800f430:	3728      	adds	r7, #40	; 0x28
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}
 800f436:	bf00      	nop
 800f438:	20000094 	.word	0x20000094
 800f43c:	200000a0 	.word	0x200000a0
 800f440:	2000053c 	.word	0x2000053c
 800f444:	20000580 	.word	0x20000580
 800f448:	20000584 	.word	0x20000584

0800f44c <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b086      	sub	sp, #24
 800f450:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800f452:	2309      	movs	r3, #9
 800f454:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800f456:	463b      	mov	r3, r7
 800f458:	4618      	mov	r0, r3
 800f45a:	f005 fe45 	bl	80150e8 <LoRaMacMlmeRequest>
 800f45e:	4603      	mov	r3, r0
 800f460:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800f462:	693b      	ldr	r3, [r7, #16]
 800f464:	4a06      	ldr	r2, [pc, #24]	; (800f480 <LmHandlerDeviceTimeReq+0x34>)
 800f466:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800f468:	7dfb      	ldrb	r3, [r7, #23]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d101      	bne.n	800f472 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800f46e:	2300      	movs	r3, #0
 800f470:	e001      	b.n	800f476 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800f472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800f476:	4618      	mov	r0, r3
 800f478:	3718      	adds	r7, #24
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}
 800f47e:	bf00      	nop
 800f480:	20000580 	.word	0x20000580

0800f484 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800f484:	b480      	push	{r7}
 800f486:	b083      	sub	sp, #12
 800f488:	af00      	add	r7, sp, #0
 800f48a:	4603      	mov	r3, r0
 800f48c:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800f48e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800f492:	4618      	mov	r0, r3
 800f494:	370c      	adds	r7, #12
 800f496:	46bd      	mov	sp, r7
 800f498:	bc80      	pop	{r7}
 800f49a:	4770      	bx	lr

0800f49c <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b08e      	sub	sp, #56	; 0x38
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( LoRaMacIsBusy() == true )
 800f4ac:	f002 f9b4 	bl	8011818 <LoRaMacIsBusy>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d002      	beq.n	800f4bc <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f4b6:	f06f 0301 	mvn.w	r3, #1
 800f4ba:	e071      	b.n	800f5a0 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800f4bc:	f7ff fedc 	bl	800f278 <LmHandlerJoinStatus>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	2b01      	cmp	r3, #1
 800f4c4:	d002      	beq.n	800f4cc <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f4c6:	f06f 0302 	mvn.w	r3, #2
 800f4ca:	e069      	b.n	800f5a0 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800f4d0:	f107 030c 	add.w	r3, r7, #12
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f005 f885 	bl	80145e4 <LoRaMacMibGetRequestConfirm>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d002      	beq.n	800f4e6 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800f4e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f4e4:	e05c      	b.n	800f5a0 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800f4e6:	7c3b      	ldrb	r3, [r7, #16]
 800f4e8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800f4ec:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f4f0:	79fb      	ldrb	r3, [r7, #7]
 800f4f2:	429a      	cmp	r2, r3
 800f4f4:	d052      	beq.n	800f59c <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800f4f6:	79fb      	ldrb	r3, [r7, #7]
 800f4f8:	2b02      	cmp	r3, #2
 800f4fa:	d028      	beq.n	800f54e <LmHandlerRequestClass+0xb2>
 800f4fc:	2b02      	cmp	r3, #2
 800f4fe:	dc48      	bgt.n	800f592 <LmHandlerRequestClass+0xf6>
 800f500:	2b00      	cmp	r3, #0
 800f502:	d002      	beq.n	800f50a <LmHandlerRequestClass+0x6e>
 800f504:	2b01      	cmp	r3, #1
 800f506:	d01e      	beq.n	800f546 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800f508:	e043      	b.n	800f592 <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800f50a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d041      	beq.n	800f596 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800f512:	79fb      	ldrb	r3, [r7, #7]
 800f514:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800f516:	f107 030c 	add.w	r3, r7, #12
 800f51a:	4618      	mov	r0, r3
 800f51c:	f005 fa3a 	bl	8014994 <LoRaMacMibSetRequestConfirm>
 800f520:	4603      	mov	r3, r0
 800f522:	2b00      	cmp	r3, #0
 800f524:	d10b      	bne.n	800f53e <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800f526:	4b20      	ldr	r3, [pc, #128]	; (800f5a8 <LmHandlerRequestClass+0x10c>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d032      	beq.n	800f596 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800f530:	4b1d      	ldr	r3, [pc, #116]	; (800f5a8 <LmHandlerRequestClass+0x10c>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f536:	79fa      	ldrb	r2, [r7, #7]
 800f538:	4610      	mov	r0, r2
 800f53a:	4798      	blx	r3
                break;
 800f53c:	e02b      	b.n	800f596 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800f53e:	23ff      	movs	r3, #255	; 0xff
 800f540:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800f544:	e027      	b.n	800f596 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800f546:	23ff      	movs	r3, #255	; 0xff
 800f548:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800f54c:	e026      	b.n	800f59c <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800f54e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f552:	2b00      	cmp	r3, #0
 800f554:	d003      	beq.n	800f55e <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800f556:	23ff      	movs	r3, #255	; 0xff
 800f558:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800f55c:	e01d      	b.n	800f59a <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800f55e:	79fb      	ldrb	r3, [r7, #7]
 800f560:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800f562:	f107 030c 	add.w	r3, r7, #12
 800f566:	4618      	mov	r0, r3
 800f568:	f005 fa14 	bl	8014994 <LoRaMacMibSetRequestConfirm>
 800f56c:	4603      	mov	r3, r0
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d10b      	bne.n	800f58a <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800f572:	4b0d      	ldr	r3, [pc, #52]	; (800f5a8 <LmHandlerRequestClass+0x10c>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d00e      	beq.n	800f59a <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800f57c:	4b0a      	ldr	r3, [pc, #40]	; (800f5a8 <LmHandlerRequestClass+0x10c>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f582:	79fa      	ldrb	r2, [r7, #7]
 800f584:	4610      	mov	r0, r2
 800f586:	4798      	blx	r3
                break;
 800f588:	e007      	b.n	800f59a <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800f58a:	23ff      	movs	r3, #255	; 0xff
 800f58c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800f590:	e003      	b.n	800f59a <LmHandlerRequestClass+0xfe>
                break;
 800f592:	bf00      	nop
 800f594:	e002      	b.n	800f59c <LmHandlerRequestClass+0x100>
                break;
 800f596:	bf00      	nop
 800f598:	e000      	b.n	800f59c <LmHandlerRequestClass+0x100>
                break;
 800f59a:	bf00      	nop
        }
    }
    return errorStatus;
 800f59c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	3738      	adds	r7, #56	; 0x38
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}
 800f5a8:	20000554 	.word	0x20000554

0800f5ac <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b08c      	sub	sp, #48	; 0x30
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d102      	bne.n	800f5c0 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800f5ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f5be:	e010      	b.n	800f5e2 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800f5c4:	f107 0308 	add.w	r3, r7, #8
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f005 f80b 	bl	80145e4 <LoRaMacMibGetRequestConfirm>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d002      	beq.n	800f5da <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800f5d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f5d8:	e003      	b.n	800f5e2 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800f5da:	7b3a      	ldrb	r2, [r7, #12]
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800f5e0:	2300      	movs	r3, #0
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	3730      	adds	r7, #48	; 0x30
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}
	...

0800f5ec <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b08c      	sub	sp, #48	; 0x30
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d102      	bne.n	800f600 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800f5fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f5fe:	e016      	b.n	800f62e <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800f600:	2320      	movs	r3, #32
 800f602:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800f604:	f107 0308 	add.w	r3, r7, #8
 800f608:	4618      	mov	r0, r3
 800f60a:	f004 ffeb 	bl	80145e4 <LoRaMacMibGetRequestConfirm>
 800f60e:	4603      	mov	r3, r0
 800f610:	2b00      	cmp	r3, #0
 800f612:	d002      	beq.n	800f61a <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800f614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f618:	e009      	b.n	800f62e <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800f61a:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	f993 2000 	ldrsb.w	r2, [r3]
 800f628:	4b03      	ldr	r3, [pc, #12]	; (800f638 <LmHandlerGetTxDatarate+0x4c>)
 800f62a:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800f62c:	2300      	movs	r3, #0
}
 800f62e:	4618      	mov	r0, r3
 800f630:	3730      	adds	r7, #48	; 0x30
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}
 800f636:	bf00      	nop
 800f638:	2000053c 	.word	0x2000053c

0800f63c <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b08c      	sub	sp, #48	; 0x30
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800f644:	2323      	movs	r3, #35	; 0x23
 800f646:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800f64c:	f107 0308 	add.w	r3, r7, #8
 800f650:	4618      	mov	r0, r3
 800f652:	f005 f99f 	bl	8014994 <LoRaMacMibSetRequestConfirm>
 800f656:	4603      	mov	r3, r0
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d002      	beq.n	800f662 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800f65c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f660:	e000      	b.n	800f664 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800f662:	2300      	movs	r3, #0
}
 800f664:	4618      	mov	r0, r3
 800f666:	3730      	adds	r7, #48	; 0x30
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd80      	pop	{r7, pc}

0800f66c <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b082      	sub	sp, #8
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800f674:	4b18      	ldr	r3, [pc, #96]	; (800f6d8 <McpsConfirm+0x6c>)
 800f676:	2201      	movs	r2, #1
 800f678:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	785a      	ldrb	r2, [r3, #1]
 800f67e:	4b16      	ldr	r3, [pc, #88]	; (800f6d8 <McpsConfirm+0x6c>)
 800f680:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	789b      	ldrb	r3, [r3, #2]
 800f686:	b25a      	sxtb	r2, r3
 800f688:	4b13      	ldr	r3, [pc, #76]	; (800f6d8 <McpsConfirm+0x6c>)
 800f68a:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	68db      	ldr	r3, [r3, #12]
 800f690:	4a11      	ldr	r2, [pc, #68]	; (800f6d8 <McpsConfirm+0x6c>)
 800f692:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800f69a:	4b0f      	ldr	r3, [pc, #60]	; (800f6d8 <McpsConfirm+0x6c>)
 800f69c:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	691b      	ldr	r3, [r3, #16]
 800f6a2:	b2da      	uxtb	r2, r3
 800f6a4:	4b0c      	ldr	r3, [pc, #48]	; (800f6d8 <McpsConfirm+0x6c>)
 800f6a6:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	791b      	ldrb	r3, [r3, #4]
 800f6ac:	461a      	mov	r2, r3
 800f6ae:	4b0a      	ldr	r3, [pc, #40]	; (800f6d8 <McpsConfirm+0x6c>)
 800f6b0:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800f6b2:	4b0a      	ldr	r3, [pc, #40]	; (800f6dc <McpsConfirm+0x70>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d004      	beq.n	800f6c6 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800f6bc:	4b07      	ldr	r3, [pc, #28]	; (800f6dc <McpsConfirm+0x70>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6c2:	4805      	ldr	r0, [pc, #20]	; (800f6d8 <McpsConfirm+0x6c>)
 800f6c4:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800f6c6:	6879      	ldr	r1, [r7, #4]
 800f6c8:	2000      	movs	r0, #0
 800f6ca:	f000 f9e9 	bl	800faa0 <LmHandlerPackagesNotify>
}
 800f6ce:	bf00      	nop
 800f6d0:	3708      	adds	r7, #8
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}
 800f6d6:	bf00      	nop
 800f6d8:	200000a0 	.word	0x200000a0
 800f6dc:	20000554 	.word	0x20000554

0800f6e0 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b086      	sub	sp, #24
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
 800f6e8:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800f6ee:	4b2d      	ldr	r3, [pc, #180]	; (800f7a4 <McpsIndication+0xc4>)
 800f6f0:	2201      	movs	r2, #1
 800f6f2:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	785a      	ldrb	r2, [r3, #1]
 800f6f8:	4b2a      	ldr	r3, [pc, #168]	; (800f7a4 <McpsIndication+0xc4>)
 800f6fa:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800f6fc:	4b29      	ldr	r3, [pc, #164]	; (800f7a4 <McpsIndication+0xc4>)
 800f6fe:	785b      	ldrb	r3, [r3, #1]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d14b      	bne.n	800f79c <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	791b      	ldrb	r3, [r3, #4]
 800f708:	b25a      	sxtb	r2, r3
 800f70a:	4b26      	ldr	r3, [pc, #152]	; (800f7a4 <McpsIndication+0xc4>)
 800f70c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f714:	b25a      	sxtb	r2, r3
 800f716:	4b23      	ldr	r3, [pc, #140]	; (800f7a4 <McpsIndication+0xc4>)
 800f718:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800f720:	4b20      	ldr	r3, [pc, #128]	; (800f7a4 <McpsIndication+0xc4>)
 800f722:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	78da      	ldrb	r2, [r3, #3]
 800f728:	4b1e      	ldr	r3, [pc, #120]	; (800f7a4 <McpsIndication+0xc4>)
 800f72a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	691b      	ldr	r3, [r3, #16]
 800f730:	4a1c      	ldr	r2, [pc, #112]	; (800f7a4 <McpsIndication+0xc4>)
 800f732:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	78db      	ldrb	r3, [r3, #3]
 800f738:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	7b1b      	ldrb	r3, [r3, #12]
 800f73e:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	689b      	ldr	r3, [r3, #8]
 800f744:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800f746:	4b18      	ldr	r3, [pc, #96]	; (800f7a8 <McpsIndication+0xc8>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d007      	beq.n	800f760 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800f750:	4b15      	ldr	r3, [pc, #84]	; (800f7a8 <McpsIndication+0xc8>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f756:	f107 0210 	add.w	r2, r7, #16
 800f75a:	4912      	ldr	r1, [pc, #72]	; (800f7a4 <McpsIndication+0xc4>)
 800f75c:	4610      	mov	r0, r2
 800f75e:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800f760:	4b11      	ldr	r3, [pc, #68]	; (800f7a8 <McpsIndication+0xc8>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f766:	2b00      	cmp	r3, #0
 800f768:	d007      	beq.n	800f77a <McpsIndication+0x9a>
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	7e1b      	ldrb	r3, [r3, #24]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d003      	beq.n	800f77a <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800f772:	4b0d      	ldr	r3, [pc, #52]	; (800f7a8 <McpsIndication+0xc8>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f778:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800f77a:	6879      	ldr	r1, [r7, #4]
 800f77c:	2001      	movs	r0, #1
 800f77e:	f000 f98f 	bl	800faa0 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800f782:	f107 030f 	add.w	r3, r7, #15
 800f786:	4618      	mov	r0, r3
 800f788:	f7ff ff10 	bl	800f5ac <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	795b      	ldrb	r3, [r3, #5]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d004      	beq.n	800f79e <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 800f794:	4b05      	ldr	r3, [pc, #20]	; (800f7ac <McpsIndication+0xcc>)
 800f796:	2201      	movs	r2, #1
 800f798:	701a      	strb	r2, [r3, #0]
 800f79a:	e000      	b.n	800f79e <McpsIndication+0xbe>
        return;
 800f79c:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800f79e:	3718      	adds	r7, #24
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}
 800f7a4:	200000bc 	.word	0x200000bc
 800f7a8:	20000554 	.word	0x20000554
 800f7ac:	20000584 	.word	0x20000584

0800f7b0 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b08c      	sub	sp, #48	; 0x30
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800f7b8:	4b49      	ldr	r3, [pc, #292]	; (800f8e0 <MlmeConfirm+0x130>)
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	785a      	ldrb	r2, [r3, #1]
 800f7c2:	4b47      	ldr	r3, [pc, #284]	; (800f8e0 <MlmeConfirm+0x130>)
 800f7c4:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800f7c6:	4b47      	ldr	r3, [pc, #284]	; (800f8e4 <MlmeConfirm+0x134>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d004      	beq.n	800f7da <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800f7d0:	4b44      	ldr	r3, [pc, #272]	; (800f8e4 <MlmeConfirm+0x134>)
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7d6:	4842      	ldr	r0, [pc, #264]	; (800f8e0 <MlmeConfirm+0x130>)
 800f7d8:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800f7da:	6879      	ldr	r1, [r7, #4]
 800f7dc:	2002      	movs	r0, #2
 800f7de:	f000 f95f 	bl	800faa0 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	781b      	ldrb	r3, [r3, #0]
 800f7e6:	3b01      	subs	r3, #1
 800f7e8:	2b0b      	cmp	r3, #11
 800f7ea:	d872      	bhi.n	800f8d2 <MlmeConfirm+0x122>
 800f7ec:	a201      	add	r2, pc, #4	; (adr r2, 800f7f4 <MlmeConfirm+0x44>)
 800f7ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7f2:	bf00      	nop
 800f7f4:	0800f825 	.word	0x0800f825
 800f7f8:	0800f8d3 	.word	0x0800f8d3
 800f7fc:	0800f8d3 	.word	0x0800f8d3
 800f800:	0800f8d3 	.word	0x0800f8d3
 800f804:	0800f8a1 	.word	0x0800f8a1
 800f808:	0800f8d3 	.word	0x0800f8d3
 800f80c:	0800f8d3 	.word	0x0800f8d3
 800f810:	0800f8d3 	.word	0x0800f8d3
 800f814:	0800f8d3 	.word	0x0800f8d3
 800f818:	0800f8d3 	.word	0x0800f8d3
 800f81c:	0800f8b9 	.word	0x0800f8b9
 800f820:	0800f8d3 	.word	0x0800f8d3
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800f824:	2306      	movs	r3, #6
 800f826:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800f828:	f107 0308 	add.w	r3, r7, #8
 800f82c:	4618      	mov	r0, r3
 800f82e:	f004 fed9 	bl	80145e4 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800f832:	4b2d      	ldr	r3, [pc, #180]	; (800f8e8 <MlmeConfirm+0x138>)
 800f834:	79db      	ldrb	r3, [r3, #7]
 800f836:	68fa      	ldr	r2, [r7, #12]
 800f838:	4611      	mov	r1, r2
 800f83a:	4618      	mov	r0, r3
 800f83c:	f7ff fa78 	bl	800ed30 <SecureElementSetDevAddr>
 800f840:	4603      	mov	r3, r0
 800f842:	2b00      	cmp	r3, #0
 800f844:	d102      	bne.n	800f84c <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	4a28      	ldr	r2, [pc, #160]	; (800f8ec <MlmeConfirm+0x13c>)
 800f84a:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800f84c:	4828      	ldr	r0, [pc, #160]	; (800f8f0 <MlmeConfirm+0x140>)
 800f84e:	f7ff fecd 	bl	800f5ec <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800f852:	4828      	ldr	r0, [pc, #160]	; (800f8f4 <MlmeConfirm+0x144>)
 800f854:	f000 fa74 	bl	800fd40 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800f858:	4b21      	ldr	r3, [pc, #132]	; (800f8e0 <MlmeConfirm+0x130>)
 800f85a:	785b      	ldrb	r3, [r3, #1]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d108      	bne.n	800f872 <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800f860:	4b21      	ldr	r3, [pc, #132]	; (800f8e8 <MlmeConfirm+0x138>)
 800f862:	2200      	movs	r2, #0
 800f864:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800f866:	4b24      	ldr	r3, [pc, #144]	; (800f8f8 <MlmeConfirm+0x148>)
 800f868:	785b      	ldrb	r3, [r3, #1]
 800f86a:	4618      	mov	r0, r3
 800f86c:	f7ff fe16 	bl	800f49c <LmHandlerRequestClass>
 800f870:	e002      	b.n	800f878 <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800f872:	4b1d      	ldr	r3, [pc, #116]	; (800f8e8 <MlmeConfirm+0x138>)
 800f874:	22ff      	movs	r2, #255	; 0xff
 800f876:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800f878:	4b1a      	ldr	r3, [pc, #104]	; (800f8e4 <MlmeConfirm+0x134>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d004      	beq.n	800f88c <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800f882:	4b18      	ldr	r3, [pc, #96]	; (800f8e4 <MlmeConfirm+0x134>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f888:	4817      	ldr	r0, [pc, #92]	; (800f8e8 <MlmeConfirm+0x138>)
 800f88a:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800f88c:	4b14      	ldr	r3, [pc, #80]	; (800f8e0 <MlmeConfirm+0x130>)
 800f88e:	785b      	ldrb	r3, [r3, #1]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d120      	bne.n	800f8d6 <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800f894:	4b14      	ldr	r3, [pc, #80]	; (800f8e8 <MlmeConfirm+0x138>)
 800f896:	79db      	ldrb	r3, [r3, #7]
 800f898:	4618      	mov	r0, r3
 800f89a:	f7fe fff1 	bl	800e880 <SecureElementPrintSessionKeys>
                }
            }
            break;
 800f89e:	e01a      	b.n	800f8d6 <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800f8a0:	4b16      	ldr	r3, [pc, #88]	; (800f8fc <MlmeConfirm+0x14c>)
 800f8a2:	2201      	movs	r2, #1
 800f8a4:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	7a1a      	ldrb	r2, [r3, #8]
 800f8aa:	4b14      	ldr	r3, [pc, #80]	; (800f8fc <MlmeConfirm+0x14c>)
 800f8ac:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	7a5a      	ldrb	r2, [r3, #9]
 800f8b2:	4b12      	ldr	r3, [pc, #72]	; (800f8fc <MlmeConfirm+0x14c>)
 800f8b4:	74da      	strb	r2, [r3, #19]
            }
            break;
 800f8b6:	e00f      	b.n	800f8d8 <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	785b      	ldrb	r3, [r3, #1]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d105      	bne.n	800f8cc <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800f8c0:	4b0d      	ldr	r3, [pc, #52]	; (800f8f8 <MlmeConfirm+0x148>)
 800f8c2:	7c1b      	ldrb	r3, [r3, #16]
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	f7ff fddd 	bl	800f484 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800f8ca:	e005      	b.n	800f8d8 <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 800f8cc:	f7ff fdbe 	bl	800f44c <LmHandlerDeviceTimeReq>
            break;
 800f8d0:	e002      	b.n	800f8d8 <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800f8d2:	bf00      	nop
 800f8d4:	e000      	b.n	800f8d8 <MlmeConfirm+0x128>
            break;
 800f8d6:	bf00      	nop
    }
}
 800f8d8:	bf00      	nop
 800f8da:	3730      	adds	r7, #48	; 0x30
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}
 800f8e0:	200000a0 	.word	0x200000a0
 800f8e4:	20000554 	.word	0x20000554
 800f8e8:	20000094 	.word	0x20000094
 800f8ec:	20000500 	.word	0x20000500
 800f8f0:	20000098 	.word	0x20000098
 800f8f4:	20000099 	.word	0x20000099
 800f8f8:	2000053c 	.word	0x2000053c
 800f8fc:	200000bc 	.word	0x200000bc

0800f900 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b082      	sub	sp, #8
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
 800f908:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800f90a:	4b20      	ldr	r3, [pc, #128]	; (800f98c <MlmeIndication+0x8c>)
 800f90c:	2200      	movs	r2, #0
 800f90e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	785a      	ldrb	r2, [r3, #1]
 800f914:	4b1d      	ldr	r3, [pc, #116]	; (800f98c <MlmeIndication+0x8c>)
 800f916:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	789b      	ldrb	r3, [r3, #2]
 800f91c:	b25a      	sxtb	r2, r3
 800f91e:	4b1b      	ldr	r3, [pc, #108]	; (800f98c <MlmeIndication+0x8c>)
 800f920:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f928:	b25a      	sxtb	r2, r3
 800f92a:	4b18      	ldr	r3, [pc, #96]	; (800f98c <MlmeIndication+0x8c>)
 800f92c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800f934:	4b15      	ldr	r3, [pc, #84]	; (800f98c <MlmeIndication+0x8c>)
 800f936:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	78da      	ldrb	r2, [r3, #3]
 800f93c:	4b13      	ldr	r3, [pc, #76]	; (800f98c <MlmeIndication+0x8c>)
 800f93e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	685b      	ldr	r3, [r3, #4]
 800f944:	4a11      	ldr	r2, [pc, #68]	; (800f98c <MlmeIndication+0x8c>)
 800f946:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800f948:	4b11      	ldr	r3, [pc, #68]	; (800f990 <MlmeIndication+0x90>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d00d      	beq.n	800f96e <MlmeIndication+0x6e>
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	781b      	ldrb	r3, [r3, #0]
 800f956:	2b0a      	cmp	r3, #10
 800f958:	d009      	beq.n	800f96e <MlmeIndication+0x6e>
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	781b      	ldrb	r3, [r3, #0]
 800f95e:	2b0e      	cmp	r3, #14
 800f960:	d005      	beq.n	800f96e <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800f962:	4b0b      	ldr	r3, [pc, #44]	; (800f990 <MlmeIndication+0x90>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f968:	4908      	ldr	r1, [pc, #32]	; (800f98c <MlmeIndication+0x8c>)
 800f96a:	2000      	movs	r0, #0
 800f96c:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800f96e:	6879      	ldr	r1, [r7, #4]
 800f970:	2003      	movs	r0, #3
 800f972:	f000 f895 	bl	800faa0 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	781b      	ldrb	r3, [r3, #0]
 800f97a:	2b0a      	cmp	r3, #10
 800f97c:	d001      	beq.n	800f982 <MlmeIndication+0x82>
 800f97e:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800f980:	e000      	b.n	800f984 <MlmeIndication+0x84>
            break;
 800f982:	bf00      	nop
    }
}
 800f984:	bf00      	nop
 800f986:	3708      	adds	r7, #8
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}
 800f98c:	200000bc 	.word	0x200000bc
 800f990:	20000554 	.word	0x20000554

0800f994 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b084      	sub	sp, #16
 800f998:	af00      	add	r7, sp, #0
 800f99a:	4603      	mov	r3, r0
 800f99c:	6039      	str	r1, [r7, #0]
 800f99e:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	60fb      	str	r3, [r7, #12]
    switch( id )
 800f9a4:	79fb      	ldrb	r3, [r7, #7]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d104      	bne.n	800f9b4 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800f9aa:	f000 fa8b 	bl	800fec4 <LmhpCompliancePackageFactory>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	60fb      	str	r3, [r7, #12]
                break;
 800f9b2:	e00d      	b.n	800f9d0 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800f9b4:	f107 020c 	add.w	r2, r7, #12
 800f9b8:	79fb      	ldrb	r3, [r7, #7]
 800f9ba:	4611      	mov	r1, r2
 800f9bc:	4618      	mov	r0, r3
 800f9be:	f000 ff73 	bl	80108a8 <LmhpPackagesRegister>
 800f9c2:	4603      	mov	r3, r0
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d002      	beq.n	800f9ce <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800f9c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f9cc:	e03b      	b.n	800fa46 <LmHandlerPackageRegister+0xb2>
                }
                break;
 800f9ce:	bf00      	nop
            }
    }
    if( package != NULL )
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d035      	beq.n	800fa42 <LmHandlerPackageRegister+0xae>
    {
        LmHandlerPackages[id] = package;
 800f9d6:	79fb      	ldrb	r3, [r7, #7]
 800f9d8:	68fa      	ldr	r2, [r7, #12]
 800f9da:	491d      	ldr	r1, [pc, #116]	; (800fa50 <LmHandlerPackageRegister+0xbc>)
 800f9dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800f9e0:	79fb      	ldrb	r3, [r7, #7]
 800f9e2:	4a1b      	ldr	r2, [pc, #108]	; (800fa50 <LmHandlerPackageRegister+0xbc>)
 800f9e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9e8:	4a1a      	ldr	r2, [pc, #104]	; (800fa54 <LmHandlerPackageRegister+0xc0>)
 800f9ea:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800f9ec:	4b1a      	ldr	r3, [pc, #104]	; (800fa58 <LmHandlerPackageRegister+0xc4>)
 800f9ee:	681a      	ldr	r2, [r3, #0]
 800f9f0:	79fb      	ldrb	r3, [r7, #7]
 800f9f2:	4917      	ldr	r1, [pc, #92]	; (800fa50 <LmHandlerPackageRegister+0xbc>)
 800f9f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f9f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800f9fa:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800f9fc:	4b16      	ldr	r3, [pc, #88]	; (800fa58 <LmHandlerPackageRegister+0xc4>)
 800f9fe:	681a      	ldr	r2, [r3, #0]
 800fa00:	79fb      	ldrb	r3, [r7, #7]
 800fa02:	4913      	ldr	r1, [pc, #76]	; (800fa50 <LmHandlerPackageRegister+0xbc>)
 800fa04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fa08:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800fa0a:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800fa0c:	79fb      	ldrb	r3, [r7, #7]
 800fa0e:	4a10      	ldr	r2, [pc, #64]	; (800fa50 <LmHandlerPackageRegister+0xbc>)
 800fa10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa14:	4a11      	ldr	r2, [pc, #68]	; (800fa5c <LmHandlerPackageRegister+0xc8>)
 800fa16:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800fa18:	4b0f      	ldr	r3, [pc, #60]	; (800fa58 <LmHandlerPackageRegister+0xc4>)
 800fa1a:	681a      	ldr	r2, [r3, #0]
 800fa1c:	79fb      	ldrb	r3, [r7, #7]
 800fa1e:	490c      	ldr	r1, [pc, #48]	; (800fa50 <LmHandlerPackageRegister+0xbc>)
 800fa20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fa24:	6992      	ldr	r2, [r2, #24]
 800fa26:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800fa28:	79fb      	ldrb	r3, [r7, #7]
 800fa2a:	4a09      	ldr	r2, [pc, #36]	; (800fa50 <LmHandlerPackageRegister+0xbc>)
 800fa2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa30:	685b      	ldr	r3, [r3, #4]
 800fa32:	4a0b      	ldr	r2, [pc, #44]	; (800fa60 <LmHandlerPackageRegister+0xcc>)
 800fa34:	6851      	ldr	r1, [r2, #4]
 800fa36:	4a0a      	ldr	r2, [pc, #40]	; (800fa60 <LmHandlerPackageRegister+0xcc>)
 800fa38:	7852      	ldrb	r2, [r2, #1]
 800fa3a:	6838      	ldr	r0, [r7, #0]
 800fa3c:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	e001      	b.n	800fa46 <LmHandlerPackageRegister+0xb2>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800fa42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800fa46:	4618      	mov	r0, r3
 800fa48:	3710      	adds	r7, #16
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd80      	pop	{r7, pc}
 800fa4e:	bf00      	nop
 800fa50:	20000528 	.word	0x20000528
 800fa54:	0800f135 	.word	0x0800f135
 800fa58:	20000554 	.word	0x20000554
 800fa5c:	0800f44d 	.word	0x0800f44d
 800fa60:	200000d0 	.word	0x200000d0

0800fa64 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b082      	sub	sp, #8
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800fa6e:	79fb      	ldrb	r3, [r7, #7]
 800fa70:	2b04      	cmp	r3, #4
 800fa72:	d80e      	bhi.n	800fa92 <LmHandlerPackageIsInitialized+0x2e>
 800fa74:	79fb      	ldrb	r3, [r7, #7]
 800fa76:	4a09      	ldr	r2, [pc, #36]	; (800fa9c <LmHandlerPackageIsInitialized+0x38>)
 800fa78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa7c:	689b      	ldr	r3, [r3, #8]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d007      	beq.n	800fa92 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800fa82:	79fb      	ldrb	r3, [r7, #7]
 800fa84:	4a05      	ldr	r2, [pc, #20]	; (800fa9c <LmHandlerPackageIsInitialized+0x38>)
 800fa86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa8a:	689b      	ldr	r3, [r3, #8]
 800fa8c:	4798      	blx	r3
 800fa8e:	4603      	mov	r3, r0
 800fa90:	e000      	b.n	800fa94 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800fa92:	2300      	movs	r3, #0
    }
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3708      	adds	r7, #8
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}
 800fa9c:	20000528 	.word	0x20000528

0800faa0 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b084      	sub	sp, #16
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	4603      	mov	r3, r0
 800faa8:	6039      	str	r1, [r7, #0]
 800faaa:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800faac:	2300      	movs	r3, #0
 800faae:	73fb      	strb	r3, [r7, #15]
 800fab0:	e067      	b.n	800fb82 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800fab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fab6:	4a37      	ldr	r2, [pc, #220]	; (800fb94 <LmHandlerPackagesNotify+0xf4>)
 800fab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d05a      	beq.n	800fb76 <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800fac0:	79fb      	ldrb	r3, [r7, #7]
 800fac2:	2b03      	cmp	r3, #3
 800fac4:	d84e      	bhi.n	800fb64 <LmHandlerPackagesNotify+0xc4>
 800fac6:	a201      	add	r2, pc, #4	; (adr r2, 800facc <LmHandlerPackagesNotify+0x2c>)
 800fac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800facc:	0800fadd 	.word	0x0800fadd
 800fad0:	0800faff 	.word	0x0800faff
 800fad4:	0800fb21 	.word	0x0800fb21
 800fad8:	0800fb43 	.word	0x0800fb43
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800fadc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fae0:	4a2c      	ldr	r2, [pc, #176]	; (800fb94 <LmHandlerPackagesNotify+0xf4>)
 800fae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fae6:	699b      	ldr	r3, [r3, #24]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d03d      	beq.n	800fb68 <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800faec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800faf0:	4a28      	ldr	r2, [pc, #160]	; (800fb94 <LmHandlerPackagesNotify+0xf4>)
 800faf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800faf6:	699b      	ldr	r3, [r3, #24]
 800faf8:	6838      	ldr	r0, [r7, #0]
 800fafa:	4798      	blx	r3
                        }
                        break;
 800fafc:	e034      	b.n	800fb68 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800fafe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb02:	4a24      	ldr	r2, [pc, #144]	; (800fb94 <LmHandlerPackagesNotify+0xf4>)
 800fb04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb08:	69db      	ldr	r3, [r3, #28]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d02e      	beq.n	800fb6c <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800fb0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb12:	4a20      	ldr	r2, [pc, #128]	; (800fb94 <LmHandlerPackagesNotify+0xf4>)
 800fb14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb18:	69db      	ldr	r3, [r3, #28]
 800fb1a:	6838      	ldr	r0, [r7, #0]
 800fb1c:	4798      	blx	r3
                        }
                        break;
 800fb1e:	e025      	b.n	800fb6c <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800fb20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb24:	4a1b      	ldr	r2, [pc, #108]	; (800fb94 <LmHandlerPackagesNotify+0xf4>)
 800fb26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb2a:	6a1b      	ldr	r3, [r3, #32]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d01f      	beq.n	800fb70 <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800fb30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb34:	4a17      	ldr	r2, [pc, #92]	; (800fb94 <LmHandlerPackagesNotify+0xf4>)
 800fb36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb3a:	6a1b      	ldr	r3, [r3, #32]
 800fb3c:	6838      	ldr	r0, [r7, #0]
 800fb3e:	4798      	blx	r3
                        }
                        break;
 800fb40:	e016      	b.n	800fb70 <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800fb42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb46:	4a13      	ldr	r2, [pc, #76]	; (800fb94 <LmHandlerPackagesNotify+0xf4>)
 800fb48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d010      	beq.n	800fb74 <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800fb52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb56:	4a0f      	ldr	r2, [pc, #60]	; (800fb94 <LmHandlerPackagesNotify+0xf4>)
 800fb58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb5e:	6838      	ldr	r0, [r7, #0]
 800fb60:	4798      	blx	r3
                        }
                        break;
 800fb62:	e007      	b.n	800fb74 <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 800fb64:	bf00      	nop
 800fb66:	e006      	b.n	800fb76 <LmHandlerPackagesNotify+0xd6>
                        break;
 800fb68:	bf00      	nop
 800fb6a:	e004      	b.n	800fb76 <LmHandlerPackagesNotify+0xd6>
                        break;
 800fb6c:	bf00      	nop
 800fb6e:	e002      	b.n	800fb76 <LmHandlerPackagesNotify+0xd6>
                        break;
 800fb70:	bf00      	nop
 800fb72:	e000      	b.n	800fb76 <LmHandlerPackagesNotify+0xd6>
                        break;
 800fb74:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800fb76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb7a:	b2db      	uxtb	r3, r3
 800fb7c:	3301      	adds	r3, #1
 800fb7e:	b2db      	uxtb	r3, r3
 800fb80:	73fb      	strb	r3, [r7, #15]
 800fb82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb86:	2b04      	cmp	r3, #4
 800fb88:	dd93      	ble.n	800fab2 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800fb8a:	bf00      	nop
 800fb8c:	bf00      	nop
 800fb8e:	3710      	adds	r7, #16
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}
 800fb94:	20000528 	.word	0x20000528

0800fb98 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800fb9e:	2300      	movs	r3, #0
 800fba0:	71fb      	strb	r3, [r7, #7]
 800fba2:	e018      	b.n	800fbd6 <LmHandlerPackageIsTxPending+0x3e>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 800fba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fba8:	4a0f      	ldr	r2, [pc, #60]	; (800fbe8 <LmHandlerPackageIsTxPending+0x50>)
 800fbaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d00b      	beq.n	800fbca <LmHandlerPackageIsTxPending+0x32>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800fbb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fbb6:	4a0c      	ldr	r2, [pc, #48]	; (800fbe8 <LmHandlerPackageIsTxPending+0x50>)
 800fbb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbbc:	68db      	ldr	r3, [r3, #12]
 800fbbe:	4798      	blx	r3
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d001      	beq.n	800fbca <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	e00a      	b.n	800fbe0 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800fbca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fbce:	b2db      	uxtb	r3, r3
 800fbd0:	3301      	adds	r3, #1
 800fbd2:	b2db      	uxtb	r3, r3
 800fbd4:	71fb      	strb	r3, [r7, #7]
 800fbd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fbda:	2b04      	cmp	r3, #4
 800fbdc:	dde2      	ble.n	800fba4 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800fbde:	2300      	movs	r3, #0
}
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	3708      	adds	r7, #8
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}
 800fbe8:	20000528 	.word	0x20000528

0800fbec <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b082      	sub	sp, #8
 800fbf0:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	71fb      	strb	r3, [r7, #7]
 800fbf6:	e022      	b.n	800fc3e <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800fbf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fbfc:	4a14      	ldr	r2, [pc, #80]	; (800fc50 <LmHandlerPackagesProcess+0x64>)
 800fbfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d015      	beq.n	800fc32 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800fc06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc0a:	4a11      	ldr	r2, [pc, #68]	; (800fc50 <LmHandlerPackagesProcess+0x64>)
 800fc0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc10:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d00d      	beq.n	800fc32 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800fc16:	79fb      	ldrb	r3, [r7, #7]
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f7ff ff23 	bl	800fa64 <LmHandlerPackageIsInitialized>
 800fc1e:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d006      	beq.n	800fc32 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800fc24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc28:	4a09      	ldr	r2, [pc, #36]	; (800fc50 <LmHandlerPackagesProcess+0x64>)
 800fc2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc2e:	691b      	ldr	r3, [r3, #16]
 800fc30:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800fc32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc36:	b2db      	uxtb	r3, r3
 800fc38:	3301      	adds	r3, #1
 800fc3a:	b2db      	uxtb	r3, r3
 800fc3c:	71fb      	strb	r3, [r7, #7]
 800fc3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc42:	2b04      	cmp	r3, #4
 800fc44:	ddd8      	ble.n	800fbf8 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800fc46:	bf00      	nop
 800fc48:	bf00      	nop
 800fc4a:	3708      	adds	r7, #8
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}
 800fc50:	20000528 	.word	0x20000528

0800fc54 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b082      	sub	sp, #8
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800fc5e:	4a09      	ldr	r2, [pc, #36]	; (800fc84 <LmHandlerOnTxFrameCtrlChanged+0x30>)
 800fc60:	79fb      	ldrb	r3, [r7, #7]
 800fc62:	70d3      	strb	r3, [r2, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 800fc64:	4b08      	ldr	r3, [pc, #32]	; (800fc88 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d005      	beq.n	800fc7a <LmHandlerOnTxFrameCtrlChanged+0x26>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800fc6e:	4b06      	ldr	r3, [pc, #24]	; (800fc88 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc74:	79fa      	ldrb	r2, [r7, #7]
 800fc76:	4610      	mov	r0, r2
 800fc78:	4798      	blx	r3
    }
}
 800fc7a:	bf00      	nop
 800fc7c:	3708      	adds	r7, #8
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}
 800fc82:	bf00      	nop
 800fc84:	2000053c 	.word	0x2000053c
 800fc88:	20000554 	.word	0x20000554

0800fc8c <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b082      	sub	sp, #8
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	4603      	mov	r3, r0
 800fc94:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800fc96:	4a09      	ldr	r2, [pc, #36]	; (800fcbc <LmHandlerOnPingSlotPeriodicityChanged+0x30>)
 800fc98:	79fb      	ldrb	r3, [r7, #7]
 800fc9a:	7413      	strb	r3, [r2, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 800fc9c:	4b08      	ldr	r3, [pc, #32]	; (800fcc0 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d005      	beq.n	800fcb2 <LmHandlerOnPingSlotPeriodicityChanged+0x26>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 800fca6:	4b06      	ldr	r3, [pc, #24]	; (800fcc0 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcac:	79fa      	ldrb	r2, [r7, #7]
 800fcae:	4610      	mov	r0, r2
 800fcb0:	4798      	blx	r3
    }
}
 800fcb2:	bf00      	nop
 800fcb4:	3708      	adds	r7, #8
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}
 800fcba:	bf00      	nop
 800fcbc:	2000053c 	.word	0x2000053c
 800fcc0:	20000554 	.word	0x20000554

0800fcc4 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b083      	sub	sp, #12
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	4603      	mov	r3, r0
 800fccc:	6039      	str	r1, [r7, #0]
 800fcce:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d102      	bne.n	800fcdc <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800fcd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fcda:	e00e      	b.n	800fcfa <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 800fcdc:	79fb      	ldrb	r3, [r7, #7]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d002      	beq.n	800fce8 <LmHandlerGetVersion+0x24>
 800fce2:	2b01      	cmp	r3, #1
 800fce4:	d004      	beq.n	800fcf0 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 800fce6:	e007      	b.n	800fcf8 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	4a06      	ldr	r2, [pc, #24]	; (800fd04 <LmHandlerGetVersion+0x40>)
 800fcec:	601a      	str	r2, [r3, #0]
            break;
 800fcee:	e003      	b.n	800fcf8 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	4a05      	ldr	r2, [pc, #20]	; (800fd08 <LmHandlerGetVersion+0x44>)
 800fcf4:	601a      	str	r2, [r3, #0]
            break;
 800fcf6:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800fcf8:	2300      	movs	r3, #0
}
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	370c      	adds	r7, #12
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bc80      	pop	{r7}
 800fd02:	4770      	bx	lr
 800fd04:	01000400 	.word	0x01000400
 800fd08:	02010001 	.word	0x02010001

0800fd0c <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800fd10:	f005 fce0 	bl	80156d4 <LoRaMacDeInitialization>
 800fd14:	4603      	mov	r3, r0
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d101      	bne.n	800fd1e <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	e001      	b.n	800fd22 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800fd1e:	f06f 0301 	mvn.w	r3, #1
    }
}
 800fd22:	4618      	mov	r0, r3
 800fd24:	bd80      	pop	{r7, pc}

0800fd26 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800fd26:	b580      	push	{r7, lr}
 800fd28:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800fd2a:	f004 fb93 	bl	8014454 <LoRaMacHalt>
 800fd2e:	4603      	mov	r3, r0
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d101      	bne.n	800fd38 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800fd34:	2300      	movs	r3, #0
 800fd36:	e001      	b.n	800fd3c <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800fd38:	f06f 0301 	mvn.w	r3, #1
    }
}
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	bd80      	pop	{r7, pc}

0800fd40 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b08c      	sub	sp, #48	; 0x30
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d102      	bne.n	800fd54 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800fd4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd52:	e016      	b.n	800fd82 <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800fd54:	2321      	movs	r3, #33	; 0x21
 800fd56:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800fd58:	f107 0308 	add.w	r3, r7, #8
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f004 fc41 	bl	80145e4 <LoRaMacMibGetRequestConfirm>
 800fd62:	4603      	mov	r3, r0
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d002      	beq.n	800fd6e <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800fd68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd6c:	e009      	b.n	800fd82 <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800fd6e:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	f993 2000 	ldrsb.w	r2, [r3]
 800fd7c:	4b03      	ldr	r3, [pc, #12]	; (800fd8c <LmHandlerGetTxPower+0x4c>)
 800fd7e:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800fd80:	2300      	movs	r3, #0
}
 800fd82:	4618      	mov	r0, r3
 800fd84:	3730      	adds	r7, #48	; 0x30
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}
 800fd8a:	bf00      	nop
 800fd8c:	2000053c 	.word	0x2000053c

0800fd90 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b08e      	sub	sp, #56	; 0x38
 800fd94:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800fd96:	2300      	movs	r3, #0
 800fd98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 800fda0:	f7ff ffc1 	bl	800fd26 <LmHandlerHalt>
 800fda4:	4603      	mov	r3, r0
 800fda6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800fdaa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d12f      	bne.n	800fe12 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800fdb2:	f000 f859 	bl	800fe68 <NvmDataMgmtStoreBegin>
 800fdb6:	6338      	str	r0, [r7, #48]	; 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 800fdb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdba:	f113 0f02 	cmn.w	r3, #2
 800fdbe:	d103      	bne.n	800fdc8 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800fdc0:	23f8      	movs	r3, #248	; 0xf8
 800fdc2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fdc6:	e01c      	b.n	800fe02 <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800fdc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d104      	bne.n	800fdd8 <LmHandlerNvmDataStore+0x48>
 800fdce:	4b1b      	ldr	r3, [pc, #108]	; (800fe3c <LmHandlerNvmDataStore+0xac>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	695b      	ldr	r3, [r3, #20]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d103      	bne.n	800fde0 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800fdd8:	23ff      	movs	r3, #255	; 0xff
 800fdda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fdde:	e010      	b.n	800fe02 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 800fde0:	2327      	movs	r3, #39	; 0x27
 800fde2:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800fde4:	463b      	mov	r3, r7
 800fde6:	4618      	mov	r0, r3
 800fde8:	f004 fbfc 	bl	80145e4 <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	62fb      	str	r3, [r7, #44]	; 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 800fdf0:	f44f 63ba 	mov.w	r3, #1488	; 0x5d0
 800fdf4:	62bb      	str	r3, [r7, #40]	; 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 800fdf6:	4b11      	ldr	r3, [pc, #68]	; (800fe3c <LmHandlerNvmDataStore+0xac>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	695b      	ldr	r3, [r3, #20]
 800fdfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fdfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe00:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800fe02:	f000 f847 	bl	800fe94 <NvmDataMgmtStoreEnd>
 800fe06:	4603      	mov	r3, r0
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d002      	beq.n	800fe12 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800fe0c:	23ff      	movs	r3, #255	; 0xff
 800fe0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800fe12:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d109      	bne.n	800fe2e <LmHandlerNvmDataStore+0x9e>
 800fe1a:	4b08      	ldr	r3, [pc, #32]	; (800fe3c <LmHandlerNvmDataStore+0xac>)
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	69db      	ldr	r3, [r3, #28]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d004      	beq.n	800fe2e <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800fe24:	4b05      	ldr	r3, [pc, #20]	; (800fe3c <LmHandlerNvmDataStore+0xac>)
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	69db      	ldr	r3, [r3, #28]
 800fe2a:	2001      	movs	r0, #1
 800fe2c:	4798      	blx	r3
    }

    return lmhStatus;
 800fe2e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800fe32:	4618      	mov	r0, r3
 800fe34:	3738      	adds	r7, #56	; 0x38
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}
 800fe3a:	bf00      	nop
 800fe3c:	20000554 	.word	0x20000554

0800fe40 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800fe40:	b480      	push	{r7}
 800fe42:	b083      	sub	sp, #12
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	4603      	mov	r3, r0
 800fe48:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800fe4a:	4b06      	ldr	r3, [pc, #24]	; (800fe64 <NvmDataMgmtEvent+0x24>)
 800fe4c:	881a      	ldrh	r2, [r3, #0]
 800fe4e:	88fb      	ldrh	r3, [r7, #6]
 800fe50:	4313      	orrs	r3, r2
 800fe52:	b29a      	uxth	r2, r3
 800fe54:	4b03      	ldr	r3, [pc, #12]	; (800fe64 <NvmDataMgmtEvent+0x24>)
 800fe56:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800fe58:	bf00      	nop
 800fe5a:	370c      	adds	r7, #12
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bc80      	pop	{r7}
 800fe60:	4770      	bx	lr
 800fe62:	bf00      	nop
 800fe64:	2000067c 	.word	0x2000067c

0800fe68 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800fe6c:	4b08      	ldr	r3, [pc, #32]	; (800fe90 <NvmDataMgmtStoreBegin+0x28>)
 800fe6e:	881b      	ldrh	r3, [r3, #0]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d102      	bne.n	800fe7a <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 800fe74:	f06f 0301 	mvn.w	r3, #1
 800fe78:	e008      	b.n	800fe8c <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800fe7a:	f004 fac3 	bl	8014404 <LoRaMacStop>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d002      	beq.n	800fe8a <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800fe84:	f06f 0302 	mvn.w	r3, #2
 800fe88:	e000      	b.n	800fe8c <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800fe8a:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	bd80      	pop	{r7, pc}
 800fe90:	2000067c 	.word	0x2000067c

0800fe94 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800fe98:	4b03      	ldr	r3, [pc, #12]	; (800fea8 <NvmDataMgmtStoreEnd+0x14>)
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800fe9e:	f004 faa3 	bl	80143e8 <LoRaMacStart>
    return NVM_DATA_OK;
 800fea2:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	bd80      	pop	{r7, pc}
 800fea8:	2000067c 	.word	0x2000067c

0800feac <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800feac:	b580      	push	{r7, lr}
 800feae:	af00      	add	r7, sp, #0
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800feb0:	2220      	movs	r2, #32
 800feb2:	2100      	movs	r1, #0
 800feb4:	4802      	ldr	r0, [pc, #8]	; (800fec0 <ClassBStatusReset+0x14>)
 800feb6:	f00b fb03 	bl	801b4c0 <memset1>
}
 800feba:	bf00      	nop
 800febc:	bd80      	pop	{r7, pc}
 800febe:	bf00      	nop
 800fec0:	20000694 	.word	0x20000694

0800fec4 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  /* To be initialized by LmHandler */
    .OnSystemReset           = NULL,  /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800fec4:	b480      	push	{r7}
 800fec6:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800fec8:	4b02      	ldr	r3, [pc, #8]	; (800fed4 <LmhpCompliancePackageFactory+0x10>)
}
 800feca:	4618      	mov	r0, r3
 800fecc:	46bd      	mov	sp, r7
 800fece:	bc80      	pop	{r7}
 800fed0:	4770      	bx	lr
 800fed2:	bf00      	nop
 800fed4:	200000d8 	.word	0x200000d8

0800fed8 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b086      	sub	sp, #24
 800fedc:	af02      	add	r7, sp, #8
 800fede:	60f8      	str	r0, [r7, #12]
 800fee0:	60b9      	str	r1, [r7, #8]
 800fee2:	4613      	mov	r3, r2
 800fee4:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d018      	beq.n	800ff1e <LmhpComplianceInit+0x46>
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d015      	beq.n	800ff1e <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 800fef2:	4a19      	ldr	r2, [pc, #100]	; (800ff58 <LmhpComplianceInit+0x80>)
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800fef8:	4a18      	ldr	r2, [pc, #96]	; (800ff5c <LmhpComplianceInit+0x84>)
 800fefa:	68bb      	ldr	r3, [r7, #8]
 800fefc:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800fefe:	4a17      	ldr	r2, [pc, #92]	; (800ff5c <LmhpComplianceInit+0x84>)
 800ff00:	79fb      	ldrb	r3, [r7, #7]
 800ff02:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800ff04:	4b15      	ldr	r3, [pc, #84]	; (800ff5c <LmhpComplianceInit+0x84>)
 800ff06:	2201      	movs	r2, #1
 800ff08:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	9300      	str	r3, [sp, #0]
 800ff0e:	4b14      	ldr	r3, [pc, #80]	; (800ff60 <LmhpComplianceInit+0x88>)
 800ff10:	2200      	movs	r2, #0
 800ff12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ff16:	4813      	ldr	r0, [pc, #76]	; (800ff64 <LmhpComplianceInit+0x8c>)
 800ff18:	f00f fa50 	bl	801f3bc <UTIL_TIMER_Create>
 800ff1c:	e005      	b.n	800ff2a <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800ff1e:	4b0e      	ldr	r3, [pc, #56]	; (800ff58 <LmhpComplianceInit+0x80>)
 800ff20:	2200      	movs	r2, #0
 800ff22:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800ff24:	4b0d      	ldr	r3, [pc, #52]	; (800ff5c <LmhpComplianceInit+0x84>)
 800ff26:	2200      	movs	r2, #0
 800ff28:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800ff2a:	4b0c      	ldr	r3, [pc, #48]	; (800ff5c <LmhpComplianceInit+0x84>)
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800ff30:	f7ff ffbc 	bl	800feac <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800ff34:	4b09      	ldr	r3, [pc, #36]	; (800ff5c <LmhpComplianceInit+0x84>)
 800ff36:	2200      	movs	r2, #0
 800ff38:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800ff3a:	4b08      	ldr	r3, [pc, #32]	; (800ff5c <LmhpComplianceInit+0x84>)
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800ff40:	4b06      	ldr	r3, [pc, #24]	; (800ff5c <LmhpComplianceInit+0x84>)
 800ff42:	2200      	movs	r2, #0
 800ff44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800ff48:	4b04      	ldr	r3, [pc, #16]	; (800ff5c <LmhpComplianceInit+0x84>)
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 800ff50:	bf00      	nop
 800ff52:	3710      	adds	r7, #16
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}
 800ff58:	200006b8 	.word	0x200006b8
 800ff5c:	20000680 	.word	0x20000680
 800ff60:	08010861 	.word	0x08010861
 800ff64:	200006bc 	.word	0x200006bc

0800ff68 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800ff68:	b480      	push	{r7}
 800ff6a:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800ff6c:	4b02      	ldr	r3, [pc, #8]	; (800ff78 <LmhpComplianceIsInitialized+0x10>)
 800ff6e:	781b      	ldrb	r3, [r3, #0]
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bc80      	pop	{r7}
 800ff76:	4770      	bx	lr
 800ff78:	20000680 	.word	0x20000680

0800ff7c <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800ff7c:	b480      	push	{r7}
 800ff7e:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800ff80:	4b02      	ldr	r3, [pc, #8]	; (800ff8c <LmhpComplianceIsTxPending+0x10>)
 800ff82:	785b      	ldrb	r3, [r3, #1]
}
 800ff84:	4618      	mov	r0, r3
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bc80      	pop	{r7}
 800ff8a:	4770      	bx	lr
 800ff8c:	20000680 	.word	0x20000680

0800ff90 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800ff90:	b590      	push	{r4, r7, lr}
 800ff92:	b085      	sub	sp, #20
 800ff94:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800ff96:	4b33      	ldr	r3, [pc, #204]	; (8010064 <LmhpComplianceProcess+0xd4>)
 800ff98:	785b      	ldrb	r3, [r3, #1]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d03e      	beq.n	801001c <LmhpComplianceProcess+0x8c>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800ff9e:	f00f fbcb 	bl	801f738 <UTIL_TIMER_GetCurrentTime>
 800ffa2:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800ffa4:	4b2f      	ldr	r3, [pc, #188]	; (8010064 <LmhpComplianceProcess+0xd4>)
 800ffa6:	685c      	ldr	r4, [r3, #4]
 800ffa8:	f7ff f8ba 	bl	800f120 <LmHandlerGetDutyCycleWaitTime>
 800ffac:	4603      	mov	r3, r0
 800ffae:	4423      	add	r3, r4
 800ffb0:	68fa      	ldr	r2, [r7, #12]
 800ffb2:	429a      	cmp	r2, r3
 800ffb4:	d941      	bls.n	801003a <LmhpComplianceProcess+0xaa>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800ffb6:	4b2b      	ldr	r3, [pc, #172]	; (8010064 <LmhpComplianceProcess+0xd4>)
 800ffb8:	7a9b      	ldrb	r3, [r3, #10]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d03d      	beq.n	801003a <LmhpComplianceProcess+0xaa>
            {
                /* Answer commands */
                LmHandlerAppData_t appData =
 800ffbe:	23e0      	movs	r3, #224	; 0xe0
 800ffc0:	703b      	strb	r3, [r7, #0]
                {
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800ffc2:	4b28      	ldr	r3, [pc, #160]	; (8010064 <LmhpComplianceProcess+0xd4>)
 800ffc4:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData =
 800ffc6:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800ffc8:	4b26      	ldr	r3, [pc, #152]	; (8010064 <LmhpComplianceProcess+0xd4>)
 800ffca:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData =
 800ffcc:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };

                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800ffce:	23ff      	movs	r3, #255	; 0xff
 800ffd0:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800ffd2:	4b24      	ldr	r3, [pc, #144]	; (8010064 <LmhpComplianceProcess+0xd4>)
 800ffd4:	7a19      	ldrb	r1, [r3, #8]
 800ffd6:	463b      	mov	r3, r7
 800ffd8:	2201      	movs	r2, #1
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f7ff f968 	bl	800f2b0 <LmHandlerSend>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	72fb      	strb	r3, [r7, #11]
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 800ffe4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d004      	beq.n	800fff6 <LmhpComplianceProcess+0x66>
 800ffec:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800fff0:	f113 0f07 	cmn.w	r3, #7
 800fff4:	d106      	bne.n	8010004 <LmhpComplianceProcess+0x74>
                {
                    ComplianceTestState.IsTxPending = false;
 800fff6:	4b1b      	ldr	r3, [pc, #108]	; (8010064 <LmhpComplianceProcess+0xd4>)
 800fff8:	2200      	movs	r2, #0
 800fffa:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800fffc:	4b19      	ldr	r3, [pc, #100]	; (8010064 <LmhpComplianceProcess+0xd4>)
 800fffe:	2200      	movs	r2, #0
 8010000:	729a      	strb	r2, [r3, #10]
 8010002:	e007      	b.n	8010014 <LmhpComplianceProcess+0x84>
                }
                else
                {
                    /* try to send the message again */
                    TimerSetValue( &ProcessTimer, 1500 );
 8010004:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8010008:	4817      	ldr	r0, [pc, #92]	; (8010068 <LmhpComplianceProcess+0xd8>)
 801000a:	f00f faeb 	bl	801f5e4 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 801000e:	4816      	ldr	r0, [pc, #88]	; (8010068 <LmhpComplianceProcess+0xd8>)
 8010010:	f00f fa0a 	bl	801f428 <UTIL_TIMER_Start>
                }

                ComplianceTestState.TxPendingTimestamp = now;
 8010014:	4a13      	ldr	r2, [pc, #76]	; (8010064 <LmhpComplianceProcess+0xd4>)
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	6053      	str	r3, [r2, #4]
 801001a:	e00e      	b.n	801003a <LmhpComplianceProcess+0xaa>
        }
    }
    else
    {
        /* If no Tx is pending process other commands */
        if( ComplianceTestState.IsClassReqCmdPending == true )
 801001c:	4b11      	ldr	r3, [pc, #68]	; (8010064 <LmhpComplianceProcess+0xd4>)
 801001e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010022:	2b00      	cmp	r3, #0
 8010024:	d009      	beq.n	801003a <LmhpComplianceProcess+0xaa>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 8010026:	4b0f      	ldr	r3, [pc, #60]	; (8010064 <LmhpComplianceProcess+0xd4>)
 8010028:	2200      	movs	r2, #0
 801002a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 801002e:	4b0d      	ldr	r3, [pc, #52]	; (8010064 <LmhpComplianceProcess+0xd4>)
 8010030:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8010034:	4618      	mov	r0, r3
 8010036:	f7ff fa31 	bl	800f49c <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 801003a:	4b0a      	ldr	r3, [pc, #40]	; (8010064 <LmhpComplianceProcess+0xd4>)
 801003c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010040:	2b00      	cmp	r3, #0
 8010042:	d00a      	beq.n	801005a <LmhpComplianceProcess+0xca>
    {
        ComplianceTestState.IsResetCmdPending = false;
 8010044:	4b07      	ldr	r3, [pc, #28]	; (8010064 <LmhpComplianceProcess+0xd4>)
 8010046:	2200      	movs	r2, #0
 8010048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Call platform MCU reset API */
        if( CompliancePackage.OnSystemReset != NULL )
 801004c:	4b07      	ldr	r3, [pc, #28]	; (801006c <LmhpComplianceProcess+0xdc>)
 801004e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010050:	2b00      	cmp	r3, #0
 8010052:	d002      	beq.n	801005a <LmhpComplianceProcess+0xca>
        {
            CompliancePackage.OnSystemReset( );
 8010054:	4b05      	ldr	r3, [pc, #20]	; (801006c <LmhpComplianceProcess+0xdc>)
 8010056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010058:	4798      	blx	r3
        }
    }
}
 801005a:	bf00      	nop
 801005c:	3714      	adds	r7, #20
 801005e:	46bd      	mov	sp, r7
 8010060:	bd90      	pop	{r4, r7, pc}
 8010062:	bf00      	nop
 8010064:	20000680 	.word	0x20000680
 8010068:	200006bc 	.word	0x200006bc
 801006c:	200000d8 	.word	0x200000d8

08010070 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 8010070:	b5b0      	push	{r4, r5, r7, lr}
 8010072:	b0a4      	sub	sp, #144	; 0x90
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 8010078:	2300      	movs	r3, #0
 801007a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 801007e:	4bd0      	ldr	r3, [pc, #832]	; (80103c0 <LmhpComplianceOnMcpsIndication+0x350>)
 8010080:	781b      	ldrb	r3, [r3, #0]
 8010082:	f083 0301 	eor.w	r3, r3, #1
 8010086:	b2db      	uxtb	r3, r3
 8010088:	2b00      	cmp	r3, #0
 801008a:	f040 83bf 	bne.w	801080c <LmhpComplianceOnMcpsIndication+0x79c>
        return;
    }

    /* Increment the compliance certification protocol downlink counter */
    /* Not counting downlinks on FPort 0 */
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	78db      	ldrb	r3, [r3, #3]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d103      	bne.n	801009e <LmhpComplianceOnMcpsIndication+0x2e>
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	7b9b      	ldrb	r3, [r3, #14]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d005      	beq.n	80100aa <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 801009e:	4bc8      	ldr	r3, [pc, #800]	; (80103c0 <LmhpComplianceOnMcpsIndication+0x350>)
 80100a0:	8a1b      	ldrh	r3, [r3, #16]
 80100a2:	3301      	adds	r3, #1
 80100a4:	b29a      	uxth	r2, r3
 80100a6:	4bc6      	ldr	r3, [pc, #792]	; (80103c0 <LmhpComplianceOnMcpsIndication+0x350>)
 80100a8:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	7b5b      	ldrb	r3, [r3, #13]
 80100ae:	f083 0301 	eor.w	r3, r3, #1
 80100b2:	b2db      	uxtb	r3, r3
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	f040 83ab 	bne.w	8010810 <LmhpComplianceOnMcpsIndication+0x7a0>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	78db      	ldrb	r3, [r3, #3]
 80100be:	2be0      	cmp	r3, #224	; 0xe0
 80100c0:	f040 83a8 	bne.w	8010814 <LmhpComplianceOnMcpsIndication+0x7a4>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 80100c4:	4bbe      	ldr	r3, [pc, #760]	; (80103c0 <LmhpComplianceOnMcpsIndication+0x350>)
 80100c6:	2200      	movs	r2, #0
 80100c8:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	689a      	ldr	r2, [r3, #8]
 80100ce:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80100d2:	1c59      	adds	r1, r3, #1
 80100d4:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 80100d8:	4413      	add	r3, r2
 80100da:	781b      	ldrb	r3, [r3, #0]
 80100dc:	2b7f      	cmp	r3, #127	; 0x7f
 80100de:	f200 8372 	bhi.w	80107c6 <LmhpComplianceOnMcpsIndication+0x756>
 80100e2:	a201      	add	r2, pc, #4	; (adr r2, 80100e8 <LmhpComplianceOnMcpsIndication+0x78>)
 80100e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100e8:	080102e9 	.word	0x080102e9
 80100ec:	0801032d 	.word	0x0801032d
 80100f0:	08010337 	.word	0x08010337
 80100f4:	0801034d 	.word	0x0801034d
 80100f8:	0801036f 	.word	0x0801036f
 80100fc:	0801039d 	.word	0x0801039d
 8010100:	080103c9 	.word	0x080103c9
 8010104:	08010427 	.word	0x08010427
 8010108:	0801047f 	.word	0x0801047f
 801010c:	080104eb 	.word	0x080104eb
 8010110:	0801053b 	.word	0x0801053b
 8010114:	080107c7 	.word	0x080107c7
 8010118:	080107c7 	.word	0x080107c7
 801011c:	080107c7 	.word	0x080107c7
 8010120:	080107c7 	.word	0x080107c7
 8010124:	080107c7 	.word	0x080107c7
 8010128:	080107c7 	.word	0x080107c7
 801012c:	080107c7 	.word	0x080107c7
 8010130:	080107c7 	.word	0x080107c7
 8010134:	080107c7 	.word	0x080107c7
 8010138:	080107c7 	.word	0x080107c7
 801013c:	080107c7 	.word	0x080107c7
 8010140:	080107c7 	.word	0x080107c7
 8010144:	080107c7 	.word	0x080107c7
 8010148:	080107c7 	.word	0x080107c7
 801014c:	080107c7 	.word	0x080107c7
 8010150:	080107c7 	.word	0x080107c7
 8010154:	080107c7 	.word	0x080107c7
 8010158:	080107c7 	.word	0x080107c7
 801015c:	080107c7 	.word	0x080107c7
 8010160:	080107c7 	.word	0x080107c7
 8010164:	080107c7 	.word	0x080107c7
 8010168:	08010543 	.word	0x08010543
 801016c:	08010555 	.word	0x08010555
 8010170:	0801055d 	.word	0x0801055d
 8010174:	080107c7 	.word	0x080107c7
 8010178:	080107c7 	.word	0x080107c7
 801017c:	080107c7 	.word	0x080107c7
 8010180:	080107c7 	.word	0x080107c7
 8010184:	080107c7 	.word	0x080107c7
 8010188:	080107c7 	.word	0x080107c7
 801018c:	080107c7 	.word	0x080107c7
 8010190:	080107c7 	.word	0x080107c7
 8010194:	080107c7 	.word	0x080107c7
 8010198:	080107c7 	.word	0x080107c7
 801019c:	080107c7 	.word	0x080107c7
 80101a0:	080107c7 	.word	0x080107c7
 80101a4:	080107c7 	.word	0x080107c7
 80101a8:	080107c7 	.word	0x080107c7
 80101ac:	080107c7 	.word	0x080107c7
 80101b0:	080107c7 	.word	0x080107c7
 80101b4:	080107c7 	.word	0x080107c7
 80101b8:	080107c7 	.word	0x080107c7
 80101bc:	080107c7 	.word	0x080107c7
 80101c0:	080107c7 	.word	0x080107c7
 80101c4:	080107c7 	.word	0x080107c7
 80101c8:	080107c7 	.word	0x080107c7
 80101cc:	080107c7 	.word	0x080107c7
 80101d0:	080107c7 	.word	0x080107c7
 80101d4:	080107c7 	.word	0x080107c7
 80101d8:	080107c7 	.word	0x080107c7
 80101dc:	080107c7 	.word	0x080107c7
 80101e0:	080107c7 	.word	0x080107c7
 80101e4:	080107c7 	.word	0x080107c7
 80101e8:	080107c7 	.word	0x080107c7
 80101ec:	080107c7 	.word	0x080107c7
 80101f0:	080107c7 	.word	0x080107c7
 80101f4:	080107c7 	.word	0x080107c7
 80101f8:	080107c7 	.word	0x080107c7
 80101fc:	080107c7 	.word	0x080107c7
 8010200:	080107c7 	.word	0x080107c7
 8010204:	080107c7 	.word	0x080107c7
 8010208:	080107c7 	.word	0x080107c7
 801020c:	080107c7 	.word	0x080107c7
 8010210:	080107c7 	.word	0x080107c7
 8010214:	080107c7 	.word	0x080107c7
 8010218:	080107c7 	.word	0x080107c7
 801021c:	080107c7 	.word	0x080107c7
 8010220:	080107c7 	.word	0x080107c7
 8010224:	080107c7 	.word	0x080107c7
 8010228:	080107c7 	.word	0x080107c7
 801022c:	080107c7 	.word	0x080107c7
 8010230:	080107c7 	.word	0x080107c7
 8010234:	080107c7 	.word	0x080107c7
 8010238:	080107c7 	.word	0x080107c7
 801023c:	080107c7 	.word	0x080107c7
 8010240:	080107c7 	.word	0x080107c7
 8010244:	080107c7 	.word	0x080107c7
 8010248:	080107c7 	.word	0x080107c7
 801024c:	080107c7 	.word	0x080107c7
 8010250:	080107c7 	.word	0x080107c7
 8010254:	080107c7 	.word	0x080107c7
 8010258:	080107c7 	.word	0x080107c7
 801025c:	080107c7 	.word	0x080107c7
 8010260:	080107c7 	.word	0x080107c7
 8010264:	080107c7 	.word	0x080107c7
 8010268:	080107c7 	.word	0x080107c7
 801026c:	080107c7 	.word	0x080107c7
 8010270:	080107c7 	.word	0x080107c7
 8010274:	080107c7 	.word	0x080107c7
 8010278:	080107c7 	.word	0x080107c7
 801027c:	080107c7 	.word	0x080107c7
 8010280:	080107c7 	.word	0x080107c7
 8010284:	080107c7 	.word	0x080107c7
 8010288:	080107c7 	.word	0x080107c7
 801028c:	080107c7 	.word	0x080107c7
 8010290:	080107c7 	.word	0x080107c7
 8010294:	080107c7 	.word	0x080107c7
 8010298:	080107c7 	.word	0x080107c7
 801029c:	080107c7 	.word	0x080107c7
 80102a0:	080107c7 	.word	0x080107c7
 80102a4:	080107c7 	.word	0x080107c7
 80102a8:	080107c7 	.word	0x080107c7
 80102ac:	080107c7 	.word	0x080107c7
 80102b0:	080107c7 	.word	0x080107c7
 80102b4:	080107c7 	.word	0x080107c7
 80102b8:	080107c7 	.word	0x080107c7
 80102bc:	080107c7 	.word	0x080107c7
 80102c0:	080107c7 	.word	0x080107c7
 80102c4:	080107c7 	.word	0x080107c7
 80102c8:	080107c7 	.word	0x080107c7
 80102cc:	080107c7 	.word	0x080107c7
 80102d0:	080107c7 	.word	0x080107c7
 80102d4:	080107c7 	.word	0x080107c7
 80102d8:	080107c7 	.word	0x080107c7
 80102dc:	0801058f 	.word	0x0801058f
 80102e0:	0801063f 	.word	0x0801063f
 80102e4:	08010671 	.word	0x08010671
    {
        case COMPLIANCE_PKG_VERSION_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 80102e8:	4b35      	ldr	r3, [pc, #212]	; (80103c0 <LmhpComplianceOnMcpsIndication+0x350>)
 80102ea:	68da      	ldr	r2, [r3, #12]
 80102ec:	4b34      	ldr	r3, [pc, #208]	; (80103c0 <LmhpComplianceOnMcpsIndication+0x350>)
 80102ee:	7a9b      	ldrb	r3, [r3, #10]
 80102f0:	1c59      	adds	r1, r3, #1
 80102f2:	b2c8      	uxtb	r0, r1
 80102f4:	4932      	ldr	r1, [pc, #200]	; (80103c0 <LmhpComplianceOnMcpsIndication+0x350>)
 80102f6:	7288      	strb	r0, [r1, #10]
 80102f8:	4413      	add	r3, r2
 80102fa:	2200      	movs	r2, #0
 80102fc:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 80102fe:	4b30      	ldr	r3, [pc, #192]	; (80103c0 <LmhpComplianceOnMcpsIndication+0x350>)
 8010300:	68da      	ldr	r2, [r3, #12]
 8010302:	4b2f      	ldr	r3, [pc, #188]	; (80103c0 <LmhpComplianceOnMcpsIndication+0x350>)
 8010304:	7a9b      	ldrb	r3, [r3, #10]
 8010306:	1c59      	adds	r1, r3, #1
 8010308:	b2c8      	uxtb	r0, r1
 801030a:	492d      	ldr	r1, [pc, #180]	; (80103c0 <LmhpComplianceOnMcpsIndication+0x350>)
 801030c:	7288      	strb	r0, [r1, #10]
 801030e:	4413      	add	r3, r2
 8010310:	2206      	movs	r2, #6
 8010312:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 8010314:	4b2a      	ldr	r3, [pc, #168]	; (80103c0 <LmhpComplianceOnMcpsIndication+0x350>)
 8010316:	68da      	ldr	r2, [r3, #12]
 8010318:	4b29      	ldr	r3, [pc, #164]	; (80103c0 <LmhpComplianceOnMcpsIndication+0x350>)
 801031a:	7a9b      	ldrb	r3, [r3, #10]
 801031c:	1c59      	adds	r1, r3, #1
 801031e:	b2c8      	uxtb	r0, r1
 8010320:	4927      	ldr	r1, [pc, #156]	; (80103c0 <LmhpComplianceOnMcpsIndication+0x350>)
 8010322:	7288      	strb	r0, [r1, #10]
 8010324:	4413      	add	r3, r2
 8010326:	2201      	movs	r2, #1
 8010328:	701a      	strb	r2, [r3, #0]
                break;
 801032a:	e257      	b.n	80107dc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_RESET_REQ:
            {
                ComplianceTestState.IsResetCmdPending = true;
 801032c:	4b24      	ldr	r3, [pc, #144]	; (80103c0 <LmhpComplianceOnMcpsIndication+0x350>)
 801032e:	2201      	movs	r2, #1
 8010330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 8010334:	e252      	b.n	80107dc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_JOIN_REQ:
            {
                if( CompliancePackage.OnJoinRequest != NULL )
 8010336:	4b23      	ldr	r3, [pc, #140]	; (80103c4 <LmhpComplianceOnMcpsIndication+0x354>)
 8010338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801033a:	2b00      	cmp	r3, #0
 801033c:	f000 8245 	beq.w	80107ca <LmhpComplianceOnMcpsIndication+0x75a>
                {
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 8010340:	4b20      	ldr	r3, [pc, #128]	; (80103c4 <LmhpComplianceOnMcpsIndication+0x354>)
 8010342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010344:	2101      	movs	r1, #1
 8010346:	2002      	movs	r0, #2
 8010348:	4798      	blx	r3
                }
                break;
 801034a:	e23e      	b.n	80107ca <LmhpComplianceOnMcpsIndication+0x75a>
            }
        case COMPLIANCE_SWITCH_CLASS_REQ:
            {
                /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	689a      	ldr	r2, [r3, #8]
 8010350:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010354:	1c59      	adds	r1, r3, #1
 8010356:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 801035a:	4413      	add	r3, r2
 801035c:	781a      	ldrb	r2, [r3, #0]
 801035e:	4b18      	ldr	r3, [pc, #96]	; (80103c0 <LmhpComplianceOnMcpsIndication+0x350>)
 8010360:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 8010364:	4b16      	ldr	r3, [pc, #88]	; (80103c0 <LmhpComplianceOnMcpsIndication+0x350>)
 8010366:	2201      	movs	r2, #1
 8010368:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                break;
 801036c:	e236      	b.n	80107dc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_ADR_BIT_CHANGE_REQ:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type            = MIB_ADR;
 801036e:	2304      	movs	r3, #4
 8010370:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	689a      	ldr	r2, [r3, #8]
 8010376:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801037a:	1c59      	adds	r1, r3, #1
 801037c:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8010380:	4413      	add	r3, r2
 8010382:	781b      	ldrb	r3, [r3, #0]
 8010384:	2b00      	cmp	r3, #0
 8010386:	bf14      	ite	ne
 8010388:	2301      	movne	r3, #1
 801038a:	2300      	moveq	r3, #0
 801038c:	b2db      	uxtb	r3, r3
 801038e:	733b      	strb	r3, [r7, #12]

                LoRaMacMibSetRequestConfirm( &mibReq );
 8010390:	f107 0308 	add.w	r3, r7, #8
 8010394:	4618      	mov	r0, r3
 8010396:	f004 fafd 	bl	8014994 <LoRaMacMibSetRequestConfirm>
                break;
 801039a:	e21f      	b.n	80107dc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
            {
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	689a      	ldr	r2, [r3, #8]
 80103a0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80103a4:	1c59      	adds	r1, r3, #1
 80103a6:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 80103aa:	4413      	add	r3, r2
 80103ac:	781b      	ldrb	r3, [r3, #0]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	bf14      	ite	ne
 80103b2:	2301      	movne	r3, #1
 80103b4:	2300      	moveq	r3, #0
 80103b6:	b2db      	uxtb	r3, r3
 80103b8:	4618      	mov	r0, r3
 80103ba:	f005 f965 	bl	8015688 <LoRaMacTestSetDutyCycleOn>
                break;
 80103be:	e20d      	b.n	80107dc <LmhpComplianceOnMcpsIndication+0x76c>
 80103c0:	20000680 	.word	0x20000680
 80103c4:	200000d8 	.word	0x200000d8
            }
        case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
            {
                /* Periodicity in milli-seconds */
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 80103c8:	4ba5      	ldr	r3, [pc, #660]	; (8010660 <LmhpComplianceOnMcpsIndication+0x5f0>)
 80103ca:	f107 0408 	add.w	r4, r7, #8
 80103ce:	461d      	mov	r5, r3
 80103d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80103d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80103d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80103d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80103d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80103dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	689a      	ldr	r2, [r3, #8]
 80103e4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80103e8:	1c59      	adds	r1, r3, #1
 80103ea:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 80103ee:	4413      	add	r3, r2
 80103f0:	781b      	ldrb	r3, [r3, #0]
 80103f2:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 80103f6:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80103fa:	2b0a      	cmp	r3, #10
 80103fc:	f200 81e7 	bhi.w	80107ce <LmhpComplianceOnMcpsIndication+0x75e>
                {
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 8010400:	4b98      	ldr	r3, [pc, #608]	; (8010664 <LmhpComplianceOnMcpsIndication+0x5f4>)
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	685b      	ldr	r3, [r3, #4]
 8010406:	2b00      	cmp	r3, #0
 8010408:	f000 81e1 	beq.w	80107ce <LmhpComplianceOnMcpsIndication+0x75e>
                    {
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 801040c:	4b95      	ldr	r3, [pc, #596]	; (8010664 <LmhpComplianceOnMcpsIndication+0x5f4>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	685a      	ldr	r2, [r3, #4]
 8010412:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8010416:	009b      	lsls	r3, r3, #2
 8010418:	3390      	adds	r3, #144	; 0x90
 801041a:	443b      	add	r3, r7
 801041c:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8010420:	4618      	mov	r0, r3
 8010422:	4790      	blx	r2
                    }
                }
                break;
 8010424:	e1d3      	b.n	80107ce <LmhpComplianceOnMcpsIndication+0x75e>
            }
        case COMPLIANCE_TX_FRAMES_CTRL_REQ:
            {
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	689a      	ldr	r2, [r3, #8]
 801042a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801042e:	1c59      	adds	r1, r3, #1
 8010430:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8010434:	4413      	add	r3, r2
 8010436:	781b      	ldrb	r3, [r3, #0]
 8010438:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

                if( ( frameType == 1 ) || ( frameType == 2 ) )
 801043c:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8010440:	2b01      	cmp	r3, #1
 8010442:	d004      	beq.n	801044e <LmhpComplianceOnMcpsIndication+0x3de>
 8010444:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8010448:	2b02      	cmp	r3, #2
 801044a:	f040 81c2 	bne.w	80107d2 <LmhpComplianceOnMcpsIndication+0x762>
                {
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 801044e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8010452:	2b01      	cmp	r3, #1
 8010454:	bf14      	ite	ne
 8010456:	2301      	movne	r3, #1
 8010458:	2300      	moveq	r3, #0
 801045a:	b2db      	uxtb	r3, r3
 801045c:	461a      	mov	r2, r3
 801045e:	4b82      	ldr	r3, [pc, #520]	; (8010668 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010460:	721a      	strb	r2, [r3, #8]

                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 8010462:	4b80      	ldr	r3, [pc, #512]	; (8010664 <LmhpComplianceOnMcpsIndication+0x5f4>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	689b      	ldr	r3, [r3, #8]
 8010468:	2b00      	cmp	r3, #0
 801046a:	f000 81b2 	beq.w	80107d2 <LmhpComplianceOnMcpsIndication+0x762>
                    {
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 801046e:	4b7d      	ldr	r3, [pc, #500]	; (8010664 <LmhpComplianceOnMcpsIndication+0x5f4>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	689b      	ldr	r3, [r3, #8]
 8010474:	4a7c      	ldr	r2, [pc, #496]	; (8010668 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010476:	7a12      	ldrb	r2, [r2, #8]
 8010478:	4610      	mov	r0, r2
 801047a:	4798      	blx	r3
                    }
                }
                break;
 801047c:	e1a9      	b.n	80107d2 <LmhpComplianceOnMcpsIndication+0x762>
            }
        case COMPLIANCE_ECHO_PAYLOAD_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 801047e:	4b7a      	ldr	r3, [pc, #488]	; (8010668 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010480:	68da      	ldr	r2, [r3, #12]
 8010482:	4b79      	ldr	r3, [pc, #484]	; (8010668 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010484:	7a9b      	ldrb	r3, [r3, #10]
 8010486:	1c59      	adds	r1, r3, #1
 8010488:	b2c8      	uxtb	r0, r1
 801048a:	4977      	ldr	r1, [pc, #476]	; (8010668 <LmhpComplianceOnMcpsIndication+0x5f8>)
 801048c:	7288      	strb	r0, [r1, #10]
 801048e:	4413      	add	r3, r2
 8010490:	2208      	movs	r2, #8
 8010492:	701a      	strb	r2, [r3, #0]

                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8010494:	2301      	movs	r3, #1
 8010496:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 801049a:	e019      	b.n	80104d0 <LmhpComplianceOnMcpsIndication+0x460>
                     i++ )
                {
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	689a      	ldr	r2, [r3, #8]
 80104a0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80104a4:	1c59      	adds	r1, r3, #1
 80104a6:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 80104aa:	4413      	add	r3, r2
 80104ac:	781a      	ldrb	r2, [r3, #0]
 80104ae:	4b6e      	ldr	r3, [pc, #440]	; (8010668 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80104b0:	68d9      	ldr	r1, [r3, #12]
 80104b2:	4b6d      	ldr	r3, [pc, #436]	; (8010668 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80104b4:	7a9b      	ldrb	r3, [r3, #10]
 80104b6:	1c58      	adds	r0, r3, #1
 80104b8:	b2c4      	uxtb	r4, r0
 80104ba:	486b      	ldr	r0, [pc, #428]	; (8010668 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80104bc:	7284      	strb	r4, [r0, #10]
 80104be:	440b      	add	r3, r1
 80104c0:	3201      	adds	r2, #1
 80104c2:	b2d2      	uxtb	r2, r2
 80104c4:	701a      	strb	r2, [r3, #0]
                     i++ )
 80104c6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80104ca:	3301      	adds	r3, #1
 80104cc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 80104d0:	4b65      	ldr	r3, [pc, #404]	; (8010668 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80104d2:	7a5a      	ldrb	r2, [r3, #9]
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	7b1b      	ldrb	r3, [r3, #12]
 80104d8:	4293      	cmp	r3, r2
 80104da:	bf28      	it	cs
 80104dc:	4613      	movcs	r3, r2
 80104de:	b2db      	uxtb	r3, r3
 80104e0:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d3d9      	bcc.n	801049c <LmhpComplianceOnMcpsIndication+0x42c>
                }
                break;
 80104e8:	e178      	b.n	80107dc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 80104ea:	4b5f      	ldr	r3, [pc, #380]	; (8010668 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80104ec:	68da      	ldr	r2, [r3, #12]
 80104ee:	4b5e      	ldr	r3, [pc, #376]	; (8010668 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80104f0:	7a9b      	ldrb	r3, [r3, #10]
 80104f2:	1c59      	adds	r1, r3, #1
 80104f4:	b2c8      	uxtb	r0, r1
 80104f6:	495c      	ldr	r1, [pc, #368]	; (8010668 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80104f8:	7288      	strb	r0, [r1, #10]
 80104fa:	4413      	add	r3, r2
 80104fc:	2209      	movs	r2, #9
 80104fe:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 8010500:	4b59      	ldr	r3, [pc, #356]	; (8010668 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010502:	8a18      	ldrh	r0, [r3, #16]
 8010504:	4b58      	ldr	r3, [pc, #352]	; (8010668 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010506:	68da      	ldr	r2, [r3, #12]
 8010508:	4b57      	ldr	r3, [pc, #348]	; (8010668 <LmhpComplianceOnMcpsIndication+0x5f8>)
 801050a:	7a9b      	ldrb	r3, [r3, #10]
 801050c:	1c59      	adds	r1, r3, #1
 801050e:	b2cc      	uxtb	r4, r1
 8010510:	4955      	ldr	r1, [pc, #340]	; (8010668 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010512:	728c      	strb	r4, [r1, #10]
 8010514:	4413      	add	r3, r2
 8010516:	b2c2      	uxtb	r2, r0
 8010518:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 801051a:	4b53      	ldr	r3, [pc, #332]	; (8010668 <LmhpComplianceOnMcpsIndication+0x5f8>)
 801051c:	8a1b      	ldrh	r3, [r3, #16]
 801051e:	0a1b      	lsrs	r3, r3, #8
 8010520:	b298      	uxth	r0, r3
 8010522:	4b51      	ldr	r3, [pc, #324]	; (8010668 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010524:	68da      	ldr	r2, [r3, #12]
 8010526:	4b50      	ldr	r3, [pc, #320]	; (8010668 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010528:	7a9b      	ldrb	r3, [r3, #10]
 801052a:	1c59      	adds	r1, r3, #1
 801052c:	b2cc      	uxtb	r4, r1
 801052e:	494e      	ldr	r1, [pc, #312]	; (8010668 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010530:	728c      	strb	r4, [r1, #10]
 8010532:	4413      	add	r3, r2
 8010534:	b2c2      	uxtb	r2, r0
 8010536:	701a      	strb	r2, [r3, #0]
                break;
 8010538:	e150      	b.n	80107dc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_RESET_REQ:
            {
                ComplianceTestState.RxAppCnt = 0;
 801053a:	4b4b      	ldr	r3, [pc, #300]	; (8010668 <LmhpComplianceOnMcpsIndication+0x5f8>)
 801053c:	2200      	movs	r2, #0
 801053e:	821a      	strh	r2, [r3, #16]
                break;
 8010540:	e14c      	b.n	80107dc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_LINK_CHECK_REQ:
            {
                MlmeReq_t mlmeReq;
                mlmeReq.Type = MLME_LINK_CHECK;
 8010542:	2305      	movs	r3, #5
 8010544:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

                LoRaMacMlmeRequest( &mlmeReq );
 8010548:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801054c:	4618      	mov	r0, r3
 801054e:	f004 fdcb 	bl	80150e8 <LoRaMacMlmeRequest>
                break;
 8010552:	e143      	b.n	80107dc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DEVICE_TIME_REQ:
            {
                CompliancePackage.OnDeviceTimeRequest( );
 8010554:	4b45      	ldr	r3, [pc, #276]	; (801066c <LmhpComplianceOnMcpsIndication+0x5fc>)
 8010556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010558:	4798      	blx	r3
                break;
 801055a:	e13f      	b.n	80107dc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_PING_SLOT_INFO_REQ:
            {
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	689a      	ldr	r2, [r3, #8]
 8010560:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010564:	1c59      	adds	r1, r3, #1
 8010566:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 801056a:	4413      	add	r3, r2
 801056c:	781a      	ldrb	r2, [r3, #0]
 801056e:	4b3e      	ldr	r3, [pc, #248]	; (8010668 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010570:	755a      	strb	r2, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 8010572:	4b3c      	ldr	r3, [pc, #240]	; (8010664 <LmhpComplianceOnMcpsIndication+0x5f4>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	68db      	ldr	r3, [r3, #12]
 8010578:	2b00      	cmp	r3, #0
 801057a:	f000 812c 	beq.w	80107d6 <LmhpComplianceOnMcpsIndication+0x766>
                {
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 801057e:	4b39      	ldr	r3, [pc, #228]	; (8010664 <LmhpComplianceOnMcpsIndication+0x5f4>)
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	68db      	ldr	r3, [r3, #12]
 8010584:	4a38      	ldr	r2, [pc, #224]	; (8010668 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010586:	7d52      	ldrb	r2, [r2, #21]
 8010588:	4610      	mov	r0, r2
 801058a:	4798      	blx	r3
                }
                break;
 801058c:	e123      	b.n	80107d6 <LmhpComplianceOnMcpsIndication+0x766>
            }
#endif /* CLASS_B not available */
        case COMPLIANCE_TX_CW_REQ:
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 7 )
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	7b1b      	ldrb	r3, [r3, #12]
 8010592:	2b07      	cmp	r3, #7
 8010594:	f040 8121 	bne.w	80107da <LmhpComplianceOnMcpsIndication+0x76a>
                {
                    mlmeReq.Type = MLME_TXCW;
 8010598:	2306      	movs	r3, #6
 801059a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                    mlmeReq.Req.TxCw.Timeout =
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	689a      	ldr	r2, [r3, #8]
 80105a2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80105a6:	4413      	add	r3, r2
 80105a8:	781b      	ldrb	r3, [r3, #0]
 80105aa:	b21a      	sxth	r2, r3
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6899      	ldr	r1, [r3, #8]
 80105b0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80105b4:	3301      	adds	r3, #1
 80105b6:	440b      	add	r3, r1
 80105b8:	781b      	ldrb	r3, [r3, #0]
 80105ba:	021b      	lsls	r3, r3, #8
 80105bc:	b21b      	sxth	r3, r3
 80105be:	4313      	orrs	r3, r2
 80105c0:	b21b      	sxth	r3, r3
 80105c2:	b29b      	uxth	r3, r3
                    mlmeReq.Req.TxCw.Timeout =
 80105c4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                    cmdIndex += 2;
 80105c8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80105cc:	3302      	adds	r3, #2
 80105ce:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Frequency =
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	689a      	ldr	r2, [r3, #8]
 80105d6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80105da:	4413      	add	r3, r2
 80105dc:	781b      	ldrb	r3, [r3, #0]
 80105de:	4619      	mov	r1, r3
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	689a      	ldr	r2, [r3, #8]
 80105e4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80105e8:	3301      	adds	r3, #1
 80105ea:	4413      	add	r3, r2
 80105ec:	781b      	ldrb	r3, [r3, #0]
 80105ee:	021b      	lsls	r3, r3, #8
 80105f0:	ea41 0203 	orr.w	r2, r1, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	6899      	ldr	r1, [r3, #8]
 80105f8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80105fc:	3302      	adds	r3, #2
 80105fe:	440b      	add	r3, r1
 8010600:	781b      	ldrb	r3, [r3, #0]
 8010602:	041b      	lsls	r3, r3, #16
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8010604:	4313      	orrs	r3, r2
 8010606:	461a      	mov	r2, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8010608:	2364      	movs	r3, #100	; 0x64
 801060a:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 801060e:	647b      	str	r3, [r7, #68]	; 0x44
                        100;
                    cmdIndex += 3;
 8010610:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010614:	3303      	adds	r3, #3
 8010616:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	689a      	ldr	r2, [r3, #8]
 801061e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010622:	1c59      	adds	r1, r3, #1
 8010624:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8010628:	4413      	add	r3, r2
 801062a:	781b      	ldrb	r3, [r3, #0]
 801062c:	b25b      	sxtb	r3, r3
 801062e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 8010632:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010636:	4618      	mov	r0, r3
 8010638:	f004 fd56 	bl	80150e8 <LoRaMacMlmeRequest>
                }
                break;
 801063c:	e0cd      	b.n	80107da <LmhpComplianceOnMcpsIndication+0x76a>
            }
        case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
            {
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 801063e:	233b      	movs	r3, #59	; 0x3b
 8010640:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                mibReq.Param.IsCertPortOn = false;
 8010644:	2300      	movs	r3, #0
 8010646:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacMibSetRequestConfirm( &mibReq );
 801064a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801064e:	4618      	mov	r0, r3
 8010650:	f004 f9a0 	bl	8014994 <LoRaMacMibSetRequestConfirm>

                ComplianceTestState.IsResetCmdPending = true;
 8010654:	4b04      	ldr	r3, [pc, #16]	; (8010668 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010656:	2201      	movs	r2, #1
 8010658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 801065c:	e0be      	b.n	80107dc <LmhpComplianceOnMcpsIndication+0x76c>
 801065e:	bf00      	nop
 8010660:	080206b4 	.word	0x080206b4
 8010664:	200006b8 	.word	0x200006b8
 8010668:	20000680 	.word	0x20000680
 801066c:	200000d8 	.word	0x200000d8
            {
                Version_t           lrwanVersion;
                Version_t           lrwanRpVersion;
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_LORAWAN_VERSION;
 8010670:	232a      	movs	r3, #42	; 0x2a
 8010672:	723b      	strb	r3, [r7, #8]

                LoRaMacMibGetRequestConfirm( &mibReq );
 8010674:	f107 0308 	add.w	r3, r7, #8
 8010678:	4618      	mov	r0, r3
 801067a:	f003 ffb3 	bl	80145e4 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	63bb      	str	r3, [r7, #56]	; 0x38
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 8010682:	693b      	ldr	r3, [r7, #16]
 8010684:	637b      	str	r3, [r7, #52]	; 0x34

                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 8010686:	4b65      	ldr	r3, [pc, #404]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010688:	68da      	ldr	r2, [r3, #12]
 801068a:	4b64      	ldr	r3, [pc, #400]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 801068c:	7a9b      	ldrb	r3, [r3, #10]
 801068e:	1c59      	adds	r1, r3, #1
 8010690:	b2c8      	uxtb	r0, r1
 8010692:	4962      	ldr	r1, [pc, #392]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010694:	7288      	strb	r0, [r1, #10]
 8010696:	4413      	add	r3, r2
 8010698:	227f      	movs	r2, #127	; 0x7f
 801069a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 801069c:	4b60      	ldr	r3, [pc, #384]	; (8010820 <LmhpComplianceOnMcpsIndication+0x7b0>)
 801069e:	681a      	ldr	r2, [r3, #0]
 80106a0:	4b5e      	ldr	r3, [pc, #376]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 80106a2:	68d9      	ldr	r1, [r3, #12]
 80106a4:	4b5d      	ldr	r3, [pc, #372]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 80106a6:	7a9b      	ldrb	r3, [r3, #10]
 80106a8:	1c58      	adds	r0, r3, #1
 80106aa:	b2c4      	uxtb	r4, r0
 80106ac:	485b      	ldr	r0, [pc, #364]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 80106ae:	7284      	strb	r4, [r0, #10]
 80106b0:	440b      	add	r3, r1
 80106b2:	78d2      	ldrb	r2, [r2, #3]
 80106b4:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 80106b6:	4b5a      	ldr	r3, [pc, #360]	; (8010820 <LmhpComplianceOnMcpsIndication+0x7b0>)
 80106b8:	681a      	ldr	r2, [r3, #0]
 80106ba:	4b58      	ldr	r3, [pc, #352]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 80106bc:	68d9      	ldr	r1, [r3, #12]
 80106be:	4b57      	ldr	r3, [pc, #348]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 80106c0:	7a9b      	ldrb	r3, [r3, #10]
 80106c2:	1c58      	adds	r0, r3, #1
 80106c4:	b2c4      	uxtb	r4, r0
 80106c6:	4855      	ldr	r0, [pc, #340]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 80106c8:	7284      	strb	r4, [r0, #10]
 80106ca:	440b      	add	r3, r1
 80106cc:	7892      	ldrb	r2, [r2, #2]
 80106ce:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 80106d0:	4b53      	ldr	r3, [pc, #332]	; (8010820 <LmhpComplianceOnMcpsIndication+0x7b0>)
 80106d2:	681a      	ldr	r2, [r3, #0]
 80106d4:	4b51      	ldr	r3, [pc, #324]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 80106d6:	68d9      	ldr	r1, [r3, #12]
 80106d8:	4b50      	ldr	r3, [pc, #320]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 80106da:	7a9b      	ldrb	r3, [r3, #10]
 80106dc:	1c58      	adds	r0, r3, #1
 80106de:	b2c4      	uxtb	r4, r0
 80106e0:	484e      	ldr	r0, [pc, #312]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 80106e2:	7284      	strb	r4, [r0, #10]
 80106e4:	440b      	add	r3, r1
 80106e6:	7852      	ldrb	r2, [r2, #1]
 80106e8:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 80106ea:	4b4d      	ldr	r3, [pc, #308]	; (8010820 <LmhpComplianceOnMcpsIndication+0x7b0>)
 80106ec:	681a      	ldr	r2, [r3, #0]
 80106ee:	4b4b      	ldr	r3, [pc, #300]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 80106f0:	68d9      	ldr	r1, [r3, #12]
 80106f2:	4b4a      	ldr	r3, [pc, #296]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 80106f4:	7a9b      	ldrb	r3, [r3, #10]
 80106f6:	1c58      	adds	r0, r3, #1
 80106f8:	b2c4      	uxtb	r4, r0
 80106fa:	4848      	ldr	r0, [pc, #288]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 80106fc:	7284      	strb	r4, [r0, #10]
 80106fe:	440b      	add	r3, r1
 8010700:	7812      	ldrb	r2, [r2, #0]
 8010702:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 8010704:	4b45      	ldr	r3, [pc, #276]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010706:	68da      	ldr	r2, [r3, #12]
 8010708:	4b44      	ldr	r3, [pc, #272]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 801070a:	7a9b      	ldrb	r3, [r3, #10]
 801070c:	1c59      	adds	r1, r3, #1
 801070e:	b2c8      	uxtb	r0, r1
 8010710:	4942      	ldr	r1, [pc, #264]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010712:	7288      	strb	r0, [r1, #10]
 8010714:	4413      	add	r3, r2
 8010716:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 801071a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 801071c:	4b3f      	ldr	r3, [pc, #252]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 801071e:	68da      	ldr	r2, [r3, #12]
 8010720:	4b3e      	ldr	r3, [pc, #248]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010722:	7a9b      	ldrb	r3, [r3, #10]
 8010724:	1c59      	adds	r1, r3, #1
 8010726:	b2c8      	uxtb	r0, r1
 8010728:	493c      	ldr	r1, [pc, #240]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 801072a:	7288      	strb	r0, [r1, #10]
 801072c:	4413      	add	r3, r2
 801072e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8010732:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 8010734:	4b39      	ldr	r3, [pc, #228]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010736:	68da      	ldr	r2, [r3, #12]
 8010738:	4b38      	ldr	r3, [pc, #224]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 801073a:	7a9b      	ldrb	r3, [r3, #10]
 801073c:	1c59      	adds	r1, r3, #1
 801073e:	b2c8      	uxtb	r0, r1
 8010740:	4936      	ldr	r1, [pc, #216]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010742:	7288      	strb	r0, [r1, #10]
 8010744:	4413      	add	r3, r2
 8010746:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 801074a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 801074c:	4b33      	ldr	r3, [pc, #204]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 801074e:	68da      	ldr	r2, [r3, #12]
 8010750:	4b32      	ldr	r3, [pc, #200]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010752:	7a9b      	ldrb	r3, [r3, #10]
 8010754:	1c59      	adds	r1, r3, #1
 8010756:	b2c8      	uxtb	r0, r1
 8010758:	4930      	ldr	r1, [pc, #192]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 801075a:	7288      	strb	r0, [r1, #10]
 801075c:	4413      	add	r3, r2
 801075e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010762:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 8010764:	4b2d      	ldr	r3, [pc, #180]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010766:	68da      	ldr	r2, [r3, #12]
 8010768:	4b2c      	ldr	r3, [pc, #176]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 801076a:	7a9b      	ldrb	r3, [r3, #10]
 801076c:	1c59      	adds	r1, r3, #1
 801076e:	b2c8      	uxtb	r0, r1
 8010770:	492a      	ldr	r1, [pc, #168]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010772:	7288      	strb	r0, [r1, #10]
 8010774:	4413      	add	r3, r2
 8010776:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801077a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 801077c:	4b27      	ldr	r3, [pc, #156]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 801077e:	68da      	ldr	r2, [r3, #12]
 8010780:	4b26      	ldr	r3, [pc, #152]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010782:	7a9b      	ldrb	r3, [r3, #10]
 8010784:	1c59      	adds	r1, r3, #1
 8010786:	b2c8      	uxtb	r0, r1
 8010788:	4924      	ldr	r1, [pc, #144]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 801078a:	7288      	strb	r0, [r1, #10]
 801078c:	4413      	add	r3, r2
 801078e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010792:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 8010794:	4b21      	ldr	r3, [pc, #132]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010796:	68da      	ldr	r2, [r3, #12]
 8010798:	4b20      	ldr	r3, [pc, #128]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 801079a:	7a9b      	ldrb	r3, [r3, #10]
 801079c:	1c59      	adds	r1, r3, #1
 801079e:	b2c8      	uxtb	r0, r1
 80107a0:	491e      	ldr	r1, [pc, #120]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 80107a2:	7288      	strb	r0, [r1, #10]
 80107a4:	4413      	add	r3, r2
 80107a6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80107aa:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 80107ac:	4b1b      	ldr	r3, [pc, #108]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 80107ae:	68da      	ldr	r2, [r3, #12]
 80107b0:	4b1a      	ldr	r3, [pc, #104]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 80107b2:	7a9b      	ldrb	r3, [r3, #10]
 80107b4:	1c59      	adds	r1, r3, #1
 80107b6:	b2c8      	uxtb	r0, r1
 80107b8:	4918      	ldr	r1, [pc, #96]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 80107ba:	7288      	strb	r0, [r1, #10]
 80107bc:	4413      	add	r3, r2
 80107be:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80107c2:	701a      	strb	r2, [r3, #0]
                break;
 80107c4:	e00a      	b.n	80107dc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        default:
            {
                break;
 80107c6:	bf00      	nop
 80107c8:	e008      	b.n	80107dc <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 80107ca:	bf00      	nop
 80107cc:	e006      	b.n	80107dc <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 80107ce:	bf00      	nop
 80107d0:	e004      	b.n	80107dc <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 80107d2:	bf00      	nop
 80107d4:	e002      	b.n	80107dc <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 80107d6:	bf00      	nop
 80107d8:	e000      	b.n	80107dc <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 80107da:	bf00      	nop
            }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 80107dc:	4b0f      	ldr	r3, [pc, #60]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 80107de:	7a9b      	ldrb	r3, [r3, #10]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d00c      	beq.n	80107fe <LmhpComplianceOnMcpsIndication+0x78e>
    {
        if( ProcessTimer.IsRunning == 0U)
 80107e4:	4b0f      	ldr	r3, [pc, #60]	; (8010824 <LmhpComplianceOnMcpsIndication+0x7b4>)
 80107e6:	7a5b      	ldrb	r3, [r3, #9]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d114      	bne.n	8010816 <LmhpComplianceOnMcpsIndication+0x7a6>
        {
            TimerSetValue( &ProcessTimer, 1000 );
 80107ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80107f0:	480c      	ldr	r0, [pc, #48]	; (8010824 <LmhpComplianceOnMcpsIndication+0x7b4>)
 80107f2:	f00e fef7 	bl	801f5e4 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 80107f6:	480b      	ldr	r0, [pc, #44]	; (8010824 <LmhpComplianceOnMcpsIndication+0x7b4>)
 80107f8:	f00e fe16 	bl	801f428 <UTIL_TIMER_Start>
 80107fc:	e00b      	b.n	8010816 <LmhpComplianceOnMcpsIndication+0x7a6>
        }
    }
    else
    {
        /* Abort any pending Tx as a new command has been processed */
        TimerStop( &ProcessTimer );
 80107fe:	4809      	ldr	r0, [pc, #36]	; (8010824 <LmhpComplianceOnMcpsIndication+0x7b4>)
 8010800:	f00e fe80 	bl	801f504 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 8010804:	4b05      	ldr	r3, [pc, #20]	; (801081c <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010806:	2200      	movs	r2, #0
 8010808:	705a      	strb	r2, [r3, #1]
 801080a:	e004      	b.n	8010816 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 801080c:	bf00      	nop
 801080e:	e002      	b.n	8010816 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 8010810:	bf00      	nop
 8010812:	e000      	b.n	8010816 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 8010814:	bf00      	nop
    }
}
 8010816:	3790      	adds	r7, #144	; 0x90
 8010818:	46bd      	mov	sp, r7
 801081a:	bdb0      	pop	{r4, r5, r7, pc}
 801081c:	20000680 	.word	0x20000680
 8010820:	200006b8 	.word	0x200006b8
 8010824:	200006bc 	.word	0x200006bc

08010828 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8010828:	b480      	push	{r7}
 801082a:	b083      	sub	sp, #12
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
                }
                break;
            }
#endif /* CLASS_B not available */
        default:
            break;
 8010830:	bf00      	nop
    }
}
 8010832:	bf00      	nop
 8010834:	370c      	adds	r7, #12
 8010836:	46bd      	mov	sp, r7
 8010838:	bc80      	pop	{r7}
 801083a:	4770      	bx	lr

0801083c <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t *mlmeIndication )
{
 801083c:	b480      	push	{r7}
 801083e:	b083      	sub	sp, #12
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8010844:	4b05      	ldr	r3, [pc, #20]	; (801085c <LmhpComplianceOnMlmeIndication+0x20>)
 8010846:	781b      	ldrb	r3, [r3, #0]
 8010848:	f083 0301 	eor.w	r3, r3, #1
 801084c:	b2db      	uxtb	r3, r3
 801084e:	2b00      	cmp	r3, #0
    {
        return;
 8010850:	bf00      	nop
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 8010852:	370c      	adds	r7, #12
 8010854:	46bd      	mov	sp, r7
 8010856:	bc80      	pop	{r7}
 8010858:	4770      	bx	lr
 801085a:	bf00      	nop
 801085c:	20000680 	.word	0x20000680

08010860 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b082      	sub	sp, #8
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.DataBufferSize != 0 )
 8010868:	4b08      	ldr	r3, [pc, #32]	; (801088c <OnProcessTimer+0x2c>)
 801086a:	7a9b      	ldrb	r3, [r3, #10]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d002      	beq.n	8010876 <OnProcessTimer+0x16>
    {
        ComplianceTestState.IsTxPending = true;
 8010870:	4b06      	ldr	r3, [pc, #24]	; (801088c <OnProcessTimer+0x2c>)
 8010872:	2201      	movs	r2, #1
 8010874:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 8010876:	4b06      	ldr	r3, [pc, #24]	; (8010890 <OnProcessTimer+0x30>)
 8010878:	695b      	ldr	r3, [r3, #20]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d002      	beq.n	8010884 <OnProcessTimer+0x24>
    {
        CompliancePackage.OnPackageProcessEvent();
 801087e:	4b04      	ldr	r3, [pc, #16]	; (8010890 <OnProcessTimer+0x30>)
 8010880:	695b      	ldr	r3, [r3, #20]
 8010882:	4798      	blx	r3
    }
}
 8010884:	bf00      	nop
 8010886:	3708      	adds	r7, #8
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}
 801088c:	20000680 	.word	0x20000680
 8010890:	200000d8 	.word	0x200000d8

08010894 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 8010894:	b480      	push	{r7}
 8010896:	b083      	sub	sp, #12
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 801089c:	2300      	movs	r3, #0
}
 801089e:	4618      	mov	r0, r3
 80108a0:	370c      	adds	r7, #12
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bc80      	pop	{r7}
 80108a6:	4770      	bx	lr

080108a8 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 80108a8:	b480      	push	{r7}
 80108aa:	b083      	sub	sp, #12
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	4603      	mov	r3, r0
 80108b0:	6039      	str	r1, [r7, #0]
 80108b2:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 80108b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 80108b8:	4618      	mov	r0, r3
 80108ba:	370c      	adds	r7, #12
 80108bc:	46bd      	mov	sp, r7
 80108be:	bc80      	pop	{r7}
 80108c0:	4770      	bx	lr
	...

080108c4 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 80108c4:	b590      	push	{r4, r7, lr}
 80108c6:	b083      	sub	sp, #12
 80108c8:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80108ca:	f00e ff35 	bl	801f738 <UTIL_TIMER_GetCurrentTime>
 80108ce:	4603      	mov	r3, r0
 80108d0:	4a0f      	ldr	r2, [pc, #60]	; (8010910 <OnRadioTxDone+0x4c>)
 80108d2:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 80108d4:	4c0f      	ldr	r4, [pc, #60]	; (8010914 <OnRadioTxDone+0x50>)
 80108d6:	463b      	mov	r3, r7
 80108d8:	4618      	mov	r0, r3
 80108da:	f00e f9b3 	bl	801ec44 <SysTimeGet>
 80108de:	f504 734e 	add.w	r3, r4, #824	; 0x338
 80108e2:	463a      	mov	r2, r7
 80108e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80108e8:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 80108ec:	4a0a      	ldr	r2, [pc, #40]	; (8010918 <OnRadioTxDone+0x54>)
 80108ee:	7813      	ldrb	r3, [r2, #0]
 80108f0:	f043 0320 	orr.w	r3, r3, #32
 80108f4:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 80108f6:	f003 fa71 	bl	8013ddc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 80108fa:	4b08      	ldr	r3, [pc, #32]	; (801091c <OnRadioTxDone+0x58>)
 80108fc:	2201      	movs	r2, #1
 80108fe:	2100      	movs	r1, #0
 8010900:	2002      	movs	r0, #2
 8010902:	f00f f809 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
}
 8010906:	bf00      	nop
 8010908:	370c      	adds	r7, #12
 801090a:	46bd      	mov	sp, r7
 801090c:	bd90      	pop	{r4, r7, pc}
 801090e:	bf00      	nop
 8010910:	2000181c 	.word	0x2000181c
 8010914:	200006d4 	.word	0x200006d4
 8010918:	20001818 	.word	0x20001818
 801091c:	080206e0 	.word	0x080206e0

08010920 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8010920:	b580      	push	{r7, lr}
 8010922:	b084      	sub	sp, #16
 8010924:	af00      	add	r7, sp, #0
 8010926:	60f8      	str	r0, [r7, #12]
 8010928:	4608      	mov	r0, r1
 801092a:	4611      	mov	r1, r2
 801092c:	461a      	mov	r2, r3
 801092e:	4603      	mov	r3, r0
 8010930:	817b      	strh	r3, [r7, #10]
 8010932:	460b      	mov	r3, r1
 8010934:	813b      	strh	r3, [r7, #8]
 8010936:	4613      	mov	r3, r2
 8010938:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 801093a:	f00e fefd 	bl	801f738 <UTIL_TIMER_GetCurrentTime>
 801093e:	4603      	mov	r3, r0
 8010940:	4a11      	ldr	r2, [pc, #68]	; (8010988 <OnRadioRxDone+0x68>)
 8010942:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 8010944:	4a10      	ldr	r2, [pc, #64]	; (8010988 <OnRadioRxDone+0x68>)
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 801094a:	4a0f      	ldr	r2, [pc, #60]	; (8010988 <OnRadioRxDone+0x68>)
 801094c:	897b      	ldrh	r3, [r7, #10]
 801094e:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 8010950:	4a0d      	ldr	r2, [pc, #52]	; (8010988 <OnRadioRxDone+0x68>)
 8010952:	893b      	ldrh	r3, [r7, #8]
 8010954:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 8010956:	4a0c      	ldr	r2, [pc, #48]	; (8010988 <OnRadioRxDone+0x68>)
 8010958:	79fb      	ldrb	r3, [r7, #7]
 801095a:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 801095c:	4a0b      	ldr	r2, [pc, #44]	; (801098c <OnRadioRxDone+0x6c>)
 801095e:	7813      	ldrb	r3, [r2, #0]
 8010960:	f043 0310 	orr.w	r3, r3, #16
 8010964:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 8010966:	4a09      	ldr	r2, [pc, #36]	; (801098c <OnRadioRxDone+0x6c>)
 8010968:	7813      	ldrb	r3, [r2, #0]
 801096a:	f043 0301 	orr.w	r3, r3, #1
 801096e:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 8010970:	f003 fa34 	bl	8013ddc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8010974:	4b06      	ldr	r3, [pc, #24]	; (8010990 <OnRadioRxDone+0x70>)
 8010976:	2201      	movs	r2, #1
 8010978:	2100      	movs	r1, #0
 801097a:	2002      	movs	r0, #2
 801097c:	f00e ffcc 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
}
 8010980:	bf00      	nop
 8010982:	3710      	adds	r7, #16
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}
 8010988:	20001820 	.word	0x20001820
 801098c:	20001818 	.word	0x20001818
 8010990:	080206f0 	.word	0x080206f0

08010994 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 8010994:	b580      	push	{r7, lr}
 8010996:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8010998:	4a07      	ldr	r2, [pc, #28]	; (80109b8 <OnRadioTxTimeout+0x24>)
 801099a:	7813      	ldrb	r3, [r2, #0]
 801099c:	f043 0308 	orr.w	r3, r3, #8
 80109a0:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 80109a2:	f003 fa1b 	bl	8013ddc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 80109a6:	4b05      	ldr	r3, [pc, #20]	; (80109bc <OnRadioTxTimeout+0x28>)
 80109a8:	2201      	movs	r2, #1
 80109aa:	2100      	movs	r1, #0
 80109ac:	2002      	movs	r0, #2
 80109ae:	f00e ffb3 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
}
 80109b2:	bf00      	nop
 80109b4:	bd80      	pop	{r7, pc}
 80109b6:	bf00      	nop
 80109b8:	20001818 	.word	0x20001818
 80109bc:	08020700 	.word	0x08020700

080109c0 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 80109c4:	4a04      	ldr	r2, [pc, #16]	; (80109d8 <OnRadioRxError+0x18>)
 80109c6:	7813      	ldrb	r3, [r2, #0]
 80109c8:	f043 0304 	orr.w	r3, r3, #4
 80109cc:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 80109ce:	f003 fa05 	bl	8013ddc <OnMacProcessNotify>
}
 80109d2:	bf00      	nop
 80109d4:	bd80      	pop	{r7, pc}
 80109d6:	bf00      	nop
 80109d8:	20001818 	.word	0x20001818

080109dc <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 80109e0:	4a07      	ldr	r2, [pc, #28]	; (8010a00 <OnRadioRxTimeout+0x24>)
 80109e2:	7813      	ldrb	r3, [r2, #0]
 80109e4:	f043 0302 	orr.w	r3, r3, #2
 80109e8:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 80109ea:	f003 f9f7 	bl	8013ddc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 80109ee:	4b05      	ldr	r3, [pc, #20]	; (8010a04 <OnRadioRxTimeout+0x28>)
 80109f0:	2201      	movs	r2, #1
 80109f2:	2100      	movs	r1, #0
 80109f4:	2002      	movs	r0, #2
 80109f6:	f00e ff8f 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
}
 80109fa:	bf00      	nop
 80109fc:	bd80      	pop	{r7, pc}
 80109fe:	bf00      	nop
 8010a00:	20001818 	.word	0x20001818
 8010a04:	08020710 	.word	0x08020710

08010a08 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 8010a08:	b480      	push	{r7}
 8010a0a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010a0c:	4b08      	ldr	r3, [pc, #32]	; (8010a30 <UpdateRxSlotIdleState+0x28>)
 8010a0e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010a12:	2b02      	cmp	r3, #2
 8010a14:	d004      	beq.n	8010a20 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8010a16:	4b07      	ldr	r3, [pc, #28]	; (8010a34 <UpdateRxSlotIdleState+0x2c>)
 8010a18:	2206      	movs	r2, #6
 8010a1a:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 8010a1e:	e003      	b.n	8010a28 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010a20:	4b04      	ldr	r3, [pc, #16]	; (8010a34 <UpdateRxSlotIdleState+0x2c>)
 8010a22:	2202      	movs	r2, #2
 8010a24:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
}
 8010a28:	bf00      	nop
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bc80      	pop	{r7}
 8010a2e:	4770      	bx	lr
 8010a30:	20000bf0 	.word	0x20000bf0
 8010a34:	200006d4 	.word	0x200006d4

08010a38 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b092      	sub	sp, #72	; 0x48
 8010a3c:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010a3e:	4b4a      	ldr	r3, [pc, #296]	; (8010b68 <ProcessRadioTxDone+0x130>)
 8010a40:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010a44:	2b02      	cmp	r3, #2
 8010a46:	d002      	beq.n	8010a4e <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 8010a48:	4b48      	ldr	r3, [pc, #288]	; (8010b6c <ProcessRadioTxDone+0x134>)
 8010a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a4c:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010a4e:	f3ef 8310 	mrs	r3, PRIMASK
 8010a52:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8010a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 8010a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 8010a58:	b672      	cpsid	i
}
 8010a5a:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 8010a5c:	f00e fe6c 	bl	801f738 <UTIL_TIMER_GetCurrentTime>
 8010a60:	4602      	mov	r2, r0
 8010a62:	4b43      	ldr	r3, [pc, #268]	; (8010b70 <ProcessRadioTxDone+0x138>)
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	1ad3      	subs	r3, r2, r3
 8010a68:	63bb      	str	r3, [r7, #56]	; 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 8010a6a:	4b42      	ldr	r3, [pc, #264]	; (8010b74 <ProcessRadioTxDone+0x13c>)
 8010a6c:	f8d3 23b0 	ldr.w	r2, [r3, #944]	; 0x3b0
 8010a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a72:	1ad3      	subs	r3, r2, r3
 8010a74:	4619      	mov	r1, r3
 8010a76:	4840      	ldr	r0, [pc, #256]	; (8010b78 <ProcessRadioTxDone+0x140>)
 8010a78:	f00e fdb4 	bl	801f5e4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8010a7c:	483e      	ldr	r0, [pc, #248]	; (8010b78 <ProcessRadioTxDone+0x140>)
 8010a7e:	f00e fcd3 	bl	801f428 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 8010a82:	4b3c      	ldr	r3, [pc, #240]	; (8010b74 <ProcessRadioTxDone+0x13c>)
 8010a84:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8010a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a8a:	1ad3      	subs	r3, r2, r3
 8010a8c:	4619      	mov	r1, r3
 8010a8e:	483b      	ldr	r0, [pc, #236]	; (8010b7c <ProcessRadioTxDone+0x144>)
 8010a90:	f00e fda8 	bl	801f5e4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8010a94:	4839      	ldr	r0, [pc, #228]	; (8010b7c <ProcessRadioTxDone+0x144>)
 8010a96:	f00e fcc7 	bl	801f428 <UTIL_TIMER_Start>
 8010a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a9c:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aa0:	f383 8810 	msr	PRIMASK, r3
}
 8010aa4:	bf00      	nop
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 8010aa6:	4b33      	ldr	r3, [pc, #204]	; (8010b74 <ProcessRadioTxDone+0x13c>)
 8010aa8:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d01a      	beq.n	8010ae6 <ProcessRadioTxDone+0xae>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 8010ab0:	2315      	movs	r3, #21
 8010ab2:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ab6:	4b2c      	ldr	r3, [pc, #176]	; (8010b68 <ProcessRadioTxDone+0x130>)
 8010ab8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010abc:	f107 0220 	add.w	r2, r7, #32
 8010ac0:	4611      	mov	r1, r2
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f006 fec0 	bl	8017848 <RegionGetPhyParam>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8010acc:	4b29      	ldr	r3, [pc, #164]	; (8010b74 <ProcessRadioTxDone+0x13c>)
 8010ace:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8010ad2:	69fb      	ldr	r3, [r7, #28]
 8010ad4:	4413      	add	r3, r2
 8010ad6:	4619      	mov	r1, r3
 8010ad8:	4829      	ldr	r0, [pc, #164]	; (8010b80 <ProcessRadioTxDone+0x148>)
 8010ada:	f00e fd83 	bl	801f5e4 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 8010ade:	4828      	ldr	r0, [pc, #160]	; (8010b80 <ProcessRadioTxDone+0x148>)
 8010ae0:	f00e fca2 	bl	801f428 <UTIL_TIMER_Start>
 8010ae4:	e003      	b.n	8010aee <ProcessRadioTxDone+0xb6>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010ae6:	4b23      	ldr	r3, [pc, #140]	; (8010b74 <ProcessRadioTxDone+0x13c>)
 8010ae8:	2200      	movs	r2, #0
 8010aea:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8010aee:	4b20      	ldr	r3, [pc, #128]	; (8010b70 <ProcessRadioTxDone+0x138>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	4a1d      	ldr	r2, [pc, #116]	; (8010b68 <ProcessRadioTxDone+0x130>)
 8010af4:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 8010af6:	4b1f      	ldr	r3, [pc, #124]	; (8010b74 <ProcessRadioTxDone+0x13c>)
 8010af8:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 8010afc:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8010afe:	4b1c      	ldr	r3, [pc, #112]	; (8010b70 <ProcessRadioTxDone+0x138>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010b04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f00e f8d3 	bl	801ecb4 <SysTimeGetMcuTime>
 8010b0e:	4638      	mov	r0, r7
 8010b10:	4b15      	ldr	r3, [pc, #84]	; (8010b68 <ProcessRadioTxDone+0x130>)
 8010b12:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8010b16:	9200      	str	r2, [sp, #0]
 8010b18:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8010b1c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b20:	ca06      	ldmia	r2, {r1, r2}
 8010b22:	f00e f828 	bl	801eb76 <SysTimeSub>
 8010b26:	f107 0314 	add.w	r3, r7, #20
 8010b2a:	463a      	mov	r2, r7
 8010b2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b30:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8010b34:	4b0f      	ldr	r3, [pc, #60]	; (8010b74 <ProcessRadioTxDone+0x13c>)
 8010b36:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8010b3a:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 8010b3c:	2301      	movs	r3, #1
 8010b3e:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010b40:	4b09      	ldr	r3, [pc, #36]	; (8010b68 <ProcessRadioTxDone+0x130>)
 8010b42:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d101      	bne.n	8010b4e <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8010b4e:	4b06      	ldr	r3, [pc, #24]	; (8010b68 <ProcessRadioTxDone+0x130>)
 8010b50:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010b54:	f107 0208 	add.w	r2, r7, #8
 8010b58:	4611      	mov	r1, r2
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	f006 fe95 	bl	801788a <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 8010b60:	bf00      	nop
 8010b62:	3740      	adds	r7, #64	; 0x40
 8010b64:	46bd      	mov	sp, r7
 8010b66:	bd80      	pop	{r7, pc}
 8010b68:	20000bf0 	.word	0x20000bf0
 8010b6c:	08020e2c 	.word	0x08020e2c
 8010b70:	2000181c 	.word	0x2000181c
 8010b74:	200006d4 	.word	0x200006d4
 8010b78:	20000a54 	.word	0x20000a54
 8010b7c:	20000a6c 	.word	0x20000a6c
 8010b80:	20000ad4 	.word	0x20000ad4

08010b84 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8010b88:	4b10      	ldr	r3, [pc, #64]	; (8010bcc <PrepareRxDoneAbort+0x48>)
 8010b8a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b92:	4a0e      	ldr	r2, [pc, #56]	; (8010bcc <PrepareRxDoneAbort+0x48>)
 8010b94:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 8010b98:	4b0c      	ldr	r3, [pc, #48]	; (8010bcc <PrepareRxDoneAbort+0x48>)
 8010b9a:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d002      	beq.n	8010ba8 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 8010ba2:	2000      	movs	r0, #0
 8010ba4:	f001 f9fa 	bl	8011f9c <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 8010ba8:	4a08      	ldr	r2, [pc, #32]	; (8010bcc <PrepareRxDoneAbort+0x48>)
 8010baa:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010bae:	f043 0302 	orr.w	r3, r3, #2
 8010bb2:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 8010bb6:	4a05      	ldr	r2, [pc, #20]	; (8010bcc <PrepareRxDoneAbort+0x48>)
 8010bb8:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010bbc:	f043 0310 	orr.w	r3, r3, #16
 8010bc0:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

    UpdateRxSlotIdleState( );
 8010bc4:	f7ff ff20 	bl	8010a08 <UpdateRxSlotIdleState>
}
 8010bc8:	bf00      	nop
 8010bca:	bd80      	pop	{r7, pc}
 8010bcc:	200006d4 	.word	0x200006d4

08010bd0 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 8010bd0:	b590      	push	{r4, r7, lr}
 8010bd2:	b0ab      	sub	sp, #172	; 0xac
 8010bd4:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010bd6:	2312      	movs	r3, #18
 8010bd8:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 8010bdc:	4b81      	ldr	r3, [pc, #516]	; (8010de4 <ProcessRadioRxDone+0x214>)
 8010bde:	685b      	ldr	r3, [r3, #4]
 8010be0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint16_t size = RxDoneParams.Size;
 8010be4:	4b7f      	ldr	r3, [pc, #508]	; (8010de4 <ProcessRadioRxDone+0x214>)
 8010be6:	891b      	ldrh	r3, [r3, #8]
 8010be8:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    int16_t rssi = RxDoneParams.Rssi;
 8010bec:	4b7d      	ldr	r3, [pc, #500]	; (8010de4 <ProcessRadioRxDone+0x214>)
 8010bee:	895b      	ldrh	r3, [r3, #10]
 8010bf0:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
    int8_t snr = RxDoneParams.Snr;
 8010bf4:	4b7b      	ldr	r3, [pc, #492]	; (8010de4 <ProcessRadioRxDone+0x214>)
 8010bf6:	7b1b      	ldrb	r3, [r3, #12]
 8010bf8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

    uint8_t pktHeaderLen = 0;
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

    uint32_t downLinkCounter = 0;
 8010c02:	2300      	movs	r3, #0
 8010c04:	617b      	str	r3, [r7, #20]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8010c06:	4b78      	ldr	r3, [pc, #480]	; (8010de8 <ProcessRadioRxDone+0x218>)
 8010c08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010c0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint8_t multicast = 0;
 8010c10:	2300      	movs	r3, #0
 8010c12:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8010c16:	2301      	movs	r3, #1
 8010c18:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 8010c1c:	2301      	movs	r3, #1
 8010c1e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 8010c22:	4a72      	ldr	r2, [pc, #456]	; (8010dec <ProcessRadioRxDone+0x21c>)
 8010c24:	7813      	ldrb	r3, [r2, #0]
 8010c26:	f36f 0300 	bfc	r3, #0, #1
 8010c2a:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 8010c2c:	4b70      	ldr	r3, [pc, #448]	; (8010df0 <ProcessRadioRxDone+0x220>)
 8010c2e:	2200      	movs	r2, #0
 8010c30:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
    MacCtx.RxStatus.Rssi = rssi;
 8010c34:	4a6e      	ldr	r2, [pc, #440]	; (8010df0 <ProcessRadioRxDone+0x220>)
 8010c36:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8010c3a:	f8a2 348c 	strh.w	r3, [r2, #1164]	; 0x48c
    MacCtx.RxStatus.Snr = snr;
 8010c3e:	4a6c      	ldr	r2, [pc, #432]	; (8010df0 <ProcessRadioRxDone+0x220>)
 8010c40:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010c44:	f882 348e 	strb.w	r3, [r2, #1166]	; 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8010c48:	4b69      	ldr	r3, [pc, #420]	; (8010df0 <ProcessRadioRxDone+0x220>)
 8010c4a:	f893 2490 	ldrb.w	r2, [r3, #1168]	; 0x490
 8010c4e:	4b68      	ldr	r3, [pc, #416]	; (8010df0 <ProcessRadioRxDone+0x220>)
 8010c50:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
    MacCtx.McpsIndication.Port = 0;
 8010c54:	4b66      	ldr	r3, [pc, #408]	; (8010df0 <ProcessRadioRxDone+0x220>)
 8010c56:	2200      	movs	r2, #0
 8010c58:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
    MacCtx.McpsIndication.Multicast = 0;
 8010c5c:	4b64      	ldr	r3, [pc, #400]	; (8010df0 <ProcessRadioRxDone+0x220>)
 8010c5e:	2200      	movs	r2, #0
 8010c60:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 8010c64:	4b62      	ldr	r3, [pc, #392]	; (8010df0 <ProcessRadioRxDone+0x220>)
 8010c66:	2200      	movs	r2, #0
 8010c68:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 8010c6c:	4b60      	ldr	r3, [pc, #384]	; (8010df0 <ProcessRadioRxDone+0x220>)
 8010c6e:	2200      	movs	r2, #0
 8010c70:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 8010c74:	4b5e      	ldr	r3, [pc, #376]	; (8010df0 <ProcessRadioRxDone+0x220>)
 8010c76:	2200      	movs	r2, #0
 8010c78:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 8010c7c:	4b5c      	ldr	r3, [pc, #368]	; (8010df0 <ProcessRadioRxDone+0x220>)
 8010c7e:	2200      	movs	r2, #0
 8010c80:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 8010c84:	4b5a      	ldr	r3, [pc, #360]	; (8010df0 <ProcessRadioRxDone+0x220>)
 8010c86:	2200      	movs	r2, #0
 8010c88:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8010c8c:	4b58      	ldr	r3, [pc, #352]	; (8010df0 <ProcessRadioRxDone+0x220>)
 8010c8e:	2200      	movs	r2, #0
 8010c90:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8010c94:	4b56      	ldr	r3, [pc, #344]	; (8010df0 <ProcessRadioRxDone+0x220>)
 8010c96:	2200      	movs	r2, #0
 8010c98:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 8010c9c:	4b54      	ldr	r3, [pc, #336]	; (8010df0 <ProcessRadioRxDone+0x220>)
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8010ca4:	4b52      	ldr	r3, [pc, #328]	; (8010df0 <ProcessRadioRxDone+0x220>)
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 8010cac:	4b50      	ldr	r3, [pc, #320]	; (8010df0 <ProcessRadioRxDone+0x220>)
 8010cae:	2200      	movs	r2, #0
 8010cb0:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 8010cb4:	4b4f      	ldr	r3, [pc, #316]	; (8010df4 <ProcessRadioRxDone+0x224>)
 8010cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cb8:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8010cba:	4b4d      	ldr	r3, [pc, #308]	; (8010df0 <ProcessRadioRxDone+0x220>)
 8010cbc:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d102      	bne.n	8010cca <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 8010cc4:	484c      	ldr	r0, [pc, #304]	; (8010df8 <ProcessRadioRxDone+0x228>)
 8010cc6:	f00e fc1d 	bl	801f504 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8010cca:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010cce:	4619      	mov	r1, r3
 8010cd0:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8010cd4:	f004 fe28 	bl	8015928 <LoRaMacClassBRxBeacon>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d00b      	beq.n	8010cf6 <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8010cde:	4a44      	ldr	r2, [pc, #272]	; (8010df0 <ProcessRadioRxDone+0x220>)
 8010ce0:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8010ce4:	f8a2 347e 	strh.w	r3, [r2, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8010ce8:	4a41      	ldr	r2, [pc, #260]	; (8010df0 <ProcessRadioRxDone+0x220>)
 8010cea:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010cee:	f882 3480 	strb.w	r3, [r2, #1152]	; 0x480
        return;
 8010cf2:	f000 bc75 	b.w	80115e0 <ProcessRadioRxDone+0xa10>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010cf6:	4b3c      	ldr	r3, [pc, #240]	; (8010de8 <ProcessRadioRxDone+0x218>)
 8010cf8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010cfc:	2b01      	cmp	r3, #1
 8010cfe:	d11e      	bne.n	8010d3e <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010d00:	f004 fe25 	bl	801594e <LoRaMacClassBIsPingExpected>
 8010d04:	4603      	mov	r3, r0
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d00a      	beq.n	8010d20 <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010d0a:	2000      	movs	r0, #0
 8010d0c:	f004 fdd6 	bl	80158bc <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8010d10:	2000      	movs	r0, #0
 8010d12:	f004 fdf7 	bl	8015904 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8010d16:	4b36      	ldr	r3, [pc, #216]	; (8010df0 <ProcessRadioRxDone+0x220>)
 8010d18:	2204      	movs	r2, #4
 8010d1a:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 8010d1e:	e00e      	b.n	8010d3e <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010d20:	f004 fe1c 	bl	801595c <LoRaMacClassBIsMulticastExpected>
 8010d24:	4603      	mov	r3, r0
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d009      	beq.n	8010d3e <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010d2a:	2000      	movs	r0, #0
 8010d2c:	f004 fdd0 	bl	80158d0 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8010d30:	2000      	movs	r0, #0
 8010d32:	f004 fdf0 	bl	8015916 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8010d36:	4b2e      	ldr	r3, [pc, #184]	; (8010df0 <ProcessRadioRxDone+0x220>)
 8010d38:	2205      	movs	r2, #5
 8010d3a:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 8010d3e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d107      	bne.n	8010d56 <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010d46:	4b2a      	ldr	r3, [pc, #168]	; (8010df0 <ProcessRadioRxDone+0x220>)
 8010d48:	2201      	movs	r2, #1
 8010d4a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
        PrepareRxDoneAbort( );
 8010d4e:	f7ff ff19 	bl	8010b84 <PrepareRxDoneAbort>
        return;
 8010d52:	f000 bc45 	b.w	80115e0 <ProcessRadioRxDone+0xa10>
    }

    macHdr.Value = payload[pktHeaderLen++];
 8010d56:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8010d5a:	1c5a      	adds	r2, r3, #1
 8010d5c:	f887 208e 	strb.w	r2, [r7, #142]	; 0x8e
 8010d60:	461a      	mov	r2, r3
 8010d62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010d66:	4413      	add	r3, r2
 8010d68:	781b      	ldrb	r3, [r3, #0]
 8010d6a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 8010d6e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8010d72:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010d76:	b2db      	uxtb	r3, r3
 8010d78:	3b01      	subs	r3, #1
 8010d7a:	2b06      	cmp	r3, #6
 8010d7c:	f200 8403 	bhi.w	8011586 <ProcessRadioRxDone+0x9b6>
 8010d80:	a201      	add	r2, pc, #4	; (adr r2, 8010d88 <ProcessRadioRxDone+0x1b8>)
 8010d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d86:	bf00      	nop
 8010d88:	08010da5 	.word	0x08010da5
 8010d8c:	08011587 	.word	0x08011587
 8010d90:	08010fa3 	.word	0x08010fa3
 8010d94:	08011587 	.word	0x08011587
 8010d98:	08010f9b 	.word	0x08010f9b
 8010d9c:	08011587 	.word	0x08011587
 8010da0:	0801152b 	.word	0x0801152b
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8010da4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010da8:	2b10      	cmp	r3, #16
 8010daa:	d807      	bhi.n	8010dbc <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010dac:	4b10      	ldr	r3, [pc, #64]	; (8010df0 <ProcessRadioRxDone+0x220>)
 8010dae:	2201      	movs	r2, #1
 8010db0:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8010db4:	f7ff fee6 	bl	8010b84 <PrepareRxDoneAbort>
                return;
 8010db8:	f000 bc12 	b.w	80115e0 <ProcessRadioRxDone+0xa10>
            }
            macMsgJoinAccept.Buffer = payload;
 8010dbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010dc0:	61bb      	str	r3, [r7, #24]
            macMsgJoinAccept.BufSize = size;
 8010dc2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010dc6:	b2db      	uxtb	r3, r3
 8010dc8:	773b      	strb	r3, [r7, #28]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8010dca:	4b07      	ldr	r3, [pc, #28]	; (8010de8 <ProcessRadioRxDone+0x218>)
 8010dcc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d013      	beq.n	8010dfc <ProcessRadioRxDone+0x22c>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010dd4:	4b06      	ldr	r3, [pc, #24]	; (8010df0 <ProcessRadioRxDone+0x220>)
 8010dd6:	2201      	movs	r2, #1
 8010dd8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8010ddc:	f7ff fed2 	bl	8010b84 <PrepareRxDoneAbort>
                return;
 8010de0:	e3fe      	b.n	80115e0 <ProcessRadioRxDone+0xa10>
 8010de2:	bf00      	nop
 8010de4:	20001820 	.word	0x20001820
 8010de8:	20000bf0 	.word	0x20000bf0
 8010dec:	20001818 	.word	0x20001818
 8010df0:	200006d4 	.word	0x200006d4
 8010df4:	08020e2c 	.word	0x08020e2c
 8010df8:	20000a6c 	.word	0x20000a6c
            }

            SecureElementGetJoinEui( joinEui );
 8010dfc:	f107 0308 	add.w	r3, r7, #8
 8010e00:	4618      	mov	r0, r3
 8010e02:	f7fd ff7d 	bl	800ed00 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 8010e06:	f107 0218 	add.w	r2, r7, #24
 8010e0a:	f107 0308 	add.w	r3, r7, #8
 8010e0e:	4619      	mov	r1, r3
 8010e10:	20ff      	movs	r0, #255	; 0xff
 8010e12:	f005 ff95 	bl	8016d40 <LoRaMacCryptoHandleJoinAccept>
 8010e16:	4603      	mov	r3, r0
 8010e18:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8010e22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010e26:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010e2a:	b2db      	uxtb	r3, r3
 8010e2c:	b25b      	sxtb	r3, r3
 8010e2e:	713b      	strb	r3, [r7, #4]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010e30:	4bb1      	ldr	r3, [pc, #708]	; (80110f8 <ProcessRadioRxDone+0x528>)
 8010e32:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8010e36:	717b      	strb	r3, [r7, #5]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 8010e38:	4baf      	ldr	r3, [pc, #700]	; (80110f8 <ProcessRadioRxDone+0x528>)
 8010e3a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010e3e:	1d39      	adds	r1, r7, #4
 8010e40:	2207      	movs	r2, #7
 8010e42:	4618      	mov	r0, r3
 8010e44:	f006 fd4e 	bl	80178e4 <RegionVerify>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 8010e4e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	f040 8095 	bne.w	8010f82 <ProcessRadioRxDone+0x3b2>
 8010e58:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	f000 8090 	beq.w	8010f82 <ProcessRadioRxDone+0x3b2>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8010e62:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010e66:	461a      	mov	r2, r3
 8010e68:	4ba3      	ldr	r3, [pc, #652]	; (80110f8 <ProcessRadioRxDone+0x528>)
 8010e6a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8010e6e:	4ba2      	ldr	r3, [pc, #648]	; (80110f8 <ProcessRadioRxDone+0x528>)
 8010e70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8010e74:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010e78:	021b      	lsls	r3, r3, #8
 8010e7a:	4313      	orrs	r3, r2
 8010e7c:	4a9e      	ldr	r2, [pc, #632]	; (80110f8 <ProcessRadioRxDone+0x528>)
 8010e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8010e82:	4b9d      	ldr	r3, [pc, #628]	; (80110f8 <ProcessRadioRxDone+0x528>)
 8010e84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8010e88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010e8c:	041b      	lsls	r3, r3, #16
 8010e8e:	4313      	orrs	r3, r2
 8010e90:	4a99      	ldr	r2, [pc, #612]	; (80110f8 <ProcessRadioRxDone+0x528>)
 8010e92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8010e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e98:	4a97      	ldr	r2, [pc, #604]	; (80110f8 <ProcessRadioRxDone+0x528>)
 8010e9a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 8010e9e:	4b96      	ldr	r3, [pc, #600]	; (80110f8 <ProcessRadioRxDone+0x528>)
 8010ea0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010ea4:	4619      	mov	r1, r3
 8010ea6:	2002      	movs	r0, #2
 8010ea8:	f7fd ff42 	bl	800ed30 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8010eac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010eb0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8010eb4:	b2db      	uxtb	r3, r3
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	4b8f      	ldr	r3, [pc, #572]	; (80110f8 <ProcessRadioRxDone+0x528>)
 8010eba:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8010ebe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010ec2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010ec6:	b2db      	uxtb	r3, r3
 8010ec8:	461a      	mov	r2, r3
 8010eca:	4b8b      	ldr	r3, [pc, #556]	; (80110f8 <ProcessRadioRxDone+0x528>)
 8010ecc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8010ed0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010ed4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010ed8:	b2db      	uxtb	r3, r3
 8010eda:	461a      	mov	r2, r3
 8010edc:	4b86      	ldr	r3, [pc, #536]	; (80110f8 <ProcessRadioRxDone+0x528>)
 8010ede:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8010ee2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8010ee6:	461a      	mov	r2, r3
 8010ee8:	4b83      	ldr	r3, [pc, #524]	; (80110f8 <ProcessRadioRxDone+0x528>)
 8010eea:	659a      	str	r2, [r3, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8010eec:	4b82      	ldr	r3, [pc, #520]	; (80110f8 <ProcessRadioRxDone+0x528>)
 8010eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d102      	bne.n	8010efa <ProcessRadioRxDone+0x32a>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8010ef4:	4b80      	ldr	r3, [pc, #512]	; (80110f8 <ProcessRadioRxDone+0x528>)
 8010ef6:	2201      	movs	r2, #1
 8010ef8:	659a      	str	r2, [r3, #88]	; 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8010efa:	4b7f      	ldr	r3, [pc, #508]	; (80110f8 <ProcessRadioRxDone+0x528>)
 8010efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010efe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010f02:	fb02 f303 	mul.w	r3, r2, r3
 8010f06:	4a7c      	ldr	r2, [pc, #496]	; (80110f8 <ProcessRadioRxDone+0x528>)
 8010f08:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8010f0a:	4b7b      	ldr	r3, [pc, #492]	; (80110f8 <ProcessRadioRxDone+0x528>)
 8010f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f0e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8010f12:	4a79      	ldr	r2, [pc, #484]	; (80110f8 <ProcessRadioRxDone+0x528>)
 8010f14:	65d3      	str	r3, [r2, #92]	; 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 8010f16:	4b78      	ldr	r3, [pc, #480]	; (80110f8 <ProcessRadioRxDone+0x528>)
 8010f18:	2201      	movs	r2, #1
 8010f1a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8010f1e:	4b76      	ldr	r3, [pc, #472]	; (80110f8 <ProcessRadioRxDone+0x528>)
 8010f20:	2200      	movs	r2, #0
 8010f22:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8010f26:	f107 0318 	add.w	r3, r7, #24
 8010f2a:	3312      	adds	r3, #18
 8010f2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 8010f30:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010f34:	b2db      	uxtb	r3, r3
 8010f36:	3b11      	subs	r3, #17
 8010f38:	b2db      	uxtb	r3, r3
 8010f3a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 8010f3e:	4b6f      	ldr	r3, [pc, #444]	; (80110fc <ProcessRadioRxDone+0x52c>)
 8010f40:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 8010f44:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8010f48:	4b6b      	ldr	r3, [pc, #428]	; (80110f8 <ProcessRadioRxDone+0x528>)
 8010f4a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010f4e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8010f52:	4611      	mov	r1, r2
 8010f54:	4618      	mov	r0, r3
 8010f56:	f006 fce6 	bl	8017926 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8010f5a:	4b67      	ldr	r3, [pc, #412]	; (80110f8 <ProcessRadioRxDone+0x528>)
 8010f5c:	2202      	movs	r2, #2
 8010f5e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 8010f62:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8010f66:	4618      	mov	r0, r3
 8010f68:	f005 f9f4 	bl	8016354 <LoRaMacConfirmQueueIsCmdActive>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	f000 8311 	beq.w	8011596 <ProcessRadioRxDone+0x9c6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 8010f74:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8010f78:	4619      	mov	r1, r3
 8010f7a:	2000      	movs	r0, #0
 8010f7c:	f005 f95e 	bl	801623c <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 8010f80:	e309      	b.n	8011596 <ProcessRadioRxDone+0x9c6>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010f82:	2001      	movs	r0, #1
 8010f84:	f005 f9e6 	bl	8016354 <LoRaMacConfirmQueueIsCmdActive>
 8010f88:	4603      	mov	r3, r0
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	f000 8302 	beq.w	8011594 <ProcessRadioRxDone+0x9c4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8010f90:	2101      	movs	r1, #1
 8010f92:	2007      	movs	r0, #7
 8010f94:	f005 f952 	bl	801623c <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 8010f98:	e2fc      	b.n	8011594 <ProcessRadioRxDone+0x9c4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8010f9a:	4b58      	ldr	r3, [pc, #352]	; (80110fc <ProcessRadioRxDone+0x52c>)
 8010f9c:	2201      	movs	r2, #1
 8010f9e:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010fa2:	4b55      	ldr	r3, [pc, #340]	; (80110f8 <ProcessRadioRxDone+0x528>)
 8010fa4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8010fa8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8010fac:	4b53      	ldr	r3, [pc, #332]	; (80110fc <ProcessRadioRxDone+0x52c>)
 8010fae:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 8010fb2:	b25b      	sxtb	r3, r3
 8010fb4:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8010fb8:	230d      	movs	r3, #13
 8010fba:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8010fbe:	4b4e      	ldr	r3, [pc, #312]	; (80110f8 <ProcessRadioRxDone+0x528>)
 8010fc0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d002      	beq.n	8010fce <ProcessRadioRxDone+0x3fe>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8010fc8:	230e      	movs	r3, #14
 8010fca:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010fce:	4b4a      	ldr	r3, [pc, #296]	; (80110f8 <ProcessRadioRxDone+0x528>)
 8010fd0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010fd4:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8010fd8:	4611      	mov	r1, r2
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f006 fc34 	bl	8017848 <RegionGetPhyParam>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	673b      	str	r3, [r7, #112]	; 0x70
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8010fe4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010fe8:	3b0d      	subs	r3, #13
 8010fea:	b29b      	uxth	r3, r3
 8010fec:	b21b      	sxth	r3, r3
 8010fee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010ff2:	b21a      	sxth	r2, r3
 8010ff4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010ff6:	b21b      	sxth	r3, r3
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	dc03      	bgt.n	8011004 <ProcessRadioRxDone+0x434>
 8010ffc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8011000:	2b0b      	cmp	r3, #11
 8011002:	d806      	bhi.n	8011012 <ProcessRadioRxDone+0x442>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011004:	4b3d      	ldr	r3, [pc, #244]	; (80110fc <ProcessRadioRxDone+0x52c>)
 8011006:	2201      	movs	r2, #1
 8011008:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 801100c:	f7ff fdba 	bl	8010b84 <PrepareRxDoneAbort>
                return;
 8011010:	e2e6      	b.n	80115e0 <ProcessRadioRxDone+0xa10>
            }
            macMsgData.Buffer = payload;
 8011012:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011016:	643b      	str	r3, [r7, #64]	; 0x40
            macMsgData.BufSize = size;
 8011018:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 801101c:	b2db      	uxtb	r3, r3
 801101e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8011022:	4b37      	ldr	r3, [pc, #220]	; (8011100 <ProcessRadioRxDone+0x530>)
 8011024:	667b      	str	r3, [r7, #100]	; 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8011026:	23ff      	movs	r3, #255	; 0xff
 8011028:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 801102c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011030:	4618      	mov	r0, r3
 8011032:	f006 f987 	bl	8017344 <LoRaMacParserData>
 8011036:	4603      	mov	r3, r0
 8011038:	2b00      	cmp	r3, #0
 801103a:	d006      	beq.n	801104a <ProcessRadioRxDone+0x47a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801103c:	4b2f      	ldr	r3, [pc, #188]	; (80110fc <ProcessRadioRxDone+0x52c>)
 801103e:	2201      	movs	r2, #1
 8011040:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8011044:	f7ff fd9e 	bl	8010b84 <PrepareRxDoneAbort>
                return;
 8011048:	e2ca      	b.n	80115e0 <ProcessRadioRxDone+0xa10>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801104a:	4b2b      	ldr	r3, [pc, #172]	; (80110f8 <ProcessRadioRxDone+0x528>)
 801104c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011050:	2b01      	cmp	r3, #1
 8011052:	d132      	bne.n	80110ba <ProcessRadioRxDone+0x4ea>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 8011054:	f004 fc7b 	bl	801594e <LoRaMacClassBIsPingExpected>
 8011058:	4603      	mov	r3, r0
 801105a:	2b00      	cmp	r3, #0
 801105c:	d014      	beq.n	8011088 <ProcessRadioRxDone+0x4b8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801105e:	2000      	movs	r0, #0
 8011060:	f004 fc2c 	bl	80158bc <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 8011064:	2000      	movs	r0, #0
 8011066:	f004 fc4d 	bl	8015904 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 801106a:	4b24      	ldr	r3, [pc, #144]	; (80110fc <ProcessRadioRxDone+0x52c>)
 801106c:	2204      	movs	r2, #4
 801106e:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8011072:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011074:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011078:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801107c:	b2db      	uxtb	r3, r3
 801107e:	4619      	mov	r1, r3
 8011080:	4610      	mov	r0, r2
 8011082:	f004 fced 	bl	8015a60 <LoRaMacClassBSetFPendingBit>
 8011086:	e018      	b.n	80110ba <ProcessRadioRxDone+0x4ea>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011088:	f004 fc68 	bl	801595c <LoRaMacClassBIsMulticastExpected>
 801108c:	4603      	mov	r3, r0
 801108e:	2b00      	cmp	r3, #0
 8011090:	d013      	beq.n	80110ba <ProcessRadioRxDone+0x4ea>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8011092:	2000      	movs	r0, #0
 8011094:	f004 fc1c 	bl	80158d0 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8011098:	2000      	movs	r0, #0
 801109a:	f004 fc3c 	bl	8015916 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 801109e:	4b17      	ldr	r3, [pc, #92]	; (80110fc <ProcessRadioRxDone+0x52c>)
 80110a0:	2205      	movs	r2, #5
 80110a2:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 80110a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80110a8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80110ac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80110b0:	b2db      	uxtb	r3, r3
 80110b2:	4619      	mov	r1, r3
 80110b4:	4610      	mov	r0, r2
 80110b6:	f004 fcd3 	bl	8015a60 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 80110ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110bc:	4a0f      	ldr	r2, [pc, #60]	; (80110fc <ProcessRadioRxDone+0x52c>)
 80110be:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 80110c2:	f107 0212 	add.w	r2, r7, #18
 80110c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80110ca:	4611      	mov	r1, r2
 80110cc:	4618      	mov	r0, r3
 80110ce:	f002 fd81 	bl	8013bd4 <DetermineFrameType>
 80110d2:	4603      	mov	r3, r0
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d006      	beq.n	80110e6 <ProcessRadioRxDone+0x516>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80110d8:	4b08      	ldr	r3, [pc, #32]	; (80110fc <ProcessRadioRxDone+0x52c>)
 80110da:	2201      	movs	r2, #1
 80110dc:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 80110e0:	f7ff fd50 	bl	8010b84 <PrepareRxDoneAbort>
                return;
 80110e4:	e27c      	b.n	80115e0 <ProcessRadioRxDone+0xa10>
            }

            //Check if it is a multicast message
            multicast = 0;
 80110e6:	2300      	movs	r3, #0
 80110e8:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
            downLinkCounter = 0;
 80110ec:	2300      	movs	r3, #0
 80110ee:	617b      	str	r3, [r7, #20]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80110f0:	2300      	movs	r3, #0
 80110f2:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 80110f6:	e055      	b.n	80111a4 <ProcessRadioRxDone+0x5d4>
 80110f8:	20000bf0 	.word	0x20000bf0
 80110fc:	200006d4 	.word	0x200006d4
 8011100:	2000090c 	.word	0x2000090c
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8011104:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8011108:	499f      	ldr	r1, [pc, #636]	; (8011388 <ProcessRadioRxDone+0x7b8>)
 801110a:	4613      	mov	r3, r2
 801110c:	005b      	lsls	r3, r3, #1
 801110e:	4413      	add	r3, r2
 8011110:	011b      	lsls	r3, r3, #4
 8011112:	440b      	add	r3, r1
 8011114:	33ec      	adds	r3, #236	; 0xec
 8011116:	681a      	ldr	r2, [r3, #0]
 8011118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801111a:	429a      	cmp	r2, r3
 801111c:	d13d      	bne.n	801119a <ProcessRadioRxDone+0x5ca>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 801111e:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8011122:	4999      	ldr	r1, [pc, #612]	; (8011388 <ProcessRadioRxDone+0x7b8>)
 8011124:	4613      	mov	r3, r2
 8011126:	005b      	lsls	r3, r3, #1
 8011128:	4413      	add	r3, r2
 801112a:	011b      	lsls	r3, r3, #4
 801112c:	440b      	add	r3, r1
 801112e:	33e9      	adds	r3, #233	; 0xe9
 8011130:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8011132:	2b00      	cmp	r3, #0
 8011134:	d031      	beq.n	801119a <ProcessRadioRxDone+0x5ca>
                {
                    multicast = 1;
 8011136:	2301      	movs	r3, #1
 8011138:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 801113c:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8011140:	4991      	ldr	r1, [pc, #580]	; (8011388 <ProcessRadioRxDone+0x7b8>)
 8011142:	4613      	mov	r3, r2
 8011144:	005b      	lsls	r3, r3, #1
 8011146:	4413      	add	r3, r2
 8011148:	011b      	lsls	r3, r3, #4
 801114a:	440b      	add	r3, r1
 801114c:	33ea      	adds	r3, #234	; 0xea
 801114e:	781b      	ldrb	r3, [r3, #0]
 8011150:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8011154:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8011158:	498b      	ldr	r1, [pc, #556]	; (8011388 <ProcessRadioRxDone+0x7b8>)
 801115a:	4613      	mov	r3, r2
 801115c:	005b      	lsls	r3, r3, #1
 801115e:	4413      	add	r3, r2
 8011160:	011b      	lsls	r3, r3, #4
 8011162:	440b      	add	r3, r1
 8011164:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	617b      	str	r3, [r7, #20]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 801116e:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8011172:	4985      	ldr	r1, [pc, #532]	; (8011388 <ProcessRadioRxDone+0x7b8>)
 8011174:	4613      	mov	r3, r2
 8011176:	005b      	lsls	r3, r3, #1
 8011178:	4413      	add	r3, r2
 801117a:	011b      	lsls	r3, r3, #4
 801117c:	440b      	add	r3, r1
 801117e:	33ec      	adds	r3, #236	; 0xec
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011186:	4b80      	ldr	r3, [pc, #512]	; (8011388 <ProcessRadioRxDone+0x7b8>)
 8011188:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801118c:	2b02      	cmp	r3, #2
 801118e:	d10e      	bne.n	80111ae <ProcessRadioRxDone+0x5de>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8011190:	4b7e      	ldr	r3, [pc, #504]	; (801138c <ProcessRadioRxDone+0x7bc>)
 8011192:	2203      	movs	r2, #3
 8011194:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    }
                    break;
 8011198:	e009      	b.n	80111ae <ProcessRadioRxDone+0x5de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801119a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 801119e:	3301      	adds	r3, #1
 80111a0:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 80111a4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d0ab      	beq.n	8011104 <ProcessRadioRxDone+0x534>
 80111ac:	e000      	b.n	80111b0 <ProcessRadioRxDone+0x5e0>
                    break;
 80111ae:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 80111b0:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80111b4:	2b01      	cmp	r3, #1
 80111b6:	d117      	bne.n	80111e8 <ProcessRadioRxDone+0x618>
 80111b8:	7cbb      	ldrb	r3, [r7, #18]
 80111ba:	2b03      	cmp	r3, #3
 80111bc:	d10d      	bne.n	80111da <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 80111be:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80111c2:	f003 0320 	and.w	r3, r3, #32
 80111c6:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d106      	bne.n	80111da <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 80111cc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80111d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111d4:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d006      	beq.n	80111e8 <ProcessRadioRxDone+0x618>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80111da:	4b6c      	ldr	r3, [pc, #432]	; (801138c <ProcessRadioRxDone+0x7bc>)
 80111dc:	2201      	movs	r2, #1
 80111de:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 80111e2:	f7ff fccf 	bl	8010b84 <PrepareRxDoneAbort>
                return;
 80111e6:	e1fb      	b.n	80115e0 <ProcessRadioRxDone+0xa10>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 80111e8:	7cb9      	ldrb	r1, [r7, #18]
 80111ea:	4c67      	ldr	r4, [pc, #412]	; (8011388 <ProcessRadioRxDone+0x7b8>)
 80111ec:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80111f0:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 80111f4:	f107 0314 	add.w	r3, r7, #20
 80111f8:	9301      	str	r3, [sp, #4]
 80111fa:	f107 0313 	add.w	r3, r7, #19
 80111fe:	9300      	str	r3, [sp, #0]
 8011200:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8011204:	f000 fee4 	bl	8011fd0 <GetFCntDown>
 8011208:	4603      	mov	r3, r0
 801120a:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801120e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8011212:	2b00      	cmp	r3, #0
 8011214:	d017      	beq.n	8011246 <ProcessRadioRxDone+0x676>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8011216:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 801121a:	2b07      	cmp	r3, #7
 801121c:	d104      	bne.n	8011228 <ProcessRadioRxDone+0x658>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 801121e:	4b5b      	ldr	r3, [pc, #364]	; (801138c <ProcessRadioRxDone+0x7bc>)
 8011220:	2208      	movs	r2, #8
 8011222:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 8011226:	e003      	b.n	8011230 <ProcessRadioRxDone+0x660>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011228:	4b58      	ldr	r3, [pc, #352]	; (801138c <ProcessRadioRxDone+0x7bc>)
 801122a:	2201      	movs	r2, #1
 801122c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8011230:	697b      	ldr	r3, [r7, #20]
 8011232:	4a56      	ldr	r2, [pc, #344]	; (801138c <ProcessRadioRxDone+0x7bc>)
 8011234:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8011238:	697b      	ldr	r3, [r7, #20]
 801123a:	4a54      	ldr	r2, [pc, #336]	; (801138c <ProcessRadioRxDone+0x7bc>)
 801123c:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
                PrepareRxDoneAbort( );
 8011240:	f7ff fca0 	bl	8010b84 <PrepareRxDoneAbort>
                return;
 8011244:	e1cc      	b.n	80115e0 <ProcessRadioRxDone+0xa10>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8011246:	7cfa      	ldrb	r2, [r7, #19]
 8011248:	6979      	ldr	r1, [r7, #20]
 801124a:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 801124e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011252:	9300      	str	r3, [sp, #0]
 8011254:	460b      	mov	r3, r1
 8011256:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801125a:	f005 fed3 	bl	8017004 <LoRaMacCryptoUnsecureMessage>
 801125e:	4603      	mov	r3, r0
 8011260:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8011264:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8011268:	2b00      	cmp	r3, #0
 801126a:	d00f      	beq.n	801128c <ProcessRadioRxDone+0x6bc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 801126c:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8011270:	2b02      	cmp	r3, #2
 8011272:	d104      	bne.n	801127e <ProcessRadioRxDone+0x6ae>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8011274:	4b45      	ldr	r3, [pc, #276]	; (801138c <ProcessRadioRxDone+0x7bc>)
 8011276:	220a      	movs	r2, #10
 8011278:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 801127c:	e003      	b.n	8011286 <ProcessRadioRxDone+0x6b6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 801127e:	4b43      	ldr	r3, [pc, #268]	; (801138c <ProcessRadioRxDone+0x7bc>)
 8011280:	220b      	movs	r2, #11
 8011282:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                PrepareRxDoneAbort( );
 8011286:	f7ff fc7d 	bl	8010b84 <PrepareRxDoneAbort>
                return;
 801128a:	e1a9      	b.n	80115e0 <ProcessRadioRxDone+0xa10>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801128c:	4b3f      	ldr	r3, [pc, #252]	; (801138c <ProcessRadioRxDone+0x7bc>)
 801128e:	2200      	movs	r2, #0
 8011290:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 8011294:	4a3d      	ldr	r2, [pc, #244]	; (801138c <ProcessRadioRxDone+0x7bc>)
 8011296:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 801129a:	f882 3422 	strb.w	r3, [r2, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 801129e:	4b3b      	ldr	r3, [pc, #236]	; (801138c <ProcessRadioRxDone+0x7bc>)
 80112a0:	2200      	movs	r2, #0
 80112a2:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 80112a6:	4b39      	ldr	r3, [pc, #228]	; (801138c <ProcessRadioRxDone+0x7bc>)
 80112a8:	2200      	movs	r2, #0
 80112aa:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80112ae:	697b      	ldr	r3, [r7, #20]
 80112b0:	4a36      	ldr	r2, [pc, #216]	; (801138c <ProcessRadioRxDone+0x7bc>)
 80112b2:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 80112b6:	697b      	ldr	r3, [r7, #20]
 80112b8:	4a34      	ldr	r2, [pc, #208]	; (801138c <ProcessRadioRxDone+0x7bc>)
 80112ba:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80112be:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80112c2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80112c6:	b2db      	uxtb	r3, r3
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	bf14      	ite	ne
 80112cc:	2301      	movne	r3, #1
 80112ce:	2300      	moveq	r3, #0
 80112d0:	b2da      	uxtb	r2, r3
 80112d2:	4b2e      	ldr	r3, [pc, #184]	; (801138c <ProcessRadioRxDone+0x7bc>)
 80112d4:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80112d8:	4b2c      	ldr	r3, [pc, #176]	; (801138c <ProcessRadioRxDone+0x7bc>)
 80112da:	2200      	movs	r2, #0
 80112dc:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80112e0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80112e4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80112e8:	b2db      	uxtb	r3, r3
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	bf14      	ite	ne
 80112ee:	2301      	movne	r3, #1
 80112f0:	2300      	moveq	r3, #0
 80112f2:	b2da      	uxtb	r2, r3
 80112f4:	4b25      	ldr	r3, [pc, #148]	; (801138c <ProcessRadioRxDone+0x7bc>)
 80112f6:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80112fa:	4b24      	ldr	r3, [pc, #144]	; (801138c <ProcessRadioRxDone+0x7bc>)
 80112fc:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8011300:	2b00      	cmp	r3, #0
 8011302:	d004      	beq.n	801130e <ProcessRadioRxDone+0x73e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8011304:	4b21      	ldr	r3, [pc, #132]	; (801138c <ProcessRadioRxDone+0x7bc>)
 8011306:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801130a:	2b01      	cmp	r3, #1
 801130c:	d106      	bne.n	801131c <ProcessRadioRxDone+0x74c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 801130e:	4b1e      	ldr	r3, [pc, #120]	; (8011388 <ProcessRadioRxDone+0x7b8>)
 8011310:	2200      	movs	r2, #0
 8011312:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 8011314:	4b1c      	ldr	r3, [pc, #112]	; (8011388 <ProcessRadioRxDone+0x7b8>)
 8011316:	2201      	movs	r2, #1
 8011318:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 801131c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8011320:	2b01      	cmp	r3, #1
 8011322:	d104      	bne.n	801132e <ProcessRadioRxDone+0x75e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8011324:	4b19      	ldr	r3, [pc, #100]	; (801138c <ProcessRadioRxDone+0x7bc>)
 8011326:	2202      	movs	r2, #2
 8011328:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 801132c:	e03a      	b.n	80113a4 <ProcessRadioRxDone+0x7d4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 801132e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8011332:	f023 031f 	bic.w	r3, r3, #31
 8011336:	b2db      	uxtb	r3, r3
 8011338:	2ba0      	cmp	r3, #160	; 0xa0
 801133a:	d12b      	bne.n	8011394 <ProcessRadioRxDone+0x7c4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 801133c:	4b12      	ldr	r3, [pc, #72]	; (8011388 <ProcessRadioRxDone+0x7b8>)
 801133e:	2201      	movs	r2, #1
 8011340:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8011344:	4b10      	ldr	r3, [pc, #64]	; (8011388 <ProcessRadioRxDone+0x7b8>)
 8011346:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 801134a:	2b00      	cmp	r3, #0
 801134c:	d102      	bne.n	8011354 <ProcessRadioRxDone+0x784>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 801134e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011350:	4a0d      	ldr	r2, [pc, #52]	; (8011388 <ProcessRadioRxDone+0x7b8>)
 8011352:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8011354:	4b0d      	ldr	r3, [pc, #52]	; (801138c <ProcessRadioRxDone+0x7bc>)
 8011356:	2201      	movs	r2, #1
 8011358:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 801135c:	4b0b      	ldr	r3, [pc, #44]	; (801138c <ProcessRadioRxDone+0x7bc>)
 801135e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8011362:	2b00      	cmp	r3, #0
 8011364:	d01e      	beq.n	80113a4 <ProcessRadioRxDone+0x7d4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 8011366:	4b09      	ldr	r3, [pc, #36]	; (801138c <ProcessRadioRxDone+0x7bc>)
 8011368:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 801136c:	2b01      	cmp	r3, #1
 801136e:	d019      	beq.n	80113a4 <ProcessRadioRxDone+0x7d4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8011370:	4b05      	ldr	r3, [pc, #20]	; (8011388 <ProcessRadioRxDone+0x7b8>)
 8011372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011376:	4a05      	ldr	r2, [pc, #20]	; (801138c <ProcessRadioRxDone+0x7bc>)
 8011378:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 801137c:	4b04      	ldr	r3, [pc, #16]	; (8011390 <ProcessRadioRxDone+0x7c0>)
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	4a02      	ldr	r2, [pc, #8]	; (801138c <ProcessRadioRxDone+0x7bc>)
 8011382:	f8c2 3498 	str.w	r3, [r2, #1176]	; 0x498
 8011386:	e00d      	b.n	80113a4 <ProcessRadioRxDone+0x7d4>
 8011388:	20000bf0 	.word	0x20000bf0
 801138c:	200006d4 	.word	0x200006d4
 8011390:	20001820 	.word	0x20001820
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 8011394:	4b94      	ldr	r3, [pc, #592]	; (80115e8 <ProcessRadioRxDone+0xa18>)
 8011396:	2200      	movs	r2, #0
 8011398:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 801139c:	4b93      	ldr	r3, [pc, #588]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 801139e:	2200      	movs	r2, #0
 80113a0:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 80113a4:	4b90      	ldr	r3, [pc, #576]	; (80115e8 <ProcessRadioRxDone+0xa18>)
 80113a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d106      	bne.n	80113bc <ProcessRadioRxDone+0x7ec>
 80113ae:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80113b2:	f003 0310 	and.w	r3, r3, #16
 80113b6:	b2db      	uxtb	r3, r3
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d008      	beq.n	80113ce <ProcessRadioRxDone+0x7fe>
 80113bc:	4b8a      	ldr	r3, [pc, #552]	; (80115e8 <ProcessRadioRxDone+0xa18>)
 80113be:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d103      	bne.n	80113ce <ProcessRadioRxDone+0x7fe>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 80113c6:	4b89      	ldr	r3, [pc, #548]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 80113c8:	2201      	movs	r2, #1
 80113ca:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 80113ce:	4b87      	ldr	r3, [pc, #540]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 80113d0:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 80113d4:	4a85      	ldr	r2, [pc, #532]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 80113d6:	f892 2440 	ldrb.w	r2, [r2, #1088]	; 0x440
 80113da:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 80113de:	4618      	mov	r0, r3
 80113e0:	f001 ff8a 	bl	80132f8 <RemoveMacCommands>

            switch( fType )
 80113e4:	7cbb      	ldrb	r3, [r7, #18]
 80113e6:	2b03      	cmp	r3, #3
 80113e8:	d873      	bhi.n	80114d2 <ProcessRadioRxDone+0x902>
 80113ea:	a201      	add	r2, pc, #4	; (adr r2, 80113f0 <ProcessRadioRxDone+0x820>)
 80113ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113f0:	08011401 	.word	0x08011401
 80113f4:	08011451 	.word	0x08011451
 80113f8:	08011487 	.word	0x08011487
 80113fc:	080114ad 	.word	0x080114ad
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8011400:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011404:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011408:	b2db      	uxtb	r3, r3
 801140a:	461c      	mov	r4, r3
 801140c:	4b77      	ldr	r3, [pc, #476]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 801140e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8011412:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 8011416:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801141a:	f102 0010 	add.w	r0, r2, #16
 801141e:	9300      	str	r3, [sp, #0]
 8011420:	460b      	mov	r3, r1
 8011422:	4622      	mov	r2, r4
 8011424:	2100      	movs	r1, #0
 8011426:	f000 ff4f 	bl	80122c8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801142a:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 801142e:	4b6f      	ldr	r3, [pc, #444]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 8011430:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8011434:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011436:	4a6d      	ldr	r2, [pc, #436]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 8011438:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 801143c:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8011440:	4b6a      	ldr	r3, [pc, #424]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 8011442:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8011446:	4b69      	ldr	r3, [pc, #420]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 8011448:	2201      	movs	r2, #1
 801144a:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 801144e:	e047      	b.n	80114e0 <ProcessRadioRxDone+0x910>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8011450:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011454:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011458:	b2db      	uxtb	r3, r3
 801145a:	461c      	mov	r4, r3
 801145c:	4b63      	ldr	r3, [pc, #396]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 801145e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8011462:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 8011466:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801146a:	f102 0010 	add.w	r0, r2, #16
 801146e:	9300      	str	r3, [sp, #0]
 8011470:	460b      	mov	r3, r1
 8011472:	4622      	mov	r2, r4
 8011474:	2100      	movs	r1, #0
 8011476:	f000 ff27 	bl	80122c8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801147a:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 801147e:	4b5b      	ldr	r3, [pc, #364]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 8011480:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 8011484:	e02c      	b.n	80114e0 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8011486:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8011488:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 801148c:	4b57      	ldr	r3, [pc, #348]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 801148e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8011492:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 8011496:	9300      	str	r3, [sp, #0]
 8011498:	460b      	mov	r3, r1
 801149a:	2100      	movs	r1, #0
 801149c:	f000 ff14 	bl	80122c8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80114a0:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80114a4:	4b51      	ldr	r3, [pc, #324]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 80114a6:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 80114aa:	e019      	b.n	80114e0 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80114ac:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80114b0:	4b4e      	ldr	r3, [pc, #312]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 80114b2:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80114b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80114b8:	4a4c      	ldr	r2, [pc, #304]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 80114ba:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80114be:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 80114c2:	4b4a      	ldr	r3, [pc, #296]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 80114c4:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 80114c8:	4b48      	ldr	r3, [pc, #288]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 80114ca:	2201      	movs	r2, #1
 80114cc:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 80114d0:	e006      	b.n	80114e0 <ProcessRadioRxDone+0x910>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80114d2:	4b46      	ldr	r3, [pc, #280]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 80114d4:	2201      	movs	r2, #1
 80114d6:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 80114da:	f7ff fb53 	bl	8010b84 <PrepareRxDoneAbort>
                    break;
 80114de:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 80114e0:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80114e4:	2be0      	cmp	r3, #224	; 0xe0
 80114e6:	d118      	bne.n	801151a <ProcessRadioRxDone+0x94a>
 80114e8:	4b3f      	ldr	r3, [pc, #252]	; (80115e8 <ProcessRadioRxDone+0xa18>)
 80114ea:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 80114ee:	f083 0301 	eor.w	r3, r3, #1
 80114f2:	b2db      	uxtb	r3, r3
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d010      	beq.n	801151a <ProcessRadioRxDone+0x94a>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 80114f8:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80114fc:	4b3b      	ldr	r3, [pc, #236]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 80114fe:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 8011502:	4b3a      	ldr	r3, [pc, #232]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 8011504:	2200      	movs	r2, #0
 8011506:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 801150a:	4b38      	ldr	r3, [pc, #224]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 801150c:	2200      	movs	r2, #0
 801150e:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                MacCtx.McpsIndication.RxData = false;
 8011512:	4b36      	ldr	r3, [pc, #216]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 8011514:	2200      	movs	r2, #0
 8011516:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 801151a:	4a34      	ldr	r2, [pc, #208]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 801151c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011520:	f043 0302 	orr.w	r3, r3, #2
 8011524:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

            break;
 8011528:	e035      	b.n	8011596 <ProcessRadioRxDone+0x9c6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 801152a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 801152e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011532:	18d1      	adds	r1, r2, r3
 8011534:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8011538:	b29b      	uxth	r3, r3
 801153a:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 801153e:	1ad3      	subs	r3, r2, r3
 8011540:	b29b      	uxth	r3, r3
 8011542:	461a      	mov	r2, r3
 8011544:	482a      	ldr	r0, [pc, #168]	; (80115f0 <ProcessRadioRxDone+0xa20>)
 8011546:	f009 ff80 	bl	801b44a <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 801154a:	4b28      	ldr	r3, [pc, #160]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 801154c:	2203      	movs	r2, #3
 801154e:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011552:	4b26      	ldr	r3, [pc, #152]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 8011554:	2200      	movs	r2, #0
 8011556:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 801155a:	4b24      	ldr	r3, [pc, #144]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 801155c:	4a24      	ldr	r2, [pc, #144]	; (80115f0 <ProcessRadioRxDone+0xa20>)
 801155e:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8011562:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8011566:	b2da      	uxtb	r2, r3
 8011568:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 801156c:	1ad3      	subs	r3, r2, r3
 801156e:	b2da      	uxtb	r2, r3
 8011570:	4b1e      	ldr	r3, [pc, #120]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 8011572:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 8011576:	4a1d      	ldr	r2, [pc, #116]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 8011578:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801157c:	f043 0302 	orr.w	r3, r3, #2
 8011580:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            break;
 8011584:	e007      	b.n	8011596 <ProcessRadioRxDone+0x9c6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011586:	4b19      	ldr	r3, [pc, #100]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 8011588:	2201      	movs	r2, #1
 801158a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            PrepareRxDoneAbort( );
 801158e:	f7ff faf9 	bl	8010b84 <PrepareRxDoneAbort>
            break;
 8011592:	e000      	b.n	8011596 <ProcessRadioRxDone+0x9c6>
            break;
 8011594:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011596:	4b15      	ldr	r3, [pc, #84]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 8011598:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 801159c:	2b00      	cmp	r3, #0
 801159e:	d004      	beq.n	80115aa <ProcessRadioRxDone+0x9da>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 80115a0:	4b12      	ldr	r3, [pc, #72]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 80115a2:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80115a6:	2b01      	cmp	r3, #1
 80115a8:	d10c      	bne.n	80115c4 <ProcessRadioRxDone+0x9f4>
    {
        if( MacCtx.NodeAckRequested == true )
 80115aa:	4b10      	ldr	r3, [pc, #64]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 80115ac:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d007      	beq.n	80115c4 <ProcessRadioRxDone+0x9f4>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 80115b4:	4b0d      	ldr	r3, [pc, #52]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 80115b6:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d002      	beq.n	80115c4 <ProcessRadioRxDone+0x9f4>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 80115be:	2000      	movs	r0, #0
 80115c0:	f000 fcec 	bl	8011f9c <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 80115c4:	4b09      	ldr	r3, [pc, #36]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 80115c6:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 80115ca:	2b02      	cmp	r3, #2
 80115cc:	d006      	beq.n	80115dc <ProcessRadioRxDone+0xa0c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 80115ce:	4a07      	ldr	r2, [pc, #28]	; (80115ec <ProcessRadioRxDone+0xa1c>)
 80115d0:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80115d4:	f043 0310 	orr.w	r3, r3, #16
 80115d8:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 80115dc:	f7ff fa14 	bl	8010a08 <UpdateRxSlotIdleState>
}
 80115e0:	37a4      	adds	r7, #164	; 0xa4
 80115e2:	46bd      	mov	sp, r7
 80115e4:	bd90      	pop	{r4, r7, pc}
 80115e6:	bf00      	nop
 80115e8:	20000bf0 	.word	0x20000bf0
 80115ec:	200006d4 	.word	0x200006d4
 80115f0:	2000090c 	.word	0x2000090c

080115f4 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80115f8:	4b11      	ldr	r3, [pc, #68]	; (8011640 <ProcessRadioTxTimeout+0x4c>)
 80115fa:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80115fe:	2b02      	cmp	r3, #2
 8011600:	d002      	beq.n	8011608 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 8011602:	4b10      	ldr	r3, [pc, #64]	; (8011644 <ProcessRadioTxTimeout+0x50>)
 8011604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011606:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8011608:	f7ff f9fe 	bl	8010a08 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 801160c:	4b0e      	ldr	r3, [pc, #56]	; (8011648 <ProcessRadioTxTimeout+0x54>)
 801160e:	2202      	movs	r2, #2
 8011610:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8011614:	2002      	movs	r0, #2
 8011616:	f004 fe69 	bl	80162ec <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 801161a:	4b0b      	ldr	r3, [pc, #44]	; (8011648 <ProcessRadioTxTimeout+0x54>)
 801161c:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8011620:	2b00      	cmp	r3, #0
 8011622:	d003      	beq.n	801162c <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 8011624:	4b08      	ldr	r3, [pc, #32]	; (8011648 <ProcessRadioTxTimeout+0x54>)
 8011626:	2201      	movs	r2, #1
 8011628:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 801162c:	4a06      	ldr	r2, [pc, #24]	; (8011648 <ProcessRadioTxTimeout+0x54>)
 801162e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011632:	f043 0310 	orr.w	r3, r3, #16
 8011636:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
}
 801163a:	bf00      	nop
 801163c:	bd80      	pop	{r7, pc}
 801163e:	bf00      	nop
 8011640:	20000bf0 	.word	0x20000bf0
 8011644:	08020e2c 	.word	0x08020e2c
 8011648:	200006d4 	.word	0x200006d4

0801164c <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b084      	sub	sp, #16
 8011650:	af00      	add	r7, sp, #0
 8011652:	4603      	mov	r3, r0
 8011654:	460a      	mov	r2, r1
 8011656:	71fb      	strb	r3, [r7, #7]
 8011658:	4613      	mov	r3, r2
 801165a:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 801165c:	2300      	movs	r3, #0
 801165e:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011660:	4b3d      	ldr	r3, [pc, #244]	; (8011758 <HandleRadioRxErrorTimeout+0x10c>)
 8011662:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011666:	2b02      	cmp	r3, #2
 8011668:	d002      	beq.n	8011670 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 801166a:	4b3c      	ldr	r3, [pc, #240]	; (801175c <HandleRadioRxErrorTimeout+0x110>)
 801166c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801166e:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8011670:	f004 f966 	bl	8015940 <LoRaMacClassBIsBeaconExpected>
 8011674:	4603      	mov	r3, r0
 8011676:	2b00      	cmp	r3, #0
 8011678:	d007      	beq.n	801168a <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 801167a:	2002      	movs	r0, #2
 801167c:	f004 f914 	bl	80158a8 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8011680:	2000      	movs	r0, #0
 8011682:	f004 f936 	bl	80158f2 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8011686:	2301      	movs	r3, #1
 8011688:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801168a:	4b33      	ldr	r3, [pc, #204]	; (8011758 <HandleRadioRxErrorTimeout+0x10c>)
 801168c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011690:	2b01      	cmp	r3, #1
 8011692:	d119      	bne.n	80116c8 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011694:	f004 f95b 	bl	801594e <LoRaMacClassBIsPingExpected>
 8011698:	4603      	mov	r3, r0
 801169a:	2b00      	cmp	r3, #0
 801169c:	d007      	beq.n	80116ae <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801169e:	2000      	movs	r0, #0
 80116a0:	f004 f90c 	bl	80158bc <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80116a4:	2000      	movs	r0, #0
 80116a6:	f004 f92d 	bl	8015904 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 80116aa:	2301      	movs	r3, #1
 80116ac:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 80116ae:	f004 f955 	bl	801595c <LoRaMacClassBIsMulticastExpected>
 80116b2:	4603      	mov	r3, r0
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d007      	beq.n	80116c8 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80116b8:	2000      	movs	r0, #0
 80116ba:	f004 f909 	bl	80158d0 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80116be:	2000      	movs	r0, #0
 80116c0:	f004 f929 	bl	8015916 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 80116c4:	2301      	movs	r3, #1
 80116c6:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 80116c8:	7bfb      	ldrb	r3, [r7, #15]
 80116ca:	f083 0301 	eor.w	r3, r3, #1
 80116ce:	b2db      	uxtb	r3, r3
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d03b      	beq.n	801174c <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80116d4:	4b22      	ldr	r3, [pc, #136]	; (8011760 <HandleRadioRxErrorTimeout+0x114>)
 80116d6:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d122      	bne.n	8011724 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 80116de:	4b20      	ldr	r3, [pc, #128]	; (8011760 <HandleRadioRxErrorTimeout+0x114>)
 80116e0:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d003      	beq.n	80116f0 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 80116e8:	4a1d      	ldr	r2, [pc, #116]	; (8011760 <HandleRadioRxErrorTimeout+0x114>)
 80116ea:	79fb      	ldrb	r3, [r7, #7]
 80116ec:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 80116f0:	79fb      	ldrb	r3, [r7, #7]
 80116f2:	4618      	mov	r0, r3
 80116f4:	f004 fdfa 	bl	80162ec <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 80116f8:	4b17      	ldr	r3, [pc, #92]	; (8011758 <HandleRadioRxErrorTimeout+0x10c>)
 80116fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116fc:	4618      	mov	r0, r3
 80116fe:	f00e f82d 	bl	801f75c <UTIL_TIMER_GetElapsedTime>
 8011702:	4602      	mov	r2, r0
 8011704:	4b16      	ldr	r3, [pc, #88]	; (8011760 <HandleRadioRxErrorTimeout+0x114>)
 8011706:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 801170a:	429a      	cmp	r2, r3
 801170c:	d31e      	bcc.n	801174c <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 801170e:	4815      	ldr	r0, [pc, #84]	; (8011764 <HandleRadioRxErrorTimeout+0x118>)
 8011710:	f00d fef8 	bl	801f504 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8011714:	4a12      	ldr	r2, [pc, #72]	; (8011760 <HandleRadioRxErrorTimeout+0x114>)
 8011716:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801171a:	f043 0310 	orr.w	r3, r3, #16
 801171e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8011722:	e013      	b.n	801174c <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 8011724:	4b0e      	ldr	r3, [pc, #56]	; (8011760 <HandleRadioRxErrorTimeout+0x114>)
 8011726:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 801172a:	2b00      	cmp	r3, #0
 801172c:	d003      	beq.n	8011736 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 801172e:	4a0c      	ldr	r2, [pc, #48]	; (8011760 <HandleRadioRxErrorTimeout+0x114>)
 8011730:	79bb      	ldrb	r3, [r7, #6]
 8011732:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8011736:	79bb      	ldrb	r3, [r7, #6]
 8011738:	4618      	mov	r0, r3
 801173a:	f004 fdd7 	bl	80162ec <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 801173e:	4a08      	ldr	r2, [pc, #32]	; (8011760 <HandleRadioRxErrorTimeout+0x114>)
 8011740:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011744:	f043 0310 	orr.w	r3, r3, #16
 8011748:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 801174c:	f7ff f95c 	bl	8010a08 <UpdateRxSlotIdleState>
}
 8011750:	bf00      	nop
 8011752:	3710      	adds	r7, #16
 8011754:	46bd      	mov	sp, r7
 8011756:	bd80      	pop	{r7, pc}
 8011758:	20000bf0 	.word	0x20000bf0
 801175c:	08020e2c 	.word	0x08020e2c
 8011760:	200006d4 	.word	0x200006d4
 8011764:	20000a6c 	.word	0x20000a6c

08011768 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 8011768:	b580      	push	{r7, lr}
 801176a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 801176c:	2106      	movs	r1, #6
 801176e:	2005      	movs	r0, #5
 8011770:	f7ff ff6c 	bl	801164c <HandleRadioRxErrorTimeout>
}
 8011774:	bf00      	nop
 8011776:	bd80      	pop	{r7, pc}

08011778 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8011778:	b580      	push	{r7, lr}
 801177a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 801177c:	2104      	movs	r1, #4
 801177e:	2003      	movs	r0, #3
 8011780:	f7ff ff64 	bl	801164c <HandleRadioRxErrorTimeout>
}
 8011784:	bf00      	nop
 8011786:	bd80      	pop	{r7, pc}

08011788 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b084      	sub	sp, #16
 801178c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801178e:	f3ef 8310 	mrs	r3, PRIMASK
 8011792:	607b      	str	r3, [r7, #4]
  return(result);
 8011794:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8011796:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8011798:	b672      	cpsid	i
}
 801179a:	bf00      	nop
    events = LoRaMacRadioEvents;
 801179c:	4b1d      	ldr	r3, [pc, #116]	; (8011814 <LoRaMacHandleIrqEvents+0x8c>)
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 80117a2:	4b1c      	ldr	r3, [pc, #112]	; (8011814 <LoRaMacHandleIrqEvents+0x8c>)
 80117a4:	2200      	movs	r2, #0
 80117a6:	601a      	str	r2, [r3, #0]
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80117ac:	68bb      	ldr	r3, [r7, #8]
 80117ae:	f383 8810 	msr	PRIMASK, r3
}
 80117b2:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 80117b4:	683b      	ldr	r3, [r7, #0]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d027      	beq.n	801180a <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 80117ba:	783b      	ldrb	r3, [r7, #0]
 80117bc:	f003 0320 	and.w	r3, r3, #32
 80117c0:	b2db      	uxtb	r3, r3
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d001      	beq.n	80117ca <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 80117c6:	f7ff f937 	bl	8010a38 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 80117ca:	783b      	ldrb	r3, [r7, #0]
 80117cc:	f003 0310 	and.w	r3, r3, #16
 80117d0:	b2db      	uxtb	r3, r3
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d001      	beq.n	80117da <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 80117d6:	f7ff f9fb 	bl	8010bd0 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 80117da:	783b      	ldrb	r3, [r7, #0]
 80117dc:	f003 0308 	and.w	r3, r3, #8
 80117e0:	b2db      	uxtb	r3, r3
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d001      	beq.n	80117ea <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 80117e6:	f7ff ff05 	bl	80115f4 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 80117ea:	783b      	ldrb	r3, [r7, #0]
 80117ec:	f003 0304 	and.w	r3, r3, #4
 80117f0:	b2db      	uxtb	r3, r3
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d001      	beq.n	80117fa <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 80117f6:	f7ff ffb7 	bl	8011768 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 80117fa:	783b      	ldrb	r3, [r7, #0]
 80117fc:	f003 0302 	and.w	r3, r3, #2
 8011800:	b2db      	uxtb	r3, r3
 8011802:	2b00      	cmp	r3, #0
 8011804:	d001      	beq.n	801180a <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 8011806:	f7ff ffb7 	bl	8011778 <ProcessRadioRxTimeout>
        }
    }
}
 801180a:	bf00      	nop
 801180c:	3710      	adds	r7, #16
 801180e:	46bd      	mov	sp, r7
 8011810:	bd80      	pop	{r7, pc}
 8011812:	bf00      	nop
 8011814:	20001818 	.word	0x20001818

08011818 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8011818:	b480      	push	{r7}
 801181a:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 801181c:	4b10      	ldr	r3, [pc, #64]	; (8011860 <LoRaMacIsBusy+0x48>)
 801181e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011822:	2b01      	cmp	r3, #1
 8011824:	d101      	bne.n	801182a <LoRaMacIsBusy+0x12>
    {
        return false;
 8011826:	2300      	movs	r3, #0
 8011828:	e015      	b.n	8011856 <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 801182a:	4b0e      	ldr	r3, [pc, #56]	; (8011864 <LoRaMacIsBusy+0x4c>)
 801182c:	781b      	ldrb	r3, [r3, #0]
 801182e:	f003 0301 	and.w	r3, r3, #1
 8011832:	b2db      	uxtb	r3, r3
 8011834:	2b00      	cmp	r3, #0
 8011836:	d001      	beq.n	801183c <LoRaMacIsBusy+0x24>
    {
        return true;
 8011838:	2301      	movs	r3, #1
 801183a:	e00c      	b.n	8011856 <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 801183c:	4b08      	ldr	r3, [pc, #32]	; (8011860 <LoRaMacIsBusy+0x48>)
 801183e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011842:	2b00      	cmp	r3, #0
 8011844:	d106      	bne.n	8011854 <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8011846:	4b06      	ldr	r3, [pc, #24]	; (8011860 <LoRaMacIsBusy+0x48>)
 8011848:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 801184c:	2b01      	cmp	r3, #1
 801184e:	d101      	bne.n	8011854 <LoRaMacIsBusy+0x3c>
    {
        return false;
 8011850:	2300      	movs	r3, #0
 8011852:	e000      	b.n	8011856 <LoRaMacIsBusy+0x3e>
    }
    return true;
 8011854:	2301      	movs	r3, #1
}
 8011856:	4618      	mov	r0, r3
 8011858:	46bd      	mov	sp, r7
 801185a:	bc80      	pop	{r7}
 801185c:	4770      	bx	lr
 801185e:	bf00      	nop
 8011860:	200006d4 	.word	0x200006d4
 8011864:	20001818 	.word	0x20001818

08011868 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 8011868:	b480      	push	{r7}
 801186a:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 801186c:	4b05      	ldr	r3, [pc, #20]	; (8011884 <LoRaMacIsStopped+0x1c>)
 801186e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011872:	2b01      	cmp	r3, #1
 8011874:	d101      	bne.n	801187a <LoRaMacIsStopped+0x12>
    {
        return true;
 8011876:	2301      	movs	r3, #1
 8011878:	e000      	b.n	801187c <LoRaMacIsStopped+0x14>
    }
    return false;
 801187a:	2300      	movs	r3, #0
}
 801187c:	4618      	mov	r0, r3
 801187e:	46bd      	mov	sp, r7
 8011880:	bc80      	pop	{r7}
 8011882:	4770      	bx	lr
 8011884:	200006d4 	.word	0x200006d4

08011888 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8011888:	b480      	push	{r7}
 801188a:	b083      	sub	sp, #12
 801188c:	af00      	add	r7, sp, #0
 801188e:	4603      	mov	r3, r0
 8011890:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 8011892:	4a04      	ldr	r2, [pc, #16]	; (80118a4 <LoRaMacEnableRequests+0x1c>)
 8011894:	79fb      	ldrb	r3, [r7, #7]
 8011896:	f882 3492 	strb.w	r3, [r2, #1170]	; 0x492
}
 801189a:	bf00      	nop
 801189c:	370c      	adds	r7, #12
 801189e:	46bd      	mov	sp, r7
 80118a0:	bc80      	pop	{r7}
 80118a2:	4770      	bx	lr
 80118a4:	200006d4 	.word	0x200006d4

080118a8 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b082      	sub	sp, #8
 80118ac:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 80118ae:	4b2c      	ldr	r3, [pc, #176]	; (8011960 <LoRaMacHandleRequestEvents+0xb8>)
 80118b0:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80118b4:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 80118b6:	4b2a      	ldr	r3, [pc, #168]	; (8011960 <LoRaMacHandleRequestEvents+0xb8>)
 80118b8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d14a      	bne.n	8011956 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80118c0:	4b27      	ldr	r3, [pc, #156]	; (8011960 <LoRaMacHandleRequestEvents+0xb8>)
 80118c2:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80118c6:	f003 0301 	and.w	r3, r3, #1
 80118ca:	b2db      	uxtb	r3, r3
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d006      	beq.n	80118de <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 80118d0:	4a23      	ldr	r2, [pc, #140]	; (8011960 <LoRaMacHandleRequestEvents+0xb8>)
 80118d2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80118d6:	f36f 0300 	bfc	r3, #0, #1
 80118da:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80118de:	4b20      	ldr	r3, [pc, #128]	; (8011960 <LoRaMacHandleRequestEvents+0xb8>)
 80118e0:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80118e4:	f003 0304 	and.w	r3, r3, #4
 80118e8:	b2db      	uxtb	r3, r3
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d006      	beq.n	80118fc <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80118ee:	4a1c      	ldr	r2, [pc, #112]	; (8011960 <LoRaMacHandleRequestEvents+0xb8>)
 80118f0:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80118f4:	f36f 0382 	bfc	r3, #2, #1
 80118f8:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80118fc:	2001      	movs	r0, #1
 80118fe:	f7ff ffc3 	bl	8011888 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8011902:	793b      	ldrb	r3, [r7, #4]
 8011904:	f003 0301 	and.w	r3, r3, #1
 8011908:	b2db      	uxtb	r3, r3
 801190a:	2b00      	cmp	r3, #0
 801190c:	d005      	beq.n	801191a <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 801190e:	4b14      	ldr	r3, [pc, #80]	; (8011960 <LoRaMacHandleRequestEvents+0xb8>)
 8011910:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	4813      	ldr	r0, [pc, #76]	; (8011964 <LoRaMacHandleRequestEvents+0xbc>)
 8011918:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 801191a:	793b      	ldrb	r3, [r7, #4]
 801191c:	f003 0304 	and.w	r3, r3, #4
 8011920:	b2db      	uxtb	r3, r3
 8011922:	2b00      	cmp	r3, #0
 8011924:	d00e      	beq.n	8011944 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8011926:	4810      	ldr	r0, [pc, #64]	; (8011968 <LoRaMacHandleRequestEvents+0xc0>)
 8011928:	f004 fd2e 	bl	8016388 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 801192c:	f004 fd7e 	bl	801642c <LoRaMacConfirmQueueGetCnt>
 8011930:	4603      	mov	r3, r0
 8011932:	2b00      	cmp	r3, #0
 8011934:	d006      	beq.n	8011944 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011936:	4a0a      	ldr	r2, [pc, #40]	; (8011960 <LoRaMacHandleRequestEvents+0xb8>)
 8011938:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801193c:	f043 0304 	orr.w	r3, r3, #4
 8011940:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 8011944:	f004 f828 	bl	8015998 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 8011948:	4a05      	ldr	r2, [pc, #20]	; (8011960 <LoRaMacHandleRequestEvents+0xb8>)
 801194a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801194e:	f36f 1304 	bfc	r3, #4, #1
 8011952:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 8011956:	bf00      	nop
 8011958:	3708      	adds	r7, #8
 801195a:	46bd      	mov	sp, r7
 801195c:	bd80      	pop	{r7, pc}
 801195e:	bf00      	nop
 8011960:	200006d4 	.word	0x200006d4
 8011964:	20000b14 	.word	0x20000b14
 8011968:	20000b28 	.word	0x20000b28

0801196c <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 801196c:	b580      	push	{r7, lr}
 801196e:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8011970:	4b16      	ldr	r3, [pc, #88]	; (80119cc <LoRaMacHandleIndicationEvents+0x60>)
 8011972:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011976:	f003 0308 	and.w	r3, r3, #8
 801197a:	b2db      	uxtb	r3, r3
 801197c:	2b00      	cmp	r3, #0
 801197e:	d00d      	beq.n	801199c <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8011980:	4a12      	ldr	r2, [pc, #72]	; (80119cc <LoRaMacHandleIndicationEvents+0x60>)
 8011982:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011986:	f36f 03c3 	bfc	r3, #3, #1
 801198a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 801198e:	4b0f      	ldr	r3, [pc, #60]	; (80119cc <LoRaMacHandleIndicationEvents+0x60>)
 8011990:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011994:	68db      	ldr	r3, [r3, #12]
 8011996:	490e      	ldr	r1, [pc, #56]	; (80119d0 <LoRaMacHandleIndicationEvents+0x64>)
 8011998:	480e      	ldr	r0, [pc, #56]	; (80119d4 <LoRaMacHandleIndicationEvents+0x68>)
 801199a:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801199c:	4b0b      	ldr	r3, [pc, #44]	; (80119cc <LoRaMacHandleIndicationEvents+0x60>)
 801199e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80119a2:	f003 0302 	and.w	r3, r3, #2
 80119a6:	b2db      	uxtb	r3, r3
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d00d      	beq.n	80119c8 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 80119ac:	4a07      	ldr	r2, [pc, #28]	; (80119cc <LoRaMacHandleIndicationEvents+0x60>)
 80119ae:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80119b2:	f36f 0341 	bfc	r3, #1, #1
 80119b6:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 80119ba:	4b04      	ldr	r3, [pc, #16]	; (80119cc <LoRaMacHandleIndicationEvents+0x60>)
 80119bc:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 80119c0:	685b      	ldr	r3, [r3, #4]
 80119c2:	4903      	ldr	r1, [pc, #12]	; (80119d0 <LoRaMacHandleIndicationEvents+0x64>)
 80119c4:	4804      	ldr	r0, [pc, #16]	; (80119d8 <LoRaMacHandleIndicationEvents+0x6c>)
 80119c6:	4798      	blx	r3
    }
}
 80119c8:	bf00      	nop
 80119ca:	bd80      	pop	{r7, pc}
 80119cc:	200006d4 	.word	0x200006d4
 80119d0:	20000b60 	.word	0x20000b60
 80119d4:	20000b3c 	.word	0x20000b3c
 80119d8:	20000af4 	.word	0x20000af4

080119dc <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 80119dc:	b580      	push	{r7, lr}
 80119de:	b082      	sub	sp, #8
 80119e0:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80119e2:	4b2a      	ldr	r3, [pc, #168]	; (8011a8c <LoRaMacHandleMcpsRequest+0xb0>)
 80119e4:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80119e8:	f003 0301 	and.w	r3, r3, #1
 80119ec:	b2db      	uxtb	r3, r3
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d048      	beq.n	8011a84 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 80119f2:	2300      	movs	r3, #0
 80119f4:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 80119f6:	2300      	movs	r3, #0
 80119f8:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80119fa:	4b24      	ldr	r3, [pc, #144]	; (8011a8c <LoRaMacHandleMcpsRequest+0xb0>)
 80119fc:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d004      	beq.n	8011a0e <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8011a04:	4b21      	ldr	r3, [pc, #132]	; (8011a8c <LoRaMacHandleMcpsRequest+0xb0>)
 8011a06:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8011a0a:	2b03      	cmp	r3, #3
 8011a0c:	d104      	bne.n	8011a18 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8011a0e:	f002 f943 	bl	8013c98 <CheckRetransUnconfirmedUplink>
 8011a12:	4603      	mov	r3, r0
 8011a14:	71fb      	strb	r3, [r7, #7]
 8011a16:	e010      	b.n	8011a3a <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8011a18:	4b1c      	ldr	r3, [pc, #112]	; (8011a8c <LoRaMacHandleMcpsRequest+0xb0>)
 8011a1a:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 8011a1e:	2b01      	cmp	r3, #1
 8011a20:	d10b      	bne.n	8011a3a <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 8011a22:	4b1a      	ldr	r3, [pc, #104]	; (8011a8c <LoRaMacHandleMcpsRequest+0xb0>)
 8011a24:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d004      	beq.n	8011a36 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8011a2c:	f002 f960 	bl	8013cf0 <CheckRetransConfirmedUplink>
 8011a30:	4603      	mov	r3, r0
 8011a32:	71fb      	strb	r3, [r7, #7]
 8011a34:	e001      	b.n	8011a3a <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 8011a36:	2301      	movs	r3, #1
 8011a38:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 8011a3a:	79fb      	ldrb	r3, [r7, #7]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d00d      	beq.n	8011a5c <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8011a40:	4813      	ldr	r0, [pc, #76]	; (8011a90 <LoRaMacHandleMcpsRequest+0xb4>)
 8011a42:	f00d fd5f 	bl	801f504 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8011a46:	4b11      	ldr	r3, [pc, #68]	; (8011a8c <LoRaMacHandleMcpsRequest+0xb0>)
 8011a48:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011a4c:	f023 0320 	bic.w	r3, r3, #32
 8011a50:	4a0e      	ldr	r2, [pc, #56]	; (8011a8c <LoRaMacHandleMcpsRequest+0xb0>)
 8011a52:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 8011a56:	f002 f985 	bl	8013d64 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 8011a5a:	e013      	b.n	8011a84 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 8011a5c:	79bb      	ldrb	r3, [r7, #6]
 8011a5e:	f083 0301 	eor.w	r3, r3, #1
 8011a62:	b2db      	uxtb	r3, r3
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d00d      	beq.n	8011a84 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8011a68:	4a08      	ldr	r2, [pc, #32]	; (8011a8c <LoRaMacHandleMcpsRequest+0xb0>)
 8011a6a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011a6e:	f36f 1304 	bfc	r3, #4, #1
 8011a72:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 8011a76:	4b05      	ldr	r3, [pc, #20]	; (8011a8c <LoRaMacHandleMcpsRequest+0xb0>)
 8011a78:	2200      	movs	r2, #0
 8011a7a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 8011a7e:	2000      	movs	r0, #0
 8011a80:	f000 f9c8 	bl	8011e14 <OnTxDelayedTimerEvent>
}
 8011a84:	bf00      	nop
 8011a86:	3708      	adds	r7, #8
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}
 8011a8c:	200006d4 	.word	0x200006d4
 8011a90:	20000a3c 	.word	0x20000a3c

08011a94 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011a98:	4b18      	ldr	r3, [pc, #96]	; (8011afc <LoRaMacHandleMlmeRequest+0x68>)
 8011a9a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011a9e:	f003 0304 	and.w	r3, r3, #4
 8011aa2:	b2db      	uxtb	r3, r3
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d026      	beq.n	8011af6 <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8011aa8:	2001      	movs	r0, #1
 8011aaa:	f004 fc53 	bl	8016354 <LoRaMacConfirmQueueIsCmdActive>
 8011aae:	4603      	mov	r3, r0
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d012      	beq.n	8011ada <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8011ab4:	2001      	movs	r0, #1
 8011ab6:	f004 fbef 	bl	8016298 <LoRaMacConfirmQueueGetStatus>
 8011aba:	4603      	mov	r3, r0
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d103      	bne.n	8011ac8 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8011ac0:	4b0e      	ldr	r3, [pc, #56]	; (8011afc <LoRaMacHandleMlmeRequest+0x68>)
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011ac8:	4b0c      	ldr	r3, [pc, #48]	; (8011afc <LoRaMacHandleMlmeRequest+0x68>)
 8011aca:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011ace:	f023 0302 	bic.w	r3, r3, #2
 8011ad2:	4a0a      	ldr	r2, [pc, #40]	; (8011afc <LoRaMacHandleMlmeRequest+0x68>)
 8011ad4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8011ad8:	e00d      	b.n	8011af6 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 8011ada:	2006      	movs	r0, #6
 8011adc:	f004 fc3a 	bl	8016354 <LoRaMacConfirmQueueIsCmdActive>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d007      	beq.n	8011af6 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011ae6:	4b05      	ldr	r3, [pc, #20]	; (8011afc <LoRaMacHandleMlmeRequest+0x68>)
 8011ae8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011aec:	f023 0302 	bic.w	r3, r3, #2
 8011af0:	4a02      	ldr	r2, [pc, #8]	; (8011afc <LoRaMacHandleMlmeRequest+0x68>)
 8011af2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8011af6:	bf00      	nop
 8011af8:	bd80      	pop	{r7, pc}
 8011afa:	bf00      	nop
 8011afc:	200006d4 	.word	0x200006d4

08011b00 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011b04:	200b      	movs	r0, #11
 8011b06:	f004 fc25 	bl	8016354 <LoRaMacConfirmQueueIsCmdActive>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d019      	beq.n	8011b44 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8011b10:	4b0e      	ldr	r3, [pc, #56]	; (8011b4c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011b12:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011b16:	f003 0301 	and.w	r3, r3, #1
 8011b1a:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d111      	bne.n	8011b44 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011b20:	4b0a      	ldr	r3, [pc, #40]	; (8011b4c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011b22:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011b26:	f003 0304 	and.w	r3, r3, #4
 8011b2a:	b2db      	uxtb	r3, r3
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d009      	beq.n	8011b44 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011b30:	4b06      	ldr	r3, [pc, #24]	; (8011b4c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011b32:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011b36:	f023 0302 	bic.w	r3, r3, #2
 8011b3a:	4a04      	ldr	r2, [pc, #16]	; (8011b4c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011b3c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8011b40:	2301      	movs	r3, #1
 8011b42:	e000      	b.n	8011b46 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 8011b44:	2300      	movs	r3, #0
}
 8011b46:	4618      	mov	r0, r3
 8011b48:	bd80      	pop	{r7, pc}
 8011b4a:	bf00      	nop
 8011b4c:	200006d4 	.word	0x200006d4

08011b50 <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 8011b50:	b480      	push	{r7}
 8011b52:	b083      	sub	sp, #12
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	4603      	mov	r3, r0
 8011b58:	71fb      	strb	r3, [r7, #7]
 8011b5a:	460b      	mov	r3, r1
 8011b5c:	71bb      	strb	r3, [r7, #6]
 8011b5e:	4613      	mov	r3, r2
 8011b60:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 8011b62:	79fb      	ldrb	r3, [r7, #7]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d00a      	beq.n	8011b7e <CheckForMinimumAbpDatarate+0x2e>
 8011b68:	79bb      	ldrb	r3, [r7, #6]
 8011b6a:	2b01      	cmp	r3, #1
 8011b6c:	d107      	bne.n	8011b7e <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 8011b6e:	797b      	ldrb	r3, [r7, #5]
 8011b70:	f083 0301 	eor.w	r3, r3, #1
 8011b74:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d001      	beq.n	8011b7e <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	e000      	b.n	8011b80 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 8011b7e:	2300      	movs	r3, #0
}
 8011b80:	4618      	mov	r0, r3
 8011b82:	370c      	adds	r7, #12
 8011b84:	46bd      	mov	sp, r7
 8011b86:	bc80      	pop	{r7}
 8011b88:	4770      	bx	lr
	...

08011b8c <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 8011b8c:	b480      	push	{r7}
 8011b8e:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8011b90:	4b0d      	ldr	r3, [pc, #52]	; (8011bc8 <LoRaMacCheckForRxAbort+0x3c>)
 8011b92:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d00f      	beq.n	8011bbe <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8011b9e:	4b0a      	ldr	r3, [pc, #40]	; (8011bc8 <LoRaMacCheckForRxAbort+0x3c>)
 8011ba0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011ba4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011ba8:	4a07      	ldr	r2, [pc, #28]	; (8011bc8 <LoRaMacCheckForRxAbort+0x3c>)
 8011baa:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011bae:	4b06      	ldr	r3, [pc, #24]	; (8011bc8 <LoRaMacCheckForRxAbort+0x3c>)
 8011bb0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011bb4:	f023 0302 	bic.w	r3, r3, #2
 8011bb8:	4a03      	ldr	r2, [pc, #12]	; (8011bc8 <LoRaMacCheckForRxAbort+0x3c>)
 8011bba:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8011bbe:	bf00      	nop
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	bc80      	pop	{r7}
 8011bc4:	4770      	bx	lr
 8011bc6:	bf00      	nop
 8011bc8:	200006d4 	.word	0x200006d4

08011bcc <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b084      	sub	sp, #16
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8011bd8:	2300      	movs	r3, #0
 8011bda:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 8011bdc:	4b51      	ldr	r3, [pc, #324]	; (8011d24 <LoRaMacHandleNvm+0x158>)
 8011bde:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	f040 8099 	bne.w	8011d1a <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	2124      	movs	r1, #36	; 0x24
 8011bec:	4618      	mov	r0, r3
 8011bee:	f009 fc81 	bl	801b4f4 <Crc32>
 8011bf2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bf8:	68ba      	ldr	r2, [r7, #8]
 8011bfa:	429a      	cmp	r2, r3
 8011bfc:	d006      	beq.n	8011c0c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	68ba      	ldr	r2, [r7, #8]
 8011c02:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8011c04:	89fb      	ldrh	r3, [r7, #14]
 8011c06:	f043 0301 	orr.w	r3, r3, #1
 8011c0a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	3328      	adds	r3, #40	; 0x28
 8011c10:	211c      	movs	r1, #28
 8011c12:	4618      	mov	r0, r3
 8011c14:	f009 fc6e 	bl	801b4f4 <Crc32>
 8011c18:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c1e:	68ba      	ldr	r2, [r7, #8]
 8011c20:	429a      	cmp	r2, r3
 8011c22:	d006      	beq.n	8011c32 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	68ba      	ldr	r2, [r7, #8]
 8011c28:	645a      	str	r2, [r3, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8011c2a:	89fb      	ldrh	r3, [r7, #14]
 8011c2c:	f043 0302 	orr.w	r3, r3, #2
 8011c30:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	3348      	adds	r3, #72	; 0x48
 8011c36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	f009 fc5a 	bl	801b4f4 <Crc32>
 8011c40:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8011c48:	68ba      	ldr	r2, [r7, #8]
 8011c4a:	429a      	cmp	r2, r3
 8011c4c:	d007      	beq.n	8011c5e <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	68ba      	ldr	r2, [r7, #8]
 8011c52:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8011c56:	89fb      	ldrh	r3, [r7, #14]
 8011c58:	f043 0304 	orr.w	r3, r3, #4
 8011c5c:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8011c64:	21d4      	movs	r1, #212	; 0xd4
 8011c66:	4618      	mov	r0, r3
 8011c68:	f009 fc44 	bl	801b4f4 <Crc32>
 8011c6c:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8011c74:	68ba      	ldr	r2, [r7, #8]
 8011c76:	429a      	cmp	r2, r3
 8011c78:	d007      	beq.n	8011c8a <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	68ba      	ldr	r2, [r7, #8]
 8011c7e:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8011c82:	89fb      	ldrh	r3, [r7, #14]
 8011c84:	f043 0308 	orr.w	r3, r3, #8
 8011c88:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8011c90:	2110      	movs	r1, #16
 8011c92:	4618      	mov	r0, r3
 8011c94:	f009 fc2e 	bl	801b4f4 <Crc32>
 8011c98:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8011ca0:	68ba      	ldr	r2, [r7, #8]
 8011ca2:	429a      	cmp	r2, r3
 8011ca4:	d007      	beq.n	8011cb6 <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	68ba      	ldr	r2, [r7, #8]
 8011caa:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8011cae:	89fb      	ldrh	r3, [r7, #14]
 8011cb0:	f043 0310 	orr.w	r3, r3, #16
 8011cb4:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8011cbc:	f44f 715e 	mov.w	r1, #888	; 0x378
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	f009 fc17 	bl	801b4f4 <Crc32>
 8011cc6:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8011cce:	68ba      	ldr	r2, [r7, #8]
 8011cd0:	429a      	cmp	r2, r3
 8011cd2:	d007      	beq.n	8011ce4 <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	68ba      	ldr	r2, [r7, #8]
 8011cd8:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8011cdc:	89fb      	ldrh	r3, [r7, #14]
 8011cde:	f043 0320 	orr.w	r3, r3, #32
 8011ce2:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 8011cea:	2114      	movs	r1, #20
 8011cec:	4618      	mov	r0, r3
 8011cee:	f009 fc01 	bl	801b4f4 <Crc32>
 8011cf2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 8011cfa:	68ba      	ldr	r2, [r7, #8]
 8011cfc:	429a      	cmp	r2, r3
 8011cfe:	d007      	beq.n	8011d10 <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	68ba      	ldr	r2, [r7, #8]
 8011d04:	f8c3 25c8 	str.w	r2, [r3, #1480]	; 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8011d08:	89fb      	ldrh	r3, [r7, #14]
 8011d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d0e:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8011d10:	89fb      	ldrh	r3, [r7, #14]
 8011d12:	4618      	mov	r0, r3
 8011d14:	f002 f878 	bl	8013e08 <CallNvmDataChangeCallback>
 8011d18:	e000      	b.n	8011d1c <LoRaMacHandleNvm+0x150>
        return;
 8011d1a:	bf00      	nop
}
 8011d1c:	3710      	adds	r7, #16
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	bd80      	pop	{r7, pc}
 8011d22:	bf00      	nop
 8011d24:	200006d4 	.word	0x200006d4

08011d28 <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b084      	sub	sp, #16
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
 8011d30:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 8011d32:	683b      	ldr	r3, [r7, #0]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d00d      	beq.n	8011d54 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 8011d38:	6838      	ldr	r0, [r7, #0]
 8011d3a:	f00d fd0f 	bl	801f75c <UTIL_TIMER_GetElapsedTime>
 8011d3e:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 8011d40:	68fa      	ldr	r2, [r7, #12]
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	429a      	cmp	r2, r3
 8011d46:	d905      	bls.n	8011d54 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 8011d48:	4b05      	ldr	r3, [pc, #20]	; (8011d60 <LoRaMacHandleResponseTimeout+0x38>)
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 8011d50:	2301      	movs	r3, #1
 8011d52:	e000      	b.n	8011d56 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 8011d54:	2300      	movs	r3, #0
}
 8011d56:	4618      	mov	r0, r3
 8011d58:	3710      	adds	r7, #16
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	bd80      	pop	{r7, pc}
 8011d5e:	bf00      	nop
 8011d60:	20000bf0 	.word	0x20000bf0

08011d64 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b082      	sub	sp, #8
 8011d68:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 8011d6e:	f7ff fd0b 	bl	8011788 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8011d72:	f003 fe80 	bl	8015a76 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8011d76:	4b25      	ldr	r3, [pc, #148]	; (8011e0c <LoRaMacProcess+0xa8>)
 8011d78:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011d7c:	f003 0310 	and.w	r3, r3, #16
 8011d80:	b2db      	uxtb	r3, r3
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d023      	beq.n	8011dce <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8011d86:	2000      	movs	r0, #0
 8011d88:	f7ff fd7e 	bl	8011888 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8011d8c:	f7ff fefe 	bl	8011b8c <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8011d90:	f002 f858 	bl	8013e44 <IsRequestPending>
 8011d94:	4603      	mov	r3, r0
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d006      	beq.n	8011da8 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8011d9a:	f7ff feb1 	bl	8011b00 <LoRaMacCheckForBeaconAcquisition>
 8011d9e:	4603      	mov	r3, r0
 8011da0:	461a      	mov	r2, r3
 8011da2:	79fb      	ldrb	r3, [r7, #7]
 8011da4:	4313      	orrs	r3, r2
 8011da6:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8011da8:	79fb      	ldrb	r3, [r7, #7]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d103      	bne.n	8011db6 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 8011dae:	f7ff fe71 	bl	8011a94 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8011db2:	f7ff fe13 	bl	80119dc <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8011db6:	f7ff fd77 	bl	80118a8 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011dba:	2001      	movs	r0, #1
 8011dbc:	f7ff fd64 	bl	8011888 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8011dc0:	4a12      	ldr	r2, [pc, #72]	; (8011e0c <LoRaMacProcess+0xa8>)
 8011dc2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011dc6:	f043 0320 	orr.w	r3, r3, #32
 8011dca:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
    LoRaMacHandleIndicationEvents( );
 8011dce:	f7ff fdcd 	bl	801196c <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8011dd2:	4b0e      	ldr	r3, [pc, #56]	; (8011e0c <LoRaMacProcess+0xa8>)
 8011dd4:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8011dd8:	2b02      	cmp	r3, #2
 8011dda:	d101      	bne.n	8011de0 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 8011ddc:	f001 fc1a 	bl	8013614 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8011de0:	4b0a      	ldr	r3, [pc, #40]	; (8011e0c <LoRaMacProcess+0xa8>)
 8011de2:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011de6:	f003 0320 	and.w	r3, r3, #32
 8011dea:	b2db      	uxtb	r3, r3
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d009      	beq.n	8011e04 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8011df0:	4a06      	ldr	r2, [pc, #24]	; (8011e0c <LoRaMacProcess+0xa8>)
 8011df2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011df6:	f36f 1345 	bfc	r3, #5, #1
 8011dfa:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        LoRaMacHandleNvm( &Nvm );
 8011dfe:	4804      	ldr	r0, [pc, #16]	; (8011e10 <LoRaMacProcess+0xac>)
 8011e00:	f7ff fee4 	bl	8011bcc <LoRaMacHandleNvm>
    }
}
 8011e04:	bf00      	nop
 8011e06:	3708      	adds	r7, #8
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	bd80      	pop	{r7, pc}
 8011e0c:	200006d4 	.word	0x200006d4
 8011e10:	20000bf0 	.word	0x20000bf0

08011e14 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b082      	sub	sp, #8
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8011e1c:	481e      	ldr	r0, [pc, #120]	; (8011e98 <OnTxDelayedTimerEvent+0x84>)
 8011e1e:	f00d fb71 	bl	801f504 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8011e22:	4b1e      	ldr	r3, [pc, #120]	; (8011e9c <OnTxDelayedTimerEvent+0x88>)
 8011e24:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e28:	f023 0320 	bic.w	r3, r3, #32
 8011e2c:	4a1b      	ldr	r2, [pc, #108]	; (8011e9c <OnTxDelayedTimerEvent+0x88>)
 8011e2e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8011e32:	4b1b      	ldr	r3, [pc, #108]	; (8011ea0 <OnTxDelayedTimerEvent+0x8c>)
 8011e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011e38:	4a18      	ldr	r2, [pc, #96]	; (8011e9c <OnTxDelayedTimerEvent+0x88>)
 8011e3a:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 8011e3e:	4611      	mov	r1, r2
 8011e40:	4618      	mov	r0, r3
 8011e42:	f7ff ff71 	bl	8011d28 <LoRaMacHandleResponseTimeout>
 8011e46:	4603      	mov	r3, r0
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d11e      	bne.n	8011e8a <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 8011e4c:	2001      	movs	r0, #1
 8011e4e:	f001 f92b 	bl	80130a8 <ScheduleTx>
 8011e52:	4603      	mov	r3, r0
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d01a      	beq.n	8011e8e <OnTxDelayedTimerEvent+0x7a>
 8011e58:	2b0b      	cmp	r3, #11
 8011e5a:	d018      	beq.n	8011e8e <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011e5c:	4b10      	ldr	r3, [pc, #64]	; (8011ea0 <OnTxDelayedTimerEvent+0x8c>)
 8011e5e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011e62:	b2da      	uxtb	r2, r3
 8011e64:	4b0d      	ldr	r3, [pc, #52]	; (8011e9c <OnTxDelayedTimerEvent+0x88>)
 8011e66:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8011e6a:	4b0c      	ldr	r3, [pc, #48]	; (8011e9c <OnTxDelayedTimerEvent+0x88>)
 8011e6c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8011e70:	4b0a      	ldr	r3, [pc, #40]	; (8011e9c <OnTxDelayedTimerEvent+0x88>)
 8011e72:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8011e76:	4b09      	ldr	r3, [pc, #36]	; (8011e9c <OnTxDelayedTimerEvent+0x88>)
 8011e78:	2209      	movs	r2, #9
 8011e7a:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8011e7e:	2009      	movs	r0, #9
 8011e80:	f004 fa34 	bl	80162ec <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8011e84:	f001 ff6e 	bl	8013d64 <StopRetransmission>
            break;
 8011e88:	e002      	b.n	8011e90 <OnTxDelayedTimerEvent+0x7c>
        return;
 8011e8a:	bf00      	nop
 8011e8c:	e000      	b.n	8011e90 <OnTxDelayedTimerEvent+0x7c>
            break;
 8011e8e:	bf00      	nop
        }
    }
}
 8011e90:	3708      	adds	r7, #8
 8011e92:	46bd      	mov	sp, r7
 8011e94:	bd80      	pop	{r7, pc}
 8011e96:	bf00      	nop
 8011e98:	20000a3c 	.word	0x20000a3c
 8011e9c:	200006d4 	.word	0x200006d4
 8011ea0:	20000bf0 	.word	0x20000bf0

08011ea4 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b082      	sub	sp, #8
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8011eac:	4b17      	ldr	r3, [pc, #92]	; (8011f0c <OnRxWindow1TimerEvent+0x68>)
 8011eae:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8011eb2:	4b16      	ldr	r3, [pc, #88]	; (8011f0c <OnRxWindow1TimerEvent+0x68>)
 8011eb4:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8011eb8:	4b15      	ldr	r3, [pc, #84]	; (8011f10 <OnRxWindow1TimerEvent+0x6c>)
 8011eba:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8011ebe:	b25a      	sxtb	r2, r3
 8011ec0:	4b12      	ldr	r3, [pc, #72]	; (8011f0c <OnRxWindow1TimerEvent+0x68>)
 8011ec2:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011ec6:	4b12      	ldr	r3, [pc, #72]	; (8011f10 <OnRxWindow1TimerEvent+0x6c>)
 8011ec8:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8011ecc:	4b0f      	ldr	r3, [pc, #60]	; (8011f0c <OnRxWindow1TimerEvent+0x68>)
 8011ece:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011ed2:	4b0f      	ldr	r3, [pc, #60]	; (8011f10 <OnRxWindow1TimerEvent+0x6c>)
 8011ed4:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8011ed8:	4b0c      	ldr	r3, [pc, #48]	; (8011f0c <OnRxWindow1TimerEvent+0x68>)
 8011eda:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8011ede:	4b0b      	ldr	r3, [pc, #44]	; (8011f0c <OnRxWindow1TimerEvent+0x68>)
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8011ee6:	4b09      	ldr	r3, [pc, #36]	; (8011f0c <OnRxWindow1TimerEvent+0x68>)
 8011ee8:	2200      	movs	r2, #0
 8011eea:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011eee:	4b08      	ldr	r3, [pc, #32]	; (8011f10 <OnRxWindow1TimerEvent+0x6c>)
 8011ef0:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8011ef4:	4b05      	ldr	r3, [pc, #20]	; (8011f0c <OnRxWindow1TimerEvent+0x68>)
 8011ef6:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8011efa:	4906      	ldr	r1, [pc, #24]	; (8011f14 <OnRxWindow1TimerEvent+0x70>)
 8011efc:	4806      	ldr	r0, [pc, #24]	; (8011f18 <OnRxWindow1TimerEvent+0x74>)
 8011efe:	f001 fb55 	bl	80135ac <RxWindowSetup>
}
 8011f02:	bf00      	nop
 8011f04:	3708      	adds	r7, #8
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd80      	pop	{r7, pc}
 8011f0a:	bf00      	nop
 8011f0c:	200006d4 	.word	0x200006d4
 8011f10:	20000bf0 	.word	0x20000bf0
 8011f14:	20000a8c 	.word	0x20000a8c
 8011f18:	20000a54 	.word	0x20000a54

08011f1c <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b082      	sub	sp, #8
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8011f24:	4b19      	ldr	r3, [pc, #100]	; (8011f8c <OnRxWindow2TimerEvent+0x70>)
 8011f26:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d029      	beq.n	8011f82 <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8011f2e:	4b17      	ldr	r3, [pc, #92]	; (8011f8c <OnRxWindow2TimerEvent+0x70>)
 8011f30:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8011f34:	4b15      	ldr	r3, [pc, #84]	; (8011f8c <OnRxWindow2TimerEvent+0x70>)
 8011f36:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8011f3a:	4b15      	ldr	r3, [pc, #84]	; (8011f90 <OnRxWindow2TimerEvent+0x74>)
 8011f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f3e:	4a13      	ldr	r2, [pc, #76]	; (8011f8c <OnRxWindow2TimerEvent+0x70>)
 8011f40:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011f44:	4b12      	ldr	r3, [pc, #72]	; (8011f90 <OnRxWindow2TimerEvent+0x74>)
 8011f46:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8011f4a:	4b10      	ldr	r3, [pc, #64]	; (8011f8c <OnRxWindow2TimerEvent+0x70>)
 8011f4c:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011f50:	4b0f      	ldr	r3, [pc, #60]	; (8011f90 <OnRxWindow2TimerEvent+0x74>)
 8011f52:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8011f56:	4b0d      	ldr	r3, [pc, #52]	; (8011f8c <OnRxWindow2TimerEvent+0x70>)
 8011f58:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8011f5c:	4b0b      	ldr	r3, [pc, #44]	; (8011f8c <OnRxWindow2TimerEvent+0x70>)
 8011f5e:	2200      	movs	r2, #0
 8011f60:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8011f64:	4b09      	ldr	r3, [pc, #36]	; (8011f8c <OnRxWindow2TimerEvent+0x70>)
 8011f66:	2201      	movs	r2, #1
 8011f68:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011f6c:	4b08      	ldr	r3, [pc, #32]	; (8011f90 <OnRxWindow2TimerEvent+0x74>)
 8011f6e:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8011f72:	4b06      	ldr	r3, [pc, #24]	; (8011f8c <OnRxWindow2TimerEvent+0x70>)
 8011f74:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8011f78:	4906      	ldr	r1, [pc, #24]	; (8011f94 <OnRxWindow2TimerEvent+0x78>)
 8011f7a:	4807      	ldr	r0, [pc, #28]	; (8011f98 <OnRxWindow2TimerEvent+0x7c>)
 8011f7c:	f001 fb16 	bl	80135ac <RxWindowSetup>
 8011f80:	e000      	b.n	8011f84 <OnRxWindow2TimerEvent+0x68>
        return;
 8011f82:	bf00      	nop
}
 8011f84:	3708      	adds	r7, #8
 8011f86:	46bd      	mov	sp, r7
 8011f88:	bd80      	pop	{r7, pc}
 8011f8a:	bf00      	nop
 8011f8c:	200006d4 	.word	0x200006d4
 8011f90:	20000bf0 	.word	0x20000bf0
 8011f94:	20000aa4 	.word	0x20000aa4
 8011f98:	20000a6c 	.word	0x20000a6c

08011f9c <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b082      	sub	sp, #8
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8011fa4:	4808      	ldr	r0, [pc, #32]	; (8011fc8 <OnRetransmitTimeoutTimerEvent+0x2c>)
 8011fa6:	f00d faad 	bl	801f504 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 8011faa:	4b08      	ldr	r3, [pc, #32]	; (8011fcc <OnRetransmitTimeoutTimerEvent+0x30>)
 8011fac:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d003      	beq.n	8011fbc <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 8011fb4:	4b05      	ldr	r3, [pc, #20]	; (8011fcc <OnRetransmitTimeoutTimerEvent+0x30>)
 8011fb6:	2201      	movs	r2, #1
 8011fb8:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    }
    OnMacProcessNotify( );
 8011fbc:	f001 ff0e 	bl	8013ddc <OnMacProcessNotify>
}
 8011fc0:	bf00      	nop
 8011fc2:	3708      	adds	r7, #8
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	bd80      	pop	{r7, pc}
 8011fc8:	20000ad4 	.word	0x20000ad4
 8011fcc:	200006d4 	.word	0x200006d4

08011fd0 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b084      	sub	sp, #16
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	60ba      	str	r2, [r7, #8]
 8011fd8:	607b      	str	r3, [r7, #4]
 8011fda:	4603      	mov	r3, r0
 8011fdc:	73fb      	strb	r3, [r7, #15]
 8011fde:	460b      	mov	r3, r1
 8011fe0:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8011fe2:	68bb      	ldr	r3, [r7, #8]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d005      	beq.n	8011ff4 <GetFCntDown+0x24>
 8011fe8:	69bb      	ldr	r3, [r7, #24]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d002      	beq.n	8011ff4 <GetFCntDown+0x24>
 8011fee:	69fb      	ldr	r3, [r7, #28]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d101      	bne.n	8011ff8 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011ff4:	2309      	movs	r3, #9
 8011ff6:	e028      	b.n	801204a <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8011ff8:	7bfb      	ldrb	r3, [r7, #15]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d016      	beq.n	801202c <GetFCntDown+0x5c>
 8011ffe:	2b01      	cmp	r3, #1
 8012000:	d118      	bne.n	8012034 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8012002:	79bb      	ldrb	r3, [r7, #6]
 8012004:	2b01      	cmp	r3, #1
 8012006:	d10d      	bne.n	8012024 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8012008:	7bbb      	ldrb	r3, [r7, #14]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d002      	beq.n	8012014 <GetFCntDown+0x44>
 801200e:	7bbb      	ldrb	r3, [r7, #14]
 8012010:	2b03      	cmp	r3, #3
 8012012:	d103      	bne.n	801201c <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8012014:	69bb      	ldr	r3, [r7, #24]
 8012016:	2202      	movs	r2, #2
 8012018:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 801201a:	e00d      	b.n	8012038 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 801201c:	69bb      	ldr	r3, [r7, #24]
 801201e:	2201      	movs	r2, #1
 8012020:	701a      	strb	r2, [r3, #0]
            break;
 8012022:	e009      	b.n	8012038 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8012024:	69bb      	ldr	r3, [r7, #24]
 8012026:	2203      	movs	r2, #3
 8012028:	701a      	strb	r2, [r3, #0]
            break;
 801202a:	e005      	b.n	8012038 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 801202c:	69bb      	ldr	r3, [r7, #24]
 801202e:	2204      	movs	r2, #4
 8012030:	701a      	strb	r2, [r3, #0]
            break;
 8012032:	e001      	b.n	8012038 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8012034:	2305      	movs	r3, #5
 8012036:	e008      	b.n	801204a <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8012038:	69bb      	ldr	r3, [r7, #24]
 801203a:	7818      	ldrb	r0, [r3, #0]
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	89db      	ldrh	r3, [r3, #14]
 8012040:	69fa      	ldr	r2, [r7, #28]
 8012042:	4619      	mov	r1, r3
 8012044:	f004 fd90 	bl	8016b68 <LoRaMacCryptoGetFCntDown>
 8012048:	4603      	mov	r3, r0
}
 801204a:	4618      	mov	r0, r3
 801204c:	3710      	adds	r7, #16
 801204e:	46bd      	mov	sp, r7
 8012050:	bd80      	pop	{r7, pc}
	...

08012054 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8012054:	b5b0      	push	{r4, r5, r7, lr}
 8012056:	b084      	sub	sp, #16
 8012058:	af00      	add	r7, sp, #0
 801205a:	4603      	mov	r3, r0
 801205c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801205e:	2303      	movs	r3, #3
 8012060:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 8012062:	4b6e      	ldr	r3, [pc, #440]	; (801221c <SwitchClass+0x1c8>)
 8012064:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012068:	2b02      	cmp	r3, #2
 801206a:	f000 80bb 	beq.w	80121e4 <SwitchClass+0x190>
 801206e:	2b02      	cmp	r3, #2
 8012070:	f300 80ce 	bgt.w	8012210 <SwitchClass+0x1bc>
 8012074:	2b00      	cmp	r3, #0
 8012076:	d003      	beq.n	8012080 <SwitchClass+0x2c>
 8012078:	2b01      	cmp	r3, #1
 801207a:	f000 80a5 	beq.w	80121c8 <SwitchClass+0x174>
 801207e:	e0c7      	b.n	8012210 <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8012080:	79fb      	ldrb	r3, [r7, #7]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d109      	bne.n	801209a <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8012086:	4b65      	ldr	r3, [pc, #404]	; (801221c <SwitchClass+0x1c8>)
 8012088:	4a64      	ldr	r2, [pc, #400]	; (801221c <SwitchClass+0x1c8>)
 801208a:	3374      	adds	r3, #116	; 0x74
 801208c:	326c      	adds	r2, #108	; 0x6c
 801208e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012092:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 8012096:	2300      	movs	r3, #0
 8012098:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 801209a:	79fb      	ldrb	r3, [r7, #7]
 801209c:	2b01      	cmp	r3, #1
 801209e:	d10c      	bne.n	80120ba <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 80120a0:	79fb      	ldrb	r3, [r7, #7]
 80120a2:	4618      	mov	r0, r3
 80120a4:	f003 fc7e 	bl	80159a4 <LoRaMacClassBSwitchClass>
 80120a8:	4603      	mov	r3, r0
 80120aa:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 80120ac:	7bfb      	ldrb	r3, [r7, #15]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d103      	bne.n	80120ba <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 80120b2:	4a5a      	ldr	r2, [pc, #360]	; (801221c <SwitchClass+0x1c8>)
 80120b4:	79fb      	ldrb	r3, [r7, #7]
 80120b6:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
                }
            }

            if( deviceClass == CLASS_C )
 80120ba:	79fb      	ldrb	r3, [r7, #7]
 80120bc:	2b02      	cmp	r3, #2
 80120be:	f040 80a2 	bne.w	8012206 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80120c2:	4a56      	ldr	r2, [pc, #344]	; (801221c <SwitchClass+0x1c8>)
 80120c4:	79fb      	ldrb	r3, [r7, #7]
 80120c6:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80120ca:	4a55      	ldr	r2, [pc, #340]	; (8012220 <SwitchClass+0x1cc>)
 80120cc:	4b54      	ldr	r3, [pc, #336]	; (8012220 <SwitchClass+0x1cc>)
 80120ce:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 80120d2:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 80120d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80120d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80120da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80120de:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80120e2:	4b4f      	ldr	r3, [pc, #316]	; (8012220 <SwitchClass+0x1cc>)
 80120e4:	2202      	movs	r2, #2
 80120e6:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80120ea:	2300      	movs	r3, #0
 80120ec:	73bb      	strb	r3, [r7, #14]
 80120ee:	e05b      	b.n	80121a8 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 80120f0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80120f4:	4949      	ldr	r1, [pc, #292]	; (801221c <SwitchClass+0x1c8>)
 80120f6:	4613      	mov	r3, r2
 80120f8:	005b      	lsls	r3, r3, #1
 80120fa:	4413      	add	r3, r2
 80120fc:	011b      	lsls	r3, r3, #4
 80120fe:	440b      	add	r3, r1
 8012100:	33e9      	adds	r3, #233	; 0xe9
 8012102:	781b      	ldrb	r3, [r3, #0]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d049      	beq.n	801219c <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 8012108:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801210c:	4943      	ldr	r1, [pc, #268]	; (801221c <SwitchClass+0x1c8>)
 801210e:	4613      	mov	r3, r2
 8012110:	005b      	lsls	r3, r3, #1
 8012112:	4413      	add	r3, r2
 8012114:	011b      	lsls	r3, r3, #4
 8012116:	440b      	add	r3, r1
 8012118:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801211c:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 801211e:	2b02      	cmp	r3, #2
 8012120:	d13c      	bne.n	801219c <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 8012122:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8012126:	493d      	ldr	r1, [pc, #244]	; (801221c <SwitchClass+0x1c8>)
 8012128:	4613      	mov	r3, r2
 801212a:	005b      	lsls	r3, r3, #1
 801212c:	4413      	add	r3, r2
 801212e:	011b      	lsls	r3, r3, #4
 8012130:	440b      	add	r3, r1
 8012132:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	4a38      	ldr	r2, [pc, #224]	; (801221c <SwitchClass+0x1c8>)
 801213a:	6753      	str	r3, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 801213c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8012140:	4936      	ldr	r1, [pc, #216]	; (801221c <SwitchClass+0x1c8>)
 8012142:	4613      	mov	r3, r2
 8012144:	005b      	lsls	r3, r3, #1
 8012146:	4413      	add	r3, r2
 8012148:	011b      	lsls	r3, r3, #4
 801214a:	440b      	add	r3, r1
 801214c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8012150:	f993 3000 	ldrsb.w	r3, [r3]
 8012154:	b2da      	uxtb	r2, r3
 8012156:	4b31      	ldr	r3, [pc, #196]	; (801221c <SwitchClass+0x1c8>)
 8012158:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 801215c:	4b30      	ldr	r3, [pc, #192]	; (8012220 <SwitchClass+0x1cc>)
 801215e:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8012162:	4b2f      	ldr	r3, [pc, #188]	; (8012220 <SwitchClass+0x1cc>)
 8012164:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8012168:	4b2c      	ldr	r3, [pc, #176]	; (801221c <SwitchClass+0x1c8>)
 801216a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801216c:	4a2c      	ldr	r2, [pc, #176]	; (8012220 <SwitchClass+0x1cc>)
 801216e:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012172:	4b2a      	ldr	r3, [pc, #168]	; (801221c <SwitchClass+0x1c8>)
 8012174:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8012178:	4b29      	ldr	r3, [pc, #164]	; (8012220 <SwitchClass+0x1cc>)
 801217a:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801217e:	4b27      	ldr	r3, [pc, #156]	; (801221c <SwitchClass+0x1c8>)
 8012180:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8012184:	4b26      	ldr	r3, [pc, #152]	; (8012220 <SwitchClass+0x1cc>)
 8012186:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 801218a:	4b25      	ldr	r3, [pc, #148]	; (8012220 <SwitchClass+0x1cc>)
 801218c:	2203      	movs	r2, #3
 801218e:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8012192:	4b23      	ldr	r3, [pc, #140]	; (8012220 <SwitchClass+0x1cc>)
 8012194:	2201      	movs	r2, #1
 8012196:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 801219a:	e009      	b.n	80121b0 <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801219c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80121a0:	b2db      	uxtb	r3, r3
 80121a2:	3301      	adds	r3, #1
 80121a4:	b2db      	uxtb	r3, r3
 80121a6:	73bb      	strb	r3, [r7, #14]
 80121a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	dd9f      	ble.n	80120f0 <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 80121b0:	4b1b      	ldr	r3, [pc, #108]	; (8012220 <SwitchClass+0x1cc>)
 80121b2:	2200      	movs	r2, #0
 80121b4:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 80121b8:	4b1a      	ldr	r3, [pc, #104]	; (8012224 <SwitchClass+0x1d0>)
 80121ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121bc:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 80121be:	f001 fa29 	bl	8013614 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 80121c2:	2300      	movs	r3, #0
 80121c4:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80121c6:	e01e      	b.n	8012206 <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 80121c8:	79fb      	ldrb	r3, [r7, #7]
 80121ca:	4618      	mov	r0, r3
 80121cc:	f003 fbea 	bl	80159a4 <LoRaMacClassBSwitchClass>
 80121d0:	4603      	mov	r3, r0
 80121d2:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 80121d4:	7bfb      	ldrb	r3, [r7, #15]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d117      	bne.n	801220a <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80121da:	4a10      	ldr	r2, [pc, #64]	; (801221c <SwitchClass+0x1c8>)
 80121dc:	79fb      	ldrb	r3, [r7, #7]
 80121de:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            }
            break;
 80121e2:	e012      	b.n	801220a <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 80121e4:	79fb      	ldrb	r3, [r7, #7]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d111      	bne.n	801220e <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 80121ea:	4b0d      	ldr	r3, [pc, #52]	; (8012220 <SwitchClass+0x1cc>)
 80121ec:	2206      	movs	r2, #6
 80121ee:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 80121f2:	4a0a      	ldr	r2, [pc, #40]	; (801221c <SwitchClass+0x1c8>)
 80121f4:	79fb      	ldrb	r3, [r7, #7]
 80121f6:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 80121fa:	4b0a      	ldr	r3, [pc, #40]	; (8012224 <SwitchClass+0x1d0>)
 80121fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121fe:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8012200:	2300      	movs	r3, #0
 8012202:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 8012204:	e003      	b.n	801220e <SwitchClass+0x1ba>
            break;
 8012206:	bf00      	nop
 8012208:	e002      	b.n	8012210 <SwitchClass+0x1bc>
            break;
 801220a:	bf00      	nop
 801220c:	e000      	b.n	8012210 <SwitchClass+0x1bc>
            break;
 801220e:	bf00      	nop
        }
    }

    return status;
 8012210:	7bfb      	ldrb	r3, [r7, #15]
}
 8012212:	4618      	mov	r0, r3
 8012214:	3710      	adds	r7, #16
 8012216:	46bd      	mov	sp, r7
 8012218:	bdb0      	pop	{r4, r5, r7, pc}
 801221a:	bf00      	nop
 801221c:	20000bf0 	.word	0x20000bf0
 8012220:	200006d4 	.word	0x200006d4
 8012224:	08020e2c 	.word	0x08020e2c

08012228 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b086      	sub	sp, #24
 801222c:	af00      	add	r7, sp, #0
 801222e:	4603      	mov	r3, r0
 8012230:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012232:	4b10      	ldr	r3, [pc, #64]	; (8012274 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012234:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012238:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 801223a:	79fb      	ldrb	r3, [r7, #7]
 801223c:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 801223e:	230d      	movs	r3, #13
 8012240:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8012242:	4b0c      	ldr	r3, [pc, #48]	; (8012274 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012244:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8012248:	2b00      	cmp	r3, #0
 801224a:	d001      	beq.n	8012250 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 801224c:	230e      	movs	r3, #14
 801224e:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012250:	4b08      	ldr	r3, [pc, #32]	; (8012274 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012252:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012256:	f107 0210 	add.w	r2, r7, #16
 801225a:	4611      	mov	r1, r2
 801225c:	4618      	mov	r0, r3
 801225e:	f005 faf3 	bl	8017848 <RegionGetPhyParam>
 8012262:	4603      	mov	r3, r0
 8012264:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	b2db      	uxtb	r3, r3
}
 801226a:	4618      	mov	r0, r3
 801226c:	3718      	adds	r7, #24
 801226e:	46bd      	mov	sp, r7
 8012270:	bd80      	pop	{r7, pc}
 8012272:	bf00      	nop
 8012274:	20000bf0 	.word	0x20000bf0

08012278 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b084      	sub	sp, #16
 801227c:	af00      	add	r7, sp, #0
 801227e:	4603      	mov	r3, r0
 8012280:	71fb      	strb	r3, [r7, #7]
 8012282:	460b      	mov	r3, r1
 8012284:	71bb      	strb	r3, [r7, #6]
 8012286:	4613      	mov	r3, r2
 8012288:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 801228a:	2300      	movs	r3, #0
 801228c:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 801228e:	2300      	movs	r3, #0
 8012290:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8012292:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8012296:	4618      	mov	r0, r3
 8012298:	f7ff ffc6 	bl	8012228 <GetMaxAppPayloadWithoutFOptsLength>
 801229c:	4603      	mov	r3, r0
 801229e:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 80122a0:	79fb      	ldrb	r3, [r7, #7]
 80122a2:	b29a      	uxth	r2, r3
 80122a4:	797b      	ldrb	r3, [r7, #5]
 80122a6:	b29b      	uxth	r3, r3
 80122a8:	4413      	add	r3, r2
 80122aa:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80122ac:	89ba      	ldrh	r2, [r7, #12]
 80122ae:	89fb      	ldrh	r3, [r7, #14]
 80122b0:	429a      	cmp	r2, r3
 80122b2:	d804      	bhi.n	80122be <ValidatePayloadLength+0x46>
 80122b4:	89bb      	ldrh	r3, [r7, #12]
 80122b6:	2bff      	cmp	r3, #255	; 0xff
 80122b8:	d801      	bhi.n	80122be <ValidatePayloadLength+0x46>
    {
        return true;
 80122ba:	2301      	movs	r3, #1
 80122bc:	e000      	b.n	80122c0 <ValidatePayloadLength+0x48>
    }
    return false;
 80122be:	2300      	movs	r3, #0
}
 80122c0:	4618      	mov	r0, r3
 80122c2:	3710      	adds	r7, #16
 80122c4:	46bd      	mov	sp, r7
 80122c6:	bd80      	pop	{r7, pc}

080122c8 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 80122c8:	b590      	push	{r4, r7, lr}
 80122ca:	b0a5      	sub	sp, #148	; 0x94
 80122cc:	af02      	add	r7, sp, #8
 80122ce:	6078      	str	r0, [r7, #4]
 80122d0:	4608      	mov	r0, r1
 80122d2:	4611      	mov	r1, r2
 80122d4:	461a      	mov	r2, r3
 80122d6:	4603      	mov	r3, r0
 80122d8:	70fb      	strb	r3, [r7, #3]
 80122da:	460b      	mov	r3, r1
 80122dc:	70bb      	strb	r3, [r7, #2]
 80122de:	4613      	mov	r3, r2
 80122e0:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 80122e2:	2300      	movs	r3, #0
 80122e4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 80122e8:	2300      	movs	r3, #0
 80122ea:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80122ee:	2300      	movs	r3, #0
 80122f0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 80122f4:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	f000 84ab 	beq.w	8012c54 <ProcessMacCommands+0x98c>
 80122fe:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8012302:	2b01      	cmp	r3, #1
 8012304:	f040 84ac 	bne.w	8012c60 <ProcessMacCommands+0x998>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8012308:	f000 bca4 	b.w	8012c54 <ProcessMacCommands+0x98c>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 801230c:	78fb      	ldrb	r3, [r7, #3]
 801230e:	687a      	ldr	r2, [r7, #4]
 8012310:	4413      	add	r3, r2
 8012312:	781b      	ldrb	r3, [r3, #0]
 8012314:	4618      	mov	r0, r3
 8012316:	f003 fe45 	bl	8015fa4 <LoRaMacCommandsGetCmdSize>
 801231a:	4603      	mov	r3, r0
 801231c:	461a      	mov	r2, r3
 801231e:	78fb      	ldrb	r3, [r7, #3]
 8012320:	441a      	add	r2, r3
 8012322:	78bb      	ldrb	r3, [r7, #2]
 8012324:	429a      	cmp	r2, r3
 8012326:	f300 849d 	bgt.w	8012c64 <ProcessMacCommands+0x99c>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 801232a:	78fb      	ldrb	r3, [r7, #3]
 801232c:	1c5a      	adds	r2, r3, #1
 801232e:	70fa      	strb	r2, [r7, #3]
 8012330:	461a      	mov	r2, r3
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	4413      	add	r3, r2
 8012336:	781b      	ldrb	r3, [r3, #0]
 8012338:	3b02      	subs	r3, #2
 801233a:	2b11      	cmp	r3, #17
 801233c:	f200 8494 	bhi.w	8012c68 <ProcessMacCommands+0x9a0>
 8012340:	a201      	add	r2, pc, #4	; (adr r2, 8012348 <ProcessMacCommands+0x80>)
 8012342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012346:	bf00      	nop
 8012348:	08012391 	.word	0x08012391
 801234c:	080123d3 	.word	0x080123d3
 8012350:	0801254f 	.word	0x0801254f
 8012354:	0801258d 	.word	0x0801258d
 8012358:	08012685 	.word	0x08012685
 801235c:	080126d5 	.word	0x080126d5
 8012360:	08012791 	.word	0x08012791
 8012364:	080127e7 	.word	0x080127e7
 8012368:	080128cd 	.word	0x080128cd
 801236c:	08012c69 	.word	0x08012c69
 8012370:	08012c69 	.word	0x08012c69
 8012374:	08012975 	.word	0x08012975
 8012378:	08012c69 	.word	0x08012c69
 801237c:	08012c69 	.word	0x08012c69
 8012380:	08012a95 	.word	0x08012a95
 8012384:	08012ac9 	.word	0x08012ac9
 8012388:	08012b59 	.word	0x08012b59
 801238c:	08012bcf 	.word	0x08012bcf
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8012390:	2005      	movs	r0, #5
 8012392:	f003 ffdf 	bl	8016354 <LoRaMacConfirmQueueIsCmdActive>
 8012396:	4603      	mov	r3, r0
 8012398:	2b00      	cmp	r3, #0
 801239a:	f000 845b 	beq.w	8012c54 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 801239e:	2105      	movs	r1, #5
 80123a0:	2000      	movs	r0, #0
 80123a2:	f003 ff4b 	bl	801623c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80123a6:	78fb      	ldrb	r3, [r7, #3]
 80123a8:	1c5a      	adds	r2, r3, #1
 80123aa:	70fa      	strb	r2, [r7, #3]
 80123ac:	461a      	mov	r2, r3
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	4413      	add	r3, r2
 80123b2:	781a      	ldrb	r2, [r3, #0]
 80123b4:	4bb0      	ldr	r3, [pc, #704]	; (8012678 <ProcessMacCommands+0x3b0>)
 80123b6:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80123ba:	78fb      	ldrb	r3, [r7, #3]
 80123bc:	1c5a      	adds	r2, r3, #1
 80123be:	70fa      	strb	r2, [r7, #3]
 80123c0:	461a      	mov	r2, r3
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	4413      	add	r3, r2
 80123c6:	781a      	ldrb	r2, [r3, #0]
 80123c8:	4bab      	ldr	r3, [pc, #684]	; (8012678 <ProcessMacCommands+0x3b0>)
 80123ca:	f883 245d 	strb.w	r2, [r3, #1117]	; 0x45d
                }
                break;
 80123ce:	f000 bc41 	b.w	8012c54 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 80123d2:	2300      	movs	r3, #0
 80123d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 80123d8:	2300      	movs	r3, #0
 80123da:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 80123de:	2300      	movs	r3, #0
 80123e0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 80123e4:	2300      	movs	r3, #0
 80123e6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 80123ea:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80123ee:	f083 0301 	eor.w	r3, r3, #1
 80123f2:	b2db      	uxtb	r3, r3
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	f000 80a5 	beq.w	8012544 <ProcessMacCommands+0x27c>
                {
                    adrBlockFound = true;
 80123fa:	2301      	movs	r3, #1
 80123fc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8012400:	78fb      	ldrb	r3, [r7, #3]
 8012402:	3b01      	subs	r3, #1
 8012404:	687a      	ldr	r2, [r7, #4]
 8012406:	4413      	add	r3, r2
 8012408:	65fb      	str	r3, [r7, #92]	; 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 801240a:	4b9c      	ldr	r3, [pc, #624]	; (801267c <ProcessMacCommands+0x3b4>)
 801240c:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8012410:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012414:	4b99      	ldr	r3, [pc, #612]	; (801267c <ProcessMacCommands+0x3b4>)
 8012416:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801241a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 801241e:	4b97      	ldr	r3, [pc, #604]	; (801267c <ProcessMacCommands+0x3b4>)
 8012420:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012424:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012428:	4b94      	ldr	r3, [pc, #592]	; (801267c <ProcessMacCommands+0x3b4>)
 801242a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801242e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8012432:	4b92      	ldr	r3, [pc, #584]	; (801267c <ProcessMacCommands+0x3b4>)
 8012434:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8012438:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 801243c:	4b8f      	ldr	r3, [pc, #572]	; (801267c <ProcessMacCommands+0x3b4>)
 801243e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8012442:	65bb      	str	r3, [r7, #88]	; 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8012444:	4b8d      	ldr	r3, [pc, #564]	; (801267c <ProcessMacCommands+0x3b4>)
 8012446:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801244a:	2b00      	cmp	r3, #0
 801244c:	d008      	beq.n	8012460 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 801244e:	78ba      	ldrb	r2, [r7, #2]
 8012450:	78fb      	ldrb	r3, [r7, #3]
 8012452:	1ad3      	subs	r3, r2, r3
 8012454:	b2db      	uxtb	r3, r3
 8012456:	3301      	adds	r3, #1
 8012458:	b2db      	uxtb	r3, r3
 801245a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 801245e:	e002      	b.n	8012466 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 8012460:	2305      	movs	r3, #5
 8012462:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8012466:	4b85      	ldr	r3, [pc, #532]	; (801267c <ProcessMacCommands+0x3b4>)
 8012468:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801246c:	f107 0456 	add.w	r4, r7, #86	; 0x56
 8012470:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8012474:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012478:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801247c:	9301      	str	r3, [sp, #4]
 801247e:	f107 0355 	add.w	r3, r7, #85	; 0x55
 8012482:	9300      	str	r3, [sp, #0]
 8012484:	4623      	mov	r3, r4
 8012486:	f005 fae2 	bl	8017a4e <RegionLinkAdrReq>
 801248a:	4603      	mov	r3, r0
 801248c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 8012490:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012494:	f003 0307 	and.w	r3, r3, #7
 8012498:	2b07      	cmp	r3, #7
 801249a:	d119      	bne.n	80124d0 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 801249c:	4b77      	ldr	r3, [pc, #476]	; (801267c <ProcessMacCommands+0x3b4>)
 801249e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 80124a2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80124a6:	429a      	cmp	r2, r3
 80124a8:	da03      	bge.n	80124b2 <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 80124aa:	4b74      	ldr	r3, [pc, #464]	; (801267c <ProcessMacCommands+0x3b4>)
 80124ac:	2201      	movs	r2, #1
 80124ae:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 80124b2:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 80124b6:	4b71      	ldr	r3, [pc, #452]	; (801267c <ProcessMacCommands+0x3b4>)
 80124b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 80124bc:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 80124c0:	4b6e      	ldr	r3, [pc, #440]	; (801267c <ProcessMacCommands+0x3b4>)
 80124c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80124c6:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80124ca:	4b6c      	ldr	r3, [pc, #432]	; (801267c <ProcessMacCommands+0x3b4>)
 80124cc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80124d0:	2300      	movs	r3, #0
 80124d2:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80124d6:	e00b      	b.n	80124f0 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80124d8:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 80124dc:	2201      	movs	r2, #1
 80124de:	4619      	mov	r1, r3
 80124e0:	2003      	movs	r0, #3
 80124e2:	f003 fbff 	bl	8015ce4 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80124e6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80124ea:	3301      	adds	r3, #1
 80124ec:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80124f0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80124f4:	4a62      	ldr	r2, [pc, #392]	; (8012680 <ProcessMacCommands+0x3b8>)
 80124f6:	fba2 2303 	umull	r2, r3, r2, r3
 80124fa:	089b      	lsrs	r3, r3, #2
 80124fc:	b2db      	uxtb	r3, r3
 80124fe:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8012502:	429a      	cmp	r2, r3
 8012504:	d3e8      	bcc.n	80124d8 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 8012506:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 801250a:	78fb      	ldrb	r3, [r7, #3]
 801250c:	4413      	add	r3, r2
 801250e:	b2db      	uxtb	r3, r3
 8012510:	3b01      	subs	r3, #1
 8012512:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 8012514:	78fa      	ldrb	r2, [r7, #3]
 8012516:	78bb      	ldrb	r3, [r7, #2]
 8012518:	429a      	cmp	r2, r3
 801251a:	d20a      	bcs.n	8012532 <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 801251c:	78fb      	ldrb	r3, [r7, #3]
 801251e:	1c5a      	adds	r2, r3, #1
 8012520:	70fa      	strb	r2, [r7, #3]
 8012522:	461a      	mov	r2, r3
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	4413      	add	r3, r2
 8012528:	781b      	ldrb	r3, [r3, #0]
 801252a:	2b03      	cmp	r3, #3
 801252c:	f43f af68 	beq.w	8012400 <ProcessMacCommands+0x138>
 8012530:	e000      	b.n	8012534 <ProcessMacCommands+0x26c>
                            break;
 8012532:	bf00      	nop

                    if( macIndex < commandsSize )
 8012534:	78fa      	ldrb	r2, [r7, #3]
 8012536:	78bb      	ldrb	r3, [r7, #2]
 8012538:	429a      	cmp	r2, r3
 801253a:	d206      	bcs.n	801254a <ProcessMacCommands+0x282>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 801253c:	78fb      	ldrb	r3, [r7, #3]
 801253e:	3b01      	subs	r3, #1
 8012540:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 8012542:	e002      	b.n	801254a <ProcessMacCommands+0x282>
                    macIndex += 4;
 8012544:	78fb      	ldrb	r3, [r7, #3]
 8012546:	3304      	adds	r3, #4
 8012548:	70fb      	strb	r3, [r7, #3]
                break;
 801254a:	bf00      	nop
 801254c:	e382      	b.n	8012c54 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 801254e:	78fb      	ldrb	r3, [r7, #3]
 8012550:	1c5a      	adds	r2, r3, #1
 8012552:	70fa      	strb	r2, [r7, #3]
 8012554:	461a      	mov	r2, r3
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	4413      	add	r3, r2
 801255a:	781b      	ldrb	r3, [r3, #0]
 801255c:	f003 030f 	and.w	r3, r3, #15
 8012560:	b2da      	uxtb	r2, r3
 8012562:	4b46      	ldr	r3, [pc, #280]	; (801267c <ProcessMacCommands+0x3b4>)
 8012564:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8012568:	4b44      	ldr	r3, [pc, #272]	; (801267c <ProcessMacCommands+0x3b4>)
 801256a:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 801256e:	461a      	mov	r2, r3
 8012570:	2301      	movs	r3, #1
 8012572:	4093      	lsls	r3, r2
 8012574:	b29a      	uxth	r2, r3
 8012576:	4b41      	ldr	r3, [pc, #260]	; (801267c <ProcessMacCommands+0x3b4>)
 8012578:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 801257c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012580:	2200      	movs	r2, #0
 8012582:	4619      	mov	r1, r3
 8012584:	2004      	movs	r0, #4
 8012586:	f003 fbad 	bl	8015ce4 <LoRaMacCommandsAddCmd>
                break;
 801258a:	e363      	b.n	8012c54 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 801258c:	2307      	movs	r3, #7
 801258e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8012592:	78fb      	ldrb	r3, [r7, #3]
 8012594:	687a      	ldr	r2, [r7, #4]
 8012596:	4413      	add	r3, r2
 8012598:	781b      	ldrb	r3, [r3, #0]
 801259a:	091b      	lsrs	r3, r3, #4
 801259c:	b2db      	uxtb	r3, r3
 801259e:	b25b      	sxtb	r3, r3
 80125a0:	f003 0307 	and.w	r3, r3, #7
 80125a4:	b25b      	sxtb	r3, r3
 80125a6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80125aa:	78fb      	ldrb	r3, [r7, #3]
 80125ac:	687a      	ldr	r2, [r7, #4]
 80125ae:	4413      	add	r3, r2
 80125b0:	781b      	ldrb	r3, [r3, #0]
 80125b2:	b25b      	sxtb	r3, r3
 80125b4:	f003 030f 	and.w	r3, r3, #15
 80125b8:	b25b      	sxtb	r3, r3
 80125ba:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 80125be:	78fb      	ldrb	r3, [r7, #3]
 80125c0:	3301      	adds	r3, #1
 80125c2:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80125c4:	78fb      	ldrb	r3, [r7, #3]
 80125c6:	1c5a      	adds	r2, r3, #1
 80125c8:	70fa      	strb	r2, [r7, #3]
 80125ca:	461a      	mov	r2, r3
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	4413      	add	r3, r2
 80125d0:	781b      	ldrb	r3, [r3, #0]
 80125d2:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80125d4:	78fb      	ldrb	r3, [r7, #3]
 80125d6:	1c5a      	adds	r2, r3, #1
 80125d8:	70fa      	strb	r2, [r7, #3]
 80125da:	461a      	mov	r2, r3
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	4413      	add	r3, r2
 80125e0:	781b      	ldrb	r3, [r3, #0]
 80125e2:	021a      	lsls	r2, r3, #8
 80125e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125e6:	4313      	orrs	r3, r2
 80125e8:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80125ea:	78fb      	ldrb	r3, [r7, #3]
 80125ec:	1c5a      	adds	r2, r3, #1
 80125ee:	70fa      	strb	r2, [r7, #3]
 80125f0:	461a      	mov	r2, r3
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	4413      	add	r3, r2
 80125f6:	781b      	ldrb	r3, [r3, #0]
 80125f8:	041a      	lsls	r2, r3, #16
 80125fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125fc:	4313      	orrs	r3, r2
 80125fe:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 8012600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012602:	2264      	movs	r2, #100	; 0x64
 8012604:	fb02 f303 	mul.w	r3, r2, r3
 8012608:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 801260a:	4b1c      	ldr	r3, [pc, #112]	; (801267c <ProcessMacCommands+0x3b4>)
 801260c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012610:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8012614:	4611      	mov	r1, r2
 8012616:	4618      	mov	r0, r3
 8012618:	f005 fa40 	bl	8017a9c <RegionRxParamSetupReq>
 801261c:	4603      	mov	r3, r0
 801261e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8012622:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012626:	f003 0307 	and.w	r3, r3, #7
 801262a:	2b07      	cmp	r3, #7
 801262c:	d117      	bne.n	801265e <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 801262e:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8012632:	b2da      	uxtb	r2, r3
 8012634:	4b11      	ldr	r3, [pc, #68]	; (801267c <ProcessMacCommands+0x3b4>)
 8012636:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 801263a:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 801263e:	b2da      	uxtb	r2, r3
 8012640:	4b0e      	ldr	r3, [pc, #56]	; (801267c <ProcessMacCommands+0x3b4>)
 8012642:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8012646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012648:	4a0c      	ldr	r2, [pc, #48]	; (801267c <ProcessMacCommands+0x3b4>)
 801264a:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 801264c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801264e:	4a0b      	ldr	r2, [pc, #44]	; (801267c <ProcessMacCommands+0x3b4>)
 8012650:	6753      	str	r3, [r2, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8012652:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8012656:	b2da      	uxtb	r2, r3
 8012658:	4b08      	ldr	r3, [pc, #32]	; (801267c <ProcessMacCommands+0x3b4>)
 801265a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                }
                macCmdPayload[0] = status;
 801265e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012662:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8012666:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801266a:	2201      	movs	r2, #1
 801266c:	4619      	mov	r1, r3
 801266e:	2005      	movs	r0, #5
 8012670:	f003 fb38 	bl	8015ce4 <LoRaMacCommandsAddCmd>
                break;
 8012674:	bf00      	nop
 8012676:	e2ed      	b.n	8012c54 <ProcessMacCommands+0x98c>
 8012678:	200006d4 	.word	0x200006d4
 801267c:	20000bf0 	.word	0x20000bf0
 8012680:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8012684:	23ff      	movs	r3, #255	; 0xff
 8012686:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 801268a:	4bb7      	ldr	r3, [pc, #732]	; (8012968 <ProcessMacCommands+0x6a0>)
 801268c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012690:	2b00      	cmp	r3, #0
 8012692:	d00d      	beq.n	80126b0 <ProcessMacCommands+0x3e8>
 8012694:	4bb4      	ldr	r3, [pc, #720]	; (8012968 <ProcessMacCommands+0x6a0>)
 8012696:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d007      	beq.n	80126b0 <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80126a0:	4bb1      	ldr	r3, [pc, #708]	; (8012968 <ProcessMacCommands+0x6a0>)
 80126a2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	4798      	blx	r3
 80126aa:	4603      	mov	r3, r0
 80126ac:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 80126b0:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80126b4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80126b8:	787b      	ldrb	r3, [r7, #1]
 80126ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80126be:	b2db      	uxtb	r3, r3
 80126c0:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80126c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80126c8:	2202      	movs	r2, #2
 80126ca:	4619      	mov	r1, r3
 80126cc:	2006      	movs	r0, #6
 80126ce:	f003 fb09 	bl	8015ce4 <LoRaMacCommandsAddCmd>
                break;
 80126d2:	e2bf      	b.n	8012c54 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 80126d4:	2303      	movs	r3, #3
 80126d6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 80126da:	78fb      	ldrb	r3, [r7, #3]
 80126dc:	1c5a      	adds	r2, r3, #1
 80126de:	70fa      	strb	r2, [r7, #3]
 80126e0:	461a      	mov	r2, r3
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	4413      	add	r3, r2
 80126e6:	781b      	ldrb	r3, [r3, #0]
 80126e8:	b25b      	sxtb	r3, r3
 80126ea:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 80126ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80126f2:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80126f4:	78fb      	ldrb	r3, [r7, #3]
 80126f6:	1c5a      	adds	r2, r3, #1
 80126f8:	70fa      	strb	r2, [r7, #3]
 80126fa:	461a      	mov	r2, r3
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	4413      	add	r3, r2
 8012700:	781b      	ldrb	r3, [r3, #0]
 8012702:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012704:	78fb      	ldrb	r3, [r7, #3]
 8012706:	1c5a      	adds	r2, r3, #1
 8012708:	70fa      	strb	r2, [r7, #3]
 801270a:	461a      	mov	r2, r3
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	4413      	add	r3, r2
 8012710:	781b      	ldrb	r3, [r3, #0]
 8012712:	021a      	lsls	r2, r3, #8
 8012714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012716:	4313      	orrs	r3, r2
 8012718:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801271a:	78fb      	ldrb	r3, [r7, #3]
 801271c:	1c5a      	adds	r2, r3, #1
 801271e:	70fa      	strb	r2, [r7, #3]
 8012720:	461a      	mov	r2, r3
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	4413      	add	r3, r2
 8012726:	781b      	ldrb	r3, [r3, #0]
 8012728:	041a      	lsls	r2, r3, #16
 801272a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801272c:	4313      	orrs	r3, r2
 801272e:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 8012730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012732:	2264      	movs	r2, #100	; 0x64
 8012734:	fb02 f303 	mul.w	r3, r2, r3
 8012738:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 801273a:	2300      	movs	r3, #0
 801273c:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 801273e:	78fb      	ldrb	r3, [r7, #3]
 8012740:	1c5a      	adds	r2, r3, #1
 8012742:	70fa      	strb	r2, [r7, #3]
 8012744:	461a      	mov	r2, r3
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	4413      	add	r3, r2
 801274a:	781b      	ldrb	r3, [r3, #0]
 801274c:	b25b      	sxtb	r3, r3
 801274e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8012752:	4b86      	ldr	r3, [pc, #536]	; (801296c <ProcessMacCommands+0x6a4>)
 8012754:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012758:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801275c:	4611      	mov	r1, r2
 801275e:	4618      	mov	r0, r3
 8012760:	f005 f9b7 	bl	8017ad2 <RegionNewChannelReq>
 8012764:	4603      	mov	r3, r0
 8012766:	b2db      	uxtb	r3, r3
 8012768:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 801276c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012770:	b25b      	sxtb	r3, r3
 8012772:	2b00      	cmp	r3, #0
 8012774:	db0a      	blt.n	801278c <ProcessMacCommands+0x4c4>
                {
                    macCmdPayload[0] = status;
 8012776:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801277a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 801277e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012782:	2201      	movs	r2, #1
 8012784:	4619      	mov	r1, r3
 8012786:	2007      	movs	r0, #7
 8012788:	f003 faac 	bl	8015ce4 <LoRaMacCommandsAddCmd>
                }
                break;
 801278c:	bf00      	nop
 801278e:	e261      	b.n	8012c54 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8012790:	78fb      	ldrb	r3, [r7, #3]
 8012792:	1c5a      	adds	r2, r3, #1
 8012794:	70fa      	strb	r2, [r7, #3]
 8012796:	461a      	mov	r2, r3
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	4413      	add	r3, r2
 801279c:	781b      	ldrb	r3, [r3, #0]
 801279e:	f003 030f 	and.w	r3, r3, #15
 80127a2:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 80127a6:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d104      	bne.n	80127b8 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 80127ae:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80127b2:	3301      	adds	r3, #1
 80127b4:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80127b8:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80127bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80127c0:	fb02 f303 	mul.w	r3, r2, r3
 80127c4:	461a      	mov	r2, r3
 80127c6:	4b69      	ldr	r3, [pc, #420]	; (801296c <ProcessMacCommands+0x6a4>)
 80127c8:	659a      	str	r2, [r3, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80127ca:	4b68      	ldr	r3, [pc, #416]	; (801296c <ProcessMacCommands+0x6a4>)
 80127cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80127ce:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80127d2:	4a66      	ldr	r2, [pc, #408]	; (801296c <ProcessMacCommands+0x6a4>)
 80127d4:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80127d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80127da:	2200      	movs	r2, #0
 80127dc:	4619      	mov	r1, r3
 80127de:	2008      	movs	r0, #8
 80127e0:	f003 fa80 	bl	8015ce4 <LoRaMacCommandsAddCmd>
                break;
 80127e4:	e236      	b.n	8012c54 <ProcessMacCommands+0x98c>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 80127e6:	78fb      	ldrb	r3, [r7, #3]
 80127e8:	1c5a      	adds	r2, r3, #1
 80127ea:	70fa      	strb	r2, [r7, #3]
 80127ec:	461a      	mov	r2, r3
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	4413      	add	r3, r2
 80127f2:	781b      	ldrb	r3, [r3, #0]
 80127f4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 80127f8:	2300      	movs	r3, #0
 80127fa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 80127fe:	2300      	movs	r3, #0
 8012800:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8012804:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012808:	f003 0320 	and.w	r3, r3, #32
 801280c:	2b00      	cmp	r3, #0
 801280e:	d002      	beq.n	8012816 <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8012810:	2301      	movs	r3, #1
 8012812:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8012816:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 801281a:	f003 0310 	and.w	r3, r3, #16
 801281e:	2b00      	cmp	r3, #0
 8012820:	d002      	beq.n	8012828 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8012822:	2301      	movs	r3, #1
 8012824:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8012828:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 801282c:	f003 030f 	and.w	r3, r3, #15
 8012830:	b2db      	uxtb	r3, r3
 8012832:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8012836:	4b4d      	ldr	r3, [pc, #308]	; (801296c <ProcessMacCommands+0x6a4>)
 8012838:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801283c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8012840:	4611      	mov	r1, r2
 8012842:	4618      	mov	r0, r3
 8012844:	f005 f960 	bl	8017b08 <RegionTxParamSetupReq>
 8012848:	4603      	mov	r3, r0
 801284a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801284e:	d03b      	beq.n	80128c8 <ProcessMacCommands+0x600>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8012850:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8012854:	4b45      	ldr	r3, [pc, #276]	; (801296c <ProcessMacCommands+0x6a4>)
 8012856:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 801285a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 801285e:	4b43      	ldr	r3, [pc, #268]	; (801296c <ProcessMacCommands+0x6a4>)
 8012860:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8012864:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012868:	461a      	mov	r2, r3
 801286a:	4b41      	ldr	r3, [pc, #260]	; (8012970 <ProcessMacCommands+0x6a8>)
 801286c:	5c9b      	ldrb	r3, [r3, r2]
 801286e:	4618      	mov	r0, r3
 8012870:	f7ee fa0e 	bl	8000c90 <__aeabi_ui2f>
 8012874:	4603      	mov	r3, r0
 8012876:	4a3d      	ldr	r2, [pc, #244]	; (801296c <ProcessMacCommands+0x6a4>)
 8012878:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 801287c:	2302      	movs	r3, #2
 801287e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012882:	4b3a      	ldr	r3, [pc, #232]	; (801296c <ProcessMacCommands+0x6a4>)
 8012884:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012888:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801288c:	4b37      	ldr	r3, [pc, #220]	; (801296c <ProcessMacCommands+0x6a4>)
 801288e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012892:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012896:	4611      	mov	r1, r2
 8012898:	4618      	mov	r0, r3
 801289a:	f004 ffd5 	bl	8017848 <RegionGetPhyParam>
 801289e:	4603      	mov	r3, r0
 80128a0:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80128a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128a4:	b25a      	sxtb	r2, r3
 80128a6:	4b31      	ldr	r3, [pc, #196]	; (801296c <ProcessMacCommands+0x6a4>)
 80128a8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80128ac:	4293      	cmp	r3, r2
 80128ae:	bfb8      	it	lt
 80128b0:	4613      	movlt	r3, r2
 80128b2:	b25a      	sxtb	r2, r3
 80128b4:	4b2d      	ldr	r3, [pc, #180]	; (801296c <ProcessMacCommands+0x6a4>)
 80128b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80128ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80128be:	2200      	movs	r2, #0
 80128c0:	4619      	mov	r1, r3
 80128c2:	2009      	movs	r0, #9
 80128c4:	f003 fa0e 	bl	8015ce4 <LoRaMacCommandsAddCmd>
                }
                break;
 80128c8:	bf00      	nop
 80128ca:	e1c3      	b.n	8012c54 <ProcessMacCommands+0x98c>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 80128cc:	2303      	movs	r3, #3
 80128ce:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 80128d2:	78fb      	ldrb	r3, [r7, #3]
 80128d4:	1c5a      	adds	r2, r3, #1
 80128d6:	70fa      	strb	r2, [r7, #3]
 80128d8:	461a      	mov	r2, r3
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	4413      	add	r3, r2
 80128de:	781b      	ldrb	r3, [r3, #0]
 80128e0:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80128e4:	78fb      	ldrb	r3, [r7, #3]
 80128e6:	1c5a      	adds	r2, r3, #1
 80128e8:	70fa      	strb	r2, [r7, #3]
 80128ea:	461a      	mov	r2, r3
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	4413      	add	r3, r2
 80128f0:	781b      	ldrb	r3, [r3, #0]
 80128f2:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80128f4:	78fb      	ldrb	r3, [r7, #3]
 80128f6:	1c5a      	adds	r2, r3, #1
 80128f8:	70fa      	strb	r2, [r7, #3]
 80128fa:	461a      	mov	r2, r3
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	4413      	add	r3, r2
 8012900:	781b      	ldrb	r3, [r3, #0]
 8012902:	021a      	lsls	r2, r3, #8
 8012904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012906:	4313      	orrs	r3, r2
 8012908:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801290a:	78fb      	ldrb	r3, [r7, #3]
 801290c:	1c5a      	adds	r2, r3, #1
 801290e:	70fa      	strb	r2, [r7, #3]
 8012910:	461a      	mov	r2, r3
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	4413      	add	r3, r2
 8012916:	781b      	ldrb	r3, [r3, #0]
 8012918:	041a      	lsls	r2, r3, #16
 801291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801291c:	4313      	orrs	r3, r2
 801291e:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8012920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012922:	2264      	movs	r2, #100	; 0x64
 8012924:	fb02 f303 	mul.w	r3, r2, r3
 8012928:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 801292a:	4b10      	ldr	r3, [pc, #64]	; (801296c <ProcessMacCommands+0x6a4>)
 801292c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012930:	f107 0220 	add.w	r2, r7, #32
 8012934:	4611      	mov	r1, r2
 8012936:	4618      	mov	r0, r3
 8012938:	f005 f901 	bl	8017b3e <RegionDlChannelReq>
 801293c:	4603      	mov	r3, r0
 801293e:	b2db      	uxtb	r3, r3
 8012940:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012944:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012948:	b25b      	sxtb	r3, r3
 801294a:	2b00      	cmp	r3, #0
 801294c:	db0a      	blt.n	8012964 <ProcessMacCommands+0x69c>
                {
                    macCmdPayload[0] = status;
 801294e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012952:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8012956:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801295a:	2201      	movs	r2, #1
 801295c:	4619      	mov	r1, r3
 801295e:	200a      	movs	r0, #10
 8012960:	f003 f9c0 	bl	8015ce4 <LoRaMacCommandsAddCmd>
                }
                break;
 8012964:	bf00      	nop
 8012966:	e175      	b.n	8012c54 <ProcessMacCommands+0x98c>
 8012968:	200006d4 	.word	0x200006d4
 801296c:	20000bf0 	.word	0x20000bf0
 8012970:	08020d60 	.word	0x08020d60
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8012974:	2009      	movs	r0, #9
 8012976:	f003 fced 	bl	8016354 <LoRaMacConfirmQueueIsCmdActive>
 801297a:	4603      	mov	r3, r0
 801297c:	2b00      	cmp	r3, #0
 801297e:	f000 8084 	beq.w	8012a8a <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8012982:	2109      	movs	r1, #9
 8012984:	2000      	movs	r0, #0
 8012986:	f003 fc59 	bl	801623c <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 801298a:	f107 0318 	add.w	r3, r7, #24
 801298e:	2200      	movs	r2, #0
 8012990:	601a      	str	r2, [r3, #0]
 8012992:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8012994:	f107 0310 	add.w	r3, r7, #16
 8012998:	2200      	movs	r2, #0
 801299a:	601a      	str	r2, [r3, #0]
 801299c:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 801299e:	f107 0308 	add.w	r3, r7, #8
 80129a2:	2200      	movs	r2, #0
 80129a4:	601a      	str	r2, [r3, #0]
 80129a6:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80129a8:	78fb      	ldrb	r3, [r7, #3]
 80129aa:	1c5a      	adds	r2, r3, #1
 80129ac:	70fa      	strb	r2, [r7, #3]
 80129ae:	461a      	mov	r2, r3
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	4413      	add	r3, r2
 80129b4:	781b      	ldrb	r3, [r3, #0]
 80129b6:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80129b8:	78fb      	ldrb	r3, [r7, #3]
 80129ba:	1c5a      	adds	r2, r3, #1
 80129bc:	70fa      	strb	r2, [r7, #3]
 80129be:	461a      	mov	r2, r3
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	4413      	add	r3, r2
 80129c4:	781b      	ldrb	r3, [r3, #0]
 80129c6:	021a      	lsls	r2, r3, #8
 80129c8:	69bb      	ldr	r3, [r7, #24]
 80129ca:	4313      	orrs	r3, r2
 80129cc:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80129ce:	78fb      	ldrb	r3, [r7, #3]
 80129d0:	1c5a      	adds	r2, r3, #1
 80129d2:	70fa      	strb	r2, [r7, #3]
 80129d4:	461a      	mov	r2, r3
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	4413      	add	r3, r2
 80129da:	781b      	ldrb	r3, [r3, #0]
 80129dc:	041a      	lsls	r2, r3, #16
 80129de:	69bb      	ldr	r3, [r7, #24]
 80129e0:	4313      	orrs	r3, r2
 80129e2:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80129e4:	78fb      	ldrb	r3, [r7, #3]
 80129e6:	1c5a      	adds	r2, r3, #1
 80129e8:	70fa      	strb	r2, [r7, #3]
 80129ea:	461a      	mov	r2, r3
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	4413      	add	r3, r2
 80129f0:	781b      	ldrb	r3, [r3, #0]
 80129f2:	061a      	lsls	r2, r3, #24
 80129f4:	69bb      	ldr	r3, [r7, #24]
 80129f6:	4313      	orrs	r3, r2
 80129f8:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80129fa:	78fb      	ldrb	r3, [r7, #3]
 80129fc:	1c5a      	adds	r2, r3, #1
 80129fe:	70fa      	strb	r2, [r7, #3]
 8012a00:	461a      	mov	r2, r3
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	4413      	add	r3, r2
 8012a06:	781b      	ldrb	r3, [r3, #0]
 8012a08:	b21b      	sxth	r3, r3
 8012a0a:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8012a0c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012a10:	461a      	mov	r2, r3
 8012a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012a16:	fb02 f303 	mul.w	r3, r2, r3
 8012a1a:	121b      	asrs	r3, r3, #8
 8012a1c:	b21b      	sxth	r3, r3
 8012a1e:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8012a20:	f107 0310 	add.w	r3, r7, #16
 8012a24:	f107 0218 	add.w	r2, r7, #24
 8012a28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012a2c:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8012a30:	693a      	ldr	r2, [r7, #16]
 8012a32:	4b8f      	ldr	r3, [pc, #572]	; (8012c70 <ProcessMacCommands+0x9a8>)
 8012a34:	4413      	add	r3, r2
 8012a36:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8012a38:	f107 0308 	add.w	r3, r7, #8
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f00c f901 	bl	801ec44 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8012a42:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8012a46:	4b8b      	ldr	r3, [pc, #556]	; (8012c74 <ProcessMacCommands+0x9ac>)
 8012a48:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8012a4c:	9200      	str	r2, [sp, #0]
 8012a4e:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8012a52:	f107 0210 	add.w	r2, r7, #16
 8012a56:	ca06      	ldmia	r2, {r1, r2}
 8012a58:	f00c f88d 	bl	801eb76 <SysTimeSub>
 8012a5c:	f107 0010 	add.w	r0, r7, #16
 8012a60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012a62:	9300      	str	r3, [sp, #0]
 8012a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012a66:	f107 0208 	add.w	r2, r7, #8
 8012a6a:	ca06      	ldmia	r2, {r1, r2}
 8012a6c:	f00c f84a 	bl	801eb04 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8012a70:	f107 0310 	add.w	r3, r7, #16
 8012a74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012a78:	f00c f8b6 	bl	801ebe8 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8012a7c:	f002 ffd0 	bl	8015a20 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8012a80:	4b7c      	ldr	r3, [pc, #496]	; (8012c74 <ProcessMacCommands+0x9ac>)
 8012a82:	2201      	movs	r2, #1
 8012a84:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8012a88:	e0e4      	b.n	8012c54 <ProcessMacCommands+0x98c>
                }
                else
                {
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8012a8a:	4b7a      	ldr	r3, [pc, #488]	; (8012c74 <ProcessMacCommands+0x9ac>)
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#endif /* LORAMAC_VERSION */
                }
                break;
 8012a92:	e0df      	b.n	8012c54 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8012a94:	200c      	movs	r0, #12
 8012a96:	f003 fc5d 	bl	8016354 <LoRaMacConfirmQueueIsCmdActive>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	f000 80d9 	beq.w	8012c54 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8012aa2:	210c      	movs	r1, #12
 8012aa4:	2000      	movs	r0, #0
 8012aa6:	f003 fbc9 	bl	801623c <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8012aaa:	4b72      	ldr	r3, [pc, #456]	; (8012c74 <ProcessMacCommands+0x9ac>)
 8012aac:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8012ab0:	2b04      	cmp	r3, #4
 8012ab2:	f000 80cf 	beq.w	8012c54 <ProcessMacCommands+0x98c>
 8012ab6:	4b6f      	ldr	r3, [pc, #444]	; (8012c74 <ProcessMacCommands+0x9ac>)
 8012ab8:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8012abc:	2b05      	cmp	r3, #5
 8012abe:	f000 80c9 	beq.w	8012c54 <ProcessMacCommands+0x98c>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8012ac2:	f002 ff8e 	bl	80159e2 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8012ac6:	e0c5      	b.n	8012c54 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8012ac8:	2303      	movs	r3, #3
 8012aca:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 8012ace:	2300      	movs	r3, #0
 8012ad0:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8012ad2:	78fb      	ldrb	r3, [r7, #3]
 8012ad4:	1c5a      	adds	r2, r3, #1
 8012ad6:	70fa      	strb	r2, [r7, #3]
 8012ad8:	461a      	mov	r2, r3
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	4413      	add	r3, r2
 8012ade:	781b      	ldrb	r3, [r3, #0]
 8012ae0:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8012ae2:	78fb      	ldrb	r3, [r7, #3]
 8012ae4:	1c5a      	adds	r2, r3, #1
 8012ae6:	70fa      	strb	r2, [r7, #3]
 8012ae8:	461a      	mov	r2, r3
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	4413      	add	r3, r2
 8012aee:	781b      	ldrb	r3, [r3, #0]
 8012af0:	021b      	lsls	r3, r3, #8
 8012af2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012af4:	4313      	orrs	r3, r2
 8012af6:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012af8:	78fb      	ldrb	r3, [r7, #3]
 8012afa:	1c5a      	adds	r2, r3, #1
 8012afc:	70fa      	strb	r2, [r7, #3]
 8012afe:	461a      	mov	r2, r3
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	4413      	add	r3, r2
 8012b04:	781b      	ldrb	r3, [r3, #0]
 8012b06:	041b      	lsls	r3, r3, #16
 8012b08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012b0a:	4313      	orrs	r3, r2
 8012b0c:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8012b0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012b10:	2264      	movs	r2, #100	; 0x64
 8012b12:	fb02 f303 	mul.w	r3, r2, r3
 8012b16:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8012b18:	78fb      	ldrb	r3, [r7, #3]
 8012b1a:	1c5a      	adds	r2, r3, #1
 8012b1c:	70fa      	strb	r2, [r7, #3]
 8012b1e:	461a      	mov	r2, r3
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	4413      	add	r3, r2
 8012b24:	781b      	ldrb	r3, [r3, #0]
 8012b26:	f003 030f 	and.w	r3, r3, #15
 8012b2a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8012b2e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012b32:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012b34:	4618      	mov	r0, r3
 8012b36:	f002 ff5a 	bl	80159ee <LoRaMacClassBPingSlotChannelReq>
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 8012b40:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8012b44:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8012b48:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012b4c:	2201      	movs	r2, #1
 8012b4e:	4619      	mov	r1, r3
 8012b50:	2011      	movs	r0, #17
 8012b52:	f003 f8c7 	bl	8015ce4 <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 8012b56:	e07d      	b.n	8012c54 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8012b58:	200d      	movs	r0, #13
 8012b5a:	f003 fbfb 	bl	8016354 <LoRaMacConfirmQueueIsCmdActive>
 8012b5e:	4603      	mov	r3, r0
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d077      	beq.n	8012c54 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8012b64:	210d      	movs	r1, #13
 8012b66:	2000      	movs	r0, #0
 8012b68:	f003 fb68 	bl	801623c <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 8012b72:	2300      	movs	r3, #0
 8012b74:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8012b78:	78fb      	ldrb	r3, [r7, #3]
 8012b7a:	1c5a      	adds	r2, r3, #1
 8012b7c:	70fa      	strb	r2, [r7, #3]
 8012b7e:	461a      	mov	r2, r3
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	4413      	add	r3, r2
 8012b84:	781b      	ldrb	r3, [r3, #0]
 8012b86:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8012b8a:	78fb      	ldrb	r3, [r7, #3]
 8012b8c:	1c5a      	adds	r2, r3, #1
 8012b8e:	70fa      	strb	r2, [r7, #3]
 8012b90:	461a      	mov	r2, r3
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	4413      	add	r3, r2
 8012b96:	781b      	ldrb	r3, [r3, #0]
 8012b98:	021b      	lsls	r3, r3, #8
 8012b9a:	b21a      	sxth	r2, r3
 8012b9c:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8012ba0:	4313      	orrs	r3, r2
 8012ba2:	b21b      	sxth	r3, r3
 8012ba4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8012ba8:	78fb      	ldrb	r3, [r7, #3]
 8012baa:	1c5a      	adds	r2, r3, #1
 8012bac:	70fa      	strb	r2, [r7, #3]
 8012bae:	461a      	mov	r2, r3
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	4413      	add	r3, r2
 8012bb4:	781b      	ldrb	r3, [r3, #0]
 8012bb6:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8012bba:	4b2f      	ldr	r3, [pc, #188]	; (8012c78 <ProcessMacCommands+0x9b0>)
 8012bbc:	681a      	ldr	r2, [r3, #0]
 8012bbe:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 8012bc2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f002 ff1d 	bl	8015a06 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8012bcc:	e042      	b.n	8012c54 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8012bce:	2300      	movs	r3, #0
 8012bd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8012bd4:	78fb      	ldrb	r3, [r7, #3]
 8012bd6:	1c5a      	adds	r2, r3, #1
 8012bd8:	70fa      	strb	r2, [r7, #3]
 8012bda:	461a      	mov	r2, r3
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	4413      	add	r3, r2
 8012be0:	781b      	ldrb	r3, [r3, #0]
 8012be2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8012be6:	78fb      	ldrb	r3, [r7, #3]
 8012be8:	1c5a      	adds	r2, r3, #1
 8012bea:	70fa      	strb	r2, [r7, #3]
 8012bec:	461a      	mov	r2, r3
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	4413      	add	r3, r2
 8012bf2:	781b      	ldrb	r3, [r3, #0]
 8012bf4:	021b      	lsls	r3, r3, #8
 8012bf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012bfa:	4313      	orrs	r3, r2
 8012bfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012c00:	78fb      	ldrb	r3, [r7, #3]
 8012c02:	1c5a      	adds	r2, r3, #1
 8012c04:	70fa      	strb	r2, [r7, #3]
 8012c06:	461a      	mov	r2, r3
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	4413      	add	r3, r2
 8012c0c:	781b      	ldrb	r3, [r3, #0]
 8012c0e:	041b      	lsls	r3, r3, #16
 8012c10:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012c14:	4313      	orrs	r3, r2
 8012c16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 8012c1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012c1e:	2264      	movs	r2, #100	; 0x64
 8012c20:	fb02 f303 	mul.w	r3, r2, r3
 8012c24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8012c28:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8012c2c:	f002 fefe 	bl	8015a2c <LoRaMacClassBBeaconFreqReq>
 8012c30:	4603      	mov	r3, r0
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d003      	beq.n	8012c3e <ProcessMacCommands+0x976>
                    {
                        macCmdPayload[0] = 1;
 8012c36:	2301      	movs	r3, #1
 8012c38:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8012c3c:	e002      	b.n	8012c44 <ProcessMacCommands+0x97c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8012c3e:	2300      	movs	r3, #0
 8012c40:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8012c44:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012c48:	2201      	movs	r2, #1
 8012c4a:	4619      	mov	r1, r3
 8012c4c:	2013      	movs	r0, #19
 8012c4e:	f003 f849 	bl	8015ce4 <LoRaMacCommandsAddCmd>
                }
                break;
 8012c52:	bf00      	nop
    while( macIndex < commandsSize )
 8012c54:	78fa      	ldrb	r2, [r7, #3]
 8012c56:	78bb      	ldrb	r3, [r7, #2]
 8012c58:	429a      	cmp	r2, r3
 8012c5a:	f4ff ab57 	bcc.w	801230c <ProcessMacCommands+0x44>
 8012c5e:	e004      	b.n	8012c6a <ProcessMacCommands+0x9a2>
        return;
 8012c60:	bf00      	nop
 8012c62:	e002      	b.n	8012c6a <ProcessMacCommands+0x9a2>
            return;
 8012c64:	bf00      	nop
 8012c66:	e000      	b.n	8012c6a <ProcessMacCommands+0x9a2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8012c68:	bf00      	nop
        }
    }
}
 8012c6a:	378c      	adds	r7, #140	; 0x8c
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	bd90      	pop	{r4, r7, pc}
 8012c70:	12d53d80 	.word	0x12d53d80
 8012c74:	200006d4 	.word	0x200006d4
 8012c78:	20001820 	.word	0x20001820

08012c7c <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b08e      	sub	sp, #56	; 0x38
 8012c80:	af02      	add	r7, sp, #8
 8012c82:	60f8      	str	r0, [r7, #12]
 8012c84:	607a      	str	r2, [r7, #4]
 8012c86:	461a      	mov	r2, r3
 8012c88:	460b      	mov	r3, r1
 8012c8a:	72fb      	strb	r3, [r7, #11]
 8012c8c:	4613      	mov	r3, r2
 8012c8e:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012c90:	2303      	movs	r3, #3
 8012c92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012c96:	4b66      	ldr	r3, [pc, #408]	; (8012e30 <Send+0x1b4>)
 8012c98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012c9c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8012ca0:	4b63      	ldr	r3, [pc, #396]	; (8012e30 <Send+0x1b4>)
 8012ca2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012ca6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012caa:	4b61      	ldr	r3, [pc, #388]	; (8012e30 <Send+0x1b4>)
 8012cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cae:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8012cb0:	4b5f      	ldr	r3, [pc, #380]	; (8012e30 <Send+0x1b4>)
 8012cb2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d101      	bne.n	8012cbe <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8012cba:	2307      	movs	r3, #7
 8012cbc:	e0b4      	b.n	8012e28 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8012cbe:	4b5c      	ldr	r3, [pc, #368]	; (8012e30 <Send+0x1b4>)
 8012cc0:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d102      	bne.n	8012cce <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8012cc8:	4b59      	ldr	r3, [pc, #356]	; (8012e30 <Send+0x1b4>)
 8012cca:	2200      	movs	r2, #0
 8012ccc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 8012cce:	2300      	movs	r3, #0
 8012cd0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8012cd4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012cd8:	f36f 0303 	bfc	r3, #0, #4
 8012cdc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8012ce0:	4b53      	ldr	r3, [pc, #332]	; (8012e30 <Send+0x1b4>)
 8012ce2:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8012ce6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012cea:	f362 13c7 	bfi	r3, r2, #7, #1
 8012cee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012cf2:	4b4f      	ldr	r3, [pc, #316]	; (8012e30 <Send+0x1b4>)
 8012cf4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012cf8:	2b01      	cmp	r3, #1
 8012cfa:	d106      	bne.n	8012d0a <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8012cfc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012d00:	f043 0310 	orr.w	r3, r3, #16
 8012d04:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8012d08:	e005      	b.n	8012d16 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8012d0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012d0e:	f36f 1304 	bfc	r3, #4, #1
 8012d12:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8012d16:	4b46      	ldr	r3, [pc, #280]	; (8012e30 <Send+0x1b4>)
 8012d18:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d005      	beq.n	8012d2c <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8012d20:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012d24:	f043 0320 	orr.w	r3, r3, #32
 8012d28:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 8012d2c:	2301      	movs	r3, #1
 8012d2e:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8012d30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012d34:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8012d38:	b2db      	uxtb	r3, r3
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	bf14      	ite	ne
 8012d3e:	2301      	movne	r3, #1
 8012d40:	2300      	moveq	r3, #0
 8012d42:	b2db      	uxtb	r3, r3
 8012d44:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012d46:	4b3a      	ldr	r3, [pc, #232]	; (8012e30 <Send+0x1b4>)
 8012d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d4a:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8012d4c:	4b38      	ldr	r3, [pc, #224]	; (8012e30 <Send+0x1b4>)
 8012d4e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8012d52:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8012d54:	4b36      	ldr	r3, [pc, #216]	; (8012e30 <Send+0x1b4>)
 8012d56:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8012d5a:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012d5c:	4b34      	ldr	r3, [pc, #208]	; (8012e30 <Send+0x1b4>)
 8012d5e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012d62:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012d66:	4b32      	ldr	r3, [pc, #200]	; (8012e30 <Send+0x1b4>)
 8012d68:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012d6c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012d70:	4b2f      	ldr	r3, [pc, #188]	; (8012e30 <Send+0x1b4>)
 8012d72:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8012d7a:	4b2d      	ldr	r3, [pc, #180]	; (8012e30 <Send+0x1b4>)
 8012d7c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012d80:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8012d84:	4b2a      	ldr	r3, [pc, #168]	; (8012e30 <Send+0x1b4>)
 8012d86:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8012d8a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8012d8e:	f107 0014 	add.w	r0, r7, #20
 8012d92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012d96:	9300      	str	r3, [sp, #0]
 8012d98:	4b26      	ldr	r3, [pc, #152]	; (8012e34 <Send+0x1b8>)
 8012d9a:	4a27      	ldr	r2, [pc, #156]	; (8012e38 <Send+0x1bc>)
 8012d9c:	4927      	ldr	r1, [pc, #156]	; (8012e3c <Send+0x1c0>)
 8012d9e:	f002 fcbf 	bl	8015720 <LoRaMacAdrCalcNext>
 8012da2:	4603      	mov	r3, r0
 8012da4:	461a      	mov	r2, r3
 8012da6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012daa:	f362 1386 	bfi	r3, r2, #6, #1
 8012dae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8012db2:	7afa      	ldrb	r2, [r7, #11]
 8012db4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8012db8:	893b      	ldrh	r3, [r7, #8]
 8012dba:	9300      	str	r3, [sp, #0]
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	68f8      	ldr	r0, [r7, #12]
 8012dc0:	f000 fc72 	bl	80136a8 <PrepareFrame>
 8012dc4:	4603      	mov	r3, r0
 8012dc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8012dca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d003      	beq.n	8012dda <Send+0x15e>
 8012dd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012dd6:	2b0a      	cmp	r3, #10
 8012dd8:	d107      	bne.n	8012dea <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8012dda:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8012dde:	4618      	mov	r0, r3
 8012de0:	f000 f962 	bl	80130a8 <ScheduleTx>
 8012de4:	4603      	mov	r3, r0
 8012de6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8012dea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d00a      	beq.n	8012e08 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8012df2:	4a0f      	ldr	r2, [pc, #60]	; (8012e30 <Send+0x1b4>)
 8012df4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8012df8:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8012dfc:	4a0c      	ldr	r2, [pc, #48]	; (8012e30 <Send+0x1b4>)
 8012dfe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012e02:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8012e06:	e00d      	b.n	8012e24 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8012e08:	4b09      	ldr	r3, [pc, #36]	; (8012e30 <Send+0x1b4>)
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8012e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e12:	4a07      	ldr	r2, [pc, #28]	; (8012e30 <Send+0x1b4>)
 8012e14:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8012e16:	f003 f80b 	bl	8015e30 <LoRaMacCommandsRemoveNoneStickyCmds>
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d001      	beq.n	8012e24 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012e20:	2313      	movs	r3, #19
 8012e22:	e001      	b.n	8012e28 <Send+0x1ac>
        }
    }
    return status;
 8012e24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012e28:	4618      	mov	r0, r3
 8012e2a:	3730      	adds	r7, #48	; 0x30
 8012e2c:	46bd      	mov	sp, r7
 8012e2e:	bd80      	pop	{r7, pc}
 8012e30:	20000bf0 	.word	0x20000bf0
 8012e34:	20000c58 	.word	0x20000c58
 8012e38:	20000c28 	.word	0x20000c28
 8012e3c:	20000c29 	.word	0x20000c29

08012e40 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b084      	sub	sp, #16
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	4603      	mov	r3, r0
 8012e48:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8012e4e:	2300      	movs	r3, #0
 8012e50:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8012e52:	2301      	movs	r3, #1
 8012e54:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8012e56:	79fb      	ldrb	r3, [r7, #7]
 8012e58:	2bff      	cmp	r3, #255	; 0xff
 8012e5a:	d11f      	bne.n	8012e9c <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8012e5c:	2000      	movs	r0, #0
 8012e5e:	f7ff f8f9 	bl	8012054 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8012e62:	4b15      	ldr	r3, [pc, #84]	; (8012eb8 <SendReJoinReq+0x78>)
 8012e64:	2200      	movs	r2, #0
 8012e66:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8012e6a:	4b13      	ldr	r3, [pc, #76]	; (8012eb8 <SendReJoinReq+0x78>)
 8012e6c:	4a13      	ldr	r2, [pc, #76]	; (8012ebc <SendReJoinReq+0x7c>)
 8012e6e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8012e72:	4b11      	ldr	r3, [pc, #68]	; (8012eb8 <SendReJoinReq+0x78>)
 8012e74:	22ff      	movs	r2, #255	; 0xff
 8012e76:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8012e7a:	7b3b      	ldrb	r3, [r7, #12]
 8012e7c:	f36f 1347 	bfc	r3, #5, #3
 8012e80:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8012e82:	7b3a      	ldrb	r2, [r7, #12]
 8012e84:	4b0c      	ldr	r3, [pc, #48]	; (8012eb8 <SendReJoinReq+0x78>)
 8012e86:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 8012e8a:	480d      	ldr	r0, [pc, #52]	; (8012ec0 <SendReJoinReq+0x80>)
 8012e8c:	f7fb ff38 	bl	800ed00 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8012e90:	480c      	ldr	r0, [pc, #48]	; (8012ec4 <SendReJoinReq+0x84>)
 8012e92:	f7fb ff05 	bl	800eca0 <SecureElementGetDevEui>

            allowDelayedTx = false;
 8012e96:	2300      	movs	r3, #0
 8012e98:	73fb      	strb	r3, [r7, #15]

            break;
 8012e9a:	e002      	b.n	8012ea2 <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012e9c:	2302      	movs	r3, #2
 8012e9e:	73bb      	strb	r3, [r7, #14]
            break;
 8012ea0:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8012ea2:	7bfb      	ldrb	r3, [r7, #15]
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	f000 f8ff 	bl	80130a8 <ScheduleTx>
 8012eaa:	4603      	mov	r3, r0
 8012eac:	73bb      	strb	r3, [r7, #14]
    return status;
 8012eae:	7bbb      	ldrb	r3, [r7, #14]
}
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	3710      	adds	r7, #16
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	bd80      	pop	{r7, pc}
 8012eb8:	200006d4 	.word	0x200006d4
 8012ebc:	200006d6 	.word	0x200006d6
 8012ec0:	200007e2 	.word	0x200007e2
 8012ec4:	200007ea 	.word	0x200007ea

08012ec8 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8012ecc:	f002 fd38 	bl	8015940 <LoRaMacClassBIsBeaconExpected>
 8012ed0:	4603      	mov	r3, r0
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d001      	beq.n	8012eda <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8012ed6:	230e      	movs	r3, #14
 8012ed8:	e013      	b.n	8012f02 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012eda:	4b0b      	ldr	r3, [pc, #44]	; (8012f08 <CheckForClassBCollision+0x40>)
 8012edc:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012ee0:	2b01      	cmp	r3, #1
 8012ee2:	d10d      	bne.n	8012f00 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8012ee4:	f002 fd33 	bl	801594e <LoRaMacClassBIsPingExpected>
 8012ee8:	4603      	mov	r3, r0
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d001      	beq.n	8012ef2 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8012eee:	230f      	movs	r3, #15
 8012ef0:	e007      	b.n	8012f02 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8012ef2:	f002 fd33 	bl	801595c <LoRaMacClassBIsMulticastExpected>
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d001      	beq.n	8012f00 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8012efc:	230f      	movs	r3, #15
 8012efe:	e000      	b.n	8012f02 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8012f00:	2300      	movs	r3, #0
}
 8012f02:	4618      	mov	r0, r3
 8012f04:	bd80      	pop	{r7, pc}
 8012f06:	bf00      	nop
 8012f08:	20000bf0 	.word	0x20000bf0

08012f0c <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8012f0c:	b590      	push	{r4, r7, lr}
 8012f0e:	b083      	sub	sp, #12
 8012f10:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012f12:	4b2d      	ldr	r3, [pc, #180]	; (8012fc8 <ComputeRxWindowParameters+0xbc>)
 8012f14:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8012f18:	4b2b      	ldr	r3, [pc, #172]	; (8012fc8 <ComputeRxWindowParameters+0xbc>)
 8012f1a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8012f1e:	4b2a      	ldr	r3, [pc, #168]	; (8012fc8 <ComputeRxWindowParameters+0xbc>)
 8012f20:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 8012f24:	4b28      	ldr	r3, [pc, #160]	; (8012fc8 <ComputeRxWindowParameters+0xbc>)
 8012f26:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8012f2a:	4b27      	ldr	r3, [pc, #156]	; (8012fc8 <ComputeRxWindowParameters+0xbc>)
 8012f2c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8012f30:	b25b      	sxtb	r3, r3
 8012f32:	f004 fe68 	bl	8017c06 <RegionApplyDrOffset>
 8012f36:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012f38:	b259      	sxtb	r1, r3
 8012f3a:	4b23      	ldr	r3, [pc, #140]	; (8012fc8 <ComputeRxWindowParameters+0xbc>)
 8012f3c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8012f40:	4b21      	ldr	r3, [pc, #132]	; (8012fc8 <ComputeRxWindowParameters+0xbc>)
 8012f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f44:	4821      	ldr	r0, [pc, #132]	; (8012fcc <ComputeRxWindowParameters+0xc0>)
 8012f46:	9000      	str	r0, [sp, #0]
 8012f48:	4620      	mov	r0, r4
 8012f4a:	f004 fd1e 	bl	801798a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012f4e:	4b1e      	ldr	r3, [pc, #120]	; (8012fc8 <ComputeRxWindowParameters+0xbc>)
 8012f50:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8012f54:	4b1c      	ldr	r3, [pc, #112]	; (8012fc8 <ComputeRxWindowParameters+0xbc>)
 8012f56:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012f5a:	b259      	sxtb	r1, r3
 8012f5c:	4b1a      	ldr	r3, [pc, #104]	; (8012fc8 <ComputeRxWindowParameters+0xbc>)
 8012f5e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8012f62:	4b19      	ldr	r3, [pc, #100]	; (8012fc8 <ComputeRxWindowParameters+0xbc>)
 8012f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f66:	4c1a      	ldr	r4, [pc, #104]	; (8012fd0 <ComputeRxWindowParameters+0xc4>)
 8012f68:	9400      	str	r4, [sp, #0]
 8012f6a:	f004 fd0e 	bl	801798a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8012f6e:	4b16      	ldr	r3, [pc, #88]	; (8012fc8 <ComputeRxWindowParameters+0xbc>)
 8012f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f72:	4a18      	ldr	r2, [pc, #96]	; (8012fd4 <ComputeRxWindowParameters+0xc8>)
 8012f74:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8012f78:	4413      	add	r3, r2
 8012f7a:	4a16      	ldr	r2, [pc, #88]	; (8012fd4 <ComputeRxWindowParameters+0xc8>)
 8012f7c:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8012f80:	4b11      	ldr	r3, [pc, #68]	; (8012fc8 <ComputeRxWindowParameters+0xbc>)
 8012f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012f84:	4a13      	ldr	r2, [pc, #76]	; (8012fd4 <ComputeRxWindowParameters+0xc8>)
 8012f86:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8012f8a:	4413      	add	r3, r2
 8012f8c:	4a11      	ldr	r2, [pc, #68]	; (8012fd4 <ComputeRxWindowParameters+0xc8>)
 8012f8e:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8012f92:	4b10      	ldr	r3, [pc, #64]	; (8012fd4 <ComputeRxWindowParameters+0xc8>)
 8012f94:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012f98:	2b04      	cmp	r3, #4
 8012f9a:	d011      	beq.n	8012fc0 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8012f9c:	4b0a      	ldr	r3, [pc, #40]	; (8012fc8 <ComputeRxWindowParameters+0xbc>)
 8012f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012fa0:	4a0c      	ldr	r2, [pc, #48]	; (8012fd4 <ComputeRxWindowParameters+0xc8>)
 8012fa2:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8012fa6:	4413      	add	r3, r2
 8012fa8:	4a0a      	ldr	r2, [pc, #40]	; (8012fd4 <ComputeRxWindowParameters+0xc8>)
 8012faa:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8012fae:	4b06      	ldr	r3, [pc, #24]	; (8012fc8 <ComputeRxWindowParameters+0xbc>)
 8012fb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012fb2:	4a08      	ldr	r2, [pc, #32]	; (8012fd4 <ComputeRxWindowParameters+0xc8>)
 8012fb4:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8012fb8:	4413      	add	r3, r2
 8012fba:	4a06      	ldr	r2, [pc, #24]	; (8012fd4 <ComputeRxWindowParameters+0xc8>)
 8012fbc:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8012fc0:	bf00      	nop
 8012fc2:	3704      	adds	r7, #4
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	bd90      	pop	{r4, r7, pc}
 8012fc8:	20000bf0 	.word	0x20000bf0
 8012fcc:	20000a8c 	.word	0x20000a8c
 8012fd0:	20000aa4 	.word	0x20000aa4
 8012fd4:	200006d4 	.word	0x200006d4

08012fd8 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b082      	sub	sp, #8
 8012fdc:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8012fde:	2300      	movs	r3, #0
 8012fe0:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8012fe2:	4b13      	ldr	r3, [pc, #76]	; (8013030 <VerifyTxFrame+0x58>)
 8012fe4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d01b      	beq.n	8013024 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012fec:	1d3b      	adds	r3, r7, #4
 8012fee:	4618      	mov	r0, r3
 8012ff0:	f002 ff6e 	bl	8015ed0 <LoRaMacCommandsGetSizeSerializedCmds>
 8012ff4:	4603      	mov	r3, r0
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d001      	beq.n	8012ffe <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012ffa:	2313      	movs	r3, #19
 8012ffc:	e013      	b.n	8013026 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8012ffe:	4b0d      	ldr	r3, [pc, #52]	; (8013034 <VerifyTxFrame+0x5c>)
 8013000:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013004:	4a0a      	ldr	r2, [pc, #40]	; (8013030 <VerifyTxFrame+0x58>)
 8013006:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 801300a:	687a      	ldr	r2, [r7, #4]
 801300c:	b2d2      	uxtb	r2, r2
 801300e:	4618      	mov	r0, r3
 8013010:	f7ff f932 	bl	8012278 <ValidatePayloadLength>
 8013014:	4603      	mov	r3, r0
 8013016:	f083 0301 	eor.w	r3, r3, #1
 801301a:	b2db      	uxtb	r3, r3
 801301c:	2b00      	cmp	r3, #0
 801301e:	d001      	beq.n	8013024 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8013020:	2308      	movs	r3, #8
 8013022:	e000      	b.n	8013026 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8013024:	2300      	movs	r3, #0
}
 8013026:	4618      	mov	r0, r3
 8013028:	3708      	adds	r7, #8
 801302a:	46bd      	mov	sp, r7
 801302c:	bd80      	pop	{r7, pc}
 801302e:	bf00      	nop
 8013030:	20000bf0 	.word	0x20000bf0
 8013034:	200006d4 	.word	0x200006d4

08013038 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b082      	sub	sp, #8
 801303c:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 801303e:	4b18      	ldr	r3, [pc, #96]	; (80130a0 <SerializeTxFrame+0x68>)
 8013040:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8013044:	2b00      	cmp	r3, #0
 8013046:	d002      	beq.n	801304e <SerializeTxFrame+0x16>
 8013048:	2b04      	cmp	r3, #4
 801304a:	d011      	beq.n	8013070 <SerializeTxFrame+0x38>
 801304c:	e021      	b.n	8013092 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 801304e:	4815      	ldr	r0, [pc, #84]	; (80130a4 <SerializeTxFrame+0x6c>)
 8013050:	f004 fa6c 	bl	801752c <LoRaMacSerializerJoinRequest>
 8013054:	4603      	mov	r3, r0
 8013056:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8013058:	79fb      	ldrb	r3, [r7, #7]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d001      	beq.n	8013062 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801305e:	2311      	movs	r3, #17
 8013060:	e01a      	b.n	8013098 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8013062:	4b0f      	ldr	r3, [pc, #60]	; (80130a0 <SerializeTxFrame+0x68>)
 8013064:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013068:	b29a      	uxth	r2, r3
 801306a:	4b0d      	ldr	r3, [pc, #52]	; (80130a0 <SerializeTxFrame+0x68>)
 801306c:	801a      	strh	r2, [r3, #0]
            break;
 801306e:	e012      	b.n	8013096 <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8013070:	480c      	ldr	r0, [pc, #48]	; (80130a4 <SerializeTxFrame+0x6c>)
 8013072:	f004 fadd 	bl	8017630 <LoRaMacSerializerData>
 8013076:	4603      	mov	r3, r0
 8013078:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 801307a:	79fb      	ldrb	r3, [r7, #7]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d001      	beq.n	8013084 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8013080:	2311      	movs	r3, #17
 8013082:	e009      	b.n	8013098 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8013084:	4b06      	ldr	r3, [pc, #24]	; (80130a0 <SerializeTxFrame+0x68>)
 8013086:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 801308a:	b29a      	uxth	r2, r3
 801308c:	4b04      	ldr	r3, [pc, #16]	; (80130a0 <SerializeTxFrame+0x68>)
 801308e:	801a      	strh	r2, [r3, #0]
            break;
 8013090:	e001      	b.n	8013096 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8013092:	2303      	movs	r3, #3
 8013094:	e000      	b.n	8013098 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8013096:	2300      	movs	r3, #0
}
 8013098:	4618      	mov	r0, r3
 801309a:	3708      	adds	r7, #8
 801309c:	46bd      	mov	sp, r7
 801309e:	bd80      	pop	{r7, pc}
 80130a0:	200006d4 	.word	0x200006d4
 80130a4:	200007dc 	.word	0x200007dc

080130a8 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b090      	sub	sp, #64	; 0x40
 80130ac:	af02      	add	r7, sp, #8
 80130ae:	4603      	mov	r3, r0
 80130b0:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80130b2:	2303      	movs	r3, #3
 80130b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 80130b8:	f7ff ff06 	bl	8012ec8 <CheckForClassBCollision>
 80130bc:	4603      	mov	r3, r0
 80130be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 80130c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d002      	beq.n	80130d0 <ScheduleTx+0x28>
    {
        return status;
 80130ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80130ce:	e092      	b.n	80131f6 <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 80130d0:	f000 f8f8 	bl	80132c4 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 80130d4:	f7ff ffb0 	bl	8013038 <SerializeTxFrame>
 80130d8:	4603      	mov	r3, r0
 80130da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 80130de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d002      	beq.n	80130ec <ScheduleTx+0x44>
    {
        return status;
 80130e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80130ea:	e084      	b.n	80131f6 <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 80130ec:	4b44      	ldr	r3, [pc, #272]	; (8013200 <ScheduleTx+0x158>)
 80130ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130f0:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80130f2:	4b43      	ldr	r3, [pc, #268]	; (8013200 <ScheduleTx+0x158>)
 80130f4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80130f8:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 80130fa:	4b41      	ldr	r3, [pc, #260]	; (8013200 <ScheduleTx+0x158>)
 80130fc:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8013100:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8013102:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013106:	4618      	mov	r0, r3
 8013108:	f00b fdd4 	bl	801ecb4 <SysTimeGetMcuTime>
 801310c:	4638      	mov	r0, r7
 801310e:	4b3c      	ldr	r3, [pc, #240]	; (8013200 <ScheduleTx+0x158>)
 8013110:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8013114:	9200      	str	r2, [sp, #0]
 8013116:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 801311a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801311e:	ca06      	ldmia	r2, {r1, r2}
 8013120:	f00b fd29 	bl	801eb76 <SysTimeSub>
 8013124:	f107 0320 	add.w	r3, r7, #32
 8013128:	463a      	mov	r2, r7
 801312a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801312e:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8013132:	4b33      	ldr	r3, [pc, #204]	; (8013200 <ScheduleTx+0x158>)
 8013134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013136:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8013138:	2300      	movs	r3, #0
 801313a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 801313e:	2301      	movs	r3, #1
 8013140:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8013142:	4b30      	ldr	r3, [pc, #192]	; (8013204 <ScheduleTx+0x15c>)
 8013144:	881b      	ldrh	r3, [r3, #0]
 8013146:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8013148:	4b2d      	ldr	r3, [pc, #180]	; (8013200 <ScheduleTx+0x158>)
 801314a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 801314e:	2b00      	cmp	r3, #0
 8013150:	d104      	bne.n	801315c <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8013152:	2301      	movs	r3, #1
 8013154:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8013158:	2300      	movs	r3, #0
 801315a:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 801315c:	4b28      	ldr	r3, [pc, #160]	; (8013200 <ScheduleTx+0x158>)
 801315e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8013162:	f107 0114 	add.w	r1, r7, #20
 8013166:	4b28      	ldr	r3, [pc, #160]	; (8013208 <ScheduleTx+0x160>)
 8013168:	9300      	str	r3, [sp, #0]
 801316a:	4b28      	ldr	r3, [pc, #160]	; (801320c <ScheduleTx+0x164>)
 801316c:	4a28      	ldr	r2, [pc, #160]	; (8013210 <ScheduleTx+0x168>)
 801316e:	f004 fd27 	bl	8017bc0 <RegionNextChannel>
 8013172:	4603      	mov	r3, r0
 8013174:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8013178:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801317c:	2b00      	cmp	r3, #0
 801317e:	d025      	beq.n	80131cc <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8013180:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013184:	2b0b      	cmp	r3, #11
 8013186:	d11e      	bne.n	80131c6 <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8013188:	4b1e      	ldr	r3, [pc, #120]	; (8013204 <ScheduleTx+0x15c>)
 801318a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 801318e:	2b00      	cmp	r3, #0
 8013190:	d01c      	beq.n	80131cc <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 8013192:	7bfb      	ldrb	r3, [r7, #15]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d013      	beq.n	80131c0 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8013198:	4b1a      	ldr	r3, [pc, #104]	; (8013204 <ScheduleTx+0x15c>)
 801319a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801319e:	f043 0320 	orr.w	r3, r3, #32
 80131a2:	4a18      	ldr	r2, [pc, #96]	; (8013204 <ScheduleTx+0x15c>)
 80131a4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80131a8:	4b16      	ldr	r3, [pc, #88]	; (8013204 <ScheduleTx+0x15c>)
 80131aa:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80131ae:	4619      	mov	r1, r3
 80131b0:	4818      	ldr	r0, [pc, #96]	; (8013214 <ScheduleTx+0x16c>)
 80131b2:	f00c fa17 	bl	801f5e4 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 80131b6:	4817      	ldr	r0, [pc, #92]	; (8013214 <ScheduleTx+0x16c>)
 80131b8:	f00c f936 	bl	801f428 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 80131bc:	2300      	movs	r3, #0
 80131be:	e01a      	b.n	80131f6 <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 80131c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80131c4:	e017      	b.n	80131f6 <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 80131c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80131ca:	e014      	b.n	80131f6 <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 80131cc:	f7ff fe9e 	bl	8012f0c <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 80131d0:	f7ff ff02 	bl	8012fd8 <VerifyTxFrame>
 80131d4:	4603      	mov	r3, r0
 80131d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 80131da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d002      	beq.n	80131e8 <ScheduleTx+0x140>
    {
        return status;
 80131e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80131e6:	e006      	b.n	80131f6 <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 80131e8:	4b06      	ldr	r3, [pc, #24]	; (8013204 <ScheduleTx+0x15c>)
 80131ea:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 80131ee:	4618      	mov	r0, r3
 80131f0:	f000 fb76 	bl	80138e0 <SendFrameOnChannel>
 80131f4:	4603      	mov	r3, r0
}
 80131f6:	4618      	mov	r0, r3
 80131f8:	3738      	adds	r7, #56	; 0x38
 80131fa:	46bd      	mov	sp, r7
 80131fc:	bd80      	pop	{r7, pc}
 80131fe:	bf00      	nop
 8013200:	20000bf0 	.word	0x20000bf0
 8013204:	200006d4 	.word	0x200006d4
 8013208:	20000c20 	.word	0x20000c20
 801320c:	20000b68 	.word	0x20000b68
 8013210:	20000aef 	.word	0x20000aef
 8013214:	20000a3c 	.word	0x20000a3c

08013218 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b084      	sub	sp, #16
 801321c:	af00      	add	r7, sp, #0
 801321e:	4603      	mov	r3, r0
 8013220:	460a      	mov	r2, r1
 8013222:	71fb      	strb	r3, [r7, #7]
 8013224:	4613      	mov	r3, r2
 8013226:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8013228:	2312      	movs	r3, #18
 801322a:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 801322c:	2300      	movs	r3, #0
 801322e:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8013230:	4b22      	ldr	r3, [pc, #136]	; (80132bc <SecureFrame+0xa4>)
 8013232:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8013236:	2b00      	cmp	r3, #0
 8013238:	d002      	beq.n	8013240 <SecureFrame+0x28>
 801323a:	2b04      	cmp	r3, #4
 801323c:	d011      	beq.n	8013262 <SecureFrame+0x4a>
 801323e:	e036      	b.n	80132ae <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8013240:	481f      	ldr	r0, [pc, #124]	; (80132c0 <SecureFrame+0xa8>)
 8013242:	f003 fd3f 	bl	8016cc4 <LoRaMacCryptoPrepareJoinRequest>
 8013246:	4603      	mov	r3, r0
 8013248:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 801324a:	7bfb      	ldrb	r3, [r7, #15]
 801324c:	2b00      	cmp	r3, #0
 801324e:	d001      	beq.n	8013254 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8013250:	2311      	movs	r3, #17
 8013252:	e02f      	b.n	80132b4 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8013254:	4b19      	ldr	r3, [pc, #100]	; (80132bc <SecureFrame+0xa4>)
 8013256:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 801325a:	b29a      	uxth	r2, r3
 801325c:	4b17      	ldr	r3, [pc, #92]	; (80132bc <SecureFrame+0xa4>)
 801325e:	801a      	strh	r2, [r3, #0]
            break;
 8013260:	e027      	b.n	80132b2 <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8013262:	f107 0308 	add.w	r3, r7, #8
 8013266:	4618      	mov	r0, r3
 8013268:	f003 fc66 	bl	8016b38 <LoRaMacCryptoGetFCntUp>
 801326c:	4603      	mov	r3, r0
 801326e:	2b00      	cmp	r3, #0
 8013270:	d001      	beq.n	8013276 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8013272:	2312      	movs	r3, #18
 8013274:	e01e      	b.n	80132b4 <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8013276:	4b11      	ldr	r3, [pc, #68]	; (80132bc <SecureFrame+0xa4>)
 8013278:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801327c:	2b00      	cmp	r3, #0
 801327e:	d002      	beq.n	8013286 <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8013280:	68bb      	ldr	r3, [r7, #8]
 8013282:	3b01      	subs	r3, #1
 8013284:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8013286:	68b8      	ldr	r0, [r7, #8]
 8013288:	79ba      	ldrb	r2, [r7, #6]
 801328a:	79f9      	ldrb	r1, [r7, #7]
 801328c:	4b0c      	ldr	r3, [pc, #48]	; (80132c0 <SecureFrame+0xa8>)
 801328e:	f003 fe41 	bl	8016f14 <LoRaMacCryptoSecureMessage>
 8013292:	4603      	mov	r3, r0
 8013294:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8013296:	7bfb      	ldrb	r3, [r7, #15]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d001      	beq.n	80132a0 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801329c:	2311      	movs	r3, #17
 801329e:	e009      	b.n	80132b4 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80132a0:	4b06      	ldr	r3, [pc, #24]	; (80132bc <SecureFrame+0xa4>)
 80132a2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80132a6:	b29a      	uxth	r2, r3
 80132a8:	4b04      	ldr	r3, [pc, #16]	; (80132bc <SecureFrame+0xa4>)
 80132aa:	801a      	strh	r2, [r3, #0]
            break;
 80132ac:	e001      	b.n	80132b2 <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80132ae:	2303      	movs	r3, #3
 80132b0:	e000      	b.n	80132b4 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 80132b2:	2300      	movs	r3, #0
}
 80132b4:	4618      	mov	r0, r3
 80132b6:	3710      	adds	r7, #16
 80132b8:	46bd      	mov	sp, r7
 80132ba:	bd80      	pop	{r7, pc}
 80132bc:	200006d4 	.word	0x200006d4
 80132c0:	200007dc 	.word	0x200007dc

080132c4 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 80132c4:	b480      	push	{r7}
 80132c6:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 80132c8:	4b09      	ldr	r3, [pc, #36]	; (80132f0 <CalculateBackOff+0x2c>)
 80132ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d10a      	bne.n	80132e6 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 80132d0:	4b07      	ldr	r3, [pc, #28]	; (80132f0 <CalculateBackOff+0x2c>)
 80132d2:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 80132d6:	3b01      	subs	r3, #1
 80132d8:	4a06      	ldr	r2, [pc, #24]	; (80132f4 <CalculateBackOff+0x30>)
 80132da:	f8d2 241c 	ldr.w	r2, [r2, #1052]	; 0x41c
 80132de:	fb02 f303 	mul.w	r3, r2, r3
 80132e2:	4a03      	ldr	r2, [pc, #12]	; (80132f0 <CalculateBackOff+0x2c>)
 80132e4:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 80132e6:	bf00      	nop
 80132e8:	46bd      	mov	sp, r7
 80132ea:	bc80      	pop	{r7}
 80132ec:	4770      	bx	lr
 80132ee:	bf00      	nop
 80132f0:	20000bf0 	.word	0x20000bf0
 80132f4:	200006d4 	.word	0x200006d4

080132f8 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b082      	sub	sp, #8
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	4603      	mov	r3, r0
 8013300:	7139      	strb	r1, [r7, #4]
 8013302:	71fb      	strb	r3, [r7, #7]
 8013304:	4613      	mov	r3, r2
 8013306:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8013308:	79fb      	ldrb	r3, [r7, #7]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d002      	beq.n	8013314 <RemoveMacCommands+0x1c>
 801330e:	79fb      	ldrb	r3, [r7, #7]
 8013310:	2b01      	cmp	r3, #1
 8013312:	d10d      	bne.n	8013330 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8013314:	79bb      	ldrb	r3, [r7, #6]
 8013316:	2b01      	cmp	r3, #1
 8013318:	d108      	bne.n	801332c <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 801331a:	793b      	ldrb	r3, [r7, #4]
 801331c:	f003 0320 	and.w	r3, r3, #32
 8013320:	b2db      	uxtb	r3, r3
 8013322:	2b00      	cmp	r3, #0
 8013324:	d004      	beq.n	8013330 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8013326:	f002 fda7 	bl	8015e78 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 801332a:	e001      	b.n	8013330 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 801332c:	f002 fda4 	bl	8015e78 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8013330:	bf00      	nop
 8013332:	3708      	adds	r7, #8
 8013334:	46bd      	mov	sp, r7
 8013336:	bd80      	pop	{r7, pc}

08013338 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 8013338:	b5b0      	push	{r4, r5, r7, lr}
 801333a:	b092      	sub	sp, #72	; 0x48
 801333c:	af00      	add	r7, sp, #0
 801333e:	4603      	mov	r3, r0
 8013340:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 8013342:	79fb      	ldrb	r3, [r7, #7]
 8013344:	f083 0301 	eor.w	r3, r3, #1
 8013348:	b2db      	uxtb	r3, r3
 801334a:	2b00      	cmp	r3, #0
 801334c:	d003      	beq.n	8013356 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 801334e:	4b88      	ldr	r3, [pc, #544]	; (8013570 <ResetMacParameters+0x238>)
 8013350:	2200      	movs	r2, #0
 8013352:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8013356:	4b86      	ldr	r3, [pc, #536]	; (8013570 <ResetMacParameters+0x238>)
 8013358:	2200      	movs	r2, #0
 801335a:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 801335c:	4b85      	ldr	r3, [pc, #532]	; (8013574 <ResetMacParameters+0x23c>)
 801335e:	2200      	movs	r2, #0
 8013360:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8013364:	4b83      	ldr	r3, [pc, #524]	; (8013574 <ResetMacParameters+0x23c>)
 8013366:	2200      	movs	r2, #0
 8013368:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 801336c:	4b81      	ldr	r3, [pc, #516]	; (8013574 <ResetMacParameters+0x23c>)
 801336e:	2200      	movs	r2, #0
 8013370:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8013374:	4b7e      	ldr	r3, [pc, #504]	; (8013570 <ResetMacParameters+0x238>)
 8013376:	2200      	movs	r2, #0
 8013378:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 801337c:	4b7c      	ldr	r3, [pc, #496]	; (8013570 <ResetMacParameters+0x238>)
 801337e:	2201      	movs	r2, #1
 8013380:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8013384:	4b7a      	ldr	r3, [pc, #488]	; (8013570 <ResetMacParameters+0x238>)
 8013386:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 801338a:	4b79      	ldr	r3, [pc, #484]	; (8013570 <ResetMacParameters+0x238>)
 801338c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8013390:	4b77      	ldr	r3, [pc, #476]	; (8013570 <ResetMacParameters+0x238>)
 8013392:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8013396:	4b76      	ldr	r3, [pc, #472]	; (8013570 <ResetMacParameters+0x238>)
 8013398:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 801339c:	4b74      	ldr	r3, [pc, #464]	; (8013570 <ResetMacParameters+0x238>)
 801339e:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 80133a2:	4b73      	ldr	r3, [pc, #460]	; (8013570 <ResetMacParameters+0x238>)
 80133a4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80133a8:	4b71      	ldr	r3, [pc, #452]	; (8013570 <ResetMacParameters+0x238>)
 80133aa:	4a71      	ldr	r2, [pc, #452]	; (8013570 <ResetMacParameters+0x238>)
 80133ac:	336c      	adds	r3, #108	; 0x6c
 80133ae:	32b4      	adds	r2, #180	; 0xb4
 80133b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80133b4:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80133b8:	4b6d      	ldr	r3, [pc, #436]	; (8013570 <ResetMacParameters+0x238>)
 80133ba:	4a6d      	ldr	r2, [pc, #436]	; (8013570 <ResetMacParameters+0x238>)
 80133bc:	3374      	adds	r3, #116	; 0x74
 80133be:	32bc      	adds	r2, #188	; 0xbc
 80133c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80133c4:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 80133c8:	4b69      	ldr	r3, [pc, #420]	; (8013570 <ResetMacParameters+0x238>)
 80133ca:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 80133ce:	4b68      	ldr	r3, [pc, #416]	; (8013570 <ResetMacParameters+0x238>)
 80133d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 80133d4:	4b66      	ldr	r3, [pc, #408]	; (8013570 <ResetMacParameters+0x238>)
 80133d6:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 80133da:	4b65      	ldr	r3, [pc, #404]	; (8013570 <ResetMacParameters+0x238>)
 80133dc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 80133e0:	4b63      	ldr	r3, [pc, #396]	; (8013570 <ResetMacParameters+0x238>)
 80133e2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80133e6:	4a62      	ldr	r2, [pc, #392]	; (8013570 <ResetMacParameters+0x238>)
 80133e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80133ec:	4b60      	ldr	r3, [pc, #384]	; (8013570 <ResetMacParameters+0x238>)
 80133ee:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80133f2:	4a5f      	ldr	r2, [pc, #380]	; (8013570 <ResetMacParameters+0x238>)
 80133f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 80133f8:	4b5d      	ldr	r3, [pc, #372]	; (8013570 <ResetMacParameters+0x238>)
 80133fa:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 80133fe:	4b5c      	ldr	r3, [pc, #368]	; (8013570 <ResetMacParameters+0x238>)
 8013400:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8013404:	4b5a      	ldr	r3, [pc, #360]	; (8013570 <ResetMacParameters+0x238>)
 8013406:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 801340a:	4b59      	ldr	r3, [pc, #356]	; (8013570 <ResetMacParameters+0x238>)
 801340c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

    MacCtx.NodeAckRequested = false;
 8013410:	4b58      	ldr	r3, [pc, #352]	; (8013574 <ResetMacParameters+0x23c>)
 8013412:	2200      	movs	r2, #0
 8013414:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 8013418:	4b55      	ldr	r3, [pc, #340]	; (8013570 <ResetMacParameters+0x238>)
 801341a:	2200      	movs	r2, #0
 801341c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8013420:	4b53      	ldr	r3, [pc, #332]	; (8013570 <ResetMacParameters+0x238>)
 8013422:	2200      	movs	r2, #0
 8013424:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 8013428:	4b51      	ldr	r3, [pc, #324]	; (8013570 <ResetMacParameters+0x238>)
 801342a:	2200      	movs	r2, #0
 801342c:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 8013430:	4b4f      	ldr	r3, [pc, #316]	; (8013570 <ResetMacParameters+0x238>)
 8013432:	2200      	movs	r2, #0
 8013434:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 8013438:	4b4d      	ldr	r3, [pc, #308]	; (8013570 <ResetMacParameters+0x238>)
 801343a:	2200      	movs	r2, #0
 801343c:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 8013440:	4b4b      	ldr	r3, [pc, #300]	; (8013570 <ResetMacParameters+0x238>)
 8013442:	2200      	movs	r2, #0
 8013444:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8013448:	4b49      	ldr	r3, [pc, #292]	; (8013570 <ResetMacParameters+0x238>)
 801344a:	2200      	movs	r2, #0
 801344c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 8013450:	4b47      	ldr	r3, [pc, #284]	; (8013570 <ResetMacParameters+0x238>)
 8013452:	2200      	movs	r2, #0
 8013454:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8013458:	4b45      	ldr	r3, [pc, #276]	; (8013570 <ResetMacParameters+0x238>)
 801345a:	2200      	movs	r2, #0
 801345c:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8013460:	4b43      	ldr	r3, [pc, #268]	; (8013570 <ResetMacParameters+0x238>)
 8013462:	2200      	movs	r2, #0
 8013464:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8013468:	4b41      	ldr	r3, [pc, #260]	; (8013570 <ResetMacParameters+0x238>)
 801346a:	2200      	movs	r2, #0
 801346c:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8013470:	2301      	movs	r3, #1
 8013472:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8013474:	4b40      	ldr	r3, [pc, #256]	; (8013578 <ResetMacParameters+0x240>)
 8013476:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8013478:	4b40      	ldr	r3, [pc, #256]	; (801357c <ResetMacParameters+0x244>)
 801347a:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 801347c:	4b40      	ldr	r3, [pc, #256]	; (8013580 <ResetMacParameters+0x248>)
 801347e:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013480:	4b3b      	ldr	r3, [pc, #236]	; (8013570 <ResetMacParameters+0x238>)
 8013482:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013486:	f107 020c 	add.w	r2, r7, #12
 801348a:	4611      	mov	r1, r2
 801348c:	4618      	mov	r0, r3
 801348e:	f004 fa12 	bl	80178b6 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8013492:	4b38      	ldr	r3, [pc, #224]	; (8013574 <ResetMacParameters+0x23c>)
 8013494:	2200      	movs	r2, #0
 8013496:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801349a:	4b36      	ldr	r3, [pc, #216]	; (8013574 <ResetMacParameters+0x23c>)
 801349c:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 80134a0:	4b34      	ldr	r3, [pc, #208]	; (8013574 <ResetMacParameters+0x23c>)
 80134a2:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80134a6:	4b32      	ldr	r3, [pc, #200]	; (8013570 <ResetMacParameters+0x238>)
 80134a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134aa:	4a32      	ldr	r2, [pc, #200]	; (8013574 <ResetMacParameters+0x23c>)
 80134ac:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80134b0:	4b2f      	ldr	r3, [pc, #188]	; (8013570 <ResetMacParameters+0x238>)
 80134b2:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80134b6:	4b2f      	ldr	r3, [pc, #188]	; (8013574 <ResetMacParameters+0x23c>)
 80134b8:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80134bc:	4b2c      	ldr	r3, [pc, #176]	; (8013570 <ResetMacParameters+0x238>)
 80134be:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80134c2:	4b2c      	ldr	r3, [pc, #176]	; (8013574 <ResetMacParameters+0x23c>)
 80134c4:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 80134c8:	4b2a      	ldr	r3, [pc, #168]	; (8013574 <ResetMacParameters+0x23c>)
 80134ca:	2200      	movs	r2, #0
 80134cc:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80134d0:	4b28      	ldr	r3, [pc, #160]	; (8013574 <ResetMacParameters+0x23c>)
 80134d2:	2201      	movs	r2, #1
 80134d4:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80134d8:	4b25      	ldr	r3, [pc, #148]	; (8013570 <ResetMacParameters+0x238>)
 80134da:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80134de:	4b25      	ldr	r3, [pc, #148]	; (8013574 <ResetMacParameters+0x23c>)
 80134e0:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80134e4:	4a23      	ldr	r2, [pc, #140]	; (8013574 <ResetMacParameters+0x23c>)
 80134e6:	4b23      	ldr	r3, [pc, #140]	; (8013574 <ResetMacParameters+0x23c>)
 80134e8:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 80134ec:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 80134f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80134f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80134f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80134f8:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80134fc:	4b1d      	ldr	r3, [pc, #116]	; (8013574 <ResetMacParameters+0x23c>)
 80134fe:	2201      	movs	r2, #1
 8013500:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013504:	4b1b      	ldr	r3, [pc, #108]	; (8013574 <ResetMacParameters+0x23c>)
 8013506:	2202      	movs	r2, #2
 8013508:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 801350c:	2300      	movs	r3, #0
 801350e:	643b      	str	r3, [r7, #64]	; 0x40
    classBCallbacks.MacProcessNotify = NULL;
 8013510:	2300      	movs	r3, #0
 8013512:	647b      	str	r3, [r7, #68]	; 0x44

    if( MacCtx.MacCallbacks != NULL )
 8013514:	4b17      	ldr	r3, [pc, #92]	; (8013574 <ResetMacParameters+0x23c>)
 8013516:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801351a:	2b00      	cmp	r3, #0
 801351c:	d009      	beq.n	8013532 <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 801351e:	4b15      	ldr	r3, [pc, #84]	; (8013574 <ResetMacParameters+0x23c>)
 8013520:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013524:	685b      	ldr	r3, [r3, #4]
 8013526:	643b      	str	r3, [r7, #64]	; 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8013528:	4b12      	ldr	r3, [pc, #72]	; (8013574 <ResetMacParameters+0x23c>)
 801352a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801352e:	695b      	ldr	r3, [r3, #20]
 8013530:	647b      	str	r3, [r7, #68]	; 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8013532:	4b14      	ldr	r3, [pc, #80]	; (8013584 <ResetMacParameters+0x24c>)
 8013534:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8013536:	4b14      	ldr	r3, [pc, #80]	; (8013588 <ResetMacParameters+0x250>)
 8013538:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 801353a:	4b14      	ldr	r3, [pc, #80]	; (801358c <ResetMacParameters+0x254>)
 801353c:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 801353e:	4b14      	ldr	r3, [pc, #80]	; (8013590 <ResetMacParameters+0x258>)
 8013540:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8013542:	4b14      	ldr	r3, [pc, #80]	; (8013594 <ResetMacParameters+0x25c>)
 8013544:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8013546:	4b14      	ldr	r3, [pc, #80]	; (8013598 <ResetMacParameters+0x260>)
 8013548:	633b      	str	r3, [r7, #48]	; 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 801354a:	4b14      	ldr	r3, [pc, #80]	; (801359c <ResetMacParameters+0x264>)
 801354c:	637b      	str	r3, [r7, #52]	; 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 801354e:	4b14      	ldr	r3, [pc, #80]	; (80135a0 <ResetMacParameters+0x268>)
 8013550:	63bb      	str	r3, [r7, #56]	; 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8013552:	4b14      	ldr	r3, [pc, #80]	; (80135a4 <ResetMacParameters+0x26c>)
 8013554:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8013556:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801355a:	f107 031c 	add.w	r3, r7, #28
 801355e:	4a12      	ldr	r2, [pc, #72]	; (80135a8 <ResetMacParameters+0x270>)
 8013560:	4618      	mov	r0, r3
 8013562:	f002 f996 	bl	8015892 <LoRaMacClassBInit>
}
 8013566:	bf00      	nop
 8013568:	3748      	adds	r7, #72	; 0x48
 801356a:	46bd      	mov	sp, r7
 801356c:	bdb0      	pop	{r4, r5, r7, pc}
 801356e:	bf00      	nop
 8013570:	20000bf0 	.word	0x20000bf0
 8013574:	200006d4 	.word	0x200006d4
 8013578:	20000e14 	.word	0x20000e14
 801357c:	20000e28 	.word	0x20000e28
 8013580:	20001788 	.word	0x20001788
 8013584:	20000b3c 	.word	0x20000b3c
 8013588:	20000af4 	.word	0x20000af4
 801358c:	20000b28 	.word	0x20000b28
 8013590:	20000b65 	.word	0x20000b65
 8013594:	20000cd4 	.word	0x20000cd4
 8013598:	20000c38 	.word	0x20000c38
 801359c:	20000c3c 	.word	0x20000c3c
 80135a0:	20000cd8 	.word	0x20000cd8
 80135a4:	20000d20 	.word	0x20000d20
 80135a8:	200011a4 	.word	0x200011a4

080135ac <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b082      	sub	sp, #8
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	6078      	str	r0, [r7, #4]
 80135b4:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 80135b6:	6878      	ldr	r0, [r7, #4]
 80135b8:	f00b ffa4 	bl	801f504 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 80135bc:	4b11      	ldr	r3, [pc, #68]	; (8013604 <RxWindowSetup+0x58>)
 80135be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135c0:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80135c2:	4b11      	ldr	r3, [pc, #68]	; (8013608 <RxWindowSetup+0x5c>)
 80135c4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80135c8:	4a10      	ldr	r2, [pc, #64]	; (801360c <RxWindowSetup+0x60>)
 80135ca:	6839      	ldr	r1, [r7, #0]
 80135cc:	4618      	mov	r0, r3
 80135ce:	f004 f9ff 	bl	80179d0 <RegionRxConfig>
 80135d2:	4603      	mov	r3, r0
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d010      	beq.n	80135fa <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80135d8:	4b0d      	ldr	r3, [pc, #52]	; (8013610 <RxWindowSetup+0x64>)
 80135da:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 80135de:	4b0c      	ldr	r3, [pc, #48]	; (8013610 <RxWindowSetup+0x64>)
 80135e0:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80135e4:	4b07      	ldr	r3, [pc, #28]	; (8013604 <RxWindowSetup+0x58>)
 80135e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135e8:	4a07      	ldr	r2, [pc, #28]	; (8013608 <RxWindowSetup+0x5c>)
 80135ea:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80135ec:	4610      	mov	r0, r2
 80135ee:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80135f0:	683b      	ldr	r3, [r7, #0]
 80135f2:	7cda      	ldrb	r2, [r3, #19]
 80135f4:	4b06      	ldr	r3, [pc, #24]	; (8013610 <RxWindowSetup+0x64>)
 80135f6:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 80135fa:	bf00      	nop
 80135fc:	3708      	adds	r7, #8
 80135fe:	46bd      	mov	sp, r7
 8013600:	bd80      	pop	{r7, pc}
 8013602:	bf00      	nop
 8013604:	08020e2c 	.word	0x08020e2c
 8013608:	20000bf0 	.word	0x20000bf0
 801360c:	20000af8 	.word	0x20000af8
 8013610:	200006d4 	.word	0x200006d4

08013614 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8013614:	b590      	push	{r4, r7, lr}
 8013616:	b083      	sub	sp, #12
 8013618:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801361a:	4b1e      	ldr	r3, [pc, #120]	; (8013694 <OpenContinuousRxCWindow+0x80>)
 801361c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8013620:	4b1c      	ldr	r3, [pc, #112]	; (8013694 <OpenContinuousRxCWindow+0x80>)
 8013622:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013626:	b259      	sxtb	r1, r3
 8013628:	4b1a      	ldr	r3, [pc, #104]	; (8013694 <OpenContinuousRxCWindow+0x80>)
 801362a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 801362e:	4b19      	ldr	r3, [pc, #100]	; (8013694 <OpenContinuousRxCWindow+0x80>)
 8013630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013632:	4c19      	ldr	r4, [pc, #100]	; (8013698 <OpenContinuousRxCWindow+0x84>)
 8013634:	9400      	str	r4, [sp, #0]
 8013636:	f004 f9a8 	bl	801798a <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801363a:	4b18      	ldr	r3, [pc, #96]	; (801369c <OpenContinuousRxCWindow+0x88>)
 801363c:	2202      	movs	r2, #2
 801363e:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8013642:	4b14      	ldr	r3, [pc, #80]	; (8013694 <OpenContinuousRxCWindow+0x80>)
 8013644:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8013648:	4b14      	ldr	r3, [pc, #80]	; (801369c <OpenContinuousRxCWindow+0x88>)
 801364a:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801364e:	4b13      	ldr	r3, [pc, #76]	; (801369c <OpenContinuousRxCWindow+0x88>)
 8013650:	2201      	movs	r2, #1
 8013652:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8013656:	4b0f      	ldr	r3, [pc, #60]	; (8013694 <OpenContinuousRxCWindow+0x80>)
 8013658:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801365c:	4a10      	ldr	r2, [pc, #64]	; (80136a0 <OpenContinuousRxCWindow+0x8c>)
 801365e:	490e      	ldr	r1, [pc, #56]	; (8013698 <OpenContinuousRxCWindow+0x84>)
 8013660:	4618      	mov	r0, r3
 8013662:	f004 f9b5 	bl	80179d0 <RegionRxConfig>
 8013666:	4603      	mov	r3, r0
 8013668:	2b00      	cmp	r3, #0
 801366a:	d00f      	beq.n	801368c <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 801366c:	4b0b      	ldr	r3, [pc, #44]	; (801369c <OpenContinuousRxCWindow+0x88>)
 801366e:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 8013672:	4b0a      	ldr	r3, [pc, #40]	; (801369c <OpenContinuousRxCWindow+0x88>)
 8013674:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( 0 ); // Continuous mode
 8013678:	4b0a      	ldr	r3, [pc, #40]	; (80136a4 <OpenContinuousRxCWindow+0x90>)
 801367a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801367c:	2000      	movs	r0, #0
 801367e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8013680:	4b06      	ldr	r3, [pc, #24]	; (801369c <OpenContinuousRxCWindow+0x88>)
 8013682:	f893 23fb 	ldrb.w	r2, [r3, #1019]	; 0x3fb
 8013686:	4b05      	ldr	r3, [pc, #20]	; (801369c <OpenContinuousRxCWindow+0x88>)
 8013688:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 801368c:	bf00      	nop
 801368e:	3704      	adds	r7, #4
 8013690:	46bd      	mov	sp, r7
 8013692:	bd90      	pop	{r4, r7, pc}
 8013694:	20000bf0 	.word	0x20000bf0
 8013698:	20000abc 	.word	0x20000abc
 801369c:	200006d4 	.word	0x200006d4
 80136a0:	20000af8 	.word	0x20000af8
 80136a4:	08020e2c 	.word	0x08020e2c

080136a8 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b088      	sub	sp, #32
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	60f8      	str	r0, [r7, #12]
 80136b0:	60b9      	str	r1, [r7, #8]
 80136b2:	603b      	str	r3, [r7, #0]
 80136b4:	4613      	mov	r3, r2
 80136b6:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 80136b8:	4b82      	ldr	r3, [pc, #520]	; (80138c4 <PrepareFrame+0x21c>)
 80136ba:	2200      	movs	r2, #0
 80136bc:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80136be:	4b81      	ldr	r3, [pc, #516]	; (80138c4 <PrepareFrame+0x21c>)
 80136c0:	2200      	movs	r2, #0
 80136c2:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    uint32_t fCntUp = 0;
 80136c6:	2300      	movs	r3, #0
 80136c8:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80136ca:	2300      	movs	r3, #0
 80136cc:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 80136ce:	2300      	movs	r3, #0
 80136d0:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 80136d2:	683b      	ldr	r3, [r7, #0]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d101      	bne.n	80136dc <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 80136d8:	2300      	movs	r3, #0
 80136da:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80136dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80136de:	461a      	mov	r2, r3
 80136e0:	6839      	ldr	r1, [r7, #0]
 80136e2:	4879      	ldr	r0, [pc, #484]	; (80138c8 <PrepareFrame+0x220>)
 80136e4:	f007 feb1 	bl	801b44a <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80136e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80136ea:	b2da      	uxtb	r2, r3
 80136ec:	4b75      	ldr	r3, [pc, #468]	; (80138c4 <PrepareFrame+0x21c>)
 80136ee:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	781a      	ldrb	r2, [r3, #0]
 80136f6:	4b73      	ldr	r3, [pc, #460]	; (80138c4 <PrepareFrame+0x21c>)
 80136f8:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	781b      	ldrb	r3, [r3, #0]
 80136fe:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8013702:	b2db      	uxtb	r3, r3
 8013704:	2b07      	cmp	r3, #7
 8013706:	f000 80b9 	beq.w	801387c <PrepareFrame+0x1d4>
 801370a:	2b07      	cmp	r3, #7
 801370c:	f300 80d0 	bgt.w	80138b0 <PrepareFrame+0x208>
 8013710:	2b02      	cmp	r3, #2
 8013712:	d006      	beq.n	8013722 <PrepareFrame+0x7a>
 8013714:	2b04      	cmp	r3, #4
 8013716:	f040 80cb 	bne.w	80138b0 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 801371a:	4b6a      	ldr	r3, [pc, #424]	; (80138c4 <PrepareFrame+0x21c>)
 801371c:	2201      	movs	r2, #1
 801371e:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8013722:	4b68      	ldr	r3, [pc, #416]	; (80138c4 <PrepareFrame+0x21c>)
 8013724:	2204      	movs	r2, #4
 8013726:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 801372a:	4b66      	ldr	r3, [pc, #408]	; (80138c4 <PrepareFrame+0x21c>)
 801372c:	4a67      	ldr	r2, [pc, #412]	; (80138cc <PrepareFrame+0x224>)
 801372e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8013732:	4b64      	ldr	r3, [pc, #400]	; (80138c4 <PrepareFrame+0x21c>)
 8013734:	22ff      	movs	r2, #255	; 0xff
 8013736:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	781a      	ldrb	r2, [r3, #0]
 801373e:	4b61      	ldr	r3, [pc, #388]	; (80138c4 <PrepareFrame+0x21c>)
 8013740:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8013744:	4a5f      	ldr	r2, [pc, #380]	; (80138c4 <PrepareFrame+0x21c>)
 8013746:	79fb      	ldrb	r3, [r7, #7]
 8013748:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 801374c:	4b60      	ldr	r3, [pc, #384]	; (80138d0 <PrepareFrame+0x228>)
 801374e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8013752:	4a5c      	ldr	r2, [pc, #368]	; (80138c4 <PrepareFrame+0x21c>)
 8013754:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8013758:	68bb      	ldr	r3, [r7, #8]
 801375a:	781a      	ldrb	r2, [r3, #0]
 801375c:	4b59      	ldr	r3, [pc, #356]	; (80138c4 <PrepareFrame+0x21c>)
 801375e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8013762:	4b58      	ldr	r3, [pc, #352]	; (80138c4 <PrepareFrame+0x21c>)
 8013764:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8013768:	4b56      	ldr	r3, [pc, #344]	; (80138c4 <PrepareFrame+0x21c>)
 801376a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 801376e:	4b55      	ldr	r3, [pc, #340]	; (80138c4 <PrepareFrame+0x21c>)
 8013770:	4a55      	ldr	r2, [pc, #340]	; (80138c8 <PrepareFrame+0x220>)
 8013772:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8013776:	f107 0318 	add.w	r3, r7, #24
 801377a:	4618      	mov	r0, r3
 801377c:	f003 f9dc 	bl	8016b38 <LoRaMacCryptoGetFCntUp>
 8013780:	4603      	mov	r3, r0
 8013782:	2b00      	cmp	r3, #0
 8013784:	d001      	beq.n	801378a <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8013786:	2312      	movs	r3, #18
 8013788:	e098      	b.n	80138bc <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 801378a:	69bb      	ldr	r3, [r7, #24]
 801378c:	b29a      	uxth	r2, r3
 801378e:	4b4d      	ldr	r3, [pc, #308]	; (80138c4 <PrepareFrame+0x21c>)
 8013790:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 8013794:	4b4b      	ldr	r3, [pc, #300]	; (80138c4 <PrepareFrame+0x21c>)
 8013796:	2200      	movs	r2, #0
 8013798:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 801379c:	4b49      	ldr	r3, [pc, #292]	; (80138c4 <PrepareFrame+0x21c>)
 801379e:	2200      	movs	r2, #0
 80137a0:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80137a4:	69bb      	ldr	r3, [r7, #24]
 80137a6:	4a47      	ldr	r2, [pc, #284]	; (80138c4 <PrepareFrame+0x21c>)
 80137a8:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80137ac:	f107 0314 	add.w	r3, r7, #20
 80137b0:	4618      	mov	r0, r3
 80137b2:	f002 fb8d 	bl	8015ed0 <LoRaMacCommandsGetSizeSerializedCmds>
 80137b6:	4603      	mov	r3, r0
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d001      	beq.n	80137c0 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80137bc:	2313      	movs	r3, #19
 80137be:	e07d      	b.n	80138bc <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 80137c0:	697b      	ldr	r3, [r7, #20]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d076      	beq.n	80138b4 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80137c6:	4b42      	ldr	r3, [pc, #264]	; (80138d0 <PrepareFrame+0x228>)
 80137c8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80137cc:	4618      	mov	r0, r3
 80137ce:	f7fe fd2b 	bl	8012228 <GetMaxAppPayloadWithoutFOptsLength>
 80137d2:	4603      	mov	r3, r0
 80137d4:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80137d6:	4b3b      	ldr	r3, [pc, #236]	; (80138c4 <PrepareFrame+0x21c>)
 80137d8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d01d      	beq.n	801381c <PrepareFrame+0x174>
 80137e0:	697b      	ldr	r3, [r7, #20]
 80137e2:	2b0f      	cmp	r3, #15
 80137e4:	d81a      	bhi.n	801381c <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80137e6:	f107 0314 	add.w	r3, r7, #20
 80137ea:	4a3a      	ldr	r2, [pc, #232]	; (80138d4 <PrepareFrame+0x22c>)
 80137ec:	4619      	mov	r1, r3
 80137ee:	200f      	movs	r0, #15
 80137f0:	f002 fb84 	bl	8015efc <LoRaMacCommandsSerializeCmds>
 80137f4:	4603      	mov	r3, r0
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d001      	beq.n	80137fe <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80137fa:	2313      	movs	r3, #19
 80137fc:	e05e      	b.n	80138bc <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80137fe:	697b      	ldr	r3, [r7, #20]
 8013800:	f003 030f 	and.w	r3, r3, #15
 8013804:	b2d9      	uxtb	r1, r3
 8013806:	68ba      	ldr	r2, [r7, #8]
 8013808:	7813      	ldrb	r3, [r2, #0]
 801380a:	f361 0303 	bfi	r3, r1, #0, #4
 801380e:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8013810:	68bb      	ldr	r3, [r7, #8]
 8013812:	781a      	ldrb	r2, [r3, #0]
 8013814:	4b2b      	ldr	r3, [pc, #172]	; (80138c4 <PrepareFrame+0x21c>)
 8013816:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 801381a:	e04b      	b.n	80138b4 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801381c:	4b29      	ldr	r3, [pc, #164]	; (80138c4 <PrepareFrame+0x21c>)
 801381e:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013822:	2b00      	cmp	r3, #0
 8013824:	d010      	beq.n	8013848 <PrepareFrame+0x1a0>
 8013826:	697b      	ldr	r3, [r7, #20]
 8013828:	2b0f      	cmp	r3, #15
 801382a:	d90d      	bls.n	8013848 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801382c:	7ffb      	ldrb	r3, [r7, #31]
 801382e:	f107 0114 	add.w	r1, r7, #20
 8013832:	4a29      	ldr	r2, [pc, #164]	; (80138d8 <PrepareFrame+0x230>)
 8013834:	4618      	mov	r0, r3
 8013836:	f002 fb61 	bl	8015efc <LoRaMacCommandsSerializeCmds>
 801383a:	4603      	mov	r3, r0
 801383c:	2b00      	cmp	r3, #0
 801383e:	d001      	beq.n	8013844 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013840:	2313      	movs	r3, #19
 8013842:	e03b      	b.n	80138bc <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8013844:	230a      	movs	r3, #10
 8013846:	e039      	b.n	80138bc <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8013848:	7ffb      	ldrb	r3, [r7, #31]
 801384a:	f107 0114 	add.w	r1, r7, #20
 801384e:	4a22      	ldr	r2, [pc, #136]	; (80138d8 <PrepareFrame+0x230>)
 8013850:	4618      	mov	r0, r3
 8013852:	f002 fb53 	bl	8015efc <LoRaMacCommandsSerializeCmds>
 8013856:	4603      	mov	r3, r0
 8013858:	2b00      	cmp	r3, #0
 801385a:	d001      	beq.n	8013860 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801385c:	2313      	movs	r3, #19
 801385e:	e02d      	b.n	80138bc <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8013860:	4b18      	ldr	r3, [pc, #96]	; (80138c4 <PrepareFrame+0x21c>)
 8013862:	2200      	movs	r2, #0
 8013864:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8013868:	4b16      	ldr	r3, [pc, #88]	; (80138c4 <PrepareFrame+0x21c>)
 801386a:	4a1b      	ldr	r2, [pc, #108]	; (80138d8 <PrepareFrame+0x230>)
 801386c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8013870:	697b      	ldr	r3, [r7, #20]
 8013872:	b2da      	uxtb	r2, r3
 8013874:	4b13      	ldr	r3, [pc, #76]	; (80138c4 <PrepareFrame+0x21c>)
 8013876:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 801387a:	e01b      	b.n	80138b4 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 801387c:	683b      	ldr	r3, [r7, #0]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d01a      	beq.n	80138b8 <PrepareFrame+0x210>
 8013882:	4b10      	ldr	r3, [pc, #64]	; (80138c4 <PrepareFrame+0x21c>)
 8013884:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013888:	2b00      	cmp	r3, #0
 801388a:	d015      	beq.n	80138b8 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 801388c:	4813      	ldr	r0, [pc, #76]	; (80138dc <PrepareFrame+0x234>)
 801388e:	4b0d      	ldr	r3, [pc, #52]	; (80138c4 <PrepareFrame+0x21c>)
 8013890:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013894:	b29b      	uxth	r3, r3
 8013896:	461a      	mov	r2, r3
 8013898:	6839      	ldr	r1, [r7, #0]
 801389a:	f007 fdd6 	bl	801b44a <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 801389e:	4b09      	ldr	r3, [pc, #36]	; (80138c4 <PrepareFrame+0x21c>)
 80138a0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80138a4:	b29b      	uxth	r3, r3
 80138a6:	3301      	adds	r3, #1
 80138a8:	b29a      	uxth	r2, r3
 80138aa:	4b06      	ldr	r3, [pc, #24]	; (80138c4 <PrepareFrame+0x21c>)
 80138ac:	801a      	strh	r2, [r3, #0]
            }
            break;
 80138ae:	e003      	b.n	80138b8 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80138b0:	2302      	movs	r3, #2
 80138b2:	e003      	b.n	80138bc <PrepareFrame+0x214>
            break;
 80138b4:	bf00      	nop
 80138b6:	e000      	b.n	80138ba <PrepareFrame+0x212>
            break;
 80138b8:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 80138ba:	2300      	movs	r3, #0
}
 80138bc:	4618      	mov	r0, r3
 80138be:	3720      	adds	r7, #32
 80138c0:	46bd      	mov	sp, r7
 80138c2:	bd80      	pop	{r7, pc}
 80138c4:	200006d4 	.word	0x200006d4
 80138c8:	2000080c 	.word	0x2000080c
 80138cc:	200006d6 	.word	0x200006d6
 80138d0:	20000bf0 	.word	0x20000bf0
 80138d4:	200007ec 	.word	0x200007ec
 80138d8:	20000b70 	.word	0x20000b70
 80138dc:	200006d7 	.word	0x200006d7

080138e0 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b08a      	sub	sp, #40	; 0x28
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	4603      	mov	r3, r0
 80138e8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138ea:	2303      	movs	r3, #3
 80138ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80138f0:	2300      	movs	r3, #0
 80138f2:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80138f4:	79fb      	ldrb	r3, [r7, #7]
 80138f6:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80138f8:	4b4b      	ldr	r3, [pc, #300]	; (8013a28 <SendFrameOnChannel+0x148>)
 80138fa:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80138fe:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013900:	4b49      	ldr	r3, [pc, #292]	; (8013a28 <SendFrameOnChannel+0x148>)
 8013902:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013906:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8013908:	4b47      	ldr	r3, [pc, #284]	; (8013a28 <SendFrameOnChannel+0x148>)
 801390a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801390e:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013910:	4b45      	ldr	r3, [pc, #276]	; (8013a28 <SendFrameOnChannel+0x148>)
 8013912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013916:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8013918:	4b44      	ldr	r3, [pc, #272]	; (8013a2c <SendFrameOnChannel+0x14c>)
 801391a:	881b      	ldrh	r3, [r3, #0]
 801391c:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801391e:	4b42      	ldr	r3, [pc, #264]	; (8013a28 <SendFrameOnChannel+0x148>)
 8013920:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8013924:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8013926:	4b40      	ldr	r3, [pc, #256]	; (8013a28 <SendFrameOnChannel+0x148>)
 8013928:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801392c:	f107 020f 	add.w	r2, r7, #15
 8013930:	f107 0110 	add.w	r1, r7, #16
 8013934:	4b3e      	ldr	r3, [pc, #248]	; (8013a30 <SendFrameOnChannel+0x150>)
 8013936:	f004 f869 	bl	8017a0c <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801393a:	4b3c      	ldr	r3, [pc, #240]	; (8013a2c <SendFrameOnChannel+0x14c>)
 801393c:	2201      	movs	r2, #1
 801393e:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013942:	4b39      	ldr	r3, [pc, #228]	; (8013a28 <SendFrameOnChannel+0x148>)
 8013944:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013948:	b2da      	uxtb	r2, r3
 801394a:	4b38      	ldr	r3, [pc, #224]	; (8013a2c <SendFrameOnChannel+0x14c>)
 801394c:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 8013950:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8013954:	4b35      	ldr	r3, [pc, #212]	; (8013a2c <SendFrameOnChannel+0x14c>)
 8013956:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
    MacCtx.McpsConfirm.Channel = channel;
 801395a:	79fb      	ldrb	r3, [r7, #7]
 801395c:	4a33      	ldr	r2, [pc, #204]	; (8013a2c <SendFrameOnChannel+0x14c>)
 801395e:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8013962:	4b32      	ldr	r3, [pc, #200]	; (8013a2c <SendFrameOnChannel+0x14c>)
 8013964:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8013968:	4a30      	ldr	r2, [pc, #192]	; (8013a2c <SendFrameOnChannel+0x14c>)
 801396a:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801396e:	4b2f      	ldr	r3, [pc, #188]	; (8013a2c <SendFrameOnChannel+0x14c>)
 8013970:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8013974:	4a2d      	ldr	r2, [pc, #180]	; (8013a2c <SendFrameOnChannel+0x14c>)
 8013976:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 801397a:	f001 fff6 	bl	801596a <LoRaMacClassBIsBeaconModeActive>
 801397e:	4603      	mov	r3, r0
 8013980:	2b00      	cmp	r3, #0
 8013982:	d00b      	beq.n	801399c <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8013984:	4b29      	ldr	r3, [pc, #164]	; (8013a2c <SendFrameOnChannel+0x14c>)
 8013986:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 801398a:	4618      	mov	r0, r3
 801398c:	f002 f858 	bl	8015a40 <LoRaMacClassBIsUplinkCollision>
 8013990:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8013992:	6a3b      	ldr	r3, [r7, #32]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d001      	beq.n	801399c <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8013998:	2310      	movs	r3, #16
 801399a:	e040      	b.n	8013a1e <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801399c:	4b22      	ldr	r3, [pc, #136]	; (8013a28 <SendFrameOnChannel+0x148>)
 801399e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80139a2:	2b01      	cmp	r3, #1
 80139a4:	d101      	bne.n	80139aa <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80139a6:	f002 f855 	bl	8015a54 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80139aa:	f001 ffef 	bl	801598c <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80139ae:	4b1e      	ldr	r3, [pc, #120]	; (8013a28 <SendFrameOnChannel+0x148>)
 80139b0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80139b4:	b2db      	uxtb	r3, r3
 80139b6:	4a1d      	ldr	r2, [pc, #116]	; (8013a2c <SendFrameOnChannel+0x14c>)
 80139b8:	f892 241b 	ldrb.w	r2, [r2, #1051]	; 0x41b
 80139bc:	4611      	mov	r1, r2
 80139be:	4618      	mov	r0, r3
 80139c0:	f7ff fc2a 	bl	8013218 <SecureFrame>
 80139c4:	4603      	mov	r3, r0
 80139c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 80139ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d002      	beq.n	80139d8 <SendFrameOnChannel+0xf8>
    {
        return status;
 80139d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80139d6:	e022      	b.n	8013a1e <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80139d8:	4b14      	ldr	r3, [pc, #80]	; (8013a2c <SendFrameOnChannel+0x14c>)
 80139da:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80139de:	f043 0302 	orr.w	r3, r3, #2
 80139e2:	4a12      	ldr	r2, [pc, #72]	; (8013a2c <SendFrameOnChannel+0x14c>)
 80139e4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 80139e8:	4b10      	ldr	r3, [pc, #64]	; (8013a2c <SendFrameOnChannel+0x14c>)
 80139ea:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80139ee:	3301      	adds	r3, #1
 80139f0:	b2da      	uxtb	r2, r3
 80139f2:	4b0e      	ldr	r3, [pc, #56]	; (8013a2c <SendFrameOnChannel+0x14c>)
 80139f4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80139f8:	4b0c      	ldr	r3, [pc, #48]	; (8013a2c <SendFrameOnChannel+0x14c>)
 80139fa:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80139fe:	4b0b      	ldr	r3, [pc, #44]	; (8013a2c <SendFrameOnChannel+0x14c>)
 8013a00:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 8013a04:	4b09      	ldr	r3, [pc, #36]	; (8013a2c <SendFrameOnChannel+0x14c>)
 8013a06:	2200      	movs	r2, #0
 8013a08:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8013a0c:	4b09      	ldr	r3, [pc, #36]	; (8013a34 <SendFrameOnChannel+0x154>)
 8013a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a10:	4a06      	ldr	r2, [pc, #24]	; (8013a2c <SendFrameOnChannel+0x14c>)
 8013a12:	8812      	ldrh	r2, [r2, #0]
 8013a14:	b2d2      	uxtb	r2, r2
 8013a16:	4611      	mov	r1, r2
 8013a18:	4807      	ldr	r0, [pc, #28]	; (8013a38 <SendFrameOnChannel+0x158>)
 8013a1a:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8013a1c:	2300      	movs	r3, #0
}
 8013a1e:	4618      	mov	r0, r3
 8013a20:	3728      	adds	r7, #40	; 0x28
 8013a22:	46bd      	mov	sp, r7
 8013a24:	bd80      	pop	{r7, pc}
 8013a26:	bf00      	nop
 8013a28:	20000bf0 	.word	0x20000bf0
 8013a2c:	200006d4 	.word	0x200006d4
 8013a30:	20000af0 	.word	0x20000af0
 8013a34:	08020e2c 	.word	0x08020e2c
 8013a38:	200006d6 	.word	0x200006d6

08013a3c <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b082      	sub	sp, #8
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	4603      	mov	r3, r0
 8013a44:	6039      	str	r1, [r7, #0]
 8013a46:	80fb      	strh	r3, [r7, #6]
 8013a48:	4613      	mov	r3, r2
 8013a4a:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8013a4c:	4b09      	ldr	r3, [pc, #36]	; (8013a74 <SetTxContinuousWave+0x38>)
 8013a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a50:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013a54:	88fa      	ldrh	r2, [r7, #6]
 8013a56:	6838      	ldr	r0, [r7, #0]
 8013a58:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013a5a:	4b07      	ldr	r3, [pc, #28]	; (8013a78 <SetTxContinuousWave+0x3c>)
 8013a5c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013a60:	f043 0302 	orr.w	r3, r3, #2
 8013a64:	4a04      	ldr	r2, [pc, #16]	; (8013a78 <SetTxContinuousWave+0x3c>)
 8013a66:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013a6a:	2300      	movs	r3, #0
}
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	3708      	adds	r7, #8
 8013a70:	46bd      	mov	sp, r7
 8013a72:	bd80      	pop	{r7, pc}
 8013a74:	08020e2c 	.word	0x08020e2c
 8013a78:	200006d4 	.word	0x200006d4

08013a7c <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8013a7c:	b580      	push	{r7, lr}
 8013a7e:	b082      	sub	sp, #8
 8013a80:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 8013a82:	2300      	movs	r3, #0
 8013a84:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8013a86:	4b49      	ldr	r3, [pc, #292]	; (8013bac <RestoreNvmData+0x130>)
 8013a88:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013a8c:	2b01      	cmp	r3, #1
 8013a8e:	d001      	beq.n	8013a94 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8013a90:	2301      	movs	r3, #1
 8013a92:	e087      	b.n	8013ba4 <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8013a94:	2124      	movs	r1, #36	; 0x24
 8013a96:	4846      	ldr	r0, [pc, #280]	; (8013bb0 <RestoreNvmData+0x134>)
 8013a98:	f007 fd2c 	bl	801b4f4 <Crc32>
 8013a9c:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8013a9e:	4b44      	ldr	r3, [pc, #272]	; (8013bb0 <RestoreNvmData+0x134>)
 8013aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aa2:	687a      	ldr	r2, [r7, #4]
 8013aa4:	429a      	cmp	r2, r3
 8013aa6:	d001      	beq.n	8013aac <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013aa8:	2317      	movs	r3, #23
 8013aaa:	e07b      	b.n	8013ba4 <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8013aac:	211c      	movs	r1, #28
 8013aae:	4841      	ldr	r0, [pc, #260]	; (8013bb4 <RestoreNvmData+0x138>)
 8013ab0:	f007 fd20 	bl	801b4f4 <Crc32>
 8013ab4:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8013ab6:	4b3e      	ldr	r3, [pc, #248]	; (8013bb0 <RestoreNvmData+0x134>)
 8013ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013aba:	687a      	ldr	r2, [r7, #4]
 8013abc:	429a      	cmp	r2, r3
 8013abe:	d001      	beq.n	8013ac4 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013ac0:	2317      	movs	r3, #23
 8013ac2:	e06f      	b.n	8013ba4 <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8013ac4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013ac8:	483b      	ldr	r0, [pc, #236]	; (8013bb8 <RestoreNvmData+0x13c>)
 8013aca:	f007 fd13 	bl	801b4f4 <Crc32>
 8013ace:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8013ad0:	4b37      	ldr	r3, [pc, #220]	; (8013bb0 <RestoreNvmData+0x134>)
 8013ad2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8013ad6:	687a      	ldr	r2, [r7, #4]
 8013ad8:	429a      	cmp	r2, r3
 8013ada:	d001      	beq.n	8013ae0 <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013adc:	2317      	movs	r3, #23
 8013ade:	e061      	b.n	8013ba4 <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8013ae0:	21d4      	movs	r1, #212	; 0xd4
 8013ae2:	4836      	ldr	r0, [pc, #216]	; (8013bbc <RestoreNvmData+0x140>)
 8013ae4:	f007 fd06 	bl	801b4f4 <Crc32>
 8013ae8:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8013aea:	4b31      	ldr	r3, [pc, #196]	; (8013bb0 <RestoreNvmData+0x134>)
 8013aec:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013af0:	687a      	ldr	r2, [r7, #4]
 8013af2:	429a      	cmp	r2, r3
 8013af4:	d001      	beq.n	8013afa <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013af6:	2317      	movs	r3, #23
 8013af8:	e054      	b.n	8013ba4 <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8013afa:	2110      	movs	r1, #16
 8013afc:	4830      	ldr	r0, [pc, #192]	; (8013bc0 <RestoreNvmData+0x144>)
 8013afe:	f007 fcf9 	bl	801b4f4 <Crc32>
 8013b02:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8013b04:	4b2a      	ldr	r3, [pc, #168]	; (8013bb0 <RestoreNvmData+0x134>)
 8013b06:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8013b0a:	687a      	ldr	r2, [r7, #4]
 8013b0c:	429a      	cmp	r2, r3
 8013b0e:	d001      	beq.n	8013b14 <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013b10:	2317      	movs	r3, #23
 8013b12:	e047      	b.n	8013ba4 <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 8013b14:	f44f 715e 	mov.w	r1, #888	; 0x378
 8013b18:	482a      	ldr	r0, [pc, #168]	; (8013bc4 <RestoreNvmData+0x148>)
 8013b1a:	f007 fceb 	bl	801b4f4 <Crc32>
 8013b1e:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 8013b20:	4b23      	ldr	r3, [pc, #140]	; (8013bb0 <RestoreNvmData+0x134>)
 8013b22:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8013b26:	687a      	ldr	r2, [r7, #4]
 8013b28:	429a      	cmp	r2, r3
 8013b2a:	d001      	beq.n	8013b30 <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013b2c:	2317      	movs	r3, #23
 8013b2e:	e039      	b.n	8013ba4 <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8013b30:	2114      	movs	r1, #20
 8013b32:	4825      	ldr	r0, [pc, #148]	; (8013bc8 <RestoreNvmData+0x14c>)
 8013b34:	f007 fcde 	bl	801b4f4 <Crc32>
 8013b38:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8013b3a:	4b1d      	ldr	r3, [pc, #116]	; (8013bb0 <RestoreNvmData+0x134>)
 8013b3c:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 8013b40:	687a      	ldr	r2, [r7, #4]
 8013b42:	429a      	cmp	r2, r3
 8013b44:	d001      	beq.n	8013b4a <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013b46:	2317      	movs	r3, #23
 8013b48:	e02c      	b.n	8013ba4 <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8013b4a:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8013b4e:	4918      	ldr	r1, [pc, #96]	; (8013bb0 <RestoreNvmData+0x134>)
 8013b50:	481e      	ldr	r0, [pc, #120]	; (8013bcc <RestoreNvmData+0x150>)
 8013b52:	f007 fc7a 	bl	801b44a <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8013b56:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8013b5a:	2100      	movs	r1, #0
 8013b5c:	4814      	ldr	r0, [pc, #80]	; (8013bb0 <RestoreNvmData+0x134>)
 8013b5e:	f007 fcaf 	bl	801b4c0 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8013b62:	4b12      	ldr	r3, [pc, #72]	; (8013bac <RestoreNvmData+0x130>)
 8013b64:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8013b68:	4b10      	ldr	r3, [pc, #64]	; (8013bac <RestoreNvmData+0x130>)
 8013b6a:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8013b6e:	4b17      	ldr	r3, [pc, #92]	; (8013bcc <RestoreNvmData+0x150>)
 8013b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013b72:	4a0e      	ldr	r2, [pc, #56]	; (8013bac <RestoreNvmData+0x130>)
 8013b74:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013b78:	4b14      	ldr	r3, [pc, #80]	; (8013bcc <RestoreNvmData+0x150>)
 8013b7a:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8013b7e:	4b0b      	ldr	r3, [pc, #44]	; (8013bac <RestoreNvmData+0x130>)
 8013b80:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013b84:	4b09      	ldr	r3, [pc, #36]	; (8013bac <RestoreNvmData+0x130>)
 8013b86:	2201      	movs	r2, #1
 8013b88:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013b8c:	4b07      	ldr	r3, [pc, #28]	; (8013bac <RestoreNvmData+0x130>)
 8013b8e:	2202      	movs	r2, #2
 8013b90:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8013b94:	4b0e      	ldr	r3, [pc, #56]	; (8013bd0 <RestoreNvmData+0x154>)
 8013b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013b98:	4a0c      	ldr	r2, [pc, #48]	; (8013bcc <RestoreNvmData+0x150>)
 8013b9a:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8013b9e:	4610      	mov	r0, r2
 8013ba0:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 8013ba2:	2300      	movs	r3, #0
}
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	3708      	adds	r7, #8
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	bd80      	pop	{r7, pc}
 8013bac:	200006d4 	.word	0x200006d4
 8013bb0:	200011bc 	.word	0x200011bc
 8013bb4:	200011e4 	.word	0x200011e4
 8013bb8:	20001204 	.word	0x20001204
 8013bbc:	20001308 	.word	0x20001308
 8013bc0:	200013e0 	.word	0x200013e0
 8013bc4:	200013f4 	.word	0x200013f4
 8013bc8:	20001770 	.word	0x20001770
 8013bcc:	20000bf0 	.word	0x20000bf0
 8013bd0:	08020e2c 	.word	0x08020e2c

08013bd4 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8013bd4:	b480      	push	{r7}
 8013bd6:	b083      	sub	sp, #12
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	6078      	str	r0, [r7, #4]
 8013bdc:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d002      	beq.n	8013bea <DetermineFrameType+0x16>
 8013be4:	683b      	ldr	r3, [r7, #0]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d101      	bne.n	8013bee <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013bea:	2303      	movs	r3, #3
 8013bec:	e03b      	b.n	8013c66 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	7b1b      	ldrb	r3, [r3, #12]
 8013bf2:	f003 030f 	and.w	r3, r3, #15
 8013bf6:	b2db      	uxtb	r3, r3
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d008      	beq.n	8013c0e <DetermineFrameType+0x3a>
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d003      	beq.n	8013c0e <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8013c06:	683b      	ldr	r3, [r7, #0]
 8013c08:	2200      	movs	r2, #0
 8013c0a:	701a      	strb	r2, [r3, #0]
 8013c0c:	e02a      	b.n	8013c64 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d103      	bne.n	8013c20 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8013c18:	683b      	ldr	r3, [r7, #0]
 8013c1a:	2201      	movs	r2, #1
 8013c1c:	701a      	strb	r2, [r3, #0]
 8013c1e:	e021      	b.n	8013c64 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	7b1b      	ldrb	r3, [r3, #12]
 8013c24:	f003 030f 	and.w	r3, r3, #15
 8013c28:	b2db      	uxtb	r3, r3
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d108      	bne.n	8013c40 <DetermineFrameType+0x6c>
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d103      	bne.n	8013c40 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8013c38:	683b      	ldr	r3, [r7, #0]
 8013c3a:	2202      	movs	r2, #2
 8013c3c:	701a      	strb	r2, [r3, #0]
 8013c3e:	e011      	b.n	8013c64 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	7b1b      	ldrb	r3, [r3, #12]
 8013c44:	f003 030f 	and.w	r3, r3, #15
 8013c48:	b2db      	uxtb	r3, r3
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d108      	bne.n	8013c60 <DetermineFrameType+0x8c>
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d003      	beq.n	8013c60 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8013c58:	683b      	ldr	r3, [r7, #0]
 8013c5a:	2203      	movs	r2, #3
 8013c5c:	701a      	strb	r2, [r3, #0]
 8013c5e:	e001      	b.n	8013c64 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8013c60:	2318      	movs	r3, #24
 8013c62:	e000      	b.n	8013c66 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8013c64:	2300      	movs	r3, #0
}
 8013c66:	4618      	mov	r0, r3
 8013c68:	370c      	adds	r7, #12
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	bc80      	pop	{r7}
 8013c6e:	4770      	bx	lr

08013c70 <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8013c70:	b480      	push	{r7}
 8013c72:	b083      	sub	sp, #12
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	4603      	mov	r3, r0
 8013c78:	460a      	mov	r2, r1
 8013c7a:	71fb      	strb	r3, [r7, #7]
 8013c7c:	4613      	mov	r3, r2
 8013c7e:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8013c80:	79fa      	ldrb	r2, [r7, #7]
 8013c82:	79bb      	ldrb	r3, [r7, #6]
 8013c84:	429a      	cmp	r2, r3
 8013c86:	d301      	bcc.n	8013c8c <CheckRetrans+0x1c>
    {
        return true;
 8013c88:	2301      	movs	r3, #1
 8013c8a:	e000      	b.n	8013c8e <CheckRetrans+0x1e>
    }
    return false;
 8013c8c:	2300      	movs	r3, #0
}
 8013c8e:	4618      	mov	r0, r3
 8013c90:	370c      	adds	r7, #12
 8013c92:	46bd      	mov	sp, r7
 8013c94:	bc80      	pop	{r7}
 8013c96:	4770      	bx	lr

08013c98 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8013c9c:	4b12      	ldr	r3, [pc, #72]	; (8013ce8 <CheckRetransUnconfirmedUplink+0x50>)
 8013c9e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013ca2:	4a12      	ldr	r2, [pc, #72]	; (8013cec <CheckRetransUnconfirmedUplink+0x54>)
 8013ca4:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 8013ca8:	4611      	mov	r1, r2
 8013caa:	4618      	mov	r0, r3
 8013cac:	f7ff ffe0 	bl	8013c70 <CheckRetrans>
 8013cb0:	4603      	mov	r3, r0
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d001      	beq.n	8013cba <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8013cb6:	2301      	movs	r3, #1
 8013cb8:	e014      	b.n	8013ce4 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013cba:	4b0b      	ldr	r3, [pc, #44]	; (8013ce8 <CheckRetransUnconfirmedUplink+0x50>)
 8013cbc:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8013cc0:	f003 0302 	and.w	r3, r3, #2
 8013cc4:	b2db      	uxtb	r3, r3
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d00b      	beq.n	8013ce2 <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8013cca:	4b07      	ldr	r3, [pc, #28]	; (8013ce8 <CheckRetransUnconfirmedUplink+0x50>)
 8013ccc:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d004      	beq.n	8013cde <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8013cd4:	4b04      	ldr	r3, [pc, #16]	; (8013ce8 <CheckRetransUnconfirmedUplink+0x50>)
 8013cd6:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8013cda:	2b01      	cmp	r3, #1
 8013cdc:	d101      	bne.n	8013ce2 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 8013cde:	2301      	movs	r3, #1
 8013ce0:	e000      	b.n	8013ce4 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 8013ce2:	2300      	movs	r3, #0
}
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	bd80      	pop	{r7, pc}
 8013ce8:	200006d4 	.word	0x200006d4
 8013cec:	20000bf0 	.word	0x20000bf0

08013cf0 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8013cf4:	4b10      	ldr	r3, [pc, #64]	; (8013d38 <CheckRetransConfirmedUplink+0x48>)
 8013cf6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013cfa:	4a10      	ldr	r2, [pc, #64]	; (8013d3c <CheckRetransConfirmedUplink+0x4c>)
 8013cfc:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 8013d00:	4611      	mov	r1, r2
 8013d02:	4618      	mov	r0, r3
 8013d04:	f7ff ffb4 	bl	8013c70 <CheckRetrans>
 8013d08:	4603      	mov	r3, r0
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d001      	beq.n	8013d12 <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8013d0e:	2301      	movs	r3, #1
 8013d10:	e00f      	b.n	8013d32 <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013d12:	4b09      	ldr	r3, [pc, #36]	; (8013d38 <CheckRetransConfirmedUplink+0x48>)
 8013d14:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8013d18:	f003 0302 	and.w	r3, r3, #2
 8013d1c:	b2db      	uxtb	r3, r3
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d006      	beq.n	8013d30 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8013d22:	4b05      	ldr	r3, [pc, #20]	; (8013d38 <CheckRetransConfirmedUplink+0x48>)
 8013d24:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d001      	beq.n	8013d30 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 8013d2c:	2301      	movs	r3, #1
 8013d2e:	e000      	b.n	8013d32 <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8013d30:	2300      	movs	r3, #0
}
 8013d32:	4618      	mov	r0, r3
 8013d34:	bd80      	pop	{r7, pc}
 8013d36:	bf00      	nop
 8013d38:	200006d4 	.word	0x200006d4
 8013d3c:	20000bf0 	.word	0x20000bf0

08013d40 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 8013d40:	b480      	push	{r7}
 8013d42:	b083      	sub	sp, #12
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013d4e:	d002      	beq.n	8013d56 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	3301      	adds	r3, #1
 8013d54:	607b      	str	r3, [r7, #4]
    }
    return counter;
 8013d56:	687b      	ldr	r3, [r7, #4]
}
 8013d58:	4618      	mov	r0, r3
 8013d5a:	370c      	adds	r7, #12
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	bc80      	pop	{r7}
 8013d60:	4770      	bx	lr
	...

08013d64 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8013d64:	b580      	push	{r7, lr}
 8013d66:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8013d68:	4b1a      	ldr	r3, [pc, #104]	; (8013dd4 <StopRetransmission+0x70>)
 8013d6a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8013d6e:	f003 0302 	and.w	r3, r3, #2
 8013d72:	b2db      	uxtb	r3, r3
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d009      	beq.n	8013d8c <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013d78:	4b16      	ldr	r3, [pc, #88]	; (8013dd4 <StopRetransmission+0x70>)
 8013d7a:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d011      	beq.n	8013da6 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8013d82:	4b14      	ldr	r3, [pc, #80]	; (8013dd4 <StopRetransmission+0x70>)
 8013d84:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013d88:	2b01      	cmp	r3, #1
 8013d8a:	d00c      	beq.n	8013da6 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8013d8c:	4b12      	ldr	r3, [pc, #72]	; (8013dd8 <StopRetransmission+0x74>)
 8013d8e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d007      	beq.n	8013da6 <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8013d96:	4b10      	ldr	r3, [pc, #64]	; (8013dd8 <StopRetransmission+0x74>)
 8013d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	f7ff ffd0 	bl	8013d40 <IncreaseAdrAckCounter>
 8013da0:	4603      	mov	r3, r0
 8013da2:	4a0d      	ldr	r2, [pc, #52]	; (8013dd8 <StopRetransmission+0x74>)
 8013da4:	6293      	str	r3, [r2, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8013da6:	4b0b      	ldr	r3, [pc, #44]	; (8013dd4 <StopRetransmission+0x70>)
 8013da8:	2200      	movs	r2, #0
 8013daa:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 8013dae:	4b09      	ldr	r3, [pc, #36]	; (8013dd4 <StopRetransmission+0x70>)
 8013db0:	2200      	movs	r2, #0
 8013db2:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8013db6:	4b07      	ldr	r3, [pc, #28]	; (8013dd4 <StopRetransmission+0x70>)
 8013db8:	2200      	movs	r2, #0
 8013dba:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8013dbe:	4b05      	ldr	r3, [pc, #20]	; (8013dd4 <StopRetransmission+0x70>)
 8013dc0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013dc4:	f023 0302 	bic.w	r3, r3, #2
 8013dc8:	4a02      	ldr	r2, [pc, #8]	; (8013dd4 <StopRetransmission+0x70>)
 8013dca:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8013dce:	2301      	movs	r3, #1
}
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	bd80      	pop	{r7, pc}
 8013dd4:	200006d4 	.word	0x200006d4
 8013dd8:	20000bf0 	.word	0x20000bf0

08013ddc <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8013de0:	4b08      	ldr	r3, [pc, #32]	; (8013e04 <OnMacProcessNotify+0x28>)
 8013de2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d00a      	beq.n	8013e00 <OnMacProcessNotify+0x24>
 8013dea:	4b06      	ldr	r3, [pc, #24]	; (8013e04 <OnMacProcessNotify+0x28>)
 8013dec:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013df0:	695b      	ldr	r3, [r3, #20]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d004      	beq.n	8013e00 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8013df6:	4b03      	ldr	r3, [pc, #12]	; (8013e04 <OnMacProcessNotify+0x28>)
 8013df8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013dfc:	695b      	ldr	r3, [r3, #20]
 8013dfe:	4798      	blx	r3
    }
}
 8013e00:	bf00      	nop
 8013e02:	bd80      	pop	{r7, pc}
 8013e04:	200006d4 	.word	0x200006d4

08013e08 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b082      	sub	sp, #8
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	4603      	mov	r3, r0
 8013e10:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8013e12:	4b0b      	ldr	r3, [pc, #44]	; (8013e40 <CallNvmDataChangeCallback+0x38>)
 8013e14:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d00c      	beq.n	8013e36 <CallNvmDataChangeCallback+0x2e>
 8013e1c:	4b08      	ldr	r3, [pc, #32]	; (8013e40 <CallNvmDataChangeCallback+0x38>)
 8013e1e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e22:	691b      	ldr	r3, [r3, #16]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d006      	beq.n	8013e36 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8013e28:	4b05      	ldr	r3, [pc, #20]	; (8013e40 <CallNvmDataChangeCallback+0x38>)
 8013e2a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e2e:	691b      	ldr	r3, [r3, #16]
 8013e30:	88fa      	ldrh	r2, [r7, #6]
 8013e32:	4610      	mov	r0, r2
 8013e34:	4798      	blx	r3
    }
}
 8013e36:	bf00      	nop
 8013e38:	3708      	adds	r7, #8
 8013e3a:	46bd      	mov	sp, r7
 8013e3c:	bd80      	pop	{r7, pc}
 8013e3e:	bf00      	nop
 8013e40:	200006d4 	.word	0x200006d4

08013e44 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8013e44:	b480      	push	{r7}
 8013e46:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8013e48:	4b0b      	ldr	r3, [pc, #44]	; (8013e78 <IsRequestPending+0x34>)
 8013e4a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8013e4e:	f003 0304 	and.w	r3, r3, #4
 8013e52:	b2db      	uxtb	r3, r3
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d107      	bne.n	8013e68 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8013e58:	4b07      	ldr	r3, [pc, #28]	; (8013e78 <IsRequestPending+0x34>)
 8013e5a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8013e5e:	f003 0301 	and.w	r3, r3, #1
 8013e62:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d001      	beq.n	8013e6c <IsRequestPending+0x28>
    {
        return 1;
 8013e68:	2301      	movs	r3, #1
 8013e6a:	e000      	b.n	8013e6e <IsRequestPending+0x2a>
    }
    return 0;
 8013e6c:	2300      	movs	r3, #0
}
 8013e6e:	4618      	mov	r0, r3
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bc80      	pop	{r7}
 8013e74:	4770      	bx	lr
 8013e76:	bf00      	nop
 8013e78:	200006d4 	.word	0x200006d4

08013e7c <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8013e7c:	b590      	push	{r4, r7, lr}
 8013e7e:	b091      	sub	sp, #68	; 0x44
 8013e80:	af02      	add	r7, sp, #8
 8013e82:	6178      	str	r0, [r7, #20]
 8013e84:	6139      	str	r1, [r7, #16]
 8013e86:	4613      	mov	r3, r2
 8013e88:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8013e8a:	697b      	ldr	r3, [r7, #20]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d002      	beq.n	8013e96 <LoRaMacInitialization+0x1a>
 8013e90:	693b      	ldr	r3, [r7, #16]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d101      	bne.n	8013e9a <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013e96:	2303      	movs	r3, #3
 8013e98:	e27a      	b.n	8014390 <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013e9a:	697b      	ldr	r3, [r7, #20]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d00b      	beq.n	8013eba <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8013ea2:	697b      	ldr	r3, [r7, #20]
 8013ea4:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d007      	beq.n	8013eba <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013eaa:	697b      	ldr	r3, [r7, #20]
 8013eac:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d003      	beq.n	8013eba <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8013eb2:	697b      	ldr	r3, [r7, #20]
 8013eb4:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d101      	bne.n	8013ebe <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013eba:	2303      	movs	r3, #3
 8013ebc:	e268      	b.n	8014390 <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8013ebe:	7bfb      	ldrb	r3, [r7, #15]
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	f003 fcac 	bl	801781e <RegionIsActive>
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	f083 0301 	eor.w	r3, r3, #1
 8013ecc:	b2db      	uxtb	r3, r3
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d001      	beq.n	8013ed6 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8013ed2:	2309      	movs	r3, #9
 8013ed4:	e25c      	b.n	8014390 <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8013ed6:	6978      	ldr	r0, [r7, #20]
 8013ed8:	f002 f932 	bl	8016140 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8013edc:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8013ee0:	2100      	movs	r1, #0
 8013ee2:	48c7      	ldr	r0, [pc, #796]	; (8014200 <LoRaMacInitialization+0x384>)
 8013ee4:	f007 faec 	bl	801b4c0 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8013ee8:	f240 521c 	movw	r2, #1308	; 0x51c
 8013eec:	2100      	movs	r1, #0
 8013eee:	48c5      	ldr	r0, [pc, #788]	; (8014204 <LoRaMacInitialization+0x388>)
 8013ef0:	f007 fae6 	bl	801b4c0 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8013ef4:	4ac2      	ldr	r2, [pc, #776]	; (8014200 <LoRaMacInitialization+0x384>)
 8013ef6:	7bfb      	ldrb	r3, [r7, #15]
 8013ef8:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8013efc:	4bc0      	ldr	r3, [pc, #768]	; (8014200 <LoRaMacInitialization+0x384>)
 8013efe:	2200      	movs	r2, #0
 8013f00:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8013f04:	4bbe      	ldr	r3, [pc, #760]	; (8014200 <LoRaMacInitialization+0x384>)
 8013f06:	2200      	movs	r2, #0
 8013f08:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8013f0c:	4bbc      	ldr	r3, [pc, #752]	; (8014200 <LoRaMacInitialization+0x384>)
 8013f0e:	4abe      	ldr	r2, [pc, #760]	; (8014208 <LoRaMacInitialization+0x38c>)
 8013f10:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8013f14:	2300      	movs	r3, #0
 8013f16:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8013f1a:	4bbc      	ldr	r3, [pc, #752]	; (801420c <LoRaMacInitialization+0x390>)
 8013f1c:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8013f1e:	4bbc      	ldr	r3, [pc, #752]	; (8014210 <LoRaMacInitialization+0x394>)
 8013f20:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 8013f22:	4bbc      	ldr	r3, [pc, #752]	; (8014214 <LoRaMacInitialization+0x398>)
 8013f24:	627b      	str	r3, [r7, #36]	; 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013f26:	4bb6      	ldr	r3, [pc, #728]	; (8014200 <LoRaMacInitialization+0x384>)
 8013f28:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013f2c:	f107 021c 	add.w	r2, r7, #28
 8013f30:	4611      	mov	r1, r2
 8013f32:	4618      	mov	r0, r3
 8013f34:	f003 fcbf 	bl	80178b6 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8013f38:	230f      	movs	r3, #15
 8013f3a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013f3e:	4bb0      	ldr	r3, [pc, #704]	; (8014200 <LoRaMacInitialization+0x384>)
 8013f40:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013f44:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013f48:	4611      	mov	r1, r2
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	f003 fc7c 	bl	8017848 <RegionGetPhyParam>
 8013f50:	4603      	mov	r3, r0
 8013f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8013f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	bf14      	ite	ne
 8013f5a:	2301      	movne	r3, #1
 8013f5c:	2300      	moveq	r3, #0
 8013f5e:	b2da      	uxtb	r2, r3
 8013f60:	4ba7      	ldr	r3, [pc, #668]	; (8014200 <LoRaMacInitialization+0x384>)
 8013f62:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8013f66:	230a      	movs	r3, #10
 8013f68:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013f6c:	4ba4      	ldr	r3, [pc, #656]	; (8014200 <LoRaMacInitialization+0x384>)
 8013f6e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013f72:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013f76:	4611      	mov	r1, r2
 8013f78:	4618      	mov	r0, r3
 8013f7a:	f003 fc65 	bl	8017848 <RegionGetPhyParam>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8013f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f84:	b25a      	sxtb	r2, r3
 8013f86:	4b9e      	ldr	r3, [pc, #632]	; (8014200 <LoRaMacInitialization+0x384>)
 8013f88:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8013f8c:	2306      	movs	r3, #6
 8013f8e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013f92:	4b9b      	ldr	r3, [pc, #620]	; (8014200 <LoRaMacInitialization+0x384>)
 8013f94:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013f98:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013f9c:	4611      	mov	r1, r2
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	f003 fc52 	bl	8017848 <RegionGetPhyParam>
 8013fa4:	4603      	mov	r3, r0
 8013fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8013fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013faa:	b25a      	sxtb	r2, r3
 8013fac:	4b94      	ldr	r3, [pc, #592]	; (8014200 <LoRaMacInitialization+0x384>)
 8013fae:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8013fb2:	2310      	movs	r3, #16
 8013fb4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013fb8:	4b91      	ldr	r3, [pc, #580]	; (8014200 <LoRaMacInitialization+0x384>)
 8013fba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013fbe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013fc2:	4611      	mov	r1, r2
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	f003 fc3f 	bl	8017848 <RegionGetPhyParam>
 8013fca:	4603      	mov	r3, r0
 8013fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8013fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fd0:	4a8b      	ldr	r2, [pc, #556]	; (8014200 <LoRaMacInitialization+0x384>)
 8013fd2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8013fd6:	2311      	movs	r3, #17
 8013fd8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013fdc:	4b88      	ldr	r3, [pc, #544]	; (8014200 <LoRaMacInitialization+0x384>)
 8013fde:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013fe2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013fe6:	4611      	mov	r1, r2
 8013fe8:	4618      	mov	r0, r3
 8013fea:	f003 fc2d 	bl	8017848 <RegionGetPhyParam>
 8013fee:	4603      	mov	r3, r0
 8013ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8013ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ff4:	4a82      	ldr	r2, [pc, #520]	; (8014200 <LoRaMacInitialization+0x384>)
 8013ff6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8013ffa:	2312      	movs	r3, #18
 8013ffc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014000:	4b7f      	ldr	r3, [pc, #508]	; (8014200 <LoRaMacInitialization+0x384>)
 8014002:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014006:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801400a:	4611      	mov	r1, r2
 801400c:	4618      	mov	r0, r3
 801400e:	f003 fc1b 	bl	8017848 <RegionGetPhyParam>
 8014012:	4603      	mov	r3, r0
 8014014:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8014016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014018:	4a79      	ldr	r2, [pc, #484]	; (8014200 <LoRaMacInitialization+0x384>)
 801401a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 801401e:	2313      	movs	r3, #19
 8014020:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014024:	4b76      	ldr	r3, [pc, #472]	; (8014200 <LoRaMacInitialization+0x384>)
 8014026:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801402a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801402e:	4611      	mov	r1, r2
 8014030:	4618      	mov	r0, r3
 8014032:	f003 fc09 	bl	8017848 <RegionGetPhyParam>
 8014036:	4603      	mov	r3, r0
 8014038:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 801403a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801403c:	4a70      	ldr	r2, [pc, #448]	; (8014200 <LoRaMacInitialization+0x384>)
 801403e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8014042:	2314      	movs	r3, #20
 8014044:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014048:	4b6d      	ldr	r3, [pc, #436]	; (8014200 <LoRaMacInitialization+0x384>)
 801404a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801404e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014052:	4611      	mov	r1, r2
 8014054:	4618      	mov	r0, r3
 8014056:	f003 fbf7 	bl	8017848 <RegionGetPhyParam>
 801405a:	4603      	mov	r3, r0
 801405c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 801405e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014060:	4a67      	ldr	r2, [pc, #412]	; (8014200 <LoRaMacInitialization+0x384>)
 8014062:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8014066:	2316      	movs	r3, #22
 8014068:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801406c:	4b64      	ldr	r3, [pc, #400]	; (8014200 <LoRaMacInitialization+0x384>)
 801406e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014072:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014076:	4611      	mov	r1, r2
 8014078:	4618      	mov	r0, r3
 801407a:	f003 fbe5 	bl	8017848 <RegionGetPhyParam>
 801407e:	4603      	mov	r3, r0
 8014080:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8014082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014084:	b2da      	uxtb	r2, r3
 8014086:	4b5e      	ldr	r3, [pc, #376]	; (8014200 <LoRaMacInitialization+0x384>)
 8014088:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 801408c:	2317      	movs	r3, #23
 801408e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014092:	4b5b      	ldr	r3, [pc, #364]	; (8014200 <LoRaMacInitialization+0x384>)
 8014094:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014098:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801409c:	4611      	mov	r1, r2
 801409e:	4618      	mov	r0, r3
 80140a0:	f003 fbd2 	bl	8017848 <RegionGetPhyParam>
 80140a4:	4603      	mov	r3, r0
 80140a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80140a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140aa:	4a55      	ldr	r2, [pc, #340]	; (8014200 <LoRaMacInitialization+0x384>)
 80140ac:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80140b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140b2:	4a53      	ldr	r2, [pc, #332]	; (8014200 <LoRaMacInitialization+0x384>)
 80140b4:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80140b8:	2318      	movs	r3, #24
 80140ba:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80140be:	4b50      	ldr	r3, [pc, #320]	; (8014200 <LoRaMacInitialization+0x384>)
 80140c0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80140c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80140c8:	4611      	mov	r1, r2
 80140ca:	4618      	mov	r0, r3
 80140cc:	f003 fbbc 	bl	8017848 <RegionGetPhyParam>
 80140d0:	4603      	mov	r3, r0
 80140d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80140d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140d6:	b2da      	uxtb	r2, r3
 80140d8:	4b49      	ldr	r3, [pc, #292]	; (8014200 <LoRaMacInitialization+0x384>)
 80140da:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80140de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140e0:	b2da      	uxtb	r2, r3
 80140e2:	4b47      	ldr	r3, [pc, #284]	; (8014200 <LoRaMacInitialization+0x384>)
 80140e4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80140e8:	231d      	movs	r3, #29
 80140ea:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80140ee:	4b44      	ldr	r3, [pc, #272]	; (8014200 <LoRaMacInitialization+0x384>)
 80140f0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80140f4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80140f8:	4611      	mov	r1, r2
 80140fa:	4618      	mov	r0, r3
 80140fc:	f003 fba4 	bl	8017848 <RegionGetPhyParam>
 8014100:	4603      	mov	r3, r0
 8014102:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8014104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014106:	b2da      	uxtb	r2, r3
 8014108:	4b3d      	ldr	r3, [pc, #244]	; (8014200 <LoRaMacInitialization+0x384>)
 801410a:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 801410e:	231e      	movs	r3, #30
 8014110:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014114:	4b3a      	ldr	r3, [pc, #232]	; (8014200 <LoRaMacInitialization+0x384>)
 8014116:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801411a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801411e:	4611      	mov	r1, r2
 8014120:	4618      	mov	r0, r3
 8014122:	f003 fb91 	bl	8017848 <RegionGetPhyParam>
 8014126:	4603      	mov	r3, r0
 8014128:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 801412a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801412c:	b2da      	uxtb	r2, r3
 801412e:	4b34      	ldr	r3, [pc, #208]	; (8014200 <LoRaMacInitialization+0x384>)
 8014130:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8014134:	231f      	movs	r3, #31
 8014136:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801413a:	4b31      	ldr	r3, [pc, #196]	; (8014200 <LoRaMacInitialization+0x384>)
 801413c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014140:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014144:	4611      	mov	r1, r2
 8014146:	4618      	mov	r0, r3
 8014148:	f003 fb7e 	bl	8017848 <RegionGetPhyParam>
 801414c:	4603      	mov	r3, r0
 801414e:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8014150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014152:	4a2b      	ldr	r2, [pc, #172]	; (8014200 <LoRaMacInitialization+0x384>)
 8014154:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8014158:	2320      	movs	r3, #32
 801415a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801415e:	4b28      	ldr	r3, [pc, #160]	; (8014200 <LoRaMacInitialization+0x384>)
 8014160:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014164:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014168:	4611      	mov	r1, r2
 801416a:	4618      	mov	r0, r3
 801416c:	f003 fb6c 	bl	8017848 <RegionGetPhyParam>
 8014170:	4603      	mov	r3, r0
 8014172:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8014174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014176:	4a22      	ldr	r2, [pc, #136]	; (8014200 <LoRaMacInitialization+0x384>)
 8014178:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 801417c:	230b      	movs	r3, #11
 801417e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014182:	4b1f      	ldr	r3, [pc, #124]	; (8014200 <LoRaMacInitialization+0x384>)
 8014184:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014188:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801418c:	4611      	mov	r1, r2
 801418e:	4618      	mov	r0, r3
 8014190:	f003 fb5a 	bl	8017848 <RegionGetPhyParam>
 8014194:	4603      	mov	r3, r0
 8014196:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8014198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801419a:	b29a      	uxth	r2, r3
 801419c:	4b18      	ldr	r3, [pc, #96]	; (8014200 <LoRaMacInitialization+0x384>)
 801419e:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 80141a2:	230c      	movs	r3, #12
 80141a4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80141a8:	4b15      	ldr	r3, [pc, #84]	; (8014200 <LoRaMacInitialization+0x384>)
 80141aa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80141ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80141b2:	4611      	mov	r1, r2
 80141b4:	4618      	mov	r0, r3
 80141b6:	f003 fb47 	bl	8017848 <RegionGetPhyParam>
 80141ba:	4603      	mov	r3, r0
 80141bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 80141be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141c0:	b29a      	uxth	r2, r3
 80141c2:	4b0f      	ldr	r3, [pc, #60]	; (8014200 <LoRaMacInitialization+0x384>)
 80141c4:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 80141c8:	4b0d      	ldr	r3, [pc, #52]	; (8014200 <LoRaMacInitialization+0x384>)
 80141ca:	2201      	movs	r2, #1
 80141cc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 80141d0:	4b0b      	ldr	r3, [pc, #44]	; (8014200 <LoRaMacInitialization+0x384>)
 80141d2:	220a      	movs	r2, #10
 80141d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 80141d8:	4b09      	ldr	r3, [pc, #36]	; (8014200 <LoRaMacInitialization+0x384>)
 80141da:	2206      	movs	r2, #6
 80141dc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 80141e0:	4b07      	ldr	r3, [pc, #28]	; (8014200 <LoRaMacInitialization+0x384>)
 80141e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80141e6:	4a06      	ldr	r2, [pc, #24]	; (8014200 <LoRaMacInitialization+0x384>)
 80141e8:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 80141ea:	4b05      	ldr	r3, [pc, #20]	; (8014200 <LoRaMacInitialization+0x384>)
 80141ec:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 80141f0:	4b03      	ldr	r3, [pc, #12]	; (8014200 <LoRaMacInitialization+0x384>)
 80141f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80141f6:	4b02      	ldr	r3, [pc, #8]	; (8014200 <LoRaMacInitialization+0x384>)
 80141f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80141fc:	e00c      	b.n	8014218 <LoRaMacInitialization+0x39c>
 80141fe:	bf00      	nop
 8014200:	20000bf0 	.word	0x20000bf0
 8014204:	200006d4 	.word	0x200006d4
 8014208:	01000400 	.word	0x01000400
 801420c:	20000e14 	.word	0x20000e14
 8014210:	20000e28 	.word	0x20000e28
 8014214:	20001788 	.word	0x20001788
 8014218:	4a5f      	ldr	r2, [pc, #380]	; (8014398 <LoRaMacInitialization+0x51c>)
 801421a:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 801421c:	4b5e      	ldr	r3, [pc, #376]	; (8014398 <LoRaMacInitialization+0x51c>)
 801421e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014222:	4a5d      	ldr	r2, [pc, #372]	; (8014398 <LoRaMacInitialization+0x51c>)
 8014224:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8014226:	4b5c      	ldr	r3, [pc, #368]	; (8014398 <LoRaMacInitialization+0x51c>)
 8014228:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801422c:	4a5a      	ldr	r2, [pc, #360]	; (8014398 <LoRaMacInitialization+0x51c>)
 801422e:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8014230:	4b59      	ldr	r3, [pc, #356]	; (8014398 <LoRaMacInitialization+0x51c>)
 8014232:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014236:	4a58      	ldr	r2, [pc, #352]	; (8014398 <LoRaMacInitialization+0x51c>)
 8014238:	6613      	str	r3, [r2, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 801423a:	4b57      	ldr	r3, [pc, #348]	; (8014398 <LoRaMacInitialization+0x51c>)
 801423c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014240:	4a55      	ldr	r2, [pc, #340]	; (8014398 <LoRaMacInitialization+0x51c>)
 8014242:	6653      	str	r3, [r2, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8014244:	4b54      	ldr	r3, [pc, #336]	; (8014398 <LoRaMacInitialization+0x51c>)
 8014246:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 801424a:	4b53      	ldr	r3, [pc, #332]	; (8014398 <LoRaMacInitialization+0x51c>)
 801424c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8014250:	4b51      	ldr	r3, [pc, #324]	; (8014398 <LoRaMacInitialization+0x51c>)
 8014252:	2201      	movs	r2, #1
 8014254:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8014258:	4a50      	ldr	r2, [pc, #320]	; (801439c <LoRaMacInitialization+0x520>)
 801425a:	693b      	ldr	r3, [r7, #16]
 801425c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( false );
 8014260:	2000      	movs	r0, #0
 8014262:	f7ff f869 	bl	8013338 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8014266:	4b4c      	ldr	r3, [pc, #304]	; (8014398 <LoRaMacInitialization+0x51c>)
 8014268:	2201      	movs	r2, #1
 801426a:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 801426e:	4a4b      	ldr	r2, [pc, #300]	; (801439c <LoRaMacInitialization+0x520>)
 8014270:	697b      	ldr	r3, [r7, #20]
 8014272:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8014276:	4b49      	ldr	r3, [pc, #292]	; (801439c <LoRaMacInitialization+0x520>)
 8014278:	2200      	movs	r2, #0
 801427a:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 801427e:	4b47      	ldr	r3, [pc, #284]	; (801439c <LoRaMacInitialization+0x520>)
 8014280:	2201      	movs	r2, #1
 8014282:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8014286:	4b44      	ldr	r3, [pc, #272]	; (8014398 <LoRaMacInitialization+0x51c>)
 8014288:	2200      	movs	r2, #0
 801428a:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 801428c:	4b42      	ldr	r3, [pc, #264]	; (8014398 <LoRaMacInitialization+0x51c>)
 801428e:	2200      	movs	r2, #0
 8014290:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8014292:	2300      	movs	r3, #0
 8014294:	9300      	str	r3, [sp, #0]
 8014296:	4b42      	ldr	r3, [pc, #264]	; (80143a0 <LoRaMacInitialization+0x524>)
 8014298:	2200      	movs	r2, #0
 801429a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801429e:	4841      	ldr	r0, [pc, #260]	; (80143a4 <LoRaMacInitialization+0x528>)
 80142a0:	f00b f88c 	bl	801f3bc <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 80142a4:	2300      	movs	r3, #0
 80142a6:	9300      	str	r3, [sp, #0]
 80142a8:	4b3f      	ldr	r3, [pc, #252]	; (80143a8 <LoRaMacInitialization+0x52c>)
 80142aa:	2200      	movs	r2, #0
 80142ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80142b0:	483e      	ldr	r0, [pc, #248]	; (80143ac <LoRaMacInitialization+0x530>)
 80142b2:	f00b f883 	bl	801f3bc <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 80142b6:	2300      	movs	r3, #0
 80142b8:	9300      	str	r3, [sp, #0]
 80142ba:	4b3d      	ldr	r3, [pc, #244]	; (80143b0 <LoRaMacInitialization+0x534>)
 80142bc:	2200      	movs	r2, #0
 80142be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80142c2:	483c      	ldr	r0, [pc, #240]	; (80143b4 <LoRaMacInitialization+0x538>)
 80142c4:	f00b f87a 	bl	801f3bc <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 80142c8:	2300      	movs	r3, #0
 80142ca:	9300      	str	r3, [sp, #0]
 80142cc:	4b3a      	ldr	r3, [pc, #232]	; (80143b8 <LoRaMacInitialization+0x53c>)
 80142ce:	2200      	movs	r2, #0
 80142d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80142d4:	4839      	ldr	r0, [pc, #228]	; (80143bc <LoRaMacInitialization+0x540>)
 80142d6:	f00b f871 	bl	801f3bc <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80142da:	4c2f      	ldr	r4, [pc, #188]	; (8014398 <LoRaMacInitialization+0x51c>)
 80142dc:	463b      	mov	r3, r7
 80142de:	4618      	mov	r0, r3
 80142e0:	f00a fce8 	bl	801ecb4 <SysTimeGetMcuTime>
 80142e4:	f504 7392 	add.w	r3, r4, #292	; 0x124
 80142e8:	463a      	mov	r2, r7
 80142ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80142ee:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 80142f2:	4b33      	ldr	r3, [pc, #204]	; (80143c0 <LoRaMacInitialization+0x544>)
 80142f4:	2200      	movs	r2, #0
 80142f6:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80142f8:	4b28      	ldr	r3, [pc, #160]	; (801439c <LoRaMacInitialization+0x520>)
 80142fa:	4a32      	ldr	r2, [pc, #200]	; (80143c4 <LoRaMacInitialization+0x548>)
 80142fc:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8014300:	4b26      	ldr	r3, [pc, #152]	; (801439c <LoRaMacInitialization+0x520>)
 8014302:	4a31      	ldr	r2, [pc, #196]	; (80143c8 <LoRaMacInitialization+0x54c>)
 8014304:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8014308:	4b24      	ldr	r3, [pc, #144]	; (801439c <LoRaMacInitialization+0x520>)
 801430a:	4a30      	ldr	r2, [pc, #192]	; (80143cc <LoRaMacInitialization+0x550>)
 801430c:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8014310:	4b22      	ldr	r3, [pc, #136]	; (801439c <LoRaMacInitialization+0x520>)
 8014312:	4a2f      	ldr	r2, [pc, #188]	; (80143d0 <LoRaMacInitialization+0x554>)
 8014314:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8014318:	4b20      	ldr	r3, [pc, #128]	; (801439c <LoRaMacInitialization+0x520>)
 801431a:	4a2e      	ldr	r2, [pc, #184]	; (80143d4 <LoRaMacInitialization+0x558>)
 801431c:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8014320:	4b2d      	ldr	r3, [pc, #180]	; (80143d8 <LoRaMacInitialization+0x55c>)
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	482d      	ldr	r0, [pc, #180]	; (80143dc <LoRaMacInitialization+0x560>)
 8014326:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8014328:	482d      	ldr	r0, [pc, #180]	; (80143e0 <LoRaMacInitialization+0x564>)
 801432a:	f7fa f9f9 	bl	800e720 <SecureElementInit>
 801432e:	4603      	mov	r3, r0
 8014330:	2b00      	cmp	r3, #0
 8014332:	d001      	beq.n	8014338 <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014334:	2311      	movs	r3, #17
 8014336:	e02b      	b.n	8014390 <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8014338:	4817      	ldr	r0, [pc, #92]	; (8014398 <LoRaMacInitialization+0x51c>)
 801433a:	f002 fbc1 	bl	8016ac0 <LoRaMacCryptoInit>
 801433e:	4603      	mov	r3, r0
 8014340:	2b00      	cmp	r3, #0
 8014342:	d001      	beq.n	8014348 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014344:	2311      	movs	r3, #17
 8014346:	e023      	b.n	8014390 <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8014348:	f001 fcbc 	bl	8015cc4 <LoRaMacCommandsInit>
 801434c:	4603      	mov	r3, r0
 801434e:	2b00      	cmp	r3, #0
 8014350:	d001      	beq.n	8014356 <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014352:	2313      	movs	r3, #19
 8014354:	e01c      	b.n	8014390 <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8014356:	4823      	ldr	r0, [pc, #140]	; (80143e4 <LoRaMacInitialization+0x568>)
 8014358:	f002 fc52 	bl	8016c00 <LoRaMacCryptoSetMulticastReference>
 801435c:	4603      	mov	r3, r0
 801435e:	2b00      	cmp	r3, #0
 8014360:	d001      	beq.n	8014366 <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014362:	2311      	movs	r3, #17
 8014364:	e014      	b.n	8014390 <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8014366:	4b1c      	ldr	r3, [pc, #112]	; (80143d8 <LoRaMacInitialization+0x55c>)
 8014368:	695b      	ldr	r3, [r3, #20]
 801436a:	4798      	blx	r3
 801436c:	4603      	mov	r3, r0
 801436e:	4618      	mov	r0, r3
 8014370:	f007 f846 	bl	801b400 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8014374:	4b18      	ldr	r3, [pc, #96]	; (80143d8 <LoRaMacInitialization+0x55c>)
 8014376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014378:	4a07      	ldr	r2, [pc, #28]	; (8014398 <LoRaMacInitialization+0x51c>)
 801437a:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 801437e:	4610      	mov	r0, r2
 8014380:	4798      	blx	r3
    Radio.Sleep( );
 8014382:	4b15      	ldr	r3, [pc, #84]	; (80143d8 <LoRaMacInitialization+0x55c>)
 8014384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014386:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8014388:	2001      	movs	r0, #1
 801438a:	f7fd fa7d 	bl	8011888 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 801438e:	2300      	movs	r3, #0
}
 8014390:	4618      	mov	r0, r3
 8014392:	373c      	adds	r7, #60	; 0x3c
 8014394:	46bd      	mov	sp, r7
 8014396:	bd90      	pop	{r4, r7, pc}
 8014398:	20000bf0 	.word	0x20000bf0
 801439c:	200006d4 	.word	0x200006d4
 80143a0:	08011e15 	.word	0x08011e15
 80143a4:	20000a3c 	.word	0x20000a3c
 80143a8:	08011ea5 	.word	0x08011ea5
 80143ac:	20000a54 	.word	0x20000a54
 80143b0:	08011f1d 	.word	0x08011f1d
 80143b4:	20000a6c 	.word	0x20000a6c
 80143b8:	08011f9d 	.word	0x08011f9d
 80143bc:	20000ad4 	.word	0x20000ad4
 80143c0:	20001818 	.word	0x20001818
 80143c4:	080108c5 	.word	0x080108c5
 80143c8:	08010921 	.word	0x08010921
 80143cc:	080109c1 	.word	0x080109c1
 80143d0:	08010995 	.word	0x08010995
 80143d4:	080109dd 	.word	0x080109dd
 80143d8:	08020e2c 	.word	0x08020e2c
 80143dc:	20000a20 	.word	0x20000a20
 80143e0:	20000d3c 	.word	0x20000d3c
 80143e4:	20000cd8 	.word	0x20000cd8

080143e8 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 80143e8:	b580      	push	{r7, lr}
 80143ea:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 80143ec:	4b04      	ldr	r3, [pc, #16]	; (8014400 <LoRaMacStart+0x18>)
 80143ee:	2200      	movs	r2, #0
 80143f0:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 80143f4:	f7fc fb08 	bl	8010a08 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 80143f8:	2300      	movs	r3, #0
}
 80143fa:	4618      	mov	r0, r3
 80143fc:	bd80      	pop	{r7, pc}
 80143fe:	bf00      	nop
 8014400:	200006d4 	.word	0x200006d4

08014404 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8014404:	b580      	push	{r7, lr}
 8014406:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8014408:	f7fd fa06 	bl	8011818 <LoRaMacIsBusy>
 801440c:	4603      	mov	r3, r0
 801440e:	f083 0301 	eor.w	r3, r3, #1
 8014412:	b2db      	uxtb	r3, r3
 8014414:	2b00      	cmp	r3, #0
 8014416:	d00d      	beq.n	8014434 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8014418:	4b0b      	ldr	r3, [pc, #44]	; (8014448 <LoRaMacStop+0x44>)
 801441a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801441e:	2b02      	cmp	r3, #2
 8014420:	d102      	bne.n	8014428 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 8014422:	4b0a      	ldr	r3, [pc, #40]	; (801444c <LoRaMacStop+0x48>)
 8014424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014426:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 8014428:	4b09      	ldr	r3, [pc, #36]	; (8014450 <LoRaMacStop+0x4c>)
 801442a:	2201      	movs	r2, #1
 801442c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8014430:	2300      	movs	r3, #0
 8014432:	e007      	b.n	8014444 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8014434:	4b06      	ldr	r3, [pc, #24]	; (8014450 <LoRaMacStop+0x4c>)
 8014436:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801443a:	2b01      	cmp	r3, #1
 801443c:	d101      	bne.n	8014442 <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 801443e:	2300      	movs	r3, #0
 8014440:	e000      	b.n	8014444 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 8014442:	2301      	movs	r3, #1
}
 8014444:	4618      	mov	r0, r3
 8014446:	bd80      	pop	{r7, pc}
 8014448:	20000bf0 	.word	0x20000bf0
 801444c:	08020e2c 	.word	0x08020e2c
 8014450:	200006d4 	.word	0x200006d4

08014454 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8014454:	b580      	push	{r7, lr}
 8014456:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8014458:	4812      	ldr	r0, [pc, #72]	; (80144a4 <LoRaMacHalt+0x50>)
 801445a:	f00b f853 	bl	801f504 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 801445e:	4812      	ldr	r0, [pc, #72]	; (80144a8 <LoRaMacHalt+0x54>)
 8014460:	f00b f850 	bl	801f504 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8014464:	4811      	ldr	r0, [pc, #68]	; (80144ac <LoRaMacHalt+0x58>)
 8014466:	f00b f84d 	bl	801f504 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 801446a:	4811      	ldr	r0, [pc, #68]	; (80144b0 <LoRaMacHalt+0x5c>)
 801446c:	f00b f84a 	bl	801f504 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8014470:	f001 fa8c 	bl	801598c <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8014474:	4b0f      	ldr	r3, [pc, #60]	; (80144b4 <LoRaMacHalt+0x60>)
 8014476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014478:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 801447a:	4b0f      	ldr	r3, [pc, #60]	; (80144b8 <LoRaMacHalt+0x64>)
 801447c:	2200      	movs	r2, #0
 801447e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 8014482:	480e      	ldr	r0, [pc, #56]	; (80144bc <LoRaMacHalt+0x68>)
 8014484:	f7fd fba2 	bl	8011bcc <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8014488:	f240 52cc 	movw	r2, #1484	; 0x5cc
 801448c:	490b      	ldr	r1, [pc, #44]	; (80144bc <LoRaMacHalt+0x68>)
 801448e:	480c      	ldr	r0, [pc, #48]	; (80144c0 <LoRaMacHalt+0x6c>)
 8014490:	f006 ffdb 	bl	801b44a <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 8014494:	4b08      	ldr	r3, [pc, #32]	; (80144b8 <LoRaMacHalt+0x64>)
 8014496:	2201      	movs	r2, #1
 8014498:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 801449c:	2300      	movs	r3, #0
}
 801449e:	4618      	mov	r0, r3
 80144a0:	bd80      	pop	{r7, pc}
 80144a2:	bf00      	nop
 80144a4:	20000a3c 	.word	0x20000a3c
 80144a8:	20000a54 	.word	0x20000a54
 80144ac:	20000a6c 	.word	0x20000a6c
 80144b0:	20000ad4 	.word	0x20000ad4
 80144b4:	08020e2c 	.word	0x08020e2c
 80144b8:	200006d4 	.word	0x200006d4
 80144bc:	20000bf0 	.word	0x20000bf0
 80144c0:	200011bc 	.word	0x200011bc

080144c4 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80144c4:	b590      	push	{r4, r7, lr}
 80144c6:	b08d      	sub	sp, #52	; 0x34
 80144c8:	af02      	add	r7, sp, #8
 80144ca:	4603      	mov	r3, r0
 80144cc:	6039      	str	r1, [r7, #0]
 80144ce:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80144d0:	4b42      	ldr	r3, [pc, #264]	; (80145dc <LoRaMacQueryTxPossible+0x118>)
 80144d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144d4:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80144d6:	4b41      	ldr	r3, [pc, #260]	; (80145dc <LoRaMacQueryTxPossible+0x118>)
 80144d8:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 80144dc:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80144de:	4b3f      	ldr	r3, [pc, #252]	; (80145dc <LoRaMacQueryTxPossible+0x118>)
 80144e0:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 80144e4:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 80144e6:	4b3e      	ldr	r3, [pc, #248]	; (80145e0 <LoRaMacQueryTxPossible+0x11c>)
 80144e8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80144ec:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 80144ee:	2300      	movs	r3, #0
 80144f0:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80144f2:	683b      	ldr	r3, [r7, #0]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d101      	bne.n	80144fc <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80144f8:	2303      	movs	r3, #3
 80144fa:	e06b      	b.n	80145d4 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 80144fc:	2300      	movs	r3, #0
 80144fe:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8014500:	4b36      	ldr	r3, [pc, #216]	; (80145dc <LoRaMacQueryTxPossible+0x118>)
 8014502:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8014506:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8014508:	4b34      	ldr	r3, [pc, #208]	; (80145dc <LoRaMacQueryTxPossible+0x118>)
 801450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801450c:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 801450e:	4b33      	ldr	r3, [pc, #204]	; (80145dc <LoRaMacQueryTxPossible+0x118>)
 8014510:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8014514:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8014516:	4b31      	ldr	r3, [pc, #196]	; (80145dc <LoRaMacQueryTxPossible+0x118>)
 8014518:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 801451c:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801451e:	4b2f      	ldr	r3, [pc, #188]	; (80145dc <LoRaMacQueryTxPossible+0x118>)
 8014520:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8014524:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014528:	4b2c      	ldr	r3, [pc, #176]	; (80145dc <LoRaMacQueryTxPossible+0x118>)
 801452a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801452e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 8014532:	4b2b      	ldr	r3, [pc, #172]	; (80145e0 <LoRaMacQueryTxPossible+0x11c>)
 8014534:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8014538:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801453c:	4b27      	ldr	r3, [pc, #156]	; (80145dc <LoRaMacQueryTxPossible+0x118>)
 801453e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8014546:	4b25      	ldr	r3, [pc, #148]	; (80145dc <LoRaMacQueryTxPossible+0x118>)
 8014548:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801454c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8014550:	f107 040d 	add.w	r4, r7, #13
 8014554:	f107 020e 	add.w	r2, r7, #14
 8014558:	f107 010f 	add.w	r1, r7, #15
 801455c:	f107 0014 	add.w	r0, r7, #20
 8014560:	f107 0310 	add.w	r3, r7, #16
 8014564:	9300      	str	r3, [sp, #0]
 8014566:	4623      	mov	r3, r4
 8014568:	f001 f8da 	bl	8015720 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801456c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014570:	4618      	mov	r0, r3
 8014572:	f7fd fe59 	bl	8012228 <GetMaxAppPayloadWithoutFOptsLength>
 8014576:	4603      	mov	r3, r0
 8014578:	461a      	mov	r2, r3
 801457a:	683b      	ldr	r3, [r7, #0]
 801457c:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801457e:	f107 0308 	add.w	r3, r7, #8
 8014582:	4618      	mov	r0, r3
 8014584:	f001 fca4 	bl	8015ed0 <LoRaMacCommandsGetSizeSerializedCmds>
 8014588:	4603      	mov	r3, r0
 801458a:	2b00      	cmp	r3, #0
 801458c:	d001      	beq.n	8014592 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801458e:	2313      	movs	r3, #19
 8014590:	e020      	b.n	80145d4 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8014592:	68bb      	ldr	r3, [r7, #8]
 8014594:	2b0f      	cmp	r3, #15
 8014596:	d819      	bhi.n	80145cc <LoRaMacQueryTxPossible+0x108>
 8014598:	683b      	ldr	r3, [r7, #0]
 801459a:	785b      	ldrb	r3, [r3, #1]
 801459c:	461a      	mov	r2, r3
 801459e:	68bb      	ldr	r3, [r7, #8]
 80145a0:	429a      	cmp	r2, r3
 80145a2:	d313      	bcc.n	80145cc <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80145a4:	683b      	ldr	r3, [r7, #0]
 80145a6:	785a      	ldrb	r2, [r3, #1]
 80145a8:	68bb      	ldr	r3, [r7, #8]
 80145aa:	b2db      	uxtb	r3, r3
 80145ac:	1ad3      	subs	r3, r2, r3
 80145ae:	b2da      	uxtb	r2, r3
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80145b4:	683b      	ldr	r3, [r7, #0]
 80145b6:	785b      	ldrb	r3, [r3, #1]
 80145b8:	4619      	mov	r1, r3
 80145ba:	79fa      	ldrb	r2, [r7, #7]
 80145bc:	68bb      	ldr	r3, [r7, #8]
 80145be:	4413      	add	r3, r2
 80145c0:	4299      	cmp	r1, r3
 80145c2:	d301      	bcc.n	80145c8 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 80145c4:	2300      	movs	r3, #0
 80145c6:	e005      	b.n	80145d4 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 80145c8:	2308      	movs	r3, #8
 80145ca:	e003      	b.n	80145d4 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 80145cc:	683b      	ldr	r3, [r7, #0]
 80145ce:	2200      	movs	r2, #0
 80145d0:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80145d2:	2308      	movs	r3, #8
    }
}
 80145d4:	4618      	mov	r0, r3
 80145d6:	372c      	adds	r7, #44	; 0x2c
 80145d8:	46bd      	mov	sp, r7
 80145da:	bd90      	pop	{r4, r7, pc}
 80145dc:	20000bf0 	.word	0x20000bf0
 80145e0:	200006d4 	.word	0x200006d4

080145e4 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80145e4:	b590      	push	{r4, r7, lr}
 80145e6:	b087      	sub	sp, #28
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80145ec:	2300      	movs	r3, #0
 80145ee:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d101      	bne.n	80145fa <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80145f6:	2303      	movs	r3, #3
 80145f8:	e1c4      	b.n	8014984 <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	781b      	ldrb	r3, [r3, #0]
 80145fe:	2b41      	cmp	r3, #65	; 0x41
 8014600:	f200 81b9 	bhi.w	8014976 <LoRaMacMibGetRequestConfirm+0x392>
 8014604:	a201      	add	r2, pc, #4	; (adr r2, 801460c <LoRaMacMibGetRequestConfirm+0x28>)
 8014606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801460a:	bf00      	nop
 801460c:	08014715 	.word	0x08014715
 8014610:	08014721 	.word	0x08014721
 8014614:	0801472d 	.word	0x0801472d
 8014618:	08014739 	.word	0x08014739
 801461c:	08014745 	.word	0x08014745
 8014620:	08014751 	.word	0x08014751
 8014624:	0801475d 	.word	0x0801475d
 8014628:	08014977 	.word	0x08014977
 801462c:	08014977 	.word	0x08014977
 8014630:	08014977 	.word	0x08014977
 8014634:	08014977 	.word	0x08014977
 8014638:	08014977 	.word	0x08014977
 801463c:	08014977 	.word	0x08014977
 8014640:	08014977 	.word	0x08014977
 8014644:	08014977 	.word	0x08014977
 8014648:	08014771 	.word	0x08014771
 801464c:	0801477d 	.word	0x0801477d
 8014650:	08014789 	.word	0x08014789
 8014654:	080147ab 	.word	0x080147ab
 8014658:	080147bd 	.word	0x080147bd
 801465c:	080147cf 	.word	0x080147cf
 8014660:	080147e1 	.word	0x080147e1
 8014664:	08014815 	.word	0x08014815
 8014668:	080147f3 	.word	0x080147f3
 801466c:	08014837 	.word	0x08014837
 8014670:	08014843 	.word	0x08014843
 8014674:	0801484d 	.word	0x0801484d
 8014678:	08014857 	.word	0x08014857
 801467c:	08014861 	.word	0x08014861
 8014680:	0801486b 	.word	0x0801486b
 8014684:	08014875 	.word	0x08014875
 8014688:	080148a1 	.word	0x080148a1
 801468c:	080148ad 	.word	0x080148ad
 8014690:	080148c5 	.word	0x080148c5
 8014694:	080148b9 	.word	0x080148b9
 8014698:	080148d1 	.word	0x080148d1
 801469c:	080148db 	.word	0x080148db
 80146a0:	080148e7 	.word	0x080148e7
 80146a4:	08014903 	.word	0x08014903
 80146a8:	080148f3 	.word	0x080148f3
 80146ac:	080148fb 	.word	0x080148fb
 80146b0:	08014977 	.word	0x08014977
 80146b4:	0801490f 	.word	0x0801490f
 80146b8:	08014977 	.word	0x08014977
 80146bc:	08014977 	.word	0x08014977
 80146c0:	08014977 	.word	0x08014977
 80146c4:	08014977 	.word	0x08014977
 80146c8:	08014977 	.word	0x08014977
 80146cc:	08014977 	.word	0x08014977
 80146d0:	08014977 	.word	0x08014977
 80146d4:	08014977 	.word	0x08014977
 80146d8:	08014977 	.word	0x08014977
 80146dc:	08014977 	.word	0x08014977
 80146e0:	08014977 	.word	0x08014977
 80146e4:	08014977 	.word	0x08014977
 80146e8:	08014977 	.word	0x08014977
 80146ec:	08014977 	.word	0x08014977
 80146f0:	08014977 	.word	0x08014977
 80146f4:	08014923 	.word	0x08014923
 80146f8:	0801492f 	.word	0x0801492f
 80146fc:	0801493b 	.word	0x0801493b
 8014700:	08014947 	.word	0x08014947
 8014704:	08014953 	.word	0x08014953
 8014708:	0801495f 	.word	0x0801495f
 801470c:	0801496b 	.word	0x0801496b
 8014710:	08014971 	.word	0x08014971
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8014714:	4b9d      	ldr	r3, [pc, #628]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014716:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	711a      	strb	r2, [r3, #4]
            break;
 801471e:	e130      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8014720:	4b9a      	ldr	r3, [pc, #616]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014722:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	711a      	strb	r2, [r3, #4]
            break;
 801472a:	e12a      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	685b      	ldr	r3, [r3, #4]
 8014730:	4618      	mov	r0, r3
 8014732:	f7fa fab5 	bl	800eca0 <SecureElementGetDevEui>
            break;
 8014736:	e124      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	685b      	ldr	r3, [r3, #4]
 801473c:	4618      	mov	r0, r3
 801473e:	f7fa fadf 	bl	800ed00 <SecureElementGetJoinEui>
            break;
 8014742:	e11e      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8014744:	4b91      	ldr	r3, [pc, #580]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014746:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	711a      	strb	r2, [r3, #4]
            break;
 801474e:	e118      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8014750:	4b8e      	ldr	r3, [pc, #568]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014752:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	605a      	str	r2, [r3, #4]
            break;
 801475a:	e112      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 801475c:	4b8b      	ldr	r3, [pc, #556]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801475e:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	3304      	adds	r3, #4
 8014766:	4619      	mov	r1, r3
 8014768:	4610      	mov	r0, r2
 801476a:	f7fa fafb 	bl	800ed64 <SecureElementGetDevAddr>
            break;
 801476e:	e108      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8014770:	4b86      	ldr	r3, [pc, #536]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014772:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	711a      	strb	r2, [r3, #4]
            break;
 801477a:	e102      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801477c:	4b83      	ldr	r3, [pc, #524]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801477e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	711a      	strb	r2, [r3, #4]
            break;
 8014786:	e0fc      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8014788:	231c      	movs	r3, #28
 801478a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801478c:	4b7f      	ldr	r3, [pc, #508]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801478e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014792:	f107 0210 	add.w	r2, r7, #16
 8014796:	4611      	mov	r1, r2
 8014798:	4618      	mov	r0, r3
 801479a:	f003 f855 	bl	8017848 <RegionGetPhyParam>
 801479e:	4603      	mov	r3, r0
 80147a0:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 80147a2:	68fa      	ldr	r2, [r7, #12]
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	605a      	str	r2, [r3, #4]
            break;
 80147a8:	e0eb      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	4a77      	ldr	r2, [pc, #476]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80147ae:	3304      	adds	r3, #4
 80147b0:	326c      	adds	r2, #108	; 0x6c
 80147b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80147b6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80147ba:	e0e2      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	4a73      	ldr	r2, [pc, #460]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80147c0:	3304      	adds	r3, #4
 80147c2:	32b4      	adds	r2, #180	; 0xb4
 80147c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80147c8:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80147cc:	e0d9      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	4a6e      	ldr	r2, [pc, #440]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80147d2:	3304      	adds	r3, #4
 80147d4:	3274      	adds	r2, #116	; 0x74
 80147d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80147da:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80147de:	e0d0      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	4a6a      	ldr	r2, [pc, #424]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80147e4:	3304      	adds	r3, #4
 80147e6:	32bc      	adds	r2, #188	; 0xbc
 80147e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80147ec:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80147f0:	e0c7      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80147f2:	231a      	movs	r3, #26
 80147f4:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80147f6:	4b65      	ldr	r3, [pc, #404]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80147f8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80147fc:	f107 0210 	add.w	r2, r7, #16
 8014800:	4611      	mov	r1, r2
 8014802:	4618      	mov	r0, r3
 8014804:	f003 f820 	bl	8017848 <RegionGetPhyParam>
 8014808:	4603      	mov	r3, r0
 801480a:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 801480c:	68fa      	ldr	r2, [r7, #12]
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	605a      	str	r2, [r3, #4]
            break;
 8014812:	e0b6      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8014814:	2319      	movs	r3, #25
 8014816:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014818:	4b5c      	ldr	r3, [pc, #368]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801481a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801481e:	f107 0210 	add.w	r2, r7, #16
 8014822:	4611      	mov	r1, r2
 8014824:	4618      	mov	r0, r3
 8014826:	f003 f80f 	bl	8017848 <RegionGetPhyParam>
 801482a:	4603      	mov	r3, r0
 801482c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 801482e:	68fa      	ldr	r2, [r7, #12]
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	605a      	str	r2, [r3, #4]
            break;
 8014834:	e0a5      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8014836:	4b55      	ldr	r3, [pc, #340]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014838:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	711a      	strb	r2, [r3, #4]
            break;
 8014840:	e09f      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8014842:	4b52      	ldr	r3, [pc, #328]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014844:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	605a      	str	r2, [r3, #4]
            break;
 801484a:	e09a      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 801484c:	4b4f      	ldr	r3, [pc, #316]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801484e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	605a      	str	r2, [r3, #4]
            break;
 8014854:	e095      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8014856:	4b4d      	ldr	r3, [pc, #308]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014858:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	605a      	str	r2, [r3, #4]
            break;
 801485e:	e090      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8014860:	4b4a      	ldr	r3, [pc, #296]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014862:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	605a      	str	r2, [r3, #4]
            break;
 8014868:	e08b      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 801486a:	4b48      	ldr	r3, [pc, #288]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801486c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	605a      	str	r2, [r3, #4]
            break;
 8014872:	e086      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 8014874:	2302      	movs	r3, #2
 8014876:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014878:	4b44      	ldr	r3, [pc, #272]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801487a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801487e:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014880:	4b42      	ldr	r3, [pc, #264]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014882:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014886:	f107 0210 	add.w	r2, r7, #16
 801488a:	4611      	mov	r1, r2
 801488c:	4618      	mov	r0, r3
 801488e:	f002 ffdb 	bl	8017848 <RegionGetPhyParam>
 8014892:	4603      	mov	r3, r0
 8014894:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	b25a      	sxtb	r2, r3
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	711a      	strb	r2, [r3, #4]
            break;
 801489e:	e070      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80148a0:	4b3a      	ldr	r3, [pc, #232]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80148a2:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	711a      	strb	r2, [r3, #4]
            break;
 80148aa:	e06a      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80148ac:	4b37      	ldr	r3, [pc, #220]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80148ae:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	711a      	strb	r2, [r3, #4]
            break;
 80148b6:	e064      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80148b8:	4b34      	ldr	r3, [pc, #208]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80148ba:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	711a      	strb	r2, [r3, #4]
            break;
 80148c2:	e05e      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80148c4:	4b31      	ldr	r3, [pc, #196]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80148c6:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	711a      	strb	r2, [r3, #4]
            break;
 80148ce:	e058      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 80148d0:	4b2e      	ldr	r3, [pc, #184]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80148d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	605a      	str	r2, [r3, #4]
            break;
 80148d8:	e053      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 80148da:	4b2c      	ldr	r3, [pc, #176]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80148dc:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	711a      	strb	r2, [r3, #4]
            break;
 80148e4:	e04d      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80148e6:	4b29      	ldr	r3, [pc, #164]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80148e8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	605a      	str	r2, [r3, #4]
            break;
 80148f0:	e047      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	4a25      	ldr	r2, [pc, #148]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 80148f6:	605a      	str	r2, [r3, #4]
            break;
 80148f8:	e043      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	4a24      	ldr	r2, [pc, #144]	; (8014990 <LoRaMacMibGetRequestConfirm+0x3ac>)
 80148fe:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8014900:	e03f      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8014902:	4b22      	ldr	r3, [pc, #136]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014904:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	605a      	str	r2, [r3, #4]
            break;
 801490c:	e039      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	4a1e      	ldr	r2, [pc, #120]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014912:	f8d2 212c 	ldr.w	r2, [r2, #300]	; 0x12c
 8014916:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8014918:	687c      	ldr	r4, [r7, #4]
 801491a:	f003 f9a3 	bl	8017c64 <RegionGetVersion>
 801491e:	60a0      	str	r0, [r4, #8]
            break;
 8014920:	e02f      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8014922:	4b1a      	ldr	r3, [pc, #104]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014924:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	605a      	str	r2, [r3, #4]
            break;
 801492c:	e029      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 801492e:	4b17      	ldr	r3, [pc, #92]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014930:	f893 211f 	ldrb.w	r2, [r3, #287]	; 0x11f
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	711a      	strb	r2, [r3, #4]
            break;
 8014938:	e023      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 801493a:	4b14      	ldr	r3, [pc, #80]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 801493c:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	809a      	strh	r2, [r3, #4]
            break;
 8014944:	e01d      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8014946:	4b11      	ldr	r3, [pc, #68]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014948:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	809a      	strh	r2, [r3, #4]
            break;
 8014950:	e017      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8014952:	4b0e      	ldr	r3, [pc, #56]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014954:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	809a      	strh	r2, [r3, #4]
            break;
 801495c:	e011      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 801495e:	4b0b      	ldr	r3, [pc, #44]	; (801498c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014960:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	809a      	strh	r2, [r3, #4]
            break;
 8014968:	e00b      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 801496a:	2318      	movs	r3, #24
 801496c:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 801496e:	e008      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8014970:	2318      	movs	r3, #24
 8014972:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8014974:	e005      	b.n	8014982 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8014976:	6878      	ldr	r0, [r7, #4]
 8014978:	f001 f81f 	bl	80159ba <LoRaMacClassBMibGetRequestConfirm>
 801497c:	4603      	mov	r3, r0
 801497e:	75fb      	strb	r3, [r7, #23]
            break;
 8014980:	bf00      	nop
        }
    }
    return status;
 8014982:	7dfb      	ldrb	r3, [r7, #23]
}
 8014984:	4618      	mov	r0, r3
 8014986:	371c      	adds	r7, #28
 8014988:	46bd      	mov	sp, r7
 801498a:	bd90      	pop	{r4, r7, pc}
 801498c:	20000bf0 	.word	0x20000bf0
 8014990:	200011bc 	.word	0x200011bc

08014994 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8014994:	b580      	push	{r7, lr}
 8014996:	b086      	sub	sp, #24
 8014998:	af00      	add	r7, sp, #0
 801499a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801499c:	2300      	movs	r3, #0
 801499e:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d101      	bne.n	80149aa <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80149a6:	2303      	movs	r3, #3
 80149a8:	e396      	b.n	80150d8 <LoRaMacMibSetRequestConfirm+0x744>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80149aa:	4bbd      	ldr	r3, [pc, #756]	; (8014ca0 <LoRaMacMibSetRequestConfirm+0x30c>)
 80149ac:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80149b0:	f003 0302 	and.w	r3, r3, #2
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d001      	beq.n	80149bc <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80149b8:	2301      	movs	r3, #1
 80149ba:	e38d      	b.n	80150d8 <LoRaMacMibSetRequestConfirm+0x744>
    }

    switch( mibSet->Type )
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	781b      	ldrb	r3, [r3, #0]
 80149c0:	2b41      	cmp	r3, #65	; 0x41
 80149c2:	f200 835d 	bhi.w	8015080 <LoRaMacMibSetRequestConfirm+0x6ec>
 80149c6:	a201      	add	r2, pc, #4	; (adr r2, 80149cc <LoRaMacMibSetRequestConfirm+0x38>)
 80149c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149cc:	08014ad5 	.word	0x08014ad5
 80149d0:	08014ae5 	.word	0x08014ae5
 80149d4:	08014aff 	.word	0x08014aff
 80149d8:	08014b17 	.word	0x08014b17
 80149dc:	08014b2f 	.word	0x08014b2f
 80149e0:	08014b3b 	.word	0x08014b3b
 80149e4:	08014b47 	.word	0x08014b47
 80149e8:	08014b71 	.word	0x08014b71
 80149ec:	08014b97 	.word	0x08014b97
 80149f0:	08014bbd 	.word	0x08014bbd
 80149f4:	08014be3 	.word	0x08014be3
 80149f8:	08014c09 	.word	0x08014c09
 80149fc:	08014c2f 	.word	0x08014c2f
 8014a00:	08014c55 	.word	0x08014c55
 8014a04:	08014c7b 	.word	0x08014c7b
 8014a08:	08014ca9 	.word	0x08014ca9
 8014a0c:	08014cc9 	.word	0x08014cc9
 8014a10:	08015081 	.word	0x08015081
 8014a14:	08014cd5 	.word	0x08014cd5
 8014a18:	08014d45 	.word	0x08014d45
 8014a1c:	08014d85 	.word	0x08014d85
 8014a20:	08014de7 	.word	0x08014de7
 8014a24:	08014e57 	.word	0x08014e57
 8014a28:	08014e27 	.word	0x08014e27
 8014a2c:	08014e87 	.word	0x08014e87
 8014a30:	08014ea9 	.word	0x08014ea9
 8014a34:	08014eb3 	.word	0x08014eb3
 8014a38:	08014ebd 	.word	0x08014ebd
 8014a3c:	08014ec7 	.word	0x08014ec7
 8014a40:	08014ed1 	.word	0x08014ed1
 8014a44:	08015081 	.word	0x08015081
 8014a48:	08014edb 	.word	0x08014edb
 8014a4c:	08014f0d 	.word	0x08014f0d
 8014a50:	08014f81 	.word	0x08014f81
 8014a54:	08014f47 	.word	0x08014f47
 8014a58:	08014fb3 	.word	0x08014fb3
 8014a5c:	08014fc9 	.word	0x08014fc9
 8014a60:	08014fe1 	.word	0x08014fe1
 8014a64:	08014fed 	.word	0x08014fed
 8014a68:	08014ff9 	.word	0x08014ff9
 8014a6c:	08015081 	.word	0x08015081
 8014a70:	08015003 	.word	0x08015003
 8014a74:	08015081 	.word	0x08015081
 8014a78:	08015081 	.word	0x08015081
 8014a7c:	08015081 	.word	0x08015081
 8014a80:	08015081 	.word	0x08015081
 8014a84:	08015081 	.word	0x08015081
 8014a88:	08015081 	.word	0x08015081
 8014a8c:	08015081 	.word	0x08015081
 8014a90:	08015081 	.word	0x08015081
 8014a94:	08015081 	.word	0x08015081
 8014a98:	08015081 	.word	0x08015081
 8014a9c:	08015081 	.word	0x08015081
 8014aa0:	08015081 	.word	0x08015081
 8014aa4:	08015081 	.word	0x08015081
 8014aa8:	08015081 	.word	0x08015081
 8014aac:	08015081 	.word	0x08015081
 8014ab0:	08015081 	.word	0x08015081
 8014ab4:	0801502d 	.word	0x0801502d
 8014ab8:	08015039 	.word	0x08015039
 8014abc:	08015045 	.word	0x08015045
 8014ac0:	08015051 	.word	0x08015051
 8014ac4:	0801505d 	.word	0x0801505d
 8014ac8:	08015069 	.word	0x08015069
 8014acc:	08015075 	.word	0x08015075
 8014ad0:	0801507b 	.word	0x0801507b
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	791b      	ldrb	r3, [r3, #4]
 8014ad8:	4618      	mov	r0, r3
 8014ada:	f7fd fabb 	bl	8012054 <SwitchClass>
 8014ade:	4603      	mov	r3, r0
 8014ae0:	75fb      	strb	r3, [r7, #23]
            break;
 8014ae2:	e2ee      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	791b      	ldrb	r3, [r3, #4]
 8014ae8:	2b02      	cmp	r3, #2
 8014aea:	d005      	beq.n	8014af8 <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	791a      	ldrb	r2, [r3, #4]
 8014af0:	4b6c      	ldr	r3, [pc, #432]	; (8014ca4 <LoRaMacMibSetRequestConfirm+0x310>)
 8014af2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014af6:	e2e4      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014af8:	2303      	movs	r3, #3
 8014afa:	75fb      	strb	r3, [r7, #23]
            break;
 8014afc:	e2e1      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	685b      	ldr	r3, [r3, #4]
 8014b02:	4618      	mov	r0, r3
 8014b04:	f7fa f8b4 	bl	800ec70 <SecureElementSetDevEui>
 8014b08:	4603      	mov	r3, r0
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	f000 82be 	beq.w	801508c <LoRaMacMibSetRequestConfirm+0x6f8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014b10:	2303      	movs	r3, #3
 8014b12:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014b14:	e2ba      	b.n	801508c <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	685b      	ldr	r3, [r3, #4]
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	f7fa f8d8 	bl	800ecd0 <SecureElementSetJoinEui>
 8014b20:	4603      	mov	r3, r0
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	f000 82b4 	beq.w	8015090 <LoRaMacMibSetRequestConfirm+0x6fc>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014b28:	2303      	movs	r3, #3
 8014b2a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014b2c:	e2b0      	b.n	8015090 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	791a      	ldrb	r2, [r3, #4]
 8014b32:	4b5c      	ldr	r3, [pc, #368]	; (8014ca4 <LoRaMacMibSetRequestConfirm+0x310>)
 8014b34:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            break;
 8014b38:	e2c3      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	685b      	ldr	r3, [r3, #4]
 8014b3e:	4a59      	ldr	r2, [pc, #356]	; (8014ca4 <LoRaMacMibSetRequestConfirm+0x310>)
 8014b40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            break;
 8014b44:	e2bd      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8014b46:	4b57      	ldr	r3, [pc, #348]	; (8014ca4 <LoRaMacMibSetRequestConfirm+0x310>)
 8014b48:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	685b      	ldr	r3, [r3, #4]
 8014b50:	4619      	mov	r1, r3
 8014b52:	4610      	mov	r0, r2
 8014b54:	f7fa f8ec 	bl	800ed30 <SecureElementSetDevAddr>
 8014b58:	4603      	mov	r3, r0
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d002      	beq.n	8014b64 <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014b5e:	2303      	movs	r3, #3
 8014b60:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 8014b62:	e2ae      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	685b      	ldr	r3, [r3, #4]
 8014b68:	4a4e      	ldr	r2, [pc, #312]	; (8014ca4 <LoRaMacMibSetRequestConfirm+0x310>)
 8014b6a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            break;
 8014b6e:	e2a8      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	685b      	ldr	r3, [r3, #4]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d00b      	beq.n	8014b90 <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	685b      	ldr	r3, [r3, #4]
 8014b7c:	4619      	mov	r1, r3
 8014b7e:	2000      	movs	r0, #0
 8014b80:	f002 f868 	bl	8016c54 <LoRaMacCryptoSetKey>
 8014b84:	4603      	mov	r3, r0
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	f000 8284 	beq.w	8015094 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014b8c:	2311      	movs	r3, #17
 8014b8e:	e2a3      	b.n	80150d8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014b90:	2303      	movs	r3, #3
 8014b92:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014b94:	e27e      	b.n	8015094 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	685b      	ldr	r3, [r3, #4]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d00b      	beq.n	8014bb6 <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	685b      	ldr	r3, [r3, #4]
 8014ba2:	4619      	mov	r1, r3
 8014ba4:	2001      	movs	r0, #1
 8014ba6:	f002 f855 	bl	8016c54 <LoRaMacCryptoSetKey>
 8014baa:	4603      	mov	r3, r0
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	f000 8273 	beq.w	8015098 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014bb2:	2311      	movs	r3, #17
 8014bb4:	e290      	b.n	80150d8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014bb6:	2303      	movs	r3, #3
 8014bb8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014bba:	e26d      	b.n	8015098 <LoRaMacMibSetRequestConfirm+0x704>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	685b      	ldr	r3, [r3, #4]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d00b      	beq.n	8014bdc <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	685b      	ldr	r3, [r3, #4]
 8014bc8:	4619      	mov	r1, r3
 8014bca:	2008      	movs	r0, #8
 8014bcc:	f002 f842 	bl	8016c54 <LoRaMacCryptoSetKey>
 8014bd0:	4603      	mov	r3, r0
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	f000 8262 	beq.w	801509c <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014bd8:	2311      	movs	r3, #17
 8014bda:	e27d      	b.n	80150d8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014bdc:	2303      	movs	r3, #3
 8014bde:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014be0:	e25c      	b.n	801509c <LoRaMacMibSetRequestConfirm+0x708>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	685b      	ldr	r3, [r3, #4]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d00b      	beq.n	8014c02 <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	685b      	ldr	r3, [r3, #4]
 8014bee:	4619      	mov	r1, r3
 8014bf0:	2009      	movs	r0, #9
 8014bf2:	f002 f82f 	bl	8016c54 <LoRaMacCryptoSetKey>
 8014bf6:	4603      	mov	r3, r0
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	f000 8251 	beq.w	80150a0 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014bfe:	2311      	movs	r3, #17
 8014c00:	e26a      	b.n	80150d8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c02:	2303      	movs	r3, #3
 8014c04:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c06:	e24b      	b.n	80150a0 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	685b      	ldr	r3, [r3, #4]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d00b      	beq.n	8014c28 <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	685b      	ldr	r3, [r3, #4]
 8014c14:	4619      	mov	r1, r3
 8014c16:	200c      	movs	r0, #12
 8014c18:	f002 f81c 	bl	8016c54 <LoRaMacCryptoSetKey>
 8014c1c:	4603      	mov	r3, r0
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	f000 8240 	beq.w	80150a4 <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c24:	2311      	movs	r3, #17
 8014c26:	e257      	b.n	80150d8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c28:	2303      	movs	r3, #3
 8014c2a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c2c:	e23a      	b.n	80150a4 <LoRaMacMibSetRequestConfirm+0x710>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	685b      	ldr	r3, [r3, #4]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d00b      	beq.n	8014c4e <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	685b      	ldr	r3, [r3, #4]
 8014c3a:	4619      	mov	r1, r3
 8014c3c:	200d      	movs	r0, #13
 8014c3e:	f002 f809 	bl	8016c54 <LoRaMacCryptoSetKey>
 8014c42:	4603      	mov	r3, r0
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	f000 822f 	beq.w	80150a8 <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c4a:	2311      	movs	r3, #17
 8014c4c:	e244      	b.n	80150d8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c4e:	2303      	movs	r3, #3
 8014c50:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c52:	e229      	b.n	80150a8 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	685b      	ldr	r3, [r3, #4]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d00b      	beq.n	8014c74 <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	685b      	ldr	r3, [r3, #4]
 8014c60:	4619      	mov	r1, r3
 8014c62:	200e      	movs	r0, #14
 8014c64:	f001 fff6 	bl	8016c54 <LoRaMacCryptoSetKey>
 8014c68:	4603      	mov	r3, r0
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	f000 821e 	beq.w	80150ac <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c70:	2311      	movs	r3, #17
 8014c72:	e231      	b.n	80150d8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c74:	2303      	movs	r3, #3
 8014c76:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c78:	e218      	b.n	80150ac <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	685b      	ldr	r3, [r3, #4]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d00b      	beq.n	8014c9a <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	685b      	ldr	r3, [r3, #4]
 8014c86:	4619      	mov	r1, r3
 8014c88:	200f      	movs	r0, #15
 8014c8a:	f001 ffe3 	bl	8016c54 <LoRaMacCryptoSetKey>
 8014c8e:	4603      	mov	r3, r0
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	f000 820d 	beq.w	80150b0 <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c96:	2311      	movs	r3, #17
 8014c98:	e21e      	b.n	80150d8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c9a:	2303      	movs	r3, #3
 8014c9c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c9e:	e207      	b.n	80150b0 <LoRaMacMibSetRequestConfirm+0x71c>
 8014ca0:	200006d4 	.word	0x200006d4
 8014ca4:	20000bf0 	.word	0x20000bf0
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	791a      	ldrb	r2, [r3, #4]
 8014cac:	4bb2      	ldr	r3, [pc, #712]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014cae:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8014cb2:	4bb2      	ldr	r3, [pc, #712]	; (8014f7c <LoRaMacMibSetRequestConfirm+0x5e8>)
 8014cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014cb6:	4ab0      	ldr	r2, [pc, #704]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014cb8:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8014cbc:	4610      	mov	r0, r2
 8014cbe:	4798      	blx	r3
            Radio.Sleep( );
 8014cc0:	4bae      	ldr	r3, [pc, #696]	; (8014f7c <LoRaMacMibSetRequestConfirm+0x5e8>)
 8014cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cc4:	4798      	blx	r3
            break;
 8014cc6:	e1fc      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	791a      	ldrb	r2, [r3, #4]
 8014ccc:	4baa      	ldr	r3, [pc, #680]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014cce:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 8014cd2:	e1f6      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	7a1b      	ldrb	r3, [r3, #8]
 8014cd8:	b25b      	sxtb	r3, r3
 8014cda:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014cdc:	4ba6      	ldr	r3, [pc, #664]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014cde:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014ce2:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8014ce4:	4ba4      	ldr	r3, [pc, #656]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014ce6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014cea:	f107 0108 	add.w	r1, r7, #8
 8014cee:	2207      	movs	r2, #7
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	f002 fdf7 	bl	80178e4 <RegionVerify>
 8014cf6:	4603      	mov	r3, r0
 8014cf8:	f083 0301 	eor.w	r3, r3, #1
 8014cfc:	b2db      	uxtb	r3, r3
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d002      	beq.n	8014d08 <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d02:	2303      	movs	r3, #3
 8014d04:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 8014d06:	e1dc      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	685b      	ldr	r3, [r3, #4]
 8014d0c:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8014d0e:	4b9a      	ldr	r3, [pc, #616]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014d10:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014d14:	f107 0108 	add.w	r1, r7, #8
 8014d18:	2200      	movs	r2, #0
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	f002 fde2 	bl	80178e4 <RegionVerify>
 8014d20:	4603      	mov	r3, r0
 8014d22:	f083 0301 	eor.w	r3, r3, #1
 8014d26:	b2db      	uxtb	r3, r3
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d002      	beq.n	8014d32 <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d2c:	2303      	movs	r3, #3
 8014d2e:	75fb      	strb	r3, [r7, #23]
            break;
 8014d30:	e1c7      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8014d32:	4b91      	ldr	r3, [pc, #580]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014d34:	687a      	ldr	r2, [r7, #4]
 8014d36:	336c      	adds	r3, #108	; 0x6c
 8014d38:	3204      	adds	r2, #4
 8014d3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014d3e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014d42:	e1be      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	7a1b      	ldrb	r3, [r3, #8]
 8014d48:	b25b      	sxtb	r3, r3
 8014d4a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014d4c:	4b8a      	ldr	r3, [pc, #552]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014d4e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014d52:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014d54:	4b88      	ldr	r3, [pc, #544]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014d56:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014d5a:	f107 0108 	add.w	r1, r7, #8
 8014d5e:	2207      	movs	r2, #7
 8014d60:	4618      	mov	r0, r3
 8014d62:	f002 fdbf 	bl	80178e4 <RegionVerify>
 8014d66:	4603      	mov	r3, r0
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d008      	beq.n	8014d7e <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8014d6c:	4b82      	ldr	r3, [pc, #520]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014d6e:	687a      	ldr	r2, [r7, #4]
 8014d70:	33b4      	adds	r3, #180	; 0xb4
 8014d72:	3204      	adds	r2, #4
 8014d74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014d78:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014d7c:	e1a1      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d7e:	2303      	movs	r3, #3
 8014d80:	75fb      	strb	r3, [r7, #23]
            break;
 8014d82:	e19e      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	7a1b      	ldrb	r3, [r3, #8]
 8014d88:	b25b      	sxtb	r3, r3
 8014d8a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014d8c:	4b7a      	ldr	r3, [pc, #488]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014d8e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014d92:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014d94:	4b78      	ldr	r3, [pc, #480]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014d96:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014d9a:	f107 0108 	add.w	r1, r7, #8
 8014d9e:	2207      	movs	r2, #7
 8014da0:	4618      	mov	r0, r3
 8014da2:	f002 fd9f 	bl	80178e4 <RegionVerify>
 8014da6:	4603      	mov	r3, r0
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d019      	beq.n	8014de0 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8014dac:	4b72      	ldr	r3, [pc, #456]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014dae:	687a      	ldr	r2, [r7, #4]
 8014db0:	3374      	adds	r3, #116	; 0x74
 8014db2:	3204      	adds	r2, #4
 8014db4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014db8:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8014dbc:	4b6e      	ldr	r3, [pc, #440]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014dbe:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8014dc2:	2b02      	cmp	r3, #2
 8014dc4:	f040 8176 	bne.w	80150b4 <LoRaMacMibSetRequestConfirm+0x720>
 8014dc8:	4b6b      	ldr	r3, [pc, #428]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014dca:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	f000 8170 	beq.w	80150b4 <LoRaMacMibSetRequestConfirm+0x720>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8014dd4:	4b69      	ldr	r3, [pc, #420]	; (8014f7c <LoRaMacMibSetRequestConfirm+0x5e8>)
 8014dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014dd8:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8014dda:	f7fe fc1b 	bl	8013614 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014dde:	e169      	b.n	80150b4 <LoRaMacMibSetRequestConfirm+0x720>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014de0:	2303      	movs	r3, #3
 8014de2:	75fb      	strb	r3, [r7, #23]
            break;
 8014de4:	e166      	b.n	80150b4 <LoRaMacMibSetRequestConfirm+0x720>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	7a1b      	ldrb	r3, [r3, #8]
 8014dea:	b25b      	sxtb	r3, r3
 8014dec:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014dee:	4b62      	ldr	r3, [pc, #392]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014df0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014df4:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014df6:	4b60      	ldr	r3, [pc, #384]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014df8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014dfc:	f107 0108 	add.w	r1, r7, #8
 8014e00:	2207      	movs	r2, #7
 8014e02:	4618      	mov	r0, r3
 8014e04:	f002 fd6e 	bl	80178e4 <RegionVerify>
 8014e08:	4603      	mov	r3, r0
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d008      	beq.n	8014e20 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8014e0e:	4b5a      	ldr	r3, [pc, #360]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014e10:	687a      	ldr	r2, [r7, #4]
 8014e12:	33bc      	adds	r3, #188	; 0xbc
 8014e14:	3204      	adds	r2, #4
 8014e16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014e1a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014e1e:	e150      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e20:	2303      	movs	r3, #3
 8014e22:	75fb      	strb	r3, [r7, #23]
            break;
 8014e24:	e14d      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	685b      	ldr	r3, [r3, #4]
 8014e2a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8014e2c:	2301      	movs	r3, #1
 8014e2e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8014e30:	4b51      	ldr	r3, [pc, #324]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014e32:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014e36:	f107 020c 	add.w	r2, r7, #12
 8014e3a:	4611      	mov	r1, r2
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	f002 fd89 	bl	8017954 <RegionChanMaskSet>
 8014e42:	4603      	mov	r3, r0
 8014e44:	f083 0301 	eor.w	r3, r3, #1
 8014e48:	b2db      	uxtb	r3, r3
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	f000 8134 	beq.w	80150b8 <LoRaMacMibSetRequestConfirm+0x724>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e50:	2303      	movs	r3, #3
 8014e52:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014e54:	e130      	b.n	80150b8 <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	685b      	ldr	r3, [r3, #4]
 8014e5a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8014e5c:	2300      	movs	r3, #0
 8014e5e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8014e60:	4b45      	ldr	r3, [pc, #276]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014e62:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014e66:	f107 020c 	add.w	r2, r7, #12
 8014e6a:	4611      	mov	r1, r2
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	f002 fd71 	bl	8017954 <RegionChanMaskSet>
 8014e72:	4603      	mov	r3, r0
 8014e74:	f083 0301 	eor.w	r3, r3, #1
 8014e78:	b2db      	uxtb	r3, r3
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	f000 811e 	beq.w	80150bc <LoRaMacMibSetRequestConfirm+0x728>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e80:	2303      	movs	r3, #3
 8014e82:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014e84:	e11a      	b.n	80150bc <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	791b      	ldrb	r3, [r3, #4]
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d009      	beq.n	8014ea2 <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014e92:	2b0f      	cmp	r3, #15
 8014e94:	d805      	bhi.n	8014ea2 <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	791a      	ldrb	r2, [r3, #4]
 8014e9a:	4b37      	ldr	r3, [pc, #220]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014e9c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014ea0:	e10f      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014ea2:	2303      	movs	r3, #3
 8014ea4:	75fb      	strb	r3, [r7, #23]
            break;
 8014ea6:	e10c      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	685b      	ldr	r3, [r3, #4]
 8014eac:	4a32      	ldr	r2, [pc, #200]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014eae:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8014eb0:	e107      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	685b      	ldr	r3, [r3, #4]
 8014eb6:	4a30      	ldr	r2, [pc, #192]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014eb8:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8014eba:	e102      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	685b      	ldr	r3, [r3, #4]
 8014ec0:	4a2d      	ldr	r2, [pc, #180]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014ec2:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8014ec4:	e0fd      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	685b      	ldr	r3, [r3, #4]
 8014eca:	4a2b      	ldr	r2, [pc, #172]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014ecc:	6613      	str	r3, [r2, #96]	; 0x60
            break;
 8014ece:	e0f8      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	685b      	ldr	r3, [r3, #4]
 8014ed4:	4a28      	ldr	r2, [pc, #160]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014ed6:	6653      	str	r3, [r2, #100]	; 0x64
            break;
 8014ed8:	e0f3      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014ee0:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8014ee2:	4b25      	ldr	r3, [pc, #148]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014ee4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014ee8:	f107 0108 	add.w	r1, r7, #8
 8014eec:	2206      	movs	r2, #6
 8014eee:	4618      	mov	r0, r3
 8014ef0:	f002 fcf8 	bl	80178e4 <RegionVerify>
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d005      	beq.n	8014f06 <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8014efa:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014efe:	4b1e      	ldr	r3, [pc, #120]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014f00:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014f04:	e0dd      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f06:	2303      	movs	r3, #3
 8014f08:	75fb      	strb	r3, [r7, #23]
            break;
 8014f0a:	e0da      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014f12:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014f14:	4b18      	ldr	r3, [pc, #96]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014f16:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014f1a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8014f1c:	4b16      	ldr	r3, [pc, #88]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014f1e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014f22:	f107 0108 	add.w	r1, r7, #8
 8014f26:	2205      	movs	r2, #5
 8014f28:	4618      	mov	r0, r3
 8014f2a:	f002 fcdb 	bl	80178e4 <RegionVerify>
 8014f2e:	4603      	mov	r3, r0
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d005      	beq.n	8014f40 <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014f34:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014f38:	4b0f      	ldr	r3, [pc, #60]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014f3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014f3e:	e0c0      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f40:	2303      	movs	r3, #3
 8014f42:	75fb      	strb	r3, [r7, #23]
            break;
 8014f44:	e0bd      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014f4c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8014f4e:	4b0a      	ldr	r3, [pc, #40]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014f50:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014f54:	f107 0108 	add.w	r1, r7, #8
 8014f58:	220a      	movs	r2, #10
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	f002 fcc2 	bl	80178e4 <RegionVerify>
 8014f60:	4603      	mov	r3, r0
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d005      	beq.n	8014f72 <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8014f66:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014f6a:	4b03      	ldr	r3, [pc, #12]	; (8014f78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014f6c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014f70:	e0a7      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f72:	2303      	movs	r3, #3
 8014f74:	75fb      	strb	r3, [r7, #23]
            break;
 8014f76:	e0a4      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
 8014f78:	20000bf0 	.word	0x20000bf0
 8014f7c:	08020e2c 	.word	0x08020e2c
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014f86:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8014f88:	4b55      	ldr	r3, [pc, #340]	; (80150e0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8014f8a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014f8e:	f107 0108 	add.w	r1, r7, #8
 8014f92:	2209      	movs	r2, #9
 8014f94:	4618      	mov	r0, r3
 8014f96:	f002 fca5 	bl	80178e4 <RegionVerify>
 8014f9a:	4603      	mov	r3, r0
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d005      	beq.n	8014fac <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8014fa0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014fa4:	4b4e      	ldr	r3, [pc, #312]	; (80150e0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8014fa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014faa:	e08a      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014fac:	2303      	movs	r3, #3
 8014fae:	75fb      	strb	r3, [r7, #23]
            break;
 8014fb0:	e087      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	685b      	ldr	r3, [r3, #4]
 8014fb6:	4a4a      	ldr	r2, [pc, #296]	; (80150e0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8014fb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8014fbc:	4b48      	ldr	r3, [pc, #288]	; (80150e0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8014fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014fc2:	4a47      	ldr	r2, [pc, #284]	; (80150e0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8014fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8014fc6:	e07c      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	791a      	ldrb	r2, [r3, #4]
 8014fcc:	4b44      	ldr	r3, [pc, #272]	; (80150e0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8014fce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8014fd2:	4b43      	ldr	r3, [pc, #268]	; (80150e0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8014fd4:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8014fd8:	4b41      	ldr	r3, [pc, #260]	; (80150e0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8014fda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            break;
 8014fde:	e070      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	685b      	ldr	r3, [r3, #4]
 8014fe4:	4a3e      	ldr	r2, [pc, #248]	; (80150e0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8014fe6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8014fea:	e06a      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	685b      	ldr	r3, [r3, #4]
 8014ff0:	4a3b      	ldr	r2, [pc, #236]	; (80150e0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8014ff2:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8014ff6:	e064      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8014ff8:	f7fe fd40 	bl	8013a7c <RestoreNvmData>
 8014ffc:	4603      	mov	r3, r0
 8014ffe:	75fb      	strb	r3, [r7, #23]
            break;
 8015000:	e05f      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	799b      	ldrb	r3, [r3, #6]
 8015006:	2b01      	cmp	r3, #1
 8015008:	d80d      	bhi.n	8015026 <LoRaMacMibSetRequestConfirm+0x692>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 801500a:	4a35      	ldr	r2, [pc, #212]	; (80150e0 <LoRaMacMibSetRequestConfirm+0x74c>)
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	685b      	ldr	r3, [r3, #4]
 8015010:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	6858      	ldr	r0, [r3, #4]
 8015018:	f001 fd7e 	bl	8016b18 <LoRaMacCryptoSetLrWanVersion>
 801501c:	4603      	mov	r3, r0
 801501e:	2b00      	cmp	r3, #0
 8015020:	d04e      	beq.n	80150c0 <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8015022:	2311      	movs	r3, #17
 8015024:	e058      	b.n	80150d8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015026:	2303      	movs	r3, #3
 8015028:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801502a:	e049      	b.n	80150c0 <LoRaMacMibSetRequestConfirm+0x72c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	685b      	ldr	r3, [r3, #4]
 8015030:	4a2b      	ldr	r2, [pc, #172]	; (80150e0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8015032:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
            break;
 8015036:	e044      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	791a      	ldrb	r2, [r3, #4]
 801503c:	4b28      	ldr	r3, [pc, #160]	; (80150e0 <LoRaMacMibSetRequestConfirm+0x74c>)
 801503e:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
            break;
 8015042:	e03e      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	889a      	ldrh	r2, [r3, #4]
 8015048:	4b25      	ldr	r3, [pc, #148]	; (80150e0 <LoRaMacMibSetRequestConfirm+0x74c>)
 801504a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            break;
 801504e:	e038      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	889a      	ldrh	r2, [r3, #4]
 8015054:	4b22      	ldr	r3, [pc, #136]	; (80150e0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8015056:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            break;
 801505a:	e032      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	889a      	ldrh	r2, [r3, #4]
 8015060:	4b1f      	ldr	r3, [pc, #124]	; (80150e0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8015062:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
            break;
 8015066:	e02c      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	889a      	ldrh	r2, [r3, #4]
 801506c:	4b1c      	ldr	r3, [pc, #112]	; (80150e0 <LoRaMacMibSetRequestConfirm+0x74c>)
 801506e:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
            break;
 8015072:	e026      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8015074:	2318      	movs	r3, #24
 8015076:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8015078:	e023      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 801507a:	2318      	movs	r3, #24
 801507c:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 801507e:	e020      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8015080:	6878      	ldr	r0, [r7, #4]
 8015082:	f000 fca4 	bl	80159ce <LoRaMacMibClassBSetRequestConfirm>
 8015086:	4603      	mov	r3, r0
 8015088:	75fb      	strb	r3, [r7, #23]
            break;
 801508a:	e01a      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 801508c:	bf00      	nop
 801508e:	e018      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8015090:	bf00      	nop
 8015092:	e016      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8015094:	bf00      	nop
 8015096:	e014      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8015098:	bf00      	nop
 801509a:	e012      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 801509c:	bf00      	nop
 801509e:	e010      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80150a0:	bf00      	nop
 80150a2:	e00e      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80150a4:	bf00      	nop
 80150a6:	e00c      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80150a8:	bf00      	nop
 80150aa:	e00a      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80150ac:	bf00      	nop
 80150ae:	e008      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80150b0:	bf00      	nop
 80150b2:	e006      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80150b4:	bf00      	nop
 80150b6:	e004      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80150b8:	bf00      	nop
 80150ba:	e002      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80150bc:	bf00      	nop
 80150be:	e000      	b.n	80150c2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80150c0:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 80150c2:	7dfb      	ldrb	r3, [r7, #23]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d106      	bne.n	80150d6 <LoRaMacMibSetRequestConfirm+0x742>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80150c8:	4a06      	ldr	r2, [pc, #24]	; (80150e4 <LoRaMacMibSetRequestConfirm+0x750>)
 80150ca:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80150ce:	f043 0320 	orr.w	r3, r3, #32
 80150d2:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 80150d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80150d8:	4618      	mov	r0, r3
 80150da:	3718      	adds	r7, #24
 80150dc:	46bd      	mov	sp, r7
 80150de:	bd80      	pop	{r7, pc}
 80150e0:	20000bf0 	.word	0x20000bf0
 80150e4:	200006d4 	.word	0x200006d4

080150e8 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 80150e8:	b580      	push	{r7, lr}
 80150ea:	b08a      	sub	sp, #40	; 0x28
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80150f0:	2302      	movs	r3, #2
 80150f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80150f6:	2300      	movs	r3, #0
 80150f8:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d101      	bne.n	8015104 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015100:	2303      	movs	r3, #3
 8015102:	e17e      	b.n	8015402 <LoRaMacMlmeRequest+0x31a>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	2200      	movs	r2, #0
 8015108:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 801510a:	f7fc fb85 	bl	8011818 <LoRaMacIsBusy>
 801510e:	4603      	mov	r3, r0
 8015110:	2b00      	cmp	r3, #0
 8015112:	d001      	beq.n	8015118 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8015114:	2301      	movs	r3, #1
 8015116:	e174      	b.n	8015402 <LoRaMacMlmeRequest+0x31a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8015118:	f001 f994 	bl	8016444 <LoRaMacConfirmQueueIsFull>
 801511c:	4603      	mov	r3, r0
 801511e:	2b00      	cmp	r3, #0
 8015120:	d001      	beq.n	8015126 <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 8015122:	2301      	movs	r3, #1
 8015124:	e16d      	b.n	8015402 <LoRaMacMlmeRequest+0x31a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8015126:	f001 f981 	bl	801642c <LoRaMacConfirmQueueGetCnt>
 801512a:	4603      	mov	r3, r0
 801512c:	2b00      	cmp	r3, #0
 801512e:	d104      	bne.n	801513a <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8015130:	2214      	movs	r2, #20
 8015132:	2100      	movs	r1, #0
 8015134:	48b5      	ldr	r0, [pc, #724]	; (801540c <LoRaMacMlmeRequest+0x324>)
 8015136:	f006 f9c3 	bl	801b4c0 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801513a:	4bb5      	ldr	r3, [pc, #724]	; (8015410 <LoRaMacMlmeRequest+0x328>)
 801513c:	2201      	movs	r2, #1
 801513e:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8015142:	4ab3      	ldr	r2, [pc, #716]	; (8015410 <LoRaMacMlmeRequest+0x328>)
 8015144:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8015148:	f043 0304 	orr.w	r3, r3, #4
 801514c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    queueElement.Request = mlmeRequest->Type;
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	781b      	ldrb	r3, [r3, #0]
 8015154:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015158:	2301      	movs	r3, #1
 801515a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 801515e:	2300      	movs	r3, #0
 8015160:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 8015164:	2300      	movs	r3, #0
 8015166:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	781b      	ldrb	r3, [r3, #0]
 801516e:	3b01      	subs	r3, #1
 8015170:	2b0c      	cmp	r3, #12
 8015172:	f200 811a 	bhi.w	80153aa <LoRaMacMlmeRequest+0x2c2>
 8015176:	a201      	add	r2, pc, #4	; (adr r2, 801517c <LoRaMacMlmeRequest+0x94>)
 8015178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801517c:	080151b1 	.word	0x080151b1
 8015180:	080153ab 	.word	0x080153ab
 8015184:	080153ab 	.word	0x080153ab
 8015188:	080153ab 	.word	0x080153ab
 801518c:	0801528f 	.word	0x0801528f
 8015190:	080152b3 	.word	0x080152b3
 8015194:	080153ab 	.word	0x080153ab
 8015198:	080153ab 	.word	0x080153ab
 801519c:	080152d1 	.word	0x080152d1
 80151a0:	080153ab 	.word	0x080153ab
 80151a4:	08015379 	.word	0x08015379
 80151a8:	0801530d 	.word	0x0801530d
 80151ac:	08015357 	.word	0x08015357
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 80151b0:	4b97      	ldr	r3, [pc, #604]	; (8015410 <LoRaMacMlmeRequest+0x328>)
 80151b2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80151b6:	f003 0320 	and.w	r3, r3, #32
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d001      	beq.n	80151c2 <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 80151be:	2301      	movs	r3, #1
 80151c0:	e11f      	b.n	8015402 <LoRaMacMlmeRequest+0x31a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	791b      	ldrb	r3, [r3, #4]
 80151c6:	2b02      	cmp	r3, #2
 80151c8:	d135      	bne.n	8015236 <LoRaMacMlmeRequest+0x14e>
            {
                ResetMacParameters( false );
 80151ca:	2000      	movs	r0, #0
 80151cc:	f7fe f8b4 	bl	8013338 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80151d0:	4b90      	ldr	r3, [pc, #576]	; (8015414 <LoRaMacMlmeRequest+0x32c>)
 80151d2:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	795b      	ldrb	r3, [r3, #5]
 80151da:	b25b      	sxtb	r3, r3
 80151dc:	2200      	movs	r2, #0
 80151de:	4619      	mov	r1, r3
 80151e0:	f002 fcc8 	bl	8017b74 <RegionAlternateDr>
 80151e4:	4603      	mov	r3, r0
 80151e6:	461a      	mov	r2, r3
 80151e8:	4b8a      	ldr	r3, [pc, #552]	; (8015414 <LoRaMacMlmeRequest+0x32c>)
 80151ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	f993 2006 	ldrsb.w	r2, [r3, #6]
 80151f4:	4b87      	ldr	r3, [pc, #540]	; (8015414 <LoRaMacMlmeRequest+0x32c>)
 80151f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80151fa:	2307      	movs	r3, #7
 80151fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

                status = SendReJoinReq( JOIN_REQ );
 8015200:	20ff      	movs	r0, #255	; 0xff
 8015202:	f7fd fe1d 	bl	8012e40 <SendReJoinReq>
 8015206:	4603      	mov	r3, r0
 8015208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if( status != LORAMAC_STATUS_OK )
 801520c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015210:	2b00      	cmp	r3, #0
 8015212:	f000 80cc 	beq.w	80153ae <LoRaMacMlmeRequest+0x2c6>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8015216:	4b7f      	ldr	r3, [pc, #508]	; (8015414 <LoRaMacMlmeRequest+0x32c>)
 8015218:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	795b      	ldrb	r3, [r3, #5]
 8015220:	b25b      	sxtb	r3, r3
 8015222:	2201      	movs	r2, #1
 8015224:	4619      	mov	r1, r3
 8015226:	f002 fca5 	bl	8017b74 <RegionAlternateDr>
 801522a:	4603      	mov	r3, r0
 801522c:	461a      	mov	r2, r3
 801522e:	4b79      	ldr	r3, [pc, #484]	; (8015414 <LoRaMacMlmeRequest+0x32c>)
 8015230:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8015234:	e0bb      	b.n	80153ae <LoRaMacMlmeRequest+0x2c6>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	791b      	ldrb	r3, [r3, #4]
 801523a:	2b01      	cmp	r3, #1
 801523c:	f040 80b7 	bne.w	80153ae <LoRaMacMlmeRequest+0x2c6>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8015240:	4b74      	ldr	r3, [pc, #464]	; (8015414 <LoRaMacMlmeRequest+0x32c>)
 8015242:	2200      	movs	r2, #0
 8015244:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8015248:	2302      	movs	r3, #2
 801524a:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801524c:	4b71      	ldr	r3, [pc, #452]	; (8015414 <LoRaMacMlmeRequest+0x32c>)
 801524e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015252:	f107 020c 	add.w	r2, r7, #12
 8015256:	4611      	mov	r1, r2
 8015258:	4618      	mov	r0, r3
 801525a:	f002 fb2c 	bl	80178b6 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	791a      	ldrb	r2, [r3, #4]
 8015262:	4b6c      	ldr	r3, [pc, #432]	; (8015414 <LoRaMacMlmeRequest+0x32c>)
 8015264:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8015268:	2300      	movs	r3, #0
 801526a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                queueElement.ReadyToHandle = true;
 801526e:	2301      	movs	r3, #1
 8015270:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                OnMacProcessNotify( );
 8015274:	f7fe fdb2 	bl	8013ddc <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8015278:	4a65      	ldr	r2, [pc, #404]	; (8015410 <LoRaMacMlmeRequest+0x328>)
 801527a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801527e:	f043 0310 	orr.w	r3, r3, #16
 8015282:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
                status = LORAMAC_STATUS_OK;
 8015286:	2300      	movs	r3, #0
 8015288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 801528c:	e08f      	b.n	80153ae <LoRaMacMlmeRequest+0x2c6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801528e:	2300      	movs	r3, #0
 8015290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8015294:	f107 031c 	add.w	r3, r7, #28
 8015298:	2200      	movs	r2, #0
 801529a:	4619      	mov	r1, r3
 801529c:	2002      	movs	r0, #2
 801529e:	f000 fd21 	bl	8015ce4 <LoRaMacCommandsAddCmd>
 80152a2:	4603      	mov	r3, r0
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	f000 8084 	beq.w	80153b2 <LoRaMacMlmeRequest+0x2ca>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80152aa:	2313      	movs	r3, #19
 80152ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 80152b0:	e07f      	b.n	80153b2 <LoRaMacMlmeRequest+0x2ca>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	8898      	ldrh	r0, [r3, #4]
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	6899      	ldr	r1, [r3, #8]
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80152c0:	b2db      	uxtb	r3, r3
 80152c2:	461a      	mov	r2, r3
 80152c4:	f7fe fbba 	bl	8013a3c <SetTxContinuousWave>
 80152c8:	4603      	mov	r3, r0
 80152ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80152ce:	e077      	b.n	80153c0 <LoRaMacMlmeRequest+0x2d8>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80152d0:	2300      	movs	r3, #0
 80152d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 80152d6:	f107 0308 	add.w	r3, r7, #8
 80152da:	4619      	mov	r1, r3
 80152dc:	200d      	movs	r0, #13
 80152de:	f000 fd81 	bl	8015de4 <LoRaMacCommandsGetCmd>
 80152e2:	4603      	mov	r3, r0
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d103      	bne.n	80152f0 <LoRaMacMlmeRequest+0x208>
            {
                status = LORAMAC_STATUS_OK;
 80152e8:	2300      	movs	r3, #0
 80152ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 80152ee:	e062      	b.n	80153b6 <LoRaMacMlmeRequest+0x2ce>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80152f0:	f107 031c 	add.w	r3, r7, #28
 80152f4:	2200      	movs	r2, #0
 80152f6:	4619      	mov	r1, r3
 80152f8:	200d      	movs	r0, #13
 80152fa:	f000 fcf3 	bl	8015ce4 <LoRaMacCommandsAddCmd>
 80152fe:	4603      	mov	r3, r0
 8015300:	2b00      	cmp	r3, #0
 8015302:	d058      	beq.n	80153b6 <LoRaMacMlmeRequest+0x2ce>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015304:	2313      	movs	r3, #19
 8015306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 801530a:	e054      	b.n	80153b6 <LoRaMacMlmeRequest+0x2ce>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 801530c:	4b41      	ldr	r3, [pc, #260]	; (8015414 <LoRaMacMlmeRequest+0x32c>)
 801530e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8015312:	2b00      	cmp	r3, #0
 8015314:	d151      	bne.n	80153ba <LoRaMacMlmeRequest+0x2d2>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	791b      	ldrb	r3, [r3, #4]
 801531a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	791b      	ldrb	r3, [r3, #4]
 8015322:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8015326:	b2db      	uxtb	r3, r3
 8015328:	4618      	mov	r0, r3
 801532a:	f000 fb25 	bl	8015978 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 801532e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015332:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 8015334:	2300      	movs	r3, #0
 8015336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 801533a:	f107 031c 	add.w	r3, r7, #28
 801533e:	2201      	movs	r2, #1
 8015340:	4619      	mov	r1, r3
 8015342:	2010      	movs	r0, #16
 8015344:	f000 fcce 	bl	8015ce4 <LoRaMacCommandsAddCmd>
 8015348:	4603      	mov	r3, r0
 801534a:	2b00      	cmp	r3, #0
 801534c:	d035      	beq.n	80153ba <LoRaMacMlmeRequest+0x2d2>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801534e:	2313      	movs	r3, #19
 8015350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
            break;
 8015354:	e031      	b.n	80153ba <LoRaMacMlmeRequest+0x2d2>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8015356:	2300      	movs	r3, #0
 8015358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801535c:	f107 031c 	add.w	r3, r7, #28
 8015360:	2200      	movs	r2, #0
 8015362:	4619      	mov	r1, r3
 8015364:	2012      	movs	r0, #18
 8015366:	f000 fcbd 	bl	8015ce4 <LoRaMacCommandsAddCmd>
 801536a:	4603      	mov	r3, r0
 801536c:	2b00      	cmp	r3, #0
 801536e:	d026      	beq.n	80153be <LoRaMacMlmeRequest+0x2d6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015370:	2313      	movs	r3, #19
 8015372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8015376:	e022      	b.n	80153be <LoRaMacMlmeRequest+0x2d6>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8015378:	2301      	movs	r3, #1
 801537a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 801537e:	f000 fab1 	bl	80158e4 <LoRaMacClassBIsAcquisitionInProgress>
 8015382:	4603      	mov	r3, r0
 8015384:	f083 0301 	eor.w	r3, r3, #1
 8015388:	b2db      	uxtb	r3, r3
 801538a:	2b00      	cmp	r3, #0
 801538c:	d009      	beq.n	80153a2 <LoRaMacMlmeRequest+0x2ba>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 801538e:	2000      	movs	r0, #0
 8015390:	f000 fa8a 	bl	80158a8 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8015394:	2000      	movs	r0, #0
 8015396:	f000 faac 	bl	80158f2 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 801539a:	2300      	movs	r3, #0
 801539c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 80153a0:	e00e      	b.n	80153c0 <LoRaMacMlmeRequest+0x2d8>
                status = LORAMAC_STATUS_BUSY;
 80153a2:	2301      	movs	r3, #1
 80153a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80153a8:	e00a      	b.n	80153c0 <LoRaMacMlmeRequest+0x2d8>
        }
        default:
            break;
 80153aa:	bf00      	nop
 80153ac:	e008      	b.n	80153c0 <LoRaMacMlmeRequest+0x2d8>
            break;
 80153ae:	bf00      	nop
 80153b0:	e006      	b.n	80153c0 <LoRaMacMlmeRequest+0x2d8>
            break;
 80153b2:	bf00      	nop
 80153b4:	e004      	b.n	80153c0 <LoRaMacMlmeRequest+0x2d8>
            break;
 80153b6:	bf00      	nop
 80153b8:	e002      	b.n	80153c0 <LoRaMacMlmeRequest+0x2d8>
            break;
 80153ba:	bf00      	nop
 80153bc:	e000      	b.n	80153c0 <LoRaMacMlmeRequest+0x2d8>
            break;
 80153be:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80153c0:	4b13      	ldr	r3, [pc, #76]	; (8015410 <LoRaMacMlmeRequest+0x328>)
 80153c2:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 80153ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d010      	beq.n	80153f4 <LoRaMacMlmeRequest+0x30c>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80153d2:	f001 f82b 	bl	801642c <LoRaMacConfirmQueueGetCnt>
 80153d6:	4603      	mov	r3, r0
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d110      	bne.n	80153fe <LoRaMacMlmeRequest+0x316>
        {
            MacCtx.NodeAckRequested = false;
 80153dc:	4b0c      	ldr	r3, [pc, #48]	; (8015410 <LoRaMacMlmeRequest+0x328>)
 80153de:	2200      	movs	r2, #0
 80153e0:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80153e4:	4a0a      	ldr	r2, [pc, #40]	; (8015410 <LoRaMacMlmeRequest+0x328>)
 80153e6:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80153ea:	f36f 0382 	bfc	r3, #2, #1
 80153ee:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 80153f2:	e004      	b.n	80153fe <LoRaMacMlmeRequest+0x316>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 80153f4:	f107 0320 	add.w	r3, r7, #32
 80153f8:	4618      	mov	r0, r3
 80153fa:	f000 fec3 	bl	8016184 <LoRaMacConfirmQueueAdd>
    }
    return status;
 80153fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8015402:	4618      	mov	r0, r3
 8015404:	3728      	adds	r7, #40	; 0x28
 8015406:	46bd      	mov	sp, r7
 8015408:	bd80      	pop	{r7, pc}
 801540a:	bf00      	nop
 801540c:	20000b28 	.word	0x20000b28
 8015410:	200006d4 	.word	0x200006d4
 8015414:	20000bf0 	.word	0x20000bf0

08015418 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8015418:	b5b0      	push	{r4, r5, r7, lr}
 801541a:	b092      	sub	sp, #72	; 0x48
 801541c:	af02      	add	r7, sp, #8
 801541e:	6078      	str	r0, [r7, #4]
 8015420:	460b      	mov	r3, r1
 8015422:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015424:	2302      	movs	r3, #2
 8015426:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 801542a:	2300      	movs	r3, #0
 801542c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    void* fBuffer = NULL;
 8015430:	2300      	movs	r3, #0
 8015432:	63bb      	str	r3, [r7, #56]	; 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8015434:	2300      	movs	r3, #0
 8015436:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool readyToSend = false;
 801543a:	2300      	movs	r3, #0
 801543c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    if( mcpsRequest == NULL )
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d101      	bne.n	801544a <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015446:	2303      	movs	r3, #3
 8015448:	e113      	b.n	8015672 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	2200      	movs	r2, #0
 801544e:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 8015450:	f7fc f9e2 	bl	8011818 <LoRaMacIsBusy>
 8015454:	4603      	mov	r3, r0
 8015456:	2b00      	cmp	r3, #0
 8015458:	d001      	beq.n	801545e <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 801545a:	2301      	movs	r3, #1
 801545c:	e109      	b.n	8015672 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	f107 040c 	add.w	r4, r7, #12
 8015464:	461d      	mov	r5, r3
 8015466:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015468:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801546a:	682b      	ldr	r3, [r5, #0]
 801546c:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 801546e:	2300      	movs	r3, #0
 8015470:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8015474:	2214      	movs	r2, #20
 8015476:	2100      	movs	r1, #0
 8015478:	4880      	ldr	r0, [pc, #512]	; (801567c <LoRaMacMcpsRequest+0x264>)
 801547a:	f006 f821 	bl	801b4c0 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801547e:	4b80      	ldr	r3, [pc, #512]	; (8015680 <LoRaMacMcpsRequest+0x268>)
 8015480:	2201      	movs	r2, #1
 8015482:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8015486:	4b7f      	ldr	r3, [pc, #508]	; (8015684 <LoRaMacMcpsRequest+0x26c>)
 8015488:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 801548c:	2b02      	cmp	r3, #2
 801548e:	d111      	bne.n	80154b4 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8015490:	4b7c      	ldr	r3, [pc, #496]	; (8015684 <LoRaMacMcpsRequest+0x26c>)
 8015492:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8015496:	2b02      	cmp	r3, #2
 8015498:	d10c      	bne.n	80154b4 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 801549a:	4b7a      	ldr	r3, [pc, #488]	; (8015684 <LoRaMacMcpsRequest+0x26c>)
 801549c:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 80154a0:	f083 0301 	eor.w	r3, r3, #1
 80154a4:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d004      	beq.n	80154b4 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 80154aa:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d101      	bne.n	80154b4 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 80154b0:	2301      	movs	r3, #1
 80154b2:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 80154b4:	7b3b      	ldrb	r3, [r7, #12]
 80154b6:	2b03      	cmp	r3, #3
 80154b8:	d030      	beq.n	801551c <LoRaMacMcpsRequest+0x104>
 80154ba:	2b03      	cmp	r3, #3
 80154bc:	dc3f      	bgt.n	801553e <LoRaMacMcpsRequest+0x126>
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d002      	beq.n	80154c8 <LoRaMacMcpsRequest+0xb0>
 80154c2:	2b01      	cmp	r3, #1
 80154c4:	d015      	beq.n	80154f2 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 80154c6:	e03a      	b.n	801553e <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 80154c8:	2301      	movs	r3, #1
 80154ca:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80154ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80154d2:	2202      	movs	r2, #2
 80154d4:	f362 1347 	bfi	r3, r2, #5, #3
 80154d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Unconfirmed.fPort;
 80154dc:	7c3b      	ldrb	r3, [r7, #16]
 80154de:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 80154e2:	697b      	ldr	r3, [r7, #20]
 80154e4:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 80154e6:	8b3b      	ldrh	r3, [r7, #24]
 80154e8:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 80154ea:	7ebb      	ldrb	r3, [r7, #26]
 80154ec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 80154f0:	e026      	b.n	8015540 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 80154f2:	2301      	movs	r3, #1
 80154f4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 80154f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80154fc:	2204      	movs	r2, #4
 80154fe:	f362 1347 	bfi	r3, r2, #5, #3
 8015502:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Confirmed.fPort;
 8015506:	7c3b      	ldrb	r3, [r7, #16]
 8015508:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 801550c:	697b      	ldr	r3, [r7, #20]
 801550e:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8015510:	8b3b      	ldrh	r3, [r7, #24]
 8015512:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Confirmed.Datarate;
 8015514:	7ebb      	ldrb	r3, [r7, #26]
 8015516:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 801551a:	e011      	b.n	8015540 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 801551c:	2301      	movs	r3, #1
 801551e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8015522:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015526:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 801552a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 801552e:	693b      	ldr	r3, [r7, #16]
 8015530:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8015532:	8abb      	ldrh	r3, [r7, #20]
 8015534:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Proprietary.Datarate;
 8015536:	7dbb      	ldrb	r3, [r7, #22]
 8015538:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 801553c:	e000      	b.n	8015540 <LoRaMacMcpsRequest+0x128>
            break;
 801553e:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015540:	2302      	movs	r3, #2
 8015542:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8015546:	4b4f      	ldr	r3, [pc, #316]	; (8015684 <LoRaMacMcpsRequest+0x26c>)
 8015548:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801554c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015550:	4b4c      	ldr	r3, [pc, #304]	; (8015684 <LoRaMacMcpsRequest+0x26c>)
 8015552:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015556:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801555a:	4611      	mov	r1, r2
 801555c:	4618      	mov	r0, r3
 801555e:	f002 f973 	bl	8017848 <RegionGetPhyParam>
 8015562:	4603      	mov	r3, r0
 8015564:	62bb      	str	r3, [r7, #40]	; 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8015566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015568:	b25b      	sxtb	r3, r3
 801556a:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 801556e:	4293      	cmp	r3, r2
 8015570:	bfb8      	it	lt
 8015572:	4613      	movlt	r3, r2
 8015574:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8015578:	4b42      	ldr	r3, [pc, #264]	; (8015684 <LoRaMacMcpsRequest+0x26c>)
 801557a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801557e:	4a41      	ldr	r2, [pc, #260]	; (8015684 <LoRaMacMcpsRequest+0x26c>)
 8015580:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 8015584:	4a3f      	ldr	r2, [pc, #252]	; (8015684 <LoRaMacMcpsRequest+0x26c>)
 8015586:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 801558a:	4618      	mov	r0, r3
 801558c:	f7fc fae0 	bl	8011b50 <CheckForMinimumAbpDatarate>
 8015590:	4603      	mov	r3, r0
 8015592:	2b00      	cmp	r3, #0
 8015594:	d002      	beq.n	801559c <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 8015596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015598:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if( readyToSend == true )
 801559c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d05f      	beq.n	8015664 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 80155a4:	4b37      	ldr	r3, [pc, #220]	; (8015684 <LoRaMacMcpsRequest+0x26c>)
 80155a6:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80155aa:	f083 0301 	eor.w	r3, r3, #1
 80155ae:	b2db      	uxtb	r3, r3
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d10e      	bne.n	80155d2 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 80155b4:	4b33      	ldr	r3, [pc, #204]	; (8015684 <LoRaMacMcpsRequest+0x26c>)
 80155b6:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80155ba:	4a32      	ldr	r2, [pc, #200]	; (8015684 <LoRaMacMcpsRequest+0x26c>)
 80155bc:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 80155c0:	4a30      	ldr	r2, [pc, #192]	; (8015684 <LoRaMacMcpsRequest+0x26c>)
 80155c2:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 80155c6:	4618      	mov	r0, r3
 80155c8:	f7fc fac2 	bl	8011b50 <CheckForMinimumAbpDatarate>
 80155cc:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d01c      	beq.n	801560c <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 80155d2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80155d6:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80155da:	4b2a      	ldr	r3, [pc, #168]	; (8015684 <LoRaMacMcpsRequest+0x26c>)
 80155dc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80155e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80155e4:	4b27      	ldr	r3, [pc, #156]	; (8015684 <LoRaMacMcpsRequest+0x26c>)
 80155e6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80155ea:	f107 0120 	add.w	r1, r7, #32
 80155ee:	2205      	movs	r2, #5
 80155f0:	4618      	mov	r0, r3
 80155f2:	f002 f977 	bl	80178e4 <RegionVerify>
 80155f6:	4603      	mov	r3, r0
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d005      	beq.n	8015608 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80155fc:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8015600:	4b20      	ldr	r3, [pc, #128]	; (8015684 <LoRaMacMcpsRequest+0x26c>)
 8015602:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8015606:	e001      	b.n	801560c <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8015608:	2303      	movs	r3, #3
 801560a:	e032      	b.n	8015672 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 801560c:	4b1d      	ldr	r3, [pc, #116]	; (8015684 <LoRaMacMcpsRequest+0x26c>)
 801560e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015612:	4a1b      	ldr	r2, [pc, #108]	; (8015680 <LoRaMacMcpsRequest+0x268>)
 8015614:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 8015618:	4611      	mov	r1, r2
 801561a:	4618      	mov	r0, r3
 801561c:	f7fc fb84 	bl	8011d28 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8015620:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015622:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8015626:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801562a:	78fb      	ldrb	r3, [r7, #3]
 801562c:	9300      	str	r3, [sp, #0]
 801562e:	4613      	mov	r3, r2
 8015630:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015632:	f7fd fb23 	bl	8012c7c <Send>
 8015636:	4603      	mov	r3, r0
 8015638:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if( status == LORAMAC_STATUS_OK )
 801563c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015640:	2b00      	cmp	r3, #0
 8015642:	d10b      	bne.n	801565c <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8015644:	7b3a      	ldrb	r2, [r7, #12]
 8015646:	4b0e      	ldr	r3, [pc, #56]	; (8015680 <LoRaMacMcpsRequest+0x268>)
 8015648:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 801564c:	4a0c      	ldr	r2, [pc, #48]	; (8015680 <LoRaMacMcpsRequest+0x268>)
 801564e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8015652:	f043 0301 	orr.w	r3, r3, #1
 8015656:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 801565a:	e003      	b.n	8015664 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 801565c:	4b08      	ldr	r3, [pc, #32]	; (8015680 <LoRaMacMcpsRequest+0x268>)
 801565e:	2200      	movs	r2, #0
 8015660:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8015664:	4b06      	ldr	r3, [pc, #24]	; (8015680 <LoRaMacMcpsRequest+0x268>)
 8015666:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	611a      	str	r2, [r3, #16]

    return status;
 801566e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015672:	4618      	mov	r0, r3
 8015674:	3740      	adds	r7, #64	; 0x40
 8015676:	46bd      	mov	sp, r7
 8015678:	bdb0      	pop	{r4, r5, r7, pc}
 801567a:	bf00      	nop
 801567c:	20000b14 	.word	0x20000b14
 8015680:	200006d4 	.word	0x200006d4
 8015684:	20000bf0 	.word	0x20000bf0

08015688 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8015688:	b580      	push	{r7, lr}
 801568a:	b084      	sub	sp, #16
 801568c:	af00      	add	r7, sp, #0
 801568e:	4603      	mov	r3, r0
 8015690:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8015692:	79fb      	ldrb	r3, [r7, #7]
 8015694:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8015696:	4b0d      	ldr	r3, [pc, #52]	; (80156cc <LoRaMacTestSetDutyCycleOn+0x44>)
 8015698:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801569c:	f107 010c 	add.w	r1, r7, #12
 80156a0:	220f      	movs	r2, #15
 80156a2:	4618      	mov	r0, r3
 80156a4:	f002 f91e 	bl	80178e4 <RegionVerify>
 80156a8:	4603      	mov	r3, r0
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d00a      	beq.n	80156c4 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 80156ae:	4a07      	ldr	r2, [pc, #28]	; (80156cc <LoRaMacTestSetDutyCycleOn+0x44>)
 80156b0:	79fb      	ldrb	r3, [r7, #7]
 80156b2:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80156b6:	4a06      	ldr	r2, [pc, #24]	; (80156d0 <LoRaMacTestSetDutyCycleOn+0x48>)
 80156b8:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80156bc:	f043 0320 	orr.w	r3, r3, #32
 80156c0:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 80156c4:	bf00      	nop
 80156c6:	3710      	adds	r7, #16
 80156c8:	46bd      	mov	sp, r7
 80156ca:	bd80      	pop	{r7, pc}
 80156cc:	20000bf0 	.word	0x20000bf0
 80156d0:	200006d4 	.word	0x200006d4

080156d4 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 80156d4:	b580      	push	{r7, lr}
 80156d6:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 80156d8:	f7fe fe94 	bl	8014404 <LoRaMacStop>
 80156dc:	4603      	mov	r3, r0
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d112      	bne.n	8015708 <LoRaMacDeInitialization+0x34>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 80156e2:	480b      	ldr	r0, [pc, #44]	; (8015710 <LoRaMacDeInitialization+0x3c>)
 80156e4:	f009 ff0e 	bl	801f504 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 80156e8:	480a      	ldr	r0, [pc, #40]	; (8015714 <LoRaMacDeInitialization+0x40>)
 80156ea:	f009 ff0b 	bl	801f504 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 80156ee:	480a      	ldr	r0, [pc, #40]	; (8015718 <LoRaMacDeInitialization+0x44>)
 80156f0:	f009 ff08 	bl	801f504 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 80156f4:	f000 f94a 	bl	801598c <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 80156f8:	2000      	movs	r0, #0
 80156fa:	f7fd fe1d 	bl	8013338 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 80156fe:	4b07      	ldr	r3, [pc, #28]	; (801571c <LoRaMacDeInitialization+0x48>)
 8015700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015702:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8015704:	2300      	movs	r3, #0
 8015706:	e000      	b.n	801570a <LoRaMacDeInitialization+0x36>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8015708:	2301      	movs	r3, #1
    }
}
 801570a:	4618      	mov	r0, r3
 801570c:	bd80      	pop	{r7, pc}
 801570e:	bf00      	nop
 8015710:	20000a3c 	.word	0x20000a3c
 8015714:	20000a54 	.word	0x20000a54
 8015718:	20000a6c 	.word	0x20000a6c
 801571c:	08020e2c 	.word	0x08020e2c

08015720 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8015720:	b580      	push	{r7, lr}
 8015722:	b08c      	sub	sp, #48	; 0x30
 8015724:	af00      	add	r7, sp, #0
 8015726:	60f8      	str	r0, [r7, #12]
 8015728:	60b9      	str	r1, [r7, #8]
 801572a:	607a      	str	r2, [r7, #4]
 801572c:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 801572e:	2300      	movs	r3, #0
 8015730:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	7b1b      	ldrb	r3, [r3, #12]
 8015738:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	7b5b      	ldrb	r3, [r3, #13]
 8015740:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	7b9b      	ldrb	r3, [r3, #14]
 8015748:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	685a      	ldr	r2, [r3, #4]
 8015750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015752:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	785b      	ldrb	r3, [r3, #1]
 8015758:	2b00      	cmp	r3, #0
 801575a:	f000 8088 	beq.w	801586e <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 801575e:	2302      	movs	r3, #2
 8015760:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	7bdb      	ldrb	r3, [r3, #15]
 8015768:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	7c1b      	ldrb	r3, [r3, #16]
 8015770:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015774:	4611      	mov	r1, r2
 8015776:	4618      	mov	r0, r3
 8015778:	f002 f866 	bl	8017848 <RegionGetPhyParam>
 801577c:	4603      	mov	r3, r0
 801577e:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8015780:	6a3b      	ldr	r3, [r7, #32]
 8015782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        datarate = MAX( datarate, minTxDatarate );
 8015786:	f997 202b 	ldrsb.w	r2, [r7, #43]	; 0x2b
 801578a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 801578e:	4293      	cmp	r3, r2
 8015790:	bfb8      	it	lt
 8015792:	4613      	movlt	r3, r2
 8015794:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	685b      	ldr	r3, [r3, #4]
 801579c:	68fa      	ldr	r2, [r7, #12]
 801579e:	8912      	ldrh	r2, [r2, #8]
 80157a0:	4293      	cmp	r3, r2
 80157a2:	d302      	bcc.n	80157aa <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 80157a4:	2301      	movs	r3, #1
 80157a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	685b      	ldr	r3, [r3, #4]
 80157ae:	68fa      	ldr	r2, [r7, #12]
 80157b0:	8912      	ldrh	r2, [r2, #8]
 80157b2:	4611      	mov	r1, r2
 80157b4:	68fa      	ldr	r2, [r7, #12]
 80157b6:	8952      	ldrh	r2, [r2, #10]
 80157b8:	440a      	add	r2, r1
 80157ba:	4293      	cmp	r3, r2
 80157bc:	d30f      	bcc.n	80157de <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 80157be:	230a      	movs	r3, #10
 80157c0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	7c1b      	ldrb	r3, [r3, #16]
 80157c8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80157cc:	4611      	mov	r1, r2
 80157ce:	4618      	mov	r0, r3
 80157d0:	f002 f83a 	bl	8017848 <RegionGetPhyParam>
 80157d4:	4603      	mov	r3, r0
 80157d6:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 80157d8:	6a3b      	ldr	r3, [r7, #32]
 80157da:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	685b      	ldr	r3, [r3, #4]
 80157e2:	68fa      	ldr	r2, [r7, #12]
 80157e4:	8912      	ldrh	r2, [r2, #8]
 80157e6:	4611      	mov	r1, r2
 80157e8:	68fa      	ldr	r2, [r7, #12]
 80157ea:	8952      	ldrh	r2, [r2, #10]
 80157ec:	0052      	lsls	r2, r2, #1
 80157ee:	440a      	add	r2, r1
 80157f0:	4293      	cmp	r3, r2
 80157f2:	d33c      	bcc.n	801586e <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	685b      	ldr	r3, [r3, #4]
 80157f8:	68fa      	ldr	r2, [r7, #12]
 80157fa:	8912      	ldrh	r2, [r2, #8]
 80157fc:	1a9b      	subs	r3, r3, r2
 80157fe:	68fa      	ldr	r2, [r7, #12]
 8015800:	8952      	ldrh	r2, [r2, #10]
 8015802:	fbb3 f1f2 	udiv	r1, r3, r2
 8015806:	fb01 f202 	mul.w	r2, r1, r2
 801580a:	1a9b      	subs	r3, r3, r2
 801580c:	2b00      	cmp	r3, #0
 801580e:	d12e      	bne.n	801586e <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8015810:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8015814:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8015818:	429a      	cmp	r2, r3
 801581a:	d110      	bne.n	801583e <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	781b      	ldrb	r3, [r3, #0]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d009      	beq.n	8015838 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8015824:	2302      	movs	r3, #2
 8015826:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	7c1b      	ldrb	r3, [r3, #16]
 801582c:	f107 0210 	add.w	r2, r7, #16
 8015830:	4611      	mov	r1, r2
 8015832:	4618      	mov	r0, r3
 8015834:	f002 f83f 	bl	80178b6 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8015838:	2301      	movs	r3, #1
 801583a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801583e:	2321      	movs	r3, #33	; 0x21
 8015840:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                getPhy.Datarate = datarate;
 8015844:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8015848:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	7bdb      	ldrb	r3, [r3, #15]
 8015850:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	7c1b      	ldrb	r3, [r3, #16]
 8015858:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801585c:	4611      	mov	r1, r2
 801585e:	4618      	mov	r0, r3
 8015860:	f001 fff2 	bl	8017848 <RegionGetPhyParam>
 8015864:	4603      	mov	r3, r0
 8015866:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 8015868:	6a3b      	ldr	r3, [r7, #32]
 801586a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }
        }
    }

    *drOut = datarate;
 801586e:	68bb      	ldr	r3, [r7, #8]
 8015870:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8015874:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801587c:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 801587e:	683b      	ldr	r3, [r7, #0]
 8015880:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015884:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8015886:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801588a:	4618      	mov	r0, r3
 801588c:	3730      	adds	r7, #48	; 0x30
 801588e:	46bd      	mov	sp, r7
 8015890:	bd80      	pop	{r7, pc}

08015892 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8015892:	b480      	push	{r7}
 8015894:	b085      	sub	sp, #20
 8015896:	af00      	add	r7, sp, #0
 8015898:	60f8      	str	r0, [r7, #12]
 801589a:	60b9      	str	r1, [r7, #8]
 801589c:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801589e:	bf00      	nop
 80158a0:	3714      	adds	r7, #20
 80158a2:	46bd      	mov	sp, r7
 80158a4:	bc80      	pop	{r7}
 80158a6:	4770      	bx	lr

080158a8 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80158a8:	b480      	push	{r7}
 80158aa:	b083      	sub	sp, #12
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	4603      	mov	r3, r0
 80158b0:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158b2:	bf00      	nop
 80158b4:	370c      	adds	r7, #12
 80158b6:	46bd      	mov	sp, r7
 80158b8:	bc80      	pop	{r7}
 80158ba:	4770      	bx	lr

080158bc <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 80158bc:	b480      	push	{r7}
 80158be:	b083      	sub	sp, #12
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	4603      	mov	r3, r0
 80158c4:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158c6:	bf00      	nop
 80158c8:	370c      	adds	r7, #12
 80158ca:	46bd      	mov	sp, r7
 80158cc:	bc80      	pop	{r7}
 80158ce:	4770      	bx	lr

080158d0 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 80158d0:	b480      	push	{r7}
 80158d2:	b083      	sub	sp, #12
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	4603      	mov	r3, r0
 80158d8:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158da:	bf00      	nop
 80158dc:	370c      	adds	r7, #12
 80158de:	46bd      	mov	sp, r7
 80158e0:	bc80      	pop	{r7}
 80158e2:	4770      	bx	lr

080158e4 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 80158e4:	b480      	push	{r7}
 80158e6:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 80158e8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158ea:	4618      	mov	r0, r3
 80158ec:	46bd      	mov	sp, r7
 80158ee:	bc80      	pop	{r7}
 80158f0:	4770      	bx	lr

080158f2 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 80158f2:	b480      	push	{r7}
 80158f4:	b083      	sub	sp, #12
 80158f6:	af00      	add	r7, sp, #0
 80158f8:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158fa:	bf00      	nop
 80158fc:	370c      	adds	r7, #12
 80158fe:	46bd      	mov	sp, r7
 8015900:	bc80      	pop	{r7}
 8015902:	4770      	bx	lr

08015904 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8015904:	b480      	push	{r7}
 8015906:	b083      	sub	sp, #12
 8015908:	af00      	add	r7, sp, #0
 801590a:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801590c:	bf00      	nop
 801590e:	370c      	adds	r7, #12
 8015910:	46bd      	mov	sp, r7
 8015912:	bc80      	pop	{r7}
 8015914:	4770      	bx	lr

08015916 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8015916:	b480      	push	{r7}
 8015918:	b083      	sub	sp, #12
 801591a:	af00      	add	r7, sp, #0
 801591c:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801591e:	bf00      	nop
 8015920:	370c      	adds	r7, #12
 8015922:	46bd      	mov	sp, r7
 8015924:	bc80      	pop	{r7}
 8015926:	4770      	bx	lr

08015928 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8015928:	b480      	push	{r7}
 801592a:	b083      	sub	sp, #12
 801592c:	af00      	add	r7, sp, #0
 801592e:	6078      	str	r0, [r7, #4]
 8015930:	460b      	mov	r3, r1
 8015932:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8015934:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015936:	4618      	mov	r0, r3
 8015938:	370c      	adds	r7, #12
 801593a:	46bd      	mov	sp, r7
 801593c:	bc80      	pop	{r7}
 801593e:	4770      	bx	lr

08015940 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8015940:	b480      	push	{r7}
 8015942:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015944:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015946:	4618      	mov	r0, r3
 8015948:	46bd      	mov	sp, r7
 801594a:	bc80      	pop	{r7}
 801594c:	4770      	bx	lr

0801594e <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 801594e:	b480      	push	{r7}
 8015950:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015952:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015954:	4618      	mov	r0, r3
 8015956:	46bd      	mov	sp, r7
 8015958:	bc80      	pop	{r7}
 801595a:	4770      	bx	lr

0801595c <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 801595c:	b480      	push	{r7}
 801595e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015960:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015962:	4618      	mov	r0, r3
 8015964:	46bd      	mov	sp, r7
 8015966:	bc80      	pop	{r7}
 8015968:	4770      	bx	lr

0801596a <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 801596a:	b480      	push	{r7}
 801596c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801596e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015970:	4618      	mov	r0, r3
 8015972:	46bd      	mov	sp, r7
 8015974:	bc80      	pop	{r7}
 8015976:	4770      	bx	lr

08015978 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8015978:	b480      	push	{r7}
 801597a:	b083      	sub	sp, #12
 801597c:	af00      	add	r7, sp, #0
 801597e:	4603      	mov	r3, r0
 8015980:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015982:	bf00      	nop
 8015984:	370c      	adds	r7, #12
 8015986:	46bd      	mov	sp, r7
 8015988:	bc80      	pop	{r7}
 801598a:	4770      	bx	lr

0801598c <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 801598c:	b480      	push	{r7}
 801598e:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015990:	bf00      	nop
 8015992:	46bd      	mov	sp, r7
 8015994:	bc80      	pop	{r7}
 8015996:	4770      	bx	lr

08015998 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8015998:	b480      	push	{r7}
 801599a:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801599c:	bf00      	nop
 801599e:	46bd      	mov	sp, r7
 80159a0:	bc80      	pop	{r7}
 80159a2:	4770      	bx	lr

080159a4 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 80159a4:	b480      	push	{r7}
 80159a6:	b083      	sub	sp, #12
 80159a8:	af00      	add	r7, sp, #0
 80159aa:	4603      	mov	r3, r0
 80159ac:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80159ae:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159b0:	4618      	mov	r0, r3
 80159b2:	370c      	adds	r7, #12
 80159b4:	46bd      	mov	sp, r7
 80159b6:	bc80      	pop	{r7}
 80159b8:	4770      	bx	lr

080159ba <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80159ba:	b480      	push	{r7}
 80159bc:	b083      	sub	sp, #12
 80159be:	af00      	add	r7, sp, #0
 80159c0:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80159c2:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159c4:	4618      	mov	r0, r3
 80159c6:	370c      	adds	r7, #12
 80159c8:	46bd      	mov	sp, r7
 80159ca:	bc80      	pop	{r7}
 80159cc:	4770      	bx	lr

080159ce <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 80159ce:	b480      	push	{r7}
 80159d0:	b083      	sub	sp, #12
 80159d2:	af00      	add	r7, sp, #0
 80159d4:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80159d6:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159d8:	4618      	mov	r0, r3
 80159da:	370c      	adds	r7, #12
 80159dc:	46bd      	mov	sp, r7
 80159de:	bc80      	pop	{r7}
 80159e0:	4770      	bx	lr

080159e2 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 80159e2:	b480      	push	{r7}
 80159e4:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159e6:	bf00      	nop
 80159e8:	46bd      	mov	sp, r7
 80159ea:	bc80      	pop	{r7}
 80159ec:	4770      	bx	lr

080159ee <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 80159ee:	b480      	push	{r7}
 80159f0:	b083      	sub	sp, #12
 80159f2:	af00      	add	r7, sp, #0
 80159f4:	4603      	mov	r3, r0
 80159f6:	6039      	str	r1, [r7, #0]
 80159f8:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 80159fa:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159fc:	4618      	mov	r0, r3
 80159fe:	370c      	adds	r7, #12
 8015a00:	46bd      	mov	sp, r7
 8015a02:	bc80      	pop	{r7}
 8015a04:	4770      	bx	lr

08015a06 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8015a06:	b480      	push	{r7}
 8015a08:	b083      	sub	sp, #12
 8015a0a:	af00      	add	r7, sp, #0
 8015a0c:	4603      	mov	r3, r0
 8015a0e:	603a      	str	r2, [r7, #0]
 8015a10:	80fb      	strh	r3, [r7, #6]
 8015a12:	460b      	mov	r3, r1
 8015a14:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a16:	bf00      	nop
 8015a18:	370c      	adds	r7, #12
 8015a1a:	46bd      	mov	sp, r7
 8015a1c:	bc80      	pop	{r7}
 8015a1e:	4770      	bx	lr

08015a20 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8015a20:	b480      	push	{r7}
 8015a22:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a24:	bf00      	nop
 8015a26:	46bd      	mov	sp, r7
 8015a28:	bc80      	pop	{r7}
 8015a2a:	4770      	bx	lr

08015a2c <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8015a2c:	b480      	push	{r7}
 8015a2e:	b083      	sub	sp, #12
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8015a34:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a36:	4618      	mov	r0, r3
 8015a38:	370c      	adds	r7, #12
 8015a3a:	46bd      	mov	sp, r7
 8015a3c:	bc80      	pop	{r7}
 8015a3e:	4770      	bx	lr

08015a40 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8015a40:	b480      	push	{r7}
 8015a42:	b083      	sub	sp, #12
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8015a48:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	370c      	adds	r7, #12
 8015a4e:	46bd      	mov	sp, r7
 8015a50:	bc80      	pop	{r7}
 8015a52:	4770      	bx	lr

08015a54 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8015a54:	b480      	push	{r7}
 8015a56:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a58:	bf00      	nop
 8015a5a:	46bd      	mov	sp, r7
 8015a5c:	bc80      	pop	{r7}
 8015a5e:	4770      	bx	lr

08015a60 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 8015a60:	b480      	push	{r7}
 8015a62:	b083      	sub	sp, #12
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	6078      	str	r0, [r7, #4]
 8015a68:	460b      	mov	r3, r1
 8015a6a:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a6c:	bf00      	nop
 8015a6e:	370c      	adds	r7, #12
 8015a70:	46bd      	mov	sp, r7
 8015a72:	bc80      	pop	{r7}
 8015a74:	4770      	bx	lr

08015a76 <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8015a76:	b480      	push	{r7}
 8015a78:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a7a:	bf00      	nop
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	bc80      	pop	{r7}
 8015a80:	4770      	bx	lr

08015a82 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8015a82:	b480      	push	{r7}
 8015a84:	b085      	sub	sp, #20
 8015a86:	af00      	add	r7, sp, #0
 8015a88:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8015a8e:	2300      	movs	r3, #0
 8015a90:	81fb      	strh	r3, [r7, #14]
 8015a92:	e00a      	b.n	8015aaa <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8015a94:	89fb      	ldrh	r3, [r7, #14]
 8015a96:	68ba      	ldr	r2, [r7, #8]
 8015a98:	4413      	add	r3, r2
 8015a9a:	781b      	ldrb	r3, [r3, #0]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d001      	beq.n	8015aa4 <IsSlotFree+0x22>
        {
            return false;
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	e006      	b.n	8015ab2 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8015aa4:	89fb      	ldrh	r3, [r7, #14]
 8015aa6:	3301      	adds	r3, #1
 8015aa8:	81fb      	strh	r3, [r7, #14]
 8015aaa:	89fb      	ldrh	r3, [r7, #14]
 8015aac:	2b0f      	cmp	r3, #15
 8015aae:	d9f1      	bls.n	8015a94 <IsSlotFree+0x12>
        }
    }
    return true;
 8015ab0:	2301      	movs	r3, #1
}
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	3714      	adds	r7, #20
 8015ab6:	46bd      	mov	sp, r7
 8015ab8:	bc80      	pop	{r7}
 8015aba:	4770      	bx	lr

08015abc <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8015abc:	b580      	push	{r7, lr}
 8015abe:	b082      	sub	sp, #8
 8015ac0:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8015ac2:	2300      	movs	r3, #0
 8015ac4:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8015ac6:	e007      	b.n	8015ad8 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8015ac8:	79fb      	ldrb	r3, [r7, #7]
 8015aca:	3301      	adds	r3, #1
 8015acc:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8015ace:	79fb      	ldrb	r3, [r7, #7]
 8015ad0:	2b20      	cmp	r3, #32
 8015ad2:	d101      	bne.n	8015ad8 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	e012      	b.n	8015afe <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8015ad8:	79fb      	ldrb	r3, [r7, #7]
 8015ada:	011b      	lsls	r3, r3, #4
 8015adc:	3308      	adds	r3, #8
 8015ade:	4a0a      	ldr	r2, [pc, #40]	; (8015b08 <MallocNewMacCommandSlot+0x4c>)
 8015ae0:	4413      	add	r3, r2
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	f7ff ffcd 	bl	8015a82 <IsSlotFree>
 8015ae8:	4603      	mov	r3, r0
 8015aea:	f083 0301 	eor.w	r3, r3, #1
 8015aee:	b2db      	uxtb	r3, r3
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d1e9      	bne.n	8015ac8 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8015af4:	79fb      	ldrb	r3, [r7, #7]
 8015af6:	011b      	lsls	r3, r3, #4
 8015af8:	3308      	adds	r3, #8
 8015afa:	4a03      	ldr	r2, [pc, #12]	; (8015b08 <MallocNewMacCommandSlot+0x4c>)
 8015afc:	4413      	add	r3, r2
}
 8015afe:	4618      	mov	r0, r3
 8015b00:	3708      	adds	r7, #8
 8015b02:	46bd      	mov	sp, r7
 8015b04:	bd80      	pop	{r7, pc}
 8015b06:	bf00      	nop
 8015b08:	20001830 	.word	0x20001830

08015b0c <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8015b0c:	b580      	push	{r7, lr}
 8015b0e:	b082      	sub	sp, #8
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d101      	bne.n	8015b1e <FreeMacCommandSlot+0x12>
    {
        return false;
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	e005      	b.n	8015b2a <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8015b1e:	2210      	movs	r2, #16
 8015b20:	2100      	movs	r1, #0
 8015b22:	6878      	ldr	r0, [r7, #4]
 8015b24:	f005 fccc 	bl	801b4c0 <memset1>

    return true;
 8015b28:	2301      	movs	r3, #1
}
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	3708      	adds	r7, #8
 8015b2e:	46bd      	mov	sp, r7
 8015b30:	bd80      	pop	{r7, pc}

08015b32 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8015b32:	b480      	push	{r7}
 8015b34:	b083      	sub	sp, #12
 8015b36:	af00      	add	r7, sp, #0
 8015b38:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d101      	bne.n	8015b44 <LinkedListInit+0x12>
    {
        return false;
 8015b40:	2300      	movs	r3, #0
 8015b42:	e006      	b.n	8015b52 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	2200      	movs	r2, #0
 8015b48:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	2200      	movs	r2, #0
 8015b4e:	605a      	str	r2, [r3, #4]

    return true;
 8015b50:	2301      	movs	r3, #1
}
 8015b52:	4618      	mov	r0, r3
 8015b54:	370c      	adds	r7, #12
 8015b56:	46bd      	mov	sp, r7
 8015b58:	bc80      	pop	{r7}
 8015b5a:	4770      	bx	lr

08015b5c <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8015b5c:	b480      	push	{r7}
 8015b5e:	b083      	sub	sp, #12
 8015b60:	af00      	add	r7, sp, #0
 8015b62:	6078      	str	r0, [r7, #4]
 8015b64:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d002      	beq.n	8015b72 <LinkedListAdd+0x16>
 8015b6c:	683b      	ldr	r3, [r7, #0]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d101      	bne.n	8015b76 <LinkedListAdd+0x1a>
    {
        return false;
 8015b72:	2300      	movs	r3, #0
 8015b74:	e015      	b.n	8015ba2 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d102      	bne.n	8015b84 <LinkedListAdd+0x28>
    {
        list->First = element;
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	683a      	ldr	r2, [r7, #0]
 8015b82:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	685b      	ldr	r3, [r3, #4]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d003      	beq.n	8015b94 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	685b      	ldr	r3, [r3, #4]
 8015b90:	683a      	ldr	r2, [r7, #0]
 8015b92:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8015b94:	683b      	ldr	r3, [r7, #0]
 8015b96:	2200      	movs	r2, #0
 8015b98:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	683a      	ldr	r2, [r7, #0]
 8015b9e:	605a      	str	r2, [r3, #4]

    return true;
 8015ba0:	2301      	movs	r3, #1
}
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	370c      	adds	r7, #12
 8015ba6:	46bd      	mov	sp, r7
 8015ba8:	bc80      	pop	{r7}
 8015baa:	4770      	bx	lr

08015bac <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8015bac:	b480      	push	{r7}
 8015bae:	b085      	sub	sp, #20
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	6078      	str	r0, [r7, #4]
 8015bb4:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d002      	beq.n	8015bc2 <LinkedListGetPrevious+0x16>
 8015bbc:	683b      	ldr	r3, [r7, #0]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d101      	bne.n	8015bc6 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	e016      	b.n	8015bf4 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8015bcc:	683a      	ldr	r2, [r7, #0]
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	429a      	cmp	r2, r3
 8015bd2:	d00c      	beq.n	8015bee <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015bd4:	e002      	b.n	8015bdc <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d007      	beq.n	8015bf2 <LinkedListGetPrevious+0x46>
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	683a      	ldr	r2, [r7, #0]
 8015be8:	429a      	cmp	r2, r3
 8015bea:	d1f4      	bne.n	8015bd6 <LinkedListGetPrevious+0x2a>
 8015bec:	e001      	b.n	8015bf2 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8015bee:	2300      	movs	r3, #0
 8015bf0:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8015bf2:	68fb      	ldr	r3, [r7, #12]
}
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	3714      	adds	r7, #20
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	bc80      	pop	{r7}
 8015bfc:	4770      	bx	lr

08015bfe <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8015bfe:	b580      	push	{r7, lr}
 8015c00:	b084      	sub	sp, #16
 8015c02:	af00      	add	r7, sp, #0
 8015c04:	6078      	str	r0, [r7, #4]
 8015c06:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d002      	beq.n	8015c14 <LinkedListRemove+0x16>
 8015c0e:	683b      	ldr	r3, [r7, #0]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d101      	bne.n	8015c18 <LinkedListRemove+0x1a>
    {
        return false;
 8015c14:	2300      	movs	r3, #0
 8015c16:	e020      	b.n	8015c5a <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8015c18:	6839      	ldr	r1, [r7, #0]
 8015c1a:	6878      	ldr	r0, [r7, #4]
 8015c1c:	f7ff ffc6 	bl	8015bac <LinkedListGetPrevious>
 8015c20:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	683a      	ldr	r2, [r7, #0]
 8015c28:	429a      	cmp	r2, r3
 8015c2a:	d103      	bne.n	8015c34 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8015c2c:	683b      	ldr	r3, [r7, #0]
 8015c2e:	681a      	ldr	r2, [r3, #0]
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	685b      	ldr	r3, [r3, #4]
 8015c38:	683a      	ldr	r2, [r7, #0]
 8015c3a:	429a      	cmp	r2, r3
 8015c3c:	d102      	bne.n	8015c44 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	68fa      	ldr	r2, [r7, #12]
 8015c42:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d003      	beq.n	8015c52 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8015c4a:	683b      	ldr	r3, [r7, #0]
 8015c4c:	681a      	ldr	r2, [r3, #0]
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8015c52:	683b      	ldr	r3, [r7, #0]
 8015c54:	2200      	movs	r2, #0
 8015c56:	601a      	str	r2, [r3, #0]

    return true;
 8015c58:	2301      	movs	r3, #1
}
 8015c5a:	4618      	mov	r0, r3
 8015c5c:	3710      	adds	r7, #16
 8015c5e:	46bd      	mov	sp, r7
 8015c60:	bd80      	pop	{r7, pc}
	...

08015c64 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8015c64:	b480      	push	{r7}
 8015c66:	b083      	sub	sp, #12
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8015c6e:	79fb      	ldrb	r3, [r7, #7]
 8015c70:	2b11      	cmp	r3, #17
 8015c72:	bf8c      	ite	hi
 8015c74:	2201      	movhi	r2, #1
 8015c76:	2200      	movls	r2, #0
 8015c78:	b2d2      	uxtb	r2, r2
 8015c7a:	2a00      	cmp	r2, #0
 8015c7c:	d10d      	bne.n	8015c9a <IsSticky+0x36>
 8015c7e:	4a0a      	ldr	r2, [pc, #40]	; (8015ca8 <IsSticky+0x44>)
 8015c80:	fa22 f303 	lsr.w	r3, r2, r3
 8015c84:	f003 0301 	and.w	r3, r3, #1
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	bf14      	ite	ne
 8015c8c:	2301      	movne	r3, #1
 8015c8e:	2300      	moveq	r3, #0
 8015c90:	b2db      	uxtb	r3, r3
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d001      	beq.n	8015c9a <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8015c96:	2301      	movs	r3, #1
 8015c98:	e000      	b.n	8015c9c <IsSticky+0x38>
        default:
            return false;
 8015c9a:	2300      	movs	r3, #0
    }
}
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	370c      	adds	r7, #12
 8015ca0:	46bd      	mov	sp, r7
 8015ca2:	bc80      	pop	{r7}
 8015ca4:	4770      	bx	lr
 8015ca6:	bf00      	nop
 8015ca8:	00020720 	.word	0x00020720

08015cac <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8015cac:	b480      	push	{r7}
 8015cae:	b083      	sub	sp, #12
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	4603      	mov	r3, r0
 8015cb4:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8015cb6:	2300      	movs	r3, #0
    }
}
 8015cb8:	4618      	mov	r0, r3
 8015cba:	370c      	adds	r7, #12
 8015cbc:	46bd      	mov	sp, r7
 8015cbe:	bc80      	pop	{r7}
 8015cc0:	4770      	bx	lr
	...

08015cc4 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8015cc8:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8015ccc:	2100      	movs	r1, #0
 8015cce:	4804      	ldr	r0, [pc, #16]	; (8015ce0 <LoRaMacCommandsInit+0x1c>)
 8015cd0:	f005 fbf6 	bl	801b4c0 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8015cd4:	4802      	ldr	r0, [pc, #8]	; (8015ce0 <LoRaMacCommandsInit+0x1c>)
 8015cd6:	f7ff ff2c 	bl	8015b32 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8015cda:	2300      	movs	r3, #0
}
 8015cdc:	4618      	mov	r0, r3
 8015cde:	bd80      	pop	{r7, pc}
 8015ce0:	20001830 	.word	0x20001830

08015ce4 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b086      	sub	sp, #24
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	4603      	mov	r3, r0
 8015cec:	60b9      	str	r1, [r7, #8]
 8015cee:	607a      	str	r2, [r7, #4]
 8015cf0:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8015cf2:	68bb      	ldr	r3, [r7, #8]
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d101      	bne.n	8015cfc <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015cf8:	2301      	movs	r3, #1
 8015cfa:	e03b      	b.n	8015d74 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8015cfc:	f7ff fede 	bl	8015abc <MallocNewMacCommandSlot>
 8015d00:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8015d02:	697b      	ldr	r3, [r7, #20]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d101      	bne.n	8015d0c <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8015d08:	2302      	movs	r3, #2
 8015d0a:	e033      	b.n	8015d74 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8015d0c:	6979      	ldr	r1, [r7, #20]
 8015d0e:	481b      	ldr	r0, [pc, #108]	; (8015d7c <LoRaMacCommandsAddCmd+0x98>)
 8015d10:	f7ff ff24 	bl	8015b5c <LinkedListAdd>
 8015d14:	4603      	mov	r3, r0
 8015d16:	f083 0301 	eor.w	r3, r3, #1
 8015d1a:	b2db      	uxtb	r3, r3
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d001      	beq.n	8015d24 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015d20:	2305      	movs	r3, #5
 8015d22:	e027      	b.n	8015d74 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8015d24:	697b      	ldr	r3, [r7, #20]
 8015d26:	7bfa      	ldrb	r2, [r7, #15]
 8015d28:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8015d2a:	697b      	ldr	r3, [r7, #20]
 8015d2c:	687a      	ldr	r2, [r7, #4]
 8015d2e:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8015d30:	697b      	ldr	r3, [r7, #20]
 8015d32:	3305      	adds	r3, #5
 8015d34:	687a      	ldr	r2, [r7, #4]
 8015d36:	b292      	uxth	r2, r2
 8015d38:	68b9      	ldr	r1, [r7, #8]
 8015d3a:	4618      	mov	r0, r3
 8015d3c:	f005 fb85 	bl	801b44a <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8015d40:	7bfb      	ldrb	r3, [r7, #15]
 8015d42:	4618      	mov	r0, r3
 8015d44:	f7ff ff8e 	bl	8015c64 <IsSticky>
 8015d48:	4603      	mov	r3, r0
 8015d4a:	461a      	mov	r2, r3
 8015d4c:	697b      	ldr	r3, [r7, #20]
 8015d4e:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8015d50:	7bfb      	ldrb	r3, [r7, #15]
 8015d52:	4618      	mov	r0, r3
 8015d54:	f7ff ffaa 	bl	8015cac <IsConfirmationRequired>
 8015d58:	4603      	mov	r3, r0
 8015d5a:	461a      	mov	r2, r3
 8015d5c:	697b      	ldr	r3, [r7, #20]
 8015d5e:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8015d60:	4b06      	ldr	r3, [pc, #24]	; (8015d7c <LoRaMacCommandsAddCmd+0x98>)
 8015d62:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	4413      	add	r3, r2
 8015d6a:	3301      	adds	r3, #1
 8015d6c:	4a03      	ldr	r2, [pc, #12]	; (8015d7c <LoRaMacCommandsAddCmd+0x98>)
 8015d6e:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 8015d72:	2300      	movs	r3, #0
}
 8015d74:	4618      	mov	r0, r3
 8015d76:	3718      	adds	r7, #24
 8015d78:	46bd      	mov	sp, r7
 8015d7a:	bd80      	pop	{r7, pc}
 8015d7c:	20001830 	.word	0x20001830

08015d80 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8015d80:	b580      	push	{r7, lr}
 8015d82:	b082      	sub	sp, #8
 8015d84:	af00      	add	r7, sp, #0
 8015d86:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d101      	bne.n	8015d92 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015d8e:	2301      	movs	r3, #1
 8015d90:	e021      	b.n	8015dd6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8015d92:	6879      	ldr	r1, [r7, #4]
 8015d94:	4812      	ldr	r0, [pc, #72]	; (8015de0 <LoRaMacCommandsRemoveCmd+0x60>)
 8015d96:	f7ff ff32 	bl	8015bfe <LinkedListRemove>
 8015d9a:	4603      	mov	r3, r0
 8015d9c:	f083 0301 	eor.w	r3, r3, #1
 8015da0:	b2db      	uxtb	r3, r3
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d001      	beq.n	8015daa <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8015da6:	2303      	movs	r3, #3
 8015da8:	e015      	b.n	8015dd6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8015daa:	4b0d      	ldr	r3, [pc, #52]	; (8015de0 <LoRaMacCommandsRemoveCmd+0x60>)
 8015dac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	689b      	ldr	r3, [r3, #8]
 8015db4:	1ad3      	subs	r3, r2, r3
 8015db6:	3b01      	subs	r3, #1
 8015db8:	4a09      	ldr	r2, [pc, #36]	; (8015de0 <LoRaMacCommandsRemoveCmd+0x60>)
 8015dba:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8015dbe:	6878      	ldr	r0, [r7, #4]
 8015dc0:	f7ff fea4 	bl	8015b0c <FreeMacCommandSlot>
 8015dc4:	4603      	mov	r3, r0
 8015dc6:	f083 0301 	eor.w	r3, r3, #1
 8015dca:	b2db      	uxtb	r3, r3
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d001      	beq.n	8015dd4 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015dd0:	2305      	movs	r3, #5
 8015dd2:	e000      	b.n	8015dd6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015dd4:	2300      	movs	r3, #0
}
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	3708      	adds	r7, #8
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	bd80      	pop	{r7, pc}
 8015dde:	bf00      	nop
 8015de0:	20001830 	.word	0x20001830

08015de4 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8015de4:	b480      	push	{r7}
 8015de6:	b085      	sub	sp, #20
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	4603      	mov	r3, r0
 8015dec:	6039      	str	r1, [r7, #0]
 8015dee:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015df0:	4b0e      	ldr	r3, [pc, #56]	; (8015e2c <LoRaMacCommandsGetCmd+0x48>)
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8015df6:	e002      	b.n	8015dfe <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	681b      	ldr	r3, [r3, #0]
 8015dfc:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d004      	beq.n	8015e0e <LoRaMacCommandsGetCmd+0x2a>
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	791b      	ldrb	r3, [r3, #4]
 8015e08:	79fa      	ldrb	r2, [r7, #7]
 8015e0a:	429a      	cmp	r2, r3
 8015e0c:	d1f4      	bne.n	8015df8 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8015e0e:	683b      	ldr	r3, [r7, #0]
 8015e10:	68fa      	ldr	r2, [r7, #12]
 8015e12:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d101      	bne.n	8015e1e <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8015e1a:	2303      	movs	r3, #3
 8015e1c:	e000      	b.n	8015e20 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8015e1e:	2300      	movs	r3, #0
}
 8015e20:	4618      	mov	r0, r3
 8015e22:	3714      	adds	r7, #20
 8015e24:	46bd      	mov	sp, r7
 8015e26:	bc80      	pop	{r7}
 8015e28:	4770      	bx	lr
 8015e2a:	bf00      	nop
 8015e2c:	20001830 	.word	0x20001830

08015e30 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8015e30:	b580      	push	{r7, lr}
 8015e32:	b082      	sub	sp, #8
 8015e34:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015e36:	4b0f      	ldr	r3, [pc, #60]	; (8015e74 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015e3c:	e012      	b.n	8015e64 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	7b1b      	ldrb	r3, [r3, #12]
 8015e42:	f083 0301 	eor.w	r3, r3, #1
 8015e46:	b2db      	uxtb	r3, r3
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d008      	beq.n	8015e5e <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8015e52:	6878      	ldr	r0, [r7, #4]
 8015e54:	f7ff ff94 	bl	8015d80 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8015e58:	683b      	ldr	r3, [r7, #0]
 8015e5a:	607b      	str	r3, [r7, #4]
 8015e5c:	e002      	b.n	8015e64 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d1e9      	bne.n	8015e3e <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015e6a:	2300      	movs	r3, #0
}
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	3708      	adds	r7, #8
 8015e70:	46bd      	mov	sp, r7
 8015e72:	bd80      	pop	{r7, pc}
 8015e74:	20001830 	.word	0x20001830

08015e78 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8015e78:	b580      	push	{r7, lr}
 8015e7a:	b082      	sub	sp, #8
 8015e7c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015e7e:	4b13      	ldr	r3, [pc, #76]	; (8015ecc <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015e84:	e01a      	b.n	8015ebc <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	791b      	ldrb	r3, [r3, #4]
 8015e90:	4618      	mov	r0, r3
 8015e92:	f7ff fee7 	bl	8015c64 <IsSticky>
 8015e96:	4603      	mov	r3, r0
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d00d      	beq.n	8015eb8 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	791b      	ldrb	r3, [r3, #4]
 8015ea0:	4618      	mov	r0, r3
 8015ea2:	f7ff ff03 	bl	8015cac <IsConfirmationRequired>
 8015ea6:	4603      	mov	r3, r0
 8015ea8:	f083 0301 	eor.w	r3, r3, #1
 8015eac:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d002      	beq.n	8015eb8 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8015eb2:	6878      	ldr	r0, [r7, #4]
 8015eb4:	f7ff ff64 	bl	8015d80 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8015eb8:	683b      	ldr	r3, [r7, #0]
 8015eba:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d1e1      	bne.n	8015e86 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015ec2:	2300      	movs	r3, #0
}
 8015ec4:	4618      	mov	r0, r3
 8015ec6:	3708      	adds	r7, #8
 8015ec8:	46bd      	mov	sp, r7
 8015eca:	bd80      	pop	{r7, pc}
 8015ecc:	20001830 	.word	0x20001830

08015ed0 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8015ed0:	b480      	push	{r7}
 8015ed2:	b083      	sub	sp, #12
 8015ed4:	af00      	add	r7, sp, #0
 8015ed6:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d101      	bne.n	8015ee2 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015ede:	2301      	movs	r3, #1
 8015ee0:	e005      	b.n	8015eee <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8015ee2:	4b05      	ldr	r3, [pc, #20]	; (8015ef8 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8015ee4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8015eec:	2300      	movs	r3, #0
}
 8015eee:	4618      	mov	r0, r3
 8015ef0:	370c      	adds	r7, #12
 8015ef2:	46bd      	mov	sp, r7
 8015ef4:	bc80      	pop	{r7}
 8015ef6:	4770      	bx	lr
 8015ef8:	20001830 	.word	0x20001830

08015efc <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8015efc:	b580      	push	{r7, lr}
 8015efe:	b088      	sub	sp, #32
 8015f00:	af00      	add	r7, sp, #0
 8015f02:	60f8      	str	r0, [r7, #12]
 8015f04:	60b9      	str	r1, [r7, #8]
 8015f06:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8015f08:	4b25      	ldr	r3, [pc, #148]	; (8015fa0 <LoRaMacCommandsSerializeCmds+0xa4>)
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8015f0e:	2300      	movs	r3, #0
 8015f10:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d002      	beq.n	8015f1e <LoRaMacCommandsSerializeCmds+0x22>
 8015f18:	68bb      	ldr	r3, [r7, #8]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d126      	bne.n	8015f6c <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015f1e:	2301      	movs	r3, #1
 8015f20:	e039      	b.n	8015f96 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8015f22:	7efb      	ldrb	r3, [r7, #27]
 8015f24:	68fa      	ldr	r2, [r7, #12]
 8015f26:	1ad2      	subs	r2, r2, r3
 8015f28:	69fb      	ldr	r3, [r7, #28]
 8015f2a:	689b      	ldr	r3, [r3, #8]
 8015f2c:	3301      	adds	r3, #1
 8015f2e:	429a      	cmp	r2, r3
 8015f30:	d320      	bcc.n	8015f74 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8015f32:	7efb      	ldrb	r3, [r7, #27]
 8015f34:	1c5a      	adds	r2, r3, #1
 8015f36:	76fa      	strb	r2, [r7, #27]
 8015f38:	461a      	mov	r2, r3
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	4413      	add	r3, r2
 8015f3e:	69fa      	ldr	r2, [r7, #28]
 8015f40:	7912      	ldrb	r2, [r2, #4]
 8015f42:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8015f44:	7efb      	ldrb	r3, [r7, #27]
 8015f46:	687a      	ldr	r2, [r7, #4]
 8015f48:	18d0      	adds	r0, r2, r3
 8015f4a:	69fb      	ldr	r3, [r7, #28]
 8015f4c:	1d59      	adds	r1, r3, #5
 8015f4e:	69fb      	ldr	r3, [r7, #28]
 8015f50:	689b      	ldr	r3, [r3, #8]
 8015f52:	b29b      	uxth	r3, r3
 8015f54:	461a      	mov	r2, r3
 8015f56:	f005 fa78 	bl	801b44a <memcpy1>
            itr += curElement->PayloadSize;
 8015f5a:	69fb      	ldr	r3, [r7, #28]
 8015f5c:	689b      	ldr	r3, [r3, #8]
 8015f5e:	b2da      	uxtb	r2, r3
 8015f60:	7efb      	ldrb	r3, [r7, #27]
 8015f62:	4413      	add	r3, r2
 8015f64:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8015f66:	69fb      	ldr	r3, [r7, #28]
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015f6c:	69fb      	ldr	r3, [r7, #28]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d1d7      	bne.n	8015f22 <LoRaMacCommandsSerializeCmds+0x26>
 8015f72:	e009      	b.n	8015f88 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8015f74:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8015f76:	e007      	b.n	8015f88 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8015f78:	69fb      	ldr	r3, [r7, #28]
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8015f7e:	69f8      	ldr	r0, [r7, #28]
 8015f80:	f7ff fefe 	bl	8015d80 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8015f84:	697b      	ldr	r3, [r7, #20]
 8015f86:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015f88:	69fb      	ldr	r3, [r7, #28]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d1f4      	bne.n	8015f78 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8015f8e:	68b8      	ldr	r0, [r7, #8]
 8015f90:	f7ff ff9e 	bl	8015ed0 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8015f94:	2300      	movs	r3, #0
}
 8015f96:	4618      	mov	r0, r3
 8015f98:	3720      	adds	r7, #32
 8015f9a:	46bd      	mov	sp, r7
 8015f9c:	bd80      	pop	{r7, pc}
 8015f9e:	bf00      	nop
 8015fa0:	20001830 	.word	0x20001830

08015fa4 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8015fa4:	b480      	push	{r7}
 8015fa6:	b085      	sub	sp, #20
 8015fa8:	af00      	add	r7, sp, #0
 8015faa:	4603      	mov	r3, r0
 8015fac:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8015fae:	2300      	movs	r3, #0
 8015fb0:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8015fb2:	79fb      	ldrb	r3, [r7, #7]
 8015fb4:	3b02      	subs	r3, #2
 8015fb6:	2b11      	cmp	r3, #17
 8015fb8:	d850      	bhi.n	801605c <LoRaMacCommandsGetCmdSize+0xb8>
 8015fba:	a201      	add	r2, pc, #4	; (adr r2, 8015fc0 <LoRaMacCommandsGetCmdSize+0x1c>)
 8015fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fc0:	08016009 	.word	0x08016009
 8015fc4:	0801600f 	.word	0x0801600f
 8015fc8:	08016015 	.word	0x08016015
 8015fcc:	0801601b 	.word	0x0801601b
 8015fd0:	08016021 	.word	0x08016021
 8015fd4:	08016027 	.word	0x08016027
 8015fd8:	0801602d 	.word	0x0801602d
 8015fdc:	08016033 	.word	0x08016033
 8015fe0:	08016039 	.word	0x08016039
 8015fe4:	0801605d 	.word	0x0801605d
 8015fe8:	0801605d 	.word	0x0801605d
 8015fec:	0801603f 	.word	0x0801603f
 8015ff0:	0801605d 	.word	0x0801605d
 8015ff4:	0801605d 	.word	0x0801605d
 8015ff8:	08016045 	.word	0x08016045
 8015ffc:	0801604b 	.word	0x0801604b
 8016000:	08016051 	.word	0x08016051
 8016004:	08016057 	.word	0x08016057
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8016008:	2303      	movs	r3, #3
 801600a:	73fb      	strb	r3, [r7, #15]
            break;
 801600c:	e027      	b.n	801605e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 801600e:	2305      	movs	r3, #5
 8016010:	73fb      	strb	r3, [r7, #15]
            break;
 8016012:	e024      	b.n	801605e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8016014:	2302      	movs	r3, #2
 8016016:	73fb      	strb	r3, [r7, #15]
            break;
 8016018:	e021      	b.n	801605e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 801601a:	2305      	movs	r3, #5
 801601c:	73fb      	strb	r3, [r7, #15]
            break;
 801601e:	e01e      	b.n	801605e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8016020:	2301      	movs	r3, #1
 8016022:	73fb      	strb	r3, [r7, #15]
            break;
 8016024:	e01b      	b.n	801605e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8016026:	2306      	movs	r3, #6
 8016028:	73fb      	strb	r3, [r7, #15]
            break;
 801602a:	e018      	b.n	801605e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 801602c:	2302      	movs	r3, #2
 801602e:	73fb      	strb	r3, [r7, #15]
            break;
 8016030:	e015      	b.n	801605e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8016032:	2302      	movs	r3, #2
 8016034:	73fb      	strb	r3, [r7, #15]
            break;
 8016036:	e012      	b.n	801605e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8016038:	2305      	movs	r3, #5
 801603a:	73fb      	strb	r3, [r7, #15]
            break;
 801603c:	e00f      	b.n	801605e <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 801603e:	2306      	movs	r3, #6
 8016040:	73fb      	strb	r3, [r7, #15]
            break;
 8016042:	e00c      	b.n	801605e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8016044:	2301      	movs	r3, #1
 8016046:	73fb      	strb	r3, [r7, #15]
            break;
 8016048:	e009      	b.n	801605e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 801604a:	2305      	movs	r3, #5
 801604c:	73fb      	strb	r3, [r7, #15]
            break;
 801604e:	e006      	b.n	801605e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8016050:	2304      	movs	r3, #4
 8016052:	73fb      	strb	r3, [r7, #15]
            break;
 8016054:	e003      	b.n	801605e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8016056:	2304      	movs	r3, #4
 8016058:	73fb      	strb	r3, [r7, #15]
            break;
 801605a:	e000      	b.n	801605e <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 801605c:	bf00      	nop
        }
    }
    return cidSize;
 801605e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016060:	4618      	mov	r0, r3
 8016062:	3714      	adds	r7, #20
 8016064:	46bd      	mov	sp, r7
 8016066:	bc80      	pop	{r7}
 8016068:	4770      	bx	lr
 801606a:	bf00      	nop

0801606c <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 801606c:	b480      	push	{r7}
 801606e:	b083      	sub	sp, #12
 8016070:	af00      	add	r7, sp, #0
 8016072:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	4a07      	ldr	r2, [pc, #28]	; (8016094 <IncreaseBufferPointer+0x28>)
 8016078:	4293      	cmp	r3, r2
 801607a:	d102      	bne.n	8016082 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801607c:	4b06      	ldr	r3, [pc, #24]	; (8016098 <IncreaseBufferPointer+0x2c>)
 801607e:	607b      	str	r3, [r7, #4]
 8016080:	e002      	b.n	8016088 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	3304      	adds	r3, #4
 8016086:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8016088:	687b      	ldr	r3, [r7, #4]
}
 801608a:	4618      	mov	r0, r3
 801608c:	370c      	adds	r7, #12
 801608e:	46bd      	mov	sp, r7
 8016090:	bc80      	pop	{r7}
 8016092:	4770      	bx	lr
 8016094:	20001a58 	.word	0x20001a58
 8016098:	20001a48 	.word	0x20001a48

0801609c <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 801609c:	b480      	push	{r7}
 801609e:	b083      	sub	sp, #12
 80160a0:	af00      	add	r7, sp, #0
 80160a2:	4603      	mov	r3, r0
 80160a4:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 80160a6:	79fb      	ldrb	r3, [r7, #7]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d101      	bne.n	80160b0 <IsListEmpty+0x14>
    {
        return true;
 80160ac:	2301      	movs	r3, #1
 80160ae:	e000      	b.n	80160b2 <IsListEmpty+0x16>
    }
    return false;
 80160b0:	2300      	movs	r3, #0
}
 80160b2:	4618      	mov	r0, r3
 80160b4:	370c      	adds	r7, #12
 80160b6:	46bd      	mov	sp, r7
 80160b8:	bc80      	pop	{r7}
 80160ba:	4770      	bx	lr

080160bc <IsListFull>:

static bool IsListFull( uint8_t count )
{
 80160bc:	b480      	push	{r7}
 80160be:	b083      	sub	sp, #12
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	4603      	mov	r3, r0
 80160c4:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80160c6:	79fb      	ldrb	r3, [r7, #7]
 80160c8:	2b04      	cmp	r3, #4
 80160ca:	d901      	bls.n	80160d0 <IsListFull+0x14>
    {
        return true;
 80160cc:	2301      	movs	r3, #1
 80160ce:	e000      	b.n	80160d2 <IsListFull+0x16>
    }
    return false;
 80160d0:	2300      	movs	r3, #0
}
 80160d2:	4618      	mov	r0, r3
 80160d4:	370c      	adds	r7, #12
 80160d6:	46bd      	mov	sp, r7
 80160d8:	bc80      	pop	{r7}
 80160da:	4770      	bx	lr

080160dc <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 80160dc:	b580      	push	{r7, lr}
 80160de:	b086      	sub	sp, #24
 80160e0:	af00      	add	r7, sp, #0
 80160e2:	4603      	mov	r3, r0
 80160e4:	60b9      	str	r1, [r7, #8]
 80160e6:	607a      	str	r2, [r7, #4]
 80160e8:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 80160ea:	68bb      	ldr	r3, [r7, #8]
 80160ec:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80160ee:	4b13      	ldr	r3, [pc, #76]	; (801613c <GetElement+0x60>)
 80160f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80160f4:	4618      	mov	r0, r3
 80160f6:	f7ff ffd1 	bl	801609c <IsListEmpty>
 80160fa:	4603      	mov	r3, r0
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d001      	beq.n	8016104 <GetElement+0x28>
    {
        return NULL;
 8016100:	2300      	movs	r3, #0
 8016102:	e017      	b.n	8016134 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8016104:	2300      	movs	r3, #0
 8016106:	74fb      	strb	r3, [r7, #19]
 8016108:	e00d      	b.n	8016126 <GetElement+0x4a>
    {
        if( element->Request == request )
 801610a:	697b      	ldr	r3, [r7, #20]
 801610c:	781b      	ldrb	r3, [r3, #0]
 801610e:	7bfa      	ldrb	r2, [r7, #15]
 8016110:	429a      	cmp	r2, r3
 8016112:	d101      	bne.n	8016118 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8016114:	697b      	ldr	r3, [r7, #20]
 8016116:	e00d      	b.n	8016134 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8016118:	6978      	ldr	r0, [r7, #20]
 801611a:	f7ff ffa7 	bl	801606c <IncreaseBufferPointer>
 801611e:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8016120:	7cfb      	ldrb	r3, [r7, #19]
 8016122:	3301      	adds	r3, #1
 8016124:	74fb      	strb	r3, [r7, #19]
 8016126:	4b05      	ldr	r3, [pc, #20]	; (801613c <GetElement+0x60>)
 8016128:	f893 3020 	ldrb.w	r3, [r3, #32]
 801612c:	7cfa      	ldrb	r2, [r7, #19]
 801612e:	429a      	cmp	r2, r3
 8016130:	d3eb      	bcc.n	801610a <GetElement+0x2e>
    }

    return NULL;
 8016132:	2300      	movs	r3, #0
}
 8016134:	4618      	mov	r0, r3
 8016136:	3718      	adds	r7, #24
 8016138:	46bd      	mov	sp, r7
 801613a:	bd80      	pop	{r7, pc}
 801613c:	20001a3c 	.word	0x20001a3c

08016140 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b082      	sub	sp, #8
 8016144:	af00      	add	r7, sp, #0
 8016146:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8016148:	4a0c      	ldr	r2, [pc, #48]	; (801617c <LoRaMacConfirmQueueInit+0x3c>)
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 801614e:	4b0b      	ldr	r3, [pc, #44]	; (801617c <LoRaMacConfirmQueueInit+0x3c>)
 8016150:	2200      	movs	r2, #0
 8016152:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8016156:	4b09      	ldr	r3, [pc, #36]	; (801617c <LoRaMacConfirmQueueInit+0x3c>)
 8016158:	4a09      	ldr	r2, [pc, #36]	; (8016180 <LoRaMacConfirmQueueInit+0x40>)
 801615a:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801615c:	4b07      	ldr	r3, [pc, #28]	; (801617c <LoRaMacConfirmQueueInit+0x3c>)
 801615e:	4a08      	ldr	r2, [pc, #32]	; (8016180 <LoRaMacConfirmQueueInit+0x40>)
 8016160:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8016162:	2214      	movs	r2, #20
 8016164:	21ff      	movs	r1, #255	; 0xff
 8016166:	4806      	ldr	r0, [pc, #24]	; (8016180 <LoRaMacConfirmQueueInit+0x40>)
 8016168:	f005 f9aa 	bl	801b4c0 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801616c:	4b03      	ldr	r3, [pc, #12]	; (801617c <LoRaMacConfirmQueueInit+0x3c>)
 801616e:	2201      	movs	r2, #1
 8016170:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8016174:	bf00      	nop
 8016176:	3708      	adds	r7, #8
 8016178:	46bd      	mov	sp, r7
 801617a:	bd80      	pop	{r7, pc}
 801617c:	20001a3c 	.word	0x20001a3c
 8016180:	20001a48 	.word	0x20001a48

08016184 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8016184:	b580      	push	{r7, lr}
 8016186:	b082      	sub	sp, #8
 8016188:	af00      	add	r7, sp, #0
 801618a:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801618c:	4b19      	ldr	r3, [pc, #100]	; (80161f4 <LoRaMacConfirmQueueAdd+0x70>)
 801618e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016192:	4618      	mov	r0, r3
 8016194:	f7ff ff92 	bl	80160bc <IsListFull>
 8016198:	4603      	mov	r3, r0
 801619a:	2b00      	cmp	r3, #0
 801619c:	d001      	beq.n	80161a2 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 801619e:	2300      	movs	r3, #0
 80161a0:	e024      	b.n	80161ec <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80161a2:	4b14      	ldr	r3, [pc, #80]	; (80161f4 <LoRaMacConfirmQueueAdd+0x70>)
 80161a4:	689b      	ldr	r3, [r3, #8]
 80161a6:	687a      	ldr	r2, [r7, #4]
 80161a8:	7812      	ldrb	r2, [r2, #0]
 80161aa:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80161ac:	4b11      	ldr	r3, [pc, #68]	; (80161f4 <LoRaMacConfirmQueueAdd+0x70>)
 80161ae:	689b      	ldr	r3, [r3, #8]
 80161b0:	687a      	ldr	r2, [r7, #4]
 80161b2:	7852      	ldrb	r2, [r2, #1]
 80161b4:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80161b6:	4b0f      	ldr	r3, [pc, #60]	; (80161f4 <LoRaMacConfirmQueueAdd+0x70>)
 80161b8:	689b      	ldr	r3, [r3, #8]
 80161ba:	687a      	ldr	r2, [r7, #4]
 80161bc:	78d2      	ldrb	r2, [r2, #3]
 80161be:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 80161c0:	4b0c      	ldr	r3, [pc, #48]	; (80161f4 <LoRaMacConfirmQueueAdd+0x70>)
 80161c2:	689b      	ldr	r3, [r3, #8]
 80161c4:	687a      	ldr	r2, [r7, #4]
 80161c6:	7892      	ldrb	r2, [r2, #2]
 80161c8:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80161ca:	4b0a      	ldr	r3, [pc, #40]	; (80161f4 <LoRaMacConfirmQueueAdd+0x70>)
 80161cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80161d0:	3301      	adds	r3, #1
 80161d2:	b2da      	uxtb	r2, r3
 80161d4:	4b07      	ldr	r3, [pc, #28]	; (80161f4 <LoRaMacConfirmQueueAdd+0x70>)
 80161d6:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80161da:	4b06      	ldr	r3, [pc, #24]	; (80161f4 <LoRaMacConfirmQueueAdd+0x70>)
 80161dc:	689b      	ldr	r3, [r3, #8]
 80161de:	4618      	mov	r0, r3
 80161e0:	f7ff ff44 	bl	801606c <IncreaseBufferPointer>
 80161e4:	4603      	mov	r3, r0
 80161e6:	4a03      	ldr	r2, [pc, #12]	; (80161f4 <LoRaMacConfirmQueueAdd+0x70>)
 80161e8:	6093      	str	r3, [r2, #8]

    return true;
 80161ea:	2301      	movs	r3, #1
}
 80161ec:	4618      	mov	r0, r3
 80161ee:	3708      	adds	r7, #8
 80161f0:	46bd      	mov	sp, r7
 80161f2:	bd80      	pop	{r7, pc}
 80161f4:	20001a3c 	.word	0x20001a3c

080161f8 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 80161f8:	b580      	push	{r7, lr}
 80161fa:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80161fc:	4b0e      	ldr	r3, [pc, #56]	; (8016238 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80161fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016202:	4618      	mov	r0, r3
 8016204:	f7ff ff4a 	bl	801609c <IsListEmpty>
 8016208:	4603      	mov	r3, r0
 801620a:	2b00      	cmp	r3, #0
 801620c:	d001      	beq.n	8016212 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 801620e:	2300      	movs	r3, #0
 8016210:	e010      	b.n	8016234 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8016212:	4b09      	ldr	r3, [pc, #36]	; (8016238 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016214:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016218:	3b01      	subs	r3, #1
 801621a:	b2da      	uxtb	r2, r3
 801621c:	4b06      	ldr	r3, [pc, #24]	; (8016238 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801621e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8016222:	4b05      	ldr	r3, [pc, #20]	; (8016238 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016224:	685b      	ldr	r3, [r3, #4]
 8016226:	4618      	mov	r0, r3
 8016228:	f7ff ff20 	bl	801606c <IncreaseBufferPointer>
 801622c:	4603      	mov	r3, r0
 801622e:	4a02      	ldr	r2, [pc, #8]	; (8016238 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016230:	6053      	str	r3, [r2, #4]

    return true;
 8016232:	2301      	movs	r3, #1
}
 8016234:	4618      	mov	r0, r3
 8016236:	bd80      	pop	{r7, pc}
 8016238:	20001a3c 	.word	0x20001a3c

0801623c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 801623c:	b580      	push	{r7, lr}
 801623e:	b084      	sub	sp, #16
 8016240:	af00      	add	r7, sp, #0
 8016242:	4603      	mov	r3, r0
 8016244:	460a      	mov	r2, r1
 8016246:	71fb      	strb	r3, [r7, #7]
 8016248:	4613      	mov	r3, r2
 801624a:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 801624c:	2300      	movs	r3, #0
 801624e:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8016250:	4b10      	ldr	r3, [pc, #64]	; (8016294 <LoRaMacConfirmQueueSetStatus+0x58>)
 8016252:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016256:	4618      	mov	r0, r3
 8016258:	f7ff ff20 	bl	801609c <IsListEmpty>
 801625c:	4603      	mov	r3, r0
 801625e:	f083 0301 	eor.w	r3, r3, #1
 8016262:	b2db      	uxtb	r3, r3
 8016264:	2b00      	cmp	r3, #0
 8016266:	d011      	beq.n	801628c <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8016268:	4b0a      	ldr	r3, [pc, #40]	; (8016294 <LoRaMacConfirmQueueSetStatus+0x58>)
 801626a:	6859      	ldr	r1, [r3, #4]
 801626c:	4b09      	ldr	r3, [pc, #36]	; (8016294 <LoRaMacConfirmQueueSetStatus+0x58>)
 801626e:	689a      	ldr	r2, [r3, #8]
 8016270:	79bb      	ldrb	r3, [r7, #6]
 8016272:	4618      	mov	r0, r3
 8016274:	f7ff ff32 	bl	80160dc <GetElement>
 8016278:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d005      	beq.n	801628c <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	79fa      	ldrb	r2, [r7, #7]
 8016284:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	2201      	movs	r2, #1
 801628a:	709a      	strb	r2, [r3, #2]
        }
    }
}
 801628c:	bf00      	nop
 801628e:	3710      	adds	r7, #16
 8016290:	46bd      	mov	sp, r7
 8016292:	bd80      	pop	{r7, pc}
 8016294:	20001a3c 	.word	0x20001a3c

08016298 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8016298:	b580      	push	{r7, lr}
 801629a:	b084      	sub	sp, #16
 801629c:	af00      	add	r7, sp, #0
 801629e:	4603      	mov	r3, r0
 80162a0:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 80162a2:	2300      	movs	r3, #0
 80162a4:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80162a6:	4b10      	ldr	r3, [pc, #64]	; (80162e8 <LoRaMacConfirmQueueGetStatus+0x50>)
 80162a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80162ac:	4618      	mov	r0, r3
 80162ae:	f7ff fef5 	bl	801609c <IsListEmpty>
 80162b2:	4603      	mov	r3, r0
 80162b4:	f083 0301 	eor.w	r3, r3, #1
 80162b8:	b2db      	uxtb	r3, r3
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d00e      	beq.n	80162dc <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80162be:	4b0a      	ldr	r3, [pc, #40]	; (80162e8 <LoRaMacConfirmQueueGetStatus+0x50>)
 80162c0:	6859      	ldr	r1, [r3, #4]
 80162c2:	4b09      	ldr	r3, [pc, #36]	; (80162e8 <LoRaMacConfirmQueueGetStatus+0x50>)
 80162c4:	689a      	ldr	r2, [r3, #8]
 80162c6:	79fb      	ldrb	r3, [r7, #7]
 80162c8:	4618      	mov	r0, r3
 80162ca:	f7ff ff07 	bl	80160dc <GetElement>
 80162ce:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d002      	beq.n	80162dc <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 80162d6:	68fb      	ldr	r3, [r7, #12]
 80162d8:	785b      	ldrb	r3, [r3, #1]
 80162da:	e000      	b.n	80162de <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80162dc:	2301      	movs	r3, #1
}
 80162de:	4618      	mov	r0, r3
 80162e0:	3710      	adds	r7, #16
 80162e2:	46bd      	mov	sp, r7
 80162e4:	bd80      	pop	{r7, pc}
 80162e6:	bf00      	nop
 80162e8:	20001a3c 	.word	0x20001a3c

080162ec <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 80162ec:	b580      	push	{r7, lr}
 80162ee:	b084      	sub	sp, #16
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	4603      	mov	r3, r0
 80162f4:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 80162f6:	4b16      	ldr	r3, [pc, #88]	; (8016350 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80162f8:	685b      	ldr	r3, [r3, #4]
 80162fa:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 80162fc:	4a14      	ldr	r2, [pc, #80]	; (8016350 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80162fe:	79fb      	ldrb	r3, [r7, #7]
 8016300:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8016304:	4b12      	ldr	r3, [pc, #72]	; (8016350 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016306:	f893 3020 	ldrb.w	r3, [r3, #32]
 801630a:	4618      	mov	r0, r3
 801630c:	f7ff fec6 	bl	801609c <IsListEmpty>
 8016310:	4603      	mov	r3, r0
 8016312:	f083 0301 	eor.w	r3, r3, #1
 8016316:	b2db      	uxtb	r3, r3
 8016318:	2b00      	cmp	r3, #0
 801631a:	d015      	beq.n	8016348 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	79fa      	ldrb	r2, [r7, #7]
 8016320:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	78db      	ldrb	r3, [r3, #3]
 8016326:	f083 0301 	eor.w	r3, r3, #1
 801632a:	b2db      	uxtb	r3, r3
 801632c:	2b00      	cmp	r3, #0
 801632e:	d002      	beq.n	8016336 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	2201      	movs	r2, #1
 8016334:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8016336:	68f8      	ldr	r0, [r7, #12]
 8016338:	f7ff fe98 	bl	801606c <IncreaseBufferPointer>
 801633c:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 801633e:	4b04      	ldr	r3, [pc, #16]	; (8016350 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016340:	689b      	ldr	r3, [r3, #8]
 8016342:	68fa      	ldr	r2, [r7, #12]
 8016344:	429a      	cmp	r2, r3
 8016346:	d1e9      	bne.n	801631c <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8016348:	bf00      	nop
 801634a:	3710      	adds	r7, #16
 801634c:	46bd      	mov	sp, r7
 801634e:	bd80      	pop	{r7, pc}
 8016350:	20001a3c 	.word	0x20001a3c

08016354 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8016354:	b580      	push	{r7, lr}
 8016356:	b082      	sub	sp, #8
 8016358:	af00      	add	r7, sp, #0
 801635a:	4603      	mov	r3, r0
 801635c:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 801635e:	4b09      	ldr	r3, [pc, #36]	; (8016384 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8016360:	6859      	ldr	r1, [r3, #4]
 8016362:	4b08      	ldr	r3, [pc, #32]	; (8016384 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8016364:	689a      	ldr	r2, [r3, #8]
 8016366:	79fb      	ldrb	r3, [r7, #7]
 8016368:	4618      	mov	r0, r3
 801636a:	f7ff feb7 	bl	80160dc <GetElement>
 801636e:	4603      	mov	r3, r0
 8016370:	2b00      	cmp	r3, #0
 8016372:	d001      	beq.n	8016378 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8016374:	2301      	movs	r3, #1
 8016376:	e000      	b.n	801637a <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8016378:	2300      	movs	r3, #0
}
 801637a:	4618      	mov	r0, r3
 801637c:	3708      	adds	r7, #8
 801637e:	46bd      	mov	sp, r7
 8016380:	bd80      	pop	{r7, pc}
 8016382:	bf00      	nop
 8016384:	20001a3c 	.word	0x20001a3c

08016388 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8016388:	b580      	push	{r7, lr}
 801638a:	b084      	sub	sp, #16
 801638c:	af00      	add	r7, sp, #0
 801638e:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8016390:	4b25      	ldr	r3, [pc, #148]	; (8016428 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016392:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016396:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8016398:	2300      	movs	r3, #0
 801639a:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 801639c:	f107 0308 	add.w	r3, r7, #8
 80163a0:	2204      	movs	r2, #4
 80163a2:	2100      	movs	r1, #0
 80163a4:	4618      	mov	r0, r3
 80163a6:	f005 f88b 	bl	801b4c0 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 80163aa:	2300      	movs	r3, #0
 80163ac:	73fb      	strb	r3, [r7, #15]
 80163ae:	e032      	b.n	8016416 <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80163b0:	4b1d      	ldr	r3, [pc, #116]	; (8016428 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80163b2:	685b      	ldr	r3, [r3, #4]
 80163b4:	781a      	ldrb	r2, [r3, #0]
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80163ba:	4b1b      	ldr	r3, [pc, #108]	; (8016428 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80163bc:	685b      	ldr	r3, [r3, #4]
 80163be:	785a      	ldrb	r2, [r3, #1]
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80163c4:	4b18      	ldr	r3, [pc, #96]	; (8016428 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80163c6:	685b      	ldr	r3, [r3, #4]
 80163c8:	789b      	ldrb	r3, [r3, #2]
 80163ca:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 80163cc:	7b7b      	ldrb	r3, [r7, #13]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d005      	beq.n	80163de <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80163d2:	4b15      	ldr	r3, [pc, #84]	; (8016428 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	689b      	ldr	r3, [r3, #8]
 80163d8:	6878      	ldr	r0, [r7, #4]
 80163da:	4798      	blx	r3
 80163dc:	e00b      	b.n	80163f6 <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80163de:	4b12      	ldr	r3, [pc, #72]	; (8016428 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80163e0:	685b      	ldr	r3, [r3, #4]
 80163e2:	781b      	ldrb	r3, [r3, #0]
 80163e4:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80163e6:	4b10      	ldr	r3, [pc, #64]	; (8016428 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80163e8:	685b      	ldr	r3, [r3, #4]
 80163ea:	785b      	ldrb	r3, [r3, #1]
 80163ec:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 80163ee:	4b0e      	ldr	r3, [pc, #56]	; (8016428 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80163f0:	685b      	ldr	r3, [r3, #4]
 80163f2:	78db      	ldrb	r3, [r3, #3]
 80163f4:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 80163f6:	f7ff feff 	bl	80161f8 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 80163fa:	7b7b      	ldrb	r3, [r7, #13]
 80163fc:	f083 0301 	eor.w	r3, r3, #1
 8016400:	b2db      	uxtb	r3, r3
 8016402:	2b00      	cmp	r3, #0
 8016404:	d004      	beq.n	8016410 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8016406:	f107 0308 	add.w	r3, r7, #8
 801640a:	4618      	mov	r0, r3
 801640c:	f7ff feba 	bl	8016184 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8016410:	7bfb      	ldrb	r3, [r7, #15]
 8016412:	3301      	adds	r3, #1
 8016414:	73fb      	strb	r3, [r7, #15]
 8016416:	7bfa      	ldrb	r2, [r7, #15]
 8016418:	7bbb      	ldrb	r3, [r7, #14]
 801641a:	429a      	cmp	r2, r3
 801641c:	d3c8      	bcc.n	80163b0 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 801641e:	bf00      	nop
 8016420:	bf00      	nop
 8016422:	3710      	adds	r7, #16
 8016424:	46bd      	mov	sp, r7
 8016426:	bd80      	pop	{r7, pc}
 8016428:	20001a3c 	.word	0x20001a3c

0801642c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 801642c:	b480      	push	{r7}
 801642e:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8016430:	4b03      	ldr	r3, [pc, #12]	; (8016440 <LoRaMacConfirmQueueGetCnt+0x14>)
 8016432:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8016436:	4618      	mov	r0, r3
 8016438:	46bd      	mov	sp, r7
 801643a:	bc80      	pop	{r7}
 801643c:	4770      	bx	lr
 801643e:	bf00      	nop
 8016440:	20001a3c 	.word	0x20001a3c

08016444 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8016444:	b580      	push	{r7, lr}
 8016446:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8016448:	4b06      	ldr	r3, [pc, #24]	; (8016464 <LoRaMacConfirmQueueIsFull+0x20>)
 801644a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801644e:	4618      	mov	r0, r3
 8016450:	f7ff fe34 	bl	80160bc <IsListFull>
 8016454:	4603      	mov	r3, r0
 8016456:	2b00      	cmp	r3, #0
 8016458:	d001      	beq.n	801645e <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 801645a:	2301      	movs	r3, #1
 801645c:	e000      	b.n	8016460 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 801645e:	2300      	movs	r3, #0
    }
}
 8016460:	4618      	mov	r0, r3
 8016462:	bd80      	pop	{r7, pc}
 8016464:	20001a3c 	.word	0x20001a3c

08016468 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8016468:	b580      	push	{r7, lr}
 801646a:	b08e      	sub	sp, #56	; 0x38
 801646c:	af00      	add	r7, sp, #0
 801646e:	60f8      	str	r0, [r7, #12]
 8016470:	607b      	str	r3, [r7, #4]
 8016472:	460b      	mov	r3, r1
 8016474:	817b      	strh	r3, [r7, #10]
 8016476:	4613      	mov	r3, r2
 8016478:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d101      	bne.n	8016484 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016480:	2309      	movs	r3, #9
 8016482:	e086      	b.n	8016592 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8016484:	2300      	movs	r3, #0
 8016486:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 801648a:	2301      	movs	r3, #1
 801648c:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 801648e:	2300      	movs	r3, #0
 8016490:	623b      	str	r3, [r7, #32]
 8016492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016496:	2200      	movs	r2, #0
 8016498:	601a      	str	r2, [r3, #0]
 801649a:	605a      	str	r2, [r3, #4]
 801649c:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 801649e:	2300      	movs	r3, #0
 80164a0:	613b      	str	r3, [r7, #16]
 80164a2:	f107 0314 	add.w	r3, r7, #20
 80164a6:	2200      	movs	r2, #0
 80164a8:	601a      	str	r2, [r3, #0]
 80164aa:	605a      	str	r2, [r3, #4]
 80164ac:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 80164ae:	2301      	movs	r3, #1
 80164b0:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 80164b2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80164b6:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	b2db      	uxtb	r3, r3
 80164bc:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	0a1b      	lsrs	r3, r3, #8
 80164c2:	b2db      	uxtb	r3, r3
 80164c4:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	0c1b      	lsrs	r3, r3, #16
 80164ca:	b2db      	uxtb	r3, r3
 80164cc:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	0e1b      	lsrs	r3, r3, #24
 80164d2:	b2db      	uxtb	r3, r3
 80164d4:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 80164d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80164d8:	b2db      	uxtb	r3, r3
 80164da:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80164dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80164de:	0a1b      	lsrs	r3, r3, #8
 80164e0:	b2db      	uxtb	r3, r3
 80164e2:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80164e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80164e6:	0c1b      	lsrs	r3, r3, #16
 80164e8:	b2db      	uxtb	r3, r3
 80164ea:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80164ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80164ee:	0e1b      	lsrs	r3, r3, #24
 80164f0:	b2db      	uxtb	r3, r3
 80164f2:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 80164f4:	e048      	b.n	8016588 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 80164f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80164f8:	b2db      	uxtb	r3, r3
 80164fa:	77fb      	strb	r3, [r7, #31]
        ctr++;
 80164fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80164fe:	3301      	adds	r3, #1
 8016500:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8016502:	f107 0320 	add.w	r3, r7, #32
 8016506:	7a7a      	ldrb	r2, [r7, #9]
 8016508:	f107 0010 	add.w	r0, r7, #16
 801650c:	2110      	movs	r1, #16
 801650e:	f7f8 fa79 	bl	800ea04 <SecureElementAesEncrypt>
 8016512:	4603      	mov	r3, r0
 8016514:	2b00      	cmp	r3, #0
 8016516:	d001      	beq.n	801651c <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016518:	230e      	movs	r3, #14
 801651a:	e03a      	b.n	8016592 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801651c:	2300      	movs	r3, #0
 801651e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8016522:	e01e      	b.n	8016562 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8016524:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8016528:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801652c:	4413      	add	r3, r2
 801652e:	461a      	mov	r2, r3
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	4413      	add	r3, r2
 8016534:	7819      	ldrb	r1, [r3, #0]
 8016536:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801653a:	3338      	adds	r3, #56	; 0x38
 801653c:	443b      	add	r3, r7
 801653e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8016542:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8016546:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801654a:	4403      	add	r3, r0
 801654c:	4618      	mov	r0, r3
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	4403      	add	r3, r0
 8016552:	404a      	eors	r2, r1
 8016554:	b2d2      	uxtb	r2, r2
 8016556:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8016558:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801655c:	3301      	adds	r3, #1
 801655e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8016562:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016566:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801656a:	2a10      	cmp	r2, #16
 801656c:	bfa8      	it	ge
 801656e:	2210      	movge	r2, #16
 8016570:	b212      	sxth	r2, r2
 8016572:	4293      	cmp	r3, r2
 8016574:	dbd6      	blt.n	8016524 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8016576:	897b      	ldrh	r3, [r7, #10]
 8016578:	3b10      	subs	r3, #16
 801657a:	b29b      	uxth	r3, r3
 801657c:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 801657e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016582:	3310      	adds	r3, #16
 8016584:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8016588:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801658c:	2b00      	cmp	r3, #0
 801658e:	dcb2      	bgt.n	80164f6 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016590:	2300      	movs	r3, #0
}
 8016592:	4618      	mov	r0, r3
 8016594:	3738      	adds	r7, #56	; 0x38
 8016596:	46bd      	mov	sp, r7
 8016598:	bd80      	pop	{r7, pc}

0801659a <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 801659a:	b490      	push	{r4, r7}
 801659c:	b082      	sub	sp, #8
 801659e:	af00      	add	r7, sp, #0
 80165a0:	4604      	mov	r4, r0
 80165a2:	4608      	mov	r0, r1
 80165a4:	4611      	mov	r1, r2
 80165a6:	461a      	mov	r2, r3
 80165a8:	4623      	mov	r3, r4
 80165aa:	80fb      	strh	r3, [r7, #6]
 80165ac:	4603      	mov	r3, r0
 80165ae:	717b      	strb	r3, [r7, #5]
 80165b0:	460b      	mov	r3, r1
 80165b2:	713b      	strb	r3, [r7, #4]
 80165b4:	4613      	mov	r3, r2
 80165b6:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 80165b8:	69bb      	ldr	r3, [r7, #24]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d101      	bne.n	80165c2 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80165be:	2309      	movs	r3, #9
 80165c0:	e04e      	b.n	8016660 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 80165c2:	69bb      	ldr	r3, [r7, #24]
 80165c4:	2249      	movs	r2, #73	; 0x49
 80165c6:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 80165c8:	69bb      	ldr	r3, [r7, #24]
 80165ca:	3301      	adds	r3, #1
 80165cc:	2200      	movs	r2, #0
 80165ce:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80165d0:	69bb      	ldr	r3, [r7, #24]
 80165d2:	3302      	adds	r3, #2
 80165d4:	2200      	movs	r2, #0
 80165d6:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80165d8:	69bb      	ldr	r3, [r7, #24]
 80165da:	3303      	adds	r3, #3
 80165dc:	2200      	movs	r2, #0
 80165de:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 80165e0:	69bb      	ldr	r3, [r7, #24]
 80165e2:	3304      	adds	r3, #4
 80165e4:	2200      	movs	r2, #0
 80165e6:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 80165e8:	69bb      	ldr	r3, [r7, #24]
 80165ea:	3305      	adds	r3, #5
 80165ec:	78fa      	ldrb	r2, [r7, #3]
 80165ee:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 80165f0:	69bb      	ldr	r3, [r7, #24]
 80165f2:	3306      	adds	r3, #6
 80165f4:	693a      	ldr	r2, [r7, #16]
 80165f6:	b2d2      	uxtb	r2, r2
 80165f8:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 80165fa:	693b      	ldr	r3, [r7, #16]
 80165fc:	0a1a      	lsrs	r2, r3, #8
 80165fe:	69bb      	ldr	r3, [r7, #24]
 8016600:	3307      	adds	r3, #7
 8016602:	b2d2      	uxtb	r2, r2
 8016604:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8016606:	693b      	ldr	r3, [r7, #16]
 8016608:	0c1a      	lsrs	r2, r3, #16
 801660a:	69bb      	ldr	r3, [r7, #24]
 801660c:	3308      	adds	r3, #8
 801660e:	b2d2      	uxtb	r2, r2
 8016610:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8016612:	693b      	ldr	r3, [r7, #16]
 8016614:	0e1a      	lsrs	r2, r3, #24
 8016616:	69bb      	ldr	r3, [r7, #24]
 8016618:	3309      	adds	r3, #9
 801661a:	b2d2      	uxtb	r2, r2
 801661c:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801661e:	69bb      	ldr	r3, [r7, #24]
 8016620:	330a      	adds	r3, #10
 8016622:	697a      	ldr	r2, [r7, #20]
 8016624:	b2d2      	uxtb	r2, r2
 8016626:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8016628:	697b      	ldr	r3, [r7, #20]
 801662a:	0a1a      	lsrs	r2, r3, #8
 801662c:	69bb      	ldr	r3, [r7, #24]
 801662e:	330b      	adds	r3, #11
 8016630:	b2d2      	uxtb	r2, r2
 8016632:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8016634:	697b      	ldr	r3, [r7, #20]
 8016636:	0c1a      	lsrs	r2, r3, #16
 8016638:	69bb      	ldr	r3, [r7, #24]
 801663a:	330c      	adds	r3, #12
 801663c:	b2d2      	uxtb	r2, r2
 801663e:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8016640:	697b      	ldr	r3, [r7, #20]
 8016642:	0e1a      	lsrs	r2, r3, #24
 8016644:	69bb      	ldr	r3, [r7, #24]
 8016646:	330d      	adds	r3, #13
 8016648:	b2d2      	uxtb	r2, r2
 801664a:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 801664c:	69bb      	ldr	r3, [r7, #24]
 801664e:	330e      	adds	r3, #14
 8016650:	2200      	movs	r2, #0
 8016652:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8016654:	69bb      	ldr	r3, [r7, #24]
 8016656:	330f      	adds	r3, #15
 8016658:	88fa      	ldrh	r2, [r7, #6]
 801665a:	b2d2      	uxtb	r2, r2
 801665c:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801665e:	2300      	movs	r3, #0
}
 8016660:	4618      	mov	r0, r3
 8016662:	3708      	adds	r7, #8
 8016664:	46bd      	mov	sp, r7
 8016666:	bc90      	pop	{r4, r7}
 8016668:	4770      	bx	lr

0801666a <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 801666a:	b590      	push	{r4, r7, lr}
 801666c:	b08b      	sub	sp, #44	; 0x2c
 801666e:	af04      	add	r7, sp, #16
 8016670:	6078      	str	r0, [r7, #4]
 8016672:	4608      	mov	r0, r1
 8016674:	4611      	mov	r1, r2
 8016676:	461a      	mov	r2, r3
 8016678:	4603      	mov	r3, r0
 801667a:	807b      	strh	r3, [r7, #2]
 801667c:	460b      	mov	r3, r1
 801667e:	707b      	strb	r3, [r7, #1]
 8016680:	4613      	mov	r3, r2
 8016682:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	2b00      	cmp	r3, #0
 8016688:	d002      	beq.n	8016690 <ComputeCmacB0+0x26>
 801668a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801668c:	2b00      	cmp	r3, #0
 801668e:	d101      	bne.n	8016694 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016690:	2309      	movs	r3, #9
 8016692:	e024      	b.n	80166de <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8016694:	887b      	ldrh	r3, [r7, #2]
 8016696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801669a:	d901      	bls.n	80166a0 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801669c:	230d      	movs	r3, #13
 801669e:	e01e      	b.n	80166de <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80166a0:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80166a4:	783a      	ldrb	r2, [r7, #0]
 80166a6:	7879      	ldrb	r1, [r7, #1]
 80166a8:	8878      	ldrh	r0, [r7, #2]
 80166aa:	f107 0308 	add.w	r3, r7, #8
 80166ae:	9302      	str	r3, [sp, #8]
 80166b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166b2:	9301      	str	r3, [sp, #4]
 80166b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166b6:	9300      	str	r3, [sp, #0]
 80166b8:	4623      	mov	r3, r4
 80166ba:	f7ff ff6e 	bl	801659a <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80166be:	887a      	ldrh	r2, [r7, #2]
 80166c0:	7879      	ldrb	r1, [r7, #1]
 80166c2:	f107 0008 	add.w	r0, r7, #8
 80166c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80166c8:	9300      	str	r3, [sp, #0]
 80166ca:	460b      	mov	r3, r1
 80166cc:	6879      	ldr	r1, [r7, #4]
 80166ce:	f7f8 f953 	bl	800e978 <SecureElementComputeAesCmac>
 80166d2:	4603      	mov	r3, r0
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d001      	beq.n	80166dc <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80166d8:	230e      	movs	r3, #14
 80166da:	e000      	b.n	80166de <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80166dc:	2300      	movs	r3, #0
}
 80166de:	4618      	mov	r0, r3
 80166e0:	371c      	adds	r7, #28
 80166e2:	46bd      	mov	sp, r7
 80166e4:	bd90      	pop	{r4, r7, pc}

080166e6 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 80166e6:	b590      	push	{r4, r7, lr}
 80166e8:	b0cd      	sub	sp, #308	; 0x134
 80166ea:	af04      	add	r7, sp, #16
 80166ec:	f507 7490 	add.w	r4, r7, #288	; 0x120
 80166f0:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 80166f4:	6020      	str	r0, [r4, #0]
 80166f6:	460c      	mov	r4, r1
 80166f8:	4610      	mov	r0, r2
 80166fa:	4619      	mov	r1, r3
 80166fc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016700:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016704:	4622      	mov	r2, r4
 8016706:	801a      	strh	r2, [r3, #0]
 8016708:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801670c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016710:	4602      	mov	r2, r0
 8016712:	701a      	strb	r2, [r3, #0]
 8016714:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016718:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801671c:	460a      	mov	r2, r1
 801671e:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8016720:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016724:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8016728:	681b      	ldr	r3, [r3, #0]
 801672a:	2b00      	cmp	r3, #0
 801672c:	d101      	bne.n	8016732 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801672e:	2309      	movs	r3, #9
 8016730:	e063      	b.n	80167fa <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8016732:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016736:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801673a:	881b      	ldrh	r3, [r3, #0]
 801673c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016740:	d901      	bls.n	8016746 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8016742:	230d      	movs	r3, #13
 8016744:	e059      	b.n	80167fa <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8016746:	f107 030c 	add.w	r3, r7, #12
 801674a:	f44f 7288 	mov.w	r2, #272	; 0x110
 801674e:	2100      	movs	r1, #0
 8016750:	4618      	mov	r0, r3
 8016752:	f004 feb5 	bl	801b4c0 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8016756:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 801675a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801675e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8016762:	781a      	ldrb	r2, [r3, #0]
 8016764:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016768:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 801676c:	7819      	ldrb	r1, [r3, #0]
 801676e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016772:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016776:	8818      	ldrh	r0, [r3, #0]
 8016778:	f107 030c 	add.w	r3, r7, #12
 801677c:	9302      	str	r3, [sp, #8]
 801677e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016782:	9301      	str	r3, [sp, #4]
 8016784:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8016788:	9300      	str	r3, [sp, #0]
 801678a:	4623      	mov	r3, r4
 801678c:	f7ff ff05 	bl	801659a <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8016790:	f107 030c 	add.w	r3, r7, #12
 8016794:	3310      	adds	r3, #16
 8016796:	f507 7290 	add.w	r2, r7, #288	; 0x120
 801679a:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 801679e:	8812      	ldrh	r2, [r2, #0]
 80167a0:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80167a4:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 80167a8:	6809      	ldr	r1, [r1, #0]
 80167aa:	4618      	mov	r0, r3
 80167ac:	f004 fe4d 	bl	801b44a <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80167b0:	2306      	movs	r3, #6
 80167b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 80167b6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80167ba:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80167be:	881b      	ldrh	r3, [r3, #0]
 80167c0:	3310      	adds	r3, #16
 80167c2:	4619      	mov	r1, r3
 80167c4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80167c8:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80167cc:	781b      	ldrb	r3, [r3, #0]
 80167ce:	f107 000c 	add.w	r0, r7, #12
 80167d2:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80167d6:	f7f8 f8e9 	bl	800e9ac <SecureElementVerifyAesCmac>
 80167da:	4603      	mov	r3, r0
 80167dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 80167e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d101      	bne.n	80167ec <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 80167e8:	2300      	movs	r3, #0
 80167ea:	e006      	b.n	80167fa <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 80167ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80167f0:	2b01      	cmp	r3, #1
 80167f2:	d101      	bne.n	80167f8 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 80167f4:	2301      	movs	r3, #1
 80167f6:	e000      	b.n	80167fa <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80167f8:	230e      	movs	r3, #14
}
 80167fa:	4618      	mov	r0, r3
 80167fc:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8016800:	46bd      	mov	sp, r7
 8016802:	bd90      	pop	{r4, r7, pc}

08016804 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8016804:	b480      	push	{r7}
 8016806:	b085      	sub	sp, #20
 8016808:	af00      	add	r7, sp, #0
 801680a:	4603      	mov	r3, r0
 801680c:	6039      	str	r1, [r7, #0]
 801680e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8016810:	2300      	movs	r3, #0
 8016812:	73fb      	strb	r3, [r7, #15]
 8016814:	e011      	b.n	801683a <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8016816:	7bfb      	ldrb	r3, [r7, #15]
 8016818:	4a0c      	ldr	r2, [pc, #48]	; (801684c <GetKeyAddrItem+0x48>)
 801681a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801681e:	79fa      	ldrb	r2, [r7, #7]
 8016820:	429a      	cmp	r2, r3
 8016822:	d107      	bne.n	8016834 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8016824:	7bfb      	ldrb	r3, [r7, #15]
 8016826:	009b      	lsls	r3, r3, #2
 8016828:	4a08      	ldr	r2, [pc, #32]	; (801684c <GetKeyAddrItem+0x48>)
 801682a:	441a      	add	r2, r3
 801682c:	683b      	ldr	r3, [r7, #0]
 801682e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8016830:	2300      	movs	r3, #0
 8016832:	e006      	b.n	8016842 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8016834:	7bfb      	ldrb	r3, [r7, #15]
 8016836:	3301      	adds	r3, #1
 8016838:	73fb      	strb	r3, [r7, #15]
 801683a:	7bfb      	ldrb	r3, [r7, #15]
 801683c:	2b01      	cmp	r3, #1
 801683e:	d9ea      	bls.n	8016816 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8016840:	230b      	movs	r3, #11
}
 8016842:	4618      	mov	r0, r3
 8016844:	3714      	adds	r7, #20
 8016846:	46bd      	mov	sp, r7
 8016848:	bc80      	pop	{r7}
 801684a:	4770      	bx	lr
 801684c:	20000110 	.word	0x20000110

08016850 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b088      	sub	sp, #32
 8016854:	af00      	add	r7, sp, #0
 8016856:	60b9      	str	r1, [r7, #8]
 8016858:	607a      	str	r2, [r7, #4]
 801685a:	461a      	mov	r2, r3
 801685c:	4603      	mov	r3, r0
 801685e:	73fb      	strb	r3, [r7, #15]
 8016860:	4613      	mov	r3, r2
 8016862:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8016864:	2300      	movs	r3, #0
 8016866:	613b      	str	r3, [r7, #16]
 8016868:	f107 0314 	add.w	r3, r7, #20
 801686c:	2200      	movs	r2, #0
 801686e:	601a      	str	r2, [r3, #0]
 8016870:	605a      	str	r2, [r3, #4]
 8016872:	609a      	str	r2, [r3, #8]

    switch( keyID )
 8016874:	7bfb      	ldrb	r3, [r7, #15]
 8016876:	2b08      	cmp	r3, #8
 8016878:	d002      	beq.n	8016880 <DeriveSessionKey10x+0x30>
 801687a:	2b09      	cmp	r3, #9
 801687c:	d003      	beq.n	8016886 <DeriveSessionKey10x+0x36>
 801687e:	e005      	b.n	801688c <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 8016880:	2301      	movs	r3, #1
 8016882:	743b      	strb	r3, [r7, #16]
            break;
 8016884:	e004      	b.n	8016890 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8016886:	2302      	movs	r3, #2
 8016888:	743b      	strb	r3, [r7, #16]
            break;
 801688a:	e001      	b.n	8016890 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801688c:	230a      	movs	r3, #10
 801688e:	e02a      	b.n	80168e6 <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8016890:	68bb      	ldr	r3, [r7, #8]
 8016892:	b2db      	uxtb	r3, r3
 8016894:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8016896:	68bb      	ldr	r3, [r7, #8]
 8016898:	0a1b      	lsrs	r3, r3, #8
 801689a:	b2db      	uxtb	r3, r3
 801689c:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 801689e:	68bb      	ldr	r3, [r7, #8]
 80168a0:	0c1b      	lsrs	r3, r3, #16
 80168a2:	b2db      	uxtb	r3, r3
 80168a4:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	b2db      	uxtb	r3, r3
 80168aa:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	0a1b      	lsrs	r3, r3, #8
 80168b0:	b2db      	uxtb	r3, r3
 80168b2:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	0c1b      	lsrs	r3, r3, #16
 80168b8:	b2db      	uxtb	r3, r3
 80168ba:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 80168bc:	89bb      	ldrh	r3, [r7, #12]
 80168be:	b2db      	uxtb	r3, r3
 80168c0:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 80168c2:	89bb      	ldrh	r3, [r7, #12]
 80168c4:	0a1b      	lsrs	r3, r3, #8
 80168c6:	b29b      	uxth	r3, r3
 80168c8:	b2db      	uxtb	r3, r3
 80168ca:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 80168cc:	7bfa      	ldrb	r2, [r7, #15]
 80168ce:	f107 0310 	add.w	r3, r7, #16
 80168d2:	2101      	movs	r1, #1
 80168d4:	4618      	mov	r0, r3
 80168d6:	f7f8 f915 	bl	800eb04 <SecureElementDeriveAndStoreKey>
 80168da:	4603      	mov	r3, r0
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d001      	beq.n	80168e4 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80168e0:	230e      	movs	r3, #14
 80168e2:	e000      	b.n	80168e6 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80168e4:	2300      	movs	r3, #0
}
 80168e6:	4618      	mov	r0, r3
 80168e8:	3720      	adds	r7, #32
 80168ea:	46bd      	mov	sp, r7
 80168ec:	bd80      	pop	{r7, pc}
	...

080168f0 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 80168f0:	b480      	push	{r7}
 80168f2:	b083      	sub	sp, #12
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	4603      	mov	r3, r0
 80168f8:	6039      	str	r1, [r7, #0]
 80168fa:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 80168fc:	683b      	ldr	r3, [r7, #0]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d101      	bne.n	8016906 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016902:	2309      	movs	r3, #9
 8016904:	e029      	b.n	801695a <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 8016906:	79fb      	ldrb	r3, [r7, #7]
 8016908:	3b01      	subs	r3, #1
 801690a:	2b03      	cmp	r3, #3
 801690c:	d822      	bhi.n	8016954 <GetLastFcntDown+0x64>
 801690e:	a201      	add	r2, pc, #4	; (adr r2, 8016914 <GetLastFcntDown+0x24>)
 8016910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016914:	08016925 	.word	0x08016925
 8016918:	08016931 	.word	0x08016931
 801691c:	0801693d 	.word	0x0801693d
 8016920:	08016949 	.word	0x08016949
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8016924:	4b0f      	ldr	r3, [pc, #60]	; (8016964 <GetLastFcntDown+0x74>)
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	691a      	ldr	r2, [r3, #16]
 801692a:	683b      	ldr	r3, [r7, #0]
 801692c:	601a      	str	r2, [r3, #0]
            break;
 801692e:	e013      	b.n	8016958 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8016930:	4b0c      	ldr	r3, [pc, #48]	; (8016964 <GetLastFcntDown+0x74>)
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	695a      	ldr	r2, [r3, #20]
 8016936:	683b      	ldr	r3, [r7, #0]
 8016938:	601a      	str	r2, [r3, #0]
            break;
 801693a:	e00d      	b.n	8016958 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 801693c:	4b09      	ldr	r3, [pc, #36]	; (8016964 <GetLastFcntDown+0x74>)
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	699a      	ldr	r2, [r3, #24]
 8016942:	683b      	ldr	r3, [r7, #0]
 8016944:	601a      	str	r2, [r3, #0]
            break;
 8016946:	e007      	b.n	8016958 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8016948:	4b06      	ldr	r3, [pc, #24]	; (8016964 <GetLastFcntDown+0x74>)
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	69da      	ldr	r2, [r3, #28]
 801694e:	683b      	ldr	r3, [r7, #0]
 8016950:	601a      	str	r2, [r3, #0]
            break;
 8016952:	e001      	b.n	8016958 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8016954:	2305      	movs	r3, #5
 8016956:	e000      	b.n	801695a <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016958:	2300      	movs	r3, #0
}
 801695a:	4618      	mov	r0, r3
 801695c:	370c      	adds	r7, #12
 801695e:	46bd      	mov	sp, r7
 8016960:	bc80      	pop	{r7}
 8016962:	4770      	bx	lr
 8016964:	20001a60 	.word	0x20001a60

08016968 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8016968:	b580      	push	{r7, lr}
 801696a:	b084      	sub	sp, #16
 801696c:	af00      	add	r7, sp, #0
 801696e:	4603      	mov	r3, r0
 8016970:	6039      	str	r1, [r7, #0]
 8016972:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8016974:	2300      	movs	r3, #0
 8016976:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8016978:	f107 020c 	add.w	r2, r7, #12
 801697c:	79fb      	ldrb	r3, [r7, #7]
 801697e:	4611      	mov	r1, r2
 8016980:	4618      	mov	r0, r3
 8016982:	f7ff ffb5 	bl	80168f0 <GetLastFcntDown>
 8016986:	4603      	mov	r3, r0
 8016988:	2b00      	cmp	r3, #0
 801698a:	d001      	beq.n	8016990 <CheckFCntDown+0x28>
    {
        return false;
 801698c:	2300      	movs	r3, #0
 801698e:	e00a      	b.n	80169a6 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	683a      	ldr	r2, [r7, #0]
 8016994:	429a      	cmp	r2, r3
 8016996:	d803      	bhi.n	80169a0 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8016998:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 801699a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801699e:	d101      	bne.n	80169a4 <CheckFCntDown+0x3c>
    {
        return true;
 80169a0:	2301      	movs	r3, #1
 80169a2:	e000      	b.n	80169a6 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 80169a4:	2300      	movs	r3, #0
    }
}
 80169a6:	4618      	mov	r0, r3
 80169a8:	3710      	adds	r7, #16
 80169aa:	46bd      	mov	sp, r7
 80169ac:	bd80      	pop	{r7, pc}
	...

080169b0 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80169b0:	b480      	push	{r7}
 80169b2:	b083      	sub	sp, #12
 80169b4:	af00      	add	r7, sp, #0
 80169b6:	4603      	mov	r3, r0
 80169b8:	6039      	str	r1, [r7, #0]
 80169ba:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 80169bc:	79fb      	ldrb	r3, [r7, #7]
 80169be:	3b01      	subs	r3, #1
 80169c0:	2b03      	cmp	r3, #3
 80169c2:	d82b      	bhi.n	8016a1c <UpdateFCntDown+0x6c>
 80169c4:	a201      	add	r2, pc, #4	; (adr r2, 80169cc <UpdateFCntDown+0x1c>)
 80169c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80169ca:	bf00      	nop
 80169cc:	080169dd 	.word	0x080169dd
 80169d0:	080169ef 	.word	0x080169ef
 80169d4:	08016a01 	.word	0x08016a01
 80169d8:	08016a13 	.word	0x08016a13
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 80169dc:	4b12      	ldr	r3, [pc, #72]	; (8016a28 <UpdateFCntDown+0x78>)
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	683a      	ldr	r2, [r7, #0]
 80169e2:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 80169e4:	4b10      	ldr	r3, [pc, #64]	; (8016a28 <UpdateFCntDown+0x78>)
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	683a      	ldr	r2, [r7, #0]
 80169ea:	621a      	str	r2, [r3, #32]
            break;
 80169ec:	e017      	b.n	8016a1e <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 80169ee:	4b0e      	ldr	r3, [pc, #56]	; (8016a28 <UpdateFCntDown+0x78>)
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	683a      	ldr	r2, [r7, #0]
 80169f4:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 80169f6:	4b0c      	ldr	r3, [pc, #48]	; (8016a28 <UpdateFCntDown+0x78>)
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	683a      	ldr	r2, [r7, #0]
 80169fc:	621a      	str	r2, [r3, #32]
            break;
 80169fe:	e00e      	b.n	8016a1e <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8016a00:	4b09      	ldr	r3, [pc, #36]	; (8016a28 <UpdateFCntDown+0x78>)
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	683a      	ldr	r2, [r7, #0]
 8016a06:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8016a08:	4b07      	ldr	r3, [pc, #28]	; (8016a28 <UpdateFCntDown+0x78>)
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	683a      	ldr	r2, [r7, #0]
 8016a0e:	621a      	str	r2, [r3, #32]
            break;
 8016a10:	e005      	b.n	8016a1e <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8016a12:	4b05      	ldr	r3, [pc, #20]	; (8016a28 <UpdateFCntDown+0x78>)
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	683a      	ldr	r2, [r7, #0]
 8016a18:	61da      	str	r2, [r3, #28]
            break;
 8016a1a:	e000      	b.n	8016a1e <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8016a1c:	bf00      	nop
    }
}
 8016a1e:	bf00      	nop
 8016a20:	370c      	adds	r7, #12
 8016a22:	46bd      	mov	sp, r7
 8016a24:	bc80      	pop	{r7}
 8016a26:	4770      	bx	lr
 8016a28:	20001a60 	.word	0x20001a60

08016a2c <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8016a2c:	b480      	push	{r7}
 8016a2e:	b083      	sub	sp, #12
 8016a30:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8016a32:	4b18      	ldr	r3, [pc, #96]	; (8016a94 <ResetFCnts+0x68>)
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	2200      	movs	r2, #0
 8016a38:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016a3a:	4b16      	ldr	r3, [pc, #88]	; (8016a94 <ResetFCnts+0x68>)
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016a42:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016a44:	4b13      	ldr	r3, [pc, #76]	; (8016a94 <ResetFCnts+0x68>)
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016a4c:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016a4e:	4b11      	ldr	r3, [pc, #68]	; (8016a94 <ResetFCnts+0x68>)
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016a56:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8016a58:	4b0e      	ldr	r3, [pc, #56]	; (8016a94 <ResetFCnts+0x68>)
 8016a5a:	681a      	ldr	r2, [r3, #0]
 8016a5c:	4b0d      	ldr	r3, [pc, #52]	; (8016a94 <ResetFCnts+0x68>)
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	6992      	ldr	r2, [r2, #24]
 8016a62:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016a64:	2300      	movs	r3, #0
 8016a66:	607b      	str	r3, [r7, #4]
 8016a68:	e00b      	b.n	8016a82 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 8016a6a:	4b0a      	ldr	r3, [pc, #40]	; (8016a94 <ResetFCnts+0x68>)
 8016a6c:	681a      	ldr	r2, [r3, #0]
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	3306      	adds	r3, #6
 8016a72:	009b      	lsls	r3, r3, #2
 8016a74:	4413      	add	r3, r2
 8016a76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016a7a:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	3301      	adds	r3, #1
 8016a80:	607b      	str	r3, [r7, #4]
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	ddf0      	ble.n	8016a6a <ResetFCnts+0x3e>
    }
}
 8016a88:	bf00      	nop
 8016a8a:	bf00      	nop
 8016a8c:	370c      	adds	r7, #12
 8016a8e:	46bd      	mov	sp, r7
 8016a90:	bc80      	pop	{r7}
 8016a92:	4770      	bx	lr
 8016a94:	20001a60 	.word	0x20001a60

08016a98 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8016a98:	b480      	push	{r7}
 8016a9a:	b083      	sub	sp, #12
 8016a9c:	af00      	add	r7, sp, #0
 8016a9e:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8016aa0:	4b06      	ldr	r3, [pc, #24]	; (8016abc <IsJoinNonce10xOk+0x24>)
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	689b      	ldr	r3, [r3, #8]
 8016aa6:	687a      	ldr	r2, [r7, #4]
 8016aa8:	429a      	cmp	r2, r3
 8016aaa:	bf8c      	ite	hi
 8016aac:	2301      	movhi	r3, #1
 8016aae:	2300      	movls	r3, #0
 8016ab0:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8016ab2:	4618      	mov	r0, r3
 8016ab4:	370c      	adds	r7, #12
 8016ab6:	46bd      	mov	sp, r7
 8016ab8:	bc80      	pop	{r7}
 8016aba:	4770      	bx	lr
 8016abc:	20001a60 	.word	0x20001a60

08016ac0 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8016ac0:	b580      	push	{r7, lr}
 8016ac2:	b082      	sub	sp, #8
 8016ac4:	af00      	add	r7, sp, #0
 8016ac6:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d101      	bne.n	8016ad2 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8016ace:	2308      	movs	r3, #8
 8016ad0:	e01c      	b.n	8016b0c <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8016ad2:	4a10      	ldr	r2, [pc, #64]	; (8016b14 <LoRaMacCryptoInit+0x54>)
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8016ad8:	4b0e      	ldr	r3, [pc, #56]	; (8016b14 <LoRaMacCryptoInit+0x54>)
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	2228      	movs	r2, #40	; 0x28
 8016ade:	2100      	movs	r1, #0
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	f004 fced 	bl	801b4c0 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8016ae6:	4b0b      	ldr	r3, [pc, #44]	; (8016b14 <LoRaMacCryptoInit+0x54>)
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	2201      	movs	r2, #1
 8016aec:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8016aee:	4b09      	ldr	r3, [pc, #36]	; (8016b14 <LoRaMacCryptoInit+0x54>)
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	2201      	movs	r2, #1
 8016af4:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8016af6:	4b07      	ldr	r3, [pc, #28]	; (8016b14 <LoRaMacCryptoInit+0x54>)
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	2201      	movs	r2, #1
 8016afc:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8016afe:	4b05      	ldr	r3, [pc, #20]	; (8016b14 <LoRaMacCryptoInit+0x54>)
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	2200      	movs	r2, #0
 8016b04:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8016b06:	f7ff ff91 	bl	8016a2c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8016b0a:	2300      	movs	r3, #0
}
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	3708      	adds	r7, #8
 8016b10:	46bd      	mov	sp, r7
 8016b12:	bd80      	pop	{r7, pc}
 8016b14:	20001a60 	.word	0x20001a60

08016b18 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8016b18:	b480      	push	{r7}
 8016b1a:	b083      	sub	sp, #12
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8016b20:	4b04      	ldr	r3, [pc, #16]	; (8016b34 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	687a      	ldr	r2, [r7, #4]
 8016b26:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8016b28:	2300      	movs	r3, #0
}
 8016b2a:	4618      	mov	r0, r3
 8016b2c:	370c      	adds	r7, #12
 8016b2e:	46bd      	mov	sp, r7
 8016b30:	bc80      	pop	{r7}
 8016b32:	4770      	bx	lr
 8016b34:	20001a60 	.word	0x20001a60

08016b38 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8016b38:	b480      	push	{r7}
 8016b3a:	b083      	sub	sp, #12
 8016b3c:	af00      	add	r7, sp, #0
 8016b3e:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d101      	bne.n	8016b4a <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016b46:	2309      	movs	r3, #9
 8016b48:	e006      	b.n	8016b58 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8016b4a:	4b06      	ldr	r3, [pc, #24]	; (8016b64 <LoRaMacCryptoGetFCntUp+0x2c>)
 8016b4c:	681b      	ldr	r3, [r3, #0]
 8016b4e:	68db      	ldr	r3, [r3, #12]
 8016b50:	1c5a      	adds	r2, r3, #1
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8016b56:	2300      	movs	r3, #0
}
 8016b58:	4618      	mov	r0, r3
 8016b5a:	370c      	adds	r7, #12
 8016b5c:	46bd      	mov	sp, r7
 8016b5e:	bc80      	pop	{r7}
 8016b60:	4770      	bx	lr
 8016b62:	bf00      	nop
 8016b64:	20001a60 	.word	0x20001a60

08016b68 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8016b68:	b580      	push	{r7, lr}
 8016b6a:	b088      	sub	sp, #32
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	4603      	mov	r3, r0
 8016b70:	60b9      	str	r1, [r7, #8]
 8016b72:	607a      	str	r2, [r7, #4]
 8016b74:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8016b76:	2300      	movs	r3, #0
 8016b78:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8016b7a:	2300      	movs	r3, #0
 8016b7c:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8016b7e:	2312      	movs	r3, #18
 8016b80:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d101      	bne.n	8016b8c <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016b88:	2309      	movs	r3, #9
 8016b8a:	e035      	b.n	8016bf8 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8016b8c:	f107 0214 	add.w	r2, r7, #20
 8016b90:	7bfb      	ldrb	r3, [r7, #15]
 8016b92:	4611      	mov	r1, r2
 8016b94:	4618      	mov	r0, r3
 8016b96:	f7ff feab 	bl	80168f0 <GetLastFcntDown>
 8016b9a:	4603      	mov	r3, r0
 8016b9c:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8016b9e:	7efb      	ldrb	r3, [r7, #27]
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d001      	beq.n	8016ba8 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8016ba4:	7efb      	ldrb	r3, [r7, #27]
 8016ba6:	e027      	b.n	8016bf8 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8016ba8:	697b      	ldr	r3, [r7, #20]
 8016baa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016bae:	d103      	bne.n	8016bb8 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	68ba      	ldr	r2, [r7, #8]
 8016bb4:	601a      	str	r2, [r3, #0]
 8016bb6:	e01e      	b.n	8016bf6 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8016bb8:	697b      	ldr	r3, [r7, #20]
 8016bba:	b29b      	uxth	r3, r3
 8016bbc:	68ba      	ldr	r2, [r7, #8]
 8016bbe:	1ad3      	subs	r3, r2, r3
 8016bc0:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8016bc2:	69fb      	ldr	r3, [r7, #28]
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	dd05      	ble.n	8016bd4 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8016bc8:	697a      	ldr	r2, [r7, #20]
 8016bca:	69fb      	ldr	r3, [r7, #28]
 8016bcc:	441a      	add	r2, r3
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	601a      	str	r2, [r3, #0]
 8016bd2:	e010      	b.n	8016bf6 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8016bd4:	69fb      	ldr	r3, [r7, #28]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d104      	bne.n	8016be4 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8016bda:	697a      	ldr	r2, [r7, #20]
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8016be0:	2307      	movs	r3, #7
 8016be2:	e009      	b.n	8016bf8 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8016be4:	697b      	ldr	r3, [r7, #20]
 8016be6:	0c1b      	lsrs	r3, r3, #16
 8016be8:	041b      	lsls	r3, r3, #16
 8016bea:	68ba      	ldr	r2, [r7, #8]
 8016bec:	4413      	add	r3, r2
 8016bee:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016bf6:	2300      	movs	r3, #0
}
 8016bf8:	4618      	mov	r0, r3
 8016bfa:	3720      	adds	r7, #32
 8016bfc:	46bd      	mov	sp, r7
 8016bfe:	bd80      	pop	{r7, pc}

08016c00 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8016c00:	b480      	push	{r7}
 8016c02:	b085      	sub	sp, #20
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d101      	bne.n	8016c12 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016c0e:	2309      	movs	r3, #9
 8016c10:	e019      	b.n	8016c46 <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016c12:	2300      	movs	r3, #0
 8016c14:	60fb      	str	r3, [r7, #12]
 8016c16:	e012      	b.n	8016c3e <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8016c18:	4b0d      	ldr	r3, [pc, #52]	; (8016c50 <LoRaMacCryptoSetMulticastReference+0x50>)
 8016c1a:	6819      	ldr	r1, [r3, #0]
 8016c1c:	68fa      	ldr	r2, [r7, #12]
 8016c1e:	4613      	mov	r3, r2
 8016c20:	005b      	lsls	r3, r3, #1
 8016c22:	4413      	add	r3, r2
 8016c24:	011b      	lsls	r3, r3, #4
 8016c26:	461a      	mov	r2, r3
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	4413      	add	r3, r2
 8016c2c:	68fa      	ldr	r2, [r7, #12]
 8016c2e:	3206      	adds	r2, #6
 8016c30:	0092      	lsls	r2, r2, #2
 8016c32:	440a      	add	r2, r1
 8016c34:	3204      	adds	r2, #4
 8016c36:	625a      	str	r2, [r3, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	3301      	adds	r3, #1
 8016c3c:	60fb      	str	r3, [r7, #12]
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	dde9      	ble.n	8016c18 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016c44:	2300      	movs	r3, #0
}
 8016c46:	4618      	mov	r0, r3
 8016c48:	3714      	adds	r7, #20
 8016c4a:	46bd      	mov	sp, r7
 8016c4c:	bc80      	pop	{r7}
 8016c4e:	4770      	bx	lr
 8016c50:	20001a60 	.word	0x20001a60

08016c54 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b082      	sub	sp, #8
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	4603      	mov	r3, r0
 8016c5c:	6039      	str	r1, [r7, #0]
 8016c5e:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8016c60:	79fb      	ldrb	r3, [r7, #7]
 8016c62:	6839      	ldr	r1, [r7, #0]
 8016c64:	4618      	mov	r0, r3
 8016c66:	f7f7 fe29 	bl	800e8bc <SecureElementSetKey>
 8016c6a:	4603      	mov	r3, r0
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d001      	beq.n	8016c74 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c70:	230e      	movs	r3, #14
 8016c72:	e021      	b.n	8016cb8 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8016c74:	79fb      	ldrb	r3, [r7, #7]
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d11d      	bne.n	8016cb6 <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016c7a:	4b11      	ldr	r3, [pc, #68]	; (8016cc0 <LoRaMacCryptoSetKey+0x6c>)
 8016c7c:	681b      	ldr	r3, [r3, #0]
 8016c7e:	789b      	ldrb	r3, [r3, #2]
 8016c80:	210b      	movs	r1, #11
 8016c82:	4618      	mov	r0, r3
 8016c84:	f000 fa58 	bl	8017138 <LoRaMacCryptoDeriveLifeTimeKey>
 8016c88:	4603      	mov	r3, r0
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d001      	beq.n	8016c92 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c8e:	230e      	movs	r3, #14
 8016c90:	e012      	b.n	8016cb8 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016c92:	210c      	movs	r1, #12
 8016c94:	2000      	movs	r0, #0
 8016c96:	f000 fa4f 	bl	8017138 <LoRaMacCryptoDeriveLifeTimeKey>
 8016c9a:	4603      	mov	r3, r0
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d001      	beq.n	8016ca4 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016ca0:	230e      	movs	r3, #14
 8016ca2:	e009      	b.n	8016cb8 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016ca4:	210a      	movs	r1, #10
 8016ca6:	2000      	movs	r0, #0
 8016ca8:	f000 fa46 	bl	8017138 <LoRaMacCryptoDeriveLifeTimeKey>
 8016cac:	4603      	mov	r3, r0
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d001      	beq.n	8016cb6 <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016cb2:	230e      	movs	r3, #14
 8016cb4:	e000      	b.n	8016cb8 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016cb6:	2300      	movs	r3, #0
}
 8016cb8:	4618      	mov	r0, r3
 8016cba:	3708      	adds	r7, #8
 8016cbc:	46bd      	mov	sp, r7
 8016cbe:	bd80      	pop	{r7, pc}
 8016cc0:	20001a60 	.word	0x20001a60

08016cc4 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016cc4:	b580      	push	{r7, lr}
 8016cc6:	b086      	sub	sp, #24
 8016cc8:	af02      	add	r7, sp, #8
 8016cca:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d101      	bne.n	8016cd6 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016cd2:	2309      	movs	r3, #9
 8016cd4:	e02d      	b.n	8016d32 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8016cd6:	2301      	movs	r3, #1
 8016cd8:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8016cda:	4b18      	ldr	r3, [pc, #96]	; (8016d3c <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	889a      	ldrh	r2, [r3, #4]
 8016ce0:	3201      	adds	r2, #1
 8016ce2:	b292      	uxth	r2, r2
 8016ce4:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8016ce6:	4b15      	ldr	r3, [pc, #84]	; (8016d3c <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	889a      	ldrh	r2, [r3, #4]
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016cf0:	6878      	ldr	r0, [r7, #4]
 8016cf2:	f000 fc1b 	bl	801752c <LoRaMacSerializerJoinRequest>
 8016cf6:	4603      	mov	r3, r0
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d001      	beq.n	8016d00 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016cfc:	2310      	movs	r3, #16
 8016cfe:	e018      	b.n	8016d32 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	6819      	ldr	r1, [r3, #0]
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	3318      	adds	r3, #24
 8016d08:	7bfa      	ldrb	r2, [r7, #15]
 8016d0a:	9300      	str	r3, [sp, #0]
 8016d0c:	4613      	mov	r3, r2
 8016d0e:	2213      	movs	r2, #19
 8016d10:	2000      	movs	r0, #0
 8016d12:	f7f7 fe31 	bl	800e978 <SecureElementComputeAesCmac>
 8016d16:	4603      	mov	r3, r0
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d001      	beq.n	8016d20 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016d1c:	230e      	movs	r3, #14
 8016d1e:	e008      	b.n	8016d32 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016d20:	6878      	ldr	r0, [r7, #4]
 8016d22:	f000 fc03 	bl	801752c <LoRaMacSerializerJoinRequest>
 8016d26:	4603      	mov	r3, r0
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d001      	beq.n	8016d30 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016d2c:	2310      	movs	r3, #16
 8016d2e:	e000      	b.n	8016d32 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016d30:	2300      	movs	r3, #0
}
 8016d32:	4618      	mov	r0, r3
 8016d34:	3710      	adds	r7, #16
 8016d36:	46bd      	mov	sp, r7
 8016d38:	bd80      	pop	{r7, pc}
 8016d3a:	bf00      	nop
 8016d3c:	20001a60 	.word	0x20001a60

08016d40 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8016d40:	b590      	push	{r4, r7, lr}
 8016d42:	b097      	sub	sp, #92	; 0x5c
 8016d44:	af04      	add	r7, sp, #16
 8016d46:	4603      	mov	r3, r0
 8016d48:	60b9      	str	r1, [r7, #8]
 8016d4a:	607a      	str	r2, [r7, #4]
 8016d4c:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d002      	beq.n	8016d5a <LoRaMacCryptoHandleJoinAccept+0x1a>
 8016d54:	68bb      	ldr	r3, [r7, #8]
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d101      	bne.n	8016d5e <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016d5a:	2309      	movs	r3, #9
 8016d5c:	e0d3      	b.n	8016f06 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016d5e:	2312      	movs	r3, #18
 8016d60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8016d64:	2300      	movs	r3, #0
 8016d66:	617b      	str	r3, [r7, #20]
 8016d68:	f107 0318 	add.w	r3, r7, #24
 8016d6c:	221d      	movs	r2, #29
 8016d6e:	2100      	movs	r1, #0
 8016d70:	4618      	mov	r0, r3
 8016d72:	f009 f8c9 	bl	801ff08 <memset>
    uint8_t versionMinor         = 0;
 8016d76:	2300      	movs	r3, #0
 8016d78:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8016d7a:	4b65      	ldr	r3, [pc, #404]	; (8016f10 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	889b      	ldrh	r3, [r3, #4]
 8016d80:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	681c      	ldr	r4, [r3, #0]
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	791b      	ldrb	r3, [r3, #4]
 8016d8c:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8016d90:	7bf8      	ldrb	r0, [r7, #15]
 8016d92:	f107 0213 	add.w	r2, r7, #19
 8016d96:	9202      	str	r2, [sp, #8]
 8016d98:	f107 0214 	add.w	r2, r7, #20
 8016d9c:	9201      	str	r2, [sp, #4]
 8016d9e:	9300      	str	r3, [sp, #0]
 8016da0:	4623      	mov	r3, r4
 8016da2:	460a      	mov	r2, r1
 8016da4:	68b9      	ldr	r1, [r7, #8]
 8016da6:	f7f7 feed 	bl	800eb84 <SecureElementProcessJoinAccept>
 8016daa:	4603      	mov	r3, r0
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d001      	beq.n	8016db4 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016db0:	230e      	movs	r3, #14
 8016db2:	e0a8      	b.n	8016f06 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	6818      	ldr	r0, [r3, #0]
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	791b      	ldrb	r3, [r3, #4]
 8016dbc:	b29a      	uxth	r2, r3
 8016dbe:	f107 0314 	add.w	r3, r7, #20
 8016dc2:	4619      	mov	r1, r3
 8016dc4:	f004 fb41 	bl	801b44a <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016dc8:	6878      	ldr	r0, [r7, #4]
 8016dca:	f000 f9f0 	bl	80171ae <LoRaMacParserJoinAccept>
 8016dce:	4603      	mov	r3, r0
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d001      	beq.n	8016dd8 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016dd4:	230f      	movs	r3, #15
 8016dd6:	e096      	b.n	8016f06 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8016dd8:	2300      	movs	r3, #0
 8016dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	799b      	ldrb	r3, [r3, #6]
 8016de2:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	79db      	ldrb	r3, [r3, #7]
 8016de8:	021b      	lsls	r3, r3, #8
 8016dea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016dec:	4313      	orrs	r3, r2
 8016dee:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	7a1b      	ldrb	r3, [r3, #8]
 8016df4:	041b      	lsls	r3, r3, #16
 8016df6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016df8:	4313      	orrs	r3, r2
 8016dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8016dfc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016dfe:	f7ff fe4b 	bl	8016a98 <IsJoinNonce10xOk>
 8016e02:	4603      	mov	r3, r0
 8016e04:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    if( isJoinNonceOk == true )
 8016e08:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d010      	beq.n	8016e32 <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8016e10:	4b3f      	ldr	r3, [pc, #252]	; (8016f10 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016e16:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8016e18:	7cfb      	ldrb	r3, [r7, #19]
 8016e1a:	210b      	movs	r1, #11
 8016e1c:	4618      	mov	r0, r3
 8016e1e:	f000 f98b 	bl	8017138 <LoRaMacCryptoDeriveLifeTimeKey>
 8016e22:	4603      	mov	r3, r0
 8016e24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016e28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d005      	beq.n	8016e3c <LoRaMacCryptoHandleJoinAccept+0xfc>
 8016e30:	e001      	b.n	8016e36 <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8016e32:	2303      	movs	r3, #3
 8016e34:	e067      	b.n	8016f06 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 8016e36:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e3a:	e064      	b.n	8016f06 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8016e3c:	210c      	movs	r1, #12
 8016e3e:	2000      	movs	r0, #0
 8016e40:	f000 f97a 	bl	8017138 <LoRaMacCryptoDeriveLifeTimeKey>
 8016e44:	4603      	mov	r3, r0
 8016e46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016e4a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d002      	beq.n	8016e58 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 8016e52:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e56:	e056      	b.n	8016f06 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8016e58:	210a      	movs	r1, #10
 8016e5a:	2000      	movs	r0, #0
 8016e5c:	f000 f96c 	bl	8017138 <LoRaMacCryptoDeriveLifeTimeKey>
 8016e60:	4603      	mov	r3, r0
 8016e62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016e66:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d002      	beq.n	8016e74 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 8016e6e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e72:	e048      	b.n	8016f06 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	7a5b      	ldrb	r3, [r3, #9]
 8016e78:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	7a9b      	ldrb	r3, [r3, #10]
 8016e7e:	021b      	lsls	r3, r3, #8
 8016e80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e82:	4313      	orrs	r3, r2
 8016e84:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	7adb      	ldrb	r3, [r3, #11]
 8016e8a:	041b      	lsls	r3, r3, #16
 8016e8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e8e:	4313      	orrs	r3, r2
 8016e90:	63bb      	str	r3, [r7, #56]	; 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8016e92:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016e96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016e9a:	2009      	movs	r0, #9
 8016e9c:	f7ff fcd8 	bl	8016850 <DeriveSessionKey10x>
 8016ea0:	4603      	mov	r3, r0
 8016ea2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016ea6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d002      	beq.n	8016eb4 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 8016eae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016eb2:	e028      	b.n	8016f06 <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8016eb4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016eb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016eba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016ebc:	2008      	movs	r0, #8
 8016ebe:	f7ff fcc7 	bl	8016850 <DeriveSessionKey10x>
 8016ec2:	4603      	mov	r3, r0
 8016ec4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016ec8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d002      	beq.n	8016ed6 <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 8016ed0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016ed4:	e017      	b.n	8016f06 <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8016ed6:	4b0e      	ldr	r3, [pc, #56]	; (8016f10 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016ed8:	681b      	ldr	r3, [r3, #0]
 8016eda:	7cfa      	ldrb	r2, [r7, #19]
 8016edc:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8016ede:	4b0c      	ldr	r3, [pc, #48]	; (8016f10 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	2200      	movs	r2, #0
 8016ee4:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016ee6:	4b0a      	ldr	r3, [pc, #40]	; (8016f10 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016eee:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016ef0:	4b07      	ldr	r3, [pc, #28]	; (8016f10 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016ef2:	681b      	ldr	r3, [r3, #0]
 8016ef4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016ef8:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016efa:	4b05      	ldr	r3, [pc, #20]	; (8016f10 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016f02:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8016f04:	2300      	movs	r3, #0
}
 8016f06:	4618      	mov	r0, r3
 8016f08:	374c      	adds	r7, #76	; 0x4c
 8016f0a:	46bd      	mov	sp, r7
 8016f0c:	bd90      	pop	{r4, r7, pc}
 8016f0e:	bf00      	nop
 8016f10:	20001a60 	.word	0x20001a60

08016f14 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8016f14:	b590      	push	{r4, r7, lr}
 8016f16:	b08b      	sub	sp, #44	; 0x2c
 8016f18:	af04      	add	r7, sp, #16
 8016f1a:	60f8      	str	r0, [r7, #12]
 8016f1c:	607b      	str	r3, [r7, #4]
 8016f1e:	460b      	mov	r3, r1
 8016f20:	72fb      	strb	r3, [r7, #11]
 8016f22:	4613      	mov	r3, r2
 8016f24:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016f26:	2312      	movs	r3, #18
 8016f28:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016f2a:	2309      	movs	r3, #9
 8016f2c:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d101      	bne.n	8016f38 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016f34:	2309      	movs	r3, #9
 8016f36:	e05f      	b.n	8016ff8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8016f38:	4b31      	ldr	r3, [pc, #196]	; (8017000 <LoRaMacCryptoSecureMessage+0xec>)
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	68db      	ldr	r3, [r3, #12]
 8016f3e:	68fa      	ldr	r2, [r7, #12]
 8016f40:	429a      	cmp	r2, r3
 8016f42:	d201      	bcs.n	8016f48 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016f44:	2306      	movs	r3, #6
 8016f46:	e057      	b.n	8016ff8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d101      	bne.n	8016f56 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8016f52:	2308      	movs	r3, #8
 8016f54:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8016f56:	4b2a      	ldr	r3, [pc, #168]	; (8017000 <LoRaMacCryptoSecureMessage+0xec>)
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	68db      	ldr	r3, [r3, #12]
 8016f5c:	68fa      	ldr	r2, [r7, #12]
 8016f5e:	429a      	cmp	r2, r3
 8016f60:	d916      	bls.n	8016f90 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016f6c:	b219      	sxth	r1, r3
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	689c      	ldr	r4, [r3, #8]
 8016f72:	7dfa      	ldrb	r2, [r7, #23]
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	9301      	str	r3, [sp, #4]
 8016f78:	2300      	movs	r3, #0
 8016f7a:	9300      	str	r3, [sp, #0]
 8016f7c:	4623      	mov	r3, r4
 8016f7e:	f7ff fa73 	bl	8016468 <PayloadEncrypt>
 8016f82:	4603      	mov	r3, r0
 8016f84:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016f86:	7dbb      	ldrb	r3, [r7, #22]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d001      	beq.n	8016f90 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8016f8c:	7dbb      	ldrb	r3, [r7, #22]
 8016f8e:	e033      	b.n	8016ff8 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016f90:	6878      	ldr	r0, [r7, #4]
 8016f92:	f000 fb4d 	bl	8017630 <LoRaMacSerializerData>
 8016f96:	4603      	mov	r3, r0
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d001      	beq.n	8016fa0 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016f9c:	2310      	movs	r3, #16
 8016f9e:	e02b      	b.n	8016ff8 <LoRaMacCryptoSecureMessage+0xe4>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8016fa0:	2308      	movs	r3, #8
 8016fa2:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	6818      	ldr	r0, [r3, #0]
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	791b      	ldrb	r3, [r3, #4]
 8016fac:	b29b      	uxth	r3, r3
 8016fae:	3b04      	subs	r3, #4
 8016fb0:	b299      	uxth	r1, r3
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	689b      	ldr	r3, [r3, #8]
 8016fb6:	687a      	ldr	r2, [r7, #4]
 8016fb8:	322c      	adds	r2, #44	; 0x2c
 8016fba:	7dfc      	ldrb	r4, [r7, #23]
 8016fbc:	9203      	str	r2, [sp, #12]
 8016fbe:	68fa      	ldr	r2, [r7, #12]
 8016fc0:	9202      	str	r2, [sp, #8]
 8016fc2:	9301      	str	r3, [sp, #4]
 8016fc4:	2300      	movs	r3, #0
 8016fc6:	9300      	str	r3, [sp, #0]
 8016fc8:	2300      	movs	r3, #0
 8016fca:	4622      	mov	r2, r4
 8016fcc:	f7ff fb4d 	bl	801666a <ComputeCmacB0>
 8016fd0:	4603      	mov	r3, r0
 8016fd2:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016fd4:	7dbb      	ldrb	r3, [r7, #22]
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d001      	beq.n	8016fde <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8016fda:	7dbb      	ldrb	r3, [r7, #22]
 8016fdc:	e00c      	b.n	8016ff8 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016fde:	6878      	ldr	r0, [r7, #4]
 8016fe0:	f000 fb26 	bl	8017630 <LoRaMacSerializerData>
 8016fe4:	4603      	mov	r3, r0
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d001      	beq.n	8016fee <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016fea:	2310      	movs	r3, #16
 8016fec:	e004      	b.n	8016ff8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8016fee:	4b04      	ldr	r3, [pc, #16]	; (8017000 <LoRaMacCryptoSecureMessage+0xec>)
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	68fa      	ldr	r2, [r7, #12]
 8016ff4:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8016ff6:	2300      	movs	r3, #0
}
 8016ff8:	4618      	mov	r0, r3
 8016ffa:	371c      	adds	r7, #28
 8016ffc:	46bd      	mov	sp, r7
 8016ffe:	bd90      	pop	{r4, r7, pc}
 8017000:	20001a60 	.word	0x20001a60

08017004 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8017004:	b590      	push	{r4, r7, lr}
 8017006:	b08b      	sub	sp, #44	; 0x2c
 8017008:	af04      	add	r7, sp, #16
 801700a:	60b9      	str	r1, [r7, #8]
 801700c:	607b      	str	r3, [r7, #4]
 801700e:	4603      	mov	r3, r0
 8017010:	73fb      	strb	r3, [r7, #15]
 8017012:	4613      	mov	r3, r2
 8017014:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8017016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017018:	2b00      	cmp	r3, #0
 801701a:	d101      	bne.n	8017020 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801701c:	2309      	movs	r3, #9
 801701e:	e084      	b.n	801712a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8017020:	7bbb      	ldrb	r3, [r7, #14]
 8017022:	6879      	ldr	r1, [r7, #4]
 8017024:	4618      	mov	r0, r3
 8017026:	f7ff fc9f 	bl	8016968 <CheckFCntDown>
 801702a:	4603      	mov	r3, r0
 801702c:	f083 0301 	eor.w	r3, r3, #1
 8017030:	b2db      	uxtb	r3, r3
 8017032:	2b00      	cmp	r3, #0
 8017034:	d001      	beq.n	801703a <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8017036:	2306      	movs	r3, #6
 8017038:	e077      	b.n	801712a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801703a:	2312      	movs	r3, #18
 801703c:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801703e:	2309      	movs	r3, #9
 8017040:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8017042:	2308      	movs	r3, #8
 8017044:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8017046:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017048:	f000 f97c 	bl	8017344 <LoRaMacParserData>
 801704c:	4603      	mov	r3, r0
 801704e:	2b00      	cmp	r3, #0
 8017050:	d001      	beq.n	8017056 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8017052:	230f      	movs	r3, #15
 8017054:	e069      	b.n	801712a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8017056:	f107 0210 	add.w	r2, r7, #16
 801705a:	7bfb      	ldrb	r3, [r7, #15]
 801705c:	4611      	mov	r1, r2
 801705e:	4618      	mov	r0, r3
 8017060:	f7ff fbd0 	bl	8016804 <GetKeyAddrItem>
 8017064:	4603      	mov	r3, r0
 8017066:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017068:	7d7b      	ldrb	r3, [r7, #21]
 801706a:	2b00      	cmp	r3, #0
 801706c:	d001      	beq.n	8017072 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801706e:	7d7b      	ldrb	r3, [r7, #21]
 8017070:	e05b      	b.n	801712a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8017072:	693b      	ldr	r3, [r7, #16]
 8017074:	785b      	ldrb	r3, [r3, #1]
 8017076:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8017078:	693b      	ldr	r3, [r7, #16]
 801707a:	789b      	ldrb	r3, [r3, #2]
 801707c:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801707e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017080:	689b      	ldr	r3, [r3, #8]
 8017082:	68ba      	ldr	r2, [r7, #8]
 8017084:	429a      	cmp	r2, r3
 8017086:	d001      	beq.n	801708c <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8017088:	2302      	movs	r3, #2
 801708a:	e04e      	b.n	801712a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 801708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801708e:	7b1b      	ldrb	r3, [r3, #12]
 8017090:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8017094:	b2db      	uxtb	r3, r3
 8017096:	2b00      	cmp	r3, #0
 8017098:	bf14      	ite	ne
 801709a:	2301      	movne	r3, #1
 801709c:	2300      	moveq	r3, #0
 801709e:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80170a0:	4b24      	ldr	r3, [pc, #144]	; (8017134 <LoRaMacCryptoUnsecureMessage+0x130>)
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	789b      	ldrb	r3, [r3, #2]
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d101      	bne.n	80170ae <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 80170aa:	2300      	movs	r3, #0
 80170ac:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 80170ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170b0:	6818      	ldr	r0, [r3, #0]
 80170b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170b4:	791b      	ldrb	r3, [r3, #4]
 80170b6:	b29b      	uxth	r3, r3
 80170b8:	3b04      	subs	r3, #4
 80170ba:	b299      	uxth	r1, r3
 80170bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170c0:	7dbc      	ldrb	r4, [r7, #22]
 80170c2:	7d3a      	ldrb	r2, [r7, #20]
 80170c4:	9303      	str	r3, [sp, #12]
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	9302      	str	r3, [sp, #8]
 80170ca:	68bb      	ldr	r3, [r7, #8]
 80170cc:	9301      	str	r3, [sp, #4]
 80170ce:	2301      	movs	r3, #1
 80170d0:	9300      	str	r3, [sp, #0]
 80170d2:	4623      	mov	r3, r4
 80170d4:	f7ff fb07 	bl	80166e6 <VerifyCmacB0>
 80170d8:	4603      	mov	r3, r0
 80170da:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80170dc:	7d7b      	ldrb	r3, [r7, #21]
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d001      	beq.n	80170e6 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 80170e2:	7d7b      	ldrb	r3, [r7, #21]
 80170e4:	e021      	b.n	801712a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80170e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d101      	bne.n	80170f4 <LoRaMacCryptoUnsecureMessage+0xf0>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80170f0:	2308      	movs	r3, #8
 80170f2:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80170f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170f6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80170f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80170fe:	b219      	sxth	r1, r3
 8017100:	7dfa      	ldrb	r2, [r7, #23]
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	9301      	str	r3, [sp, #4]
 8017106:	2301      	movs	r3, #1
 8017108:	9300      	str	r3, [sp, #0]
 801710a:	68bb      	ldr	r3, [r7, #8]
 801710c:	f7ff f9ac 	bl	8016468 <PayloadEncrypt>
 8017110:	4603      	mov	r3, r0
 8017112:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017114:	7d7b      	ldrb	r3, [r7, #21]
 8017116:	2b00      	cmp	r3, #0
 8017118:	d001      	beq.n	801711e <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 801711a:	7d7b      	ldrb	r3, [r7, #21]
 801711c:	e005      	b.n	801712a <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 801711e:	7bbb      	ldrb	r3, [r7, #14]
 8017120:	6879      	ldr	r1, [r7, #4]
 8017122:	4618      	mov	r0, r3
 8017124:	f7ff fc44 	bl	80169b0 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8017128:	2300      	movs	r3, #0
}
 801712a:	4618      	mov	r0, r3
 801712c:	371c      	adds	r7, #28
 801712e:	46bd      	mov	sp, r7
 8017130:	bd90      	pop	{r4, r7, pc}
 8017132:	bf00      	nop
 8017134:	20001a60 	.word	0x20001a60

08017138 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8017138:	b580      	push	{r7, lr}
 801713a:	b088      	sub	sp, #32
 801713c:	af00      	add	r7, sp, #0
 801713e:	4603      	mov	r3, r0
 8017140:	460a      	mov	r2, r1
 8017142:	71fb      	strb	r3, [r7, #7]
 8017144:	4613      	mov	r3, r2
 8017146:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8017148:	2300      	movs	r3, #0
 801714a:	60fb      	str	r3, [r7, #12]
 801714c:	f107 0310 	add.w	r3, r7, #16
 8017150:	2200      	movs	r2, #0
 8017152:	601a      	str	r2, [r3, #0]
 8017154:	605a      	str	r2, [r3, #4]
 8017156:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8017158:	2300      	movs	r3, #0
 801715a:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 801715c:	79bb      	ldrb	r3, [r7, #6]
 801715e:	2b0c      	cmp	r3, #12
 8017160:	d00b      	beq.n	801717a <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 8017162:	2b0c      	cmp	r3, #12
 8017164:	dc0f      	bgt.n	8017186 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 8017166:	2b0a      	cmp	r3, #10
 8017168:	d00a      	beq.n	8017180 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 801716a:	2b0b      	cmp	r3, #11
 801716c:	d10b      	bne.n	8017186 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 801716e:	79fb      	ldrb	r3, [r7, #7]
 8017170:	2b01      	cmp	r3, #1
 8017172:	d10a      	bne.n	801718a <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8017174:	2320      	movs	r3, #32
 8017176:	733b      	strb	r3, [r7, #12]
            }
            break;
 8017178:	e007      	b.n	801718a <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 801717a:	230b      	movs	r3, #11
 801717c:	77fb      	strb	r3, [r7, #31]
            break;
 801717e:	e005      	b.n	801718c <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8017180:	2330      	movs	r3, #48	; 0x30
 8017182:	733b      	strb	r3, [r7, #12]
            break;
 8017184:	e002      	b.n	801718c <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8017186:	230a      	movs	r3, #10
 8017188:	e00d      	b.n	80171a6 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 801718a:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 801718c:	79ba      	ldrb	r2, [r7, #6]
 801718e:	7ff9      	ldrb	r1, [r7, #31]
 8017190:	f107 030c 	add.w	r3, r7, #12
 8017194:	4618      	mov	r0, r3
 8017196:	f7f7 fcb5 	bl	800eb04 <SecureElementDeriveAndStoreKey>
 801719a:	4603      	mov	r3, r0
 801719c:	2b00      	cmp	r3, #0
 801719e:	d001      	beq.n	80171a4 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80171a0:	230e      	movs	r3, #14
 80171a2:	e000      	b.n	80171a6 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80171a4:	2300      	movs	r3, #0
}
 80171a6:	4618      	mov	r0, r3
 80171a8:	3720      	adds	r7, #32
 80171aa:	46bd      	mov	sp, r7
 80171ac:	bd80      	pop	{r7, pc}

080171ae <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80171ae:	b580      	push	{r7, lr}
 80171b0:	b084      	sub	sp, #16
 80171b2:	af00      	add	r7, sp, #0
 80171b4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d003      	beq.n	80171c4 <LoRaMacParserJoinAccept+0x16>
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d101      	bne.n	80171c8 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80171c4:	2302      	movs	r3, #2
 80171c6:	e0b9      	b.n	801733c <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 80171c8:	2300      	movs	r3, #0
 80171ca:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	681a      	ldr	r2, [r3, #0]
 80171d0:	89fb      	ldrh	r3, [r7, #14]
 80171d2:	1c59      	adds	r1, r3, #1
 80171d4:	81f9      	strh	r1, [r7, #14]
 80171d6:	4413      	add	r3, r2
 80171d8:	781a      	ldrb	r2, [r3, #0]
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	1d98      	adds	r0, r3, #6
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	681a      	ldr	r2, [r3, #0]
 80171e6:	89fb      	ldrh	r3, [r7, #14]
 80171e8:	4413      	add	r3, r2
 80171ea:	2203      	movs	r2, #3
 80171ec:	4619      	mov	r1, r3
 80171ee:	f004 f92c 	bl	801b44a <memcpy1>
    bufItr = bufItr + 3;
 80171f2:	89fb      	ldrh	r3, [r7, #14]
 80171f4:	3303      	adds	r3, #3
 80171f6:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	f103 0009 	add.w	r0, r3, #9
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	681a      	ldr	r2, [r3, #0]
 8017202:	89fb      	ldrh	r3, [r7, #14]
 8017204:	4413      	add	r3, r2
 8017206:	2203      	movs	r2, #3
 8017208:	4619      	mov	r1, r3
 801720a:	f004 f91e 	bl	801b44a <memcpy1>
    bufItr = bufItr + 3;
 801720e:	89fb      	ldrh	r3, [r7, #14]
 8017210:	3303      	adds	r3, #3
 8017212:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	681a      	ldr	r2, [r3, #0]
 8017218:	89fb      	ldrh	r3, [r7, #14]
 801721a:	1c59      	adds	r1, r3, #1
 801721c:	81f9      	strh	r1, [r7, #14]
 801721e:	4413      	add	r3, r2
 8017220:	781b      	ldrb	r3, [r3, #0]
 8017222:	461a      	mov	r2, r3
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	681a      	ldr	r2, [r3, #0]
 801722c:	89fb      	ldrh	r3, [r7, #14]
 801722e:	1c59      	adds	r1, r3, #1
 8017230:	81f9      	strh	r1, [r7, #14]
 8017232:	4413      	add	r3, r2
 8017234:	781b      	ldrb	r3, [r3, #0]
 8017236:	021a      	lsls	r2, r3, #8
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	68db      	ldr	r3, [r3, #12]
 801723c:	431a      	orrs	r2, r3
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	681a      	ldr	r2, [r3, #0]
 8017246:	89fb      	ldrh	r3, [r7, #14]
 8017248:	1c59      	adds	r1, r3, #1
 801724a:	81f9      	strh	r1, [r7, #14]
 801724c:	4413      	add	r3, r2
 801724e:	781b      	ldrb	r3, [r3, #0]
 8017250:	041a      	lsls	r2, r3, #16
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	68db      	ldr	r3, [r3, #12]
 8017256:	431a      	orrs	r2, r3
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	681a      	ldr	r2, [r3, #0]
 8017260:	89fb      	ldrh	r3, [r7, #14]
 8017262:	1c59      	adds	r1, r3, #1
 8017264:	81f9      	strh	r1, [r7, #14]
 8017266:	4413      	add	r3, r2
 8017268:	781b      	ldrb	r3, [r3, #0]
 801726a:	061a      	lsls	r2, r3, #24
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	68db      	ldr	r3, [r3, #12]
 8017270:	431a      	orrs	r2, r3
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	681a      	ldr	r2, [r3, #0]
 801727a:	89fb      	ldrh	r3, [r7, #14]
 801727c:	1c59      	adds	r1, r3, #1
 801727e:	81f9      	strh	r1, [r7, #14]
 8017280:	4413      	add	r3, r2
 8017282:	781a      	ldrb	r2, [r3, #0]
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	681a      	ldr	r2, [r3, #0]
 801728c:	89fb      	ldrh	r3, [r7, #14]
 801728e:	1c59      	adds	r1, r3, #1
 8017290:	81f9      	strh	r1, [r7, #14]
 8017292:	4413      	add	r3, r2
 8017294:	781a      	ldrb	r2, [r3, #0]
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	791b      	ldrb	r3, [r3, #4]
 801729e:	1f1a      	subs	r2, r3, #4
 80172a0:	89fb      	ldrh	r3, [r7, #14]
 80172a2:	1ad3      	subs	r3, r2, r3
 80172a4:	2b10      	cmp	r3, #16
 80172a6:	d10e      	bne.n	80172c6 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	f103 0012 	add.w	r0, r3, #18
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	681a      	ldr	r2, [r3, #0]
 80172b2:	89fb      	ldrh	r3, [r7, #14]
 80172b4:	4413      	add	r3, r2
 80172b6:	2210      	movs	r2, #16
 80172b8:	4619      	mov	r1, r3
 80172ba:	f004 f8c6 	bl	801b44a <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80172be:	89fb      	ldrh	r3, [r7, #14]
 80172c0:	3310      	adds	r3, #16
 80172c2:	81fb      	strh	r3, [r7, #14]
 80172c4:	e008      	b.n	80172d8 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	791b      	ldrb	r3, [r3, #4]
 80172ca:	1f1a      	subs	r2, r3, #4
 80172cc:	89fb      	ldrh	r3, [r7, #14]
 80172ce:	1ad3      	subs	r3, r2, r3
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	dd01      	ble.n	80172d8 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 80172d4:	2301      	movs	r3, #1
 80172d6:	e031      	b.n	801733c <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	681a      	ldr	r2, [r3, #0]
 80172dc:	89fb      	ldrh	r3, [r7, #14]
 80172de:	1c59      	adds	r1, r3, #1
 80172e0:	81f9      	strh	r1, [r7, #14]
 80172e2:	4413      	add	r3, r2
 80172e4:	781b      	ldrb	r3, [r3, #0]
 80172e6:	461a      	mov	r2, r3
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	681a      	ldr	r2, [r3, #0]
 80172f0:	89fb      	ldrh	r3, [r7, #14]
 80172f2:	1c59      	adds	r1, r3, #1
 80172f4:	81f9      	strh	r1, [r7, #14]
 80172f6:	4413      	add	r3, r2
 80172f8:	781b      	ldrb	r3, [r3, #0]
 80172fa:	021a      	lsls	r2, r3, #8
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017300:	431a      	orrs	r2, r3
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	681a      	ldr	r2, [r3, #0]
 801730a:	89fb      	ldrh	r3, [r7, #14]
 801730c:	1c59      	adds	r1, r3, #1
 801730e:	81f9      	strh	r1, [r7, #14]
 8017310:	4413      	add	r3, r2
 8017312:	781b      	ldrb	r3, [r3, #0]
 8017314:	041a      	lsls	r2, r3, #16
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801731a:	431a      	orrs	r2, r3
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	681a      	ldr	r2, [r3, #0]
 8017324:	89fb      	ldrh	r3, [r7, #14]
 8017326:	1c59      	adds	r1, r3, #1
 8017328:	81f9      	strh	r1, [r7, #14]
 801732a:	4413      	add	r3, r2
 801732c:	781b      	ldrb	r3, [r3, #0]
 801732e:	061a      	lsls	r2, r3, #24
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017334:	431a      	orrs	r2, r3
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 801733a:	2300      	movs	r3, #0
}
 801733c:	4618      	mov	r0, r3
 801733e:	3710      	adds	r7, #16
 8017340:	46bd      	mov	sp, r7
 8017342:	bd80      	pop	{r7, pc}

08017344 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8017344:	b580      	push	{r7, lr}
 8017346:	b084      	sub	sp, #16
 8017348:	af00      	add	r7, sp, #0
 801734a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	2b00      	cmp	r3, #0
 8017350:	d003      	beq.n	801735a <LoRaMacParserData+0x16>
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	681b      	ldr	r3, [r3, #0]
 8017356:	2b00      	cmp	r3, #0
 8017358:	d101      	bne.n	801735e <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801735a:	2302      	movs	r3, #2
 801735c:	e0e2      	b.n	8017524 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 801735e:	2300      	movs	r3, #0
 8017360:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	681a      	ldr	r2, [r3, #0]
 8017366:	89fb      	ldrh	r3, [r7, #14]
 8017368:	1c59      	adds	r1, r3, #1
 801736a:	81f9      	strh	r1, [r7, #14]
 801736c:	4413      	add	r3, r2
 801736e:	781a      	ldrb	r2, [r3, #0]
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	681a      	ldr	r2, [r3, #0]
 8017378:	89fb      	ldrh	r3, [r7, #14]
 801737a:	1c59      	adds	r1, r3, #1
 801737c:	81f9      	strh	r1, [r7, #14]
 801737e:	4413      	add	r3, r2
 8017380:	781b      	ldrb	r3, [r3, #0]
 8017382:	461a      	mov	r2, r3
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	681a      	ldr	r2, [r3, #0]
 801738c:	89fb      	ldrh	r3, [r7, #14]
 801738e:	1c59      	adds	r1, r3, #1
 8017390:	81f9      	strh	r1, [r7, #14]
 8017392:	4413      	add	r3, r2
 8017394:	781b      	ldrb	r3, [r3, #0]
 8017396:	021a      	lsls	r2, r3, #8
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	689b      	ldr	r3, [r3, #8]
 801739c:	431a      	orrs	r2, r3
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	681a      	ldr	r2, [r3, #0]
 80173a6:	89fb      	ldrh	r3, [r7, #14]
 80173a8:	1c59      	adds	r1, r3, #1
 80173aa:	81f9      	strh	r1, [r7, #14]
 80173ac:	4413      	add	r3, r2
 80173ae:	781b      	ldrb	r3, [r3, #0]
 80173b0:	041a      	lsls	r2, r3, #16
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	689b      	ldr	r3, [r3, #8]
 80173b6:	431a      	orrs	r2, r3
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	681a      	ldr	r2, [r3, #0]
 80173c0:	89fb      	ldrh	r3, [r7, #14]
 80173c2:	1c59      	adds	r1, r3, #1
 80173c4:	81f9      	strh	r1, [r7, #14]
 80173c6:	4413      	add	r3, r2
 80173c8:	781b      	ldrb	r3, [r3, #0]
 80173ca:	061a      	lsls	r2, r3, #24
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	689b      	ldr	r3, [r3, #8]
 80173d0:	431a      	orrs	r2, r3
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	681a      	ldr	r2, [r3, #0]
 80173da:	89fb      	ldrh	r3, [r7, #14]
 80173dc:	1c59      	adds	r1, r3, #1
 80173de:	81f9      	strh	r1, [r7, #14]
 80173e0:	4413      	add	r3, r2
 80173e2:	781a      	ldrb	r2, [r3, #0]
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	681a      	ldr	r2, [r3, #0]
 80173ec:	89fb      	ldrh	r3, [r7, #14]
 80173ee:	1c59      	adds	r1, r3, #1
 80173f0:	81f9      	strh	r1, [r7, #14]
 80173f2:	4413      	add	r3, r2
 80173f4:	781b      	ldrb	r3, [r3, #0]
 80173f6:	b29a      	uxth	r2, r3
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	681a      	ldr	r2, [r3, #0]
 8017400:	89fb      	ldrh	r3, [r7, #14]
 8017402:	1c59      	adds	r1, r3, #1
 8017404:	81f9      	strh	r1, [r7, #14]
 8017406:	4413      	add	r3, r2
 8017408:	781b      	ldrb	r3, [r3, #0]
 801740a:	0219      	lsls	r1, r3, #8
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	89db      	ldrh	r3, [r3, #14]
 8017410:	b21a      	sxth	r2, r3
 8017412:	b20b      	sxth	r3, r1
 8017414:	4313      	orrs	r3, r2
 8017416:	b21b      	sxth	r3, r3
 8017418:	b29a      	uxth	r2, r3
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	f103 0010 	add.w	r0, r3, #16
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	681a      	ldr	r2, [r3, #0]
 8017428:	89fb      	ldrh	r3, [r7, #14]
 801742a:	18d1      	adds	r1, r2, r3
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	7b1b      	ldrb	r3, [r3, #12]
 8017430:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017434:	b2db      	uxtb	r3, r3
 8017436:	b29b      	uxth	r3, r3
 8017438:	461a      	mov	r2, r3
 801743a:	f004 f806 	bl	801b44a <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	7b1b      	ldrb	r3, [r3, #12]
 8017442:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017446:	b2db      	uxtb	r3, r3
 8017448:	b29a      	uxth	r2, r3
 801744a:	89fb      	ldrh	r3, [r7, #14]
 801744c:	4413      	add	r3, r2
 801744e:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	2200      	movs	r2, #0
 8017454:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	2200      	movs	r2, #0
 801745c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	791b      	ldrb	r3, [r3, #4]
 8017464:	461a      	mov	r2, r3
 8017466:	89fb      	ldrh	r3, [r7, #14]
 8017468:	1ad3      	subs	r3, r2, r3
 801746a:	2b04      	cmp	r3, #4
 801746c:	dd28      	ble.n	80174c0 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	681a      	ldr	r2, [r3, #0]
 8017472:	89fb      	ldrh	r3, [r7, #14]
 8017474:	1c59      	adds	r1, r3, #1
 8017476:	81f9      	strh	r1, [r7, #14]
 8017478:	4413      	add	r3, r2
 801747a:	781a      	ldrb	r2, [r3, #0]
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	791a      	ldrb	r2, [r3, #4]
 8017486:	89fb      	ldrh	r3, [r7, #14]
 8017488:	b2db      	uxtb	r3, r3
 801748a:	1ad3      	subs	r3, r2, r3
 801748c:	b2db      	uxtb	r3, r3
 801748e:	3b04      	subs	r3, #4
 8017490:	b2da      	uxtb	r2, r3
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	681a      	ldr	r2, [r3, #0]
 80174a0:	89fb      	ldrh	r3, [r7, #14]
 80174a2:	18d1      	adds	r1, r2, r3
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80174aa:	b29b      	uxth	r3, r3
 80174ac:	461a      	mov	r2, r3
 80174ae:	f003 ffcc 	bl	801b44a <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80174b8:	b29a      	uxth	r2, r3
 80174ba:	89fb      	ldrh	r3, [r7, #14]
 80174bc:	4413      	add	r3, r2
 80174be:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	681a      	ldr	r2, [r3, #0]
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	791b      	ldrb	r3, [r3, #4]
 80174c8:	3b04      	subs	r3, #4
 80174ca:	4413      	add	r3, r2
 80174cc:	781b      	ldrb	r3, [r3, #0]
 80174ce:	461a      	mov	r2, r3
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	6819      	ldr	r1, [r3, #0]
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	791b      	ldrb	r3, [r3, #4]
 80174e0:	3b03      	subs	r3, #3
 80174e2:	440b      	add	r3, r1
 80174e4:	781b      	ldrb	r3, [r3, #0]
 80174e6:	021b      	lsls	r3, r3, #8
 80174e8:	431a      	orrs	r2, r3
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	6819      	ldr	r1, [r3, #0]
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	791b      	ldrb	r3, [r3, #4]
 80174fa:	3b02      	subs	r3, #2
 80174fc:	440b      	add	r3, r1
 80174fe:	781b      	ldrb	r3, [r3, #0]
 8017500:	041b      	lsls	r3, r3, #16
 8017502:	431a      	orrs	r2, r3
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	6819      	ldr	r1, [r3, #0]
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	791b      	ldrb	r3, [r3, #4]
 8017514:	3b01      	subs	r3, #1
 8017516:	440b      	add	r3, r1
 8017518:	781b      	ldrb	r3, [r3, #0]
 801751a:	061b      	lsls	r3, r3, #24
 801751c:	431a      	orrs	r2, r3
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8017522:	2300      	movs	r3, #0
}
 8017524:	4618      	mov	r0, r3
 8017526:	3710      	adds	r7, #16
 8017528:	46bd      	mov	sp, r7
 801752a:	bd80      	pop	{r7, pc}

0801752c <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801752c:	b580      	push	{r7, lr}
 801752e:	b084      	sub	sp, #16
 8017530:	af00      	add	r7, sp, #0
 8017532:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	2b00      	cmp	r3, #0
 8017538:	d003      	beq.n	8017542 <LoRaMacSerializerJoinRequest+0x16>
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d101      	bne.n	8017546 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8017542:	2301      	movs	r3, #1
 8017544:	e070      	b.n	8017628 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8017546:	2300      	movs	r3, #0
 8017548:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	791b      	ldrb	r3, [r3, #4]
 801754e:	2b16      	cmp	r3, #22
 8017550:	d801      	bhi.n	8017556 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8017552:	2302      	movs	r3, #2
 8017554:	e068      	b.n	8017628 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	681a      	ldr	r2, [r3, #0]
 801755a:	89fb      	ldrh	r3, [r7, #14]
 801755c:	1c59      	adds	r1, r3, #1
 801755e:	81f9      	strh	r1, [r7, #14]
 8017560:	4413      	add	r3, r2
 8017562:	687a      	ldr	r2, [r7, #4]
 8017564:	7952      	ldrb	r2, [r2, #5]
 8017566:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	681a      	ldr	r2, [r3, #0]
 801756c:	89fb      	ldrh	r3, [r7, #14]
 801756e:	18d0      	adds	r0, r2, r3
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	3306      	adds	r3, #6
 8017574:	2208      	movs	r2, #8
 8017576:	4619      	mov	r1, r3
 8017578:	f003 ff82 	bl	801b480 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 801757c:	89fb      	ldrh	r3, [r7, #14]
 801757e:	3308      	adds	r3, #8
 8017580:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	681a      	ldr	r2, [r3, #0]
 8017586:	89fb      	ldrh	r3, [r7, #14]
 8017588:	18d0      	adds	r0, r2, r3
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	330e      	adds	r3, #14
 801758e:	2208      	movs	r2, #8
 8017590:	4619      	mov	r1, r3
 8017592:	f003 ff75 	bl	801b480 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8017596:	89fb      	ldrh	r3, [r7, #14]
 8017598:	3308      	adds	r3, #8
 801759a:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	8ad9      	ldrh	r1, [r3, #22]
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	681a      	ldr	r2, [r3, #0]
 80175a4:	89fb      	ldrh	r3, [r7, #14]
 80175a6:	1c58      	adds	r0, r3, #1
 80175a8:	81f8      	strh	r0, [r7, #14]
 80175aa:	4413      	add	r3, r2
 80175ac:	b2ca      	uxtb	r2, r1
 80175ae:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	8adb      	ldrh	r3, [r3, #22]
 80175b4:	0a1b      	lsrs	r3, r3, #8
 80175b6:	b299      	uxth	r1, r3
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	681a      	ldr	r2, [r3, #0]
 80175bc:	89fb      	ldrh	r3, [r7, #14]
 80175be:	1c58      	adds	r0, r3, #1
 80175c0:	81f8      	strh	r0, [r7, #14]
 80175c2:	4413      	add	r3, r2
 80175c4:	b2ca      	uxtb	r2, r1
 80175c6:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	6999      	ldr	r1, [r3, #24]
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	681a      	ldr	r2, [r3, #0]
 80175d0:	89fb      	ldrh	r3, [r7, #14]
 80175d2:	1c58      	adds	r0, r3, #1
 80175d4:	81f8      	strh	r0, [r7, #14]
 80175d6:	4413      	add	r3, r2
 80175d8:	b2ca      	uxtb	r2, r1
 80175da:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	699b      	ldr	r3, [r3, #24]
 80175e0:	0a19      	lsrs	r1, r3, #8
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	681a      	ldr	r2, [r3, #0]
 80175e6:	89fb      	ldrh	r3, [r7, #14]
 80175e8:	1c58      	adds	r0, r3, #1
 80175ea:	81f8      	strh	r0, [r7, #14]
 80175ec:	4413      	add	r3, r2
 80175ee:	b2ca      	uxtb	r2, r1
 80175f0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	699b      	ldr	r3, [r3, #24]
 80175f6:	0c19      	lsrs	r1, r3, #16
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	681a      	ldr	r2, [r3, #0]
 80175fc:	89fb      	ldrh	r3, [r7, #14]
 80175fe:	1c58      	adds	r0, r3, #1
 8017600:	81f8      	strh	r0, [r7, #14]
 8017602:	4413      	add	r3, r2
 8017604:	b2ca      	uxtb	r2, r1
 8017606:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	699b      	ldr	r3, [r3, #24]
 801760c:	0e19      	lsrs	r1, r3, #24
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	681a      	ldr	r2, [r3, #0]
 8017612:	89fb      	ldrh	r3, [r7, #14]
 8017614:	1c58      	adds	r0, r3, #1
 8017616:	81f8      	strh	r0, [r7, #14]
 8017618:	4413      	add	r3, r2
 801761a:	b2ca      	uxtb	r2, r1
 801761c:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801761e:	89fb      	ldrh	r3, [r7, #14]
 8017620:	b2da      	uxtb	r2, r3
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8017626:	2300      	movs	r3, #0
}
 8017628:	4618      	mov	r0, r3
 801762a:	3710      	adds	r7, #16
 801762c:	46bd      	mov	sp, r7
 801762e:	bd80      	pop	{r7, pc}

08017630 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8017630:	b580      	push	{r7, lr}
 8017632:	b084      	sub	sp, #16
 8017634:	af00      	add	r7, sp, #0
 8017636:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	2b00      	cmp	r3, #0
 801763c:	d003      	beq.n	8017646 <LoRaMacSerializerData+0x16>
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	681b      	ldr	r3, [r3, #0]
 8017642:	2b00      	cmp	r3, #0
 8017644:	d101      	bne.n	801764a <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8017646:	2301      	movs	r3, #1
 8017648:	e0e5      	b.n	8017816 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 801764a:	2300      	movs	r3, #0
 801764c:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 801764e:	2308      	movs	r3, #8
 8017650:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	7b1b      	ldrb	r3, [r3, #12]
 8017656:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801765a:	b2db      	uxtb	r3, r3
 801765c:	b29a      	uxth	r2, r3
 801765e:	89bb      	ldrh	r3, [r7, #12]
 8017660:	4413      	add	r3, r2
 8017662:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801766a:	2b00      	cmp	r3, #0
 801766c:	d002      	beq.n	8017674 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 801766e:	89bb      	ldrh	r3, [r7, #12]
 8017670:	3301      	adds	r3, #1
 8017672:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801767a:	b29a      	uxth	r2, r3
 801767c:	89bb      	ldrh	r3, [r7, #12]
 801767e:	4413      	add	r3, r2
 8017680:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8017682:	89bb      	ldrh	r3, [r7, #12]
 8017684:	3304      	adds	r3, #4
 8017686:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	791b      	ldrb	r3, [r3, #4]
 801768c:	b29b      	uxth	r3, r3
 801768e:	89ba      	ldrh	r2, [r7, #12]
 8017690:	429a      	cmp	r2, r3
 8017692:	d901      	bls.n	8017698 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8017694:	2302      	movs	r3, #2
 8017696:	e0be      	b.n	8017816 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	681a      	ldr	r2, [r3, #0]
 801769c:	89fb      	ldrh	r3, [r7, #14]
 801769e:	1c59      	adds	r1, r3, #1
 80176a0:	81f9      	strh	r1, [r7, #14]
 80176a2:	4413      	add	r3, r2
 80176a4:	687a      	ldr	r2, [r7, #4]
 80176a6:	7952      	ldrb	r2, [r2, #5]
 80176a8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	6899      	ldr	r1, [r3, #8]
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	681a      	ldr	r2, [r3, #0]
 80176b2:	89fb      	ldrh	r3, [r7, #14]
 80176b4:	1c58      	adds	r0, r3, #1
 80176b6:	81f8      	strh	r0, [r7, #14]
 80176b8:	4413      	add	r3, r2
 80176ba:	b2ca      	uxtb	r2, r1
 80176bc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	689b      	ldr	r3, [r3, #8]
 80176c2:	0a19      	lsrs	r1, r3, #8
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	681a      	ldr	r2, [r3, #0]
 80176c8:	89fb      	ldrh	r3, [r7, #14]
 80176ca:	1c58      	adds	r0, r3, #1
 80176cc:	81f8      	strh	r0, [r7, #14]
 80176ce:	4413      	add	r3, r2
 80176d0:	b2ca      	uxtb	r2, r1
 80176d2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	689b      	ldr	r3, [r3, #8]
 80176d8:	0c19      	lsrs	r1, r3, #16
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	681a      	ldr	r2, [r3, #0]
 80176de:	89fb      	ldrh	r3, [r7, #14]
 80176e0:	1c58      	adds	r0, r3, #1
 80176e2:	81f8      	strh	r0, [r7, #14]
 80176e4:	4413      	add	r3, r2
 80176e6:	b2ca      	uxtb	r2, r1
 80176e8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	689b      	ldr	r3, [r3, #8]
 80176ee:	0e19      	lsrs	r1, r3, #24
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	681a      	ldr	r2, [r3, #0]
 80176f4:	89fb      	ldrh	r3, [r7, #14]
 80176f6:	1c58      	adds	r0, r3, #1
 80176f8:	81f8      	strh	r0, [r7, #14]
 80176fa:	4413      	add	r3, r2
 80176fc:	b2ca      	uxtb	r2, r1
 80176fe:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	681a      	ldr	r2, [r3, #0]
 8017704:	89fb      	ldrh	r3, [r7, #14]
 8017706:	1c59      	adds	r1, r3, #1
 8017708:	81f9      	strh	r1, [r7, #14]
 801770a:	4413      	add	r3, r2
 801770c:	687a      	ldr	r2, [r7, #4]
 801770e:	7b12      	ldrb	r2, [r2, #12]
 8017710:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	89d9      	ldrh	r1, [r3, #14]
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	681a      	ldr	r2, [r3, #0]
 801771a:	89fb      	ldrh	r3, [r7, #14]
 801771c:	1c58      	adds	r0, r3, #1
 801771e:	81f8      	strh	r0, [r7, #14]
 8017720:	4413      	add	r3, r2
 8017722:	b2ca      	uxtb	r2, r1
 8017724:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	89db      	ldrh	r3, [r3, #14]
 801772a:	0a1b      	lsrs	r3, r3, #8
 801772c:	b299      	uxth	r1, r3
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	681a      	ldr	r2, [r3, #0]
 8017732:	89fb      	ldrh	r3, [r7, #14]
 8017734:	1c58      	adds	r0, r3, #1
 8017736:	81f8      	strh	r0, [r7, #14]
 8017738:	4413      	add	r3, r2
 801773a:	b2ca      	uxtb	r2, r1
 801773c:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	681a      	ldr	r2, [r3, #0]
 8017742:	89fb      	ldrh	r3, [r7, #14]
 8017744:	18d0      	adds	r0, r2, r3
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	f103 0110 	add.w	r1, r3, #16
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	7b1b      	ldrb	r3, [r3, #12]
 8017750:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017754:	b2db      	uxtb	r3, r3
 8017756:	b29b      	uxth	r3, r3
 8017758:	461a      	mov	r2, r3
 801775a:	f003 fe76 	bl	801b44a <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	7b1b      	ldrb	r3, [r3, #12]
 8017762:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017766:	b2db      	uxtb	r3, r3
 8017768:	b29a      	uxth	r2, r3
 801776a:	89fb      	ldrh	r3, [r7, #14]
 801776c:	4413      	add	r3, r2
 801776e:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017776:	2b00      	cmp	r3, #0
 8017778:	d009      	beq.n	801778e <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	681a      	ldr	r2, [r3, #0]
 801777e:	89fb      	ldrh	r3, [r7, #14]
 8017780:	1c59      	adds	r1, r3, #1
 8017782:	81f9      	strh	r1, [r7, #14]
 8017784:	4413      	add	r3, r2
 8017786:	687a      	ldr	r2, [r7, #4]
 8017788:	f892 2020 	ldrb.w	r2, [r2, #32]
 801778c:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	681a      	ldr	r2, [r3, #0]
 8017792:	89fb      	ldrh	r3, [r7, #14]
 8017794:	18d0      	adds	r0, r2, r3
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80177a0:	b29b      	uxth	r3, r3
 80177a2:	461a      	mov	r2, r3
 80177a4:	f003 fe51 	bl	801b44a <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80177ae:	b29a      	uxth	r2, r3
 80177b0:	89fb      	ldrh	r3, [r7, #14]
 80177b2:	4413      	add	r3, r2
 80177b4:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	681a      	ldr	r2, [r3, #0]
 80177be:	89fb      	ldrh	r3, [r7, #14]
 80177c0:	1c58      	adds	r0, r3, #1
 80177c2:	81f8      	strh	r0, [r7, #14]
 80177c4:	4413      	add	r3, r2
 80177c6:	b2ca      	uxtb	r2, r1
 80177c8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177ce:	0a19      	lsrs	r1, r3, #8
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	681a      	ldr	r2, [r3, #0]
 80177d4:	89fb      	ldrh	r3, [r7, #14]
 80177d6:	1c58      	adds	r0, r3, #1
 80177d8:	81f8      	strh	r0, [r7, #14]
 80177da:	4413      	add	r3, r2
 80177dc:	b2ca      	uxtb	r2, r1
 80177de:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177e4:	0c19      	lsrs	r1, r3, #16
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	681a      	ldr	r2, [r3, #0]
 80177ea:	89fb      	ldrh	r3, [r7, #14]
 80177ec:	1c58      	adds	r0, r3, #1
 80177ee:	81f8      	strh	r0, [r7, #14]
 80177f0:	4413      	add	r3, r2
 80177f2:	b2ca      	uxtb	r2, r1
 80177f4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177fa:	0e19      	lsrs	r1, r3, #24
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	681a      	ldr	r2, [r3, #0]
 8017800:	89fb      	ldrh	r3, [r7, #14]
 8017802:	1c58      	adds	r0, r3, #1
 8017804:	81f8      	strh	r0, [r7, #14]
 8017806:	4413      	add	r3, r2
 8017808:	b2ca      	uxtb	r2, r1
 801780a:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801780c:	89fb      	ldrh	r3, [r7, #14]
 801780e:	b2da      	uxtb	r2, r3
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8017814:	2300      	movs	r3, #0
}
 8017816:	4618      	mov	r0, r3
 8017818:	3710      	adds	r7, #16
 801781a:	46bd      	mov	sp, r7
 801781c:	bd80      	pop	{r7, pc}

0801781e <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 801781e:	b480      	push	{r7}
 8017820:	b083      	sub	sp, #12
 8017822:	af00      	add	r7, sp, #0
 8017824:	4603      	mov	r3, r0
 8017826:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017828:	79fb      	ldrb	r3, [r7, #7]
 801782a:	2b05      	cmp	r3, #5
 801782c:	d002      	beq.n	8017834 <RegionIsActive+0x16>
 801782e:	2b08      	cmp	r3, #8
 8017830:	d002      	beq.n	8017838 <RegionIsActive+0x1a>
 8017832:	e003      	b.n	801783c <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8017834:	2301      	movs	r3, #1
 8017836:	e002      	b.n	801783e <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 8017838:	2301      	movs	r3, #1
 801783a:	e000      	b.n	801783e <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 801783c:	2300      	movs	r3, #0
        }
    }
}
 801783e:	4618      	mov	r0, r3
 8017840:	370c      	adds	r7, #12
 8017842:	46bd      	mov	sp, r7
 8017844:	bc80      	pop	{r7}
 8017846:	4770      	bx	lr

08017848 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8017848:	b580      	push	{r7, lr}
 801784a:	b084      	sub	sp, #16
 801784c:	af00      	add	r7, sp, #0
 801784e:	4603      	mov	r3, r0
 8017850:	6039      	str	r1, [r7, #0]
 8017852:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8017854:	2300      	movs	r3, #0
 8017856:	60bb      	str	r3, [r7, #8]
    switch( region )
 8017858:	79fb      	ldrb	r3, [r7, #7]
 801785a:	2b05      	cmp	r3, #5
 801785c:	d002      	beq.n	8017864 <RegionGetPhyParam+0x1c>
 801785e:	2b08      	cmp	r3, #8
 8017860:	d006      	beq.n	8017870 <RegionGetPhyParam+0x28>
 8017862:	e00b      	b.n	801787c <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8017864:	6838      	ldr	r0, [r7, #0]
 8017866:	f001 fad1 	bl	8018e0c <RegionEU868GetPhyParam>
 801786a:	4603      	mov	r3, r0
 801786c:	60fb      	str	r3, [r7, #12]
 801786e:	e007      	b.n	8017880 <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 8017870:	6838      	ldr	r0, [r7, #0]
 8017872:	f002 fc51 	bl	801a118 <RegionUS915GetPhyParam>
 8017876:	4603      	mov	r3, r0
 8017878:	60fb      	str	r3, [r7, #12]
 801787a:	e001      	b.n	8017880 <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 801787c:	68bb      	ldr	r3, [r7, #8]
 801787e:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	4618      	mov	r0, r3
 8017884:	3710      	adds	r7, #16
 8017886:	46bd      	mov	sp, r7
 8017888:	bd80      	pop	{r7, pc}

0801788a <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 801788a:	b580      	push	{r7, lr}
 801788c:	b082      	sub	sp, #8
 801788e:	af00      	add	r7, sp, #0
 8017890:	4603      	mov	r3, r0
 8017892:	6039      	str	r1, [r7, #0]
 8017894:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017896:	79fb      	ldrb	r3, [r7, #7]
 8017898:	2b05      	cmp	r3, #5
 801789a:	d002      	beq.n	80178a2 <RegionSetBandTxDone+0x18>
 801789c:	2b08      	cmp	r3, #8
 801789e:	d004      	beq.n	80178aa <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 80178a0:	e006      	b.n	80178b0 <RegionSetBandTxDone+0x26>
        EU868_SET_BAND_TX_DONE( );
 80178a2:	6838      	ldr	r0, [r7, #0]
 80178a4:	f001 fbf8 	bl	8019098 <RegionEU868SetBandTxDone>
 80178a8:	e002      	b.n	80178b0 <RegionSetBandTxDone+0x26>
        US915_SET_BAND_TX_DONE( );
 80178aa:	6838      	ldr	r0, [r7, #0]
 80178ac:	f002 fd90 	bl	801a3d0 <RegionUS915SetBandTxDone>
        }
    }
}
 80178b0:	3708      	adds	r7, #8
 80178b2:	46bd      	mov	sp, r7
 80178b4:	bd80      	pop	{r7, pc}

080178b6 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 80178b6:	b580      	push	{r7, lr}
 80178b8:	b082      	sub	sp, #8
 80178ba:	af00      	add	r7, sp, #0
 80178bc:	4603      	mov	r3, r0
 80178be:	6039      	str	r1, [r7, #0]
 80178c0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80178c2:	79fb      	ldrb	r3, [r7, #7]
 80178c4:	2b05      	cmp	r3, #5
 80178c6:	d002      	beq.n	80178ce <RegionInitDefaults+0x18>
 80178c8:	2b08      	cmp	r3, #8
 80178ca:	d004      	beq.n	80178d6 <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 80178cc:	e006      	b.n	80178dc <RegionInitDefaults+0x26>
        EU868_INIT_DEFAULTS( );
 80178ce:	6838      	ldr	r0, [r7, #0]
 80178d0:	f001 fc0e 	bl	80190f0 <RegionEU868InitDefaults>
 80178d4:	e002      	b.n	80178dc <RegionInitDefaults+0x26>
        US915_INIT_DEFAULTS( );
 80178d6:	6838      	ldr	r0, [r7, #0]
 80178d8:	f002 fda6 	bl	801a428 <RegionUS915InitDefaults>
        }
    }
}
 80178dc:	bf00      	nop
 80178de:	3708      	adds	r7, #8
 80178e0:	46bd      	mov	sp, r7
 80178e2:	bd80      	pop	{r7, pc}

080178e4 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80178e4:	b580      	push	{r7, lr}
 80178e6:	b082      	sub	sp, #8
 80178e8:	af00      	add	r7, sp, #0
 80178ea:	4603      	mov	r3, r0
 80178ec:	6039      	str	r1, [r7, #0]
 80178ee:	71fb      	strb	r3, [r7, #7]
 80178f0:	4613      	mov	r3, r2
 80178f2:	71bb      	strb	r3, [r7, #6]
    switch( region )
 80178f4:	79fb      	ldrb	r3, [r7, #7]
 80178f6:	2b05      	cmp	r3, #5
 80178f8:	d002      	beq.n	8017900 <RegionVerify+0x1c>
 80178fa:	2b08      	cmp	r3, #8
 80178fc:	d007      	beq.n	801790e <RegionVerify+0x2a>
 80178fe:	e00d      	b.n	801791c <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8017900:	79bb      	ldrb	r3, [r7, #6]
 8017902:	4619      	mov	r1, r3
 8017904:	6838      	ldr	r0, [r7, #0]
 8017906:	f001 fc91 	bl	801922c <RegionEU868Verify>
 801790a:	4603      	mov	r3, r0
 801790c:	e007      	b.n	801791e <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 801790e:	79bb      	ldrb	r3, [r7, #6]
 8017910:	4619      	mov	r1, r3
 8017912:	6838      	ldr	r0, [r7, #0]
 8017914:	f002 feba 	bl	801a68c <RegionUS915Verify>
 8017918:	4603      	mov	r3, r0
 801791a:	e000      	b.n	801791e <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 801791c:	2300      	movs	r3, #0
        }
    }
}
 801791e:	4618      	mov	r0, r3
 8017920:	3708      	adds	r7, #8
 8017922:	46bd      	mov	sp, r7
 8017924:	bd80      	pop	{r7, pc}

08017926 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8017926:	b580      	push	{r7, lr}
 8017928:	b082      	sub	sp, #8
 801792a:	af00      	add	r7, sp, #0
 801792c:	4603      	mov	r3, r0
 801792e:	6039      	str	r1, [r7, #0]
 8017930:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017932:	79fb      	ldrb	r3, [r7, #7]
 8017934:	2b05      	cmp	r3, #5
 8017936:	d002      	beq.n	801793e <RegionApplyCFList+0x18>
 8017938:	2b08      	cmp	r3, #8
 801793a:	d004      	beq.n	8017946 <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 801793c:	e006      	b.n	801794c <RegionApplyCFList+0x26>
        EU868_APPLY_CF_LIST( );
 801793e:	6838      	ldr	r0, [r7, #0]
 8017940:	f001 fcf0 	bl	8019324 <RegionEU868ApplyCFList>
 8017944:	e002      	b.n	801794c <RegionApplyCFList+0x26>
        US915_APPLY_CF_LIST( );
 8017946:	6838      	ldr	r0, [r7, #0]
 8017948:	f002 ff16 	bl	801a778 <RegionUS915ApplyCFList>
        }
    }
}
 801794c:	bf00      	nop
 801794e:	3708      	adds	r7, #8
 8017950:	46bd      	mov	sp, r7
 8017952:	bd80      	pop	{r7, pc}

08017954 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8017954:	b580      	push	{r7, lr}
 8017956:	b082      	sub	sp, #8
 8017958:	af00      	add	r7, sp, #0
 801795a:	4603      	mov	r3, r0
 801795c:	6039      	str	r1, [r7, #0]
 801795e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017960:	79fb      	ldrb	r3, [r7, #7]
 8017962:	2b05      	cmp	r3, #5
 8017964:	d002      	beq.n	801796c <RegionChanMaskSet+0x18>
 8017966:	2b08      	cmp	r3, #8
 8017968:	d005      	beq.n	8017976 <RegionChanMaskSet+0x22>
 801796a:	e009      	b.n	8017980 <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 801796c:	6838      	ldr	r0, [r7, #0]
 801796e:	f001 fd4d 	bl	801940c <RegionEU868ChanMaskSet>
 8017972:	4603      	mov	r3, r0
 8017974:	e005      	b.n	8017982 <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 8017976:	6838      	ldr	r0, [r7, #0]
 8017978:	f002 ff72 	bl	801a860 <RegionUS915ChanMaskSet>
 801797c:	4603      	mov	r3, r0
 801797e:	e000      	b.n	8017982 <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8017980:	2300      	movs	r3, #0
        }
    }
}
 8017982:	4618      	mov	r0, r3
 8017984:	3708      	adds	r7, #8
 8017986:	46bd      	mov	sp, r7
 8017988:	bd80      	pop	{r7, pc}

0801798a <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801798a:	b580      	push	{r7, lr}
 801798c:	b082      	sub	sp, #8
 801798e:	af00      	add	r7, sp, #0
 8017990:	603b      	str	r3, [r7, #0]
 8017992:	4603      	mov	r3, r0
 8017994:	71fb      	strb	r3, [r7, #7]
 8017996:	460b      	mov	r3, r1
 8017998:	71bb      	strb	r3, [r7, #6]
 801799a:	4613      	mov	r3, r2
 801799c:	717b      	strb	r3, [r7, #5]
    switch( region )
 801799e:	79fb      	ldrb	r3, [r7, #7]
 80179a0:	2b05      	cmp	r3, #5
 80179a2:	d002      	beq.n	80179aa <RegionComputeRxWindowParameters+0x20>
 80179a4:	2b08      	cmp	r3, #8
 80179a6:	d008      	beq.n	80179ba <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80179a8:	e00e      	b.n	80179c8 <RegionComputeRxWindowParameters+0x3e>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80179aa:	7979      	ldrb	r1, [r7, #5]
 80179ac:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80179b0:	693b      	ldr	r3, [r7, #16]
 80179b2:	683a      	ldr	r2, [r7, #0]
 80179b4:	f001 fd54 	bl	8019460 <RegionEU868ComputeRxWindowParameters>
 80179b8:	e006      	b.n	80179c8 <RegionComputeRxWindowParameters+0x3e>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 80179ba:	7979      	ldrb	r1, [r7, #5]
 80179bc:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80179c0:	693b      	ldr	r3, [r7, #16]
 80179c2:	683a      	ldr	r2, [r7, #0]
 80179c4:	f002 ffb4 	bl	801a930 <RegionUS915ComputeRxWindowParameters>
        }
    }
}
 80179c8:	bf00      	nop
 80179ca:	3708      	adds	r7, #8
 80179cc:	46bd      	mov	sp, r7
 80179ce:	bd80      	pop	{r7, pc}

080179d0 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80179d0:	b580      	push	{r7, lr}
 80179d2:	b084      	sub	sp, #16
 80179d4:	af00      	add	r7, sp, #0
 80179d6:	4603      	mov	r3, r0
 80179d8:	60b9      	str	r1, [r7, #8]
 80179da:	607a      	str	r2, [r7, #4]
 80179dc:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80179de:	7bfb      	ldrb	r3, [r7, #15]
 80179e0:	2b05      	cmp	r3, #5
 80179e2:	d002      	beq.n	80179ea <RegionRxConfig+0x1a>
 80179e4:	2b08      	cmp	r3, #8
 80179e6:	d006      	beq.n	80179f6 <RegionRxConfig+0x26>
 80179e8:	e00b      	b.n	8017a02 <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 80179ea:	6879      	ldr	r1, [r7, #4]
 80179ec:	68b8      	ldr	r0, [r7, #8]
 80179ee:	f001 fd91 	bl	8019514 <RegionEU868RxConfig>
 80179f2:	4603      	mov	r3, r0
 80179f4:	e006      	b.n	8017a04 <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 80179f6:	6879      	ldr	r1, [r7, #4]
 80179f8:	68b8      	ldr	r0, [r7, #8]
 80179fa:	f002 ffe3 	bl	801a9c4 <RegionUS915RxConfig>
 80179fe:	4603      	mov	r3, r0
 8017a00:	e000      	b.n	8017a04 <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8017a02:	2300      	movs	r3, #0
        }
    }
}
 8017a04:	4618      	mov	r0, r3
 8017a06:	3710      	adds	r7, #16
 8017a08:	46bd      	mov	sp, r7
 8017a0a:	bd80      	pop	{r7, pc}

08017a0c <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8017a0c:	b580      	push	{r7, lr}
 8017a0e:	b084      	sub	sp, #16
 8017a10:	af00      	add	r7, sp, #0
 8017a12:	60b9      	str	r1, [r7, #8]
 8017a14:	607a      	str	r2, [r7, #4]
 8017a16:	603b      	str	r3, [r7, #0]
 8017a18:	4603      	mov	r3, r0
 8017a1a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017a1c:	7bfb      	ldrb	r3, [r7, #15]
 8017a1e:	2b05      	cmp	r3, #5
 8017a20:	d002      	beq.n	8017a28 <RegionTxConfig+0x1c>
 8017a22:	2b08      	cmp	r3, #8
 8017a24:	d007      	beq.n	8017a36 <RegionTxConfig+0x2a>
 8017a26:	e00d      	b.n	8017a44 <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8017a28:	683a      	ldr	r2, [r7, #0]
 8017a2a:	6879      	ldr	r1, [r7, #4]
 8017a2c:	68b8      	ldr	r0, [r7, #8]
 8017a2e:	f001 fe41 	bl	80196b4 <RegionEU868TxConfig>
 8017a32:	4603      	mov	r3, r0
 8017a34:	e007      	b.n	8017a46 <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8017a36:	683a      	ldr	r2, [r7, #0]
 8017a38:	6879      	ldr	r1, [r7, #4]
 8017a3a:	68b8      	ldr	r0, [r7, #8]
 8017a3c:	f003 f846 	bl	801aacc <RegionUS915TxConfig>
 8017a40:	4603      	mov	r3, r0
 8017a42:	e000      	b.n	8017a46 <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8017a44:	2300      	movs	r3, #0
        }
    }
}
 8017a46:	4618      	mov	r0, r3
 8017a48:	3710      	adds	r7, #16
 8017a4a:	46bd      	mov	sp, r7
 8017a4c:	bd80      	pop	{r7, pc}

08017a4e <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8017a4e:	b580      	push	{r7, lr}
 8017a50:	b086      	sub	sp, #24
 8017a52:	af02      	add	r7, sp, #8
 8017a54:	60b9      	str	r1, [r7, #8]
 8017a56:	607a      	str	r2, [r7, #4]
 8017a58:	603b      	str	r3, [r7, #0]
 8017a5a:	4603      	mov	r3, r0
 8017a5c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017a5e:	7bfb      	ldrb	r3, [r7, #15]
 8017a60:	2b05      	cmp	r3, #5
 8017a62:	d002      	beq.n	8017a6a <RegionLinkAdrReq+0x1c>
 8017a64:	2b08      	cmp	r3, #8
 8017a66:	d00a      	beq.n	8017a7e <RegionLinkAdrReq+0x30>
 8017a68:	e013      	b.n	8017a92 <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8017a6a:	69fb      	ldr	r3, [r7, #28]
 8017a6c:	9300      	str	r3, [sp, #0]
 8017a6e:	69bb      	ldr	r3, [r7, #24]
 8017a70:	683a      	ldr	r2, [r7, #0]
 8017a72:	6879      	ldr	r1, [r7, #4]
 8017a74:	68b8      	ldr	r0, [r7, #8]
 8017a76:	f001 feed 	bl	8019854 <RegionEU868LinkAdrReq>
 8017a7a:	4603      	mov	r3, r0
 8017a7c:	e00a      	b.n	8017a94 <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 8017a7e:	69fb      	ldr	r3, [r7, #28]
 8017a80:	9300      	str	r3, [sp, #0]
 8017a82:	69bb      	ldr	r3, [r7, #24]
 8017a84:	683a      	ldr	r2, [r7, #0]
 8017a86:	6879      	ldr	r1, [r7, #4]
 8017a88:	68b8      	ldr	r0, [r7, #8]
 8017a8a:	f003 f8c9 	bl	801ac20 <RegionUS915LinkAdrReq>
 8017a8e:	4603      	mov	r3, r0
 8017a90:	e000      	b.n	8017a94 <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8017a92:	2300      	movs	r3, #0
        }
    }
}
 8017a94:	4618      	mov	r0, r3
 8017a96:	3710      	adds	r7, #16
 8017a98:	46bd      	mov	sp, r7
 8017a9a:	bd80      	pop	{r7, pc}

08017a9c <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017a9c:	b580      	push	{r7, lr}
 8017a9e:	b082      	sub	sp, #8
 8017aa0:	af00      	add	r7, sp, #0
 8017aa2:	4603      	mov	r3, r0
 8017aa4:	6039      	str	r1, [r7, #0]
 8017aa6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017aa8:	79fb      	ldrb	r3, [r7, #7]
 8017aaa:	2b05      	cmp	r3, #5
 8017aac:	d002      	beq.n	8017ab4 <RegionRxParamSetupReq+0x18>
 8017aae:	2b08      	cmp	r3, #8
 8017ab0:	d005      	beq.n	8017abe <RegionRxParamSetupReq+0x22>
 8017ab2:	e009      	b.n	8017ac8 <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8017ab4:	6838      	ldr	r0, [r7, #0]
 8017ab6:	f001 ffef 	bl	8019a98 <RegionEU868RxParamSetupReq>
 8017aba:	4603      	mov	r3, r0
 8017abc:	e005      	b.n	8017aca <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 8017abe:	6838      	ldr	r0, [r7, #0]
 8017ac0:	f003 fac8 	bl	801b054 <RegionUS915RxParamSetupReq>
 8017ac4:	4603      	mov	r3, r0
 8017ac6:	e000      	b.n	8017aca <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017ac8:	2300      	movs	r3, #0
        }
    }
}
 8017aca:	4618      	mov	r0, r3
 8017acc:	3708      	adds	r7, #8
 8017ace:	46bd      	mov	sp, r7
 8017ad0:	bd80      	pop	{r7, pc}

08017ad2 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8017ad2:	b580      	push	{r7, lr}
 8017ad4:	b082      	sub	sp, #8
 8017ad6:	af00      	add	r7, sp, #0
 8017ad8:	4603      	mov	r3, r0
 8017ada:	6039      	str	r1, [r7, #0]
 8017adc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017ade:	79fb      	ldrb	r3, [r7, #7]
 8017ae0:	2b05      	cmp	r3, #5
 8017ae2:	d002      	beq.n	8017aea <RegionNewChannelReq+0x18>
 8017ae4:	2b08      	cmp	r3, #8
 8017ae6:	d005      	beq.n	8017af4 <RegionNewChannelReq+0x22>
 8017ae8:	e009      	b.n	8017afe <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8017aea:	6838      	ldr	r0, [r7, #0]
 8017aec:	f002 f812 	bl	8019b14 <RegionEU868NewChannelReq>
 8017af0:	4603      	mov	r3, r0
 8017af2:	e005      	b.n	8017b00 <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 8017af4:	6838      	ldr	r0, [r7, #0]
 8017af6:	f003 faf9 	bl	801b0ec <RegionUS915NewChannelReq>
 8017afa:	4603      	mov	r3, r0
 8017afc:	e000      	b.n	8017b00 <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8017afe:	2300      	movs	r3, #0
        }
    }
}
 8017b00:	4618      	mov	r0, r3
 8017b02:	3708      	adds	r7, #8
 8017b04:	46bd      	mov	sp, r7
 8017b06:	bd80      	pop	{r7, pc}

08017b08 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8017b08:	b580      	push	{r7, lr}
 8017b0a:	b082      	sub	sp, #8
 8017b0c:	af00      	add	r7, sp, #0
 8017b0e:	4603      	mov	r3, r0
 8017b10:	6039      	str	r1, [r7, #0]
 8017b12:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017b14:	79fb      	ldrb	r3, [r7, #7]
 8017b16:	2b05      	cmp	r3, #5
 8017b18:	d002      	beq.n	8017b20 <RegionTxParamSetupReq+0x18>
 8017b1a:	2b08      	cmp	r3, #8
 8017b1c:	d005      	beq.n	8017b2a <RegionTxParamSetupReq+0x22>
 8017b1e:	e009      	b.n	8017b34 <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8017b20:	6838      	ldr	r0, [r7, #0]
 8017b22:	f002 f855 	bl	8019bd0 <RegionEU868TxParamSetupReq>
 8017b26:	4603      	mov	r3, r0
 8017b28:	e005      	b.n	8017b36 <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 8017b2a:	6838      	ldr	r0, [r7, #0]
 8017b2c:	f003 fae9 	bl	801b102 <RegionUS915TxParamSetupReq>
 8017b30:	4603      	mov	r3, r0
 8017b32:	e000      	b.n	8017b36 <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017b34:	2300      	movs	r3, #0
        }
    }
}
 8017b36:	4618      	mov	r0, r3
 8017b38:	3708      	adds	r7, #8
 8017b3a:	46bd      	mov	sp, r7
 8017b3c:	bd80      	pop	{r7, pc}

08017b3e <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8017b3e:	b580      	push	{r7, lr}
 8017b40:	b082      	sub	sp, #8
 8017b42:	af00      	add	r7, sp, #0
 8017b44:	4603      	mov	r3, r0
 8017b46:	6039      	str	r1, [r7, #0]
 8017b48:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017b4a:	79fb      	ldrb	r3, [r7, #7]
 8017b4c:	2b05      	cmp	r3, #5
 8017b4e:	d002      	beq.n	8017b56 <RegionDlChannelReq+0x18>
 8017b50:	2b08      	cmp	r3, #8
 8017b52:	d005      	beq.n	8017b60 <RegionDlChannelReq+0x22>
 8017b54:	e009      	b.n	8017b6a <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8017b56:	6838      	ldr	r0, [r7, #0]
 8017b58:	f002 f846 	bl	8019be8 <RegionEU868DlChannelReq>
 8017b5c:	4603      	mov	r3, r0
 8017b5e:	e005      	b.n	8017b6c <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 8017b60:	6838      	ldr	r0, [r7, #0]
 8017b62:	f003 fad9 	bl	801b118 <RegionUS915DlChannelReq>
 8017b66:	4603      	mov	r3, r0
 8017b68:	e000      	b.n	8017b6c <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8017b6a:	2300      	movs	r3, #0
        }
    }
}
 8017b6c:	4618      	mov	r0, r3
 8017b6e:	3708      	adds	r7, #8
 8017b70:	46bd      	mov	sp, r7
 8017b72:	bd80      	pop	{r7, pc}

08017b74 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8017b74:	b580      	push	{r7, lr}
 8017b76:	b082      	sub	sp, #8
 8017b78:	af00      	add	r7, sp, #0
 8017b7a:	4603      	mov	r3, r0
 8017b7c:	71fb      	strb	r3, [r7, #7]
 8017b7e:	460b      	mov	r3, r1
 8017b80:	71bb      	strb	r3, [r7, #6]
 8017b82:	4613      	mov	r3, r2
 8017b84:	717b      	strb	r3, [r7, #5]
    switch( region )
 8017b86:	79fb      	ldrb	r3, [r7, #7]
 8017b88:	2b05      	cmp	r3, #5
 8017b8a:	d002      	beq.n	8017b92 <RegionAlternateDr+0x1e>
 8017b8c:	2b08      	cmp	r3, #8
 8017b8e:	d009      	beq.n	8017ba4 <RegionAlternateDr+0x30>
 8017b90:	e011      	b.n	8017bb6 <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8017b92:	797a      	ldrb	r2, [r7, #5]
 8017b94:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017b98:	4611      	mov	r1, r2
 8017b9a:	4618      	mov	r0, r3
 8017b9c:	f002 f86e 	bl	8019c7c <RegionEU868AlternateDr>
 8017ba0:	4603      	mov	r3, r0
 8017ba2:	e009      	b.n	8017bb8 <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8017ba4:	797a      	ldrb	r2, [r7, #5]
 8017ba6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017baa:	4611      	mov	r1, r2
 8017bac:	4618      	mov	r0, r3
 8017bae:	f003 fabf 	bl	801b130 <RegionUS915AlternateDr>
 8017bb2:	4603      	mov	r3, r0
 8017bb4:	e000      	b.n	8017bb8 <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8017bb6:	2300      	movs	r3, #0
        }
    }
}
 8017bb8:	4618      	mov	r0, r3
 8017bba:	3708      	adds	r7, #8
 8017bbc:	46bd      	mov	sp, r7
 8017bbe:	bd80      	pop	{r7, pc}

08017bc0 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8017bc0:	b580      	push	{r7, lr}
 8017bc2:	b084      	sub	sp, #16
 8017bc4:	af00      	add	r7, sp, #0
 8017bc6:	60b9      	str	r1, [r7, #8]
 8017bc8:	607a      	str	r2, [r7, #4]
 8017bca:	603b      	str	r3, [r7, #0]
 8017bcc:	4603      	mov	r3, r0
 8017bce:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017bd0:	7bfb      	ldrb	r3, [r7, #15]
 8017bd2:	2b05      	cmp	r3, #5
 8017bd4:	d002      	beq.n	8017bdc <RegionNextChannel+0x1c>
 8017bd6:	2b08      	cmp	r3, #8
 8017bd8:	d008      	beq.n	8017bec <RegionNextChannel+0x2c>
 8017bda:	e00f      	b.n	8017bfc <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8017bdc:	69bb      	ldr	r3, [r7, #24]
 8017bde:	683a      	ldr	r2, [r7, #0]
 8017be0:	6879      	ldr	r1, [r7, #4]
 8017be2:	68b8      	ldr	r0, [r7, #8]
 8017be4:	f002 f85a 	bl	8019c9c <RegionEU868NextChannel>
 8017be8:	4603      	mov	r3, r0
 8017bea:	e008      	b.n	8017bfe <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 8017bec:	69bb      	ldr	r3, [r7, #24]
 8017bee:	683a      	ldr	r2, [r7, #0]
 8017bf0:	6879      	ldr	r1, [r7, #4]
 8017bf2:	68b8      	ldr	r0, [r7, #8]
 8017bf4:	f003 fad2 	bl	801b19c <RegionUS915NextChannel>
 8017bf8:	4603      	mov	r3, r0
 8017bfa:	e000      	b.n	8017bfe <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8017bfc:	2309      	movs	r3, #9
        }
    }
}
 8017bfe:	4618      	mov	r0, r3
 8017c00:	3710      	adds	r7, #16
 8017c02:	46bd      	mov	sp, r7
 8017c04:	bd80      	pop	{r7, pc}

08017c06 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017c06:	b590      	push	{r4, r7, lr}
 8017c08:	b083      	sub	sp, #12
 8017c0a:	af00      	add	r7, sp, #0
 8017c0c:	4604      	mov	r4, r0
 8017c0e:	4608      	mov	r0, r1
 8017c10:	4611      	mov	r1, r2
 8017c12:	461a      	mov	r2, r3
 8017c14:	4623      	mov	r3, r4
 8017c16:	71fb      	strb	r3, [r7, #7]
 8017c18:	4603      	mov	r3, r0
 8017c1a:	71bb      	strb	r3, [r7, #6]
 8017c1c:	460b      	mov	r3, r1
 8017c1e:	717b      	strb	r3, [r7, #5]
 8017c20:	4613      	mov	r3, r2
 8017c22:	713b      	strb	r3, [r7, #4]
    switch( region )
 8017c24:	79fb      	ldrb	r3, [r7, #7]
 8017c26:	2b05      	cmp	r3, #5
 8017c28:	d002      	beq.n	8017c30 <RegionApplyDrOffset+0x2a>
 8017c2a:	2b08      	cmp	r3, #8
 8017c2c:	d00a      	beq.n	8017c44 <RegionApplyDrOffset+0x3e>
 8017c2e:	e013      	b.n	8017c58 <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8017c30:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8017c34:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017c38:	79bb      	ldrb	r3, [r7, #6]
 8017c3a:	4618      	mov	r0, r3
 8017c3c:	f002 f9a8 	bl	8019f90 <RegionEU868ApplyDrOffset>
 8017c40:	4603      	mov	r3, r0
 8017c42:	e00a      	b.n	8017c5a <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 8017c44:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8017c48:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017c4c:	79bb      	ldrb	r3, [r7, #6]
 8017c4e:	4618      	mov	r0, r3
 8017c50:	f003 fb92 	bl	801b378 <RegionUS915ApplyDrOffset>
 8017c54:	4603      	mov	r3, r0
 8017c56:	e000      	b.n	8017c5a <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8017c58:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8017c5a:	4618      	mov	r0, r3
 8017c5c:	370c      	adds	r7, #12
 8017c5e:	46bd      	mov	sp, r7
 8017c60:	bd90      	pop	{r4, r7, pc}
	...

08017c64 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8017c64:	b480      	push	{r7}
 8017c66:	b083      	sub	sp, #12
 8017c68:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8017c6a:	4b04      	ldr	r3, [pc, #16]	; (8017c7c <RegionGetVersion+0x18>)
 8017c6c:	607b      	str	r3, [r7, #4]

    return version;
 8017c6e:	687b      	ldr	r3, [r7, #4]
}
 8017c70:	4618      	mov	r0, r3
 8017c72:	370c      	adds	r7, #12
 8017c74:	46bd      	mov	sp, r7
 8017c76:	bc80      	pop	{r7}
 8017c78:	4770      	bx	lr
 8017c7a:	bf00      	nop
 8017c7c:	02010001 	.word	0x02010001

08017c80 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 8017c80:	b480      	push	{r7}
 8017c82:	b087      	sub	sp, #28
 8017c84:	af00      	add	r7, sp, #0
 8017c86:	4603      	mov	r3, r0
 8017c88:	60b9      	str	r1, [r7, #8]
 8017c8a:	607a      	str	r2, [r7, #4]
 8017c8c:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 8017c8e:	68bb      	ldr	r3, [r7, #8]
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d002      	beq.n	8017c9a <FindAvailable125kHzChannels+0x1a>
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d101      	bne.n	8017c9e <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8017c9a:	2303      	movs	r3, #3
 8017c9c:	e021      	b.n	8017ce2 <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	2200      	movs	r2, #0
 8017ca2:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8017ca4:	2300      	movs	r3, #0
 8017ca6:	75fb      	strb	r3, [r7, #23]
 8017ca8:	e017      	b.n	8017cda <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 8017caa:	89fa      	ldrh	r2, [r7, #14]
 8017cac:	7dfb      	ldrb	r3, [r7, #23]
 8017cae:	fa42 f303 	asr.w	r3, r2, r3
 8017cb2:	f003 0301 	and.w	r3, r3, #1
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d00c      	beq.n	8017cd4 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	781b      	ldrb	r3, [r3, #0]
 8017cbe:	461a      	mov	r2, r3
 8017cc0:	68bb      	ldr	r3, [r7, #8]
 8017cc2:	4413      	add	r3, r2
 8017cc4:	7dfa      	ldrb	r2, [r7, #23]
 8017cc6:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	781b      	ldrb	r3, [r3, #0]
 8017ccc:	3301      	adds	r3, #1
 8017cce:	b2da      	uxtb	r2, r3
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8017cd4:	7dfb      	ldrb	r3, [r7, #23]
 8017cd6:	3301      	adds	r3, #1
 8017cd8:	75fb      	strb	r3, [r7, #23]
 8017cda:	7dfb      	ldrb	r3, [r7, #23]
 8017cdc:	2b07      	cmp	r3, #7
 8017cde:	d9e4      	bls.n	8017caa <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 8017ce0:	2300      	movs	r3, #0
}
 8017ce2:	4618      	mov	r0, r3
 8017ce4:	371c      	adds	r7, #28
 8017ce6:	46bd      	mov	sp, r7
 8017ce8:	bc80      	pop	{r7}
 8017cea:	4770      	bx	lr

08017cec <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8017cec:	b590      	push	{r4, r7, lr}
 8017cee:	b089      	sub	sp, #36	; 0x24
 8017cf0:	af00      	add	r7, sp, #0
 8017cf2:	60f8      	str	r0, [r7, #12]
 8017cf4:	60b9      	str	r1, [r7, #8]
 8017cf6:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8017cf8:	2300      	movs	r3, #0
 8017cfa:	617b      	str	r3, [r7, #20]
 8017cfc:	2300      	movs	r3, #0
 8017cfe:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 8017d00:	2300      	movs	r3, #0
 8017d02:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d005      	beq.n	8017d16 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8017d0a:	68bb      	ldr	r3, [r7, #8]
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d002      	beq.n	8017d16 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d101      	bne.n	8017d1a <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8017d16:	2303      	movs	r3, #3
 8017d18:	e055      	b.n	8017dc6 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 8017d1a:	68bb      	ldr	r3, [r7, #8]
 8017d1c:	781b      	ldrb	r3, [r3, #0]
 8017d1e:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8017d20:	7f7b      	ldrb	r3, [r7, #29]
 8017d22:	085b      	lsrs	r3, r3, #1
 8017d24:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 8017d26:	7f7b      	ldrb	r3, [r7, #29]
 8017d28:	f003 0301 	and.w	r3, r3, #1
 8017d2c:	b2db      	uxtb	r3, r3
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d107      	bne.n	8017d42 <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8017d32:	7f3b      	ldrb	r3, [r7, #28]
 8017d34:	005b      	lsls	r3, r3, #1
 8017d36:	68fa      	ldr	r2, [r7, #12]
 8017d38:	4413      	add	r3, r2
 8017d3a:	881b      	ldrh	r3, [r3, #0]
 8017d3c:	b2db      	uxtb	r3, r3
 8017d3e:	83fb      	strh	r3, [r7, #30]
 8017d40:	e006      	b.n	8017d50 <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8017d42:	7f3b      	ldrb	r3, [r7, #28]
 8017d44:	005b      	lsls	r3, r3, #1
 8017d46:	68fa      	ldr	r2, [r7, #12]
 8017d48:	4413      	add	r3, r2
 8017d4a:	881b      	ldrh	r3, [r3, #0]
 8017d4c:	0a1b      	lsrs	r3, r3, #8
 8017d4e:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8017d50:	f107 0213 	add.w	r2, r7, #19
 8017d54:	f107 0114 	add.w	r1, r7, #20
 8017d58:	8bfb      	ldrh	r3, [r7, #30]
 8017d5a:	4618      	mov	r0, r3
 8017d5c:	f7ff ff90 	bl	8017c80 <FindAvailable125kHzChannels>
 8017d60:	4603      	mov	r3, r0
 8017d62:	2b03      	cmp	r3, #3
 8017d64:	d101      	bne.n	8017d6a <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8017d66:	2303      	movs	r3, #3
 8017d68:	e02d      	b.n	8017dc6 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 8017d6a:	7cfb      	ldrb	r3, [r7, #19]
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d011      	beq.n	8017d94 <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8017d70:	7f7b      	ldrb	r3, [r7, #29]
 8017d72:	00db      	lsls	r3, r3, #3
 8017d74:	b2dc      	uxtb	r4, r3
 8017d76:	7cfb      	ldrb	r3, [r7, #19]
 8017d78:	3b01      	subs	r3, #1
 8017d7a:	4619      	mov	r1, r3
 8017d7c:	2000      	movs	r0, #0
 8017d7e:	f003 fb4d 	bl	801b41c <randr>
 8017d82:	4603      	mov	r3, r0
 8017d84:	3320      	adds	r3, #32
 8017d86:	443b      	add	r3, r7
 8017d88:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8017d8c:	4423      	add	r3, r4
 8017d8e:	b2da      	uxtb	r2, r3
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 8017d94:	7f7b      	ldrb	r3, [r7, #29]
 8017d96:	3301      	adds	r3, #1
 8017d98:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 8017d9a:	7f7b      	ldrb	r3, [r7, #29]
 8017d9c:	2b07      	cmp	r3, #7
 8017d9e:	d901      	bls.n	8017da4 <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 8017da0:	2300      	movs	r3, #0
 8017da2:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8017da4:	7cfb      	ldrb	r3, [r7, #19]
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d104      	bne.n	8017db4 <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 8017daa:	68bb      	ldr	r3, [r7, #8]
 8017dac:	781b      	ldrb	r3, [r3, #0]
 8017dae:	7f7a      	ldrb	r2, [r7, #29]
 8017db0:	429a      	cmp	r2, r3
 8017db2:	d1b5      	bne.n	8017d20 <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 8017db4:	7cfb      	ldrb	r3, [r7, #19]
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	d004      	beq.n	8017dc4 <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 8017dba:	68bb      	ldr	r3, [r7, #8]
 8017dbc:	7f7a      	ldrb	r2, [r7, #29]
 8017dbe:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8017dc0:	2300      	movs	r3, #0
 8017dc2:	e000      	b.n	8017dc6 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8017dc4:	2303      	movs	r3, #3
}
 8017dc6:	4618      	mov	r0, r3
 8017dc8:	3724      	adds	r7, #36	; 0x24
 8017dca:	46bd      	mov	sp, r7
 8017dcc:	bd90      	pop	{r4, r7, pc}

08017dce <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 8017dce:	b480      	push	{r7}
 8017dd0:	b085      	sub	sp, #20
 8017dd2:	af00      	add	r7, sp, #0
 8017dd4:	4603      	mov	r3, r0
 8017dd6:	60b9      	str	r1, [r7, #8]
 8017dd8:	607a      	str	r2, [r7, #4]
 8017dda:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 8017ddc:	7bfb      	ldrb	r3, [r7, #15]
 8017dde:	687a      	ldr	r2, [r7, #4]
 8017de0:	fb03 f202 	mul.w	r2, r3, r2
 8017de4:	68bb      	ldr	r3, [r7, #8]
 8017de6:	4413      	add	r3, r2
}
 8017de8:	4618      	mov	r0, r3
 8017dea:	3714      	adds	r7, #20
 8017dec:	46bd      	mov	sp, r7
 8017dee:	bc80      	pop	{r7}
 8017df0:	4770      	bx	lr

08017df2 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017df2:	b480      	push	{r7}
 8017df4:	b087      	sub	sp, #28
 8017df6:	af00      	add	r7, sp, #0
 8017df8:	60f8      	str	r0, [r7, #12]
 8017dfa:	4608      	mov	r0, r1
 8017dfc:	4639      	mov	r1, r7
 8017dfe:	e881 000c 	stmia.w	r1, {r2, r3}
 8017e02:	4603      	mov	r3, r0
 8017e04:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	881b      	ldrh	r3, [r3, #0]
 8017e0a:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8017e0c:	7afb      	ldrb	r3, [r7, #11]
 8017e0e:	f083 0301 	eor.w	r3, r3, #1
 8017e12:	b2db      	uxtb	r3, r3
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d01b      	beq.n	8017e50 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8017e18:	f242 7310 	movw	r3, #10000	; 0x2710
 8017e1c:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8017e1e:	683b      	ldr	r3, [r7, #0]
 8017e20:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8017e24:	d202      	bcs.n	8017e2c <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8017e26:	2364      	movs	r3, #100	; 0x64
 8017e28:	82bb      	strh	r3, [r7, #20]
 8017e2a:	e00b      	b.n	8017e44 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8017e2c:	683b      	ldr	r3, [r7, #0]
 8017e2e:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8017e32:	4293      	cmp	r3, r2
 8017e34:	d803      	bhi.n	8017e3e <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8017e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017e3a:	82bb      	strh	r3, [r7, #20]
 8017e3c:	e002      	b.n	8017e44 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8017e3e:	f242 7310 	movw	r3, #10000	; 0x2710
 8017e42:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8017e44:	8aba      	ldrh	r2, [r7, #20]
 8017e46:	8afb      	ldrh	r3, [r7, #22]
 8017e48:	4293      	cmp	r3, r2
 8017e4a:	bf38      	it	cc
 8017e4c:	4613      	movcc	r3, r2
 8017e4e:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8017e50:	8afb      	ldrh	r3, [r7, #22]
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d101      	bne.n	8017e5a <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8017e56:	2301      	movs	r3, #1
 8017e58:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8017e5a:	8afb      	ldrh	r3, [r7, #22]
}
 8017e5c:	4618      	mov	r0, r3
 8017e5e:	371c      	adds	r7, #28
 8017e60:	46bd      	mov	sp, r7
 8017e62:	bc80      	pop	{r7}
 8017e64:	4770      	bx	lr
	...

08017e68 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8017e68:	b580      	push	{r7, lr}
 8017e6a:	b08e      	sub	sp, #56	; 0x38
 8017e6c:	af02      	add	r7, sp, #8
 8017e6e:	60f8      	str	r0, [r7, #12]
 8017e70:	4608      	mov	r0, r1
 8017e72:	4639      	mov	r1, r7
 8017e74:	e881 000c 	stmia.w	r1, {r2, r3}
 8017e78:	4603      	mov	r3, r0
 8017e7a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	881b      	ldrh	r3, [r3, #0]
 8017e80:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017e82:	4b4b      	ldr	r3, [pc, #300]	; (8017fb0 <SetMaxTimeCredits+0x148>)
 8017e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8017e86:	463b      	mov	r3, r7
 8017e88:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017e8c:	f006 ff32 	bl	801ecf4 <SysTimeToMs>
 8017e90:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8017e92:	f107 0314 	add.w	r3, r7, #20
 8017e96:	2200      	movs	r2, #0
 8017e98:	601a      	str	r2, [r3, #0]
 8017e9a:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017e9c:	7af9      	ldrb	r1, [r7, #11]
 8017e9e:	463b      	mov	r3, r7
 8017ea0:	cb0c      	ldmia	r3, {r2, r3}
 8017ea2:	68f8      	ldr	r0, [r7, #12]
 8017ea4:	f7ff ffa5 	bl	8017df2 <GetDutyCycle>
 8017ea8:	4603      	mov	r3, r0
 8017eaa:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8017eac:	7afb      	ldrb	r3, [r7, #11]
 8017eae:	f083 0301 	eor.w	r3, r3, #1
 8017eb2:	b2db      	uxtb	r3, r3
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d062      	beq.n	8017f7e <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8017eb8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017eba:	2b64      	cmp	r3, #100	; 0x64
 8017ebc:	d105      	bne.n	8017eca <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017ebe:	4b3c      	ldr	r3, [pc, #240]	; (8017fb0 <SetMaxTimeCredits+0x148>)
 8017ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ec6:	609a      	str	r2, [r3, #8]
 8017ec8:	e00b      	b.n	8017ee2 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8017eca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017ecc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017ed0:	d105      	bne.n	8017ede <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8017ed2:	4b38      	ldr	r3, [pc, #224]	; (8017fb4 <SetMaxTimeCredits+0x14c>)
 8017ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017eda:	609a      	str	r2, [r3, #8]
 8017edc:	e001      	b.n	8017ee2 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8017ede:	4b36      	ldr	r3, [pc, #216]	; (8017fb8 <SetMaxTimeCredits+0x150>)
 8017ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8017ee2:	68fb      	ldr	r3, [r7, #12]
 8017ee4:	689a      	ldr	r2, [r3, #8]
 8017ee6:	f107 031c 	add.w	r3, r7, #28
 8017eea:	4611      	mov	r1, r2
 8017eec:	4618      	mov	r0, r3
 8017eee:	f006 ff29 	bl	801ed44 <SysTimeFromMs>
 8017ef2:	f107 0014 	add.w	r0, r7, #20
 8017ef6:	6a3b      	ldr	r3, [r7, #32]
 8017ef8:	9300      	str	r3, [sp, #0]
 8017efa:	69fb      	ldr	r3, [r7, #28]
 8017efc:	463a      	mov	r2, r7
 8017efe:	ca06      	ldmia	r2, {r1, r2}
 8017f00:	f006 fe39 	bl	801eb76 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8017f04:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017f08:	f083 0301 	eor.w	r3, r3, #1
 8017f0c:	b2db      	uxtb	r3, r3
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d006      	beq.n	8017f20 <SetMaxTimeCredits+0xb8>
 8017f12:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8017f16:	f083 0301 	eor.w	r3, r3, #1
 8017f1a:	b2db      	uxtb	r3, r3
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d108      	bne.n	8017f32 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8017f24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f26:	429a      	cmp	r2, r3
 8017f28:	d103      	bne.n	8017f32 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8017f2a:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8017f2c:	4a23      	ldr	r2, [pc, #140]	; (8017fbc <SetMaxTimeCredits+0x154>)
 8017f2e:	4293      	cmp	r3, r2
 8017f30:	d92f      	bls.n	8017f92 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8017f32:	68fb      	ldr	r3, [r7, #12]
 8017f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f36:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8017f38:	683b      	ldr	r3, [r7, #0]
 8017f3a:	4a21      	ldr	r2, [pc, #132]	; (8017fc0 <SetMaxTimeCredits+0x158>)
 8017f3c:	4293      	cmp	r3, r2
 8017f3e:	d928      	bls.n	8017f92 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8017f40:	683b      	ldr	r3, [r7, #0]
 8017f42:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8017f46:	3b30      	subs	r3, #48	; 0x30
 8017f48:	4a1e      	ldr	r2, [pc, #120]	; (8017fc4 <SetMaxTimeCredits+0x15c>)
 8017f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8017f4e:	0c1b      	lsrs	r3, r3, #16
 8017f50:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8017f52:	697b      	ldr	r3, [r7, #20]
 8017f54:	4a1c      	ldr	r2, [pc, #112]	; (8017fc8 <SetMaxTimeCredits+0x160>)
 8017f56:	fb02 f303 	mul.w	r3, r2, r3
 8017f5a:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8017f5c:	697b      	ldr	r3, [r7, #20]
 8017f5e:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8017f62:	3330      	adds	r3, #48	; 0x30
 8017f64:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8017f66:	2300      	movs	r3, #0
 8017f68:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8017f6a:	f107 0314 	add.w	r3, r7, #20
 8017f6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017f72:	f006 febf 	bl	801ecf4 <SysTimeToMs>
 8017f76:	4602      	mov	r2, r0
 8017f78:	68fb      	ldr	r3, [r7, #12]
 8017f7a:	609a      	str	r2, [r3, #8]
 8017f7c:	e009      	b.n	8017f92 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8017f7e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017f82:	f083 0301 	eor.w	r3, r3, #1
 8017f86:	b2db      	uxtb	r3, r3
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d002      	beq.n	8017f92 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8017f8c:	68fb      	ldr	r3, [r7, #12]
 8017f8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f90:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8017f92:	68fb      	ldr	r3, [r7, #12]
 8017f94:	685b      	ldr	r3, [r3, #4]
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d102      	bne.n	8017fa0 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8017f9a:	68fb      	ldr	r3, [r7, #12]
 8017f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f9e:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8017fa0:	68fb      	ldr	r3, [r7, #12]
 8017fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017fa4:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8017fa6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8017fa8:	4618      	mov	r0, r3
 8017faa:	3730      	adds	r7, #48	; 0x30
 8017fac:	46bd      	mov	sp, r7
 8017fae:	bd80      	pop	{r7, pc}
 8017fb0:	001b7740 	.word	0x001b7740
 8017fb4:	0112a880 	.word	0x0112a880
 8017fb8:	02932e00 	.word	0x02932e00
 8017fbc:	0001517f 	.word	0x0001517f
 8017fc0:	0001ec2f 	.word	0x0001ec2f
 8017fc4:	c22e4507 	.word	0xc22e4507
 8017fc8:	00015180 	.word	0x00015180

08017fcc <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8017fcc:	b580      	push	{r7, lr}
 8017fce:	b086      	sub	sp, #24
 8017fd0:	af02      	add	r7, sp, #8
 8017fd2:	6078      	str	r0, [r7, #4]
 8017fd4:	4608      	mov	r0, r1
 8017fd6:	4611      	mov	r1, r2
 8017fd8:	461a      	mov	r2, r3
 8017fda:	4603      	mov	r3, r0
 8017fdc:	70fb      	strb	r3, [r7, #3]
 8017fde:	460b      	mov	r3, r1
 8017fe0:	70bb      	strb	r3, [r7, #2]
 8017fe2:	4613      	mov	r3, r2
 8017fe4:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8017fe6:	78f9      	ldrb	r1, [r7, #3]
 8017fe8:	787b      	ldrb	r3, [r7, #1]
 8017fea:	9301      	str	r3, [sp, #4]
 8017fec:	78bb      	ldrb	r3, [r7, #2]
 8017fee:	9300      	str	r3, [sp, #0]
 8017ff0:	f107 0318 	add.w	r3, r7, #24
 8017ff4:	cb0c      	ldmia	r3, {r2, r3}
 8017ff6:	6878      	ldr	r0, [r7, #4]
 8017ff8:	f7ff ff36 	bl	8017e68 <SetMaxTimeCredits>
 8017ffc:	4603      	mov	r3, r0
 8017ffe:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8018000:	78fb      	ldrb	r3, [r7, #3]
 8018002:	2b00      	cmp	r3, #0
 8018004:	d00a      	beq.n	801801c <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	685b      	ldr	r3, [r3, #4]
 801800a:	4618      	mov	r0, r3
 801800c:	f007 fba6 	bl	801f75c <UTIL_TIMER_GetElapsedTime>
 8018010:	4602      	mov	r2, r0
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	68db      	ldr	r3, [r3, #12]
 8018016:	441a      	add	r2, r3
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	68da      	ldr	r2, [r3, #12]
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	691b      	ldr	r3, [r3, #16]
 8018024:	429a      	cmp	r2, r3
 8018026:	d903      	bls.n	8018030 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	691a      	ldr	r2, [r3, #16]
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	6a3a      	ldr	r2, [r7, #32]
 8018034:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8018036:	89fb      	ldrh	r3, [r7, #14]
}
 8018038:	4618      	mov	r0, r3
 801803a:	3710      	adds	r7, #16
 801803c:	46bd      	mov	sp, r7
 801803e:	bd80      	pop	{r7, pc}

08018040 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8018040:	b480      	push	{r7}
 8018042:	b085      	sub	sp, #20
 8018044:	af00      	add	r7, sp, #0
 8018046:	4603      	mov	r3, r0
 8018048:	460a      	mov	r2, r1
 801804a:	80fb      	strh	r3, [r7, #6]
 801804c:	4613      	mov	r3, r2
 801804e:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8018050:	2300      	movs	r3, #0
 8018052:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8018054:	2300      	movs	r3, #0
 8018056:	73bb      	strb	r3, [r7, #14]
 8018058:	e011      	b.n	801807e <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801805a:	88fa      	ldrh	r2, [r7, #6]
 801805c:	7bbb      	ldrb	r3, [r7, #14]
 801805e:	2101      	movs	r1, #1
 8018060:	fa01 f303 	lsl.w	r3, r1, r3
 8018064:	401a      	ands	r2, r3
 8018066:	7bbb      	ldrb	r3, [r7, #14]
 8018068:	2101      	movs	r1, #1
 801806a:	fa01 f303 	lsl.w	r3, r1, r3
 801806e:	429a      	cmp	r2, r3
 8018070:	d102      	bne.n	8018078 <CountChannels+0x38>
        {
            nbActiveBits++;
 8018072:	7bfb      	ldrb	r3, [r7, #15]
 8018074:	3301      	adds	r3, #1
 8018076:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8018078:	7bbb      	ldrb	r3, [r7, #14]
 801807a:	3301      	adds	r3, #1
 801807c:	73bb      	strb	r3, [r7, #14]
 801807e:	7bba      	ldrb	r2, [r7, #14]
 8018080:	797b      	ldrb	r3, [r7, #5]
 8018082:	429a      	cmp	r2, r3
 8018084:	d3e9      	bcc.n	801805a <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8018086:	7bfb      	ldrb	r3, [r7, #15]
}
 8018088:	4618      	mov	r0, r3
 801808a:	3714      	adds	r7, #20
 801808c:	46bd      	mov	sp, r7
 801808e:	bc80      	pop	{r7}
 8018090:	4770      	bx	lr

08018092 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8018092:	b580      	push	{r7, lr}
 8018094:	b084      	sub	sp, #16
 8018096:	af00      	add	r7, sp, #0
 8018098:	6039      	str	r1, [r7, #0]
 801809a:	4611      	mov	r1, r2
 801809c:	461a      	mov	r2, r3
 801809e:	4603      	mov	r3, r0
 80180a0:	71fb      	strb	r3, [r7, #7]
 80180a2:	460b      	mov	r3, r1
 80180a4:	71bb      	strb	r3, [r7, #6]
 80180a6:	4613      	mov	r3, r2
 80180a8:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80180aa:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80180ae:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80180b2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80180b6:	4618      	mov	r0, r3
 80180b8:	f000 f85d 	bl	8018176 <RegionCommonValueInRange>
 80180bc:	4603      	mov	r3, r0
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d101      	bne.n	80180c6 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80180c2:	2300      	movs	r3, #0
 80180c4:	e053      	b.n	801816e <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80180c6:	2300      	movs	r3, #0
 80180c8:	73fb      	strb	r3, [r7, #15]
 80180ca:	2300      	movs	r3, #0
 80180cc:	73bb      	strb	r3, [r7, #14]
 80180ce:	e049      	b.n	8018164 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80180d0:	2300      	movs	r3, #0
 80180d2:	737b      	strb	r3, [r7, #13]
 80180d4:	e03d      	b.n	8018152 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80180d6:	7bbb      	ldrb	r3, [r7, #14]
 80180d8:	005b      	lsls	r3, r3, #1
 80180da:	683a      	ldr	r2, [r7, #0]
 80180dc:	4413      	add	r3, r2
 80180de:	881b      	ldrh	r3, [r3, #0]
 80180e0:	461a      	mov	r2, r3
 80180e2:	7b7b      	ldrb	r3, [r7, #13]
 80180e4:	fa42 f303 	asr.w	r3, r2, r3
 80180e8:	f003 0301 	and.w	r3, r3, #1
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d02d      	beq.n	801814c <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80180f0:	7bfa      	ldrb	r2, [r7, #15]
 80180f2:	7b7b      	ldrb	r3, [r7, #13]
 80180f4:	4413      	add	r3, r2
 80180f6:	461a      	mov	r2, r3
 80180f8:	4613      	mov	r3, r2
 80180fa:	005b      	lsls	r3, r3, #1
 80180fc:	4413      	add	r3, r2
 80180fe:	009b      	lsls	r3, r3, #2
 8018100:	461a      	mov	r2, r3
 8018102:	69fb      	ldr	r3, [r7, #28]
 8018104:	4413      	add	r3, r2
 8018106:	7a1b      	ldrb	r3, [r3, #8]
 8018108:	f343 0303 	sbfx	r3, r3, #0, #4
 801810c:	b25b      	sxtb	r3, r3
 801810e:	f003 030f 	and.w	r3, r3, #15
 8018112:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8018114:	7bfa      	ldrb	r2, [r7, #15]
 8018116:	7b7b      	ldrb	r3, [r7, #13]
 8018118:	4413      	add	r3, r2
 801811a:	461a      	mov	r2, r3
 801811c:	4613      	mov	r3, r2
 801811e:	005b      	lsls	r3, r3, #1
 8018120:	4413      	add	r3, r2
 8018122:	009b      	lsls	r3, r3, #2
 8018124:	461a      	mov	r2, r3
 8018126:	69fb      	ldr	r3, [r7, #28]
 8018128:	4413      	add	r3, r2
 801812a:	7a1b      	ldrb	r3, [r3, #8]
 801812c:	f343 1303 	sbfx	r3, r3, #4, #4
 8018130:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8018132:	f003 030f 	and.w	r3, r3, #15
 8018136:	b25a      	sxtb	r2, r3
 8018138:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801813c:	4618      	mov	r0, r3
 801813e:	f000 f81a 	bl	8018176 <RegionCommonValueInRange>
 8018142:	4603      	mov	r3, r0
 8018144:	2b01      	cmp	r3, #1
 8018146:	d101      	bne.n	801814c <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8018148:	2301      	movs	r3, #1
 801814a:	e010      	b.n	801816e <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 801814c:	7b7b      	ldrb	r3, [r7, #13]
 801814e:	3301      	adds	r3, #1
 8018150:	737b      	strb	r3, [r7, #13]
 8018152:	7b7b      	ldrb	r3, [r7, #13]
 8018154:	2b0f      	cmp	r3, #15
 8018156:	d9be      	bls.n	80180d6 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8018158:	7bfb      	ldrb	r3, [r7, #15]
 801815a:	3310      	adds	r3, #16
 801815c:	73fb      	strb	r3, [r7, #15]
 801815e:	7bbb      	ldrb	r3, [r7, #14]
 8018160:	3301      	adds	r3, #1
 8018162:	73bb      	strb	r3, [r7, #14]
 8018164:	7bfa      	ldrb	r2, [r7, #15]
 8018166:	79fb      	ldrb	r3, [r7, #7]
 8018168:	429a      	cmp	r2, r3
 801816a:	d3b1      	bcc.n	80180d0 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 801816c:	2300      	movs	r3, #0
}
 801816e:	4618      	mov	r0, r3
 8018170:	3710      	adds	r7, #16
 8018172:	46bd      	mov	sp, r7
 8018174:	bd80      	pop	{r7, pc}

08018176 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8018176:	b480      	push	{r7}
 8018178:	b083      	sub	sp, #12
 801817a:	af00      	add	r7, sp, #0
 801817c:	4603      	mov	r3, r0
 801817e:	71fb      	strb	r3, [r7, #7]
 8018180:	460b      	mov	r3, r1
 8018182:	71bb      	strb	r3, [r7, #6]
 8018184:	4613      	mov	r3, r2
 8018186:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8018188:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801818c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018190:	429a      	cmp	r2, r3
 8018192:	db07      	blt.n	80181a4 <RegionCommonValueInRange+0x2e>
 8018194:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8018198:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801819c:	429a      	cmp	r2, r3
 801819e:	dc01      	bgt.n	80181a4 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 80181a0:	2301      	movs	r3, #1
 80181a2:	e000      	b.n	80181a6 <RegionCommonValueInRange+0x30>
    }
    return 0;
 80181a4:	2300      	movs	r3, #0
}
 80181a6:	4618      	mov	r0, r3
 80181a8:	370c      	adds	r7, #12
 80181aa:	46bd      	mov	sp, r7
 80181ac:	bc80      	pop	{r7}
 80181ae:	4770      	bx	lr

080181b0 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80181b0:	b480      	push	{r7}
 80181b2:	b085      	sub	sp, #20
 80181b4:	af00      	add	r7, sp, #0
 80181b6:	6078      	str	r0, [r7, #4]
 80181b8:	460b      	mov	r3, r1
 80181ba:	70fb      	strb	r3, [r7, #3]
 80181bc:	4613      	mov	r3, r2
 80181be:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 80181c0:	78fb      	ldrb	r3, [r7, #3]
 80181c2:	091b      	lsrs	r3, r3, #4
 80181c4:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80181c6:	78bb      	ldrb	r3, [r7, #2]
 80181c8:	091b      	lsrs	r3, r3, #4
 80181ca:	b2db      	uxtb	r3, r3
 80181cc:	7bfa      	ldrb	r2, [r7, #15]
 80181ce:	429a      	cmp	r2, r3
 80181d0:	d803      	bhi.n	80181da <RegionCommonChanDisable+0x2a>
 80181d2:	78fa      	ldrb	r2, [r7, #3]
 80181d4:	78bb      	ldrb	r3, [r7, #2]
 80181d6:	429a      	cmp	r2, r3
 80181d8:	d301      	bcc.n	80181de <RegionCommonChanDisable+0x2e>
    {
        return false;
 80181da:	2300      	movs	r3, #0
 80181dc:	e017      	b.n	801820e <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80181de:	7bfb      	ldrb	r3, [r7, #15]
 80181e0:	005b      	lsls	r3, r3, #1
 80181e2:	687a      	ldr	r2, [r7, #4]
 80181e4:	4413      	add	r3, r2
 80181e6:	881b      	ldrh	r3, [r3, #0]
 80181e8:	b21a      	sxth	r2, r3
 80181ea:	78fb      	ldrb	r3, [r7, #3]
 80181ec:	f003 030f 	and.w	r3, r3, #15
 80181f0:	2101      	movs	r1, #1
 80181f2:	fa01 f303 	lsl.w	r3, r1, r3
 80181f6:	b21b      	sxth	r3, r3
 80181f8:	43db      	mvns	r3, r3
 80181fa:	b21b      	sxth	r3, r3
 80181fc:	4013      	ands	r3, r2
 80181fe:	b219      	sxth	r1, r3
 8018200:	7bfb      	ldrb	r3, [r7, #15]
 8018202:	005b      	lsls	r3, r3, #1
 8018204:	687a      	ldr	r2, [r7, #4]
 8018206:	4413      	add	r3, r2
 8018208:	b28a      	uxth	r2, r1
 801820a:	801a      	strh	r2, [r3, #0]

    return true;
 801820c:	2301      	movs	r3, #1
}
 801820e:	4618      	mov	r0, r3
 8018210:	3714      	adds	r7, #20
 8018212:	46bd      	mov	sp, r7
 8018214:	bc80      	pop	{r7}
 8018216:	4770      	bx	lr

08018218 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8018218:	b580      	push	{r7, lr}
 801821a:	b084      	sub	sp, #16
 801821c:	af00      	add	r7, sp, #0
 801821e:	6078      	str	r0, [r7, #4]
 8018220:	460b      	mov	r3, r1
 8018222:	70fb      	strb	r3, [r7, #3]
 8018224:	4613      	mov	r3, r2
 8018226:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8018228:	2300      	movs	r3, #0
 801822a:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	2b00      	cmp	r3, #0
 8018230:	d101      	bne.n	8018236 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8018232:	2300      	movs	r3, #0
 8018234:	e018      	b.n	8018268 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8018236:	78fb      	ldrb	r3, [r7, #3]
 8018238:	73bb      	strb	r3, [r7, #14]
 801823a:	e010      	b.n	801825e <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 801823c:	7bbb      	ldrb	r3, [r7, #14]
 801823e:	005b      	lsls	r3, r3, #1
 8018240:	687a      	ldr	r2, [r7, #4]
 8018242:	4413      	add	r3, r2
 8018244:	881b      	ldrh	r3, [r3, #0]
 8018246:	2110      	movs	r1, #16
 8018248:	4618      	mov	r0, r3
 801824a:	f7ff fef9 	bl	8018040 <CountChannels>
 801824e:	4603      	mov	r3, r0
 8018250:	461a      	mov	r2, r3
 8018252:	7bfb      	ldrb	r3, [r7, #15]
 8018254:	4413      	add	r3, r2
 8018256:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8018258:	7bbb      	ldrb	r3, [r7, #14]
 801825a:	3301      	adds	r3, #1
 801825c:	73bb      	strb	r3, [r7, #14]
 801825e:	7bba      	ldrb	r2, [r7, #14]
 8018260:	78bb      	ldrb	r3, [r7, #2]
 8018262:	429a      	cmp	r2, r3
 8018264:	d3ea      	bcc.n	801823c <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8018266:	7bfb      	ldrb	r3, [r7, #15]
}
 8018268:	4618      	mov	r0, r3
 801826a:	3710      	adds	r7, #16
 801826c:	46bd      	mov	sp, r7
 801826e:	bd80      	pop	{r7, pc}

08018270 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8018270:	b480      	push	{r7}
 8018272:	b087      	sub	sp, #28
 8018274:	af00      	add	r7, sp, #0
 8018276:	60f8      	str	r0, [r7, #12]
 8018278:	60b9      	str	r1, [r7, #8]
 801827a:	4613      	mov	r3, r2
 801827c:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 801827e:	68fb      	ldr	r3, [r7, #12]
 8018280:	2b00      	cmp	r3, #0
 8018282:	d016      	beq.n	80182b2 <RegionCommonChanMaskCopy+0x42>
 8018284:	68bb      	ldr	r3, [r7, #8]
 8018286:	2b00      	cmp	r3, #0
 8018288:	d013      	beq.n	80182b2 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 801828a:	2300      	movs	r3, #0
 801828c:	75fb      	strb	r3, [r7, #23]
 801828e:	e00c      	b.n	80182aa <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8018290:	7dfb      	ldrb	r3, [r7, #23]
 8018292:	005b      	lsls	r3, r3, #1
 8018294:	68ba      	ldr	r2, [r7, #8]
 8018296:	441a      	add	r2, r3
 8018298:	7dfb      	ldrb	r3, [r7, #23]
 801829a:	005b      	lsls	r3, r3, #1
 801829c:	68f9      	ldr	r1, [r7, #12]
 801829e:	440b      	add	r3, r1
 80182a0:	8812      	ldrh	r2, [r2, #0]
 80182a2:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80182a4:	7dfb      	ldrb	r3, [r7, #23]
 80182a6:	3301      	adds	r3, #1
 80182a8:	75fb      	strb	r3, [r7, #23]
 80182aa:	7dfa      	ldrb	r2, [r7, #23]
 80182ac:	79fb      	ldrb	r3, [r7, #7]
 80182ae:	429a      	cmp	r2, r3
 80182b0:	d3ee      	bcc.n	8018290 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 80182b2:	bf00      	nop
 80182b4:	371c      	adds	r7, #28
 80182b6:	46bd      	mov	sp, r7
 80182b8:	bc80      	pop	{r7}
 80182ba:	4770      	bx	lr

080182bc <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80182bc:	b082      	sub	sp, #8
 80182be:	b580      	push	{r7, lr}
 80182c0:	b086      	sub	sp, #24
 80182c2:	af00      	add	r7, sp, #0
 80182c4:	60f8      	str	r0, [r7, #12]
 80182c6:	60b9      	str	r1, [r7, #8]
 80182c8:	627b      	str	r3, [r7, #36]	; 0x24
 80182ca:	4613      	mov	r3, r2
 80182cc:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80182ce:	79f9      	ldrb	r1, [r7, #7]
 80182d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80182d4:	cb0c      	ldmia	r3, {r2, r3}
 80182d6:	68f8      	ldr	r0, [r7, #12]
 80182d8:	f7ff fd8b 	bl	8017df2 <GetDutyCycle>
 80182dc:	4603      	mov	r3, r0
 80182de:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80182e0:	68fb      	ldr	r3, [r7, #12]
 80182e2:	68da      	ldr	r2, [r3, #12]
 80182e4:	8afb      	ldrh	r3, [r7, #22]
 80182e6:	68b9      	ldr	r1, [r7, #8]
 80182e8:	fb01 f303 	mul.w	r3, r1, r3
 80182ec:	429a      	cmp	r2, r3
 80182ee:	d909      	bls.n	8018304 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 80182f0:	68fb      	ldr	r3, [r7, #12]
 80182f2:	68da      	ldr	r2, [r3, #12]
 80182f4:	8afb      	ldrh	r3, [r7, #22]
 80182f6:	68b9      	ldr	r1, [r7, #8]
 80182f8:	fb01 f303 	mul.w	r3, r1, r3
 80182fc:	1ad2      	subs	r2, r2, r3
 80182fe:	68fb      	ldr	r3, [r7, #12]
 8018300:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8018302:	e002      	b.n	801830a <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8018304:	68fb      	ldr	r3, [r7, #12]
 8018306:	2200      	movs	r2, #0
 8018308:	60da      	str	r2, [r3, #12]
}
 801830a:	bf00      	nop
 801830c:	3718      	adds	r7, #24
 801830e:	46bd      	mov	sp, r7
 8018310:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018314:	b002      	add	sp, #8
 8018316:	4770      	bx	lr

08018318 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8018318:	b5f0      	push	{r4, r5, r6, r7, lr}
 801831a:	b08f      	sub	sp, #60	; 0x3c
 801831c:	af04      	add	r7, sp, #16
 801831e:	6039      	str	r1, [r7, #0]
 8018320:	4611      	mov	r1, r2
 8018322:	461a      	mov	r2, r3
 8018324:	4603      	mov	r3, r0
 8018326:	71fb      	strb	r3, [r7, #7]
 8018328:	460b      	mov	r3, r1
 801832a:	71bb      	strb	r3, [r7, #6]
 801832c:	4613      	mov	r3, r2
 801832e:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8018330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018334:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8018336:	f007 f9ff 	bl	801f738 <UTIL_TIMER_GetCurrentTime>
 801833a:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 801833c:	2300      	movs	r3, #0
 801833e:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8018340:	2301      	movs	r3, #1
 8018342:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8018344:	2300      	movs	r3, #0
 8018346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 801834a:	2300      	movs	r3, #0
 801834c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8018350:	e0ba      	b.n	80184c8 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8018352:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018356:	4613      	mov	r3, r2
 8018358:	005b      	lsls	r3, r3, #1
 801835a:	4413      	add	r3, r2
 801835c:	00db      	lsls	r3, r3, #3
 801835e:	461a      	mov	r2, r3
 8018360:	683b      	ldr	r3, [r7, #0]
 8018362:	189c      	adds	r4, r3, r2
 8018364:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8018368:	797a      	ldrb	r2, [r7, #5]
 801836a:	79fd      	ldrb	r5, [r7, #7]
 801836c:	69fb      	ldr	r3, [r7, #28]
 801836e:	9302      	str	r3, [sp, #8]
 8018370:	46ec      	mov	ip, sp
 8018372:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018376:	e893 0003 	ldmia.w	r3, {r0, r1}
 801837a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801837e:	4633      	mov	r3, r6
 8018380:	4629      	mov	r1, r5
 8018382:	4620      	mov	r0, r4
 8018384:	f7ff fe22 	bl	8017fcc <UpdateTimeCredits>
 8018388:	4603      	mov	r3, r0
 801838a:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 801838c:	8afa      	ldrh	r2, [r7, #22]
 801838e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018390:	fb02 f303 	mul.w	r3, r2, r3
 8018394:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8018396:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801839a:	4613      	mov	r3, r2
 801839c:	005b      	lsls	r3, r3, #1
 801839e:	4413      	add	r3, r2
 80183a0:	00db      	lsls	r3, r3, #3
 80183a2:	461a      	mov	r2, r3
 80183a4:	683b      	ldr	r3, [r7, #0]
 80183a6:	4413      	add	r3, r2
 80183a8:	68db      	ldr	r3, [r3, #12]
 80183aa:	69ba      	ldr	r2, [r7, #24]
 80183ac:	429a      	cmp	r2, r3
 80183ae:	d908      	bls.n	80183c2 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80183b0:	797b      	ldrb	r3, [r7, #5]
 80183b2:	f083 0301 	eor.w	r3, r3, #1
 80183b6:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d013      	beq.n	80183e4 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80183bc:	79fb      	ldrb	r3, [r7, #7]
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d010      	beq.n	80183e4 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 80183c2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80183c6:	4613      	mov	r3, r2
 80183c8:	005b      	lsls	r3, r3, #1
 80183ca:	4413      	add	r3, r2
 80183cc:	00db      	lsls	r3, r3, #3
 80183ce:	461a      	mov	r2, r3
 80183d0:	683b      	ldr	r3, [r7, #0]
 80183d2:	4413      	add	r3, r2
 80183d4:	2201      	movs	r2, #1
 80183d6:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80183d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80183dc:	3301      	adds	r3, #1
 80183de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80183e2:	e06c      	b.n	80184be <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80183e4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80183e8:	4613      	mov	r3, r2
 80183ea:	005b      	lsls	r3, r3, #1
 80183ec:	4413      	add	r3, r2
 80183ee:	00db      	lsls	r3, r3, #3
 80183f0:	461a      	mov	r2, r3
 80183f2:	683b      	ldr	r3, [r7, #0]
 80183f4:	4413      	add	r3, r2
 80183f6:	2200      	movs	r2, #0
 80183f8:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 80183fa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80183fe:	4613      	mov	r3, r2
 8018400:	005b      	lsls	r3, r3, #1
 8018402:	4413      	add	r3, r2
 8018404:	00db      	lsls	r3, r3, #3
 8018406:	461a      	mov	r2, r3
 8018408:	683b      	ldr	r3, [r7, #0]
 801840a:	4413      	add	r3, r2
 801840c:	691b      	ldr	r3, [r3, #16]
 801840e:	69ba      	ldr	r2, [r7, #24]
 8018410:	429a      	cmp	r2, r3
 8018412:	d815      	bhi.n	8018440 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8018414:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018418:	4613      	mov	r3, r2
 801841a:	005b      	lsls	r3, r3, #1
 801841c:	4413      	add	r3, r2
 801841e:	00db      	lsls	r3, r3, #3
 8018420:	461a      	mov	r2, r3
 8018422:	683b      	ldr	r3, [r7, #0]
 8018424:	4413      	add	r3, r2
 8018426:	68db      	ldr	r3, [r3, #12]
 8018428:	69ba      	ldr	r2, [r7, #24]
 801842a:	1ad3      	subs	r3, r2, r3
 801842c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801842e:	4293      	cmp	r3, r2
 8018430:	bf28      	it	cs
 8018432:	4613      	movcs	r3, r2
 8018434:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8018436:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801843a:	3301      	adds	r3, #1
 801843c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8018440:	79fb      	ldrb	r3, [r7, #7]
 8018442:	f083 0301 	eor.w	r3, r3, #1
 8018446:	b2db      	uxtb	r3, r3
 8018448:	2b00      	cmp	r3, #0
 801844a:	d038      	beq.n	80184be <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 801844c:	2300      	movs	r3, #0
 801844e:	60fb      	str	r3, [r7, #12]
 8018450:	2300      	movs	r3, #0
 8018452:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8018454:	8afb      	ldrh	r3, [r7, #22]
 8018456:	2b64      	cmp	r3, #100	; 0x64
 8018458:	d103      	bne.n	8018462 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 801845a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801845e:	60fb      	str	r3, [r7, #12]
 8018460:	e009      	b.n	8018476 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8018462:	8afb      	ldrh	r3, [r7, #22]
 8018464:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8018468:	d103      	bne.n	8018472 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 801846a:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 801846e:	60fb      	str	r3, [r7, #12]
 8018470:	e001      	b.n	8018476 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8018472:	4b1e      	ldr	r3, [pc, #120]	; (80184ec <RegionCommonUpdateBandTimeOff+0x1d4>)
 8018474:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8018476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018478:	4a1c      	ldr	r2, [pc, #112]	; (80184ec <RegionCommonUpdateBandTimeOff+0x1d4>)
 801847a:	4293      	cmp	r3, r2
 801847c:	d90e      	bls.n	801849c <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 801847e:	68fa      	ldr	r2, [r7, #12]
 8018480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018482:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8018486:	3b30      	subs	r3, #48	; 0x30
 8018488:	4919      	ldr	r1, [pc, #100]	; (80184f0 <RegionCommonUpdateBandTimeOff+0x1d8>)
 801848a:	fba1 1303 	umull	r1, r3, r1, r3
 801848e:	0c1b      	lsrs	r3, r3, #16
 8018490:	3301      	adds	r3, #1
 8018492:	4918      	ldr	r1, [pc, #96]	; (80184f4 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8018494:	fb01 f303 	mul.w	r3, r1, r3
 8018498:	4413      	add	r3, r2
 801849a:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 801849c:	f107 000c 	add.w	r0, r7, #12
 80184a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80184a2:	9300      	str	r3, [sp, #0]
 80184a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80184a6:	f107 020c 	add.w	r2, r7, #12
 80184aa:	ca06      	ldmia	r2, {r1, r2}
 80184ac:	f006 fb63 	bl	801eb76 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 80184b0:	f107 030c 	add.w	r3, r7, #12
 80184b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80184b8:	f006 fc1c 	bl	801ecf4 <SysTimeToMs>
 80184bc:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 80184be:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80184c2:	3301      	adds	r3, #1
 80184c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80184c8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80184cc:	79bb      	ldrb	r3, [r7, #6]
 80184ce:	429a      	cmp	r2, r3
 80184d0:	f4ff af3f 	bcc.w	8018352 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 80184d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80184d8:	2b00      	cmp	r3, #0
 80184da:	d102      	bne.n	80184e2 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 80184dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80184e0:	e000      	b.n	80184e4 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 80184e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80184e4:	4618      	mov	r0, r3
 80184e6:	372c      	adds	r7, #44	; 0x2c
 80184e8:	46bd      	mov	sp, r7
 80184ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80184ec:	0001ec30 	.word	0x0001ec30
 80184f0:	c22e4507 	.word	0xc22e4507
 80184f4:	00015180 	.word	0x00015180

080184f8 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80184f8:	b480      	push	{r7}
 80184fa:	b085      	sub	sp, #20
 80184fc:	af00      	add	r7, sp, #0
 80184fe:	6078      	str	r0, [r7, #4]
 8018500:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8018502:	2300      	movs	r3, #0
 8018504:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	781b      	ldrb	r3, [r3, #0]
 801850a:	2b03      	cmp	r3, #3
 801850c:	d13f      	bne.n	801858e <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	3301      	adds	r3, #1
 8018512:	781b      	ldrb	r3, [r3, #0]
 8018514:	b25a      	sxtb	r2, r3
 8018516:	683b      	ldr	r3, [r7, #0]
 8018518:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801851a:	683b      	ldr	r3, [r7, #0]
 801851c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018520:	f003 030f 	and.w	r3, r3, #15
 8018524:	b25a      	sxtb	r2, r3
 8018526:	683b      	ldr	r3, [r7, #0]
 8018528:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 801852a:	683b      	ldr	r3, [r7, #0]
 801852c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018530:	b2db      	uxtb	r3, r3
 8018532:	091b      	lsrs	r3, r3, #4
 8018534:	b2db      	uxtb	r3, r3
 8018536:	b25a      	sxtb	r2, r3
 8018538:	683b      	ldr	r3, [r7, #0]
 801853a:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	3302      	adds	r3, #2
 8018540:	781b      	ldrb	r3, [r3, #0]
 8018542:	b29a      	uxth	r2, r3
 8018544:	683b      	ldr	r3, [r7, #0]
 8018546:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8018548:	683b      	ldr	r3, [r7, #0]
 801854a:	889b      	ldrh	r3, [r3, #4]
 801854c:	b21a      	sxth	r2, r3
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	3303      	adds	r3, #3
 8018552:	781b      	ldrb	r3, [r3, #0]
 8018554:	021b      	lsls	r3, r3, #8
 8018556:	b21b      	sxth	r3, r3
 8018558:	4313      	orrs	r3, r2
 801855a:	b21b      	sxth	r3, r3
 801855c:	b29a      	uxth	r2, r3
 801855e:	683b      	ldr	r3, [r7, #0]
 8018560:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	791a      	ldrb	r2, [r3, #4]
 8018566:	683b      	ldr	r3, [r7, #0]
 8018568:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 801856a:	683b      	ldr	r3, [r7, #0]
 801856c:	781b      	ldrb	r3, [r3, #0]
 801856e:	091b      	lsrs	r3, r3, #4
 8018570:	b2db      	uxtb	r3, r3
 8018572:	f003 0307 	and.w	r3, r3, #7
 8018576:	b2da      	uxtb	r2, r3
 8018578:	683b      	ldr	r3, [r7, #0]
 801857a:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 801857c:	683b      	ldr	r3, [r7, #0]
 801857e:	781b      	ldrb	r3, [r3, #0]
 8018580:	f003 030f 	and.w	r3, r3, #15
 8018584:	b2da      	uxtb	r2, r3
 8018586:	683b      	ldr	r3, [r7, #0]
 8018588:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 801858a:	2305      	movs	r3, #5
 801858c:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 801858e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018590:	4618      	mov	r0, r3
 8018592:	3714      	adds	r7, #20
 8018594:	46bd      	mov	sp, r7
 8018596:	bc80      	pop	{r7}
 8018598:	4770      	bx	lr

0801859a <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801859a:	b5b0      	push	{r4, r5, r7, lr}
 801859c:	b088      	sub	sp, #32
 801859e:	af02      	add	r7, sp, #8
 80185a0:	60f8      	str	r0, [r7, #12]
 80185a2:	60b9      	str	r1, [r7, #8]
 80185a4:	607a      	str	r2, [r7, #4]
 80185a6:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80185a8:	68fb      	ldr	r3, [r7, #12]
 80185aa:	791b      	ldrb	r3, [r3, #4]
 80185ac:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 80185ae:	68fb      	ldr	r3, [r7, #12]
 80185b0:	799b      	ldrb	r3, [r3, #6]
 80185b2:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 80185b4:	68fb      	ldr	r3, [r7, #12]
 80185b6:	79db      	ldrb	r3, [r3, #7]
 80185b8:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 80185ba:	68fb      	ldr	r3, [r7, #12]
 80185bc:	7a1b      	ldrb	r3, [r3, #8]
 80185be:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	795b      	ldrb	r3, [r3, #5]
 80185c4:	f083 0301 	eor.w	r3, r3, #1
 80185c8:	b2db      	uxtb	r3, r3
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d008      	beq.n	80185e0 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80185ce:	68fb      	ldr	r3, [r7, #12]
 80185d0:	7adb      	ldrb	r3, [r3, #11]
 80185d2:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80185d4:	68fb      	ldr	r3, [r7, #12]
 80185d6:	7a5b      	ldrb	r3, [r3, #9]
 80185d8:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 80185da:	68fb      	ldr	r3, [r7, #12]
 80185dc:	7a9b      	ldrb	r3, [r3, #10]
 80185de:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80185e0:	7dfb      	ldrb	r3, [r7, #23]
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d04a      	beq.n	801867c <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 80185e6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80185ea:	2b0f      	cmp	r3, #15
 80185ec:	d103      	bne.n	80185f6 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 80185ee:	68fb      	ldr	r3, [r7, #12]
 80185f0:	7a5b      	ldrb	r3, [r3, #9]
 80185f2:	75bb      	strb	r3, [r7, #22]
 80185f4:	e01d      	b.n	8018632 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80185f6:	68fb      	ldr	r3, [r7, #12]
 80185f8:	7b18      	ldrb	r0, [r3, #12]
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	6919      	ldr	r1, [r3, #16]
 80185fe:	68fb      	ldr	r3, [r7, #12]
 8018600:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	f993 3015 	ldrsb.w	r3, [r3, #21]
 801860a:	68fa      	ldr	r2, [r7, #12]
 801860c:	6992      	ldr	r2, [r2, #24]
 801860e:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8018612:	9201      	str	r2, [sp, #4]
 8018614:	9300      	str	r3, [sp, #0]
 8018616:	462b      	mov	r3, r5
 8018618:	4622      	mov	r2, r4
 801861a:	f7ff fd3a 	bl	8018092 <RegionCommonChanVerifyDr>
 801861e:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8018620:	f083 0301 	eor.w	r3, r3, #1
 8018624:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8018626:	2b00      	cmp	r3, #0
 8018628:	d003      	beq.n	8018632 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 801862a:	7dfb      	ldrb	r3, [r7, #23]
 801862c:	f023 0302 	bic.w	r3, r3, #2
 8018630:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8018632:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8018636:	2b0f      	cmp	r3, #15
 8018638:	d103      	bne.n	8018642 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 801863a:	68fb      	ldr	r3, [r7, #12]
 801863c:	7a9b      	ldrb	r3, [r3, #10]
 801863e:	757b      	strb	r3, [r7, #21]
 8018640:	e01c      	b.n	801867c <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8018642:	68fb      	ldr	r3, [r7, #12]
 8018644:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	f993 201c 	ldrsb.w	r2, [r3, #28]
 801864e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8018652:	4618      	mov	r0, r3
 8018654:	f7ff fd8f 	bl	8018176 <RegionCommonValueInRange>
 8018658:	4603      	mov	r3, r0
 801865a:	2b00      	cmp	r3, #0
 801865c:	d10e      	bne.n	801867c <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 801865e:	68fb      	ldr	r3, [r7, #12]
 8018660:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8018664:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8018668:	429a      	cmp	r2, r3
 801866a:	da03      	bge.n	8018674 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 801866c:	68fb      	ldr	r3, [r7, #12]
 801866e:	7f5b      	ldrb	r3, [r3, #29]
 8018670:	757b      	strb	r3, [r7, #21]
 8018672:	e003      	b.n	801867c <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8018674:	7dfb      	ldrb	r3, [r7, #23]
 8018676:	f023 0304 	bic.w	r3, r3, #4
 801867a:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 801867c:	7dfb      	ldrb	r3, [r7, #23]
 801867e:	2b07      	cmp	r3, #7
 8018680:	d105      	bne.n	801868e <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8018682:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8018686:	2b00      	cmp	r3, #0
 8018688:	d101      	bne.n	801868e <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 801868a:	2301      	movs	r3, #1
 801868c:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 801868e:	68bb      	ldr	r3, [r7, #8]
 8018690:	7dba      	ldrb	r2, [r7, #22]
 8018692:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	7d7a      	ldrb	r2, [r7, #21]
 8018698:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 801869a:	7d3a      	ldrb	r2, [r7, #20]
 801869c:	683b      	ldr	r3, [r7, #0]
 801869e:	701a      	strb	r2, [r3, #0]

    return status;
 80186a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80186a2:	4618      	mov	r0, r3
 80186a4:	3718      	adds	r7, #24
 80186a6:	46bd      	mov	sp, r7
 80186a8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080186ac <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80186ac:	b480      	push	{r7}
 80186ae:	b083      	sub	sp, #12
 80186b0:	af00      	add	r7, sp, #0
 80186b2:	4603      	mov	r3, r0
 80186b4:	6039      	str	r1, [r7, #0]
 80186b6:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80186b8:	79fb      	ldrb	r3, [r7, #7]
 80186ba:	4a06      	ldr	r2, [pc, #24]	; (80186d4 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 80186bc:	fa02 f303 	lsl.w	r3, r2, r3
 80186c0:	461a      	mov	r2, r3
 80186c2:	683b      	ldr	r3, [r7, #0]
 80186c4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80186c8:	4618      	mov	r0, r3
 80186ca:	370c      	adds	r7, #12
 80186cc:	46bd      	mov	sp, r7
 80186ce:	bc80      	pop	{r7}
 80186d0:	4770      	bx	lr
 80186d2:	bf00      	nop
 80186d4:	000f4240 	.word	0x000f4240

080186d8 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 80186d8:	b480      	push	{r7}
 80186da:	b083      	sub	sp, #12
 80186dc:	af00      	add	r7, sp, #0
 80186de:	4603      	mov	r3, r0
 80186e0:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80186e2:	79fb      	ldrb	r3, [r7, #7]
 80186e4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80186e8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80186ec:	4618      	mov	r0, r3
 80186ee:	370c      	adds	r7, #12
 80186f0:	46bd      	mov	sp, r7
 80186f2:	bc80      	pop	{r7}
 80186f4:	4770      	bx	lr
	...

080186f8 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 80186f8:	b480      	push	{r7}
 80186fa:	b085      	sub	sp, #20
 80186fc:	af00      	add	r7, sp, #0
 80186fe:	60f8      	str	r0, [r7, #12]
 8018700:	607a      	str	r2, [r7, #4]
 8018702:	603b      	str	r3, [r7, #0]
 8018704:	460b      	mov	r3, r1
 8018706:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8018708:	7afa      	ldrb	r2, [r7, #11]
 801870a:	7afb      	ldrb	r3, [r7, #11]
 801870c:	3b04      	subs	r3, #4
 801870e:	4619      	mov	r1, r3
 8018710:	68fb      	ldr	r3, [r7, #12]
 8018712:	fb03 f101 	mul.w	r1, r3, r1
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801871c:	fb00 f303 	mul.w	r3, r0, r3
 8018720:	440b      	add	r3, r1
 8018722:	005b      	lsls	r3, r3, #1
 8018724:	2b00      	cmp	r3, #0
 8018726:	d013      	beq.n	8018750 <RegionCommonComputeRxWindowParameters+0x58>
 8018728:	7afb      	ldrb	r3, [r7, #11]
 801872a:	3b04      	subs	r3, #4
 801872c:	4619      	mov	r1, r3
 801872e:	68fb      	ldr	r3, [r7, #12]
 8018730:	fb03 f101 	mul.w	r1, r3, r1
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801873a:	fb00 f303 	mul.w	r3, r0, r3
 801873e:	440b      	add	r3, r1
 8018740:	0059      	lsls	r1, r3, #1
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	440b      	add	r3, r1
 8018746:	1e59      	subs	r1, r3, #1
 8018748:	68fb      	ldr	r3, [r7, #12]
 801874a:	fbb1 f3f3 	udiv	r3, r1, r3
 801874e:	e00f      	b.n	8018770 <RegionCommonComputeRxWindowParameters+0x78>
 8018750:	7afb      	ldrb	r3, [r7, #11]
 8018752:	3b04      	subs	r3, #4
 8018754:	4619      	mov	r1, r3
 8018756:	68fb      	ldr	r3, [r7, #12]
 8018758:	fb03 f101 	mul.w	r1, r3, r1
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018762:	fb00 f303 	mul.w	r3, r0, r3
 8018766:	440b      	add	r3, r1
 8018768:	0059      	lsls	r1, r3, #1
 801876a:	68fb      	ldr	r3, [r7, #12]
 801876c:	fbb1 f3f3 	udiv	r3, r1, r3
 8018770:	429a      	cmp	r2, r3
 8018772:	bf38      	it	cc
 8018774:	461a      	movcc	r2, r3
 8018776:	69bb      	ldr	r3, [r7, #24]
 8018778:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 801877a:	68fb      	ldr	r3, [r7, #12]
 801877c:	009b      	lsls	r3, r3, #2
 801877e:	4619      	mov	r1, r3
 8018780:	69bb      	ldr	r3, [r7, #24]
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	68fa      	ldr	r2, [r7, #12]
 8018786:	fb02 f303 	mul.w	r3, r2, r3
 801878a:	2b00      	cmp	r3, #0
 801878c:	d007      	beq.n	801879e <RegionCommonComputeRxWindowParameters+0xa6>
 801878e:	69bb      	ldr	r3, [r7, #24]
 8018790:	681b      	ldr	r3, [r3, #0]
 8018792:	68fa      	ldr	r2, [r7, #12]
 8018794:	fb02 f303 	mul.w	r3, r2, r3
 8018798:	3301      	adds	r3, #1
 801879a:	085b      	lsrs	r3, r3, #1
 801879c:	e005      	b.n	80187aa <RegionCommonComputeRxWindowParameters+0xb2>
 801879e:	69bb      	ldr	r3, [r7, #24]
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	68fa      	ldr	r2, [r7, #12]
 80187a4:	fb02 f303 	mul.w	r3, r2, r3
 80187a8:	085b      	lsrs	r3, r3, #1
 80187aa:	1acb      	subs	r3, r1, r3
 80187ac:	683a      	ldr	r2, [r7, #0]
 80187ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80187b2:	fb01 f202 	mul.w	r2, r1, r2
 80187b6:	1a9b      	subs	r3, r3, r2
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	dd27      	ble.n	801880c <RegionCommonComputeRxWindowParameters+0x114>
 80187bc:	68fb      	ldr	r3, [r7, #12]
 80187be:	009b      	lsls	r3, r3, #2
 80187c0:	4619      	mov	r1, r3
 80187c2:	69bb      	ldr	r3, [r7, #24]
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	68fa      	ldr	r2, [r7, #12]
 80187c8:	fb02 f303 	mul.w	r3, r2, r3
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d007      	beq.n	80187e0 <RegionCommonComputeRxWindowParameters+0xe8>
 80187d0:	69bb      	ldr	r3, [r7, #24]
 80187d2:	681b      	ldr	r3, [r3, #0]
 80187d4:	68fa      	ldr	r2, [r7, #12]
 80187d6:	fb02 f303 	mul.w	r3, r2, r3
 80187da:	3301      	adds	r3, #1
 80187dc:	085b      	lsrs	r3, r3, #1
 80187de:	e005      	b.n	80187ec <RegionCommonComputeRxWindowParameters+0xf4>
 80187e0:	69bb      	ldr	r3, [r7, #24]
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	68fa      	ldr	r2, [r7, #12]
 80187e6:	fb02 f303 	mul.w	r3, r2, r3
 80187ea:	085b      	lsrs	r3, r3, #1
 80187ec:	1acb      	subs	r3, r1, r3
 80187ee:	683a      	ldr	r2, [r7, #0]
 80187f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80187f4:	fb01 f202 	mul.w	r2, r1, r2
 80187f8:	1a9b      	subs	r3, r3, r2
 80187fa:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80187fe:	4a19      	ldr	r2, [pc, #100]	; (8018864 <RegionCommonComputeRxWindowParameters+0x16c>)
 8018800:	fb82 1203 	smull	r1, r2, r2, r3
 8018804:	1192      	asrs	r2, r2, #6
 8018806:	17db      	asrs	r3, r3, #31
 8018808:	1ad3      	subs	r3, r2, r3
 801880a:	e024      	b.n	8018856 <RegionCommonComputeRxWindowParameters+0x15e>
 801880c:	68fb      	ldr	r3, [r7, #12]
 801880e:	009b      	lsls	r3, r3, #2
 8018810:	4619      	mov	r1, r3
 8018812:	69bb      	ldr	r3, [r7, #24]
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	68fa      	ldr	r2, [r7, #12]
 8018818:	fb02 f303 	mul.w	r3, r2, r3
 801881c:	2b00      	cmp	r3, #0
 801881e:	d007      	beq.n	8018830 <RegionCommonComputeRxWindowParameters+0x138>
 8018820:	69bb      	ldr	r3, [r7, #24]
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	68fa      	ldr	r2, [r7, #12]
 8018826:	fb02 f303 	mul.w	r3, r2, r3
 801882a:	3301      	adds	r3, #1
 801882c:	085b      	lsrs	r3, r3, #1
 801882e:	e005      	b.n	801883c <RegionCommonComputeRxWindowParameters+0x144>
 8018830:	69bb      	ldr	r3, [r7, #24]
 8018832:	681b      	ldr	r3, [r3, #0]
 8018834:	68fa      	ldr	r2, [r7, #12]
 8018836:	fb02 f303 	mul.w	r3, r2, r3
 801883a:	085b      	lsrs	r3, r3, #1
 801883c:	1acb      	subs	r3, r1, r3
 801883e:	683a      	ldr	r2, [r7, #0]
 8018840:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018844:	fb01 f202 	mul.w	r2, r1, r2
 8018848:	1a9b      	subs	r3, r3, r2
 801884a:	4a06      	ldr	r2, [pc, #24]	; (8018864 <RegionCommonComputeRxWindowParameters+0x16c>)
 801884c:	fb82 1203 	smull	r1, r2, r2, r3
 8018850:	1192      	asrs	r2, r2, #6
 8018852:	17db      	asrs	r3, r3, #31
 8018854:	1ad3      	subs	r3, r2, r3
 8018856:	69fa      	ldr	r2, [r7, #28]
 8018858:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 801885a:	bf00      	nop
 801885c:	3714      	adds	r7, #20
 801885e:	46bd      	mov	sp, r7
 8018860:	bc80      	pop	{r7}
 8018862:	4770      	bx	lr
 8018864:	10624dd3 	.word	0x10624dd3

08018868 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8018868:	b580      	push	{r7, lr}
 801886a:	b086      	sub	sp, #24
 801886c:	af00      	add	r7, sp, #0
 801886e:	4603      	mov	r3, r0
 8018870:	60b9      	str	r1, [r7, #8]
 8018872:	607a      	str	r2, [r7, #4]
 8018874:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8018876:	2300      	movs	r3, #0
 8018878:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 801887a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801887e:	005b      	lsls	r3, r3, #1
 8018880:	4618      	mov	r0, r3
 8018882:	f7e8 fa05 	bl	8000c90 <__aeabi_ui2f>
 8018886:	4603      	mov	r3, r0
 8018888:	4619      	mov	r1, r3
 801888a:	68b8      	ldr	r0, [r7, #8]
 801888c:	f7e8 f94e 	bl	8000b2c <__aeabi_fsub>
 8018890:	4603      	mov	r3, r0
 8018892:	6879      	ldr	r1, [r7, #4]
 8018894:	4618      	mov	r0, r3
 8018896:	f7e8 f949 	bl	8000b2c <__aeabi_fsub>
 801889a:	4603      	mov	r3, r0
 801889c:	4618      	mov	r0, r3
 801889e:	f7e7 fdd7 	bl	8000450 <__aeabi_f2d>
 80188a2:	4602      	mov	r2, r0
 80188a4:	460b      	mov	r3, r1
 80188a6:	4610      	mov	r0, r2
 80188a8:	4619      	mov	r1, r3
 80188aa:	f007 faad 	bl	801fe08 <floor>
 80188ae:	4602      	mov	r2, r0
 80188b0:	460b      	mov	r3, r1
 80188b2:	4610      	mov	r0, r2
 80188b4:	4619      	mov	r1, r3
 80188b6:	f7e8 f8bd 	bl	8000a34 <__aeabi_d2iz>
 80188ba:	4603      	mov	r3, r0
 80188bc:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 80188be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80188c2:	4618      	mov	r0, r3
 80188c4:	3718      	adds	r7, #24
 80188c6:	46bd      	mov	sp, r7
 80188c8:	bd80      	pop	{r7, pc}

080188ca <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80188ca:	b590      	push	{r4, r7, lr}
 80188cc:	b087      	sub	sp, #28
 80188ce:	af00      	add	r7, sp, #0
 80188d0:	60f8      	str	r0, [r7, #12]
 80188d2:	60b9      	str	r1, [r7, #8]
 80188d4:	607a      	str	r2, [r7, #4]
 80188d6:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80188d8:	2300      	movs	r3, #0
 80188da:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 80188dc:	2300      	movs	r3, #0
 80188de:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80188e0:	2300      	movs	r3, #0
 80188e2:	757b      	strb	r3, [r7, #21]
 80188e4:	2300      	movs	r3, #0
 80188e6:	753b      	strb	r3, [r7, #20]
 80188e8:	e09c      	b.n	8018a24 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80188ea:	2300      	movs	r3, #0
 80188ec:	74fb      	strb	r3, [r7, #19]
 80188ee:	e08f      	b.n	8018a10 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80188f0:	68fb      	ldr	r3, [r7, #12]
 80188f2:	685a      	ldr	r2, [r3, #4]
 80188f4:	7d3b      	ldrb	r3, [r7, #20]
 80188f6:	005b      	lsls	r3, r3, #1
 80188f8:	4413      	add	r3, r2
 80188fa:	881b      	ldrh	r3, [r3, #0]
 80188fc:	461a      	mov	r2, r3
 80188fe:	7cfb      	ldrb	r3, [r7, #19]
 8018900:	fa42 f303 	asr.w	r3, r2, r3
 8018904:	f003 0301 	and.w	r3, r3, #1
 8018908:	2b00      	cmp	r3, #0
 801890a:	d07e      	beq.n	8018a0a <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 801890c:	68fb      	ldr	r3, [r7, #12]
 801890e:	689a      	ldr	r2, [r3, #8]
 8018910:	7d79      	ldrb	r1, [r7, #21]
 8018912:	7cfb      	ldrb	r3, [r7, #19]
 8018914:	440b      	add	r3, r1
 8018916:	4619      	mov	r1, r3
 8018918:	460b      	mov	r3, r1
 801891a:	005b      	lsls	r3, r3, #1
 801891c:	440b      	add	r3, r1
 801891e:	009b      	lsls	r3, r3, #2
 8018920:	4413      	add	r3, r2
 8018922:	681b      	ldr	r3, [r3, #0]
 8018924:	2b00      	cmp	r3, #0
 8018926:	d06b      	beq.n	8018a00 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8018928:	68fb      	ldr	r3, [r7, #12]
 801892a:	781b      	ldrb	r3, [r3, #0]
 801892c:	f083 0301 	eor.w	r3, r3, #1
 8018930:	b2db      	uxtb	r3, r3
 8018932:	2b00      	cmp	r3, #0
 8018934:	d011      	beq.n	801895a <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8018936:	68fb      	ldr	r3, [r7, #12]
 8018938:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801893a:	2b00      	cmp	r3, #0
 801893c:	d00d      	beq.n	801895a <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801893e:	68fb      	ldr	r3, [r7, #12]
 8018940:	695a      	ldr	r2, [r3, #20]
 8018942:	7d3b      	ldrb	r3, [r7, #20]
 8018944:	005b      	lsls	r3, r3, #1
 8018946:	4413      	add	r3, r2
 8018948:	881b      	ldrh	r3, [r3, #0]
 801894a:	461a      	mov	r2, r3
 801894c:	7cfb      	ldrb	r3, [r7, #19]
 801894e:	fa42 f303 	asr.w	r3, r2, r3
 8018952:	f003 0301 	and.w	r3, r3, #1
 8018956:	2b00      	cmp	r3, #0
 8018958:	d054      	beq.n	8018a04 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801895a:	68fb      	ldr	r3, [r7, #12]
 801895c:	785b      	ldrb	r3, [r3, #1]
 801895e:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8018960:	68fb      	ldr	r3, [r7, #12]
 8018962:	689a      	ldr	r2, [r3, #8]
 8018964:	7d79      	ldrb	r1, [r7, #21]
 8018966:	7cfb      	ldrb	r3, [r7, #19]
 8018968:	440b      	add	r3, r1
 801896a:	4619      	mov	r1, r3
 801896c:	460b      	mov	r3, r1
 801896e:	005b      	lsls	r3, r3, #1
 8018970:	440b      	add	r3, r1
 8018972:	009b      	lsls	r3, r3, #2
 8018974:	4413      	add	r3, r2
 8018976:	7a1b      	ldrb	r3, [r3, #8]
 8018978:	f343 0303 	sbfx	r3, r3, #0, #4
 801897c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801897e:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8018980:	68fb      	ldr	r3, [r7, #12]
 8018982:	689a      	ldr	r2, [r3, #8]
 8018984:	7d79      	ldrb	r1, [r7, #21]
 8018986:	7cfb      	ldrb	r3, [r7, #19]
 8018988:	440b      	add	r3, r1
 801898a:	4619      	mov	r1, r3
 801898c:	460b      	mov	r3, r1
 801898e:	005b      	lsls	r3, r3, #1
 8018990:	440b      	add	r3, r1
 8018992:	009b      	lsls	r3, r3, #2
 8018994:	4413      	add	r3, r2
 8018996:	7a1b      	ldrb	r3, [r3, #8]
 8018998:	f343 1303 	sbfx	r3, r3, #4, #4
 801899c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801899e:	461a      	mov	r2, r3
 80189a0:	4621      	mov	r1, r4
 80189a2:	f7ff fbe8 	bl	8018176 <RegionCommonValueInRange>
 80189a6:	4603      	mov	r3, r0
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	d02d      	beq.n	8018a08 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80189ac:	68fb      	ldr	r3, [r7, #12]
 80189ae:	68da      	ldr	r2, [r3, #12]
 80189b0:	68fb      	ldr	r3, [r7, #12]
 80189b2:	6899      	ldr	r1, [r3, #8]
 80189b4:	7d78      	ldrb	r0, [r7, #21]
 80189b6:	7cfb      	ldrb	r3, [r7, #19]
 80189b8:	4403      	add	r3, r0
 80189ba:	4618      	mov	r0, r3
 80189bc:	4603      	mov	r3, r0
 80189be:	005b      	lsls	r3, r3, #1
 80189c0:	4403      	add	r3, r0
 80189c2:	009b      	lsls	r3, r3, #2
 80189c4:	440b      	add	r3, r1
 80189c6:	7a5b      	ldrb	r3, [r3, #9]
 80189c8:	4619      	mov	r1, r3
 80189ca:	460b      	mov	r3, r1
 80189cc:	005b      	lsls	r3, r3, #1
 80189ce:	440b      	add	r3, r1
 80189d0:	00db      	lsls	r3, r3, #3
 80189d2:	4413      	add	r3, r2
 80189d4:	7d1b      	ldrb	r3, [r3, #20]
 80189d6:	f083 0301 	eor.w	r3, r3, #1
 80189da:	b2db      	uxtb	r3, r3
 80189dc:	2b00      	cmp	r3, #0
 80189de:	d003      	beq.n	80189e8 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 80189e0:	7dbb      	ldrb	r3, [r7, #22]
 80189e2:	3301      	adds	r3, #1
 80189e4:	75bb      	strb	r3, [r7, #22]
                    continue;
 80189e6:	e010      	b.n	8018a0a <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 80189e8:	7dfb      	ldrb	r3, [r7, #23]
 80189ea:	1c5a      	adds	r2, r3, #1
 80189ec:	75fa      	strb	r2, [r7, #23]
 80189ee:	461a      	mov	r2, r3
 80189f0:	68bb      	ldr	r3, [r7, #8]
 80189f2:	4413      	add	r3, r2
 80189f4:	7d79      	ldrb	r1, [r7, #21]
 80189f6:	7cfa      	ldrb	r2, [r7, #19]
 80189f8:	440a      	add	r2, r1
 80189fa:	b2d2      	uxtb	r2, r2
 80189fc:	701a      	strb	r2, [r3, #0]
 80189fe:	e004      	b.n	8018a0a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8018a00:	bf00      	nop
 8018a02:	e002      	b.n	8018a0a <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8018a04:	bf00      	nop
 8018a06:	e000      	b.n	8018a0a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8018a08:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8018a0a:	7cfb      	ldrb	r3, [r7, #19]
 8018a0c:	3301      	adds	r3, #1
 8018a0e:	74fb      	strb	r3, [r7, #19]
 8018a10:	7cfb      	ldrb	r3, [r7, #19]
 8018a12:	2b0f      	cmp	r3, #15
 8018a14:	f67f af6c 	bls.w	80188f0 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8018a18:	7d7b      	ldrb	r3, [r7, #21]
 8018a1a:	3310      	adds	r3, #16
 8018a1c:	757b      	strb	r3, [r7, #21]
 8018a1e:	7d3b      	ldrb	r3, [r7, #20]
 8018a20:	3301      	adds	r3, #1
 8018a22:	753b      	strb	r3, [r7, #20]
 8018a24:	7d7b      	ldrb	r3, [r7, #21]
 8018a26:	b29a      	uxth	r2, r3
 8018a28:	68fb      	ldr	r3, [r7, #12]
 8018a2a:	8a1b      	ldrh	r3, [r3, #16]
 8018a2c:	429a      	cmp	r2, r3
 8018a2e:	f4ff af5c 	bcc.w	80188ea <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	7dfa      	ldrb	r2, [r7, #23]
 8018a36:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8018a38:	683b      	ldr	r3, [r7, #0]
 8018a3a:	7dba      	ldrb	r2, [r7, #22]
 8018a3c:	701a      	strb	r2, [r3, #0]
}
 8018a3e:	bf00      	nop
 8018a40:	371c      	adds	r7, #28
 8018a42:	46bd      	mov	sp, r7
 8018a44:	bd90      	pop	{r4, r7, pc}

08018a46 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8018a46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a48:	b08b      	sub	sp, #44	; 0x2c
 8018a4a:	af04      	add	r7, sp, #16
 8018a4c:	60f8      	str	r0, [r7, #12]
 8018a4e:	60b9      	str	r1, [r7, #8]
 8018a50:	607a      	str	r2, [r7, #4]
 8018a52:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8018a54:	68fb      	ldr	r3, [r7, #12]
 8018a56:	685b      	ldr	r3, [r3, #4]
 8018a58:	4618      	mov	r0, r3
 8018a5a:	f006 fe7f 	bl	801f75c <UTIL_TIMER_GetElapsedTime>
 8018a5e:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8018a60:	68fb      	ldr	r3, [r7, #12]
 8018a62:	681a      	ldr	r2, [r3, #0]
 8018a64:	697b      	ldr	r3, [r7, #20]
 8018a66:	1ad2      	subs	r2, r2, r3
 8018a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a6a:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8018a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a6e:	2201      	movs	r2, #1
 8018a70:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8018a72:	683b      	ldr	r3, [r7, #0]
 8018a74:	2200      	movs	r2, #0
 8018a76:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8018a78:	68fb      	ldr	r3, [r7, #12]
 8018a7a:	685b      	ldr	r3, [r3, #4]
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d004      	beq.n	8018a8a <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8018a80:	68fb      	ldr	r3, [r7, #12]
 8018a82:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8018a84:	697a      	ldr	r2, [r7, #20]
 8018a86:	429a      	cmp	r2, r3
 8018a88:	d32b      	bcc.n	8018ae2 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8018a8a:	68bb      	ldr	r3, [r7, #8]
 8018a8c:	2200      	movs	r2, #0
 8018a8e:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8018a90:	68fb      	ldr	r3, [r7, #12]
 8018a92:	69db      	ldr	r3, [r3, #28]
 8018a94:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8018a96:	68fb      	ldr	r3, [r7, #12]
 8018a98:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8018a9a:	68dd      	ldr	r5, [r3, #12]
 8018a9c:	68fb      	ldr	r3, [r7, #12]
 8018a9e:	7a5e      	ldrb	r6, [r3, #9]
 8018aa0:	68fb      	ldr	r3, [r7, #12]
 8018aa2:	f893 c008 	ldrb.w	ip, [r3, #8]
 8018aa6:	68fb      	ldr	r3, [r7, #12]
 8018aa8:	7d1b      	ldrb	r3, [r3, #20]
 8018aaa:	68fa      	ldr	r2, [r7, #12]
 8018aac:	6992      	ldr	r2, [r2, #24]
 8018aae:	9203      	str	r2, [sp, #12]
 8018ab0:	68fa      	ldr	r2, [r7, #12]
 8018ab2:	f10d 0e04 	add.w	lr, sp, #4
 8018ab6:	320c      	adds	r2, #12
 8018ab8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018abc:	e88e 0003 	stmia.w	lr, {r0, r1}
 8018ac0:	9300      	str	r3, [sp, #0]
 8018ac2:	4663      	mov	r3, ip
 8018ac4:	4632      	mov	r2, r6
 8018ac6:	4629      	mov	r1, r5
 8018ac8:	4620      	mov	r0, r4
 8018aca:	f7ff fc25 	bl	8018318 <RegionCommonUpdateBandTimeOff>
 8018ace:	4602      	mov	r2, r0
 8018ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018ad2:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8018ad4:	68fb      	ldr	r3, [r7, #12]
 8018ad6:	69d8      	ldr	r0, [r3, #28]
 8018ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ada:	683a      	ldr	r2, [r7, #0]
 8018adc:	6879      	ldr	r1, [r7, #4]
 8018ade:	f7ff fef4 	bl	80188ca <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8018ae2:	683b      	ldr	r3, [r7, #0]
 8018ae4:	781b      	ldrb	r3, [r3, #0]
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d004      	beq.n	8018af4 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8018aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018aec:	2200      	movs	r2, #0
 8018aee:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8018af0:	2300      	movs	r3, #0
 8018af2:	e006      	b.n	8018b02 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8018af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018af6:	781b      	ldrb	r3, [r3, #0]
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	d001      	beq.n	8018b00 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8018afc:	230b      	movs	r3, #11
 8018afe:	e000      	b.n	8018b02 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018b00:	230c      	movs	r3, #12
    }
}
 8018b02:	4618      	mov	r0, r3
 8018b04:	371c      	adds	r7, #28
 8018b06:	46bd      	mov	sp, r7
 8018b08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018b0a <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8018b0a:	b5b0      	push	{r4, r5, r7, lr}
 8018b0c:	b086      	sub	sp, #24
 8018b0e:	af02      	add	r7, sp, #8
 8018b10:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	781b      	ldrb	r3, [r3, #0]
 8018b16:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	f993 2000 	ldrsb.w	r2, [r3]
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018b24:	429a      	cmp	r2, r3
 8018b26:	d103      	bne.n	8018b30 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018b2e:	e026      	b.n	8018b7e <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8018b30:	7bfb      	ldrb	r3, [r7, #15]
 8018b32:	3b01      	subs	r3, #1
 8018b34:	b2db      	uxtb	r3, r3
 8018b36:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018b3e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8018b42:	429a      	cmp	r2, r3
 8018b44:	d019      	beq.n	8018b7a <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	78d8      	ldrb	r0, [r3, #3]
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	6859      	ldr	r1, [r3, #4]
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018b5a:	687a      	ldr	r2, [r7, #4]
 8018b5c:	6892      	ldr	r2, [r2, #8]
 8018b5e:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8018b62:	9201      	str	r2, [sp, #4]
 8018b64:	9300      	str	r3, [sp, #0]
 8018b66:	462b      	mov	r3, r5
 8018b68:	4622      	mov	r2, r4
 8018b6a:	f7ff fa92 	bl	8018092 <RegionCommonChanVerifyDr>
 8018b6e:	4603      	mov	r3, r0
 8018b70:	f083 0301 	eor.w	r3, r3, #1
 8018b74:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d1da      	bne.n	8018b30 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8018b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8018b7e:	4618      	mov	r0, r3
 8018b80:	3710      	adds	r7, #16
 8018b82:	46bd      	mov	sp, r7
 8018b84:	bdb0      	pop	{r4, r5, r7, pc}

08018b86 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8018b86:	b480      	push	{r7}
 8018b88:	b083      	sub	sp, #12
 8018b8a:	af00      	add	r7, sp, #0
 8018b8c:	4603      	mov	r3, r0
 8018b8e:	460a      	mov	r2, r1
 8018b90:	71fb      	strb	r3, [r7, #7]
 8018b92:	4613      	mov	r3, r2
 8018b94:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8018b96:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018b9e:	4293      	cmp	r3, r2
 8018ba0:	bfb8      	it	lt
 8018ba2:	4613      	movlt	r3, r2
 8018ba4:	b25b      	sxtb	r3, r3
}
 8018ba6:	4618      	mov	r0, r3
 8018ba8:	370c      	adds	r7, #12
 8018baa:	46bd      	mov	sp, r7
 8018bac:	bc80      	pop	{r7}
 8018bae:	4770      	bx	lr

08018bb0 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8018bb0:	b480      	push	{r7}
 8018bb2:	b083      	sub	sp, #12
 8018bb4:	af00      	add	r7, sp, #0
 8018bb6:	6078      	str	r0, [r7, #4]
 8018bb8:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	009b      	lsls	r3, r3, #2
 8018bbe:	683a      	ldr	r2, [r7, #0]
 8018bc0:	4413      	add	r3, r2
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	4a07      	ldr	r2, [pc, #28]	; (8018be4 <RegionCommonGetBandwidth+0x34>)
 8018bc6:	4293      	cmp	r3, r2
 8018bc8:	d004      	beq.n	8018bd4 <RegionCommonGetBandwidth+0x24>
 8018bca:	4a07      	ldr	r2, [pc, #28]	; (8018be8 <RegionCommonGetBandwidth+0x38>)
 8018bcc:	4293      	cmp	r3, r2
 8018bce:	d003      	beq.n	8018bd8 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8018bd0:	2300      	movs	r3, #0
 8018bd2:	e002      	b.n	8018bda <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8018bd4:	2301      	movs	r3, #1
 8018bd6:	e000      	b.n	8018bda <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8018bd8:	2302      	movs	r3, #2
    }
}
 8018bda:	4618      	mov	r0, r3
 8018bdc:	370c      	adds	r7, #12
 8018bde:	46bd      	mov	sp, r7
 8018be0:	bc80      	pop	{r7}
 8018be2:	4770      	bx	lr
 8018be4:	0003d090 	.word	0x0003d090
 8018be8:	0007a120 	.word	0x0007a120

08018bec <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8018bec:	b580      	push	{r7, lr}
 8018bee:	b086      	sub	sp, #24
 8018bf0:	af04      	add	r7, sp, #16
 8018bf2:	4603      	mov	r3, r0
 8018bf4:	6039      	str	r1, [r7, #0]
 8018bf6:	71fb      	strb	r3, [r7, #7]
 8018bf8:	4613      	mov	r3, r2
 8018bfa:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8018bfc:	79fb      	ldrb	r3, [r7, #7]
 8018bfe:	2b05      	cmp	r3, #5
 8018c00:	d810      	bhi.n	8018c24 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8018c02:	79fb      	ldrb	r3, [r7, #7]
 8018c04:	4a0f      	ldr	r2, [pc, #60]	; (8018c44 <RegionCommonRxConfigPrint+0x58>)
 8018c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018c0a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018c0e:	9202      	str	r2, [sp, #8]
 8018c10:	683a      	ldr	r2, [r7, #0]
 8018c12:	9201      	str	r2, [sp, #4]
 8018c14:	9300      	str	r3, [sp, #0]
 8018c16:	4b0c      	ldr	r3, [pc, #48]	; (8018c48 <RegionCommonRxConfigPrint+0x5c>)
 8018c18:	2201      	movs	r2, #1
 8018c1a:	2100      	movs	r1, #0
 8018c1c:	2002      	movs	r0, #2
 8018c1e:	f006 fe7b 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8018c22:	e00a      	b.n	8018c3a <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8018c24:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018c28:	9301      	str	r3, [sp, #4]
 8018c2a:	683b      	ldr	r3, [r7, #0]
 8018c2c:	9300      	str	r3, [sp, #0]
 8018c2e:	4b07      	ldr	r3, [pc, #28]	; (8018c4c <RegionCommonRxConfigPrint+0x60>)
 8018c30:	2201      	movs	r2, #1
 8018c32:	2100      	movs	r1, #0
 8018c34:	2002      	movs	r0, #2
 8018c36:	f006 fe6f 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
}
 8018c3a:	bf00      	nop
 8018c3c:	3708      	adds	r7, #8
 8018c3e:	46bd      	mov	sp, r7
 8018c40:	bd80      	pop	{r7, pc}
 8018c42:	bf00      	nop
 8018c44:	20000118 	.word	0x20000118
 8018c48:	08020760 	.word	0x08020760
 8018c4c:	08020780 	.word	0x08020780

08018c50 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8018c50:	b580      	push	{r7, lr}
 8018c52:	b084      	sub	sp, #16
 8018c54:	af02      	add	r7, sp, #8
 8018c56:	6078      	str	r0, [r7, #4]
 8018c58:	460b      	mov	r3, r1
 8018c5a:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8018c5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018c60:	9301      	str	r3, [sp, #4]
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	9300      	str	r3, [sp, #0]
 8018c66:	4b05      	ldr	r3, [pc, #20]	; (8018c7c <RegionCommonTxConfigPrint+0x2c>)
 8018c68:	2201      	movs	r2, #1
 8018c6a:	2100      	movs	r1, #0
 8018c6c:	2002      	movs	r0, #2
 8018c6e:	f006 fe53 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
}
 8018c72:	bf00      	nop
 8018c74:	3708      	adds	r7, #8
 8018c76:	46bd      	mov	sp, r7
 8018c78:	bd80      	pop	{r7, pc}
 8018c7a:	bf00      	nop
 8018c7c:	0802079c 	.word	0x0802079c

08018c80 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8018c80:	b580      	push	{r7, lr}
 8018c82:	b082      	sub	sp, #8
 8018c84:	af00      	add	r7, sp, #0
 8018c86:	6078      	str	r0, [r7, #4]
 8018c88:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8018c8a:	4b2d      	ldr	r3, [pc, #180]	; (8018d40 <VerifyRfFreq+0xc0>)
 8018c8c:	6a1b      	ldr	r3, [r3, #32]
 8018c8e:	6878      	ldr	r0, [r7, #4]
 8018c90:	4798      	blx	r3
 8018c92:	4603      	mov	r3, r0
 8018c94:	f083 0301 	eor.w	r3, r3, #1
 8018c98:	b2db      	uxtb	r3, r3
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d001      	beq.n	8018ca2 <VerifyRfFreq+0x22>
    {
        return false;
 8018c9e:	2300      	movs	r3, #0
 8018ca0:	e04a      	b.n	8018d38 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	4a27      	ldr	r2, [pc, #156]	; (8018d44 <VerifyRfFreq+0xc4>)
 8018ca6:	4293      	cmp	r3, r2
 8018ca8:	d307      	bcc.n	8018cba <VerifyRfFreq+0x3a>
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	4a26      	ldr	r2, [pc, #152]	; (8018d48 <VerifyRfFreq+0xc8>)
 8018cae:	4293      	cmp	r3, r2
 8018cb0:	d803      	bhi.n	8018cba <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8018cb2:	683b      	ldr	r3, [r7, #0]
 8018cb4:	2202      	movs	r2, #2
 8018cb6:	701a      	strb	r2, [r3, #0]
 8018cb8:	e03d      	b.n	8018d36 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	4a22      	ldr	r2, [pc, #136]	; (8018d48 <VerifyRfFreq+0xc8>)
 8018cbe:	4293      	cmp	r3, r2
 8018cc0:	d907      	bls.n	8018cd2 <VerifyRfFreq+0x52>
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	4a21      	ldr	r2, [pc, #132]	; (8018d4c <VerifyRfFreq+0xcc>)
 8018cc6:	4293      	cmp	r3, r2
 8018cc8:	d803      	bhi.n	8018cd2 <VerifyRfFreq+0x52>
    {
        *band = 0;
 8018cca:	683b      	ldr	r3, [r7, #0]
 8018ccc:	2200      	movs	r2, #0
 8018cce:	701a      	strb	r2, [r3, #0]
 8018cd0:	e031      	b.n	8018d36 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	4a1d      	ldr	r2, [pc, #116]	; (8018d4c <VerifyRfFreq+0xcc>)
 8018cd6:	4293      	cmp	r3, r2
 8018cd8:	d907      	bls.n	8018cea <VerifyRfFreq+0x6a>
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	4a1c      	ldr	r2, [pc, #112]	; (8018d50 <VerifyRfFreq+0xd0>)
 8018cde:	4293      	cmp	r3, r2
 8018ce0:	d803      	bhi.n	8018cea <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8018ce2:	683b      	ldr	r3, [r7, #0]
 8018ce4:	2201      	movs	r2, #1
 8018ce6:	701a      	strb	r2, [r3, #0]
 8018ce8:	e025      	b.n	8018d36 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	4a19      	ldr	r2, [pc, #100]	; (8018d54 <VerifyRfFreq+0xd4>)
 8018cee:	4293      	cmp	r3, r2
 8018cf0:	d907      	bls.n	8018d02 <VerifyRfFreq+0x82>
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	4a18      	ldr	r2, [pc, #96]	; (8018d58 <VerifyRfFreq+0xd8>)
 8018cf6:	4293      	cmp	r3, r2
 8018cf8:	d803      	bhi.n	8018d02 <VerifyRfFreq+0x82>
    {
        *band = 5;
 8018cfa:	683b      	ldr	r3, [r7, #0]
 8018cfc:	2205      	movs	r2, #5
 8018cfe:	701a      	strb	r2, [r3, #0]
 8018d00:	e019      	b.n	8018d36 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	4a15      	ldr	r2, [pc, #84]	; (8018d5c <VerifyRfFreq+0xdc>)
 8018d06:	4293      	cmp	r3, r2
 8018d08:	d907      	bls.n	8018d1a <VerifyRfFreq+0x9a>
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	4a14      	ldr	r2, [pc, #80]	; (8018d60 <VerifyRfFreq+0xe0>)
 8018d0e:	4293      	cmp	r3, r2
 8018d10:	d803      	bhi.n	8018d1a <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8018d12:	683b      	ldr	r3, [r7, #0]
 8018d14:	2203      	movs	r2, #3
 8018d16:	701a      	strb	r2, [r3, #0]
 8018d18:	e00d      	b.n	8018d36 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	4a11      	ldr	r2, [pc, #68]	; (8018d64 <VerifyRfFreq+0xe4>)
 8018d1e:	4293      	cmp	r3, r2
 8018d20:	d307      	bcc.n	8018d32 <VerifyRfFreq+0xb2>
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	4a10      	ldr	r2, [pc, #64]	; (8018d68 <VerifyRfFreq+0xe8>)
 8018d26:	4293      	cmp	r3, r2
 8018d28:	d803      	bhi.n	8018d32 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8018d2a:	683b      	ldr	r3, [r7, #0]
 8018d2c:	2204      	movs	r2, #4
 8018d2e:	701a      	strb	r2, [r3, #0]
 8018d30:	e001      	b.n	8018d36 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8018d32:	2300      	movs	r3, #0
 8018d34:	e000      	b.n	8018d38 <VerifyRfFreq+0xb8>
    }
    return true;
 8018d36:	2301      	movs	r3, #1
}
 8018d38:	4618      	mov	r0, r3
 8018d3a:	3708      	adds	r7, #8
 8018d3c:	46bd      	mov	sp, r7
 8018d3e:	bd80      	pop	{r7, pc}
 8018d40:	08020e2c 	.word	0x08020e2c
 8018d44:	337055c0 	.word	0x337055c0
 8018d48:	338eda3f 	.word	0x338eda3f
 8018d4c:	33bca100 	.word	0x33bca100
 8018d50:	33c5c8c0 	.word	0x33c5c8c0
 8018d54:	33c74f5f 	.word	0x33c74f5f
 8018d58:	33cef080 	.word	0x33cef080
 8018d5c:	33d1fdbf 	.word	0x33d1fdbf
 8018d60:	33d5ce50 	.word	0x33d5ce50
 8018d64:	33d691a0 	.word	0x33d691a0
 8018d68:	33db2580 	.word	0x33db2580

08018d6c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8018d6c:	b590      	push	{r4, r7, lr}
 8018d6e:	b08b      	sub	sp, #44	; 0x2c
 8018d70:	af04      	add	r7, sp, #16
 8018d72:	4603      	mov	r3, r0
 8018d74:	460a      	mov	r2, r1
 8018d76:	71fb      	strb	r3, [r7, #7]
 8018d78:	4613      	mov	r3, r2
 8018d7a:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8018d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018d80:	4a1f      	ldr	r2, [pc, #124]	; (8018e00 <GetTimeOnAir+0x94>)
 8018d82:	5cd3      	ldrb	r3, [r2, r3]
 8018d84:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8018d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018d8a:	491e      	ldr	r1, [pc, #120]	; (8018e04 <GetTimeOnAir+0x98>)
 8018d8c:	4618      	mov	r0, r3
 8018d8e:	f7ff ff0f 	bl	8018bb0 <RegionCommonGetBandwidth>
 8018d92:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8018d94:	2300      	movs	r3, #0
 8018d96:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8018d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018d9c:	2b07      	cmp	r3, #7
 8018d9e:	d118      	bne.n	8018dd2 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8018da0:	4b19      	ldr	r3, [pc, #100]	; (8018e08 <GetTimeOnAir+0x9c>)
 8018da2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018da4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018da8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018dac:	fb02 f303 	mul.w	r3, r2, r3
 8018db0:	4619      	mov	r1, r3
 8018db2:	88bb      	ldrh	r3, [r7, #4]
 8018db4:	b2db      	uxtb	r3, r3
 8018db6:	2201      	movs	r2, #1
 8018db8:	9203      	str	r2, [sp, #12]
 8018dba:	9302      	str	r3, [sp, #8]
 8018dbc:	2300      	movs	r3, #0
 8018dbe:	9301      	str	r3, [sp, #4]
 8018dc0:	2305      	movs	r3, #5
 8018dc2:	9300      	str	r3, [sp, #0]
 8018dc4:	2300      	movs	r3, #0
 8018dc6:	460a      	mov	r2, r1
 8018dc8:	68f9      	ldr	r1, [r7, #12]
 8018dca:	2000      	movs	r0, #0
 8018dcc:	47a0      	blx	r4
 8018dce:	6178      	str	r0, [r7, #20]
 8018dd0:	e011      	b.n	8018df6 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8018dd2:	4b0d      	ldr	r3, [pc, #52]	; (8018e08 <GetTimeOnAir+0x9c>)
 8018dd4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018dd6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018dda:	88bb      	ldrh	r3, [r7, #4]
 8018ddc:	b2db      	uxtb	r3, r3
 8018dde:	2101      	movs	r1, #1
 8018de0:	9103      	str	r1, [sp, #12]
 8018de2:	9302      	str	r3, [sp, #8]
 8018de4:	2300      	movs	r3, #0
 8018de6:	9301      	str	r3, [sp, #4]
 8018de8:	2308      	movs	r3, #8
 8018dea:	9300      	str	r3, [sp, #0]
 8018dec:	2301      	movs	r3, #1
 8018dee:	68f9      	ldr	r1, [r7, #12]
 8018df0:	2001      	movs	r0, #1
 8018df2:	47a0      	blx	r4
 8018df4:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8018df6:	697b      	ldr	r3, [r7, #20]
}
 8018df8:	4618      	mov	r0, r3
 8018dfa:	371c      	adds	r7, #28
 8018dfc:	46bd      	mov	sp, r7
 8018dfe:	bd90      	pop	{r4, r7, pc}
 8018e00:	08020d70 	.word	0x08020d70
 8018e04:	08020d78 	.word	0x08020d78
 8018e08:	08020e2c 	.word	0x08020e2c

08018e0c <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8018e0c:	b580      	push	{r7, lr}
 8018e0e:	b088      	sub	sp, #32
 8018e10:	af00      	add	r7, sp, #0
 8018e12:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8018e14:	2300      	movs	r3, #0
 8018e16:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	781b      	ldrb	r3, [r3, #0]
 8018e1c:	3b01      	subs	r3, #1
 8018e1e:	2b37      	cmp	r3, #55	; 0x37
 8018e20:	f200 8122 	bhi.w	8019068 <RegionEU868GetPhyParam+0x25c>
 8018e24:	a201      	add	r2, pc, #4	; (adr r2, 8018e2c <RegionEU868GetPhyParam+0x20>)
 8018e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e2a:	bf00      	nop
 8018e2c:	08018f0d 	.word	0x08018f0d
 8018e30:	08018f13 	.word	0x08018f13
 8018e34:	08019069 	.word	0x08019069
 8018e38:	08019069 	.word	0x08019069
 8018e3c:	08019069 	.word	0x08019069
 8018e40:	08018f19 	.word	0x08018f19
 8018e44:	08019069 	.word	0x08019069
 8018e48:	08018f53 	.word	0x08018f53
 8018e4c:	08019069 	.word	0x08019069
 8018e50:	08018f59 	.word	0x08018f59
 8018e54:	08018f5f 	.word	0x08018f5f
 8018e58:	08018f65 	.word	0x08018f65
 8018e5c:	08018f6b 	.word	0x08018f6b
 8018e60:	08018f7b 	.word	0x08018f7b
 8018e64:	08018f8b 	.word	0x08018f8b
 8018e68:	08018f91 	.word	0x08018f91
 8018e6c:	08018f99 	.word	0x08018f99
 8018e70:	08018fa1 	.word	0x08018fa1
 8018e74:	08018fa9 	.word	0x08018fa9
 8018e78:	08018fb1 	.word	0x08018fb1
 8018e7c:	08018fb9 	.word	0x08018fb9
 8018e80:	08018fcd 	.word	0x08018fcd
 8018e84:	08018fd3 	.word	0x08018fd3
 8018e88:	08018fd9 	.word	0x08018fd9
 8018e8c:	08018fdf 	.word	0x08018fdf
 8018e90:	08018feb 	.word	0x08018feb
 8018e94:	08018ff7 	.word	0x08018ff7
 8018e98:	08018ffd 	.word	0x08018ffd
 8018e9c:	08019005 	.word	0x08019005
 8018ea0:	0801900b 	.word	0x0801900b
 8018ea4:	08019011 	.word	0x08019011
 8018ea8:	08019019 	.word	0x08019019
 8018eac:	08018f1f 	.word	0x08018f1f
 8018eb0:	08019069 	.word	0x08019069
 8018eb4:	08019069 	.word	0x08019069
 8018eb8:	08019069 	.word	0x08019069
 8018ebc:	08019069 	.word	0x08019069
 8018ec0:	08019069 	.word	0x08019069
 8018ec4:	08019069 	.word	0x08019069
 8018ec8:	08019069 	.word	0x08019069
 8018ecc:	08019069 	.word	0x08019069
 8018ed0:	08019069 	.word	0x08019069
 8018ed4:	08019069 	.word	0x08019069
 8018ed8:	08019069 	.word	0x08019069
 8018edc:	08019069 	.word	0x08019069
 8018ee0:	08019069 	.word	0x08019069
 8018ee4:	0801901f 	.word	0x0801901f
 8018ee8:	08019025 	.word	0x08019025
 8018eec:	08019033 	.word	0x08019033
 8018ef0:	08019069 	.word	0x08019069
 8018ef4:	08019069 	.word	0x08019069
 8018ef8:	08019039 	.word	0x08019039
 8018efc:	0801903f 	.word	0x0801903f
 8018f00:	08019069 	.word	0x08019069
 8018f04:	08019045 	.word	0x08019045
 8018f08:	08019055 	.word	0x08019055
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8018f0c:	2300      	movs	r3, #0
 8018f0e:	61bb      	str	r3, [r7, #24]
            break;
 8018f10:	e0ab      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8018f12:	2300      	movs	r3, #0
 8018f14:	61bb      	str	r3, [r7, #24]
            break;
 8018f16:	e0a8      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8018f18:	2300      	movs	r3, #0
 8018f1a:	61bb      	str	r3, [r7, #24]
            break;
 8018f1c:	e0a5      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018f24:	733b      	strb	r3, [r7, #12]
 8018f26:	2307      	movs	r3, #7
 8018f28:	737b      	strb	r3, [r7, #13]
 8018f2a:	2300      	movs	r3, #0
 8018f2c:	73bb      	strb	r3, [r7, #14]
 8018f2e:	2310      	movs	r3, #16
 8018f30:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8018f32:	4b51      	ldr	r3, [pc, #324]	; (8019078 <RegionEU868GetPhyParam+0x26c>)
 8018f34:	681b      	ldr	r3, [r3, #0]
 8018f36:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018f3a:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8018f3c:	4b4e      	ldr	r3, [pc, #312]	; (8019078 <RegionEU868GetPhyParam+0x26c>)
 8018f3e:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018f40:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8018f42:	f107 030c 	add.w	r3, r7, #12
 8018f46:	4618      	mov	r0, r3
 8018f48:	f7ff fddf 	bl	8018b0a <RegionCommonGetNextLowerTxDr>
 8018f4c:	4603      	mov	r3, r0
 8018f4e:	61bb      	str	r3, [r7, #24]
            break;
 8018f50:	e08b      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8018f52:	2300      	movs	r3, #0
 8018f54:	61bb      	str	r3, [r7, #24]
            break;
 8018f56:	e088      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8018f58:	2300      	movs	r3, #0
 8018f5a:	61bb      	str	r3, [r7, #24]
            break;
 8018f5c:	e085      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8018f5e:	2340      	movs	r3, #64	; 0x40
 8018f60:	61bb      	str	r3, [r7, #24]
            break;
 8018f62:	e082      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8018f64:	2320      	movs	r3, #32
 8018f66:	61bb      	str	r3, [r7, #24]
            break;
 8018f68:	e07f      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018f70:	461a      	mov	r2, r3
 8018f72:	4b42      	ldr	r3, [pc, #264]	; (801907c <RegionEU868GetPhyParam+0x270>)
 8018f74:	5c9b      	ldrb	r3, [r3, r2]
 8018f76:	61bb      	str	r3, [r7, #24]
            break;
 8018f78:	e077      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018f80:	461a      	mov	r2, r3
 8018f82:	4b3f      	ldr	r3, [pc, #252]	; (8019080 <RegionEU868GetPhyParam+0x274>)
 8018f84:	5c9b      	ldrb	r3, [r3, r2]
 8018f86:	61bb      	str	r3, [r7, #24]
            break;
 8018f88:	e06f      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8018f8a:	2301      	movs	r3, #1
 8018f8c:	61bb      	str	r3, [r7, #24]
            break;
 8018f8e:	e06c      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8018f90:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8018f94:	61bb      	str	r3, [r7, #24]
            break;
 8018f96:	e068      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8018f98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018f9c:	61bb      	str	r3, [r7, #24]
            break;
 8018f9e:	e064      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8018fa0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8018fa4:	61bb      	str	r3, [r7, #24]
            break;
 8018fa6:	e060      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8018fa8:	f241 3388 	movw	r3, #5000	; 0x1388
 8018fac:	61bb      	str	r3, [r7, #24]
            break;
 8018fae:	e05c      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8018fb0:	f241 7370 	movw	r3, #6000	; 0x1770
 8018fb4:	61bb      	str	r3, [r7, #24]
            break;
 8018fb6:	e058      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8018fb8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018fbc:	4831      	ldr	r0, [pc, #196]	; (8019084 <RegionEU868GetPhyParam+0x278>)
 8018fbe:	f002 fa2d 	bl	801b41c <randr>
 8018fc2:	4603      	mov	r3, r0
 8018fc4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8018fc8:	61bb      	str	r3, [r7, #24]
            break;
 8018fca:	e04e      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8018fcc:	2300      	movs	r3, #0
 8018fce:	61bb      	str	r3, [r7, #24]
            break;
 8018fd0:	e04b      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8018fd2:	4b2d      	ldr	r3, [pc, #180]	; (8019088 <RegionEU868GetPhyParam+0x27c>)
 8018fd4:	61bb      	str	r3, [r7, #24]
            break;
 8018fd6:	e048      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8018fd8:	2300      	movs	r3, #0
 8018fda:	61bb      	str	r3, [r7, #24]
            break;
 8018fdc:	e045      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8018fde:	4b26      	ldr	r3, [pc, #152]	; (8019078 <RegionEU868GetPhyParam+0x26c>)
 8018fe0:	681b      	ldr	r3, [r3, #0]
 8018fe2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018fe6:	61bb      	str	r3, [r7, #24]
            break;
 8018fe8:	e03f      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8018fea:	4b23      	ldr	r3, [pc, #140]	; (8019078 <RegionEU868GetPhyParam+0x26c>)
 8018fec:	681b      	ldr	r3, [r3, #0]
 8018fee:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8018ff2:	61bb      	str	r3, [r7, #24]
            break;
 8018ff4:	e039      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8018ff6:	2310      	movs	r3, #16
 8018ff8:	61bb      	str	r3, [r7, #24]
            break;
 8018ffa:	e036      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8018ffc:	4b1e      	ldr	r3, [pc, #120]	; (8019078 <RegionEU868GetPhyParam+0x26c>)
 8018ffe:	681b      	ldr	r3, [r3, #0]
 8019000:	61bb      	str	r3, [r7, #24]
            break;
 8019002:	e032      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8019004:	2300      	movs	r3, #0
 8019006:	61bb      	str	r3, [r7, #24]
            break;
 8019008:	e02f      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801900a:	2300      	movs	r3, #0
 801900c:	61bb      	str	r3, [r7, #24]
            break;
 801900e:	e02c      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8019010:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8019014:	61bb      	str	r3, [r7, #24]
            break;
 8019016:	e028      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8019018:	4b1c      	ldr	r3, [pc, #112]	; (801908c <RegionEU868GetPhyParam+0x280>)
 801901a:	61bb      	str	r3, [r7, #24]
            break;
 801901c:	e025      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 801901e:	4b1a      	ldr	r3, [pc, #104]	; (8019088 <RegionEU868GetPhyParam+0x27c>)
 8019020:	61bb      	str	r3, [r7, #24]
            break;
 8019022:	e022      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8019024:	2311      	movs	r3, #17
 8019026:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8019028:	2301      	movs	r3, #1
 801902a:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 801902c:	2300      	movs	r3, #0
 801902e:	76bb      	strb	r3, [r7, #26]
            break;
 8019030:	e01b      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8019032:	2303      	movs	r3, #3
 8019034:	61bb      	str	r3, [r7, #24]
            break;
 8019036:	e018      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8019038:	4b13      	ldr	r3, [pc, #76]	; (8019088 <RegionEU868GetPhyParam+0x27c>)
 801903a:	61bb      	str	r3, [r7, #24]
            break;
 801903c:	e015      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 801903e:	2303      	movs	r3, #3
 8019040:	61bb      	str	r3, [r7, #24]
            break;
 8019042:	e012      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801904a:	461a      	mov	r2, r3
 801904c:	4b10      	ldr	r3, [pc, #64]	; (8019090 <RegionEU868GetPhyParam+0x284>)
 801904e:	5c9b      	ldrb	r3, [r3, r2]
 8019050:	61bb      	str	r3, [r7, #24]
            break;
 8019052:	e00a      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801905a:	490e      	ldr	r1, [pc, #56]	; (8019094 <RegionEU868GetPhyParam+0x288>)
 801905c:	4618      	mov	r0, r3
 801905e:	f7ff fda7 	bl	8018bb0 <RegionCommonGetBandwidth>
 8019062:	4603      	mov	r3, r0
 8019064:	61bb      	str	r3, [r7, #24]
            break;
 8019066:	e000      	b.n	801906a <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 8019068:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 801906a:	69bb      	ldr	r3, [r7, #24]
 801906c:	61fb      	str	r3, [r7, #28]
 801906e:	69fb      	ldr	r3, [r7, #28]
}
 8019070:	4618      	mov	r0, r3
 8019072:	3720      	adds	r7, #32
 8019074:	46bd      	mov	sp, r7
 8019076:	bd80      	pop	{r7, pc}
 8019078:	20001a64 	.word	0x20001a64
 801907c:	08020d98 	.word	0x08020d98
 8019080:	08020da0 	.word	0x08020da0
 8019084:	fffffc18 	.word	0xfffffc18
 8019088:	33d3e608 	.word	0x33d3e608
 801908c:	4009999a 	.word	0x4009999a
 8019090:	08020d70 	.word	0x08020d70
 8019094:	08020d78 	.word	0x08020d78

08019098 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8019098:	b590      	push	{r4, r7, lr}
 801909a:	b085      	sub	sp, #20
 801909c:	af02      	add	r7, sp, #8
 801909e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80190a0:	4b11      	ldr	r3, [pc, #68]	; (80190e8 <RegionEU868SetBandTxDone+0x50>)
 80190a2:	681a      	ldr	r2, [r3, #0]
 80190a4:	4b11      	ldr	r3, [pc, #68]	; (80190ec <RegionEU868SetBandTxDone+0x54>)
 80190a6:	6819      	ldr	r1, [r3, #0]
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	781b      	ldrb	r3, [r3, #0]
 80190ac:	4618      	mov	r0, r3
 80190ae:	4603      	mov	r3, r0
 80190b0:	005b      	lsls	r3, r3, #1
 80190b2:	4403      	add	r3, r0
 80190b4:	009b      	lsls	r3, r3, #2
 80190b6:	440b      	add	r3, r1
 80190b8:	3309      	adds	r3, #9
 80190ba:	781b      	ldrb	r3, [r3, #0]
 80190bc:	4619      	mov	r1, r3
 80190be:	460b      	mov	r3, r1
 80190c0:	005b      	lsls	r3, r3, #1
 80190c2:	440b      	add	r3, r1
 80190c4:	00db      	lsls	r3, r3, #3
 80190c6:	18d0      	adds	r0, r2, r3
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	6899      	ldr	r1, [r3, #8]
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	785c      	ldrb	r4, [r3, #1]
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	691a      	ldr	r2, [r3, #16]
 80190d4:	9200      	str	r2, [sp, #0]
 80190d6:	68db      	ldr	r3, [r3, #12]
 80190d8:	4622      	mov	r2, r4
 80190da:	f7ff f8ef 	bl	80182bc <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 80190de:	bf00      	nop
 80190e0:	370c      	adds	r7, #12
 80190e2:	46bd      	mov	sp, r7
 80190e4:	bd90      	pop	{r4, r7, pc}
 80190e6:	bf00      	nop
 80190e8:	20001a68 	.word	0x20001a68
 80190ec:	20001a64 	.word	0x20001a64

080190f0 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 80190f0:	b580      	push	{r7, lr}
 80190f2:	b0b0      	sub	sp, #192	; 0xc0
 80190f4:	af00      	add	r7, sp, #0
 80190f6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 80190f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80190fc:	2290      	movs	r2, #144	; 0x90
 80190fe:	2100      	movs	r1, #0
 8019100:	4618      	mov	r0, r3
 8019102:	f006 ff01 	bl	801ff08 <memset>
 8019106:	2364      	movs	r3, #100	; 0x64
 8019108:	863b      	strh	r3, [r7, #48]	; 0x30
 801910a:	2364      	movs	r3, #100	; 0x64
 801910c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8019110:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019114:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8019118:	230a      	movs	r3, #10
 801911a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 801911e:	2364      	movs	r3, #100	; 0x64
 8019120:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8019124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019128:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	7b1b      	ldrb	r3, [r3, #12]
 8019130:	2b02      	cmp	r3, #2
 8019132:	d05d      	beq.n	80191f0 <RegionEU868InitDefaults+0x100>
 8019134:	2b02      	cmp	r3, #2
 8019136:	dc6a      	bgt.n	801920e <RegionEU868InitDefaults+0x11e>
 8019138:	2b00      	cmp	r3, #0
 801913a:	d002      	beq.n	8019142 <RegionEU868InitDefaults+0x52>
 801913c:	2b01      	cmp	r3, #1
 801913e:	d03e      	beq.n	80191be <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8019140:	e065      	b.n	801920e <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	2b00      	cmp	r3, #0
 8019148:	d062      	beq.n	8019210 <RegionEU868InitDefaults+0x120>
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	685b      	ldr	r3, [r3, #4]
 801914e:	2b00      	cmp	r3, #0
 8019150:	d05e      	beq.n	8019210 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	685b      	ldr	r3, [r3, #4]
 8019156:	4a30      	ldr	r2, [pc, #192]	; (8019218 <RegionEU868InitDefaults+0x128>)
 8019158:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	689b      	ldr	r3, [r3, #8]
 801915e:	4a2f      	ldr	r2, [pc, #188]	; (801921c <RegionEU868InitDefaults+0x12c>)
 8019160:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8019162:	4b2e      	ldr	r3, [pc, #184]	; (801921c <RegionEU868InitDefaults+0x12c>)
 8019164:	681b      	ldr	r3, [r3, #0]
 8019166:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801916a:	2290      	movs	r2, #144	; 0x90
 801916c:	4618      	mov	r0, r3
 801916e:	f002 f96c 	bl	801b44a <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8019172:	4b29      	ldr	r3, [pc, #164]	; (8019218 <RegionEU868InitDefaults+0x128>)
 8019174:	681b      	ldr	r3, [r3, #0]
 8019176:	4a2a      	ldr	r2, [pc, #168]	; (8019220 <RegionEU868InitDefaults+0x130>)
 8019178:	ca07      	ldmia	r2, {r0, r1, r2}
 801917a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 801917e:	4b26      	ldr	r3, [pc, #152]	; (8019218 <RegionEU868InitDefaults+0x128>)
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	4a28      	ldr	r2, [pc, #160]	; (8019224 <RegionEU868InitDefaults+0x134>)
 8019184:	330c      	adds	r3, #12
 8019186:	ca07      	ldmia	r2, {r0, r1, r2}
 8019188:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 801918c:	4b22      	ldr	r3, [pc, #136]	; (8019218 <RegionEU868InitDefaults+0x128>)
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	4a25      	ldr	r2, [pc, #148]	; (8019228 <RegionEU868InitDefaults+0x138>)
 8019192:	3318      	adds	r3, #24
 8019194:	ca07      	ldmia	r2, {r0, r1, r2}
 8019196:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 801919a:	4b1f      	ldr	r3, [pc, #124]	; (8019218 <RegionEU868InitDefaults+0x128>)
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	2207      	movs	r2, #7
 80191a0:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80191a4:	4b1c      	ldr	r3, [pc, #112]	; (8019218 <RegionEU868InitDefaults+0x128>)
 80191a6:	681b      	ldr	r3, [r3, #0]
 80191a8:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80191ac:	4b1a      	ldr	r3, [pc, #104]	; (8019218 <RegionEU868InitDefaults+0x128>)
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80191b4:	2201      	movs	r2, #1
 80191b6:	4619      	mov	r1, r3
 80191b8:	f7ff f85a 	bl	8018270 <RegionCommonChanMaskCopy>
 80191bc:	e028      	b.n	8019210 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 80191be:	4b16      	ldr	r3, [pc, #88]	; (8019218 <RegionEU868InitDefaults+0x128>)
 80191c0:	681b      	ldr	r3, [r3, #0]
 80191c2:	2200      	movs	r2, #0
 80191c4:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 80191c6:	4b14      	ldr	r3, [pc, #80]	; (8019218 <RegionEU868InitDefaults+0x128>)
 80191c8:	681b      	ldr	r3, [r3, #0]
 80191ca:	2200      	movs	r2, #0
 80191cc:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 80191ce:	4b12      	ldr	r3, [pc, #72]	; (8019218 <RegionEU868InitDefaults+0x128>)
 80191d0:	681b      	ldr	r3, [r3, #0]
 80191d2:	2200      	movs	r2, #0
 80191d4:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80191d6:	4b10      	ldr	r3, [pc, #64]	; (8019218 <RegionEU868InitDefaults+0x128>)
 80191d8:	681b      	ldr	r3, [r3, #0]
 80191da:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80191de:	4b0e      	ldr	r3, [pc, #56]	; (8019218 <RegionEU868InitDefaults+0x128>)
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80191e6:	2201      	movs	r2, #1
 80191e8:	4619      	mov	r1, r3
 80191ea:	f7ff f841 	bl	8018270 <RegionCommonChanMaskCopy>
            break;
 80191ee:	e00f      	b.n	8019210 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 80191f0:	4b09      	ldr	r3, [pc, #36]	; (8019218 <RegionEU868InitDefaults+0x128>)
 80191f2:	681b      	ldr	r3, [r3, #0]
 80191f4:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 80191f8:	4b07      	ldr	r3, [pc, #28]	; (8019218 <RegionEU868InitDefaults+0x128>)
 80191fa:	681b      	ldr	r3, [r3, #0]
 80191fc:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 8019200:	4b05      	ldr	r3, [pc, #20]	; (8019218 <RegionEU868InitDefaults+0x128>)
 8019202:	681b      	ldr	r3, [r3, #0]
 8019204:	430a      	orrs	r2, r1
 8019206:	b292      	uxth	r2, r2
 8019208:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 801920c:	e000      	b.n	8019210 <RegionEU868InitDefaults+0x120>
            break;
 801920e:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8019210:	37c0      	adds	r7, #192	; 0xc0
 8019212:	46bd      	mov	sp, r7
 8019214:	bd80      	pop	{r7, pc}
 8019216:	bf00      	nop
 8019218:	20001a64 	.word	0x20001a64
 801921c:	20001a68 	.word	0x20001a68
 8019220:	080207b8 	.word	0x080207b8
 8019224:	080207c4 	.word	0x080207c4
 8019228:	080207d0 	.word	0x080207d0

0801922c <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801922c:	b580      	push	{r7, lr}
 801922e:	b084      	sub	sp, #16
 8019230:	af00      	add	r7, sp, #0
 8019232:	6078      	str	r0, [r7, #4]
 8019234:	460b      	mov	r3, r1
 8019236:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8019238:	78fb      	ldrb	r3, [r7, #3]
 801923a:	2b0f      	cmp	r3, #15
 801923c:	d86c      	bhi.n	8019318 <RegionEU868Verify+0xec>
 801923e:	a201      	add	r2, pc, #4	; (adr r2, 8019244 <RegionEU868Verify+0x18>)
 8019240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019244:	08019285 	.word	0x08019285
 8019248:	08019319 	.word	0x08019319
 801924c:	08019319 	.word	0x08019319
 8019250:	08019319 	.word	0x08019319
 8019254:	08019319 	.word	0x08019319
 8019258:	0801929d 	.word	0x0801929d
 801925c:	080192bb 	.word	0x080192bb
 8019260:	080192d9 	.word	0x080192d9
 8019264:	08019319 	.word	0x08019319
 8019268:	080192f7 	.word	0x080192f7
 801926c:	080192f7 	.word	0x080192f7
 8019270:	08019319 	.word	0x08019319
 8019274:	08019319 	.word	0x08019319
 8019278:	08019319 	.word	0x08019319
 801927c:	08019319 	.word	0x08019319
 8019280:	08019315 	.word	0x08019315
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8019284:	2300      	movs	r3, #0
 8019286:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	681b      	ldr	r3, [r3, #0]
 801928c:	f107 020f 	add.w	r2, r7, #15
 8019290:	4611      	mov	r1, r2
 8019292:	4618      	mov	r0, r3
 8019294:	f7ff fcf4 	bl	8018c80 <VerifyRfFreq>
 8019298:	4603      	mov	r3, r0
 801929a:	e03e      	b.n	801931a <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	f993 3000 	ldrsb.w	r3, [r3]
 80192a2:	2207      	movs	r2, #7
 80192a4:	2100      	movs	r1, #0
 80192a6:	4618      	mov	r0, r3
 80192a8:	f7fe ff65 	bl	8018176 <RegionCommonValueInRange>
 80192ac:	4603      	mov	r3, r0
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	bf14      	ite	ne
 80192b2:	2301      	movne	r3, #1
 80192b4:	2300      	moveq	r3, #0
 80192b6:	b2db      	uxtb	r3, r3
 80192b8:	e02f      	b.n	801931a <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	f993 3000 	ldrsb.w	r3, [r3]
 80192c0:	2205      	movs	r2, #5
 80192c2:	2100      	movs	r1, #0
 80192c4:	4618      	mov	r0, r3
 80192c6:	f7fe ff56 	bl	8018176 <RegionCommonValueInRange>
 80192ca:	4603      	mov	r3, r0
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	bf14      	ite	ne
 80192d0:	2301      	movne	r3, #1
 80192d2:	2300      	moveq	r3, #0
 80192d4:	b2db      	uxtb	r3, r3
 80192d6:	e020      	b.n	801931a <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	f993 3000 	ldrsb.w	r3, [r3]
 80192de:	2207      	movs	r2, #7
 80192e0:	2100      	movs	r1, #0
 80192e2:	4618      	mov	r0, r3
 80192e4:	f7fe ff47 	bl	8018176 <RegionCommonValueInRange>
 80192e8:	4603      	mov	r3, r0
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	bf14      	ite	ne
 80192ee:	2301      	movne	r3, #1
 80192f0:	2300      	moveq	r3, #0
 80192f2:	b2db      	uxtb	r3, r3
 80192f4:	e011      	b.n	801931a <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	f993 3000 	ldrsb.w	r3, [r3]
 80192fc:	2207      	movs	r2, #7
 80192fe:	2100      	movs	r1, #0
 8019300:	4618      	mov	r0, r3
 8019302:	f7fe ff38 	bl	8018176 <RegionCommonValueInRange>
 8019306:	4603      	mov	r3, r0
 8019308:	2b00      	cmp	r3, #0
 801930a:	bf14      	ite	ne
 801930c:	2301      	movne	r3, #1
 801930e:	2300      	moveq	r3, #0
 8019310:	b2db      	uxtb	r3, r3
 8019312:	e002      	b.n	801931a <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8019314:	2301      	movs	r3, #1
 8019316:	e000      	b.n	801931a <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8019318:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 801931a:	4618      	mov	r0, r3
 801931c:	3710      	adds	r7, #16
 801931e:	46bd      	mov	sp, r7
 8019320:	bd80      	pop	{r7, pc}
 8019322:	bf00      	nop

08019324 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8019324:	b580      	push	{r7, lr}
 8019326:	b08a      	sub	sp, #40	; 0x28
 8019328:	af00      	add	r7, sp, #0
 801932a:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 801932c:	2350      	movs	r3, #80	; 0x50
 801932e:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	7a1b      	ldrb	r3, [r3, #8]
 8019336:	2b10      	cmp	r3, #16
 8019338:	d162      	bne.n	8019400 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	685b      	ldr	r3, [r3, #4]
 801933e:	330f      	adds	r3, #15
 8019340:	781b      	ldrb	r3, [r3, #0]
 8019342:	2b00      	cmp	r3, #0
 8019344:	d15e      	bne.n	8019404 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8019346:	2300      	movs	r3, #0
 8019348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801934c:	2303      	movs	r3, #3
 801934e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8019352:	e050      	b.n	80193f6 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8019354:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019358:	2b07      	cmp	r3, #7
 801935a:	d824      	bhi.n	80193a6 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	685a      	ldr	r2, [r3, #4]
 8019360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019364:	4413      	add	r3, r2
 8019366:	781b      	ldrb	r3, [r3, #0]
 8019368:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801936a:	69ba      	ldr	r2, [r7, #24]
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	6859      	ldr	r1, [r3, #4]
 8019370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019374:	3301      	adds	r3, #1
 8019376:	440b      	add	r3, r1
 8019378:	781b      	ldrb	r3, [r3, #0]
 801937a:	021b      	lsls	r3, r3, #8
 801937c:	4313      	orrs	r3, r2
 801937e:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8019380:	69ba      	ldr	r2, [r7, #24]
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	6859      	ldr	r1, [r3, #4]
 8019386:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801938a:	3302      	adds	r3, #2
 801938c:	440b      	add	r3, r1
 801938e:	781b      	ldrb	r3, [r3, #0]
 8019390:	041b      	lsls	r3, r3, #16
 8019392:	4313      	orrs	r3, r2
 8019394:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8019396:	69bb      	ldr	r3, [r7, #24]
 8019398:	2264      	movs	r2, #100	; 0x64
 801939a:	fb02 f303 	mul.w	r3, r2, r3
 801939e:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80193a0:	2300      	movs	r3, #0
 80193a2:	61fb      	str	r3, [r7, #28]
 80193a4:	e006      	b.n	80193b4 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 80193a6:	2300      	movs	r3, #0
 80193a8:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 80193aa:	2300      	movs	r3, #0
 80193ac:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 80193b0:	2300      	movs	r3, #0
 80193b2:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 80193b4:	69bb      	ldr	r3, [r7, #24]
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	d00b      	beq.n	80193d2 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 80193ba:	f107 0318 	add.w	r3, r7, #24
 80193be:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 80193c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80193c4:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 80193c6:	f107 0310 	add.w	r3, r7, #16
 80193ca:	4618      	mov	r0, r3
 80193cc:	f000 fd14 	bl	8019df8 <RegionEU868ChannelAdd>
 80193d0:	e007      	b.n	80193e2 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 80193d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80193d6:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 80193d8:	f107 030c 	add.w	r3, r7, #12
 80193dc:	4618      	mov	r0, r3
 80193de:	f000 fdad 	bl	8019f3c <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80193e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80193e6:	3303      	adds	r3, #3
 80193e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80193ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80193f0:	3301      	adds	r3, #1
 80193f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80193f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80193fa:	2b0f      	cmp	r3, #15
 80193fc:	d9aa      	bls.n	8019354 <RegionEU868ApplyCFList+0x30>
 80193fe:	e002      	b.n	8019406 <RegionEU868ApplyCFList+0xe2>
        return;
 8019400:	bf00      	nop
 8019402:	e000      	b.n	8019406 <RegionEU868ApplyCFList+0xe2>
        return;
 8019404:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8019406:	3728      	adds	r7, #40	; 0x28
 8019408:	46bd      	mov	sp, r7
 801940a:	bd80      	pop	{r7, pc}

0801940c <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801940c:	b580      	push	{r7, lr}
 801940e:	b082      	sub	sp, #8
 8019410:	af00      	add	r7, sp, #0
 8019412:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	791b      	ldrb	r3, [r3, #4]
 8019418:	2b00      	cmp	r3, #0
 801941a:	d002      	beq.n	8019422 <RegionEU868ChanMaskSet+0x16>
 801941c:	2b01      	cmp	r3, #1
 801941e:	d00b      	beq.n	8019438 <RegionEU868ChanMaskSet+0x2c>
 8019420:	e015      	b.n	801944e <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8019422:	4b0e      	ldr	r3, [pc, #56]	; (801945c <RegionEU868ChanMaskSet+0x50>)
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	681b      	ldr	r3, [r3, #0]
 801942e:	2201      	movs	r2, #1
 8019430:	4619      	mov	r1, r3
 8019432:	f7fe ff1d 	bl	8018270 <RegionCommonChanMaskCopy>
            break;
 8019436:	e00c      	b.n	8019452 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8019438:	4b08      	ldr	r3, [pc, #32]	; (801945c <RegionEU868ChanMaskSet+0x50>)
 801943a:	681b      	ldr	r3, [r3, #0]
 801943c:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	681b      	ldr	r3, [r3, #0]
 8019444:	2201      	movs	r2, #1
 8019446:	4619      	mov	r1, r3
 8019448:	f7fe ff12 	bl	8018270 <RegionCommonChanMaskCopy>
            break;
 801944c:	e001      	b.n	8019452 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 801944e:	2300      	movs	r3, #0
 8019450:	e000      	b.n	8019454 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8019452:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8019454:	4618      	mov	r0, r3
 8019456:	3708      	adds	r7, #8
 8019458:	46bd      	mov	sp, r7
 801945a:	bd80      	pop	{r7, pc}
 801945c:	20001a64 	.word	0x20001a64

08019460 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8019460:	b580      	push	{r7, lr}
 8019462:	b088      	sub	sp, #32
 8019464:	af02      	add	r7, sp, #8
 8019466:	60ba      	str	r2, [r7, #8]
 8019468:	607b      	str	r3, [r7, #4]
 801946a:	4603      	mov	r3, r0
 801946c:	73fb      	strb	r3, [r7, #15]
 801946e:	460b      	mov	r3, r1
 8019470:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8019472:	2300      	movs	r3, #0
 8019474:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8019476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801947a:	2b07      	cmp	r3, #7
 801947c:	bfa8      	it	ge
 801947e:	2307      	movge	r3, #7
 8019480:	b25a      	sxtb	r2, r3
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801948c:	491e      	ldr	r1, [pc, #120]	; (8019508 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801948e:	4618      	mov	r0, r3
 8019490:	f7ff fb8e 	bl	8018bb0 <RegionCommonGetBandwidth>
 8019494:	4603      	mov	r3, r0
 8019496:	b2da      	uxtb	r2, r3
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80194a2:	2b07      	cmp	r3, #7
 80194a4:	d10a      	bne.n	80194bc <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80194ac:	461a      	mov	r2, r3
 80194ae:	4b17      	ldr	r3, [pc, #92]	; (801950c <RegionEU868ComputeRxWindowParameters+0xac>)
 80194b0:	5c9b      	ldrb	r3, [r3, r2]
 80194b2:	4618      	mov	r0, r3
 80194b4:	f7ff f910 	bl	80186d8 <RegionCommonComputeSymbolTimeFsk>
 80194b8:	6178      	str	r0, [r7, #20]
 80194ba:	e011      	b.n	80194e0 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80194c2:	461a      	mov	r2, r3
 80194c4:	4b11      	ldr	r3, [pc, #68]	; (801950c <RegionEU868ComputeRxWindowParameters+0xac>)
 80194c6:	5c9a      	ldrb	r2, [r3, r2]
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80194ce:	4619      	mov	r1, r3
 80194d0:	4b0d      	ldr	r3, [pc, #52]	; (8019508 <RegionEU868ComputeRxWindowParameters+0xa8>)
 80194d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80194d6:	4619      	mov	r1, r3
 80194d8:	4610      	mov	r0, r2
 80194da:	f7ff f8e7 	bl	80186ac <RegionCommonComputeSymbolTimeLoRa>
 80194de:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80194e0:	4b0b      	ldr	r3, [pc, #44]	; (8019510 <RegionEU868ComputeRxWindowParameters+0xb0>)
 80194e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80194e4:	4798      	blx	r3
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	3308      	adds	r3, #8
 80194ea:	687a      	ldr	r2, [r7, #4]
 80194ec:	320c      	adds	r2, #12
 80194ee:	7bb9      	ldrb	r1, [r7, #14]
 80194f0:	9201      	str	r2, [sp, #4]
 80194f2:	9300      	str	r3, [sp, #0]
 80194f4:	4603      	mov	r3, r0
 80194f6:	68ba      	ldr	r2, [r7, #8]
 80194f8:	6978      	ldr	r0, [r7, #20]
 80194fa:	f7ff f8fd 	bl	80186f8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 80194fe:	bf00      	nop
 8019500:	3718      	adds	r7, #24
 8019502:	46bd      	mov	sp, r7
 8019504:	bd80      	pop	{r7, pc}
 8019506:	bf00      	nop
 8019508:	08020d78 	.word	0x08020d78
 801950c:	08020d70 	.word	0x08020d70
 8019510:	08020e2c 	.word	0x08020e2c

08019514 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8019514:	b5b0      	push	{r4, r5, r7, lr}
 8019516:	b090      	sub	sp, #64	; 0x40
 8019518:	af0a      	add	r7, sp, #40	; 0x28
 801951a:	6078      	str	r0, [r7, #4]
 801951c:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	785b      	ldrb	r3, [r3, #1]
 8019522:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8019524:	2300      	movs	r3, #0
 8019526:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8019528:	2300      	movs	r3, #0
 801952a:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	685b      	ldr	r3, [r3, #4]
 8019530:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8019532:	4b5a      	ldr	r3, [pc, #360]	; (801969c <RegionEU868RxConfig+0x188>)
 8019534:	685b      	ldr	r3, [r3, #4]
 8019536:	4798      	blx	r3
 8019538:	4603      	mov	r3, r0
 801953a:	2b00      	cmp	r3, #0
 801953c:	d001      	beq.n	8019542 <RegionEU868RxConfig+0x2e>
    {
        return false;
 801953e:	2300      	movs	r3, #0
 8019540:	e0a8      	b.n	8019694 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8019542:	687b      	ldr	r3, [r7, #4]
 8019544:	7cdb      	ldrb	r3, [r3, #19]
 8019546:	2b00      	cmp	r3, #0
 8019548:	d126      	bne.n	8019598 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801954a:	4b55      	ldr	r3, [pc, #340]	; (80196a0 <RegionEU868RxConfig+0x18c>)
 801954c:	681a      	ldr	r2, [r3, #0]
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	781b      	ldrb	r3, [r3, #0]
 8019552:	4619      	mov	r1, r3
 8019554:	460b      	mov	r3, r1
 8019556:	005b      	lsls	r3, r3, #1
 8019558:	440b      	add	r3, r1
 801955a:	009b      	lsls	r3, r3, #2
 801955c:	4413      	add	r3, r2
 801955e:	681b      	ldr	r3, [r3, #0]
 8019560:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8019562:	4b4f      	ldr	r3, [pc, #316]	; (80196a0 <RegionEU868RxConfig+0x18c>)
 8019564:	681a      	ldr	r2, [r3, #0]
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	781b      	ldrb	r3, [r3, #0]
 801956a:	4619      	mov	r1, r3
 801956c:	460b      	mov	r3, r1
 801956e:	005b      	lsls	r3, r3, #1
 8019570:	440b      	add	r3, r1
 8019572:	009b      	lsls	r3, r3, #2
 8019574:	4413      	add	r3, r2
 8019576:	3304      	adds	r3, #4
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	2b00      	cmp	r3, #0
 801957c:	d00c      	beq.n	8019598 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 801957e:	4b48      	ldr	r3, [pc, #288]	; (80196a0 <RegionEU868RxConfig+0x18c>)
 8019580:	681a      	ldr	r2, [r3, #0]
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	781b      	ldrb	r3, [r3, #0]
 8019586:	4619      	mov	r1, r3
 8019588:	460b      	mov	r3, r1
 801958a:	005b      	lsls	r3, r3, #1
 801958c:	440b      	add	r3, r1
 801958e:	009b      	lsls	r3, r3, #2
 8019590:	4413      	add	r3, r2
 8019592:	3304      	adds	r3, #4
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8019598:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801959c:	4a41      	ldr	r2, [pc, #260]	; (80196a4 <RegionEU868RxConfig+0x190>)
 801959e:	5cd3      	ldrb	r3, [r2, r3]
 80195a0:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80195a2:	4b3e      	ldr	r3, [pc, #248]	; (801969c <RegionEU868RxConfig+0x188>)
 80195a4:	68db      	ldr	r3, [r3, #12]
 80195a6:	6938      	ldr	r0, [r7, #16]
 80195a8:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80195aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80195ae:	2b07      	cmp	r3, #7
 80195b0:	d128      	bne.n	8019604 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 80195b2:	2300      	movs	r3, #0
 80195b4:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80195b6:	4b39      	ldr	r3, [pc, #228]	; (801969c <RegionEU868RxConfig+0x188>)
 80195b8:	699c      	ldr	r4, [r3, #24]
 80195ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80195be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80195c2:	fb02 f303 	mul.w	r3, r2, r3
 80195c6:	4619      	mov	r1, r3
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	689b      	ldr	r3, [r3, #8]
 80195cc:	b29b      	uxth	r3, r3
 80195ce:	687a      	ldr	r2, [r7, #4]
 80195d0:	7c92      	ldrb	r2, [r2, #18]
 80195d2:	7df8      	ldrb	r0, [r7, #23]
 80195d4:	9209      	str	r2, [sp, #36]	; 0x24
 80195d6:	2200      	movs	r2, #0
 80195d8:	9208      	str	r2, [sp, #32]
 80195da:	2200      	movs	r2, #0
 80195dc:	9207      	str	r2, [sp, #28]
 80195de:	2200      	movs	r2, #0
 80195e0:	9206      	str	r2, [sp, #24]
 80195e2:	2201      	movs	r2, #1
 80195e4:	9205      	str	r2, [sp, #20]
 80195e6:	2200      	movs	r2, #0
 80195e8:	9204      	str	r2, [sp, #16]
 80195ea:	2200      	movs	r2, #0
 80195ec:	9203      	str	r2, [sp, #12]
 80195ee:	9302      	str	r3, [sp, #8]
 80195f0:	2305      	movs	r3, #5
 80195f2:	9301      	str	r3, [sp, #4]
 80195f4:	4b2c      	ldr	r3, [pc, #176]	; (80196a8 <RegionEU868RxConfig+0x194>)
 80195f6:	9300      	str	r3, [sp, #0]
 80195f8:	2300      	movs	r3, #0
 80195fa:	460a      	mov	r2, r1
 80195fc:	f24c 3150 	movw	r1, #50000	; 0xc350
 8019600:	47a0      	blx	r4
 8019602:	e024      	b.n	801964e <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8019604:	2301      	movs	r3, #1
 8019606:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8019608:	4b24      	ldr	r3, [pc, #144]	; (801969c <RegionEU868RxConfig+0x188>)
 801960a:	699c      	ldr	r4, [r3, #24]
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	789b      	ldrb	r3, [r3, #2]
 8019610:	461d      	mov	r5, r3
 8019612:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	689b      	ldr	r3, [r3, #8]
 801961a:	b29b      	uxth	r3, r3
 801961c:	687a      	ldr	r2, [r7, #4]
 801961e:	7c92      	ldrb	r2, [r2, #18]
 8019620:	7df8      	ldrb	r0, [r7, #23]
 8019622:	9209      	str	r2, [sp, #36]	; 0x24
 8019624:	2201      	movs	r2, #1
 8019626:	9208      	str	r2, [sp, #32]
 8019628:	2200      	movs	r2, #0
 801962a:	9207      	str	r2, [sp, #28]
 801962c:	2200      	movs	r2, #0
 801962e:	9206      	str	r2, [sp, #24]
 8019630:	2200      	movs	r2, #0
 8019632:	9205      	str	r2, [sp, #20]
 8019634:	2200      	movs	r2, #0
 8019636:	9204      	str	r2, [sp, #16]
 8019638:	2200      	movs	r2, #0
 801963a:	9203      	str	r2, [sp, #12]
 801963c:	9302      	str	r3, [sp, #8]
 801963e:	2308      	movs	r3, #8
 8019640:	9301      	str	r3, [sp, #4]
 8019642:	2300      	movs	r3, #0
 8019644:	9300      	str	r3, [sp, #0]
 8019646:	2301      	movs	r3, #1
 8019648:	460a      	mov	r2, r1
 801964a:	4629      	mov	r1, r5
 801964c:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	7c5b      	ldrb	r3, [r3, #17]
 8019652:	2b00      	cmp	r3, #0
 8019654:	d005      	beq.n	8019662 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8019656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801965a:	4a14      	ldr	r2, [pc, #80]	; (80196ac <RegionEU868RxConfig+0x198>)
 801965c:	5cd3      	ldrb	r3, [r2, r3]
 801965e:	75bb      	strb	r3, [r7, #22]
 8019660:	e004      	b.n	801966c <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8019662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019666:	4a12      	ldr	r2, [pc, #72]	; (80196b0 <RegionEU868RxConfig+0x19c>)
 8019668:	5cd3      	ldrb	r3, [r2, r3]
 801966a:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801966c:	4b0b      	ldr	r3, [pc, #44]	; (801969c <RegionEU868RxConfig+0x188>)
 801966e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019670:	7dba      	ldrb	r2, [r7, #22]
 8019672:	320d      	adds	r2, #13
 8019674:	b2d1      	uxtb	r1, r2
 8019676:	7dfa      	ldrb	r2, [r7, #23]
 8019678:	4610      	mov	r0, r2
 801967a:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	7cdb      	ldrb	r3, [r3, #19]
 8019680:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8019684:	6939      	ldr	r1, [r7, #16]
 8019686:	4618      	mov	r0, r3
 8019688:	f7ff fab0 	bl	8018bec <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 801968c:	683b      	ldr	r3, [r7, #0]
 801968e:	7bfa      	ldrb	r2, [r7, #15]
 8019690:	701a      	strb	r2, [r3, #0]
    return true;
 8019692:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8019694:	4618      	mov	r0, r3
 8019696:	3718      	adds	r7, #24
 8019698:	46bd      	mov	sp, r7
 801969a:	bdb0      	pop	{r4, r5, r7, pc}
 801969c:	08020e2c 	.word	0x08020e2c
 80196a0:	20001a64 	.word	0x20001a64
 80196a4:	08020d70 	.word	0x08020d70
 80196a8:	00014585 	.word	0x00014585
 80196ac:	08020da0 	.word	0x08020da0
 80196b0:	08020d98 	.word	0x08020d98

080196b4 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80196b4:	b590      	push	{r4, r7, lr}
 80196b6:	b093      	sub	sp, #76	; 0x4c
 80196b8:	af0a      	add	r7, sp, #40	; 0x28
 80196ba:	60f8      	str	r0, [r7, #12]
 80196bc:	60b9      	str	r1, [r7, #8]
 80196be:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 80196c0:	68fb      	ldr	r3, [r7, #12]
 80196c2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80196c6:	461a      	mov	r2, r3
 80196c8:	4b5d      	ldr	r3, [pc, #372]	; (8019840 <RegionEU868TxConfig+0x18c>)
 80196ca:	5c9b      	ldrb	r3, [r3, r2]
 80196cc:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80196ce:	68fb      	ldr	r3, [r7, #12]
 80196d0:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80196d4:	4b5b      	ldr	r3, [pc, #364]	; (8019844 <RegionEU868TxConfig+0x190>)
 80196d6:	681a      	ldr	r2, [r3, #0]
 80196d8:	4b5b      	ldr	r3, [pc, #364]	; (8019848 <RegionEU868TxConfig+0x194>)
 80196da:	6819      	ldr	r1, [r3, #0]
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	781b      	ldrb	r3, [r3, #0]
 80196e0:	461c      	mov	r4, r3
 80196e2:	4623      	mov	r3, r4
 80196e4:	005b      	lsls	r3, r3, #1
 80196e6:	4423      	add	r3, r4
 80196e8:	009b      	lsls	r3, r3, #2
 80196ea:	440b      	add	r3, r1
 80196ec:	3309      	adds	r3, #9
 80196ee:	781b      	ldrb	r3, [r3, #0]
 80196f0:	4619      	mov	r1, r3
 80196f2:	460b      	mov	r3, r1
 80196f4:	005b      	lsls	r3, r3, #1
 80196f6:	440b      	add	r3, r1
 80196f8:	00db      	lsls	r3, r3, #3
 80196fa:	4413      	add	r3, r2
 80196fc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8019700:	4619      	mov	r1, r3
 8019702:	f7ff fa40 	bl	8018b86 <RegionCommonLimitTxPower>
 8019706:	4603      	mov	r3, r0
 8019708:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 801970a:	68fb      	ldr	r3, [r7, #12]
 801970c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019710:	494e      	ldr	r1, [pc, #312]	; (801984c <RegionEU868TxConfig+0x198>)
 8019712:	4618      	mov	r0, r3
 8019714:	f7ff fa4c 	bl	8018bb0 <RegionCommonGetBandwidth>
 8019718:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801971a:	2300      	movs	r3, #0
 801971c:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 801971e:	68fb      	ldr	r3, [r7, #12]
 8019720:	6859      	ldr	r1, [r3, #4]
 8019722:	68fb      	ldr	r3, [r7, #12]
 8019724:	689a      	ldr	r2, [r3, #8]
 8019726:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801972a:	4618      	mov	r0, r3
 801972c:	f7ff f89c 	bl	8018868 <RegionCommonComputeTxPower>
 8019730:	4603      	mov	r3, r0
 8019732:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8019734:	4b46      	ldr	r3, [pc, #280]	; (8019850 <RegionEU868TxConfig+0x19c>)
 8019736:	68da      	ldr	r2, [r3, #12]
 8019738:	4b43      	ldr	r3, [pc, #268]	; (8019848 <RegionEU868TxConfig+0x194>)
 801973a:	6819      	ldr	r1, [r3, #0]
 801973c:	68fb      	ldr	r3, [r7, #12]
 801973e:	781b      	ldrb	r3, [r3, #0]
 8019740:	4618      	mov	r0, r3
 8019742:	4603      	mov	r3, r0
 8019744:	005b      	lsls	r3, r3, #1
 8019746:	4403      	add	r3, r0
 8019748:	009b      	lsls	r3, r3, #2
 801974a:	440b      	add	r3, r1
 801974c:	681b      	ldr	r3, [r3, #0]
 801974e:	4618      	mov	r0, r3
 8019750:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8019752:	68fb      	ldr	r3, [r7, #12]
 8019754:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019758:	2b07      	cmp	r3, #7
 801975a:	d124      	bne.n	80197a6 <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 801975c:	2300      	movs	r3, #0
 801975e:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8019760:	4b3b      	ldr	r3, [pc, #236]	; (8019850 <RegionEU868TxConfig+0x19c>)
 8019762:	69dc      	ldr	r4, [r3, #28]
 8019764:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8019768:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801976c:	fb02 f303 	mul.w	r3, r2, r3
 8019770:	461a      	mov	r2, r3
 8019772:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8019776:	7ff8      	ldrb	r0, [r7, #31]
 8019778:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 801977c:	9308      	str	r3, [sp, #32]
 801977e:	2300      	movs	r3, #0
 8019780:	9307      	str	r3, [sp, #28]
 8019782:	2300      	movs	r3, #0
 8019784:	9306      	str	r3, [sp, #24]
 8019786:	2300      	movs	r3, #0
 8019788:	9305      	str	r3, [sp, #20]
 801978a:	2301      	movs	r3, #1
 801978c:	9304      	str	r3, [sp, #16]
 801978e:	2300      	movs	r3, #0
 8019790:	9303      	str	r3, [sp, #12]
 8019792:	2305      	movs	r3, #5
 8019794:	9302      	str	r3, [sp, #8]
 8019796:	2300      	movs	r3, #0
 8019798:	9301      	str	r3, [sp, #4]
 801979a:	9200      	str	r2, [sp, #0]
 801979c:	69bb      	ldr	r3, [r7, #24]
 801979e:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80197a2:	47a0      	blx	r4
 80197a4:	e01d      	b.n	80197e2 <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 80197a6:	2301      	movs	r3, #1
 80197a8:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80197aa:	4b29      	ldr	r3, [pc, #164]	; (8019850 <RegionEU868TxConfig+0x19c>)
 80197ac:	69dc      	ldr	r4, [r3, #28]
 80197ae:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80197b2:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80197b6:	7ff8      	ldrb	r0, [r7, #31]
 80197b8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80197bc:	9208      	str	r2, [sp, #32]
 80197be:	2200      	movs	r2, #0
 80197c0:	9207      	str	r2, [sp, #28]
 80197c2:	2200      	movs	r2, #0
 80197c4:	9206      	str	r2, [sp, #24]
 80197c6:	2200      	movs	r2, #0
 80197c8:	9205      	str	r2, [sp, #20]
 80197ca:	2201      	movs	r2, #1
 80197cc:	9204      	str	r2, [sp, #16]
 80197ce:	2200      	movs	r2, #0
 80197d0:	9203      	str	r2, [sp, #12]
 80197d2:	2208      	movs	r2, #8
 80197d4:	9202      	str	r2, [sp, #8]
 80197d6:	2201      	movs	r2, #1
 80197d8:	9201      	str	r2, [sp, #4]
 80197da:	9300      	str	r3, [sp, #0]
 80197dc:	69bb      	ldr	r3, [r7, #24]
 80197de:	2200      	movs	r2, #0
 80197e0:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80197e2:	4b19      	ldr	r3, [pc, #100]	; (8019848 <RegionEU868TxConfig+0x194>)
 80197e4:	681a      	ldr	r2, [r3, #0]
 80197e6:	68fb      	ldr	r3, [r7, #12]
 80197e8:	781b      	ldrb	r3, [r3, #0]
 80197ea:	4619      	mov	r1, r3
 80197ec:	460b      	mov	r3, r1
 80197ee:	005b      	lsls	r3, r3, #1
 80197f0:	440b      	add	r3, r1
 80197f2:	009b      	lsls	r3, r3, #2
 80197f4:	4413      	add	r3, r2
 80197f6:	681a      	ldr	r2, [r3, #0]
 80197f8:	68fb      	ldr	r3, [r7, #12]
 80197fa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80197fe:	4619      	mov	r1, r3
 8019800:	4610      	mov	r0, r2
 8019802:	f7ff fa25 	bl	8018c50 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8019806:	68fb      	ldr	r3, [r7, #12]
 8019808:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801980c:	68fb      	ldr	r3, [r7, #12]
 801980e:	899b      	ldrh	r3, [r3, #12]
 8019810:	4619      	mov	r1, r3
 8019812:	4610      	mov	r0, r2
 8019814:	f7ff faaa 	bl	8018d6c <GetTimeOnAir>
 8019818:	4602      	mov	r2, r0
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 801981e:	4b0c      	ldr	r3, [pc, #48]	; (8019850 <RegionEU868TxConfig+0x19c>)
 8019820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019822:	68fa      	ldr	r2, [r7, #12]
 8019824:	8992      	ldrh	r2, [r2, #12]
 8019826:	b2d1      	uxtb	r1, r2
 8019828:	7ffa      	ldrb	r2, [r7, #31]
 801982a:	4610      	mov	r0, r2
 801982c:	4798      	blx	r3

    *txPower = txPowerLimited;
 801982e:	68bb      	ldr	r3, [r7, #8]
 8019830:	7f7a      	ldrb	r2, [r7, #29]
 8019832:	701a      	strb	r2, [r3, #0]
    return true;
 8019834:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8019836:	4618      	mov	r0, r3
 8019838:	3724      	adds	r7, #36	; 0x24
 801983a:	46bd      	mov	sp, r7
 801983c:	bd90      	pop	{r4, r7, pc}
 801983e:	bf00      	nop
 8019840:	08020d70 	.word	0x08020d70
 8019844:	20001a68 	.word	0x20001a68
 8019848:	20001a64 	.word	0x20001a64
 801984c:	08020d78 	.word	0x08020d78
 8019850:	08020e2c 	.word	0x08020e2c

08019854 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8019854:	b590      	push	{r4, r7, lr}
 8019856:	b093      	sub	sp, #76	; 0x4c
 8019858:	af00      	add	r7, sp, #0
 801985a:	60f8      	str	r0, [r7, #12]
 801985c:	60b9      	str	r1, [r7, #8]
 801985e:	607a      	str	r2, [r7, #4]
 8019860:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8019862:	2307      	movs	r3, #7
 8019864:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8019868:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801986c:	2200      	movs	r2, #0
 801986e:	601a      	str	r2, [r3, #0]
 8019870:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8019872:	2300      	movs	r3, #0
 8019874:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8019878:	2300      	movs	r3, #0
 801987a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 801987e:	2300      	movs	r3, #0
 8019880:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8019882:	e085      	b.n	8019990 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8019884:	68fb      	ldr	r3, [r7, #12]
 8019886:	685a      	ldr	r2, [r3, #4]
 8019888:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801988c:	4413      	add	r3, r2
 801988e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8019892:	4611      	mov	r1, r2
 8019894:	4618      	mov	r0, r3
 8019896:	f7fe fe2f 	bl	80184f8 <RegionCommonParseLinkAdrReq>
 801989a:	4603      	mov	r3, r0
 801989c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 80198a0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	d07b      	beq.n	80199a0 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80198a8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80198ac:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80198b0:	4413      	add	r3, r2
 80198b2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80198b6:	2307      	movs	r3, #7
 80198b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80198bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80198c0:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80198c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d109      	bne.n	80198de <RegionEU868LinkAdrReq+0x8a>
 80198ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80198cc:	2b00      	cmp	r3, #0
 80198ce:	d106      	bne.n	80198de <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 80198d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80198d4:	f023 0301 	bic.w	r3, r3, #1
 80198d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80198dc:	e058      	b.n	8019990 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80198de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80198e2:	2b00      	cmp	r3, #0
 80198e4:	d003      	beq.n	80198ee <RegionEU868LinkAdrReq+0x9a>
 80198e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80198ea:	2b05      	cmp	r3, #5
 80198ec:	d903      	bls.n	80198f6 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80198ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80198f2:	2b06      	cmp	r3, #6
 80198f4:	d906      	bls.n	8019904 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80198f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80198fa:	f023 0301 	bic.w	r3, r3, #1
 80198fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8019902:	e045      	b.n	8019990 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8019904:	2300      	movs	r3, #0
 8019906:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801990a:	e03d      	b.n	8019988 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 801990c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019910:	2b06      	cmp	r3, #6
 8019912:	d118      	bne.n	8019946 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8019914:	4b5f      	ldr	r3, [pc, #380]	; (8019a94 <RegionEU868LinkAdrReq+0x240>)
 8019916:	6819      	ldr	r1, [r3, #0]
 8019918:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 801991c:	4613      	mov	r3, r2
 801991e:	005b      	lsls	r3, r3, #1
 8019920:	4413      	add	r3, r2
 8019922:	009b      	lsls	r3, r3, #2
 8019924:	440b      	add	r3, r1
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	2b00      	cmp	r3, #0
 801992a:	d028      	beq.n	801997e <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 801992c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019930:	2201      	movs	r2, #1
 8019932:	fa02 f303 	lsl.w	r3, r2, r3
 8019936:	b21a      	sxth	r2, r3
 8019938:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801993a:	b21b      	sxth	r3, r3
 801993c:	4313      	orrs	r3, r2
 801993e:	b21b      	sxth	r3, r3
 8019940:	b29b      	uxth	r3, r3
 8019942:	877b      	strh	r3, [r7, #58]	; 0x3a
 8019944:	e01b      	b.n	801997e <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8019946:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019948:	461a      	mov	r2, r3
 801994a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801994e:	fa42 f303 	asr.w	r3, r2, r3
 8019952:	f003 0301 	and.w	r3, r3, #1
 8019956:	2b00      	cmp	r3, #0
 8019958:	d011      	beq.n	801997e <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 801995a:	4b4e      	ldr	r3, [pc, #312]	; (8019a94 <RegionEU868LinkAdrReq+0x240>)
 801995c:	6819      	ldr	r1, [r3, #0]
 801995e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8019962:	4613      	mov	r3, r2
 8019964:	005b      	lsls	r3, r3, #1
 8019966:	4413      	add	r3, r2
 8019968:	009b      	lsls	r3, r3, #2
 801996a:	440b      	add	r3, r1
 801996c:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801996e:	2b00      	cmp	r3, #0
 8019970:	d105      	bne.n	801997e <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8019972:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019976:	f023 0301 	bic.w	r3, r3, #1
 801997a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801997e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019982:	3301      	adds	r3, #1
 8019984:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8019988:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801998c:	2b0f      	cmp	r3, #15
 801998e:	d9bd      	bls.n	801990c <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8019990:	68fb      	ldr	r3, [r7, #12]
 8019992:	7a1b      	ldrb	r3, [r3, #8]
 8019994:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8019998:	429a      	cmp	r2, r3
 801999a:	f4ff af73 	bcc.w	8019884 <RegionEU868LinkAdrReq+0x30>
 801999e:	e000      	b.n	80199a2 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 80199a0:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80199a2:	2302      	movs	r3, #2
 80199a4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80199a8:	68fb      	ldr	r3, [r7, #12]
 80199aa:	7a5b      	ldrb	r3, [r3, #9]
 80199ac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80199b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80199b4:	4618      	mov	r0, r3
 80199b6:	f7ff fa29 	bl	8018e0c <RegionEU868GetPhyParam>
 80199ba:	4603      	mov	r3, r0
 80199bc:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 80199be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80199c2:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80199c4:	68fb      	ldr	r3, [r7, #12]
 80199c6:	7a9b      	ldrb	r3, [r3, #10]
 80199c8:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80199ca:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 80199ce:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80199d0:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80199d4:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80199d6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80199da:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80199dc:	68fb      	ldr	r3, [r7, #12]
 80199de:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80199e2:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80199e4:	68fb      	ldr	r3, [r7, #12]
 80199e6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80199ea:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80199ec:	68fb      	ldr	r3, [r7, #12]
 80199ee:	7b5b      	ldrb	r3, [r3, #13]
 80199f0:	b25b      	sxtb	r3, r3
 80199f2:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 80199f4:	2310      	movs	r3, #16
 80199f6:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80199f8:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80199fc:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80199fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a00:	b25b      	sxtb	r3, r3
 8019a02:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8019a06:	2307      	movs	r3, #7
 8019a08:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8019a0c:	4b21      	ldr	r3, [pc, #132]	; (8019a94 <RegionEU868LinkAdrReq+0x240>)
 8019a0e:	681b      	ldr	r3, [r3, #0]
 8019a10:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8019a12:	2307      	movs	r3, #7
 8019a14:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8019a18:	2300      	movs	r3, #0
 8019a1a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8019a1e:	68fb      	ldr	r3, [r7, #12]
 8019a20:	681b      	ldr	r3, [r3, #0]
 8019a22:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8019a24:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8019a28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019a2c:	1c9a      	adds	r2, r3, #2
 8019a2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019a32:	1c59      	adds	r1, r3, #1
 8019a34:	f107 0010 	add.w	r0, r7, #16
 8019a38:	4623      	mov	r3, r4
 8019a3a:	f7fe fdae 	bl	801859a <RegionCommonLinkAdrReqVerifyParams>
 8019a3e:	4603      	mov	r3, r0
 8019a40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8019a44:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019a48:	2b07      	cmp	r3, #7
 8019a4a:	d10d      	bne.n	8019a68 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8019a4c:	4b11      	ldr	r3, [pc, #68]	; (8019a94 <RegionEU868LinkAdrReq+0x240>)
 8019a4e:	681b      	ldr	r3, [r3, #0]
 8019a50:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8019a54:	220c      	movs	r2, #12
 8019a56:	2100      	movs	r1, #0
 8019a58:	4618      	mov	r0, r3
 8019a5a:	f001 fd31 	bl	801b4c0 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8019a5e:	4b0d      	ldr	r3, [pc, #52]	; (8019a94 <RegionEU868LinkAdrReq+0x240>)
 8019a60:	681b      	ldr	r3, [r3, #0]
 8019a62:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019a64:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8019a68:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8019a6c:	68bb      	ldr	r3, [r7, #8]
 8019a6e:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8019a70:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8019a78:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8019a7c:	683b      	ldr	r3, [r7, #0]
 8019a7e:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8019a80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019a82:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8019a86:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8019a88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8019a8c:	4618      	mov	r0, r3
 8019a8e:	374c      	adds	r7, #76	; 0x4c
 8019a90:	46bd      	mov	sp, r7
 8019a92:	bd90      	pop	{r4, r7, pc}
 8019a94:	20001a64 	.word	0x20001a64

08019a98 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8019a98:	b580      	push	{r7, lr}
 8019a9a:	b084      	sub	sp, #16
 8019a9c:	af00      	add	r7, sp, #0
 8019a9e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8019aa0:	2307      	movs	r3, #7
 8019aa2:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019aa4:	2300      	movs	r3, #0
 8019aa6:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	685b      	ldr	r3, [r3, #4]
 8019aac:	f107 020e 	add.w	r2, r7, #14
 8019ab0:	4611      	mov	r1, r2
 8019ab2:	4618      	mov	r0, r3
 8019ab4:	f7ff f8e4 	bl	8018c80 <VerifyRfFreq>
 8019ab8:	4603      	mov	r3, r0
 8019aba:	f083 0301 	eor.w	r3, r3, #1
 8019abe:	b2db      	uxtb	r3, r3
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	d003      	beq.n	8019acc <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8019ac4:	7bfb      	ldrb	r3, [r7, #15]
 8019ac6:	f023 0301 	bic.w	r3, r3, #1
 8019aca:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	f993 3000 	ldrsb.w	r3, [r3]
 8019ad2:	2207      	movs	r2, #7
 8019ad4:	2100      	movs	r1, #0
 8019ad6:	4618      	mov	r0, r3
 8019ad8:	f7fe fb4d 	bl	8018176 <RegionCommonValueInRange>
 8019adc:	4603      	mov	r3, r0
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d103      	bne.n	8019aea <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8019ae2:	7bfb      	ldrb	r3, [r7, #15]
 8019ae4:	f023 0302 	bic.w	r3, r3, #2
 8019ae8:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019af0:	2205      	movs	r2, #5
 8019af2:	2100      	movs	r1, #0
 8019af4:	4618      	mov	r0, r3
 8019af6:	f7fe fb3e 	bl	8018176 <RegionCommonValueInRange>
 8019afa:	4603      	mov	r3, r0
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	d103      	bne.n	8019b08 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8019b00:	7bfb      	ldrb	r3, [r7, #15]
 8019b02:	f023 0304 	bic.w	r3, r3, #4
 8019b06:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8019b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8019b0a:	4618      	mov	r0, r3
 8019b0c:	3710      	adds	r7, #16
 8019b0e:	46bd      	mov	sp, r7
 8019b10:	bd80      	pop	{r7, pc}
	...

08019b14 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8019b14:	b580      	push	{r7, lr}
 8019b16:	b086      	sub	sp, #24
 8019b18:	af00      	add	r7, sp, #0
 8019b1a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019b1c:	2303      	movs	r3, #3
 8019b1e:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	681b      	ldr	r3, [r3, #0]
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	d114      	bne.n	8019b54 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019b30:	b2db      	uxtb	r3, r3
 8019b32:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8019b34:	f107 0308 	add.w	r3, r7, #8
 8019b38:	4618      	mov	r0, r3
 8019b3a:	f000 f9ff 	bl	8019f3c <RegionEU868ChannelsRemove>
 8019b3e:	4603      	mov	r3, r0
 8019b40:	f083 0301 	eor.w	r3, r3, #1
 8019b44:	b2db      	uxtb	r3, r3
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	d03b      	beq.n	8019bc2 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8019b4a:	7dfb      	ldrb	r3, [r7, #23]
 8019b4c:	f023 0303 	bic.w	r3, r3, #3
 8019b50:	75fb      	strb	r3, [r7, #23]
 8019b52:	e036      	b.n	8019bc2 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	681b      	ldr	r3, [r3, #0]
 8019b58:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019b60:	b2db      	uxtb	r3, r3
 8019b62:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8019b64:	f107 030c 	add.w	r3, r7, #12
 8019b68:	4618      	mov	r0, r3
 8019b6a:	f000 f945 	bl	8019df8 <RegionEU868ChannelAdd>
 8019b6e:	4603      	mov	r3, r0
 8019b70:	2b06      	cmp	r3, #6
 8019b72:	d820      	bhi.n	8019bb6 <RegionEU868NewChannelReq+0xa2>
 8019b74:	a201      	add	r2, pc, #4	; (adr r2, 8019b7c <RegionEU868NewChannelReq+0x68>)
 8019b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b7a:	bf00      	nop
 8019b7c:	08019bc1 	.word	0x08019bc1
 8019b80:	08019bb7 	.word	0x08019bb7
 8019b84:	08019bb7 	.word	0x08019bb7
 8019b88:	08019bb7 	.word	0x08019bb7
 8019b8c:	08019b99 	.word	0x08019b99
 8019b90:	08019ba3 	.word	0x08019ba3
 8019b94:	08019bad 	.word	0x08019bad
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8019b98:	7dfb      	ldrb	r3, [r7, #23]
 8019b9a:	f023 0301 	bic.w	r3, r3, #1
 8019b9e:	75fb      	strb	r3, [r7, #23]
                break;
 8019ba0:	e00f      	b.n	8019bc2 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8019ba2:	7dfb      	ldrb	r3, [r7, #23]
 8019ba4:	f023 0302 	bic.w	r3, r3, #2
 8019ba8:	75fb      	strb	r3, [r7, #23]
                break;
 8019baa:	e00a      	b.n	8019bc2 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8019bac:	7dfb      	ldrb	r3, [r7, #23]
 8019bae:	f023 0303 	bic.w	r3, r3, #3
 8019bb2:	75fb      	strb	r3, [r7, #23]
                break;
 8019bb4:	e005      	b.n	8019bc2 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8019bb6:	7dfb      	ldrb	r3, [r7, #23]
 8019bb8:	f023 0303 	bic.w	r3, r3, #3
 8019bbc:	75fb      	strb	r3, [r7, #23]
                break;
 8019bbe:	e000      	b.n	8019bc2 <RegionEU868NewChannelReq+0xae>
                break;
 8019bc0:	bf00      	nop
            }
        }
    }

    return status;
 8019bc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019bc6:	4618      	mov	r0, r3
 8019bc8:	3718      	adds	r7, #24
 8019bca:	46bd      	mov	sp, r7
 8019bcc:	bd80      	pop	{r7, pc}
 8019bce:	bf00      	nop

08019bd0 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8019bd0:	b480      	push	{r7}
 8019bd2:	b083      	sub	sp, #12
 8019bd4:	af00      	add	r7, sp, #0
 8019bd6:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8019bd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8019bdc:	4618      	mov	r0, r3
 8019bde:	370c      	adds	r7, #12
 8019be0:	46bd      	mov	sp, r7
 8019be2:	bc80      	pop	{r7}
 8019be4:	4770      	bx	lr
	...

08019be8 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8019be8:	b580      	push	{r7, lr}
 8019bea:	b084      	sub	sp, #16
 8019bec:	af00      	add	r7, sp, #0
 8019bee:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019bf0:	2303      	movs	r3, #3
 8019bf2:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019bf4:	2300      	movs	r3, #0
 8019bf6:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	781b      	ldrb	r3, [r3, #0]
 8019bfc:	2b0f      	cmp	r3, #15
 8019bfe:	d901      	bls.n	8019c04 <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 8019c00:	2300      	movs	r3, #0
 8019c02:	e035      	b.n	8019c70 <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	685b      	ldr	r3, [r3, #4]
 8019c08:	f107 020e 	add.w	r2, r7, #14
 8019c0c:	4611      	mov	r1, r2
 8019c0e:	4618      	mov	r0, r3
 8019c10:	f7ff f836 	bl	8018c80 <VerifyRfFreq>
 8019c14:	4603      	mov	r3, r0
 8019c16:	f083 0301 	eor.w	r3, r3, #1
 8019c1a:	b2db      	uxtb	r3, r3
 8019c1c:	2b00      	cmp	r3, #0
 8019c1e:	d003      	beq.n	8019c28 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8019c20:	7bfb      	ldrb	r3, [r7, #15]
 8019c22:	f023 0301 	bic.w	r3, r3, #1
 8019c26:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8019c28:	4b13      	ldr	r3, [pc, #76]	; (8019c78 <RegionEU868DlChannelReq+0x90>)
 8019c2a:	681a      	ldr	r2, [r3, #0]
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	781b      	ldrb	r3, [r3, #0]
 8019c30:	4619      	mov	r1, r3
 8019c32:	460b      	mov	r3, r1
 8019c34:	005b      	lsls	r3, r3, #1
 8019c36:	440b      	add	r3, r1
 8019c38:	009b      	lsls	r3, r3, #2
 8019c3a:	4413      	add	r3, r2
 8019c3c:	681b      	ldr	r3, [r3, #0]
 8019c3e:	2b00      	cmp	r3, #0
 8019c40:	d103      	bne.n	8019c4a <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 8019c42:	7bfb      	ldrb	r3, [r7, #15]
 8019c44:	f023 0302 	bic.w	r3, r3, #2
 8019c48:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8019c4a:	7bfb      	ldrb	r3, [r7, #15]
 8019c4c:	2b03      	cmp	r3, #3
 8019c4e:	d10d      	bne.n	8019c6c <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8019c50:	4b09      	ldr	r3, [pc, #36]	; (8019c78 <RegionEU868DlChannelReq+0x90>)
 8019c52:	6819      	ldr	r1, [r3, #0]
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	781b      	ldrb	r3, [r3, #0]
 8019c58:	4618      	mov	r0, r3
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	685a      	ldr	r2, [r3, #4]
 8019c5e:	4603      	mov	r3, r0
 8019c60:	005b      	lsls	r3, r3, #1
 8019c62:	4403      	add	r3, r0
 8019c64:	009b      	lsls	r3, r3, #2
 8019c66:	440b      	add	r3, r1
 8019c68:	3304      	adds	r3, #4
 8019c6a:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8019c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019c70:	4618      	mov	r0, r3
 8019c72:	3710      	adds	r7, #16
 8019c74:	46bd      	mov	sp, r7
 8019c76:	bd80      	pop	{r7, pc}
 8019c78:	20001a64 	.word	0x20001a64

08019c7c <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8019c7c:	b480      	push	{r7}
 8019c7e:	b083      	sub	sp, #12
 8019c80:	af00      	add	r7, sp, #0
 8019c82:	4603      	mov	r3, r0
 8019c84:	460a      	mov	r2, r1
 8019c86:	71fb      	strb	r3, [r7, #7]
 8019c88:	4613      	mov	r3, r2
 8019c8a:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8019c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8019c90:	4618      	mov	r0, r3
 8019c92:	370c      	adds	r7, #12
 8019c94:	46bd      	mov	sp, r7
 8019c96:	bc80      	pop	{r7}
 8019c98:	4770      	bx	lr
	...

08019c9c <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8019c9c:	b580      	push	{r7, lr}
 8019c9e:	b09a      	sub	sp, #104	; 0x68
 8019ca0:	af02      	add	r7, sp, #8
 8019ca2:	60f8      	str	r0, [r7, #12]
 8019ca4:	60b9      	str	r1, [r7, #8]
 8019ca6:	607a      	str	r2, [r7, #4]
 8019ca8:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8019caa:	2300      	movs	r3, #0
 8019cac:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8019cb0:	2300      	movs	r3, #0
 8019cb2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8019cb6:	2300      	movs	r3, #0
 8019cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019cba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019cbe:	2200      	movs	r2, #0
 8019cc0:	601a      	str	r2, [r3, #0]
 8019cc2:	605a      	str	r2, [r3, #4]
 8019cc4:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8019cc6:	230c      	movs	r3, #12
 8019cc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8019ccc:	2307      	movs	r3, #7
 8019cce:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8019cd0:	4b47      	ldr	r3, [pc, #284]	; (8019df0 <RegionEU868NextChannel+0x154>)
 8019cd2:	681b      	ldr	r3, [r3, #0]
 8019cd4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8019cd8:	2201      	movs	r2, #1
 8019cda:	2100      	movs	r1, #0
 8019cdc:	4618      	mov	r0, r3
 8019cde:	f7fe fa9b 	bl	8018218 <RegionCommonCountChannels>
 8019ce2:	4603      	mov	r3, r0
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	d10a      	bne.n	8019cfe <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019ce8:	4b41      	ldr	r3, [pc, #260]	; (8019df0 <RegionEU868NextChannel+0x154>)
 8019cea:	681b      	ldr	r3, [r3, #0]
 8019cec:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8019cf0:	4b3f      	ldr	r3, [pc, #252]	; (8019df0 <RegionEU868NextChannel+0x154>)
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	f042 0207 	orr.w	r2, r2, #7
 8019cf8:	b292      	uxth	r2, r2
 8019cfa:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8019cfe:	68fb      	ldr	r3, [r7, #12]
 8019d00:	7a5b      	ldrb	r3, [r3, #9]
 8019d02:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8019d04:	68fb      	ldr	r3, [r7, #12]
 8019d06:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8019d0a:	b2db      	uxtb	r3, r3
 8019d0c:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8019d0e:	4b38      	ldr	r3, [pc, #224]	; (8019df0 <RegionEU868NextChannel+0x154>)
 8019d10:	681b      	ldr	r3, [r3, #0]
 8019d12:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8019d16:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8019d18:	4b35      	ldr	r3, [pc, #212]	; (8019df0 <RegionEU868NextChannel+0x154>)
 8019d1a:	681b      	ldr	r3, [r3, #0]
 8019d1c:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8019d1e:	4b35      	ldr	r3, [pc, #212]	; (8019df4 <RegionEU868NextChannel+0x158>)
 8019d20:	681b      	ldr	r3, [r3, #0]
 8019d22:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8019d24:	2310      	movs	r3, #16
 8019d26:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8019d28:	f107 0312 	add.w	r3, r7, #18
 8019d2c:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8019d2e:	68fb      	ldr	r3, [r7, #12]
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	685b      	ldr	r3, [r3, #4]
 8019d38:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8019d3a:	68fb      	ldr	r3, [r7, #12]
 8019d3c:	7a9b      	ldrb	r3, [r3, #10]
 8019d3e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8019d42:	2306      	movs	r3, #6
 8019d44:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8019d48:	68fa      	ldr	r2, [r7, #12]
 8019d4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019d4e:	320c      	adds	r2, #12
 8019d50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019d54:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8019d58:	68fb      	ldr	r3, [r7, #12]
 8019d5a:	7d1b      	ldrb	r3, [r3, #20]
 8019d5c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8019d60:	68fb      	ldr	r3, [r7, #12]
 8019d62:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8019d66:	68fb      	ldr	r3, [r7, #12]
 8019d68:	8adb      	ldrh	r3, [r3, #22]
 8019d6a:	4619      	mov	r1, r3
 8019d6c:	4610      	mov	r0, r2
 8019d6e:	f7fe fffd 	bl	8018d6c <GetTimeOnAir>
 8019d72:	4603      	mov	r3, r0
 8019d74:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8019d76:	f107 0314 	add.w	r3, r7, #20
 8019d7a:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8019d7c:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8019d80:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8019d84:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	9301      	str	r3, [sp, #4]
 8019d8c:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8019d90:	9300      	str	r3, [sp, #0]
 8019d92:	460b      	mov	r3, r1
 8019d94:	6839      	ldr	r1, [r7, #0]
 8019d96:	f7fe fe56 	bl	8018a46 <RegionCommonIdentifyChannels>
 8019d9a:	4603      	mov	r3, r0
 8019d9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8019da0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	d10e      	bne.n	8019dc6 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8019da8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8019dac:	3b01      	subs	r3, #1
 8019dae:	4619      	mov	r1, r3
 8019db0:	2000      	movs	r0, #0
 8019db2:	f001 fb33 	bl	801b41c <randr>
 8019db6:	4603      	mov	r3, r0
 8019db8:	3360      	adds	r3, #96	; 0x60
 8019dba:	443b      	add	r3, r7
 8019dbc:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8019dc0:	68bb      	ldr	r3, [r7, #8]
 8019dc2:	701a      	strb	r2, [r3, #0]
 8019dc4:	e00e      	b.n	8019de4 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8019dc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019dca:	2b0c      	cmp	r3, #12
 8019dcc:	d10a      	bne.n	8019de4 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019dce:	4b08      	ldr	r3, [pc, #32]	; (8019df0 <RegionEU868NextChannel+0x154>)
 8019dd0:	681b      	ldr	r3, [r3, #0]
 8019dd2:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8019dd6:	4b06      	ldr	r3, [pc, #24]	; (8019df0 <RegionEU868NextChannel+0x154>)
 8019dd8:	681b      	ldr	r3, [r3, #0]
 8019dda:	f042 0207 	orr.w	r2, r2, #7
 8019dde:	b292      	uxth	r2, r2
 8019de0:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }
    return status;
 8019de4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8019de8:	4618      	mov	r0, r3
 8019dea:	3760      	adds	r7, #96	; 0x60
 8019dec:	46bd      	mov	sp, r7
 8019dee:	bd80      	pop	{r7, pc}
 8019df0:	20001a64 	.word	0x20001a64
 8019df4:	20001a68 	.word	0x20001a68

08019df8 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8019df8:	b580      	push	{r7, lr}
 8019dfa:	b084      	sub	sp, #16
 8019dfc:	af00      	add	r7, sp, #0
 8019dfe:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019e00:	2300      	movs	r3, #0
 8019e02:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8019e04:	2300      	movs	r3, #0
 8019e06:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8019e08:	2300      	movs	r3, #0
 8019e0a:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	791b      	ldrb	r3, [r3, #4]
 8019e10:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8019e12:	7b7b      	ldrb	r3, [r7, #13]
 8019e14:	2b02      	cmp	r3, #2
 8019e16:	d801      	bhi.n	8019e1c <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019e18:	2306      	movs	r3, #6
 8019e1a:	e089      	b.n	8019f30 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8019e1c:	7b7b      	ldrb	r3, [r7, #13]
 8019e1e:	2b0f      	cmp	r3, #15
 8019e20:	d901      	bls.n	8019e26 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8019e22:	2303      	movs	r3, #3
 8019e24:	e084      	b.n	8019f30 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	681b      	ldr	r3, [r3, #0]
 8019e2a:	7a1b      	ldrb	r3, [r3, #8]
 8019e2c:	f343 0303 	sbfx	r3, r3, #0, #4
 8019e30:	b25b      	sxtb	r3, r3
 8019e32:	2207      	movs	r2, #7
 8019e34:	2100      	movs	r1, #0
 8019e36:	4618      	mov	r0, r3
 8019e38:	f7fe f99d 	bl	8018176 <RegionCommonValueInRange>
 8019e3c:	4603      	mov	r3, r0
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	d101      	bne.n	8019e46 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8019e42:	2301      	movs	r3, #1
 8019e44:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019e46:	687b      	ldr	r3, [r7, #4]
 8019e48:	681b      	ldr	r3, [r3, #0]
 8019e4a:	7a1b      	ldrb	r3, [r3, #8]
 8019e4c:	f343 1303 	sbfx	r3, r3, #4, #4
 8019e50:	b25b      	sxtb	r3, r3
 8019e52:	2207      	movs	r2, #7
 8019e54:	2100      	movs	r1, #0
 8019e56:	4618      	mov	r0, r3
 8019e58:	f7fe f98d 	bl	8018176 <RegionCommonValueInRange>
 8019e5c:	4603      	mov	r3, r0
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d101      	bne.n	8019e66 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8019e62:	2301      	movs	r3, #1
 8019e64:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	681b      	ldr	r3, [r3, #0]
 8019e6a:	7a1b      	ldrb	r3, [r3, #8]
 8019e6c:	f343 0303 	sbfx	r3, r3, #0, #4
 8019e70:	b25a      	sxtb	r2, r3
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	681b      	ldr	r3, [r3, #0]
 8019e76:	7a1b      	ldrb	r3, [r3, #8]
 8019e78:	f343 1303 	sbfx	r3, r3, #4, #4
 8019e7c:	b25b      	sxtb	r3, r3
 8019e7e:	429a      	cmp	r2, r3
 8019e80:	dd01      	ble.n	8019e86 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8019e82:	2301      	movs	r3, #1
 8019e84:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8019e86:	7bbb      	ldrb	r3, [r7, #14]
 8019e88:	f083 0301 	eor.w	r3, r3, #1
 8019e8c:	b2db      	uxtb	r3, r3
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	d010      	beq.n	8019eb4 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	681b      	ldr	r3, [r3, #0]
 8019e96:	681b      	ldr	r3, [r3, #0]
 8019e98:	f107 020c 	add.w	r2, r7, #12
 8019e9c:	4611      	mov	r1, r2
 8019e9e:	4618      	mov	r0, r3
 8019ea0:	f7fe feee 	bl	8018c80 <VerifyRfFreq>
 8019ea4:	4603      	mov	r3, r0
 8019ea6:	f083 0301 	eor.w	r3, r3, #1
 8019eaa:	b2db      	uxtb	r3, r3
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	d001      	beq.n	8019eb4 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8019eb0:	2301      	movs	r3, #1
 8019eb2:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8019eb4:	7bfb      	ldrb	r3, [r7, #15]
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	d004      	beq.n	8019ec4 <RegionEU868ChannelAdd+0xcc>
 8019eba:	7bbb      	ldrb	r3, [r7, #14]
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d001      	beq.n	8019ec4 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019ec0:	2306      	movs	r3, #6
 8019ec2:	e035      	b.n	8019f30 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8019ec4:	7bfb      	ldrb	r3, [r7, #15]
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	d001      	beq.n	8019ece <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8019eca:	2305      	movs	r3, #5
 8019ecc:	e030      	b.n	8019f30 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8019ece:	7bbb      	ldrb	r3, [r7, #14]
 8019ed0:	2b00      	cmp	r3, #0
 8019ed2:	d001      	beq.n	8019ed8 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8019ed4:	2304      	movs	r3, #4
 8019ed6:	e02b      	b.n	8019f30 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8019ed8:	4b17      	ldr	r3, [pc, #92]	; (8019f38 <RegionEU868ChannelAdd+0x140>)
 8019eda:	6819      	ldr	r1, [r3, #0]
 8019edc:	7b7a      	ldrb	r2, [r7, #13]
 8019ede:	4613      	mov	r3, r2
 8019ee0:	005b      	lsls	r3, r3, #1
 8019ee2:	4413      	add	r3, r2
 8019ee4:	009b      	lsls	r3, r3, #2
 8019ee6:	18c8      	adds	r0, r1, r3
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	681b      	ldr	r3, [r3, #0]
 8019eec:	220c      	movs	r2, #12
 8019eee:	4619      	mov	r1, r3
 8019ef0:	f001 faab 	bl	801b44a <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8019ef4:	4b10      	ldr	r3, [pc, #64]	; (8019f38 <RegionEU868ChannelAdd+0x140>)
 8019ef6:	6819      	ldr	r1, [r3, #0]
 8019ef8:	7b7a      	ldrb	r2, [r7, #13]
 8019efa:	7b38      	ldrb	r0, [r7, #12]
 8019efc:	4613      	mov	r3, r2
 8019efe:	005b      	lsls	r3, r3, #1
 8019f00:	4413      	add	r3, r2
 8019f02:	009b      	lsls	r3, r3, #2
 8019f04:	440b      	add	r3, r1
 8019f06:	3309      	adds	r3, #9
 8019f08:	4602      	mov	r2, r0
 8019f0a:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8019f0c:	4b0a      	ldr	r3, [pc, #40]	; (8019f38 <RegionEU868ChannelAdd+0x140>)
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	f8b3 3360 	ldrh.w	r3, [r3, #864]	; 0x360
 8019f14:	b21a      	sxth	r2, r3
 8019f16:	7b7b      	ldrb	r3, [r7, #13]
 8019f18:	2101      	movs	r1, #1
 8019f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8019f1e:	b21b      	sxth	r3, r3
 8019f20:	4313      	orrs	r3, r2
 8019f22:	b21a      	sxth	r2, r3
 8019f24:	4b04      	ldr	r3, [pc, #16]	; (8019f38 <RegionEU868ChannelAdd+0x140>)
 8019f26:	681b      	ldr	r3, [r3, #0]
 8019f28:	b292      	uxth	r2, r2
 8019f2a:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 8019f2e:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8019f30:	4618      	mov	r0, r3
 8019f32:	3710      	adds	r7, #16
 8019f34:	46bd      	mov	sp, r7
 8019f36:	bd80      	pop	{r7, pc}
 8019f38:	20001a64 	.word	0x20001a64

08019f3c <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8019f3c:	b580      	push	{r7, lr}
 8019f3e:	b086      	sub	sp, #24
 8019f40:	af00      	add	r7, sp, #0
 8019f42:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	781b      	ldrb	r3, [r3, #0]
 8019f48:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8019f4a:	7dfb      	ldrb	r3, [r7, #23]
 8019f4c:	2b02      	cmp	r3, #2
 8019f4e:	d801      	bhi.n	8019f54 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8019f50:	2300      	movs	r3, #0
 8019f52:	e016      	b.n	8019f82 <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8019f54:	4b0d      	ldr	r3, [pc, #52]	; (8019f8c <RegionEU868ChannelsRemove+0x50>)
 8019f56:	6819      	ldr	r1, [r3, #0]
 8019f58:	7dfa      	ldrb	r2, [r7, #23]
 8019f5a:	4613      	mov	r3, r2
 8019f5c:	005b      	lsls	r3, r3, #1
 8019f5e:	4413      	add	r3, r2
 8019f60:	009b      	lsls	r3, r3, #2
 8019f62:	440b      	add	r3, r1
 8019f64:	461a      	mov	r2, r3
 8019f66:	2300      	movs	r3, #0
 8019f68:	6013      	str	r3, [r2, #0]
 8019f6a:	6053      	str	r3, [r2, #4]
 8019f6c:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8019f6e:	4b07      	ldr	r3, [pc, #28]	; (8019f8c <RegionEU868ChannelsRemove+0x50>)
 8019f70:	681b      	ldr	r3, [r3, #0]
 8019f72:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8019f76:	7df9      	ldrb	r1, [r7, #23]
 8019f78:	2210      	movs	r2, #16
 8019f7a:	4618      	mov	r0, r3
 8019f7c:	f7fe f918 	bl	80181b0 <RegionCommonChanDisable>
 8019f80:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8019f82:	4618      	mov	r0, r3
 8019f84:	3718      	adds	r7, #24
 8019f86:	46bd      	mov	sp, r7
 8019f88:	bd80      	pop	{r7, pc}
 8019f8a:	bf00      	nop
 8019f8c:	20001a64 	.word	0x20001a64

08019f90 <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8019f90:	b480      	push	{r7}
 8019f92:	b085      	sub	sp, #20
 8019f94:	af00      	add	r7, sp, #0
 8019f96:	4603      	mov	r3, r0
 8019f98:	71fb      	strb	r3, [r7, #7]
 8019f9a:	460b      	mov	r3, r1
 8019f9c:	71bb      	strb	r3, [r7, #6]
 8019f9e:	4613      	mov	r3, r2
 8019fa0:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8019fa2:	79ba      	ldrb	r2, [r7, #6]
 8019fa4:	797b      	ldrb	r3, [r7, #5]
 8019fa6:	1ad3      	subs	r3, r2, r3
 8019fa8:	b2db      	uxtb	r3, r3
 8019faa:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8019fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	da01      	bge.n	8019fb8 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8019fb4:	2300      	movs	r3, #0
 8019fb6:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8019fb8:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8019fba:	4618      	mov	r0, r3
 8019fbc:	3714      	adds	r7, #20
 8019fbe:	46bd      	mov	sp, r7
 8019fc0:	bc80      	pop	{r7}
 8019fc2:	4770      	bx	lr

08019fc4 <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8019fc4:	b580      	push	{r7, lr}
 8019fc6:	b084      	sub	sp, #16
 8019fc8:	af00      	add	r7, sp, #0
 8019fca:	603b      	str	r3, [r7, #0]
 8019fcc:	4603      	mov	r3, r0
 8019fce:	71fb      	strb	r3, [r7, #7]
 8019fd0:	460b      	mov	r3, r1
 8019fd2:	71bb      	strb	r3, [r7, #6]
 8019fd4:	4613      	mov	r3, r2
 8019fd6:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 8019fd8:	79fb      	ldrb	r3, [r7, #7]
 8019fda:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8019fdc:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8019fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019fe4:	4611      	mov	r1, r2
 8019fe6:	4618      	mov	r0, r3
 8019fe8:	f7fe fdcd 	bl	8018b86 <RegionCommonLimitTxPower>
 8019fec:	4603      	mov	r3, r0
 8019fee:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 8019ff0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8019ff4:	2b04      	cmp	r3, #4
 8019ff6:	d106      	bne.n	801a006 <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8019ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019ffc:	2b02      	cmp	r3, #2
 8019ffe:	bfb8      	it	lt
 801a000:	2302      	movlt	r3, #2
 801a002:	73fb      	strb	r3, [r7, #15]
 801a004:	e00d      	b.n	801a022 <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 801a006:	2204      	movs	r2, #4
 801a008:	2100      	movs	r1, #0
 801a00a:	6838      	ldr	r0, [r7, #0]
 801a00c:	f7fe f904 	bl	8018218 <RegionCommonCountChannels>
 801a010:	4603      	mov	r3, r0
 801a012:	2b31      	cmp	r3, #49	; 0x31
 801a014:	d805      	bhi.n	801a022 <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 801a016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a01a:	2b05      	cmp	r3, #5
 801a01c:	bfb8      	it	lt
 801a01e:	2305      	movlt	r3, #5
 801a020:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 801a022:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a026:	4618      	mov	r0, r3
 801a028:	3710      	adds	r7, #16
 801a02a:	46bd      	mov	sp, r7
 801a02c:	bd80      	pop	{r7, pc}
	...

0801a030 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 801a030:	b580      	push	{r7, lr}
 801a032:	b082      	sub	sp, #8
 801a034:	af00      	add	r7, sp, #0
 801a036:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801a038:	4b18      	ldr	r3, [pc, #96]	; (801a09c <VerifyRfFreq+0x6c>)
 801a03a:	6a1b      	ldr	r3, [r3, #32]
 801a03c:	6878      	ldr	r0, [r7, #4]
 801a03e:	4798      	blx	r3
 801a040:	4603      	mov	r3, r0
 801a042:	f083 0301 	eor.w	r3, r3, #1
 801a046:	b2db      	uxtb	r3, r3
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d001      	beq.n	801a050 <VerifyRfFreq+0x20>
    {
        return false;
 801a04c:	2300      	movs	r3, #0
 801a04e:	e021      	b.n	801a094 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	4a13      	ldr	r2, [pc, #76]	; (801a0a0 <VerifyRfFreq+0x70>)
 801a054:	4293      	cmp	r3, r2
 801a056:	d910      	bls.n	801a07a <VerifyRfFreq+0x4a>
 801a058:	687b      	ldr	r3, [r7, #4]
 801a05a:	4a12      	ldr	r2, [pc, #72]	; (801a0a4 <VerifyRfFreq+0x74>)
 801a05c:	4293      	cmp	r3, r2
 801a05e:	d80c      	bhi.n	801a07a <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 801a060:	687a      	ldr	r2, [r7, #4]
 801a062:	4b11      	ldr	r3, [pc, #68]	; (801a0a8 <VerifyRfFreq+0x78>)
 801a064:	4413      	add	r3, r2
 801a066:	4a11      	ldr	r2, [pc, #68]	; (801a0ac <VerifyRfFreq+0x7c>)
 801a068:	fba2 1203 	umull	r1, r2, r2, r3
 801a06c:	0c92      	lsrs	r2, r2, #18
 801a06e:	4910      	ldr	r1, [pc, #64]	; (801a0b0 <VerifyRfFreq+0x80>)
 801a070:	fb01 f202 	mul.w	r2, r1, r2
 801a074:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 801a076:	2a00      	cmp	r2, #0
 801a078:	d001      	beq.n	801a07e <VerifyRfFreq+0x4e>
    {
        return false;
 801a07a:	2300      	movs	r3, #0
 801a07c:	e00a      	b.n	801a094 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	4a0c      	ldr	r2, [pc, #48]	; (801a0b4 <VerifyRfFreq+0x84>)
 801a082:	4293      	cmp	r3, r2
 801a084:	d903      	bls.n	801a08e <VerifyRfFreq+0x5e>
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	4a06      	ldr	r2, [pc, #24]	; (801a0a4 <VerifyRfFreq+0x74>)
 801a08a:	4293      	cmp	r3, r2
 801a08c:	d901      	bls.n	801a092 <VerifyRfFreq+0x62>
    {
        return false;
 801a08e:	2300      	movs	r3, #0
 801a090:	e000      	b.n	801a094 <VerifyRfFreq+0x64>
    }
    return true;
 801a092:	2301      	movs	r3, #1
}
 801a094:	4618      	mov	r0, r3
 801a096:	3708      	adds	r7, #8
 801a098:	46bd      	mov	sp, r7
 801a09a:	bd80      	pop	{r7, pc}
 801a09c:	08020e2c 	.word	0x08020e2c
 801a0a0:	3708709f 	.word	0x3708709f
 801a0a4:	374886e0 	.word	0x374886e0
 801a0a8:	c8f78f60 	.word	0xc8f78f60
 801a0ac:	6fd91d85 	.word	0x6fd91d85
 801a0b0:	000927c0 	.word	0x000927c0
 801a0b4:	35c8015f 	.word	0x35c8015f

0801a0b8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801a0b8:	b590      	push	{r4, r7, lr}
 801a0ba:	b089      	sub	sp, #36	; 0x24
 801a0bc:	af04      	add	r7, sp, #16
 801a0be:	4603      	mov	r3, r0
 801a0c0:	460a      	mov	r2, r1
 801a0c2:	71fb      	strb	r3, [r7, #7]
 801a0c4:	4613      	mov	r3, r2
 801a0c6:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 801a0c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a0cc:	4a0f      	ldr	r2, [pc, #60]	; (801a10c <GetTimeOnAir+0x54>)
 801a0ce:	5cd3      	ldrb	r3, [r2, r3]
 801a0d0:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 801a0d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a0d6:	490e      	ldr	r1, [pc, #56]	; (801a110 <GetTimeOnAir+0x58>)
 801a0d8:	4618      	mov	r0, r3
 801a0da:	f7fe fd69 	bl	8018bb0 <RegionCommonGetBandwidth>
 801a0de:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801a0e0:	4b0c      	ldr	r3, [pc, #48]	; (801a114 <GetTimeOnAir+0x5c>)
 801a0e2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801a0e4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801a0e8:	88bb      	ldrh	r3, [r7, #4]
 801a0ea:	b2db      	uxtb	r3, r3
 801a0ec:	2101      	movs	r1, #1
 801a0ee:	9103      	str	r1, [sp, #12]
 801a0f0:	9302      	str	r3, [sp, #8]
 801a0f2:	2300      	movs	r3, #0
 801a0f4:	9301      	str	r3, [sp, #4]
 801a0f6:	2308      	movs	r3, #8
 801a0f8:	9300      	str	r3, [sp, #0]
 801a0fa:	2301      	movs	r3, #1
 801a0fc:	68b9      	ldr	r1, [r7, #8]
 801a0fe:	2001      	movs	r0, #1
 801a100:	47a0      	blx	r4
 801a102:	4603      	mov	r3, r0
}
 801a104:	4618      	mov	r0, r3
 801a106:	3714      	adds	r7, #20
 801a108:	46bd      	mov	sp, r7
 801a10a:	bd90      	pop	{r4, r7, pc}
 801a10c:	08020da8 	.word	0x08020da8
 801a110:	08020db8 	.word	0x08020db8
 801a114:	08020e2c 	.word	0x08020e2c

0801a118 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 801a118:	b580      	push	{r7, lr}
 801a11a:	b088      	sub	sp, #32
 801a11c:	af00      	add	r7, sp, #0
 801a11e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801a120:	2300      	movs	r3, #0
 801a122:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	781b      	ldrb	r3, [r3, #0]
 801a128:	3b01      	subs	r3, #1
 801a12a:	2b37      	cmp	r3, #55	; 0x37
 801a12c:	f200 8136 	bhi.w	801a39c <RegionUS915GetPhyParam+0x284>
 801a130:	a201      	add	r2, pc, #4	; (adr r2, 801a138 <RegionUS915GetPhyParam+0x20>)
 801a132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a136:	bf00      	nop
 801a138:	0801a219 	.word	0x0801a219
 801a13c:	0801a21f 	.word	0x0801a21f
 801a140:	0801a39d 	.word	0x0801a39d
 801a144:	0801a39d 	.word	0x0801a39d
 801a148:	0801a39d 	.word	0x0801a39d
 801a14c:	0801a225 	.word	0x0801a225
 801a150:	0801a39d 	.word	0x0801a39d
 801a154:	0801a25f 	.word	0x0801a25f
 801a158:	0801a39d 	.word	0x0801a39d
 801a15c:	0801a265 	.word	0x0801a265
 801a160:	0801a26b 	.word	0x0801a26b
 801a164:	0801a271 	.word	0x0801a271
 801a168:	0801a277 	.word	0x0801a277
 801a16c:	0801a287 	.word	0x0801a287
 801a170:	0801a297 	.word	0x0801a297
 801a174:	0801a29d 	.word	0x0801a29d
 801a178:	0801a2a5 	.word	0x0801a2a5
 801a17c:	0801a2ad 	.word	0x0801a2ad
 801a180:	0801a2b5 	.word	0x0801a2b5
 801a184:	0801a2bd 	.word	0x0801a2bd
 801a188:	0801a2c5 	.word	0x0801a2c5
 801a18c:	0801a2d9 	.word	0x0801a2d9
 801a190:	0801a2df 	.word	0x0801a2df
 801a194:	0801a2e5 	.word	0x0801a2e5
 801a198:	0801a2eb 	.word	0x0801a2eb
 801a19c:	0801a2f7 	.word	0x0801a2f7
 801a1a0:	0801a303 	.word	0x0801a303
 801a1a4:	0801a309 	.word	0x0801a309
 801a1a8:	0801a311 	.word	0x0801a311
 801a1ac:	0801a317 	.word	0x0801a317
 801a1b0:	0801a31d 	.word	0x0801a31d
 801a1b4:	0801a323 	.word	0x0801a323
 801a1b8:	0801a22b 	.word	0x0801a22b
 801a1bc:	0801a39d 	.word	0x0801a39d
 801a1c0:	0801a39d 	.word	0x0801a39d
 801a1c4:	0801a39d 	.word	0x0801a39d
 801a1c8:	0801a39d 	.word	0x0801a39d
 801a1cc:	0801a39d 	.word	0x0801a39d
 801a1d0:	0801a39d 	.word	0x0801a39d
 801a1d4:	0801a39d 	.word	0x0801a39d
 801a1d8:	0801a39d 	.word	0x0801a39d
 801a1dc:	0801a39d 	.word	0x0801a39d
 801a1e0:	0801a39d 	.word	0x0801a39d
 801a1e4:	0801a39d 	.word	0x0801a39d
 801a1e8:	0801a39d 	.word	0x0801a39d
 801a1ec:	0801a39d 	.word	0x0801a39d
 801a1f0:	0801a32b 	.word	0x0801a32b
 801a1f4:	0801a33f 	.word	0x0801a33f
 801a1f8:	0801a34d 	.word	0x0801a34d
 801a1fc:	0801a353 	.word	0x0801a353
 801a200:	0801a39d 	.word	0x0801a39d
 801a204:	0801a359 	.word	0x0801a359
 801a208:	0801a36d 	.word	0x0801a36d
 801a20c:	0801a373 	.word	0x0801a373
 801a210:	0801a379 	.word	0x0801a379
 801a214:	0801a389 	.word	0x0801a389
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 801a218:	2308      	movs	r3, #8
 801a21a:	61bb      	str	r3, [r7, #24]
            break;
 801a21c:	e0bf      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 801a21e:	2300      	movs	r3, #0
 801a220:	61bb      	str	r3, [r7, #24]
            break;
 801a222:	e0bc      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 801a224:	2300      	movs	r3, #0
 801a226:	61bb      	str	r3, [r7, #24]
            break;
 801a228:	e0b9      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a230:	733b      	strb	r3, [r7, #12]
 801a232:	2304      	movs	r3, #4
 801a234:	737b      	strb	r3, [r7, #13]
 801a236:	2300      	movs	r3, #0
 801a238:	73bb      	strb	r3, [r7, #14]
 801a23a:	2348      	movs	r3, #72	; 0x48
 801a23c:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801a23e:	4b5b      	ldr	r3, [pc, #364]	; (801a3ac <RegionUS915GetPhyParam+0x294>)
 801a240:	681b      	ldr	r3, [r3, #0]
 801a242:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a246:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 801a248:	4b58      	ldr	r3, [pc, #352]	; (801a3ac <RegionUS915GetPhyParam+0x294>)
 801a24a:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a24c:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801a24e:	f107 030c 	add.w	r3, r7, #12
 801a252:	4618      	mov	r0, r3
 801a254:	f7fe fc59 	bl	8018b0a <RegionCommonGetNextLowerTxDr>
 801a258:	4603      	mov	r3, r0
 801a25a:	61bb      	str	r3, [r7, #24]
            break;
 801a25c:	e09f      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 801a25e:	2300      	movs	r3, #0
 801a260:	61bb      	str	r3, [r7, #24]
            break;
 801a262:	e09c      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 801a264:	2300      	movs	r3, #0
 801a266:	61bb      	str	r3, [r7, #24]
            break;
 801a268:	e099      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801a26a:	2340      	movs	r3, #64	; 0x40
 801a26c:	61bb      	str	r3, [r7, #24]
            break;
 801a26e:	e096      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801a270:	2320      	movs	r3, #32
 801a272:	61bb      	str	r3, [r7, #24]
            break;
 801a274:	e093      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 801a276:	687b      	ldr	r3, [r7, #4]
 801a278:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a27c:	461a      	mov	r2, r3
 801a27e:	4b4c      	ldr	r3, [pc, #304]	; (801a3b0 <RegionUS915GetPhyParam+0x298>)
 801a280:	5c9b      	ldrb	r3, [r3, r2]
 801a282:	61bb      	str	r3, [r7, #24]
            break;
 801a284:	e08b      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a28c:	461a      	mov	r2, r3
 801a28e:	4b49      	ldr	r3, [pc, #292]	; (801a3b4 <RegionUS915GetPhyParam+0x29c>)
 801a290:	5c9b      	ldrb	r3, [r3, r2]
 801a292:	61bb      	str	r3, [r7, #24]
            break;
 801a294:	e083      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 801a296:	2300      	movs	r3, #0
 801a298:	61bb      	str	r3, [r7, #24]
            break;
 801a29a:	e080      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 801a29c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801a2a0:	61bb      	str	r3, [r7, #24]
            break;
 801a2a2:	e07c      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801a2a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a2a8:	61bb      	str	r3, [r7, #24]
            break;
 801a2aa:	e078      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801a2ac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801a2b0:	61bb      	str	r3, [r7, #24]
            break;
 801a2b2:	e074      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801a2b4:	f241 3388 	movw	r3, #5000	; 0x1388
 801a2b8:	61bb      	str	r3, [r7, #24]
            break;
 801a2ba:	e070      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801a2bc:	f241 7370 	movw	r3, #6000	; 0x1770
 801a2c0:	61bb      	str	r3, [r7, #24]
            break;
 801a2c2:	e06c      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 801a2c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801a2c8:	483b      	ldr	r0, [pc, #236]	; (801a3b8 <RegionUS915GetPhyParam+0x2a0>)
 801a2ca:	f001 f8a7 	bl	801b41c <randr>
 801a2ce:	4603      	mov	r3, r0
 801a2d0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801a2d4:	61bb      	str	r3, [r7, #24]
            break;
 801a2d6:	e062      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 801a2d8:	2300      	movs	r3, #0
 801a2da:	61bb      	str	r3, [r7, #24]
            break;
 801a2dc:	e05f      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 801a2de:	4b37      	ldr	r3, [pc, #220]	; (801a3bc <RegionUS915GetPhyParam+0x2a4>)
 801a2e0:	61bb      	str	r3, [r7, #24]
            break;
 801a2e2:	e05c      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 801a2e4:	2308      	movs	r3, #8
 801a2e6:	61bb      	str	r3, [r7, #24]
            break;
 801a2e8:	e059      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801a2ea:	4b30      	ldr	r3, [pc, #192]	; (801a3ac <RegionUS915GetPhyParam+0x294>)
 801a2ec:	681b      	ldr	r3, [r3, #0]
 801a2ee:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801a2f2:	61bb      	str	r3, [r7, #24]
            break;
 801a2f4:	e053      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801a2f6:	4b2d      	ldr	r3, [pc, #180]	; (801a3ac <RegionUS915GetPhyParam+0x294>)
 801a2f8:	681b      	ldr	r3, [r3, #0]
 801a2fa:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801a2fe:	61bb      	str	r3, [r7, #24]
            break;
 801a300:	e04d      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 801a302:	2348      	movs	r3, #72	; 0x48
 801a304:	61bb      	str	r3, [r7, #24]
            break;
 801a306:	e04a      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 801a308:	4b28      	ldr	r3, [pc, #160]	; (801a3ac <RegionUS915GetPhyParam+0x294>)
 801a30a:	681b      	ldr	r3, [r3, #0]
 801a30c:	61bb      	str	r3, [r7, #24]
            break;
 801a30e:	e046      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 801a310:	2300      	movs	r3, #0
 801a312:	61bb      	str	r3, [r7, #24]
            break;
 801a314:	e043      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801a316:	2300      	movs	r3, #0
 801a318:	61bb      	str	r3, [r7, #24]
            break;
 801a31a:	e040      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 801a31c:	4b28      	ldr	r3, [pc, #160]	; (801a3c0 <RegionUS915GetPhyParam+0x2a8>)
 801a31e:	61bb      	str	r3, [r7, #24]
            break;
 801a320:	e03d      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 801a322:	f04f 0300 	mov.w	r3, #0
 801a326:	61bb      	str	r3, [r7, #24]
            break;
 801a328:	e039      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	791b      	ldrb	r3, [r3, #4]
 801a32e:	4a25      	ldr	r2, [pc, #148]	; (801a3c4 <RegionUS915GetPhyParam+0x2ac>)
 801a330:	4922      	ldr	r1, [pc, #136]	; (801a3bc <RegionUS915GetPhyParam+0x2a4>)
 801a332:	4618      	mov	r0, r3
 801a334:	f7fd fd4b 	bl	8017dce <RegionBaseUSCalcDownlinkFrequency>
 801a338:	4603      	mov	r3, r0
 801a33a:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801a33c:	e02f      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 801a33e:	2317      	movs	r3, #23
 801a340:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 801a342:	2304      	movs	r3, #4
 801a344:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 801a346:	2303      	movs	r3, #3
 801a348:	76bb      	strb	r3, [r7, #26]
            break;
 801a34a:	e028      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 801a34c:	2308      	movs	r3, #8
 801a34e:	61bb      	str	r3, [r7, #24]
            break;
 801a350:	e025      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 801a352:	2308      	movs	r3, #8
 801a354:	61bb      	str	r3, [r7, #24]
            break;
 801a356:	e022      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801a358:	687b      	ldr	r3, [r7, #4]
 801a35a:	791b      	ldrb	r3, [r3, #4]
 801a35c:	4a19      	ldr	r2, [pc, #100]	; (801a3c4 <RegionUS915GetPhyParam+0x2ac>)
 801a35e:	4917      	ldr	r1, [pc, #92]	; (801a3bc <RegionUS915GetPhyParam+0x2a4>)
 801a360:	4618      	mov	r0, r3
 801a362:	f7fd fd34 	bl	8017dce <RegionBaseUSCalcDownlinkFrequency>
 801a366:	4603      	mov	r3, r0
 801a368:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801a36a:	e018      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 801a36c:	2308      	movs	r3, #8
 801a36e:	61bb      	str	r3, [r7, #24]
            break;
 801a370:	e015      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 801a372:	2308      	movs	r3, #8
 801a374:	61bb      	str	r3, [r7, #24]
            break;
 801a376:	e012      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a37e:	461a      	mov	r2, r3
 801a380:	4b11      	ldr	r3, [pc, #68]	; (801a3c8 <RegionUS915GetPhyParam+0x2b0>)
 801a382:	5c9b      	ldrb	r3, [r3, r2]
 801a384:	61bb      	str	r3, [r7, #24]
            break;
 801a386:	e00a      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a38e:	490f      	ldr	r1, [pc, #60]	; (801a3cc <RegionUS915GetPhyParam+0x2b4>)
 801a390:	4618      	mov	r0, r3
 801a392:	f7fe fc0d 	bl	8018bb0 <RegionCommonGetBandwidth>
 801a396:	4603      	mov	r3, r0
 801a398:	61bb      	str	r3, [r7, #24]
            break;
 801a39a:	e000      	b.n	801a39e <RegionUS915GetPhyParam+0x286>
        }
        default:
        {
            break;
 801a39c:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 801a39e:	69bb      	ldr	r3, [r7, #24]
 801a3a0:	61fb      	str	r3, [r7, #28]
 801a3a2:	69fb      	ldr	r3, [r7, #28]
}
 801a3a4:	4618      	mov	r0, r3
 801a3a6:	3720      	adds	r7, #32
 801a3a8:	46bd      	mov	sp, r7
 801a3aa:	bd80      	pop	{r7, pc}
 801a3ac:	20001a70 	.word	0x20001a70
 801a3b0:	08020e0c 	.word	0x08020e0c
 801a3b4:	08020e1c 	.word	0x08020e1c
 801a3b8:	fffffc18 	.word	0xfffffc18
 801a3bc:	370870a0 	.word	0x370870a0
 801a3c0:	4200999a 	.word	0x4200999a
 801a3c4:	000927c0 	.word	0x000927c0
 801a3c8:	08020da8 	.word	0x08020da8
 801a3cc:	08020db8 	.word	0x08020db8

0801a3d0 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801a3d0:	b590      	push	{r4, r7, lr}
 801a3d2:	b085      	sub	sp, #20
 801a3d4:	af02      	add	r7, sp, #8
 801a3d6:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801a3d8:	4b11      	ldr	r3, [pc, #68]	; (801a420 <RegionUS915SetBandTxDone+0x50>)
 801a3da:	681a      	ldr	r2, [r3, #0]
 801a3dc:	4b11      	ldr	r3, [pc, #68]	; (801a424 <RegionUS915SetBandTxDone+0x54>)
 801a3de:	6819      	ldr	r1, [r3, #0]
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	781b      	ldrb	r3, [r3, #0]
 801a3e4:	4618      	mov	r0, r3
 801a3e6:	4603      	mov	r3, r0
 801a3e8:	005b      	lsls	r3, r3, #1
 801a3ea:	4403      	add	r3, r0
 801a3ec:	009b      	lsls	r3, r3, #2
 801a3ee:	440b      	add	r3, r1
 801a3f0:	3309      	adds	r3, #9
 801a3f2:	781b      	ldrb	r3, [r3, #0]
 801a3f4:	4619      	mov	r1, r3
 801a3f6:	460b      	mov	r3, r1
 801a3f8:	005b      	lsls	r3, r3, #1
 801a3fa:	440b      	add	r3, r1
 801a3fc:	00db      	lsls	r3, r3, #3
 801a3fe:	18d0      	adds	r0, r2, r3
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	6899      	ldr	r1, [r3, #8]
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	785c      	ldrb	r4, [r3, #1]
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	691a      	ldr	r2, [r3, #16]
 801a40c:	9200      	str	r2, [sp, #0]
 801a40e:	68db      	ldr	r3, [r3, #12]
 801a410:	4622      	mov	r2, r4
 801a412:	f7fd ff53 	bl	80182bc <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 801a416:	bf00      	nop
 801a418:	370c      	adds	r7, #12
 801a41a:	46bd      	mov	sp, r7
 801a41c:	bd90      	pop	{r4, r7, pc}
 801a41e:	bf00      	nop
 801a420:	20001a74 	.word	0x20001a74
 801a424:	20001a70 	.word	0x20001a70

0801a428 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 801a428:	b580      	push	{r7, lr}
 801a42a:	b08a      	sub	sp, #40	; 0x28
 801a42c:	af00      	add	r7, sp, #0
 801a42e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 801a430:	2301      	movs	r3, #1
 801a432:	81bb      	strh	r3, [r7, #12]
 801a434:	2300      	movs	r3, #0
 801a436:	73bb      	strb	r3, [r7, #14]
 801a438:	2300      	movs	r3, #0
 801a43a:	613b      	str	r3, [r7, #16]
 801a43c:	2300      	movs	r3, #0
 801a43e:	617b      	str	r3, [r7, #20]
 801a440:	2300      	movs	r3, #0
 801a442:	61bb      	str	r3, [r7, #24]
 801a444:	2300      	movs	r3, #0
 801a446:	61fb      	str	r3, [r7, #28]
 801a448:	2300      	movs	r3, #0
 801a44a:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	7b1b      	ldrb	r3, [r3, #12]
 801a452:	2b00      	cmp	r3, #0
 801a454:	d007      	beq.n	801a466 <RegionUS915InitDefaults+0x3e>
 801a456:	2b00      	cmp	r3, #0
 801a458:	f2c0 8104 	blt.w	801a664 <RegionUS915InitDefaults+0x23c>
 801a45c:	3b01      	subs	r3, #1
 801a45e:	2b01      	cmp	r3, #1
 801a460:	f200 8100 	bhi.w	801a664 <RegionUS915InitDefaults+0x23c>
 801a464:	e0ce      	b.n	801a604 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	681b      	ldr	r3, [r3, #0]
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	f000 80fc 	beq.w	801a668 <RegionUS915InitDefaults+0x240>
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	685b      	ldr	r3, [r3, #4]
 801a474:	2b00      	cmp	r3, #0
 801a476:	f000 80f7 	beq.w	801a668 <RegionUS915InitDefaults+0x240>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	681b      	ldr	r3, [r3, #0]
 801a47e:	4a7c      	ldr	r2, [pc, #496]	; (801a670 <RegionUS915InitDefaults+0x248>)
 801a480:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	685b      	ldr	r3, [r3, #4]
 801a486:	4a7b      	ldr	r2, [pc, #492]	; (801a674 <RegionUS915InitDefaults+0x24c>)
 801a488:	6013      	str	r3, [r2, #0]
            RegionNvmGroup1->JoinTrialsCounter = 0;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	689b      	ldr	r3, [r3, #8]
 801a48e:	4a7a      	ldr	r2, [pc, #488]	; (801a678 <RegionUS915InitDefaults+0x250>)
 801a490:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801a492:	4b77      	ldr	r3, [pc, #476]	; (801a670 <RegionUS915InitDefaults+0x248>)
 801a494:	681b      	ldr	r3, [r3, #0]
 801a496:	2200      	movs	r2, #0
 801a498:	731a      	strb	r2, [r3, #12]

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 801a49a:	4b75      	ldr	r3, [pc, #468]	; (801a670 <RegionUS915InitDefaults+0x248>)
 801a49c:	681b      	ldr	r3, [r3, #0]
 801a49e:	2200      	movs	r2, #0
 801a4a0:	735a      	strb	r2, [r3, #13]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 801a4a2:	4b75      	ldr	r3, [pc, #468]	; (801a678 <RegionUS915InitDefaults+0x250>)
 801a4a4:	681b      	ldr	r3, [r3, #0]
 801a4a6:	f107 010c 	add.w	r1, r7, #12
 801a4aa:	2218      	movs	r2, #24
 801a4ac:	4618      	mov	r0, r3
 801a4ae:	f000 ffcc 	bl	801b44a <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801a4b2:	2300      	movs	r3, #0
 801a4b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a4b8:	e02e      	b.n	801a518 <RegionUS915InitDefaults+0xf0>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 801a4ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a4be:	4a6f      	ldr	r2, [pc, #444]	; (801a67c <RegionUS915InitDefaults+0x254>)
 801a4c0:	fb03 f202 	mul.w	r2, r3, r2
 801a4c4:	4b6e      	ldr	r3, [pc, #440]	; (801a680 <RegionUS915InitDefaults+0x258>)
 801a4c6:	4413      	add	r3, r2
 801a4c8:	4a6a      	ldr	r2, [pc, #424]	; (801a674 <RegionUS915InitDefaults+0x24c>)
 801a4ca:	6811      	ldr	r1, [r2, #0]
 801a4cc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a4d0:	4618      	mov	r0, r3
 801a4d2:	4613      	mov	r3, r2
 801a4d4:	005b      	lsls	r3, r3, #1
 801a4d6:	4413      	add	r3, r2
 801a4d8:	009b      	lsls	r3, r3, #2
 801a4da:	440b      	add	r3, r1
 801a4dc:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 801a4de:	4b65      	ldr	r3, [pc, #404]	; (801a674 <RegionUS915InitDefaults+0x24c>)
 801a4e0:	6819      	ldr	r1, [r3, #0]
 801a4e2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a4e6:	4613      	mov	r3, r2
 801a4e8:	005b      	lsls	r3, r3, #1
 801a4ea:	4413      	add	r3, r2
 801a4ec:	009b      	lsls	r3, r3, #2
 801a4ee:	440b      	add	r3, r1
 801a4f0:	3308      	adds	r3, #8
 801a4f2:	2230      	movs	r2, #48	; 0x30
 801a4f4:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801a4f6:	4b5f      	ldr	r3, [pc, #380]	; (801a674 <RegionUS915InitDefaults+0x24c>)
 801a4f8:	6819      	ldr	r1, [r3, #0]
 801a4fa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a4fe:	4613      	mov	r3, r2
 801a500:	005b      	lsls	r3, r3, #1
 801a502:	4413      	add	r3, r2
 801a504:	009b      	lsls	r3, r3, #2
 801a506:	440b      	add	r3, r1
 801a508:	3309      	adds	r3, #9
 801a50a:	2200      	movs	r2, #0
 801a50c:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801a50e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a512:	3301      	adds	r3, #1
 801a514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a51c:	2b3f      	cmp	r3, #63	; 0x3f
 801a51e:	d9cc      	bls.n	801a4ba <RegionUS915InitDefaults+0x92>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801a520:	2340      	movs	r3, #64	; 0x40
 801a522:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a526:	e02f      	b.n	801a588 <RegionUS915InitDefaults+0x160>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 801a528:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a52c:	3b40      	subs	r3, #64	; 0x40
 801a52e:	4a55      	ldr	r2, [pc, #340]	; (801a684 <RegionUS915InitDefaults+0x25c>)
 801a530:	fb03 f202 	mul.w	r2, r3, r2
 801a534:	4b54      	ldr	r3, [pc, #336]	; (801a688 <RegionUS915InitDefaults+0x260>)
 801a536:	4413      	add	r3, r2
 801a538:	4a4e      	ldr	r2, [pc, #312]	; (801a674 <RegionUS915InitDefaults+0x24c>)
 801a53a:	6811      	ldr	r1, [r2, #0]
 801a53c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a540:	4618      	mov	r0, r3
 801a542:	4613      	mov	r3, r2
 801a544:	005b      	lsls	r3, r3, #1
 801a546:	4413      	add	r3, r2
 801a548:	009b      	lsls	r3, r3, #2
 801a54a:	440b      	add	r3, r1
 801a54c:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 801a54e:	4b49      	ldr	r3, [pc, #292]	; (801a674 <RegionUS915InitDefaults+0x24c>)
 801a550:	6819      	ldr	r1, [r3, #0]
 801a552:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a556:	4613      	mov	r3, r2
 801a558:	005b      	lsls	r3, r3, #1
 801a55a:	4413      	add	r3, r2
 801a55c:	009b      	lsls	r3, r3, #2
 801a55e:	440b      	add	r3, r1
 801a560:	3308      	adds	r3, #8
 801a562:	2244      	movs	r2, #68	; 0x44
 801a564:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801a566:	4b43      	ldr	r3, [pc, #268]	; (801a674 <RegionUS915InitDefaults+0x24c>)
 801a568:	6819      	ldr	r1, [r3, #0]
 801a56a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a56e:	4613      	mov	r3, r2
 801a570:	005b      	lsls	r3, r3, #1
 801a572:	4413      	add	r3, r2
 801a574:	009b      	lsls	r3, r3, #2
 801a576:	440b      	add	r3, r1
 801a578:	3309      	adds	r3, #9
 801a57a:	2200      	movs	r2, #0
 801a57c:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801a57e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a582:	3301      	adds	r3, #1
 801a584:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a588:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a58c:	2b47      	cmp	r3, #71	; 0x47
 801a58e:	d9cb      	bls.n	801a528 <RegionUS915InitDefaults+0x100>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 801a590:	4b38      	ldr	r3, [pc, #224]	; (801a674 <RegionUS915InitDefaults+0x24c>)
 801a592:	681b      	ldr	r3, [r3, #0]
 801a594:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a598:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 801a59c:	4b35      	ldr	r3, [pc, #212]	; (801a674 <RegionUS915InitDefaults+0x24c>)
 801a59e:	681b      	ldr	r3, [r3, #0]
 801a5a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a5a4:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 801a5a8:	4b32      	ldr	r3, [pc, #200]	; (801a674 <RegionUS915InitDefaults+0x24c>)
 801a5aa:	681b      	ldr	r3, [r3, #0]
 801a5ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a5b0:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 801a5b4:	4b2f      	ldr	r3, [pc, #188]	; (801a674 <RegionUS915InitDefaults+0x24c>)
 801a5b6:	681b      	ldr	r3, [r3, #0]
 801a5b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a5bc:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 801a5c0:	4b2c      	ldr	r3, [pc, #176]	; (801a674 <RegionUS915InitDefaults+0x24c>)
 801a5c2:	681b      	ldr	r3, [r3, #0]
 801a5c4:	22ff      	movs	r2, #255	; 0xff
 801a5c6:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801a5ca:	4b2a      	ldr	r3, [pc, #168]	; (801a674 <RegionUS915InitDefaults+0x24c>)
 801a5cc:	681b      	ldr	r3, [r3, #0]
 801a5ce:	2200      	movs	r2, #0
 801a5d0:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801a5d4:	4b27      	ldr	r3, [pc, #156]	; (801a674 <RegionUS915InitDefaults+0x24c>)
 801a5d6:	681b      	ldr	r3, [r3, #0]
 801a5d8:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801a5dc:	4b25      	ldr	r3, [pc, #148]	; (801a674 <RegionUS915InitDefaults+0x24c>)
 801a5de:	681b      	ldr	r3, [r3, #0]
 801a5e0:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801a5e4:	2206      	movs	r2, #6
 801a5e6:	4619      	mov	r1, r3
 801a5e8:	f7fd fe42 	bl	8018270 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801a5ec:	4b20      	ldr	r3, [pc, #128]	; (801a670 <RegionUS915InitDefaults+0x248>)
 801a5ee:	681b      	ldr	r3, [r3, #0]
 801a5f0:	4618      	mov	r0, r3
 801a5f2:	4b20      	ldr	r3, [pc, #128]	; (801a674 <RegionUS915InitDefaults+0x24c>)
 801a5f4:	681b      	ldr	r3, [r3, #0]
 801a5f6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801a5fa:	2206      	movs	r2, #6
 801a5fc:	4619      	mov	r1, r3
 801a5fe:	f7fd fe37 	bl	8018270 <RegionCommonChanMaskCopy>
            break;
 801a602:	e032      	b.n	801a66a <RegionUS915InitDefaults+0x242>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801a604:	4b1b      	ldr	r3, [pc, #108]	; (801a674 <RegionUS915InitDefaults+0x24c>)
 801a606:	681b      	ldr	r3, [r3, #0]
 801a608:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801a60c:	4b19      	ldr	r3, [pc, #100]	; (801a674 <RegionUS915InitDefaults+0x24c>)
 801a60e:	681b      	ldr	r3, [r3, #0]
 801a610:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801a614:	2206      	movs	r2, #6
 801a616:	4619      	mov	r1, r3
 801a618:	f7fd fe2a 	bl	8018270 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 801a61c:	2300      	movs	r3, #0
 801a61e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801a622:	e01a      	b.n	801a65a <RegionUS915InitDefaults+0x232>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801a624:	4b12      	ldr	r3, [pc, #72]	; (801a670 <RegionUS915InitDefaults+0x248>)
 801a626:	681b      	ldr	r3, [r3, #0]
 801a628:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801a62c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801a630:	4b10      	ldr	r3, [pc, #64]	; (801a674 <RegionUS915InitDefaults+0x24c>)
 801a632:	681b      	ldr	r3, [r3, #0]
 801a634:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801a638:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a63c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801a640:	4b0b      	ldr	r3, [pc, #44]	; (801a670 <RegionUS915InitDefaults+0x248>)
 801a642:	681b      	ldr	r3, [r3, #0]
 801a644:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801a648:	4001      	ands	r1, r0
 801a64a:	b289      	uxth	r1, r1
 801a64c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 801a650:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a654:	3301      	adds	r3, #1
 801a656:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801a65a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a65e:	2b05      	cmp	r3, #5
 801a660:	d9e0      	bls.n	801a624 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 801a662:	e002      	b.n	801a66a <RegionUS915InitDefaults+0x242>
        }
        default:
        {
            break;
 801a664:	bf00      	nop
 801a666:	e000      	b.n	801a66a <RegionUS915InitDefaults+0x242>
                return;
 801a668:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 801a66a:	3728      	adds	r7, #40	; 0x28
 801a66c:	46bd      	mov	sp, r7
 801a66e:	bd80      	pop	{r7, pc}
 801a670:	20001a6c 	.word	0x20001a6c
 801a674:	20001a70 	.word	0x20001a70
 801a678:	20001a74 	.word	0x20001a74
 801a67c:	00030d40 	.word	0x00030d40
 801a680:	35c80160 	.word	0x35c80160
 801a684:	00186a00 	.word	0x00186a00
 801a688:	35d2afc0 	.word	0x35d2afc0

0801a68c <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801a68c:	b580      	push	{r7, lr}
 801a68e:	b082      	sub	sp, #8
 801a690:	af00      	add	r7, sp, #0
 801a692:	6078      	str	r0, [r7, #4]
 801a694:	460b      	mov	r3, r1
 801a696:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 801a698:	78fb      	ldrb	r3, [r7, #3]
 801a69a:	2b0f      	cmp	r3, #15
 801a69c:	d867      	bhi.n	801a76e <RegionUS915Verify+0xe2>
 801a69e:	a201      	add	r2, pc, #4	; (adr r2, 801a6a4 <RegionUS915Verify+0x18>)
 801a6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a6a4:	0801a6e5 	.word	0x0801a6e5
 801a6a8:	0801a76f 	.word	0x0801a76f
 801a6ac:	0801a76f 	.word	0x0801a76f
 801a6b0:	0801a76f 	.word	0x0801a76f
 801a6b4:	0801a76f 	.word	0x0801a76f
 801a6b8:	0801a6f3 	.word	0x0801a6f3
 801a6bc:	0801a711 	.word	0x0801a711
 801a6c0:	0801a72f 	.word	0x0801a72f
 801a6c4:	0801a76f 	.word	0x0801a76f
 801a6c8:	0801a74d 	.word	0x0801a74d
 801a6cc:	0801a74d 	.word	0x0801a74d
 801a6d0:	0801a76f 	.word	0x0801a76f
 801a6d4:	0801a76f 	.word	0x0801a76f
 801a6d8:	0801a76f 	.word	0x0801a76f
 801a6dc:	0801a76f 	.word	0x0801a76f
 801a6e0:	0801a76b 	.word	0x0801a76b
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	681b      	ldr	r3, [r3, #0]
 801a6e8:	4618      	mov	r0, r3
 801a6ea:	f7ff fca1 	bl	801a030 <VerifyRfFreq>
 801a6ee:	4603      	mov	r3, r0
 801a6f0:	e03e      	b.n	801a770 <RegionUS915Verify+0xe4>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	f993 3000 	ldrsb.w	r3, [r3]
 801a6f8:	2204      	movs	r2, #4
 801a6fa:	2100      	movs	r1, #0
 801a6fc:	4618      	mov	r0, r3
 801a6fe:	f7fd fd3a 	bl	8018176 <RegionCommonValueInRange>
 801a702:	4603      	mov	r3, r0
 801a704:	2b00      	cmp	r3, #0
 801a706:	bf14      	ite	ne
 801a708:	2301      	movne	r3, #1
 801a70a:	2300      	moveq	r3, #0
 801a70c:	b2db      	uxtb	r3, r3
 801a70e:	e02f      	b.n	801a770 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801a710:	687b      	ldr	r3, [r7, #4]
 801a712:	f993 3000 	ldrsb.w	r3, [r3]
 801a716:	2205      	movs	r2, #5
 801a718:	2100      	movs	r1, #0
 801a71a:	4618      	mov	r0, r3
 801a71c:	f7fd fd2b 	bl	8018176 <RegionCommonValueInRange>
 801a720:	4603      	mov	r3, r0
 801a722:	2b00      	cmp	r3, #0
 801a724:	bf14      	ite	ne
 801a726:	2301      	movne	r3, #1
 801a728:	2300      	moveq	r3, #0
 801a72a:	b2db      	uxtb	r3, r3
 801a72c:	e020      	b.n	801a770 <RegionUS915Verify+0xe4>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 801a72e:	687b      	ldr	r3, [r7, #4]
 801a730:	f993 3000 	ldrsb.w	r3, [r3]
 801a734:	220d      	movs	r2, #13
 801a736:	2108      	movs	r1, #8
 801a738:	4618      	mov	r0, r3
 801a73a:	f7fd fd1c 	bl	8018176 <RegionCommonValueInRange>
 801a73e:	4603      	mov	r3, r0
 801a740:	2b00      	cmp	r3, #0
 801a742:	bf14      	ite	ne
 801a744:	2301      	movne	r3, #1
 801a746:	2300      	moveq	r3, #0
 801a748:	b2db      	uxtb	r3, r3
 801a74a:	e011      	b.n	801a770 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 801a74c:	687b      	ldr	r3, [r7, #4]
 801a74e:	f993 3000 	ldrsb.w	r3, [r3]
 801a752:	220e      	movs	r2, #14
 801a754:	2100      	movs	r1, #0
 801a756:	4618      	mov	r0, r3
 801a758:	f7fd fd0d 	bl	8018176 <RegionCommonValueInRange>
 801a75c:	4603      	mov	r3, r0
 801a75e:	2b00      	cmp	r3, #0
 801a760:	bf14      	ite	ne
 801a762:	2301      	movne	r3, #1
 801a764:	2300      	moveq	r3, #0
 801a766:	b2db      	uxtb	r3, r3
 801a768:	e002      	b.n	801a770 <RegionUS915Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 801a76a:	2300      	movs	r3, #0
 801a76c:	e000      	b.n	801a770 <RegionUS915Verify+0xe4>
        }
        default:
            return false;
 801a76e:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 801a770:	4618      	mov	r0, r3
 801a772:	3708      	adds	r7, #8
 801a774:	46bd      	mov	sp, r7
 801a776:	bd80      	pop	{r7, pc}

0801a778 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801a778:	b480      	push	{r7}
 801a77a:	b085      	sub	sp, #20
 801a77c:	af00      	add	r7, sp, #0
 801a77e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	7a1b      	ldrb	r3, [r3, #8]
 801a784:	2b10      	cmp	r3, #16
 801a786:	d160      	bne.n	801a84a <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	685b      	ldr	r3, [r3, #4]
 801a78c:	330f      	adds	r3, #15
 801a78e:	781b      	ldrb	r3, [r3, #0]
 801a790:	2b01      	cmp	r3, #1
 801a792:	d15c      	bne.n	801a84e <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801a794:	2300      	movs	r3, #0
 801a796:	73fb      	strb	r3, [r7, #15]
 801a798:	2300      	movs	r3, #0
 801a79a:	73bb      	strb	r3, [r7, #14]
 801a79c:	e051      	b.n	801a842 <RegionUS915ApplyCFList+0xca>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	685a      	ldr	r2, [r3, #4]
 801a7a2:	7bbb      	ldrb	r3, [r7, #14]
 801a7a4:	4413      	add	r3, r2
 801a7a6:	7819      	ldrb	r1, [r3, #0]
 801a7a8:	4b2b      	ldr	r3, [pc, #172]	; (801a858 <RegionUS915ApplyCFList+0xe0>)
 801a7aa:	681b      	ldr	r3, [r3, #0]
 801a7ac:	7bfa      	ldrb	r2, [r7, #15]
 801a7ae:	b289      	uxth	r1, r1
 801a7b0:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a7b4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 801a7b8:	4b27      	ldr	r3, [pc, #156]	; (801a858 <RegionUS915ApplyCFList+0xe0>)
 801a7ba:	681b      	ldr	r3, [r3, #0]
 801a7bc:	7bfa      	ldrb	r2, [r7, #15]
 801a7be:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a7c2:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801a7c6:	687b      	ldr	r3, [r7, #4]
 801a7c8:	685a      	ldr	r2, [r3, #4]
 801a7ca:	7bbb      	ldrb	r3, [r7, #14]
 801a7cc:	3301      	adds	r3, #1
 801a7ce:	4413      	add	r3, r2
 801a7d0:	781b      	ldrb	r3, [r3, #0]
 801a7d2:	b29b      	uxth	r3, r3
 801a7d4:	021b      	lsls	r3, r3, #8
 801a7d6:	b299      	uxth	r1, r3
 801a7d8:	4b1f      	ldr	r3, [pc, #124]	; (801a858 <RegionUS915ApplyCFList+0xe0>)
 801a7da:	681b      	ldr	r3, [r3, #0]
 801a7dc:	7bfa      	ldrb	r2, [r7, #15]
 801a7de:	4301      	orrs	r1, r0
 801a7e0:	b289      	uxth	r1, r1
 801a7e2:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a7e6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 801a7ea:	7bfb      	ldrb	r3, [r7, #15]
 801a7ec:	2b04      	cmp	r3, #4
 801a7ee:	d10f      	bne.n	801a810 <RegionUS915ApplyCFList+0x98>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 801a7f0:	4b19      	ldr	r3, [pc, #100]	; (801a858 <RegionUS915ApplyCFList+0xe0>)
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	7bfa      	ldrb	r2, [r7, #15]
 801a7f6:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a7fa:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801a7fe:	4b16      	ldr	r3, [pc, #88]	; (801a858 <RegionUS915ApplyCFList+0xe0>)
 801a800:	681b      	ldr	r3, [r3, #0]
 801a802:	7bfa      	ldrb	r2, [r7, #15]
 801a804:	b2c9      	uxtb	r1, r1
 801a806:	b289      	uxth	r1, r1
 801a808:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a80c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 801a810:	4b12      	ldr	r3, [pc, #72]	; (801a85c <RegionUS915ApplyCFList+0xe4>)
 801a812:	681b      	ldr	r3, [r3, #0]
 801a814:	7bfa      	ldrb	r2, [r7, #15]
 801a816:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801a81a:	4b0f      	ldr	r3, [pc, #60]	; (801a858 <RegionUS915ApplyCFList+0xe0>)
 801a81c:	681b      	ldr	r3, [r3, #0]
 801a81e:	7bfa      	ldrb	r2, [r7, #15]
 801a820:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a824:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801a828:	4b0c      	ldr	r3, [pc, #48]	; (801a85c <RegionUS915ApplyCFList+0xe4>)
 801a82a:	681b      	ldr	r3, [r3, #0]
 801a82c:	7bfa      	ldrb	r2, [r7, #15]
 801a82e:	4001      	ands	r1, r0
 801a830:	b289      	uxth	r1, r1
 801a832:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801a836:	7bfb      	ldrb	r3, [r7, #15]
 801a838:	3301      	adds	r3, #1
 801a83a:	73fb      	strb	r3, [r7, #15]
 801a83c:	7bbb      	ldrb	r3, [r7, #14]
 801a83e:	3302      	adds	r3, #2
 801a840:	73bb      	strb	r3, [r7, #14]
 801a842:	7bfb      	ldrb	r3, [r7, #15]
 801a844:	2b04      	cmp	r3, #4
 801a846:	d9aa      	bls.n	801a79e <RegionUS915ApplyCFList+0x26>
 801a848:	e002      	b.n	801a850 <RegionUS915ApplyCFList+0xd8>
        return;
 801a84a:	bf00      	nop
 801a84c:	e000      	b.n	801a850 <RegionUS915ApplyCFList+0xd8>
        return;
 801a84e:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 801a850:	3714      	adds	r7, #20
 801a852:	46bd      	mov	sp, r7
 801a854:	bc80      	pop	{r7}
 801a856:	4770      	bx	lr
 801a858:	20001a70 	.word	0x20001a70
 801a85c:	20001a6c 	.word	0x20001a6c

0801a860 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801a860:	b580      	push	{r7, lr}
 801a862:	b084      	sub	sp, #16
 801a864:	af00      	add	r7, sp, #0
 801a866:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	681b      	ldr	r3, [r3, #0]
 801a86c:	2204      	movs	r2, #4
 801a86e:	2100      	movs	r1, #0
 801a870:	4618      	mov	r0, r3
 801a872:	f7fd fcd1 	bl	8018218 <RegionCommonCountChannels>
 801a876:	4603      	mov	r3, r0
 801a878:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 801a87a:	7bbb      	ldrb	r3, [r7, #14]
 801a87c:	2b01      	cmp	r3, #1
 801a87e:	d804      	bhi.n	801a88a <RegionUS915ChanMaskSet+0x2a>
 801a880:	7bbb      	ldrb	r3, [r7, #14]
 801a882:	2b00      	cmp	r3, #0
 801a884:	d001      	beq.n	801a88a <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 801a886:	2300      	movs	r3, #0
 801a888:	e04a      	b.n	801a920 <RegionUS915ChanMaskSet+0xc0>
    }

    switch( chanMaskSet->ChannelsMaskType )
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	791b      	ldrb	r3, [r3, #4]
 801a88e:	2b00      	cmp	r3, #0
 801a890:	d002      	beq.n	801a898 <RegionUS915ChanMaskSet+0x38>
 801a892:	2b01      	cmp	r3, #1
 801a894:	d036      	beq.n	801a904 <RegionUS915ChanMaskSet+0xa4>
 801a896:	e040      	b.n	801a91a <RegionUS915ChanMaskSet+0xba>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801a898:	4b23      	ldr	r3, [pc, #140]	; (801a928 <RegionUS915ChanMaskSet+0xc8>)
 801a89a:	681b      	ldr	r3, [r3, #0]
 801a89c:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	681b      	ldr	r3, [r3, #0]
 801a8a4:	2206      	movs	r2, #6
 801a8a6:	4619      	mov	r1, r3
 801a8a8:	f7fd fce2 	bl	8018270 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 801a8ac:	4b1e      	ldr	r3, [pc, #120]	; (801a928 <RegionUS915ChanMaskSet+0xc8>)
 801a8ae:	681b      	ldr	r3, [r3, #0]
 801a8b0:	f8b3 2374 	ldrh.w	r2, [r3, #884]	; 0x374
 801a8b4:	4b1c      	ldr	r3, [pc, #112]	; (801a928 <RegionUS915ChanMaskSet+0xc8>)
 801a8b6:	681b      	ldr	r3, [r3, #0]
 801a8b8:	b2d2      	uxtb	r2, r2
 801a8ba:	b292      	uxth	r2, r2
 801a8bc:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801a8c0:	4b19      	ldr	r3, [pc, #100]	; (801a928 <RegionUS915ChanMaskSet+0xc8>)
 801a8c2:	681b      	ldr	r3, [r3, #0]
 801a8c4:	2200      	movs	r2, #0
 801a8c6:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801a8ca:	2300      	movs	r3, #0
 801a8cc:	73fb      	strb	r3, [r7, #15]
 801a8ce:	e015      	b.n	801a8fc <RegionUS915ChanMaskSet+0x9c>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801a8d0:	4b16      	ldr	r3, [pc, #88]	; (801a92c <RegionUS915ChanMaskSet+0xcc>)
 801a8d2:	681b      	ldr	r3, [r3, #0]
 801a8d4:	7bfa      	ldrb	r2, [r7, #15]
 801a8d6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801a8da:	4b13      	ldr	r3, [pc, #76]	; (801a928 <RegionUS915ChanMaskSet+0xc8>)
 801a8dc:	681b      	ldr	r3, [r3, #0]
 801a8de:	7bfa      	ldrb	r2, [r7, #15]
 801a8e0:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a8e4:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801a8e8:	4b10      	ldr	r3, [pc, #64]	; (801a92c <RegionUS915ChanMaskSet+0xcc>)
 801a8ea:	681b      	ldr	r3, [r3, #0]
 801a8ec:	7bfa      	ldrb	r2, [r7, #15]
 801a8ee:	4001      	ands	r1, r0
 801a8f0:	b289      	uxth	r1, r1
 801a8f2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801a8f6:	7bfb      	ldrb	r3, [r7, #15]
 801a8f8:	3301      	adds	r3, #1
 801a8fa:	73fb      	strb	r3, [r7, #15]
 801a8fc:	7bfb      	ldrb	r3, [r7, #15]
 801a8fe:	2b05      	cmp	r3, #5
 801a900:	d9e6      	bls.n	801a8d0 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 801a902:	e00c      	b.n	801a91e <RegionUS915ChanMaskSet+0xbe>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801a904:	4b08      	ldr	r3, [pc, #32]	; (801a928 <RegionUS915ChanMaskSet+0xc8>)
 801a906:	681b      	ldr	r3, [r3, #0]
 801a908:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	681b      	ldr	r3, [r3, #0]
 801a910:	2206      	movs	r2, #6
 801a912:	4619      	mov	r1, r3
 801a914:	f7fd fcac 	bl	8018270 <RegionCommonChanMaskCopy>
            break;
 801a918:	e001      	b.n	801a91e <RegionUS915ChanMaskSet+0xbe>
        }
        default:
            return false;
 801a91a:	2300      	movs	r3, #0
 801a91c:	e000      	b.n	801a920 <RegionUS915ChanMaskSet+0xc0>
    }
    return true;
 801a91e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801a920:	4618      	mov	r0, r3
 801a922:	3710      	adds	r7, #16
 801a924:	46bd      	mov	sp, r7
 801a926:	bd80      	pop	{r7, pc}
 801a928:	20001a70 	.word	0x20001a70
 801a92c:	20001a6c 	.word	0x20001a6c

0801a930 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801a930:	b580      	push	{r7, lr}
 801a932:	b088      	sub	sp, #32
 801a934:	af02      	add	r7, sp, #8
 801a936:	60ba      	str	r2, [r7, #8]
 801a938:	607b      	str	r3, [r7, #4]
 801a93a:	4603      	mov	r3, r0
 801a93c:	73fb      	strb	r3, [r7, #15]
 801a93e:	460b      	mov	r3, r1
 801a940:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 801a942:	2300      	movs	r3, #0
 801a944:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 801a946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a94a:	2b0d      	cmp	r3, #13
 801a94c:	bfa8      	it	ge
 801a94e:	230d      	movge	r3, #13
 801a950:	b25a      	sxtb	r2, r3
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a95c:	4916      	ldr	r1, [pc, #88]	; (801a9b8 <RegionUS915ComputeRxWindowParameters+0x88>)
 801a95e:	4618      	mov	r0, r3
 801a960:	f7fe f926 	bl	8018bb0 <RegionCommonGetBandwidth>
 801a964:	4603      	mov	r3, r0
 801a966:	b2da      	uxtb	r2, r3
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a972:	461a      	mov	r2, r3
 801a974:	4b11      	ldr	r3, [pc, #68]	; (801a9bc <RegionUS915ComputeRxWindowParameters+0x8c>)
 801a976:	5c9a      	ldrb	r2, [r3, r2]
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a97e:	4619      	mov	r1, r3
 801a980:	4b0d      	ldr	r3, [pc, #52]	; (801a9b8 <RegionUS915ComputeRxWindowParameters+0x88>)
 801a982:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a986:	4619      	mov	r1, r3
 801a988:	4610      	mov	r0, r2
 801a98a:	f7fd fe8f 	bl	80186ac <RegionCommonComputeSymbolTimeLoRa>
 801a98e:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801a990:	4b0b      	ldr	r3, [pc, #44]	; (801a9c0 <RegionUS915ComputeRxWindowParameters+0x90>)
 801a992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a994:	4798      	blx	r3
 801a996:	687b      	ldr	r3, [r7, #4]
 801a998:	3308      	adds	r3, #8
 801a99a:	687a      	ldr	r2, [r7, #4]
 801a99c:	320c      	adds	r2, #12
 801a99e:	7bb9      	ldrb	r1, [r7, #14]
 801a9a0:	9201      	str	r2, [sp, #4]
 801a9a2:	9300      	str	r3, [sp, #0]
 801a9a4:	4603      	mov	r3, r0
 801a9a6:	68ba      	ldr	r2, [r7, #8]
 801a9a8:	6978      	ldr	r0, [r7, #20]
 801a9aa:	f7fd fea5 	bl	80186f8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 801a9ae:	bf00      	nop
 801a9b0:	3718      	adds	r7, #24
 801a9b2:	46bd      	mov	sp, r7
 801a9b4:	bd80      	pop	{r7, pc}
 801a9b6:	bf00      	nop
 801a9b8:	08020db8 	.word	0x08020db8
 801a9bc:	08020da8 	.word	0x08020da8
 801a9c0:	08020e2c 	.word	0x08020e2c

0801a9c4 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801a9c4:	b590      	push	{r4, r7, lr}
 801a9c6:	b091      	sub	sp, #68	; 0x44
 801a9c8:	af0a      	add	r7, sp, #40	; 0x28
 801a9ca:	6078      	str	r0, [r7, #4]
 801a9cc:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	785b      	ldrb	r3, [r3, #1]
 801a9d2:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801a9d4:	2300      	movs	r3, #0
 801a9d6:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 801a9d8:	2300      	movs	r3, #0
 801a9da:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	685b      	ldr	r3, [r3, #4]
 801a9e0:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801a9e2:	4b34      	ldr	r3, [pc, #208]	; (801aab4 <RegionUS915RxConfig+0xf0>)
 801a9e4:	685b      	ldr	r3, [r3, #4]
 801a9e6:	4798      	blx	r3
 801a9e8:	4603      	mov	r3, r0
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d001      	beq.n	801a9f2 <RegionUS915RxConfig+0x2e>
    {
        return false;
 801a9ee:	2300      	movs	r3, #0
 801a9f0:	e05c      	b.n	801aaac <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	7cdb      	ldrb	r3, [r3, #19]
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	d109      	bne.n	801aa0e <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	781b      	ldrb	r3, [r3, #0]
 801a9fe:	f003 0307 	and.w	r3, r3, #7
 801aa02:	4a2d      	ldr	r2, [pc, #180]	; (801aab8 <RegionUS915RxConfig+0xf4>)
 801aa04:	fb03 f202 	mul.w	r2, r3, r2
 801aa08:	4b2c      	ldr	r3, [pc, #176]	; (801aabc <RegionUS915RxConfig+0xf8>)
 801aa0a:	4413      	add	r3, r2
 801aa0c:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 801aa0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aa12:	4a2b      	ldr	r2, [pc, #172]	; (801aac0 <RegionUS915RxConfig+0xfc>)
 801aa14:	5cd3      	ldrb	r3, [r2, r3]
 801aa16:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801aa18:	4b26      	ldr	r3, [pc, #152]	; (801aab4 <RegionUS915RxConfig+0xf0>)
 801aa1a:	68db      	ldr	r3, [r3, #12]
 801aa1c:	6938      	ldr	r0, [r7, #16]
 801aa1e:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801aa20:	4b24      	ldr	r3, [pc, #144]	; (801aab4 <RegionUS915RxConfig+0xf0>)
 801aa22:	699c      	ldr	r4, [r3, #24]
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	789b      	ldrb	r3, [r3, #2]
 801aa28:	4618      	mov	r0, r3
 801aa2a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	689b      	ldr	r3, [r3, #8]
 801aa32:	b29b      	uxth	r3, r3
 801aa34:	687a      	ldr	r2, [r7, #4]
 801aa36:	7c92      	ldrb	r2, [r2, #18]
 801aa38:	9209      	str	r2, [sp, #36]	; 0x24
 801aa3a:	2201      	movs	r2, #1
 801aa3c:	9208      	str	r2, [sp, #32]
 801aa3e:	2200      	movs	r2, #0
 801aa40:	9207      	str	r2, [sp, #28]
 801aa42:	2200      	movs	r2, #0
 801aa44:	9206      	str	r2, [sp, #24]
 801aa46:	2200      	movs	r2, #0
 801aa48:	9205      	str	r2, [sp, #20]
 801aa4a:	2200      	movs	r2, #0
 801aa4c:	9204      	str	r2, [sp, #16]
 801aa4e:	2200      	movs	r2, #0
 801aa50:	9203      	str	r2, [sp, #12]
 801aa52:	9302      	str	r3, [sp, #8]
 801aa54:	2308      	movs	r3, #8
 801aa56:	9301      	str	r3, [sp, #4]
 801aa58:	2300      	movs	r3, #0
 801aa5a:	9300      	str	r3, [sp, #0]
 801aa5c:	2301      	movs	r3, #1
 801aa5e:	460a      	mov	r2, r1
 801aa60:	4601      	mov	r1, r0
 801aa62:	2001      	movs	r0, #1
 801aa64:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 801aa66:	687b      	ldr	r3, [r7, #4]
 801aa68:	7c5b      	ldrb	r3, [r3, #17]
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	d005      	beq.n	801aa7a <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 801aa6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aa72:	4a14      	ldr	r2, [pc, #80]	; (801aac4 <RegionUS915RxConfig+0x100>)
 801aa74:	5cd3      	ldrb	r3, [r2, r3]
 801aa76:	75fb      	strb	r3, [r7, #23]
 801aa78:	e004      	b.n	801aa84 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 801aa7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aa7e:	4a12      	ldr	r2, [pc, #72]	; (801aac8 <RegionUS915RxConfig+0x104>)
 801aa80:	5cd3      	ldrb	r3, [r2, r3]
 801aa82:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801aa84:	4b0b      	ldr	r3, [pc, #44]	; (801aab4 <RegionUS915RxConfig+0xf0>)
 801aa86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801aa88:	7dfa      	ldrb	r2, [r7, #23]
 801aa8a:	320d      	adds	r2, #13
 801aa8c:	b2d2      	uxtb	r2, r2
 801aa8e:	4611      	mov	r1, r2
 801aa90:	2001      	movs	r0, #1
 801aa92:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	7cdb      	ldrb	r3, [r3, #19]
 801aa98:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801aa9c:	6939      	ldr	r1, [r7, #16]
 801aa9e:	4618      	mov	r0, r3
 801aaa0:	f7fe f8a4 	bl	8018bec <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 801aaa4:	683b      	ldr	r3, [r7, #0]
 801aaa6:	7bfa      	ldrb	r2, [r7, #15]
 801aaa8:	701a      	strb	r2, [r3, #0]
    return true;
 801aaaa:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801aaac:	4618      	mov	r0, r3
 801aaae:	371c      	adds	r7, #28
 801aab0:	46bd      	mov	sp, r7
 801aab2:	bd90      	pop	{r4, r7, pc}
 801aab4:	08020e2c 	.word	0x08020e2c
 801aab8:	000927c0 	.word	0x000927c0
 801aabc:	370870a0 	.word	0x370870a0
 801aac0:	08020da8 	.word	0x08020da8
 801aac4:	08020e1c 	.word	0x08020e1c
 801aac8:	08020e0c 	.word	0x08020e0c

0801aacc <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801aacc:	b590      	push	{r4, r7, lr}
 801aace:	b093      	sub	sp, #76	; 0x4c
 801aad0:	af0a      	add	r7, sp, #40	; 0x28
 801aad2:	60f8      	str	r0, [r7, #12]
 801aad4:	60b9      	str	r1, [r7, #8]
 801aad6:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 801aad8:	68fb      	ldr	r3, [r7, #12]
 801aada:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801aade:	461a      	mov	r2, r3
 801aae0:	4b49      	ldr	r3, [pc, #292]	; (801ac08 <RegionUS915TxConfig+0x13c>)
 801aae2:	5c9b      	ldrb	r3, [r3, r2]
 801aae4:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 801aae6:	68fb      	ldr	r3, [r7, #12]
 801aae8:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801aaec:	4b47      	ldr	r3, [pc, #284]	; (801ac0c <RegionUS915TxConfig+0x140>)
 801aaee:	681a      	ldr	r2, [r3, #0]
 801aaf0:	4b47      	ldr	r3, [pc, #284]	; (801ac10 <RegionUS915TxConfig+0x144>)
 801aaf2:	6819      	ldr	r1, [r3, #0]
 801aaf4:	68fb      	ldr	r3, [r7, #12]
 801aaf6:	781b      	ldrb	r3, [r3, #0]
 801aaf8:	461c      	mov	r4, r3
 801aafa:	4623      	mov	r3, r4
 801aafc:	005b      	lsls	r3, r3, #1
 801aafe:	4423      	add	r3, r4
 801ab00:	009b      	lsls	r3, r3, #2
 801ab02:	440b      	add	r3, r1
 801ab04:	3309      	adds	r3, #9
 801ab06:	781b      	ldrb	r3, [r3, #0]
 801ab08:	4619      	mov	r1, r3
 801ab0a:	460b      	mov	r3, r1
 801ab0c:	005b      	lsls	r3, r3, #1
 801ab0e:	440b      	add	r3, r1
 801ab10:	00db      	lsls	r3, r3, #3
 801ab12:	4413      	add	r3, r2
 801ab14:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801ab18:	68fb      	ldr	r3, [r7, #12]
 801ab1a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801ab1e:	4b3c      	ldr	r3, [pc, #240]	; (801ac10 <RegionUS915TxConfig+0x144>)
 801ab20:	681b      	ldr	r3, [r3, #0]
 801ab22:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801ab26:	f7ff fa4d 	bl	8019fc4 <LimitTxPower>
 801ab2a:	4603      	mov	r3, r0
 801ab2c:	77bb      	strb	r3, [r7, #30]
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 801ab2e:	68fb      	ldr	r3, [r7, #12]
 801ab30:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ab34:	4937      	ldr	r1, [pc, #220]	; (801ac14 <RegionUS915TxConfig+0x148>)
 801ab36:	4618      	mov	r0, r3
 801ab38:	f7fe f83a 	bl	8018bb0 <RegionCommonGetBandwidth>
 801ab3c:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801ab3e:	2300      	movs	r3, #0
 801ab40:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 801ab42:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801ab46:	f04f 0200 	mov.w	r2, #0
 801ab4a:	4933      	ldr	r1, [pc, #204]	; (801ac18 <RegionUS915TxConfig+0x14c>)
 801ab4c:	4618      	mov	r0, r3
 801ab4e:	f7fd fe8b 	bl	8018868 <RegionCommonComputeTxPower>
 801ab52:	4603      	mov	r3, r0
 801ab54:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801ab56:	4b31      	ldr	r3, [pc, #196]	; (801ac1c <RegionUS915TxConfig+0x150>)
 801ab58:	68da      	ldr	r2, [r3, #12]
 801ab5a:	4b2d      	ldr	r3, [pc, #180]	; (801ac10 <RegionUS915TxConfig+0x144>)
 801ab5c:	6819      	ldr	r1, [r3, #0]
 801ab5e:	68fb      	ldr	r3, [r7, #12]
 801ab60:	781b      	ldrb	r3, [r3, #0]
 801ab62:	4618      	mov	r0, r3
 801ab64:	4603      	mov	r3, r0
 801ab66:	005b      	lsls	r3, r3, #1
 801ab68:	4403      	add	r3, r0
 801ab6a:	009b      	lsls	r3, r3, #2
 801ab6c:	440b      	add	r3, r1
 801ab6e:	681b      	ldr	r3, [r3, #0]
 801ab70:	4618      	mov	r0, r3
 801ab72:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801ab74:	4b29      	ldr	r3, [pc, #164]	; (801ac1c <RegionUS915TxConfig+0x150>)
 801ab76:	69dc      	ldr	r4, [r3, #28]
 801ab78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801ab7c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801ab80:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801ab84:	9208      	str	r2, [sp, #32]
 801ab86:	2200      	movs	r2, #0
 801ab88:	9207      	str	r2, [sp, #28]
 801ab8a:	2200      	movs	r2, #0
 801ab8c:	9206      	str	r2, [sp, #24]
 801ab8e:	2200      	movs	r2, #0
 801ab90:	9205      	str	r2, [sp, #20]
 801ab92:	2201      	movs	r2, #1
 801ab94:	9204      	str	r2, [sp, #16]
 801ab96:	2200      	movs	r2, #0
 801ab98:	9203      	str	r2, [sp, #12]
 801ab9a:	2208      	movs	r2, #8
 801ab9c:	9202      	str	r2, [sp, #8]
 801ab9e:	2201      	movs	r2, #1
 801aba0:	9201      	str	r2, [sp, #4]
 801aba2:	9300      	str	r3, [sp, #0]
 801aba4:	69bb      	ldr	r3, [r7, #24]
 801aba6:	2200      	movs	r2, #0
 801aba8:	2001      	movs	r0, #1
 801abaa:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801abac:	4b18      	ldr	r3, [pc, #96]	; (801ac10 <RegionUS915TxConfig+0x144>)
 801abae:	681a      	ldr	r2, [r3, #0]
 801abb0:	68fb      	ldr	r3, [r7, #12]
 801abb2:	781b      	ldrb	r3, [r3, #0]
 801abb4:	4619      	mov	r1, r3
 801abb6:	460b      	mov	r3, r1
 801abb8:	005b      	lsls	r3, r3, #1
 801abba:	440b      	add	r3, r1
 801abbc:	009b      	lsls	r3, r3, #2
 801abbe:	4413      	add	r3, r2
 801abc0:	681a      	ldr	r2, [r3, #0]
 801abc2:	68fb      	ldr	r3, [r7, #12]
 801abc4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801abc8:	4619      	mov	r1, r3
 801abca:	4610      	mov	r0, r2
 801abcc:	f7fe f840 	bl	8018c50 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 801abd0:	4b12      	ldr	r3, [pc, #72]	; (801ac1c <RegionUS915TxConfig+0x150>)
 801abd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801abd4:	68fa      	ldr	r2, [r7, #12]
 801abd6:	8992      	ldrh	r2, [r2, #12]
 801abd8:	b2d2      	uxtb	r2, r2
 801abda:	4611      	mov	r1, r2
 801abdc:	2001      	movs	r0, #1
 801abde:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801abe0:	68fb      	ldr	r3, [r7, #12]
 801abe2:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801abe6:	68fb      	ldr	r3, [r7, #12]
 801abe8:	899b      	ldrh	r3, [r3, #12]
 801abea:	4619      	mov	r1, r3
 801abec:	4610      	mov	r0, r2
 801abee:	f7ff fa63 	bl	801a0b8 <GetTimeOnAir>
 801abf2:	4602      	mov	r2, r0
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 801abf8:	68bb      	ldr	r3, [r7, #8]
 801abfa:	7fba      	ldrb	r2, [r7, #30]
 801abfc:	701a      	strb	r2, [r3, #0]
    return true;
 801abfe:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801ac00:	4618      	mov	r0, r3
 801ac02:	3724      	adds	r7, #36	; 0x24
 801ac04:	46bd      	mov	sp, r7
 801ac06:	bd90      	pop	{r4, r7, pc}
 801ac08:	08020da8 	.word	0x08020da8
 801ac0c:	20001a74 	.word	0x20001a74
 801ac10:	20001a70 	.word	0x20001a70
 801ac14:	08020db8 	.word	0x08020db8
 801ac18:	41f00000 	.word	0x41f00000
 801ac1c:	08020e2c 	.word	0x08020e2c

0801ac20 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801ac20:	b590      	push	{r4, r7, lr}
 801ac22:	b097      	sub	sp, #92	; 0x5c
 801ac24:	af00      	add	r7, sp, #0
 801ac26:	60f8      	str	r0, [r7, #12]
 801ac28:	60b9      	str	r1, [r7, #8]
 801ac2a:	607a      	str	r2, [r7, #4]
 801ac2c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801ac2e:	2307      	movs	r3, #7
 801ac30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801ac34:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ac38:	2200      	movs	r2, #0
 801ac3a:	601a      	str	r2, [r3, #0]
 801ac3c:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801ac3e:	2300      	movs	r3, #0
 801ac40:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    uint8_t bytesProcessed = 0;
 801ac44:	2300      	movs	r3, #0
 801ac46:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 801ac4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ac4e:	2200      	movs	r2, #0
 801ac50:	601a      	str	r2, [r3, #0]
 801ac52:	605a      	str	r2, [r3, #4]
 801ac54:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801ac56:	4b97      	ldr	r3, [pc, #604]	; (801aeb4 <RegionUS915LinkAdrReq+0x294>)
 801ac58:	681b      	ldr	r3, [r3, #0]
 801ac5a:	f503 7158 	add.w	r1, r3, #864	; 0x360
 801ac5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ac62:	2206      	movs	r2, #6
 801ac64:	4618      	mov	r0, r3
 801ac66:	f7fd fb03 	bl	8018270 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801ac6a:	e11b      	b.n	801aea4 <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801ac6c:	68fb      	ldr	r3, [r7, #12]
 801ac6e:	685a      	ldr	r2, [r3, #4]
 801ac70:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 801ac74:	4413      	add	r3, r2
 801ac76:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801ac7a:	4611      	mov	r1, r2
 801ac7c:	4618      	mov	r0, r3
 801ac7e:	f7fd fc3b 	bl	80184f8 <RegionCommonParseLinkAdrReq>
 801ac82:	4603      	mov	r3, r0
 801ac84:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        if( nextIndex == 0 )
 801ac88:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	f000 8113 	beq.w	801aeb8 <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801ac92:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801ac96:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801ac9a:	4413      	add	r3, r2
 801ac9c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801aca0:	2307      	movs	r3, #7
 801aca2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 801aca6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801acaa:	2b06      	cmp	r3, #6
 801acac:	d116      	bne.n	801acdc <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 801acae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801acb2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0xFFFF;
 801acb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801acba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0xFFFF;
 801acbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801acc2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0xFFFF;
 801acc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801acca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801acce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801acd2:	b2db      	uxtb	r3, r3
 801acd4:	b29b      	uxth	r3, r3
 801acd6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801acda:	e0e3      	b.n	801aea4 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 801acdc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801ace0:	2b07      	cmp	r3, #7
 801ace2:	d112      	bne.n	801ad0a <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 801ace4:	2300      	movs	r3, #0
 801ace6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0x0000;
 801acea:	2300      	movs	r3, #0
 801acec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0x0000;
 801acf0:	2300      	movs	r3, #0
 801acf2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0x0000;
 801acf6:	2300      	movs	r3, #0
 801acf8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801acfc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801ad00:	b2db      	uxtb	r3, r3
 801ad02:	b29b      	uxth	r3, r3
 801ad04:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801ad08:	e0cc      	b.n	801aea4 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 801ad0a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801ad0e:	2b05      	cmp	r3, #5
 801ad10:	f040 80bf 	bne.w	801ae92 <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 801ad14:	2301      	movs	r3, #1
 801ad16:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 801ad1a:	2300      	movs	r3, #0
 801ad1c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 801ad20:	2300      	movs	r3, #0
 801ad22:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801ad26:	e0ae      	b.n	801ae86 <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 801ad28:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801ad2c:	b2da      	uxtb	r2, r3
 801ad2e:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801ad32:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801ad36:	fa01 f303 	lsl.w	r3, r1, r3
 801ad3a:	4013      	ands	r3, r2
 801ad3c:	2b00      	cmp	r3, #0
 801ad3e:	d04d      	beq.n	801addc <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 801ad40:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801ad44:	f003 0301 	and.w	r3, r3, #1
 801ad48:	b2db      	uxtb	r3, r3
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	d120      	bne.n	801ad90 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 801ad4e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801ad52:	005b      	lsls	r3, r3, #1
 801ad54:	3358      	adds	r3, #88	; 0x58
 801ad56:	443b      	add	r3, r7
 801ad58:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801ad5c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801ad60:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 801ad64:	b292      	uxth	r2, r2
 801ad66:	005b      	lsls	r3, r3, #1
 801ad68:	3358      	adds	r3, #88	; 0x58
 801ad6a:	443b      	add	r3, r7
 801ad6c:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801ad70:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801ad74:	b21a      	sxth	r2, r3
 801ad76:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801ad7a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801ad7e:	fa01 f303 	lsl.w	r3, r1, r3
 801ad82:	b21b      	sxth	r3, r3
 801ad84:	4313      	orrs	r3, r2
 801ad86:	b21b      	sxth	r3, r3
 801ad88:	b29b      	uxth	r3, r3
 801ad8a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801ad8e:	e075      	b.n	801ae7c <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 801ad90:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801ad94:	005b      	lsls	r3, r3, #1
 801ad96:	3358      	adds	r3, #88	; 0x58
 801ad98:	443b      	add	r3, r7
 801ad9a:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801ad9e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801ada2:	f062 02ff 	orn	r2, r2, #255	; 0xff
 801ada6:	b292      	uxth	r2, r2
 801ada8:	005b      	lsls	r3, r3, #1
 801adaa:	3358      	adds	r3, #88	; 0x58
 801adac:	443b      	add	r3, r7
 801adae:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801adb2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801adb6:	b21a      	sxth	r2, r3
 801adb8:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801adbc:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801adc0:	fa01 f303 	lsl.w	r3, r1, r3
 801adc4:	b21b      	sxth	r3, r3
 801adc6:	4313      	orrs	r3, r2
 801adc8:	b21b      	sxth	r3, r3
 801adca:	b29b      	uxth	r3, r3
 801adcc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801add0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801add4:	3301      	adds	r3, #1
 801add6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 801adda:	e04f      	b.n	801ae7c <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 801addc:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801ade0:	f003 0301 	and.w	r3, r3, #1
 801ade4:	b2db      	uxtb	r3, r3
 801ade6:	2b00      	cmp	r3, #0
 801ade8:	d122      	bne.n	801ae30 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 801adea:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801adee:	005b      	lsls	r3, r3, #1
 801adf0:	3358      	adds	r3, #88	; 0x58
 801adf2:	443b      	add	r3, r7
 801adf4:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801adf8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801adfc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801ae00:	b292      	uxth	r2, r2
 801ae02:	005b      	lsls	r3, r3, #1
 801ae04:	3358      	adds	r3, #88	; 0x58
 801ae06:	443b      	add	r3, r7
 801ae08:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801ae0c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801ae10:	b21a      	sxth	r2, r3
 801ae12:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801ae16:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801ae1a:	fa01 f303 	lsl.w	r3, r1, r3
 801ae1e:	b21b      	sxth	r3, r3
 801ae20:	43db      	mvns	r3, r3
 801ae22:	b21b      	sxth	r3, r3
 801ae24:	4013      	ands	r3, r2
 801ae26:	b21b      	sxth	r3, r3
 801ae28:	b29b      	uxth	r3, r3
 801ae2a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801ae2e:	e025      	b.n	801ae7c <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 801ae30:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801ae34:	005b      	lsls	r3, r3, #1
 801ae36:	3358      	adds	r3, #88	; 0x58
 801ae38:	443b      	add	r3, r7
 801ae3a:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801ae3e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801ae42:	b2d2      	uxtb	r2, r2
 801ae44:	b292      	uxth	r2, r2
 801ae46:	005b      	lsls	r3, r3, #1
 801ae48:	3358      	adds	r3, #88	; 0x58
 801ae4a:	443b      	add	r3, r7
 801ae4c:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801ae50:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801ae54:	b21a      	sxth	r2, r3
 801ae56:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801ae5a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801ae5e:	fa01 f303 	lsl.w	r3, r1, r3
 801ae62:	b21b      	sxth	r3, r3
 801ae64:	43db      	mvns	r3, r3
 801ae66:	b21b      	sxth	r3, r3
 801ae68:	4013      	ands	r3, r2
 801ae6a:	b21b      	sxth	r3, r3
 801ae6c:	b29b      	uxth	r3, r3
 801ae6e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801ae72:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801ae76:	3301      	adds	r3, #1
 801ae78:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 801ae7c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801ae80:	3301      	adds	r3, #1
 801ae82:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801ae86:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801ae8a:	2b07      	cmp	r3, #7
 801ae8c:	f67f af4c 	bls.w	801ad28 <RegionUS915LinkAdrReq+0x108>
 801ae90:	e008      	b.n	801aea4 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 801ae92:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801ae96:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 801ae9a:	005b      	lsls	r3, r3, #1
 801ae9c:	3358      	adds	r3, #88	; 0x58
 801ae9e:	443b      	add	r3, r7
 801aea0:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801aea4:	68fb      	ldr	r3, [r7, #12]
 801aea6:	7a1b      	ldrb	r3, [r3, #8]
 801aea8:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801aeac:	429a      	cmp	r2, r3
 801aeae:	f4ff aedd 	bcc.w	801ac6c <RegionUS915LinkAdrReq+0x4c>
 801aeb2:	e002      	b.n	801aeba <RegionUS915LinkAdrReq+0x29a>
 801aeb4:	20001a70 	.word	0x20001a70
            break; // break loop, since no more request has been found
 801aeb8:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 801aeba:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801aebe:	2b03      	cmp	r3, #3
 801aec0:	dc0f      	bgt.n	801aee2 <RegionUS915LinkAdrReq+0x2c2>
 801aec2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801aec6:	2204      	movs	r2, #4
 801aec8:	2100      	movs	r1, #0
 801aeca:	4618      	mov	r0, r3
 801aecc:	f7fd f9a4 	bl	8018218 <RegionCommonCountChannels>
 801aed0:	4603      	mov	r3, r0
 801aed2:	2b01      	cmp	r3, #1
 801aed4:	d805      	bhi.n	801aee2 <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 801aed6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801aeda:	f023 0301 	bic.w	r3, r3, #1
 801aede:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801aee2:	2302      	movs	r3, #2
 801aee4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801aee8:	68fb      	ldr	r3, [r7, #12]
 801aeea:	7a5b      	ldrb	r3, [r3, #9]
 801aeec:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 801aef0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801aef4:	4618      	mov	r0, r3
 801aef6:	f7ff f90f 	bl	801a118 <RegionUS915GetPhyParam>
 801aefa:	4603      	mov	r3, r0
 801aefc:	637b      	str	r3, [r7, #52]	; 0x34

    linkAdrVerifyParams.Status = status;
 801aefe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801af02:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801af04:	68fb      	ldr	r3, [r7, #12]
 801af06:	7a9b      	ldrb	r3, [r3, #10]
 801af08:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801af0a:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801af0e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801af10:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 801af14:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801af16:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801af1a:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801af1c:	68fb      	ldr	r3, [r7, #12]
 801af1e:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801af22:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801af24:	68fb      	ldr	r3, [r7, #12]
 801af26:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801af2a:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801af2c:	68fb      	ldr	r3, [r7, #12]
 801af2e:	7b5b      	ldrb	r3, [r3, #13]
 801af30:	b25b      	sxtb	r3, r3
 801af32:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 801af34:	2348      	movs	r3, #72	; 0x48
 801af36:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 801af3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801af3e:	627b      	str	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801af40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af42:	b25b      	sxtb	r3, r3
 801af44:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 801af48:	2304      	movs	r3, #4
 801af4a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801af4e:	4b3f      	ldr	r3, [pc, #252]	; (801b04c <RegionUS915LinkAdrReq+0x42c>)
 801af50:	681b      	ldr	r3, [r3, #0]
 801af52:	62fb      	str	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 801af54:	230e      	movs	r3, #14
 801af56:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 801af5a:	2300      	movs	r3, #0
 801af5c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801af60:	68fb      	ldr	r3, [r7, #12]
 801af62:	681b      	ldr	r3, [r3, #0]
 801af64:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801af66:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 801af6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801af6e:	1c9a      	adds	r2, r3, #2
 801af70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801af74:	1c59      	adds	r1, r3, #1
 801af76:	f107 0014 	add.w	r0, r7, #20
 801af7a:	4623      	mov	r3, r4
 801af7c:	f7fd fb0d 	bl	801859a <RegionCommonLinkAdrReqVerifyParams>
 801af80:	4603      	mov	r3, r0
 801af82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801af86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801af8a:	2b07      	cmp	r3, #7
 801af8c:	d147      	bne.n	801b01e <RegionUS915LinkAdrReq+0x3fe>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 801af8e:	4b2f      	ldr	r3, [pc, #188]	; (801b04c <RegionUS915LinkAdrReq+0x42c>)
 801af90:	681b      	ldr	r3, [r3, #0]
 801af92:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801af96:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801af9a:	2206      	movs	r2, #6
 801af9c:	4618      	mov	r0, r3
 801af9e:	f7fd f967 	bl	8018270 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 801afa2:	4b2b      	ldr	r3, [pc, #172]	; (801b050 <RegionUS915LinkAdrReq+0x430>)
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	8819      	ldrh	r1, [r3, #0]
 801afa8:	4b28      	ldr	r3, [pc, #160]	; (801b04c <RegionUS915LinkAdrReq+0x42c>)
 801afaa:	681b      	ldr	r3, [r3, #0]
 801afac:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 801afb0:	4b27      	ldr	r3, [pc, #156]	; (801b050 <RegionUS915LinkAdrReq+0x430>)
 801afb2:	681b      	ldr	r3, [r3, #0]
 801afb4:	400a      	ands	r2, r1
 801afb6:	b292      	uxth	r2, r2
 801afb8:	801a      	strh	r2, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 801afba:	4b25      	ldr	r3, [pc, #148]	; (801b050 <RegionUS915LinkAdrReq+0x430>)
 801afbc:	681b      	ldr	r3, [r3, #0]
 801afbe:	8859      	ldrh	r1, [r3, #2]
 801afc0:	4b22      	ldr	r3, [pc, #136]	; (801b04c <RegionUS915LinkAdrReq+0x42c>)
 801afc2:	681b      	ldr	r3, [r3, #0]
 801afc4:	f8b3 2362 	ldrh.w	r2, [r3, #866]	; 0x362
 801afc8:	4b21      	ldr	r3, [pc, #132]	; (801b050 <RegionUS915LinkAdrReq+0x430>)
 801afca:	681b      	ldr	r3, [r3, #0]
 801afcc:	400a      	ands	r2, r1
 801afce:	b292      	uxth	r2, r2
 801afd0:	805a      	strh	r2, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 801afd2:	4b1f      	ldr	r3, [pc, #124]	; (801b050 <RegionUS915LinkAdrReq+0x430>)
 801afd4:	681b      	ldr	r3, [r3, #0]
 801afd6:	8899      	ldrh	r1, [r3, #4]
 801afd8:	4b1c      	ldr	r3, [pc, #112]	; (801b04c <RegionUS915LinkAdrReq+0x42c>)
 801afda:	681b      	ldr	r3, [r3, #0]
 801afdc:	f8b3 2364 	ldrh.w	r2, [r3, #868]	; 0x364
 801afe0:	4b1b      	ldr	r3, [pc, #108]	; (801b050 <RegionUS915LinkAdrReq+0x430>)
 801afe2:	681b      	ldr	r3, [r3, #0]
 801afe4:	400a      	ands	r2, r1
 801afe6:	b292      	uxth	r2, r2
 801afe8:	809a      	strh	r2, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 801afea:	4b19      	ldr	r3, [pc, #100]	; (801b050 <RegionUS915LinkAdrReq+0x430>)
 801afec:	681b      	ldr	r3, [r3, #0]
 801afee:	88d9      	ldrh	r1, [r3, #6]
 801aff0:	4b16      	ldr	r3, [pc, #88]	; (801b04c <RegionUS915LinkAdrReq+0x42c>)
 801aff2:	681b      	ldr	r3, [r3, #0]
 801aff4:	f8b3 2366 	ldrh.w	r2, [r3, #870]	; 0x366
 801aff8:	4b15      	ldr	r3, [pc, #84]	; (801b050 <RegionUS915LinkAdrReq+0x430>)
 801affa:	681b      	ldr	r3, [r3, #0]
 801affc:	400a      	ands	r2, r1
 801affe:	b292      	uxth	r2, r2
 801b000:	80da      	strh	r2, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801b002:	4b12      	ldr	r3, [pc, #72]	; (801b04c <RegionUS915LinkAdrReq+0x42c>)
 801b004:	681a      	ldr	r2, [r3, #0]
 801b006:	4b12      	ldr	r3, [pc, #72]	; (801b050 <RegionUS915LinkAdrReq+0x430>)
 801b008:	681b      	ldr	r3, [r3, #0]
 801b00a:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 801b00e:	811a      	strh	r2, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 801b010:	4b0e      	ldr	r3, [pc, #56]	; (801b04c <RegionUS915LinkAdrReq+0x42c>)
 801b012:	681a      	ldr	r2, [r3, #0]
 801b014:	4b0e      	ldr	r3, [pc, #56]	; (801b050 <RegionUS915LinkAdrReq+0x430>)
 801b016:	681b      	ldr	r3, [r3, #0]
 801b018:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 801b01c:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801b01e:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 801b022:	68bb      	ldr	r3, [r7, #8]
 801b024:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801b026:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801b02e:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 801b032:	683b      	ldr	r3, [r7, #0]
 801b034:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801b036:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b038:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801b03c:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 801b03e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801b042:	4618      	mov	r0, r3
 801b044:	375c      	adds	r7, #92	; 0x5c
 801b046:	46bd      	mov	sp, r7
 801b048:	bd90      	pop	{r4, r7, pc}
 801b04a:	bf00      	nop
 801b04c:	20001a70 	.word	0x20001a70
 801b050:	20001a6c 	.word	0x20001a6c

0801b054 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801b054:	b580      	push	{r7, lr}
 801b056:	b084      	sub	sp, #16
 801b058:	af00      	add	r7, sp, #0
 801b05a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801b05c:	2307      	movs	r3, #7
 801b05e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	685b      	ldr	r3, [r3, #4]
 801b064:	4618      	mov	r0, r3
 801b066:	f7fe ffe3 	bl	801a030 <VerifyRfFreq>
 801b06a:	4603      	mov	r3, r0
 801b06c:	f083 0301 	eor.w	r3, r3, #1
 801b070:	b2db      	uxtb	r3, r3
 801b072:	2b00      	cmp	r3, #0
 801b074:	d003      	beq.n	801b07e <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 801b076:	7bfb      	ldrb	r3, [r7, #15]
 801b078:	f023 0301 	bic.w	r3, r3, #1
 801b07c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 801b07e:	687b      	ldr	r3, [r7, #4]
 801b080:	f993 3000 	ldrsb.w	r3, [r3]
 801b084:	220d      	movs	r2, #13
 801b086:	2108      	movs	r1, #8
 801b088:	4618      	mov	r0, r3
 801b08a:	f7fd f874 	bl	8018176 <RegionCommonValueInRange>
 801b08e:	4603      	mov	r3, r0
 801b090:	2b00      	cmp	r3, #0
 801b092:	d103      	bne.n	801b09c <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 801b094:	7bfb      	ldrb	r3, [r7, #15]
 801b096:	f023 0302 	bic.w	r3, r3, #2
 801b09a:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801b09c:	687b      	ldr	r3, [r7, #4]
 801b09e:	f993 3000 	ldrsb.w	r3, [r3]
 801b0a2:	2207      	movs	r2, #7
 801b0a4:	2105      	movs	r1, #5
 801b0a6:	4618      	mov	r0, r3
 801b0a8:	f7fd f865 	bl	8018176 <RegionCommonValueInRange>
 801b0ac:	4603      	mov	r3, r0
 801b0ae:	2b01      	cmp	r3, #1
 801b0b0:	d004      	beq.n	801b0bc <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801b0b8:	2b0d      	cmp	r3, #13
 801b0ba:	dd03      	ble.n	801b0c4 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 801b0bc:	7bfb      	ldrb	r3, [r7, #15]
 801b0be:	f023 0302 	bic.w	r3, r3, #2
 801b0c2:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 801b0c4:	687b      	ldr	r3, [r7, #4]
 801b0c6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b0ca:	2203      	movs	r2, #3
 801b0cc:	2100      	movs	r1, #0
 801b0ce:	4618      	mov	r0, r3
 801b0d0:	f7fd f851 	bl	8018176 <RegionCommonValueInRange>
 801b0d4:	4603      	mov	r3, r0
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	d103      	bne.n	801b0e2 <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801b0da:	7bfb      	ldrb	r3, [r7, #15]
 801b0dc:	f023 0304 	bic.w	r3, r3, #4
 801b0e0:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 801b0e2:	7bfb      	ldrb	r3, [r7, #15]
}
 801b0e4:	4618      	mov	r0, r3
 801b0e6:	3710      	adds	r7, #16
 801b0e8:	46bd      	mov	sp, r7
 801b0ea:	bd80      	pop	{r7, pc}

0801b0ec <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801b0ec:	b480      	push	{r7}
 801b0ee:	b083      	sub	sp, #12
 801b0f0:	af00      	add	r7, sp, #0
 801b0f2:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801b0f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801b0f8:	4618      	mov	r0, r3
 801b0fa:	370c      	adds	r7, #12
 801b0fc:	46bd      	mov	sp, r7
 801b0fe:	bc80      	pop	{r7}
 801b100:	4770      	bx	lr

0801b102 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801b102:	b480      	push	{r7}
 801b104:	b083      	sub	sp, #12
 801b106:	af00      	add	r7, sp, #0
 801b108:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801b10a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801b10e:	4618      	mov	r0, r3
 801b110:	370c      	adds	r7, #12
 801b112:	46bd      	mov	sp, r7
 801b114:	bc80      	pop	{r7}
 801b116:	4770      	bx	lr

0801b118 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801b118:	b480      	push	{r7}
 801b11a:	b083      	sub	sp, #12
 801b11c:	af00      	add	r7, sp, #0
 801b11e:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801b120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801b124:	4618      	mov	r0, r3
 801b126:	370c      	adds	r7, #12
 801b128:	46bd      	mov	sp, r7
 801b12a:	bc80      	pop	{r7}
 801b12c:	4770      	bx	lr
	...

0801b130 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 801b130:	b480      	push	{r7}
 801b132:	b083      	sub	sp, #12
 801b134:	af00      	add	r7, sp, #0
 801b136:	4603      	mov	r3, r0
 801b138:	460a      	mov	r2, r1
 801b13a:	71fb      	strb	r3, [r7, #7]
 801b13c:	4613      	mov	r3, r2
 801b13e:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 801b140:	79bb      	ldrb	r3, [r7, #6]
 801b142:	2b00      	cmp	r3, #0
 801b144:	d106      	bne.n	801b154 <RegionUS915AlternateDr+0x24>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 801b146:	4b13      	ldr	r3, [pc, #76]	; (801b194 <RegionUS915AlternateDr+0x64>)
 801b148:	681b      	ldr	r3, [r3, #0]
 801b14a:	7b5a      	ldrb	r2, [r3, #13]
 801b14c:	3201      	adds	r2, #1
 801b14e:	b2d2      	uxtb	r2, r2
 801b150:	735a      	strb	r2, [r3, #13]
 801b152:	e005      	b.n	801b160 <RegionUS915AlternateDr+0x30>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 801b154:	4b0f      	ldr	r3, [pc, #60]	; (801b194 <RegionUS915AlternateDr+0x64>)
 801b156:	681b      	ldr	r3, [r3, #0]
 801b158:	7b5a      	ldrb	r2, [r3, #13]
 801b15a:	3a01      	subs	r2, #1
 801b15c:	b2d2      	uxtb	r2, r2
 801b15e:	735a      	strb	r2, [r3, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 801b160:	4b0c      	ldr	r3, [pc, #48]	; (801b194 <RegionUS915AlternateDr+0x64>)
 801b162:	681b      	ldr	r3, [r3, #0]
 801b164:	7b5a      	ldrb	r2, [r3, #13]
 801b166:	4b0c      	ldr	r3, [pc, #48]	; (801b198 <RegionUS915AlternateDr+0x68>)
 801b168:	fba3 1302 	umull	r1, r3, r3, r2
 801b16c:	0859      	lsrs	r1, r3, #1
 801b16e:	460b      	mov	r3, r1
 801b170:	00db      	lsls	r3, r3, #3
 801b172:	440b      	add	r3, r1
 801b174:	1ad3      	subs	r3, r2, r3
 801b176:	b2db      	uxtb	r3, r3
 801b178:	2b00      	cmp	r3, #0
 801b17a:	d102      	bne.n	801b182 <RegionUS915AlternateDr+0x52>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 801b17c:	2304      	movs	r3, #4
 801b17e:	71fb      	strb	r3, [r7, #7]
 801b180:	e001      	b.n	801b186 <RegionUS915AlternateDr+0x56>
    }
    else
    {
        currentDr = DR_0;
 801b182:	2300      	movs	r3, #0
 801b184:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 801b186:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 801b18a:	4618      	mov	r0, r3
 801b18c:	370c      	adds	r7, #12
 801b18e:	46bd      	mov	sp, r7
 801b190:	bc80      	pop	{r7}
 801b192:	4770      	bx	lr
 801b194:	20001a6c 	.word	0x20001a6c
 801b198:	38e38e39 	.word	0x38e38e39

0801b19c <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801b19c:	b580      	push	{r7, lr}
 801b19e:	b0a8      	sub	sp, #160	; 0xa0
 801b1a0:	af02      	add	r7, sp, #8
 801b1a2:	60f8      	str	r0, [r7, #12]
 801b1a4:	60b9      	str	r1, [r7, #8]
 801b1a6:	607a      	str	r2, [r7, #4]
 801b1a8:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 801b1aa:	2300      	movs	r3, #0
 801b1ac:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t nbRestrictedChannels = 0;
 801b1b0:	2300      	movs	r3, #0
 801b1b2:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 801b1b6:	2300      	movs	r3, #0
 801b1b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b1ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b1be:	2244      	movs	r2, #68	; 0x44
 801b1c0:	2100      	movs	r1, #0
 801b1c2:	4618      	mov	r0, r3
 801b1c4:	f004 fea0 	bl	801ff08 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801b1c8:	230c      	movs	r3, #12
 801b1ca:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 801b1ce:	4b67      	ldr	r3, [pc, #412]	; (801b36c <RegionUS915NextChannel+0x1d0>)
 801b1d0:	681b      	ldr	r3, [r3, #0]
 801b1d2:	2204      	movs	r2, #4
 801b1d4:	2100      	movs	r1, #0
 801b1d6:	4618      	mov	r0, r3
 801b1d8:	f7fd f81e 	bl	8018218 <RegionCommonCountChannels>
 801b1dc:	4603      	mov	r3, r0
 801b1de:	2b00      	cmp	r3, #0
 801b1e0:	d10e      	bne.n	801b200 <RegionUS915NextChannel+0x64>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 801b1e2:	4b62      	ldr	r3, [pc, #392]	; (801b36c <RegionUS915NextChannel+0x1d0>)
 801b1e4:	681b      	ldr	r3, [r3, #0]
 801b1e6:	4618      	mov	r0, r3
 801b1e8:	4b61      	ldr	r3, [pc, #388]	; (801b370 <RegionUS915NextChannel+0x1d4>)
 801b1ea:	681b      	ldr	r3, [r3, #0]
 801b1ec:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801b1f0:	2204      	movs	r2, #4
 801b1f2:	4619      	mov	r1, r3
 801b1f4:	f7fd f83c 	bl	8018270 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801b1f8:	4b5c      	ldr	r3, [pc, #368]	; (801b36c <RegionUS915NextChannel+0x1d0>)
 801b1fa:	681b      	ldr	r3, [r3, #0]
 801b1fc:	2200      	movs	r2, #0
 801b1fe:	731a      	strb	r2, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 801b200:	68fb      	ldr	r3, [r7, #12]
 801b202:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801b206:	2b03      	cmp	r3, #3
 801b208:	dd0c      	ble.n	801b224 <RegionUS915NextChannel+0x88>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 801b20a:	4b58      	ldr	r3, [pc, #352]	; (801b36c <RegionUS915NextChannel+0x1d0>)
 801b20c:	681b      	ldr	r3, [r3, #0]
 801b20e:	891b      	ldrh	r3, [r3, #8]
 801b210:	b2db      	uxtb	r3, r3
 801b212:	2b00      	cmp	r3, #0
 801b214:	d106      	bne.n	801b224 <RegionUS915NextChannel+0x88>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801b216:	4b56      	ldr	r3, [pc, #344]	; (801b370 <RegionUS915NextChannel+0x1d4>)
 801b218:	681a      	ldr	r2, [r3, #0]
 801b21a:	4b54      	ldr	r3, [pc, #336]	; (801b36c <RegionUS915NextChannel+0x1d0>)
 801b21c:	681b      	ldr	r3, [r3, #0]
 801b21e:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 801b222:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801b224:	68fb      	ldr	r3, [r7, #12]
 801b226:	7a5b      	ldrb	r3, [r3, #9]
 801b228:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801b22a:	68fb      	ldr	r3, [r7, #12]
 801b22c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801b230:	b2db      	uxtb	r3, r3
 801b232:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 801b234:	4b4d      	ldr	r3, [pc, #308]	; (801b36c <RegionUS915NextChannel+0x1d0>)
 801b236:	681b      	ldr	r3, [r3, #0]
 801b238:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801b23a:	4b4d      	ldr	r3, [pc, #308]	; (801b370 <RegionUS915NextChannel+0x1d4>)
 801b23c:	681b      	ldr	r3, [r3, #0]
 801b23e:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 801b240:	4b4c      	ldr	r3, [pc, #304]	; (801b374 <RegionUS915NextChannel+0x1d8>)
 801b242:	681b      	ldr	r3, [r3, #0]
 801b244:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 801b246:	2348      	movs	r3, #72	; 0x48
 801b248:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = NULL;
 801b24a:	2300      	movs	r3, #0
 801b24c:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801b24e:	68fb      	ldr	r3, [r7, #12]
 801b250:	681b      	ldr	r3, [r3, #0]
 801b252:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801b254:	68fb      	ldr	r3, [r7, #12]
 801b256:	685b      	ldr	r3, [r3, #4]
 801b258:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801b25a:	68fb      	ldr	r3, [r7, #12]
 801b25c:	7a9b      	ldrb	r3, [r3, #10]
 801b25e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 801b262:	2301      	movs	r3, #1
 801b264:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801b268:	f107 0314 	add.w	r3, r7, #20
 801b26c:	64bb      	str	r3, [r7, #72]	; 0x48

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801b26e:	68fa      	ldr	r2, [r7, #12]
 801b270:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b274:	320c      	adds	r2, #12
 801b276:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b27a:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801b27e:	68fb      	ldr	r3, [r7, #12]
 801b280:	7d1b      	ldrb	r3, [r3, #20]
 801b282:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801b286:	68fb      	ldr	r3, [r7, #12]
 801b288:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801b28c:	68fb      	ldr	r3, [r7, #12]
 801b28e:	8adb      	ldrh	r3, [r3, #22]
 801b290:	4619      	mov	r1, r3
 801b292:	4610      	mov	r0, r2
 801b294:	f7fe ff10 	bl	801a0b8 <GetTimeOnAir>
 801b298:	4603      	mov	r3, r0
 801b29a:	647b      	str	r3, [r7, #68]	; 0x44
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801b29c:	f107 0195 	add.w	r1, r7, #149	; 0x95
 801b2a0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801b2a4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	9301      	str	r3, [sp, #4]
 801b2ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801b2b0:	9300      	str	r3, [sp, #0]
 801b2b2:	460b      	mov	r3, r1
 801b2b4:	6839      	ldr	r1, [r7, #0]
 801b2b6:	f7fd fbc6 	bl	8018a46 <RegionCommonIdentifyChannels>
 801b2ba:	4603      	mov	r3, r0
 801b2bc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801b2c0:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 801b2c4:	2b00      	cmp	r3, #0
 801b2c6:	d14a      	bne.n	801b35e <RegionUS915NextChannel+0x1c2>
    {
        if( nextChanParams->Joined == true )
 801b2c8:	68fb      	ldr	r3, [r7, #12]
 801b2ca:	7a5b      	ldrb	r3, [r3, #9]
 801b2cc:	2b00      	cmp	r3, #0
 801b2ce:	d00e      	beq.n	801b2ee <RegionUS915NextChannel+0x152>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801b2d0:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 801b2d4:	3b01      	subs	r3, #1
 801b2d6:	4619      	mov	r1, r3
 801b2d8:	2000      	movs	r0, #0
 801b2da:	f000 f89f 	bl	801b41c <randr>
 801b2de:	4603      	mov	r3, r0
 801b2e0:	3398      	adds	r3, #152	; 0x98
 801b2e2:	443b      	add	r3, r7
 801b2e4:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 801b2e8:	68bb      	ldr	r3, [r7, #8]
 801b2ea:	701a      	strb	r2, [r3, #0]
 801b2ec:	e02e      	b.n	801b34c <RegionUS915NextChannel+0x1b0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 801b2ee:	68fb      	ldr	r3, [r7, #12]
 801b2f0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	d10e      	bne.n	801b316 <RegionUS915NextChannel+0x17a>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801b2f8:	4b1c      	ldr	r3, [pc, #112]	; (801b36c <RegionUS915NextChannel+0x1d0>)
 801b2fa:	681b      	ldr	r3, [r3, #0]
 801b2fc:	4618      	mov	r0, r3
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 801b2fe:	4b1b      	ldr	r3, [pc, #108]	; (801b36c <RegionUS915NextChannel+0x1d0>)
 801b300:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801b302:	330c      	adds	r3, #12
 801b304:	68ba      	ldr	r2, [r7, #8]
 801b306:	4619      	mov	r1, r3
 801b308:	f7fc fcf0 	bl	8017cec <RegionBaseUSComputeNext125kHzJoinChannel>
 801b30c:	4603      	mov	r3, r0
 801b30e:	2b03      	cmp	r3, #3
 801b310:	d11c      	bne.n	801b34c <RegionUS915NextChannel+0x1b0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 801b312:	2303      	movs	r3, #3
 801b314:	e025      	b.n	801b362 <RegionUS915NextChannel+0x1c6>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 801b316:	2300      	movs	r3, #0
 801b318:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801b31c:	e004      	b.n	801b328 <RegionUS915NextChannel+0x18c>
                {
                    i++;
 801b31e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b322:	3301      	adds	r3, #1
 801b324:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801b328:	4b10      	ldr	r3, [pc, #64]	; (801b36c <RegionUS915NextChannel+0x1d0>)
 801b32a:	681b      	ldr	r3, [r3, #0]
 801b32c:	891b      	ldrh	r3, [r3, #8]
 801b32e:	b2da      	uxtb	r2, r3
 801b330:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b334:	fa42 f303 	asr.w	r3, r2, r3
 801b338:	f003 0301 	and.w	r3, r3, #1
 801b33c:	2b00      	cmp	r3, #0
 801b33e:	d0ee      	beq.n	801b31e <RegionUS915NextChannel+0x182>
                }
                *channel = 64 + i;
 801b340:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b344:	3340      	adds	r3, #64	; 0x40
 801b346:	b2da      	uxtb	r2, r3
 801b348:	68bb      	ldr	r3, [r7, #8]
 801b34a:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 801b34c:	4b07      	ldr	r3, [pc, #28]	; (801b36c <RegionUS915NextChannel+0x1d0>)
 801b34e:	681b      	ldr	r3, [r3, #0]
 801b350:	4618      	mov	r0, r3
 801b352:	68bb      	ldr	r3, [r7, #8]
 801b354:	781b      	ldrb	r3, [r3, #0]
 801b356:	2248      	movs	r2, #72	; 0x48
 801b358:	4619      	mov	r1, r3
 801b35a:	f7fc ff29 	bl	80181b0 <RegionCommonChanDisable>
    }
    return status;
 801b35e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 801b362:	4618      	mov	r0, r3
 801b364:	3798      	adds	r7, #152	; 0x98
 801b366:	46bd      	mov	sp, r7
 801b368:	bd80      	pop	{r7, pc}
 801b36a:	bf00      	nop
 801b36c:	20001a6c 	.word	0x20001a6c
 801b370:	20001a70 	.word	0x20001a70
 801b374:	20001a74 	.word	0x20001a74

0801b378 <RegionUS915ApplyDrOffset>:
#endif /* REGION_US915 */
}
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801b378:	b480      	push	{r7}
 801b37a:	b085      	sub	sp, #20
 801b37c:	af00      	add	r7, sp, #0
 801b37e:	4603      	mov	r3, r0
 801b380:	71fb      	strb	r3, [r7, #7]
 801b382:	460b      	mov	r3, r1
 801b384:	71bb      	strb	r3, [r7, #6]
 801b386:	4613      	mov	r3, r2
 801b388:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 801b38a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801b38e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801b392:	4909      	ldr	r1, [pc, #36]	; (801b3b8 <RegionUS915ApplyDrOffset+0x40>)
 801b394:	0092      	lsls	r2, r2, #2
 801b396:	440a      	add	r2, r1
 801b398:	4413      	add	r3, r2
 801b39a:	781b      	ldrb	r3, [r3, #0]
 801b39c:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801b39e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b3a2:	2b00      	cmp	r3, #0
 801b3a4:	da01      	bge.n	801b3aa <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 801b3a6:	2300      	movs	r3, #0
 801b3a8:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801b3aa:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 801b3ac:	4618      	mov	r0, r3
 801b3ae:	3714      	adds	r7, #20
 801b3b0:	46bd      	mov	sp, r7
 801b3b2:	bc80      	pop	{r7}
 801b3b4:	4770      	bx	lr
 801b3b6:	bf00      	nop
 801b3b8:	08020df8 	.word	0x08020df8

0801b3bc <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 801b3bc:	b480      	push	{r7}
 801b3be:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801b3c0:	4b0d      	ldr	r3, [pc, #52]	; (801b3f8 <rand1+0x3c>)
 801b3c2:	681b      	ldr	r3, [r3, #0]
 801b3c4:	4a0d      	ldr	r2, [pc, #52]	; (801b3fc <rand1+0x40>)
 801b3c6:	fb02 f303 	mul.w	r3, r2, r3
 801b3ca:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b3ce:	3339      	adds	r3, #57	; 0x39
 801b3d0:	4a09      	ldr	r2, [pc, #36]	; (801b3f8 <rand1+0x3c>)
 801b3d2:	6013      	str	r3, [r2, #0]
 801b3d4:	4b08      	ldr	r3, [pc, #32]	; (801b3f8 <rand1+0x3c>)
 801b3d6:	681a      	ldr	r2, [r3, #0]
 801b3d8:	2303      	movs	r3, #3
 801b3da:	fba3 1302 	umull	r1, r3, r3, r2
 801b3de:	1ad1      	subs	r1, r2, r3
 801b3e0:	0849      	lsrs	r1, r1, #1
 801b3e2:	440b      	add	r3, r1
 801b3e4:	0f99      	lsrs	r1, r3, #30
 801b3e6:	460b      	mov	r3, r1
 801b3e8:	07db      	lsls	r3, r3, #31
 801b3ea:	1a5b      	subs	r3, r3, r1
 801b3ec:	1ad1      	subs	r1, r2, r3
 801b3ee:	460b      	mov	r3, r1
}
 801b3f0:	4618      	mov	r0, r3
 801b3f2:	46bd      	mov	sp, r7
 801b3f4:	bc80      	pop	{r7}
 801b3f6:	4770      	bx	lr
 801b3f8:	20000130 	.word	0x20000130
 801b3fc:	41c64e6d 	.word	0x41c64e6d

0801b400 <srand1>:

void srand1( uint32_t seed )
{
 801b400:	b480      	push	{r7}
 801b402:	b083      	sub	sp, #12
 801b404:	af00      	add	r7, sp, #0
 801b406:	6078      	str	r0, [r7, #4]
    next = seed;
 801b408:	4a03      	ldr	r2, [pc, #12]	; (801b418 <srand1+0x18>)
 801b40a:	687b      	ldr	r3, [r7, #4]
 801b40c:	6013      	str	r3, [r2, #0]
}
 801b40e:	bf00      	nop
 801b410:	370c      	adds	r7, #12
 801b412:	46bd      	mov	sp, r7
 801b414:	bc80      	pop	{r7}
 801b416:	4770      	bx	lr
 801b418:	20000130 	.word	0x20000130

0801b41c <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801b41c:	b580      	push	{r7, lr}
 801b41e:	b082      	sub	sp, #8
 801b420:	af00      	add	r7, sp, #0
 801b422:	6078      	str	r0, [r7, #4]
 801b424:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801b426:	f7ff ffc9 	bl	801b3bc <rand1>
 801b42a:	4602      	mov	r2, r0
 801b42c:	6839      	ldr	r1, [r7, #0]
 801b42e:	687b      	ldr	r3, [r7, #4]
 801b430:	1acb      	subs	r3, r1, r3
 801b432:	3301      	adds	r3, #1
 801b434:	fb92 f1f3 	sdiv	r1, r2, r3
 801b438:	fb01 f303 	mul.w	r3, r1, r3
 801b43c:	1ad2      	subs	r2, r2, r3
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	4413      	add	r3, r2
}
 801b442:	4618      	mov	r0, r3
 801b444:	3708      	adds	r7, #8
 801b446:	46bd      	mov	sp, r7
 801b448:	bd80      	pop	{r7, pc}

0801b44a <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801b44a:	b480      	push	{r7}
 801b44c:	b085      	sub	sp, #20
 801b44e:	af00      	add	r7, sp, #0
 801b450:	60f8      	str	r0, [r7, #12]
 801b452:	60b9      	str	r1, [r7, #8]
 801b454:	4613      	mov	r3, r2
 801b456:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 801b458:	e007      	b.n	801b46a <memcpy1+0x20>
    {
        *dst++ = *src++;
 801b45a:	68ba      	ldr	r2, [r7, #8]
 801b45c:	1c53      	adds	r3, r2, #1
 801b45e:	60bb      	str	r3, [r7, #8]
 801b460:	68fb      	ldr	r3, [r7, #12]
 801b462:	1c59      	adds	r1, r3, #1
 801b464:	60f9      	str	r1, [r7, #12]
 801b466:	7812      	ldrb	r2, [r2, #0]
 801b468:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b46a:	88fb      	ldrh	r3, [r7, #6]
 801b46c:	1e5a      	subs	r2, r3, #1
 801b46e:	80fa      	strh	r2, [r7, #6]
 801b470:	2b00      	cmp	r3, #0
 801b472:	d1f2      	bne.n	801b45a <memcpy1+0x10>
    }
}
 801b474:	bf00      	nop
 801b476:	bf00      	nop
 801b478:	3714      	adds	r7, #20
 801b47a:	46bd      	mov	sp, r7
 801b47c:	bc80      	pop	{r7}
 801b47e:	4770      	bx	lr

0801b480 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801b480:	b480      	push	{r7}
 801b482:	b085      	sub	sp, #20
 801b484:	af00      	add	r7, sp, #0
 801b486:	60f8      	str	r0, [r7, #12]
 801b488:	60b9      	str	r1, [r7, #8]
 801b48a:	4613      	mov	r3, r2
 801b48c:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801b48e:	88fb      	ldrh	r3, [r7, #6]
 801b490:	3b01      	subs	r3, #1
 801b492:	68fa      	ldr	r2, [r7, #12]
 801b494:	4413      	add	r3, r2
 801b496:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801b498:	e007      	b.n	801b4aa <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801b49a:	68ba      	ldr	r2, [r7, #8]
 801b49c:	1c53      	adds	r3, r2, #1
 801b49e:	60bb      	str	r3, [r7, #8]
 801b4a0:	68fb      	ldr	r3, [r7, #12]
 801b4a2:	1e59      	subs	r1, r3, #1
 801b4a4:	60f9      	str	r1, [r7, #12]
 801b4a6:	7812      	ldrb	r2, [r2, #0]
 801b4a8:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b4aa:	88fb      	ldrh	r3, [r7, #6]
 801b4ac:	1e5a      	subs	r2, r3, #1
 801b4ae:	80fa      	strh	r2, [r7, #6]
 801b4b0:	2b00      	cmp	r3, #0
 801b4b2:	d1f2      	bne.n	801b49a <memcpyr+0x1a>
    }
}
 801b4b4:	bf00      	nop
 801b4b6:	bf00      	nop
 801b4b8:	3714      	adds	r7, #20
 801b4ba:	46bd      	mov	sp, r7
 801b4bc:	bc80      	pop	{r7}
 801b4be:	4770      	bx	lr

0801b4c0 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801b4c0:	b480      	push	{r7}
 801b4c2:	b083      	sub	sp, #12
 801b4c4:	af00      	add	r7, sp, #0
 801b4c6:	6078      	str	r0, [r7, #4]
 801b4c8:	460b      	mov	r3, r1
 801b4ca:	70fb      	strb	r3, [r7, #3]
 801b4cc:	4613      	mov	r3, r2
 801b4ce:	803b      	strh	r3, [r7, #0]
    while( size-- )
 801b4d0:	e004      	b.n	801b4dc <memset1+0x1c>
    {
        *dst++ = value;
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	1c5a      	adds	r2, r3, #1
 801b4d6:	607a      	str	r2, [r7, #4]
 801b4d8:	78fa      	ldrb	r2, [r7, #3]
 801b4da:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b4dc:	883b      	ldrh	r3, [r7, #0]
 801b4de:	1e5a      	subs	r2, r3, #1
 801b4e0:	803a      	strh	r2, [r7, #0]
 801b4e2:	2b00      	cmp	r3, #0
 801b4e4:	d1f5      	bne.n	801b4d2 <memset1+0x12>
    }
}
 801b4e6:	bf00      	nop
 801b4e8:	bf00      	nop
 801b4ea:	370c      	adds	r7, #12
 801b4ec:	46bd      	mov	sp, r7
 801b4ee:	bc80      	pop	{r7}
 801b4f0:	4770      	bx	lr
	...

0801b4f4 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 801b4f4:	b480      	push	{r7}
 801b4f6:	b085      	sub	sp, #20
 801b4f8:	af00      	add	r7, sp, #0
 801b4fa:	6078      	str	r0, [r7, #4]
 801b4fc:	460b      	mov	r3, r1
 801b4fe:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 801b500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b504:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 801b506:	687b      	ldr	r3, [r7, #4]
 801b508:	2b00      	cmp	r3, #0
 801b50a:	d101      	bne.n	801b510 <Crc32+0x1c>
    {
        return 0;
 801b50c:	2300      	movs	r3, #0
 801b50e:	e026      	b.n	801b55e <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 801b510:	2300      	movs	r3, #0
 801b512:	817b      	strh	r3, [r7, #10]
 801b514:	e01d      	b.n	801b552 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 801b516:	897b      	ldrh	r3, [r7, #10]
 801b518:	687a      	ldr	r2, [r7, #4]
 801b51a:	4413      	add	r3, r2
 801b51c:	781b      	ldrb	r3, [r3, #0]
 801b51e:	461a      	mov	r2, r3
 801b520:	68fb      	ldr	r3, [r7, #12]
 801b522:	4053      	eors	r3, r2
 801b524:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801b526:	2300      	movs	r3, #0
 801b528:	813b      	strh	r3, [r7, #8]
 801b52a:	e00c      	b.n	801b546 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 801b52c:	68fb      	ldr	r3, [r7, #12]
 801b52e:	085a      	lsrs	r2, r3, #1
 801b530:	68fb      	ldr	r3, [r7, #12]
 801b532:	f003 0301 	and.w	r3, r3, #1
 801b536:	425b      	negs	r3, r3
 801b538:	490b      	ldr	r1, [pc, #44]	; (801b568 <Crc32+0x74>)
 801b53a:	400b      	ands	r3, r1
 801b53c:	4053      	eors	r3, r2
 801b53e:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801b540:	893b      	ldrh	r3, [r7, #8]
 801b542:	3301      	adds	r3, #1
 801b544:	813b      	strh	r3, [r7, #8]
 801b546:	893b      	ldrh	r3, [r7, #8]
 801b548:	2b07      	cmp	r3, #7
 801b54a:	d9ef      	bls.n	801b52c <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 801b54c:	897b      	ldrh	r3, [r7, #10]
 801b54e:	3301      	adds	r3, #1
 801b550:	817b      	strh	r3, [r7, #10]
 801b552:	897a      	ldrh	r2, [r7, #10]
 801b554:	887b      	ldrh	r3, [r7, #2]
 801b556:	429a      	cmp	r2, r3
 801b558:	d3dd      	bcc.n	801b516 <Crc32+0x22>
        }
    }

    return ~crc;
 801b55a:	68fb      	ldr	r3, [r7, #12]
 801b55c:	43db      	mvns	r3, r3
}
 801b55e:	4618      	mov	r0, r3
 801b560:	3714      	adds	r7, #20
 801b562:	46bd      	mov	sp, r7
 801b564:	bc80      	pop	{r7}
 801b566:	4770      	bx	lr
 801b568:	edb88320 	.word	0xedb88320

0801b56c <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 801b56c:	b580      	push	{r7, lr}
 801b56e:	b084      	sub	sp, #16
 801b570:	af02      	add	r7, sp, #8
 801b572:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 801b574:	4a24      	ldr	r2, [pc, #144]	; (801b608 <RadioInit+0x9c>)
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801b57a:	4b24      	ldr	r3, [pc, #144]	; (801b60c <RadioInit+0xa0>)
 801b57c:	2200      	movs	r2, #0
 801b57e:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 801b580:	4b22      	ldr	r3, [pc, #136]	; (801b60c <RadioInit+0xa0>)
 801b582:	2200      	movs	r2, #0
 801b584:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801b586:	4b21      	ldr	r3, [pc, #132]	; (801b60c <RadioInit+0xa0>)
 801b588:	2200      	movs	r2, #0
 801b58a:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801b58c:	4b1f      	ldr	r3, [pc, #124]	; (801b60c <RadioInit+0xa0>)
 801b58e:	2200      	movs	r2, #0
 801b590:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 801b592:	481f      	ldr	r0, [pc, #124]	; (801b610 <RadioInit+0xa4>)
 801b594:	f001 ffc2 	bl	801d51c <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 801b598:	4b1c      	ldr	r3, [pc, #112]	; (801b60c <RadioInit+0xa0>)
 801b59a:	2200      	movs	r2, #0
 801b59c:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 801b59e:	4b1b      	ldr	r3, [pc, #108]	; (801b60c <RadioInit+0xa0>)
 801b5a0:	2200      	movs	r2, #0
 801b5a2:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 801b5a4:	f002 fa56 	bl	801da54 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801b5a8:	2100      	movs	r1, #0
 801b5aa:	2000      	movs	r0, #0
 801b5ac:	f002 fe22 	bl	801e1f4 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 801b5b0:	2204      	movs	r2, #4
 801b5b2:	2100      	movs	r1, #0
 801b5b4:	2001      	movs	r0, #1
 801b5b6:	f002 fbdf 	bl	801dd78 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801b5ba:	2300      	movs	r3, #0
 801b5bc:	2200      	movs	r2, #0
 801b5be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b5c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b5c6:	f002 fb0f 	bl	801dbe8 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 801b5ca:	f000 fe99 	bl	801c300 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801b5ce:	2300      	movs	r3, #0
 801b5d0:	9300      	str	r3, [sp, #0]
 801b5d2:	4b10      	ldr	r3, [pc, #64]	; (801b614 <RadioInit+0xa8>)
 801b5d4:	2200      	movs	r2, #0
 801b5d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801b5da:	480f      	ldr	r0, [pc, #60]	; (801b618 <RadioInit+0xac>)
 801b5dc:	f003 feee 	bl	801f3bc <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801b5e0:	2300      	movs	r3, #0
 801b5e2:	9300      	str	r3, [sp, #0]
 801b5e4:	4b0d      	ldr	r3, [pc, #52]	; (801b61c <RadioInit+0xb0>)
 801b5e6:	2200      	movs	r2, #0
 801b5e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801b5ec:	480c      	ldr	r0, [pc, #48]	; (801b620 <RadioInit+0xb4>)
 801b5ee:	f003 fee5 	bl	801f3bc <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801b5f2:	4809      	ldr	r0, [pc, #36]	; (801b618 <RadioInit+0xac>)
 801b5f4:	f003 ff86 	bl	801f504 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801b5f8:	4809      	ldr	r0, [pc, #36]	; (801b620 <RadioInit+0xb4>)
 801b5fa:	f003 ff83 	bl	801f504 <UTIL_TIMER_Stop>
}
 801b5fe:	bf00      	nop
 801b600:	3708      	adds	r7, #8
 801b602:	46bd      	mov	sp, r7
 801b604:	bd80      	pop	{r7, pc}
 801b606:	bf00      	nop
 801b608:	20001b78 	.word	0x20001b78
 801b60c:	20001b7c 	.word	0x20001b7c
 801b610:	0801c6f9 	.word	0x0801c6f9
 801b614:	0801c681 	.word	0x0801c681
 801b618:	20001bd8 	.word	0x20001bd8
 801b61c:	0801c695 	.word	0x0801c695
 801b620:	20001bf0 	.word	0x20001bf0

0801b624 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 801b624:	b580      	push	{r7, lr}
 801b626:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801b628:	f001 ffc0 	bl	801d5ac <SUBGRF_GetOperatingMode>
 801b62c:	4603      	mov	r3, r0
 801b62e:	2b07      	cmp	r3, #7
 801b630:	d00a      	beq.n	801b648 <RadioGetStatus+0x24>
 801b632:	2b07      	cmp	r3, #7
 801b634:	dc0a      	bgt.n	801b64c <RadioGetStatus+0x28>
 801b636:	2b04      	cmp	r3, #4
 801b638:	d002      	beq.n	801b640 <RadioGetStatus+0x1c>
 801b63a:	2b05      	cmp	r3, #5
 801b63c:	d002      	beq.n	801b644 <RadioGetStatus+0x20>
 801b63e:	e005      	b.n	801b64c <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 801b640:	2302      	movs	r3, #2
 801b642:	e004      	b.n	801b64e <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 801b644:	2301      	movs	r3, #1
 801b646:	e002      	b.n	801b64e <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801b648:	2303      	movs	r3, #3
 801b64a:	e000      	b.n	801b64e <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801b64c:	2300      	movs	r3, #0
    }
}
 801b64e:	4618      	mov	r0, r3
 801b650:	bd80      	pop	{r7, pc}
	...

0801b654 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 801b654:	b580      	push	{r7, lr}
 801b656:	b082      	sub	sp, #8
 801b658:	af00      	add	r7, sp, #0
 801b65a:	4603      	mov	r3, r0
 801b65c:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801b65e:	4a2a      	ldr	r2, [pc, #168]	; (801b708 <RadioSetModem+0xb4>)
 801b660:	79fb      	ldrb	r3, [r7, #7]
 801b662:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 801b664:	79fb      	ldrb	r3, [r7, #7]
 801b666:	4618      	mov	r0, r3
 801b668:	f003 f997 	bl	801e99a <RFW_SetRadioModem>
    switch( modem )
 801b66c:	79fb      	ldrb	r3, [r7, #7]
 801b66e:	2b05      	cmp	r3, #5
 801b670:	d80e      	bhi.n	801b690 <RadioSetModem+0x3c>
 801b672:	a201      	add	r2, pc, #4	; (adr r2, 801b678 <RadioSetModem+0x24>)
 801b674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b678:	0801b69f 	.word	0x0801b69f
 801b67c:	0801b6ad 	.word	0x0801b6ad
 801b680:	0801b691 	.word	0x0801b691
 801b684:	0801b6d3 	.word	0x0801b6d3
 801b688:	0801b6e1 	.word	0x0801b6e1
 801b68c:	0801b6ef 	.word	0x0801b6ef
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801b690:	2003      	movs	r0, #3
 801b692:	f002 fb4b 	bl	801dd2c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801b696:	4b1c      	ldr	r3, [pc, #112]	; (801b708 <RadioSetModem+0xb4>)
 801b698:	2200      	movs	r2, #0
 801b69a:	735a      	strb	r2, [r3, #13]
        break;
 801b69c:	e02f      	b.n	801b6fe <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801b69e:	2000      	movs	r0, #0
 801b6a0:	f002 fb44 	bl	801dd2c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801b6a4:	4b18      	ldr	r3, [pc, #96]	; (801b708 <RadioSetModem+0xb4>)
 801b6a6:	2200      	movs	r2, #0
 801b6a8:	735a      	strb	r2, [r3, #13]
        break;
 801b6aa:	e028      	b.n	801b6fe <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801b6ac:	2001      	movs	r0, #1
 801b6ae:	f002 fb3d 	bl	801dd2c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801b6b2:	4b15      	ldr	r3, [pc, #84]	; (801b708 <RadioSetModem+0xb4>)
 801b6b4:	7b5a      	ldrb	r2, [r3, #13]
 801b6b6:	4b14      	ldr	r3, [pc, #80]	; (801b708 <RadioSetModem+0xb4>)
 801b6b8:	7b1b      	ldrb	r3, [r3, #12]
 801b6ba:	429a      	cmp	r2, r3
 801b6bc:	d01e      	beq.n	801b6fc <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801b6be:	4b12      	ldr	r3, [pc, #72]	; (801b708 <RadioSetModem+0xb4>)
 801b6c0:	7b1a      	ldrb	r2, [r3, #12]
 801b6c2:	4b11      	ldr	r3, [pc, #68]	; (801b708 <RadioSetModem+0xb4>)
 801b6c4:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801b6c6:	4b10      	ldr	r3, [pc, #64]	; (801b708 <RadioSetModem+0xb4>)
 801b6c8:	7b5b      	ldrb	r3, [r3, #13]
 801b6ca:	4618      	mov	r0, r3
 801b6cc:	f000 ffa2 	bl	801c614 <RadioSetPublicNetwork>
        }
        break;
 801b6d0:	e014      	b.n	801b6fc <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801b6d2:	2002      	movs	r0, #2
 801b6d4:	f002 fb2a 	bl	801dd2c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801b6d8:	4b0b      	ldr	r3, [pc, #44]	; (801b708 <RadioSetModem+0xb4>)
 801b6da:	2200      	movs	r2, #0
 801b6dc:	735a      	strb	r2, [r3, #13]
        break;
 801b6de:	e00e      	b.n	801b6fe <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801b6e0:	2002      	movs	r0, #2
 801b6e2:	f002 fb23 	bl	801dd2c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801b6e6:	4b08      	ldr	r3, [pc, #32]	; (801b708 <RadioSetModem+0xb4>)
 801b6e8:	2200      	movs	r2, #0
 801b6ea:	735a      	strb	r2, [r3, #13]
        break;
 801b6ec:	e007      	b.n	801b6fe <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801b6ee:	2000      	movs	r0, #0
 801b6f0:	f002 fb1c 	bl	801dd2c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801b6f4:	4b04      	ldr	r3, [pc, #16]	; (801b708 <RadioSetModem+0xb4>)
 801b6f6:	2200      	movs	r2, #0
 801b6f8:	735a      	strb	r2, [r3, #13]
        break;
 801b6fa:	e000      	b.n	801b6fe <RadioSetModem+0xaa>
        break;
 801b6fc:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801b6fe:	bf00      	nop
 801b700:	3708      	adds	r7, #8
 801b702:	46bd      	mov	sp, r7
 801b704:	bd80      	pop	{r7, pc}
 801b706:	bf00      	nop
 801b708:	20001b7c 	.word	0x20001b7c

0801b70c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801b70c:	b580      	push	{r7, lr}
 801b70e:	b082      	sub	sp, #8
 801b710:	af00      	add	r7, sp, #0
 801b712:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801b714:	6878      	ldr	r0, [r7, #4]
 801b716:	f002 fac3 	bl	801dca0 <SUBGRF_SetRfFrequency>
}
 801b71a:	bf00      	nop
 801b71c:	3708      	adds	r7, #8
 801b71e:	46bd      	mov	sp, r7
 801b720:	bd80      	pop	{r7, pc}

0801b722 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801b722:	b580      	push	{r7, lr}
 801b724:	b090      	sub	sp, #64	; 0x40
 801b726:	af0a      	add	r7, sp, #40	; 0x28
 801b728:	60f8      	str	r0, [r7, #12]
 801b72a:	60b9      	str	r1, [r7, #8]
 801b72c:	603b      	str	r3, [r7, #0]
 801b72e:	4613      	mov	r3, r2
 801b730:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801b732:	2301      	movs	r3, #1
 801b734:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801b736:	2300      	movs	r3, #0
 801b738:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801b73a:	2300      	movs	r3, #0
 801b73c:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 801b73e:	f000 fdf2 	bl	801c326 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801b742:	2000      	movs	r0, #0
 801b744:	f7ff ff86 	bl	801b654 <RadioSetModem>

    RadioSetChannel( freq );
 801b748:	68f8      	ldr	r0, [r7, #12]
 801b74a:	f7ff ffdf 	bl	801b70c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801b74e:	2301      	movs	r3, #1
 801b750:	9309      	str	r3, [sp, #36]	; 0x24
 801b752:	2300      	movs	r3, #0
 801b754:	9308      	str	r3, [sp, #32]
 801b756:	2300      	movs	r3, #0
 801b758:	9307      	str	r3, [sp, #28]
 801b75a:	2300      	movs	r3, #0
 801b75c:	9306      	str	r3, [sp, #24]
 801b75e:	2300      	movs	r3, #0
 801b760:	9305      	str	r3, [sp, #20]
 801b762:	2300      	movs	r3, #0
 801b764:	9304      	str	r3, [sp, #16]
 801b766:	2300      	movs	r3, #0
 801b768:	9303      	str	r3, [sp, #12]
 801b76a:	2300      	movs	r3, #0
 801b76c:	9302      	str	r3, [sp, #8]
 801b76e:	2303      	movs	r3, #3
 801b770:	9301      	str	r3, [sp, #4]
 801b772:	68bb      	ldr	r3, [r7, #8]
 801b774:	9300      	str	r3, [sp, #0]
 801b776:	2300      	movs	r3, #0
 801b778:	f44f 7216 	mov.w	r2, #600	; 0x258
 801b77c:	68b9      	ldr	r1, [r7, #8]
 801b77e:	2000      	movs	r0, #0
 801b780:	f000 f83c 	bl	801b7fc <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 801b784:	2000      	movs	r0, #0
 801b786:	f000 fdd5 	bl	801c334 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801b78a:	f000 ff71 	bl	801c670 <RadioGetWakeupTime>
 801b78e:	4603      	mov	r3, r0
 801b790:	4618      	mov	r0, r3
 801b792:	f7e6 fe9f 	bl	80024d4 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801b796:	f003 ffcf 	bl	801f738 <UTIL_TIMER_GetCurrentTime>
 801b79a:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801b79c:	e00d      	b.n	801b7ba <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801b79e:	2000      	movs	r0, #0
 801b7a0:	f000 feb6 	bl	801c510 <RadioRssi>
 801b7a4:	4603      	mov	r3, r0
 801b7a6:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801b7a8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801b7ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b7b0:	429a      	cmp	r2, r3
 801b7b2:	dd02      	ble.n	801b7ba <RadioIsChannelFree+0x98>
        {
            status = false;
 801b7b4:	2300      	movs	r3, #0
 801b7b6:	75fb      	strb	r3, [r7, #23]
            break;
 801b7b8:	e006      	b.n	801b7c8 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801b7ba:	6938      	ldr	r0, [r7, #16]
 801b7bc:	f003 ffce 	bl	801f75c <UTIL_TIMER_GetElapsedTime>
 801b7c0:	4602      	mov	r2, r0
 801b7c2:	683b      	ldr	r3, [r7, #0]
 801b7c4:	4293      	cmp	r3, r2
 801b7c6:	d8ea      	bhi.n	801b79e <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 801b7c8:	f000 fdad 	bl	801c326 <RadioStandby>

    return status;
 801b7cc:	7dfb      	ldrb	r3, [r7, #23]
}
 801b7ce:	4618      	mov	r0, r3
 801b7d0:	3718      	adds	r7, #24
 801b7d2:	46bd      	mov	sp, r7
 801b7d4:	bd80      	pop	{r7, pc}

0801b7d6 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801b7d6:	b580      	push	{r7, lr}
 801b7d8:	b082      	sub	sp, #8
 801b7da:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 801b7dc:	2300      	movs	r3, #0
 801b7de:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801b7e0:	2300      	movs	r3, #0
 801b7e2:	2200      	movs	r2, #0
 801b7e4:	2100      	movs	r1, #0
 801b7e6:	2000      	movs	r0, #0
 801b7e8:	f002 f9fe 	bl	801dbe8 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801b7ec:	f001 ffaf 	bl	801d74e <SUBGRF_GetRandom>
 801b7f0:	6078      	str	r0, [r7, #4]

    return rnd;
 801b7f2:	687b      	ldr	r3, [r7, #4]
}
 801b7f4:	4618      	mov	r0, r3
 801b7f6:	3708      	adds	r7, #8
 801b7f8:	46bd      	mov	sp, r7
 801b7fa:	bd80      	pop	{r7, pc}

0801b7fc <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801b7fc:	b580      	push	{r7, lr}
 801b7fe:	b08a      	sub	sp, #40	; 0x28
 801b800:	af00      	add	r7, sp, #0
 801b802:	60b9      	str	r1, [r7, #8]
 801b804:	607a      	str	r2, [r7, #4]
 801b806:	461a      	mov	r2, r3
 801b808:	4603      	mov	r3, r0
 801b80a:	73fb      	strb	r3, [r7, #15]
 801b80c:	4613      	mov	r3, r2
 801b80e:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 801b810:	4ab9      	ldr	r2, [pc, #740]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801b812:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b816:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 801b818:	f003 f87d 	bl	801e916 <RFW_DeInit>
    if( rxContinuous == true )
 801b81c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b820:	2b00      	cmp	r3, #0
 801b822:	d001      	beq.n	801b828 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 801b824:	2300      	movs	r3, #0
 801b826:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 801b828:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801b82c:	2b00      	cmp	r3, #0
 801b82e:	d004      	beq.n	801b83a <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801b830:	4ab2      	ldr	r2, [pc, #712]	; (801bafc <RadioSetRxConfig+0x300>)
 801b832:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801b836:	7013      	strb	r3, [r2, #0]
 801b838:	e002      	b.n	801b840 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801b83a:	4bb0      	ldr	r3, [pc, #704]	; (801bafc <RadioSetRxConfig+0x300>)
 801b83c:	22ff      	movs	r2, #255	; 0xff
 801b83e:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801b840:	7bfb      	ldrb	r3, [r7, #15]
 801b842:	2b05      	cmp	r3, #5
 801b844:	d009      	beq.n	801b85a <RadioSetRxConfig+0x5e>
 801b846:	2b05      	cmp	r3, #5
 801b848:	f300 81d7 	bgt.w	801bbfa <RadioSetRxConfig+0x3fe>
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	f000 80bf 	beq.w	801b9d0 <RadioSetRxConfig+0x1d4>
 801b852:	2b01      	cmp	r3, #1
 801b854:	f000 8124 	beq.w	801baa0 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801b858:	e1cf      	b.n	801bbfa <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801b85a:	2001      	movs	r0, #1
 801b85c:	f002 f8bc 	bl	801d9d8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b860:	4ba5      	ldr	r3, [pc, #660]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801b862:	2200      	movs	r2, #0
 801b864:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801b868:	4aa3      	ldr	r2, [pc, #652]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801b86a:	687b      	ldr	r3, [r7, #4]
 801b86c:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801b86e:	4ba2      	ldr	r3, [pc, #648]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801b870:	2209      	movs	r2, #9
 801b872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801b876:	4ba0      	ldr	r3, [pc, #640]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801b878:	f44f 7248 	mov.w	r2, #800	; 0x320
 801b87c:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801b87e:	68b8      	ldr	r0, [r7, #8]
 801b880:	f002 ff7c 	bl	801e77c <SUBGRF_GetFskBandwidthRegValue>
 801b884:	4603      	mov	r3, r0
 801b886:	461a      	mov	r2, r3
 801b888:	4b9b      	ldr	r3, [pc, #620]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801b88a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b88e:	4b9a      	ldr	r3, [pc, #616]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801b890:	2200      	movs	r2, #0
 801b892:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801b894:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801b896:	00db      	lsls	r3, r3, #3
 801b898:	b29a      	uxth	r2, r3
 801b89a:	4b97      	ldr	r3, [pc, #604]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801b89c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801b89e:	4b96      	ldr	r3, [pc, #600]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801b8a0:	2200      	movs	r2, #0
 801b8a2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 801b8a4:	4b94      	ldr	r3, [pc, #592]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801b8a6:	2210      	movs	r2, #16
 801b8a8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801b8aa:	4b93      	ldr	r3, [pc, #588]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801b8ac:	2200      	movs	r2, #0
 801b8ae:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801b8b0:	4b91      	ldr	r3, [pc, #580]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801b8b2:	2200      	movs	r2, #0
 801b8b4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801b8b6:	4b91      	ldr	r3, [pc, #580]	; (801bafc <RadioSetRxConfig+0x300>)
 801b8b8:	781a      	ldrb	r2, [r3, #0]
 801b8ba:	4b8f      	ldr	r3, [pc, #572]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801b8bc:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801b8be:	4b8e      	ldr	r3, [pc, #568]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801b8c0:	2201      	movs	r2, #1
 801b8c2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 801b8c4:	4b8c      	ldr	r3, [pc, #560]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801b8c6:	2200      	movs	r2, #0
 801b8c8:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801b8ca:	2005      	movs	r0, #5
 801b8cc:	f7ff fec2 	bl	801b654 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b8d0:	488b      	ldr	r0, [pc, #556]	; (801bb00 <RadioSetRxConfig+0x304>)
 801b8d2:	f002 fb1f 	bl	801df14 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b8d6:	488b      	ldr	r0, [pc, #556]	; (801bb04 <RadioSetRxConfig+0x308>)
 801b8d8:	f002 fbee 	bl	801e0b8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801b8dc:	4a8a      	ldr	r2, [pc, #552]	; (801bb08 <RadioSetRxConfig+0x30c>)
 801b8de:	f107 031c 	add.w	r3, r7, #28
 801b8e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b8e6:	e883 0003 	stmia.w	r3, {r0, r1}
 801b8ea:	f107 031c 	add.w	r3, r7, #28
 801b8ee:	4618      	mov	r0, r3
 801b8f0:	f001 feab 	bl	801d64a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801b8f4:	f240 10ff 	movw	r0, #511	; 0x1ff
 801b8f8:	f001 fef6 	bl	801d6e8 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 801b8fc:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801b900:	f000 fe25 	bl	801c54e <RadioRead>
 801b904:	4603      	mov	r3, r0
 801b906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801b90a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b90e:	f023 0310 	bic.w	r3, r3, #16
 801b912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 801b916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b91a:	4619      	mov	r1, r3
 801b91c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801b920:	f000 fe03 	bl	801c52a <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 801b924:	2104      	movs	r1, #4
 801b926:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801b92a:	f000 fdfe 	bl	801c52a <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801b92e:	f640 009b 	movw	r0, #2203	; 0x89b
 801b932:	f000 fe0c 	bl	801c54e <RadioRead>
 801b936:	4603      	mov	r3, r0
 801b938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801b93c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b940:	f023 031c 	bic.w	r3, r3, #28
 801b944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 801b948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b94c:	f043 0308 	orr.w	r3, r3, #8
 801b950:	b2db      	uxtb	r3, r3
 801b952:	4619      	mov	r1, r3
 801b954:	f640 009b 	movw	r0, #2203	; 0x89b
 801b958:	f000 fde7 	bl	801c52a <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 801b95c:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801b960:	f000 fdf5 	bl	801c54e <RadioRead>
 801b964:	4603      	mov	r3, r0
 801b966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801b96a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b96e:	f023 0318 	bic.w	r3, r3, #24
 801b972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801b976:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b97a:	f043 0318 	orr.w	r3, r3, #24
 801b97e:	b2db      	uxtb	r3, r3
 801b980:	4619      	mov	r1, r3
 801b982:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801b986:	f000 fdd0 	bl	801c52a <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801b98a:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801b98e:	f000 fdde 	bl	801c54e <RadioRead>
 801b992:	4603      	mov	r3, r0
 801b994:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801b998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b99c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b9a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 801b9a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b9a8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801b9ac:	b2db      	uxtb	r3, r3
 801b9ae:	4619      	mov	r1, r3
 801b9b0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801b9b4:	f000 fdb9 	bl	801c52a <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801b9b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801b9ba:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801b9be:	fb02 f303 	mul.w	r3, r2, r3
 801b9c2:	461a      	mov	r2, r3
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	fbb2 f3f3 	udiv	r3, r2, r3
 801b9ca:	4a4b      	ldr	r2, [pc, #300]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801b9cc:	6093      	str	r3, [r2, #8]
            break;
 801b9ce:	e115      	b.n	801bbfc <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801b9d0:	2000      	movs	r0, #0
 801b9d2:	f002 f801 	bl	801d9d8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b9d6:	4b48      	ldr	r3, [pc, #288]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801b9d8:	2200      	movs	r2, #0
 801b9da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801b9de:	4a46      	ldr	r2, [pc, #280]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801b9e4:	4b44      	ldr	r3, [pc, #272]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801b9e6:	220b      	movs	r2, #11
 801b9e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801b9ec:	68b8      	ldr	r0, [r7, #8]
 801b9ee:	f002 fec5 	bl	801e77c <SUBGRF_GetFskBandwidthRegValue>
 801b9f2:	4603      	mov	r3, r0
 801b9f4:	461a      	mov	r2, r3
 801b9f6:	4b40      	ldr	r3, [pc, #256]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801b9f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b9fc:	4b3e      	ldr	r3, [pc, #248]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801b9fe:	2200      	movs	r2, #0
 801ba00:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801ba02:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801ba04:	00db      	lsls	r3, r3, #3
 801ba06:	b29a      	uxth	r2, r3
 801ba08:	4b3b      	ldr	r3, [pc, #236]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801ba0a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801ba0c:	4b3a      	ldr	r3, [pc, #232]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801ba0e:	2204      	movs	r2, #4
 801ba10:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801ba12:	4b39      	ldr	r3, [pc, #228]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801ba14:	2218      	movs	r2, #24
 801ba16:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801ba18:	4b37      	ldr	r3, [pc, #220]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801ba1a:	2200      	movs	r2, #0
 801ba1c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801ba1e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801ba22:	f083 0301 	eor.w	r3, r3, #1
 801ba26:	b2db      	uxtb	r3, r3
 801ba28:	461a      	mov	r2, r3
 801ba2a:	4b33      	ldr	r3, [pc, #204]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801ba2c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801ba2e:	4b33      	ldr	r3, [pc, #204]	; (801bafc <RadioSetRxConfig+0x300>)
 801ba30:	781a      	ldrb	r2, [r3, #0]
 801ba32:	4b31      	ldr	r3, [pc, #196]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801ba34:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801ba36:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801ba3a:	2b00      	cmp	r3, #0
 801ba3c:	d003      	beq.n	801ba46 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801ba3e:	4b2e      	ldr	r3, [pc, #184]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801ba40:	22f2      	movs	r2, #242	; 0xf2
 801ba42:	75da      	strb	r2, [r3, #23]
 801ba44:	e002      	b.n	801ba4c <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801ba46:	4b2c      	ldr	r3, [pc, #176]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801ba48:	2201      	movs	r2, #1
 801ba4a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801ba4c:	4b2a      	ldr	r3, [pc, #168]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801ba4e:	2201      	movs	r2, #1
 801ba50:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801ba52:	f000 fc68 	bl	801c326 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801ba56:	2000      	movs	r0, #0
 801ba58:	f7ff fdfc 	bl	801b654 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ba5c:	4828      	ldr	r0, [pc, #160]	; (801bb00 <RadioSetRxConfig+0x304>)
 801ba5e:	f002 fa59 	bl	801df14 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ba62:	4828      	ldr	r0, [pc, #160]	; (801bb04 <RadioSetRxConfig+0x308>)
 801ba64:	f002 fb28 	bl	801e0b8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801ba68:	4a28      	ldr	r2, [pc, #160]	; (801bb0c <RadioSetRxConfig+0x310>)
 801ba6a:	f107 0314 	add.w	r3, r7, #20
 801ba6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ba72:	e883 0003 	stmia.w	r3, {r0, r1}
 801ba76:	f107 0314 	add.w	r3, r7, #20
 801ba7a:	4618      	mov	r0, r3
 801ba7c:	f001 fde5 	bl	801d64a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801ba80:	f240 10ff 	movw	r0, #511	; 0x1ff
 801ba84:	f001 fe30 	bl	801d6e8 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801ba88:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801ba8a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801ba8e:	fb02 f303 	mul.w	r3, r2, r3
 801ba92:	461a      	mov	r2, r3
 801ba94:	687b      	ldr	r3, [r7, #4]
 801ba96:	fbb2 f3f3 	udiv	r3, r2, r3
 801ba9a:	4a17      	ldr	r2, [pc, #92]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801ba9c:	6093      	str	r3, [r2, #8]
            break;
 801ba9e:	e0ad      	b.n	801bbfc <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801baa0:	2000      	movs	r0, #0
 801baa2:	f001 ff99 	bl	801d9d8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801baa6:	4b14      	ldr	r3, [pc, #80]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801baa8:	2201      	movs	r2, #1
 801baaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801baae:	687b      	ldr	r3, [r7, #4]
 801bab0:	b2da      	uxtb	r2, r3
 801bab2:	4b11      	ldr	r3, [pc, #68]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801bab4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801bab8:	4a15      	ldr	r2, [pc, #84]	; (801bb10 <RadioSetRxConfig+0x314>)
 801baba:	68bb      	ldr	r3, [r7, #8]
 801babc:	4413      	add	r3, r2
 801babe:	781a      	ldrb	r2, [r3, #0]
 801bac0:	4b0d      	ldr	r3, [pc, #52]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801bac2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801bac6:	4a0c      	ldr	r2, [pc, #48]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801bac8:	7bbb      	ldrb	r3, [r7, #14]
 801baca:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801bace:	68bb      	ldr	r3, [r7, #8]
 801bad0:	2b00      	cmp	r3, #0
 801bad2:	d105      	bne.n	801bae0 <RadioSetRxConfig+0x2e4>
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	2b0b      	cmp	r3, #11
 801bad8:	d008      	beq.n	801baec <RadioSetRxConfig+0x2f0>
 801bada:	687b      	ldr	r3, [r7, #4]
 801badc:	2b0c      	cmp	r3, #12
 801bade:	d005      	beq.n	801baec <RadioSetRxConfig+0x2f0>
 801bae0:	68bb      	ldr	r3, [r7, #8]
 801bae2:	2b01      	cmp	r3, #1
 801bae4:	d116      	bne.n	801bb14 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	2b0c      	cmp	r3, #12
 801baea:	d113      	bne.n	801bb14 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801baec:	4b02      	ldr	r3, [pc, #8]	; (801baf8 <RadioSetRxConfig+0x2fc>)
 801baee:	2201      	movs	r2, #1
 801baf0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801baf4:	e012      	b.n	801bb1c <RadioSetRxConfig+0x320>
 801baf6:	bf00      	nop
 801baf8:	20001b7c 	.word	0x20001b7c
 801bafc:	20000134 	.word	0x20000134
 801bb00:	20001bb4 	.word	0x20001bb4
 801bb04:	20001b8a 	.word	0x20001b8a
 801bb08:	080207dc 	.word	0x080207dc
 801bb0c:	080207e4 	.word	0x080207e4
 801bb10:	08020eb8 	.word	0x08020eb8
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801bb14:	4b3b      	ldr	r3, [pc, #236]	; (801bc04 <RadioSetRxConfig+0x408>)
 801bb16:	2200      	movs	r2, #0
 801bb18:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801bb1c:	4b39      	ldr	r3, [pc, #228]	; (801bc04 <RadioSetRxConfig+0x408>)
 801bb1e:	2201      	movs	r2, #1
 801bb20:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801bb22:	4b38      	ldr	r3, [pc, #224]	; (801bc04 <RadioSetRxConfig+0x408>)
 801bb24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801bb28:	2b05      	cmp	r3, #5
 801bb2a:	d004      	beq.n	801bb36 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801bb2c:	4b35      	ldr	r3, [pc, #212]	; (801bc04 <RadioSetRxConfig+0x408>)
 801bb2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801bb32:	2b06      	cmp	r3, #6
 801bb34:	d10a      	bne.n	801bb4c <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801bb36:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bb38:	2b0b      	cmp	r3, #11
 801bb3a:	d803      	bhi.n	801bb44 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801bb3c:	4b31      	ldr	r3, [pc, #196]	; (801bc04 <RadioSetRxConfig+0x408>)
 801bb3e:	220c      	movs	r2, #12
 801bb40:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801bb42:	e006      	b.n	801bb52 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801bb44:	4a2f      	ldr	r2, [pc, #188]	; (801bc04 <RadioSetRxConfig+0x408>)
 801bb46:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bb48:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801bb4a:	e002      	b.n	801bb52 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801bb4c:	4a2d      	ldr	r2, [pc, #180]	; (801bc04 <RadioSetRxConfig+0x408>)
 801bb4e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bb50:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801bb52:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801bb56:	4b2b      	ldr	r3, [pc, #172]	; (801bc04 <RadioSetRxConfig+0x408>)
 801bb58:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801bb5a:	4b2b      	ldr	r3, [pc, #172]	; (801bc08 <RadioSetRxConfig+0x40c>)
 801bb5c:	781a      	ldrb	r2, [r3, #0]
 801bb5e:	4b29      	ldr	r3, [pc, #164]	; (801bc04 <RadioSetRxConfig+0x408>)
 801bb60:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801bb62:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801bb66:	4b27      	ldr	r3, [pc, #156]	; (801bc04 <RadioSetRxConfig+0x408>)
 801bb68:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801bb6c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801bb70:	4b24      	ldr	r3, [pc, #144]	; (801bc04 <RadioSetRxConfig+0x408>)
 801bb72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801bb76:	f000 fbd6 	bl	801c326 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801bb7a:	2001      	movs	r0, #1
 801bb7c:	f7ff fd6a 	bl	801b654 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bb80:	4822      	ldr	r0, [pc, #136]	; (801bc0c <RadioSetRxConfig+0x410>)
 801bb82:	f002 f9c7 	bl	801df14 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bb86:	4822      	ldr	r0, [pc, #136]	; (801bc10 <RadioSetRxConfig+0x414>)
 801bb88:	f002 fa96 	bl	801e0b8 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801bb8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801bb8e:	b2db      	uxtb	r3, r3
 801bb90:	4618      	mov	r0, r3
 801bb92:	f001 ff30 	bl	801d9f6 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 801bb96:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801bb9a:	f002 fbe9 	bl	801e370 <SUBGRF_ReadRegister>
 801bb9e:	4603      	mov	r3, r0
 801bba0:	f003 0301 	and.w	r3, r3, #1
 801bba4:	b2db      	uxtb	r3, r3
 801bba6:	4619      	mov	r1, r3
 801bba8:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801bbac:	f002 fbcc 	bl	801e348 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801bbb0:	4b14      	ldr	r3, [pc, #80]	; (801bc04 <RadioSetRxConfig+0x408>)
 801bbb2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801bbb6:	2b01      	cmp	r3, #1
 801bbb8:	d10d      	bne.n	801bbd6 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801bbba:	f240 7036 	movw	r0, #1846	; 0x736
 801bbbe:	f002 fbd7 	bl	801e370 <SUBGRF_ReadRegister>
 801bbc2:	4603      	mov	r3, r0
 801bbc4:	f023 0304 	bic.w	r3, r3, #4
 801bbc8:	b2db      	uxtb	r3, r3
 801bbca:	4619      	mov	r1, r3
 801bbcc:	f240 7036 	movw	r0, #1846	; 0x736
 801bbd0:	f002 fbba 	bl	801e348 <SUBGRF_WriteRegister>
 801bbd4:	e00c      	b.n	801bbf0 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801bbd6:	f240 7036 	movw	r0, #1846	; 0x736
 801bbda:	f002 fbc9 	bl	801e370 <SUBGRF_ReadRegister>
 801bbde:	4603      	mov	r3, r0
 801bbe0:	f043 0304 	orr.w	r3, r3, #4
 801bbe4:	b2db      	uxtb	r3, r3
 801bbe6:	4619      	mov	r1, r3
 801bbe8:	f240 7036 	movw	r0, #1846	; 0x736
 801bbec:	f002 fbac 	bl	801e348 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801bbf0:	4b04      	ldr	r3, [pc, #16]	; (801bc04 <RadioSetRxConfig+0x408>)
 801bbf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bbf6:	609a      	str	r2, [r3, #8]
            break;
 801bbf8:	e000      	b.n	801bbfc <RadioSetRxConfig+0x400>
            break;
 801bbfa:	bf00      	nop
    }
}
 801bbfc:	bf00      	nop
 801bbfe:	3728      	adds	r7, #40	; 0x28
 801bc00:	46bd      	mov	sp, r7
 801bc02:	bd80      	pop	{r7, pc}
 801bc04:	20001b7c 	.word	0x20001b7c
 801bc08:	20000134 	.word	0x20000134
 801bc0c:	20001bb4 	.word	0x20001bb4
 801bc10:	20001b8a 	.word	0x20001b8a

0801bc14 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801bc14:	b580      	push	{r7, lr}
 801bc16:	b086      	sub	sp, #24
 801bc18:	af00      	add	r7, sp, #0
 801bc1a:	60ba      	str	r2, [r7, #8]
 801bc1c:	607b      	str	r3, [r7, #4]
 801bc1e:	4603      	mov	r3, r0
 801bc20:	73fb      	strb	r3, [r7, #15]
 801bc22:	460b      	mov	r3, r1
 801bc24:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 801bc26:	f002 fe76 	bl	801e916 <RFW_DeInit>
    switch( modem )
 801bc2a:	7bfb      	ldrb	r3, [r7, #15]
 801bc2c:	2b04      	cmp	r3, #4
 801bc2e:	f000 80c7 	beq.w	801bdc0 <RadioSetTxConfig+0x1ac>
 801bc32:	2b04      	cmp	r3, #4
 801bc34:	f300 80d6 	bgt.w	801bde4 <RadioSetTxConfig+0x1d0>
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	d002      	beq.n	801bc42 <RadioSetTxConfig+0x2e>
 801bc3c:	2b01      	cmp	r3, #1
 801bc3e:	d059      	beq.n	801bcf4 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801bc40:	e0d0      	b.n	801bde4 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bc42:	4b77      	ldr	r3, [pc, #476]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bc44:	2200      	movs	r2, #0
 801bc46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801bc4a:	4a75      	ldr	r2, [pc, #468]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bc4c:	6a3b      	ldr	r3, [r7, #32]
 801bc4e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801bc50:	4b73      	ldr	r3, [pc, #460]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bc52:	220b      	movs	r2, #11
 801bc54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801bc58:	6878      	ldr	r0, [r7, #4]
 801bc5a:	f002 fd8f 	bl	801e77c <SUBGRF_GetFskBandwidthRegValue>
 801bc5e:	4603      	mov	r3, r0
 801bc60:	461a      	mov	r2, r3
 801bc62:	4b6f      	ldr	r3, [pc, #444]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bc64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801bc68:	4a6d      	ldr	r2, [pc, #436]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bc6a:	68bb      	ldr	r3, [r7, #8]
 801bc6c:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bc6e:	4b6c      	ldr	r3, [pc, #432]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bc70:	2200      	movs	r2, #0
 801bc72:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801bc74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801bc76:	00db      	lsls	r3, r3, #3
 801bc78:	b29a      	uxth	r2, r3
 801bc7a:	4b69      	ldr	r3, [pc, #420]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bc7c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801bc7e:	4b68      	ldr	r3, [pc, #416]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bc80:	2204      	movs	r2, #4
 801bc82:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801bc84:	4b66      	ldr	r3, [pc, #408]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bc86:	2218      	movs	r2, #24
 801bc88:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801bc8a:	4b65      	ldr	r3, [pc, #404]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bc8c:	2200      	movs	r2, #0
 801bc8e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801bc90:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801bc94:	f083 0301 	eor.w	r3, r3, #1
 801bc98:	b2db      	uxtb	r3, r3
 801bc9a:	461a      	mov	r2, r3
 801bc9c:	4b60      	ldr	r3, [pc, #384]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bc9e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801bca0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801bca4:	2b00      	cmp	r3, #0
 801bca6:	d003      	beq.n	801bcb0 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801bca8:	4b5d      	ldr	r3, [pc, #372]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bcaa:	22f2      	movs	r2, #242	; 0xf2
 801bcac:	75da      	strb	r2, [r3, #23]
 801bcae:	e002      	b.n	801bcb6 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801bcb0:	4b5b      	ldr	r3, [pc, #364]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bcb2:	2201      	movs	r2, #1
 801bcb4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801bcb6:	4b5a      	ldr	r3, [pc, #360]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bcb8:	2201      	movs	r2, #1
 801bcba:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801bcbc:	f000 fb33 	bl	801c326 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801bcc0:	2000      	movs	r0, #0
 801bcc2:	f7ff fcc7 	bl	801b654 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bcc6:	4857      	ldr	r0, [pc, #348]	; (801be24 <RadioSetTxConfig+0x210>)
 801bcc8:	f002 f924 	bl	801df14 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bccc:	4856      	ldr	r0, [pc, #344]	; (801be28 <RadioSetTxConfig+0x214>)
 801bcce:	f002 f9f3 	bl	801e0b8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801bcd2:	4a56      	ldr	r2, [pc, #344]	; (801be2c <RadioSetTxConfig+0x218>)
 801bcd4:	f107 0310 	add.w	r3, r7, #16
 801bcd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bcdc:	e883 0003 	stmia.w	r3, {r0, r1}
 801bce0:	f107 0310 	add.w	r3, r7, #16
 801bce4:	4618      	mov	r0, r3
 801bce6:	f001 fcb0 	bl	801d64a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801bcea:	f240 10ff 	movw	r0, #511	; 0x1ff
 801bcee:	f001 fcfb 	bl	801d6e8 <SUBGRF_SetWhiteningSeed>
            break;
 801bcf2:	e078      	b.n	801bde6 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801bcf4:	4b4a      	ldr	r3, [pc, #296]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bcf6:	2201      	movs	r2, #1
 801bcf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801bcfc:	6a3b      	ldr	r3, [r7, #32]
 801bcfe:	b2da      	uxtb	r2, r3
 801bd00:	4b47      	ldr	r3, [pc, #284]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bd02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801bd06:	4a4a      	ldr	r2, [pc, #296]	; (801be30 <RadioSetTxConfig+0x21c>)
 801bd08:	687b      	ldr	r3, [r7, #4]
 801bd0a:	4413      	add	r3, r2
 801bd0c:	781a      	ldrb	r2, [r3, #0]
 801bd0e:	4b44      	ldr	r3, [pc, #272]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bd10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801bd14:	4a42      	ldr	r2, [pc, #264]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bd16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801bd1a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801bd1e:	687b      	ldr	r3, [r7, #4]
 801bd20:	2b00      	cmp	r3, #0
 801bd22:	d105      	bne.n	801bd30 <RadioSetTxConfig+0x11c>
 801bd24:	6a3b      	ldr	r3, [r7, #32]
 801bd26:	2b0b      	cmp	r3, #11
 801bd28:	d008      	beq.n	801bd3c <RadioSetTxConfig+0x128>
 801bd2a:	6a3b      	ldr	r3, [r7, #32]
 801bd2c:	2b0c      	cmp	r3, #12
 801bd2e:	d005      	beq.n	801bd3c <RadioSetTxConfig+0x128>
 801bd30:	687b      	ldr	r3, [r7, #4]
 801bd32:	2b01      	cmp	r3, #1
 801bd34:	d107      	bne.n	801bd46 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801bd36:	6a3b      	ldr	r3, [r7, #32]
 801bd38:	2b0c      	cmp	r3, #12
 801bd3a:	d104      	bne.n	801bd46 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801bd3c:	4b38      	ldr	r3, [pc, #224]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bd3e:	2201      	movs	r2, #1
 801bd40:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801bd44:	e003      	b.n	801bd4e <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801bd46:	4b36      	ldr	r3, [pc, #216]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bd48:	2200      	movs	r2, #0
 801bd4a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801bd4e:	4b34      	ldr	r3, [pc, #208]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bd50:	2201      	movs	r2, #1
 801bd52:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801bd54:	4b32      	ldr	r3, [pc, #200]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bd56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801bd5a:	2b05      	cmp	r3, #5
 801bd5c:	d004      	beq.n	801bd68 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801bd5e:	4b30      	ldr	r3, [pc, #192]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bd60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801bd64:	2b06      	cmp	r3, #6
 801bd66:	d10a      	bne.n	801bd7e <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801bd68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801bd6a:	2b0b      	cmp	r3, #11
 801bd6c:	d803      	bhi.n	801bd76 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801bd6e:	4b2c      	ldr	r3, [pc, #176]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bd70:	220c      	movs	r2, #12
 801bd72:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801bd74:	e006      	b.n	801bd84 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801bd76:	4a2a      	ldr	r2, [pc, #168]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bd78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801bd7a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801bd7c:	e002      	b.n	801bd84 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801bd7e:	4a28      	ldr	r2, [pc, #160]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bd80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801bd82:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801bd84:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801bd88:	4b25      	ldr	r3, [pc, #148]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bd8a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801bd8c:	4b29      	ldr	r3, [pc, #164]	; (801be34 <RadioSetTxConfig+0x220>)
 801bd8e:	781a      	ldrb	r2, [r3, #0]
 801bd90:	4b23      	ldr	r3, [pc, #140]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bd92:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801bd94:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801bd98:	4b21      	ldr	r3, [pc, #132]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bd9a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801bd9e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801bda2:	4b1f      	ldr	r3, [pc, #124]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bda4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801bda8:	f000 fabd 	bl	801c326 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801bdac:	2001      	movs	r0, #1
 801bdae:	f7ff fc51 	bl	801b654 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bdb2:	481c      	ldr	r0, [pc, #112]	; (801be24 <RadioSetTxConfig+0x210>)
 801bdb4:	f002 f8ae 	bl	801df14 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bdb8:	481b      	ldr	r0, [pc, #108]	; (801be28 <RadioSetTxConfig+0x214>)
 801bdba:	f002 f97d 	bl	801e0b8 <SUBGRF_SetPacketParams>
            break;
 801bdbe:	e012      	b.n	801bde6 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801bdc0:	2004      	movs	r0, #4
 801bdc2:	f7ff fc47 	bl	801b654 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801bdc6:	4b16      	ldr	r3, [pc, #88]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bdc8:	2202      	movs	r2, #2
 801bdca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801bdce:	4a14      	ldr	r2, [pc, #80]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bdd0:	6a3b      	ldr	r3, [r7, #32]
 801bdd2:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801bdd4:	4b12      	ldr	r3, [pc, #72]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bdd6:	2216      	movs	r2, #22
 801bdd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bddc:	4811      	ldr	r0, [pc, #68]	; (801be24 <RadioSetTxConfig+0x210>)
 801bdde:	f002 f899 	bl	801df14 <SUBGRF_SetModulationParams>
            break;
 801bde2:	e000      	b.n	801bde6 <RadioSetTxConfig+0x1d2>
            break;
 801bde4:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801bde6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801bdea:	4618      	mov	r0, r3
 801bdec:	f002 fbc8 	bl	801e580 <SUBGRF_SetRfTxPower>
 801bdf0:	4603      	mov	r3, r0
 801bdf2:	461a      	mov	r2, r3
 801bdf4:	4b0a      	ldr	r3, [pc, #40]	; (801be20 <RadioSetTxConfig+0x20c>)
 801bdf6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801bdfa:	210e      	movs	r1, #14
 801bdfc:	f640 101f 	movw	r0, #2335	; 0x91f
 801be00:	f002 faa2 	bl	801e348 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801be04:	4b06      	ldr	r3, [pc, #24]	; (801be20 <RadioSetTxConfig+0x20c>)
 801be06:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801be0a:	4618      	mov	r0, r3
 801be0c:	f002 fd97 	bl	801e93e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801be10:	4a03      	ldr	r2, [pc, #12]	; (801be20 <RadioSetTxConfig+0x20c>)
 801be12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801be14:	6053      	str	r3, [r2, #4]
}
 801be16:	bf00      	nop
 801be18:	3718      	adds	r7, #24
 801be1a:	46bd      	mov	sp, r7
 801be1c:	bd80      	pop	{r7, pc}
 801be1e:	bf00      	nop
 801be20:	20001b7c 	.word	0x20001b7c
 801be24:	20001bb4 	.word	0x20001bb4
 801be28:	20001b8a 	.word	0x20001b8a
 801be2c:	080207e4 	.word	0x080207e4
 801be30:	08020eb8 	.word	0x08020eb8
 801be34:	20000134 	.word	0x20000134

0801be38 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801be38:	b480      	push	{r7}
 801be3a:	b083      	sub	sp, #12
 801be3c:	af00      	add	r7, sp, #0
 801be3e:	6078      	str	r0, [r7, #4]
    return true;
 801be40:	2301      	movs	r3, #1
}
 801be42:	4618      	mov	r0, r3
 801be44:	370c      	adds	r7, #12
 801be46:	46bd      	mov	sp, r7
 801be48:	bc80      	pop	{r7}
 801be4a:	4770      	bx	lr

0801be4c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801be4c:	b480      	push	{r7}
 801be4e:	b085      	sub	sp, #20
 801be50:	af00      	add	r7, sp, #0
 801be52:	4603      	mov	r3, r0
 801be54:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801be56:	2300      	movs	r3, #0
 801be58:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801be5a:	79fb      	ldrb	r3, [r7, #7]
 801be5c:	2b0a      	cmp	r3, #10
 801be5e:	d83e      	bhi.n	801bede <RadioGetLoRaBandwidthInHz+0x92>
 801be60:	a201      	add	r2, pc, #4	; (adr r2, 801be68 <RadioGetLoRaBandwidthInHz+0x1c>)
 801be62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801be66:	bf00      	nop
 801be68:	0801be95 	.word	0x0801be95
 801be6c:	0801bea5 	.word	0x0801bea5
 801be70:	0801beb5 	.word	0x0801beb5
 801be74:	0801bec5 	.word	0x0801bec5
 801be78:	0801becd 	.word	0x0801becd
 801be7c:	0801bed3 	.word	0x0801bed3
 801be80:	0801bed9 	.word	0x0801bed9
 801be84:	0801bedf 	.word	0x0801bedf
 801be88:	0801be9d 	.word	0x0801be9d
 801be8c:	0801bead 	.word	0x0801bead
 801be90:	0801bebd 	.word	0x0801bebd
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801be94:	f641 6384 	movw	r3, #7812	; 0x1e84
 801be98:	60fb      	str	r3, [r7, #12]
        break;
 801be9a:	e020      	b.n	801bede <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801be9c:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801bea0:	60fb      	str	r3, [r7, #12]
        break;
 801bea2:	e01c      	b.n	801bede <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801bea4:	f643 5309 	movw	r3, #15625	; 0x3d09
 801bea8:	60fb      	str	r3, [r7, #12]
        break;
 801beaa:	e018      	b.n	801bede <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801beac:	f245 1361 	movw	r3, #20833	; 0x5161
 801beb0:	60fb      	str	r3, [r7, #12]
        break;
 801beb2:	e014      	b.n	801bede <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801beb4:	f647 2312 	movw	r3, #31250	; 0x7a12
 801beb8:	60fb      	str	r3, [r7, #12]
        break;
 801beba:	e010      	b.n	801bede <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801bebc:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801bec0:	60fb      	str	r3, [r7, #12]
        break;
 801bec2:	e00c      	b.n	801bede <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801bec4:	f24f 4324 	movw	r3, #62500	; 0xf424
 801bec8:	60fb      	str	r3, [r7, #12]
        break;
 801beca:	e008      	b.n	801bede <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801becc:	4b07      	ldr	r3, [pc, #28]	; (801beec <RadioGetLoRaBandwidthInHz+0xa0>)
 801bece:	60fb      	str	r3, [r7, #12]
        break;
 801bed0:	e005      	b.n	801bede <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801bed2:	4b07      	ldr	r3, [pc, #28]	; (801bef0 <RadioGetLoRaBandwidthInHz+0xa4>)
 801bed4:	60fb      	str	r3, [r7, #12]
        break;
 801bed6:	e002      	b.n	801bede <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801bed8:	4b06      	ldr	r3, [pc, #24]	; (801bef4 <RadioGetLoRaBandwidthInHz+0xa8>)
 801beda:	60fb      	str	r3, [r7, #12]
        break;
 801bedc:	bf00      	nop
    }

    return bandwidthInHz;
 801bede:	68fb      	ldr	r3, [r7, #12]
}
 801bee0:	4618      	mov	r0, r3
 801bee2:	3714      	adds	r7, #20
 801bee4:	46bd      	mov	sp, r7
 801bee6:	bc80      	pop	{r7}
 801bee8:	4770      	bx	lr
 801beea:	bf00      	nop
 801beec:	0001e848 	.word	0x0001e848
 801bef0:	0003d090 	.word	0x0003d090
 801bef4:	0007a120 	.word	0x0007a120

0801bef8 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801bef8:	b480      	push	{r7}
 801befa:	b083      	sub	sp, #12
 801befc:	af00      	add	r7, sp, #0
 801befe:	6078      	str	r0, [r7, #4]
 801bf00:	4608      	mov	r0, r1
 801bf02:	4611      	mov	r1, r2
 801bf04:	461a      	mov	r2, r3
 801bf06:	4603      	mov	r3, r0
 801bf08:	70fb      	strb	r3, [r7, #3]
 801bf0a:	460b      	mov	r3, r1
 801bf0c:	803b      	strh	r3, [r7, #0]
 801bf0e:	4613      	mov	r3, r2
 801bf10:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 801bf12:	883b      	ldrh	r3, [r7, #0]
 801bf14:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801bf16:	78ba      	ldrb	r2, [r7, #2]
 801bf18:	f082 0201 	eor.w	r2, r2, #1
 801bf1c:	b2d2      	uxtb	r2, r2
 801bf1e:	2a00      	cmp	r2, #0
 801bf20:	d001      	beq.n	801bf26 <RadioGetGfskTimeOnAirNumerator+0x2e>
 801bf22:	2208      	movs	r2, #8
 801bf24:	e000      	b.n	801bf28 <RadioGetGfskTimeOnAirNumerator+0x30>
 801bf26:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801bf28:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801bf2a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801bf2e:	7c3b      	ldrb	r3, [r7, #16]
 801bf30:	7d39      	ldrb	r1, [r7, #20]
 801bf32:	2900      	cmp	r1, #0
 801bf34:	d001      	beq.n	801bf3a <RadioGetGfskTimeOnAirNumerator+0x42>
 801bf36:	2102      	movs	r1, #2
 801bf38:	e000      	b.n	801bf3c <RadioGetGfskTimeOnAirNumerator+0x44>
 801bf3a:	2100      	movs	r1, #0
 801bf3c:	440b      	add	r3, r1
 801bf3e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801bf40:	4413      	add	r3, r2
}
 801bf42:	4618      	mov	r0, r3
 801bf44:	370c      	adds	r7, #12
 801bf46:	46bd      	mov	sp, r7
 801bf48:	bc80      	pop	{r7}
 801bf4a:	4770      	bx	lr

0801bf4c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801bf4c:	b480      	push	{r7}
 801bf4e:	b08b      	sub	sp, #44	; 0x2c
 801bf50:	af00      	add	r7, sp, #0
 801bf52:	60f8      	str	r0, [r7, #12]
 801bf54:	60b9      	str	r1, [r7, #8]
 801bf56:	4611      	mov	r1, r2
 801bf58:	461a      	mov	r2, r3
 801bf5a:	460b      	mov	r3, r1
 801bf5c:	71fb      	strb	r3, [r7, #7]
 801bf5e:	4613      	mov	r3, r2
 801bf60:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801bf62:	79fb      	ldrb	r3, [r7, #7]
 801bf64:	3304      	adds	r3, #4
 801bf66:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801bf68:	2300      	movs	r3, #0
 801bf6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801bf6e:	68bb      	ldr	r3, [r7, #8]
 801bf70:	2b05      	cmp	r3, #5
 801bf72:	d002      	beq.n	801bf7a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801bf74:	68bb      	ldr	r3, [r7, #8]
 801bf76:	2b06      	cmp	r3, #6
 801bf78:	d104      	bne.n	801bf84 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801bf7a:	88bb      	ldrh	r3, [r7, #4]
 801bf7c:	2b0b      	cmp	r3, #11
 801bf7e:	d801      	bhi.n	801bf84 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801bf80:	230c      	movs	r3, #12
 801bf82:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801bf84:	68fb      	ldr	r3, [r7, #12]
 801bf86:	2b00      	cmp	r3, #0
 801bf88:	d105      	bne.n	801bf96 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801bf8a:	68bb      	ldr	r3, [r7, #8]
 801bf8c:	2b0b      	cmp	r3, #11
 801bf8e:	d008      	beq.n	801bfa2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801bf90:	68bb      	ldr	r3, [r7, #8]
 801bf92:	2b0c      	cmp	r3, #12
 801bf94:	d005      	beq.n	801bfa2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801bf96:	68fb      	ldr	r3, [r7, #12]
 801bf98:	2b01      	cmp	r3, #1
 801bf9a:	d105      	bne.n	801bfa8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801bf9c:	68bb      	ldr	r3, [r7, #8]
 801bf9e:	2b0c      	cmp	r3, #12
 801bfa0:	d102      	bne.n	801bfa8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801bfa2:	2301      	movs	r3, #1
 801bfa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801bfa8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801bfac:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801bfae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801bfb2:	2a00      	cmp	r2, #0
 801bfb4:	d001      	beq.n	801bfba <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801bfb6:	2210      	movs	r2, #16
 801bfb8:	e000      	b.n	801bfbc <RadioGetLoRaTimeOnAirNumerator+0x70>
 801bfba:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801bfbc:	4413      	add	r3, r2
 801bfbe:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801bfc0:	68bb      	ldr	r3, [r7, #8]
 801bfc2:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801bfc4:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801bfc6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801bfca:	2a00      	cmp	r2, #0
 801bfcc:	d001      	beq.n	801bfd2 <RadioGetLoRaTimeOnAirNumerator+0x86>
 801bfce:	2200      	movs	r2, #0
 801bfd0:	e000      	b.n	801bfd4 <RadioGetLoRaTimeOnAirNumerator+0x88>
 801bfd2:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801bfd4:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801bfd6:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801bfd8:	68bb      	ldr	r3, [r7, #8]
 801bfda:	2b06      	cmp	r3, #6
 801bfdc:	d803      	bhi.n	801bfe6 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801bfde:	68bb      	ldr	r3, [r7, #8]
 801bfe0:	009b      	lsls	r3, r3, #2
 801bfe2:	623b      	str	r3, [r7, #32]
 801bfe4:	e00e      	b.n	801c004 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801bfe6:	69fb      	ldr	r3, [r7, #28]
 801bfe8:	3308      	adds	r3, #8
 801bfea:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801bfec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bff0:	2b00      	cmp	r3, #0
 801bff2:	d004      	beq.n	801bffe <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801bff4:	68bb      	ldr	r3, [r7, #8]
 801bff6:	3b02      	subs	r3, #2
 801bff8:	009b      	lsls	r3, r3, #2
 801bffa:	623b      	str	r3, [r7, #32]
 801bffc:	e002      	b.n	801c004 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801bffe:	68bb      	ldr	r3, [r7, #8]
 801c000:	009b      	lsls	r3, r3, #2
 801c002:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801c004:	69fb      	ldr	r3, [r7, #28]
 801c006:	2b00      	cmp	r3, #0
 801c008:	da01      	bge.n	801c00e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801c00a:	2300      	movs	r3, #0
 801c00c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801c00e:	69fa      	ldr	r2, [r7, #28]
 801c010:	6a3b      	ldr	r3, [r7, #32]
 801c012:	4413      	add	r3, r2
 801c014:	1e5a      	subs	r2, r3, #1
 801c016:	6a3b      	ldr	r3, [r7, #32]
 801c018:	fb92 f3f3 	sdiv	r3, r2, r3
 801c01c:	697a      	ldr	r2, [r7, #20]
 801c01e:	fb03 f202 	mul.w	r2, r3, r2
 801c022:	88bb      	ldrh	r3, [r7, #4]
 801c024:	4413      	add	r3, r2
    int32_t intermediate =
 801c026:	330c      	adds	r3, #12
 801c028:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801c02a:	68bb      	ldr	r3, [r7, #8]
 801c02c:	2b06      	cmp	r3, #6
 801c02e:	d802      	bhi.n	801c036 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801c030:	69bb      	ldr	r3, [r7, #24]
 801c032:	3302      	adds	r3, #2
 801c034:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801c036:	69bb      	ldr	r3, [r7, #24]
 801c038:	009b      	lsls	r3, r3, #2
 801c03a:	1c5a      	adds	r2, r3, #1
 801c03c:	68bb      	ldr	r3, [r7, #8]
 801c03e:	3b02      	subs	r3, #2
 801c040:	fa02 f303 	lsl.w	r3, r2, r3
}
 801c044:	4618      	mov	r0, r3
 801c046:	372c      	adds	r7, #44	; 0x2c
 801c048:	46bd      	mov	sp, r7
 801c04a:	bc80      	pop	{r7}
 801c04c:	4770      	bx	lr
	...

0801c050 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801c050:	b580      	push	{r7, lr}
 801c052:	b08a      	sub	sp, #40	; 0x28
 801c054:	af04      	add	r7, sp, #16
 801c056:	60b9      	str	r1, [r7, #8]
 801c058:	607a      	str	r2, [r7, #4]
 801c05a:	461a      	mov	r2, r3
 801c05c:	4603      	mov	r3, r0
 801c05e:	73fb      	strb	r3, [r7, #15]
 801c060:	4613      	mov	r3, r2
 801c062:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801c064:	2300      	movs	r3, #0
 801c066:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801c068:	2301      	movs	r3, #1
 801c06a:	613b      	str	r3, [r7, #16]

    switch( modem )
 801c06c:	7bfb      	ldrb	r3, [r7, #15]
 801c06e:	2b00      	cmp	r3, #0
 801c070:	d002      	beq.n	801c078 <RadioTimeOnAir+0x28>
 801c072:	2b01      	cmp	r3, #1
 801c074:	d017      	beq.n	801c0a6 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801c076:	e035      	b.n	801c0e4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801c078:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801c07c:	8c3a      	ldrh	r2, [r7, #32]
 801c07e:	7bb9      	ldrb	r1, [r7, #14]
 801c080:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801c084:	9301      	str	r3, [sp, #4]
 801c086:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c08a:	9300      	str	r3, [sp, #0]
 801c08c:	4603      	mov	r3, r0
 801c08e:	6878      	ldr	r0, [r7, #4]
 801c090:	f7ff ff32 	bl	801bef8 <RadioGetGfskTimeOnAirNumerator>
 801c094:	4603      	mov	r3, r0
 801c096:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c09a:	fb02 f303 	mul.w	r3, r2, r3
 801c09e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801c0a0:	687b      	ldr	r3, [r7, #4]
 801c0a2:	613b      	str	r3, [r7, #16]
        break;
 801c0a4:	e01e      	b.n	801c0e4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801c0a6:	8c39      	ldrh	r1, [r7, #32]
 801c0a8:	7bba      	ldrb	r2, [r7, #14]
 801c0aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801c0ae:	9302      	str	r3, [sp, #8]
 801c0b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c0b4:	9301      	str	r3, [sp, #4]
 801c0b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c0ba:	9300      	str	r3, [sp, #0]
 801c0bc:	460b      	mov	r3, r1
 801c0be:	6879      	ldr	r1, [r7, #4]
 801c0c0:	68b8      	ldr	r0, [r7, #8]
 801c0c2:	f7ff ff43 	bl	801bf4c <RadioGetLoRaTimeOnAirNumerator>
 801c0c6:	4603      	mov	r3, r0
 801c0c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c0cc:	fb02 f303 	mul.w	r3, r2, r3
 801c0d0:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801c0d2:	4a0a      	ldr	r2, [pc, #40]	; (801c0fc <RadioTimeOnAir+0xac>)
 801c0d4:	68bb      	ldr	r3, [r7, #8]
 801c0d6:	4413      	add	r3, r2
 801c0d8:	781b      	ldrb	r3, [r3, #0]
 801c0da:	4618      	mov	r0, r3
 801c0dc:	f7ff feb6 	bl	801be4c <RadioGetLoRaBandwidthInHz>
 801c0e0:	6138      	str	r0, [r7, #16]
        break;
 801c0e2:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 801c0e4:	697a      	ldr	r2, [r7, #20]
 801c0e6:	693b      	ldr	r3, [r7, #16]
 801c0e8:	4413      	add	r3, r2
 801c0ea:	1e5a      	subs	r2, r3, #1
 801c0ec:	693b      	ldr	r3, [r7, #16]
 801c0ee:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801c0f2:	4618      	mov	r0, r3
 801c0f4:	3718      	adds	r7, #24
 801c0f6:	46bd      	mov	sp, r7
 801c0f8:	bd80      	pop	{r7, pc}
 801c0fa:	bf00      	nop
 801c0fc:	08020eb8 	.word	0x08020eb8

0801c100 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 801c100:	b580      	push	{r7, lr}
 801c102:	b084      	sub	sp, #16
 801c104:	af00      	add	r7, sp, #0
 801c106:	6078      	str	r0, [r7, #4]
 801c108:	460b      	mov	r3, r1
 801c10a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801c10c:	2300      	movs	r3, #0
 801c10e:	2200      	movs	r2, #0
 801c110:	f240 2101 	movw	r1, #513	; 0x201
 801c114:	f240 2001 	movw	r0, #513	; 0x201
 801c118:	f001 fd66 	bl	801dbe8 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801c11c:	4b73      	ldr	r3, [pc, #460]	; (801c2ec <RadioSend+0x1ec>)
 801c11e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c122:	2101      	movs	r1, #1
 801c124:	4618      	mov	r0, r3
 801c126:	f002 fa03 	bl	801e530 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801c12a:	4b70      	ldr	r3, [pc, #448]	; (801c2ec <RadioSend+0x1ec>)
 801c12c:	781b      	ldrb	r3, [r3, #0]
 801c12e:	2b01      	cmp	r3, #1
 801c130:	d112      	bne.n	801c158 <RadioSend+0x58>
 801c132:	4b6e      	ldr	r3, [pc, #440]	; (801c2ec <RadioSend+0x1ec>)
 801c134:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c138:	2b06      	cmp	r3, #6
 801c13a:	d10d      	bne.n	801c158 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801c13c:	f640 0089 	movw	r0, #2185	; 0x889
 801c140:	f002 f916 	bl	801e370 <SUBGRF_ReadRegister>
 801c144:	4603      	mov	r3, r0
 801c146:	f023 0304 	bic.w	r3, r3, #4
 801c14a:	b2db      	uxtb	r3, r3
 801c14c:	4619      	mov	r1, r3
 801c14e:	f640 0089 	movw	r0, #2185	; 0x889
 801c152:	f002 f8f9 	bl	801e348 <SUBGRF_WriteRegister>
 801c156:	e00c      	b.n	801c172 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801c158:	f640 0089 	movw	r0, #2185	; 0x889
 801c15c:	f002 f908 	bl	801e370 <SUBGRF_ReadRegister>
 801c160:	4603      	mov	r3, r0
 801c162:	f043 0304 	orr.w	r3, r3, #4
 801c166:	b2db      	uxtb	r3, r3
 801c168:	4619      	mov	r1, r3
 801c16a:	f640 0089 	movw	r0, #2185	; 0x889
 801c16e:	f002 f8eb 	bl	801e348 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 801c172:	4b5e      	ldr	r3, [pc, #376]	; (801c2ec <RadioSend+0x1ec>)
 801c174:	781b      	ldrb	r3, [r3, #0]
 801c176:	2b04      	cmp	r3, #4
 801c178:	f200 80a8 	bhi.w	801c2cc <RadioSend+0x1cc>
 801c17c:	a201      	add	r2, pc, #4	; (adr r2, 801c184 <RadioSend+0x84>)
 801c17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c182:	bf00      	nop
 801c184:	0801c1b3 	.word	0x0801c1b3
 801c188:	0801c199 	.word	0x0801c199
 801c18c:	0801c1b3 	.word	0x0801c1b3
 801c190:	0801c215 	.word	0x0801c215
 801c194:	0801c235 	.word	0x0801c235
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801c198:	4a54      	ldr	r2, [pc, #336]	; (801c2ec <RadioSend+0x1ec>)
 801c19a:	78fb      	ldrb	r3, [r7, #3]
 801c19c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c19e:	4854      	ldr	r0, [pc, #336]	; (801c2f0 <RadioSend+0x1f0>)
 801c1a0:	f001 ff8a 	bl	801e0b8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801c1a4:	78fb      	ldrb	r3, [r7, #3]
 801c1a6:	2200      	movs	r2, #0
 801c1a8:	4619      	mov	r1, r3
 801c1aa:	6878      	ldr	r0, [r7, #4]
 801c1ac:	f001 fa3a 	bl	801d624 <SUBGRF_SendPayload>
            break;
 801c1b0:	e08d      	b.n	801c2ce <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801c1b2:	f002 fbb6 	bl	801e922 <RFW_Is_Init>
 801c1b6:	4603      	mov	r3, r0
 801c1b8:	2b01      	cmp	r3, #1
 801c1ba:	d11e      	bne.n	801c1fa <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801c1bc:	f107 020d 	add.w	r2, r7, #13
 801c1c0:	78fb      	ldrb	r3, [r7, #3]
 801c1c2:	4619      	mov	r1, r3
 801c1c4:	6878      	ldr	r0, [r7, #4]
 801c1c6:	f002 fbc4 	bl	801e952 <RFW_TransmitInit>
 801c1ca:	4603      	mov	r3, r0
 801c1cc:	2b00      	cmp	r3, #0
 801c1ce:	d10c      	bne.n	801c1ea <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801c1d0:	7b7a      	ldrb	r2, [r7, #13]
 801c1d2:	4b46      	ldr	r3, [pc, #280]	; (801c2ec <RadioSend+0x1ec>)
 801c1d4:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c1d6:	4846      	ldr	r0, [pc, #280]	; (801c2f0 <RadioSend+0x1f0>)
 801c1d8:	f001 ff6e 	bl	801e0b8 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801c1dc:	7b7b      	ldrb	r3, [r7, #13]
 801c1de:	2200      	movs	r2, #0
 801c1e0:	4619      	mov	r1, r3
 801c1e2:	6878      	ldr	r0, [r7, #4]
 801c1e4:	f001 fa1e 	bl	801d624 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801c1e8:	e071      	b.n	801c2ce <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801c1ea:	4b42      	ldr	r3, [pc, #264]	; (801c2f4 <RadioSend+0x1f4>)
 801c1ec:	2201      	movs	r2, #1
 801c1ee:	2100      	movs	r1, #0
 801c1f0:	2002      	movs	r0, #2
 801c1f2:	f003 fb91 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 801c1f6:	2303      	movs	r3, #3
 801c1f8:	e073      	b.n	801c2e2 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801c1fa:	4a3c      	ldr	r2, [pc, #240]	; (801c2ec <RadioSend+0x1ec>)
 801c1fc:	78fb      	ldrb	r3, [r7, #3]
 801c1fe:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c200:	483b      	ldr	r0, [pc, #236]	; (801c2f0 <RadioSend+0x1f0>)
 801c202:	f001 ff59 	bl	801e0b8 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 801c206:	78fb      	ldrb	r3, [r7, #3]
 801c208:	2200      	movs	r2, #0
 801c20a:	4619      	mov	r1, r3
 801c20c:	6878      	ldr	r0, [r7, #4]
 801c20e:	f001 fa09 	bl	801d624 <SUBGRF_SendPayload>
            break;
 801c212:	e05c      	b.n	801c2ce <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801c214:	4b35      	ldr	r3, [pc, #212]	; (801c2ec <RadioSend+0x1ec>)
 801c216:	2202      	movs	r2, #2
 801c218:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801c21a:	4a34      	ldr	r2, [pc, #208]	; (801c2ec <RadioSend+0x1ec>)
 801c21c:	78fb      	ldrb	r3, [r7, #3]
 801c21e:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c220:	4833      	ldr	r0, [pc, #204]	; (801c2f0 <RadioSend+0x1f0>)
 801c222:	f001 ff49 	bl	801e0b8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801c226:	78fb      	ldrb	r3, [r7, #3]
 801c228:	2200      	movs	r2, #0
 801c22a:	4619      	mov	r1, r3
 801c22c:	6878      	ldr	r0, [r7, #4]
 801c22e:	f001 f9f9 	bl	801d624 <SUBGRF_SendPayload>
            break;
 801c232:	e04c      	b.n	801c2ce <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801c234:	78fb      	ldrb	r3, [r7, #3]
 801c236:	461a      	mov	r2, r3
 801c238:	6879      	ldr	r1, [r7, #4]
 801c23a:	482f      	ldr	r0, [pc, #188]	; (801c2f8 <RadioSend+0x1f8>)
 801c23c:	f000 fccc 	bl	801cbd8 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801c240:	4b2a      	ldr	r3, [pc, #168]	; (801c2ec <RadioSend+0x1ec>)
 801c242:	2202      	movs	r2, #2
 801c244:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801c246:	78fb      	ldrb	r3, [r7, #3]
 801c248:	3301      	adds	r3, #1
 801c24a:	b2da      	uxtb	r2, r3
 801c24c:	4b27      	ldr	r3, [pc, #156]	; (801c2ec <RadioSend+0x1ec>)
 801c24e:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c250:	4827      	ldr	r0, [pc, #156]	; (801c2f0 <RadioSend+0x1f0>)
 801c252:	f001 ff31 	bl	801e0b8 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801c256:	2100      	movs	r1, #0
 801c258:	20f1      	movs	r0, #241	; 0xf1
 801c25a:	f000 f966 	bl	801c52a <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801c25e:	2100      	movs	r1, #0
 801c260:	20f0      	movs	r0, #240	; 0xf0
 801c262:	f000 f962 	bl	801c52a <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801c266:	4b21      	ldr	r3, [pc, #132]	; (801c2ec <RadioSend+0x1ec>)
 801c268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c26a:	2b64      	cmp	r3, #100	; 0x64
 801c26c:	d108      	bne.n	801c280 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801c26e:	2170      	movs	r1, #112	; 0x70
 801c270:	20f3      	movs	r0, #243	; 0xf3
 801c272:	f000 f95a 	bl	801c52a <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801c276:	211d      	movs	r1, #29
 801c278:	20f2      	movs	r0, #242	; 0xf2
 801c27a:	f000 f956 	bl	801c52a <RadioWrite>
 801c27e:	e007      	b.n	801c290 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801c280:	21e1      	movs	r1, #225	; 0xe1
 801c282:	20f3      	movs	r0, #243	; 0xf3
 801c284:	f000 f951 	bl	801c52a <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801c288:	2104      	movs	r1, #4
 801c28a:	20f2      	movs	r0, #242	; 0xf2
 801c28c:	f000 f94d 	bl	801c52a <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801c290:	78fb      	ldrb	r3, [r7, #3]
 801c292:	b29b      	uxth	r3, r3
 801c294:	00db      	lsls	r3, r3, #3
 801c296:	b29b      	uxth	r3, r3
 801c298:	3302      	adds	r3, #2
 801c29a:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801c29c:	89fb      	ldrh	r3, [r7, #14]
 801c29e:	0a1b      	lsrs	r3, r3, #8
 801c2a0:	b29b      	uxth	r3, r3
 801c2a2:	b2db      	uxtb	r3, r3
 801c2a4:	4619      	mov	r1, r3
 801c2a6:	20f4      	movs	r0, #244	; 0xf4
 801c2a8:	f000 f93f 	bl	801c52a <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801c2ac:	89fb      	ldrh	r3, [r7, #14]
 801c2ae:	b2db      	uxtb	r3, r3
 801c2b0:	4619      	mov	r1, r3
 801c2b2:	20f5      	movs	r0, #245	; 0xf5
 801c2b4:	f000 f939 	bl	801c52a <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801c2b8:	78fb      	ldrb	r3, [r7, #3]
 801c2ba:	3301      	adds	r3, #1
 801c2bc:	b2db      	uxtb	r3, r3
 801c2be:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801c2c2:	4619      	mov	r1, r3
 801c2c4:	480c      	ldr	r0, [pc, #48]	; (801c2f8 <RadioSend+0x1f8>)
 801c2c6:	f001 f9ad 	bl	801d624 <SUBGRF_SendPayload>
            break;
 801c2ca:	e000      	b.n	801c2ce <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801c2cc:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801c2ce:	4b07      	ldr	r3, [pc, #28]	; (801c2ec <RadioSend+0x1ec>)
 801c2d0:	685b      	ldr	r3, [r3, #4]
 801c2d2:	4619      	mov	r1, r3
 801c2d4:	4809      	ldr	r0, [pc, #36]	; (801c2fc <RadioSend+0x1fc>)
 801c2d6:	f003 f985 	bl	801f5e4 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801c2da:	4808      	ldr	r0, [pc, #32]	; (801c2fc <RadioSend+0x1fc>)
 801c2dc:	f003 f8a4 	bl	801f428 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 801c2e0:	2300      	movs	r3, #0
}
 801c2e2:	4618      	mov	r0, r3
 801c2e4:	3710      	adds	r7, #16
 801c2e6:	46bd      	mov	sp, r7
 801c2e8:	bd80      	pop	{r7, pc}
 801c2ea:	bf00      	nop
 801c2ec:	20001b7c 	.word	0x20001b7c
 801c2f0:	20001b8a 	.word	0x20001b8a
 801c2f4:	080207ec 	.word	0x080207ec
 801c2f8:	20001a78 	.word	0x20001a78
 801c2fc:	20001bd8 	.word	0x20001bd8

0801c300 <RadioSleep>:

static void RadioSleep( void )
{
 801c300:	b580      	push	{r7, lr}
 801c302:	b082      	sub	sp, #8
 801c304:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801c306:	2300      	movs	r3, #0
 801c308:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801c30a:	793b      	ldrb	r3, [r7, #4]
 801c30c:	f043 0304 	orr.w	r3, r3, #4
 801c310:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801c312:	7938      	ldrb	r0, [r7, #4]
 801c314:	f001 fa62 	bl	801d7dc <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801c318:	2002      	movs	r0, #2
 801c31a:	f7e6 f8db 	bl	80024d4 <HAL_Delay>
}
 801c31e:	bf00      	nop
 801c320:	3708      	adds	r7, #8
 801c322:	46bd      	mov	sp, r7
 801c324:	bd80      	pop	{r7, pc}

0801c326 <RadioStandby>:

static void RadioStandby( void )
{
 801c326:	b580      	push	{r7, lr}
 801c328:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801c32a:	2000      	movs	r0, #0
 801c32c:	f001 fa88 	bl	801d840 <SUBGRF_SetStandby>
}
 801c330:	bf00      	nop
 801c332:	bd80      	pop	{r7, pc}

0801c334 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801c334:	b580      	push	{r7, lr}
 801c336:	b082      	sub	sp, #8
 801c338:	af00      	add	r7, sp, #0
 801c33a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 801c33c:	f002 faf1 	bl	801e922 <RFW_Is_Init>
 801c340:	4603      	mov	r3, r0
 801c342:	2b01      	cmp	r3, #1
 801c344:	d102      	bne.n	801c34c <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801c346:	f002 fb14 	bl	801e972 <RFW_ReceiveInit>
 801c34a:	e007      	b.n	801c35c <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801c34c:	2300      	movs	r3, #0
 801c34e:	2200      	movs	r2, #0
 801c350:	f240 2162 	movw	r1, #610	; 0x262
 801c354:	f240 2062 	movw	r0, #610	; 0x262
 801c358:	f001 fc46 	bl	801dbe8 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	2b00      	cmp	r3, #0
 801c360:	d006      	beq.n	801c370 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801c362:	6879      	ldr	r1, [r7, #4]
 801c364:	4811      	ldr	r0, [pc, #68]	; (801c3ac <RadioRx+0x78>)
 801c366:	f003 f93d 	bl	801f5e4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801c36a:	4810      	ldr	r0, [pc, #64]	; (801c3ac <RadioRx+0x78>)
 801c36c:	f003 f85c 	bl	801f428 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801c370:	4b0f      	ldr	r3, [pc, #60]	; (801c3b0 <RadioRx+0x7c>)
 801c372:	2200      	movs	r2, #0
 801c374:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801c376:	4b0e      	ldr	r3, [pc, #56]	; (801c3b0 <RadioRx+0x7c>)
 801c378:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c37c:	2100      	movs	r1, #0
 801c37e:	4618      	mov	r0, r3
 801c380:	f002 f8d6 	bl	801e530 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801c384:	4b0a      	ldr	r3, [pc, #40]	; (801c3b0 <RadioRx+0x7c>)
 801c386:	785b      	ldrb	r3, [r3, #1]
 801c388:	2b00      	cmp	r3, #0
 801c38a:	d004      	beq.n	801c396 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801c38c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c390:	f001 fa92 	bl	801d8b8 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801c394:	e005      	b.n	801c3a2 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801c396:	4b06      	ldr	r3, [pc, #24]	; (801c3b0 <RadioRx+0x7c>)
 801c398:	689b      	ldr	r3, [r3, #8]
 801c39a:	019b      	lsls	r3, r3, #6
 801c39c:	4618      	mov	r0, r3
 801c39e:	f001 fa8b 	bl	801d8b8 <SUBGRF_SetRx>
}
 801c3a2:	bf00      	nop
 801c3a4:	3708      	adds	r7, #8
 801c3a6:	46bd      	mov	sp, r7
 801c3a8:	bd80      	pop	{r7, pc}
 801c3aa:	bf00      	nop
 801c3ac:	20001bf0 	.word	0x20001bf0
 801c3b0:	20001b7c 	.word	0x20001b7c

0801c3b4 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801c3b4:	b580      	push	{r7, lr}
 801c3b6:	b082      	sub	sp, #8
 801c3b8:	af00      	add	r7, sp, #0
 801c3ba:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 801c3bc:	f002 fab1 	bl	801e922 <RFW_Is_Init>
 801c3c0:	4603      	mov	r3, r0
 801c3c2:	2b01      	cmp	r3, #1
 801c3c4:	d102      	bne.n	801c3cc <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801c3c6:	f002 fad4 	bl	801e972 <RFW_ReceiveInit>
 801c3ca:	e007      	b.n	801c3dc <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801c3cc:	2300      	movs	r3, #0
 801c3ce:	2200      	movs	r2, #0
 801c3d0:	f240 2162 	movw	r1, #610	; 0x262
 801c3d4:	f240 2062 	movw	r0, #610	; 0x262
 801c3d8:	f001 fc06 	bl	801dbe8 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801c3dc:	687b      	ldr	r3, [r7, #4]
 801c3de:	2b00      	cmp	r3, #0
 801c3e0:	d006      	beq.n	801c3f0 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801c3e2:	6879      	ldr	r1, [r7, #4]
 801c3e4:	4811      	ldr	r0, [pc, #68]	; (801c42c <RadioRxBoosted+0x78>)
 801c3e6:	f003 f8fd 	bl	801f5e4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801c3ea:	4810      	ldr	r0, [pc, #64]	; (801c42c <RadioRxBoosted+0x78>)
 801c3ec:	f003 f81c 	bl	801f428 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801c3f0:	4b0f      	ldr	r3, [pc, #60]	; (801c430 <RadioRxBoosted+0x7c>)
 801c3f2:	2200      	movs	r2, #0
 801c3f4:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801c3f6:	4b0e      	ldr	r3, [pc, #56]	; (801c430 <RadioRxBoosted+0x7c>)
 801c3f8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c3fc:	2100      	movs	r1, #0
 801c3fe:	4618      	mov	r0, r3
 801c400:	f002 f896 	bl	801e530 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801c404:	4b0a      	ldr	r3, [pc, #40]	; (801c430 <RadioRxBoosted+0x7c>)
 801c406:	785b      	ldrb	r3, [r3, #1]
 801c408:	2b00      	cmp	r3, #0
 801c40a:	d004      	beq.n	801c416 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801c40c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c410:	f001 fa72 	bl	801d8f8 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801c414:	e005      	b.n	801c422 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801c416:	4b06      	ldr	r3, [pc, #24]	; (801c430 <RadioRxBoosted+0x7c>)
 801c418:	689b      	ldr	r3, [r3, #8]
 801c41a:	019b      	lsls	r3, r3, #6
 801c41c:	4618      	mov	r0, r3
 801c41e:	f001 fa6b 	bl	801d8f8 <SUBGRF_SetRxBoosted>
}
 801c422:	bf00      	nop
 801c424:	3708      	adds	r7, #8
 801c426:	46bd      	mov	sp, r7
 801c428:	bd80      	pop	{r7, pc}
 801c42a:	bf00      	nop
 801c42c:	20001bf0 	.word	0x20001bf0
 801c430:	20001b7c 	.word	0x20001b7c

0801c434 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801c434:	b580      	push	{r7, lr}
 801c436:	b082      	sub	sp, #8
 801c438:	af00      	add	r7, sp, #0
 801c43a:	6078      	str	r0, [r7, #4]
 801c43c:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801c43e:	687b      	ldr	r3, [r7, #4]
 801c440:	005a      	lsls	r2, r3, #1
 801c442:	683b      	ldr	r3, [r7, #0]
 801c444:	4413      	add	r3, r2
 801c446:	4a0c      	ldr	r2, [pc, #48]	; (801c478 <RadioSetRxDutyCycle+0x44>)
 801c448:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801c44a:	2300      	movs	r3, #0
 801c44c:	2200      	movs	r2, #0
 801c44e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c452:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801c456:	f001 fbc7 	bl	801dbe8 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801c45a:	4b07      	ldr	r3, [pc, #28]	; (801c478 <RadioSetRxDutyCycle+0x44>)
 801c45c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c460:	2100      	movs	r1, #0
 801c462:	4618      	mov	r0, r3
 801c464:	f002 f864 	bl	801e530 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801c468:	6839      	ldr	r1, [r7, #0]
 801c46a:	6878      	ldr	r0, [r7, #4]
 801c46c:	f001 fa68 	bl	801d940 <SUBGRF_SetRxDutyCycle>
}
 801c470:	bf00      	nop
 801c472:	3708      	adds	r7, #8
 801c474:	46bd      	mov	sp, r7
 801c476:	bd80      	pop	{r7, pc}
 801c478:	20001b7c 	.word	0x20001b7c

0801c47c <RadioStartCad>:

static void RadioStartCad( void )
{
 801c47c:	b580      	push	{r7, lr}
 801c47e:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801c480:	4b09      	ldr	r3, [pc, #36]	; (801c4a8 <RadioStartCad+0x2c>)
 801c482:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c486:	2100      	movs	r1, #0
 801c488:	4618      	mov	r0, r3
 801c48a:	f002 f851 	bl	801e530 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801c48e:	2300      	movs	r3, #0
 801c490:	2200      	movs	r2, #0
 801c492:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801c496:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801c49a:	f001 fba5 	bl	801dbe8 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801c49e:	f001 fa7b 	bl	801d998 <SUBGRF_SetCad>
}
 801c4a2:	bf00      	nop
 801c4a4:	bd80      	pop	{r7, pc}
 801c4a6:	bf00      	nop
 801c4a8:	20001b7c 	.word	0x20001b7c

0801c4ac <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801c4ac:	b580      	push	{r7, lr}
 801c4ae:	b084      	sub	sp, #16
 801c4b0:	af00      	add	r7, sp, #0
 801c4b2:	6078      	str	r0, [r7, #4]
 801c4b4:	460b      	mov	r3, r1
 801c4b6:	70fb      	strb	r3, [r7, #3]
 801c4b8:	4613      	mov	r3, r2
 801c4ba:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 801c4bc:	883b      	ldrh	r3, [r7, #0]
 801c4be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c4c2:	fb02 f303 	mul.w	r3, r2, r3
 801c4c6:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801c4c8:	6878      	ldr	r0, [r7, #4]
 801c4ca:	f001 fbe9 	bl	801dca0 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801c4ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c4d2:	4618      	mov	r0, r3
 801c4d4:	f002 f854 	bl	801e580 <SUBGRF_SetRfTxPower>
 801c4d8:	4603      	mov	r3, r0
 801c4da:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801c4dc:	210e      	movs	r1, #14
 801c4de:	f640 101f 	movw	r0, #2335	; 0x91f
 801c4e2:	f001 ff31 	bl	801e348 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801c4e6:	7afb      	ldrb	r3, [r7, #11]
 801c4e8:	2101      	movs	r1, #1
 801c4ea:	4618      	mov	r0, r3
 801c4ec:	f002 f820 	bl	801e530 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801c4f0:	f001 fa60 	bl	801d9b4 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801c4f4:	68f9      	ldr	r1, [r7, #12]
 801c4f6:	4805      	ldr	r0, [pc, #20]	; (801c50c <RadioSetTxContinuousWave+0x60>)
 801c4f8:	f003 f874 	bl	801f5e4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801c4fc:	4803      	ldr	r0, [pc, #12]	; (801c50c <RadioSetTxContinuousWave+0x60>)
 801c4fe:	f002 ff93 	bl	801f428 <UTIL_TIMER_Start>
}
 801c502:	bf00      	nop
 801c504:	3710      	adds	r7, #16
 801c506:	46bd      	mov	sp, r7
 801c508:	bd80      	pop	{r7, pc}
 801c50a:	bf00      	nop
 801c50c:	20001bd8 	.word	0x20001bd8

0801c510 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801c510:	b580      	push	{r7, lr}
 801c512:	b082      	sub	sp, #8
 801c514:	af00      	add	r7, sp, #0
 801c516:	4603      	mov	r3, r0
 801c518:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801c51a:	f001 fe82 	bl	801e222 <SUBGRF_GetRssiInst>
 801c51e:	4603      	mov	r3, r0
 801c520:	b21b      	sxth	r3, r3
}
 801c522:	4618      	mov	r0, r3
 801c524:	3708      	adds	r7, #8
 801c526:	46bd      	mov	sp, r7
 801c528:	bd80      	pop	{r7, pc}

0801c52a <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801c52a:	b580      	push	{r7, lr}
 801c52c:	b082      	sub	sp, #8
 801c52e:	af00      	add	r7, sp, #0
 801c530:	4603      	mov	r3, r0
 801c532:	460a      	mov	r2, r1
 801c534:	80fb      	strh	r3, [r7, #6]
 801c536:	4613      	mov	r3, r2
 801c538:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801c53a:	797a      	ldrb	r2, [r7, #5]
 801c53c:	88fb      	ldrh	r3, [r7, #6]
 801c53e:	4611      	mov	r1, r2
 801c540:	4618      	mov	r0, r3
 801c542:	f001 ff01 	bl	801e348 <SUBGRF_WriteRegister>
}
 801c546:	bf00      	nop
 801c548:	3708      	adds	r7, #8
 801c54a:	46bd      	mov	sp, r7
 801c54c:	bd80      	pop	{r7, pc}

0801c54e <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801c54e:	b580      	push	{r7, lr}
 801c550:	b082      	sub	sp, #8
 801c552:	af00      	add	r7, sp, #0
 801c554:	4603      	mov	r3, r0
 801c556:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801c558:	88fb      	ldrh	r3, [r7, #6]
 801c55a:	4618      	mov	r0, r3
 801c55c:	f001 ff08 	bl	801e370 <SUBGRF_ReadRegister>
 801c560:	4603      	mov	r3, r0
}
 801c562:	4618      	mov	r0, r3
 801c564:	3708      	adds	r7, #8
 801c566:	46bd      	mov	sp, r7
 801c568:	bd80      	pop	{r7, pc}

0801c56a <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801c56a:	b580      	push	{r7, lr}
 801c56c:	b082      	sub	sp, #8
 801c56e:	af00      	add	r7, sp, #0
 801c570:	4603      	mov	r3, r0
 801c572:	6039      	str	r1, [r7, #0]
 801c574:	80fb      	strh	r3, [r7, #6]
 801c576:	4613      	mov	r3, r2
 801c578:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801c57a:	797b      	ldrb	r3, [r7, #5]
 801c57c:	b29a      	uxth	r2, r3
 801c57e:	88fb      	ldrh	r3, [r7, #6]
 801c580:	6839      	ldr	r1, [r7, #0]
 801c582:	4618      	mov	r0, r3
 801c584:	f001 ff08 	bl	801e398 <SUBGRF_WriteRegisters>
}
 801c588:	bf00      	nop
 801c58a:	3708      	adds	r7, #8
 801c58c:	46bd      	mov	sp, r7
 801c58e:	bd80      	pop	{r7, pc}

0801c590 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801c590:	b580      	push	{r7, lr}
 801c592:	b082      	sub	sp, #8
 801c594:	af00      	add	r7, sp, #0
 801c596:	4603      	mov	r3, r0
 801c598:	6039      	str	r1, [r7, #0]
 801c59a:	80fb      	strh	r3, [r7, #6]
 801c59c:	4613      	mov	r3, r2
 801c59e:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801c5a0:	797b      	ldrb	r3, [r7, #5]
 801c5a2:	b29a      	uxth	r2, r3
 801c5a4:	88fb      	ldrh	r3, [r7, #6]
 801c5a6:	6839      	ldr	r1, [r7, #0]
 801c5a8:	4618      	mov	r0, r3
 801c5aa:	f001 ff17 	bl	801e3dc <SUBGRF_ReadRegisters>
}
 801c5ae:	bf00      	nop
 801c5b0:	3708      	adds	r7, #8
 801c5b2:	46bd      	mov	sp, r7
 801c5b4:	bd80      	pop	{r7, pc}
	...

0801c5b8 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801c5b8:	b580      	push	{r7, lr}
 801c5ba:	b082      	sub	sp, #8
 801c5bc:	af00      	add	r7, sp, #0
 801c5be:	4603      	mov	r3, r0
 801c5c0:	460a      	mov	r2, r1
 801c5c2:	71fb      	strb	r3, [r7, #7]
 801c5c4:	4613      	mov	r3, r2
 801c5c6:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801c5c8:	79fb      	ldrb	r3, [r7, #7]
 801c5ca:	2b01      	cmp	r3, #1
 801c5cc:	d10a      	bne.n	801c5e4 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801c5ce:	4a0e      	ldr	r2, [pc, #56]	; (801c608 <RadioSetMaxPayloadLength+0x50>)
 801c5d0:	79bb      	ldrb	r3, [r7, #6]
 801c5d2:	7013      	strb	r3, [r2, #0]
 801c5d4:	4b0c      	ldr	r3, [pc, #48]	; (801c608 <RadioSetMaxPayloadLength+0x50>)
 801c5d6:	781a      	ldrb	r2, [r3, #0]
 801c5d8:	4b0c      	ldr	r3, [pc, #48]	; (801c60c <RadioSetMaxPayloadLength+0x54>)
 801c5da:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c5dc:	480c      	ldr	r0, [pc, #48]	; (801c610 <RadioSetMaxPayloadLength+0x58>)
 801c5de:	f001 fd6b 	bl	801e0b8 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801c5e2:	e00d      	b.n	801c600 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801c5e4:	4b09      	ldr	r3, [pc, #36]	; (801c60c <RadioSetMaxPayloadLength+0x54>)
 801c5e6:	7d5b      	ldrb	r3, [r3, #21]
 801c5e8:	2b01      	cmp	r3, #1
 801c5ea:	d109      	bne.n	801c600 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801c5ec:	4a06      	ldr	r2, [pc, #24]	; (801c608 <RadioSetMaxPayloadLength+0x50>)
 801c5ee:	79bb      	ldrb	r3, [r7, #6]
 801c5f0:	7013      	strb	r3, [r2, #0]
 801c5f2:	4b05      	ldr	r3, [pc, #20]	; (801c608 <RadioSetMaxPayloadLength+0x50>)
 801c5f4:	781a      	ldrb	r2, [r3, #0]
 801c5f6:	4b05      	ldr	r3, [pc, #20]	; (801c60c <RadioSetMaxPayloadLength+0x54>)
 801c5f8:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c5fa:	4805      	ldr	r0, [pc, #20]	; (801c610 <RadioSetMaxPayloadLength+0x58>)
 801c5fc:	f001 fd5c 	bl	801e0b8 <SUBGRF_SetPacketParams>
}
 801c600:	bf00      	nop
 801c602:	3708      	adds	r7, #8
 801c604:	46bd      	mov	sp, r7
 801c606:	bd80      	pop	{r7, pc}
 801c608:	20000134 	.word	0x20000134
 801c60c:	20001b7c 	.word	0x20001b7c
 801c610:	20001b8a 	.word	0x20001b8a

0801c614 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801c614:	b580      	push	{r7, lr}
 801c616:	b082      	sub	sp, #8
 801c618:	af00      	add	r7, sp, #0
 801c61a:	4603      	mov	r3, r0
 801c61c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801c61e:	4a13      	ldr	r2, [pc, #76]	; (801c66c <RadioSetPublicNetwork+0x58>)
 801c620:	79fb      	ldrb	r3, [r7, #7]
 801c622:	7313      	strb	r3, [r2, #12]
 801c624:	4b11      	ldr	r3, [pc, #68]	; (801c66c <RadioSetPublicNetwork+0x58>)
 801c626:	7b1a      	ldrb	r2, [r3, #12]
 801c628:	4b10      	ldr	r3, [pc, #64]	; (801c66c <RadioSetPublicNetwork+0x58>)
 801c62a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801c62c:	2001      	movs	r0, #1
 801c62e:	f7ff f811 	bl	801b654 <RadioSetModem>
    if( enable == true )
 801c632:	79fb      	ldrb	r3, [r7, #7]
 801c634:	2b00      	cmp	r3, #0
 801c636:	d00a      	beq.n	801c64e <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801c638:	2134      	movs	r1, #52	; 0x34
 801c63a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801c63e:	f001 fe83 	bl	801e348 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801c642:	2144      	movs	r1, #68	; 0x44
 801c644:	f240 7041 	movw	r0, #1857	; 0x741
 801c648:	f001 fe7e 	bl	801e348 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801c64c:	e009      	b.n	801c662 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801c64e:	2114      	movs	r1, #20
 801c650:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801c654:	f001 fe78 	bl	801e348 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801c658:	2124      	movs	r1, #36	; 0x24
 801c65a:	f240 7041 	movw	r0, #1857	; 0x741
 801c65e:	f001 fe73 	bl	801e348 <SUBGRF_WriteRegister>
}
 801c662:	bf00      	nop
 801c664:	3708      	adds	r7, #8
 801c666:	46bd      	mov	sp, r7
 801c668:	bd80      	pop	{r7, pc}
 801c66a:	bf00      	nop
 801c66c:	20001b7c 	.word	0x20001b7c

0801c670 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801c670:	b580      	push	{r7, lr}
 801c672:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801c674:	f001 ffb8 	bl	801e5e8 <SUBGRF_GetRadioWakeUpTime>
 801c678:	4603      	mov	r3, r0
 801c67a:	3303      	adds	r3, #3
}
 801c67c:	4618      	mov	r0, r3
 801c67e:	bd80      	pop	{r7, pc}

0801c680 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801c680:	b580      	push	{r7, lr}
 801c682:	b082      	sub	sp, #8
 801c684:	af00      	add	r7, sp, #0
 801c686:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801c688:	f000 f80e 	bl	801c6a8 <RadioOnTxTimeoutProcess>
}
 801c68c:	bf00      	nop
 801c68e:	3708      	adds	r7, #8
 801c690:	46bd      	mov	sp, r7
 801c692:	bd80      	pop	{r7, pc}

0801c694 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801c694:	b580      	push	{r7, lr}
 801c696:	b082      	sub	sp, #8
 801c698:	af00      	add	r7, sp, #0
 801c69a:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801c69c:	f000 f818 	bl	801c6d0 <RadioOnRxTimeoutProcess>
}
 801c6a0:	bf00      	nop
 801c6a2:	3708      	adds	r7, #8
 801c6a4:	46bd      	mov	sp, r7
 801c6a6:	bd80      	pop	{r7, pc}

0801c6a8 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801c6a8:	b580      	push	{r7, lr}
 801c6aa:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801c6ac:	4b07      	ldr	r3, [pc, #28]	; (801c6cc <RadioOnTxTimeoutProcess+0x24>)
 801c6ae:	681b      	ldr	r3, [r3, #0]
 801c6b0:	2b00      	cmp	r3, #0
 801c6b2:	d008      	beq.n	801c6c6 <RadioOnTxTimeoutProcess+0x1e>
 801c6b4:	4b05      	ldr	r3, [pc, #20]	; (801c6cc <RadioOnTxTimeoutProcess+0x24>)
 801c6b6:	681b      	ldr	r3, [r3, #0]
 801c6b8:	685b      	ldr	r3, [r3, #4]
 801c6ba:	2b00      	cmp	r3, #0
 801c6bc:	d003      	beq.n	801c6c6 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801c6be:	4b03      	ldr	r3, [pc, #12]	; (801c6cc <RadioOnTxTimeoutProcess+0x24>)
 801c6c0:	681b      	ldr	r3, [r3, #0]
 801c6c2:	685b      	ldr	r3, [r3, #4]
 801c6c4:	4798      	blx	r3
    }
}
 801c6c6:	bf00      	nop
 801c6c8:	bd80      	pop	{r7, pc}
 801c6ca:	bf00      	nop
 801c6cc:	20001b78 	.word	0x20001b78

0801c6d0 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801c6d0:	b580      	push	{r7, lr}
 801c6d2:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801c6d4:	4b07      	ldr	r3, [pc, #28]	; (801c6f4 <RadioOnRxTimeoutProcess+0x24>)
 801c6d6:	681b      	ldr	r3, [r3, #0]
 801c6d8:	2b00      	cmp	r3, #0
 801c6da:	d008      	beq.n	801c6ee <RadioOnRxTimeoutProcess+0x1e>
 801c6dc:	4b05      	ldr	r3, [pc, #20]	; (801c6f4 <RadioOnRxTimeoutProcess+0x24>)
 801c6de:	681b      	ldr	r3, [r3, #0]
 801c6e0:	68db      	ldr	r3, [r3, #12]
 801c6e2:	2b00      	cmp	r3, #0
 801c6e4:	d003      	beq.n	801c6ee <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801c6e6:	4b03      	ldr	r3, [pc, #12]	; (801c6f4 <RadioOnRxTimeoutProcess+0x24>)
 801c6e8:	681b      	ldr	r3, [r3, #0]
 801c6ea:	68db      	ldr	r3, [r3, #12]
 801c6ec:	4798      	blx	r3
    }
}
 801c6ee:	bf00      	nop
 801c6f0:	bd80      	pop	{r7, pc}
 801c6f2:	bf00      	nop
 801c6f4:	20001b78 	.word	0x20001b78

0801c6f8 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801c6f8:	b580      	push	{r7, lr}
 801c6fa:	b082      	sub	sp, #8
 801c6fc:	af00      	add	r7, sp, #0
 801c6fe:	4603      	mov	r3, r0
 801c700:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801c702:	4a05      	ldr	r2, [pc, #20]	; (801c718 <RadioOnDioIrq+0x20>)
 801c704:	88fb      	ldrh	r3, [r7, #6]
 801c706:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801c70a:	f000 f807 	bl	801c71c <RadioIrqProcess>
}
 801c70e:	bf00      	nop
 801c710:	3708      	adds	r7, #8
 801c712:	46bd      	mov	sp, r7
 801c714:	bd80      	pop	{r7, pc}
 801c716:	bf00      	nop
 801c718:	20001b7c 	.word	0x20001b7c

0801c71c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801c71c:	b5b0      	push	{r4, r5, r7, lr}
 801c71e:	b082      	sub	sp, #8
 801c720:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801c722:	2300      	movs	r3, #0
 801c724:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801c726:	2300      	movs	r3, #0
 801c728:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801c72a:	4ba8      	ldr	r3, [pc, #672]	; (801c9cc <RadioIrqProcess+0x2b0>)
 801c72c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801c730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c734:	f000 810d 	beq.w	801c952 <RadioIrqProcess+0x236>
 801c738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c73c:	f300 81e8 	bgt.w	801cb10 <RadioIrqProcess+0x3f4>
 801c740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c744:	f000 80f1 	beq.w	801c92a <RadioIrqProcess+0x20e>
 801c748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c74c:	f300 81e0 	bgt.w	801cb10 <RadioIrqProcess+0x3f4>
 801c750:	2b80      	cmp	r3, #128	; 0x80
 801c752:	f000 80d6 	beq.w	801c902 <RadioIrqProcess+0x1e6>
 801c756:	2b80      	cmp	r3, #128	; 0x80
 801c758:	f300 81da 	bgt.w	801cb10 <RadioIrqProcess+0x3f4>
 801c75c:	2b20      	cmp	r3, #32
 801c75e:	dc49      	bgt.n	801c7f4 <RadioIrqProcess+0xd8>
 801c760:	2b00      	cmp	r3, #0
 801c762:	f340 81d5 	ble.w	801cb10 <RadioIrqProcess+0x3f4>
 801c766:	3b01      	subs	r3, #1
 801c768:	2b1f      	cmp	r3, #31
 801c76a:	f200 81d1 	bhi.w	801cb10 <RadioIrqProcess+0x3f4>
 801c76e:	a201      	add	r2, pc, #4	; (adr r2, 801c774 <RadioIrqProcess+0x58>)
 801c770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c774:	0801c7fd 	.word	0x0801c7fd
 801c778:	0801c837 	.word	0x0801c837
 801c77c:	0801cb11 	.word	0x0801cb11
 801c780:	0801c9ed 	.word	0x0801c9ed
 801c784:	0801cb11 	.word	0x0801cb11
 801c788:	0801cb11 	.word	0x0801cb11
 801c78c:	0801cb11 	.word	0x0801cb11
 801c790:	0801ca69 	.word	0x0801ca69
 801c794:	0801cb11 	.word	0x0801cb11
 801c798:	0801cb11 	.word	0x0801cb11
 801c79c:	0801cb11 	.word	0x0801cb11
 801c7a0:	0801cb11 	.word	0x0801cb11
 801c7a4:	0801cb11 	.word	0x0801cb11
 801c7a8:	0801cb11 	.word	0x0801cb11
 801c7ac:	0801cb11 	.word	0x0801cb11
 801c7b0:	0801ca85 	.word	0x0801ca85
 801c7b4:	0801cb11 	.word	0x0801cb11
 801c7b8:	0801cb11 	.word	0x0801cb11
 801c7bc:	0801cb11 	.word	0x0801cb11
 801c7c0:	0801cb11 	.word	0x0801cb11
 801c7c4:	0801cb11 	.word	0x0801cb11
 801c7c8:	0801cb11 	.word	0x0801cb11
 801c7cc:	0801cb11 	.word	0x0801cb11
 801c7d0:	0801cb11 	.word	0x0801cb11
 801c7d4:	0801cb11 	.word	0x0801cb11
 801c7d8:	0801cb11 	.word	0x0801cb11
 801c7dc:	0801cb11 	.word	0x0801cb11
 801c7e0:	0801cb11 	.word	0x0801cb11
 801c7e4:	0801cb11 	.word	0x0801cb11
 801c7e8:	0801cb11 	.word	0x0801cb11
 801c7ec:	0801cb11 	.word	0x0801cb11
 801c7f0:	0801ca93 	.word	0x0801ca93
 801c7f4:	2b40      	cmp	r3, #64	; 0x40
 801c7f6:	f000 816d 	beq.w	801cad4 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 801c7fa:	e189      	b.n	801cb10 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801c7fc:	4874      	ldr	r0, [pc, #464]	; (801c9d0 <RadioIrqProcess+0x2b4>)
 801c7fe:	f002 fe81 	bl	801f504 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801c802:	2000      	movs	r0, #0
 801c804:	f001 f81c 	bl	801d840 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801c808:	f002 f892 	bl	801e930 <RFW_Is_LongPacketModeEnabled>
 801c80c:	4603      	mov	r3, r0
 801c80e:	2b01      	cmp	r3, #1
 801c810:	d101      	bne.n	801c816 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801c812:	f002 f8b6 	bl	801e982 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801c816:	4b6f      	ldr	r3, [pc, #444]	; (801c9d4 <RadioIrqProcess+0x2b8>)
 801c818:	681b      	ldr	r3, [r3, #0]
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	f000 817a 	beq.w	801cb14 <RadioIrqProcess+0x3f8>
 801c820:	4b6c      	ldr	r3, [pc, #432]	; (801c9d4 <RadioIrqProcess+0x2b8>)
 801c822:	681b      	ldr	r3, [r3, #0]
 801c824:	681b      	ldr	r3, [r3, #0]
 801c826:	2b00      	cmp	r3, #0
 801c828:	f000 8174 	beq.w	801cb14 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801c82c:	4b69      	ldr	r3, [pc, #420]	; (801c9d4 <RadioIrqProcess+0x2b8>)
 801c82e:	681b      	ldr	r3, [r3, #0]
 801c830:	681b      	ldr	r3, [r3, #0]
 801c832:	4798      	blx	r3
        break;
 801c834:	e16e      	b.n	801cb14 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801c836:	4868      	ldr	r0, [pc, #416]	; (801c9d8 <RadioIrqProcess+0x2bc>)
 801c838:	f002 fe64 	bl	801f504 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801c83c:	4b63      	ldr	r3, [pc, #396]	; (801c9cc <RadioIrqProcess+0x2b0>)
 801c83e:	785b      	ldrb	r3, [r3, #1]
 801c840:	f083 0301 	eor.w	r3, r3, #1
 801c844:	b2db      	uxtb	r3, r3
 801c846:	2b00      	cmp	r3, #0
 801c848:	d014      	beq.n	801c874 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801c84a:	2000      	movs	r0, #0
 801c84c:	f000 fff8 	bl	801d840 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801c850:	2100      	movs	r1, #0
 801c852:	f640 1002 	movw	r0, #2306	; 0x902
 801c856:	f001 fd77 	bl	801e348 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801c85a:	f640 1044 	movw	r0, #2372	; 0x944
 801c85e:	f001 fd87 	bl	801e370 <SUBGRF_ReadRegister>
 801c862:	4603      	mov	r3, r0
 801c864:	f043 0302 	orr.w	r3, r3, #2
 801c868:	b2db      	uxtb	r3, r3
 801c86a:	4619      	mov	r1, r3
 801c86c:	f640 1044 	movw	r0, #2372	; 0x944
 801c870:	f001 fd6a 	bl	801e348 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801c874:	1dfb      	adds	r3, r7, #7
 801c876:	22ff      	movs	r2, #255	; 0xff
 801c878:	4619      	mov	r1, r3
 801c87a:	4858      	ldr	r0, [pc, #352]	; (801c9dc <RadioIrqProcess+0x2c0>)
 801c87c:	f000 feb0 	bl	801d5e0 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801c880:	4857      	ldr	r0, [pc, #348]	; (801c9e0 <RadioIrqProcess+0x2c4>)
 801c882:	f001 fd0f 	bl	801e2a4 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801c886:	4b53      	ldr	r3, [pc, #332]	; (801c9d4 <RadioIrqProcess+0x2b8>)
 801c888:	681b      	ldr	r3, [r3, #0]
 801c88a:	2b00      	cmp	r3, #0
 801c88c:	f000 8144 	beq.w	801cb18 <RadioIrqProcess+0x3fc>
 801c890:	4b50      	ldr	r3, [pc, #320]	; (801c9d4 <RadioIrqProcess+0x2b8>)
 801c892:	681b      	ldr	r3, [r3, #0]
 801c894:	689b      	ldr	r3, [r3, #8]
 801c896:	2b00      	cmp	r3, #0
 801c898:	f000 813e 	beq.w	801cb18 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801c89c:	4b4b      	ldr	r3, [pc, #300]	; (801c9cc <RadioIrqProcess+0x2b0>)
 801c89e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c8a2:	2b01      	cmp	r3, #1
 801c8a4:	d10e      	bne.n	801c8c4 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801c8a6:	4b4b      	ldr	r3, [pc, #300]	; (801c9d4 <RadioIrqProcess+0x2b8>)
 801c8a8:	681b      	ldr	r3, [r3, #0]
 801c8aa:	689c      	ldr	r4, [r3, #8]
 801c8ac:	79fb      	ldrb	r3, [r7, #7]
 801c8ae:	b299      	uxth	r1, r3
 801c8b0:	4b46      	ldr	r3, [pc, #280]	; (801c9cc <RadioIrqProcess+0x2b0>)
 801c8b2:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801c8b6:	b21a      	sxth	r2, r3
 801c8b8:	4b44      	ldr	r3, [pc, #272]	; (801c9cc <RadioIrqProcess+0x2b0>)
 801c8ba:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801c8be:	4847      	ldr	r0, [pc, #284]	; (801c9dc <RadioIrqProcess+0x2c0>)
 801c8c0:	47a0      	blx	r4
                break;
 801c8c2:	e01d      	b.n	801c900 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801c8c4:	4b41      	ldr	r3, [pc, #260]	; (801c9cc <RadioIrqProcess+0x2b0>)
 801c8c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c8c8:	463a      	mov	r2, r7
 801c8ca:	4611      	mov	r1, r2
 801c8cc:	4618      	mov	r0, r3
 801c8ce:	f001 ff7d 	bl	801e7cc <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801c8d2:	4b40      	ldr	r3, [pc, #256]	; (801c9d4 <RadioIrqProcess+0x2b8>)
 801c8d4:	681b      	ldr	r3, [r3, #0]
 801c8d6:	689c      	ldr	r4, [r3, #8]
 801c8d8:	79fb      	ldrb	r3, [r7, #7]
 801c8da:	b299      	uxth	r1, r3
 801c8dc:	4b3b      	ldr	r3, [pc, #236]	; (801c9cc <RadioIrqProcess+0x2b0>)
 801c8de:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801c8e2:	b218      	sxth	r0, r3
 801c8e4:	683b      	ldr	r3, [r7, #0]
 801c8e6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801c8ea:	4a3e      	ldr	r2, [pc, #248]	; (801c9e4 <RadioIrqProcess+0x2c8>)
 801c8ec:	fb82 5203 	smull	r5, r2, r2, r3
 801c8f0:	1192      	asrs	r2, r2, #6
 801c8f2:	17db      	asrs	r3, r3, #31
 801c8f4:	1ad3      	subs	r3, r2, r3
 801c8f6:	b25b      	sxtb	r3, r3
 801c8f8:	4602      	mov	r2, r0
 801c8fa:	4838      	ldr	r0, [pc, #224]	; (801c9dc <RadioIrqProcess+0x2c0>)
 801c8fc:	47a0      	blx	r4
                break;
 801c8fe:	bf00      	nop
        break;
 801c900:	e10a      	b.n	801cb18 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801c902:	2000      	movs	r0, #0
 801c904:	f000 ff9c 	bl	801d840 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801c908:	4b32      	ldr	r3, [pc, #200]	; (801c9d4 <RadioIrqProcess+0x2b8>)
 801c90a:	681b      	ldr	r3, [r3, #0]
 801c90c:	2b00      	cmp	r3, #0
 801c90e:	f000 8105 	beq.w	801cb1c <RadioIrqProcess+0x400>
 801c912:	4b30      	ldr	r3, [pc, #192]	; (801c9d4 <RadioIrqProcess+0x2b8>)
 801c914:	681b      	ldr	r3, [r3, #0]
 801c916:	699b      	ldr	r3, [r3, #24]
 801c918:	2b00      	cmp	r3, #0
 801c91a:	f000 80ff 	beq.w	801cb1c <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 801c91e:	4b2d      	ldr	r3, [pc, #180]	; (801c9d4 <RadioIrqProcess+0x2b8>)
 801c920:	681b      	ldr	r3, [r3, #0]
 801c922:	699b      	ldr	r3, [r3, #24]
 801c924:	2000      	movs	r0, #0
 801c926:	4798      	blx	r3
        break;
 801c928:	e0f8      	b.n	801cb1c <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 801c92a:	2000      	movs	r0, #0
 801c92c:	f000 ff88 	bl	801d840 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801c930:	4b28      	ldr	r3, [pc, #160]	; (801c9d4 <RadioIrqProcess+0x2b8>)
 801c932:	681b      	ldr	r3, [r3, #0]
 801c934:	2b00      	cmp	r3, #0
 801c936:	f000 80f3 	beq.w	801cb20 <RadioIrqProcess+0x404>
 801c93a:	4b26      	ldr	r3, [pc, #152]	; (801c9d4 <RadioIrqProcess+0x2b8>)
 801c93c:	681b      	ldr	r3, [r3, #0]
 801c93e:	699b      	ldr	r3, [r3, #24]
 801c940:	2b00      	cmp	r3, #0
 801c942:	f000 80ed 	beq.w	801cb20 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801c946:	4b23      	ldr	r3, [pc, #140]	; (801c9d4 <RadioIrqProcess+0x2b8>)
 801c948:	681b      	ldr	r3, [r3, #0]
 801c94a:	699b      	ldr	r3, [r3, #24]
 801c94c:	2001      	movs	r0, #1
 801c94e:	4798      	blx	r3
        break;
 801c950:	e0e6      	b.n	801cb20 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801c952:	4b25      	ldr	r3, [pc, #148]	; (801c9e8 <RadioIrqProcess+0x2cc>)
 801c954:	2201      	movs	r2, #1
 801c956:	2100      	movs	r1, #0
 801c958:	2002      	movs	r0, #2
 801c95a:	f002 ffdd 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801c95e:	f000 fe25 	bl	801d5ac <SUBGRF_GetOperatingMode>
 801c962:	4603      	mov	r3, r0
 801c964:	2b04      	cmp	r3, #4
 801c966:	d115      	bne.n	801c994 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801c968:	4819      	ldr	r0, [pc, #100]	; (801c9d0 <RadioIrqProcess+0x2b4>)
 801c96a:	f002 fdcb 	bl	801f504 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801c96e:	2000      	movs	r0, #0
 801c970:	f000 ff66 	bl	801d840 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801c974:	4b17      	ldr	r3, [pc, #92]	; (801c9d4 <RadioIrqProcess+0x2b8>)
 801c976:	681b      	ldr	r3, [r3, #0]
 801c978:	2b00      	cmp	r3, #0
 801c97a:	f000 80d3 	beq.w	801cb24 <RadioIrqProcess+0x408>
 801c97e:	4b15      	ldr	r3, [pc, #84]	; (801c9d4 <RadioIrqProcess+0x2b8>)
 801c980:	681b      	ldr	r3, [r3, #0]
 801c982:	685b      	ldr	r3, [r3, #4]
 801c984:	2b00      	cmp	r3, #0
 801c986:	f000 80cd 	beq.w	801cb24 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801c98a:	4b12      	ldr	r3, [pc, #72]	; (801c9d4 <RadioIrqProcess+0x2b8>)
 801c98c:	681b      	ldr	r3, [r3, #0]
 801c98e:	685b      	ldr	r3, [r3, #4]
 801c990:	4798      	blx	r3
        break;
 801c992:	e0c7      	b.n	801cb24 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801c994:	f000 fe0a 	bl	801d5ac <SUBGRF_GetOperatingMode>
 801c998:	4603      	mov	r3, r0
 801c99a:	2b05      	cmp	r3, #5
 801c99c:	f040 80c2 	bne.w	801cb24 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801c9a0:	480d      	ldr	r0, [pc, #52]	; (801c9d8 <RadioIrqProcess+0x2bc>)
 801c9a2:	f002 fdaf 	bl	801f504 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801c9a6:	2000      	movs	r0, #0
 801c9a8:	f000 ff4a 	bl	801d840 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801c9ac:	4b09      	ldr	r3, [pc, #36]	; (801c9d4 <RadioIrqProcess+0x2b8>)
 801c9ae:	681b      	ldr	r3, [r3, #0]
 801c9b0:	2b00      	cmp	r3, #0
 801c9b2:	f000 80b7 	beq.w	801cb24 <RadioIrqProcess+0x408>
 801c9b6:	4b07      	ldr	r3, [pc, #28]	; (801c9d4 <RadioIrqProcess+0x2b8>)
 801c9b8:	681b      	ldr	r3, [r3, #0]
 801c9ba:	68db      	ldr	r3, [r3, #12]
 801c9bc:	2b00      	cmp	r3, #0
 801c9be:	f000 80b1 	beq.w	801cb24 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801c9c2:	4b04      	ldr	r3, [pc, #16]	; (801c9d4 <RadioIrqProcess+0x2b8>)
 801c9c4:	681b      	ldr	r3, [r3, #0]
 801c9c6:	68db      	ldr	r3, [r3, #12]
 801c9c8:	4798      	blx	r3
        break;
 801c9ca:	e0ab      	b.n	801cb24 <RadioIrqProcess+0x408>
 801c9cc:	20001b7c 	.word	0x20001b7c
 801c9d0:	20001bd8 	.word	0x20001bd8
 801c9d4:	20001b78 	.word	0x20001b78
 801c9d8:	20001bf0 	.word	0x20001bf0
 801c9dc:	20001a78 	.word	0x20001a78
 801c9e0:	20001ba0 	.word	0x20001ba0
 801c9e4:	10624dd3 	.word	0x10624dd3
 801c9e8:	08020804 	.word	0x08020804
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801c9ec:	4b54      	ldr	r3, [pc, #336]	; (801cb40 <RadioIrqProcess+0x424>)
 801c9ee:	2201      	movs	r2, #1
 801c9f0:	2100      	movs	r1, #0
 801c9f2:	2002      	movs	r0, #2
 801c9f4:	f002 ff90 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801c9f8:	4b52      	ldr	r3, [pc, #328]	; (801cb44 <RadioIrqProcess+0x428>)
 801c9fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c9fc:	2b00      	cmp	r3, #0
 801c9fe:	f000 8093 	beq.w	801cb28 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801ca02:	4a51      	ldr	r2, [pc, #324]	; (801cb48 <RadioIrqProcess+0x42c>)
 801ca04:	4b4f      	ldr	r3, [pc, #316]	; (801cb44 <RadioIrqProcess+0x428>)
 801ca06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ca08:	0c1b      	lsrs	r3, r3, #16
 801ca0a:	b2db      	uxtb	r3, r3
 801ca0c:	4619      	mov	r1, r3
 801ca0e:	f640 1003 	movw	r0, #2307	; 0x903
 801ca12:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801ca14:	4a4c      	ldr	r2, [pc, #304]	; (801cb48 <RadioIrqProcess+0x42c>)
 801ca16:	4b4b      	ldr	r3, [pc, #300]	; (801cb44 <RadioIrqProcess+0x428>)
 801ca18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ca1a:	0a1b      	lsrs	r3, r3, #8
 801ca1c:	b2db      	uxtb	r3, r3
 801ca1e:	4619      	mov	r1, r3
 801ca20:	f640 1004 	movw	r0, #2308	; 0x904
 801ca24:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801ca26:	4a48      	ldr	r2, [pc, #288]	; (801cb48 <RadioIrqProcess+0x42c>)
 801ca28:	4b46      	ldr	r3, [pc, #280]	; (801cb44 <RadioIrqProcess+0x428>)
 801ca2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ca2c:	b2db      	uxtb	r3, r3
 801ca2e:	4619      	mov	r1, r3
 801ca30:	f640 1005 	movw	r0, #2309	; 0x905
 801ca34:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801ca36:	4c44      	ldr	r4, [pc, #272]	; (801cb48 <RadioIrqProcess+0x42c>)
 801ca38:	4b44      	ldr	r3, [pc, #272]	; (801cb4c <RadioIrqProcess+0x430>)
 801ca3a:	f640 1002 	movw	r0, #2306	; 0x902
 801ca3e:	4798      	blx	r3
 801ca40:	4603      	mov	r3, r0
 801ca42:	f043 0301 	orr.w	r3, r3, #1
 801ca46:	b2db      	uxtb	r3, r3
 801ca48:	4619      	mov	r1, r3
 801ca4a:	f640 1002 	movw	r0, #2306	; 0x902
 801ca4e:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801ca50:	4b3c      	ldr	r3, [pc, #240]	; (801cb44 <RadioIrqProcess+0x428>)
 801ca52:	2200      	movs	r2, #0
 801ca54:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801ca56:	2300      	movs	r3, #0
 801ca58:	2200      	movs	r2, #0
 801ca5a:	f240 2162 	movw	r1, #610	; 0x262
 801ca5e:	f240 2062 	movw	r0, #610	; 0x262
 801ca62:	f001 f8c1 	bl	801dbe8 <SUBGRF_SetDioIrqParams>
        break;
 801ca66:	e05f      	b.n	801cb28 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801ca68:	4b39      	ldr	r3, [pc, #228]	; (801cb50 <RadioIrqProcess+0x434>)
 801ca6a:	2201      	movs	r2, #1
 801ca6c:	2100      	movs	r1, #0
 801ca6e:	2002      	movs	r0, #2
 801ca70:	f002 ff52 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801ca74:	f001 ff55 	bl	801e922 <RFW_Is_Init>
 801ca78:	4603      	mov	r3, r0
 801ca7a:	2b01      	cmp	r3, #1
 801ca7c:	d156      	bne.n	801cb2c <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801ca7e:	f001 ff86 	bl	801e98e <RFW_ReceivePayload>
        break;
 801ca82:	e053      	b.n	801cb2c <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801ca84:	4b33      	ldr	r3, [pc, #204]	; (801cb54 <RadioIrqProcess+0x438>)
 801ca86:	2201      	movs	r2, #1
 801ca88:	2100      	movs	r1, #0
 801ca8a:	2002      	movs	r0, #2
 801ca8c:	f002 ff44 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801ca90:	e051      	b.n	801cb36 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801ca92:	4831      	ldr	r0, [pc, #196]	; (801cb58 <RadioIrqProcess+0x43c>)
 801ca94:	f002 fd36 	bl	801f504 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801ca98:	4b2a      	ldr	r3, [pc, #168]	; (801cb44 <RadioIrqProcess+0x428>)
 801ca9a:	785b      	ldrb	r3, [r3, #1]
 801ca9c:	f083 0301 	eor.w	r3, r3, #1
 801caa0:	b2db      	uxtb	r3, r3
 801caa2:	2b00      	cmp	r3, #0
 801caa4:	d002      	beq.n	801caac <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801caa6:	2000      	movs	r0, #0
 801caa8:	f000 feca 	bl	801d840 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801caac:	4b2b      	ldr	r3, [pc, #172]	; (801cb5c <RadioIrqProcess+0x440>)
 801caae:	681b      	ldr	r3, [r3, #0]
 801cab0:	2b00      	cmp	r3, #0
 801cab2:	d03d      	beq.n	801cb30 <RadioIrqProcess+0x414>
 801cab4:	4b29      	ldr	r3, [pc, #164]	; (801cb5c <RadioIrqProcess+0x440>)
 801cab6:	681b      	ldr	r3, [r3, #0]
 801cab8:	68db      	ldr	r3, [r3, #12]
 801caba:	2b00      	cmp	r3, #0
 801cabc:	d038      	beq.n	801cb30 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801cabe:	4b27      	ldr	r3, [pc, #156]	; (801cb5c <RadioIrqProcess+0x440>)
 801cac0:	681b      	ldr	r3, [r3, #0]
 801cac2:	68db      	ldr	r3, [r3, #12]
 801cac4:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801cac6:	4b26      	ldr	r3, [pc, #152]	; (801cb60 <RadioIrqProcess+0x444>)
 801cac8:	2201      	movs	r2, #1
 801caca:	2100      	movs	r1, #0
 801cacc:	2002      	movs	r0, #2
 801cace:	f002 ff23 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801cad2:	e02d      	b.n	801cb30 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801cad4:	4b23      	ldr	r3, [pc, #140]	; (801cb64 <RadioIrqProcess+0x448>)
 801cad6:	2201      	movs	r2, #1
 801cad8:	2100      	movs	r1, #0
 801cada:	2002      	movs	r0, #2
 801cadc:	f002 ff1c 	bl	801f918 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801cae0:	4b18      	ldr	r3, [pc, #96]	; (801cb44 <RadioIrqProcess+0x428>)
 801cae2:	785b      	ldrb	r3, [r3, #1]
 801cae4:	f083 0301 	eor.w	r3, r3, #1
 801cae8:	b2db      	uxtb	r3, r3
 801caea:	2b00      	cmp	r3, #0
 801caec:	d002      	beq.n	801caf4 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801caee:	2000      	movs	r0, #0
 801caf0:	f000 fea6 	bl	801d840 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801caf4:	4b19      	ldr	r3, [pc, #100]	; (801cb5c <RadioIrqProcess+0x440>)
 801caf6:	681b      	ldr	r3, [r3, #0]
 801caf8:	2b00      	cmp	r3, #0
 801cafa:	d01b      	beq.n	801cb34 <RadioIrqProcess+0x418>
 801cafc:	4b17      	ldr	r3, [pc, #92]	; (801cb5c <RadioIrqProcess+0x440>)
 801cafe:	681b      	ldr	r3, [r3, #0]
 801cb00:	691b      	ldr	r3, [r3, #16]
 801cb02:	2b00      	cmp	r3, #0
 801cb04:	d016      	beq.n	801cb34 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801cb06:	4b15      	ldr	r3, [pc, #84]	; (801cb5c <RadioIrqProcess+0x440>)
 801cb08:	681b      	ldr	r3, [r3, #0]
 801cb0a:	691b      	ldr	r3, [r3, #16]
 801cb0c:	4798      	blx	r3
        break;
 801cb0e:	e011      	b.n	801cb34 <RadioIrqProcess+0x418>
        break;
 801cb10:	bf00      	nop
 801cb12:	e010      	b.n	801cb36 <RadioIrqProcess+0x41a>
        break;
 801cb14:	bf00      	nop
 801cb16:	e00e      	b.n	801cb36 <RadioIrqProcess+0x41a>
        break;
 801cb18:	bf00      	nop
 801cb1a:	e00c      	b.n	801cb36 <RadioIrqProcess+0x41a>
        break;
 801cb1c:	bf00      	nop
 801cb1e:	e00a      	b.n	801cb36 <RadioIrqProcess+0x41a>
        break;
 801cb20:	bf00      	nop
 801cb22:	e008      	b.n	801cb36 <RadioIrqProcess+0x41a>
        break;
 801cb24:	bf00      	nop
 801cb26:	e006      	b.n	801cb36 <RadioIrqProcess+0x41a>
        break;
 801cb28:	bf00      	nop
 801cb2a:	e004      	b.n	801cb36 <RadioIrqProcess+0x41a>
        break;
 801cb2c:	bf00      	nop
 801cb2e:	e002      	b.n	801cb36 <RadioIrqProcess+0x41a>
        break;
 801cb30:	bf00      	nop
 801cb32:	e000      	b.n	801cb36 <RadioIrqProcess+0x41a>
        break;
 801cb34:	bf00      	nop
    }
}
 801cb36:	bf00      	nop
 801cb38:	3708      	adds	r7, #8
 801cb3a:	46bd      	mov	sp, r7
 801cb3c:	bdb0      	pop	{r4, r5, r7, pc}
 801cb3e:	bf00      	nop
 801cb40:	08020818 	.word	0x08020818
 801cb44:	20001b7c 	.word	0x20001b7c
 801cb48:	0801c52b 	.word	0x0801c52b
 801cb4c:	0801c54f 	.word	0x0801c54f
 801cb50:	08020824 	.word	0x08020824
 801cb54:	08020830 	.word	0x08020830
 801cb58:	20001bf0 	.word	0x20001bf0
 801cb5c:	20001b78 	.word	0x20001b78
 801cb60:	0802083c 	.word	0x0802083c
 801cb64:	08020848 	.word	0x08020848

0801cb68 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801cb68:	b580      	push	{r7, lr}
 801cb6a:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801cb6c:	4b09      	ldr	r3, [pc, #36]	; (801cb94 <RadioTxPrbs+0x2c>)
 801cb6e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801cb72:	2101      	movs	r1, #1
 801cb74:	4618      	mov	r0, r3
 801cb76:	f001 fcdb 	bl	801e530 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801cb7a:	4b07      	ldr	r3, [pc, #28]	; (801cb98 <RadioTxPrbs+0x30>)
 801cb7c:	212d      	movs	r1, #45	; 0x2d
 801cb7e:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801cb82:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801cb84:	f000 ff1f 	bl	801d9c6 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801cb88:	4804      	ldr	r0, [pc, #16]	; (801cb9c <RadioTxPrbs+0x34>)
 801cb8a:	f000 fe75 	bl	801d878 <SUBGRF_SetTx>
}
 801cb8e:	bf00      	nop
 801cb90:	bd80      	pop	{r7, pc}
 801cb92:	bf00      	nop
 801cb94:	20001b7c 	.word	0x20001b7c
 801cb98:	0801c52b 	.word	0x0801c52b
 801cb9c:	000fffff 	.word	0x000fffff

0801cba0 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801cba0:	b580      	push	{r7, lr}
 801cba2:	b084      	sub	sp, #16
 801cba4:	af00      	add	r7, sp, #0
 801cba6:	4603      	mov	r3, r0
 801cba8:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801cbaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801cbae:	4618      	mov	r0, r3
 801cbb0:	f001 fce6 	bl	801e580 <SUBGRF_SetRfTxPower>
 801cbb4:	4603      	mov	r3, r0
 801cbb6:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801cbb8:	210e      	movs	r1, #14
 801cbba:	f640 101f 	movw	r0, #2335	; 0x91f
 801cbbe:	f001 fbc3 	bl	801e348 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801cbc2:	7bfb      	ldrb	r3, [r7, #15]
 801cbc4:	2101      	movs	r1, #1
 801cbc6:	4618      	mov	r0, r3
 801cbc8:	f001 fcb2 	bl	801e530 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801cbcc:	f000 fef2 	bl	801d9b4 <SUBGRF_SetTxContinuousWave>
}
 801cbd0:	bf00      	nop
 801cbd2:	3710      	adds	r7, #16
 801cbd4:	46bd      	mov	sp, r7
 801cbd6:	bd80      	pop	{r7, pc}

0801cbd8 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801cbd8:	b480      	push	{r7}
 801cbda:	b089      	sub	sp, #36	; 0x24
 801cbdc:	af00      	add	r7, sp, #0
 801cbde:	60f8      	str	r0, [r7, #12]
 801cbe0:	60b9      	str	r1, [r7, #8]
 801cbe2:	4613      	mov	r3, r2
 801cbe4:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801cbe6:	2300      	movs	r3, #0
 801cbe8:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801cbea:	2300      	movs	r3, #0
 801cbec:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801cbee:	2300      	movs	r3, #0
 801cbf0:	61bb      	str	r3, [r7, #24]
 801cbf2:	e011      	b.n	801cc18 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801cbf4:	69bb      	ldr	r3, [r7, #24]
 801cbf6:	68ba      	ldr	r2, [r7, #8]
 801cbf8:	4413      	add	r3, r2
 801cbfa:	781a      	ldrb	r2, [r3, #0]
 801cbfc:	69bb      	ldr	r3, [r7, #24]
 801cbfe:	68b9      	ldr	r1, [r7, #8]
 801cc00:	440b      	add	r3, r1
 801cc02:	43d2      	mvns	r2, r2
 801cc04:	b2d2      	uxtb	r2, r2
 801cc06:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801cc08:	69bb      	ldr	r3, [r7, #24]
 801cc0a:	68fa      	ldr	r2, [r7, #12]
 801cc0c:	4413      	add	r3, r2
 801cc0e:	2200      	movs	r2, #0
 801cc10:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801cc12:	69bb      	ldr	r3, [r7, #24]
 801cc14:	3301      	adds	r3, #1
 801cc16:	61bb      	str	r3, [r7, #24]
 801cc18:	79fb      	ldrb	r3, [r7, #7]
 801cc1a:	69ba      	ldr	r2, [r7, #24]
 801cc1c:	429a      	cmp	r2, r3
 801cc1e:	dbe9      	blt.n	801cbf4 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801cc20:	2300      	movs	r3, #0
 801cc22:	61bb      	str	r3, [r7, #24]
 801cc24:	e049      	b.n	801ccba <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801cc26:	69bb      	ldr	r3, [r7, #24]
 801cc28:	425a      	negs	r2, r3
 801cc2a:	f003 0307 	and.w	r3, r3, #7
 801cc2e:	f002 0207 	and.w	r2, r2, #7
 801cc32:	bf58      	it	pl
 801cc34:	4253      	negpl	r3, r2
 801cc36:	b2db      	uxtb	r3, r3
 801cc38:	f1c3 0307 	rsb	r3, r3, #7
 801cc3c:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801cc3e:	69bb      	ldr	r3, [r7, #24]
 801cc40:	2b00      	cmp	r3, #0
 801cc42:	da00      	bge.n	801cc46 <payload_integration+0x6e>
 801cc44:	3307      	adds	r3, #7
 801cc46:	10db      	asrs	r3, r3, #3
 801cc48:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801cc4a:	69bb      	ldr	r3, [r7, #24]
 801cc4c:	3301      	adds	r3, #1
 801cc4e:	425a      	negs	r2, r3
 801cc50:	f003 0307 	and.w	r3, r3, #7
 801cc54:	f002 0207 	and.w	r2, r2, #7
 801cc58:	bf58      	it	pl
 801cc5a:	4253      	negpl	r3, r2
 801cc5c:	b2db      	uxtb	r3, r3
 801cc5e:	f1c3 0307 	rsb	r3, r3, #7
 801cc62:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801cc64:	69bb      	ldr	r3, [r7, #24]
 801cc66:	3301      	adds	r3, #1
 801cc68:	2b00      	cmp	r3, #0
 801cc6a:	da00      	bge.n	801cc6e <payload_integration+0x96>
 801cc6c:	3307      	adds	r3, #7
 801cc6e:	10db      	asrs	r3, r3, #3
 801cc70:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801cc72:	7dbb      	ldrb	r3, [r7, #22]
 801cc74:	68ba      	ldr	r2, [r7, #8]
 801cc76:	4413      	add	r3, r2
 801cc78:	781b      	ldrb	r3, [r3, #0]
 801cc7a:	461a      	mov	r2, r3
 801cc7c:	7dfb      	ldrb	r3, [r7, #23]
 801cc7e:	fa42 f303 	asr.w	r3, r2, r3
 801cc82:	b2db      	uxtb	r3, r3
 801cc84:	f003 0301 	and.w	r3, r3, #1
 801cc88:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801cc8a:	7ffa      	ldrb	r2, [r7, #31]
 801cc8c:	7cfb      	ldrb	r3, [r7, #19]
 801cc8e:	4053      	eors	r3, r2
 801cc90:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801cc92:	7d3b      	ldrb	r3, [r7, #20]
 801cc94:	68fa      	ldr	r2, [r7, #12]
 801cc96:	4413      	add	r3, r2
 801cc98:	781b      	ldrb	r3, [r3, #0]
 801cc9a:	b25a      	sxtb	r2, r3
 801cc9c:	7ff9      	ldrb	r1, [r7, #31]
 801cc9e:	7d7b      	ldrb	r3, [r7, #21]
 801cca0:	fa01 f303 	lsl.w	r3, r1, r3
 801cca4:	b25b      	sxtb	r3, r3
 801cca6:	4313      	orrs	r3, r2
 801cca8:	b259      	sxtb	r1, r3
 801ccaa:	7d3b      	ldrb	r3, [r7, #20]
 801ccac:	68fa      	ldr	r2, [r7, #12]
 801ccae:	4413      	add	r3, r2
 801ccb0:	b2ca      	uxtb	r2, r1
 801ccb2:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801ccb4:	69bb      	ldr	r3, [r7, #24]
 801ccb6:	3301      	adds	r3, #1
 801ccb8:	61bb      	str	r3, [r7, #24]
 801ccba:	79fb      	ldrb	r3, [r7, #7]
 801ccbc:	00db      	lsls	r3, r3, #3
 801ccbe:	69ba      	ldr	r2, [r7, #24]
 801ccc0:	429a      	cmp	r2, r3
 801ccc2:	dbb0      	blt.n	801cc26 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801ccc4:	7ffb      	ldrb	r3, [r7, #31]
 801ccc6:	01db      	lsls	r3, r3, #7
 801ccc8:	b25a      	sxtb	r2, r3
 801ccca:	7ffb      	ldrb	r3, [r7, #31]
 801cccc:	019b      	lsls	r3, r3, #6
 801ccce:	b25b      	sxtb	r3, r3
 801ccd0:	4313      	orrs	r3, r2
 801ccd2:	b25b      	sxtb	r3, r3
 801ccd4:	7ffa      	ldrb	r2, [r7, #31]
 801ccd6:	2a00      	cmp	r2, #0
 801ccd8:	d101      	bne.n	801ccde <payload_integration+0x106>
 801ccda:	2220      	movs	r2, #32
 801ccdc:	e000      	b.n	801cce0 <payload_integration+0x108>
 801ccde:	2200      	movs	r2, #0
 801cce0:	4313      	orrs	r3, r2
 801cce2:	b259      	sxtb	r1, r3
 801cce4:	79fb      	ldrb	r3, [r7, #7]
 801cce6:	68fa      	ldr	r2, [r7, #12]
 801cce8:	4413      	add	r3, r2
 801ccea:	b2ca      	uxtb	r2, r1
 801ccec:	701a      	strb	r2, [r3, #0]
}
 801ccee:	bf00      	nop
 801ccf0:	3724      	adds	r7, #36	; 0x24
 801ccf2:	46bd      	mov	sp, r7
 801ccf4:	bc80      	pop	{r7}
 801ccf6:	4770      	bx	lr

0801ccf8 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801ccf8:	b580      	push	{r7, lr}
 801ccfa:	b08c      	sub	sp, #48	; 0x30
 801ccfc:	af00      	add	r7, sp, #0
 801ccfe:	60b9      	str	r1, [r7, #8]
 801cd00:	607a      	str	r2, [r7, #4]
 801cd02:	603b      	str	r3, [r7, #0]
 801cd04:	4603      	mov	r3, r0
 801cd06:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801cd08:	2300      	movs	r3, #0
 801cd0a:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801cd0c:	2300      	movs	r3, #0
 801cd0e:	623b      	str	r3, [r7, #32]
 801cd10:	2300      	movs	r3, #0
 801cd12:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801cd14:	f001 fdff 	bl	801e916 <RFW_DeInit>

    if( rxContinuous != 0 )
 801cd18:	687b      	ldr	r3, [r7, #4]
 801cd1a:	2b00      	cmp	r3, #0
 801cd1c:	d001      	beq.n	801cd22 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801cd1e:	2300      	movs	r3, #0
 801cd20:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801cd22:	687b      	ldr	r3, [r7, #4]
 801cd24:	2b00      	cmp	r3, #0
 801cd26:	bf14      	ite	ne
 801cd28:	2301      	movne	r3, #1
 801cd2a:	2300      	moveq	r3, #0
 801cd2c:	b2da      	uxtb	r2, r3
 801cd2e:	4ba3      	ldr	r3, [pc, #652]	; (801cfbc <RadioSetRxGenericConfig+0x2c4>)
 801cd30:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801cd32:	7bfb      	ldrb	r3, [r7, #15]
 801cd34:	2b00      	cmp	r3, #0
 801cd36:	d003      	beq.n	801cd40 <RadioSetRxGenericConfig+0x48>
 801cd38:	2b01      	cmp	r3, #1
 801cd3a:	f000 80dc 	beq.w	801cef6 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801cd3e:	e194      	b.n	801d06a <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801cd40:	68bb      	ldr	r3, [r7, #8]
 801cd42:	689b      	ldr	r3, [r3, #8]
 801cd44:	2b00      	cmp	r3, #0
 801cd46:	d003      	beq.n	801cd50 <RadioSetRxGenericConfig+0x58>
 801cd48:	68bb      	ldr	r3, [r7, #8]
 801cd4a:	68db      	ldr	r3, [r3, #12]
 801cd4c:	2b00      	cmp	r3, #0
 801cd4e:	d102      	bne.n	801cd56 <RadioSetRxGenericConfig+0x5e>
            return -1;
 801cd50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cd54:	e18a      	b.n	801d06c <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801cd56:	68bb      	ldr	r3, [r7, #8]
 801cd58:	7f9b      	ldrb	r3, [r3, #30]
 801cd5a:	2b08      	cmp	r3, #8
 801cd5c:	d902      	bls.n	801cd64 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801cd5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cd62:	e183      	b.n	801d06c <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801cd64:	68bb      	ldr	r3, [r7, #8]
 801cd66:	6919      	ldr	r1, [r3, #16]
 801cd68:	68bb      	ldr	r3, [r7, #8]
 801cd6a:	7f9b      	ldrb	r3, [r3, #30]
 801cd6c:	b29a      	uxth	r2, r3
 801cd6e:	f107 0320 	add.w	r3, r7, #32
 801cd72:	4618      	mov	r0, r3
 801cd74:	f001 fe8c 	bl	801ea90 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801cd78:	68bb      	ldr	r3, [r7, #8]
 801cd7a:	681b      	ldr	r3, [r3, #0]
 801cd7c:	2b00      	cmp	r3, #0
 801cd7e:	bf14      	ite	ne
 801cd80:	2301      	movne	r3, #1
 801cd82:	2300      	moveq	r3, #0
 801cd84:	b2db      	uxtb	r3, r3
 801cd86:	4618      	mov	r0, r3
 801cd88:	f000 fe26 	bl	801d9d8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801cd8c:	4b8b      	ldr	r3, [pc, #556]	; (801cfbc <RadioSetRxGenericConfig+0x2c4>)
 801cd8e:	2200      	movs	r2, #0
 801cd90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801cd94:	68bb      	ldr	r3, [r7, #8]
 801cd96:	689b      	ldr	r3, [r3, #8]
 801cd98:	4a88      	ldr	r2, [pc, #544]	; (801cfbc <RadioSetRxGenericConfig+0x2c4>)
 801cd9a:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801cd9c:	68bb      	ldr	r3, [r7, #8]
 801cd9e:	f893 2020 	ldrb.w	r2, [r3, #32]
 801cda2:	4b86      	ldr	r3, [pc, #536]	; (801cfbc <RadioSetRxGenericConfig+0x2c4>)
 801cda4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801cda8:	68bb      	ldr	r3, [r7, #8]
 801cdaa:	685b      	ldr	r3, [r3, #4]
 801cdac:	4618      	mov	r0, r3
 801cdae:	f001 fce5 	bl	801e77c <SUBGRF_GetFskBandwidthRegValue>
 801cdb2:	4603      	mov	r3, r0
 801cdb4:	461a      	mov	r2, r3
 801cdb6:	4b81      	ldr	r3, [pc, #516]	; (801cfbc <RadioSetRxGenericConfig+0x2c4>)
 801cdb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801cdbc:	4b7f      	ldr	r3, [pc, #508]	; (801cfbc <RadioSetRxGenericConfig+0x2c4>)
 801cdbe:	2200      	movs	r2, #0
 801cdc0:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801cdc2:	68bb      	ldr	r3, [r7, #8]
 801cdc4:	68db      	ldr	r3, [r3, #12]
 801cdc6:	b29b      	uxth	r3, r3
 801cdc8:	00db      	lsls	r3, r3, #3
 801cdca:	b29a      	uxth	r2, r3
 801cdcc:	4b7b      	ldr	r3, [pc, #492]	; (801cfbc <RadioSetRxGenericConfig+0x2c4>)
 801cdce:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801cdd0:	68bb      	ldr	r3, [r7, #8]
 801cdd2:	7fda      	ldrb	r2, [r3, #31]
 801cdd4:	4b79      	ldr	r3, [pc, #484]	; (801cfbc <RadioSetRxGenericConfig+0x2c4>)
 801cdd6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801cdd8:	68bb      	ldr	r3, [r7, #8]
 801cdda:	7f9b      	ldrb	r3, [r3, #30]
 801cddc:	00db      	lsls	r3, r3, #3
 801cdde:	b2da      	uxtb	r2, r3
 801cde0:	4b76      	ldr	r3, [pc, #472]	; (801cfbc <RadioSetRxGenericConfig+0x2c4>)
 801cde2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801cde4:	68bb      	ldr	r3, [r7, #8]
 801cde6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801cdea:	4b74      	ldr	r3, [pc, #464]	; (801cfbc <RadioSetRxGenericConfig+0x2c4>)
 801cdec:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801cdee:	68bb      	ldr	r3, [r7, #8]
 801cdf0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801cdf4:	2b00      	cmp	r3, #0
 801cdf6:	d105      	bne.n	801ce04 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801cdf8:	68bb      	ldr	r3, [r7, #8]
 801cdfa:	695b      	ldr	r3, [r3, #20]
 801cdfc:	b2da      	uxtb	r2, r3
 801cdfe:	4b6f      	ldr	r3, [pc, #444]	; (801cfbc <RadioSetRxGenericConfig+0x2c4>)
 801ce00:	759a      	strb	r2, [r3, #22]
 801ce02:	e00b      	b.n	801ce1c <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801ce04:	68bb      	ldr	r3, [r7, #8]
 801ce06:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801ce0a:	2b02      	cmp	r3, #2
 801ce0c:	d103      	bne.n	801ce16 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801ce0e:	4b6b      	ldr	r3, [pc, #428]	; (801cfbc <RadioSetRxGenericConfig+0x2c4>)
 801ce10:	22ff      	movs	r2, #255	; 0xff
 801ce12:	759a      	strb	r2, [r3, #22]
 801ce14:	e002      	b.n	801ce1c <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801ce16:	4b69      	ldr	r3, [pc, #420]	; (801cfbc <RadioSetRxGenericConfig+0x2c4>)
 801ce18:	22ff      	movs	r2, #255	; 0xff
 801ce1a:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801ce1c:	68bb      	ldr	r3, [r7, #8]
 801ce1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801ce22:	2b02      	cmp	r3, #2
 801ce24:	d004      	beq.n	801ce30 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801ce26:	68bb      	ldr	r3, [r7, #8]
 801ce28:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801ce2c:	2b02      	cmp	r3, #2
 801ce2e:	d12d      	bne.n	801ce8c <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801ce30:	68bb      	ldr	r3, [r7, #8]
 801ce32:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801ce36:	2bf1      	cmp	r3, #241	; 0xf1
 801ce38:	d00c      	beq.n	801ce54 <RadioSetRxGenericConfig+0x15c>
 801ce3a:	68bb      	ldr	r3, [r7, #8]
 801ce3c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801ce40:	2bf2      	cmp	r3, #242	; 0xf2
 801ce42:	d007      	beq.n	801ce54 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801ce44:	68bb      	ldr	r3, [r7, #8]
 801ce46:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801ce4a:	2b01      	cmp	r3, #1
 801ce4c:	d002      	beq.n	801ce54 <RadioSetRxGenericConfig+0x15c>
                return -1;
 801ce4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ce52:	e10b      	b.n	801d06c <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 801ce54:	2300      	movs	r3, #0
 801ce56:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801ce58:	68bb      	ldr	r3, [r7, #8]
 801ce5a:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801ce5c:	4b58      	ldr	r3, [pc, #352]	; (801cfc0 <RadioSetRxGenericConfig+0x2c8>)
 801ce5e:	6819      	ldr	r1, [r3, #0]
 801ce60:	f107 0314 	add.w	r3, r7, #20
 801ce64:	4a57      	ldr	r2, [pc, #348]	; (801cfc4 <RadioSetRxGenericConfig+0x2cc>)
 801ce66:	4618      	mov	r0, r3
 801ce68:	f001 fd48 	bl	801e8fc <RFW_Init>
 801ce6c:	4603      	mov	r3, r0
 801ce6e:	2b00      	cmp	r3, #0
 801ce70:	d002      	beq.n	801ce78 <RadioSetRxGenericConfig+0x180>
                return -1;
 801ce72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ce76:	e0f9      	b.n	801d06c <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801ce78:	4b50      	ldr	r3, [pc, #320]	; (801cfbc <RadioSetRxGenericConfig+0x2c4>)
 801ce7a:	2200      	movs	r2, #0
 801ce7c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801ce7e:	4b4f      	ldr	r3, [pc, #316]	; (801cfbc <RadioSetRxGenericConfig+0x2c4>)
 801ce80:	2201      	movs	r2, #1
 801ce82:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801ce84:	4b4d      	ldr	r3, [pc, #308]	; (801cfbc <RadioSetRxGenericConfig+0x2c4>)
 801ce86:	2200      	movs	r2, #0
 801ce88:	755a      	strb	r2, [r3, #21]
        {
 801ce8a:	e00e      	b.n	801ceaa <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801ce8c:	68bb      	ldr	r3, [r7, #8]
 801ce8e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801ce92:	4b4a      	ldr	r3, [pc, #296]	; (801cfbc <RadioSetRxGenericConfig+0x2c4>)
 801ce94:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801ce96:	68bb      	ldr	r3, [r7, #8]
 801ce98:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801ce9c:	4b47      	ldr	r3, [pc, #284]	; (801cfbc <RadioSetRxGenericConfig+0x2c4>)
 801ce9e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801cea0:	68bb      	ldr	r3, [r7, #8]
 801cea2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801cea6:	4b45      	ldr	r3, [pc, #276]	; (801cfbc <RadioSetRxGenericConfig+0x2c4>)
 801cea8:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801ceaa:	f7ff fa3c 	bl	801c326 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801ceae:	2000      	movs	r0, #0
 801ceb0:	f7fe fbd0 	bl	801b654 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ceb4:	4844      	ldr	r0, [pc, #272]	; (801cfc8 <RadioSetRxGenericConfig+0x2d0>)
 801ceb6:	f001 f82d 	bl	801df14 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ceba:	4844      	ldr	r0, [pc, #272]	; (801cfcc <RadioSetRxGenericConfig+0x2d4>)
 801cebc:	f001 f8fc 	bl	801e0b8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801cec0:	f107 0320 	add.w	r3, r7, #32
 801cec4:	4618      	mov	r0, r3
 801cec6:	f000 fbc0 	bl	801d64a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801ceca:	68bb      	ldr	r3, [r7, #8]
 801cecc:	8b9b      	ldrh	r3, [r3, #28]
 801cece:	4618      	mov	r0, r3
 801ced0:	f000 fc0a 	bl	801d6e8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801ced4:	68bb      	ldr	r3, [r7, #8]
 801ced6:	8b1b      	ldrh	r3, [r3, #24]
 801ced8:	4618      	mov	r0, r3
 801ceda:	f000 fbe5 	bl	801d6a8 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801cede:	683b      	ldr	r3, [r7, #0]
 801cee0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801cee4:	fb03 f202 	mul.w	r2, r3, r2
 801cee8:	68bb      	ldr	r3, [r7, #8]
 801ceea:	689b      	ldr	r3, [r3, #8]
 801ceec:	fbb2 f3f3 	udiv	r3, r2, r3
 801cef0:	4a32      	ldr	r2, [pc, #200]	; (801cfbc <RadioSetRxGenericConfig+0x2c4>)
 801cef2:	6093      	str	r3, [r2, #8]
        break;
 801cef4:	e0b9      	b.n	801d06a <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801cef6:	68bb      	ldr	r3, [r7, #8]
 801cef8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801cefa:	2b00      	cmp	r3, #0
 801cefc:	d102      	bne.n	801cf04 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801cefe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cf02:	e0b3      	b.n	801d06c <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801cf04:	68bb      	ldr	r3, [r7, #8]
 801cf06:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801cf0a:	2b01      	cmp	r3, #1
 801cf0c:	d104      	bne.n	801cf18 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801cf0e:	68bb      	ldr	r3, [r7, #8]
 801cf10:	695b      	ldr	r3, [r3, #20]
 801cf12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801cf16:	e002      	b.n	801cf1e <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801cf18:	23ff      	movs	r3, #255	; 0xff
 801cf1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801cf1e:	68bb      	ldr	r3, [r7, #8]
 801cf20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf22:	2b00      	cmp	r3, #0
 801cf24:	bf14      	ite	ne
 801cf26:	2301      	movne	r3, #1
 801cf28:	2300      	moveq	r3, #0
 801cf2a:	b2db      	uxtb	r3, r3
 801cf2c:	4618      	mov	r0, r3
 801cf2e:	f000 fd53 	bl	801d9d8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801cf32:	683b      	ldr	r3, [r7, #0]
 801cf34:	b2db      	uxtb	r3, r3
 801cf36:	4618      	mov	r0, r3
 801cf38:	f000 fd5d 	bl	801d9f6 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801cf3c:	4b1f      	ldr	r3, [pc, #124]	; (801cfbc <RadioSetRxGenericConfig+0x2c4>)
 801cf3e:	2201      	movs	r2, #1
 801cf40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801cf44:	68bb      	ldr	r3, [r7, #8]
 801cf46:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801cf4a:	4b1c      	ldr	r3, [pc, #112]	; (801cfbc <RadioSetRxGenericConfig+0x2c4>)
 801cf4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801cf50:	68bb      	ldr	r3, [r7, #8]
 801cf52:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801cf56:	4b19      	ldr	r3, [pc, #100]	; (801cfbc <RadioSetRxGenericConfig+0x2c4>)
 801cf58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801cf5c:	68bb      	ldr	r3, [r7, #8]
 801cf5e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801cf62:	4b16      	ldr	r3, [pc, #88]	; (801cfbc <RadioSetRxGenericConfig+0x2c4>)
 801cf64:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801cf68:	68bb      	ldr	r3, [r7, #8]
 801cf6a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801cf6e:	2b02      	cmp	r3, #2
 801cf70:	d010      	beq.n	801cf94 <RadioSetRxGenericConfig+0x29c>
 801cf72:	2b02      	cmp	r3, #2
 801cf74:	dc2c      	bgt.n	801cfd0 <RadioSetRxGenericConfig+0x2d8>
 801cf76:	2b00      	cmp	r3, #0
 801cf78:	d002      	beq.n	801cf80 <RadioSetRxGenericConfig+0x288>
 801cf7a:	2b01      	cmp	r3, #1
 801cf7c:	d005      	beq.n	801cf8a <RadioSetRxGenericConfig+0x292>
            break;
 801cf7e:	e027      	b.n	801cfd0 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801cf80:	4b0e      	ldr	r3, [pc, #56]	; (801cfbc <RadioSetRxGenericConfig+0x2c4>)
 801cf82:	2200      	movs	r2, #0
 801cf84:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801cf88:	e023      	b.n	801cfd2 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801cf8a:	4b0c      	ldr	r3, [pc, #48]	; (801cfbc <RadioSetRxGenericConfig+0x2c4>)
 801cf8c:	2201      	movs	r2, #1
 801cf8e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801cf92:	e01e      	b.n	801cfd2 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801cf94:	68bb      	ldr	r3, [r7, #8]
 801cf96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801cf9a:	2b0b      	cmp	r3, #11
 801cf9c:	d004      	beq.n	801cfa8 <RadioSetRxGenericConfig+0x2b0>
 801cf9e:	68bb      	ldr	r3, [r7, #8]
 801cfa0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801cfa4:	2b0c      	cmp	r3, #12
 801cfa6:	d104      	bne.n	801cfb2 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801cfa8:	4b04      	ldr	r3, [pc, #16]	; (801cfbc <RadioSetRxGenericConfig+0x2c4>)
 801cfaa:	2201      	movs	r2, #1
 801cfac:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801cfb0:	e00f      	b.n	801cfd2 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801cfb2:	4b02      	ldr	r3, [pc, #8]	; (801cfbc <RadioSetRxGenericConfig+0x2c4>)
 801cfb4:	2200      	movs	r2, #0
 801cfb6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801cfba:	e00a      	b.n	801cfd2 <RadioSetRxGenericConfig+0x2da>
 801cfbc:	20001b7c 	.word	0x20001b7c
 801cfc0:	20001b78 	.word	0x20001b78
 801cfc4:	20001bf0 	.word	0x20001bf0
 801cfc8:	20001bb4 	.word	0x20001bb4
 801cfcc:	20001b8a 	.word	0x20001b8a
            break;
 801cfd0:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801cfd2:	4b28      	ldr	r3, [pc, #160]	; (801d074 <RadioSetRxGenericConfig+0x37c>)
 801cfd4:	2201      	movs	r2, #1
 801cfd6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801cfd8:	68bb      	ldr	r3, [r7, #8]
 801cfda:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801cfdc:	4b25      	ldr	r3, [pc, #148]	; (801d074 <RadioSetRxGenericConfig+0x37c>)
 801cfde:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801cfe0:	68bb      	ldr	r3, [r7, #8]
 801cfe2:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801cfe6:	4b23      	ldr	r3, [pc, #140]	; (801d074 <RadioSetRxGenericConfig+0x37c>)
 801cfe8:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801cfea:	4a22      	ldr	r2, [pc, #136]	; (801d074 <RadioSetRxGenericConfig+0x37c>)
 801cfec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801cff0:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801cff2:	68bb      	ldr	r3, [r7, #8]
 801cff4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801cff8:	4b1e      	ldr	r3, [pc, #120]	; (801d074 <RadioSetRxGenericConfig+0x37c>)
 801cffa:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801cffe:	68bb      	ldr	r3, [r7, #8]
 801d000:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801d004:	4b1b      	ldr	r3, [pc, #108]	; (801d074 <RadioSetRxGenericConfig+0x37c>)
 801d006:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801d00a:	f7ff f98c 	bl	801c326 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801d00e:	2001      	movs	r0, #1
 801d010:	f7fe fb20 	bl	801b654 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d014:	4818      	ldr	r0, [pc, #96]	; (801d078 <RadioSetRxGenericConfig+0x380>)
 801d016:	f000 ff7d 	bl	801df14 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d01a:	4818      	ldr	r0, [pc, #96]	; (801d07c <RadioSetRxGenericConfig+0x384>)
 801d01c:	f001 f84c 	bl	801e0b8 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801d020:	4b14      	ldr	r3, [pc, #80]	; (801d074 <RadioSetRxGenericConfig+0x37c>)
 801d022:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801d026:	2b01      	cmp	r3, #1
 801d028:	d10d      	bne.n	801d046 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801d02a:	f240 7036 	movw	r0, #1846	; 0x736
 801d02e:	f001 f99f 	bl	801e370 <SUBGRF_ReadRegister>
 801d032:	4603      	mov	r3, r0
 801d034:	f023 0304 	bic.w	r3, r3, #4
 801d038:	b2db      	uxtb	r3, r3
 801d03a:	4619      	mov	r1, r3
 801d03c:	f240 7036 	movw	r0, #1846	; 0x736
 801d040:	f001 f982 	bl	801e348 <SUBGRF_WriteRegister>
 801d044:	e00c      	b.n	801d060 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801d046:	f240 7036 	movw	r0, #1846	; 0x736
 801d04a:	f001 f991 	bl	801e370 <SUBGRF_ReadRegister>
 801d04e:	4603      	mov	r3, r0
 801d050:	f043 0304 	orr.w	r3, r3, #4
 801d054:	b2db      	uxtb	r3, r3
 801d056:	4619      	mov	r1, r3
 801d058:	f240 7036 	movw	r0, #1846	; 0x736
 801d05c:	f001 f974 	bl	801e348 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801d060:	4b04      	ldr	r3, [pc, #16]	; (801d074 <RadioSetRxGenericConfig+0x37c>)
 801d062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d066:	609a      	str	r2, [r3, #8]
        break;
 801d068:	bf00      	nop
    }
    return status;
 801d06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801d06c:	4618      	mov	r0, r3
 801d06e:	3730      	adds	r7, #48	; 0x30
 801d070:	46bd      	mov	sp, r7
 801d072:	bd80      	pop	{r7, pc}
 801d074:	20001b7c 	.word	0x20001b7c
 801d078:	20001bb4 	.word	0x20001bb4
 801d07c:	20001b8a 	.word	0x20001b8a

0801d080 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801d080:	b580      	push	{r7, lr}
 801d082:	b08e      	sub	sp, #56	; 0x38
 801d084:	af00      	add	r7, sp, #0
 801d086:	60b9      	str	r1, [r7, #8]
 801d088:	607b      	str	r3, [r7, #4]
 801d08a:	4603      	mov	r3, r0
 801d08c:	73fb      	strb	r3, [r7, #15]
 801d08e:	4613      	mov	r3, r2
 801d090:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801d092:	2300      	movs	r3, #0
 801d094:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d096:	2300      	movs	r3, #0
 801d098:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801d09a:	f001 fc3c 	bl	801e916 <RFW_DeInit>
    switch( modem )
 801d09e:	7bfb      	ldrb	r3, [r7, #15]
 801d0a0:	2b03      	cmp	r3, #3
 801d0a2:	f200 8204 	bhi.w	801d4ae <RadioSetTxGenericConfig+0x42e>
 801d0a6:	a201      	add	r2, pc, #4	; (adr r2, 801d0ac <RadioSetTxGenericConfig+0x2c>)
 801d0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d0ac:	0801d231 	.word	0x0801d231
 801d0b0:	0801d379 	.word	0x0801d379
 801d0b4:	0801d471 	.word	0x0801d471
 801d0b8:	0801d0bd 	.word	0x0801d0bd
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801d0bc:	68bb      	ldr	r3, [r7, #8]
 801d0be:	7c9b      	ldrb	r3, [r3, #18]
 801d0c0:	2b08      	cmp	r3, #8
 801d0c2:	d902      	bls.n	801d0ca <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801d0c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d0c8:	e206      	b.n	801d4d8 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801d0ca:	68bb      	ldr	r3, [r7, #8]
 801d0cc:	6899      	ldr	r1, [r3, #8]
 801d0ce:	68bb      	ldr	r3, [r7, #8]
 801d0d0:	7c9b      	ldrb	r3, [r3, #18]
 801d0d2:	b29a      	uxth	r2, r3
 801d0d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d0d8:	4618      	mov	r0, r3
 801d0da:	f001 fcd9 	bl	801ea90 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801d0de:	68bb      	ldr	r3, [r7, #8]
 801d0e0:	681b      	ldr	r3, [r3, #0]
 801d0e2:	2b00      	cmp	r3, #0
 801d0e4:	d102      	bne.n	801d0ec <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801d0e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d0ea:	e1f5      	b.n	801d4d8 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801d0ec:	68bb      	ldr	r3, [r7, #8]
 801d0ee:	681b      	ldr	r3, [r3, #0]
 801d0f0:	f242 7210 	movw	r2, #10000	; 0x2710
 801d0f4:	4293      	cmp	r3, r2
 801d0f6:	d813      	bhi.n	801d120 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801d0f8:	2302      	movs	r3, #2
 801d0fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801d0fe:	4b99      	ldr	r3, [pc, #612]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d100:	2203      	movs	r2, #3
 801d102:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801d104:	4b97      	ldr	r3, [pc, #604]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d106:	2203      	movs	r2, #3
 801d108:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801d10c:	68bb      	ldr	r3, [r7, #8]
 801d10e:	681b      	ldr	r3, [r3, #0]
 801d110:	4a94      	ldr	r2, [pc, #592]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d112:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801d114:	68bb      	ldr	r3, [r7, #8]
 801d116:	7cda      	ldrb	r2, [r3, #19]
 801d118:	4b92      	ldr	r3, [pc, #584]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d11a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801d11e:	e017      	b.n	801d150 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801d120:	2300      	movs	r3, #0
 801d122:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801d126:	4b8f      	ldr	r3, [pc, #572]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d128:	2200      	movs	r2, #0
 801d12a:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801d12c:	4b8d      	ldr	r3, [pc, #564]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d12e:	2200      	movs	r2, #0
 801d130:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801d134:	68bb      	ldr	r3, [r7, #8]
 801d136:	681b      	ldr	r3, [r3, #0]
 801d138:	4a8a      	ldr	r2, [pc, #552]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d13a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801d13c:	68bb      	ldr	r3, [r7, #8]
 801d13e:	7cda      	ldrb	r2, [r3, #19]
 801d140:	4b88      	ldr	r3, [pc, #544]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801d146:	68bb      	ldr	r3, [r7, #8]
 801d148:	681b      	ldr	r3, [r3, #0]
 801d14a:	089b      	lsrs	r3, r3, #2
 801d14c:	4a85      	ldr	r2, [pc, #532]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d14e:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801d150:	68bb      	ldr	r3, [r7, #8]
 801d152:	685b      	ldr	r3, [r3, #4]
 801d154:	b29b      	uxth	r3, r3
 801d156:	00db      	lsls	r3, r3, #3
 801d158:	b29a      	uxth	r2, r3
 801d15a:	4b82      	ldr	r3, [pc, #520]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d15c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801d15e:	4b81      	ldr	r3, [pc, #516]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d160:	2204      	movs	r2, #4
 801d162:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801d164:	68bb      	ldr	r3, [r7, #8]
 801d166:	7c9b      	ldrb	r3, [r3, #18]
 801d168:	00db      	lsls	r3, r3, #3
 801d16a:	b2da      	uxtb	r2, r3
 801d16c:	4b7d      	ldr	r3, [pc, #500]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d16e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801d170:	4b7c      	ldr	r3, [pc, #496]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d172:	2200      	movs	r2, #0
 801d174:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801d176:	68bb      	ldr	r3, [r7, #8]
 801d178:	7d9b      	ldrb	r3, [r3, #22]
 801d17a:	2b02      	cmp	r3, #2
 801d17c:	d003      	beq.n	801d186 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801d17e:	68bb      	ldr	r3, [r7, #8]
 801d180:	7d1b      	ldrb	r3, [r3, #20]
 801d182:	2b02      	cmp	r3, #2
 801d184:	d12b      	bne.n	801d1de <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801d186:	68bb      	ldr	r3, [r7, #8]
 801d188:	7d5b      	ldrb	r3, [r3, #21]
 801d18a:	2bf1      	cmp	r3, #241	; 0xf1
 801d18c:	d00a      	beq.n	801d1a4 <RadioSetTxGenericConfig+0x124>
 801d18e:	68bb      	ldr	r3, [r7, #8]
 801d190:	7d5b      	ldrb	r3, [r3, #21]
 801d192:	2bf2      	cmp	r3, #242	; 0xf2
 801d194:	d006      	beq.n	801d1a4 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801d196:	68bb      	ldr	r3, [r7, #8]
 801d198:	7d5b      	ldrb	r3, [r3, #21]
 801d19a:	2b01      	cmp	r3, #1
 801d19c:	d002      	beq.n	801d1a4 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801d19e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d1a2:	e199      	b.n	801d4d8 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801d1a4:	68bb      	ldr	r3, [r7, #8]
 801d1a6:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801d1a8:	2301      	movs	r3, #1
 801d1aa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801d1ae:	4b6e      	ldr	r3, [pc, #440]	; (801d368 <RadioSetTxGenericConfig+0x2e8>)
 801d1b0:	6819      	ldr	r1, [r3, #0]
 801d1b2:	f107 0320 	add.w	r3, r7, #32
 801d1b6:	4a6d      	ldr	r2, [pc, #436]	; (801d36c <RadioSetTxGenericConfig+0x2ec>)
 801d1b8:	4618      	mov	r0, r3
 801d1ba:	f001 fb9f 	bl	801e8fc <RFW_Init>
 801d1be:	4603      	mov	r3, r0
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	d002      	beq.n	801d1ca <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801d1c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d1c8:	e186      	b.n	801d4d8 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801d1ca:	4b66      	ldr	r3, [pc, #408]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d1cc:	2200      	movs	r2, #0
 801d1ce:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801d1d0:	4b64      	ldr	r3, [pc, #400]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d1d2:	2201      	movs	r2, #1
 801d1d4:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801d1d6:	4b63      	ldr	r3, [pc, #396]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d1d8:	2200      	movs	r2, #0
 801d1da:	755a      	strb	r2, [r3, #21]
        {
 801d1dc:	e00b      	b.n	801d1f6 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801d1de:	68bb      	ldr	r3, [r7, #8]
 801d1e0:	7d5a      	ldrb	r2, [r3, #21]
 801d1e2:	4b60      	ldr	r3, [pc, #384]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d1e4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801d1e6:	68bb      	ldr	r3, [r7, #8]
 801d1e8:	7d9a      	ldrb	r2, [r3, #22]
 801d1ea:	4b5e      	ldr	r3, [pc, #376]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d1ec:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801d1ee:	68bb      	ldr	r3, [r7, #8]
 801d1f0:	7d1a      	ldrb	r2, [r3, #20]
 801d1f2:	4b5c      	ldr	r3, [pc, #368]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d1f4:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801d1f6:	f7ff f896 	bl	801c326 <RadioStandby>
        RadioSetModem( radio_modem );
 801d1fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801d1fe:	4618      	mov	r0, r3
 801d200:	f7fe fa28 	bl	801b654 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d204:	485a      	ldr	r0, [pc, #360]	; (801d370 <RadioSetTxGenericConfig+0x2f0>)
 801d206:	f000 fe85 	bl	801df14 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d20a:	485a      	ldr	r0, [pc, #360]	; (801d374 <RadioSetTxGenericConfig+0x2f4>)
 801d20c:	f000 ff54 	bl	801e0b8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801d210:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d214:	4618      	mov	r0, r3
 801d216:	f000 fa18 	bl	801d64a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801d21a:	68bb      	ldr	r3, [r7, #8]
 801d21c:	8a1b      	ldrh	r3, [r3, #16]
 801d21e:	4618      	mov	r0, r3
 801d220:	f000 fa62 	bl	801d6e8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801d224:	68bb      	ldr	r3, [r7, #8]
 801d226:	899b      	ldrh	r3, [r3, #12]
 801d228:	4618      	mov	r0, r3
 801d22a:	f000 fa3d 	bl	801d6a8 <SUBGRF_SetCrcPolynomial>
        break;
 801d22e:	e13f      	b.n	801d4b0 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801d230:	68bb      	ldr	r3, [r7, #8]
 801d232:	681b      	ldr	r3, [r3, #0]
 801d234:	2b00      	cmp	r3, #0
 801d236:	d102      	bne.n	801d23e <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801d238:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d23c:	e14c      	b.n	801d4d8 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801d23e:	68bb      	ldr	r3, [r7, #8]
 801d240:	7c9b      	ldrb	r3, [r3, #18]
 801d242:	2b08      	cmp	r3, #8
 801d244:	d902      	bls.n	801d24c <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801d246:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d24a:	e145      	b.n	801d4d8 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801d24c:	68bb      	ldr	r3, [r7, #8]
 801d24e:	6899      	ldr	r1, [r3, #8]
 801d250:	68bb      	ldr	r3, [r7, #8]
 801d252:	7c9b      	ldrb	r3, [r3, #18]
 801d254:	b29a      	uxth	r2, r3
 801d256:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d25a:	4618      	mov	r0, r3
 801d25c:	f001 fc18 	bl	801ea90 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801d260:	4b40      	ldr	r3, [pc, #256]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d262:	2200      	movs	r2, #0
 801d264:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801d268:	68bb      	ldr	r3, [r7, #8]
 801d26a:	681b      	ldr	r3, [r3, #0]
 801d26c:	4a3d      	ldr	r2, [pc, #244]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d26e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801d270:	68bb      	ldr	r3, [r7, #8]
 801d272:	7cda      	ldrb	r2, [r3, #19]
 801d274:	4b3b      	ldr	r3, [pc, #236]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801d27a:	68bb      	ldr	r3, [r7, #8]
 801d27c:	699b      	ldr	r3, [r3, #24]
 801d27e:	4a39      	ldr	r2, [pc, #228]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d280:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801d282:	4b38      	ldr	r3, [pc, #224]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d284:	2200      	movs	r2, #0
 801d286:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801d288:	68bb      	ldr	r3, [r7, #8]
 801d28a:	685b      	ldr	r3, [r3, #4]
 801d28c:	b29b      	uxth	r3, r3
 801d28e:	00db      	lsls	r3, r3, #3
 801d290:	b29a      	uxth	r2, r3
 801d292:	4b34      	ldr	r3, [pc, #208]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d294:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801d296:	4b33      	ldr	r3, [pc, #204]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d298:	2204      	movs	r2, #4
 801d29a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801d29c:	68bb      	ldr	r3, [r7, #8]
 801d29e:	7c9b      	ldrb	r3, [r3, #18]
 801d2a0:	00db      	lsls	r3, r3, #3
 801d2a2:	b2da      	uxtb	r2, r3
 801d2a4:	4b2f      	ldr	r3, [pc, #188]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d2a6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801d2a8:	4b2e      	ldr	r3, [pc, #184]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d2aa:	2200      	movs	r2, #0
 801d2ac:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801d2ae:	68bb      	ldr	r3, [r7, #8]
 801d2b0:	7d9b      	ldrb	r3, [r3, #22]
 801d2b2:	2b02      	cmp	r3, #2
 801d2b4:	d003      	beq.n	801d2be <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801d2b6:	68bb      	ldr	r3, [r7, #8]
 801d2b8:	7d1b      	ldrb	r3, [r3, #20]
 801d2ba:	2b02      	cmp	r3, #2
 801d2bc:	d12a      	bne.n	801d314 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801d2be:	68bb      	ldr	r3, [r7, #8]
 801d2c0:	7d5b      	ldrb	r3, [r3, #21]
 801d2c2:	2bf1      	cmp	r3, #241	; 0xf1
 801d2c4:	d00a      	beq.n	801d2dc <RadioSetTxGenericConfig+0x25c>
 801d2c6:	68bb      	ldr	r3, [r7, #8]
 801d2c8:	7d5b      	ldrb	r3, [r3, #21]
 801d2ca:	2bf2      	cmp	r3, #242	; 0xf2
 801d2cc:	d006      	beq.n	801d2dc <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801d2ce:	68bb      	ldr	r3, [r7, #8]
 801d2d0:	7d5b      	ldrb	r3, [r3, #21]
 801d2d2:	2b01      	cmp	r3, #1
 801d2d4:	d002      	beq.n	801d2dc <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801d2d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d2da:	e0fd      	b.n	801d4d8 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801d2dc:	2301      	movs	r3, #1
 801d2de:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801d2e0:	68bb      	ldr	r3, [r7, #8]
 801d2e2:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801d2e4:	4b20      	ldr	r3, [pc, #128]	; (801d368 <RadioSetTxGenericConfig+0x2e8>)
 801d2e6:	6819      	ldr	r1, [r3, #0]
 801d2e8:	f107 0314 	add.w	r3, r7, #20
 801d2ec:	4a1f      	ldr	r2, [pc, #124]	; (801d36c <RadioSetTxGenericConfig+0x2ec>)
 801d2ee:	4618      	mov	r0, r3
 801d2f0:	f001 fb04 	bl	801e8fc <RFW_Init>
 801d2f4:	4603      	mov	r3, r0
 801d2f6:	2b00      	cmp	r3, #0
 801d2f8:	d002      	beq.n	801d300 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801d2fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d2fe:	e0eb      	b.n	801d4d8 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801d300:	4b18      	ldr	r3, [pc, #96]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d302:	2200      	movs	r2, #0
 801d304:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801d306:	4b17      	ldr	r3, [pc, #92]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d308:	2201      	movs	r2, #1
 801d30a:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801d30c:	4b15      	ldr	r3, [pc, #84]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d30e:	2200      	movs	r2, #0
 801d310:	755a      	strb	r2, [r3, #21]
        {
 801d312:	e00b      	b.n	801d32c <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801d314:	68bb      	ldr	r3, [r7, #8]
 801d316:	7d5a      	ldrb	r2, [r3, #21]
 801d318:	4b12      	ldr	r3, [pc, #72]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d31a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801d31c:	68bb      	ldr	r3, [r7, #8]
 801d31e:	7d9a      	ldrb	r2, [r3, #22]
 801d320:	4b10      	ldr	r3, [pc, #64]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d322:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801d324:	68bb      	ldr	r3, [r7, #8]
 801d326:	7d1a      	ldrb	r2, [r3, #20]
 801d328:	4b0e      	ldr	r3, [pc, #56]	; (801d364 <RadioSetTxGenericConfig+0x2e4>)
 801d32a:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801d32c:	f7fe fffb 	bl	801c326 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801d330:	2000      	movs	r0, #0
 801d332:	f7fe f98f 	bl	801b654 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d336:	480e      	ldr	r0, [pc, #56]	; (801d370 <RadioSetTxGenericConfig+0x2f0>)
 801d338:	f000 fdec 	bl	801df14 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d33c:	480d      	ldr	r0, [pc, #52]	; (801d374 <RadioSetTxGenericConfig+0x2f4>)
 801d33e:	f000 febb 	bl	801e0b8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801d342:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d346:	4618      	mov	r0, r3
 801d348:	f000 f97f 	bl	801d64a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801d34c:	68bb      	ldr	r3, [r7, #8]
 801d34e:	8a1b      	ldrh	r3, [r3, #16]
 801d350:	4618      	mov	r0, r3
 801d352:	f000 f9c9 	bl	801d6e8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801d356:	68bb      	ldr	r3, [r7, #8]
 801d358:	899b      	ldrh	r3, [r3, #12]
 801d35a:	4618      	mov	r0, r3
 801d35c:	f000 f9a4 	bl	801d6a8 <SUBGRF_SetCrcPolynomial>
        break;
 801d360:	e0a6      	b.n	801d4b0 <RadioSetTxGenericConfig+0x430>
 801d362:	bf00      	nop
 801d364:	20001b7c 	.word	0x20001b7c
 801d368:	20001b78 	.word	0x20001b78
 801d36c:	20001bd8 	.word	0x20001bd8
 801d370:	20001bb4 	.word	0x20001bb4
 801d374:	20001b8a 	.word	0x20001b8a
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801d378:	4b59      	ldr	r3, [pc, #356]	; (801d4e0 <RadioSetTxGenericConfig+0x460>)
 801d37a:	2201      	movs	r2, #1
 801d37c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801d380:	68bb      	ldr	r3, [r7, #8]
 801d382:	781a      	ldrb	r2, [r3, #0]
 801d384:	4b56      	ldr	r3, [pc, #344]	; (801d4e0 <RadioSetTxGenericConfig+0x460>)
 801d386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801d38a:	68bb      	ldr	r3, [r7, #8]
 801d38c:	785a      	ldrb	r2, [r3, #1]
 801d38e:	4b54      	ldr	r3, [pc, #336]	; (801d4e0 <RadioSetTxGenericConfig+0x460>)
 801d390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801d394:	68bb      	ldr	r3, [r7, #8]
 801d396:	789a      	ldrb	r2, [r3, #2]
 801d398:	4b51      	ldr	r3, [pc, #324]	; (801d4e0 <RadioSetTxGenericConfig+0x460>)
 801d39a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801d39e:	68bb      	ldr	r3, [r7, #8]
 801d3a0:	78db      	ldrb	r3, [r3, #3]
 801d3a2:	2b02      	cmp	r3, #2
 801d3a4:	d010      	beq.n	801d3c8 <RadioSetTxGenericConfig+0x348>
 801d3a6:	2b02      	cmp	r3, #2
 801d3a8:	dc20      	bgt.n	801d3ec <RadioSetTxGenericConfig+0x36c>
 801d3aa:	2b00      	cmp	r3, #0
 801d3ac:	d002      	beq.n	801d3b4 <RadioSetTxGenericConfig+0x334>
 801d3ae:	2b01      	cmp	r3, #1
 801d3b0:	d005      	beq.n	801d3be <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801d3b2:	e01b      	b.n	801d3ec <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d3b4:	4b4a      	ldr	r3, [pc, #296]	; (801d4e0 <RadioSetTxGenericConfig+0x460>)
 801d3b6:	2200      	movs	r2, #0
 801d3b8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d3bc:	e017      	b.n	801d3ee <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d3be:	4b48      	ldr	r3, [pc, #288]	; (801d4e0 <RadioSetTxGenericConfig+0x460>)
 801d3c0:	2201      	movs	r2, #1
 801d3c2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d3c6:	e012      	b.n	801d3ee <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801d3c8:	68bb      	ldr	r3, [r7, #8]
 801d3ca:	781b      	ldrb	r3, [r3, #0]
 801d3cc:	2b0b      	cmp	r3, #11
 801d3ce:	d003      	beq.n	801d3d8 <RadioSetTxGenericConfig+0x358>
 801d3d0:	68bb      	ldr	r3, [r7, #8]
 801d3d2:	781b      	ldrb	r3, [r3, #0]
 801d3d4:	2b0c      	cmp	r3, #12
 801d3d6:	d104      	bne.n	801d3e2 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d3d8:	4b41      	ldr	r3, [pc, #260]	; (801d4e0 <RadioSetTxGenericConfig+0x460>)
 801d3da:	2201      	movs	r2, #1
 801d3dc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d3e0:	e005      	b.n	801d3ee <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d3e2:	4b3f      	ldr	r3, [pc, #252]	; (801d4e0 <RadioSetTxGenericConfig+0x460>)
 801d3e4:	2200      	movs	r2, #0
 801d3e6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d3ea:	e000      	b.n	801d3ee <RadioSetTxGenericConfig+0x36e>
            break;
 801d3ec:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801d3ee:	4b3c      	ldr	r3, [pc, #240]	; (801d4e0 <RadioSetTxGenericConfig+0x460>)
 801d3f0:	2201      	movs	r2, #1
 801d3f2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801d3f4:	68bb      	ldr	r3, [r7, #8]
 801d3f6:	889a      	ldrh	r2, [r3, #4]
 801d3f8:	4b39      	ldr	r3, [pc, #228]	; (801d4e0 <RadioSetTxGenericConfig+0x460>)
 801d3fa:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801d3fc:	68bb      	ldr	r3, [r7, #8]
 801d3fe:	799a      	ldrb	r2, [r3, #6]
 801d400:	4b37      	ldr	r3, [pc, #220]	; (801d4e0 <RadioSetTxGenericConfig+0x460>)
 801d402:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801d404:	68bb      	ldr	r3, [r7, #8]
 801d406:	79da      	ldrb	r2, [r3, #7]
 801d408:	4b35      	ldr	r3, [pc, #212]	; (801d4e0 <RadioSetTxGenericConfig+0x460>)
 801d40a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801d40e:	68bb      	ldr	r3, [r7, #8]
 801d410:	7a1a      	ldrb	r2, [r3, #8]
 801d412:	4b33      	ldr	r3, [pc, #204]	; (801d4e0 <RadioSetTxGenericConfig+0x460>)
 801d414:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801d418:	f7fe ff85 	bl	801c326 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801d41c:	2001      	movs	r0, #1
 801d41e:	f7fe f919 	bl	801b654 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d422:	4830      	ldr	r0, [pc, #192]	; (801d4e4 <RadioSetTxGenericConfig+0x464>)
 801d424:	f000 fd76 	bl	801df14 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d428:	482f      	ldr	r0, [pc, #188]	; (801d4e8 <RadioSetTxGenericConfig+0x468>)
 801d42a:	f000 fe45 	bl	801e0b8 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801d42e:	4b2c      	ldr	r3, [pc, #176]	; (801d4e0 <RadioSetTxGenericConfig+0x460>)
 801d430:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801d434:	2b06      	cmp	r3, #6
 801d436:	d10d      	bne.n	801d454 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801d438:	f640 0089 	movw	r0, #2185	; 0x889
 801d43c:	f000 ff98 	bl	801e370 <SUBGRF_ReadRegister>
 801d440:	4603      	mov	r3, r0
 801d442:	f023 0304 	bic.w	r3, r3, #4
 801d446:	b2db      	uxtb	r3, r3
 801d448:	4619      	mov	r1, r3
 801d44a:	f640 0089 	movw	r0, #2185	; 0x889
 801d44e:	f000 ff7b 	bl	801e348 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801d452:	e02d      	b.n	801d4b0 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801d454:	f640 0089 	movw	r0, #2185	; 0x889
 801d458:	f000 ff8a 	bl	801e370 <SUBGRF_ReadRegister>
 801d45c:	4603      	mov	r3, r0
 801d45e:	f043 0304 	orr.w	r3, r3, #4
 801d462:	b2db      	uxtb	r3, r3
 801d464:	4619      	mov	r1, r3
 801d466:	f640 0089 	movw	r0, #2185	; 0x889
 801d46a:	f000 ff6d 	bl	801e348 <SUBGRF_WriteRegister>
        break;
 801d46e:	e01f      	b.n	801d4b0 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801d470:	68bb      	ldr	r3, [r7, #8]
 801d472:	681b      	ldr	r3, [r3, #0]
 801d474:	2b00      	cmp	r3, #0
 801d476:	d004      	beq.n	801d482 <RadioSetTxGenericConfig+0x402>
 801d478:	68bb      	ldr	r3, [r7, #8]
 801d47a:	681b      	ldr	r3, [r3, #0]
 801d47c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801d480:	d902      	bls.n	801d488 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801d482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d486:	e027      	b.n	801d4d8 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801d488:	2003      	movs	r0, #3
 801d48a:	f7fe f8e3 	bl	801b654 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801d48e:	4b14      	ldr	r3, [pc, #80]	; (801d4e0 <RadioSetTxGenericConfig+0x460>)
 801d490:	2202      	movs	r2, #2
 801d492:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801d496:	68bb      	ldr	r3, [r7, #8]
 801d498:	681b      	ldr	r3, [r3, #0]
 801d49a:	4a11      	ldr	r2, [pc, #68]	; (801d4e0 <RadioSetTxGenericConfig+0x460>)
 801d49c:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801d49e:	4b10      	ldr	r3, [pc, #64]	; (801d4e0 <RadioSetTxGenericConfig+0x460>)
 801d4a0:	2216      	movs	r2, #22
 801d4a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d4a6:	480f      	ldr	r0, [pc, #60]	; (801d4e4 <RadioSetTxGenericConfig+0x464>)
 801d4a8:	f000 fd34 	bl	801df14 <SUBGRF_SetModulationParams>
        break;
 801d4ac:	e000      	b.n	801d4b0 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801d4ae:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801d4b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d4b4:	4618      	mov	r0, r3
 801d4b6:	f001 f863 	bl	801e580 <SUBGRF_SetRfTxPower>
 801d4ba:	4603      	mov	r3, r0
 801d4bc:	461a      	mov	r2, r3
 801d4be:	4b08      	ldr	r3, [pc, #32]	; (801d4e0 <RadioSetTxGenericConfig+0x460>)
 801d4c0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801d4c4:	4b06      	ldr	r3, [pc, #24]	; (801d4e0 <RadioSetTxGenericConfig+0x460>)
 801d4c6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801d4ca:	4618      	mov	r0, r3
 801d4cc:	f001 fa37 	bl	801e93e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801d4d0:	4a03      	ldr	r2, [pc, #12]	; (801d4e0 <RadioSetTxGenericConfig+0x460>)
 801d4d2:	687b      	ldr	r3, [r7, #4]
 801d4d4:	6053      	str	r3, [r2, #4]
    return 0;
 801d4d6:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801d4d8:	4618      	mov	r0, r3
 801d4da:	3738      	adds	r7, #56	; 0x38
 801d4dc:	46bd      	mov	sp, r7
 801d4de:	bd80      	pop	{r7, pc}
 801d4e0:	20001b7c 	.word	0x20001b7c
 801d4e4:	20001bb4 	.word	0x20001bb4
 801d4e8:	20001b8a 	.word	0x20001b8a

0801d4ec <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801d4ec:	b480      	push	{r7}
 801d4ee:	b085      	sub	sp, #20
 801d4f0:	af00      	add	r7, sp, #0
 801d4f2:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801d4f4:	2301      	movs	r3, #1
 801d4f6:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801d4f8:	7bfb      	ldrb	r3, [r7, #15]
}
 801d4fa:	4618      	mov	r0, r3
 801d4fc:	3714      	adds	r7, #20
 801d4fe:	46bd      	mov	sp, r7
 801d500:	bc80      	pop	{r7}
 801d502:	4770      	bx	lr

0801d504 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801d504:	b480      	push	{r7}
 801d506:	b083      	sub	sp, #12
 801d508:	af00      	add	r7, sp, #0
 801d50a:	6078      	str	r0, [r7, #4]
 801d50c:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801d50e:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801d510:	4618      	mov	r0, r3
 801d512:	370c      	adds	r7, #12
 801d514:	46bd      	mov	sp, r7
 801d516:	bc80      	pop	{r7}
 801d518:	4770      	bx	lr
	...

0801d51c <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801d51c:	b580      	push	{r7, lr}
 801d51e:	b084      	sub	sp, #16
 801d520:	af00      	add	r7, sp, #0
 801d522:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801d524:	687b      	ldr	r3, [r7, #4]
 801d526:	2b00      	cmp	r3, #0
 801d528:	d002      	beq.n	801d530 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801d52a:	4a1d      	ldr	r2, [pc, #116]	; (801d5a0 <SUBGRF_Init+0x84>)
 801d52c:	687b      	ldr	r3, [r7, #4]
 801d52e:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801d530:	f7e4 fe08 	bl	8002144 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801d534:	2002      	movs	r0, #2
 801d536:	f001 f8ff 	bl	801e738 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801d53a:	4b1a      	ldr	r3, [pc, #104]	; (801d5a4 <SUBGRF_Init+0x88>)
 801d53c:	2200      	movs	r2, #0
 801d53e:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801d540:	2000      	movs	r0, #0
 801d542:	f000 f97d 	bl	801d840 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801d546:	f7ef ff73 	bl	800d430 <RBI_IsTCXO>
 801d54a:	4603      	mov	r3, r0
 801d54c:	2b01      	cmp	r3, #1
 801d54e:	d10e      	bne.n	801d56e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801d550:	2140      	movs	r1, #64	; 0x40
 801d552:	2001      	movs	r0, #1
 801d554:	f000 fb82 	bl	801dc5c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801d558:	2100      	movs	r1, #0
 801d55a:	f640 1011 	movw	r0, #2321	; 0x911
 801d55e:	f000 fef3 	bl	801e348 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801d562:	237f      	movs	r3, #127	; 0x7f
 801d564:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801d566:	7b38      	ldrb	r0, [r7, #12]
 801d568:	f000 fa8b 	bl	801da82 <SUBGRF_Calibrate>
 801d56c:	e009      	b.n	801d582 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801d56e:	2120      	movs	r1, #32
 801d570:	f640 1011 	movw	r0, #2321	; 0x911
 801d574:	f000 fee8 	bl	801e348 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801d578:	2120      	movs	r1, #32
 801d57a:	f640 1012 	movw	r0, #2322	; 0x912
 801d57e:	f000 fee3 	bl	801e348 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801d582:	210e      	movs	r1, #14
 801d584:	f640 101f 	movw	r0, #2335	; 0x91f
 801d588:	f000 fede 	bl	801e348 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801d58c:	f7ef ff34 	bl	800d3f8 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801d590:	4b05      	ldr	r3, [pc, #20]	; (801d5a8 <SUBGRF_Init+0x8c>)
 801d592:	2201      	movs	r2, #1
 801d594:	701a      	strb	r2, [r3, #0]
}
 801d596:	bf00      	nop
 801d598:	3710      	adds	r7, #16
 801d59a:	46bd      	mov	sp, r7
 801d59c:	bd80      	pop	{r7, pc}
 801d59e:	bf00      	nop
 801d5a0:	20001c14 	.word	0x20001c14
 801d5a4:	20001c10 	.word	0x20001c10
 801d5a8:	20001c08 	.word	0x20001c08

0801d5ac <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801d5ac:	b480      	push	{r7}
 801d5ae:	af00      	add	r7, sp, #0
    return OperatingMode;
 801d5b0:	4b02      	ldr	r3, [pc, #8]	; (801d5bc <SUBGRF_GetOperatingMode+0x10>)
 801d5b2:	781b      	ldrb	r3, [r3, #0]
}
 801d5b4:	4618      	mov	r0, r3
 801d5b6:	46bd      	mov	sp, r7
 801d5b8:	bc80      	pop	{r7}
 801d5ba:	4770      	bx	lr
 801d5bc:	20001c08 	.word	0x20001c08

0801d5c0 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801d5c0:	b580      	push	{r7, lr}
 801d5c2:	b082      	sub	sp, #8
 801d5c4:	af00      	add	r7, sp, #0
 801d5c6:	6078      	str	r0, [r7, #4]
 801d5c8:	460b      	mov	r3, r1
 801d5ca:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801d5cc:	78fb      	ldrb	r3, [r7, #3]
 801d5ce:	461a      	mov	r2, r3
 801d5d0:	6879      	ldr	r1, [r7, #4]
 801d5d2:	2000      	movs	r0, #0
 801d5d4:	f000 ff24 	bl	801e420 <SUBGRF_WriteBuffer>
}
 801d5d8:	bf00      	nop
 801d5da:	3708      	adds	r7, #8
 801d5dc:	46bd      	mov	sp, r7
 801d5de:	bd80      	pop	{r7, pc}

0801d5e0 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801d5e0:	b580      	push	{r7, lr}
 801d5e2:	b086      	sub	sp, #24
 801d5e4:	af00      	add	r7, sp, #0
 801d5e6:	60f8      	str	r0, [r7, #12]
 801d5e8:	60b9      	str	r1, [r7, #8]
 801d5ea:	4613      	mov	r3, r2
 801d5ec:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801d5ee:	2300      	movs	r3, #0
 801d5f0:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801d5f2:	f107 0317 	add.w	r3, r7, #23
 801d5f6:	4619      	mov	r1, r3
 801d5f8:	68b8      	ldr	r0, [r7, #8]
 801d5fa:	f000 fe27 	bl	801e24c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801d5fe:	68bb      	ldr	r3, [r7, #8]
 801d600:	781b      	ldrb	r3, [r3, #0]
 801d602:	79fa      	ldrb	r2, [r7, #7]
 801d604:	429a      	cmp	r2, r3
 801d606:	d201      	bcs.n	801d60c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801d608:	2301      	movs	r3, #1
 801d60a:	e007      	b.n	801d61c <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801d60c:	7df8      	ldrb	r0, [r7, #23]
 801d60e:	68bb      	ldr	r3, [r7, #8]
 801d610:	781b      	ldrb	r3, [r3, #0]
 801d612:	461a      	mov	r2, r3
 801d614:	68f9      	ldr	r1, [r7, #12]
 801d616:	f000 ff25 	bl	801e464 <SUBGRF_ReadBuffer>

    return 0;
 801d61a:	2300      	movs	r3, #0
}
 801d61c:	4618      	mov	r0, r3
 801d61e:	3718      	adds	r7, #24
 801d620:	46bd      	mov	sp, r7
 801d622:	bd80      	pop	{r7, pc}

0801d624 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801d624:	b580      	push	{r7, lr}
 801d626:	b084      	sub	sp, #16
 801d628:	af00      	add	r7, sp, #0
 801d62a:	60f8      	str	r0, [r7, #12]
 801d62c:	460b      	mov	r3, r1
 801d62e:	607a      	str	r2, [r7, #4]
 801d630:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801d632:	7afb      	ldrb	r3, [r7, #11]
 801d634:	4619      	mov	r1, r3
 801d636:	68f8      	ldr	r0, [r7, #12]
 801d638:	f7ff ffc2 	bl	801d5c0 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801d63c:	6878      	ldr	r0, [r7, #4]
 801d63e:	f000 f91b 	bl	801d878 <SUBGRF_SetTx>
}
 801d642:	bf00      	nop
 801d644:	3710      	adds	r7, #16
 801d646:	46bd      	mov	sp, r7
 801d648:	bd80      	pop	{r7, pc}

0801d64a <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801d64a:	b580      	push	{r7, lr}
 801d64c:	b082      	sub	sp, #8
 801d64e:	af00      	add	r7, sp, #0
 801d650:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801d652:	2208      	movs	r2, #8
 801d654:	6879      	ldr	r1, [r7, #4]
 801d656:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801d65a:	f000 fe9d 	bl	801e398 <SUBGRF_WriteRegisters>
    return 0;
 801d65e:	2300      	movs	r3, #0
}
 801d660:	4618      	mov	r0, r3
 801d662:	3708      	adds	r7, #8
 801d664:	46bd      	mov	sp, r7
 801d666:	bd80      	pop	{r7, pc}

0801d668 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801d668:	b580      	push	{r7, lr}
 801d66a:	b084      	sub	sp, #16
 801d66c:	af00      	add	r7, sp, #0
 801d66e:	4603      	mov	r3, r0
 801d670:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801d672:	88fb      	ldrh	r3, [r7, #6]
 801d674:	0a1b      	lsrs	r3, r3, #8
 801d676:	b29b      	uxth	r3, r3
 801d678:	b2db      	uxtb	r3, r3
 801d67a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801d67c:	88fb      	ldrh	r3, [r7, #6]
 801d67e:	b2db      	uxtb	r3, r3
 801d680:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801d682:	f000 fb6f 	bl	801dd64 <SUBGRF_GetPacketType>
 801d686:	4603      	mov	r3, r0
 801d688:	2b00      	cmp	r3, #0
 801d68a:	d108      	bne.n	801d69e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801d68c:	f107 030c 	add.w	r3, r7, #12
 801d690:	2202      	movs	r2, #2
 801d692:	4619      	mov	r1, r3
 801d694:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801d698:	f000 fe7e 	bl	801e398 <SUBGRF_WriteRegisters>
            break;
 801d69c:	e000      	b.n	801d6a0 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801d69e:	bf00      	nop
    }
}
 801d6a0:	bf00      	nop
 801d6a2:	3710      	adds	r7, #16
 801d6a4:	46bd      	mov	sp, r7
 801d6a6:	bd80      	pop	{r7, pc}

0801d6a8 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801d6a8:	b580      	push	{r7, lr}
 801d6aa:	b084      	sub	sp, #16
 801d6ac:	af00      	add	r7, sp, #0
 801d6ae:	4603      	mov	r3, r0
 801d6b0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801d6b2:	88fb      	ldrh	r3, [r7, #6]
 801d6b4:	0a1b      	lsrs	r3, r3, #8
 801d6b6:	b29b      	uxth	r3, r3
 801d6b8:	b2db      	uxtb	r3, r3
 801d6ba:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801d6bc:	88fb      	ldrh	r3, [r7, #6]
 801d6be:	b2db      	uxtb	r3, r3
 801d6c0:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801d6c2:	f000 fb4f 	bl	801dd64 <SUBGRF_GetPacketType>
 801d6c6:	4603      	mov	r3, r0
 801d6c8:	2b00      	cmp	r3, #0
 801d6ca:	d108      	bne.n	801d6de <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801d6cc:	f107 030c 	add.w	r3, r7, #12
 801d6d0:	2202      	movs	r2, #2
 801d6d2:	4619      	mov	r1, r3
 801d6d4:	f240 60be 	movw	r0, #1726	; 0x6be
 801d6d8:	f000 fe5e 	bl	801e398 <SUBGRF_WriteRegisters>
            break;
 801d6dc:	e000      	b.n	801d6e0 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801d6de:	bf00      	nop
    }
}
 801d6e0:	bf00      	nop
 801d6e2:	3710      	adds	r7, #16
 801d6e4:	46bd      	mov	sp, r7
 801d6e6:	bd80      	pop	{r7, pc}

0801d6e8 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801d6e8:	b580      	push	{r7, lr}
 801d6ea:	b084      	sub	sp, #16
 801d6ec:	af00      	add	r7, sp, #0
 801d6ee:	4603      	mov	r3, r0
 801d6f0:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801d6f2:	2300      	movs	r3, #0
 801d6f4:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801d6f6:	f000 fb35 	bl	801dd64 <SUBGRF_GetPacketType>
 801d6fa:	4603      	mov	r3, r0
 801d6fc:	2b00      	cmp	r3, #0
 801d6fe:	d121      	bne.n	801d744 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801d700:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801d704:	f000 fe34 	bl	801e370 <SUBGRF_ReadRegister>
 801d708:	4603      	mov	r3, r0
 801d70a:	f023 0301 	bic.w	r3, r3, #1
 801d70e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801d710:	88fb      	ldrh	r3, [r7, #6]
 801d712:	0a1b      	lsrs	r3, r3, #8
 801d714:	b29b      	uxth	r3, r3
 801d716:	b25b      	sxtb	r3, r3
 801d718:	f003 0301 	and.w	r3, r3, #1
 801d71c:	b25a      	sxtb	r2, r3
 801d71e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d722:	4313      	orrs	r3, r2
 801d724:	b25b      	sxtb	r3, r3
 801d726:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801d728:	7bfb      	ldrb	r3, [r7, #15]
 801d72a:	4619      	mov	r1, r3
 801d72c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801d730:	f000 fe0a 	bl	801e348 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801d734:	88fb      	ldrh	r3, [r7, #6]
 801d736:	b2db      	uxtb	r3, r3
 801d738:	4619      	mov	r1, r3
 801d73a:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801d73e:	f000 fe03 	bl	801e348 <SUBGRF_WriteRegister>
            break;
 801d742:	e000      	b.n	801d746 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801d744:	bf00      	nop
    }
}
 801d746:	bf00      	nop
 801d748:	3710      	adds	r7, #16
 801d74a:	46bd      	mov	sp, r7
 801d74c:	bd80      	pop	{r7, pc}

0801d74e <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801d74e:	b580      	push	{r7, lr}
 801d750:	b082      	sub	sp, #8
 801d752:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801d754:	2300      	movs	r3, #0
 801d756:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801d758:	2300      	movs	r3, #0
 801d75a:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801d75c:	2300      	movs	r3, #0
 801d75e:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801d760:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801d764:	f000 fe04 	bl	801e370 <SUBGRF_ReadRegister>
 801d768:	4603      	mov	r3, r0
 801d76a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801d76c:	79fb      	ldrb	r3, [r7, #7]
 801d76e:	f023 0301 	bic.w	r3, r3, #1
 801d772:	b2db      	uxtb	r3, r3
 801d774:	4619      	mov	r1, r3
 801d776:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801d77a:	f000 fde5 	bl	801e348 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801d77e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801d782:	f000 fdf5 	bl	801e370 <SUBGRF_ReadRegister>
 801d786:	4603      	mov	r3, r0
 801d788:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801d78a:	79bb      	ldrb	r3, [r7, #6]
 801d78c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d790:	b2db      	uxtb	r3, r3
 801d792:	4619      	mov	r1, r3
 801d794:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801d798:	f000 fdd6 	bl	801e348 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801d79c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801d7a0:	f000 f88a 	bl	801d8b8 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801d7a4:	463b      	mov	r3, r7
 801d7a6:	2204      	movs	r2, #4
 801d7a8:	4619      	mov	r1, r3
 801d7aa:	f640 0019 	movw	r0, #2073	; 0x819
 801d7ae:	f000 fe15 	bl	801e3dc <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801d7b2:	2000      	movs	r0, #0
 801d7b4:	f000 f844 	bl	801d840 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801d7b8:	79fb      	ldrb	r3, [r7, #7]
 801d7ba:	4619      	mov	r1, r3
 801d7bc:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801d7c0:	f000 fdc2 	bl	801e348 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801d7c4:	79bb      	ldrb	r3, [r7, #6]
 801d7c6:	4619      	mov	r1, r3
 801d7c8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801d7cc:	f000 fdbc 	bl	801e348 <SUBGRF_WriteRegister>

    return number;
 801d7d0:	683b      	ldr	r3, [r7, #0]
}
 801d7d2:	4618      	mov	r0, r3
 801d7d4:	3708      	adds	r7, #8
 801d7d6:	46bd      	mov	sp, r7
 801d7d8:	bd80      	pop	{r7, pc}
	...

0801d7dc <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801d7dc:	b580      	push	{r7, lr}
 801d7de:	b084      	sub	sp, #16
 801d7e0:	af00      	add	r7, sp, #0
 801d7e2:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801d7e4:	2000      	movs	r0, #0
 801d7e6:	f7ef fe0e 	bl	800d406 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801d7ea:	2002      	movs	r0, #2
 801d7ec:	f000 ffa4 	bl	801e738 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801d7f0:	793b      	ldrb	r3, [r7, #4]
 801d7f2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801d7f6:	b2db      	uxtb	r3, r3
 801d7f8:	009b      	lsls	r3, r3, #2
 801d7fa:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801d7fc:	793b      	ldrb	r3, [r7, #4]
 801d7fe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801d802:	b2db      	uxtb	r3, r3
 801d804:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801d806:	b25b      	sxtb	r3, r3
 801d808:	4313      	orrs	r3, r2
 801d80a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801d80c:	793b      	ldrb	r3, [r7, #4]
 801d80e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801d812:	b2db      	uxtb	r3, r3
 801d814:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801d816:	4313      	orrs	r3, r2
 801d818:	b25b      	sxtb	r3, r3
 801d81a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801d81c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801d81e:	f107 030f 	add.w	r3, r7, #15
 801d822:	2201      	movs	r2, #1
 801d824:	4619      	mov	r1, r3
 801d826:	2084      	movs	r0, #132	; 0x84
 801d828:	f000 fe3e 	bl	801e4a8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801d82c:	4b03      	ldr	r3, [pc, #12]	; (801d83c <SUBGRF_SetSleep+0x60>)
 801d82e:	2200      	movs	r2, #0
 801d830:	701a      	strb	r2, [r3, #0]
}
 801d832:	bf00      	nop
 801d834:	3710      	adds	r7, #16
 801d836:	46bd      	mov	sp, r7
 801d838:	bd80      	pop	{r7, pc}
 801d83a:	bf00      	nop
 801d83c:	20001c08 	.word	0x20001c08

0801d840 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801d840:	b580      	push	{r7, lr}
 801d842:	b082      	sub	sp, #8
 801d844:	af00      	add	r7, sp, #0
 801d846:	4603      	mov	r3, r0
 801d848:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801d84a:	1dfb      	adds	r3, r7, #7
 801d84c:	2201      	movs	r2, #1
 801d84e:	4619      	mov	r1, r3
 801d850:	2080      	movs	r0, #128	; 0x80
 801d852:	f000 fe29 	bl	801e4a8 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801d856:	79fb      	ldrb	r3, [r7, #7]
 801d858:	2b00      	cmp	r3, #0
 801d85a:	d103      	bne.n	801d864 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801d85c:	4b05      	ldr	r3, [pc, #20]	; (801d874 <SUBGRF_SetStandby+0x34>)
 801d85e:	2201      	movs	r2, #1
 801d860:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801d862:	e002      	b.n	801d86a <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801d864:	4b03      	ldr	r3, [pc, #12]	; (801d874 <SUBGRF_SetStandby+0x34>)
 801d866:	2202      	movs	r2, #2
 801d868:	701a      	strb	r2, [r3, #0]
}
 801d86a:	bf00      	nop
 801d86c:	3708      	adds	r7, #8
 801d86e:	46bd      	mov	sp, r7
 801d870:	bd80      	pop	{r7, pc}
 801d872:	bf00      	nop
 801d874:	20001c08 	.word	0x20001c08

0801d878 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801d878:	b580      	push	{r7, lr}
 801d87a:	b084      	sub	sp, #16
 801d87c:	af00      	add	r7, sp, #0
 801d87e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801d880:	4b0c      	ldr	r3, [pc, #48]	; (801d8b4 <SUBGRF_SetTx+0x3c>)
 801d882:	2204      	movs	r2, #4
 801d884:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801d886:	687b      	ldr	r3, [r7, #4]
 801d888:	0c1b      	lsrs	r3, r3, #16
 801d88a:	b2db      	uxtb	r3, r3
 801d88c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801d88e:	687b      	ldr	r3, [r7, #4]
 801d890:	0a1b      	lsrs	r3, r3, #8
 801d892:	b2db      	uxtb	r3, r3
 801d894:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801d896:	687b      	ldr	r3, [r7, #4]
 801d898:	b2db      	uxtb	r3, r3
 801d89a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801d89c:	f107 030c 	add.w	r3, r7, #12
 801d8a0:	2203      	movs	r2, #3
 801d8a2:	4619      	mov	r1, r3
 801d8a4:	2083      	movs	r0, #131	; 0x83
 801d8a6:	f000 fdff 	bl	801e4a8 <SUBGRF_WriteCommand>
}
 801d8aa:	bf00      	nop
 801d8ac:	3710      	adds	r7, #16
 801d8ae:	46bd      	mov	sp, r7
 801d8b0:	bd80      	pop	{r7, pc}
 801d8b2:	bf00      	nop
 801d8b4:	20001c08 	.word	0x20001c08

0801d8b8 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801d8b8:	b580      	push	{r7, lr}
 801d8ba:	b084      	sub	sp, #16
 801d8bc:	af00      	add	r7, sp, #0
 801d8be:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801d8c0:	4b0c      	ldr	r3, [pc, #48]	; (801d8f4 <SUBGRF_SetRx+0x3c>)
 801d8c2:	2205      	movs	r2, #5
 801d8c4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801d8c6:	687b      	ldr	r3, [r7, #4]
 801d8c8:	0c1b      	lsrs	r3, r3, #16
 801d8ca:	b2db      	uxtb	r3, r3
 801d8cc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801d8ce:	687b      	ldr	r3, [r7, #4]
 801d8d0:	0a1b      	lsrs	r3, r3, #8
 801d8d2:	b2db      	uxtb	r3, r3
 801d8d4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801d8d6:	687b      	ldr	r3, [r7, #4]
 801d8d8:	b2db      	uxtb	r3, r3
 801d8da:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801d8dc:	f107 030c 	add.w	r3, r7, #12
 801d8e0:	2203      	movs	r2, #3
 801d8e2:	4619      	mov	r1, r3
 801d8e4:	2082      	movs	r0, #130	; 0x82
 801d8e6:	f000 fddf 	bl	801e4a8 <SUBGRF_WriteCommand>
}
 801d8ea:	bf00      	nop
 801d8ec:	3710      	adds	r7, #16
 801d8ee:	46bd      	mov	sp, r7
 801d8f0:	bd80      	pop	{r7, pc}
 801d8f2:	bf00      	nop
 801d8f4:	20001c08 	.word	0x20001c08

0801d8f8 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801d8f8:	b580      	push	{r7, lr}
 801d8fa:	b084      	sub	sp, #16
 801d8fc:	af00      	add	r7, sp, #0
 801d8fe:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801d900:	4b0e      	ldr	r3, [pc, #56]	; (801d93c <SUBGRF_SetRxBoosted+0x44>)
 801d902:	2205      	movs	r2, #5
 801d904:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801d906:	2197      	movs	r1, #151	; 0x97
 801d908:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801d90c:	f000 fd1c 	bl	801e348 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801d910:	687b      	ldr	r3, [r7, #4]
 801d912:	0c1b      	lsrs	r3, r3, #16
 801d914:	b2db      	uxtb	r3, r3
 801d916:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801d918:	687b      	ldr	r3, [r7, #4]
 801d91a:	0a1b      	lsrs	r3, r3, #8
 801d91c:	b2db      	uxtb	r3, r3
 801d91e:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801d920:	687b      	ldr	r3, [r7, #4]
 801d922:	b2db      	uxtb	r3, r3
 801d924:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801d926:	f107 030c 	add.w	r3, r7, #12
 801d92a:	2203      	movs	r2, #3
 801d92c:	4619      	mov	r1, r3
 801d92e:	2082      	movs	r0, #130	; 0x82
 801d930:	f000 fdba 	bl	801e4a8 <SUBGRF_WriteCommand>
}
 801d934:	bf00      	nop
 801d936:	3710      	adds	r7, #16
 801d938:	46bd      	mov	sp, r7
 801d93a:	bd80      	pop	{r7, pc}
 801d93c:	20001c08 	.word	0x20001c08

0801d940 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801d940:	b580      	push	{r7, lr}
 801d942:	b084      	sub	sp, #16
 801d944:	af00      	add	r7, sp, #0
 801d946:	6078      	str	r0, [r7, #4]
 801d948:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801d94a:	687b      	ldr	r3, [r7, #4]
 801d94c:	0c1b      	lsrs	r3, r3, #16
 801d94e:	b2db      	uxtb	r3, r3
 801d950:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801d952:	687b      	ldr	r3, [r7, #4]
 801d954:	0a1b      	lsrs	r3, r3, #8
 801d956:	b2db      	uxtb	r3, r3
 801d958:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801d95a:	687b      	ldr	r3, [r7, #4]
 801d95c:	b2db      	uxtb	r3, r3
 801d95e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801d960:	683b      	ldr	r3, [r7, #0]
 801d962:	0c1b      	lsrs	r3, r3, #16
 801d964:	b2db      	uxtb	r3, r3
 801d966:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801d968:	683b      	ldr	r3, [r7, #0]
 801d96a:	0a1b      	lsrs	r3, r3, #8
 801d96c:	b2db      	uxtb	r3, r3
 801d96e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801d970:	683b      	ldr	r3, [r7, #0]
 801d972:	b2db      	uxtb	r3, r3
 801d974:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801d976:	f107 0308 	add.w	r3, r7, #8
 801d97a:	2206      	movs	r2, #6
 801d97c:	4619      	mov	r1, r3
 801d97e:	2094      	movs	r0, #148	; 0x94
 801d980:	f000 fd92 	bl	801e4a8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801d984:	4b03      	ldr	r3, [pc, #12]	; (801d994 <SUBGRF_SetRxDutyCycle+0x54>)
 801d986:	2206      	movs	r2, #6
 801d988:	701a      	strb	r2, [r3, #0]
}
 801d98a:	bf00      	nop
 801d98c:	3710      	adds	r7, #16
 801d98e:	46bd      	mov	sp, r7
 801d990:	bd80      	pop	{r7, pc}
 801d992:	bf00      	nop
 801d994:	20001c08 	.word	0x20001c08

0801d998 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801d998:	b580      	push	{r7, lr}
 801d99a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801d99c:	2200      	movs	r2, #0
 801d99e:	2100      	movs	r1, #0
 801d9a0:	20c5      	movs	r0, #197	; 0xc5
 801d9a2:	f000 fd81 	bl	801e4a8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801d9a6:	4b02      	ldr	r3, [pc, #8]	; (801d9b0 <SUBGRF_SetCad+0x18>)
 801d9a8:	2207      	movs	r2, #7
 801d9aa:	701a      	strb	r2, [r3, #0]
}
 801d9ac:	bf00      	nop
 801d9ae:	bd80      	pop	{r7, pc}
 801d9b0:	20001c08 	.word	0x20001c08

0801d9b4 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801d9b4:	b580      	push	{r7, lr}
 801d9b6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801d9b8:	2200      	movs	r2, #0
 801d9ba:	2100      	movs	r1, #0
 801d9bc:	20d1      	movs	r0, #209	; 0xd1
 801d9be:	f000 fd73 	bl	801e4a8 <SUBGRF_WriteCommand>
}
 801d9c2:	bf00      	nop
 801d9c4:	bd80      	pop	{r7, pc}

0801d9c6 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801d9c6:	b580      	push	{r7, lr}
 801d9c8:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801d9ca:	2200      	movs	r2, #0
 801d9cc:	2100      	movs	r1, #0
 801d9ce:	20d2      	movs	r0, #210	; 0xd2
 801d9d0:	f000 fd6a 	bl	801e4a8 <SUBGRF_WriteCommand>
}
 801d9d4:	bf00      	nop
 801d9d6:	bd80      	pop	{r7, pc}

0801d9d8 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801d9d8:	b580      	push	{r7, lr}
 801d9da:	b082      	sub	sp, #8
 801d9dc:	af00      	add	r7, sp, #0
 801d9de:	4603      	mov	r3, r0
 801d9e0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801d9e2:	1dfb      	adds	r3, r7, #7
 801d9e4:	2201      	movs	r2, #1
 801d9e6:	4619      	mov	r1, r3
 801d9e8:	209f      	movs	r0, #159	; 0x9f
 801d9ea:	f000 fd5d 	bl	801e4a8 <SUBGRF_WriteCommand>
}
 801d9ee:	bf00      	nop
 801d9f0:	3708      	adds	r7, #8
 801d9f2:	46bd      	mov	sp, r7
 801d9f4:	bd80      	pop	{r7, pc}

0801d9f6 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801d9f6:	b580      	push	{r7, lr}
 801d9f8:	b084      	sub	sp, #16
 801d9fa:	af00      	add	r7, sp, #0
 801d9fc:	4603      	mov	r3, r0
 801d9fe:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801da00:	1dfb      	adds	r3, r7, #7
 801da02:	2201      	movs	r2, #1
 801da04:	4619      	mov	r1, r3
 801da06:	20a0      	movs	r0, #160	; 0xa0
 801da08:	f000 fd4e 	bl	801e4a8 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801da0c:	79fb      	ldrb	r3, [r7, #7]
 801da0e:	2b3f      	cmp	r3, #63	; 0x3f
 801da10:	d91c      	bls.n	801da4c <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801da12:	79fb      	ldrb	r3, [r7, #7]
 801da14:	085b      	lsrs	r3, r3, #1
 801da16:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801da18:	2300      	movs	r3, #0
 801da1a:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801da1c:	2300      	movs	r3, #0
 801da1e:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801da20:	e005      	b.n	801da2e <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801da22:	7bfb      	ldrb	r3, [r7, #15]
 801da24:	089b      	lsrs	r3, r3, #2
 801da26:	73fb      	strb	r3, [r7, #15]
            exp++;
 801da28:	7bbb      	ldrb	r3, [r7, #14]
 801da2a:	3301      	adds	r3, #1
 801da2c:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801da2e:	7bfb      	ldrb	r3, [r7, #15]
 801da30:	2b1f      	cmp	r3, #31
 801da32:	d8f6      	bhi.n	801da22 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801da34:	7bfb      	ldrb	r3, [r7, #15]
 801da36:	00db      	lsls	r3, r3, #3
 801da38:	b2da      	uxtb	r2, r3
 801da3a:	7bbb      	ldrb	r3, [r7, #14]
 801da3c:	4413      	add	r3, r2
 801da3e:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801da40:	7b7b      	ldrb	r3, [r7, #13]
 801da42:	4619      	mov	r1, r3
 801da44:	f240 7006 	movw	r0, #1798	; 0x706
 801da48:	f000 fc7e 	bl	801e348 <SUBGRF_WriteRegister>
    }
}
 801da4c:	bf00      	nop
 801da4e:	3710      	adds	r7, #16
 801da50:	46bd      	mov	sp, r7
 801da52:	bd80      	pop	{r7, pc}

0801da54 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801da54:	b580      	push	{r7, lr}
 801da56:	b082      	sub	sp, #8
 801da58:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801da5a:	f7ef fcf0 	bl	800d43e <RBI_IsDCDC>
 801da5e:	4603      	mov	r3, r0
 801da60:	2b01      	cmp	r3, #1
 801da62:	d102      	bne.n	801da6a <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801da64:	2301      	movs	r3, #1
 801da66:	71fb      	strb	r3, [r7, #7]
 801da68:	e001      	b.n	801da6e <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801da6a:	2300      	movs	r3, #0
 801da6c:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801da6e:	1dfb      	adds	r3, r7, #7
 801da70:	2201      	movs	r2, #1
 801da72:	4619      	mov	r1, r3
 801da74:	2096      	movs	r0, #150	; 0x96
 801da76:	f000 fd17 	bl	801e4a8 <SUBGRF_WriteCommand>
}
 801da7a:	bf00      	nop
 801da7c:	3708      	adds	r7, #8
 801da7e:	46bd      	mov	sp, r7
 801da80:	bd80      	pop	{r7, pc}

0801da82 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801da82:	b580      	push	{r7, lr}
 801da84:	b084      	sub	sp, #16
 801da86:	af00      	add	r7, sp, #0
 801da88:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801da8a:	793b      	ldrb	r3, [r7, #4]
 801da8c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801da90:	b2db      	uxtb	r3, r3
 801da92:	019b      	lsls	r3, r3, #6
 801da94:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801da96:	793b      	ldrb	r3, [r7, #4]
 801da98:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801da9c:	b2db      	uxtb	r3, r3
 801da9e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801daa0:	b25b      	sxtb	r3, r3
 801daa2:	4313      	orrs	r3, r2
 801daa4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801daa6:	793b      	ldrb	r3, [r7, #4]
 801daa8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801daac:	b2db      	uxtb	r3, r3
 801daae:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801dab0:	b25b      	sxtb	r3, r3
 801dab2:	4313      	orrs	r3, r2
 801dab4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801dab6:	793b      	ldrb	r3, [r7, #4]
 801dab8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801dabc:	b2db      	uxtb	r3, r3
 801dabe:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801dac0:	b25b      	sxtb	r3, r3
 801dac2:	4313      	orrs	r3, r2
 801dac4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801dac6:	793b      	ldrb	r3, [r7, #4]
 801dac8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801dacc:	b2db      	uxtb	r3, r3
 801dace:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801dad0:	b25b      	sxtb	r3, r3
 801dad2:	4313      	orrs	r3, r2
 801dad4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801dad6:	793b      	ldrb	r3, [r7, #4]
 801dad8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801dadc:	b2db      	uxtb	r3, r3
 801dade:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801dae0:	b25b      	sxtb	r3, r3
 801dae2:	4313      	orrs	r3, r2
 801dae4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801dae6:	793b      	ldrb	r3, [r7, #4]
 801dae8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801daec:	b2db      	uxtb	r3, r3
 801daee:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801daf0:	4313      	orrs	r3, r2
 801daf2:	b25b      	sxtb	r3, r3
 801daf4:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801daf6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801daf8:	f107 030f 	add.w	r3, r7, #15
 801dafc:	2201      	movs	r2, #1
 801dafe:	4619      	mov	r1, r3
 801db00:	2089      	movs	r0, #137	; 0x89
 801db02:	f000 fcd1 	bl	801e4a8 <SUBGRF_WriteCommand>
}
 801db06:	bf00      	nop
 801db08:	3710      	adds	r7, #16
 801db0a:	46bd      	mov	sp, r7
 801db0c:	bd80      	pop	{r7, pc}
	...

0801db10 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801db10:	b580      	push	{r7, lr}
 801db12:	b084      	sub	sp, #16
 801db14:	af00      	add	r7, sp, #0
 801db16:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801db18:	687b      	ldr	r3, [r7, #4]
 801db1a:	4a1d      	ldr	r2, [pc, #116]	; (801db90 <SUBGRF_CalibrateImage+0x80>)
 801db1c:	4293      	cmp	r3, r2
 801db1e:	d904      	bls.n	801db2a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801db20:	23e1      	movs	r3, #225	; 0xe1
 801db22:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801db24:	23e9      	movs	r3, #233	; 0xe9
 801db26:	737b      	strb	r3, [r7, #13]
 801db28:	e027      	b.n	801db7a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801db2a:	687b      	ldr	r3, [r7, #4]
 801db2c:	4a19      	ldr	r2, [pc, #100]	; (801db94 <SUBGRF_CalibrateImage+0x84>)
 801db2e:	4293      	cmp	r3, r2
 801db30:	d904      	bls.n	801db3c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801db32:	23d7      	movs	r3, #215	; 0xd7
 801db34:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801db36:	23db      	movs	r3, #219	; 0xdb
 801db38:	737b      	strb	r3, [r7, #13]
 801db3a:	e01e      	b.n	801db7a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801db3c:	687b      	ldr	r3, [r7, #4]
 801db3e:	4a16      	ldr	r2, [pc, #88]	; (801db98 <SUBGRF_CalibrateImage+0x88>)
 801db40:	4293      	cmp	r3, r2
 801db42:	d904      	bls.n	801db4e <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801db44:	23c1      	movs	r3, #193	; 0xc1
 801db46:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801db48:	23c5      	movs	r3, #197	; 0xc5
 801db4a:	737b      	strb	r3, [r7, #13]
 801db4c:	e015      	b.n	801db7a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801db4e:	687b      	ldr	r3, [r7, #4]
 801db50:	4a12      	ldr	r2, [pc, #72]	; (801db9c <SUBGRF_CalibrateImage+0x8c>)
 801db52:	4293      	cmp	r3, r2
 801db54:	d904      	bls.n	801db60 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801db56:	2375      	movs	r3, #117	; 0x75
 801db58:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801db5a:	2381      	movs	r3, #129	; 0x81
 801db5c:	737b      	strb	r3, [r7, #13]
 801db5e:	e00c      	b.n	801db7a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801db60:	687b      	ldr	r3, [r7, #4]
 801db62:	4a0f      	ldr	r2, [pc, #60]	; (801dba0 <SUBGRF_CalibrateImage+0x90>)
 801db64:	4293      	cmp	r3, r2
 801db66:	d904      	bls.n	801db72 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801db68:	236b      	movs	r3, #107	; 0x6b
 801db6a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801db6c:	236f      	movs	r3, #111	; 0x6f
 801db6e:	737b      	strb	r3, [r7, #13]
 801db70:	e003      	b.n	801db7a <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801db72:	2329      	movs	r3, #41	; 0x29
 801db74:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801db76:	232b      	movs	r3, #43	; 0x2b
 801db78:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801db7a:	f107 030c 	add.w	r3, r7, #12
 801db7e:	2202      	movs	r2, #2
 801db80:	4619      	mov	r1, r3
 801db82:	2098      	movs	r0, #152	; 0x98
 801db84:	f000 fc90 	bl	801e4a8 <SUBGRF_WriteCommand>
}
 801db88:	bf00      	nop
 801db8a:	3710      	adds	r7, #16
 801db8c:	46bd      	mov	sp, r7
 801db8e:	bd80      	pop	{r7, pc}
 801db90:	35a4e900 	.word	0x35a4e900
 801db94:	32a9f880 	.word	0x32a9f880
 801db98:	2de54480 	.word	0x2de54480
 801db9c:	1b6b0b00 	.word	0x1b6b0b00
 801dba0:	1954fc40 	.word	0x1954fc40

0801dba4 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801dba4:	b590      	push	{r4, r7, lr}
 801dba6:	b085      	sub	sp, #20
 801dba8:	af00      	add	r7, sp, #0
 801dbaa:	4604      	mov	r4, r0
 801dbac:	4608      	mov	r0, r1
 801dbae:	4611      	mov	r1, r2
 801dbb0:	461a      	mov	r2, r3
 801dbb2:	4623      	mov	r3, r4
 801dbb4:	71fb      	strb	r3, [r7, #7]
 801dbb6:	4603      	mov	r3, r0
 801dbb8:	71bb      	strb	r3, [r7, #6]
 801dbba:	460b      	mov	r3, r1
 801dbbc:	717b      	strb	r3, [r7, #5]
 801dbbe:	4613      	mov	r3, r2
 801dbc0:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801dbc2:	79fb      	ldrb	r3, [r7, #7]
 801dbc4:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801dbc6:	79bb      	ldrb	r3, [r7, #6]
 801dbc8:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801dbca:	797b      	ldrb	r3, [r7, #5]
 801dbcc:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801dbce:	793b      	ldrb	r3, [r7, #4]
 801dbd0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801dbd2:	f107 030c 	add.w	r3, r7, #12
 801dbd6:	2204      	movs	r2, #4
 801dbd8:	4619      	mov	r1, r3
 801dbda:	2095      	movs	r0, #149	; 0x95
 801dbdc:	f000 fc64 	bl	801e4a8 <SUBGRF_WriteCommand>
}
 801dbe0:	bf00      	nop
 801dbe2:	3714      	adds	r7, #20
 801dbe4:	46bd      	mov	sp, r7
 801dbe6:	bd90      	pop	{r4, r7, pc}

0801dbe8 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801dbe8:	b590      	push	{r4, r7, lr}
 801dbea:	b085      	sub	sp, #20
 801dbec:	af00      	add	r7, sp, #0
 801dbee:	4604      	mov	r4, r0
 801dbf0:	4608      	mov	r0, r1
 801dbf2:	4611      	mov	r1, r2
 801dbf4:	461a      	mov	r2, r3
 801dbf6:	4623      	mov	r3, r4
 801dbf8:	80fb      	strh	r3, [r7, #6]
 801dbfa:	4603      	mov	r3, r0
 801dbfc:	80bb      	strh	r3, [r7, #4]
 801dbfe:	460b      	mov	r3, r1
 801dc00:	807b      	strh	r3, [r7, #2]
 801dc02:	4613      	mov	r3, r2
 801dc04:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801dc06:	88fb      	ldrh	r3, [r7, #6]
 801dc08:	0a1b      	lsrs	r3, r3, #8
 801dc0a:	b29b      	uxth	r3, r3
 801dc0c:	b2db      	uxtb	r3, r3
 801dc0e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801dc10:	88fb      	ldrh	r3, [r7, #6]
 801dc12:	b2db      	uxtb	r3, r3
 801dc14:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801dc16:	88bb      	ldrh	r3, [r7, #4]
 801dc18:	0a1b      	lsrs	r3, r3, #8
 801dc1a:	b29b      	uxth	r3, r3
 801dc1c:	b2db      	uxtb	r3, r3
 801dc1e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801dc20:	88bb      	ldrh	r3, [r7, #4]
 801dc22:	b2db      	uxtb	r3, r3
 801dc24:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801dc26:	887b      	ldrh	r3, [r7, #2]
 801dc28:	0a1b      	lsrs	r3, r3, #8
 801dc2a:	b29b      	uxth	r3, r3
 801dc2c:	b2db      	uxtb	r3, r3
 801dc2e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801dc30:	887b      	ldrh	r3, [r7, #2]
 801dc32:	b2db      	uxtb	r3, r3
 801dc34:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801dc36:	883b      	ldrh	r3, [r7, #0]
 801dc38:	0a1b      	lsrs	r3, r3, #8
 801dc3a:	b29b      	uxth	r3, r3
 801dc3c:	b2db      	uxtb	r3, r3
 801dc3e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801dc40:	883b      	ldrh	r3, [r7, #0]
 801dc42:	b2db      	uxtb	r3, r3
 801dc44:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801dc46:	f107 0308 	add.w	r3, r7, #8
 801dc4a:	2208      	movs	r2, #8
 801dc4c:	4619      	mov	r1, r3
 801dc4e:	2008      	movs	r0, #8
 801dc50:	f000 fc2a 	bl	801e4a8 <SUBGRF_WriteCommand>
}
 801dc54:	bf00      	nop
 801dc56:	3714      	adds	r7, #20
 801dc58:	46bd      	mov	sp, r7
 801dc5a:	bd90      	pop	{r4, r7, pc}

0801dc5c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801dc5c:	b580      	push	{r7, lr}
 801dc5e:	b084      	sub	sp, #16
 801dc60:	af00      	add	r7, sp, #0
 801dc62:	4603      	mov	r3, r0
 801dc64:	6039      	str	r1, [r7, #0]
 801dc66:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801dc68:	79fb      	ldrb	r3, [r7, #7]
 801dc6a:	f003 0307 	and.w	r3, r3, #7
 801dc6e:	b2db      	uxtb	r3, r3
 801dc70:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801dc72:	683b      	ldr	r3, [r7, #0]
 801dc74:	0c1b      	lsrs	r3, r3, #16
 801dc76:	b2db      	uxtb	r3, r3
 801dc78:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801dc7a:	683b      	ldr	r3, [r7, #0]
 801dc7c:	0a1b      	lsrs	r3, r3, #8
 801dc7e:	b2db      	uxtb	r3, r3
 801dc80:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801dc82:	683b      	ldr	r3, [r7, #0]
 801dc84:	b2db      	uxtb	r3, r3
 801dc86:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801dc88:	f107 030c 	add.w	r3, r7, #12
 801dc8c:	2204      	movs	r2, #4
 801dc8e:	4619      	mov	r1, r3
 801dc90:	2097      	movs	r0, #151	; 0x97
 801dc92:	f000 fc09 	bl	801e4a8 <SUBGRF_WriteCommand>
}
 801dc96:	bf00      	nop
 801dc98:	3710      	adds	r7, #16
 801dc9a:	46bd      	mov	sp, r7
 801dc9c:	bd80      	pop	{r7, pc}
	...

0801dca0 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801dca0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801dca4:	b084      	sub	sp, #16
 801dca6:	af00      	add	r7, sp, #0
 801dca8:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801dcaa:	2300      	movs	r3, #0
 801dcac:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801dcae:	4b1d      	ldr	r3, [pc, #116]	; (801dd24 <SUBGRF_SetRfFrequency+0x84>)
 801dcb0:	781b      	ldrb	r3, [r3, #0]
 801dcb2:	f083 0301 	eor.w	r3, r3, #1
 801dcb6:	b2db      	uxtb	r3, r3
 801dcb8:	2b00      	cmp	r3, #0
 801dcba:	d005      	beq.n	801dcc8 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801dcbc:	6878      	ldr	r0, [r7, #4]
 801dcbe:	f7ff ff27 	bl	801db10 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801dcc2:	4b18      	ldr	r3, [pc, #96]	; (801dd24 <SUBGRF_SetRfFrequency+0x84>)
 801dcc4:	2201      	movs	r2, #1
 801dcc6:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801dcc8:	687b      	ldr	r3, [r7, #4]
 801dcca:	2200      	movs	r2, #0
 801dccc:	461c      	mov	r4, r3
 801dcce:	4615      	mov	r5, r2
 801dcd0:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801dcd4:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801dcd8:	4a13      	ldr	r2, [pc, #76]	; (801dd28 <SUBGRF_SetRfFrequency+0x88>)
 801dcda:	f04f 0300 	mov.w	r3, #0
 801dcde:	4640      	mov	r0, r8
 801dce0:	4649      	mov	r1, r9
 801dce2:	f7e3 f9c3 	bl	800106c <__aeabi_uldivmod>
 801dce6:	4602      	mov	r2, r0
 801dce8:	460b      	mov	r3, r1
 801dcea:	4613      	mov	r3, r2
 801dcec:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801dcee:	68fb      	ldr	r3, [r7, #12]
 801dcf0:	0e1b      	lsrs	r3, r3, #24
 801dcf2:	b2db      	uxtb	r3, r3
 801dcf4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801dcf6:	68fb      	ldr	r3, [r7, #12]
 801dcf8:	0c1b      	lsrs	r3, r3, #16
 801dcfa:	b2db      	uxtb	r3, r3
 801dcfc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801dcfe:	68fb      	ldr	r3, [r7, #12]
 801dd00:	0a1b      	lsrs	r3, r3, #8
 801dd02:	b2db      	uxtb	r3, r3
 801dd04:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801dd06:	68fb      	ldr	r3, [r7, #12]
 801dd08:	b2db      	uxtb	r3, r3
 801dd0a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801dd0c:	f107 0308 	add.w	r3, r7, #8
 801dd10:	2204      	movs	r2, #4
 801dd12:	4619      	mov	r1, r3
 801dd14:	2086      	movs	r0, #134	; 0x86
 801dd16:	f000 fbc7 	bl	801e4a8 <SUBGRF_WriteCommand>
}
 801dd1a:	bf00      	nop
 801dd1c:	3710      	adds	r7, #16
 801dd1e:	46bd      	mov	sp, r7
 801dd20:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801dd24:	20001c10 	.word	0x20001c10
 801dd28:	01e84800 	.word	0x01e84800

0801dd2c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801dd2c:	b580      	push	{r7, lr}
 801dd2e:	b082      	sub	sp, #8
 801dd30:	af00      	add	r7, sp, #0
 801dd32:	4603      	mov	r3, r0
 801dd34:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801dd36:	79fa      	ldrb	r2, [r7, #7]
 801dd38:	4b09      	ldr	r3, [pc, #36]	; (801dd60 <SUBGRF_SetPacketType+0x34>)
 801dd3a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801dd3c:	79fb      	ldrb	r3, [r7, #7]
 801dd3e:	2b00      	cmp	r3, #0
 801dd40:	d104      	bne.n	801dd4c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801dd42:	2100      	movs	r1, #0
 801dd44:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801dd48:	f000 fafe 	bl	801e348 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801dd4c:	1dfb      	adds	r3, r7, #7
 801dd4e:	2201      	movs	r2, #1
 801dd50:	4619      	mov	r1, r3
 801dd52:	208a      	movs	r0, #138	; 0x8a
 801dd54:	f000 fba8 	bl	801e4a8 <SUBGRF_WriteCommand>
}
 801dd58:	bf00      	nop
 801dd5a:	3708      	adds	r7, #8
 801dd5c:	46bd      	mov	sp, r7
 801dd5e:	bd80      	pop	{r7, pc}
 801dd60:	20001c09 	.word	0x20001c09

0801dd64 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801dd64:	b480      	push	{r7}
 801dd66:	af00      	add	r7, sp, #0
    return PacketType;
 801dd68:	4b02      	ldr	r3, [pc, #8]	; (801dd74 <SUBGRF_GetPacketType+0x10>)
 801dd6a:	781b      	ldrb	r3, [r3, #0]
}
 801dd6c:	4618      	mov	r0, r3
 801dd6e:	46bd      	mov	sp, r7
 801dd70:	bc80      	pop	{r7}
 801dd72:	4770      	bx	lr
 801dd74:	20001c09 	.word	0x20001c09

0801dd78 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801dd78:	b580      	push	{r7, lr}
 801dd7a:	b084      	sub	sp, #16
 801dd7c:	af00      	add	r7, sp, #0
 801dd7e:	4603      	mov	r3, r0
 801dd80:	71fb      	strb	r3, [r7, #7]
 801dd82:	460b      	mov	r3, r1
 801dd84:	71bb      	strb	r3, [r7, #6]
 801dd86:	4613      	mov	r3, r2
 801dd88:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801dd8a:	79fb      	ldrb	r3, [r7, #7]
 801dd8c:	2b01      	cmp	r3, #1
 801dd8e:	d149      	bne.n	801de24 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801dd90:	2000      	movs	r0, #0
 801dd92:	f7ef fb5b 	bl	800d44c <RBI_GetRFOMaxPowerConfig>
 801dd96:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801dd98:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801dd9c:	68fa      	ldr	r2, [r7, #12]
 801dd9e:	429a      	cmp	r2, r3
 801dda0:	da01      	bge.n	801dda6 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801dda2:	68fb      	ldr	r3, [r7, #12]
 801dda4:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801dda6:	68fb      	ldr	r3, [r7, #12]
 801dda8:	2b0e      	cmp	r3, #14
 801ddaa:	d10e      	bne.n	801ddca <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801ddac:	2301      	movs	r3, #1
 801ddae:	2201      	movs	r2, #1
 801ddb0:	2100      	movs	r1, #0
 801ddb2:	2004      	movs	r0, #4
 801ddb4:	f7ff fef6 	bl	801dba4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801ddb8:	79ba      	ldrb	r2, [r7, #6]
 801ddba:	68fb      	ldr	r3, [r7, #12]
 801ddbc:	b2db      	uxtb	r3, r3
 801ddbe:	1ad3      	subs	r3, r2, r3
 801ddc0:	b2db      	uxtb	r3, r3
 801ddc2:	330e      	adds	r3, #14
 801ddc4:	b2db      	uxtb	r3, r3
 801ddc6:	71bb      	strb	r3, [r7, #6]
 801ddc8:	e01f      	b.n	801de0a <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801ddca:	68fb      	ldr	r3, [r7, #12]
 801ddcc:	2b0a      	cmp	r3, #10
 801ddce:	d10e      	bne.n	801ddee <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801ddd0:	2301      	movs	r3, #1
 801ddd2:	2201      	movs	r2, #1
 801ddd4:	2100      	movs	r1, #0
 801ddd6:	2001      	movs	r0, #1
 801ddd8:	f7ff fee4 	bl	801dba4 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801dddc:	79ba      	ldrb	r2, [r7, #6]
 801ddde:	68fb      	ldr	r3, [r7, #12]
 801dde0:	b2db      	uxtb	r3, r3
 801dde2:	1ad3      	subs	r3, r2, r3
 801dde4:	b2db      	uxtb	r3, r3
 801dde6:	330d      	adds	r3, #13
 801dde8:	b2db      	uxtb	r3, r3
 801ddea:	71bb      	strb	r3, [r7, #6]
 801ddec:	e00d      	b.n	801de0a <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801ddee:	2301      	movs	r3, #1
 801ddf0:	2201      	movs	r2, #1
 801ddf2:	2100      	movs	r1, #0
 801ddf4:	2007      	movs	r0, #7
 801ddf6:	f7ff fed5 	bl	801dba4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801ddfa:	79ba      	ldrb	r2, [r7, #6]
 801ddfc:	68fb      	ldr	r3, [r7, #12]
 801ddfe:	b2db      	uxtb	r3, r3
 801de00:	1ad3      	subs	r3, r2, r3
 801de02:	b2db      	uxtb	r3, r3
 801de04:	330e      	adds	r3, #14
 801de06:	b2db      	uxtb	r3, r3
 801de08:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801de0a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801de0e:	f113 0f11 	cmn.w	r3, #17
 801de12:	da01      	bge.n	801de18 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801de14:	23ef      	movs	r3, #239	; 0xef
 801de16:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801de18:	2118      	movs	r1, #24
 801de1a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801de1e:	f000 fa93 	bl	801e348 <SUBGRF_WriteRegister>
 801de22:	e067      	b.n	801def4 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801de24:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801de28:	f000 faa2 	bl	801e370 <SUBGRF_ReadRegister>
 801de2c:	4603      	mov	r3, r0
 801de2e:	f043 031e 	orr.w	r3, r3, #30
 801de32:	b2db      	uxtb	r3, r3
 801de34:	4619      	mov	r1, r3
 801de36:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801de3a:	f000 fa85 	bl	801e348 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801de3e:	2001      	movs	r0, #1
 801de40:	f7ef fb04 	bl	800d44c <RBI_GetRFOMaxPowerConfig>
 801de44:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801de46:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801de4a:	68fa      	ldr	r2, [r7, #12]
 801de4c:	429a      	cmp	r2, r3
 801de4e:	da01      	bge.n	801de54 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801de50:	68fb      	ldr	r3, [r7, #12]
 801de52:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801de54:	68fb      	ldr	r3, [r7, #12]
 801de56:	2b14      	cmp	r3, #20
 801de58:	d10e      	bne.n	801de78 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801de5a:	2301      	movs	r3, #1
 801de5c:	2200      	movs	r2, #0
 801de5e:	2105      	movs	r1, #5
 801de60:	2003      	movs	r0, #3
 801de62:	f7ff fe9f 	bl	801dba4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801de66:	79ba      	ldrb	r2, [r7, #6]
 801de68:	68fb      	ldr	r3, [r7, #12]
 801de6a:	b2db      	uxtb	r3, r3
 801de6c:	1ad3      	subs	r3, r2, r3
 801de6e:	b2db      	uxtb	r3, r3
 801de70:	3316      	adds	r3, #22
 801de72:	b2db      	uxtb	r3, r3
 801de74:	71bb      	strb	r3, [r7, #6]
 801de76:	e031      	b.n	801dedc <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801de78:	68fb      	ldr	r3, [r7, #12]
 801de7a:	2b11      	cmp	r3, #17
 801de7c:	d10e      	bne.n	801de9c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801de7e:	2301      	movs	r3, #1
 801de80:	2200      	movs	r2, #0
 801de82:	2103      	movs	r1, #3
 801de84:	2002      	movs	r0, #2
 801de86:	f7ff fe8d 	bl	801dba4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801de8a:	79ba      	ldrb	r2, [r7, #6]
 801de8c:	68fb      	ldr	r3, [r7, #12]
 801de8e:	b2db      	uxtb	r3, r3
 801de90:	1ad3      	subs	r3, r2, r3
 801de92:	b2db      	uxtb	r3, r3
 801de94:	3316      	adds	r3, #22
 801de96:	b2db      	uxtb	r3, r3
 801de98:	71bb      	strb	r3, [r7, #6]
 801de9a:	e01f      	b.n	801dedc <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801de9c:	68fb      	ldr	r3, [r7, #12]
 801de9e:	2b0e      	cmp	r3, #14
 801dea0:	d10e      	bne.n	801dec0 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801dea2:	2301      	movs	r3, #1
 801dea4:	2200      	movs	r2, #0
 801dea6:	2102      	movs	r1, #2
 801dea8:	2002      	movs	r0, #2
 801deaa:	f7ff fe7b 	bl	801dba4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801deae:	79ba      	ldrb	r2, [r7, #6]
 801deb0:	68fb      	ldr	r3, [r7, #12]
 801deb2:	b2db      	uxtb	r3, r3
 801deb4:	1ad3      	subs	r3, r2, r3
 801deb6:	b2db      	uxtb	r3, r3
 801deb8:	330e      	adds	r3, #14
 801deba:	b2db      	uxtb	r3, r3
 801debc:	71bb      	strb	r3, [r7, #6]
 801debe:	e00d      	b.n	801dedc <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801dec0:	2301      	movs	r3, #1
 801dec2:	2200      	movs	r2, #0
 801dec4:	2107      	movs	r1, #7
 801dec6:	2004      	movs	r0, #4
 801dec8:	f7ff fe6c 	bl	801dba4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801decc:	79ba      	ldrb	r2, [r7, #6]
 801dece:	68fb      	ldr	r3, [r7, #12]
 801ded0:	b2db      	uxtb	r3, r3
 801ded2:	1ad3      	subs	r3, r2, r3
 801ded4:	b2db      	uxtb	r3, r3
 801ded6:	3316      	adds	r3, #22
 801ded8:	b2db      	uxtb	r3, r3
 801deda:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801dedc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801dee0:	f113 0f09 	cmn.w	r3, #9
 801dee4:	da01      	bge.n	801deea <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801dee6:	23f7      	movs	r3, #247	; 0xf7
 801dee8:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801deea:	2138      	movs	r1, #56	; 0x38
 801deec:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801def0:	f000 fa2a 	bl	801e348 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801def4:	79bb      	ldrb	r3, [r7, #6]
 801def6:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801def8:	797b      	ldrb	r3, [r7, #5]
 801defa:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801defc:	f107 0308 	add.w	r3, r7, #8
 801df00:	2202      	movs	r2, #2
 801df02:	4619      	mov	r1, r3
 801df04:	208e      	movs	r0, #142	; 0x8e
 801df06:	f000 facf 	bl	801e4a8 <SUBGRF_WriteCommand>
}
 801df0a:	bf00      	nop
 801df0c:	3710      	adds	r7, #16
 801df0e:	46bd      	mov	sp, r7
 801df10:	bd80      	pop	{r7, pc}
	...

0801df14 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801df14:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801df18:	b086      	sub	sp, #24
 801df1a:	af00      	add	r7, sp, #0
 801df1c:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801df1e:	2300      	movs	r3, #0
 801df20:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801df22:	4a61      	ldr	r2, [pc, #388]	; (801e0a8 <SUBGRF_SetModulationParams+0x194>)
 801df24:	f107 0308 	add.w	r3, r7, #8
 801df28:	e892 0003 	ldmia.w	r2, {r0, r1}
 801df2c:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801df30:	687b      	ldr	r3, [r7, #4]
 801df32:	781a      	ldrb	r2, [r3, #0]
 801df34:	4b5d      	ldr	r3, [pc, #372]	; (801e0ac <SUBGRF_SetModulationParams+0x198>)
 801df36:	781b      	ldrb	r3, [r3, #0]
 801df38:	429a      	cmp	r2, r3
 801df3a:	d004      	beq.n	801df46 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801df3c:	687b      	ldr	r3, [r7, #4]
 801df3e:	781b      	ldrb	r3, [r3, #0]
 801df40:	4618      	mov	r0, r3
 801df42:	f7ff fef3 	bl	801dd2c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801df46:	687b      	ldr	r3, [r7, #4]
 801df48:	781b      	ldrb	r3, [r3, #0]
 801df4a:	2b03      	cmp	r3, #3
 801df4c:	f200 80a5 	bhi.w	801e09a <SUBGRF_SetModulationParams+0x186>
 801df50:	a201      	add	r2, pc, #4	; (adr r2, 801df58 <SUBGRF_SetModulationParams+0x44>)
 801df52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801df56:	bf00      	nop
 801df58:	0801df69 	.word	0x0801df69
 801df5c:	0801e029 	.word	0x0801e029
 801df60:	0801dfeb 	.word	0x0801dfeb
 801df64:	0801e057 	.word	0x0801e057
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801df68:	2308      	movs	r3, #8
 801df6a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801df6c:	687b      	ldr	r3, [r7, #4]
 801df6e:	685b      	ldr	r3, [r3, #4]
 801df70:	4a4f      	ldr	r2, [pc, #316]	; (801e0b0 <SUBGRF_SetModulationParams+0x19c>)
 801df72:	fbb2 f3f3 	udiv	r3, r2, r3
 801df76:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801df78:	697b      	ldr	r3, [r7, #20]
 801df7a:	0c1b      	lsrs	r3, r3, #16
 801df7c:	b2db      	uxtb	r3, r3
 801df7e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801df80:	697b      	ldr	r3, [r7, #20]
 801df82:	0a1b      	lsrs	r3, r3, #8
 801df84:	b2db      	uxtb	r3, r3
 801df86:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801df88:	697b      	ldr	r3, [r7, #20]
 801df8a:	b2db      	uxtb	r3, r3
 801df8c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801df8e:	687b      	ldr	r3, [r7, #4]
 801df90:	7b1b      	ldrb	r3, [r3, #12]
 801df92:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801df94:	687b      	ldr	r3, [r7, #4]
 801df96:	7b5b      	ldrb	r3, [r3, #13]
 801df98:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801df9a:	687b      	ldr	r3, [r7, #4]
 801df9c:	689b      	ldr	r3, [r3, #8]
 801df9e:	2200      	movs	r2, #0
 801dfa0:	461c      	mov	r4, r3
 801dfa2:	4615      	mov	r5, r2
 801dfa4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801dfa8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801dfac:	4a41      	ldr	r2, [pc, #260]	; (801e0b4 <SUBGRF_SetModulationParams+0x1a0>)
 801dfae:	f04f 0300 	mov.w	r3, #0
 801dfb2:	4640      	mov	r0, r8
 801dfb4:	4649      	mov	r1, r9
 801dfb6:	f7e3 f859 	bl	800106c <__aeabi_uldivmod>
 801dfba:	4602      	mov	r2, r0
 801dfbc:	460b      	mov	r3, r1
 801dfbe:	4613      	mov	r3, r2
 801dfc0:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801dfc2:	697b      	ldr	r3, [r7, #20]
 801dfc4:	0c1b      	lsrs	r3, r3, #16
 801dfc6:	b2db      	uxtb	r3, r3
 801dfc8:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801dfca:	697b      	ldr	r3, [r7, #20]
 801dfcc:	0a1b      	lsrs	r3, r3, #8
 801dfce:	b2db      	uxtb	r3, r3
 801dfd0:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801dfd2:	697b      	ldr	r3, [r7, #20]
 801dfd4:	b2db      	uxtb	r3, r3
 801dfd6:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801dfd8:	7cfb      	ldrb	r3, [r7, #19]
 801dfda:	b29a      	uxth	r2, r3
 801dfdc:	f107 0308 	add.w	r3, r7, #8
 801dfe0:	4619      	mov	r1, r3
 801dfe2:	208b      	movs	r0, #139	; 0x8b
 801dfe4:	f000 fa60 	bl	801e4a8 <SUBGRF_WriteCommand>
        break;
 801dfe8:	e058      	b.n	801e09c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801dfea:	2304      	movs	r3, #4
 801dfec:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801dfee:	687b      	ldr	r3, [r7, #4]
 801dff0:	691b      	ldr	r3, [r3, #16]
 801dff2:	4a2f      	ldr	r2, [pc, #188]	; (801e0b0 <SUBGRF_SetModulationParams+0x19c>)
 801dff4:	fbb2 f3f3 	udiv	r3, r2, r3
 801dff8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801dffa:	697b      	ldr	r3, [r7, #20]
 801dffc:	0c1b      	lsrs	r3, r3, #16
 801dffe:	b2db      	uxtb	r3, r3
 801e000:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801e002:	697b      	ldr	r3, [r7, #20]
 801e004:	0a1b      	lsrs	r3, r3, #8
 801e006:	b2db      	uxtb	r3, r3
 801e008:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801e00a:	697b      	ldr	r3, [r7, #20]
 801e00c:	b2db      	uxtb	r3, r3
 801e00e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801e010:	687b      	ldr	r3, [r7, #4]
 801e012:	7d1b      	ldrb	r3, [r3, #20]
 801e014:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801e016:	7cfb      	ldrb	r3, [r7, #19]
 801e018:	b29a      	uxth	r2, r3
 801e01a:	f107 0308 	add.w	r3, r7, #8
 801e01e:	4619      	mov	r1, r3
 801e020:	208b      	movs	r0, #139	; 0x8b
 801e022:	f000 fa41 	bl	801e4a8 <SUBGRF_WriteCommand>
        break;
 801e026:	e039      	b.n	801e09c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801e028:	2304      	movs	r3, #4
 801e02a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801e02c:	687b      	ldr	r3, [r7, #4]
 801e02e:	7e1b      	ldrb	r3, [r3, #24]
 801e030:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801e032:	687b      	ldr	r3, [r7, #4]
 801e034:	7e5b      	ldrb	r3, [r3, #25]
 801e036:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801e038:	687b      	ldr	r3, [r7, #4]
 801e03a:	7e9b      	ldrb	r3, [r3, #26]
 801e03c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801e03e:	687b      	ldr	r3, [r7, #4]
 801e040:	7edb      	ldrb	r3, [r3, #27]
 801e042:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801e044:	7cfb      	ldrb	r3, [r7, #19]
 801e046:	b29a      	uxth	r2, r3
 801e048:	f107 0308 	add.w	r3, r7, #8
 801e04c:	4619      	mov	r1, r3
 801e04e:	208b      	movs	r0, #139	; 0x8b
 801e050:	f000 fa2a 	bl	801e4a8 <SUBGRF_WriteCommand>

        break;
 801e054:	e022      	b.n	801e09c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801e056:	2305      	movs	r3, #5
 801e058:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801e05a:	687b      	ldr	r3, [r7, #4]
 801e05c:	685b      	ldr	r3, [r3, #4]
 801e05e:	4a14      	ldr	r2, [pc, #80]	; (801e0b0 <SUBGRF_SetModulationParams+0x19c>)
 801e060:	fbb2 f3f3 	udiv	r3, r2, r3
 801e064:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801e066:	697b      	ldr	r3, [r7, #20]
 801e068:	0c1b      	lsrs	r3, r3, #16
 801e06a:	b2db      	uxtb	r3, r3
 801e06c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801e06e:	697b      	ldr	r3, [r7, #20]
 801e070:	0a1b      	lsrs	r3, r3, #8
 801e072:	b2db      	uxtb	r3, r3
 801e074:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801e076:	697b      	ldr	r3, [r7, #20]
 801e078:	b2db      	uxtb	r3, r3
 801e07a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801e07c:	687b      	ldr	r3, [r7, #4]
 801e07e:	7b1b      	ldrb	r3, [r3, #12]
 801e080:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801e082:	687b      	ldr	r3, [r7, #4]
 801e084:	7b5b      	ldrb	r3, [r3, #13]
 801e086:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801e088:	7cfb      	ldrb	r3, [r7, #19]
 801e08a:	b29a      	uxth	r2, r3
 801e08c:	f107 0308 	add.w	r3, r7, #8
 801e090:	4619      	mov	r1, r3
 801e092:	208b      	movs	r0, #139	; 0x8b
 801e094:	f000 fa08 	bl	801e4a8 <SUBGRF_WriteCommand>
        break;
 801e098:	e000      	b.n	801e09c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801e09a:	bf00      	nop
    }
}
 801e09c:	bf00      	nop
 801e09e:	3718      	adds	r7, #24
 801e0a0:	46bd      	mov	sp, r7
 801e0a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801e0a6:	bf00      	nop
 801e0a8:	08020858 	.word	0x08020858
 801e0ac:	20001c09 	.word	0x20001c09
 801e0b0:	3d090000 	.word	0x3d090000
 801e0b4:	01e84800 	.word	0x01e84800

0801e0b8 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801e0b8:	b580      	push	{r7, lr}
 801e0ba:	b086      	sub	sp, #24
 801e0bc:	af00      	add	r7, sp, #0
 801e0be:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801e0c0:	2300      	movs	r3, #0
 801e0c2:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801e0c4:	4a48      	ldr	r2, [pc, #288]	; (801e1e8 <SUBGRF_SetPacketParams+0x130>)
 801e0c6:	f107 030c 	add.w	r3, r7, #12
 801e0ca:	ca07      	ldmia	r2, {r0, r1, r2}
 801e0cc:	c303      	stmia	r3!, {r0, r1}
 801e0ce:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801e0d0:	687b      	ldr	r3, [r7, #4]
 801e0d2:	781a      	ldrb	r2, [r3, #0]
 801e0d4:	4b45      	ldr	r3, [pc, #276]	; (801e1ec <SUBGRF_SetPacketParams+0x134>)
 801e0d6:	781b      	ldrb	r3, [r3, #0]
 801e0d8:	429a      	cmp	r2, r3
 801e0da:	d004      	beq.n	801e0e6 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801e0dc:	687b      	ldr	r3, [r7, #4]
 801e0de:	781b      	ldrb	r3, [r3, #0]
 801e0e0:	4618      	mov	r0, r3
 801e0e2:	f7ff fe23 	bl	801dd2c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801e0e6:	687b      	ldr	r3, [r7, #4]
 801e0e8:	781b      	ldrb	r3, [r3, #0]
 801e0ea:	2b03      	cmp	r3, #3
 801e0ec:	d878      	bhi.n	801e1e0 <SUBGRF_SetPacketParams+0x128>
 801e0ee:	a201      	add	r2, pc, #4	; (adr r2, 801e0f4 <SUBGRF_SetPacketParams+0x3c>)
 801e0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e0f4:	0801e105 	.word	0x0801e105
 801e0f8:	0801e195 	.word	0x0801e195
 801e0fc:	0801e189 	.word	0x0801e189
 801e100:	0801e105 	.word	0x0801e105
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801e104:	687b      	ldr	r3, [r7, #4]
 801e106:	7a5b      	ldrb	r3, [r3, #9]
 801e108:	2bf1      	cmp	r3, #241	; 0xf1
 801e10a:	d10a      	bne.n	801e122 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801e10c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801e110:	f7ff faaa 	bl	801d668 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801e114:	f248 0005 	movw	r0, #32773	; 0x8005
 801e118:	f7ff fac6 	bl	801d6a8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801e11c:	2302      	movs	r3, #2
 801e11e:	75bb      	strb	r3, [r7, #22]
 801e120:	e011      	b.n	801e146 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801e122:	687b      	ldr	r3, [r7, #4]
 801e124:	7a5b      	ldrb	r3, [r3, #9]
 801e126:	2bf2      	cmp	r3, #242	; 0xf2
 801e128:	d10a      	bne.n	801e140 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801e12a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801e12e:	f7ff fa9b 	bl	801d668 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801e132:	f241 0021 	movw	r0, #4129	; 0x1021
 801e136:	f7ff fab7 	bl	801d6a8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801e13a:	2306      	movs	r3, #6
 801e13c:	75bb      	strb	r3, [r7, #22]
 801e13e:	e002      	b.n	801e146 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801e140:	687b      	ldr	r3, [r7, #4]
 801e142:	7a5b      	ldrb	r3, [r3, #9]
 801e144:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801e146:	2309      	movs	r3, #9
 801e148:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801e14a:	687b      	ldr	r3, [r7, #4]
 801e14c:	885b      	ldrh	r3, [r3, #2]
 801e14e:	0a1b      	lsrs	r3, r3, #8
 801e150:	b29b      	uxth	r3, r3
 801e152:	b2db      	uxtb	r3, r3
 801e154:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801e156:	687b      	ldr	r3, [r7, #4]
 801e158:	885b      	ldrh	r3, [r3, #2]
 801e15a:	b2db      	uxtb	r3, r3
 801e15c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801e15e:	687b      	ldr	r3, [r7, #4]
 801e160:	791b      	ldrb	r3, [r3, #4]
 801e162:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801e164:	687b      	ldr	r3, [r7, #4]
 801e166:	795b      	ldrb	r3, [r3, #5]
 801e168:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801e16a:	687b      	ldr	r3, [r7, #4]
 801e16c:	799b      	ldrb	r3, [r3, #6]
 801e16e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801e170:	687b      	ldr	r3, [r7, #4]
 801e172:	79db      	ldrb	r3, [r3, #7]
 801e174:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801e176:	687b      	ldr	r3, [r7, #4]
 801e178:	7a1b      	ldrb	r3, [r3, #8]
 801e17a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801e17c:	7dbb      	ldrb	r3, [r7, #22]
 801e17e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801e180:	687b      	ldr	r3, [r7, #4]
 801e182:	7a9b      	ldrb	r3, [r3, #10]
 801e184:	753b      	strb	r3, [r7, #20]
        break;
 801e186:	e022      	b.n	801e1ce <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801e188:	2301      	movs	r3, #1
 801e18a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801e18c:	687b      	ldr	r3, [r7, #4]
 801e18e:	7b1b      	ldrb	r3, [r3, #12]
 801e190:	733b      	strb	r3, [r7, #12]
        break;
 801e192:	e01c      	b.n	801e1ce <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801e194:	2306      	movs	r3, #6
 801e196:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801e198:	687b      	ldr	r3, [r7, #4]
 801e19a:	89db      	ldrh	r3, [r3, #14]
 801e19c:	0a1b      	lsrs	r3, r3, #8
 801e19e:	b29b      	uxth	r3, r3
 801e1a0:	b2db      	uxtb	r3, r3
 801e1a2:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801e1a4:	687b      	ldr	r3, [r7, #4]
 801e1a6:	89db      	ldrh	r3, [r3, #14]
 801e1a8:	b2db      	uxtb	r3, r3
 801e1aa:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801e1ac:	687b      	ldr	r3, [r7, #4]
 801e1ae:	7c1a      	ldrb	r2, [r3, #16]
 801e1b0:	4b0f      	ldr	r3, [pc, #60]	; (801e1f0 <SUBGRF_SetPacketParams+0x138>)
 801e1b2:	4611      	mov	r1, r2
 801e1b4:	7019      	strb	r1, [r3, #0]
 801e1b6:	4613      	mov	r3, r2
 801e1b8:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801e1ba:	687b      	ldr	r3, [r7, #4]
 801e1bc:	7c5b      	ldrb	r3, [r3, #17]
 801e1be:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801e1c0:	687b      	ldr	r3, [r7, #4]
 801e1c2:	7c9b      	ldrb	r3, [r3, #18]
 801e1c4:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801e1c6:	687b      	ldr	r3, [r7, #4]
 801e1c8:	7cdb      	ldrb	r3, [r3, #19]
 801e1ca:	747b      	strb	r3, [r7, #17]
        break;
 801e1cc:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801e1ce:	7dfb      	ldrb	r3, [r7, #23]
 801e1d0:	b29a      	uxth	r2, r3
 801e1d2:	f107 030c 	add.w	r3, r7, #12
 801e1d6:	4619      	mov	r1, r3
 801e1d8:	208c      	movs	r0, #140	; 0x8c
 801e1da:	f000 f965 	bl	801e4a8 <SUBGRF_WriteCommand>
 801e1de:	e000      	b.n	801e1e2 <SUBGRF_SetPacketParams+0x12a>
        return;
 801e1e0:	bf00      	nop
}
 801e1e2:	3718      	adds	r7, #24
 801e1e4:	46bd      	mov	sp, r7
 801e1e6:	bd80      	pop	{r7, pc}
 801e1e8:	08020860 	.word	0x08020860
 801e1ec:	20001c09 	.word	0x20001c09
 801e1f0:	20001c0a 	.word	0x20001c0a

0801e1f4 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801e1f4:	b580      	push	{r7, lr}
 801e1f6:	b084      	sub	sp, #16
 801e1f8:	af00      	add	r7, sp, #0
 801e1fa:	4603      	mov	r3, r0
 801e1fc:	460a      	mov	r2, r1
 801e1fe:	71fb      	strb	r3, [r7, #7]
 801e200:	4613      	mov	r3, r2
 801e202:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801e204:	79fb      	ldrb	r3, [r7, #7]
 801e206:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801e208:	79bb      	ldrb	r3, [r7, #6]
 801e20a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801e20c:	f107 030c 	add.w	r3, r7, #12
 801e210:	2202      	movs	r2, #2
 801e212:	4619      	mov	r1, r3
 801e214:	208f      	movs	r0, #143	; 0x8f
 801e216:	f000 f947 	bl	801e4a8 <SUBGRF_WriteCommand>
}
 801e21a:	bf00      	nop
 801e21c:	3710      	adds	r7, #16
 801e21e:	46bd      	mov	sp, r7
 801e220:	bd80      	pop	{r7, pc}

0801e222 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801e222:	b580      	push	{r7, lr}
 801e224:	b082      	sub	sp, #8
 801e226:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801e228:	2300      	movs	r3, #0
 801e22a:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801e22c:	1d3b      	adds	r3, r7, #4
 801e22e:	2201      	movs	r2, #1
 801e230:	4619      	mov	r1, r3
 801e232:	2015      	movs	r0, #21
 801e234:	f000 f95a 	bl	801e4ec <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801e238:	793b      	ldrb	r3, [r7, #4]
 801e23a:	425b      	negs	r3, r3
 801e23c:	105b      	asrs	r3, r3, #1
 801e23e:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801e240:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801e244:	4618      	mov	r0, r3
 801e246:	3708      	adds	r7, #8
 801e248:	46bd      	mov	sp, r7
 801e24a:	bd80      	pop	{r7, pc}

0801e24c <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801e24c:	b580      	push	{r7, lr}
 801e24e:	b084      	sub	sp, #16
 801e250:	af00      	add	r7, sp, #0
 801e252:	6078      	str	r0, [r7, #4]
 801e254:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801e256:	f107 030c 	add.w	r3, r7, #12
 801e25a:	2202      	movs	r2, #2
 801e25c:	4619      	mov	r1, r3
 801e25e:	2013      	movs	r0, #19
 801e260:	f000 f944 	bl	801e4ec <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801e264:	f7ff fd7e 	bl	801dd64 <SUBGRF_GetPacketType>
 801e268:	4603      	mov	r3, r0
 801e26a:	2b01      	cmp	r3, #1
 801e26c:	d10d      	bne.n	801e28a <SUBGRF_GetRxBufferStatus+0x3e>
 801e26e:	4b0c      	ldr	r3, [pc, #48]	; (801e2a0 <SUBGRF_GetRxBufferStatus+0x54>)
 801e270:	781b      	ldrb	r3, [r3, #0]
 801e272:	b2db      	uxtb	r3, r3
 801e274:	2b01      	cmp	r3, #1
 801e276:	d108      	bne.n	801e28a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801e278:	f240 7002 	movw	r0, #1794	; 0x702
 801e27c:	f000 f878 	bl	801e370 <SUBGRF_ReadRegister>
 801e280:	4603      	mov	r3, r0
 801e282:	461a      	mov	r2, r3
 801e284:	687b      	ldr	r3, [r7, #4]
 801e286:	701a      	strb	r2, [r3, #0]
 801e288:	e002      	b.n	801e290 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801e28a:	7b3a      	ldrb	r2, [r7, #12]
 801e28c:	687b      	ldr	r3, [r7, #4]
 801e28e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801e290:	7b7a      	ldrb	r2, [r7, #13]
 801e292:	683b      	ldr	r3, [r7, #0]
 801e294:	701a      	strb	r2, [r3, #0]
}
 801e296:	bf00      	nop
 801e298:	3710      	adds	r7, #16
 801e29a:	46bd      	mov	sp, r7
 801e29c:	bd80      	pop	{r7, pc}
 801e29e:	bf00      	nop
 801e2a0:	20001c0a 	.word	0x20001c0a

0801e2a4 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801e2a4:	b580      	push	{r7, lr}
 801e2a6:	b084      	sub	sp, #16
 801e2a8:	af00      	add	r7, sp, #0
 801e2aa:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801e2ac:	f107 030c 	add.w	r3, r7, #12
 801e2b0:	2203      	movs	r2, #3
 801e2b2:	4619      	mov	r1, r3
 801e2b4:	2014      	movs	r0, #20
 801e2b6:	f000 f919 	bl	801e4ec <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801e2ba:	f7ff fd53 	bl	801dd64 <SUBGRF_GetPacketType>
 801e2be:	4603      	mov	r3, r0
 801e2c0:	461a      	mov	r2, r3
 801e2c2:	687b      	ldr	r3, [r7, #4]
 801e2c4:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801e2c6:	687b      	ldr	r3, [r7, #4]
 801e2c8:	781b      	ldrb	r3, [r3, #0]
 801e2ca:	2b00      	cmp	r3, #0
 801e2cc:	d002      	beq.n	801e2d4 <SUBGRF_GetPacketStatus+0x30>
 801e2ce:	2b01      	cmp	r3, #1
 801e2d0:	d013      	beq.n	801e2fa <SUBGRF_GetPacketStatus+0x56>
 801e2d2:	e02a      	b.n	801e32a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801e2d4:	7b3a      	ldrb	r2, [r7, #12]
 801e2d6:	687b      	ldr	r3, [r7, #4]
 801e2d8:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801e2da:	7b7b      	ldrb	r3, [r7, #13]
 801e2dc:	425b      	negs	r3, r3
 801e2de:	105b      	asrs	r3, r3, #1
 801e2e0:	b25a      	sxtb	r2, r3
 801e2e2:	687b      	ldr	r3, [r7, #4]
 801e2e4:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801e2e6:	7bbb      	ldrb	r3, [r7, #14]
 801e2e8:	425b      	negs	r3, r3
 801e2ea:	105b      	asrs	r3, r3, #1
 801e2ec:	b25a      	sxtb	r2, r3
 801e2ee:	687b      	ldr	r3, [r7, #4]
 801e2f0:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801e2f2:	687b      	ldr	r3, [r7, #4]
 801e2f4:	2200      	movs	r2, #0
 801e2f6:	609a      	str	r2, [r3, #8]
            break;
 801e2f8:	e020      	b.n	801e33c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801e2fa:	7b3b      	ldrb	r3, [r7, #12]
 801e2fc:	425b      	negs	r3, r3
 801e2fe:	105b      	asrs	r3, r3, #1
 801e300:	b25a      	sxtb	r2, r3
 801e302:	687b      	ldr	r3, [r7, #4]
 801e304:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801e306:	7b7b      	ldrb	r3, [r7, #13]
 801e308:	b25b      	sxtb	r3, r3
 801e30a:	3302      	adds	r3, #2
 801e30c:	109b      	asrs	r3, r3, #2
 801e30e:	b25a      	sxtb	r2, r3
 801e310:	687b      	ldr	r3, [r7, #4]
 801e312:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801e314:	7bbb      	ldrb	r3, [r7, #14]
 801e316:	425b      	negs	r3, r3
 801e318:	105b      	asrs	r3, r3, #1
 801e31a:	b25a      	sxtb	r2, r3
 801e31c:	687b      	ldr	r3, [r7, #4]
 801e31e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801e320:	4b08      	ldr	r3, [pc, #32]	; (801e344 <SUBGRF_GetPacketStatus+0xa0>)
 801e322:	681a      	ldr	r2, [r3, #0]
 801e324:	687b      	ldr	r3, [r7, #4]
 801e326:	611a      	str	r2, [r3, #16]
            break;
 801e328:	e008      	b.n	801e33c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801e32a:	2214      	movs	r2, #20
 801e32c:	2100      	movs	r1, #0
 801e32e:	6878      	ldr	r0, [r7, #4]
 801e330:	f000 fbcd 	bl	801eace <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801e334:	687b      	ldr	r3, [r7, #4]
 801e336:	220f      	movs	r2, #15
 801e338:	701a      	strb	r2, [r3, #0]
            break;
 801e33a:	bf00      	nop
    }
}
 801e33c:	bf00      	nop
 801e33e:	3710      	adds	r7, #16
 801e340:	46bd      	mov	sp, r7
 801e342:	bd80      	pop	{r7, pc}
 801e344:	20001c0c 	.word	0x20001c0c

0801e348 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801e348:	b580      	push	{r7, lr}
 801e34a:	b082      	sub	sp, #8
 801e34c:	af00      	add	r7, sp, #0
 801e34e:	4603      	mov	r3, r0
 801e350:	460a      	mov	r2, r1
 801e352:	80fb      	strh	r3, [r7, #6]
 801e354:	4613      	mov	r3, r2
 801e356:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801e358:	1d7a      	adds	r2, r7, #5
 801e35a:	88f9      	ldrh	r1, [r7, #6]
 801e35c:	2301      	movs	r3, #1
 801e35e:	4803      	ldr	r0, [pc, #12]	; (801e36c <SUBGRF_WriteRegister+0x24>)
 801e360:	f7eb fc3c 	bl	8009bdc <HAL_SUBGHZ_WriteRegisters>
}
 801e364:	bf00      	nop
 801e366:	3708      	adds	r7, #8
 801e368:	46bd      	mov	sp, r7
 801e36a:	bd80      	pop	{r7, pc}
 801e36c:	20000250 	.word	0x20000250

0801e370 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801e370:	b580      	push	{r7, lr}
 801e372:	b084      	sub	sp, #16
 801e374:	af00      	add	r7, sp, #0
 801e376:	4603      	mov	r3, r0
 801e378:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801e37a:	f107 020f 	add.w	r2, r7, #15
 801e37e:	88f9      	ldrh	r1, [r7, #6]
 801e380:	2301      	movs	r3, #1
 801e382:	4804      	ldr	r0, [pc, #16]	; (801e394 <SUBGRF_ReadRegister+0x24>)
 801e384:	f7eb fc89 	bl	8009c9a <HAL_SUBGHZ_ReadRegisters>
    return data;
 801e388:	7bfb      	ldrb	r3, [r7, #15]
}
 801e38a:	4618      	mov	r0, r3
 801e38c:	3710      	adds	r7, #16
 801e38e:	46bd      	mov	sp, r7
 801e390:	bd80      	pop	{r7, pc}
 801e392:	bf00      	nop
 801e394:	20000250 	.word	0x20000250

0801e398 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801e398:	b580      	push	{r7, lr}
 801e39a:	b086      	sub	sp, #24
 801e39c:	af00      	add	r7, sp, #0
 801e39e:	4603      	mov	r3, r0
 801e3a0:	6039      	str	r1, [r7, #0]
 801e3a2:	80fb      	strh	r3, [r7, #6]
 801e3a4:	4613      	mov	r3, r2
 801e3a6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e3a8:	f3ef 8310 	mrs	r3, PRIMASK
 801e3ac:	60fb      	str	r3, [r7, #12]
  return(result);
 801e3ae:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e3b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e3b2:	b672      	cpsid	i
}
 801e3b4:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801e3b6:	88bb      	ldrh	r3, [r7, #4]
 801e3b8:	88f9      	ldrh	r1, [r7, #6]
 801e3ba:	683a      	ldr	r2, [r7, #0]
 801e3bc:	4806      	ldr	r0, [pc, #24]	; (801e3d8 <SUBGRF_WriteRegisters+0x40>)
 801e3be:	f7eb fc0d 	bl	8009bdc <HAL_SUBGHZ_WriteRegisters>
 801e3c2:	697b      	ldr	r3, [r7, #20]
 801e3c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e3c6:	693b      	ldr	r3, [r7, #16]
 801e3c8:	f383 8810 	msr	PRIMASK, r3
}
 801e3cc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e3ce:	bf00      	nop
 801e3d0:	3718      	adds	r7, #24
 801e3d2:	46bd      	mov	sp, r7
 801e3d4:	bd80      	pop	{r7, pc}
 801e3d6:	bf00      	nop
 801e3d8:	20000250 	.word	0x20000250

0801e3dc <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801e3dc:	b580      	push	{r7, lr}
 801e3de:	b086      	sub	sp, #24
 801e3e0:	af00      	add	r7, sp, #0
 801e3e2:	4603      	mov	r3, r0
 801e3e4:	6039      	str	r1, [r7, #0]
 801e3e6:	80fb      	strh	r3, [r7, #6]
 801e3e8:	4613      	mov	r3, r2
 801e3ea:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e3ec:	f3ef 8310 	mrs	r3, PRIMASK
 801e3f0:	60fb      	str	r3, [r7, #12]
  return(result);
 801e3f2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e3f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e3f6:	b672      	cpsid	i
}
 801e3f8:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801e3fa:	88bb      	ldrh	r3, [r7, #4]
 801e3fc:	88f9      	ldrh	r1, [r7, #6]
 801e3fe:	683a      	ldr	r2, [r7, #0]
 801e400:	4806      	ldr	r0, [pc, #24]	; (801e41c <SUBGRF_ReadRegisters+0x40>)
 801e402:	f7eb fc4a 	bl	8009c9a <HAL_SUBGHZ_ReadRegisters>
 801e406:	697b      	ldr	r3, [r7, #20]
 801e408:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e40a:	693b      	ldr	r3, [r7, #16]
 801e40c:	f383 8810 	msr	PRIMASK, r3
}
 801e410:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e412:	bf00      	nop
 801e414:	3718      	adds	r7, #24
 801e416:	46bd      	mov	sp, r7
 801e418:	bd80      	pop	{r7, pc}
 801e41a:	bf00      	nop
 801e41c:	20000250 	.word	0x20000250

0801e420 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801e420:	b580      	push	{r7, lr}
 801e422:	b086      	sub	sp, #24
 801e424:	af00      	add	r7, sp, #0
 801e426:	4603      	mov	r3, r0
 801e428:	6039      	str	r1, [r7, #0]
 801e42a:	71fb      	strb	r3, [r7, #7]
 801e42c:	4613      	mov	r3, r2
 801e42e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e430:	f3ef 8310 	mrs	r3, PRIMASK
 801e434:	60fb      	str	r3, [r7, #12]
  return(result);
 801e436:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e438:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e43a:	b672      	cpsid	i
}
 801e43c:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801e43e:	79bb      	ldrb	r3, [r7, #6]
 801e440:	b29b      	uxth	r3, r3
 801e442:	79f9      	ldrb	r1, [r7, #7]
 801e444:	683a      	ldr	r2, [r7, #0]
 801e446:	4806      	ldr	r0, [pc, #24]	; (801e460 <SUBGRF_WriteBuffer+0x40>)
 801e448:	f7eb fd3b 	bl	8009ec2 <HAL_SUBGHZ_WriteBuffer>
 801e44c:	697b      	ldr	r3, [r7, #20]
 801e44e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e450:	693b      	ldr	r3, [r7, #16]
 801e452:	f383 8810 	msr	PRIMASK, r3
}
 801e456:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e458:	bf00      	nop
 801e45a:	3718      	adds	r7, #24
 801e45c:	46bd      	mov	sp, r7
 801e45e:	bd80      	pop	{r7, pc}
 801e460:	20000250 	.word	0x20000250

0801e464 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801e464:	b580      	push	{r7, lr}
 801e466:	b086      	sub	sp, #24
 801e468:	af00      	add	r7, sp, #0
 801e46a:	4603      	mov	r3, r0
 801e46c:	6039      	str	r1, [r7, #0]
 801e46e:	71fb      	strb	r3, [r7, #7]
 801e470:	4613      	mov	r3, r2
 801e472:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e474:	f3ef 8310 	mrs	r3, PRIMASK
 801e478:	60fb      	str	r3, [r7, #12]
  return(result);
 801e47a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e47c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e47e:	b672      	cpsid	i
}
 801e480:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801e482:	79bb      	ldrb	r3, [r7, #6]
 801e484:	b29b      	uxth	r3, r3
 801e486:	79f9      	ldrb	r1, [r7, #7]
 801e488:	683a      	ldr	r2, [r7, #0]
 801e48a:	4806      	ldr	r0, [pc, #24]	; (801e4a4 <SUBGRF_ReadBuffer+0x40>)
 801e48c:	f7eb fd6c 	bl	8009f68 <HAL_SUBGHZ_ReadBuffer>
 801e490:	697b      	ldr	r3, [r7, #20]
 801e492:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e494:	693b      	ldr	r3, [r7, #16]
 801e496:	f383 8810 	msr	PRIMASK, r3
}
 801e49a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e49c:	bf00      	nop
 801e49e:	3718      	adds	r7, #24
 801e4a0:	46bd      	mov	sp, r7
 801e4a2:	bd80      	pop	{r7, pc}
 801e4a4:	20000250 	.word	0x20000250

0801e4a8 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801e4a8:	b580      	push	{r7, lr}
 801e4aa:	b086      	sub	sp, #24
 801e4ac:	af00      	add	r7, sp, #0
 801e4ae:	4603      	mov	r3, r0
 801e4b0:	6039      	str	r1, [r7, #0]
 801e4b2:	71fb      	strb	r3, [r7, #7]
 801e4b4:	4613      	mov	r3, r2
 801e4b6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e4b8:	f3ef 8310 	mrs	r3, PRIMASK
 801e4bc:	60fb      	str	r3, [r7, #12]
  return(result);
 801e4be:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e4c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e4c2:	b672      	cpsid	i
}
 801e4c4:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801e4c6:	88bb      	ldrh	r3, [r7, #4]
 801e4c8:	79f9      	ldrb	r1, [r7, #7]
 801e4ca:	683a      	ldr	r2, [r7, #0]
 801e4cc:	4806      	ldr	r0, [pc, #24]	; (801e4e8 <SUBGRF_WriteCommand+0x40>)
 801e4ce:	f7eb fc45 	bl	8009d5c <HAL_SUBGHZ_ExecSetCmd>
 801e4d2:	697b      	ldr	r3, [r7, #20]
 801e4d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e4d6:	693b      	ldr	r3, [r7, #16]
 801e4d8:	f383 8810 	msr	PRIMASK, r3
}
 801e4dc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e4de:	bf00      	nop
 801e4e0:	3718      	adds	r7, #24
 801e4e2:	46bd      	mov	sp, r7
 801e4e4:	bd80      	pop	{r7, pc}
 801e4e6:	bf00      	nop
 801e4e8:	20000250 	.word	0x20000250

0801e4ec <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801e4ec:	b580      	push	{r7, lr}
 801e4ee:	b086      	sub	sp, #24
 801e4f0:	af00      	add	r7, sp, #0
 801e4f2:	4603      	mov	r3, r0
 801e4f4:	6039      	str	r1, [r7, #0]
 801e4f6:	71fb      	strb	r3, [r7, #7]
 801e4f8:	4613      	mov	r3, r2
 801e4fa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e4fc:	f3ef 8310 	mrs	r3, PRIMASK
 801e500:	60fb      	str	r3, [r7, #12]
  return(result);
 801e502:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e504:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e506:	b672      	cpsid	i
}
 801e508:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801e50a:	88bb      	ldrh	r3, [r7, #4]
 801e50c:	79f9      	ldrb	r1, [r7, #7]
 801e50e:	683a      	ldr	r2, [r7, #0]
 801e510:	4806      	ldr	r0, [pc, #24]	; (801e52c <SUBGRF_ReadCommand+0x40>)
 801e512:	f7eb fc82 	bl	8009e1a <HAL_SUBGHZ_ExecGetCmd>
 801e516:	697b      	ldr	r3, [r7, #20]
 801e518:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e51a:	693b      	ldr	r3, [r7, #16]
 801e51c:	f383 8810 	msr	PRIMASK, r3
}
 801e520:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e522:	bf00      	nop
 801e524:	3718      	adds	r7, #24
 801e526:	46bd      	mov	sp, r7
 801e528:	bd80      	pop	{r7, pc}
 801e52a:	bf00      	nop
 801e52c:	20000250 	.word	0x20000250

0801e530 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801e530:	b580      	push	{r7, lr}
 801e532:	b084      	sub	sp, #16
 801e534:	af00      	add	r7, sp, #0
 801e536:	4603      	mov	r3, r0
 801e538:	460a      	mov	r2, r1
 801e53a:	71fb      	strb	r3, [r7, #7]
 801e53c:	4613      	mov	r3, r2
 801e53e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801e540:	2301      	movs	r3, #1
 801e542:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801e544:	79bb      	ldrb	r3, [r7, #6]
 801e546:	2b01      	cmp	r3, #1
 801e548:	d10d      	bne.n	801e566 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801e54a:	79fb      	ldrb	r3, [r7, #7]
 801e54c:	2b01      	cmp	r3, #1
 801e54e:	d104      	bne.n	801e55a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801e550:	2302      	movs	r3, #2
 801e552:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801e554:	2004      	movs	r0, #4
 801e556:	f000 f8ef 	bl	801e738 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801e55a:	79fb      	ldrb	r3, [r7, #7]
 801e55c:	2b02      	cmp	r3, #2
 801e55e:	d107      	bne.n	801e570 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801e560:	2303      	movs	r3, #3
 801e562:	73fb      	strb	r3, [r7, #15]
 801e564:	e004      	b.n	801e570 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801e566:	79bb      	ldrb	r3, [r7, #6]
 801e568:	2b00      	cmp	r3, #0
 801e56a:	d101      	bne.n	801e570 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801e56c:	2301      	movs	r3, #1
 801e56e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801e570:	7bfb      	ldrb	r3, [r7, #15]
 801e572:	4618      	mov	r0, r3
 801e574:	f7ee ff47 	bl	800d406 <RBI_ConfigRFSwitch>
}
 801e578:	bf00      	nop
 801e57a:	3710      	adds	r7, #16
 801e57c:	46bd      	mov	sp, r7
 801e57e:	bd80      	pop	{r7, pc}

0801e580 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801e580:	b580      	push	{r7, lr}
 801e582:	b084      	sub	sp, #16
 801e584:	af00      	add	r7, sp, #0
 801e586:	4603      	mov	r3, r0
 801e588:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801e58a:	2301      	movs	r3, #1
 801e58c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801e58e:	f7ee ff48 	bl	800d422 <RBI_GetTxConfig>
 801e592:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801e594:	68bb      	ldr	r3, [r7, #8]
 801e596:	2b02      	cmp	r3, #2
 801e598:	d016      	beq.n	801e5c8 <SUBGRF_SetRfTxPower+0x48>
 801e59a:	68bb      	ldr	r3, [r7, #8]
 801e59c:	2b02      	cmp	r3, #2
 801e59e:	dc16      	bgt.n	801e5ce <SUBGRF_SetRfTxPower+0x4e>
 801e5a0:	68bb      	ldr	r3, [r7, #8]
 801e5a2:	2b00      	cmp	r3, #0
 801e5a4:	d003      	beq.n	801e5ae <SUBGRF_SetRfTxPower+0x2e>
 801e5a6:	68bb      	ldr	r3, [r7, #8]
 801e5a8:	2b01      	cmp	r3, #1
 801e5aa:	d00a      	beq.n	801e5c2 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801e5ac:	e00f      	b.n	801e5ce <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801e5ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e5b2:	2b0f      	cmp	r3, #15
 801e5b4:	dd02      	ble.n	801e5bc <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801e5b6:	2302      	movs	r3, #2
 801e5b8:	73fb      	strb	r3, [r7, #15]
            break;
 801e5ba:	e009      	b.n	801e5d0 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801e5bc:	2301      	movs	r3, #1
 801e5be:	73fb      	strb	r3, [r7, #15]
            break;
 801e5c0:	e006      	b.n	801e5d0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801e5c2:	2301      	movs	r3, #1
 801e5c4:	73fb      	strb	r3, [r7, #15]
            break;
 801e5c6:	e003      	b.n	801e5d0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801e5c8:	2302      	movs	r3, #2
 801e5ca:	73fb      	strb	r3, [r7, #15]
            break;
 801e5cc:	e000      	b.n	801e5d0 <SUBGRF_SetRfTxPower+0x50>
            break;
 801e5ce:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801e5d0:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801e5d4:	7bfb      	ldrb	r3, [r7, #15]
 801e5d6:	2202      	movs	r2, #2
 801e5d8:	4618      	mov	r0, r3
 801e5da:	f7ff fbcd 	bl	801dd78 <SUBGRF_SetTxParams>

    return paSelect;
 801e5de:	7bfb      	ldrb	r3, [r7, #15]
}
 801e5e0:	4618      	mov	r0, r3
 801e5e2:	3710      	adds	r7, #16
 801e5e4:	46bd      	mov	sp, r7
 801e5e6:	bd80      	pop	{r7, pc}

0801e5e8 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801e5e8:	b480      	push	{r7}
 801e5ea:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801e5ec:	2301      	movs	r3, #1
}
 801e5ee:	4618      	mov	r0, r3
 801e5f0:	46bd      	mov	sp, r7
 801e5f2:	bc80      	pop	{r7}
 801e5f4:	4770      	bx	lr
	...

0801e5f8 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e5f8:	b580      	push	{r7, lr}
 801e5fa:	b082      	sub	sp, #8
 801e5fc:	af00      	add	r7, sp, #0
 801e5fe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801e600:	4b03      	ldr	r3, [pc, #12]	; (801e610 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801e602:	681b      	ldr	r3, [r3, #0]
 801e604:	2001      	movs	r0, #1
 801e606:	4798      	blx	r3
}
 801e608:	bf00      	nop
 801e60a:	3708      	adds	r7, #8
 801e60c:	46bd      	mov	sp, r7
 801e60e:	bd80      	pop	{r7, pc}
 801e610:	20001c14 	.word	0x20001c14

0801e614 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e614:	b580      	push	{r7, lr}
 801e616:	b082      	sub	sp, #8
 801e618:	af00      	add	r7, sp, #0
 801e61a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801e61c:	4b03      	ldr	r3, [pc, #12]	; (801e62c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801e61e:	681b      	ldr	r3, [r3, #0]
 801e620:	2002      	movs	r0, #2
 801e622:	4798      	blx	r3
}
 801e624:	bf00      	nop
 801e626:	3708      	adds	r7, #8
 801e628:	46bd      	mov	sp, r7
 801e62a:	bd80      	pop	{r7, pc}
 801e62c:	20001c14 	.word	0x20001c14

0801e630 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801e630:	b580      	push	{r7, lr}
 801e632:	b082      	sub	sp, #8
 801e634:	af00      	add	r7, sp, #0
 801e636:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801e638:	4b03      	ldr	r3, [pc, #12]	; (801e648 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801e63a:	681b      	ldr	r3, [r3, #0]
 801e63c:	2040      	movs	r0, #64	; 0x40
 801e63e:	4798      	blx	r3
}
 801e640:	bf00      	nop
 801e642:	3708      	adds	r7, #8
 801e644:	46bd      	mov	sp, r7
 801e646:	bd80      	pop	{r7, pc}
 801e648:	20001c14 	.word	0x20001c14

0801e64c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801e64c:	b580      	push	{r7, lr}
 801e64e:	b082      	sub	sp, #8
 801e650:	af00      	add	r7, sp, #0
 801e652:	6078      	str	r0, [r7, #4]
 801e654:	460b      	mov	r3, r1
 801e656:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801e658:	78fb      	ldrb	r3, [r7, #3]
 801e65a:	2b00      	cmp	r3, #0
 801e65c:	d002      	beq.n	801e664 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801e65e:	2b01      	cmp	r3, #1
 801e660:	d005      	beq.n	801e66e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801e662:	e00a      	b.n	801e67a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801e664:	4b07      	ldr	r3, [pc, #28]	; (801e684 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801e666:	681b      	ldr	r3, [r3, #0]
 801e668:	2080      	movs	r0, #128	; 0x80
 801e66a:	4798      	blx	r3
            break;
 801e66c:	e005      	b.n	801e67a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801e66e:	4b05      	ldr	r3, [pc, #20]	; (801e684 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801e670:	681b      	ldr	r3, [r3, #0]
 801e672:	f44f 7080 	mov.w	r0, #256	; 0x100
 801e676:	4798      	blx	r3
            break;
 801e678:	bf00      	nop
    }
}
 801e67a:	bf00      	nop
 801e67c:	3708      	adds	r7, #8
 801e67e:	46bd      	mov	sp, r7
 801e680:	bd80      	pop	{r7, pc}
 801e682:	bf00      	nop
 801e684:	20001c14 	.word	0x20001c14

0801e688 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e688:	b580      	push	{r7, lr}
 801e68a:	b082      	sub	sp, #8
 801e68c:	af00      	add	r7, sp, #0
 801e68e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801e690:	4b04      	ldr	r3, [pc, #16]	; (801e6a4 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801e692:	681b      	ldr	r3, [r3, #0]
 801e694:	f44f 7000 	mov.w	r0, #512	; 0x200
 801e698:	4798      	blx	r3
}
 801e69a:	bf00      	nop
 801e69c:	3708      	adds	r7, #8
 801e69e:	46bd      	mov	sp, r7
 801e6a0:	bd80      	pop	{r7, pc}
 801e6a2:	bf00      	nop
 801e6a4:	20001c14 	.word	0x20001c14

0801e6a8 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e6a8:	b580      	push	{r7, lr}
 801e6aa:	b082      	sub	sp, #8
 801e6ac:	af00      	add	r7, sp, #0
 801e6ae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801e6b0:	4b03      	ldr	r3, [pc, #12]	; (801e6c0 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801e6b2:	681b      	ldr	r3, [r3, #0]
 801e6b4:	2020      	movs	r0, #32
 801e6b6:	4798      	blx	r3
}
 801e6b8:	bf00      	nop
 801e6ba:	3708      	adds	r7, #8
 801e6bc:	46bd      	mov	sp, r7
 801e6be:	bd80      	pop	{r7, pc}
 801e6c0:	20001c14 	.word	0x20001c14

0801e6c4 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e6c4:	b580      	push	{r7, lr}
 801e6c6:	b082      	sub	sp, #8
 801e6c8:	af00      	add	r7, sp, #0
 801e6ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801e6cc:	4b03      	ldr	r3, [pc, #12]	; (801e6dc <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801e6ce:	681b      	ldr	r3, [r3, #0]
 801e6d0:	2004      	movs	r0, #4
 801e6d2:	4798      	blx	r3
}
 801e6d4:	bf00      	nop
 801e6d6:	3708      	adds	r7, #8
 801e6d8:	46bd      	mov	sp, r7
 801e6da:	bd80      	pop	{r7, pc}
 801e6dc:	20001c14 	.word	0x20001c14

0801e6e0 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e6e0:	b580      	push	{r7, lr}
 801e6e2:	b082      	sub	sp, #8
 801e6e4:	af00      	add	r7, sp, #0
 801e6e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801e6e8:	4b03      	ldr	r3, [pc, #12]	; (801e6f8 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801e6ea:	681b      	ldr	r3, [r3, #0]
 801e6ec:	2008      	movs	r0, #8
 801e6ee:	4798      	blx	r3
}
 801e6f0:	bf00      	nop
 801e6f2:	3708      	adds	r7, #8
 801e6f4:	46bd      	mov	sp, r7
 801e6f6:	bd80      	pop	{r7, pc}
 801e6f8:	20001c14 	.word	0x20001c14

0801e6fc <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e6fc:	b580      	push	{r7, lr}
 801e6fe:	b082      	sub	sp, #8
 801e700:	af00      	add	r7, sp, #0
 801e702:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801e704:	4b03      	ldr	r3, [pc, #12]	; (801e714 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801e706:	681b      	ldr	r3, [r3, #0]
 801e708:	2010      	movs	r0, #16
 801e70a:	4798      	blx	r3
}
 801e70c:	bf00      	nop
 801e70e:	3708      	adds	r7, #8
 801e710:	46bd      	mov	sp, r7
 801e712:	bd80      	pop	{r7, pc}
 801e714:	20001c14 	.word	0x20001c14

0801e718 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e718:	b580      	push	{r7, lr}
 801e71a:	b082      	sub	sp, #8
 801e71c:	af00      	add	r7, sp, #0
 801e71e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801e720:	4b04      	ldr	r3, [pc, #16]	; (801e734 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801e722:	681b      	ldr	r3, [r3, #0]
 801e724:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801e728:	4798      	blx	r3
}
 801e72a:	bf00      	nop
 801e72c:	3708      	adds	r7, #8
 801e72e:	46bd      	mov	sp, r7
 801e730:	bd80      	pop	{r7, pc}
 801e732:	bf00      	nop
 801e734:	20001c14 	.word	0x20001c14

0801e738 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801e738:	b580      	push	{r7, lr}
 801e73a:	b084      	sub	sp, #16
 801e73c:	af00      	add	r7, sp, #0
 801e73e:	4603      	mov	r3, r0
 801e740:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801e742:	f7ee fe7c 	bl	800d43e <RBI_IsDCDC>
 801e746:	4603      	mov	r3, r0
 801e748:	2b01      	cmp	r3, #1
 801e74a:	d112      	bne.n	801e772 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801e74c:	f640 1023 	movw	r0, #2339	; 0x923
 801e750:	f7ff fe0e 	bl	801e370 <SUBGRF_ReadRegister>
 801e754:	4603      	mov	r3, r0
 801e756:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801e758:	7bfb      	ldrb	r3, [r7, #15]
 801e75a:	f023 0306 	bic.w	r3, r3, #6
 801e75e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801e760:	7bfa      	ldrb	r2, [r7, #15]
 801e762:	79fb      	ldrb	r3, [r7, #7]
 801e764:	4313      	orrs	r3, r2
 801e766:	b2db      	uxtb	r3, r3
 801e768:	4619      	mov	r1, r3
 801e76a:	f640 1023 	movw	r0, #2339	; 0x923
 801e76e:	f7ff fdeb 	bl	801e348 <SUBGRF_WriteRegister>
  }
}
 801e772:	bf00      	nop
 801e774:	3710      	adds	r7, #16
 801e776:	46bd      	mov	sp, r7
 801e778:	bd80      	pop	{r7, pc}
	...

0801e77c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801e77c:	b480      	push	{r7}
 801e77e:	b085      	sub	sp, #20
 801e780:	af00      	add	r7, sp, #0
 801e782:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801e784:	687b      	ldr	r3, [r7, #4]
 801e786:	2b00      	cmp	r3, #0
 801e788:	d101      	bne.n	801e78e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801e78a:	231f      	movs	r3, #31
 801e78c:	e016      	b.n	801e7bc <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801e78e:	2300      	movs	r3, #0
 801e790:	73fb      	strb	r3, [r7, #15]
 801e792:	e00f      	b.n	801e7b4 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801e794:	7bfb      	ldrb	r3, [r7, #15]
 801e796:	4a0c      	ldr	r2, [pc, #48]	; (801e7c8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801e798:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801e79c:	687a      	ldr	r2, [r7, #4]
 801e79e:	429a      	cmp	r2, r3
 801e7a0:	d205      	bcs.n	801e7ae <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801e7a2:	7bfb      	ldrb	r3, [r7, #15]
 801e7a4:	4a08      	ldr	r2, [pc, #32]	; (801e7c8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801e7a6:	00db      	lsls	r3, r3, #3
 801e7a8:	4413      	add	r3, r2
 801e7aa:	791b      	ldrb	r3, [r3, #4]
 801e7ac:	e006      	b.n	801e7bc <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801e7ae:	7bfb      	ldrb	r3, [r7, #15]
 801e7b0:	3301      	adds	r3, #1
 801e7b2:	73fb      	strb	r3, [r7, #15]
 801e7b4:	7bfb      	ldrb	r3, [r7, #15]
 801e7b6:	2b15      	cmp	r3, #21
 801e7b8:	d9ec      	bls.n	801e794 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801e7ba:	e7fe      	b.n	801e7ba <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801e7bc:	4618      	mov	r0, r3
 801e7be:	3714      	adds	r7, #20
 801e7c0:	46bd      	mov	sp, r7
 801e7c2:	bc80      	pop	{r7}
 801e7c4:	4770      	bx	lr
 801e7c6:	bf00      	nop
 801e7c8:	08020ebc 	.word	0x08020ebc

0801e7cc <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801e7cc:	b580      	push	{r7, lr}
 801e7ce:	b08a      	sub	sp, #40	; 0x28
 801e7d0:	af00      	add	r7, sp, #0
 801e7d2:	6078      	str	r0, [r7, #4]
 801e7d4:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801e7d6:	4b35      	ldr	r3, [pc, #212]	; (801e8ac <SUBGRF_GetCFO+0xe0>)
 801e7d8:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801e7da:	f640 0007 	movw	r0, #2055	; 0x807
 801e7de:	f7ff fdc7 	bl	801e370 <SUBGRF_ReadRegister>
 801e7e2:	4603      	mov	r3, r0
 801e7e4:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801e7e6:	7ffb      	ldrb	r3, [r7, #31]
 801e7e8:	08db      	lsrs	r3, r3, #3
 801e7ea:	b2db      	uxtb	r3, r3
 801e7ec:	f003 0303 	and.w	r3, r3, #3
 801e7f0:	3328      	adds	r3, #40	; 0x28
 801e7f2:	443b      	add	r3, r7
 801e7f4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801e7f8:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801e7fa:	7ffb      	ldrb	r3, [r7, #31]
 801e7fc:	f003 0307 	and.w	r3, r3, #7
 801e800:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801e802:	7fba      	ldrb	r2, [r7, #30]
 801e804:	7f7b      	ldrb	r3, [r7, #29]
 801e806:	3301      	adds	r3, #1
 801e808:	fa02 f303 	lsl.w	r3, r2, r3
 801e80c:	461a      	mov	r2, r3
 801e80e:	4b28      	ldr	r3, [pc, #160]	; (801e8b0 <SUBGRF_GetCFO+0xe4>)
 801e810:	fbb3 f3f2 	udiv	r3, r3, r2
 801e814:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801e816:	69ba      	ldr	r2, [r7, #24]
 801e818:	687b      	ldr	r3, [r7, #4]
 801e81a:	fbb2 f3f3 	udiv	r3, r2, r3
 801e81e:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801e820:	2301      	movs	r3, #1
 801e822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801e826:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e82a:	697a      	ldr	r2, [r7, #20]
 801e82c:	fb02 f303 	mul.w	r3, r2, r3
 801e830:	2b07      	cmp	r3, #7
 801e832:	d802      	bhi.n	801e83a <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801e834:	2302      	movs	r3, #2
 801e836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801e83a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e83e:	697a      	ldr	r2, [r7, #20]
 801e840:	fb02 f303 	mul.w	r3, r2, r3
 801e844:	2b03      	cmp	r3, #3
 801e846:	d802      	bhi.n	801e84e <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801e848:	2304      	movs	r3, #4
 801e84a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801e84e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801e852:	69bb      	ldr	r3, [r7, #24]
 801e854:	fb02 f303 	mul.w	r3, r2, r3
 801e858:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801e85a:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801e85e:	f7ff fd87 	bl	801e370 <SUBGRF_ReadRegister>
 801e862:	4603      	mov	r3, r0
 801e864:	021b      	lsls	r3, r3, #8
 801e866:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801e86a:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801e86c:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801e870:	f7ff fd7e 	bl	801e370 <SUBGRF_ReadRegister>
 801e874:	4603      	mov	r3, r0
 801e876:	461a      	mov	r2, r3
 801e878:	6a3b      	ldr	r3, [r7, #32]
 801e87a:	4313      	orrs	r3, r2
 801e87c:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801e87e:	6a3b      	ldr	r3, [r7, #32]
 801e880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e884:	2b00      	cmp	r3, #0
 801e886:	d005      	beq.n	801e894 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801e888:	6a3b      	ldr	r3, [r7, #32]
 801e88a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801e88e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801e892:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801e894:	693b      	ldr	r3, [r7, #16]
 801e896:	095b      	lsrs	r3, r3, #5
 801e898:	6a3a      	ldr	r2, [r7, #32]
 801e89a:	fb02 f303 	mul.w	r3, r2, r3
 801e89e:	11da      	asrs	r2, r3, #7
 801e8a0:	683b      	ldr	r3, [r7, #0]
 801e8a2:	601a      	str	r2, [r3, #0]
}
 801e8a4:	bf00      	nop
 801e8a6:	3728      	adds	r7, #40	; 0x28
 801e8a8:	46bd      	mov	sp, r7
 801e8aa:	bd80      	pop	{r7, pc}
 801e8ac:	0c0a0804 	.word	0x0c0a0804
 801e8b0:	01e84800 	.word	0x01e84800

0801e8b4 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801e8b4:	b480      	push	{r7}
 801e8b6:	b087      	sub	sp, #28
 801e8b8:	af00      	add	r7, sp, #0
 801e8ba:	4603      	mov	r3, r0
 801e8bc:	60b9      	str	r1, [r7, #8]
 801e8be:	607a      	str	r2, [r7, #4]
 801e8c0:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801e8c2:	2300      	movs	r3, #0
 801e8c4:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801e8c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e8ca:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801e8cc:	697b      	ldr	r3, [r7, #20]
}
 801e8ce:	4618      	mov	r0, r3
 801e8d0:	371c      	adds	r7, #28
 801e8d2:	46bd      	mov	sp, r7
 801e8d4:	bc80      	pop	{r7}
 801e8d6:	4770      	bx	lr

0801e8d8 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801e8d8:	b480      	push	{r7}
 801e8da:	b087      	sub	sp, #28
 801e8dc:	af00      	add	r7, sp, #0
 801e8de:	4603      	mov	r3, r0
 801e8e0:	60b9      	str	r1, [r7, #8]
 801e8e2:	607a      	str	r2, [r7, #4]
 801e8e4:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801e8e6:	2300      	movs	r3, #0
 801e8e8:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801e8ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e8ee:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801e8f0:	697b      	ldr	r3, [r7, #20]
}
 801e8f2:	4618      	mov	r0, r3
 801e8f4:	371c      	adds	r7, #28
 801e8f6:	46bd      	mov	sp, r7
 801e8f8:	bc80      	pop	{r7}
 801e8fa:	4770      	bx	lr

0801e8fc <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801e8fc:	b480      	push	{r7}
 801e8fe:	b085      	sub	sp, #20
 801e900:	af00      	add	r7, sp, #0
 801e902:	60f8      	str	r0, [r7, #12]
 801e904:	60b9      	str	r1, [r7, #8]
 801e906:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801e908:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 801e90c:	4618      	mov	r0, r3
 801e90e:	3714      	adds	r7, #20
 801e910:	46bd      	mov	sp, r7
 801e912:	bc80      	pop	{r7}
 801e914:	4770      	bx	lr

0801e916 <RFW_DeInit>:

void RFW_DeInit( void )
{
 801e916:	b480      	push	{r7}
 801e918:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801e91a:	bf00      	nop
 801e91c:	46bd      	mov	sp, r7
 801e91e:	bc80      	pop	{r7}
 801e920:	4770      	bx	lr

0801e922 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801e922:	b480      	push	{r7}
 801e924:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801e926:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801e928:	4618      	mov	r0, r3
 801e92a:	46bd      	mov	sp, r7
 801e92c:	bc80      	pop	{r7}
 801e92e:	4770      	bx	lr

0801e930 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801e930:	b480      	push	{r7}
 801e932:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801e934:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801e936:	4618      	mov	r0, r3
 801e938:	46bd      	mov	sp, r7
 801e93a:	bc80      	pop	{r7}
 801e93c:	4770      	bx	lr

0801e93e <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801e93e:	b480      	push	{r7}
 801e940:	b083      	sub	sp, #12
 801e942:	af00      	add	r7, sp, #0
 801e944:	4603      	mov	r3, r0
 801e946:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801e948:	bf00      	nop
 801e94a:	370c      	adds	r7, #12
 801e94c:	46bd      	mov	sp, r7
 801e94e:	bc80      	pop	{r7}
 801e950:	4770      	bx	lr

0801e952 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801e952:	b480      	push	{r7}
 801e954:	b087      	sub	sp, #28
 801e956:	af00      	add	r7, sp, #0
 801e958:	60f8      	str	r0, [r7, #12]
 801e95a:	460b      	mov	r3, r1
 801e95c:	607a      	str	r2, [r7, #4]
 801e95e:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801e960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e964:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801e966:	697b      	ldr	r3, [r7, #20]
}
 801e968:	4618      	mov	r0, r3
 801e96a:	371c      	adds	r7, #28
 801e96c:	46bd      	mov	sp, r7
 801e96e:	bc80      	pop	{r7}
 801e970:	4770      	bx	lr

0801e972 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801e972:	b480      	push	{r7}
 801e974:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801e976:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 801e97a:	4618      	mov	r0, r3
 801e97c:	46bd      	mov	sp, r7
 801e97e:	bc80      	pop	{r7}
 801e980:	4770      	bx	lr

0801e982 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801e982:	b480      	push	{r7}
 801e984:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801e986:	bf00      	nop
 801e988:	46bd      	mov	sp, r7
 801e98a:	bc80      	pop	{r7}
 801e98c:	4770      	bx	lr

0801e98e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801e98e:	b480      	push	{r7}
 801e990:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801e992:	bf00      	nop
 801e994:	46bd      	mov	sp, r7
 801e996:	bc80      	pop	{r7}
 801e998:	4770      	bx	lr

0801e99a <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801e99a:	b480      	push	{r7}
 801e99c:	b083      	sub	sp, #12
 801e99e:	af00      	add	r7, sp, #0
 801e9a0:	4603      	mov	r3, r0
 801e9a2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801e9a4:	bf00      	nop
 801e9a6:	370c      	adds	r7, #12
 801e9a8:	46bd      	mov	sp, r7
 801e9aa:	bc80      	pop	{r7}
 801e9ac:	4770      	bx	lr
	...

0801e9b0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801e9b0:	b480      	push	{r7}
 801e9b2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801e9b4:	4b04      	ldr	r3, [pc, #16]	; (801e9c8 <UTIL_LPM_Init+0x18>)
 801e9b6:	2200      	movs	r2, #0
 801e9b8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801e9ba:	4b04      	ldr	r3, [pc, #16]	; (801e9cc <UTIL_LPM_Init+0x1c>)
 801e9bc:	2200      	movs	r2, #0
 801e9be:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801e9c0:	bf00      	nop
 801e9c2:	46bd      	mov	sp, r7
 801e9c4:	bc80      	pop	{r7}
 801e9c6:	4770      	bx	lr
 801e9c8:	20001c18 	.word	0x20001c18
 801e9cc:	20001c1c 	.word	0x20001c1c

0801e9d0 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801e9d0:	b480      	push	{r7}
 801e9d2:	b087      	sub	sp, #28
 801e9d4:	af00      	add	r7, sp, #0
 801e9d6:	6078      	str	r0, [r7, #4]
 801e9d8:	460b      	mov	r3, r1
 801e9da:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e9dc:	f3ef 8310 	mrs	r3, PRIMASK
 801e9e0:	613b      	str	r3, [r7, #16]
  return(result);
 801e9e2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801e9e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e9e6:	b672      	cpsid	i
}
 801e9e8:	bf00      	nop
  
  switch( state )
 801e9ea:	78fb      	ldrb	r3, [r7, #3]
 801e9ec:	2b00      	cmp	r3, #0
 801e9ee:	d008      	beq.n	801ea02 <UTIL_LPM_SetStopMode+0x32>
 801e9f0:	2b01      	cmp	r3, #1
 801e9f2:	d10e      	bne.n	801ea12 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801e9f4:	4b0d      	ldr	r3, [pc, #52]	; (801ea2c <UTIL_LPM_SetStopMode+0x5c>)
 801e9f6:	681a      	ldr	r2, [r3, #0]
 801e9f8:	687b      	ldr	r3, [r7, #4]
 801e9fa:	4313      	orrs	r3, r2
 801e9fc:	4a0b      	ldr	r2, [pc, #44]	; (801ea2c <UTIL_LPM_SetStopMode+0x5c>)
 801e9fe:	6013      	str	r3, [r2, #0]
      break;
 801ea00:	e008      	b.n	801ea14 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801ea02:	687b      	ldr	r3, [r7, #4]
 801ea04:	43da      	mvns	r2, r3
 801ea06:	4b09      	ldr	r3, [pc, #36]	; (801ea2c <UTIL_LPM_SetStopMode+0x5c>)
 801ea08:	681b      	ldr	r3, [r3, #0]
 801ea0a:	4013      	ands	r3, r2
 801ea0c:	4a07      	ldr	r2, [pc, #28]	; (801ea2c <UTIL_LPM_SetStopMode+0x5c>)
 801ea0e:	6013      	str	r3, [r2, #0]
      break;
 801ea10:	e000      	b.n	801ea14 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801ea12:	bf00      	nop
 801ea14:	697b      	ldr	r3, [r7, #20]
 801ea16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea18:	68fb      	ldr	r3, [r7, #12]
 801ea1a:	f383 8810 	msr	PRIMASK, r3
}
 801ea1e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801ea20:	bf00      	nop
 801ea22:	371c      	adds	r7, #28
 801ea24:	46bd      	mov	sp, r7
 801ea26:	bc80      	pop	{r7}
 801ea28:	4770      	bx	lr
 801ea2a:	bf00      	nop
 801ea2c:	20001c18 	.word	0x20001c18

0801ea30 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ea30:	b480      	push	{r7}
 801ea32:	b087      	sub	sp, #28
 801ea34:	af00      	add	r7, sp, #0
 801ea36:	6078      	str	r0, [r7, #4]
 801ea38:	460b      	mov	r3, r1
 801ea3a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ea3c:	f3ef 8310 	mrs	r3, PRIMASK
 801ea40:	613b      	str	r3, [r7, #16]
  return(result);
 801ea42:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801ea44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ea46:	b672      	cpsid	i
}
 801ea48:	bf00      	nop
  
  switch(state)
 801ea4a:	78fb      	ldrb	r3, [r7, #3]
 801ea4c:	2b00      	cmp	r3, #0
 801ea4e:	d008      	beq.n	801ea62 <UTIL_LPM_SetOffMode+0x32>
 801ea50:	2b01      	cmp	r3, #1
 801ea52:	d10e      	bne.n	801ea72 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801ea54:	4b0d      	ldr	r3, [pc, #52]	; (801ea8c <UTIL_LPM_SetOffMode+0x5c>)
 801ea56:	681a      	ldr	r2, [r3, #0]
 801ea58:	687b      	ldr	r3, [r7, #4]
 801ea5a:	4313      	orrs	r3, r2
 801ea5c:	4a0b      	ldr	r2, [pc, #44]	; (801ea8c <UTIL_LPM_SetOffMode+0x5c>)
 801ea5e:	6013      	str	r3, [r2, #0]
      break;
 801ea60:	e008      	b.n	801ea74 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801ea62:	687b      	ldr	r3, [r7, #4]
 801ea64:	43da      	mvns	r2, r3
 801ea66:	4b09      	ldr	r3, [pc, #36]	; (801ea8c <UTIL_LPM_SetOffMode+0x5c>)
 801ea68:	681b      	ldr	r3, [r3, #0]
 801ea6a:	4013      	ands	r3, r2
 801ea6c:	4a07      	ldr	r2, [pc, #28]	; (801ea8c <UTIL_LPM_SetOffMode+0x5c>)
 801ea6e:	6013      	str	r3, [r2, #0]
      break;
 801ea70:	e000      	b.n	801ea74 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801ea72:	bf00      	nop
 801ea74:	697b      	ldr	r3, [r7, #20]
 801ea76:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea78:	68fb      	ldr	r3, [r7, #12]
 801ea7a:	f383 8810 	msr	PRIMASK, r3
}
 801ea7e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801ea80:	bf00      	nop
 801ea82:	371c      	adds	r7, #28
 801ea84:	46bd      	mov	sp, r7
 801ea86:	bc80      	pop	{r7}
 801ea88:	4770      	bx	lr
 801ea8a:	bf00      	nop
 801ea8c:	20001c1c 	.word	0x20001c1c

0801ea90 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801ea90:	b480      	push	{r7}
 801ea92:	b087      	sub	sp, #28
 801ea94:	af00      	add	r7, sp, #0
 801ea96:	60f8      	str	r0, [r7, #12]
 801ea98:	60b9      	str	r1, [r7, #8]
 801ea9a:	4613      	mov	r3, r2
 801ea9c:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801ea9e:	68fb      	ldr	r3, [r7, #12]
 801eaa0:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801eaa2:	68bb      	ldr	r3, [r7, #8]
 801eaa4:	613b      	str	r3, [r7, #16]

  while( size-- )
 801eaa6:	e007      	b.n	801eab8 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801eaa8:	693a      	ldr	r2, [r7, #16]
 801eaaa:	1c53      	adds	r3, r2, #1
 801eaac:	613b      	str	r3, [r7, #16]
 801eaae:	697b      	ldr	r3, [r7, #20]
 801eab0:	1c59      	adds	r1, r3, #1
 801eab2:	6179      	str	r1, [r7, #20]
 801eab4:	7812      	ldrb	r2, [r2, #0]
 801eab6:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801eab8:	88fb      	ldrh	r3, [r7, #6]
 801eaba:	1e5a      	subs	r2, r3, #1
 801eabc:	80fa      	strh	r2, [r7, #6]
 801eabe:	2b00      	cmp	r3, #0
 801eac0:	d1f2      	bne.n	801eaa8 <UTIL_MEM_cpy_8+0x18>
    }
}
 801eac2:	bf00      	nop
 801eac4:	bf00      	nop
 801eac6:	371c      	adds	r7, #28
 801eac8:	46bd      	mov	sp, r7
 801eaca:	bc80      	pop	{r7}
 801eacc:	4770      	bx	lr

0801eace <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801eace:	b480      	push	{r7}
 801ead0:	b085      	sub	sp, #20
 801ead2:	af00      	add	r7, sp, #0
 801ead4:	6078      	str	r0, [r7, #4]
 801ead6:	460b      	mov	r3, r1
 801ead8:	70fb      	strb	r3, [r7, #3]
 801eada:	4613      	mov	r3, r2
 801eadc:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801eade:	687b      	ldr	r3, [r7, #4]
 801eae0:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801eae2:	e004      	b.n	801eaee <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801eae4:	68fb      	ldr	r3, [r7, #12]
 801eae6:	1c5a      	adds	r2, r3, #1
 801eae8:	60fa      	str	r2, [r7, #12]
 801eaea:	78fa      	ldrb	r2, [r7, #3]
 801eaec:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801eaee:	883b      	ldrh	r3, [r7, #0]
 801eaf0:	1e5a      	subs	r2, r3, #1
 801eaf2:	803a      	strh	r2, [r7, #0]
 801eaf4:	2b00      	cmp	r3, #0
 801eaf6:	d1f5      	bne.n	801eae4 <UTIL_MEM_set_8+0x16>
  }
}
 801eaf8:	bf00      	nop
 801eafa:	bf00      	nop
 801eafc:	3714      	adds	r7, #20
 801eafe:	46bd      	mov	sp, r7
 801eb00:	bc80      	pop	{r7}
 801eb02:	4770      	bx	lr

0801eb04 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801eb04:	b082      	sub	sp, #8
 801eb06:	b480      	push	{r7}
 801eb08:	b087      	sub	sp, #28
 801eb0a:	af00      	add	r7, sp, #0
 801eb0c:	60f8      	str	r0, [r7, #12]
 801eb0e:	1d38      	adds	r0, r7, #4
 801eb10:	e880 0006 	stmia.w	r0, {r1, r2}
 801eb14:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801eb16:	2300      	movs	r3, #0
 801eb18:	613b      	str	r3, [r7, #16]
 801eb1a:	2300      	movs	r3, #0
 801eb1c:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801eb1e:	687a      	ldr	r2, [r7, #4]
 801eb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb22:	4413      	add	r3, r2
 801eb24:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801eb26:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801eb2a:	b29a      	uxth	r2, r3
 801eb2c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801eb30:	b29b      	uxth	r3, r3
 801eb32:	4413      	add	r3, r2
 801eb34:	b29b      	uxth	r3, r3
 801eb36:	b21b      	sxth	r3, r3
 801eb38:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801eb3a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801eb3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801eb42:	db0a      	blt.n	801eb5a <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801eb44:	693b      	ldr	r3, [r7, #16]
 801eb46:	3301      	adds	r3, #1
 801eb48:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801eb4a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801eb4e:	b29b      	uxth	r3, r3
 801eb50:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801eb54:	b29b      	uxth	r3, r3
 801eb56:	b21b      	sxth	r3, r3
 801eb58:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801eb5a:	68fb      	ldr	r3, [r7, #12]
 801eb5c:	461a      	mov	r2, r3
 801eb5e:	f107 0310 	add.w	r3, r7, #16
 801eb62:	e893 0003 	ldmia.w	r3, {r0, r1}
 801eb66:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801eb6a:	68f8      	ldr	r0, [r7, #12]
 801eb6c:	371c      	adds	r7, #28
 801eb6e:	46bd      	mov	sp, r7
 801eb70:	bc80      	pop	{r7}
 801eb72:	b002      	add	sp, #8
 801eb74:	4770      	bx	lr

0801eb76 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801eb76:	b082      	sub	sp, #8
 801eb78:	b480      	push	{r7}
 801eb7a:	b087      	sub	sp, #28
 801eb7c:	af00      	add	r7, sp, #0
 801eb7e:	60f8      	str	r0, [r7, #12]
 801eb80:	1d38      	adds	r0, r7, #4
 801eb82:	e880 0006 	stmia.w	r0, {r1, r2}
 801eb86:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801eb88:	2300      	movs	r3, #0
 801eb8a:	613b      	str	r3, [r7, #16]
 801eb8c:	2300      	movs	r3, #0
 801eb8e:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801eb90:	687a      	ldr	r2, [r7, #4]
 801eb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb94:	1ad3      	subs	r3, r2, r3
 801eb96:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801eb98:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801eb9c:	b29a      	uxth	r2, r3
 801eb9e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801eba2:	b29b      	uxth	r3, r3
 801eba4:	1ad3      	subs	r3, r2, r3
 801eba6:	b29b      	uxth	r3, r3
 801eba8:	b21b      	sxth	r3, r3
 801ebaa:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801ebac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ebb0:	2b00      	cmp	r3, #0
 801ebb2:	da0a      	bge.n	801ebca <SysTimeSub+0x54>
  {
    c.Seconds--;
 801ebb4:	693b      	ldr	r3, [r7, #16]
 801ebb6:	3b01      	subs	r3, #1
 801ebb8:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801ebba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ebbe:	b29b      	uxth	r3, r3
 801ebc0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801ebc4:	b29b      	uxth	r3, r3
 801ebc6:	b21b      	sxth	r3, r3
 801ebc8:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801ebca:	68fb      	ldr	r3, [r7, #12]
 801ebcc:	461a      	mov	r2, r3
 801ebce:	f107 0310 	add.w	r3, r7, #16
 801ebd2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ebd6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ebda:	68f8      	ldr	r0, [r7, #12]
 801ebdc:	371c      	adds	r7, #28
 801ebde:	46bd      	mov	sp, r7
 801ebe0:	bc80      	pop	{r7}
 801ebe2:	b002      	add	sp, #8
 801ebe4:	4770      	bx	lr
	...

0801ebe8 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801ebe8:	b580      	push	{r7, lr}
 801ebea:	b088      	sub	sp, #32
 801ebec:	af02      	add	r7, sp, #8
 801ebee:	463b      	mov	r3, r7
 801ebf0:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801ebf4:	2300      	movs	r3, #0
 801ebf6:	60bb      	str	r3, [r7, #8]
 801ebf8:	2300      	movs	r3, #0
 801ebfa:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ebfc:	4b10      	ldr	r3, [pc, #64]	; (801ec40 <SysTimeSet+0x58>)
 801ebfe:	691b      	ldr	r3, [r3, #16]
 801ec00:	f107 0208 	add.w	r2, r7, #8
 801ec04:	3204      	adds	r2, #4
 801ec06:	4610      	mov	r0, r2
 801ec08:	4798      	blx	r3
 801ec0a:	4603      	mov	r3, r0
 801ec0c:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801ec0e:	f107 0010 	add.w	r0, r7, #16
 801ec12:	68fb      	ldr	r3, [r7, #12]
 801ec14:	9300      	str	r3, [sp, #0]
 801ec16:	68bb      	ldr	r3, [r7, #8]
 801ec18:	463a      	mov	r2, r7
 801ec1a:	ca06      	ldmia	r2, {r1, r2}
 801ec1c:	f7ff ffab 	bl	801eb76 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801ec20:	4b07      	ldr	r3, [pc, #28]	; (801ec40 <SysTimeSet+0x58>)
 801ec22:	681b      	ldr	r3, [r3, #0]
 801ec24:	693a      	ldr	r2, [r7, #16]
 801ec26:	4610      	mov	r0, r2
 801ec28:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801ec2a:	4b05      	ldr	r3, [pc, #20]	; (801ec40 <SysTimeSet+0x58>)
 801ec2c:	689b      	ldr	r3, [r3, #8]
 801ec2e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801ec32:	4610      	mov	r0, r2
 801ec34:	4798      	blx	r3
}
 801ec36:	bf00      	nop
 801ec38:	3718      	adds	r7, #24
 801ec3a:	46bd      	mov	sp, r7
 801ec3c:	bd80      	pop	{r7, pc}
 801ec3e:	bf00      	nop
 801ec40:	08020990 	.word	0x08020990

0801ec44 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801ec44:	b580      	push	{r7, lr}
 801ec46:	b08a      	sub	sp, #40	; 0x28
 801ec48:	af02      	add	r7, sp, #8
 801ec4a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801ec4c:	2300      	movs	r3, #0
 801ec4e:	61bb      	str	r3, [r7, #24]
 801ec50:	2300      	movs	r3, #0
 801ec52:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801ec54:	2300      	movs	r3, #0
 801ec56:	613b      	str	r3, [r7, #16]
 801ec58:	2300      	movs	r3, #0
 801ec5a:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ec5c:	4b14      	ldr	r3, [pc, #80]	; (801ecb0 <SysTimeGet+0x6c>)
 801ec5e:	691b      	ldr	r3, [r3, #16]
 801ec60:	f107 0218 	add.w	r2, r7, #24
 801ec64:	3204      	adds	r2, #4
 801ec66:	4610      	mov	r0, r2
 801ec68:	4798      	blx	r3
 801ec6a:	4603      	mov	r3, r0
 801ec6c:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801ec6e:	4b10      	ldr	r3, [pc, #64]	; (801ecb0 <SysTimeGet+0x6c>)
 801ec70:	68db      	ldr	r3, [r3, #12]
 801ec72:	4798      	blx	r3
 801ec74:	4603      	mov	r3, r0
 801ec76:	b21b      	sxth	r3, r3
 801ec78:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801ec7a:	4b0d      	ldr	r3, [pc, #52]	; (801ecb0 <SysTimeGet+0x6c>)
 801ec7c:	685b      	ldr	r3, [r3, #4]
 801ec7e:	4798      	blx	r3
 801ec80:	4603      	mov	r3, r0
 801ec82:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801ec84:	f107 0010 	add.w	r0, r7, #16
 801ec88:	69fb      	ldr	r3, [r7, #28]
 801ec8a:	9300      	str	r3, [sp, #0]
 801ec8c:	69bb      	ldr	r3, [r7, #24]
 801ec8e:	f107 0208 	add.w	r2, r7, #8
 801ec92:	ca06      	ldmia	r2, {r1, r2}
 801ec94:	f7ff ff36 	bl	801eb04 <SysTimeAdd>

  return sysTime;
 801ec98:	687b      	ldr	r3, [r7, #4]
 801ec9a:	461a      	mov	r2, r3
 801ec9c:	f107 0310 	add.w	r3, r7, #16
 801eca0:	e893 0003 	ldmia.w	r3, {r0, r1}
 801eca4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801eca8:	6878      	ldr	r0, [r7, #4]
 801ecaa:	3720      	adds	r7, #32
 801ecac:	46bd      	mov	sp, r7
 801ecae:	bd80      	pop	{r7, pc}
 801ecb0:	08020990 	.word	0x08020990

0801ecb4 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801ecb4:	b580      	push	{r7, lr}
 801ecb6:	b084      	sub	sp, #16
 801ecb8:	af00      	add	r7, sp, #0
 801ecba:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801ecbc:	2300      	movs	r3, #0
 801ecbe:	60bb      	str	r3, [r7, #8]
 801ecc0:	2300      	movs	r3, #0
 801ecc2:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ecc4:	4b0a      	ldr	r3, [pc, #40]	; (801ecf0 <SysTimeGetMcuTime+0x3c>)
 801ecc6:	691b      	ldr	r3, [r3, #16]
 801ecc8:	f107 0208 	add.w	r2, r7, #8
 801eccc:	3204      	adds	r2, #4
 801ecce:	4610      	mov	r0, r2
 801ecd0:	4798      	blx	r3
 801ecd2:	4603      	mov	r3, r0
 801ecd4:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801ecd6:	687b      	ldr	r3, [r7, #4]
 801ecd8:	461a      	mov	r2, r3
 801ecda:	f107 0308 	add.w	r3, r7, #8
 801ecde:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ece2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ece6:	6878      	ldr	r0, [r7, #4]
 801ece8:	3710      	adds	r7, #16
 801ecea:	46bd      	mov	sp, r7
 801ecec:	bd80      	pop	{r7, pc}
 801ecee:	bf00      	nop
 801ecf0:	08020990 	.word	0x08020990

0801ecf4 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801ecf4:	b580      	push	{r7, lr}
 801ecf6:	b088      	sub	sp, #32
 801ecf8:	af02      	add	r7, sp, #8
 801ecfa:	463b      	mov	r3, r7
 801ecfc:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801ed00:	4b0f      	ldr	r3, [pc, #60]	; (801ed40 <SysTimeToMs+0x4c>)
 801ed02:	68db      	ldr	r3, [r3, #12]
 801ed04:	4798      	blx	r3
 801ed06:	4603      	mov	r3, r0
 801ed08:	b21b      	sxth	r3, r3
 801ed0a:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801ed0c:	4b0c      	ldr	r3, [pc, #48]	; (801ed40 <SysTimeToMs+0x4c>)
 801ed0e:	685b      	ldr	r3, [r3, #4]
 801ed10:	4798      	blx	r3
 801ed12:	4603      	mov	r3, r0
 801ed14:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801ed16:	f107 0008 	add.w	r0, r7, #8
 801ed1a:	697b      	ldr	r3, [r7, #20]
 801ed1c:	9300      	str	r3, [sp, #0]
 801ed1e:	693b      	ldr	r3, [r7, #16]
 801ed20:	463a      	mov	r2, r7
 801ed22:	ca06      	ldmia	r2, {r1, r2}
 801ed24:	f7ff ff27 	bl	801eb76 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801ed28:	68bb      	ldr	r3, [r7, #8]
 801ed2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ed2e:	fb02 f303 	mul.w	r3, r2, r3
 801ed32:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801ed36:	4413      	add	r3, r2
}
 801ed38:	4618      	mov	r0, r3
 801ed3a:	3718      	adds	r7, #24
 801ed3c:	46bd      	mov	sp, r7
 801ed3e:	bd80      	pop	{r7, pc}
 801ed40:	08020990 	.word	0x08020990

0801ed44 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801ed44:	b580      	push	{r7, lr}
 801ed46:	b08a      	sub	sp, #40	; 0x28
 801ed48:	af02      	add	r7, sp, #8
 801ed4a:	6078      	str	r0, [r7, #4]
 801ed4c:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801ed4e:	683b      	ldr	r3, [r7, #0]
 801ed50:	4a19      	ldr	r2, [pc, #100]	; (801edb8 <SysTimeFromMs+0x74>)
 801ed52:	fba2 2303 	umull	r2, r3, r2, r3
 801ed56:	099b      	lsrs	r3, r3, #6
 801ed58:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801ed5a:	69fb      	ldr	r3, [r7, #28]
 801ed5c:	617b      	str	r3, [r7, #20]
 801ed5e:	683b      	ldr	r3, [r7, #0]
 801ed60:	b29a      	uxth	r2, r3
 801ed62:	69fb      	ldr	r3, [r7, #28]
 801ed64:	b29b      	uxth	r3, r3
 801ed66:	4619      	mov	r1, r3
 801ed68:	0149      	lsls	r1, r1, #5
 801ed6a:	1ac9      	subs	r1, r1, r3
 801ed6c:	0089      	lsls	r1, r1, #2
 801ed6e:	440b      	add	r3, r1
 801ed70:	00db      	lsls	r3, r3, #3
 801ed72:	b29b      	uxth	r3, r3
 801ed74:	1ad3      	subs	r3, r2, r3
 801ed76:	b29b      	uxth	r3, r3
 801ed78:	b21b      	sxth	r3, r3
 801ed7a:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801ed7c:	f107 030c 	add.w	r3, r7, #12
 801ed80:	2200      	movs	r2, #0
 801ed82:	601a      	str	r2, [r3, #0]
 801ed84:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801ed86:	4b0d      	ldr	r3, [pc, #52]	; (801edbc <SysTimeFromMs+0x78>)
 801ed88:	68db      	ldr	r3, [r3, #12]
 801ed8a:	4798      	blx	r3
 801ed8c:	4603      	mov	r3, r0
 801ed8e:	b21b      	sxth	r3, r3
 801ed90:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801ed92:	4b0a      	ldr	r3, [pc, #40]	; (801edbc <SysTimeFromMs+0x78>)
 801ed94:	685b      	ldr	r3, [r3, #4]
 801ed96:	4798      	blx	r3
 801ed98:	4603      	mov	r3, r0
 801ed9a:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801ed9c:	6878      	ldr	r0, [r7, #4]
 801ed9e:	693b      	ldr	r3, [r7, #16]
 801eda0:	9300      	str	r3, [sp, #0]
 801eda2:	68fb      	ldr	r3, [r7, #12]
 801eda4:	f107 0214 	add.w	r2, r7, #20
 801eda8:	ca06      	ldmia	r2, {r1, r2}
 801edaa:	f7ff feab 	bl	801eb04 <SysTimeAdd>
}
 801edae:	6878      	ldr	r0, [r7, #4]
 801edb0:	3720      	adds	r7, #32
 801edb2:	46bd      	mov	sp, r7
 801edb4:	bd80      	pop	{r7, pc}
 801edb6:	bf00      	nop
 801edb8:	10624dd3 	.word	0x10624dd3
 801edbc:	08020990 	.word	0x08020990

0801edc0 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801edc0:	b480      	push	{r7}
 801edc2:	b085      	sub	sp, #20
 801edc4:	af00      	add	r7, sp, #0
 801edc6:	6078      	str	r0, [r7, #4]
  int i = 0;
 801edc8:	2300      	movs	r3, #0
 801edca:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801edcc:	e00e      	b.n	801edec <ee_skip_atoi+0x2c>
 801edce:	68fa      	ldr	r2, [r7, #12]
 801edd0:	4613      	mov	r3, r2
 801edd2:	009b      	lsls	r3, r3, #2
 801edd4:	4413      	add	r3, r2
 801edd6:	005b      	lsls	r3, r3, #1
 801edd8:	4618      	mov	r0, r3
 801edda:	687b      	ldr	r3, [r7, #4]
 801eddc:	681b      	ldr	r3, [r3, #0]
 801edde:	1c59      	adds	r1, r3, #1
 801ede0:	687a      	ldr	r2, [r7, #4]
 801ede2:	6011      	str	r1, [r2, #0]
 801ede4:	781b      	ldrb	r3, [r3, #0]
 801ede6:	4403      	add	r3, r0
 801ede8:	3b30      	subs	r3, #48	; 0x30
 801edea:	60fb      	str	r3, [r7, #12]
 801edec:	687b      	ldr	r3, [r7, #4]
 801edee:	681b      	ldr	r3, [r3, #0]
 801edf0:	781b      	ldrb	r3, [r3, #0]
 801edf2:	2b2f      	cmp	r3, #47	; 0x2f
 801edf4:	d904      	bls.n	801ee00 <ee_skip_atoi+0x40>
 801edf6:	687b      	ldr	r3, [r7, #4]
 801edf8:	681b      	ldr	r3, [r3, #0]
 801edfa:	781b      	ldrb	r3, [r3, #0]
 801edfc:	2b39      	cmp	r3, #57	; 0x39
 801edfe:	d9e6      	bls.n	801edce <ee_skip_atoi+0xe>
  return i;
 801ee00:	68fb      	ldr	r3, [r7, #12]
}
 801ee02:	4618      	mov	r0, r3
 801ee04:	3714      	adds	r7, #20
 801ee06:	46bd      	mov	sp, r7
 801ee08:	bc80      	pop	{r7}
 801ee0a:	4770      	bx	lr

0801ee0c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801ee0c:	b480      	push	{r7}
 801ee0e:	b099      	sub	sp, #100	; 0x64
 801ee10:	af00      	add	r7, sp, #0
 801ee12:	60f8      	str	r0, [r7, #12]
 801ee14:	60b9      	str	r1, [r7, #8]
 801ee16:	607a      	str	r2, [r7, #4]
 801ee18:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801ee1a:	4b71      	ldr	r3, [pc, #452]	; (801efe0 <ee_number+0x1d4>)
 801ee1c:	681b      	ldr	r3, [r3, #0]
 801ee1e:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801ee20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ee22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ee26:	2b00      	cmp	r3, #0
 801ee28:	d002      	beq.n	801ee30 <ee_number+0x24>
 801ee2a:	4b6e      	ldr	r3, [pc, #440]	; (801efe4 <ee_number+0x1d8>)
 801ee2c:	681b      	ldr	r3, [r3, #0]
 801ee2e:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801ee30:	683b      	ldr	r3, [r7, #0]
 801ee32:	2b01      	cmp	r3, #1
 801ee34:	dd02      	ble.n	801ee3c <ee_number+0x30>
 801ee36:	683b      	ldr	r3, [r7, #0]
 801ee38:	2b24      	cmp	r3, #36	; 0x24
 801ee3a:	dd01      	ble.n	801ee40 <ee_number+0x34>
 801ee3c:	2300      	movs	r3, #0
 801ee3e:	e0ca      	b.n	801efd6 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801ee40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ee42:	f003 0301 	and.w	r3, r3, #1
 801ee46:	2b00      	cmp	r3, #0
 801ee48:	d001      	beq.n	801ee4e <ee_number+0x42>
 801ee4a:	2330      	movs	r3, #48	; 0x30
 801ee4c:	e000      	b.n	801ee50 <ee_number+0x44>
 801ee4e:	2320      	movs	r3, #32
 801ee50:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801ee54:	2300      	movs	r3, #0
 801ee56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801ee5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ee5c:	f003 0302 	and.w	r3, r3, #2
 801ee60:	2b00      	cmp	r3, #0
 801ee62:	d00b      	beq.n	801ee7c <ee_number+0x70>
  {
    if (num < 0)
 801ee64:	687b      	ldr	r3, [r7, #4]
 801ee66:	2b00      	cmp	r3, #0
 801ee68:	da08      	bge.n	801ee7c <ee_number+0x70>
    {
      sign = '-';
 801ee6a:	232d      	movs	r3, #45	; 0x2d
 801ee6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801ee70:	687b      	ldr	r3, [r7, #4]
 801ee72:	425b      	negs	r3, r3
 801ee74:	607b      	str	r3, [r7, #4]
      size--;
 801ee76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ee78:	3b01      	subs	r3, #1
 801ee7a:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801ee7c:	2300      	movs	r3, #0
 801ee7e:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801ee80:	687b      	ldr	r3, [r7, #4]
 801ee82:	2b00      	cmp	r3, #0
 801ee84:	d11e      	bne.n	801eec4 <ee_number+0xb8>
    tmp[i++] = '0';
 801ee86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ee88:	1c5a      	adds	r2, r3, #1
 801ee8a:	657a      	str	r2, [r7, #84]	; 0x54
 801ee8c:	3360      	adds	r3, #96	; 0x60
 801ee8e:	443b      	add	r3, r7
 801ee90:	2230      	movs	r2, #48	; 0x30
 801ee92:	f803 2c50 	strb.w	r2, [r3, #-80]
 801ee96:	e018      	b.n	801eeca <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801ee98:	687b      	ldr	r3, [r7, #4]
 801ee9a:	683a      	ldr	r2, [r7, #0]
 801ee9c:	fbb3 f1f2 	udiv	r1, r3, r2
 801eea0:	fb01 f202 	mul.w	r2, r1, r2
 801eea4:	1a9b      	subs	r3, r3, r2
 801eea6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801eea8:	441a      	add	r2, r3
 801eeaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801eeac:	1c59      	adds	r1, r3, #1
 801eeae:	6579      	str	r1, [r7, #84]	; 0x54
 801eeb0:	7812      	ldrb	r2, [r2, #0]
 801eeb2:	3360      	adds	r3, #96	; 0x60
 801eeb4:	443b      	add	r3, r7
 801eeb6:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801eeba:	687a      	ldr	r2, [r7, #4]
 801eebc:	683b      	ldr	r3, [r7, #0]
 801eebe:	fbb2 f3f3 	udiv	r3, r2, r3
 801eec2:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801eec4:	687b      	ldr	r3, [r7, #4]
 801eec6:	2b00      	cmp	r3, #0
 801eec8:	d1e6      	bne.n	801ee98 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801eeca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801eecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eece:	429a      	cmp	r2, r3
 801eed0:	dd01      	ble.n	801eed6 <ee_number+0xca>
 801eed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801eed4:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801eed6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801eed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eeda:	1ad3      	subs	r3, r2, r3
 801eedc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801eede:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801eee0:	f003 0301 	and.w	r3, r3, #1
 801eee4:	2b00      	cmp	r3, #0
 801eee6:	d112      	bne.n	801ef0e <ee_number+0x102>
 801eee8:	e00c      	b.n	801ef04 <ee_number+0xf8>
 801eeea:	68fb      	ldr	r3, [r7, #12]
 801eeec:	1c5a      	adds	r2, r3, #1
 801eeee:	60fa      	str	r2, [r7, #12]
 801eef0:	2220      	movs	r2, #32
 801eef2:	701a      	strb	r2, [r3, #0]
 801eef4:	68bb      	ldr	r3, [r7, #8]
 801eef6:	3b01      	subs	r3, #1
 801eef8:	60bb      	str	r3, [r7, #8]
 801eefa:	68bb      	ldr	r3, [r7, #8]
 801eefc:	2b00      	cmp	r3, #0
 801eefe:	d101      	bne.n	801ef04 <ee_number+0xf8>
 801ef00:	68fb      	ldr	r3, [r7, #12]
 801ef02:	e068      	b.n	801efd6 <ee_number+0x1ca>
 801ef04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ef06:	1e5a      	subs	r2, r3, #1
 801ef08:	66ba      	str	r2, [r7, #104]	; 0x68
 801ef0a:	2b00      	cmp	r3, #0
 801ef0c:	dced      	bgt.n	801eeea <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801ef0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801ef12:	2b00      	cmp	r3, #0
 801ef14:	d01b      	beq.n	801ef4e <ee_number+0x142>
 801ef16:	68fb      	ldr	r3, [r7, #12]
 801ef18:	1c5a      	adds	r2, r3, #1
 801ef1a:	60fa      	str	r2, [r7, #12]
 801ef1c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801ef20:	701a      	strb	r2, [r3, #0]
 801ef22:	68bb      	ldr	r3, [r7, #8]
 801ef24:	3b01      	subs	r3, #1
 801ef26:	60bb      	str	r3, [r7, #8]
 801ef28:	68bb      	ldr	r3, [r7, #8]
 801ef2a:	2b00      	cmp	r3, #0
 801ef2c:	d10f      	bne.n	801ef4e <ee_number+0x142>
 801ef2e:	68fb      	ldr	r3, [r7, #12]
 801ef30:	e051      	b.n	801efd6 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801ef32:	68fb      	ldr	r3, [r7, #12]
 801ef34:	1c5a      	adds	r2, r3, #1
 801ef36:	60fa      	str	r2, [r7, #12]
 801ef38:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801ef3c:	701a      	strb	r2, [r3, #0]
 801ef3e:	68bb      	ldr	r3, [r7, #8]
 801ef40:	3b01      	subs	r3, #1
 801ef42:	60bb      	str	r3, [r7, #8]
 801ef44:	68bb      	ldr	r3, [r7, #8]
 801ef46:	2b00      	cmp	r3, #0
 801ef48:	d101      	bne.n	801ef4e <ee_number+0x142>
 801ef4a:	68fb      	ldr	r3, [r7, #12]
 801ef4c:	e043      	b.n	801efd6 <ee_number+0x1ca>
 801ef4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ef50:	1e5a      	subs	r2, r3, #1
 801ef52:	66ba      	str	r2, [r7, #104]	; 0x68
 801ef54:	2b00      	cmp	r3, #0
 801ef56:	dcec      	bgt.n	801ef32 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801ef58:	e00c      	b.n	801ef74 <ee_number+0x168>
 801ef5a:	68fb      	ldr	r3, [r7, #12]
 801ef5c:	1c5a      	adds	r2, r3, #1
 801ef5e:	60fa      	str	r2, [r7, #12]
 801ef60:	2230      	movs	r2, #48	; 0x30
 801ef62:	701a      	strb	r2, [r3, #0]
 801ef64:	68bb      	ldr	r3, [r7, #8]
 801ef66:	3b01      	subs	r3, #1
 801ef68:	60bb      	str	r3, [r7, #8]
 801ef6a:	68bb      	ldr	r3, [r7, #8]
 801ef6c:	2b00      	cmp	r3, #0
 801ef6e:	d101      	bne.n	801ef74 <ee_number+0x168>
 801ef70:	68fb      	ldr	r3, [r7, #12]
 801ef72:	e030      	b.n	801efd6 <ee_number+0x1ca>
 801ef74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ef76:	1e5a      	subs	r2, r3, #1
 801ef78:	66fa      	str	r2, [r7, #108]	; 0x6c
 801ef7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ef7c:	429a      	cmp	r2, r3
 801ef7e:	dbec      	blt.n	801ef5a <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801ef80:	e010      	b.n	801efa4 <ee_number+0x198>
 801ef82:	68fb      	ldr	r3, [r7, #12]
 801ef84:	1c5a      	adds	r2, r3, #1
 801ef86:	60fa      	str	r2, [r7, #12]
 801ef88:	f107 0110 	add.w	r1, r7, #16
 801ef8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ef8e:	440a      	add	r2, r1
 801ef90:	7812      	ldrb	r2, [r2, #0]
 801ef92:	701a      	strb	r2, [r3, #0]
 801ef94:	68bb      	ldr	r3, [r7, #8]
 801ef96:	3b01      	subs	r3, #1
 801ef98:	60bb      	str	r3, [r7, #8]
 801ef9a:	68bb      	ldr	r3, [r7, #8]
 801ef9c:	2b00      	cmp	r3, #0
 801ef9e:	d101      	bne.n	801efa4 <ee_number+0x198>
 801efa0:	68fb      	ldr	r3, [r7, #12]
 801efa2:	e018      	b.n	801efd6 <ee_number+0x1ca>
 801efa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801efa6:	1e5a      	subs	r2, r3, #1
 801efa8:	657a      	str	r2, [r7, #84]	; 0x54
 801efaa:	2b00      	cmp	r3, #0
 801efac:	dce9      	bgt.n	801ef82 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801efae:	e00c      	b.n	801efca <ee_number+0x1be>
 801efb0:	68fb      	ldr	r3, [r7, #12]
 801efb2:	1c5a      	adds	r2, r3, #1
 801efb4:	60fa      	str	r2, [r7, #12]
 801efb6:	2220      	movs	r2, #32
 801efb8:	701a      	strb	r2, [r3, #0]
 801efba:	68bb      	ldr	r3, [r7, #8]
 801efbc:	3b01      	subs	r3, #1
 801efbe:	60bb      	str	r3, [r7, #8]
 801efc0:	68bb      	ldr	r3, [r7, #8]
 801efc2:	2b00      	cmp	r3, #0
 801efc4:	d101      	bne.n	801efca <ee_number+0x1be>
 801efc6:	68fb      	ldr	r3, [r7, #12]
 801efc8:	e005      	b.n	801efd6 <ee_number+0x1ca>
 801efca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801efcc:	1e5a      	subs	r2, r3, #1
 801efce:	66ba      	str	r2, [r7, #104]	; 0x68
 801efd0:	2b00      	cmp	r3, #0
 801efd2:	dced      	bgt.n	801efb0 <ee_number+0x1a4>

  return str;
 801efd4:	68fb      	ldr	r3, [r7, #12]
}
 801efd6:	4618      	mov	r0, r3
 801efd8:	3764      	adds	r7, #100	; 0x64
 801efda:	46bd      	mov	sp, r7
 801efdc:	bc80      	pop	{r7}
 801efde:	4770      	bx	lr
 801efe0:	20000138 	.word	0x20000138
 801efe4:	2000013c 	.word	0x2000013c

0801efe8 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801efe8:	b580      	push	{r7, lr}
 801efea:	b092      	sub	sp, #72	; 0x48
 801efec:	af04      	add	r7, sp, #16
 801efee:	60f8      	str	r0, [r7, #12]
 801eff0:	60b9      	str	r1, [r7, #8]
 801eff2:	607a      	str	r2, [r7, #4]
 801eff4:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801eff6:	68bb      	ldr	r3, [r7, #8]
 801eff8:	2b00      	cmp	r3, #0
 801effa:	dc01      	bgt.n	801f000 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801effc:	2300      	movs	r3, #0
 801effe:	e13e      	b.n	801f27e <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801f000:	68fb      	ldr	r3, [r7, #12]
 801f002:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f004:	e128      	b.n	801f258 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801f006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f008:	68fb      	ldr	r3, [r7, #12]
 801f00a:	1ad2      	subs	r2, r2, r3
 801f00c:	68bb      	ldr	r3, [r7, #8]
 801f00e:	3b01      	subs	r3, #1
 801f010:	429a      	cmp	r2, r3
 801f012:	f280 812e 	bge.w	801f272 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801f016:	687b      	ldr	r3, [r7, #4]
 801f018:	781b      	ldrb	r3, [r3, #0]
 801f01a:	2b25      	cmp	r3, #37	; 0x25
 801f01c:	d006      	beq.n	801f02c <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801f01e:	687a      	ldr	r2, [r7, #4]
 801f020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f022:	1c59      	adds	r1, r3, #1
 801f024:	62f9      	str	r1, [r7, #44]	; 0x2c
 801f026:	7812      	ldrb	r2, [r2, #0]
 801f028:	701a      	strb	r2, [r3, #0]
      continue;
 801f02a:	e112      	b.n	801f252 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801f02c:	2300      	movs	r3, #0
 801f02e:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801f030:	687b      	ldr	r3, [r7, #4]
 801f032:	3301      	adds	r3, #1
 801f034:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801f036:	687b      	ldr	r3, [r7, #4]
 801f038:	781b      	ldrb	r3, [r3, #0]
 801f03a:	2b30      	cmp	r3, #48	; 0x30
 801f03c:	d103      	bne.n	801f046 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801f03e:	6a3b      	ldr	r3, [r7, #32]
 801f040:	f043 0301 	orr.w	r3, r3, #1
 801f044:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801f046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f04a:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801f04c:	687b      	ldr	r3, [r7, #4]
 801f04e:	781b      	ldrb	r3, [r3, #0]
 801f050:	2b2f      	cmp	r3, #47	; 0x2f
 801f052:	d908      	bls.n	801f066 <tiny_vsnprintf_like+0x7e>
 801f054:	687b      	ldr	r3, [r7, #4]
 801f056:	781b      	ldrb	r3, [r3, #0]
 801f058:	2b39      	cmp	r3, #57	; 0x39
 801f05a:	d804      	bhi.n	801f066 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801f05c:	1d3b      	adds	r3, r7, #4
 801f05e:	4618      	mov	r0, r3
 801f060:	f7ff feae 	bl	801edc0 <ee_skip_atoi>
 801f064:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801f066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f06a:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801f06c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f070:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801f072:	230a      	movs	r3, #10
 801f074:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801f076:	687b      	ldr	r3, [r7, #4]
 801f078:	781b      	ldrb	r3, [r3, #0]
 801f07a:	3b58      	subs	r3, #88	; 0x58
 801f07c:	2b20      	cmp	r3, #32
 801f07e:	f200 8094 	bhi.w	801f1aa <tiny_vsnprintf_like+0x1c2>
 801f082:	a201      	add	r2, pc, #4	; (adr r2, 801f088 <tiny_vsnprintf_like+0xa0>)
 801f084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f088:	0801f193 	.word	0x0801f193
 801f08c:	0801f1ab 	.word	0x0801f1ab
 801f090:	0801f1ab 	.word	0x0801f1ab
 801f094:	0801f1ab 	.word	0x0801f1ab
 801f098:	0801f1ab 	.word	0x0801f1ab
 801f09c:	0801f1ab 	.word	0x0801f1ab
 801f0a0:	0801f1ab 	.word	0x0801f1ab
 801f0a4:	0801f1ab 	.word	0x0801f1ab
 801f0a8:	0801f1ab 	.word	0x0801f1ab
 801f0ac:	0801f1ab 	.word	0x0801f1ab
 801f0b0:	0801f1ab 	.word	0x0801f1ab
 801f0b4:	0801f117 	.word	0x0801f117
 801f0b8:	0801f1a1 	.word	0x0801f1a1
 801f0bc:	0801f1ab 	.word	0x0801f1ab
 801f0c0:	0801f1ab 	.word	0x0801f1ab
 801f0c4:	0801f1ab 	.word	0x0801f1ab
 801f0c8:	0801f1ab 	.word	0x0801f1ab
 801f0cc:	0801f1a1 	.word	0x0801f1a1
 801f0d0:	0801f1ab 	.word	0x0801f1ab
 801f0d4:	0801f1ab 	.word	0x0801f1ab
 801f0d8:	0801f1ab 	.word	0x0801f1ab
 801f0dc:	0801f1ab 	.word	0x0801f1ab
 801f0e0:	0801f1ab 	.word	0x0801f1ab
 801f0e4:	0801f1ab 	.word	0x0801f1ab
 801f0e8:	0801f1ab 	.word	0x0801f1ab
 801f0ec:	0801f1ab 	.word	0x0801f1ab
 801f0f0:	0801f1ab 	.word	0x0801f1ab
 801f0f4:	0801f137 	.word	0x0801f137
 801f0f8:	0801f1ab 	.word	0x0801f1ab
 801f0fc:	0801f1f7 	.word	0x0801f1f7
 801f100:	0801f1ab 	.word	0x0801f1ab
 801f104:	0801f1ab 	.word	0x0801f1ab
 801f108:	0801f19b 	.word	0x0801f19b
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801f10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f10e:	1c5a      	adds	r2, r3, #1
 801f110:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f112:	2220      	movs	r2, #32
 801f114:	701a      	strb	r2, [r3, #0]
 801f116:	69fb      	ldr	r3, [r7, #28]
 801f118:	3b01      	subs	r3, #1
 801f11a:	61fb      	str	r3, [r7, #28]
 801f11c:	69fb      	ldr	r3, [r7, #28]
 801f11e:	2b00      	cmp	r3, #0
 801f120:	dcf4      	bgt.n	801f10c <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801f122:	683b      	ldr	r3, [r7, #0]
 801f124:	1d1a      	adds	r2, r3, #4
 801f126:	603a      	str	r2, [r7, #0]
 801f128:	6819      	ldr	r1, [r3, #0]
 801f12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f12c:	1c5a      	adds	r2, r3, #1
 801f12e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f130:	b2ca      	uxtb	r2, r1
 801f132:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801f134:	e08d      	b.n	801f252 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801f136:	683b      	ldr	r3, [r7, #0]
 801f138:	1d1a      	adds	r2, r3, #4
 801f13a:	603a      	str	r2, [r7, #0]
 801f13c:	681b      	ldr	r3, [r3, #0]
 801f13e:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801f140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f142:	2b00      	cmp	r3, #0
 801f144:	d101      	bne.n	801f14a <tiny_vsnprintf_like+0x162>
 801f146:	4b50      	ldr	r3, [pc, #320]	; (801f288 <tiny_vsnprintf_like+0x2a0>)
 801f148:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801f14a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f14c:	f7e1 f814 	bl	8000178 <strlen>
 801f150:	4603      	mov	r3, r0
 801f152:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801f154:	e004      	b.n	801f160 <tiny_vsnprintf_like+0x178>
 801f156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f158:	1c5a      	adds	r2, r3, #1
 801f15a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f15c:	2220      	movs	r2, #32
 801f15e:	701a      	strb	r2, [r3, #0]
 801f160:	69fb      	ldr	r3, [r7, #28]
 801f162:	1e5a      	subs	r2, r3, #1
 801f164:	61fa      	str	r2, [r7, #28]
 801f166:	693a      	ldr	r2, [r7, #16]
 801f168:	429a      	cmp	r2, r3
 801f16a:	dbf4      	blt.n	801f156 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801f16c:	2300      	movs	r3, #0
 801f16e:	62bb      	str	r3, [r7, #40]	; 0x28
 801f170:	e00a      	b.n	801f188 <tiny_vsnprintf_like+0x1a0>
 801f172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f174:	1c53      	adds	r3, r2, #1
 801f176:	627b      	str	r3, [r7, #36]	; 0x24
 801f178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f17a:	1c59      	adds	r1, r3, #1
 801f17c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801f17e:	7812      	ldrb	r2, [r2, #0]
 801f180:	701a      	strb	r2, [r3, #0]
 801f182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f184:	3301      	adds	r3, #1
 801f186:	62bb      	str	r3, [r7, #40]	; 0x28
 801f188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f18a:	693b      	ldr	r3, [r7, #16]
 801f18c:	429a      	cmp	r2, r3
 801f18e:	dbf0      	blt.n	801f172 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801f190:	e05f      	b.n	801f252 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801f192:	6a3b      	ldr	r3, [r7, #32]
 801f194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f198:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801f19a:	2310      	movs	r3, #16
 801f19c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801f19e:	e02b      	b.n	801f1f8 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801f1a0:	6a3b      	ldr	r3, [r7, #32]
 801f1a2:	f043 0302 	orr.w	r3, r3, #2
 801f1a6:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801f1a8:	e025      	b.n	801f1f6 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801f1aa:	687b      	ldr	r3, [r7, #4]
 801f1ac:	781b      	ldrb	r3, [r3, #0]
 801f1ae:	2b25      	cmp	r3, #37	; 0x25
 801f1b0:	d004      	beq.n	801f1bc <tiny_vsnprintf_like+0x1d4>
 801f1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f1b4:	1c5a      	adds	r2, r3, #1
 801f1b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f1b8:	2225      	movs	r2, #37	; 0x25
 801f1ba:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801f1bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f1be:	68fb      	ldr	r3, [r7, #12]
 801f1c0:	1ad2      	subs	r2, r2, r3
 801f1c2:	68bb      	ldr	r3, [r7, #8]
 801f1c4:	3b01      	subs	r3, #1
 801f1c6:	429a      	cmp	r2, r3
 801f1c8:	da16      	bge.n	801f1f8 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801f1ca:	687b      	ldr	r3, [r7, #4]
 801f1cc:	781b      	ldrb	r3, [r3, #0]
 801f1ce:	2b00      	cmp	r3, #0
 801f1d0:	d006      	beq.n	801f1e0 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801f1d2:	687a      	ldr	r2, [r7, #4]
 801f1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f1d6:	1c59      	adds	r1, r3, #1
 801f1d8:	62f9      	str	r1, [r7, #44]	; 0x2c
 801f1da:	7812      	ldrb	r2, [r2, #0]
 801f1dc:	701a      	strb	r2, [r3, #0]
 801f1de:	e002      	b.n	801f1e6 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801f1e0:	687b      	ldr	r3, [r7, #4]
 801f1e2:	3b01      	subs	r3, #1
 801f1e4:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801f1e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f1e8:	68fb      	ldr	r3, [r7, #12]
 801f1ea:	1ad2      	subs	r2, r2, r3
 801f1ec:	68bb      	ldr	r3, [r7, #8]
 801f1ee:	3b01      	subs	r3, #1
 801f1f0:	429a      	cmp	r2, r3
 801f1f2:	db2d      	blt.n	801f250 <tiny_vsnprintf_like+0x268>
 801f1f4:	e000      	b.n	801f1f8 <tiny_vsnprintf_like+0x210>
        break;
 801f1f6:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801f1f8:	697b      	ldr	r3, [r7, #20]
 801f1fa:	2b6c      	cmp	r3, #108	; 0x6c
 801f1fc:	d105      	bne.n	801f20a <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801f1fe:	683b      	ldr	r3, [r7, #0]
 801f200:	1d1a      	adds	r2, r3, #4
 801f202:	603a      	str	r2, [r7, #0]
 801f204:	681b      	ldr	r3, [r3, #0]
 801f206:	637b      	str	r3, [r7, #52]	; 0x34
 801f208:	e00f      	b.n	801f22a <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801f20a:	6a3b      	ldr	r3, [r7, #32]
 801f20c:	f003 0302 	and.w	r3, r3, #2
 801f210:	2b00      	cmp	r3, #0
 801f212:	d005      	beq.n	801f220 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801f214:	683b      	ldr	r3, [r7, #0]
 801f216:	1d1a      	adds	r2, r3, #4
 801f218:	603a      	str	r2, [r7, #0]
 801f21a:	681b      	ldr	r3, [r3, #0]
 801f21c:	637b      	str	r3, [r7, #52]	; 0x34
 801f21e:	e004      	b.n	801f22a <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801f220:	683b      	ldr	r3, [r7, #0]
 801f222:	1d1a      	adds	r2, r3, #4
 801f224:	603a      	str	r2, [r7, #0]
 801f226:	681b      	ldr	r3, [r3, #0]
 801f228:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801f22a:	68bb      	ldr	r3, [r7, #8]
 801f22c:	1e5a      	subs	r2, r3, #1
 801f22e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f230:	68fb      	ldr	r3, [r7, #12]
 801f232:	1acb      	subs	r3, r1, r3
 801f234:	1ad1      	subs	r1, r2, r3
 801f236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f238:	6a3b      	ldr	r3, [r7, #32]
 801f23a:	9302      	str	r3, [sp, #8]
 801f23c:	69bb      	ldr	r3, [r7, #24]
 801f23e:	9301      	str	r3, [sp, #4]
 801f240:	69fb      	ldr	r3, [r7, #28]
 801f242:	9300      	str	r3, [sp, #0]
 801f244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f246:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801f248:	f7ff fde0 	bl	801ee0c <ee_number>
 801f24c:	62f8      	str	r0, [r7, #44]	; 0x2c
 801f24e:	e000      	b.n	801f252 <tiny_vsnprintf_like+0x26a>
        continue;
 801f250:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801f252:	687b      	ldr	r3, [r7, #4]
 801f254:	3301      	adds	r3, #1
 801f256:	607b      	str	r3, [r7, #4]
 801f258:	687b      	ldr	r3, [r7, #4]
 801f25a:	781b      	ldrb	r3, [r3, #0]
 801f25c:	2b00      	cmp	r3, #0
 801f25e:	f47f aed2 	bne.w	801f006 <tiny_vsnprintf_like+0x1e>
 801f262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f264:	68fb      	ldr	r3, [r7, #12]
 801f266:	1ad2      	subs	r2, r2, r3
 801f268:	68bb      	ldr	r3, [r7, #8]
 801f26a:	3b01      	subs	r3, #1
 801f26c:	429a      	cmp	r2, r3
 801f26e:	f6bf aeca 	bge.w	801f006 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801f272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f274:	2200      	movs	r2, #0
 801f276:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801f278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f27a:	68fb      	ldr	r3, [r7, #12]
 801f27c:	1ad3      	subs	r3, r2, r3
}
 801f27e:	4618      	mov	r0, r3
 801f280:	3738      	adds	r7, #56	; 0x38
 801f282:	46bd      	mov	sp, r7
 801f284:	bd80      	pop	{r7, pc}
 801f286:	bf00      	nop
 801f288:	080208bc 	.word	0x080208bc

0801f28c <UTIL_SEQ_RegTask>:

  return;
}

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801f28c:	b580      	push	{r7, lr}
 801f28e:	b088      	sub	sp, #32
 801f290:	af00      	add	r7, sp, #0
 801f292:	60f8      	str	r0, [r7, #12]
 801f294:	60b9      	str	r1, [r7, #8]
 801f296:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f298:	f3ef 8310 	mrs	r3, PRIMASK
 801f29c:	617b      	str	r3, [r7, #20]
  return(result);
 801f29e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801f2a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801f2a2:	b672      	cpsid	i
}
 801f2a4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801f2a6:	68f8      	ldr	r0, [r7, #12]
 801f2a8:	f000 f83e 	bl	801f328 <SEQ_BitPosition>
 801f2ac:	4603      	mov	r3, r0
 801f2ae:	4619      	mov	r1, r3
 801f2b0:	4a06      	ldr	r2, [pc, #24]	; (801f2cc <UTIL_SEQ_RegTask+0x40>)
 801f2b2:	687b      	ldr	r3, [r7, #4]
 801f2b4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801f2b8:	69fb      	ldr	r3, [r7, #28]
 801f2ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f2bc:	69bb      	ldr	r3, [r7, #24]
 801f2be:	f383 8810 	msr	PRIMASK, r3
}
 801f2c2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801f2c4:	bf00      	nop
}
 801f2c6:	3720      	adds	r7, #32
 801f2c8:	46bd      	mov	sp, r7
 801f2ca:	bd80      	pop	{r7, pc}
 801f2cc:	20001c24 	.word	0x20001c24

0801f2d0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801f2d0:	b480      	push	{r7}
 801f2d2:	b087      	sub	sp, #28
 801f2d4:	af00      	add	r7, sp, #0
 801f2d6:	6078      	str	r0, [r7, #4]
 801f2d8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f2da:	f3ef 8310 	mrs	r3, PRIMASK
 801f2de:	60fb      	str	r3, [r7, #12]
  return(result);
 801f2e0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801f2e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801f2e4:	b672      	cpsid	i
}
 801f2e6:	bf00      	nop

  TaskSet |= TaskId_bm;
 801f2e8:	4b0d      	ldr	r3, [pc, #52]	; (801f320 <UTIL_SEQ_SetTask+0x50>)
 801f2ea:	681a      	ldr	r2, [r3, #0]
 801f2ec:	687b      	ldr	r3, [r7, #4]
 801f2ee:	4313      	orrs	r3, r2
 801f2f0:	4a0b      	ldr	r2, [pc, #44]	; (801f320 <UTIL_SEQ_SetTask+0x50>)
 801f2f2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801f2f4:	4a0b      	ldr	r2, [pc, #44]	; (801f324 <UTIL_SEQ_SetTask+0x54>)
 801f2f6:	683b      	ldr	r3, [r7, #0]
 801f2f8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801f2fc:	687b      	ldr	r3, [r7, #4]
 801f2fe:	431a      	orrs	r2, r3
 801f300:	4908      	ldr	r1, [pc, #32]	; (801f324 <UTIL_SEQ_SetTask+0x54>)
 801f302:	683b      	ldr	r3, [r7, #0]
 801f304:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801f308:	697b      	ldr	r3, [r7, #20]
 801f30a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f30c:	693b      	ldr	r3, [r7, #16]
 801f30e:	f383 8810 	msr	PRIMASK, r3
}
 801f312:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801f314:	bf00      	nop
}
 801f316:	371c      	adds	r7, #28
 801f318:	46bd      	mov	sp, r7
 801f31a:	bc80      	pop	{r7}
 801f31c:	4770      	bx	lr
 801f31e:	bf00      	nop
 801f320:	20001c20 	.word	0x20001c20
 801f324:	20001c34 	.word	0x20001c34

0801f328 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801f328:	b480      	push	{r7}
 801f32a:	b085      	sub	sp, #20
 801f32c:	af00      	add	r7, sp, #0
 801f32e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801f330:	2300      	movs	r3, #0
 801f332:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801f334:	687b      	ldr	r3, [r7, #4]
 801f336:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801f338:	68bb      	ldr	r3, [r7, #8]
 801f33a:	0c1b      	lsrs	r3, r3, #16
 801f33c:	041b      	lsls	r3, r3, #16
 801f33e:	2b00      	cmp	r3, #0
 801f340:	d104      	bne.n	801f34c <SEQ_BitPosition+0x24>
 801f342:	2310      	movs	r3, #16
 801f344:	73fb      	strb	r3, [r7, #15]
 801f346:	68bb      	ldr	r3, [r7, #8]
 801f348:	041b      	lsls	r3, r3, #16
 801f34a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801f34c:	68bb      	ldr	r3, [r7, #8]
 801f34e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801f352:	2b00      	cmp	r3, #0
 801f354:	d105      	bne.n	801f362 <SEQ_BitPosition+0x3a>
 801f356:	7bfb      	ldrb	r3, [r7, #15]
 801f358:	3308      	adds	r3, #8
 801f35a:	73fb      	strb	r3, [r7, #15]
 801f35c:	68bb      	ldr	r3, [r7, #8]
 801f35e:	021b      	lsls	r3, r3, #8
 801f360:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801f362:	68bb      	ldr	r3, [r7, #8]
 801f364:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801f368:	2b00      	cmp	r3, #0
 801f36a:	d105      	bne.n	801f378 <SEQ_BitPosition+0x50>
 801f36c:	7bfb      	ldrb	r3, [r7, #15]
 801f36e:	3304      	adds	r3, #4
 801f370:	73fb      	strb	r3, [r7, #15]
 801f372:	68bb      	ldr	r3, [r7, #8]
 801f374:	011b      	lsls	r3, r3, #4
 801f376:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801f378:	68bb      	ldr	r3, [r7, #8]
 801f37a:	0f1b      	lsrs	r3, r3, #28
 801f37c:	4a06      	ldr	r2, [pc, #24]	; (801f398 <SEQ_BitPosition+0x70>)
 801f37e:	5cd2      	ldrb	r2, [r2, r3]
 801f380:	7bfb      	ldrb	r3, [r7, #15]
 801f382:	4413      	add	r3, r2
 801f384:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801f386:	7bfb      	ldrb	r3, [r7, #15]
 801f388:	f1c3 031f 	rsb	r3, r3, #31
 801f38c:	b2db      	uxtb	r3, r3
}
 801f38e:	4618      	mov	r0, r3
 801f390:	3714      	adds	r7, #20
 801f392:	46bd      	mov	sp, r7
 801f394:	bc80      	pop	{r7}
 801f396:	4770      	bx	lr
 801f398:	08020f6c 	.word	0x08020f6c

0801f39c <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801f39c:	b580      	push	{r7, lr}
 801f39e:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801f3a0:	4b04      	ldr	r3, [pc, #16]	; (801f3b4 <UTIL_TIMER_Init+0x18>)
 801f3a2:	2200      	movs	r2, #0
 801f3a4:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801f3a6:	4b04      	ldr	r3, [pc, #16]	; (801f3b8 <UTIL_TIMER_Init+0x1c>)
 801f3a8:	681b      	ldr	r3, [r3, #0]
 801f3aa:	4798      	blx	r3
 801f3ac:	4603      	mov	r3, r0
}
 801f3ae:	4618      	mov	r0, r3
 801f3b0:	bd80      	pop	{r7, pc}
 801f3b2:	bf00      	nop
 801f3b4:	20001c3c 	.word	0x20001c3c
 801f3b8:	08020964 	.word	0x08020964

0801f3bc <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801f3bc:	b580      	push	{r7, lr}
 801f3be:	b084      	sub	sp, #16
 801f3c0:	af00      	add	r7, sp, #0
 801f3c2:	60f8      	str	r0, [r7, #12]
 801f3c4:	60b9      	str	r1, [r7, #8]
 801f3c6:	603b      	str	r3, [r7, #0]
 801f3c8:	4613      	mov	r3, r2
 801f3ca:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801f3cc:	68fb      	ldr	r3, [r7, #12]
 801f3ce:	2b00      	cmp	r3, #0
 801f3d0:	d023      	beq.n	801f41a <UTIL_TIMER_Create+0x5e>
 801f3d2:	683b      	ldr	r3, [r7, #0]
 801f3d4:	2b00      	cmp	r3, #0
 801f3d6:	d020      	beq.n	801f41a <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801f3d8:	68fb      	ldr	r3, [r7, #12]
 801f3da:	2200      	movs	r2, #0
 801f3dc:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801f3de:	4b11      	ldr	r3, [pc, #68]	; (801f424 <UTIL_TIMER_Create+0x68>)
 801f3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f3e2:	68b8      	ldr	r0, [r7, #8]
 801f3e4:	4798      	blx	r3
 801f3e6:	4602      	mov	r2, r0
 801f3e8:	68fb      	ldr	r3, [r7, #12]
 801f3ea:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801f3ec:	68fb      	ldr	r3, [r7, #12]
 801f3ee:	2200      	movs	r2, #0
 801f3f0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801f3f2:	68fb      	ldr	r3, [r7, #12]
 801f3f4:	2200      	movs	r2, #0
 801f3f6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801f3f8:	68fb      	ldr	r3, [r7, #12]
 801f3fa:	2200      	movs	r2, #0
 801f3fc:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801f3fe:	68fb      	ldr	r3, [r7, #12]
 801f400:	683a      	ldr	r2, [r7, #0]
 801f402:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801f404:	68fb      	ldr	r3, [r7, #12]
 801f406:	69ba      	ldr	r2, [r7, #24]
 801f408:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801f40a:	68fb      	ldr	r3, [r7, #12]
 801f40c:	79fa      	ldrb	r2, [r7, #7]
 801f40e:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801f410:	68fb      	ldr	r3, [r7, #12]
 801f412:	2200      	movs	r2, #0
 801f414:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801f416:	2300      	movs	r3, #0
 801f418:	e000      	b.n	801f41c <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801f41a:	2301      	movs	r3, #1
  }
}
 801f41c:	4618      	mov	r0, r3
 801f41e:	3710      	adds	r7, #16
 801f420:	46bd      	mov	sp, r7
 801f422:	bd80      	pop	{r7, pc}
 801f424:	08020964 	.word	0x08020964

0801f428 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801f428:	b580      	push	{r7, lr}
 801f42a:	b08a      	sub	sp, #40	; 0x28
 801f42c:	af00      	add	r7, sp, #0
 801f42e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801f430:	2300      	movs	r3, #0
 801f432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801f436:	687b      	ldr	r3, [r7, #4]
 801f438:	2b00      	cmp	r3, #0
 801f43a:	d056      	beq.n	801f4ea <UTIL_TIMER_Start+0xc2>
 801f43c:	6878      	ldr	r0, [r7, #4]
 801f43e:	f000 f9a9 	bl	801f794 <TimerExists>
 801f442:	4603      	mov	r3, r0
 801f444:	f083 0301 	eor.w	r3, r3, #1
 801f448:	b2db      	uxtb	r3, r3
 801f44a:	2b00      	cmp	r3, #0
 801f44c:	d04d      	beq.n	801f4ea <UTIL_TIMER_Start+0xc2>
 801f44e:	687b      	ldr	r3, [r7, #4]
 801f450:	7a5b      	ldrb	r3, [r3, #9]
 801f452:	2b00      	cmp	r3, #0
 801f454:	d149      	bne.n	801f4ea <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f456:	f3ef 8310 	mrs	r3, PRIMASK
 801f45a:	613b      	str	r3, [r7, #16]
  return(result);
 801f45c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801f45e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801f460:	b672      	cpsid	i
}
 801f462:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801f464:	687b      	ldr	r3, [r7, #4]
 801f466:	685b      	ldr	r3, [r3, #4]
 801f468:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801f46a:	4b24      	ldr	r3, [pc, #144]	; (801f4fc <UTIL_TIMER_Start+0xd4>)
 801f46c:	6a1b      	ldr	r3, [r3, #32]
 801f46e:	4798      	blx	r3
 801f470:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801f472:	6a3a      	ldr	r2, [r7, #32]
 801f474:	69bb      	ldr	r3, [r7, #24]
 801f476:	429a      	cmp	r2, r3
 801f478:	d201      	bcs.n	801f47e <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801f47a:	69bb      	ldr	r3, [r7, #24]
 801f47c:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801f47e:	687b      	ldr	r3, [r7, #4]
 801f480:	6a3a      	ldr	r2, [r7, #32]
 801f482:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801f484:	687b      	ldr	r3, [r7, #4]
 801f486:	2200      	movs	r2, #0
 801f488:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801f48a:	687b      	ldr	r3, [r7, #4]
 801f48c:	2201      	movs	r2, #1
 801f48e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801f490:	687b      	ldr	r3, [r7, #4]
 801f492:	2200      	movs	r2, #0
 801f494:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801f496:	4b1a      	ldr	r3, [pc, #104]	; (801f500 <UTIL_TIMER_Start+0xd8>)
 801f498:	681b      	ldr	r3, [r3, #0]
 801f49a:	2b00      	cmp	r3, #0
 801f49c:	d106      	bne.n	801f4ac <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801f49e:	4b17      	ldr	r3, [pc, #92]	; (801f4fc <UTIL_TIMER_Start+0xd4>)
 801f4a0:	691b      	ldr	r3, [r3, #16]
 801f4a2:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801f4a4:	6878      	ldr	r0, [r7, #4]
 801f4a6:	f000 f9eb 	bl	801f880 <TimerInsertNewHeadTimer>
 801f4aa:	e017      	b.n	801f4dc <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801f4ac:	4b13      	ldr	r3, [pc, #76]	; (801f4fc <UTIL_TIMER_Start+0xd4>)
 801f4ae:	699b      	ldr	r3, [r3, #24]
 801f4b0:	4798      	blx	r3
 801f4b2:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801f4b4:	687b      	ldr	r3, [r7, #4]
 801f4b6:	681a      	ldr	r2, [r3, #0]
 801f4b8:	697b      	ldr	r3, [r7, #20]
 801f4ba:	441a      	add	r2, r3
 801f4bc:	687b      	ldr	r3, [r7, #4]
 801f4be:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801f4c0:	687b      	ldr	r3, [r7, #4]
 801f4c2:	681a      	ldr	r2, [r3, #0]
 801f4c4:	4b0e      	ldr	r3, [pc, #56]	; (801f500 <UTIL_TIMER_Start+0xd8>)
 801f4c6:	681b      	ldr	r3, [r3, #0]
 801f4c8:	681b      	ldr	r3, [r3, #0]
 801f4ca:	429a      	cmp	r2, r3
 801f4cc:	d203      	bcs.n	801f4d6 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801f4ce:	6878      	ldr	r0, [r7, #4]
 801f4d0:	f000 f9d6 	bl	801f880 <TimerInsertNewHeadTimer>
 801f4d4:	e002      	b.n	801f4dc <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801f4d6:	6878      	ldr	r0, [r7, #4]
 801f4d8:	f000 f9a2 	bl	801f820 <TimerInsertTimer>
 801f4dc:	69fb      	ldr	r3, [r7, #28]
 801f4de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f4e0:	68fb      	ldr	r3, [r7, #12]
 801f4e2:	f383 8810 	msr	PRIMASK, r3
}
 801f4e6:	bf00      	nop
  {
 801f4e8:	e002      	b.n	801f4f0 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801f4ea:	2301      	movs	r3, #1
 801f4ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801f4f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801f4f4:	4618      	mov	r0, r3
 801f4f6:	3728      	adds	r7, #40	; 0x28
 801f4f8:	46bd      	mov	sp, r7
 801f4fa:	bd80      	pop	{r7, pc}
 801f4fc:	08020964 	.word	0x08020964
 801f500:	20001c3c 	.word	0x20001c3c

0801f504 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801f504:	b580      	push	{r7, lr}
 801f506:	b088      	sub	sp, #32
 801f508:	af00      	add	r7, sp, #0
 801f50a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801f50c:	2300      	movs	r3, #0
 801f50e:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801f510:	687b      	ldr	r3, [r7, #4]
 801f512:	2b00      	cmp	r3, #0
 801f514:	d05b      	beq.n	801f5ce <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f516:	f3ef 8310 	mrs	r3, PRIMASK
 801f51a:	60fb      	str	r3, [r7, #12]
  return(result);
 801f51c:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801f51e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801f520:	b672      	cpsid	i
}
 801f522:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801f524:	4b2d      	ldr	r3, [pc, #180]	; (801f5dc <UTIL_TIMER_Stop+0xd8>)
 801f526:	681b      	ldr	r3, [r3, #0]
 801f528:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801f52a:	4b2c      	ldr	r3, [pc, #176]	; (801f5dc <UTIL_TIMER_Stop+0xd8>)
 801f52c:	681b      	ldr	r3, [r3, #0]
 801f52e:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801f530:	687b      	ldr	r3, [r7, #4]
 801f532:	2201      	movs	r2, #1
 801f534:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801f536:	4b29      	ldr	r3, [pc, #164]	; (801f5dc <UTIL_TIMER_Stop+0xd8>)
 801f538:	681b      	ldr	r3, [r3, #0]
 801f53a:	2b00      	cmp	r3, #0
 801f53c:	d041      	beq.n	801f5c2 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801f53e:	687b      	ldr	r3, [r7, #4]
 801f540:	2200      	movs	r2, #0
 801f542:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801f544:	4b25      	ldr	r3, [pc, #148]	; (801f5dc <UTIL_TIMER_Stop+0xd8>)
 801f546:	681b      	ldr	r3, [r3, #0]
 801f548:	687a      	ldr	r2, [r7, #4]
 801f54a:	429a      	cmp	r2, r3
 801f54c:	d134      	bne.n	801f5b8 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801f54e:	4b23      	ldr	r3, [pc, #140]	; (801f5dc <UTIL_TIMER_Stop+0xd8>)
 801f550:	681b      	ldr	r3, [r3, #0]
 801f552:	2200      	movs	r2, #0
 801f554:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801f556:	4b21      	ldr	r3, [pc, #132]	; (801f5dc <UTIL_TIMER_Stop+0xd8>)
 801f558:	681b      	ldr	r3, [r3, #0]
 801f55a:	695b      	ldr	r3, [r3, #20]
 801f55c:	2b00      	cmp	r3, #0
 801f55e:	d00a      	beq.n	801f576 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801f560:	4b1e      	ldr	r3, [pc, #120]	; (801f5dc <UTIL_TIMER_Stop+0xd8>)
 801f562:	681b      	ldr	r3, [r3, #0]
 801f564:	695b      	ldr	r3, [r3, #20]
 801f566:	4a1d      	ldr	r2, [pc, #116]	; (801f5dc <UTIL_TIMER_Stop+0xd8>)
 801f568:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801f56a:	4b1c      	ldr	r3, [pc, #112]	; (801f5dc <UTIL_TIMER_Stop+0xd8>)
 801f56c:	681b      	ldr	r3, [r3, #0]
 801f56e:	4618      	mov	r0, r3
 801f570:	f000 f92c 	bl	801f7cc <TimerSetTimeout>
 801f574:	e023      	b.n	801f5be <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801f576:	4b1a      	ldr	r3, [pc, #104]	; (801f5e0 <UTIL_TIMER_Stop+0xdc>)
 801f578:	68db      	ldr	r3, [r3, #12]
 801f57a:	4798      	blx	r3
            TimerListHead = NULL;
 801f57c:	4b17      	ldr	r3, [pc, #92]	; (801f5dc <UTIL_TIMER_Stop+0xd8>)
 801f57e:	2200      	movs	r2, #0
 801f580:	601a      	str	r2, [r3, #0]
 801f582:	e01c      	b.n	801f5be <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801f584:	697a      	ldr	r2, [r7, #20]
 801f586:	687b      	ldr	r3, [r7, #4]
 801f588:	429a      	cmp	r2, r3
 801f58a:	d110      	bne.n	801f5ae <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801f58c:	697b      	ldr	r3, [r7, #20]
 801f58e:	695b      	ldr	r3, [r3, #20]
 801f590:	2b00      	cmp	r3, #0
 801f592:	d006      	beq.n	801f5a2 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801f594:	697b      	ldr	r3, [r7, #20]
 801f596:	695b      	ldr	r3, [r3, #20]
 801f598:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801f59a:	69bb      	ldr	r3, [r7, #24]
 801f59c:	697a      	ldr	r2, [r7, #20]
 801f59e:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801f5a0:	e00d      	b.n	801f5be <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801f5a2:	2300      	movs	r3, #0
 801f5a4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801f5a6:	69bb      	ldr	r3, [r7, #24]
 801f5a8:	697a      	ldr	r2, [r7, #20]
 801f5aa:	615a      	str	r2, [r3, #20]
            break;
 801f5ac:	e007      	b.n	801f5be <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801f5ae:	697b      	ldr	r3, [r7, #20]
 801f5b0:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801f5b2:	697b      	ldr	r3, [r7, #20]
 801f5b4:	695b      	ldr	r3, [r3, #20]
 801f5b6:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801f5b8:	697b      	ldr	r3, [r7, #20]
 801f5ba:	2b00      	cmp	r3, #0
 801f5bc:	d1e2      	bne.n	801f584 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801f5be:	2300      	movs	r3, #0
 801f5c0:	77fb      	strb	r3, [r7, #31]
 801f5c2:	693b      	ldr	r3, [r7, #16]
 801f5c4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f5c6:	68bb      	ldr	r3, [r7, #8]
 801f5c8:	f383 8810 	msr	PRIMASK, r3
}
 801f5cc:	e001      	b.n	801f5d2 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801f5ce:	2301      	movs	r3, #1
 801f5d0:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801f5d2:	7ffb      	ldrb	r3, [r7, #31]
}
 801f5d4:	4618      	mov	r0, r3
 801f5d6:	3720      	adds	r7, #32
 801f5d8:	46bd      	mov	sp, r7
 801f5da:	bd80      	pop	{r7, pc}
 801f5dc:	20001c3c 	.word	0x20001c3c
 801f5e0:	08020964 	.word	0x08020964

0801f5e4 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801f5e4:	b580      	push	{r7, lr}
 801f5e6:	b084      	sub	sp, #16
 801f5e8:	af00      	add	r7, sp, #0
 801f5ea:	6078      	str	r0, [r7, #4]
 801f5ec:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801f5ee:	2300      	movs	r3, #0
 801f5f0:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801f5f2:	687b      	ldr	r3, [r7, #4]
 801f5f4:	2b00      	cmp	r3, #0
 801f5f6:	d102      	bne.n	801f5fe <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801f5f8:	2301      	movs	r3, #1
 801f5fa:	73fb      	strb	r3, [r7, #15]
 801f5fc:	e014      	b.n	801f628 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801f5fe:	4b0d      	ldr	r3, [pc, #52]	; (801f634 <UTIL_TIMER_SetPeriod+0x50>)
 801f600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f602:	6838      	ldr	r0, [r7, #0]
 801f604:	4798      	blx	r3
 801f606:	4602      	mov	r2, r0
 801f608:	687b      	ldr	r3, [r7, #4]
 801f60a:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801f60c:	6878      	ldr	r0, [r7, #4]
 801f60e:	f000 f8c1 	bl	801f794 <TimerExists>
 801f612:	4603      	mov	r3, r0
 801f614:	2b00      	cmp	r3, #0
 801f616:	d007      	beq.n	801f628 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801f618:	6878      	ldr	r0, [r7, #4]
 801f61a:	f7ff ff73 	bl	801f504 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801f61e:	6878      	ldr	r0, [r7, #4]
 801f620:	f7ff ff02 	bl	801f428 <UTIL_TIMER_Start>
 801f624:	4603      	mov	r3, r0
 801f626:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801f628:	7bfb      	ldrb	r3, [r7, #15]
}
 801f62a:	4618      	mov	r0, r3
 801f62c:	3710      	adds	r7, #16
 801f62e:	46bd      	mov	sp, r7
 801f630:	bd80      	pop	{r7, pc}
 801f632:	bf00      	nop
 801f634:	08020964 	.word	0x08020964

0801f638 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801f638:	b590      	push	{r4, r7, lr}
 801f63a:	b089      	sub	sp, #36	; 0x24
 801f63c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f63e:	f3ef 8310 	mrs	r3, PRIMASK
 801f642:	60bb      	str	r3, [r7, #8]
  return(result);
 801f644:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801f646:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801f648:	b672      	cpsid	i
}
 801f64a:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801f64c:	4b38      	ldr	r3, [pc, #224]	; (801f730 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801f64e:	695b      	ldr	r3, [r3, #20]
 801f650:	4798      	blx	r3
 801f652:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801f654:	4b36      	ldr	r3, [pc, #216]	; (801f730 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801f656:	691b      	ldr	r3, [r3, #16]
 801f658:	4798      	blx	r3
 801f65a:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801f65c:	693a      	ldr	r2, [r7, #16]
 801f65e:	697b      	ldr	r3, [r7, #20]
 801f660:	1ad3      	subs	r3, r2, r3
 801f662:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801f664:	4b33      	ldr	r3, [pc, #204]	; (801f734 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f666:	681b      	ldr	r3, [r3, #0]
 801f668:	2b00      	cmp	r3, #0
 801f66a:	d037      	beq.n	801f6dc <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801f66c:	4b31      	ldr	r3, [pc, #196]	; (801f734 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f66e:	681b      	ldr	r3, [r3, #0]
 801f670:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801f672:	69fb      	ldr	r3, [r7, #28]
 801f674:	681b      	ldr	r3, [r3, #0]
 801f676:	68fa      	ldr	r2, [r7, #12]
 801f678:	429a      	cmp	r2, r3
 801f67a:	d206      	bcs.n	801f68a <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801f67c:	69fb      	ldr	r3, [r7, #28]
 801f67e:	681a      	ldr	r2, [r3, #0]
 801f680:	68fb      	ldr	r3, [r7, #12]
 801f682:	1ad2      	subs	r2, r2, r3
 801f684:	69fb      	ldr	r3, [r7, #28]
 801f686:	601a      	str	r2, [r3, #0]
 801f688:	e002      	b.n	801f690 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801f68a:	69fb      	ldr	r3, [r7, #28]
 801f68c:	2200      	movs	r2, #0
 801f68e:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801f690:	69fb      	ldr	r3, [r7, #28]
 801f692:	695b      	ldr	r3, [r3, #20]
 801f694:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801f696:	69fb      	ldr	r3, [r7, #28]
 801f698:	2b00      	cmp	r3, #0
 801f69a:	d1ea      	bne.n	801f672 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801f69c:	e01e      	b.n	801f6dc <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801f69e:	4b25      	ldr	r3, [pc, #148]	; (801f734 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f6a0:	681b      	ldr	r3, [r3, #0]
 801f6a2:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801f6a4:	4b23      	ldr	r3, [pc, #140]	; (801f734 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f6a6:	681b      	ldr	r3, [r3, #0]
 801f6a8:	695b      	ldr	r3, [r3, #20]
 801f6aa:	4a22      	ldr	r2, [pc, #136]	; (801f734 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f6ac:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801f6ae:	69fb      	ldr	r3, [r7, #28]
 801f6b0:	2200      	movs	r2, #0
 801f6b2:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801f6b4:	69fb      	ldr	r3, [r7, #28]
 801f6b6:	2200      	movs	r2, #0
 801f6b8:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801f6ba:	69fb      	ldr	r3, [r7, #28]
 801f6bc:	68db      	ldr	r3, [r3, #12]
 801f6be:	69fa      	ldr	r2, [r7, #28]
 801f6c0:	6912      	ldr	r2, [r2, #16]
 801f6c2:	4610      	mov	r0, r2
 801f6c4:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801f6c6:	69fb      	ldr	r3, [r7, #28]
 801f6c8:	7adb      	ldrb	r3, [r3, #11]
 801f6ca:	2b01      	cmp	r3, #1
 801f6cc:	d106      	bne.n	801f6dc <UTIL_TIMER_IRQ_Handler+0xa4>
 801f6ce:	69fb      	ldr	r3, [r7, #28]
 801f6d0:	7a9b      	ldrb	r3, [r3, #10]
 801f6d2:	2b00      	cmp	r3, #0
 801f6d4:	d102      	bne.n	801f6dc <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801f6d6:	69f8      	ldr	r0, [r7, #28]
 801f6d8:	f7ff fea6 	bl	801f428 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801f6dc:	4b15      	ldr	r3, [pc, #84]	; (801f734 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f6de:	681b      	ldr	r3, [r3, #0]
 801f6e0:	2b00      	cmp	r3, #0
 801f6e2:	d00d      	beq.n	801f700 <UTIL_TIMER_IRQ_Handler+0xc8>
 801f6e4:	4b13      	ldr	r3, [pc, #76]	; (801f734 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f6e6:	681b      	ldr	r3, [r3, #0]
 801f6e8:	681b      	ldr	r3, [r3, #0]
 801f6ea:	2b00      	cmp	r3, #0
 801f6ec:	d0d7      	beq.n	801f69e <UTIL_TIMER_IRQ_Handler+0x66>
 801f6ee:	4b11      	ldr	r3, [pc, #68]	; (801f734 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f6f0:	681b      	ldr	r3, [r3, #0]
 801f6f2:	681c      	ldr	r4, [r3, #0]
 801f6f4:	4b0e      	ldr	r3, [pc, #56]	; (801f730 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801f6f6:	699b      	ldr	r3, [r3, #24]
 801f6f8:	4798      	blx	r3
 801f6fa:	4603      	mov	r3, r0
 801f6fc:	429c      	cmp	r4, r3
 801f6fe:	d3ce      	bcc.n	801f69e <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801f700:	4b0c      	ldr	r3, [pc, #48]	; (801f734 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f702:	681b      	ldr	r3, [r3, #0]
 801f704:	2b00      	cmp	r3, #0
 801f706:	d009      	beq.n	801f71c <UTIL_TIMER_IRQ_Handler+0xe4>
 801f708:	4b0a      	ldr	r3, [pc, #40]	; (801f734 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f70a:	681b      	ldr	r3, [r3, #0]
 801f70c:	7a1b      	ldrb	r3, [r3, #8]
 801f70e:	2b00      	cmp	r3, #0
 801f710:	d104      	bne.n	801f71c <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801f712:	4b08      	ldr	r3, [pc, #32]	; (801f734 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f714:	681b      	ldr	r3, [r3, #0]
 801f716:	4618      	mov	r0, r3
 801f718:	f000 f858 	bl	801f7cc <TimerSetTimeout>
 801f71c:	69bb      	ldr	r3, [r7, #24]
 801f71e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f720:	687b      	ldr	r3, [r7, #4]
 801f722:	f383 8810 	msr	PRIMASK, r3
}
 801f726:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801f728:	bf00      	nop
 801f72a:	3724      	adds	r7, #36	; 0x24
 801f72c:	46bd      	mov	sp, r7
 801f72e:	bd90      	pop	{r4, r7, pc}
 801f730:	08020964 	.word	0x08020964
 801f734:	20001c3c 	.word	0x20001c3c

0801f738 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801f738:	b580      	push	{r7, lr}
 801f73a:	b082      	sub	sp, #8
 801f73c:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801f73e:	4b06      	ldr	r3, [pc, #24]	; (801f758 <UTIL_TIMER_GetCurrentTime+0x20>)
 801f740:	69db      	ldr	r3, [r3, #28]
 801f742:	4798      	blx	r3
 801f744:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801f746:	4b04      	ldr	r3, [pc, #16]	; (801f758 <UTIL_TIMER_GetCurrentTime+0x20>)
 801f748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f74a:	6878      	ldr	r0, [r7, #4]
 801f74c:	4798      	blx	r3
 801f74e:	4603      	mov	r3, r0
}
 801f750:	4618      	mov	r0, r3
 801f752:	3708      	adds	r7, #8
 801f754:	46bd      	mov	sp, r7
 801f756:	bd80      	pop	{r7, pc}
 801f758:	08020964 	.word	0x08020964

0801f75c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801f75c:	b580      	push	{r7, lr}
 801f75e:	b084      	sub	sp, #16
 801f760:	af00      	add	r7, sp, #0
 801f762:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801f764:	4b0a      	ldr	r3, [pc, #40]	; (801f790 <UTIL_TIMER_GetElapsedTime+0x34>)
 801f766:	69db      	ldr	r3, [r3, #28]
 801f768:	4798      	blx	r3
 801f76a:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801f76c:	4b08      	ldr	r3, [pc, #32]	; (801f790 <UTIL_TIMER_GetElapsedTime+0x34>)
 801f76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f770:	6878      	ldr	r0, [r7, #4]
 801f772:	4798      	blx	r3
 801f774:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801f776:	4b06      	ldr	r3, [pc, #24]	; (801f790 <UTIL_TIMER_GetElapsedTime+0x34>)
 801f778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f77a:	68f9      	ldr	r1, [r7, #12]
 801f77c:	68ba      	ldr	r2, [r7, #8]
 801f77e:	1a8a      	subs	r2, r1, r2
 801f780:	4610      	mov	r0, r2
 801f782:	4798      	blx	r3
 801f784:	4603      	mov	r3, r0
}
 801f786:	4618      	mov	r0, r3
 801f788:	3710      	adds	r7, #16
 801f78a:	46bd      	mov	sp, r7
 801f78c:	bd80      	pop	{r7, pc}
 801f78e:	bf00      	nop
 801f790:	08020964 	.word	0x08020964

0801f794 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801f794:	b480      	push	{r7}
 801f796:	b085      	sub	sp, #20
 801f798:	af00      	add	r7, sp, #0
 801f79a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801f79c:	4b0a      	ldr	r3, [pc, #40]	; (801f7c8 <TimerExists+0x34>)
 801f79e:	681b      	ldr	r3, [r3, #0]
 801f7a0:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801f7a2:	e008      	b.n	801f7b6 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801f7a4:	68fa      	ldr	r2, [r7, #12]
 801f7a6:	687b      	ldr	r3, [r7, #4]
 801f7a8:	429a      	cmp	r2, r3
 801f7aa:	d101      	bne.n	801f7b0 <TimerExists+0x1c>
    {
      return true;
 801f7ac:	2301      	movs	r3, #1
 801f7ae:	e006      	b.n	801f7be <TimerExists+0x2a>
    }
    cur = cur->Next;
 801f7b0:	68fb      	ldr	r3, [r7, #12]
 801f7b2:	695b      	ldr	r3, [r3, #20]
 801f7b4:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801f7b6:	68fb      	ldr	r3, [r7, #12]
 801f7b8:	2b00      	cmp	r3, #0
 801f7ba:	d1f3      	bne.n	801f7a4 <TimerExists+0x10>
  }
  return false;
 801f7bc:	2300      	movs	r3, #0
}
 801f7be:	4618      	mov	r0, r3
 801f7c0:	3714      	adds	r7, #20
 801f7c2:	46bd      	mov	sp, r7
 801f7c4:	bc80      	pop	{r7}
 801f7c6:	4770      	bx	lr
 801f7c8:	20001c3c 	.word	0x20001c3c

0801f7cc <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801f7cc:	b590      	push	{r4, r7, lr}
 801f7ce:	b085      	sub	sp, #20
 801f7d0:	af00      	add	r7, sp, #0
 801f7d2:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801f7d4:	4b11      	ldr	r3, [pc, #68]	; (801f81c <TimerSetTimeout+0x50>)
 801f7d6:	6a1b      	ldr	r3, [r3, #32]
 801f7d8:	4798      	blx	r3
 801f7da:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801f7dc:	687b      	ldr	r3, [r7, #4]
 801f7de:	2201      	movs	r2, #1
 801f7e0:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801f7e2:	687b      	ldr	r3, [r7, #4]
 801f7e4:	681c      	ldr	r4, [r3, #0]
 801f7e6:	4b0d      	ldr	r3, [pc, #52]	; (801f81c <TimerSetTimeout+0x50>)
 801f7e8:	699b      	ldr	r3, [r3, #24]
 801f7ea:	4798      	blx	r3
 801f7ec:	4602      	mov	r2, r0
 801f7ee:	68fb      	ldr	r3, [r7, #12]
 801f7f0:	4413      	add	r3, r2
 801f7f2:	429c      	cmp	r4, r3
 801f7f4:	d207      	bcs.n	801f806 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801f7f6:	4b09      	ldr	r3, [pc, #36]	; (801f81c <TimerSetTimeout+0x50>)
 801f7f8:	699b      	ldr	r3, [r3, #24]
 801f7fa:	4798      	blx	r3
 801f7fc:	4602      	mov	r2, r0
 801f7fe:	68fb      	ldr	r3, [r7, #12]
 801f800:	441a      	add	r2, r3
 801f802:	687b      	ldr	r3, [r7, #4]
 801f804:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801f806:	4b05      	ldr	r3, [pc, #20]	; (801f81c <TimerSetTimeout+0x50>)
 801f808:	689b      	ldr	r3, [r3, #8]
 801f80a:	687a      	ldr	r2, [r7, #4]
 801f80c:	6812      	ldr	r2, [r2, #0]
 801f80e:	4610      	mov	r0, r2
 801f810:	4798      	blx	r3
}
 801f812:	bf00      	nop
 801f814:	3714      	adds	r7, #20
 801f816:	46bd      	mov	sp, r7
 801f818:	bd90      	pop	{r4, r7, pc}
 801f81a:	bf00      	nop
 801f81c:	08020964 	.word	0x08020964

0801f820 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801f820:	b480      	push	{r7}
 801f822:	b085      	sub	sp, #20
 801f824:	af00      	add	r7, sp, #0
 801f826:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801f828:	4b14      	ldr	r3, [pc, #80]	; (801f87c <TimerInsertTimer+0x5c>)
 801f82a:	681b      	ldr	r3, [r3, #0]
 801f82c:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801f82e:	4b13      	ldr	r3, [pc, #76]	; (801f87c <TimerInsertTimer+0x5c>)
 801f830:	681b      	ldr	r3, [r3, #0]
 801f832:	695b      	ldr	r3, [r3, #20]
 801f834:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801f836:	e012      	b.n	801f85e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801f838:	687b      	ldr	r3, [r7, #4]
 801f83a:	681a      	ldr	r2, [r3, #0]
 801f83c:	68bb      	ldr	r3, [r7, #8]
 801f83e:	681b      	ldr	r3, [r3, #0]
 801f840:	429a      	cmp	r2, r3
 801f842:	d905      	bls.n	801f850 <TimerInsertTimer+0x30>
    {
        cur = next;
 801f844:	68bb      	ldr	r3, [r7, #8]
 801f846:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801f848:	68bb      	ldr	r3, [r7, #8]
 801f84a:	695b      	ldr	r3, [r3, #20]
 801f84c:	60bb      	str	r3, [r7, #8]
 801f84e:	e006      	b.n	801f85e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801f850:	68fb      	ldr	r3, [r7, #12]
 801f852:	687a      	ldr	r2, [r7, #4]
 801f854:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801f856:	687b      	ldr	r3, [r7, #4]
 801f858:	68ba      	ldr	r2, [r7, #8]
 801f85a:	615a      	str	r2, [r3, #20]
        return;
 801f85c:	e009      	b.n	801f872 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801f85e:	68fb      	ldr	r3, [r7, #12]
 801f860:	695b      	ldr	r3, [r3, #20]
 801f862:	2b00      	cmp	r3, #0
 801f864:	d1e8      	bne.n	801f838 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801f866:	68fb      	ldr	r3, [r7, #12]
 801f868:	687a      	ldr	r2, [r7, #4]
 801f86a:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801f86c:	687b      	ldr	r3, [r7, #4]
 801f86e:	2200      	movs	r2, #0
 801f870:	615a      	str	r2, [r3, #20]
}
 801f872:	3714      	adds	r7, #20
 801f874:	46bd      	mov	sp, r7
 801f876:	bc80      	pop	{r7}
 801f878:	4770      	bx	lr
 801f87a:	bf00      	nop
 801f87c:	20001c3c 	.word	0x20001c3c

0801f880 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801f880:	b580      	push	{r7, lr}
 801f882:	b084      	sub	sp, #16
 801f884:	af00      	add	r7, sp, #0
 801f886:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801f888:	4b0b      	ldr	r3, [pc, #44]	; (801f8b8 <TimerInsertNewHeadTimer+0x38>)
 801f88a:	681b      	ldr	r3, [r3, #0]
 801f88c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801f88e:	68fb      	ldr	r3, [r7, #12]
 801f890:	2b00      	cmp	r3, #0
 801f892:	d002      	beq.n	801f89a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801f894:	68fb      	ldr	r3, [r7, #12]
 801f896:	2200      	movs	r2, #0
 801f898:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801f89a:	687b      	ldr	r3, [r7, #4]
 801f89c:	68fa      	ldr	r2, [r7, #12]
 801f89e:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801f8a0:	4a05      	ldr	r2, [pc, #20]	; (801f8b8 <TimerInsertNewHeadTimer+0x38>)
 801f8a2:	687b      	ldr	r3, [r7, #4]
 801f8a4:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801f8a6:	4b04      	ldr	r3, [pc, #16]	; (801f8b8 <TimerInsertNewHeadTimer+0x38>)
 801f8a8:	681b      	ldr	r3, [r3, #0]
 801f8aa:	4618      	mov	r0, r3
 801f8ac:	f7ff ff8e 	bl	801f7cc <TimerSetTimeout>
}
 801f8b0:	bf00      	nop
 801f8b2:	3710      	adds	r7, #16
 801f8b4:	46bd      	mov	sp, r7
 801f8b6:	bd80      	pop	{r7, pc}
 801f8b8:	20001c3c 	.word	0x20001c3c

0801f8bc <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801f8bc:	b580      	push	{r7, lr}
 801f8be:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801f8c0:	2218      	movs	r2, #24
 801f8c2:	2100      	movs	r1, #0
 801f8c4:	4807      	ldr	r0, [pc, #28]	; (801f8e4 <UTIL_ADV_TRACE_Init+0x28>)
 801f8c6:	f7ff f902 	bl	801eace <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801f8ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801f8ce:	2100      	movs	r1, #0
 801f8d0:	4805      	ldr	r0, [pc, #20]	; (801f8e8 <UTIL_ADV_TRACE_Init+0x2c>)
 801f8d2:	f7ff f8fc 	bl	801eace <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801f8d6:	4b05      	ldr	r3, [pc, #20]	; (801f8ec <UTIL_ADV_TRACE_Init+0x30>)
 801f8d8:	681b      	ldr	r3, [r3, #0]
 801f8da:	4805      	ldr	r0, [pc, #20]	; (801f8f0 <UTIL_ADV_TRACE_Init+0x34>)
 801f8dc:	4798      	blx	r3
 801f8de:	4603      	mov	r3, r0
}
 801f8e0:	4618      	mov	r0, r3
 801f8e2:	bd80      	pop	{r7, pc}
 801f8e4:	20001c40 	.word	0x20001c40
 801f8e8:	20001c58 	.word	0x20001c58
 801f8ec:	080209a4 	.word	0x080209a4
 801f8f0:	0801fb5d 	.word	0x0801fb5d

0801f8f4 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801f8f4:	b480      	push	{r7}
 801f8f6:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801f8f8:	4b06      	ldr	r3, [pc, #24]	; (801f914 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801f8fa:	8a5a      	ldrh	r2, [r3, #18]
 801f8fc:	4b05      	ldr	r3, [pc, #20]	; (801f914 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801f8fe:	8a1b      	ldrh	r3, [r3, #16]
 801f900:	429a      	cmp	r2, r3
 801f902:	d101      	bne.n	801f908 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801f904:	2301      	movs	r3, #1
 801f906:	e000      	b.n	801f90a <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801f908:	2300      	movs	r3, #0
}
 801f90a:	4618      	mov	r0, r3
 801f90c:	46bd      	mov	sp, r7
 801f90e:	bc80      	pop	{r7}
 801f910:	4770      	bx	lr
 801f912:	bf00      	nop
 801f914:	20001c40 	.word	0x20001c40

0801f918 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801f918:	b408      	push	{r3}
 801f91a:	b580      	push	{r7, lr}
 801f91c:	b08d      	sub	sp, #52	; 0x34
 801f91e:	af00      	add	r7, sp, #0
 801f920:	60f8      	str	r0, [r7, #12]
 801f922:	60b9      	str	r1, [r7, #8]
 801f924:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801f926:	2300      	movs	r3, #0
 801f928:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801f92a:	2300      	movs	r3, #0
 801f92c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801f92e:	4b37      	ldr	r3, [pc, #220]	; (801fa0c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801f930:	7a1b      	ldrb	r3, [r3, #8]
 801f932:	461a      	mov	r2, r3
 801f934:	68fb      	ldr	r3, [r7, #12]
 801f936:	4293      	cmp	r3, r2
 801f938:	d902      	bls.n	801f940 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801f93a:	f06f 0304 	mvn.w	r3, #4
 801f93e:	e05e      	b.n	801f9fe <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801f940:	4b32      	ldr	r3, [pc, #200]	; (801fa0c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801f942:	68da      	ldr	r2, [r3, #12]
 801f944:	68bb      	ldr	r3, [r7, #8]
 801f946:	4013      	ands	r3, r2
 801f948:	68ba      	ldr	r2, [r7, #8]
 801f94a:	429a      	cmp	r2, r3
 801f94c:	d002      	beq.n	801f954 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801f94e:	f06f 0305 	mvn.w	r3, #5
 801f952:	e054      	b.n	801f9fe <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801f954:	4b2d      	ldr	r3, [pc, #180]	; (801fa0c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801f956:	685b      	ldr	r3, [r3, #4]
 801f958:	2b00      	cmp	r3, #0
 801f95a:	d00a      	beq.n	801f972 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801f95c:	687b      	ldr	r3, [r7, #4]
 801f95e:	2b00      	cmp	r3, #0
 801f960:	d007      	beq.n	801f972 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801f962:	4b2a      	ldr	r3, [pc, #168]	; (801fa0c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801f964:	685b      	ldr	r3, [r3, #4]
 801f966:	f107 0116 	add.w	r1, r7, #22
 801f96a:	f107 0218 	add.w	r2, r7, #24
 801f96e:	4610      	mov	r0, r2
 801f970:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801f972:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f976:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801f978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f97a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801f97c:	f44f 7100 	mov.w	r1, #512	; 0x200
 801f980:	4823      	ldr	r0, [pc, #140]	; (801fa10 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801f982:	f7ff fb31 	bl	801efe8 <tiny_vsnprintf_like>
 801f986:	4603      	mov	r3, r0
 801f988:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801f98a:	f000 f9f1 	bl	801fd70 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801f98e:	8afa      	ldrh	r2, [r7, #22]
 801f990:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801f992:	4413      	add	r3, r2
 801f994:	b29b      	uxth	r3, r3
 801f996:	f107 0214 	add.w	r2, r7, #20
 801f99a:	4611      	mov	r1, r2
 801f99c:	4618      	mov	r0, r3
 801f99e:	f000 f969 	bl	801fc74 <TRACE_AllocateBufer>
 801f9a2:	4603      	mov	r3, r0
 801f9a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801f9a8:	d025      	beq.n	801f9f6 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801f9aa:	2300      	movs	r3, #0
 801f9ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801f9ae:	e00e      	b.n	801f9ce <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801f9b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801f9b2:	8aba      	ldrh	r2, [r7, #20]
 801f9b4:	3330      	adds	r3, #48	; 0x30
 801f9b6:	443b      	add	r3, r7
 801f9b8:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801f9bc:	4b15      	ldr	r3, [pc, #84]	; (801fa14 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801f9be:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801f9c0:	8abb      	ldrh	r3, [r7, #20]
 801f9c2:	3301      	adds	r3, #1
 801f9c4:	b29b      	uxth	r3, r3
 801f9c6:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801f9c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801f9ca:	3301      	adds	r3, #1
 801f9cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801f9ce:	8afb      	ldrh	r3, [r7, #22]
 801f9d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801f9d2:	429a      	cmp	r2, r3
 801f9d4:	d3ec      	bcc.n	801f9b0 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801f9d6:	8abb      	ldrh	r3, [r7, #20]
 801f9d8:	461a      	mov	r2, r3
 801f9da:	4b0e      	ldr	r3, [pc, #56]	; (801fa14 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801f9dc:	18d0      	adds	r0, r2, r3
 801f9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f9e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801f9e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 801f9e6:	f7ff faff 	bl	801efe8 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801f9ea:	f000 f9df 	bl	801fdac <TRACE_UnLock>

    return TRACE_Send();
 801f9ee:	f000 f831 	bl	801fa54 <TRACE_Send>
 801f9f2:	4603      	mov	r3, r0
 801f9f4:	e003      	b.n	801f9fe <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801f9f6:	f000 f9d9 	bl	801fdac <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801f9fa:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801f9fe:	4618      	mov	r0, r3
 801fa00:	3734      	adds	r7, #52	; 0x34
 801fa02:	46bd      	mov	sp, r7
 801fa04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801fa08:	b001      	add	sp, #4
 801fa0a:	4770      	bx	lr
 801fa0c:	20001c40 	.word	0x20001c40
 801fa10:	20002058 	.word	0x20002058
 801fa14:	20001c58 	.word	0x20001c58

0801fa18 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801fa18:	b480      	push	{r7}
 801fa1a:	b083      	sub	sp, #12
 801fa1c:	af00      	add	r7, sp, #0
 801fa1e:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801fa20:	4a03      	ldr	r2, [pc, #12]	; (801fa30 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801fa22:	687b      	ldr	r3, [r7, #4]
 801fa24:	6053      	str	r3, [r2, #4]
}
 801fa26:	bf00      	nop
 801fa28:	370c      	adds	r7, #12
 801fa2a:	46bd      	mov	sp, r7
 801fa2c:	bc80      	pop	{r7}
 801fa2e:	4770      	bx	lr
 801fa30:	20001c40 	.word	0x20001c40

0801fa34 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801fa34:	b480      	push	{r7}
 801fa36:	b083      	sub	sp, #12
 801fa38:	af00      	add	r7, sp, #0
 801fa3a:	4603      	mov	r3, r0
 801fa3c:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801fa3e:	4a04      	ldr	r2, [pc, #16]	; (801fa50 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801fa40:	79fb      	ldrb	r3, [r7, #7]
 801fa42:	7213      	strb	r3, [r2, #8]
}
 801fa44:	bf00      	nop
 801fa46:	370c      	adds	r7, #12
 801fa48:	46bd      	mov	sp, r7
 801fa4a:	bc80      	pop	{r7}
 801fa4c:	4770      	bx	lr
 801fa4e:	bf00      	nop
 801fa50:	20001c40 	.word	0x20001c40

0801fa54 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801fa54:	b580      	push	{r7, lr}
 801fa56:	b088      	sub	sp, #32
 801fa58:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801fa5a:	2300      	movs	r3, #0
 801fa5c:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801fa5e:	2300      	movs	r3, #0
 801fa60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fa62:	f3ef 8310 	mrs	r3, PRIMASK
 801fa66:	613b      	str	r3, [r7, #16]
  return(result);
 801fa68:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801fa6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801fa6c:	b672      	cpsid	i
}
 801fa6e:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801fa70:	f000 f9ba 	bl	801fde8 <TRACE_IsLocked>
 801fa74:	4603      	mov	r3, r0
 801fa76:	2b00      	cmp	r3, #0
 801fa78:	d15d      	bne.n	801fb36 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801fa7a:	f000 f979 	bl	801fd70 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801fa7e:	4b34      	ldr	r3, [pc, #208]	; (801fb50 <TRACE_Send+0xfc>)
 801fa80:	8a1a      	ldrh	r2, [r3, #16]
 801fa82:	4b33      	ldr	r3, [pc, #204]	; (801fb50 <TRACE_Send+0xfc>)
 801fa84:	8a5b      	ldrh	r3, [r3, #18]
 801fa86:	429a      	cmp	r2, r3
 801fa88:	d04d      	beq.n	801fb26 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801fa8a:	4b31      	ldr	r3, [pc, #196]	; (801fb50 <TRACE_Send+0xfc>)
 801fa8c:	789b      	ldrb	r3, [r3, #2]
 801fa8e:	2b01      	cmp	r3, #1
 801fa90:	d117      	bne.n	801fac2 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801fa92:	4b2f      	ldr	r3, [pc, #188]	; (801fb50 <TRACE_Send+0xfc>)
 801fa94:	881a      	ldrh	r2, [r3, #0]
 801fa96:	4b2e      	ldr	r3, [pc, #184]	; (801fb50 <TRACE_Send+0xfc>)
 801fa98:	8a1b      	ldrh	r3, [r3, #16]
 801fa9a:	1ad3      	subs	r3, r2, r3
 801fa9c:	b29a      	uxth	r2, r3
 801fa9e:	4b2c      	ldr	r3, [pc, #176]	; (801fb50 <TRACE_Send+0xfc>)
 801faa0:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801faa2:	4b2b      	ldr	r3, [pc, #172]	; (801fb50 <TRACE_Send+0xfc>)
 801faa4:	2202      	movs	r2, #2
 801faa6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801faa8:	4b29      	ldr	r3, [pc, #164]	; (801fb50 <TRACE_Send+0xfc>)
 801faaa:	2200      	movs	r2, #0
 801faac:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801faae:	4b28      	ldr	r3, [pc, #160]	; (801fb50 <TRACE_Send+0xfc>)
 801fab0:	8a9b      	ldrh	r3, [r3, #20]
 801fab2:	2b00      	cmp	r3, #0
 801fab4:	d105      	bne.n	801fac2 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801fab6:	4b26      	ldr	r3, [pc, #152]	; (801fb50 <TRACE_Send+0xfc>)
 801fab8:	2200      	movs	r2, #0
 801faba:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801fabc:	4b24      	ldr	r3, [pc, #144]	; (801fb50 <TRACE_Send+0xfc>)
 801fabe:	2200      	movs	r2, #0
 801fac0:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801fac2:	4b23      	ldr	r3, [pc, #140]	; (801fb50 <TRACE_Send+0xfc>)
 801fac4:	789b      	ldrb	r3, [r3, #2]
 801fac6:	2b00      	cmp	r3, #0
 801fac8:	d115      	bne.n	801faf6 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801faca:	4b21      	ldr	r3, [pc, #132]	; (801fb50 <TRACE_Send+0xfc>)
 801facc:	8a5a      	ldrh	r2, [r3, #18]
 801face:	4b20      	ldr	r3, [pc, #128]	; (801fb50 <TRACE_Send+0xfc>)
 801fad0:	8a1b      	ldrh	r3, [r3, #16]
 801fad2:	429a      	cmp	r2, r3
 801fad4:	d908      	bls.n	801fae8 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801fad6:	4b1e      	ldr	r3, [pc, #120]	; (801fb50 <TRACE_Send+0xfc>)
 801fad8:	8a5a      	ldrh	r2, [r3, #18]
 801fada:	4b1d      	ldr	r3, [pc, #116]	; (801fb50 <TRACE_Send+0xfc>)
 801fadc:	8a1b      	ldrh	r3, [r3, #16]
 801fade:	1ad3      	subs	r3, r2, r3
 801fae0:	b29a      	uxth	r2, r3
 801fae2:	4b1b      	ldr	r3, [pc, #108]	; (801fb50 <TRACE_Send+0xfc>)
 801fae4:	829a      	strh	r2, [r3, #20]
 801fae6:	e006      	b.n	801faf6 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801fae8:	4b19      	ldr	r3, [pc, #100]	; (801fb50 <TRACE_Send+0xfc>)
 801faea:	8a1b      	ldrh	r3, [r3, #16]
 801faec:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801faf0:	b29a      	uxth	r2, r3
 801faf2:	4b17      	ldr	r3, [pc, #92]	; (801fb50 <TRACE_Send+0xfc>)
 801faf4:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801faf6:	4b16      	ldr	r3, [pc, #88]	; (801fb50 <TRACE_Send+0xfc>)
 801faf8:	8a1b      	ldrh	r3, [r3, #16]
 801fafa:	461a      	mov	r2, r3
 801fafc:	4b15      	ldr	r3, [pc, #84]	; (801fb54 <TRACE_Send+0x100>)
 801fafe:	4413      	add	r3, r2
 801fb00:	61bb      	str	r3, [r7, #24]
 801fb02:	697b      	ldr	r3, [r7, #20]
 801fb04:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fb06:	68fb      	ldr	r3, [r7, #12]
 801fb08:	f383 8810 	msr	PRIMASK, r3
}
 801fb0c:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801fb0e:	f7e2 fc9d 	bl	800244c <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801fb12:	4b11      	ldr	r3, [pc, #68]	; (801fb58 <TRACE_Send+0x104>)
 801fb14:	68db      	ldr	r3, [r3, #12]
 801fb16:	4a0e      	ldr	r2, [pc, #56]	; (801fb50 <TRACE_Send+0xfc>)
 801fb18:	8a92      	ldrh	r2, [r2, #20]
 801fb1a:	4611      	mov	r1, r2
 801fb1c:	69b8      	ldr	r0, [r7, #24]
 801fb1e:	4798      	blx	r3
 801fb20:	4603      	mov	r3, r0
 801fb22:	77fb      	strb	r3, [r7, #31]
 801fb24:	e00d      	b.n	801fb42 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801fb26:	f000 f941 	bl	801fdac <TRACE_UnLock>
 801fb2a:	697b      	ldr	r3, [r7, #20]
 801fb2c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fb2e:	68bb      	ldr	r3, [r7, #8]
 801fb30:	f383 8810 	msr	PRIMASK, r3
}
 801fb34:	e005      	b.n	801fb42 <TRACE_Send+0xee>
 801fb36:	697b      	ldr	r3, [r7, #20]
 801fb38:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fb3a:	687b      	ldr	r3, [r7, #4]
 801fb3c:	f383 8810 	msr	PRIMASK, r3
}
 801fb40:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801fb42:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801fb46:	4618      	mov	r0, r3
 801fb48:	3720      	adds	r7, #32
 801fb4a:	46bd      	mov	sp, r7
 801fb4c:	bd80      	pop	{r7, pc}
 801fb4e:	bf00      	nop
 801fb50:	20001c40 	.word	0x20001c40
 801fb54:	20001c58 	.word	0x20001c58
 801fb58:	080209a4 	.word	0x080209a4

0801fb5c <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801fb5c:	b580      	push	{r7, lr}
 801fb5e:	b088      	sub	sp, #32
 801fb60:	af00      	add	r7, sp, #0
 801fb62:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801fb64:	2300      	movs	r3, #0
 801fb66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fb68:	f3ef 8310 	mrs	r3, PRIMASK
 801fb6c:	617b      	str	r3, [r7, #20]
  return(result);
 801fb6e:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801fb70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801fb72:	b672      	cpsid	i
}
 801fb74:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801fb76:	4b3c      	ldr	r3, [pc, #240]	; (801fc68 <TRACE_TxCpltCallback+0x10c>)
 801fb78:	789b      	ldrb	r3, [r3, #2]
 801fb7a:	2b02      	cmp	r3, #2
 801fb7c:	d106      	bne.n	801fb8c <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801fb7e:	4b3a      	ldr	r3, [pc, #232]	; (801fc68 <TRACE_TxCpltCallback+0x10c>)
 801fb80:	2200      	movs	r2, #0
 801fb82:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801fb84:	4b38      	ldr	r3, [pc, #224]	; (801fc68 <TRACE_TxCpltCallback+0x10c>)
 801fb86:	2200      	movs	r2, #0
 801fb88:	821a      	strh	r2, [r3, #16]
 801fb8a:	e00a      	b.n	801fba2 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801fb8c:	4b36      	ldr	r3, [pc, #216]	; (801fc68 <TRACE_TxCpltCallback+0x10c>)
 801fb8e:	8a1a      	ldrh	r2, [r3, #16]
 801fb90:	4b35      	ldr	r3, [pc, #212]	; (801fc68 <TRACE_TxCpltCallback+0x10c>)
 801fb92:	8a9b      	ldrh	r3, [r3, #20]
 801fb94:	4413      	add	r3, r2
 801fb96:	b29b      	uxth	r3, r3
 801fb98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801fb9c:	b29a      	uxth	r2, r3
 801fb9e:	4b32      	ldr	r3, [pc, #200]	; (801fc68 <TRACE_TxCpltCallback+0x10c>)
 801fba0:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801fba2:	4b31      	ldr	r3, [pc, #196]	; (801fc68 <TRACE_TxCpltCallback+0x10c>)
 801fba4:	8a1a      	ldrh	r2, [r3, #16]
 801fba6:	4b30      	ldr	r3, [pc, #192]	; (801fc68 <TRACE_TxCpltCallback+0x10c>)
 801fba8:	8a5b      	ldrh	r3, [r3, #18]
 801fbaa:	429a      	cmp	r2, r3
 801fbac:	d04d      	beq.n	801fc4a <TRACE_TxCpltCallback+0xee>
 801fbae:	4b2e      	ldr	r3, [pc, #184]	; (801fc68 <TRACE_TxCpltCallback+0x10c>)
 801fbb0:	8adb      	ldrh	r3, [r3, #22]
 801fbb2:	2b01      	cmp	r3, #1
 801fbb4:	d149      	bne.n	801fc4a <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801fbb6:	4b2c      	ldr	r3, [pc, #176]	; (801fc68 <TRACE_TxCpltCallback+0x10c>)
 801fbb8:	789b      	ldrb	r3, [r3, #2]
 801fbba:	2b01      	cmp	r3, #1
 801fbbc:	d117      	bne.n	801fbee <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801fbbe:	4b2a      	ldr	r3, [pc, #168]	; (801fc68 <TRACE_TxCpltCallback+0x10c>)
 801fbc0:	881a      	ldrh	r2, [r3, #0]
 801fbc2:	4b29      	ldr	r3, [pc, #164]	; (801fc68 <TRACE_TxCpltCallback+0x10c>)
 801fbc4:	8a1b      	ldrh	r3, [r3, #16]
 801fbc6:	1ad3      	subs	r3, r2, r3
 801fbc8:	b29a      	uxth	r2, r3
 801fbca:	4b27      	ldr	r3, [pc, #156]	; (801fc68 <TRACE_TxCpltCallback+0x10c>)
 801fbcc:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801fbce:	4b26      	ldr	r3, [pc, #152]	; (801fc68 <TRACE_TxCpltCallback+0x10c>)
 801fbd0:	2202      	movs	r2, #2
 801fbd2:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801fbd4:	4b24      	ldr	r3, [pc, #144]	; (801fc68 <TRACE_TxCpltCallback+0x10c>)
 801fbd6:	2200      	movs	r2, #0
 801fbd8:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801fbda:	4b23      	ldr	r3, [pc, #140]	; (801fc68 <TRACE_TxCpltCallback+0x10c>)
 801fbdc:	8a9b      	ldrh	r3, [r3, #20]
 801fbde:	2b00      	cmp	r3, #0
 801fbe0:	d105      	bne.n	801fbee <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801fbe2:	4b21      	ldr	r3, [pc, #132]	; (801fc68 <TRACE_TxCpltCallback+0x10c>)
 801fbe4:	2200      	movs	r2, #0
 801fbe6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801fbe8:	4b1f      	ldr	r3, [pc, #124]	; (801fc68 <TRACE_TxCpltCallback+0x10c>)
 801fbea:	2200      	movs	r2, #0
 801fbec:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801fbee:	4b1e      	ldr	r3, [pc, #120]	; (801fc68 <TRACE_TxCpltCallback+0x10c>)
 801fbf0:	789b      	ldrb	r3, [r3, #2]
 801fbf2:	2b00      	cmp	r3, #0
 801fbf4:	d115      	bne.n	801fc22 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801fbf6:	4b1c      	ldr	r3, [pc, #112]	; (801fc68 <TRACE_TxCpltCallback+0x10c>)
 801fbf8:	8a5a      	ldrh	r2, [r3, #18]
 801fbfa:	4b1b      	ldr	r3, [pc, #108]	; (801fc68 <TRACE_TxCpltCallback+0x10c>)
 801fbfc:	8a1b      	ldrh	r3, [r3, #16]
 801fbfe:	429a      	cmp	r2, r3
 801fc00:	d908      	bls.n	801fc14 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801fc02:	4b19      	ldr	r3, [pc, #100]	; (801fc68 <TRACE_TxCpltCallback+0x10c>)
 801fc04:	8a5a      	ldrh	r2, [r3, #18]
 801fc06:	4b18      	ldr	r3, [pc, #96]	; (801fc68 <TRACE_TxCpltCallback+0x10c>)
 801fc08:	8a1b      	ldrh	r3, [r3, #16]
 801fc0a:	1ad3      	subs	r3, r2, r3
 801fc0c:	b29a      	uxth	r2, r3
 801fc0e:	4b16      	ldr	r3, [pc, #88]	; (801fc68 <TRACE_TxCpltCallback+0x10c>)
 801fc10:	829a      	strh	r2, [r3, #20]
 801fc12:	e006      	b.n	801fc22 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801fc14:	4b14      	ldr	r3, [pc, #80]	; (801fc68 <TRACE_TxCpltCallback+0x10c>)
 801fc16:	8a1b      	ldrh	r3, [r3, #16]
 801fc18:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801fc1c:	b29a      	uxth	r2, r3
 801fc1e:	4b12      	ldr	r3, [pc, #72]	; (801fc68 <TRACE_TxCpltCallback+0x10c>)
 801fc20:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801fc22:	4b11      	ldr	r3, [pc, #68]	; (801fc68 <TRACE_TxCpltCallback+0x10c>)
 801fc24:	8a1b      	ldrh	r3, [r3, #16]
 801fc26:	461a      	mov	r2, r3
 801fc28:	4b10      	ldr	r3, [pc, #64]	; (801fc6c <TRACE_TxCpltCallback+0x110>)
 801fc2a:	4413      	add	r3, r2
 801fc2c:	61fb      	str	r3, [r7, #28]
 801fc2e:	69bb      	ldr	r3, [r7, #24]
 801fc30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fc32:	693b      	ldr	r3, [r7, #16]
 801fc34:	f383 8810 	msr	PRIMASK, r3
}
 801fc38:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801fc3a:	4b0d      	ldr	r3, [pc, #52]	; (801fc70 <TRACE_TxCpltCallback+0x114>)
 801fc3c:	68db      	ldr	r3, [r3, #12]
 801fc3e:	4a0a      	ldr	r2, [pc, #40]	; (801fc68 <TRACE_TxCpltCallback+0x10c>)
 801fc40:	8a92      	ldrh	r2, [r2, #20]
 801fc42:	4611      	mov	r1, r2
 801fc44:	69f8      	ldr	r0, [r7, #28]
 801fc46:	4798      	blx	r3
 801fc48:	e00a      	b.n	801fc60 <TRACE_TxCpltCallback+0x104>
 801fc4a:	69bb      	ldr	r3, [r7, #24]
 801fc4c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fc4e:	68fb      	ldr	r3, [r7, #12]
 801fc50:	f383 8810 	msr	PRIMASK, r3
}
 801fc54:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801fc56:	f7e2 fc01 	bl	800245c <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801fc5a:	f000 f8a7 	bl	801fdac <TRACE_UnLock>
  }
}
 801fc5e:	bf00      	nop
 801fc60:	bf00      	nop
 801fc62:	3720      	adds	r7, #32
 801fc64:	46bd      	mov	sp, r7
 801fc66:	bd80      	pop	{r7, pc}
 801fc68:	20001c40 	.word	0x20001c40
 801fc6c:	20001c58 	.word	0x20001c58
 801fc70:	080209a4 	.word	0x080209a4

0801fc74 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801fc74:	b480      	push	{r7}
 801fc76:	b087      	sub	sp, #28
 801fc78:	af00      	add	r7, sp, #0
 801fc7a:	4603      	mov	r3, r0
 801fc7c:	6039      	str	r1, [r7, #0]
 801fc7e:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801fc80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801fc84:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fc86:	f3ef 8310 	mrs	r3, PRIMASK
 801fc8a:	60fb      	str	r3, [r7, #12]
  return(result);
 801fc8c:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801fc8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801fc90:	b672      	cpsid	i
}
 801fc92:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801fc94:	4b35      	ldr	r3, [pc, #212]	; (801fd6c <TRACE_AllocateBufer+0xf8>)
 801fc96:	8a5a      	ldrh	r2, [r3, #18]
 801fc98:	4b34      	ldr	r3, [pc, #208]	; (801fd6c <TRACE_AllocateBufer+0xf8>)
 801fc9a:	8a1b      	ldrh	r3, [r3, #16]
 801fc9c:	429a      	cmp	r2, r3
 801fc9e:	d11b      	bne.n	801fcd8 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801fca0:	4b32      	ldr	r3, [pc, #200]	; (801fd6c <TRACE_AllocateBufer+0xf8>)
 801fca2:	8a5b      	ldrh	r3, [r3, #18]
 801fca4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801fca8:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801fcaa:	88fa      	ldrh	r2, [r7, #6]
 801fcac:	8afb      	ldrh	r3, [r7, #22]
 801fcae:	429a      	cmp	r2, r3
 801fcb0:	d33a      	bcc.n	801fd28 <TRACE_AllocateBufer+0xb4>
 801fcb2:	4b2e      	ldr	r3, [pc, #184]	; (801fd6c <TRACE_AllocateBufer+0xf8>)
 801fcb4:	8a1b      	ldrh	r3, [r3, #16]
 801fcb6:	88fa      	ldrh	r2, [r7, #6]
 801fcb8:	429a      	cmp	r2, r3
 801fcba:	d235      	bcs.n	801fd28 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801fcbc:	4b2b      	ldr	r3, [pc, #172]	; (801fd6c <TRACE_AllocateBufer+0xf8>)
 801fcbe:	2201      	movs	r2, #1
 801fcc0:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801fcc2:	4b2a      	ldr	r3, [pc, #168]	; (801fd6c <TRACE_AllocateBufer+0xf8>)
 801fcc4:	8a5a      	ldrh	r2, [r3, #18]
 801fcc6:	4b29      	ldr	r3, [pc, #164]	; (801fd6c <TRACE_AllocateBufer+0xf8>)
 801fcc8:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801fcca:	4b28      	ldr	r3, [pc, #160]	; (801fd6c <TRACE_AllocateBufer+0xf8>)
 801fccc:	8a1b      	ldrh	r3, [r3, #16]
 801fcce:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801fcd0:	4b26      	ldr	r3, [pc, #152]	; (801fd6c <TRACE_AllocateBufer+0xf8>)
 801fcd2:	2200      	movs	r2, #0
 801fcd4:	825a      	strh	r2, [r3, #18]
 801fcd6:	e027      	b.n	801fd28 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801fcd8:	4b24      	ldr	r3, [pc, #144]	; (801fd6c <TRACE_AllocateBufer+0xf8>)
 801fcda:	8a5a      	ldrh	r2, [r3, #18]
 801fcdc:	4b23      	ldr	r3, [pc, #140]	; (801fd6c <TRACE_AllocateBufer+0xf8>)
 801fcde:	8a1b      	ldrh	r3, [r3, #16]
 801fce0:	429a      	cmp	r2, r3
 801fce2:	d91b      	bls.n	801fd1c <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801fce4:	4b21      	ldr	r3, [pc, #132]	; (801fd6c <TRACE_AllocateBufer+0xf8>)
 801fce6:	8a5b      	ldrh	r3, [r3, #18]
 801fce8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801fcec:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801fcee:	88fa      	ldrh	r2, [r7, #6]
 801fcf0:	8afb      	ldrh	r3, [r7, #22]
 801fcf2:	429a      	cmp	r2, r3
 801fcf4:	d318      	bcc.n	801fd28 <TRACE_AllocateBufer+0xb4>
 801fcf6:	4b1d      	ldr	r3, [pc, #116]	; (801fd6c <TRACE_AllocateBufer+0xf8>)
 801fcf8:	8a1b      	ldrh	r3, [r3, #16]
 801fcfa:	88fa      	ldrh	r2, [r7, #6]
 801fcfc:	429a      	cmp	r2, r3
 801fcfe:	d213      	bcs.n	801fd28 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801fd00:	4b1a      	ldr	r3, [pc, #104]	; (801fd6c <TRACE_AllocateBufer+0xf8>)
 801fd02:	2201      	movs	r2, #1
 801fd04:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801fd06:	4b19      	ldr	r3, [pc, #100]	; (801fd6c <TRACE_AllocateBufer+0xf8>)
 801fd08:	8a5a      	ldrh	r2, [r3, #18]
 801fd0a:	4b18      	ldr	r3, [pc, #96]	; (801fd6c <TRACE_AllocateBufer+0xf8>)
 801fd0c:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801fd0e:	4b17      	ldr	r3, [pc, #92]	; (801fd6c <TRACE_AllocateBufer+0xf8>)
 801fd10:	8a1b      	ldrh	r3, [r3, #16]
 801fd12:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801fd14:	4b15      	ldr	r3, [pc, #84]	; (801fd6c <TRACE_AllocateBufer+0xf8>)
 801fd16:	2200      	movs	r2, #0
 801fd18:	825a      	strh	r2, [r3, #18]
 801fd1a:	e005      	b.n	801fd28 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801fd1c:	4b13      	ldr	r3, [pc, #76]	; (801fd6c <TRACE_AllocateBufer+0xf8>)
 801fd1e:	8a1a      	ldrh	r2, [r3, #16]
 801fd20:	4b12      	ldr	r3, [pc, #72]	; (801fd6c <TRACE_AllocateBufer+0xf8>)
 801fd22:	8a5b      	ldrh	r3, [r3, #18]
 801fd24:	1ad3      	subs	r3, r2, r3
 801fd26:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801fd28:	8afa      	ldrh	r2, [r7, #22]
 801fd2a:	88fb      	ldrh	r3, [r7, #6]
 801fd2c:	429a      	cmp	r2, r3
 801fd2e:	d90f      	bls.n	801fd50 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801fd30:	4b0e      	ldr	r3, [pc, #56]	; (801fd6c <TRACE_AllocateBufer+0xf8>)
 801fd32:	8a5a      	ldrh	r2, [r3, #18]
 801fd34:	683b      	ldr	r3, [r7, #0]
 801fd36:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801fd38:	4b0c      	ldr	r3, [pc, #48]	; (801fd6c <TRACE_AllocateBufer+0xf8>)
 801fd3a:	8a5a      	ldrh	r2, [r3, #18]
 801fd3c:	88fb      	ldrh	r3, [r7, #6]
 801fd3e:	4413      	add	r3, r2
 801fd40:	b29b      	uxth	r3, r3
 801fd42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801fd46:	b29a      	uxth	r2, r3
 801fd48:	4b08      	ldr	r3, [pc, #32]	; (801fd6c <TRACE_AllocateBufer+0xf8>)
 801fd4a:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801fd4c:	2300      	movs	r3, #0
 801fd4e:	82bb      	strh	r3, [r7, #20]
 801fd50:	693b      	ldr	r3, [r7, #16]
 801fd52:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fd54:	68bb      	ldr	r3, [r7, #8]
 801fd56:	f383 8810 	msr	PRIMASK, r3
}
 801fd5a:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801fd5c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801fd60:	4618      	mov	r0, r3
 801fd62:	371c      	adds	r7, #28
 801fd64:	46bd      	mov	sp, r7
 801fd66:	bc80      	pop	{r7}
 801fd68:	4770      	bx	lr
 801fd6a:	bf00      	nop
 801fd6c:	20001c40 	.word	0x20001c40

0801fd70 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801fd70:	b480      	push	{r7}
 801fd72:	b085      	sub	sp, #20
 801fd74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fd76:	f3ef 8310 	mrs	r3, PRIMASK
 801fd7a:	607b      	str	r3, [r7, #4]
  return(result);
 801fd7c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801fd7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801fd80:	b672      	cpsid	i
}
 801fd82:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801fd84:	4b08      	ldr	r3, [pc, #32]	; (801fda8 <TRACE_Lock+0x38>)
 801fd86:	8adb      	ldrh	r3, [r3, #22]
 801fd88:	3301      	adds	r3, #1
 801fd8a:	b29a      	uxth	r2, r3
 801fd8c:	4b06      	ldr	r3, [pc, #24]	; (801fda8 <TRACE_Lock+0x38>)
 801fd8e:	82da      	strh	r2, [r3, #22]
 801fd90:	68fb      	ldr	r3, [r7, #12]
 801fd92:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fd94:	68bb      	ldr	r3, [r7, #8]
 801fd96:	f383 8810 	msr	PRIMASK, r3
}
 801fd9a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801fd9c:	bf00      	nop
 801fd9e:	3714      	adds	r7, #20
 801fda0:	46bd      	mov	sp, r7
 801fda2:	bc80      	pop	{r7}
 801fda4:	4770      	bx	lr
 801fda6:	bf00      	nop
 801fda8:	20001c40 	.word	0x20001c40

0801fdac <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801fdac:	b480      	push	{r7}
 801fdae:	b085      	sub	sp, #20
 801fdb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fdb2:	f3ef 8310 	mrs	r3, PRIMASK
 801fdb6:	607b      	str	r3, [r7, #4]
  return(result);
 801fdb8:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801fdba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801fdbc:	b672      	cpsid	i
}
 801fdbe:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801fdc0:	4b08      	ldr	r3, [pc, #32]	; (801fde4 <TRACE_UnLock+0x38>)
 801fdc2:	8adb      	ldrh	r3, [r3, #22]
 801fdc4:	3b01      	subs	r3, #1
 801fdc6:	b29a      	uxth	r2, r3
 801fdc8:	4b06      	ldr	r3, [pc, #24]	; (801fde4 <TRACE_UnLock+0x38>)
 801fdca:	82da      	strh	r2, [r3, #22]
 801fdcc:	68fb      	ldr	r3, [r7, #12]
 801fdce:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fdd0:	68bb      	ldr	r3, [r7, #8]
 801fdd2:	f383 8810 	msr	PRIMASK, r3
}
 801fdd6:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801fdd8:	bf00      	nop
 801fdda:	3714      	adds	r7, #20
 801fddc:	46bd      	mov	sp, r7
 801fdde:	bc80      	pop	{r7}
 801fde0:	4770      	bx	lr
 801fde2:	bf00      	nop
 801fde4:	20001c40 	.word	0x20001c40

0801fde8 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801fde8:	b480      	push	{r7}
 801fdea:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801fdec:	4b05      	ldr	r3, [pc, #20]	; (801fe04 <TRACE_IsLocked+0x1c>)
 801fdee:	8adb      	ldrh	r3, [r3, #22]
 801fdf0:	2b00      	cmp	r3, #0
 801fdf2:	bf14      	ite	ne
 801fdf4:	2301      	movne	r3, #1
 801fdf6:	2300      	moveq	r3, #0
 801fdf8:	b2db      	uxtb	r3, r3
}
 801fdfa:	4618      	mov	r0, r3
 801fdfc:	46bd      	mov	sp, r7
 801fdfe:	bc80      	pop	{r7}
 801fe00:	4770      	bx	lr
 801fe02:	bf00      	nop
 801fe04:	20001c40 	.word	0x20001c40

0801fe08 <floor>:
 801fe08:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801fe0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fe10:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801fe14:	2e13      	cmp	r6, #19
 801fe16:	460b      	mov	r3, r1
 801fe18:	4607      	mov	r7, r0
 801fe1a:	460c      	mov	r4, r1
 801fe1c:	4605      	mov	r5, r0
 801fe1e:	dc32      	bgt.n	801fe86 <floor+0x7e>
 801fe20:	2e00      	cmp	r6, #0
 801fe22:	da14      	bge.n	801fe4e <floor+0x46>
 801fe24:	a334      	add	r3, pc, #208	; (adr r3, 801fef8 <floor+0xf0>)
 801fe26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe2a:	f7e0 f9b3 	bl	8000194 <__adddf3>
 801fe2e:	2200      	movs	r2, #0
 801fe30:	2300      	movs	r3, #0
 801fe32:	f7e0 fdf5 	bl	8000a20 <__aeabi_dcmpgt>
 801fe36:	b138      	cbz	r0, 801fe48 <floor+0x40>
 801fe38:	2c00      	cmp	r4, #0
 801fe3a:	da56      	bge.n	801feea <floor+0xe2>
 801fe3c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801fe40:	4325      	orrs	r5, r4
 801fe42:	d055      	beq.n	801fef0 <floor+0xe8>
 801fe44:	4c2e      	ldr	r4, [pc, #184]	; (801ff00 <floor+0xf8>)
 801fe46:	2500      	movs	r5, #0
 801fe48:	4623      	mov	r3, r4
 801fe4a:	462f      	mov	r7, r5
 801fe4c:	e025      	b.n	801fe9a <floor+0x92>
 801fe4e:	4a2d      	ldr	r2, [pc, #180]	; (801ff04 <floor+0xfc>)
 801fe50:	fa42 f806 	asr.w	r8, r2, r6
 801fe54:	ea01 0208 	and.w	r2, r1, r8
 801fe58:	4302      	orrs	r2, r0
 801fe5a:	d01e      	beq.n	801fe9a <floor+0x92>
 801fe5c:	a326      	add	r3, pc, #152	; (adr r3, 801fef8 <floor+0xf0>)
 801fe5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe62:	f7e0 f997 	bl	8000194 <__adddf3>
 801fe66:	2200      	movs	r2, #0
 801fe68:	2300      	movs	r3, #0
 801fe6a:	f7e0 fdd9 	bl	8000a20 <__aeabi_dcmpgt>
 801fe6e:	2800      	cmp	r0, #0
 801fe70:	d0ea      	beq.n	801fe48 <floor+0x40>
 801fe72:	2c00      	cmp	r4, #0
 801fe74:	bfbe      	ittt	lt
 801fe76:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801fe7a:	4133      	asrlt	r3, r6
 801fe7c:	18e4      	addlt	r4, r4, r3
 801fe7e:	ea24 0408 	bic.w	r4, r4, r8
 801fe82:	2500      	movs	r5, #0
 801fe84:	e7e0      	b.n	801fe48 <floor+0x40>
 801fe86:	2e33      	cmp	r6, #51	; 0x33
 801fe88:	dd0b      	ble.n	801fea2 <floor+0x9a>
 801fe8a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801fe8e:	d104      	bne.n	801fe9a <floor+0x92>
 801fe90:	4602      	mov	r2, r0
 801fe92:	f7e0 f97f 	bl	8000194 <__adddf3>
 801fe96:	4607      	mov	r7, r0
 801fe98:	460b      	mov	r3, r1
 801fe9a:	4638      	mov	r0, r7
 801fe9c:	4619      	mov	r1, r3
 801fe9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fea2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801fea6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801feaa:	fa28 f802 	lsr.w	r8, r8, r2
 801feae:	ea10 0f08 	tst.w	r0, r8
 801feb2:	d0f2      	beq.n	801fe9a <floor+0x92>
 801feb4:	a310      	add	r3, pc, #64	; (adr r3, 801fef8 <floor+0xf0>)
 801feb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801feba:	f7e0 f96b 	bl	8000194 <__adddf3>
 801febe:	2200      	movs	r2, #0
 801fec0:	2300      	movs	r3, #0
 801fec2:	f7e0 fdad 	bl	8000a20 <__aeabi_dcmpgt>
 801fec6:	2800      	cmp	r0, #0
 801fec8:	d0be      	beq.n	801fe48 <floor+0x40>
 801feca:	2c00      	cmp	r4, #0
 801fecc:	da0a      	bge.n	801fee4 <floor+0xdc>
 801fece:	2e14      	cmp	r6, #20
 801fed0:	d101      	bne.n	801fed6 <floor+0xce>
 801fed2:	3401      	adds	r4, #1
 801fed4:	e006      	b.n	801fee4 <floor+0xdc>
 801fed6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801feda:	2301      	movs	r3, #1
 801fedc:	40b3      	lsls	r3, r6
 801fede:	441d      	add	r5, r3
 801fee0:	42af      	cmp	r7, r5
 801fee2:	d8f6      	bhi.n	801fed2 <floor+0xca>
 801fee4:	ea25 0508 	bic.w	r5, r5, r8
 801fee8:	e7ae      	b.n	801fe48 <floor+0x40>
 801feea:	2500      	movs	r5, #0
 801feec:	462c      	mov	r4, r5
 801feee:	e7ab      	b.n	801fe48 <floor+0x40>
 801fef0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801fef4:	e7a8      	b.n	801fe48 <floor+0x40>
 801fef6:	bf00      	nop
 801fef8:	8800759c 	.word	0x8800759c
 801fefc:	7e37e43c 	.word	0x7e37e43c
 801ff00:	bff00000 	.word	0xbff00000
 801ff04:	000fffff 	.word	0x000fffff

0801ff08 <memset>:
 801ff08:	4402      	add	r2, r0
 801ff0a:	4603      	mov	r3, r0
 801ff0c:	4293      	cmp	r3, r2
 801ff0e:	d100      	bne.n	801ff12 <memset+0xa>
 801ff10:	4770      	bx	lr
 801ff12:	f803 1b01 	strb.w	r1, [r3], #1
 801ff16:	e7f9      	b.n	801ff0c <memset+0x4>

0801ff18 <__libc_init_array>:
 801ff18:	b570      	push	{r4, r5, r6, lr}
 801ff1a:	4d0d      	ldr	r5, [pc, #52]	; (801ff50 <__libc_init_array+0x38>)
 801ff1c:	4c0d      	ldr	r4, [pc, #52]	; (801ff54 <__libc_init_array+0x3c>)
 801ff1e:	1b64      	subs	r4, r4, r5
 801ff20:	10a4      	asrs	r4, r4, #2
 801ff22:	2600      	movs	r6, #0
 801ff24:	42a6      	cmp	r6, r4
 801ff26:	d109      	bne.n	801ff3c <__libc_init_array+0x24>
 801ff28:	4d0b      	ldr	r5, [pc, #44]	; (801ff58 <__libc_init_array+0x40>)
 801ff2a:	4c0c      	ldr	r4, [pc, #48]	; (801ff5c <__libc_init_array+0x44>)
 801ff2c:	f000 f826 	bl	801ff7c <_init>
 801ff30:	1b64      	subs	r4, r4, r5
 801ff32:	10a4      	asrs	r4, r4, #2
 801ff34:	2600      	movs	r6, #0
 801ff36:	42a6      	cmp	r6, r4
 801ff38:	d105      	bne.n	801ff46 <__libc_init_array+0x2e>
 801ff3a:	bd70      	pop	{r4, r5, r6, pc}
 801ff3c:	f855 3b04 	ldr.w	r3, [r5], #4
 801ff40:	4798      	blx	r3
 801ff42:	3601      	adds	r6, #1
 801ff44:	e7ee      	b.n	801ff24 <__libc_init_array+0xc>
 801ff46:	f855 3b04 	ldr.w	r3, [r5], #4
 801ff4a:	4798      	blx	r3
 801ff4c:	3601      	adds	r6, #1
 801ff4e:	e7f2      	b.n	801ff36 <__libc_init_array+0x1e>
 801ff50:	0802105c 	.word	0x0802105c
 801ff54:	0802105c 	.word	0x0802105c
 801ff58:	0802105c 	.word	0x0802105c
 801ff5c:	08021060 	.word	0x08021060

0801ff60 <memcpy>:
 801ff60:	440a      	add	r2, r1
 801ff62:	4291      	cmp	r1, r2
 801ff64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801ff68:	d100      	bne.n	801ff6c <memcpy+0xc>
 801ff6a:	4770      	bx	lr
 801ff6c:	b510      	push	{r4, lr}
 801ff6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ff72:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ff76:	4291      	cmp	r1, r2
 801ff78:	d1f9      	bne.n	801ff6e <memcpy+0xe>
 801ff7a:	bd10      	pop	{r4, pc}

0801ff7c <_init>:
 801ff7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff7e:	bf00      	nop
 801ff80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ff82:	bc08      	pop	{r3}
 801ff84:	469e      	mov	lr, r3
 801ff86:	4770      	bx	lr

0801ff88 <_fini>:
 801ff88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff8a:	bf00      	nop
 801ff8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ff8e:	bc08      	pop	{r3}
 801ff90:	469e      	mov	lr, r3
 801ff92:	4770      	bx	lr
