
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e4f0  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000101c  0801e628  0801e628  0002e628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801f644  0801f644  0002f644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801f71c  0801f71c  00030148  2**0
                  CONTENTS
  5 .ARM          00000008  0801f71c  0801f71c  0002f71c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801f724  0801f724  00030148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  0801f724  0801f724  0002f724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801f72c  0801f72c  0002f72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000148  20000000  0801f730  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002290  20000148  0801f878  00030148  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200023d8  0801f878  000323d8  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030172  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004e028  00000000  00000000  000301b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000bd06  00000000  00000000  0007e1dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003b90  00000000  00000000  00089ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002d5e  00000000  00000000  0008da78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002ea5d  00000000  00000000  000907d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004931e  00000000  00000000  000bf233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6e0c  00000000  00000000  00108551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000f6c4  00000000  00000000  001df360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  001eea24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000148 	.word	0x20000148
 8000154:	00000000 	.word	0x00000000
 8000158:	0801e610 	.word	0x0801e610

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000014c 	.word	0x2000014c
 8000174:	0801e610 	.word	0x0801e610

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_frsub>:
 8000a84:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a88:	e002      	b.n	8000a90 <__addsf3>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_fsub>:
 8000a8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a90 <__addsf3>:
 8000a90:	0042      	lsls	r2, r0, #1
 8000a92:	bf1f      	itttt	ne
 8000a94:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a98:	ea92 0f03 	teqne	r2, r3
 8000a9c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa4:	d06a      	beq.n	8000b7c <__addsf3+0xec>
 8000aa6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aaa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aae:	bfc1      	itttt	gt
 8000ab0:	18d2      	addgt	r2, r2, r3
 8000ab2:	4041      	eorgt	r1, r0
 8000ab4:	4048      	eorgt	r0, r1
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	bfb8      	it	lt
 8000aba:	425b      	neglt	r3, r3
 8000abc:	2b19      	cmp	r3, #25
 8000abe:	bf88      	it	hi
 8000ac0:	4770      	bxhi	lr
 8000ac2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ac6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ace:	bf18      	it	ne
 8000ad0:	4240      	negne	r0, r0
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ada:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ade:	bf18      	it	ne
 8000ae0:	4249      	negne	r1, r1
 8000ae2:	ea92 0f03 	teq	r2, r3
 8000ae6:	d03f      	beq.n	8000b68 <__addsf3+0xd8>
 8000ae8:	f1a2 0201 	sub.w	r2, r2, #1
 8000aec:	fa41 fc03 	asr.w	ip, r1, r3
 8000af0:	eb10 000c 	adds.w	r0, r0, ip
 8000af4:	f1c3 0320 	rsb	r3, r3, #32
 8000af8:	fa01 f103 	lsl.w	r1, r1, r3
 8000afc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	d502      	bpl.n	8000b08 <__addsf3+0x78>
 8000b02:	4249      	negs	r1, r1
 8000b04:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b08:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b0c:	d313      	bcc.n	8000b36 <__addsf3+0xa6>
 8000b0e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b12:	d306      	bcc.n	8000b22 <__addsf3+0x92>
 8000b14:	0840      	lsrs	r0, r0, #1
 8000b16:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1a:	f102 0201 	add.w	r2, r2, #1
 8000b1e:	2afe      	cmp	r2, #254	; 0xfe
 8000b20:	d251      	bcs.n	8000bc6 <__addsf3+0x136>
 8000b22:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2a:	bf08      	it	eq
 8000b2c:	f020 0001 	biceq.w	r0, r0, #1
 8000b30:	ea40 0003 	orr.w	r0, r0, r3
 8000b34:	4770      	bx	lr
 8000b36:	0049      	lsls	r1, r1, #1
 8000b38:	eb40 0000 	adc.w	r0, r0, r0
 8000b3c:	3a01      	subs	r2, #1
 8000b3e:	bf28      	it	cs
 8000b40:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b44:	d2ed      	bcs.n	8000b22 <__addsf3+0x92>
 8000b46:	fab0 fc80 	clz	ip, r0
 8000b4a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b4e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b52:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b56:	bfaa      	itet	ge
 8000b58:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b5c:	4252      	neglt	r2, r2
 8000b5e:	4318      	orrge	r0, r3
 8000b60:	bfbc      	itt	lt
 8000b62:	40d0      	lsrlt	r0, r2
 8000b64:	4318      	orrlt	r0, r3
 8000b66:	4770      	bx	lr
 8000b68:	f092 0f00 	teq	r2, #0
 8000b6c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b70:	bf06      	itte	eq
 8000b72:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b76:	3201      	addeq	r2, #1
 8000b78:	3b01      	subne	r3, #1
 8000b7a:	e7b5      	b.n	8000ae8 <__addsf3+0x58>
 8000b7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b84:	bf18      	it	ne
 8000b86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8a:	d021      	beq.n	8000bd0 <__addsf3+0x140>
 8000b8c:	ea92 0f03 	teq	r2, r3
 8000b90:	d004      	beq.n	8000b9c <__addsf3+0x10c>
 8000b92:	f092 0f00 	teq	r2, #0
 8000b96:	bf08      	it	eq
 8000b98:	4608      	moveq	r0, r1
 8000b9a:	4770      	bx	lr
 8000b9c:	ea90 0f01 	teq	r0, r1
 8000ba0:	bf1c      	itt	ne
 8000ba2:	2000      	movne	r0, #0
 8000ba4:	4770      	bxne	lr
 8000ba6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000baa:	d104      	bne.n	8000bb6 <__addsf3+0x126>
 8000bac:	0040      	lsls	r0, r0, #1
 8000bae:	bf28      	it	cs
 8000bb0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb4:	4770      	bx	lr
 8000bb6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bba:	bf3c      	itt	cc
 8000bbc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc0:	4770      	bxcc	lr
 8000bc2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bce:	4770      	bx	lr
 8000bd0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd4:	bf16      	itet	ne
 8000bd6:	4608      	movne	r0, r1
 8000bd8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bdc:	4601      	movne	r1, r0
 8000bde:	0242      	lsls	r2, r0, #9
 8000be0:	bf06      	itte	eq
 8000be2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000be6:	ea90 0f01 	teqeq	r0, r1
 8000bea:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_ui2f>:
 8000bf0:	f04f 0300 	mov.w	r3, #0
 8000bf4:	e004      	b.n	8000c00 <__aeabi_i2f+0x8>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_i2f>:
 8000bf8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bfc:	bf48      	it	mi
 8000bfe:	4240      	negmi	r0, r0
 8000c00:	ea5f 0c00 	movs.w	ip, r0
 8000c04:	bf08      	it	eq
 8000c06:	4770      	bxeq	lr
 8000c08:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c0c:	4601      	mov	r1, r0
 8000c0e:	f04f 0000 	mov.w	r0, #0
 8000c12:	e01c      	b.n	8000c4e <__aeabi_l2f+0x2a>

08000c14 <__aeabi_ul2f>:
 8000c14:	ea50 0201 	orrs.w	r2, r0, r1
 8000c18:	bf08      	it	eq
 8000c1a:	4770      	bxeq	lr
 8000c1c:	f04f 0300 	mov.w	r3, #0
 8000c20:	e00a      	b.n	8000c38 <__aeabi_l2f+0x14>
 8000c22:	bf00      	nop

08000c24 <__aeabi_l2f>:
 8000c24:	ea50 0201 	orrs.w	r2, r0, r1
 8000c28:	bf08      	it	eq
 8000c2a:	4770      	bxeq	lr
 8000c2c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c30:	d502      	bpl.n	8000c38 <__aeabi_l2f+0x14>
 8000c32:	4240      	negs	r0, r0
 8000c34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c38:	ea5f 0c01 	movs.w	ip, r1
 8000c3c:	bf02      	ittt	eq
 8000c3e:	4684      	moveq	ip, r0
 8000c40:	4601      	moveq	r1, r0
 8000c42:	2000      	moveq	r0, #0
 8000c44:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c48:	bf08      	it	eq
 8000c4a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c52:	fabc f28c 	clz	r2, ip
 8000c56:	3a08      	subs	r2, #8
 8000c58:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c5c:	db10      	blt.n	8000c80 <__aeabi_l2f+0x5c>
 8000c5e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c62:	4463      	add	r3, ip
 8000c64:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c68:	f1c2 0220 	rsb	r2, r2, #32
 8000c6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c70:	fa20 f202 	lsr.w	r2, r0, r2
 8000c74:	eb43 0002 	adc.w	r0, r3, r2
 8000c78:	bf08      	it	eq
 8000c7a:	f020 0001 	biceq.w	r0, r0, #1
 8000c7e:	4770      	bx	lr
 8000c80:	f102 0220 	add.w	r2, r2, #32
 8000c84:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c88:	f1c2 0220 	rsb	r2, r2, #32
 8000c8c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c90:	fa21 f202 	lsr.w	r2, r1, r2
 8000c94:	eb43 0002 	adc.w	r0, r3, r2
 8000c98:	bf08      	it	eq
 8000c9a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c9e:	4770      	bx	lr

08000ca0 <__aeabi_fmul>:
 8000ca0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ca8:	bf1e      	ittt	ne
 8000caa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cae:	ea92 0f0c 	teqne	r2, ip
 8000cb2:	ea93 0f0c 	teqne	r3, ip
 8000cb6:	d06f      	beq.n	8000d98 <__aeabi_fmul+0xf8>
 8000cb8:	441a      	add	r2, r3
 8000cba:	ea80 0c01 	eor.w	ip, r0, r1
 8000cbe:	0240      	lsls	r0, r0, #9
 8000cc0:	bf18      	it	ne
 8000cc2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cc6:	d01e      	beq.n	8000d06 <__aeabi_fmul+0x66>
 8000cc8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ccc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd4:	fba0 3101 	umull	r3, r1, r0, r1
 8000cd8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cdc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce0:	bf3e      	ittt	cc
 8000ce2:	0049      	lslcc	r1, r1, #1
 8000ce4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ce8:	005b      	lslcc	r3, r3, #1
 8000cea:	ea40 0001 	orr.w	r0, r0, r1
 8000cee:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf2:	2afd      	cmp	r2, #253	; 0xfd
 8000cf4:	d81d      	bhi.n	8000d32 <__aeabi_fmul+0x92>
 8000cf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfe:	bf08      	it	eq
 8000d00:	f020 0001 	biceq.w	r0, r0, #1
 8000d04:	4770      	bx	lr
 8000d06:	f090 0f00 	teq	r0, #0
 8000d0a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d0e:	bf08      	it	eq
 8000d10:	0249      	lsleq	r1, r1, #9
 8000d12:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d16:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1a:	3a7f      	subs	r2, #127	; 0x7f
 8000d1c:	bfc2      	ittt	gt
 8000d1e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d22:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d26:	4770      	bxgt	lr
 8000d28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d2c:	f04f 0300 	mov.w	r3, #0
 8000d30:	3a01      	subs	r2, #1
 8000d32:	dc5d      	bgt.n	8000df0 <__aeabi_fmul+0x150>
 8000d34:	f112 0f19 	cmn.w	r2, #25
 8000d38:	bfdc      	itt	le
 8000d3a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d3e:	4770      	bxle	lr
 8000d40:	f1c2 0200 	rsb	r2, r2, #0
 8000d44:	0041      	lsls	r1, r0, #1
 8000d46:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4a:	f1c2 0220 	rsb	r2, r2, #32
 8000d4e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d52:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d56:	f140 0000 	adc.w	r0, r0, #0
 8000d5a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d5e:	bf08      	it	eq
 8000d60:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d64:	4770      	bx	lr
 8000d66:	f092 0f00 	teq	r2, #0
 8000d6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d6e:	bf02      	ittt	eq
 8000d70:	0040      	lsleq	r0, r0, #1
 8000d72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d76:	3a01      	subeq	r2, #1
 8000d78:	d0f9      	beq.n	8000d6e <__aeabi_fmul+0xce>
 8000d7a:	ea40 000c 	orr.w	r0, r0, ip
 8000d7e:	f093 0f00 	teq	r3, #0
 8000d82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0049      	lsleq	r1, r1, #1
 8000d8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d8e:	3b01      	subeq	r3, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xe6>
 8000d92:	ea41 010c 	orr.w	r1, r1, ip
 8000d96:	e78f      	b.n	8000cb8 <__aeabi_fmul+0x18>
 8000d98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d9c:	ea92 0f0c 	teq	r2, ip
 8000da0:	bf18      	it	ne
 8000da2:	ea93 0f0c 	teqne	r3, ip
 8000da6:	d00a      	beq.n	8000dbe <__aeabi_fmul+0x11e>
 8000da8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dac:	bf18      	it	ne
 8000dae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db2:	d1d8      	bne.n	8000d66 <__aeabi_fmul+0xc6>
 8000db4:	ea80 0001 	eor.w	r0, r0, r1
 8000db8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	bf17      	itett	ne
 8000dc4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dc8:	4608      	moveq	r0, r1
 8000dca:	f091 0f00 	teqne	r1, #0
 8000dce:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd2:	d014      	beq.n	8000dfe <__aeabi_fmul+0x15e>
 8000dd4:	ea92 0f0c 	teq	r2, ip
 8000dd8:	d101      	bne.n	8000dde <__aeabi_fmul+0x13e>
 8000dda:	0242      	lsls	r2, r0, #9
 8000ddc:	d10f      	bne.n	8000dfe <__aeabi_fmul+0x15e>
 8000dde:	ea93 0f0c 	teq	r3, ip
 8000de2:	d103      	bne.n	8000dec <__aeabi_fmul+0x14c>
 8000de4:	024b      	lsls	r3, r1, #9
 8000de6:	bf18      	it	ne
 8000de8:	4608      	movne	r0, r1
 8000dea:	d108      	bne.n	8000dfe <__aeabi_fmul+0x15e>
 8000dec:	ea80 0001 	eor.w	r0, r0, r1
 8000df0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000df8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dfc:	4770      	bx	lr
 8000dfe:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e02:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e06:	4770      	bx	lr

08000e08 <__aeabi_fdiv>:
 8000e08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e10:	bf1e      	ittt	ne
 8000e12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e16:	ea92 0f0c 	teqne	r2, ip
 8000e1a:	ea93 0f0c 	teqne	r3, ip
 8000e1e:	d069      	beq.n	8000ef4 <__aeabi_fdiv+0xec>
 8000e20:	eba2 0203 	sub.w	r2, r2, r3
 8000e24:	ea80 0c01 	eor.w	ip, r0, r1
 8000e28:	0249      	lsls	r1, r1, #9
 8000e2a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e2e:	d037      	beq.n	8000ea0 <__aeabi_fdiv+0x98>
 8000e30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e34:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e38:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e3c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e40:	428b      	cmp	r3, r1
 8000e42:	bf38      	it	cc
 8000e44:	005b      	lslcc	r3, r3, #1
 8000e46:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	bf24      	itt	cs
 8000e52:	1a5b      	subcs	r3, r3, r1
 8000e54:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e58:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e5c:	bf24      	itt	cs
 8000e5e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e62:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e66:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6a:	bf24      	itt	cs
 8000e6c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e74:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e78:	bf24      	itt	cs
 8000e7a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e7e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e82:	011b      	lsls	r3, r3, #4
 8000e84:	bf18      	it	ne
 8000e86:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8a:	d1e0      	bne.n	8000e4e <__aeabi_fdiv+0x46>
 8000e8c:	2afd      	cmp	r2, #253	; 0xfd
 8000e8e:	f63f af50 	bhi.w	8000d32 <__aeabi_fmul+0x92>
 8000e92:	428b      	cmp	r3, r1
 8000e94:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e98:	bf08      	it	eq
 8000e9a:	f020 0001 	biceq.w	r0, r0, #1
 8000e9e:	4770      	bx	lr
 8000ea0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ea8:	327f      	adds	r2, #127	; 0x7f
 8000eaa:	bfc2      	ittt	gt
 8000eac:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb4:	4770      	bxgt	lr
 8000eb6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eba:	f04f 0300 	mov.w	r3, #0
 8000ebe:	3a01      	subs	r2, #1
 8000ec0:	e737      	b.n	8000d32 <__aeabi_fmul+0x92>
 8000ec2:	f092 0f00 	teq	r2, #0
 8000ec6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eca:	bf02      	ittt	eq
 8000ecc:	0040      	lsleq	r0, r0, #1
 8000ece:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed2:	3a01      	subeq	r2, #1
 8000ed4:	d0f9      	beq.n	8000eca <__aeabi_fdiv+0xc2>
 8000ed6:	ea40 000c 	orr.w	r0, r0, ip
 8000eda:	f093 0f00 	teq	r3, #0
 8000ede:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0049      	lsleq	r1, r1, #1
 8000ee6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eea:	3b01      	subeq	r3, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xda>
 8000eee:	ea41 010c 	orr.w	r1, r1, ip
 8000ef2:	e795      	b.n	8000e20 <__aeabi_fdiv+0x18>
 8000ef4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ef8:	ea92 0f0c 	teq	r2, ip
 8000efc:	d108      	bne.n	8000f10 <__aeabi_fdiv+0x108>
 8000efe:	0242      	lsls	r2, r0, #9
 8000f00:	f47f af7d 	bne.w	8000dfe <__aeabi_fmul+0x15e>
 8000f04:	ea93 0f0c 	teq	r3, ip
 8000f08:	f47f af70 	bne.w	8000dec <__aeabi_fmul+0x14c>
 8000f0c:	4608      	mov	r0, r1
 8000f0e:	e776      	b.n	8000dfe <__aeabi_fmul+0x15e>
 8000f10:	ea93 0f0c 	teq	r3, ip
 8000f14:	d104      	bne.n	8000f20 <__aeabi_fdiv+0x118>
 8000f16:	024b      	lsls	r3, r1, #9
 8000f18:	f43f af4c 	beq.w	8000db4 <__aeabi_fmul+0x114>
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	e76e      	b.n	8000dfe <__aeabi_fmul+0x15e>
 8000f20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f24:	bf18      	it	ne
 8000f26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2a:	d1ca      	bne.n	8000ec2 <__aeabi_fdiv+0xba>
 8000f2c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f30:	f47f af5c 	bne.w	8000dec <__aeabi_fmul+0x14c>
 8000f34:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f38:	f47f af3c 	bne.w	8000db4 <__aeabi_fmul+0x114>
 8000f3c:	e75f      	b.n	8000dfe <__aeabi_fmul+0x15e>
 8000f3e:	bf00      	nop

08000f40 <__aeabi_f2iz>:
 8000f40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f48:	d30f      	bcc.n	8000f6a <__aeabi_f2iz+0x2a>
 8000f4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f52:	d90d      	bls.n	8000f70 <__aeabi_f2iz+0x30>
 8000f54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f5c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f60:	fa23 f002 	lsr.w	r0, r3, r2
 8000f64:	bf18      	it	ne
 8000f66:	4240      	negne	r0, r0
 8000f68:	4770      	bx	lr
 8000f6a:	f04f 0000 	mov.w	r0, #0
 8000f6e:	4770      	bx	lr
 8000f70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f74:	d101      	bne.n	8000f7a <__aeabi_f2iz+0x3a>
 8000f76:	0242      	lsls	r2, r0, #9
 8000f78:	d105      	bne.n	8000f86 <__aeabi_f2iz+0x46>
 8000f7a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f7e:	bf08      	it	eq
 8000f80:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f84:	4770      	bx	lr
 8000f86:	f04f 0000 	mov.w	r0, #0
 8000f8a:	4770      	bx	lr

08000f8c <__aeabi_f2uiz>:
 8000f8c:	0042      	lsls	r2, r0, #1
 8000f8e:	d20e      	bcs.n	8000fae <__aeabi_f2uiz+0x22>
 8000f90:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f94:	d30b      	bcc.n	8000fae <__aeabi_f2uiz+0x22>
 8000f96:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f9a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f9e:	d409      	bmi.n	8000fb4 <__aeabi_f2uiz+0x28>
 8000fa0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fa4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr
 8000fb4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb8:	d101      	bne.n	8000fbe <__aeabi_f2uiz+0x32>
 8000fba:	0242      	lsls	r2, r0, #9
 8000fbc:	d102      	bne.n	8000fc4 <__aeabi_f2uiz+0x38>
 8000fbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fc2:	4770      	bx	lr
 8000fc4:	f04f 0000 	mov.w	r0, #0
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <__aeabi_uldivmod>:
 8000fcc:	b953      	cbnz	r3, 8000fe4 <__aeabi_uldivmod+0x18>
 8000fce:	b94a      	cbnz	r2, 8000fe4 <__aeabi_uldivmod+0x18>
 8000fd0:	2900      	cmp	r1, #0
 8000fd2:	bf08      	it	eq
 8000fd4:	2800      	cmpeq	r0, #0
 8000fd6:	bf1c      	itt	ne
 8000fd8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000fdc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000fe0:	f000 b970 	b.w	80012c4 <__aeabi_idiv0>
 8000fe4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fe8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fec:	f000 f806 	bl	8000ffc <__udivmoddi4>
 8000ff0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ff4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ff8:	b004      	add	sp, #16
 8000ffa:	4770      	bx	lr

08000ffc <__udivmoddi4>:
 8000ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001000:	9e08      	ldr	r6, [sp, #32]
 8001002:	460d      	mov	r5, r1
 8001004:	4604      	mov	r4, r0
 8001006:	460f      	mov	r7, r1
 8001008:	2b00      	cmp	r3, #0
 800100a:	d14a      	bne.n	80010a2 <__udivmoddi4+0xa6>
 800100c:	428a      	cmp	r2, r1
 800100e:	4694      	mov	ip, r2
 8001010:	d965      	bls.n	80010de <__udivmoddi4+0xe2>
 8001012:	fab2 f382 	clz	r3, r2
 8001016:	b143      	cbz	r3, 800102a <__udivmoddi4+0x2e>
 8001018:	fa02 fc03 	lsl.w	ip, r2, r3
 800101c:	f1c3 0220 	rsb	r2, r3, #32
 8001020:	409f      	lsls	r7, r3
 8001022:	fa20 f202 	lsr.w	r2, r0, r2
 8001026:	4317      	orrs	r7, r2
 8001028:	409c      	lsls	r4, r3
 800102a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800102e:	fa1f f58c 	uxth.w	r5, ip
 8001032:	fbb7 f1fe 	udiv	r1, r7, lr
 8001036:	0c22      	lsrs	r2, r4, #16
 8001038:	fb0e 7711 	mls	r7, lr, r1, r7
 800103c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001040:	fb01 f005 	mul.w	r0, r1, r5
 8001044:	4290      	cmp	r0, r2
 8001046:	d90a      	bls.n	800105e <__udivmoddi4+0x62>
 8001048:	eb1c 0202 	adds.w	r2, ip, r2
 800104c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8001050:	f080 811b 	bcs.w	800128a <__udivmoddi4+0x28e>
 8001054:	4290      	cmp	r0, r2
 8001056:	f240 8118 	bls.w	800128a <__udivmoddi4+0x28e>
 800105a:	3902      	subs	r1, #2
 800105c:	4462      	add	r2, ip
 800105e:	1a12      	subs	r2, r2, r0
 8001060:	b2a4      	uxth	r4, r4
 8001062:	fbb2 f0fe 	udiv	r0, r2, lr
 8001066:	fb0e 2210 	mls	r2, lr, r0, r2
 800106a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800106e:	fb00 f505 	mul.w	r5, r0, r5
 8001072:	42a5      	cmp	r5, r4
 8001074:	d90a      	bls.n	800108c <__udivmoddi4+0x90>
 8001076:	eb1c 0404 	adds.w	r4, ip, r4
 800107a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800107e:	f080 8106 	bcs.w	800128e <__udivmoddi4+0x292>
 8001082:	42a5      	cmp	r5, r4
 8001084:	f240 8103 	bls.w	800128e <__udivmoddi4+0x292>
 8001088:	4464      	add	r4, ip
 800108a:	3802      	subs	r0, #2
 800108c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001090:	1b64      	subs	r4, r4, r5
 8001092:	2100      	movs	r1, #0
 8001094:	b11e      	cbz	r6, 800109e <__udivmoddi4+0xa2>
 8001096:	40dc      	lsrs	r4, r3
 8001098:	2300      	movs	r3, #0
 800109a:	e9c6 4300 	strd	r4, r3, [r6]
 800109e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a2:	428b      	cmp	r3, r1
 80010a4:	d908      	bls.n	80010b8 <__udivmoddi4+0xbc>
 80010a6:	2e00      	cmp	r6, #0
 80010a8:	f000 80ec 	beq.w	8001284 <__udivmoddi4+0x288>
 80010ac:	2100      	movs	r1, #0
 80010ae:	e9c6 0500 	strd	r0, r5, [r6]
 80010b2:	4608      	mov	r0, r1
 80010b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010b8:	fab3 f183 	clz	r1, r3
 80010bc:	2900      	cmp	r1, #0
 80010be:	d149      	bne.n	8001154 <__udivmoddi4+0x158>
 80010c0:	42ab      	cmp	r3, r5
 80010c2:	d302      	bcc.n	80010ca <__udivmoddi4+0xce>
 80010c4:	4282      	cmp	r2, r0
 80010c6:	f200 80f7 	bhi.w	80012b8 <__udivmoddi4+0x2bc>
 80010ca:	1a84      	subs	r4, r0, r2
 80010cc:	eb65 0203 	sbc.w	r2, r5, r3
 80010d0:	2001      	movs	r0, #1
 80010d2:	4617      	mov	r7, r2
 80010d4:	2e00      	cmp	r6, #0
 80010d6:	d0e2      	beq.n	800109e <__udivmoddi4+0xa2>
 80010d8:	e9c6 4700 	strd	r4, r7, [r6]
 80010dc:	e7df      	b.n	800109e <__udivmoddi4+0xa2>
 80010de:	b902      	cbnz	r2, 80010e2 <__udivmoddi4+0xe6>
 80010e0:	deff      	udf	#255	; 0xff
 80010e2:	fab2 f382 	clz	r3, r2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f040 808f 	bne.w	800120a <__udivmoddi4+0x20e>
 80010ec:	1a8a      	subs	r2, r1, r2
 80010ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010f2:	fa1f fe8c 	uxth.w	lr, ip
 80010f6:	2101      	movs	r1, #1
 80010f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80010fc:	fb07 2015 	mls	r0, r7, r5, r2
 8001100:	0c22      	lsrs	r2, r4, #16
 8001102:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001106:	fb0e f005 	mul.w	r0, lr, r5
 800110a:	4290      	cmp	r0, r2
 800110c:	d908      	bls.n	8001120 <__udivmoddi4+0x124>
 800110e:	eb1c 0202 	adds.w	r2, ip, r2
 8001112:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8001116:	d202      	bcs.n	800111e <__udivmoddi4+0x122>
 8001118:	4290      	cmp	r0, r2
 800111a:	f200 80ca 	bhi.w	80012b2 <__udivmoddi4+0x2b6>
 800111e:	4645      	mov	r5, r8
 8001120:	1a12      	subs	r2, r2, r0
 8001122:	b2a4      	uxth	r4, r4
 8001124:	fbb2 f0f7 	udiv	r0, r2, r7
 8001128:	fb07 2210 	mls	r2, r7, r0, r2
 800112c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001130:	fb0e fe00 	mul.w	lr, lr, r0
 8001134:	45a6      	cmp	lr, r4
 8001136:	d908      	bls.n	800114a <__udivmoddi4+0x14e>
 8001138:	eb1c 0404 	adds.w	r4, ip, r4
 800113c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001140:	d202      	bcs.n	8001148 <__udivmoddi4+0x14c>
 8001142:	45a6      	cmp	lr, r4
 8001144:	f200 80ba 	bhi.w	80012bc <__udivmoddi4+0x2c0>
 8001148:	4610      	mov	r0, r2
 800114a:	eba4 040e 	sub.w	r4, r4, lr
 800114e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001152:	e79f      	b.n	8001094 <__udivmoddi4+0x98>
 8001154:	f1c1 0720 	rsb	r7, r1, #32
 8001158:	408b      	lsls	r3, r1
 800115a:	fa22 fc07 	lsr.w	ip, r2, r7
 800115e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001162:	fa05 f401 	lsl.w	r4, r5, r1
 8001166:	fa20 f307 	lsr.w	r3, r0, r7
 800116a:	40fd      	lsrs	r5, r7
 800116c:	4323      	orrs	r3, r4
 800116e:	fa00 f901 	lsl.w	r9, r0, r1
 8001172:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8001176:	fa1f fe8c 	uxth.w	lr, ip
 800117a:	fbb5 f8f0 	udiv	r8, r5, r0
 800117e:	0c1c      	lsrs	r4, r3, #16
 8001180:	fb00 5518 	mls	r5, r0, r8, r5
 8001184:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001188:	fb08 f50e 	mul.w	r5, r8, lr
 800118c:	42a5      	cmp	r5, r4
 800118e:	fa02 f201 	lsl.w	r2, r2, r1
 8001192:	d90b      	bls.n	80011ac <__udivmoddi4+0x1b0>
 8001194:	eb1c 0404 	adds.w	r4, ip, r4
 8001198:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800119c:	f080 8087 	bcs.w	80012ae <__udivmoddi4+0x2b2>
 80011a0:	42a5      	cmp	r5, r4
 80011a2:	f240 8084 	bls.w	80012ae <__udivmoddi4+0x2b2>
 80011a6:	f1a8 0802 	sub.w	r8, r8, #2
 80011aa:	4464      	add	r4, ip
 80011ac:	1b64      	subs	r4, r4, r5
 80011ae:	b29d      	uxth	r5, r3
 80011b0:	fbb4 f3f0 	udiv	r3, r4, r0
 80011b4:	fb00 4413 	mls	r4, r0, r3, r4
 80011b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80011bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80011c0:	45a6      	cmp	lr, r4
 80011c2:	d908      	bls.n	80011d6 <__udivmoddi4+0x1da>
 80011c4:	eb1c 0404 	adds.w	r4, ip, r4
 80011c8:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80011cc:	d26b      	bcs.n	80012a6 <__udivmoddi4+0x2aa>
 80011ce:	45a6      	cmp	lr, r4
 80011d0:	d969      	bls.n	80012a6 <__udivmoddi4+0x2aa>
 80011d2:	3b02      	subs	r3, #2
 80011d4:	4464      	add	r4, ip
 80011d6:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80011da:	fba0 8302 	umull	r8, r3, r0, r2
 80011de:	eba4 040e 	sub.w	r4, r4, lr
 80011e2:	429c      	cmp	r4, r3
 80011e4:	46c6      	mov	lr, r8
 80011e6:	461d      	mov	r5, r3
 80011e8:	d355      	bcc.n	8001296 <__udivmoddi4+0x29a>
 80011ea:	d052      	beq.n	8001292 <__udivmoddi4+0x296>
 80011ec:	b156      	cbz	r6, 8001204 <__udivmoddi4+0x208>
 80011ee:	ebb9 030e 	subs.w	r3, r9, lr
 80011f2:	eb64 0405 	sbc.w	r4, r4, r5
 80011f6:	fa04 f707 	lsl.w	r7, r4, r7
 80011fa:	40cb      	lsrs	r3, r1
 80011fc:	40cc      	lsrs	r4, r1
 80011fe:	431f      	orrs	r7, r3
 8001200:	e9c6 7400 	strd	r7, r4, [r6]
 8001204:	2100      	movs	r1, #0
 8001206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800120a:	f1c3 0120 	rsb	r1, r3, #32
 800120e:	fa02 fc03 	lsl.w	ip, r2, r3
 8001212:	fa20 f201 	lsr.w	r2, r0, r1
 8001216:	fa25 f101 	lsr.w	r1, r5, r1
 800121a:	409d      	lsls	r5, r3
 800121c:	432a      	orrs	r2, r5
 800121e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001222:	fa1f fe8c 	uxth.w	lr, ip
 8001226:	fbb1 f0f7 	udiv	r0, r1, r7
 800122a:	fb07 1510 	mls	r5, r7, r0, r1
 800122e:	0c11      	lsrs	r1, r2, #16
 8001230:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001234:	fb00 f50e 	mul.w	r5, r0, lr
 8001238:	428d      	cmp	r5, r1
 800123a:	fa04 f403 	lsl.w	r4, r4, r3
 800123e:	d908      	bls.n	8001252 <__udivmoddi4+0x256>
 8001240:	eb1c 0101 	adds.w	r1, ip, r1
 8001244:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8001248:	d22f      	bcs.n	80012aa <__udivmoddi4+0x2ae>
 800124a:	428d      	cmp	r5, r1
 800124c:	d92d      	bls.n	80012aa <__udivmoddi4+0x2ae>
 800124e:	3802      	subs	r0, #2
 8001250:	4461      	add	r1, ip
 8001252:	1b49      	subs	r1, r1, r5
 8001254:	b292      	uxth	r2, r2
 8001256:	fbb1 f5f7 	udiv	r5, r1, r7
 800125a:	fb07 1115 	mls	r1, r7, r5, r1
 800125e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001262:	fb05 f10e 	mul.w	r1, r5, lr
 8001266:	4291      	cmp	r1, r2
 8001268:	d908      	bls.n	800127c <__udivmoddi4+0x280>
 800126a:	eb1c 0202 	adds.w	r2, ip, r2
 800126e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8001272:	d216      	bcs.n	80012a2 <__udivmoddi4+0x2a6>
 8001274:	4291      	cmp	r1, r2
 8001276:	d914      	bls.n	80012a2 <__udivmoddi4+0x2a6>
 8001278:	3d02      	subs	r5, #2
 800127a:	4462      	add	r2, ip
 800127c:	1a52      	subs	r2, r2, r1
 800127e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001282:	e739      	b.n	80010f8 <__udivmoddi4+0xfc>
 8001284:	4631      	mov	r1, r6
 8001286:	4630      	mov	r0, r6
 8001288:	e709      	b.n	800109e <__udivmoddi4+0xa2>
 800128a:	4639      	mov	r1, r7
 800128c:	e6e7      	b.n	800105e <__udivmoddi4+0x62>
 800128e:	4610      	mov	r0, r2
 8001290:	e6fc      	b.n	800108c <__udivmoddi4+0x90>
 8001292:	45c1      	cmp	r9, r8
 8001294:	d2aa      	bcs.n	80011ec <__udivmoddi4+0x1f0>
 8001296:	ebb8 0e02 	subs.w	lr, r8, r2
 800129a:	eb63 050c 	sbc.w	r5, r3, ip
 800129e:	3801      	subs	r0, #1
 80012a0:	e7a4      	b.n	80011ec <__udivmoddi4+0x1f0>
 80012a2:	4645      	mov	r5, r8
 80012a4:	e7ea      	b.n	800127c <__udivmoddi4+0x280>
 80012a6:	4603      	mov	r3, r0
 80012a8:	e795      	b.n	80011d6 <__udivmoddi4+0x1da>
 80012aa:	4640      	mov	r0, r8
 80012ac:	e7d1      	b.n	8001252 <__udivmoddi4+0x256>
 80012ae:	46d0      	mov	r8, sl
 80012b0:	e77c      	b.n	80011ac <__udivmoddi4+0x1b0>
 80012b2:	3d02      	subs	r5, #2
 80012b4:	4462      	add	r2, ip
 80012b6:	e733      	b.n	8001120 <__udivmoddi4+0x124>
 80012b8:	4608      	mov	r0, r1
 80012ba:	e70b      	b.n	80010d4 <__udivmoddi4+0xd8>
 80012bc:	4464      	add	r4, ip
 80012be:	3802      	subs	r0, #2
 80012c0:	e743      	b.n	800114a <__udivmoddi4+0x14e>
 80012c2:	bf00      	nop

080012c4 <__aeabi_idiv0>:
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop

080012c8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4313      	orrs	r3, r2
 80012de:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4013      	ands	r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012ec:	68fb      	ldr	r3, [r7, #12]
}
 80012ee:	bf00      	nop
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001304:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001306:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4313      	orrs	r3, r2
 800130e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001314:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4013      	ands	r3, r2
 800131a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800131c:	68fb      	ldr	r3, [r7, #12]
}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr

08001328 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001334:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	43db      	mvns	r3, r3
 800133a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800133e:	4013      	ands	r3, r2
 8001340:	660b      	str	r3, [r1, #96]	; 0x60
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001350:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <MX_ADC_Init+0x94>)
 8001352:	4a24      	ldr	r2, [pc, #144]	; (80013e4 <MX_ADC_Init+0x98>)
 8001354:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001356:	4b22      	ldr	r3, [pc, #136]	; (80013e0 <MX_ADC_Init+0x94>)
 8001358:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800135c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800135e:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <MX_ADC_Init+0x94>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001364:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <MX_ADC_Init+0x94>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800136a:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <MX_ADC_Init+0x94>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001370:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <MX_ADC_Init+0x94>)
 8001372:	2204      	movs	r2, #4
 8001374:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001376:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <MX_ADC_Init+0x94>)
 8001378:	2200      	movs	r2, #0
 800137a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800137c:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <MX_ADC_Init+0x94>)
 800137e:	2200      	movs	r2, #0
 8001380:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001382:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <MX_ADC_Init+0x94>)
 8001384:	2200      	movs	r2, #0
 8001386:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001388:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <MX_ADC_Init+0x94>)
 800138a:	2201      	movs	r2, #1
 800138c:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800138e:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <MX_ADC_Init+0x94>)
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <MX_ADC_Init+0x94>)
 8001398:	2200      	movs	r2, #0
 800139a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800139c:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <MX_ADC_Init+0x94>)
 800139e:	2200      	movs	r2, #0
 80013a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <MX_ADC_Init+0x94>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <MX_ADC_Init+0x94>)
 80013ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013b0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <MX_ADC_Init+0x94>)
 80013b4:	2207      	movs	r2, #7
 80013b6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_ADC_Init+0x94>)
 80013ba:	2207      	movs	r2, #7
 80013bc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <MX_ADC_Init+0x94>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_ADC_Init+0x94>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80013cc:	4804      	ldr	r0, [pc, #16]	; (80013e0 <MX_ADC_Init+0x94>)
 80013ce:	f003 f8f7 	bl	80045c0 <HAL_ADC_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_ADC_Init+0x90>
  {
    Error_Handler();
 80013d8:	f000 fdce 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000164 	.word	0x20000164
 80013e4:	40012400 	.word	0x40012400

080013e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0d      	ldr	r2, [pc, #52]	; (800143c <HAL_ADC_MspInit+0x54>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d113      	bne.n	8001432 <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800140a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800140e:	f7ff ff73 	bl	80012f8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	2002      	movs	r0, #2
 8001414:	f7ff ff58 	bl	80012c8 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB13     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = SiPM_Temp_Pin|SiPM_Signal_Pin|Battery_Monitor_Pin;
 8001418:	f242 0318 	movw	r3, #8216	; 0x2018
 800141c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800141e:	2303      	movs	r3, #3
 8001420:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001426:	f107 030c 	add.w	r3, r7, #12
 800142a:	4619      	mov	r1, r3
 800142c:	4804      	ldr	r0, [pc, #16]	; (8001440 <HAL_ADC_MspInit+0x58>)
 800142e:	f004 fec7 	bl	80061c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001432:	bf00      	nop
 8001434:	3720      	adds	r7, #32
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40012400 	.word	0x40012400
 8001440:	48000400 	.word	0x48000400

08001444 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a07      	ldr	r2, [pc, #28]	; (8001470 <HAL_ADC_MspDeInit+0x2c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d108      	bne.n	8001468 <HAL_ADC_MspDeInit+0x24>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001456:	f44f 7000 	mov.w	r0, #512	; 0x200
 800145a:	f7ff ff65 	bl	8001328 <LL_APB2_GRP1_DisableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB13     ------> ADC_IN0
    */
    HAL_GPIO_DeInit(GPIOB, SiPM_Temp_Pin|SiPM_Signal_Pin|Battery_Monitor_Pin);
 800145e:	f242 0118 	movw	r1, #8216	; 0x2018
 8001462:	4804      	ldr	r0, [pc, #16]	; (8001474 <HAL_ADC_MspDeInit+0x30>)
 8001464:	f005 f80c 	bl	8006480 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40012400 	.word	0x40012400
 8001474:	48000400 	.word	0x48000400

08001478 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 800147c:	4b03      	ldr	r3, [pc, #12]	; (800148c <SYS_InitMeasurement+0x14>)
 800147e:	4a04      	ldr	r2, [pc, #16]	; (8001490 <SYS_InitMeasurement+0x18>)
 8001480:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	20000164 	.word	0x20000164
 8001490:	40012400 	.word	0x40012400

08001494 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  __IO int16_t temperatureDegreeC = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	803b      	strh	r3, [r7, #0]
  uint32_t measuredLevel = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 80014a2:	f000 f869 	bl	8001578 <SYS_GetBatteryLevel>
 80014a6:	4603      	mov	r3, r0
 80014a8:	807b      	strh	r3, [r7, #2]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 80014aa:	482d      	ldr	r0, [pc, #180]	; (8001560 <SYS_GetTemperatureLevel+0xcc>)
 80014ac:	f000 f898 	bl	80015e0 <ADC_ReadChannels>
 80014b0:	6078      	str	r0, [r7, #4]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 80014b2:	4b2c      	ldr	r3, [pc, #176]	; (8001564 <SYS_GetTemperatureLevel+0xd0>)
 80014b4:	881a      	ldrh	r2, [r3, #0]
 80014b6:	4b2c      	ldr	r3, [pc, #176]	; (8001568 <SYS_GetTemperatureLevel+0xd4>)
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d026      	beq.n	800150c <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 80014be:	4b29      	ldr	r3, [pc, #164]	; (8001564 <SYS_GetTemperatureLevel+0xd0>)
 80014c0:	881a      	ldrh	r2, [r3, #0]
 80014c2:	4b29      	ldr	r3, [pc, #164]	; (8001568 <SYS_GetTemperatureLevel+0xd4>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d01c      	beq.n	8001504 <SYS_GetTemperatureLevel+0x70>
 80014ca:	887b      	ldrh	r3, [r7, #2]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	fb02 f303 	mul.w	r3, r2, r3
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	4a25      	ldr	r2, [pc, #148]	; (800156c <SYS_GetTemperatureLevel+0xd8>)
 80014d6:	fba2 2303 	umull	r2, r3, r2, r3
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	461a      	mov	r2, r3
 80014de:	4b22      	ldr	r3, [pc, #136]	; (8001568 <SYS_GetTemperatureLevel+0xd4>)
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2264      	movs	r2, #100	; 0x64
 80014e6:	fb03 f202 	mul.w	r2, r3, r2
 80014ea:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <SYS_GetTemperatureLevel+0xd0>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	4619      	mov	r1, r3
 80014f0:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <SYS_GetTemperatureLevel+0xd4>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	1acb      	subs	r3, r1, r3
 80014f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	331e      	adds	r3, #30
 80014fe:	b29b      	uxth	r3, r3
 8001500:	b21b      	sxth	r3, r3
 8001502:	e001      	b.n	8001508 <SYS_GetTemperatureLevel+0x74>
 8001504:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001508:	803b      	strh	r3, [r7, #0]
 800150a:	e01d      	b.n	8001548 <SYS_GetTemperatureLevel+0xb4>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 800150c:	887b      	ldrh	r3, [r7, #2]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	fb03 f202 	mul.w	r2, r3, r2
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <SYS_GetTemperatureLevel+0xdc>)
 8001516:	fba3 1302 	umull	r1, r3, r3, r2
 800151a:	1ad2      	subs	r2, r2, r3
 800151c:	0852      	lsrs	r2, r2, #1
 800151e:	4413      	add	r3, r2
 8001520:	0adb      	lsrs	r3, r3, #11
 8001522:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001526:	fb02 f303 	mul.w	r3, r2, r3
 800152a:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 800152e:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8001532:	4a10      	ldr	r2, [pc, #64]	; (8001574 <SYS_GetTemperatureLevel+0xe0>)
 8001534:	fb82 1203 	smull	r1, r2, r2, r3
 8001538:	1292      	asrs	r2, r2, #10
 800153a:	17db      	asrs	r3, r3, #31
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	b29b      	uxth	r3, r3
 8001540:	331e      	adds	r3, #30
 8001542:	b29b      	uxth	r3, r3
 8001544:	b21b      	sxth	r3, r3
 8001546:	803b      	strh	r3, [r7, #0]
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8001548:	883b      	ldrh	r3, [r7, #0]
 800154a:	b21b      	sxth	r3, r3
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	b21b      	sxth	r3, r3
 8001550:	803b      	strh	r3, [r7, #0]

  return (int16_t) temperatureDegreeC;
 8001552:	883b      	ldrh	r3, [r7, #0]
 8001554:	b21b      	sxth	r3, r3
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	b0001000 	.word	0xb0001000
 8001564:	1fff75c8 	.word	0x1fff75c8
 8001568:	1fff75a8 	.word	0x1fff75a8
 800156c:	09ee009f 	.word	0x09ee009f
 8001570:	00100101 	.word	0x00100101
 8001574:	68db8bad 	.word	0x68db8bad

08001578 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001586:	4813      	ldr	r0, [pc, #76]	; (80015d4 <SYS_GetBatteryLevel+0x5c>)
 8001588:	f000 f82a 	bl	80015e0 <ADC_ReadChannels>
 800158c:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	80fb      	strh	r3, [r7, #6]
 8001598:	e016      	b.n	80015c8 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <SYS_GetBatteryLevel+0x60>)
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d00b      	beq.n	80015be <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <SYS_GetBatteryLevel+0x60>)
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	f640 43e4 	movw	r3, #3300	; 0xce4
 80015b0:	fb03 f202 	mul.w	r2, r3, r2
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ba:	80fb      	strh	r3, [r7, #6]
 80015bc:	e004      	b.n	80015c8 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80015be:	4a07      	ldr	r2, [pc, #28]	; (80015dc <SYS_GetBatteryLevel+0x64>)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c6:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 80015c8:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	b4002000 	.word	0xb4002000
 80015d8:	1fff75aa 	.word	0x1fff75aa
 80015dc:	004c08d8 	.word	0x004c08d8

080015e0 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80015ec:	f107 0308 	add.w	r3, r7, #8
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80015f8:	f7ff fea8 	bl	800134c <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80015fc:	481a      	ldr	r0, [pc, #104]	; (8001668 <ADC_ReadChannels+0x88>)
 80015fe:	f003 fdfe 	bl	80051fe <HAL_ADCEx_Calibration_Start>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001608:	f000 fcb6 	bl	8001f78 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001614:	2300      	movs	r3, #0
 8001616:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001618:	f107 0308 	add.w	r3, r7, #8
 800161c:	4619      	mov	r1, r3
 800161e:	4812      	ldr	r0, [pc, #72]	; (8001668 <ADC_ReadChannels+0x88>)
 8001620:	f003 fb0a 	bl	8004c38 <HAL_ADC_ConfigChannel>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 800162a:	f000 fca5 	bl	8001f78 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800162e:	480e      	ldr	r0, [pc, #56]	; (8001668 <ADC_ReadChannels+0x88>)
 8001630:	f003 f9e6 	bl	8004a00 <HAL_ADC_Start>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 800163a:	f000 fc9d 	bl	8001f78 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800163e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001642:	4809      	ldr	r0, [pc, #36]	; (8001668 <ADC_ReadChannels+0x88>)
 8001644:	f003 fa54 	bl	8004af0 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001648:	4807      	ldr	r0, [pc, #28]	; (8001668 <ADC_ReadChannels+0x88>)
 800164a:	f003 fa1f 	bl	8004a8c <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800164e:	4806      	ldr	r0, [pc, #24]	; (8001668 <ADC_ReadChannels+0x88>)
 8001650:	f003 fae5 	bl	8004c1e <HAL_ADC_GetValue>
 8001654:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001656:	4804      	ldr	r0, [pc, #16]	; (8001668 <ADC_ReadChannels+0x88>)
 8001658:	f003 f946 	bl	80048e8 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 800165c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800165e:	4618      	mov	r0, r3
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000164 	.word	0x20000164

0800166c <LL_AHB1_GRP1_EnableClock>:
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001678:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800167a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4313      	orrs	r3, r2
 8001682:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001688:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4013      	ands	r3, r2
 800168e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001690:	68fb      	ldr	r3, [r7, #12]
}
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80016a0:	2004      	movs	r0, #4
 80016a2:	f7ff ffe3 	bl	800166c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016a6:	2001      	movs	r0, #1
 80016a8:	f7ff ffe0 	bl	800166c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2102      	movs	r1, #2
 80016b0:	200b      	movs	r0, #11
 80016b2:	f003 ff4a 	bl	800554a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016b6:	200b      	movs	r0, #11
 80016b8:	f003 ff61 	bl	800557e <HAL_NVIC_EnableIRQ>

}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}

080016c0 <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80016cc:	23ff      	movs	r3, #255	; 0xff
 80016ce:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80016d6:	d311      	bcc.n	80016fc <FLASH_IF_Write+0x3c>
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <FLASH_IF_Write+0x48>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	029a      	lsls	r2, r3, #10
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <FLASH_IF_Write+0x4c>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80016e6:	3b01      	subs	r3, #1
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d306      	bcc.n	80016fc <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	68b9      	ldr	r1, [r7, #8]
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f000 f85a 	bl	80017ac <FLASH_IF_INT_Write>
 80016f8:	4603      	mov	r3, r0
 80016fa:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 80016fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	1fff75e0 	.word	0x1fff75e0
 800170c:	03fffc00 	.word	0x03fffc00

08001710 <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800171c:	23ff      	movs	r3, #255	; 0xff
 800171e:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001726:	d311      	bcc.n	800174c <FLASH_IF_Read+0x3c>
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <FLASH_IF_Read+0x48>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	029a      	lsls	r2, r3, #10
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <FLASH_IF_Read+0x4c>)
 8001730:	4013      	ands	r3, r2
 8001732:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001736:	3b01      	subs	r3, #1
 8001738:	68ba      	ldr	r2, [r7, #8]
 800173a:	4293      	cmp	r3, r2
 800173c:	d306      	bcc.n	800174c <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	68b9      	ldr	r1, [r7, #8]
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f000 f93a 	bl	80019bc <FLASH_IF_INT_Read>
 8001748:	4603      	mov	r3, r0
 800174a:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 800174c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	1fff75e0 	.word	0x1fff75e0
 800175c:	03fffc00 	.word	0x03fffc00

08001760 <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800176a:	23ff      	movs	r3, #255	; 0xff
 800176c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001774:	d310      	bcc.n	8001798 <FLASH_IF_Erase+0x38>
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <FLASH_IF_Erase+0x44>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	029a      	lsls	r2, r3, #10
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <FLASH_IF_Erase+0x48>)
 800177e:	4013      	ands	r3, r2
 8001780:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001784:	3b01      	subs	r3, #1
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	4293      	cmp	r3, r2
 800178a:	d305      	bcc.n	8001798 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 800178c:	6839      	ldr	r1, [r7, #0]
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f932 	bl	80019f8 <FLASH_IF_INT_Erase>
 8001794:	4603      	mov	r3, r0
 8001796:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 8001798:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	1fff75e0 	.word	0x1fff75e0
 80017a8:	03fffc00 	.word	0x03fffc00

080017ac <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b090      	sub	sp, #64	; 0x40
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t uSource = (uint32_t)pSource;
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t length = uLength;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00c      	beq.n	80017ea <FLASH_IF_INT_Write+0x3e>
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d009      	beq.n	80017ea <FLASH_IF_INT_Write+0x3e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d104      	bne.n	80017ea <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d002      	beq.n	80017f0 <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 80017ea:	f06f 0305 	mvn.w	r3, #5
 80017ee:	e0da      	b.n	80019a6 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 80017f0:	f000 f992 	bl	8001b18 <FLASH_IF_INT_Clear_Error>
 80017f4:	4603      	mov	r3, r0
 80017f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (ret_status == FLASH_IF_OK)
 80017fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f040 80cf 	bne.w	80019a2 <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001804:	f004 fb06 	bl	8005e14 <HAL_FLASH_Unlock>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	f040 80c6 	bne.w	800199c <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 8001810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001812:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001816:	4b66      	ldr	r3, [pc, #408]	; (80019b0 <FLASH_IF_INT_Write+0x204>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	0299      	lsls	r1, r3, #10
 800181c:	4b65      	ldr	r3, [pc, #404]	; (80019b4 <FLASH_IF_INT_Write+0x208>)
 800181e:	400b      	ands	r3, r1
 8001820:	fbb2 f1f3 	udiv	r1, r2, r3
 8001824:	fb01 f303 	mul.w	r3, r1, r3
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	0adb      	lsrs	r3, r3, #11
 800182c:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 800182e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4413      	add	r3, r2
 8001834:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001838:	3b01      	subs	r3, #1
 800183a:	4a5d      	ldr	r2, [pc, #372]	; (80019b0 <FLASH_IF_INT_Write+0x204>)
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	0291      	lsls	r1, r2, #10
 8001840:	4a5c      	ldr	r2, [pc, #368]	; (80019b4 <FLASH_IF_INT_Write+0x208>)
 8001842:	400a      	ands	r2, r1
 8001844:	fbb3 f1f2 	udiv	r1, r3, r2
 8001848:	fb01 f202 	mul.w	r2, r1, r2
 800184c:	1a9b      	subs	r3, r3, r2
 800184e:	0ada      	lsrs	r2, r3, #11
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	3301      	adds	r3, #1
 8001856:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d905      	bls.n	800186a <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 800185e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001860:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001864:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001868:	633b      	str	r3, [r7, #48]	; 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800186e:	e089      	b.n	8001984 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8001870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001872:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001876:	02db      	lsls	r3, r3, #11
 8001878:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 800187a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f000 f925 	bl	8001acc <FLASH_IF_INT_IsEmpty>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d031      	beq.n	80018ec <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 8001888:	4b4b      	ldr	r3, [pc, #300]	; (80019b8 <FLASH_IF_INT_Write+0x20c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d103      	bne.n	8001898 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 8001890:	23fa      	movs	r3, #250	; 0xfa
 8001892:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 8001896:	e07e      	b.n	8001996 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001898:	4b47      	ldr	r3, [pc, #284]	; (80019b8 <FLASH_IF_INT_Write+0x20c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6939      	ldr	r1, [r7, #16]
 800189e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 f88a 	bl	80019bc <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 80018a8:	4b43      	ldr	r3, [pc, #268]	; (80019b8 <FLASH_IF_INT_Write+0x20c>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018b2:	4413      	add	r3, r2
 80018b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80018b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018b8:	b292      	uxth	r2, r2
 80018ba:	4618      	mov	r0, r3
 80018bc:	f01b fb36 	bl	801cf2c <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 f896 	bl	80019f8 <FLASH_IF_INT_Erase>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 80018d2:	23fe      	movs	r3, #254	; 0xfe
 80018d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 80018d8:	e05d      	b.n	8001996 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 80018de:	4b36      	ldr	r3, [pc, #216]	; (80019b8 <FLASH_IF_INT_Write+0x20c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 80018e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018e8:	61fb      	str	r3, [r7, #28]
 80018ea:	e005      	b.n	80018f8 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 80018ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = uSource;
 80018f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f2:	623b      	str	r3, [r7, #32]
          current_length = length;
 80018f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018f6:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80018f8:	2300      	movs	r3, #0
 80018fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80018fc:	e026      	b.n	800194c <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 80018fe:	6a3a      	ldr	r2, [r7, #32]
 8001900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001902:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800190a:	2001      	movs	r0, #1
 800190c:	f004 fa3e 	bl	8005d8c <HAL_FLASH_Program>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d113      	bne.n	800193e <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	e9d3 0100 	ldrd	r0, r1, [r3]
 800191c:	6a3a      	ldr	r2, [r7, #32]
 800191e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001920:	4413      	add	r3, r2
 8001922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001926:	4299      	cmp	r1, r3
 8001928:	bf08      	it	eq
 800192a:	4290      	cmpeq	r0, r2
 800192c:	d003      	beq.n	8001936 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 800192e:	23fc      	movs	r3, #252	; 0xfc
 8001930:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 8001934:	e00e      	b.n	8001954 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	3308      	adds	r3, #8
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
 800193c:	e003      	b.n	8001946 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 800193e:	23fc      	movs	r3, #252	; 0xfc
 8001940:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 8001944:	e006      	b.n	8001954 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001948:	3308      	adds	r3, #8
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
 800194c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	429a      	cmp	r2, r3
 8001952:	d3d4      	bcc.n	80018fe <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 8001954:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001958:	2b00      	cmp	r3, #0
 800195a:	d11b      	bne.n	8001994 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 800195c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800195e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001960:	4413      	add	r3, r2
 8001962:	63bb      	str	r3, [r7, #56]	; 0x38
        uSource += length;
 8001964:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001968:	4413      	add	r3, r2
 800196a:	637b      	str	r3, [r7, #52]	; 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001976:	bf28      	it	cs
 8001978:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 800197c:	633b      	str	r3, [r7, #48]	; 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 800197e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001980:	3301      	adds	r3, #1
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	4413      	add	r3, r2
 800198a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800198c:	429a      	cmp	r2, r3
 800198e:	f4ff af6f 	bcc.w	8001870 <FLASH_IF_INT_Write+0xc4>
 8001992:	e000      	b.n	8001996 <FLASH_IF_INT_Write+0x1ea>
          break;
 8001994:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001996:	f004 fa5f 	bl	8005e58 <HAL_FLASH_Lock>
 800199a:	e002      	b.n	80019a2 <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 800199c:	23fb      	movs	r3, #251	; 0xfb
 800199e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 80019a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3740      	adds	r7, #64	; 0x40
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	1fff75e0 	.word	0x1fff75e0
 80019b4:	03fffc00 	.word	0x03fffc00
 80019b8:	200001c8 	.word	0x200001c8

080019bc <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d002      	beq.n	80019d8 <FLASH_IF_INT_Read+0x1c>
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d102      	bne.n	80019de <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 80019d8:	f06f 0305 	mvn.w	r3, #5
 80019dc:	e008      	b.n	80019f0 <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	461a      	mov	r2, r3
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f01b faa0 	bl	801cf2c <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 80019ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d102      	bne.n	8001a1e <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001a18:	f06f 0305 	mvn.w	r3, #5
 8001a1c:	e04e      	b.n	8001abc <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001a1e:	f000 f87b 	bl	8001b18 <FLASH_IF_INT_Clear_Error>
 8001a22:	4603      	mov	r3, r0
 8001a24:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 8001a26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d144      	bne.n	8001ab8 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001a2e:	f004 f9f1 	bl	8005e14 <HAL_FLASH_Unlock>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d13d      	bne.n	8001ab4 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <FLASH_IF_INT_Erase+0xcc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	0299      	lsls	r1, r3, #10
 8001a48:	4b1f      	ldr	r3, [pc, #124]	; (8001ac8 <FLASH_IF_INT_Erase+0xd0>)
 8001a4a:	400b      	ands	r3, r1
 8001a4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8001a50:	fb01 f303 	mul.w	r3, r1, r3
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	0adb      	lsrs	r3, r3, #11
 8001a58:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	4413      	add	r3, r2
 8001a60:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001a64:	3b01      	subs	r3, #1
 8001a66:	4a17      	ldr	r2, [pc, #92]	; (8001ac4 <FLASH_IF_INT_Erase+0xcc>)
 8001a68:	6812      	ldr	r2, [r2, #0]
 8001a6a:	0291      	lsls	r1, r2, #10
 8001a6c:	4a16      	ldr	r2, [pc, #88]	; (8001ac8 <FLASH_IF_INT_Erase+0xd0>)
 8001a6e:	400a      	ands	r2, r1
 8001a70:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a74:	fb01 f202 	mul.w	r2, r1, r2
 8001a78:	1a9b      	subs	r3, r3, r2
 8001a7a:	0ada      	lsrs	r2, r3, #11
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	3301      	adds	r3, #1
 8001a82:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001a84:	f107 0214 	add.w	r2, r7, #20
 8001a88:	f107 0308 	add.w	r3, r7, #8
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f004 fac2 	bl	8006018 <HAL_FLASHEx_Erase>
 8001a94:	4603      	mov	r3, r0
 8001a96:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001a98:	7fbb      	ldrb	r3, [r7, #30]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d007      	beq.n	8001aae <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001a9e:	7fbb      	ldrb	r3, [r7, #30]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d101      	bne.n	8001aa8 <FLASH_IF_INT_Erase+0xb0>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e001      	b.n	8001aac <FLASH_IF_INT_Erase+0xb4>
 8001aa8:	f06f 0301 	mvn.w	r3, #1
 8001aac:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001aae:	f004 f9d3 	bl	8005e58 <HAL_FLASH_Lock>
 8001ab2:	e001      	b.n	8001ab8 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001ab4:	23fb      	movs	r3, #251	; 0xfb
 8001ab6:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001ab8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3720      	adds	r7, #32
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	1fff75e0 	.word	0x1fff75e0
 8001ac8:	03fffc00 	.word	0x03fffc00

08001acc <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	e011      	b.n	8001b04 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001aea:	bf08      	it	eq
 8001aec:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8001af0:	d002      	beq.n	8001af8 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001af2:	2301      	movs	r3, #1
 8001af4:	60fb      	str	r3, [r7, #12]
      break;
 8001af6:	e009      	b.n	8001b0c <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3308      	adds	r3, #8
 8001afc:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	3308      	adds	r3, #8
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d3e9      	bcc.n	8001ae0 <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001b1e:	23fb      	movs	r3, #251	; 0xfb
 8001b20:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001b22:	f004 f977 	bl	8005e14 <HAL_FLASH_Unlock>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d110      	bne.n	8001b4e <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <FLASH_IF_INT_Clear_Error+0x44>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <FLASH_IF_INT_Clear_Error+0x44>)
 8001b32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001b36:	6193      	str	r3, [r2, #24]
 8001b38:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <FLASH_IF_INT_Clear_Error+0x44>)
 8001b3a:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001b3e:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001b40:	f004 f98a 	bl	8005e58 <HAL_FLASH_Lock>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	58004000 	.word	0x58004000

08001b60 <LL_AHB2_GRP1_EnableClock>:
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4013      	ands	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b84:	68fb      	ldr	r3, [r7, #12]
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	f7ff ffdb 	bl	8001b60 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001baa:	2002      	movs	r0, #2
 8001bac:	f7ff ffd8 	bl	8001b60 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb0:	2004      	movs	r0, #4
 8001bb2:	f7ff ffd5 	bl	8001b60 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Memory_CS_Pin|Anneal_Enable_Pin, GPIO_PIN_RESET);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001bbc:	482b      	ldr	r0, [pc, #172]	; (8001c6c <MX_GPIO_Init+0xdc>)
 8001bbe:	f004 fd44 	bl	800664a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Bias_CS_Pin|Env_Sens_Enable_Pin|Boot_Mode_Pin|Stim_Enable_Pin
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f240 413d 	movw	r1, #1085	; 0x43d
 8001bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bcc:	f004 fd3d 	bl	800664a <HAL_GPIO_WritePin>
                          |RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	2120      	movs	r1, #32
 8001bd4:	4825      	ldr	r0, [pc, #148]	; (8001c6c <MX_GPIO_Init+0xdc>)
 8001bd6:	f004 fd38 	bl	800664a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Memory_CS_Pin|Anneal_Enable_Pin;
 8001bda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bde:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be0:	2301      	movs	r3, #1
 8001be2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	2300      	movs	r3, #0
 8001bea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	4619      	mov	r1, r3
 8001bf0:	481e      	ldr	r0, [pc, #120]	; (8001c6c <MX_GPIO_Init+0xdc>)
 8001bf2:	f004 fae5 	bl	80061c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Bias_CS_Pin|Env_Sens_Enable_Pin|Boot_Mode_Pin|Stim_Enable_Pin;
 8001bf6:	f240 430d 	movw	r3, #1037	; 0x40d
 8001bfa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	2300      	movs	r3, #0
 8001c06:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c10:	f004 fad6 	bl	80061c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001c14:	2320      	movs	r3, #32
 8001c16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c20:	2303      	movs	r3, #3
 8001c22:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	4619      	mov	r1, r3
 8001c28:	4810      	ldr	r0, [pc, #64]	; (8001c6c <MX_GPIO_Init+0xdc>)
 8001c2a:	f004 fac9 	bl	80061c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Accel_Int_Pin;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Accel_Int_GPIO_Port, &GPIO_InitStruct);
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	4619      	mov	r1, r3
 8001c40:	480b      	ldr	r0, [pc, #44]	; (8001c70 <MX_GPIO_Init+0xe0>)
 8001c42:	f004 fabd 	bl	80061c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001c46:	2330      	movs	r3, #48	; 0x30
 8001c48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c52:	2303      	movs	r3, #3
 8001c54:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c5e:	f004 faaf 	bl	80061c0 <HAL_GPIO_Init>

}
 8001c62:	bf00      	nop
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	48000400 	.word	0x48000400
 8001c70:	48000800 	.word	0x48000800

08001c74 <LL_AHB2_GRP1_EnableClock>:
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4013      	ands	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c98:	68fb      	ldr	r3, [r7, #12]
}
 8001c9a:	bf00      	nop
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <LL_APB1_GRP1_EnableClock>:
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
}
 8001cca:	bf00      	nop
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr

08001cd4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <MX_I2C2_Init+0x74>)
 8001cda:	4a1c      	ldr	r2, [pc, #112]	; (8001d4c <MX_I2C2_Init+0x78>)
 8001cdc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001cde:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <MX_I2C2_Init+0x74>)
 8001ce0:	4a1b      	ldr	r2, [pc, #108]	; (8001d50 <MX_I2C2_Init+0x7c>)
 8001ce2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001ce4:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <MX_I2C2_Init+0x74>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <MX_I2C2_Init+0x74>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cf0:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <MX_I2C2_Init+0x74>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001cf6:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <MX_I2C2_Init+0x74>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <MX_I2C2_Init+0x74>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <MX_I2C2_Init+0x74>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <MX_I2C2_Init+0x74>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d0e:	480e      	ldr	r0, [pc, #56]	; (8001d48 <MX_I2C2_Init+0x74>)
 8001d10:	f004 fcb2 	bl	8006678 <HAL_I2C_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001d1a:	f000 f92d 	bl	8001f78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4809      	ldr	r0, [pc, #36]	; (8001d48 <MX_I2C2_Init+0x74>)
 8001d22:	f005 f9ff 	bl	8007124 <HAL_I2CEx_ConfigAnalogFilter>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001d2c:	f000 f924 	bl	8001f78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001d30:	2100      	movs	r1, #0
 8001d32:	4805      	ldr	r0, [pc, #20]	; (8001d48 <MX_I2C2_Init+0x74>)
 8001d34:	f005 fa40 	bl	80071b8 <HAL_I2CEx_ConfigDigitalFilter>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001d3e:	f000 f91b 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200001cc 	.word	0x200001cc
 8001d4c:	40005800 	.word	0x40005800
 8001d50:	20303e5d 	.word	0x20303e5d

08001d54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b096      	sub	sp, #88	; 0x58
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	2238      	movs	r2, #56	; 0x38
 8001d72:	2100      	movs	r1, #0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f01c fc1f 	bl	801e5b8 <memset>
  if(i2cHandle->Instance==I2C2)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a21      	ldr	r2, [pc, #132]	; (8001e04 <HAL_I2C_MspInit+0xb0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d13b      	bne.n	8001dfc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001d88:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d8e:	f107 030c 	add.w	r3, r7, #12
 8001d92:	4618      	mov	r0, r3
 8001d94:	f006 fccc 	bl	8008730 <HAL_RCCEx_PeriphCLKConfig>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d9e:	f000 f8eb 	bl	8001f78 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da2:	2001      	movs	r0, #1
 8001da4:	f7ff ff66 	bl	8001c74 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da8:	2002      	movs	r0, #2
 8001daa:	f7ff ff63 	bl	8001c74 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001db2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001db4:	2312      	movs	r3, #18
 8001db6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dce:	f004 f9f7 	bl	80061c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dd6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd8:	2312      	movs	r3, #18
 8001dda:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de0:	2300      	movs	r3, #0
 8001de2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001de4:	2304      	movs	r3, #4
 8001de6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001dec:	4619      	mov	r1, r3
 8001dee:	4806      	ldr	r0, [pc, #24]	; (8001e08 <HAL_I2C_MspInit+0xb4>)
 8001df0:	f004 f9e6 	bl	80061c0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001df4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001df8:	f7ff ff54 	bl	8001ca4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	3758      	adds	r7, #88	; 0x58
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40005800 	.word	0x40005800
 8001e08:	48000400 	.word	0x48000400

08001e0c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1c:	f023 0218 	bic.w	r2, r3, #24
 8001e20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr
	...

08001e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e3e:	f002 f9d1 	bl	80041e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e42:	f000 f831 	bl	8001ea8 <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */

  // initialize the GPIOs this is to allow the probing of the Boot Mode pin to determine
  // if the user button was pressed during reset
  MX_GPIO_Init();
 8001e46:	f7ff fea3 	bl	8001b90 <MX_GPIO_Init>

  // check to see if the boot mode pin is drawn low (button pressed)
  int boot_mode = HAL_GPIO_ReadPin(Boot_Mode_GPIO_Port, Boot_Mode_Pin);
 8001e4a:	2108      	movs	r1, #8
 8001e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e50:	f004 fbe4 	bl	800661c <HAL_GPIO_ReadPin>
 8001e54:	4603      	mov	r3, r0
 8001e56:	603b      	str	r3, [r7, #0]

  //enable LoRaWAN or experiment mode as required
  bool experimentMode = false;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	71fb      	strb	r3, [r7, #7]
  if (DEFAULT_DISBALE_LORA && boot_mode == 0) MX_LoRaWAN_Init();
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <main+0x2e>
 8001e62:	f00a f8d1 	bl	800c008 <MX_LoRaWAN_Init>
  if (DEFAULT_DISBALE_LORA && boot_mode == 1) experimentMode = true;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <main+0x38>
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	71fb      	strb	r3, [r7, #7]
  if (!DEFAULT_DISBALE_LORA && boot_mode == 1) MX_LoRaWAN_Init();  

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_I2C2_Init();
 8001e70:	f7ff ff30 	bl	8001cd4 <MX_I2C2_Init>
  MX_SPI2_Init();
 8001e74:	f000 f992 	bl	800219c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  APP_LOG(TS_ON, VLEVEL_M, "Hello APP_LOG \r\n");
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <main+0x64>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	2002      	movs	r0, #2
 8001e80:	f01c f8a0 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
  bsp_env_sensors.init(&hi2c2);
 8001e84:	4906      	ldr	r1, [pc, #24]	; (8001ea0 <main+0x68>)
 8001e86:	4807      	ldr	r0, [pc, #28]	; (8001ea4 <main+0x6c>)
 8001e88:	f002 f86c 	bl	8003f64 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  if (experimentMode) enterExperimentMode();
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <main+0x5e>
 8001e92:	f002 f971 	bl	8004178 <_Z19enterExperimentModev>

  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001e96:	f00a f8bf 	bl	800c018 <MX_LoRaWAN_Process>
 8001e9a:	e7fc      	b.n	8001e96 <main+0x5e>
 8001e9c:	0801e628 	.word	0x0801e628
 8001ea0:	200001cc 	.word	0x200001cc
 8001ea4:	20000220 	.word	0x20000220

08001ea8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b09a      	sub	sp, #104	; 0x68
 8001eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eae:	f107 0320 	add.w	r3, r7, #32
 8001eb2:	2248      	movs	r2, #72	; 0x48
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f01c fb7e 	bl	801e5b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ebc:	f107 0308 	add.w	r3, r7, #8
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
 8001ecc:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ece:	f005 f9bf 	bl	8007250 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f7ff ff9a 	bl	8001e0c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ed8:	4b26      	ldr	r3, [pc, #152]	; (8001f74 <_Z18SystemClock_Configv+0xcc>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ee0:	4a24      	ldr	r2, [pc, #144]	; (8001f74 <_Z18SystemClock_Configv+0xcc>)
 8001ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <_Z18SystemClock_Configv+0xcc>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8001ef4:	2326      	movs	r3, #38	; 0x26
 8001ef6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ef8:	2381      	movs	r3, #129	; 0x81
 8001efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001efc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f00:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001f02:	2301      	movs	r3, #1
 8001f04:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f06:	2340      	movs	r3, #64	; 0x40
 8001f08:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001f0e:	23b0      	movs	r3, #176	; 0xb0
 8001f10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f16:	f107 0320 	add.w	r3, r7, #32
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f005 fce4 	bl	80078e8 <HAL_RCC_OscConfig>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	bf14      	ite	ne
 8001f26:	2301      	movne	r3, #1
 8001f28:	2300      	moveq	r3, #0
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8001f30:	f000 f822 	bl	8001f78 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001f34:	234f      	movs	r3, #79	; 0x4f
 8001f36:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f4c:	f107 0308 	add.w	r3, r7, #8
 8001f50:	2102      	movs	r1, #2
 8001f52:	4618      	mov	r0, r3
 8001f54:	f006 f84a 	bl	8007fec <HAL_RCC_ClockConfig>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	bf14      	ite	ne
 8001f5e:	2301      	movne	r3, #1
 8001f60:	2300      	moveq	r3, #0
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8001f68:	f000 f806 	bl	8001f78 <Error_Handler>
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	3768      	adds	r7, #104	; 0x68
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	58000400 	.word	0x58000400

08001f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f7c:	b672      	cpsid	i
}
 8001f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  	APP_LOG(TS_ON, VLEVEL_M, "HAL error");
 8001f80:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <Error_Handler+0x18>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	2100      	movs	r1, #0
 8001f86:	2002      	movs	r0, #2
 8001f88:	f01c f81c 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
 8001f8c:	e7f8      	b.n	8001f80 <Error_Handler+0x8>
 8001f8e:	bf00      	nop
 8001f90:	0801e63c 	.word	0x0801e63c

08001f94 <_Z41__static_initialization_and_destruction_0ii>:
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d107      	bne.n	8001fb4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d102      	bne.n	8001fb4 <_Z41__static_initialization_and_destruction_0ii+0x20>
EnvionmentSensors bsp_env_sensors;
 8001fae:	4803      	ldr	r0, [pc, #12]	; (8001fbc <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001fb0:	f001 ffc5 	bl	8003f3e <_ZN17EnvionmentSensorsC1Ev>
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000220 	.word	0x20000220

08001fc0 <_GLOBAL__sub_I_bsp_env_sensors>:
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001fc8:	2001      	movs	r0, #1
 8001fca:	f7ff ffe3 	bl	8001f94 <_Z41__static_initialization_and_destruction_0ii>
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <LL_APB1_GRP1_EnableClock>:
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ffc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ffe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4313      	orrs	r3, r2
 8002006:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800200c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4013      	ands	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002014:	68fb      	ldr	r3, [r7, #12]
}
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08c      	sub	sp, #48	; 0x30
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	222c      	movs	r2, #44	; 0x2c
 800202a:	2100      	movs	r1, #0
 800202c:	4618      	mov	r0, r3
 800202e:	f01c fac3 	bl	801e5b8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002032:	4b22      	ldr	r3, [pc, #136]	; (80020bc <MX_RTC_Init+0x9c>)
 8002034:	4a22      	ldr	r2, [pc, #136]	; (80020c0 <MX_RTC_Init+0xa0>)
 8002036:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8002038:	4b20      	ldr	r3, [pc, #128]	; (80020bc <MX_RTC_Init+0x9c>)
 800203a:	221f      	movs	r2, #31
 800203c:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800203e:	4b1f      	ldr	r3, [pc, #124]	; (80020bc <MX_RTC_Init+0x9c>)
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002044:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <MX_RTC_Init+0x9c>)
 8002046:	2200      	movs	r2, #0
 8002048:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800204a:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <MX_RTC_Init+0x9c>)
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002050:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <MX_RTC_Init+0x9c>)
 8002052:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002056:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002058:	4b18      	ldr	r3, [pc, #96]	; (80020bc <MX_RTC_Init+0x9c>)
 800205a:	2200      	movs	r2, #0
 800205c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 800205e:	4b17      	ldr	r3, [pc, #92]	; (80020bc <MX_RTC_Init+0x9c>)
 8002060:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002064:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002066:	4815      	ldr	r0, [pc, #84]	; (80020bc <MX_RTC_Init+0x9c>)
 8002068:	f006 fc7c 	bl	8008964 <HAL_RTC_Init>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8002072:	f7ff ff81 	bl	8001f78 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8002076:	4811      	ldr	r0, [pc, #68]	; (80020bc <MX_RTC_Init+0x9c>)
 8002078:	f006 ff72 	bl	8008f60 <HAL_RTCEx_SetSSRU_IT>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8002082:	f7ff ff79 	bl	8001f78 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002086:	2300      	movs	r3, #0
 8002088:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800208e:	2300      	movs	r3, #0
 8002090:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002092:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002096:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8002098:	f44f 7380 	mov.w	r3, #256	; 0x100
 800209c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 800209e:	1d3b      	adds	r3, r7, #4
 80020a0:	2200      	movs	r2, #0
 80020a2:	4619      	mov	r1, r3
 80020a4:	4805      	ldr	r0, [pc, #20]	; (80020bc <MX_RTC_Init+0x9c>)
 80020a6:	f006 fcdf 	bl	8008a68 <HAL_RTC_SetAlarm_IT>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80020b0:	f7ff ff62 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80020b4:	bf00      	nop
 80020b6:	3730      	adds	r7, #48	; 0x30
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000330 	.word	0x20000330
 80020c0:	40002800 	.word	0x40002800

080020c4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b090      	sub	sp, #64	; 0x40
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020cc:	f107 0308 	add.w	r3, r7, #8
 80020d0:	2238      	movs	r2, #56	; 0x38
 80020d2:	2100      	movs	r1, #0
 80020d4:	4618      	mov	r0, r3
 80020d6:	f01c fa6f 	bl	801e5b8 <memset>
  if(rtcHandle->Instance==RTC)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a16      	ldr	r2, [pc, #88]	; (8002138 <HAL_RTC_MspInit+0x74>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d125      	bne.n	8002130 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020e8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80020ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ee:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020f0:	f107 0308 	add.w	r3, r7, #8
 80020f4:	4618      	mov	r0, r3
 80020f6:	f006 fb1b 	bl	8008730 <HAL_RCCEx_PeriphCLKConfig>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002100:	f7ff ff3a 	bl	8001f78 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002104:	f7ff ff64 	bl	8001fd0 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002108:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800210c:	f7ff ff70 	bl	8001ff0 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8002110:	2200      	movs	r2, #0
 8002112:	2100      	movs	r1, #0
 8002114:	2002      	movs	r0, #2
 8002116:	f003 fa18 	bl	800554a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800211a:	2002      	movs	r0, #2
 800211c:	f003 fa2f 	bl	800557e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002120:	2200      	movs	r2, #0
 8002122:	2100      	movs	r1, #0
 8002124:	202a      	movs	r0, #42	; 0x2a
 8002126:	f003 fa10 	bl	800554a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800212a:	202a      	movs	r0, #42	; 0x2a
 800212c:	f003 fa27 	bl	800557e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002130:	bf00      	nop
 8002132:	3740      	adds	r7, #64	; 0x40
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40002800 	.word	0x40002800

0800213c <LL_AHB2_GRP1_EnableClock>:
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002148:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800214a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4313      	orrs	r3, r2
 8002152:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002158:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4013      	ands	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002160:	68fb      	ldr	r3, [r7, #12]
}
 8002162:	bf00      	nop
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <LL_APB1_GRP1_EnableClock>:
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002178:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800217a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4313      	orrs	r3, r2
 8002182:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002188:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4013      	ands	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002190:	68fb      	ldr	r3, [r7, #12]
}
 8002192:	bf00      	nop
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80021a0:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <MX_SPI2_Init+0x74>)
 80021a2:	4a1c      	ldr	r2, [pc, #112]	; (8002214 <MX_SPI2_Init+0x78>)
 80021a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80021a6:	4b1a      	ldr	r3, [pc, #104]	; (8002210 <MX_SPI2_Init+0x74>)
 80021a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80021ae:	4b18      	ldr	r3, [pc, #96]	; (8002210 <MX_SPI2_Init+0x74>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80021b4:	4b16      	ldr	r3, [pc, #88]	; (8002210 <MX_SPI2_Init+0x74>)
 80021b6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80021ba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021bc:	4b14      	ldr	r3, [pc, #80]	; (8002210 <MX_SPI2_Init+0x74>)
 80021be:	2200      	movs	r2, #0
 80021c0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021c2:	4b13      	ldr	r3, [pc, #76]	; (8002210 <MX_SPI2_Init+0x74>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <MX_SPI2_Init+0x74>)
 80021ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021ce:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021d0:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <MX_SPI2_Init+0x74>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021d6:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <MX_SPI2_Init+0x74>)
 80021d8:	2200      	movs	r2, #0
 80021da:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80021dc:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <MX_SPI2_Init+0x74>)
 80021de:	2200      	movs	r2, #0
 80021e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021e2:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <MX_SPI2_Init+0x74>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80021e8:	4b09      	ldr	r3, [pc, #36]	; (8002210 <MX_SPI2_Init+0x74>)
 80021ea:	2207      	movs	r2, #7
 80021ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021ee:	4b08      	ldr	r3, [pc, #32]	; (8002210 <MX_SPI2_Init+0x74>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <MX_SPI2_Init+0x74>)
 80021f6:	2208      	movs	r2, #8
 80021f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021fa:	4805      	ldr	r0, [pc, #20]	; (8002210 <MX_SPI2_Init+0x74>)
 80021fc:	f006 ff3e 	bl	800907c <HAL_SPI_Init>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002206:	f7ff feb7 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000368 	.word	0x20000368
 8002214:	40003800 	.word	0x40003800

08002218 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b096      	sub	sp, #88	; 0x58
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002220:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002230:	f107 030c 	add.w	r3, r7, #12
 8002234:	2238      	movs	r2, #56	; 0x38
 8002236:	2100      	movs	r1, #0
 8002238:	4618      	mov	r0, r3
 800223a:	f01c f9bd 	bl	801e5b8 <memset>
  if(spiHandle->Instance==SPI2)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a2b      	ldr	r2, [pc, #172]	; (80022f0 <HAL_SPI_MspInit+0xd8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d14e      	bne.n	80022e6 <HAL_SPI_MspInit+0xce>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 8002248:	2310      	movs	r3, #16
 800224a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 800224c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002250:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002252:	f107 030c 	add.w	r3, r7, #12
 8002256:	4618      	mov	r0, r3
 8002258:	f006 fa6a 	bl	8008730 <HAL_RCCEx_PeriphCLKConfig>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002262:	f7ff fe89 	bl	8001f78 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002266:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800226a:	f7ff ff7f 	bl	800216c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800226e:	2002      	movs	r0, #2
 8002270:	f7ff ff64 	bl	800213c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002274:	2001      	movs	r0, #1
 8002276:	f7ff ff61 	bl	800213c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800227a:	2004      	movs	r0, #4
 800227c:	f7ff ff5e 	bl	800213c <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA9     ------> SPI2_SCK
    PC1     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002280:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002284:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002286:	2302      	movs	r3, #2
 8002288:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228e:	2300      	movs	r3, #0
 8002290:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002292:	2305      	movs	r3, #5
 8002294:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002296:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800229a:	4619      	mov	r1, r3
 800229c:	4815      	ldr	r0, [pc, #84]	; (80022f4 <HAL_SPI_MspInit+0xdc>)
 800229e:	f003 ff8f 	bl	80061c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022a6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a8:	2302      	movs	r3, #2
 80022aa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b0:	2300      	movs	r3, #0
 80022b2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022b4:	2305      	movs	r3, #5
 80022b6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80022bc:	4619      	mov	r1, r3
 80022be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c2:	f003 ff7d 	bl	80061c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80022c6:	2302      	movs	r3, #2
 80022c8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d2:	2300      	movs	r3, #0
 80022d4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 80022d6:	2303      	movs	r3, #3
 80022d8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80022de:	4619      	mov	r1, r3
 80022e0:	4805      	ldr	r0, [pc, #20]	; (80022f8 <HAL_SPI_MspInit+0xe0>)
 80022e2:	f003 ff6d 	bl	80061c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80022e6:	bf00      	nop
 80022e8:	3758      	adds	r7, #88	; 0x58
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40003800 	.word	0x40003800
 80022f4:	48000400 	.word	0x48000400
 80022f8:	48000800 	.word	0x48000800

080022fc <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8002300:	4b03      	ldr	r3, [pc, #12]	; (8002310 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8002302:	2201      	movs	r2, #1
 8002304:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr
 8002310:	58000400 	.word	0x58000400

08002314 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr

08002320 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr

0800232c <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8002330:	f001 ff78 	bl	8004224 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8002334:	f7ff ffe2 	bl	80022fc <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002338:	2001      	movs	r0, #1
 800233a:	f005 f81b 	bl	8007374 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}

08002342 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8002346:	f001 ff7b 	bl	8004240 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 800234a:	f000 fee7 	bl	800311c <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */
  
  /* USER CODE END ExitStopMode_2 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}

08002352 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8002356:	f001 ff65 	bl	8004224 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800235a:	2101      	movs	r1, #1
 800235c:	2000      	movs	r0, #0
 800235e:	f004 ff85 	bl	800726c <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}

08002366 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800236a:	f001 ff69 	bl	8004240 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002376:	bf00      	nop
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr

0800237e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002382:	e7fe      	b.n	8002382 <NMI_Handler+0x4>

08002384 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002388:	e7fe      	b.n	8002388 <HardFault_Handler+0x4>

0800238a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800238e:	e7fe      	b.n	800238e <MemManage_Handler+0x4>

08002390 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002394:	e7fe      	b.n	8002394 <BusFault_Handler+0x4>

08002396 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800239a:	e7fe      	b.n	800239a <UsageFault_Handler+0x4>

0800239c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr

080023a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr

080023cc <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80023d0:	4802      	ldr	r0, [pc, #8]	; (80023dc <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80023d2:	f006 fe01 	bl	8008fd8 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000330 	.word	0x20000330

080023e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80023e4:	4802      	ldr	r0, [pc, #8]	; (80023f0 <DMA1_Channel1_IRQHandler+0x10>)
 80023e6:	f003 fb61 	bl	8005aac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000474 	.word	0x20000474

080023f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023f8:	4802      	ldr	r0, [pc, #8]	; (8002404 <USART1_IRQHandler+0x10>)
 80023fa:	f007 fd0b 	bl	8009e14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	200003e0 	.word	0x200003e0

08002408 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800240c:	4802      	ldr	r0, [pc, #8]	; (8002418 <RTC_Alarm_IRQHandler+0x10>)
 800240e:	f006 fc93 	bl	8008d38 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000330 	.word	0x20000330

0800241c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002420:	4802      	ldr	r0, [pc, #8]	; (800242c <SUBGHZ_Radio_IRQHandler+0x10>)
 8002422:	f007 fa1b 	bl	800985c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	200003cc 	.word	0x200003cc

08002430 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800243c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800243e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4313      	orrs	r3, r2
 8002446:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800244c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4013      	ands	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002454:	68fb      	ldr	r3, [r7, #12]
}
 8002456:	bf00      	nop
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <MX_SUBGHZ_Init+0x20>)
 8002466:	2208      	movs	r2, #8
 8002468:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800246a:	4805      	ldr	r0, [pc, #20]	; (8002480 <MX_SUBGHZ_Init+0x20>)
 800246c:	f006 ff74 	bl	8009358 <HAL_SUBGHZ_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8002476:	f7ff fd7f 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200003cc 	.word	0x200003cc

08002484 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 800248c:	2001      	movs	r0, #1
 800248e:	f7ff ffcf 	bl	8002430 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8002492:	2200      	movs	r2, #0
 8002494:	2100      	movs	r1, #0
 8002496:	2032      	movs	r0, #50	; 0x32
 8002498:	f003 f857 	bl	800554a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 800249c:	2032      	movs	r0, #50	; 0x32
 800249e:	f003 f86e 	bl	800557e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <LL_RCC_SetClkAfterWakeFromStop>:
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80024b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80024bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80024d4:	4b02      	ldr	r3, [pc, #8]	; (80024e0 <LL_FLASH_GetUDN+0x10>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr
 80024e0:	1fff7580 	.word	0x1fff7580

080024e4 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80024e8:	4b03      	ldr	r3, [pc, #12]	; (80024f8 <LL_FLASH_GetDeviceID+0x14>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	b2db      	uxtb	r3, r3
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	1fff7584 	.word	0x1fff7584

080024fc <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002500:	4b03      	ldr	r3, [pc, #12]	; (8002510 <LL_FLASH_GetSTCompanyID+0x14>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	0a1b      	lsrs	r3, r3, #8
}
 8002506:	4618      	mov	r0, r3
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	1fff7584 	.word	0x1fff7584

08002514 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8002518:	2000      	movs	r0, #0
 800251a:	f7ff ffc6 	bl	80024aa <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 800251e:	f01b fa93 	bl	801da48 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8002522:	4b0e      	ldr	r3, [pc, #56]	; (800255c <SystemApp_Init+0x48>)
 8002524:	2201      	movs	r2, #1
 8002526:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8002528:	f000 f988 	bl	800283c <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 800252c:	f01b fd1c 	bl	801df68 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002530:	480b      	ldr	r0, [pc, #44]	; (8002560 <SystemApp_Init+0x4c>)
 8002532:	f01b fdc7 	bl	801e0c4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002536:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <SystemApp_Init+0x50>)
 8002538:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800253c:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800253e:	2003      	movs	r0, #3
 8002540:	f01b fdce 	bl	801e0e0 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8002544:	f7fe ff98 	bl	8001478 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8002548:	f000 f9b8 	bl	80028bc <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 800254c:	f01a fc48 	bl	801cde0 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002550:	2101      	movs	r1, #1
 8002552:	2001      	movs	r0, #1
 8002554:	f01a fc84 	bl	801ce60 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}
 800255c:	200003d8 	.word	0x200003d8
 8002560:	08002735 	.word	0x08002735
 8002564:	58004000 	.word	0x58004000

08002568 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 800256c:	f01a fca8 	bl	801cec0 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8002570:	bf00      	nop
 8002572:	bd80      	pop	{r7, pc}

08002574 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 800257e:	f7fe fffb 	bl	8001578 <SYS_GetBatteryLevel>
 8002582:	4603      	mov	r3, r0
 8002584:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8002586:	88bb      	ldrh	r3, [r7, #4]
 8002588:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800258c:	4293      	cmp	r3, r2
 800258e:	d902      	bls.n	8002596 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8002590:	23fe      	movs	r3, #254	; 0xfe
 8002592:	71fb      	strb	r3, [r7, #7]
 8002594:	e014      	b.n	80025c0 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8002596:	88bb      	ldrh	r3, [r7, #4]
 8002598:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800259c:	d202      	bcs.n	80025a4 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	71fb      	strb	r3, [r7, #7]
 80025a2:	e00d      	b.n	80025c0 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80025a4:	88bb      	ldrh	r3, [r7, #4]
 80025a6:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 80025aa:	461a      	mov	r2, r3
 80025ac:	4613      	mov	r3, r2
 80025ae:	01db      	lsls	r3, r3, #7
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	461a      	mov	r2, r3
 80025b6:	4b05      	ldr	r3, [pc, #20]	; (80025cc <GetBatteryLevel+0x58>)
 80025b8:	fba3 2302 	umull	r2, r3, r3, r2
 80025bc:	09db      	lsrs	r3, r3, #7
 80025be:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80025c0:	79fb      	ldrb	r3, [r7, #7]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	1b4e81b5 	.word	0x1b4e81b5

080025d0 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	4618      	mov	r0, r3
 80025de:	f000 f93b 	bl	8002858 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe fcab 	bl	8000f40 <__aeabi_f2iz>
 80025ea:	4603      	mov	r3, r0
 80025ec:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 80025ee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3720      	adds	r7, #32
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 80025fa:	b590      	push	{r4, r7, lr}
 80025fc:	b087      	sub	sp, #28
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8002606:	f7ff ff63 	bl	80024d0 <LL_FLASH_GetUDN>
 800260a:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002612:	d138      	bne.n	8002686 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002614:	f001 fe22 	bl	800425c <HAL_GetUIDw0>
 8002618:	4604      	mov	r4, r0
 800261a:	f001 fe33 	bl	8004284 <HAL_GetUIDw2>
 800261e:	4603      	mov	r3, r0
 8002620:	4423      	add	r3, r4
 8002622:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002624:	f001 fe24 	bl	8004270 <HAL_GetUIDw1>
 8002628:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	0e1a      	lsrs	r2, r3, #24
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3307      	adds	r3, #7
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	0c1a      	lsrs	r2, r3, #16
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3306      	adds	r3, #6
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	0a1a      	lsrs	r2, r3, #8
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3305      	adds	r3, #5
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3304      	adds	r3, #4
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	0e1a      	lsrs	r2, r3, #24
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3303      	adds	r3, #3
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	0c1a      	lsrs	r2, r3, #16
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3302      	adds	r3, #2
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	0a1a      	lsrs	r2, r3, #8
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3301      	adds	r3, #1
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	b2da      	uxtb	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002684:	e031      	b.n	80026ea <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3307      	adds	r3, #7
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	0a1a      	lsrs	r2, r3, #8
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3306      	adds	r3, #6
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	0c1a      	lsrs	r2, r3, #16
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3305      	adds	r3, #5
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	0e1a      	lsrs	r2, r3, #24
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3304      	adds	r3, #4
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80026b4:	f7ff ff16 	bl	80024e4 <LL_FLASH_GetDeviceID>
 80026b8:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3303      	adds	r3, #3
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80026c4:	f7ff ff1a 	bl	80024fc <LL_FLASH_GetSTCompanyID>
 80026c8:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3302      	adds	r3, #2
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	0a1a      	lsrs	r2, r3, #8
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3301      	adds	r3, #1
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	0c1b      	lsrs	r3, r3, #16
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	701a      	strb	r2, [r3, #0]
}
 80026ea:	bf00      	nop
 80026ec:	371c      	adds	r7, #28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd90      	pop	{r4, r7, pc}

080026f2 <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 80026f2:	b590      	push	{r4, r7, lr}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 80026fa:	f7ff fee9 	bl	80024d0 <LL_FLASH_GetUDN>
 80026fe:	4602      	mov	r2, r0
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800270c:	d10d      	bne.n	800272a <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 800270e:	f001 fda5 	bl	800425c <HAL_GetUIDw0>
 8002712:	4604      	mov	r4, r0
 8002714:	f001 fdac 	bl	8004270 <HAL_GetUIDw1>
 8002718:	4603      	mov	r3, r0
 800271a:	405c      	eors	r4, r3
 800271c:	f001 fdb2 	bl	8004284 <HAL_GetUIDw2>
 8002720:	4603      	mov	r3, r0
 8002722:	ea84 0203 	eor.w	r2, r4, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	bd90      	pop	{r4, r7, pc}
	...

08002734 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af02      	add	r7, sp, #8
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800273e:	f107 0308 	add.w	r3, r7, #8
 8002742:	4618      	mov	r0, r3
 8002744:	f01a fccc 	bl	801d0e0 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800274e:	9200      	str	r2, [sp, #0]
 8002750:	4a07      	ldr	r2, [pc, #28]	; (8002770 <TimestampNow+0x3c>)
 8002752:	2110      	movs	r1, #16
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f81d 	bl	8002794 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7fd fd0c 	bl	8000178 <strlen>
 8002760:	4603      	mov	r3, r0
 8002762:	b29a      	uxth	r2, r3
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002768:	bf00      	nop
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	0801e648 	.word	0x0801e648

08002774 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002778:	2101      	movs	r1, #1
 800277a:	2002      	movs	r0, #2
 800277c:	f01a fb40 	bl	801ce00 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002780:	bf00      	nop
 8002782:	bd80      	pop	{r7, pc}

08002784 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002788:	2100      	movs	r1, #0
 800278a:	2002      	movs	r0, #2
 800278c:	f01a fb38 	bl	801ce00 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002790:	bf00      	nop
 8002792:	bd80      	pop	{r7, pc}

08002794 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002794:	b40c      	push	{r2, r3}
 8002796:	b580      	push	{r7, lr}
 8002798:	b084      	sub	sp, #16
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80027a0:	f107 031c 	add.w	r3, r7, #28
 80027a4:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80027a6:	6839      	ldr	r1, [r7, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f01a fe69 	bl	801d484 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80027bc:	b002      	add	sp, #8
 80027be:	4770      	bx	lr

080027c0 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr

080027d4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_GetTick+0x24>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80027e6:	f000 f935 	bl	8002a54 <TIMER_IF_GetTimerValue>
 80027ea:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80027ec:	687b      	ldr	r3, [r7, #4]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	200003d8 	.word	0x200003d8

080027fc <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f9ab 	bl	8002b62 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <LL_EXTI_EnableIT_32_63+0x24>)
 800281e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002822:	4905      	ldr	r1, [pc, #20]	; (8002838 <LL_EXTI_EnableIT_32_63+0x24>)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	58000800 	.word	0x58000800

0800283c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8002840:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002844:	f7ff ffe6 	bl	8002814 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8002848:	f001 fd26 	bl	8004298 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800284c:	f001 fd2a 	bl	80042a4 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8002850:	f001 fd2e 	bl	80042b0 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002854:	bf00      	nop
 8002856:	bd80      	pop	{r7, pc}

08002858 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002860:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <EnvSensors_Read+0x50>)
 8002862:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002864:	4b11      	ldr	r3, [pc, #68]	; (80028ac <EnvSensors_Read+0x54>)
 8002866:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002868:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <EnvSensors_Read+0x58>)
 800286a:	60fb      	str	r3, [r7, #12]
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 800286c:	f7fe fe12 	bl	8001494 <SYS_GetTemperatureLevel>
 8002870:	4603      	mov	r3, r0
 8002872:	121b      	asrs	r3, r3, #8
 8002874:	b21b      	sxth	r3, r3
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe f9be 	bl	8000bf8 <__aeabi_i2f>
 800287c:	4603      	mov	r3, r0
 800287e:	613b      	str	r3, [r7, #16]
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a07      	ldr	r2, [pc, #28]	; (80028b4 <EnvSensors_Read+0x5c>)
 8002896:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a07      	ldr	r2, [pc, #28]	; (80028b8 <EnvSensors_Read+0x60>)
 800289c:	611a      	str	r2, [r3, #16]

  return 0;
 800289e:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	42480000 	.word	0x42480000
 80028ac:	41900000 	.word	0x41900000
 80028b0:	447a0000 	.word	0x447a0000
 80028b4:	003e090d 	.word	0x003e090d
 80028b8:	000503ab 	.word	0x000503ab

080028bc <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	607b      	str	r3, [r7, #4]

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
 80028c6:	687b      	ldr	r3, [r7, #4]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80028d6:	bf00      	nop
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr

080028de <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 80028fe:	4b14      	ldr	r3, [pc, #80]	; (8002950 <TIMER_IF_Init+0x5c>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	f083 0301 	eor.w	r3, r3, #1
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	d01b      	beq.n	8002944 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800290c:	4b11      	ldr	r3, [pc, #68]	; (8002954 <TIMER_IF_Init+0x60>)
 800290e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002912:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002914:	f7ff fb84 	bl	8002020 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002918:	f000 f856 	bl	80029c8 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800291c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002920:	480c      	ldr	r0, [pc, #48]	; (8002954 <TIMER_IF_Init+0x60>)
 8002922:	f006 f9ad 	bl	8008c80 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002926:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <TIMER_IF_Init+0x60>)
 8002928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800292c:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800292e:	4809      	ldr	r0, [pc, #36]	; (8002954 <TIMER_IF_Init+0x60>)
 8002930:	f006 fae4 	bl	8008efc <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002934:	2000      	movs	r0, #0
 8002936:	f000 f9d3 	bl	8002ce0 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 800293a:	f000 f85f 	bl	80029fc <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 800293e:	4b04      	ldr	r3, [pc, #16]	; (8002950 <TIMER_IF_Init+0x5c>)
 8002940:	2201      	movs	r2, #1
 8002942:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002944:	79fb      	ldrb	r3, [r7, #7]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	200003d9 	.word	0x200003d9
 8002954:	20000330 	.word	0x20000330

08002958 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08e      	sub	sp, #56	; 0x38
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002966:	f107 0308 	add.w	r3, r7, #8
 800296a:	222c      	movs	r2, #44	; 0x2c
 800296c:	2100      	movs	r1, #0
 800296e:	4618      	mov	r0, r3
 8002970:	f01b fe22 	bl	801e5b8 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002974:	f000 f828 	bl	80029c8 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002978:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <TIMER_IF_StartTimer+0x68>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	4413      	add	r3, r2
 8002980:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002982:	2300      	movs	r3, #0
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	43db      	mvns	r3, r3
 800298a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800298c:	2300      	movs	r3, #0
 800298e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002990:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002994:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002996:	f44f 7380 	mov.w	r3, #256	; 0x100
 800299a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800299c:	f107 0308 	add.w	r3, r7, #8
 80029a0:	2201      	movs	r2, #1
 80029a2:	4619      	mov	r1, r3
 80029a4:	4807      	ldr	r0, [pc, #28]	; (80029c4 <TIMER_IF_StartTimer+0x6c>)
 80029a6:	f006 f85f 	bl	8008a68 <HAL_RTC_SetAlarm_IT>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 80029b0:	f7ff fae2 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 80029b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3738      	adds	r7, #56	; 0x38
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	200003dc 	.word	0x200003dc
 80029c4:	20000330 	.word	0x20000330

080029c8 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80029ce:	2300      	movs	r3, #0
 80029d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80029d2:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <TIMER_IF_StopTimer+0x2c>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80029d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029dc:	4806      	ldr	r0, [pc, #24]	; (80029f8 <TIMER_IF_StopTimer+0x30>)
 80029de:	f006 f94f 	bl	8008c80 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80029e2:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <TIMER_IF_StopTimer+0x30>)
 80029e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029e8:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 80029ea:	79fb      	ldrb	r3, [r7, #7]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40002800 	.word	0x40002800
 80029f8:	20000330 	.word	0x20000330

080029fc <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002a00:	f000 f98e 	bl	8002d20 <GetTimerTicks>
 8002a04:	4603      	mov	r3, r0
 8002a06:	4a03      	ldr	r2, [pc, #12]	; (8002a14 <TIMER_IF_SetTimerContext+0x18>)
 8002a08:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002a0a:	4b02      	ldr	r3, [pc, #8]	; (8002a14 <TIMER_IF_SetTimerContext+0x18>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	200003dc 	.word	0x200003dc

08002a18 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002a1c:	4b02      	ldr	r3, [pc, #8]	; (8002a28 <TIMER_IF_GetTimerContext+0x10>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr
 8002a28:	200003dc 	.word	0x200003dc

08002a2c <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002a36:	f000 f973 	bl	8002d20 <GetTimerTicks>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002a44:	687b      	ldr	r3, [r7, #4]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200003dc 	.word	0x200003dc

08002a54 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002a5e:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <TIMER_IF_GetTimerValue+0x24>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002a66:	f000 f95b 	bl	8002d20 <GetTimerTicks>
 8002a6a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002a6c:	687b      	ldr	r3, [r7, #4]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	200003d9 	.word	0x200003d9

08002a7c <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002a86:	2303      	movs	r3, #3
 8002a88:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002a8a:	687b      	ldr	r3, [r7, #4]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr

08002a96 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002a96:	b5b0      	push	{r4, r5, r7, lr}
 8002a98:	b084      	sub	sp, #16
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	460a      	mov	r2, r1
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	0d95      	lsrs	r5, r2, #22
 8002aac:	0294      	lsls	r4, r2, #10
 8002aae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	4629      	mov	r1, r5
 8002aba:	f7fe fa87 	bl	8000fcc <__aeabi_uldivmod>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bdb0      	pop	{r4, r5, r7, pc}

08002ad0 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002ad0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002ada:	2100      	movs	r1, #0
 8002adc:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	460c      	mov	r4, r1
 8002ae4:	4605      	mov	r5, r0
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	4629      	mov	r1, r5
 8002aea:	f04f 0a00 	mov.w	sl, #0
 8002aee:	f04f 0b00 	mov.w	fp, #0
 8002af2:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002af6:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002afa:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002afe:	4650      	mov	r0, sl
 8002b00:	4659      	mov	r1, fp
 8002b02:	1b02      	subs	r2, r0, r4
 8002b04:	eb61 0305 	sbc.w	r3, r1, r5
 8002b08:	f04f 0000 	mov.w	r0, #0
 8002b0c:	f04f 0100 	mov.w	r1, #0
 8002b10:	0099      	lsls	r1, r3, #2
 8002b12:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002b16:	0090      	lsls	r0, r2, #2
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	eb12 0804 	adds.w	r8, r2, r4
 8002b20:	eb43 0905 	adc.w	r9, r3, r5
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	f04f 0300 	mov.w	r3, #0
 8002b2c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b34:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b38:	4690      	mov	r8, r2
 8002b3a:	4699      	mov	r9, r3
 8002b3c:	4640      	mov	r0, r8
 8002b3e:	4649      	mov	r1, r9
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	0a82      	lsrs	r2, r0, #10
 8002b4a:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002b4e:	0a8b      	lsrs	r3, r1, #10
 8002b50:	4613      	mov	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002b54:	68fb      	ldr	r3, [r7, #12]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002b60:	4770      	bx	lr

08002b62 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b084      	sub	sp, #16
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff ff93 	bl	8002a96 <TIMER_IF_Convert_ms2Tick>
 8002b70:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002b72:	f000 f8d5 	bl	8002d20 <GetTimerTicks>
 8002b76:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002b78:	e000      	b.n	8002b7c <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002b7a:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002b7c:	f000 f8d0 	bl	8002d20 <GetTimerTicks>
 8002b80:	4602      	mov	r2, r0
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d8f6      	bhi.n	8002b7a <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002b8c:	bf00      	nop
 8002b8e:	bf00      	nop
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002b9e:	f01b f8a1 	bl	801dce4 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b084      	sub	sp, #16
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002bb2:	f000 f8a5 	bl	8002d00 <TIMER_IF_BkUp_Read_MSBticks>
 8002bb6:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 f88f 	bl	8002ce0 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002bca:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bce:	b08c      	sub	sp, #48	; 0x30
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002bd8:	f000 f8a2 	bl	8002d20 <GetTimerTicks>
 8002bdc:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002bde:	f000 f88f 	bl	8002d00 <TIMER_IF_BkUp_Read_MSBticks>
 8002be2:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	2200      	movs	r2, #0
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	60fa      	str	r2, [r7, #12]
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	68b9      	ldr	r1, [r7, #8]
 8002bf6:	000b      	movs	r3, r1
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	460c      	mov	r4, r1
 8002c00:	4605      	mov	r5, r0
 8002c02:	eb12 0804 	adds.w	r8, r2, r4
 8002c06:	eb43 0905 	adc.w	r9, r3, r5
 8002c0a:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002c0e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	0a82      	lsrs	r2, r0, #10
 8002c1c:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002c20:	0a8b      	lsrs	r3, r1, #10
 8002c22:	4613      	mov	r3, r2
 8002c24:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	607a      	str	r2, [r7, #4]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002c34:	f04f 0b00 	mov.w	fp, #0
 8002c38:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff ff46 	bl	8002ad0 <TIMER_IF_Convert_Tick2ms>
 8002c44:	4603      	mov	r3, r0
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3730      	adds	r7, #48	; 0x30
 8002c52:	46bd      	mov	sp, r7
 8002c54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002c58 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	2100      	movs	r1, #0
 8002c64:	4803      	ldr	r0, [pc, #12]	; (8002c74 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002c66:	f006 f9db 	bl	8009020 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000330 	.word	0x20000330

08002c78 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	2101      	movs	r1, #1
 8002c84:	4803      	ldr	r0, [pc, #12]	; (8002c94 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002c86:	f006 f9cb 	bl	8009020 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000330 	.word	0x20000330

08002c98 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	4804      	ldr	r0, [pc, #16]	; (8002cb8 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002ca6:	f006 f9d3 	bl	8009050 <HAL_RTCEx_BKUPRead>
 8002caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002cac:	687b      	ldr	r3, [r7, #4]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000330 	.word	0x20000330

08002cbc <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	4804      	ldr	r0, [pc, #16]	; (8002cdc <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002cca:	f006 f9c1 	bl	8009050 <HAL_RTCEx_BKUPRead>
 8002cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002cd0:	687b      	ldr	r3, [r7, #4]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20000330 	.word	0x20000330

08002ce0 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	2102      	movs	r1, #2
 8002cec:	4803      	ldr	r0, [pc, #12]	; (8002cfc <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002cee:	f006 f997 	bl	8009020 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000330 	.word	0x20000330

08002d00 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002d06:	2102      	movs	r1, #2
 8002d08:	4804      	ldr	r0, [pc, #16]	; (8002d1c <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002d0a:	f006 f9a1 	bl	8009050 <HAL_RTCEx_BKUPRead>
 8002d0e:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002d10:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20000330 	.word	0x20000330

08002d20 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002d26:	480b      	ldr	r0, [pc, #44]	; (8002d54 <GetTimerTicks+0x34>)
 8002d28:	f7ff fdd9 	bl	80028de <LL_RTC_TIME_GetSubSecond>
 8002d2c:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002d2e:	e003      	b.n	8002d38 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002d30:	4808      	ldr	r0, [pc, #32]	; (8002d54 <GetTimerTicks+0x34>)
 8002d32:	f7ff fdd4 	bl	80028de <LL_RTC_TIME_GetSubSecond>
 8002d36:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002d38:	4806      	ldr	r0, [pc, #24]	; (8002d54 <GetTimerTicks+0x34>)
 8002d3a:	f7ff fdd0 	bl	80028de <LL_RTC_TIME_GetSubSecond>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d1f4      	bne.n	8002d30 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40002800 	.word	0x40002800

08002d58 <LL_AHB2_GRP1_EnableClock>:
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
}
 8002d7e:	bf00      	nop
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr

08002d88 <LL_APB2_GRP1_EnableClock>:
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4013      	ands	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dac:	68fb      	ldr	r3, [r7, #12]
}
 8002dae:	bf00      	nop
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <LL_APB2_GRP1_DisableClock>:
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dce:	4013      	ands	r3, r2
 8002dd0:	660b      	str	r3, [r1, #96]	; 0x60
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr

08002ddc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002de0:	4b22      	ldr	r3, [pc, #136]	; (8002e6c <MX_USART1_UART_Init+0x90>)
 8002de2:	4a23      	ldr	r2, [pc, #140]	; (8002e70 <MX_USART1_UART_Init+0x94>)
 8002de4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002de6:	4b21      	ldr	r3, [pc, #132]	; (8002e6c <MX_USART1_UART_Init+0x90>)
 8002de8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002dec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002dee:	4b1f      	ldr	r3, [pc, #124]	; (8002e6c <MX_USART1_UART_Init+0x90>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002df4:	4b1d      	ldr	r3, [pc, #116]	; (8002e6c <MX_USART1_UART_Init+0x90>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002dfa:	4b1c      	ldr	r3, [pc, #112]	; (8002e6c <MX_USART1_UART_Init+0x90>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e00:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <MX_USART1_UART_Init+0x90>)
 8002e02:	220c      	movs	r2, #12
 8002e04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e06:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <MX_USART1_UART_Init+0x90>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e0c:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <MX_USART1_UART_Init+0x90>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e12:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <MX_USART1_UART_Init+0x90>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e18:	4b14      	ldr	r3, [pc, #80]	; (8002e6c <MX_USART1_UART_Init+0x90>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e1e:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <MX_USART1_UART_Init+0x90>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e24:	4811      	ldr	r0, [pc, #68]	; (8002e6c <MX_USART1_UART_Init+0x90>)
 8002e26:	f006 fed8 	bl	8009bda <HAL_UART_Init>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002e30:	f7ff f8a2 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e34:	2100      	movs	r1, #0
 8002e36:	480d      	ldr	r0, [pc, #52]	; (8002e6c <MX_USART1_UART_Init+0x90>)
 8002e38:	f008 fffb 	bl	800be32 <HAL_UARTEx_SetTxFifoThreshold>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002e42:	f7ff f899 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e46:	2100      	movs	r1, #0
 8002e48:	4808      	ldr	r0, [pc, #32]	; (8002e6c <MX_USART1_UART_Init+0x90>)
 8002e4a:	f009 f830 	bl	800beae <HAL_UARTEx_SetRxFifoThreshold>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002e54:	f7ff f890 	bl	8001f78 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002e58:	4804      	ldr	r0, [pc, #16]	; (8002e6c <MX_USART1_UART_Init+0x90>)
 8002e5a:	f008 ffaf 	bl	800bdbc <HAL_UARTEx_EnableFifoMode>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002e64:	f7ff f888 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e68:	bf00      	nop
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	200003e0 	.word	0x200003e0
 8002e70:	40013800 	.word	0x40013800

08002e74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b096      	sub	sp, #88	; 0x58
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	605a      	str	r2, [r3, #4]
 8002e86:	609a      	str	r2, [r3, #8]
 8002e88:	60da      	str	r2, [r3, #12]
 8002e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e8c:	f107 030c 	add.w	r3, r7, #12
 8002e90:	2238      	movs	r2, #56	; 0x38
 8002e92:	2100      	movs	r1, #0
 8002e94:	4618      	mov	r0, r3
 8002e96:	f01b fb8f 	bl	801e5b8 <memset>
  if(uartHandle->Instance==USART1)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a2f      	ldr	r2, [pc, #188]	; (8002f5c <HAL_UART_MspInit+0xe8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d156      	bne.n	8002f52 <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002ea8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002eac:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eae:	f107 030c 	add.w	r3, r7, #12
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f005 fc3c 	bl	8008730 <HAL_RCCEx_PeriphCLKConfig>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002ebe:	f7ff f85b 	bl	8001f78 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ec2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ec6:	f7ff ff5f 	bl	8002d88 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eca:	2002      	movs	r0, #2
 8002ecc:	f7ff ff44 	bl	8002d58 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002ed0:	23c0      	movs	r3, #192	; 0xc0
 8002ed2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002edc:	2303      	movs	r3, #3
 8002ede:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ee0:	2307      	movs	r3, #7
 8002ee2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ee8:	4619      	mov	r1, r3
 8002eea:	481d      	ldr	r0, [pc, #116]	; (8002f60 <HAL_UART_MspInit+0xec>)
 8002eec:	f003 f968 	bl	80061c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002ef0:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <HAL_UART_MspInit+0xf0>)
 8002ef2:	4a1d      	ldr	r2, [pc, #116]	; (8002f68 <HAL_UART_MspInit+0xf4>)
 8002ef4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002ef6:	4b1b      	ldr	r3, [pc, #108]	; (8002f64 <HAL_UART_MspInit+0xf0>)
 8002ef8:	2212      	movs	r2, #18
 8002efa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002efc:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <HAL_UART_MspInit+0xf0>)
 8002efe:	2210      	movs	r2, #16
 8002f00:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f02:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <HAL_UART_MspInit+0xf0>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f08:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <HAL_UART_MspInit+0xf0>)
 8002f0a:	2280      	movs	r2, #128	; 0x80
 8002f0c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f0e:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <HAL_UART_MspInit+0xf0>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f14:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <HAL_UART_MspInit+0xf0>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002f1a:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <HAL_UART_MspInit+0xf0>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f20:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <HAL_UART_MspInit+0xf0>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002f26:	480f      	ldr	r0, [pc, #60]	; (8002f64 <HAL_UART_MspInit+0xf0>)
 8002f28:	f002 fb46 	bl	80055b8 <HAL_DMA_Init>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002f32:	f7ff f821 	bl	8001f78 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <HAL_UART_MspInit+0xf0>)
 8002f3a:	67da      	str	r2, [r3, #124]	; 0x7c
 8002f3c:	4a09      	ldr	r2, [pc, #36]	; (8002f64 <HAL_UART_MspInit+0xf0>)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002f42:	2200      	movs	r2, #0
 8002f44:	2102      	movs	r1, #2
 8002f46:	2024      	movs	r0, #36	; 0x24
 8002f48:	f002 faff 	bl	800554a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f4c:	2024      	movs	r0, #36	; 0x24
 8002f4e:	f002 fb16 	bl	800557e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002f52:	bf00      	nop
 8002f54:	3758      	adds	r7, #88	; 0x58
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40013800 	.word	0x40013800
 8002f60:	48000400 	.word	0x48000400
 8002f64:	20000474 	.word	0x20000474
 8002f68:	40020008 	.word	0x40020008

08002f6c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a0b      	ldr	r2, [pc, #44]	; (8002fa8 <HAL_UART_MspDeInit+0x3c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d10f      	bne.n	8002f9e <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002f7e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002f82:	f7ff ff19 	bl	8002db8 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8002f86:	21c0      	movs	r1, #192	; 0xc0
 8002f88:	4808      	ldr	r0, [pc, #32]	; (8002fac <HAL_UART_MspDeInit+0x40>)
 8002f8a:	f003 fa79 	bl	8006480 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f92:	4618      	mov	r0, r3
 8002f94:	f002 fbb8 	bl	8005708 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002f98:	2024      	movs	r0, #36	; 0x24
 8002f9a:	f002 fafe 	bl	800559a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40013800 	.word	0x40013800
 8002fac:	48000400 	.word	0x48000400

08002fb0 <LL_APB2_GRP1_ForceReset>:
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr

08002fd2 <LL_APB2_GRP1_ReleaseReset>:
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8002fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fe8:	4013      	ands	r3, r2
 8002fea:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr
	...

08002ff8 <LL_EXTI_EnableIT_0_31>:
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <LL_EXTI_EnableIT_0_31+0x24>)
 8003002:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003006:	4905      	ldr	r1, [pc, #20]	; (800301c <LL_EXTI_EnableIT_0_31+0x24>)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4313      	orrs	r3, r2
 800300c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	58000800 	.word	0x58000800

08003020 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8003028:	4a07      	ldr	r2, [pc, #28]	; (8003048 <vcom_Init+0x28>)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 800302e:	f7fe fb35 	bl	800169c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003032:	f7ff fed3 	bl	8002ddc <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8003036:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800303a:	f7ff ffdd 	bl	8002ff8 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800303e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	200004d8 	.word	0x200004d8

0800304c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8003050:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003054:	f7ff ffac 	bl	8002fb0 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8003058:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800305c:	f7ff ffb9 	bl	8002fd2 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8003060:	4804      	ldr	r0, [pc, #16]	; (8003074 <vcom_DeInit+0x28>)
 8003062:	f7ff ff83 	bl	8002f6c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8003066:	200f      	movs	r0, #15
 8003068:	f002 fa97 	bl	800559a <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 800306c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800306e:	4618      	mov	r0, r3
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	200003e0 	.word	0x200003e0

08003078 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003084:	887b      	ldrh	r3, [r7, #2]
 8003086:	461a      	mov	r2, r3
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4804      	ldr	r0, [pc, #16]	; (800309c <vcom_Trace_DMA+0x24>)
 800308c:	f006 fe42 	bl	8009d14 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8003090:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	200003e0 	.word	0x200003e0

080030a0 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80030a8:	4a19      	ldr	r2, [pc, #100]	; (8003110 <vcom_ReceiveInit+0x70>)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80030ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030b2:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 80030b4:	f107 0308 	add.w	r3, r7, #8
 80030b8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80030bc:	4815      	ldr	r0, [pc, #84]	; (8003114 <vcom_ReceiveInit+0x74>)
 80030be:	f008 fdf0 	bl	800bca2 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80030c2:	bf00      	nop
 80030c4:	4b13      	ldr	r3, [pc, #76]	; (8003114 <vcom_ReceiveInit+0x74>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d2:	d0f7      	beq.n	80030c4 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80030d4:	bf00      	nop
 80030d6:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <vcom_ReceiveInit+0x74>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030e4:	d1f7      	bne.n	80030d6 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80030e6:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <vcom_ReceiveInit+0x74>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	4b09      	ldr	r3, [pc, #36]	; (8003114 <vcom_ReceiveInit+0x74>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80030f4:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 80030f6:	4807      	ldr	r0, [pc, #28]	; (8003114 <vcom_ReceiveInit+0x74>)
 80030f8:	f008 fe2e 	bl	800bd58 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 80030fc:	2201      	movs	r2, #1
 80030fe:	4906      	ldr	r1, [pc, #24]	; (8003118 <vcom_ReceiveInit+0x78>)
 8003100:	4804      	ldr	r0, [pc, #16]	; (8003114 <vcom_ReceiveInit+0x74>)
 8003102:	f006 fdbb 	bl	8009c7c <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8003106:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	200004dc 	.word	0x200004dc
 8003114:	200003e0 	.word	0x200003e0
 8003118:	200004d4 	.word	0x200004d4

0800311c <vcom_Resume>:

void vcom_Resume(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003120:	4808      	ldr	r0, [pc, #32]	; (8003144 <vcom_Resume+0x28>)
 8003122:	f006 fd5a 	bl	8009bda <HAL_UART_Init>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <vcom_Resume+0x14>
  {
    Error_Handler();
 800312c:	f7fe ff24 	bl	8001f78 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003130:	4805      	ldr	r0, [pc, #20]	; (8003148 <vcom_Resume+0x2c>)
 8003132:	f002 fa41 	bl	80055b8 <HAL_DMA_Init>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <vcom_Resume+0x24>
  {
    Error_Handler();
 800313c:	f7fe ff1c 	bl	8001f78 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8003140:	bf00      	nop
 8003142:	bd80      	pop	{r7, pc}
 8003144:	200003e0 	.word	0x200003e0
 8003148:	20000474 	.word	0x20000474

0800314c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a05      	ldr	r2, [pc, #20]	; (8003170 <HAL_UART_TxCpltCallback+0x24>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d103      	bne.n	8003166 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_UART_TxCpltCallback+0x28>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2000      	movs	r0, #0
 8003164:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8003166:	bf00      	nop
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40013800 	.word	0x40013800
 8003174:	200004d8 	.word	0x200004d8

08003178 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a0d      	ldr	r2, [pc, #52]	; (80031bc <HAL_UART_RxCpltCallback+0x44>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d113      	bne.n	80031b2 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800318a:	4b0d      	ldr	r3, [pc, #52]	; (80031c0 <HAL_UART_RxCpltCallback+0x48>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00a      	beq.n	80031a8 <HAL_UART_RxCpltCallback+0x30>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003198:	2b00      	cmp	r3, #0
 800319a:	d105      	bne.n	80031a8 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 800319c:	4b08      	ldr	r3, [pc, #32]	; (80031c0 <HAL_UART_RxCpltCallback+0x48>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2200      	movs	r2, #0
 80031a2:	2101      	movs	r1, #1
 80031a4:	4807      	ldr	r0, [pc, #28]	; (80031c4 <HAL_UART_RxCpltCallback+0x4c>)
 80031a6:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80031a8:	2201      	movs	r2, #1
 80031aa:	4906      	ldr	r1, [pc, #24]	; (80031c4 <HAL_UART_RxCpltCallback+0x4c>)
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f006 fd65 	bl	8009c7c <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40013800 	.word	0x40013800
 80031c0:	200004dc 	.word	0x200004dc
 80031c4:	200004d4 	.word	0x200004d4

080031c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80031c8:	480d      	ldr	r0, [pc, #52]	; (8003200 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80031ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80031cc:	f7ff fb81 	bl	80028d2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031d0:	480c      	ldr	r0, [pc, #48]	; (8003204 <LoopForever+0x6>)
  ldr r1, =_edata
 80031d2:	490d      	ldr	r1, [pc, #52]	; (8003208 <LoopForever+0xa>)
  ldr r2, =_sidata
 80031d4:	4a0d      	ldr	r2, [pc, #52]	; (800320c <LoopForever+0xe>)
  movs r3, #0
 80031d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031d8:	e002      	b.n	80031e0 <LoopCopyDataInit>

080031da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031de:	3304      	adds	r3, #4

080031e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031e4:	d3f9      	bcc.n	80031da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031e6:	4a0a      	ldr	r2, [pc, #40]	; (8003210 <LoopForever+0x12>)
  ldr r4, =_ebss
 80031e8:	4c0a      	ldr	r4, [pc, #40]	; (8003214 <LoopForever+0x16>)
  movs r3, #0
 80031ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031ec:	e001      	b.n	80031f2 <LoopFillZerobss>

080031ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031f0:	3204      	adds	r2, #4

080031f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031f4:	d3fb      	bcc.n	80031ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80031f6:	f01b f9e7 	bl	801e5c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031fa:	f7fe fe1d 	bl	8001e38 <main>

080031fe <LoopForever>:

LoopForever:
    b LoopForever
 80031fe:	e7fe      	b.n	80031fe <LoopForever>
  ldr   r0, =_estack
 8003200:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003208:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 800320c:	0801f730 	.word	0x0801f730
  ldr r2, =_sbss
 8003210:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 8003214:	200023d8 	.word	0x200023d8

08003218 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003218:	e7fe      	b.n	8003218 <ADC_IRQHandler>

0800321a <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 fbd2 	bl	80039d0 <null_ptr_check>
 800322c:	4603      	mov	r3, r0
 800322e:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8003230:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d131      	bne.n	800329c <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	7a1b      	ldrb	r3, [r3, #8]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d003      	beq.n	8003248 <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	729a      	strb	r2, [r3, #10]
 8003246:	e002      	b.n	800324e <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	729a      	strb	r2, [r3, #10]
        }

        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 800324e:	f107 010e 	add.w	r1, r7, #14
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	2000      	movs	r0, #0
 8003258:	f000 f826 	bl	80032a8 <bmp3_get_regs>
 800325c:	4603      	mov	r3, r0
 800325e:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8003260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d119      	bne.n	800329c <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 8003268:	7bbb      	ldrb	r3, [r7, #14]
 800326a:	2b50      	cmp	r3, #80	; 0x50
 800326c:	d002      	beq.n	8003274 <bmp3_init+0x5a>
 800326e:	7bbb      	ldrb	r3, [r7, #14]
 8003270:	2b60      	cmp	r3, #96	; 0x60
 8003272:	d111      	bne.n	8003298 <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 8003274:	7bba      	ldrb	r2, [r7, #14]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f939 	bl	80034f2 <bmp3_soft_reset>
 8003280:	4603      	mov	r3, r0
 8003282:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8003284:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d107      	bne.n	800329c <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f988 	bl	80035a2 <get_calib_data>
 8003292:	4603      	mov	r3, r0
 8003294:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8003296:	e001      	b.n	800329c <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 8003298:	23fe      	movs	r3, #254	; 0xfe
 800329a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800329c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 80032a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032ac:	b08b      	sub	sp, #44	; 0x2c
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	603b      	str	r3, [r7, #0]
 80032b6:	4603      	mov	r3, r0
 80032b8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80032ba:	6838      	ldr	r0, [r7, #0]
 80032bc:	f000 fb88 	bl	80039d0 <null_ptr_check>
 80032c0:	4603      	mov	r3, r0
 80032c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 80032c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d172      	bne.n	80033b4 <bmp3_get_regs+0x10c>
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d06f      	beq.n	80033b4 <bmp3_get_regs+0x10c>
    {
 80032d4:	466b      	mov	r3, sp
 80032d6:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	7a9b      	ldrb	r3, [r3, #10]
 80032dc:	461a      	mov	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4413      	add	r3, r2
 80032e2:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	7a9b      	ldrb	r3, [r3, #10]
 80032e8:	461a      	mov	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	18d1      	adds	r1, r2, r3
 80032ee:	460b      	mov	r3, r1
 80032f0:	3b01      	subs	r3, #1
 80032f2:	61bb      	str	r3, [r7, #24]
 80032f4:	2300      	movs	r3, #0
 80032f6:	4688      	mov	r8, r1
 80032f8:	4699      	mov	r9, r3
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003306:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800330a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800330e:	2300      	movs	r3, #0
 8003310:	460c      	mov	r4, r1
 8003312:	461d      	mov	r5, r3
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	00eb      	lsls	r3, r5, #3
 800331e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003322:	00e2      	lsls	r2, r4, #3
 8003324:	1dcb      	adds	r3, r1, #7
 8003326:	08db      	lsrs	r3, r3, #3
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	ebad 0d03 	sub.w	sp, sp, r3
 800332e:	466b      	mov	r3, sp
 8003330:	3300      	adds	r3, #0
 8003332:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	7a1b      	ldrb	r3, [r3, #8]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d025      	beq.n	8003388 <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003342:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	68dc      	ldr	r4, [r3, #12]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	7bf8      	ldrb	r0, [r7, #15]
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	6979      	ldr	r1, [r7, #20]
 8003352:	47a0      	blx	r4
 8003354:	4603      	mov	r3, r0
 8003356:	461a      	mov	r2, r3
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 800335c:	2300      	movs	r3, #0
 800335e:	623b      	str	r3, [r7, #32]
 8003360:	e00d      	b.n	800337e <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	7a9b      	ldrb	r3, [r3, #10]
 8003366:	461a      	mov	r2, r3
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	441a      	add	r2, r3
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	440b      	add	r3, r1
 8003372:	6979      	ldr	r1, [r7, #20]
 8003374:	5c8a      	ldrb	r2, [r1, r2]
 8003376:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	3301      	adds	r3, #1
 800337c:	623b      	str	r3, [r7, #32]
 800337e:	6a3a      	ldr	r2, [r7, #32]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	429a      	cmp	r2, r3
 8003384:	d3ed      	bcc.n	8003362 <bmp3_get_regs+0xba>
 8003386:	e00b      	b.n	80033a0 <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	68dc      	ldr	r4, [r3, #12]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	7bf8      	ldrb	r0, [r7, #15]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	68b9      	ldr	r1, [r7, #8]
 8003396:	47a0      	blx	r4
 8003398:	4603      	mov	r3, r0
 800339a:	461a      	mov	r2, r3
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 80033aa:	23f9      	movs	r3, #249	; 0xf9
 80033ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80033b0:	46b5      	mov	sp, r6
    {
 80033b2:	e002      	b.n	80033ba <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80033b4:	23ff      	movs	r3, #255	; 0xff
 80033b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 80033ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80033be:	4618      	mov	r0, r3
 80033c0:	372c      	adds	r7, #44	; 0x2c
 80033c2:	46bd      	mov	sp, r7
 80033c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080033c8 <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 80033c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033cc:	b08b      	sub	sp, #44	; 0x2c
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	607a      	str	r2, [r7, #4]
 80033d6:	603b      	str	r3, [r7, #0]
 80033d8:	466b      	mov	r3, sp
 80033da:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	0059      	lsls	r1, r3, #1
 80033e0:	460b      	mov	r3, r1
 80033e2:	3b01      	subs	r3, #1
 80033e4:	61bb      	str	r3, [r7, #24]
 80033e6:	2300      	movs	r3, #0
 80033e8:	4688      	mov	r8, r1
 80033ea:	4699      	mov	r9, r3
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003400:	2300      	movs	r3, #0
 8003402:	460c      	mov	r4, r1
 8003404:	461d      	mov	r5, r3
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	f04f 0300 	mov.w	r3, #0
 800340e:	00eb      	lsls	r3, r5, #3
 8003410:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003414:	00e2      	lsls	r2, r4, #3
 8003416:	1dcb      	adds	r3, r1, #7
 8003418:	08db      	lsrs	r3, r3, #3
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	ebad 0d03 	sub.w	sp, sp, r3
 8003420:	466b      	mov	r3, sp
 8003422:	3300      	adds	r3, #0
 8003424:	617b      	str	r3, [r7, #20]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003426:	6838      	ldr	r0, [r7, #0]
 8003428:	f000 fad2 	bl	80039d0 <null_ptr_check>
 800342c:	4603      	mov	r3, r0
 800342e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8003432:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003436:	2b00      	cmp	r3, #0
 8003438:	d14e      	bne.n	80034d8 <bmp3_set_regs+0x110>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d04b      	beq.n	80034d8 <bmp3_set_regs+0x110>
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d048      	beq.n	80034d8 <bmp3_set_regs+0x110>
    {
        if (len != 0)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d041      	beq.n	80034d0 <bmp3_set_regs+0x108>
        {
            temp_buff[0] = reg_data[0];
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	781a      	ldrb	r2, [r3, #0]
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	7a1b      	ldrb	r3, [r3, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d114      	bne.n	8003486 <bmp3_set_regs+0xbe>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800345c:	2300      	movs	r3, #0
 800345e:	77fb      	strb	r3, [r7, #31]
 8003460:	e00d      	b.n	800347e <bmp3_set_regs+0xb6>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8003462:	7ffb      	ldrb	r3, [r7, #31]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	4413      	add	r3, r2
 8003468:	781a      	ldrb	r2, [r3, #0]
 800346a:	7ffb      	ldrb	r3, [r7, #31]
 800346c:	68f9      	ldr	r1, [r7, #12]
 800346e:	440b      	add	r3, r1
 8003470:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003478:	7ffb      	ldrb	r3, [r7, #31]
 800347a:	3301      	adds	r3, #1
 800347c:	77fb      	strb	r3, [r7, #31]
 800347e:	7ffb      	ldrb	r3, [r7, #31]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	429a      	cmp	r2, r3
 8003484:	d8ed      	bhi.n	8003462 <bmp3_set_regs+0x9a>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d909      	bls.n	80034a0 <bmp3_set_regs+0xd8>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	6979      	ldr	r1, [r7, #20]
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 f8aa 	bl	80035ec <interleave_reg_addr>
                temp_len = len * 2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	623b      	str	r3, [r7, #32]
 800349e:	e001      	b.n	80034a4 <bmp3_set_regs+0xdc>
            }
            else
            {
                temp_len = len;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	691c      	ldr	r4, [r3, #16]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	7818      	ldrb	r0, [r3, #0]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	6a3a      	ldr	r2, [r7, #32]
 80034b2:	6979      	ldr	r1, [r7, #20]
 80034b4:	47a0      	blx	r4
 80034b6:	4603      	mov	r3, r0
 80034b8:	461a      	mov	r2, r3
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00b      	beq.n	80034e0 <bmp3_set_regs+0x118>
            {
                rslt = BMP3_E_COMM_FAIL;
 80034c8:	23f9      	movs	r3, #249	; 0xf9
 80034ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len != 0)
 80034ce:	e007      	b.n	80034e0 <bmp3_set_regs+0x118>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 80034d0:	23fa      	movs	r3, #250	; 0xfa
 80034d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len != 0)
 80034d6:	e003      	b.n	80034e0 <bmp3_set_regs+0x118>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80034d8:	23ff      	movs	r3, #255	; 0xff
 80034da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80034de:	e000      	b.n	80034e2 <bmp3_set_regs+0x11a>
        if (len != 0)
 80034e0:	bf00      	nop
    }

    return rslt;
 80034e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80034e6:	46b5      	mov	sp, r6
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	372c      	adds	r7, #44	; 0x2c
 80034ec:	46bd      	mov	sp, r7
 80034ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080034f2 <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 80034fa:	237e      	movs	r3, #126	; 0x7e
 80034fc:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 80034fe:	23b6      	movs	r3, #182	; 0xb6
 8003500:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 fa64 	bl	80039d0 <null_ptr_check>
 8003508:	4603      	mov	r3, r0
 800350a:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 800350c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d140      	bne.n	8003596 <bmp3_soft_reset+0xa4>
    {
        /* Check for command ready status */
        rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 8003514:	f107 010c 	add.w	r1, r7, #12
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	2003      	movs	r0, #3
 800351e:	f7ff fec3 	bl	80032a8 <bmp3_get_regs>
 8003522:	4603      	mov	r3, r0
 8003524:	73fb      	strb	r3, [r7, #15]

        /* Device is ready to accept new command */
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 8003526:	7b3b      	ldrb	r3, [r7, #12]
 8003528:	f003 0310 	and.w	r3, r3, #16
 800352c:	2b00      	cmp	r3, #0
 800352e:	d02e      	beq.n	800358e <bmp3_soft_reset+0x9c>
 8003530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d12a      	bne.n	800358e <bmp3_soft_reset+0x9c>
        {
            /* Write the soft reset command in the sensor */
            rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8003538:	f107 010d 	add.w	r1, r7, #13
 800353c:	f107 000e 	add.w	r0, r7, #14
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f7ff ff40 	bl	80033c8 <bmp3_set_regs>
 8003548:	4603      	mov	r3, r0
 800354a:	73fb      	strb	r3, [r7, #15]

            /* Proceed if everything is fine until now */
            if (rslt == BMP3_OK)
 800354c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d11f      	bne.n	8003594 <bmp3_soft_reset+0xa2>
            {
                /* Wait for 2 ms */
                dev->delay_us(2000, dev->intf_ptr);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6852      	ldr	r2, [r2, #4]
 800355c:	4611      	mov	r1, r2
 800355e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003562:	4798      	blx	r3

                /* Read for command error status */
                rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 8003564:	f107 010b 	add.w	r1, r7, #11
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	2002      	movs	r0, #2
 800356e:	f7ff fe9b 	bl	80032a8 <bmp3_get_regs>
 8003572:	4603      	mov	r3, r0
 8003574:	73fb      	strb	r3, [r7, #15]

                /* check for command error status */
                if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 8003576:	7afb      	ldrb	r3, [r7, #11]
 8003578:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800357c:	2b00      	cmp	r3, #0
 800357e:	d103      	bne.n	8003588 <bmp3_soft_reset+0x96>
 8003580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d005      	beq.n	8003594 <bmp3_soft_reset+0xa2>
                {
                    /* Command not written hence return
                     * error */
                    rslt = BMP3_E_CMD_EXEC_FAILED;
 8003588:	23fc      	movs	r3, #252	; 0xfc
 800358a:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMP3_OK)
 800358c:	e002      	b.n	8003594 <bmp3_soft_reset+0xa2>
                }
            }
        }
        else
        {
            rslt = BMP3_E_CMD_EXEC_FAILED;
 800358e:	23fc      	movs	r3, #252	; 0xfc
 8003590:	73fb      	strb	r3, [r7, #15]
 8003592:	e000      	b.n	8003596 <bmp3_soft_reset+0xa4>
            if (rslt == BMP3_OK)
 8003594:	bf00      	nop
        }
    }

    return rslt;
 8003596:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b088      	sub	sp, #32
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 80035aa:	2331      	movs	r3, #49	; 0x31
 80035ac:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 80035ae:	2300      	movs	r3, #0
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	f107 030c 	add.w	r3, r7, #12
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	605a      	str	r2, [r3, #4]
 80035bc:	609a      	str	r2, [r3, #8]
 80035be:	60da      	str	r2, [r3, #12]
 80035c0:	741a      	strb	r2, [r3, #16]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 80035c2:	f107 0108 	add.w	r1, r7, #8
 80035c6:	7ff8      	ldrb	r0, [r7, #31]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2215      	movs	r2, #21
 80035cc:	f7ff fe6c 	bl	80032a8 <bmp3_get_regs>
 80035d0:	4603      	mov	r3, r0
 80035d2:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 80035d4:	f107 0308 	add.w	r3, r7, #8
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 f830 	bl	8003640 <parse_calib_data>

    return rslt;
 80035e0:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3720      	adds	r7, #32
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 80035fa:	2301      	movs	r3, #1
 80035fc:	617b      	str	r3, [r7, #20]
 80035fe:	e015      	b.n	800362c <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	441a      	add	r2, r3
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	3b01      	subs	r3, #1
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	440b      	add	r3, r1
 8003610:	7812      	ldrb	r2, [r2, #0]
 8003612:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	441a      	add	r2, r3
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	68b9      	ldr	r1, [r7, #8]
 8003620:	440b      	add	r3, r1
 8003622:	7812      	ldrb	r2, [r2, #0]
 8003624:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	3301      	adds	r3, #1
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d3e5      	bcc.n	8003600 <interleave_reg_addr+0x14>
    }
}
 8003634:	bf00      	nop
 8003636:	bf00      	nop
 8003638:	371c      	adds	r7, #28
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr

08003640 <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	3390      	adds	r3, #144	; 0x90
 800364e:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	3318      	adds	r3, #24
 8003654:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	4ba4      	ldr	r3, [pc, #656]	; (80038ec <parse_calib_data+0x2ac>)
 800365c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3301      	adds	r3, #1
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	021b      	lsls	r3, r3, #8
 8003668:	b21a      	sxth	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	b21b      	sxth	r3, r3
 8003670:	4313      	orrs	r3, r2
 8003672:	b21b      	sxth	r3, r3
 8003674:	b29a      	uxth	r2, r3
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7fc fec4 	bl	800040c <__aeabi_ui2d>
 8003684:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003688:	f7fd f864 	bl	8000754 <__aeabi_ddiv>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	6939      	ldr	r1, [r7, #16]
 8003692:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3303      	adds	r3, #3
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	021b      	lsls	r3, r3, #8
 800369e:	b21a      	sxth	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3302      	adds	r3, #2
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	b21b      	sxth	r3, r3
 80036a8:	4313      	orrs	r3, r2
 80036aa:	b21b      	sxth	r3, r3
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	4b8e      	ldr	r3, [pc, #568]	; (80038f0 <parse_calib_data+0x2b0>)
 80036b8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	885b      	ldrh	r3, [r3, #2]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fc fea3 	bl	800040c <__aeabi_ui2d>
 80036c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036ca:	f7fd f843 	bl	8000754 <__aeabi_ddiv>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	6939      	ldr	r1, [r7, #16]
 80036d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3304      	adds	r3, #4
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	b25a      	sxtb	r2, r3
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	4b82      	ldr	r3, [pc, #520]	; (80038f4 <parse_calib_data+0x2b4>)
 80036ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fc fe99 	bl	800042c <__aeabi_i2d>
 80036fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036fe:	f7fd f829 	bl	8000754 <__aeabi_ddiv>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	6939      	ldr	r1, [r7, #16]
 8003708:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3306      	adds	r3, #6
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	021b      	lsls	r3, r3, #8
 8003714:	b21a      	sxth	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3305      	adds	r3, #5
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	b21b      	sxth	r3, r3
 800371e:	4313      	orrs	r3, r2
 8003720:	b21a      	sxth	r2, r3
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	4b73      	ldr	r3, [pc, #460]	; (80038f8 <parse_calib_data+0x2b8>)
 800372c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003736:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800373a:	4618      	mov	r0, r3
 800373c:	f7fc fe76 	bl	800042c <__aeabi_i2d>
 8003740:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003744:	f7fd f806 	bl	8000754 <__aeabi_ddiv>
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	6939      	ldr	r1, [r7, #16]
 800374e:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3308      	adds	r3, #8
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	021b      	lsls	r3, r3, #8
 800375a:	b21a      	sxth	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3307      	adds	r3, #7
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	b21b      	sxth	r3, r3
 8003764:	4313      	orrs	r3, r2
 8003766:	b21a      	sxth	r2, r3
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	4b62      	ldr	r3, [pc, #392]	; (80038fc <parse_calib_data+0x2bc>)
 8003772:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800377c:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8003780:	4618      	mov	r0, r3
 8003782:	f7fc fe53 	bl	800042c <__aeabi_i2d>
 8003786:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800378a:	f7fc ffe3 	bl	8000754 <__aeabi_ddiv>
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	6939      	ldr	r1, [r7, #16]
 8003794:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3309      	adds	r3, #9
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	b25a      	sxtb	r2, r3
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	4b55      	ldr	r3, [pc, #340]	; (8003900 <parse_calib_data+0x2c0>)
 80037aa:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fc fe39 	bl	800042c <__aeabi_i2d>
 80037ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037be:	f7fc ffc9 	bl	8000754 <__aeabi_ddiv>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	6939      	ldr	r1, [r7, #16]
 80037c8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	330a      	adds	r3, #10
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	b25a      	sxtb	r2, r3
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	4b49      	ldr	r3, [pc, #292]	; (8003904 <parse_calib_data+0x2c4>)
 80037de:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fc fe1f 	bl	800042c <__aeabi_i2d>
 80037ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037f2:	f7fc ffaf 	bl	8000754 <__aeabi_ddiv>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	6939      	ldr	r1, [r7, #16]
 80037fc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	330c      	adds	r3, #12
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	021b      	lsls	r3, r3, #8
 8003808:	b21a      	sxth	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	330b      	adds	r3, #11
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	b21b      	sxth	r3, r3
 8003812:	4313      	orrs	r3, r2
 8003814:	b21b      	sxth	r3, r3
 8003816:	b29a      	uxth	r2, r3
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003824:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	899b      	ldrh	r3, [r3, #12]
 800382c:	4618      	mov	r0, r3
 800382e:	f7fc fded 	bl	800040c <__aeabi_ui2d>
 8003832:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003836:	f7fc ff8d 	bl	8000754 <__aeabi_ddiv>
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
 800383e:	6939      	ldr	r1, [r7, #16]
 8003840:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	330e      	adds	r3, #14
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	021b      	lsls	r3, r3, #8
 800384c:	b21a      	sxth	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	330d      	adds	r3, #13
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	b21b      	sxth	r3, r3
 8003856:	4313      	orrs	r3, r2
 8003858:	b21b      	sxth	r3, r3
 800385a:	b29a      	uxth	r2, r3
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	4b28      	ldr	r3, [pc, #160]	; (8003908 <parse_calib_data+0x2c8>)
 8003866:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	89db      	ldrh	r3, [r3, #14]
 800386e:	4618      	mov	r0, r3
 8003870:	f7fc fdcc 	bl	800040c <__aeabi_ui2d>
 8003874:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003878:	f7fc ff6c 	bl	8000754 <__aeabi_ddiv>
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	6939      	ldr	r1, [r7, #16]
 8003882:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	330f      	adds	r3, #15
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	b25a      	sxtb	r2, r3
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	4b1d      	ldr	r3, [pc, #116]	; (800390c <parse_calib_data+0x2cc>)
 8003898:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fc fdc2 	bl	800042c <__aeabi_i2d>
 80038a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038ac:	f7fc ff52 	bl	8000754 <__aeabi_ddiv>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	6939      	ldr	r1, [r7, #16]
 80038b6:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3310      	adds	r3, #16
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	b25a      	sxtb	r2, r3
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	4b11      	ldr	r3, [pc, #68]	; (8003910 <parse_calib_data+0x2d0>)
 80038cc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fc fda8 	bl	800042c <__aeabi_i2d>
 80038dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038e0:	f7fc ff38 	bl	8000754 <__aeabi_ddiv>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	6939      	ldr	r1, [r7, #16]
 80038ea:	e013      	b.n	8003914 <parse_calib_data+0x2d4>
 80038ec:	3f700000 	.word	0x3f700000
 80038f0:	41d00000 	.word	0x41d00000
 80038f4:	42f00000 	.word	0x42f00000
 80038f8:	41300000 	.word	0x41300000
 80038fc:	41c00000 	.word	0x41c00000
 8003900:	41f00000 	.word	0x41f00000
 8003904:	42400000 	.word	0x42400000
 8003908:	40500000 	.word	0x40500000
 800390c:	40700000 	.word	0x40700000
 8003910:	40e00000 	.word	0x40e00000
 8003914:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3312      	adds	r3, #18
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	021b      	lsls	r3, r3, #8
 8003920:	b21a      	sxth	r2, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3311      	adds	r3, #17
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	b21b      	sxth	r3, r3
 800392a:	4313      	orrs	r3, r2
 800392c:	b21a      	sxth	r2, r3
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	4b25      	ldr	r3, [pc, #148]	; (80039cc <parse_calib_data+0x38c>)
 8003938:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003942:	4618      	mov	r0, r3
 8003944:	f7fc fd72 	bl	800042c <__aeabi_i2d>
 8003948:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800394c:	f7fc ff02 	bl	8000754 <__aeabi_ddiv>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	6939      	ldr	r1, [r7, #16]
 8003956:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3313      	adds	r3, #19
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	b25a      	sxtb	r2, r3
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	4b18      	ldr	r3, [pc, #96]	; (80039cc <parse_calib_data+0x38c>)
 800396c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8003976:	4618      	mov	r0, r3
 8003978:	f7fc fd58 	bl	800042c <__aeabi_i2d>
 800397c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003980:	f7fc fee8 	bl	8000754 <__aeabi_ddiv>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	6939      	ldr	r1, [r7, #16]
 800398a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3314      	adds	r3, #20
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	b25a      	sxtb	r2, r3
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 80039a2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fc fd3d 	bl	800042c <__aeabi_i2d>
 80039b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039b6:	f7fc fecd 	bl	8000754 <__aeabi_ddiv>
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	6939      	ldr	r1, [r7, #16]
 80039c0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 80039c4:	bf00      	nop
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	42f00000 	.word	0x42f00000

080039d0 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00f      	beq.n	80039fe <null_ptr_check+0x2e>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00b      	beq.n	80039fe <null_ptr_check+0x2e>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d007      	beq.n	80039fe <null_ptr_check+0x2e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d102      	bne.n	8003a04 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 80039fe:	23ff      	movs	r3, #255	; 0xff
 8003a00:	73fb      	strb	r3, [r7, #15]
 8003a02:	e001      	b.n	8003a08 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr
	...

08003a18 <_ZN6BMP390C1Ev>:
static int8_t bmp390_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr);
static int8_t bmp390_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr);
static int8_t validate_trimming_param(struct bmp3_dev *dev);
static int8_t cal_crc(uint8_t seed, uint8_t data);

BMP390::BMP390() {
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  _meas_end = 0;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  _filterEnabled = _tempOSEnabled = _presOSEnabled = false;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 20e2 	ldrb.w	r2, [r3, #226]	; 0xe2
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
  temperature = -999;
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	a313      	add	r3, pc, #76	; (adr r3, 8003a98 <_ZN6BMP390C1Ev+0x80>)
 8003a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a50:	e9c1 2300 	strd	r2, r3, [r1]
  pressure = -999;
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	a310      	add	r3, pc, #64	; (adr r3, 8003a98 <_ZN6BMP390C1Ev+0x80>)
 8003a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5c:	e9c1 2302 	strd	r2, r3, [r1, #8]

  the_sensor.chip_id = BMP390_I2C_ADDRESS;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	22ee      	movs	r2, #238	; 0xee
 8003a64:	741a      	strb	r2, [r3, #16]
  the_sensor.intf = BMP3_I2C_INTF;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	761a      	strb	r2, [r3, #24]
  the_sensor.read = &bmp390_i2c_read;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a0c      	ldr	r2, [pc, #48]	; (8003aa0 <_ZN6BMP390C1Ev+0x88>)
 8003a70:	61da      	str	r2, [r3, #28]
  the_sensor.write = &bmp390_i2c_write;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a0b      	ldr	r2, [pc, #44]	; (8003aa4 <_ZN6BMP390C1Ev+0x8c>)
 8003a76:	621a      	str	r2, [r3, #32]
  the_sensor.intf_ptr = (void *)NULL;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	615a      	str	r2, [r3, #20]
  the_sensor.dummy_byte = 0;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	769a      	strb	r2, [r3, #26]
  the_sensor.delay_us = &delay_usec;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a08      	ldr	r2, [pc, #32]	; (8003aa8 <_ZN6BMP390C1Ev+0x90>)
 8003a88:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bc80      	pop	{r7}
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	00000000 	.word	0x00000000
 8003a9c:	c08f3800 	.word	0xc08f3800
 8003aa0:	08003cab 	.word	0x08003cab
 8003aa4:	08003c59 	.word	0x08003c59
 8003aa8:	08003b35 	.word	0x08003b35

08003aac <_ZN6BMP3904initEP19__I2C_HandleTypeDef>:

bool BMP390::init(I2C_HandleTypeDef *pntr_hi2c){
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
	the_sensor.intf_ptr = (void *)pntr_hi2c;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	615a      	str	r2, [r3, #20]

	int8_t rslt = BMP3_OK;
 8003abc:	2300      	movs	r3, #0
 8003abe:	73fb      	strb	r3, [r7, #15]
	/* Reset the sensor */
	rslt = bmp3_soft_reset(&the_sensor);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3310      	adds	r3, #16
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff fd14 	bl	80034f2 <bmp3_soft_reset>
 8003aca:	4603      	mov	r3, r0
 8003acc:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMP3_OK) { return false; }
 8003ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <_ZN6BMP3904initEP19__I2C_HandleTypeDef+0x2e>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	e028      	b.n	8003b2c <_ZN6BMP3904initEP19__I2C_HandleTypeDef+0x80>

	rslt = bmp3_init(&the_sensor);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3310      	adds	r3, #16
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff fb9b 	bl	800321a <bmp3_init>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	73fb      	strb	r3, [r7, #15]
	rslt = validate_trimming_param(&the_sensor);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3310      	adds	r3, #16
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 f905 	bl	8003cfc <_ZL23validate_trimming_paramP8bmp3_dev>
 8003af2:	4603      	mov	r3, r0
 8003af4:	73fb      	strb	r3, [r7, #15]

	if (rslt != BMP3_OK) { return false; }
 8003af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <_ZN6BMP3904initEP19__I2C_HandleTypeDef+0x56>
 8003afe:	2300      	movs	r3, #0
 8003b00:	e014      	b.n	8003b2c <_ZN6BMP3904initEP19__I2C_HandleTypeDef+0x80>

	setTemperatureOversampling(BMP3_NO_OVERSAMPLING);
 8003b02:	2100      	movs	r1, #0
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f82b 	bl	8003b60 <_ZN6BMP39026setTemperatureOversamplingEh>
	setPressureOversampling(BMP3_NO_OVERSAMPLING);
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f848 	bl	8003ba2 <_ZN6BMP39023setPressureOversamplingEh>
	setIIRFilterCoeff(BMP3_IIR_FILTER_DISABLE);
 8003b12:	2100      	movs	r1, #0
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f865 	bl	8003be4 <_ZN6BMP39017setIIRFilterCoeffEh>
	setOutputDataRate(BMP3_ODR_25_HZ);
 8003b1a:	2103      	movs	r1, #3
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f882 	bl	8003c26 <_ZN6BMP39017setOutputDataRateEh>

	// don't do anything till we request a reading
	the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

	return true;
 8003b2a:	2301      	movs	r3, #1
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <_ZL10delay_usecmPv>:

  return true;
}

// Our hardware interface functions
static void delay_usec(uint32_t us, void *intf_ptr){
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
	uint8_t ms = us/1000;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a06      	ldr	r2, [pc, #24]	; (8003b5c <_ZL10delay_usecmPv+0x28>)
 8003b42:	fba2 2303 	umull	r2, r3, r2, r3
 8003b46:	099b      	lsrs	r3, r3, #6
 8003b48:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(ms);
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fe fe55 	bl	80027fc <HAL_Delay>
}
 8003b52:	bf00      	nop
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	10624dd3 	.word	0x10624dd3

08003b60 <_ZN6BMP39026setTemperatureOversamplingEh>:

bool BMP390::setTemperatureOversampling(uint8_t oversample) {
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	70fb      	strb	r3, [r7, #3]
  if (oversample > BMP3_OVERSAMPLING_32X)
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	2b05      	cmp	r3, #5
 8003b70:	d901      	bls.n	8003b76 <_ZN6BMP39026setTemperatureOversamplingEh+0x16>
    return false;
 8003b72:	2300      	movs	r3, #0
 8003b74:	e010      	b.n	8003b98 <_ZN6BMP39026setTemperatureOversamplingEh+0x38>

  the_sensor.settings.odr_filter.temp_os = oversample;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	78fa      	ldrb	r2, [r7, #3]
 8003b7a:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

  if (oversample == BMP3_NO_OVERSAMPLING)
 8003b7e:	78fb      	ldrb	r3, [r7, #3]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d104      	bne.n	8003b8e <_ZN6BMP39026setTemperatureOversamplingEh+0x2e>
    _tempOSEnabled = false;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8003b8c:	e003      	b.n	8003b96 <_ZN6BMP39026setTemperatureOversamplingEh+0x36>
  else
    _tempOSEnabled = true;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1

  return true;
 8003b96:	2301      	movs	r3, #1
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	4770      	bx	lr

08003ba2 <_ZN6BMP39023setPressureOversamplingEh>:
   BMP3_OVERSAMPLING_2X, BMP3_OVERSAMPLING_4X, BMP3_OVERSAMPLING_8X,
   BMP3_OVERSAMPLING_16X, BMP3_OVERSAMPLING_32X
    @return True on success, False on failure
*/
/**************************************************************************/
bool BMP390::setPressureOversampling(uint8_t oversample) {
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
 8003baa:	460b      	mov	r3, r1
 8003bac:	70fb      	strb	r3, [r7, #3]
  if (oversample > BMP3_OVERSAMPLING_32X)
 8003bae:	78fb      	ldrb	r3, [r7, #3]
 8003bb0:	2b05      	cmp	r3, #5
 8003bb2:	d901      	bls.n	8003bb8 <_ZN6BMP39023setPressureOversamplingEh+0x16>
    return false;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	e010      	b.n	8003bda <_ZN6BMP39023setPressureOversamplingEh+0x38>

  the_sensor.settings.odr_filter.press_os = oversample;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	78fa      	ldrb	r2, [r7, #3]
 8003bbc:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

  if (oversample == BMP3_NO_OVERSAMPLING)
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d104      	bne.n	8003bd0 <_ZN6BMP39023setPressureOversamplingEh+0x2e>
    _presOSEnabled = false;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8003bce:	e003      	b.n	8003bd8 <_ZN6BMP39023setPressureOversamplingEh+0x36>
  else
    _presOSEnabled = true;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2

  return true;
 8003bd8:	2301      	movs	r3, #1
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc80      	pop	{r7}
 8003be2:	4770      	bx	lr

08003be4 <_ZN6BMP39017setIIRFilterCoeffEh>:
   BMP3_IIR_FILTER_COEFF_31, BMP3_IIR_FILTER_COEFF_63, BMP3_IIR_FILTER_COEFF_127
    @return True on success, False on failure

*/
/**************************************************************************/
bool BMP390::setIIRFilterCoeff(uint8_t filtercoeff) {
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	70fb      	strb	r3, [r7, #3]
  if (filtercoeff > BMP3_IIR_FILTER_COEFF_127)
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	2b07      	cmp	r3, #7
 8003bf4:	d901      	bls.n	8003bfa <_ZN6BMP39017setIIRFilterCoeffEh+0x16>
    return false;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	e010      	b.n	8003c1c <_ZN6BMP39017setIIRFilterCoeffEh+0x38>

  the_sensor.settings.odr_filter.iir_filter = filtercoeff;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	78fa      	ldrb	r2, [r7, #3]
 8003bfe:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

  if (filtercoeff == BMP3_IIR_FILTER_DISABLE)
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d104      	bne.n	8003c12 <_ZN6BMP39017setIIRFilterCoeffEh+0x2e>
    _filterEnabled = false;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 8003c10:	e003      	b.n	8003c1a <_ZN6BMP39017setIIRFilterCoeffEh+0x36>
  else
    _filterEnabled = true;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0

  return true;
 8003c1a:	2301      	movs	r3, #1
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc80      	pop	{r7}
 8003c24:	4770      	bx	lr

08003c26 <_ZN6BMP39017setOutputDataRateEh>:
   BMP3_ODR_0_01_HZ, BMP3_ODR_0_006_HZ, BMP3_ODR_0_003_HZ, or BMP3_ODR_0_001_HZ
    @return True on success, False on failure

*/
/**************************************************************************/
bool BMP390::setOutputDataRate(uint8_t odr) {
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	460b      	mov	r3, r1
 8003c30:	70fb      	strb	r3, [r7, #3]
  if (odr > BMP3_ODR_0_001_HZ)
 8003c32:	78fb      	ldrb	r3, [r7, #3]
 8003c34:	2b11      	cmp	r3, #17
 8003c36:	d901      	bls.n	8003c3c <_ZN6BMP39017setOutputDataRateEh+0x16>
    return false;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	e008      	b.n	8003c4e <_ZN6BMP39017setOutputDataRateEh+0x28>

  the_sensor.settings.odr_filter.odr = odr;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	78fa      	ldrb	r2, [r7, #3]
 8003c40:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6

  _ODREnabled = true;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3

  return true;
 8003c4c:	2301      	movs	r3, #1
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr

08003c58 <_ZL16bmp390_i2c_writehPKhmPv>:

static int8_t bmp390_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr){
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08a      	sub	sp, #40	; 0x28
 8003c5c:	af04      	add	r7, sp, #16
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	607a      	str	r2, [r7, #4]
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	4603      	mov	r3, r0
 8003c66:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	617b      	str	r3, [r7, #20]
	if (HAL_I2C_Mem_Write(hi2c, BMP390_I2C_ADDRESS, reg_addr, I2C_MEMADD_SIZE_8BIT, (uint8_t *)reg_data, len, HAL_MAX_DELAY) != HAL_OK) {
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c78:	9102      	str	r1, [sp, #8]
 8003c7a:	9301      	str	r3, [sp, #4]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	2301      	movs	r3, #1
 8003c82:	21ee      	movs	r1, #238	; 0xee
 8003c84:	6978      	ldr	r0, [r7, #20]
 8003c86:	f002 fd87 	bl	8006798 <HAL_I2C_Mem_Write>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	bf14      	ite	ne
 8003c90:	2301      	movne	r3, #1
 8003c92:	2300      	moveq	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <_ZL16bmp390_i2c_writehPKhmPv+0x48>
		// Error handling: You can handle write errors here
		return -1;
 8003c9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c9e:	e000      	b.n	8003ca2 <_ZL16bmp390_i2c_writehPKhmPv+0x4a>
	}
	return 0;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <_ZL15bmp390_i2c_readhPhmPv>:

static int8_t bmp390_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr){
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b08a      	sub	sp, #40	; 0x28
 8003cae:	af04      	add	r7, sp, #16
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
 8003cb4:	603b      	str	r3, [r7, #0]
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	617b      	str	r3, [r7, #20]
	if (HAL_I2C_Mem_Read(hi2c, BMP390_I2C_ADDRESS, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, len, HAL_MAX_DELAY) != HAL_OK) {
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003cca:	9102      	str	r1, [sp, #8]
 8003ccc:	9301      	str	r3, [sp, #4]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	21ee      	movs	r1, #238	; 0xee
 8003cd6:	6978      	ldr	r0, [r7, #20]
 8003cd8:	f002 fe72 	bl	80069c0 <HAL_I2C_Mem_Read>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	bf14      	ite	ne
 8003ce2:	2301      	movne	r3, #1
 8003ce4:	2300      	moveq	r3, #0
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <_ZL15bmp390_i2c_readhPhmPv+0x48>
		// Error handling: You can handle write errors here
		return -1;
 8003cec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cf0:	e000      	b.n	8003cf4 <_ZL15bmp390_i2c_readhPhmPv+0x4a>
	}
	return 0;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <_ZL23validate_trimming_paramP8bmp3_dev>:

static int8_t validate_trimming_param(struct bmp3_dev *dev) {
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08a      	sub	sp, #40	; 0x28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint8_t crc = 0xFF;
 8003d04:	23ff      	movs	r3, #255	; 0xff
 8003d06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t stored_crc;
  uint8_t trim_param[21];
  uint8_t i;

  rslt = bmp3_get_regs(BMP3_REG_CALIB_DATA, trim_param, 21, dev);
 8003d0a:	f107 010c 	add.w	r1, r7, #12
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2215      	movs	r2, #21
 8003d12:	2031      	movs	r0, #49	; 0x31
 8003d14:	f7ff fac8 	bl	80032a8 <bmp3_get_regs>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (rslt == BMP3_OK) {
 8003d1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d133      	bne.n	8003d8e <_ZL23validate_trimming_paramP8bmp3_dev+0x92>
    for (i = 0; i < 21; i++) {
 8003d26:	2300      	movs	r3, #0
 8003d28:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003d2c:	e013      	b.n	8003d56 <_ZL23validate_trimming_paramP8bmp3_dev+0x5a>
      crc = (uint8_t)cal_crc(crc, trim_param[i]);
 8003d2e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003d32:	3328      	adds	r3, #40	; 0x28
 8003d34:	443b      	add	r3, r7
 8003d36:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8003d3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003d3e:	4611      	mov	r1, r2
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 f82a 	bl	8003d9a <_ZL7cal_crchh>
 8003d46:	4603      	mov	r3, r0
 8003d48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (i = 0; i < 21; i++) {
 8003d4c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003d50:	3301      	adds	r3, #1
 8003d52:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003d56:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003d5a:	2b14      	cmp	r3, #20
 8003d5c:	d9e7      	bls.n	8003d2e <_ZL23validate_trimming_paramP8bmp3_dev+0x32>
    }

    crc = (crc ^ 0xFF);
 8003d5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003d62:	43db      	mvns	r3, r3
 8003d64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    rslt = bmp3_get_regs(0x30, &stored_crc, 1, dev);
 8003d68:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	2030      	movs	r0, #48	; 0x30
 8003d72:	f7ff fa99 	bl	80032a8 <bmp3_get_regs>
 8003d76:	4603      	mov	r3, r0
 8003d78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (stored_crc != crc) {
 8003d7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003d80:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d002      	beq.n	8003d8e <_ZL23validate_trimming_paramP8bmp3_dev+0x92>
      rslt = -1;
 8003d88:	23ff      	movs	r3, #255	; 0xff
 8003d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  return rslt;
 8003d8e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3728      	adds	r7, #40	; 0x28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <_ZL7cal_crchh>:

/*
 * @brief function to calculate CRC for the trimming parameters
 * */
static int8_t cal_crc(uint8_t seed, uint8_t data) {
 8003d9a:	b480      	push	{r7}
 8003d9c:	b085      	sub	sp, #20
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	4603      	mov	r3, r0
 8003da2:	460a      	mov	r2, r1
 8003da4:	71fb      	strb	r3, [r7, #7]
 8003da6:	4613      	mov	r3, r2
 8003da8:	71bb      	strb	r3, [r7, #6]
  int8_t poly = 0x1D;
 8003daa:	231d      	movs	r3, #29
 8003dac:	737b      	strb	r3, [r7, #13]
  int8_t var2;
  uint8_t i;

  for (i = 0; i < 8; i++) {
 8003dae:	2300      	movs	r3, #0
 8003db0:	73bb      	strb	r3, [r7, #14]
 8003db2:	e01c      	b.n	8003dee <_ZL7cal_crchh+0x54>
    if ((seed & 0x80) ^ (data & 0x80)) {
 8003db4:	79fa      	ldrb	r2, [r7, #7]
 8003db6:	79bb      	ldrb	r3, [r7, #6]
 8003db8:	4053      	eors	r3, r2
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	b25b      	sxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	da02      	bge.n	8003dc8 <_ZL7cal_crchh+0x2e>
      var2 = 1;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	73fb      	strb	r3, [r7, #15]
 8003dc6:	e001      	b.n	8003dcc <_ZL7cal_crchh+0x32>
    } else {
      var2 = 0;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	73fb      	strb	r3, [r7, #15]
    }

    seed = (seed & 0x7F) << 1;
 8003dcc:	79fb      	ldrb	r3, [r7, #7]
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	71fb      	strb	r3, [r7, #7]
    data = (data & 0x7F) << 1;
 8003dd2:	79bb      	ldrb	r3, [r7, #6]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	71bb      	strb	r3, [r7, #6]
    seed = seed ^ (uint8_t)(poly * var2);
 8003dd8:	7b7a      	ldrb	r2, [r7, #13]
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
 8003ddc:	fb12 f303 	smulbb	r3, r2, r3
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	4053      	eors	r3, r2
 8003de6:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8003de8:	7bbb      	ldrb	r3, [r7, #14]
 8003dea:	3301      	adds	r3, #1
 8003dec:	73bb      	strb	r3, [r7, #14]
 8003dee:	7bbb      	ldrb	r3, [r7, #14]
 8003df0:	2b07      	cmp	r3, #7
 8003df2:	d9df      	bls.n	8003db4 <_ZL7cal_crchh+0x1a>
  }

  return (int8_t)seed;
 8003df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bc80      	pop	{r7}
 8003e00:	4770      	bx	lr

08003e02 <_ZN12LSM303_AccelC1Ev>:
#include <lsm303_accel.hpp>

LSM303_Accel::LSM303_Accel() {
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  pntr_hi2c = NULL;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]

  // Initialize the raw accel data
  data.x = 0;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	609a      	str	r2, [r3, #8]
  data.y = 0;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	60da      	str	r2, [r3, #12]
  data.z = 0;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	611a      	str	r2, [r3, #16]
}
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bc80      	pop	{r7}
 8003e32:	4770      	bx	lr

08003e34 <_ZN12LSM303_Accel5writeEhPKhh>:

bool LSM303_Accel::write(const uint8_t reg_location, const uint8_t *data, const uint8_t len){
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af04      	add	r7, sp, #16
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	607a      	str	r2, [r7, #4]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	460b      	mov	r3, r1
 8003e42:	72fb      	strb	r3, [r7, #11]
 8003e44:	4613      	mov	r3, r2
 8003e46:	72bb      	strb	r3, [r7, #10]
  if (HAL_I2C_Mem_Write((I2C_HandleTypeDef *) pntr_hi2c, LSM303_ADDRESS_ACCEL, reg_location, I2C_MEMADD_SIZE_8BIT, (uint8_t *)data, len, HAL_MAX_DELAY) != HAL_OK) {
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	7afb      	ldrb	r3, [r7, #11]
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	7abb      	ldrb	r3, [r7, #10]
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e58:	9102      	str	r1, [sp, #8]
 8003e5a:	9301      	str	r3, [sp, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	2301      	movs	r3, #1
 8003e62:	2132      	movs	r1, #50	; 0x32
 8003e64:	f002 fc98 	bl	8006798 <HAL_I2C_Mem_Write>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	bf14      	ite	ne
 8003e6e:	2301      	movne	r3, #1
 8003e70:	2300      	moveq	r3, #0
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d007      	beq.n	8003e88 <_ZN12LSM303_Accel5writeEhPKhh+0x54>
    // Error handling: You can handle write errors here
  	APP_LOG(TS_ON, VLEVEL_M,"Error writing \r\n");
 8003e78:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <_ZN12LSM303_Accel5writeEhPKhh+0x60>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	2002      	movs	r0, #2
 8003e80:	f01a f8a0 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
    return false;
 8003e84:	2300      	movs	r3, #0
 8003e86:	e000      	b.n	8003e8a <_ZN12LSM303_Accel5writeEhPKhh+0x56>
  }
  return true;
 8003e88:	2301      	movs	r3, #1
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	0801e654 	.word	0x0801e654

08003e98 <_ZN12LSM303_Accel4readEhPhh>:

bool LSM303_Accel::read(const uint8_t reg_location, uint8_t *data, const uint8_t len){
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af04      	add	r7, sp, #16
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	607a      	str	r2, [r7, #4]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	72fb      	strb	r3, [r7, #11]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	72bb      	strb	r3, [r7, #10]
  if (HAL_I2C_Mem_Read((I2C_HandleTypeDef *) pntr_hi2c, LSM303_ADDRESS_ACCEL, reg_location, I2C_MEMADD_SIZE_8BIT, (uint8_t *)data, len, HAL_MAX_DELAY) != HAL_OK) {
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6818      	ldr	r0, [r3, #0]
 8003eb0:	7afb      	ldrb	r3, [r7, #11]
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	7abb      	ldrb	r3, [r7, #10]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003ebc:	9102      	str	r1, [sp, #8]
 8003ebe:	9301      	str	r3, [sp, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	2132      	movs	r1, #50	; 0x32
 8003ec8:	f002 fd7a 	bl	80069c0 <HAL_I2C_Mem_Read>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	bf14      	ite	ne
 8003ed2:	2301      	movne	r3, #1
 8003ed4:	2300      	moveq	r3, #0
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <_ZN12LSM303_Accel4readEhPhh+0x48>
    // Error handling: You can handle write errors here
    return false;
 8003edc:	2300      	movs	r3, #0
 8003ede:	e000      	b.n	8003ee2 <_ZN12LSM303_Accel4readEhPhh+0x4a>
  }
  return true;
 8003ee0:	2301      	movs	r3, #1
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef>:

bool LSM303_Accel::init(I2C_HandleTypeDef *_pntr_hi2c) {
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b084      	sub	sp, #16
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	6039      	str	r1, [r7, #0]
	pntr_hi2c = _pntr_hi2c;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	601a      	str	r2, [r3, #0]
  uint8_t len = 1;
 8003efa:	2301      	movs	r3, #1
 8003efc:	73fb      	strb	r3, [r7, #15]

  uint8_t reg_data = 0x57; // Enable the accelerometer (100Hz)
 8003efe:	2357      	movs	r3, #87	; 0x57
 8003f00:	73bb      	strb	r3, [r7, #14]
  if ( write(LSM303_REGISTER_ACCEL_CTRL_REG1_A, &reg_data, len) ){
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	f107 020e 	add.w	r2, r7, #14
 8003f08:	2120      	movs	r1, #32
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7ff ff92 	bl	8003e34 <_ZN12LSM303_Accel5writeEhPKhh>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00e      	beq.n	8003f34 <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef+0x4a>
    if ( read(LSM303_REGISTER_ACCEL_WHO_AM_I, &reg_data, len) ) {
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	f107 020e 	add.w	r2, r7, #14
 8003f1c:	210f      	movs	r1, #15
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7ff ffba 	bl	8003e98 <_ZN12LSM303_Accel4readEhPhh>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d004      	beq.n	8003f34 <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef+0x4a>
      if (reg_data == 0x33) return true; //confirm that we are talking
 8003f2a:	7bbb      	ldrb	r3, [r7, #14]
 8003f2c:	2b33      	cmp	r3, #51	; 0x33
 8003f2e:	d101      	bne.n	8003f34 <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef+0x4a>
 8003f30:	2301      	movs	r3, #1
 8003f32:	e000      	b.n	8003f36 <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef+0x4c>
    }
  }
  return false; //something went wrong
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <_ZN17EnvionmentSensorsC1Ev>:
#include <env_sensors.hpp>


//#define IGNORE_ENV_SENSORS

EnvionmentSensors::EnvionmentSensors(){ }
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b082      	sub	sp, #8
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff ff5a 	bl	8003e02 <_ZN12LSM303_AccelC1Ev>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3318      	adds	r3, #24
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff fd60 	bl	8003a18 <_ZN6BMP390C1Ev>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
	...

08003f64 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef>:

bool EnvionmentSensors::init(I2C_HandleTypeDef *pntr_hi2c){
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af02      	add	r7, sp, #8
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
	APP_LOG(TS_ON, VLEVEL_M, "env sensors i2c interface: %d \r\n", pntr_hi2c);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	4b28      	ldr	r3, [pc, #160]	; (8004014 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xb0>)
 8003f74:	2201      	movs	r2, #1
 8003f76:	2100      	movs	r1, #0
 8003f78:	2002      	movs	r0, #2
 8003f7a:	f01a f823 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
	if( lsm_accel.init(pntr_hi2c) ){
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6839      	ldr	r1, [r7, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff ffb1 	bl	8003eea <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00f      	beq.n	8003fae <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0x4a>
		APP_LOG(TS_ON, VLEVEL_M, "lsm303 setup valid \r\n");
 8003f8e:	4b22      	ldr	r3, [pc, #136]	; (8004018 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xb4>)
 8003f90:	2201      	movs	r2, #1
 8003f92:	2100      	movs	r1, #0
 8003f94:	2002      	movs	r0, #2
 8003f96:	f01a f815 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
	} else {
		APP_LOG(TS_ON, VLEVEL_M, "lsm303 setup failed \r\n");
		return false;
	}

	if( bmp.init(pntr_hi2c) ){
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3318      	adds	r3, #24
 8003f9e:	6839      	ldr	r1, [r7, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff fd83 	bl	8003aac <_ZN6BMP3904initEP19__I2C_HandleTypeDef>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d028      	beq.n	8003ffe <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0x9a>
 8003fac:	e007      	b.n	8003fbe <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0x5a>
		APP_LOG(TS_ON, VLEVEL_M, "lsm303 setup failed \r\n");
 8003fae:	4b1b      	ldr	r3, [pc, #108]	; (800401c <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xb8>)
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	2002      	movs	r0, #2
 8003fb6:	f01a f805 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
		return false;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	e026      	b.n	800400c <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xa8>
		APP_LOG(TS_ON, VLEVEL_M, "bmp390 setup valid \r\n");
 8003fbe:	4b18      	ldr	r3, [pc, #96]	; (8004020 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xbc>)
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	2002      	movs	r0, #2
 8003fc6:	f019 fffd 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
	} else {
		APP_LOG(TS_ON, VLEVEL_M, "bmp390 setup failed \r\n");
		return false;
	}
	bmp.setTemperatureOversampling(BMP3_OVERSAMPLING_8X);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3318      	adds	r3, #24
 8003fce:	2103      	movs	r1, #3
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff fdc5 	bl	8003b60 <_ZN6BMP39026setTemperatureOversamplingEh>
	bmp.setPressureOversampling(BMP3_OVERSAMPLING_4X);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3318      	adds	r3, #24
 8003fda:	2102      	movs	r1, #2
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff fde0 	bl	8003ba2 <_ZN6BMP39023setPressureOversamplingEh>
	bmp.setIIRFilterCoeff(BMP3_IIR_FILTER_COEFF_3);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3318      	adds	r3, #24
 8003fe6:	2102      	movs	r1, #2
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff fdfb 	bl	8003be4 <_ZN6BMP39017setIIRFilterCoeffEh>
	bmp.setOutputDataRate(BMP3_ODR_50_HZ);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3318      	adds	r3, #24
 8003ff2:	2102      	movs	r1, #2
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff fe16 	bl	8003c26 <_ZN6BMP39017setOutputDataRateEh>

	return true;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e006      	b.n	800400c <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xa8>
		APP_LOG(TS_ON, VLEVEL_M, "bmp390 setup failed \r\n");
 8003ffe:	4b09      	ldr	r3, [pc, #36]	; (8004024 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xc0>)
 8004000:	2201      	movs	r2, #1
 8004002:	2100      	movs	r1, #0
 8004004:	2002      	movs	r0, #2
 8004006:	f019 ffdd 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
		return false;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	0801e668 	.word	0x0801e668
 8004018:	0801e68c 	.word	0x0801e68c
 800401c:	0801e6a4 	.word	0x0801e6a4
 8004020:	0801e6bc 	.word	0x0801e6bc
 8004024:	0801e6d4 	.word	0x0801e6d4

08004028 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800402e:	1d3b      	adds	r3, r7, #4
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	60da      	str	r2, [r3, #12]
 800403a:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800403c:	2310      	movs	r3, #16
 800403e:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8004040:	2301      	movs	r3, #1
 8004042:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8004044:	2300      	movs	r3, #0
 8004046:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004048:	2303      	movs	r3, #3
 800404a:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800404c:	1d3b      	adds	r3, r7, #4
 800404e:	4619      	mov	r1, r3
 8004050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004054:	f002 f8b4 	bl	80061c0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8004058:	2320      	movs	r3, #32
 800405a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800405c:	1d3b      	adds	r3, r7, #4
 800405e:	4619      	mov	r1, r3
 8004060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004064:	f002 f8ac 	bl	80061c0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8004068:	2200      	movs	r2, #0
 800406a:	2120      	movs	r1, #32
 800406c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004070:	f002 faeb 	bl	800664a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8004074:	2200      	movs	r2, #0
 8004076:	2110      	movs	r1, #16
 8004078:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800407c:	f002 fae5 	bl	800664a <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
	...

0800408c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	4603      	mov	r3, r0
 8004094:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	2b03      	cmp	r3, #3
 800409a:	d83f      	bhi.n	800411c <BSP_RADIO_ConfigRFSwitch+0x90>
 800409c:	a201      	add	r2, pc, #4	; (adr r2, 80040a4 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800409e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a2:	bf00      	nop
 80040a4:	080040b5 	.word	0x080040b5
 80040a8:	080040cf 	.word	0x080040cf
 80040ac:	080040e9 	.word	0x080040e9
 80040b0:	08004103 	.word	0x08004103
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80040b4:	2200      	movs	r2, #0
 80040b6:	2110      	movs	r1, #16
 80040b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040bc:	f002 fac5 	bl	800664a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80040c0:	2200      	movs	r2, #0
 80040c2:	2120      	movs	r1, #32
 80040c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040c8:	f002 fabf 	bl	800664a <HAL_GPIO_WritePin>
      break;      
 80040cc:	e027      	b.n	800411e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80040ce:	2201      	movs	r2, #1
 80040d0:	2110      	movs	r1, #16
 80040d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040d6:	f002 fab8 	bl	800664a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80040da:	2200      	movs	r2, #0
 80040dc:	2120      	movs	r1, #32
 80040de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040e2:	f002 fab2 	bl	800664a <HAL_GPIO_WritePin>
      break;
 80040e6:	e01a      	b.n	800411e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80040e8:	2201      	movs	r2, #1
 80040ea:	2110      	movs	r1, #16
 80040ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040f0:	f002 faab 	bl	800664a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80040f4:	2201      	movs	r2, #1
 80040f6:	2120      	movs	r1, #32
 80040f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040fc:	f002 faa5 	bl	800664a <HAL_GPIO_WritePin>
      break;
 8004100:	e00d      	b.n	800411e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8004102:	2200      	movs	r2, #0
 8004104:	2110      	movs	r1, #16
 8004106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800410a:	f002 fa9e 	bl	800664a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800410e:	2201      	movs	r2, #1
 8004110:	2120      	movs	r1, #32
 8004112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004116:	f002 fa98 	bl	800664a <HAL_GPIO_WritePin>
      break;
 800411a:	e000      	b.n	800411e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 800411c:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 800412c:	2302      	movs	r3, #2
}
 800412e:	4618      	mov	r0, r3
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr

08004136 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8004136:	b480      	push	{r7}
 8004138:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 800413a:	2301      	movs	r3, #1
}
 800413c:	4618      	mov	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr

08004144 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8004148:	2301      	movs	r3, #1
}
 800414a:	4618      	mov	r0, r3
 800414c:	46bd      	mov	sp, r7
 800414e:	bc80      	pop	{r7}
 8004150:	4770      	bx	lr

08004152 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8004152:	b480      	push	{r7}
 8004154:	b085      	sub	sp, #20
 8004156:	af00      	add	r7, sp, #0
 8004158:	4603      	mov	r3, r0
 800415a:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 800415c:	79fb      	ldrb	r3, [r7, #7]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d102      	bne.n	8004168 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8004162:	230f      	movs	r3, #15
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	e001      	b.n	800416c <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8004168:	2316      	movs	r3, #22
 800416a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800416c:	68fb      	ldr	r3, [r7, #12]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	bc80      	pop	{r7}
 8004176:	4770      	bx	lr

08004178 <_Z19enterExperimentModev>:
 */

#include "expMode.h"
#include "sys_app.h"

void enterExperimentMode(void){
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
	APP_LOG(TS_ON, VLEVEL_M, "Experiment Mode\r\n");
 800417c:	4b03      	ldr	r3, [pc, #12]	; (800418c <_Z19enterExperimentModev+0x14>)
 800417e:	2201      	movs	r2, #1
 8004180:	2100      	movs	r1, #0
 8004182:	2002      	movs	r0, #2
 8004184:	f019 ff1e 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
	while(1);
 8004188:	e7fe      	b.n	8004188 <_Z19enterExperimentModev+0x10>
 800418a:	bf00      	nop
 800418c:	0801e6ec 	.word	0x0801e6ec

08004190 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004194:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	4a03      	ldr	r2, [pc, #12]	; (80041a8 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 800419a:	f043 0301 	orr.w	r3, r3, #1
 800419e:	6053      	str	r3, [r2, #4]
}
 80041a0:	bf00      	nop
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr
 80041a8:	e0042000 	.word	0xe0042000

080041ac <LL_DBGMCU_EnableDBGStopMode>:
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80041b0:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	4a03      	ldr	r2, [pc, #12]	; (80041c4 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 80041b6:	f043 0302 	orr.w	r3, r3, #2
 80041ba:	6053      	str	r3, [r2, #4]
}
 80041bc:	bf00      	nop
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr
 80041c4:	e0042000 	.word	0xe0042000

080041c8 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80041cc:	4b04      	ldr	r3, [pc, #16]	; (80041e0 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	4a03      	ldr	r2, [pc, #12]	; (80041e0 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80041d2:	f043 0304 	orr.w	r3, r3, #4
 80041d6:	6053      	str	r3, [r2, #4]
}
 80041d8:	bf00      	nop
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr
 80041e0:	e0042000 	.word	0xe0042000

080041e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041ee:	2003      	movs	r0, #3
 80041f0:	f001 f9a0 	bl	8005534 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80041f4:	f004 f8be 	bl	8008374 <HAL_RCC_GetHCLKFreq>
 80041f8:	4603      	mov	r3, r0
 80041fa:	4a09      	ldr	r2, [pc, #36]	; (8004220 <HAL_Init+0x3c>)
 80041fc:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041fe:	200f      	movs	r0, #15
 8004200:	f7fe fade 	bl	80027c0 <HAL_InitTick>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	71fb      	strb	r3, [r7, #7]
 800420e:	e001      	b.n	8004214 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004210:	f7fe f8af 	bl	8002372 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004214:	79fb      	ldrb	r3, [r7, #7]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	20000000 	.word	0x20000000

08004224 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8004228:	4b04      	ldr	r3, [pc, #16]	; (800423c <HAL_SuspendTick+0x18>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a03      	ldr	r2, [pc, #12]	; (800423c <HAL_SuspendTick+0x18>)
 800422e:	f023 0302 	bic.w	r3, r3, #2
 8004232:	6013      	str	r3, [r2, #0]
}
 8004234:	bf00      	nop
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr
 800423c:	e000e010 	.word	0xe000e010

08004240 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8004244:	4b04      	ldr	r3, [pc, #16]	; (8004258 <HAL_ResumeTick+0x18>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a03      	ldr	r2, [pc, #12]	; (8004258 <HAL_ResumeTick+0x18>)
 800424a:	f043 0302 	orr.w	r3, r3, #2
 800424e:	6013      	str	r3, [r2, #0]
}
 8004250:	bf00      	nop
 8004252:	46bd      	mov	sp, r7
 8004254:	bc80      	pop	{r7}
 8004256:	4770      	bx	lr
 8004258:	e000e010 	.word	0xe000e010

0800425c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8004260:	4b02      	ldr	r3, [pc, #8]	; (800426c <HAL_GetUIDw0+0x10>)
 8004262:	681b      	ldr	r3, [r3, #0]
}
 8004264:	4618      	mov	r0, r3
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr
 800426c:	1fff7590 	.word	0x1fff7590

08004270 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8004274:	4b02      	ldr	r3, [pc, #8]	; (8004280 <HAL_GetUIDw1+0x10>)
 8004276:	681b      	ldr	r3, [r3, #0]
}
 8004278:	4618      	mov	r0, r3
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr
 8004280:	1fff7594 	.word	0x1fff7594

08004284 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8004288:	4b02      	ldr	r3, [pc, #8]	; (8004294 <HAL_GetUIDw2+0x10>)
 800428a:	681b      	ldr	r3, [r3, #0]
}
 800428c:	4618      	mov	r0, r3
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr
 8004294:	1fff7598 	.word	0x1fff7598

08004298 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 800429c:	f7ff ff78 	bl	8004190 <LL_DBGMCU_EnableDBGSleepMode>
}
 80042a0:	bf00      	nop
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80042a8:	f7ff ff80 	bl	80041ac <LL_DBGMCU_EnableDBGStopMode>
}
 80042ac:	bf00      	nop
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 80042b4:	f7ff ff88 	bl	80041c8 <LL_DBGMCU_EnableDBGStandbyMode>
}
 80042b8:	bf00      	nop
 80042ba:	bd80      	pop	{r7, pc}

080042bc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	431a      	orrs	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	601a      	str	r2, [r3, #0]
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc80      	pop	{r7}
 80042de:	4770      	bx	lr

080042e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bc80      	pop	{r7}
 80042f8:	4770      	bx	lr

080042fa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b085      	sub	sp, #20
 80042fe:	af00      	add	r7, sp, #0
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	695a      	ldr	r2, [r3, #20]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2107      	movs	r1, #7
 8004312:	fa01 f303 	lsl.w	r3, r1, r3
 8004316:	43db      	mvns	r3, r3
 8004318:	401a      	ands	r2, r3
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	fa01 f303 	lsl.w	r3, r1, r3
 8004326:	431a      	orrs	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800432c:	bf00      	nop
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	bc80      	pop	{r7}
 8004334:	4770      	bx	lr

08004336 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	695a      	ldr	r2, [r3, #20]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	f003 0304 	and.w	r3, r3, #4
 800434a:	2107      	movs	r1, #7
 800434c:	fa01 f303 	lsl.w	r3, r1, r3
 8004350:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800435c:	4618      	mov	r0, r3
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	bc80      	pop	{r7}
 8004364:	4770      	bx	lr

08004366 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr

0800438a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800438a:	b480      	push	{r7}
 800438c:	b085      	sub	sp, #20
 800438e:	af00      	add	r7, sp, #0
 8004390:	60f8      	str	r0, [r7, #12]
 8004392:	60b9      	str	r1, [r7, #8]
 8004394:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f003 031f 	and.w	r3, r3, #31
 80043a0:	210f      	movs	r1, #15
 80043a2:	fa01 f303 	lsl.w	r3, r1, r3
 80043a6:	43db      	mvns	r3, r3
 80043a8:	401a      	ands	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	0e9b      	lsrs	r3, r3, #26
 80043ae:	f003 010f 	and.w	r1, r3, #15
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f003 031f 	and.w	r3, r3, #31
 80043b8:	fa01 f303 	lsl.w	r3, r1, r3
 80043bc:	431a      	orrs	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80043c2:	bf00      	nop
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr

080043cc <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bc80      	pop	{r7}
 80043ee:	4770      	bx	lr

080043f0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004404:	43db      	mvns	r3, r3
 8004406:	401a      	ands	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr

08004416 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8004416:	b480      	push	{r7}
 8004418:	b085      	sub	sp, #20
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	695a      	ldr	r2, [r3, #20]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	021b      	lsls	r3, r3, #8
 800442a:	43db      	mvns	r3, r3
 800442c:	401a      	ands	r2, r3
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	0219      	lsls	r1, r3, #8
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	400b      	ands	r3, r1
 8004436:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800443a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800443e:	431a      	orrs	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8004444:	bf00      	nop
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr

0800444e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800445e:	f023 0317 	bic.w	r3, r3, #23
 8004462:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr

08004474 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004484:	f023 0317 	bic.w	r3, r3, #23
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6093      	str	r3, [r2, #8]
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	bc80      	pop	{r7}
 8004494:	4770      	bx	lr

08004496 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044aa:	d101      	bne.n	80044b0 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80044ac:	2301      	movs	r3, #1
 80044ae:	e000      	b.n	80044b2 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044cc:	f023 0317 	bic.w	r3, r3, #23
 80044d0:	f043 0201 	orr.w	r2, r3, #1
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	bc80      	pop	{r7}
 80044e0:	4770      	bx	lr

080044e2 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044f2:	f023 0317 	bic.w	r3, r3, #23
 80044f6:	f043 0202 	orr.w	r2, r3, #2
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	bc80      	pop	{r7}
 8004506:	4770      	bx	lr

08004508 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b01      	cmp	r3, #1
 800451a:	d101      	bne.n	8004520 <LL_ADC_IsEnabled+0x18>
 800451c:	2301      	movs	r3, #1
 800451e:	e000      	b.n	8004522 <LL_ADC_IsEnabled+0x1a>
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	4770      	bx	lr

0800452c <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b02      	cmp	r3, #2
 800453e:	d101      	bne.n	8004544 <LL_ADC_IsDisableOngoing+0x18>
 8004540:	2301      	movs	r3, #1
 8004542:	e000      	b.n	8004546 <LL_ADC_IsDisableOngoing+0x1a>
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr

08004550 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004560:	f023 0317 	bic.w	r3, r3, #23
 8004564:	f043 0204 	orr.w	r2, r3, #4
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	bc80      	pop	{r7}
 8004574:	4770      	bx	lr

08004576 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004586:	f023 0317 	bic.w	r3, r3, #23
 800458a:	f043 0210 	orr.w	r2, r3, #16
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr

0800459c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d101      	bne.n	80045b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80045b0:	2301      	movs	r3, #1
 80045b2:	e000      	b.n	80045b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bc80      	pop	{r7}
 80045be:	4770      	bx	lr

080045c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b088      	sub	sp, #32
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045c8:	2300      	movs	r3, #0
 80045ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 80045cc:	2300      	movs	r3, #0
 80045ce:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80045d4:	2300      	movs	r3, #0
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e17e      	b.n	80048e0 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d109      	bne.n	8004604 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7fc fef9 	bl	80013e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff ff44 	bl	8004496 <LL_ADC_IsInternalRegulatorEnabled>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d115      	bne.n	8004640 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff ff18 	bl	800444e <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800461e:	4b9e      	ldr	r3, [pc, #632]	; (8004898 <HAL_ADC_Init+0x2d8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	099b      	lsrs	r3, r3, #6
 8004624:	4a9d      	ldr	r2, [pc, #628]	; (800489c <HAL_ADC_Init+0x2dc>)
 8004626:	fba2 2303 	umull	r2, r3, r2, r3
 800462a:	099b      	lsrs	r3, r3, #6
 800462c:	3301      	adds	r3, #1
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004632:	e002      	b.n	800463a <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	3b01      	subs	r3, #1
 8004638:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1f9      	bne.n	8004634 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff ff26 	bl	8004496 <LL_ADC_IsInternalRegulatorEnabled>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10d      	bne.n	800466c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004654:	f043 0210 	orr.w	r2, r3, #16
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004660:	f043 0201 	orr.w	r2, r3, #1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff ff93 	bl	800459c <LL_ADC_REG_IsConversionOngoing>
 8004676:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467c:	f003 0310 	and.w	r3, r3, #16
 8004680:	2b00      	cmp	r3, #0
 8004682:	f040 8124 	bne.w	80048ce <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	2b00      	cmp	r3, #0
 800468a:	f040 8120 	bne.w	80048ce <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004692:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004696:	f043 0202 	orr.w	r2, r3, #2
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff ff30 	bl	8004508 <LL_ADC_IsEnabled>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f040 80a7 	bne.w	80047fe <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	7e1b      	ldrb	r3, [r3, #24]
 80046b8:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80046ba:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	7e5b      	ldrb	r3, [r3, #25]
 80046c0:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80046c2:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	7e9b      	ldrb	r3, [r3, #26]
 80046c8:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80046ca:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046d0:	2a00      	cmp	r2, #0
 80046d2:	d002      	beq.n	80046da <HAL_ADC_Init+0x11a>
 80046d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80046d8:	e000      	b.n	80046dc <HAL_ADC_Init+0x11c>
 80046da:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80046dc:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80046e2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	da04      	bge.n	80046f6 <HAL_ADC_Init+0x136>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046f4:	e001      	b.n	80046fa <HAL_ADC_Init+0x13a>
 80046f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 80046fa:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004702:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004704:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4313      	orrs	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d114      	bne.n	8004740 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	7e9b      	ldrb	r3, [r3, #26]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d104      	bne.n	8004728 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004724:	61bb      	str	r3, [r7, #24]
 8004726:	e00b      	b.n	8004740 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472c:	f043 0220 	orr.w	r2, r3, #32
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004738:	f043 0201 	orr.w	r2, r3, #1
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	2b00      	cmp	r3, #0
 8004746:	d009      	beq.n	800475c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004754:	4313      	orrs	r3, r2
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	4313      	orrs	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8004766:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6812      	ldr	r2, [r2, #0]
 800476e:	69b9      	ldr	r1, [r7, #24]
 8004770:	430b      	orrs	r3, r1
 8004772:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004780:	4313      	orrs	r3, r2
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	4313      	orrs	r3, r2
 8004786:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800478e:	2b01      	cmp	r3, #1
 8004790:	d111      	bne.n	80047b6 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800479e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80047a4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80047aa:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f043 0301 	orr.w	r3, r3, #1
 80047b4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	4b38      	ldr	r3, [pc, #224]	; (80048a0 <HAL_ADC_Init+0x2e0>)
 80047be:	4013      	ands	r3, r2
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6812      	ldr	r2, [r2, #0]
 80047c4:	6979      	ldr	r1, [r7, #20]
 80047c6:	430b      	orrs	r3, r1
 80047c8:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80047d2:	d014      	beq.n	80047fe <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80047d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047dc:	d00f      	beq.n	80047fe <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80047e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047e6:	d00a      	beq.n	80047fe <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80047e8:	4b2e      	ldr	r3, [pc, #184]	; (80048a4 <HAL_ADC_Init+0x2e4>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80047f8:	492a      	ldr	r1, [pc, #168]	; (80048a4 <HAL_ADC_Init+0x2e4>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6818      	ldr	r0, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004806:	461a      	mov	r2, r3
 8004808:	2100      	movs	r1, #0
 800480a:	f7ff fd76 	bl	80042fa <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004816:	461a      	mov	r2, r3
 8004818:	4923      	ldr	r1, [pc, #140]	; (80048a8 <HAL_ADC_Init+0x2e8>)
 800481a:	f7ff fd6e 	bl	80042fa <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d108      	bne.n	8004838 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f062 020f 	orn	r2, r2, #15
 8004834:	629a      	str	r2, [r3, #40]	; 0x28
 8004836:	e017      	b.n	8004868 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004840:	d112      	bne.n	8004868 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	3b01      	subs	r3, #1
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	f003 031c 	and.w	r3, r3, #28
 8004854:	f06f 020f 	mvn.w	r2, #15
 8004858:	fa02 f103 	lsl.w	r1, r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2100      	movs	r1, #0
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff fd61 	bl	8004336 <LL_ADC_GetSamplingTimeCommonChannels>
 8004874:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800487a:	429a      	cmp	r2, r3
 800487c:	d116      	bne.n	80048ac <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004888:	f023 0303 	bic.w	r3, r3, #3
 800488c:	f043 0201 	orr.w	r2, r3, #1
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004894:	e023      	b.n	80048de <HAL_ADC_Init+0x31e>
 8004896:	bf00      	nop
 8004898:	20000000 	.word	0x20000000
 800489c:	053e2d63 	.word	0x053e2d63
 80048a0:	1ffffc02 	.word	0x1ffffc02
 80048a4:	40012708 	.word	0x40012708
 80048a8:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b0:	f023 0312 	bic.w	r3, r3, #18
 80048b4:	f043 0210 	orr.w	r2, r3, #16
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c0:	f043 0201 	orr.w	r2, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80048cc:	e007      	b.n	80048de <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d2:	f043 0210 	orr.w	r2, r3, #16
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80048de:	7ffb      	ldrb	r3, [r7, #31]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3720      	adds	r7, #32
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e07a      	b.n	80049f0 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fe:	f043 0202 	orr.w	r2, r3, #2
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 face 	bl	8004ea8 <ADC_ConversionStop>
 800490c:	4603      	mov	r3, r0
 800490e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004910:	7bfb      	ldrb	r3, [r7, #15]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10f      	bne.n	8004936 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fb92 	bl	8005040 <ADC_Disable>
 800491c:	4603      	mov	r3, r0
 800491e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d102      	bne.n	800492c <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff fd9f 	bl	8004474 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6812      	ldr	r2, [r2, #0]
 8004940:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8004944:	f023 0303 	bic.w	r3, r3, #3
 8004948:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f240 329f 	movw	r2, #927	; 0x39f
 8004952:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68d9      	ldr	r1, [r3, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	4b26      	ldr	r3, [pc, #152]	; (80049f8 <HAL_ADC_DeInit+0x110>)
 8004960:	400b      	ands	r3, r1
 8004962:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	691a      	ldr	r2, [r3, #16]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8004972:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695a      	ldr	r2, [r3, #20]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0207 	bic.w	r2, r2, #7
 8004982:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6a1a      	ldr	r2, [r3, #32]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8004992:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80049a2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80049b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2200      	movs	r2, #0
 80049c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80049c2:	4b0e      	ldr	r3, [pc, #56]	; (80049fc <HAL_ADC_DeInit+0x114>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a0d      	ldr	r2, [pc, #52]	; (80049fc <HAL_ADC_DeInit+0x114>)
 80049c8:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80049cc:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7fc fd38 	bl	8001444 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	833e0200 	.word	0x833e0200
 80049fc:	40012708 	.word	0x40012708

08004a00 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff fdc5 	bl	800459c <LL_ADC_REG_IsConversionOngoing>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d132      	bne.n	8004a7e <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d101      	bne.n	8004a26 <HAL_ADC_Start+0x26>
 8004a22:	2302      	movs	r3, #2
 8004a24:	e02e      	b.n	8004a84 <HAL_ADC_Start+0x84>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fa80 	bl	8004f34 <ADC_Enable>
 8004a34:	4603      	mov	r3, r0
 8004a36:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d11a      	bne.n	8004a74 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a42:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a46:	f023 0301 	bic.w	r3, r3, #1
 8004a4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	221c      	movs	r2, #28
 8004a5e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7ff fd6f 	bl	8004550 <LL_ADC_REG_StartConversion>
 8004a72:	e006      	b.n	8004a82 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004a7c:	e001      	b.n	8004a82 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004a7e:	2302      	movs	r3, #2
 8004a80:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <HAL_ADC_Stop+0x16>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e022      	b.n	8004ae8 <HAL_ADC_Stop+0x5c>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f9fc 	bl	8004ea8 <ADC_ConversionStop>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d111      	bne.n	8004ade <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fac0 	bl	8005040 <ADC_Disable>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d109      	bne.n	8004ade <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ace:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ad2:	f023 0301 	bic.w	r3, r3, #1
 8004ad6:	f043 0201 	orr.w	r2, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d102      	bne.n	8004b08 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8004b02:	2308      	movs	r3, #8
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	e010      	b.n	8004b2a <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d007      	beq.n	8004b26 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1a:	f043 0220 	orr.w	r2, r3, #32
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e077      	b.n	8004c16 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8004b26:	2304      	movs	r3, #4
 8004b28:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004b2a:	f7fd fe53 	bl	80027d4 <HAL_GetTick>
 8004b2e:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004b30:	e021      	b.n	8004b76 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b38:	d01d      	beq.n	8004b76 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004b3a:	f7fd fe4b 	bl	80027d4 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d302      	bcc.n	8004b50 <HAL_ADC_PollForConversion+0x60>
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d112      	bne.n	8004b76 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10b      	bne.n	8004b76 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b62:	f043 0204 	orr.w	r2, r3, #4
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e04f      	b.n	8004c16 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0d6      	beq.n	8004b32 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b88:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff fbe6 	bl	8004366 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d031      	beq.n	8004c04 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	7e9b      	ldrb	r3, [r3, #26]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d12d      	bne.n	8004c04 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0308 	and.w	r3, r3, #8
 8004bb2:	2b08      	cmp	r3, #8
 8004bb4:	d126      	bne.n	8004c04 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7ff fcee 	bl	800459c <LL_ADC_REG_IsConversionOngoing>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d112      	bne.n	8004bec <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 020c 	bic.w	r2, r2, #12
 8004bd4:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bde:	f023 0301 	bic.w	r3, r3, #1
 8004be2:	f043 0201 	orr.w	r2, r3, #1
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	659a      	str	r2, [r3, #88]	; 0x58
 8004bea:	e00b      	b.n	8004c04 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf0:	f043 0220 	orr.w	r2, r3, #32
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bfc:	f043 0201 	orr.w	r2, r3, #1
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	7e1b      	ldrb	r3, [r3, #24]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d103      	bne.n	8004c14 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	220c      	movs	r2, #12
 8004c12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bc80      	pop	{r7}
 8004c34:	4770      	bx	lr
	...

08004c38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b088      	sub	sp, #32
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004c46:	2300      	movs	r3, #0
 8004c48:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d101      	bne.n	8004c60 <HAL_ADC_ConfigChannel+0x28>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e110      	b.n	8004e82 <HAL_ADC_ConfigChannel+0x24a>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7ff fc95 	bl	800459c <LL_ADC_REG_IsConversionOngoing>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f040 80f7 	bne.w	8004e68 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	f000 80b1 	beq.w	8004de6 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c8c:	d004      	beq.n	8004c98 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004c92:	4a7e      	ldr	r2, [pc, #504]	; (8004e8c <HAL_ADC_ConfigChannel+0x254>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d108      	bne.n	8004caa <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4610      	mov	r0, r2
 8004ca4:	f7ff fb92 	bl	80043cc <LL_ADC_REG_SetSequencerChAdd>
 8004ca8:	e041      	b.n	8004d2e <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f003 031f 	and.w	r3, r3, #31
 8004cb6:	210f      	movs	r1, #15
 8004cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	401a      	ands	r2, r3
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d105      	bne.n	8004cd8 <HAL_ADC_ConfigChannel+0xa0>
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	0e9b      	lsrs	r3, r3, #26
 8004cd2:	f003 031f 	and.w	r3, r3, #31
 8004cd6:	e011      	b.n	8004cfc <HAL_ADC_ConfigChannel+0xc4>
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	fa93 f3a3 	rbit	r3, r3
 8004ce4:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8004cf0:	2320      	movs	r3, #32
 8004cf2:	e003      	b.n	8004cfc <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	fab3 f383 	clz	r3, r3
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	6839      	ldr	r1, [r7, #0]
 8004cfe:	6849      	ldr	r1, [r1, #4]
 8004d00:	f001 011f 	and.w	r1, r1, #31
 8004d04:	408b      	lsls	r3, r1
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	089b      	lsrs	r3, r3, #2
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d808      	bhi.n	8004d2e <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6818      	ldr	r0, [r3, #0]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	6859      	ldr	r1, [r3, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	f7ff fb2e 	bl	800438a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6818      	ldr	r0, [r3, #0]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	6819      	ldr	r1, [r3, #0]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	f7ff fb6b 	bl	8004416 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f280 8097 	bge.w	8004e78 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d4a:	4851      	ldr	r0, [pc, #324]	; (8004e90 <HAL_ADC_ConfigChannel+0x258>)
 8004d4c:	f7ff fac8 	bl	80042e0 <LL_ADC_GetCommonPathInternalCh>
 8004d50:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a4f      	ldr	r2, [pc, #316]	; (8004e94 <HAL_ADC_ConfigChannel+0x25c>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d120      	bne.n	8004d9e <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d11b      	bne.n	8004d9e <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	4848      	ldr	r0, [pc, #288]	; (8004e90 <HAL_ADC_ConfigChannel+0x258>)
 8004d70:	f7ff faa4 	bl	80042bc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d74:	4b48      	ldr	r3, [pc, #288]	; (8004e98 <HAL_ADC_ConfigChannel+0x260>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	099b      	lsrs	r3, r3, #6
 8004d7a:	4a48      	ldr	r2, [pc, #288]	; (8004e9c <HAL_ADC_ConfigChannel+0x264>)
 8004d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d80:	099b      	lsrs	r3, r3, #6
 8004d82:	1c5a      	adds	r2, r3, #1
 8004d84:	4613      	mov	r3, r2
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	4413      	add	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004d8e:	e002      	b.n	8004d96 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1f9      	bne.n	8004d90 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004d9c:	e06c      	b.n	8004e78 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a3f      	ldr	r2, [pc, #252]	; (8004ea0 <HAL_ADC_ConfigChannel+0x268>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d10c      	bne.n	8004dc2 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d107      	bne.n	8004dc2 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004db8:	4619      	mov	r1, r3
 8004dba:	4835      	ldr	r0, [pc, #212]	; (8004e90 <HAL_ADC_ConfigChannel+0x258>)
 8004dbc:	f7ff fa7e 	bl	80042bc <LL_ADC_SetCommonPathInternalCh>
 8004dc0:	e05a      	b.n	8004e78 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a37      	ldr	r2, [pc, #220]	; (8004ea4 <HAL_ADC_ConfigChannel+0x26c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d155      	bne.n	8004e78 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d150      	bne.n	8004e78 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ddc:	4619      	mov	r1, r3
 8004dde:	482c      	ldr	r0, [pc, #176]	; (8004e90 <HAL_ADC_ConfigChannel+0x258>)
 8004de0:	f7ff fa6c 	bl	80042bc <LL_ADC_SetCommonPathInternalCh>
 8004de4:	e048      	b.n	8004e78 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dee:	d004      	beq.n	8004dfa <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004df4:	4a25      	ldr	r2, [pc, #148]	; (8004e8c <HAL_ADC_ConfigChannel+0x254>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d107      	bne.n	8004e0a <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4619      	mov	r1, r3
 8004e04:	4610      	mov	r0, r2
 8004e06:	f7ff faf3 	bl	80043f0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	da32      	bge.n	8004e78 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e12:	481f      	ldr	r0, [pc, #124]	; (8004e90 <HAL_ADC_ConfigChannel+0x258>)
 8004e14:	f7ff fa64 	bl	80042e0 <LL_ADC_GetCommonPathInternalCh>
 8004e18:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1d      	ldr	r2, [pc, #116]	; (8004e94 <HAL_ADC_ConfigChannel+0x25c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d107      	bne.n	8004e34 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4818      	ldr	r0, [pc, #96]	; (8004e90 <HAL_ADC_ConfigChannel+0x258>)
 8004e2e:	f7ff fa45 	bl	80042bc <LL_ADC_SetCommonPathInternalCh>
 8004e32:	e021      	b.n	8004e78 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a19      	ldr	r2, [pc, #100]	; (8004ea0 <HAL_ADC_ConfigChannel+0x268>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d107      	bne.n	8004e4e <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e44:	4619      	mov	r1, r3
 8004e46:	4812      	ldr	r0, [pc, #72]	; (8004e90 <HAL_ADC_ConfigChannel+0x258>)
 8004e48:	f7ff fa38 	bl	80042bc <LL_ADC_SetCommonPathInternalCh>
 8004e4c:	e014      	b.n	8004e78 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a14      	ldr	r2, [pc, #80]	; (8004ea4 <HAL_ADC_ConfigChannel+0x26c>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d10f      	bne.n	8004e78 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004e5e:	4619      	mov	r1, r3
 8004e60:	480b      	ldr	r0, [pc, #44]	; (8004e90 <HAL_ADC_ConfigChannel+0x258>)
 8004e62:	f7ff fa2b 	bl	80042bc <LL_ADC_SetCommonPathInternalCh>
 8004e66:	e007      	b.n	8004e78 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6c:	f043 0220 	orr.w	r2, r3, #32
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004e80:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3720      	adds	r7, #32
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	80000004 	.word	0x80000004
 8004e90:	40012708 	.word	0x40012708
 8004e94:	b0001000 	.word	0xb0001000
 8004e98:	20000000 	.word	0x20000000
 8004e9c:	053e2d63 	.word	0x053e2d63
 8004ea0:	b8004000 	.word	0xb8004000
 8004ea4:	b4002000 	.word	0xb4002000

08004ea8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff fb71 	bl	800459c <LL_ADC_REG_IsConversionOngoing>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d033      	beq.n	8004f28 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7ff fb31 	bl	800452c <LL_ADC_IsDisableOngoing>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d104      	bne.n	8004eda <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff fb4e 	bl	8004576 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004eda:	f7fd fc7b 	bl	80027d4 <HAL_GetTick>
 8004ede:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004ee0:	e01b      	b.n	8004f1a <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004ee2:	f7fd fc77 	bl	80027d4 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d914      	bls.n	8004f1a <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f003 0304 	and.w	r3, r3, #4
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00d      	beq.n	8004f1a <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f02:	f043 0210 	orr.w	r2, r3, #16
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f0e:	f043 0201 	orr.w	r2, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e007      	b.n	8004f2a <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1dc      	bne.n	8004ee2 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7ff fadf 	bl	8004508 <LL_ADC_IsEnabled>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d169      	bne.n	8005024 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	4b36      	ldr	r3, [pc, #216]	; (8005030 <ADC_Enable+0xfc>)
 8004f58:	4013      	ands	r3, r2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00d      	beq.n	8004f7a <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f62:	f043 0210 	orr.w	r2, r3, #16
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f6e:	f043 0201 	orr.w	r2, r3, #1
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e055      	b.n	8005026 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff fa9c 	bl	80044bc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8004f84:	482b      	ldr	r0, [pc, #172]	; (8005034 <ADC_Enable+0x100>)
 8004f86:	f7ff f9ab 	bl	80042e0 <LL_ADC_GetCommonPathInternalCh>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00f      	beq.n	8004fb4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f94:	4b28      	ldr	r3, [pc, #160]	; (8005038 <ADC_Enable+0x104>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	099b      	lsrs	r3, r3, #6
 8004f9a:	4a28      	ldr	r2, [pc, #160]	; (800503c <ADC_Enable+0x108>)
 8004f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa0:	099b      	lsrs	r3, r3, #6
 8004fa2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004fa4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004fa6:	e002      	b.n	8004fae <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1f9      	bne.n	8004fa8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	7e5b      	ldrb	r3, [r3, #25]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d033      	beq.n	8005024 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004fbc:	f7fd fc0a 	bl	80027d4 <HAL_GetTick>
 8004fc0:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004fc2:	e028      	b.n	8005016 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff fa9d 	bl	8004508 <LL_ADC_IsEnabled>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d104      	bne.n	8004fde <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff fa6f 	bl	80044bc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004fde:	f7fd fbf9 	bl	80027d4 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d914      	bls.n	8005016 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d00d      	beq.n	8005016 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ffe:	f043 0210 	orr.w	r2, r3, #16
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800500a:	f043 0201 	orr.w	r2, r3, #1
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e007      	b.n	8005026 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b01      	cmp	r3, #1
 8005022:	d1cf      	bne.n	8004fc4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	80000017 	.word	0x80000017
 8005034:	40012708 	.word	0x40012708
 8005038:	20000000 	.word	0x20000000
 800503c:	053e2d63 	.word	0x053e2d63

08005040 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4618      	mov	r0, r3
 800504e:	f7ff fa6d 	bl	800452c <LL_ADC_IsDisableOngoing>
 8005052:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4618      	mov	r0, r3
 800505a:	f7ff fa55 	bl	8004508 <LL_ADC_IsEnabled>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d047      	beq.n	80050f4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d144      	bne.n	80050f4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f003 0305 	and.w	r3, r3, #5
 8005074:	2b01      	cmp	r3, #1
 8005076:	d10c      	bne.n	8005092 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4618      	mov	r0, r3
 800507e:	f7ff fa30 	bl	80044e2 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2203      	movs	r2, #3
 8005088:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800508a:	f7fd fba3 	bl	80027d4 <HAL_GetTick>
 800508e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005090:	e029      	b.n	80050e6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005096:	f043 0210 	orr.w	r2, r3, #16
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a2:	f043 0201 	orr.w	r2, r3, #1
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e023      	b.n	80050f6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80050ae:	f7fd fb91 	bl	80027d4 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d914      	bls.n	80050e6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00d      	beq.n	80050e6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ce:	f043 0210 	orr.w	r2, r3, #16
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050da:	f043 0201 	orr.w	r2, r3, #1
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e007      	b.n	80050f6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1dc      	bne.n	80050ae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <LL_ADC_SetCalibrationFactor>:
{
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800510e:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	431a      	orrs	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	bc80      	pop	{r7}
 8005124:	4770      	bx	lr

08005126 <LL_ADC_GetCalibrationFactor>:
{
 8005126:	b480      	push	{r7}
 8005128:	b083      	sub	sp, #12
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005138:	4618      	mov	r0, r3
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	bc80      	pop	{r7}
 8005140:	4770      	bx	lr

08005142 <LL_ADC_Enable>:
{
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005152:	f023 0317 	bic.w	r3, r3, #23
 8005156:	f043 0201 	orr.w	r2, r3, #1
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	609a      	str	r2, [r3, #8]
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	bc80      	pop	{r7}
 8005166:	4770      	bx	lr

08005168 <LL_ADC_Disable>:
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005178:	f023 0317 	bic.w	r3, r3, #23
 800517c:	f043 0202 	orr.w	r2, r3, #2
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	609a      	str	r2, [r3, #8]
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	bc80      	pop	{r7}
 800518c:	4770      	bx	lr

0800518e <LL_ADC_IsEnabled>:
{
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <LL_ADC_IsEnabled+0x18>
 80051a2:	2301      	movs	r3, #1
 80051a4:	e000      	b.n	80051a8 <LL_ADC_IsEnabled+0x1a>
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bc80      	pop	{r7}
 80051b0:	4770      	bx	lr

080051b2 <LL_ADC_StartCalibration>:
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051c2:	f023 0317 	bic.w	r3, r3, #23
 80051c6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	609a      	str	r2, [r3, #8]
}
 80051ce:	bf00      	nop
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc80      	pop	{r7}
 80051d6:	4770      	bx	lr

080051d8 <LL_ADC_IsCalibrationOnGoing>:
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051ec:	d101      	bne.n	80051f2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80051ee:	2301      	movs	r3, #1
 80051f0:	e000      	b.n	80051f4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bc80      	pop	{r7}
 80051fc:	4770      	bx	lr

080051fe <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b088      	sub	sp, #32
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005206:	2300      	movs	r3, #0
 8005208:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800520a:	2300      	movs	r3, #0
 800520c:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005214:	2b01      	cmp	r3, #1
 8005216:	d101      	bne.n	800521c <HAL_ADCEx_Calibration_Start+0x1e>
 8005218:	2302      	movs	r3, #2
 800521a:	e0b9      	b.n	8005390 <HAL_ADCEx_Calibration_Start+0x192>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7ff ff0b 	bl	8005040 <ADC_Disable>
 800522a:	4603      	mov	r3, r0
 800522c:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f7ff ffab 	bl	800518e <LL_ADC_IsEnabled>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	f040 809d 	bne.w	800537a <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005244:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005248:	f043 0202 	orr.w	r2, r3, #2
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	f248 0303 	movw	r3, #32771	; 0x8003
 800525a:	4013      	ands	r3, r2
 800525c:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6812      	ldr	r2, [r2, #0]
 8005268:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800526c:	f023 0303 	bic.w	r3, r3, #3
 8005270:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8005272:	2300      	movs	r3, #0
 8005274:	61fb      	str	r3, [r7, #28]
 8005276:	e02e      	b.n	80052d6 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4618      	mov	r0, r3
 800527e:	f7ff ff98 	bl	80051b2 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005282:	e014      	b.n	80052ae <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	3301      	adds	r3, #1
 8005288:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8005290:	d30d      	bcc.n	80052ae <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005296:	f023 0312 	bic.w	r3, r3, #18
 800529a:	f043 0210 	orr.w	r2, r3, #16
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e070      	b.n	8005390 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7ff ff90 	bl	80051d8 <LL_ADC_IsCalibrationOnGoing>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1e2      	bne.n	8005284 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7ff ff2f 	bl	8005126 <LL_ADC_GetCalibrationFactor>
 80052c8:	4602      	mov	r2, r0
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	4413      	add	r3, r2
 80052ce:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	3301      	adds	r3, #1
 80052d4:	61fb      	str	r3, [r7, #28]
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	2b07      	cmp	r3, #7
 80052da:	d9cd      	bls.n	8005278 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e4:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7ff ff29 	bl	8005142 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	69b9      	ldr	r1, [r7, #24]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7ff ff01 	bl	80050fe <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4618      	mov	r0, r3
 8005302:	f7ff ff31 	bl	8005168 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005306:	f7fd fa65 	bl	80027d4 <HAL_GetTick>
 800530a:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800530c:	e01c      	b.n	8005348 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800530e:	f7fd fa61 	bl	80027d4 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b02      	cmp	r3, #2
 800531a:	d915      	bls.n	8005348 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4618      	mov	r0, r3
 8005322:	f7ff ff34 	bl	800518e <LL_ADC_IsEnabled>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00d      	beq.n	8005348 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005330:	f043 0210 	orr.w	r2, r3, #16
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800533c:	f043 0201 	orr.w	r2, r3, #1
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e023      	b.n	8005390 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff ff1e 	bl	800518e <LL_ADC_IsEnabled>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1da      	bne.n	800530e <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68d9      	ldr	r1, [r3, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	430a      	orrs	r2, r1
 8005366:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536c:	f023 0303 	bic.w	r3, r3, #3
 8005370:	f043 0201 	orr.w	r2, r3, #1
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	659a      	str	r2, [r3, #88]	; 0x58
 8005378:	e005      	b.n	8005386 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537e:	f043 0210 	orr.w	r2, r3, #16
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800538e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3720      	adds	r7, #32
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f003 0307 	and.w	r3, r3, #7
 80053a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053a8:	4b0c      	ldr	r3, [pc, #48]	; (80053dc <__NVIC_SetPriorityGrouping+0x44>)
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053b4:	4013      	ands	r3, r2
 80053b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053ca:	4a04      	ldr	r2, [pc, #16]	; (80053dc <__NVIC_SetPriorityGrouping+0x44>)
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	60d3      	str	r3, [r2, #12]
}
 80053d0:	bf00      	nop
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bc80      	pop	{r7}
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	e000ed00 	.word	0xe000ed00

080053e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053e4:	4b04      	ldr	r3, [pc, #16]	; (80053f8 <__NVIC_GetPriorityGrouping+0x18>)
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	0a1b      	lsrs	r3, r3, #8
 80053ea:	f003 0307 	and.w	r3, r3, #7
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bc80      	pop	{r7}
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	e000ed00 	.word	0xe000ed00

080053fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	4603      	mov	r3, r0
 8005404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800540a:	2b00      	cmp	r3, #0
 800540c:	db0b      	blt.n	8005426 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800540e:	79fb      	ldrb	r3, [r7, #7]
 8005410:	f003 021f 	and.w	r2, r3, #31
 8005414:	4906      	ldr	r1, [pc, #24]	; (8005430 <__NVIC_EnableIRQ+0x34>)
 8005416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800541a:	095b      	lsrs	r3, r3, #5
 800541c:	2001      	movs	r0, #1
 800541e:	fa00 f202 	lsl.w	r2, r0, r2
 8005422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	bc80      	pop	{r7}
 800542e:	4770      	bx	lr
 8005430:	e000e100 	.word	0xe000e100

08005434 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	4603      	mov	r3, r0
 800543c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800543e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005442:	2b00      	cmp	r3, #0
 8005444:	db12      	blt.n	800546c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005446:	79fb      	ldrb	r3, [r7, #7]
 8005448:	f003 021f 	and.w	r2, r3, #31
 800544c:	490a      	ldr	r1, [pc, #40]	; (8005478 <__NVIC_DisableIRQ+0x44>)
 800544e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005452:	095b      	lsrs	r3, r3, #5
 8005454:	2001      	movs	r0, #1
 8005456:	fa00 f202 	lsl.w	r2, r0, r2
 800545a:	3320      	adds	r3, #32
 800545c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005460:	f3bf 8f4f 	dsb	sy
}
 8005464:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005466:	f3bf 8f6f 	isb	sy
}
 800546a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	bc80      	pop	{r7}
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	e000e100 	.word	0xe000e100

0800547c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	4603      	mov	r3, r0
 8005484:	6039      	str	r1, [r7, #0]
 8005486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800548c:	2b00      	cmp	r3, #0
 800548e:	db0a      	blt.n	80054a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	b2da      	uxtb	r2, r3
 8005494:	490c      	ldr	r1, [pc, #48]	; (80054c8 <__NVIC_SetPriority+0x4c>)
 8005496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800549a:	0112      	lsls	r2, r2, #4
 800549c:	b2d2      	uxtb	r2, r2
 800549e:	440b      	add	r3, r1
 80054a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054a4:	e00a      	b.n	80054bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	4908      	ldr	r1, [pc, #32]	; (80054cc <__NVIC_SetPriority+0x50>)
 80054ac:	79fb      	ldrb	r3, [r7, #7]
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	3b04      	subs	r3, #4
 80054b4:	0112      	lsls	r2, r2, #4
 80054b6:	b2d2      	uxtb	r2, r2
 80054b8:	440b      	add	r3, r1
 80054ba:	761a      	strb	r2, [r3, #24]
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bc80      	pop	{r7}
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	e000e100 	.word	0xe000e100
 80054cc:	e000ed00 	.word	0xe000ed00

080054d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b089      	sub	sp, #36	; 0x24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	f1c3 0307 	rsb	r3, r3, #7
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	bf28      	it	cs
 80054ee:	2304      	movcs	r3, #4
 80054f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	3304      	adds	r3, #4
 80054f6:	2b06      	cmp	r3, #6
 80054f8:	d902      	bls.n	8005500 <NVIC_EncodePriority+0x30>
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	3b03      	subs	r3, #3
 80054fe:	e000      	b.n	8005502 <NVIC_EncodePriority+0x32>
 8005500:	2300      	movs	r3, #0
 8005502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005504:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	fa02 f303 	lsl.w	r3, r2, r3
 800550e:	43da      	mvns	r2, r3
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	401a      	ands	r2, r3
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005518:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	fa01 f303 	lsl.w	r3, r1, r3
 8005522:	43d9      	mvns	r1, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005528:	4313      	orrs	r3, r2
         );
}
 800552a:	4618      	mov	r0, r3
 800552c:	3724      	adds	r7, #36	; 0x24
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr

08005534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f7ff ff2b 	bl	8005398 <__NVIC_SetPriorityGrouping>
}
 8005542:	bf00      	nop
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b086      	sub	sp, #24
 800554e:	af00      	add	r7, sp, #0
 8005550:	4603      	mov	r3, r0
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	607a      	str	r2, [r7, #4]
 8005556:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005558:	f7ff ff42 	bl	80053e0 <__NVIC_GetPriorityGrouping>
 800555c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	68b9      	ldr	r1, [r7, #8]
 8005562:	6978      	ldr	r0, [r7, #20]
 8005564:	f7ff ffb4 	bl	80054d0 <NVIC_EncodePriority>
 8005568:	4602      	mov	r2, r0
 800556a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800556e:	4611      	mov	r1, r2
 8005570:	4618      	mov	r0, r3
 8005572:	f7ff ff83 	bl	800547c <__NVIC_SetPriority>
}
 8005576:	bf00      	nop
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b082      	sub	sp, #8
 8005582:	af00      	add	r7, sp, #0
 8005584:	4603      	mov	r3, r0
 8005586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800558c:	4618      	mov	r0, r3
 800558e:	f7ff ff35 	bl	80053fc <__NVIC_EnableIRQ>
}
 8005592:	bf00      	nop
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b082      	sub	sp, #8
 800559e:	af00      	add	r7, sp, #0
 80055a0:	4603      	mov	r3, r0
 80055a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80055a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7ff ff43 	bl	8005434 <__NVIC_DisableIRQ>
}
 80055ae:	bf00      	nop
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
	...

080055b8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e08e      	b.n	80056e8 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	461a      	mov	r2, r3
 80055d0:	4b47      	ldr	r3, [pc, #284]	; (80056f0 <HAL_DMA_Init+0x138>)
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d80f      	bhi.n	80055f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	461a      	mov	r2, r3
 80055dc:	4b45      	ldr	r3, [pc, #276]	; (80056f4 <HAL_DMA_Init+0x13c>)
 80055de:	4413      	add	r3, r2
 80055e0:	4a45      	ldr	r2, [pc, #276]	; (80056f8 <HAL_DMA_Init+0x140>)
 80055e2:	fba2 2303 	umull	r2, r3, r2, r3
 80055e6:	091b      	lsrs	r3, r3, #4
 80055e8:	009a      	lsls	r2, r3, #2
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a42      	ldr	r2, [pc, #264]	; (80056fc <HAL_DMA_Init+0x144>)
 80055f2:	641a      	str	r2, [r3, #64]	; 0x40
 80055f4:	e00e      	b.n	8005614 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	4b40      	ldr	r3, [pc, #256]	; (8005700 <HAL_DMA_Init+0x148>)
 80055fe:	4413      	add	r3, r2
 8005600:	4a3d      	ldr	r2, [pc, #244]	; (80056f8 <HAL_DMA_Init+0x140>)
 8005602:	fba2 2303 	umull	r2, r3, r2, r3
 8005606:	091b      	lsrs	r3, r3, #4
 8005608:	009a      	lsls	r2, r3, #2
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a3c      	ldr	r2, [pc, #240]	; (8005704 <HAL_DMA_Init+0x14c>)
 8005612:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	6812      	ldr	r2, [r2, #0]
 8005626:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800562a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562e:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6819      	ldr	r1, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	431a      	orrs	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	431a      	orrs	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	431a      	orrs	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	431a      	orrs	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fb24 	bl	8005cb4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005674:	d102      	bne.n	800567c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005684:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005688:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005692:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d010      	beq.n	80056be <HAL_DMA_Init+0x106>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2b04      	cmp	r3, #4
 80056a2:	d80c      	bhi.n	80056be <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fb4d 	bl	8005d44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ae:	2200      	movs	r2, #0
 80056b0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80056ba:	605a      	str	r2, [r3, #4]
 80056bc:	e008      	b.n	80056d0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40020407 	.word	0x40020407
 80056f4:	bffdfff8 	.word	0xbffdfff8
 80056f8:	cccccccd 	.word	0xcccccccd
 80056fc:	40020000 	.word	0x40020000
 8005700:	bffdfbf8 	.word	0xbffdfbf8
 8005704:	40020400 	.word	0x40020400

08005708 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e07b      	b.n	8005812 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 0201 	bic.w	r2, r2, #1
 8005728:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	461a      	mov	r2, r3
 8005730:	4b3a      	ldr	r3, [pc, #232]	; (800581c <HAL_DMA_DeInit+0x114>)
 8005732:	429a      	cmp	r2, r3
 8005734:	d80f      	bhi.n	8005756 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	461a      	mov	r2, r3
 800573c:	4b38      	ldr	r3, [pc, #224]	; (8005820 <HAL_DMA_DeInit+0x118>)
 800573e:	4413      	add	r3, r2
 8005740:	4a38      	ldr	r2, [pc, #224]	; (8005824 <HAL_DMA_DeInit+0x11c>)
 8005742:	fba2 2303 	umull	r2, r3, r2, r3
 8005746:	091b      	lsrs	r3, r3, #4
 8005748:	009a      	lsls	r2, r3, #2
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a35      	ldr	r2, [pc, #212]	; (8005828 <HAL_DMA_DeInit+0x120>)
 8005752:	641a      	str	r2, [r3, #64]	; 0x40
 8005754:	e00e      	b.n	8005774 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	461a      	mov	r2, r3
 800575c:	4b33      	ldr	r3, [pc, #204]	; (800582c <HAL_DMA_DeInit+0x124>)
 800575e:	4413      	add	r3, r2
 8005760:	4a30      	ldr	r2, [pc, #192]	; (8005824 <HAL_DMA_DeInit+0x11c>)
 8005762:	fba2 2303 	umull	r2, r3, r2, r3
 8005766:	091b      	lsrs	r3, r3, #4
 8005768:	009a      	lsls	r2, r3, #2
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a2f      	ldr	r2, [pc, #188]	; (8005830 <HAL_DMA_DeInit+0x128>)
 8005772:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2200      	movs	r2, #0
 800577a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005780:	f003 021c 	and.w	r2, r3, #28
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005788:	2101      	movs	r1, #1
 800578a:	fa01 f202 	lsl.w	r2, r1, r2
 800578e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fa8f 	bl	8005cb4 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800579a:	2200      	movs	r2, #0
 800579c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80057a6:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00f      	beq.n	80057d0 <HAL_DMA_DeInit+0xc8>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d80b      	bhi.n	80057d0 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 fac3 	bl	8005d44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80057ce:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	40020407 	.word	0x40020407
 8005820:	bffdfff8 	.word	0xbffdfff8
 8005824:	cccccccd 	.word	0xcccccccd
 8005828:	40020000 	.word	0x40020000
 800582c:	bffdfbf8 	.word	0xbffdfbf8
 8005830:	40020400 	.word	0x40020400

08005834 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
 8005840:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005842:	2300      	movs	r3, #0
 8005844:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800584c:	2b01      	cmp	r3, #1
 800584e:	d101      	bne.n	8005854 <HAL_DMA_Start_IT+0x20>
 8005850:	2302      	movs	r3, #2
 8005852:	e069      	b.n	8005928 <HAL_DMA_Start_IT+0xf4>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b01      	cmp	r3, #1
 8005866:	d155      	bne.n	8005914 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 0201 	bic.w	r2, r2, #1
 8005884:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	68b9      	ldr	r1, [r7, #8]
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f000 f9d3 	bl	8005c38 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005896:	2b00      	cmp	r3, #0
 8005898:	d008      	beq.n	80058ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f042 020e 	orr.w	r2, r2, #14
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	e00f      	b.n	80058cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0204 	bic.w	r2, r2, #4
 80058ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f042 020a 	orr.w	r2, r2, #10
 80058ca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d007      	beq.n	80058ea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058e8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d007      	beq.n	8005902 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005900:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f042 0201 	orr.w	r2, r2, #1
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	e008      	b.n	8005926 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2280      	movs	r2, #128	; 0x80
 8005918:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005926:	7dfb      	ldrb	r3, [r7, #23]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3718      	adds	r7, #24
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e04f      	b.n	80059e2 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d008      	beq.n	8005960 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2204      	movs	r2, #4
 8005952:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e040      	b.n	80059e2 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 020e 	bic.w	r2, r2, #14
 800596e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800597a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800597e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0201 	bic.w	r2, r2, #1
 800598e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005994:	f003 021c 	and.w	r2, r3, #28
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599c:	2101      	movs	r1, #1
 800599e:	fa01 f202 	lsl.w	r2, r1, r2
 80059a2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80059ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00c      	beq.n	80059d0 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80059ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bc80      	pop	{r7}
 80059ea:	4770      	bx	lr

080059ec <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059f4:	2300      	movs	r3, #0
 80059f6:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d005      	beq.n	8005a10 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2204      	movs	r2, #4
 8005a08:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	73fb      	strb	r3, [r7, #15]
 8005a0e:	e047      	b.n	8005aa0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 020e 	bic.w	r2, r2, #14
 8005a1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 0201 	bic.w	r2, r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a44:	f003 021c 	and.w	r2, r3, #28
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8005a52:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005a5c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00c      	beq.n	8005a80 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a74:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005a7e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	4798      	blx	r3
    }
  }
  return status;
 8005aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
	...

08005aac <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac8:	f003 031c 	and.w	r3, r3, #28
 8005acc:	2204      	movs	r2, #4
 8005ace:	409a      	lsls	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d027      	beq.n	8005b28 <HAL_DMA_IRQHandler+0x7c>
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f003 0304 	and.w	r3, r3, #4
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d022      	beq.n	8005b28 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0320 	and.w	r3, r3, #32
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d107      	bne.n	8005b00 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f022 0204 	bic.w	r2, r2, #4
 8005afe:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b04:	f003 021c 	and.w	r2, r3, #28
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0c:	2104      	movs	r1, #4
 8005b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8005b12:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 8081 	beq.w	8005c20 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005b26:	e07b      	b.n	8005c20 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2c:	f003 031c 	and.w	r3, r3, #28
 8005b30:	2202      	movs	r2, #2
 8005b32:	409a      	lsls	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4013      	ands	r3, r2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d03d      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x10c>
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f003 0302 	and.w	r3, r3, #2
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d038      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0320 	and.w	r3, r3, #32
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10b      	bne.n	8005b6c <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 020a 	bic.w	r2, r2, #10
 8005b62:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	461a      	mov	r2, r3
 8005b72:	4b2e      	ldr	r3, [pc, #184]	; (8005c2c <HAL_DMA_IRQHandler+0x180>)
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d909      	bls.n	8005b8c <HAL_DMA_IRQHandler+0xe0>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b7c:	f003 031c 	and.w	r3, r3, #28
 8005b80:	4a2b      	ldr	r2, [pc, #172]	; (8005c30 <HAL_DMA_IRQHandler+0x184>)
 8005b82:	2102      	movs	r1, #2
 8005b84:	fa01 f303 	lsl.w	r3, r1, r3
 8005b88:	6053      	str	r3, [r2, #4]
 8005b8a:	e008      	b.n	8005b9e <HAL_DMA_IRQHandler+0xf2>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b90:	f003 031c 	and.w	r3, r3, #28
 8005b94:	4a27      	ldr	r2, [pc, #156]	; (8005c34 <HAL_DMA_IRQHandler+0x188>)
 8005b96:	2102      	movs	r1, #2
 8005b98:	fa01 f303 	lsl.w	r3, r1, r3
 8005b9c:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d038      	beq.n	8005c20 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005bb6:	e033      	b.n	8005c20 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bbc:	f003 031c 	and.w	r3, r3, #28
 8005bc0:	2208      	movs	r2, #8
 8005bc2:	409a      	lsls	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d02a      	beq.n	8005c22 <HAL_DMA_IRQHandler+0x176>
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f003 0308 	and.w	r3, r3, #8
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d025      	beq.n	8005c22 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 020e 	bic.w	r2, r2, #14
 8005be4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bea:	f003 021c 	and.w	r2, r3, #28
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8005bf8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d004      	beq.n	8005c22 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005c20:	bf00      	nop
 8005c22:	bf00      	nop
}
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	40020080 	.word	0x40020080
 8005c30:	40020400 	.word	0x40020400
 8005c34:	40020000 	.word	0x40020000

08005c38 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
 8005c44:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005c4e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d004      	beq.n	8005c62 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005c60:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c66:	f003 021c 	and.w	r2, r3, #28
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	2101      	movs	r1, #1
 8005c70:	fa01 f202 	lsl.w	r2, r1, r2
 8005c74:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	2b10      	cmp	r3, #16
 8005c84:	d108      	bne.n	8005c98 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005c96:	e007      	b.n	8005ca8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	60da      	str	r2, [r3, #12]
}
 8005ca8:	bf00      	nop
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bc80      	pop	{r7}
 8005cb0:	4770      	bx	lr
	...

08005cb4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	4b1c      	ldr	r3, [pc, #112]	; (8005d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d813      	bhi.n	8005cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ccc:	089b      	lsrs	r3, r3, #2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005cd4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	3b08      	subs	r3, #8
 8005ce4:	4a14      	ldr	r2, [pc, #80]	; (8005d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8005ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cea:	091b      	lsrs	r3, r3, #4
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	e011      	b.n	8005d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf4:	089b      	lsrs	r3, r3, #2
 8005cf6:	009a      	lsls	r2, r3, #2
 8005cf8:	4b10      	ldr	r3, [pc, #64]	; (8005d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8005cfa:	4413      	add	r3, r2
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	3b08      	subs	r3, #8
 8005d08:	4a0b      	ldr	r2, [pc, #44]	; (8005d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8005d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d0e:	091b      	lsrs	r3, r3, #4
 8005d10:	3307      	adds	r3, #7
 8005d12:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a0a      	ldr	r2, [pc, #40]	; (8005d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8005d18:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f003 031f 	and.w	r3, r3, #31
 8005d20:	2201      	movs	r2, #1
 8005d22:	409a      	lsls	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005d28:	bf00      	nop
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bc80      	pop	{r7}
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	40020407 	.word	0x40020407
 8005d38:	cccccccd 	.word	0xcccccccd
 8005d3c:	4002081c 	.word	0x4002081c
 8005d40:	40020880 	.word	0x40020880

08005d44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d54:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4b0a      	ldr	r3, [pc, #40]	; (8005d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	461a      	mov	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a08      	ldr	r2, [pc, #32]	; (8005d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005d68:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	f003 0303 	and.w	r3, r3, #3
 8005d72:	2201      	movs	r2, #1
 8005d74:	409a      	lsls	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005d7a:	bf00      	nop
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bc80      	pop	{r7}
 8005d82:	4770      	bx	lr
 8005d84:	1000823f 	.word	0x1000823f
 8005d88:	40020940 	.word	0x40020940

08005d8c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005d9a:	4b1c      	ldr	r3, [pc, #112]	; (8005e0c <HAL_FLASH_Program+0x80>)
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d101      	bne.n	8005da6 <HAL_FLASH_Program+0x1a>
 8005da2:	2302      	movs	r3, #2
 8005da4:	e02d      	b.n	8005e02 <HAL_FLASH_Program+0x76>
 8005da6:	4b19      	ldr	r3, [pc, #100]	; (8005e0c <HAL_FLASH_Program+0x80>)
 8005da8:	2201      	movs	r2, #1
 8005daa:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005dac:	4b17      	ldr	r3, [pc, #92]	; (8005e0c <HAL_FLASH_Program+0x80>)
 8005dae:	2200      	movs	r2, #0
 8005db0:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005db2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005db6:	f000 f869 	bl	8005e8c <FLASH_WaitForLastOperation>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005dbe:	7dfb      	ldrb	r3, [r7, #23]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d11a      	bne.n	8005dfa <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d105      	bne.n	8005dd6 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005dca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dce:	68b8      	ldr	r0, [r7, #8]
 8005dd0:	f000 f8be 	bl	8005f50 <FLASH_Program_DoubleWord>
 8005dd4:	e004      	b.n	8005de0 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	4619      	mov	r1, r3
 8005dda:	68b8      	ldr	r0, [r7, #8]
 8005ddc:	f000 f8de 	bl	8005f9c <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005de0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005de4:	f000 f852 	bl	8005e8c <FLASH_WaitForLastOperation>
 8005de8:	4603      	mov	r3, r0
 8005dea:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005dec:	4b08      	ldr	r3, [pc, #32]	; (8005e10 <HAL_FLASH_Program+0x84>)
 8005dee:	695a      	ldr	r2, [r3, #20]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	43db      	mvns	r3, r3
 8005df4:	4906      	ldr	r1, [pc, #24]	; (8005e10 <HAL_FLASH_Program+0x84>)
 8005df6:	4013      	ands	r3, r2
 8005df8:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005dfa:	4b04      	ldr	r3, [pc, #16]	; (8005e0c <HAL_FLASH_Program+0x80>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8005e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	200004e0 	.word	0x200004e0
 8005e10:	58004000 	.word	0x58004000

08005e14 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005e1e:	4b0b      	ldr	r3, [pc, #44]	; (8005e4c <HAL_FLASH_Unlock+0x38>)
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	da0b      	bge.n	8005e3e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005e26:	4b09      	ldr	r3, [pc, #36]	; (8005e4c <HAL_FLASH_Unlock+0x38>)
 8005e28:	4a09      	ldr	r2, [pc, #36]	; (8005e50 <HAL_FLASH_Unlock+0x3c>)
 8005e2a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005e2c:	4b07      	ldr	r3, [pc, #28]	; (8005e4c <HAL_FLASH_Unlock+0x38>)
 8005e2e:	4a09      	ldr	r2, [pc, #36]	; (8005e54 <HAL_FLASH_Unlock+0x40>)
 8005e30:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005e32:	4b06      	ldr	r3, [pc, #24]	; (8005e4c <HAL_FLASH_Unlock+0x38>)
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	da01      	bge.n	8005e3e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005e3e:	79fb      	ldrb	r3, [r7, #7]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bc80      	pop	{r7}
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	58004000 	.word	0x58004000
 8005e50:	45670123 	.word	0x45670123
 8005e54:	cdef89ab 	.word	0xcdef89ab

08005e58 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005e62:	4b09      	ldr	r3, [pc, #36]	; (8005e88 <HAL_FLASH_Lock+0x30>)
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	4a08      	ldr	r2, [pc, #32]	; (8005e88 <HAL_FLASH_Lock+0x30>)
 8005e68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e6c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8005e6e:	4b06      	ldr	r3, [pc, #24]	; (8005e88 <HAL_FLASH_Lock+0x30>)
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	db01      	blt.n	8005e7a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005e7a:	79fb      	ldrb	r3, [r7, #7]
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bc80      	pop	{r7}
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	58004000 	.word	0x58004000

08005e8c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8005e94:	f7fc fc9e 	bl	80027d4 <HAL_GetTick>
 8005e98:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005e9a:	e009      	b.n	8005eb0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005e9c:	f7fc fc9a 	bl	80027d4 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d801      	bhi.n	8005eb0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e047      	b.n	8005f40 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005eb0:	4b25      	ldr	r3, [pc, #148]	; (8005f48 <FLASH_WaitForLastOperation+0xbc>)
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ebc:	d0ee      	beq.n	8005e9c <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8005ebe:	4b22      	ldr	r3, [pc, #136]	; (8005f48 <FLASH_WaitForLastOperation+0xbc>)
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005ece:	4b1e      	ldr	r3, [pc, #120]	; (8005f48 <FLASH_WaitForLastOperation+0xbc>)
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8005eda:	4013      	ands	r3, r2
 8005edc:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d007      	beq.n	8005ef8 <FLASH_WaitForLastOperation+0x6c>
 8005ee8:	4b17      	ldr	r3, [pc, #92]	; (8005f48 <FLASH_WaitForLastOperation+0xbc>)
 8005eea:	699a      	ldr	r2, [r3, #24]
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005ef2:	4915      	ldr	r1, [pc, #84]	; (8005f48 <FLASH_WaitForLastOperation+0xbc>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	618b      	str	r3, [r1, #24]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d004      	beq.n	8005f0c <FLASH_WaitForLastOperation+0x80>
 8005f02:	4a11      	ldr	r2, [pc, #68]	; (8005f48 <FLASH_WaitForLastOperation+0xbc>)
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005f0a:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00e      	beq.n	8005f30 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8005f12:	4a0e      	ldr	r2, [pc, #56]	; (8005f4c <FLASH_WaitForLastOperation+0xc0>)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e011      	b.n	8005f40 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005f1c:	f7fc fc5a 	bl	80027d4 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d801      	bhi.n	8005f30 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e007      	b.n	8005f40 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8005f30:	4b05      	ldr	r3, [pc, #20]	; (8005f48 <FLASH_WaitForLastOperation+0xbc>)
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f3c:	d0ee      	beq.n	8005f1c <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	58004000 	.word	0x58004000
 8005f4c:	200004e0 	.word	0x200004e0

08005f50 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005f5c:	4b0e      	ldr	r3, [pc, #56]	; (8005f98 <FLASH_Program_DoubleWord+0x48>)
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	4a0d      	ldr	r2, [pc, #52]	; (8005f98 <FLASH_Program_DoubleWord+0x48>)
 8005f62:	f043 0301 	orr.w	r3, r3, #1
 8005f66:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005f6e:	f3bf 8f6f 	isb	sy
}
 8005f72:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005f74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f78:	f04f 0200 	mov.w	r2, #0
 8005f7c:	f04f 0300 	mov.w	r3, #0
 8005f80:	000a      	movs	r2, r1
 8005f82:	2300      	movs	r3, #0
 8005f84:	68f9      	ldr	r1, [r7, #12]
 8005f86:	3104      	adds	r1, #4
 8005f88:	4613      	mov	r3, r2
 8005f8a:	600b      	str	r3, [r1, #0]
}
 8005f8c:	bf00      	nop
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bc80      	pop	{r7}
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	58004000 	.word	0x58004000

08005f9c <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b089      	sub	sp, #36	; 0x24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005fa6:	2340      	movs	r3, #64	; 0x40
 8005fa8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005fb2:	4b18      	ldr	r3, [pc, #96]	; (8006014 <FLASH_Program_Fast+0x78>)
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	4a17      	ldr	r2, [pc, #92]	; (8006014 <FLASH_Program_Fast+0x78>)
 8005fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fbc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fbe:	f3ef 8310 	mrs	r3, PRIMASK
 8005fc2:	60fb      	str	r3, [r7, #12]
  return(result);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8005fc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005fc8:	b672      	cpsid	i
}
 8005fca:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	3304      	adds	r3, #4
 8005fd8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	3304      	adds	r3, #4
 8005fde:	617b      	str	r3, [r7, #20]
    row_index--;
 8005fe0:	7ffb      	ldrb	r3, [r7, #31]
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8005fe6:	7ffb      	ldrb	r3, [r7, #31]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1ef      	bne.n	8005fcc <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8005fec:	bf00      	nop
 8005fee:	4b09      	ldr	r3, [pc, #36]	; (8006014 <FLASH_Program_Fast+0x78>)
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ffa:	d0f8      	beq.n	8005fee <FLASH_Program_Fast+0x52>
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f383 8810 	msr	PRIMASK, r3
}
 8006006:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006008:	bf00      	nop
 800600a:	3724      	adds	r7, #36	; 0x24
 800600c:	46bd      	mov	sp, r7
 800600e:	bc80      	pop	{r7}
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	58004000 	.word	0x58004000

08006018 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006022:	4b28      	ldr	r3, [pc, #160]	; (80060c4 <HAL_FLASHEx_Erase+0xac>)
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d101      	bne.n	800602e <HAL_FLASHEx_Erase+0x16>
 800602a:	2302      	movs	r3, #2
 800602c:	e046      	b.n	80060bc <HAL_FLASHEx_Erase+0xa4>
 800602e:	4b25      	ldr	r3, [pc, #148]	; (80060c4 <HAL_FLASHEx_Erase+0xac>)
 8006030:	2201      	movs	r2, #1
 8006032:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006034:	4b23      	ldr	r3, [pc, #140]	; (80060c4 <HAL_FLASHEx_Erase+0xac>)
 8006036:	2200      	movs	r2, #0
 8006038:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800603a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800603e:	f7ff ff25 	bl	8005e8c <FLASH_WaitForLastOperation>
 8006042:	4603      	mov	r3, r0
 8006044:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006046:	7bfb      	ldrb	r3, [r7, #15]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d133      	bne.n	80060b4 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b04      	cmp	r3, #4
 8006052:	d108      	bne.n	8006066 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8006054:	f000 f838 	bl	80060c8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006058:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800605c:	f7ff ff16 	bl	8005e8c <FLASH_WaitForLastOperation>
 8006060:	4603      	mov	r3, r0
 8006062:	73fb      	strb	r3, [r7, #15]
 8006064:	e024      	b.n	80060b0 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800606c:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	60bb      	str	r3, [r7, #8]
 8006074:	e012      	b.n	800609c <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8006076:	68b8      	ldr	r0, [r7, #8]
 8006078:	f000 f836 	bl	80060e8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800607c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006080:	f7ff ff04 	bl	8005e8c <FLASH_WaitForLastOperation>
 8006084:	4603      	mov	r3, r0
 8006086:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8006088:	7bfb      	ldrb	r3, [r7, #15]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	601a      	str	r2, [r3, #0]
          break;
 8006094:	e00a      	b.n	80060ac <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	3301      	adds	r3, #1
 800609a:	60bb      	str	r3, [r7, #8]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	4413      	add	r3, r2
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d3e4      	bcc.n	8006076 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 80060ac:	f000 f878 	bl	80061a0 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80060b0:	f000 f832 	bl	8006118 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80060b4:	4b03      	ldr	r3, [pc, #12]	; (80060c4 <HAL_FLASHEx_Erase+0xac>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	701a      	strb	r2, [r3, #0]

  return status;
 80060ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	200004e0 	.word	0x200004e0

080060c8 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80060c8:	b480      	push	{r7}
 80060ca:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80060cc:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <FLASH_MassErase+0x1c>)
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	4a04      	ldr	r2, [pc, #16]	; (80060e4 <FLASH_MassErase+0x1c>)
 80060d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060d6:	f043 0304 	orr.w	r3, r3, #4
 80060da:	6153      	str	r3, [r2, #20]
#endif
}
 80060dc:	bf00      	nop
 80060de:	46bd      	mov	sp, r7
 80060e0:	bc80      	pop	{r7}
 80060e2:	4770      	bx	lr
 80060e4:	58004000 	.word	0x58004000

080060e8 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80060f0:	4b08      	ldr	r3, [pc, #32]	; (8006114 <FLASH_PageErase+0x2c>)
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	4313      	orrs	r3, r2
 80060fe:	4a05      	ldr	r2, [pc, #20]	; (8006114 <FLASH_PageErase+0x2c>)
 8006100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006104:	f043 0302 	orr.w	r3, r3, #2
 8006108:	6153      	str	r3, [r2, #20]
#endif
}
 800610a:	bf00      	nop
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	bc80      	pop	{r7}
 8006112:	4770      	bx	lr
 8006114:	58004000 	.word	0x58004000

08006118 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006118:	b480      	push	{r7}
 800611a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 800611c:	4b1f      	ldr	r3, [pc, #124]	; (800619c <FLASH_FlushCaches+0x84>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006124:	2b01      	cmp	r3, #1
 8006126:	d117      	bne.n	8006158 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006128:	4b1c      	ldr	r3, [pc, #112]	; (800619c <FLASH_FlushCaches+0x84>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a1b      	ldr	r2, [pc, #108]	; (800619c <FLASH_FlushCaches+0x84>)
 800612e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006132:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006134:	4b19      	ldr	r3, [pc, #100]	; (800619c <FLASH_FlushCaches+0x84>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a18      	ldr	r2, [pc, #96]	; (800619c <FLASH_FlushCaches+0x84>)
 800613a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	4b16      	ldr	r3, [pc, #88]	; (800619c <FLASH_FlushCaches+0x84>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a15      	ldr	r2, [pc, #84]	; (800619c <FLASH_FlushCaches+0x84>)
 8006146:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800614a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800614c:	4b13      	ldr	r3, [pc, #76]	; (800619c <FLASH_FlushCaches+0x84>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a12      	ldr	r2, [pc, #72]	; (800619c <FLASH_FlushCaches+0x84>)
 8006152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006156:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8006158:	4b10      	ldr	r3, [pc, #64]	; (800619c <FLASH_FlushCaches+0x84>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006160:	2b01      	cmp	r3, #1
 8006162:	d117      	bne.n	8006194 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006164:	4b0d      	ldr	r3, [pc, #52]	; (800619c <FLASH_FlushCaches+0x84>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a0c      	ldr	r2, [pc, #48]	; (800619c <FLASH_FlushCaches+0x84>)
 800616a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800616e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006170:	4b0a      	ldr	r3, [pc, #40]	; (800619c <FLASH_FlushCaches+0x84>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a09      	ldr	r2, [pc, #36]	; (800619c <FLASH_FlushCaches+0x84>)
 8006176:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800617a:	6013      	str	r3, [r2, #0]
 800617c:	4b07      	ldr	r3, [pc, #28]	; (800619c <FLASH_FlushCaches+0x84>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a06      	ldr	r2, [pc, #24]	; (800619c <FLASH_FlushCaches+0x84>)
 8006182:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006186:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006188:	4b04      	ldr	r3, [pc, #16]	; (800619c <FLASH_FlushCaches+0x84>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a03      	ldr	r2, [pc, #12]	; (800619c <FLASH_FlushCaches+0x84>)
 800618e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006192:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8006194:	bf00      	nop
 8006196:	46bd      	mov	sp, r7
 8006198:	bc80      	pop	{r7}
 800619a:	4770      	bx	lr
 800619c:	58004000 	.word	0x58004000

080061a0 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 80061a0:	b480      	push	{r7}
 80061a2:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80061a4:	4b05      	ldr	r3, [pc, #20]	; (80061bc <FLASH_AcknowledgePageErase+0x1c>)
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	4a04      	ldr	r2, [pc, #16]	; (80061bc <FLASH_AcknowledgePageErase+0x1c>)
 80061aa:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80061ae:	f023 0302 	bic.w	r3, r3, #2
 80061b2:	6153      	str	r3, [r2, #20]
#endif
}
 80061b4:	bf00      	nop
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bc80      	pop	{r7}
 80061ba:	4770      	bx	lr
 80061bc:	58004000 	.word	0x58004000

080061c0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80061ca:	2300      	movs	r3, #0
 80061cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061ce:	e140      	b.n	8006452 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	2101      	movs	r1, #1
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	fa01 f303 	lsl.w	r3, r1, r3
 80061dc:	4013      	ands	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f000 8132 	beq.w	800644c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f003 0303 	and.w	r3, r3, #3
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d005      	beq.n	8006200 <HAL_GPIO_Init+0x40>
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f003 0303 	and.w	r3, r3, #3
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d130      	bne.n	8006262 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	005b      	lsls	r3, r3, #1
 800620a:	2203      	movs	r2, #3
 800620c:	fa02 f303 	lsl.w	r3, r2, r3
 8006210:	43db      	mvns	r3, r3
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	4013      	ands	r3, r2
 8006216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	68da      	ldr	r2, [r3, #12]
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	fa02 f303 	lsl.w	r3, r2, r3
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	4313      	orrs	r3, r2
 8006228:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006236:	2201      	movs	r2, #1
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	fa02 f303 	lsl.w	r3, r2, r3
 800623e:	43db      	mvns	r3, r3
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	4013      	ands	r3, r2
 8006244:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	091b      	lsrs	r3, r3, #4
 800624c:	f003 0201 	and.w	r2, r3, #1
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	fa02 f303 	lsl.w	r3, r2, r3
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	4313      	orrs	r3, r2
 800625a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f003 0303 	and.w	r3, r3, #3
 800626a:	2b03      	cmp	r3, #3
 800626c:	d017      	beq.n	800629e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	2203      	movs	r2, #3
 800627a:	fa02 f303 	lsl.w	r3, r2, r3
 800627e:	43db      	mvns	r3, r3
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	4013      	ands	r3, r2
 8006284:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	689a      	ldr	r2, [r3, #8]
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	005b      	lsls	r3, r3, #1
 800628e:	fa02 f303 	lsl.w	r3, r2, r3
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	4313      	orrs	r3, r2
 8006296:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f003 0303 	and.w	r3, r3, #3
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d123      	bne.n	80062f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	08da      	lsrs	r2, r3, #3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	3208      	adds	r2, #8
 80062b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f003 0307 	and.w	r3, r3, #7
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	220f      	movs	r2, #15
 80062c2:	fa02 f303 	lsl.w	r3, r2, r3
 80062c6:	43db      	mvns	r3, r3
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4013      	ands	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	691a      	ldr	r2, [r3, #16]
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f003 0307 	and.w	r3, r3, #7
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	fa02 f303 	lsl.w	r3, r2, r3
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	08da      	lsrs	r2, r3, #3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3208      	adds	r2, #8
 80062ec:	6939      	ldr	r1, [r7, #16]
 80062ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	005b      	lsls	r3, r3, #1
 80062fc:	2203      	movs	r2, #3
 80062fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006302:	43db      	mvns	r3, r3
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	4013      	ands	r3, r2
 8006308:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f003 0203 	and.w	r2, r3, #3
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	fa02 f303 	lsl.w	r3, r2, r3
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	4313      	orrs	r3, r2
 800631e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 808c 	beq.w	800644c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8006334:	4a4e      	ldr	r2, [pc, #312]	; (8006470 <HAL_GPIO_Init+0x2b0>)
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	089b      	lsrs	r3, r3, #2
 800633a:	3302      	adds	r3, #2
 800633c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006340:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f003 0303 	and.w	r3, r3, #3
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	2207      	movs	r2, #7
 800634c:	fa02 f303 	lsl.w	r3, r2, r3
 8006350:	43db      	mvns	r3, r3
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	4013      	ands	r3, r2
 8006356:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800635e:	d00d      	beq.n	800637c <HAL_GPIO_Init+0x1bc>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a44      	ldr	r2, [pc, #272]	; (8006474 <HAL_GPIO_Init+0x2b4>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d007      	beq.n	8006378 <HAL_GPIO_Init+0x1b8>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a43      	ldr	r2, [pc, #268]	; (8006478 <HAL_GPIO_Init+0x2b8>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d101      	bne.n	8006374 <HAL_GPIO_Init+0x1b4>
 8006370:	2302      	movs	r3, #2
 8006372:	e004      	b.n	800637e <HAL_GPIO_Init+0x1be>
 8006374:	2307      	movs	r3, #7
 8006376:	e002      	b.n	800637e <HAL_GPIO_Init+0x1be>
 8006378:	2301      	movs	r3, #1
 800637a:	e000      	b.n	800637e <HAL_GPIO_Init+0x1be>
 800637c:	2300      	movs	r3, #0
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	f002 0203 	and.w	r2, r2, #3
 8006384:	0092      	lsls	r2, r2, #2
 8006386:	4093      	lsls	r3, r2
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	4313      	orrs	r3, r2
 800638c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800638e:	4938      	ldr	r1, [pc, #224]	; (8006470 <HAL_GPIO_Init+0x2b0>)
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	089b      	lsrs	r3, r3, #2
 8006394:	3302      	adds	r3, #2
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800639c:	4b37      	ldr	r3, [pc, #220]	; (800647c <HAL_GPIO_Init+0x2bc>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	43db      	mvns	r3, r3
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	4013      	ands	r3, r2
 80063aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d003      	beq.n	80063c0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	4313      	orrs	r3, r2
 80063be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80063c0:	4a2e      	ldr	r2, [pc, #184]	; (800647c <HAL_GPIO_Init+0x2bc>)
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80063c6:	4b2d      	ldr	r3, [pc, #180]	; (800647c <HAL_GPIO_Init+0x2bc>)
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	43db      	mvns	r3, r3
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	4013      	ands	r3, r2
 80063d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80063ea:	4a24      	ldr	r2, [pc, #144]	; (800647c <HAL_GPIO_Init+0x2bc>)
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80063f0:	4b22      	ldr	r3, [pc, #136]	; (800647c <HAL_GPIO_Init+0x2bc>)
 80063f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063f6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	43db      	mvns	r3, r3
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	4013      	ands	r3, r2
 8006400:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4313      	orrs	r3, r2
 8006414:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8006416:	4a19      	ldr	r2, [pc, #100]	; (800647c <HAL_GPIO_Init+0x2bc>)
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800641e:	4b17      	ldr	r3, [pc, #92]	; (800647c <HAL_GPIO_Init+0x2bc>)
 8006420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006424:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	43db      	mvns	r3, r3
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	4013      	ands	r3, r2
 800642e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	4313      	orrs	r3, r2
 8006442:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8006444:	4a0d      	ldr	r2, [pc, #52]	; (800647c <HAL_GPIO_Init+0x2bc>)
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	3301      	adds	r3, #1
 8006450:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	fa22 f303 	lsr.w	r3, r2, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	f47f aeb7 	bne.w	80061d0 <HAL_GPIO_Init+0x10>
  }
}
 8006462:	bf00      	nop
 8006464:	bf00      	nop
 8006466:	371c      	adds	r7, #28
 8006468:	46bd      	mov	sp, r7
 800646a:	bc80      	pop	{r7}
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	40010000 	.word	0x40010000
 8006474:	48000400 	.word	0x48000400
 8006478:	48000800 	.word	0x48000800
 800647c:	58000800 	.word	0x58000800

08006480 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006480:	b480      	push	{r7}
 8006482:	b087      	sub	sp, #28
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800648a:	2300      	movs	r3, #0
 800648c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800648e:	e0af      	b.n	80065f0 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006490:	2201      	movs	r2, #1
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	fa02 f303 	lsl.w	r3, r2, r3
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	4013      	ands	r3, r2
 800649c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 80a2 	beq.w	80065ea <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80064a6:	4a59      	ldr	r2, [pc, #356]	; (800660c <HAL_GPIO_DeInit+0x18c>)
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	089b      	lsrs	r3, r3, #2
 80064ac:	3302      	adds	r3, #2
 80064ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064b2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f003 0303 	and.w	r3, r3, #3
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	2207      	movs	r2, #7
 80064be:	fa02 f303 	lsl.w	r3, r2, r3
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	4013      	ands	r3, r2
 80064c6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80064ce:	d00d      	beq.n	80064ec <HAL_GPIO_DeInit+0x6c>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a4f      	ldr	r2, [pc, #316]	; (8006610 <HAL_GPIO_DeInit+0x190>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d007      	beq.n	80064e8 <HAL_GPIO_DeInit+0x68>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a4e      	ldr	r2, [pc, #312]	; (8006614 <HAL_GPIO_DeInit+0x194>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d101      	bne.n	80064e4 <HAL_GPIO_DeInit+0x64>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e004      	b.n	80064ee <HAL_GPIO_DeInit+0x6e>
 80064e4:	2307      	movs	r3, #7
 80064e6:	e002      	b.n	80064ee <HAL_GPIO_DeInit+0x6e>
 80064e8:	2301      	movs	r3, #1
 80064ea:	e000      	b.n	80064ee <HAL_GPIO_DeInit+0x6e>
 80064ec:	2300      	movs	r3, #0
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	f002 0203 	and.w	r2, r2, #3
 80064f4:	0092      	lsls	r2, r2, #2
 80064f6:	4093      	lsls	r3, r2
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d136      	bne.n	800656c <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80064fe:	4b46      	ldr	r3, [pc, #280]	; (8006618 <HAL_GPIO_DeInit+0x198>)
 8006500:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	43db      	mvns	r3, r3
 8006508:	4943      	ldr	r1, [pc, #268]	; (8006618 <HAL_GPIO_DeInit+0x198>)
 800650a:	4013      	ands	r3, r2
 800650c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8006510:	4b41      	ldr	r3, [pc, #260]	; (8006618 <HAL_GPIO_DeInit+0x198>)
 8006512:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	43db      	mvns	r3, r3
 800651a:	493f      	ldr	r1, [pc, #252]	; (8006618 <HAL_GPIO_DeInit+0x198>)
 800651c:	4013      	ands	r3, r2
 800651e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8006522:	4b3d      	ldr	r3, [pc, #244]	; (8006618 <HAL_GPIO_DeInit+0x198>)
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	43db      	mvns	r3, r3
 800652a:	493b      	ldr	r1, [pc, #236]	; (8006618 <HAL_GPIO_DeInit+0x198>)
 800652c:	4013      	ands	r3, r2
 800652e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8006530:	4b39      	ldr	r3, [pc, #228]	; (8006618 <HAL_GPIO_DeInit+0x198>)
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	43db      	mvns	r3, r3
 8006538:	4937      	ldr	r1, [pc, #220]	; (8006618 <HAL_GPIO_DeInit+0x198>)
 800653a:	4013      	ands	r3, r2
 800653c:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f003 0303 	and.w	r3, r3, #3
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	2207      	movs	r2, #7
 8006548:	fa02 f303 	lsl.w	r3, r2, r3
 800654c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800654e:	4a2f      	ldr	r2, [pc, #188]	; (800660c <HAL_GPIO_DeInit+0x18c>)
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	089b      	lsrs	r3, r3, #2
 8006554:	3302      	adds	r3, #2
 8006556:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	43da      	mvns	r2, r3
 800655e:	482b      	ldr	r0, [pc, #172]	; (800660c <HAL_GPIO_DeInit+0x18c>)
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	089b      	lsrs	r3, r3, #2
 8006564:	400a      	ands	r2, r1
 8006566:	3302      	adds	r3, #2
 8006568:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	005b      	lsls	r3, r3, #1
 8006574:	2103      	movs	r1, #3
 8006576:	fa01 f303 	lsl.w	r3, r1, r3
 800657a:	431a      	orrs	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	08da      	lsrs	r2, r3, #3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	3208      	adds	r2, #8
 8006588:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f003 0307 	and.w	r3, r3, #7
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	220f      	movs	r2, #15
 8006596:	fa02 f303 	lsl.w	r3, r2, r3
 800659a:	43db      	mvns	r3, r3
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	08d2      	lsrs	r2, r2, #3
 80065a0:	4019      	ands	r1, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	3208      	adds	r2, #8
 80065a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	689a      	ldr	r2, [r3, #8]
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	005b      	lsls	r3, r3, #1
 80065b2:	2103      	movs	r1, #3
 80065b4:	fa01 f303 	lsl.w	r3, r1, r3
 80065b8:	43db      	mvns	r3, r3
 80065ba:	401a      	ands	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	2101      	movs	r1, #1
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	fa01 f303 	lsl.w	r3, r1, r3
 80065cc:	43db      	mvns	r3, r3
 80065ce:	401a      	ands	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68da      	ldr	r2, [r3, #12]
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	005b      	lsls	r3, r3, #1
 80065dc:	2103      	movs	r1, #3
 80065de:	fa01 f303 	lsl.w	r3, r1, r3
 80065e2:	43db      	mvns	r3, r3
 80065e4:	401a      	ands	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	60da      	str	r2, [r3, #12]
    }

    position++;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	3301      	adds	r3, #1
 80065ee:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	fa22 f303 	lsr.w	r3, r2, r3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f47f af49 	bne.w	8006490 <HAL_GPIO_DeInit+0x10>
  }
}
 80065fe:	bf00      	nop
 8006600:	bf00      	nop
 8006602:	371c      	adds	r7, #28
 8006604:	46bd      	mov	sp, r7
 8006606:	bc80      	pop	{r7}
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	40010000 	.word	0x40010000
 8006610:	48000400 	.word	0x48000400
 8006614:	48000800 	.word	0x48000800
 8006618:	58000800 	.word	0x58000800

0800661c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	460b      	mov	r3, r1
 8006626:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691a      	ldr	r2, [r3, #16]
 800662c:	887b      	ldrh	r3, [r7, #2]
 800662e:	4013      	ands	r3, r2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d002      	beq.n	800663a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006634:	2301      	movs	r3, #1
 8006636:	73fb      	strb	r3, [r7, #15]
 8006638:	e001      	b.n	800663e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800663a:	2300      	movs	r3, #0
 800663c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800663e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	bc80      	pop	{r7}
 8006648:	4770      	bx	lr

0800664a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800664a:	b480      	push	{r7}
 800664c:	b083      	sub	sp, #12
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	460b      	mov	r3, r1
 8006654:	807b      	strh	r3, [r7, #2]
 8006656:	4613      	mov	r3, r2
 8006658:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800665a:	787b      	ldrb	r3, [r7, #1]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d003      	beq.n	8006668 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006660:	887a      	ldrh	r2, [r7, #2]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006666:	e002      	b.n	800666e <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006668:	887a      	ldrh	r2, [r7, #2]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800666e:	bf00      	nop
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	bc80      	pop	{r7}
 8006676:	4770      	bx	lr

08006678 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d101      	bne.n	800668a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e081      	b.n	800678e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d106      	bne.n	80066a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7fb fb58 	bl	8001d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2224      	movs	r2, #36	; 0x24
 80066a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 0201 	bic.w	r2, r2, #1
 80066ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685a      	ldr	r2, [r3, #4]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80066c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689a      	ldr	r2, [r3, #8]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d107      	bne.n	80066f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	689a      	ldr	r2, [r3, #8]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066ee:	609a      	str	r2, [r3, #8]
 80066f0:	e006      	b.n	8006700 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	689a      	ldr	r2, [r3, #8]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80066fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	2b02      	cmp	r3, #2
 8006706:	d104      	bne.n	8006712 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006710:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	6812      	ldr	r2, [r2, #0]
 800671c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006724:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68da      	ldr	r2, [r3, #12]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006734:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	691a      	ldr	r2, [r3, #16]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	69d9      	ldr	r1, [r3, #28]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a1a      	ldr	r2, [r3, #32]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f042 0201 	orr.w	r2, r2, #1
 800676e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2220      	movs	r2, #32
 800677a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
	...

08006798 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b088      	sub	sp, #32
 800679c:	af02      	add	r7, sp, #8
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	4608      	mov	r0, r1
 80067a2:	4611      	mov	r1, r2
 80067a4:	461a      	mov	r2, r3
 80067a6:	4603      	mov	r3, r0
 80067a8:	817b      	strh	r3, [r7, #10]
 80067aa:	460b      	mov	r3, r1
 80067ac:	813b      	strh	r3, [r7, #8]
 80067ae:	4613      	mov	r3, r2
 80067b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b20      	cmp	r3, #32
 80067bc:	f040 80f9 	bne.w	80069b2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d002      	beq.n	80067cc <HAL_I2C_Mem_Write+0x34>
 80067c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d105      	bne.n	80067d8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e0ed      	b.n	80069b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d101      	bne.n	80067e6 <HAL_I2C_Mem_Write+0x4e>
 80067e2:	2302      	movs	r3, #2
 80067e4:	e0e6      	b.n	80069b4 <HAL_I2C_Mem_Write+0x21c>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80067ee:	f7fb fff1 	bl	80027d4 <HAL_GetTick>
 80067f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	2319      	movs	r3, #25
 80067fa:	2201      	movs	r2, #1
 80067fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f000 fac2 	bl	8006d8a <I2C_WaitOnFlagUntilTimeout>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d001      	beq.n	8006810 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e0d1      	b.n	80069b4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2221      	movs	r2, #33	; 0x21
 8006814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2240      	movs	r2, #64	; 0x40
 800681c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6a3a      	ldr	r2, [r7, #32]
 800682a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006830:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006838:	88f8      	ldrh	r0, [r7, #6]
 800683a:	893a      	ldrh	r2, [r7, #8]
 800683c:	8979      	ldrh	r1, [r7, #10]
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	9301      	str	r3, [sp, #4]
 8006842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	4603      	mov	r3, r0
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 f9d3 	bl	8006bf4 <I2C_RequestMemoryWrite>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d005      	beq.n	8006860 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e0a9      	b.n	80069b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006864:	b29b      	uxth	r3, r3
 8006866:	2bff      	cmp	r3, #255	; 0xff
 8006868:	d90e      	bls.n	8006888 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	22ff      	movs	r2, #255	; 0xff
 800686e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006874:	b2da      	uxtb	r2, r3
 8006876:	8979      	ldrh	r1, [r7, #10]
 8006878:	2300      	movs	r3, #0
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 fc1f 	bl	80070c4 <I2C_TransferConfig>
 8006886:	e00f      	b.n	80068a8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800688c:	b29a      	uxth	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006896:	b2da      	uxtb	r2, r3
 8006898:	8979      	ldrh	r1, [r7, #10]
 800689a:	2300      	movs	r3, #0
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f000 fc0e 	bl	80070c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 faac 	bl	8006e0a <I2C_WaitOnTXISFlagUntilTimeout>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e07b      	b.n	80069b4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	781a      	ldrb	r2, [r3, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068cc:	1c5a      	adds	r2, r3, #1
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	3b01      	subs	r3, #1
 80068da:	b29a      	uxth	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068e4:	3b01      	subs	r3, #1
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d034      	beq.n	8006960 <HAL_I2C_Mem_Write+0x1c8>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d130      	bne.n	8006960 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006904:	2200      	movs	r2, #0
 8006906:	2180      	movs	r1, #128	; 0x80
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f000 fa3e 	bl	8006d8a <I2C_WaitOnFlagUntilTimeout>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e04d      	b.n	80069b4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800691c:	b29b      	uxth	r3, r3
 800691e:	2bff      	cmp	r3, #255	; 0xff
 8006920:	d90e      	bls.n	8006940 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	22ff      	movs	r2, #255	; 0xff
 8006926:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800692c:	b2da      	uxtb	r2, r3
 800692e:	8979      	ldrh	r1, [r7, #10]
 8006930:	2300      	movs	r3, #0
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f000 fbc3 	bl	80070c4 <I2C_TransferConfig>
 800693e:	e00f      	b.n	8006960 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006944:	b29a      	uxth	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800694e:	b2da      	uxtb	r2, r3
 8006950:	8979      	ldrh	r1, [r7, #10]
 8006952:	2300      	movs	r3, #0
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f000 fbb2 	bl	80070c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006964:	b29b      	uxth	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d19e      	bne.n	80068a8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 fa8b 	bl	8006e8a <I2C_WaitOnSTOPFlagUntilTimeout>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e01a      	b.n	80069b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2220      	movs	r2, #32
 8006984:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6859      	ldr	r1, [r3, #4]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	4b0a      	ldr	r3, [pc, #40]	; (80069bc <HAL_I2C_Mem_Write+0x224>)
 8006992:	400b      	ands	r3, r1
 8006994:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2220      	movs	r2, #32
 800699a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80069ae:	2300      	movs	r3, #0
 80069b0:	e000      	b.n	80069b4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80069b2:	2302      	movs	r3, #2
  }
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3718      	adds	r7, #24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	fe00e800 	.word	0xfe00e800

080069c0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b088      	sub	sp, #32
 80069c4:	af02      	add	r7, sp, #8
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	4608      	mov	r0, r1
 80069ca:	4611      	mov	r1, r2
 80069cc:	461a      	mov	r2, r3
 80069ce:	4603      	mov	r3, r0
 80069d0:	817b      	strh	r3, [r7, #10]
 80069d2:	460b      	mov	r3, r1
 80069d4:	813b      	strh	r3, [r7, #8]
 80069d6:	4613      	mov	r3, r2
 80069d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b20      	cmp	r3, #32
 80069e4:	f040 80fd 	bne.w	8006be2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80069e8:	6a3b      	ldr	r3, [r7, #32]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d002      	beq.n	80069f4 <HAL_I2C_Mem_Read+0x34>
 80069ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d105      	bne.n	8006a00 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e0f1      	b.n	8006be4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d101      	bne.n	8006a0e <HAL_I2C_Mem_Read+0x4e>
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	e0ea      	b.n	8006be4 <HAL_I2C_Mem_Read+0x224>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006a16:	f7fb fedd 	bl	80027d4 <HAL_GetTick>
 8006a1a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	2319      	movs	r3, #25
 8006a22:	2201      	movs	r2, #1
 8006a24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f000 f9ae 	bl	8006d8a <I2C_WaitOnFlagUntilTimeout>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d001      	beq.n	8006a38 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e0d5      	b.n	8006be4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2222      	movs	r2, #34	; 0x22
 8006a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2240      	movs	r2, #64	; 0x40
 8006a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6a3a      	ldr	r2, [r7, #32]
 8006a52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a60:	88f8      	ldrh	r0, [r7, #6]
 8006a62:	893a      	ldrh	r2, [r7, #8]
 8006a64:	8979      	ldrh	r1, [r7, #10]
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	9301      	str	r3, [sp, #4]
 8006a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	4603      	mov	r3, r0
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f000 f913 	bl	8006c9c <I2C_RequestMemoryRead>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d005      	beq.n	8006a88 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e0ad      	b.n	8006be4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	2bff      	cmp	r3, #255	; 0xff
 8006a90:	d90e      	bls.n	8006ab0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	22ff      	movs	r2, #255	; 0xff
 8006a96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	8979      	ldrh	r1, [r7, #10]
 8006aa0:	4b52      	ldr	r3, [pc, #328]	; (8006bec <HAL_I2C_Mem_Read+0x22c>)
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 fb0b 	bl	80070c4 <I2C_TransferConfig>
 8006aae:	e00f      	b.n	8006ad0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	8979      	ldrh	r1, [r7, #10]
 8006ac2:	4b4a      	ldr	r3, [pc, #296]	; (8006bec <HAL_I2C_Mem_Read+0x22c>)
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 fafa 	bl	80070c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	2104      	movs	r1, #4
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f000 f955 	bl	8006d8a <I2C_WaitOnFlagUntilTimeout>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e07c      	b.n	8006be4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af4:	b2d2      	uxtb	r2, r2
 8006af6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afc:	1c5a      	adds	r2, r3, #1
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b06:	3b01      	subs	r3, #1
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	3b01      	subs	r3, #1
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d034      	beq.n	8006b90 <HAL_I2C_Mem_Read+0x1d0>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d130      	bne.n	8006b90 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b34:	2200      	movs	r2, #0
 8006b36:	2180      	movs	r1, #128	; 0x80
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 f926 	bl	8006d8a <I2C_WaitOnFlagUntilTimeout>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e04d      	b.n	8006be4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	2bff      	cmp	r3, #255	; 0xff
 8006b50:	d90e      	bls.n	8006b70 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	22ff      	movs	r2, #255	; 0xff
 8006b56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	8979      	ldrh	r1, [r7, #10]
 8006b60:	2300      	movs	r3, #0
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f000 faab 	bl	80070c4 <I2C_TransferConfig>
 8006b6e:	e00f      	b.n	8006b90 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	8979      	ldrh	r1, [r7, #10]
 8006b82:	2300      	movs	r3, #0
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f000 fa9a 	bl	80070c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d19a      	bne.n	8006ad0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f000 f973 	bl	8006e8a <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e01a      	b.n	8006be4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6859      	ldr	r1, [r3, #4]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	4b0b      	ldr	r3, [pc, #44]	; (8006bf0 <HAL_I2C_Mem_Read+0x230>)
 8006bc2:	400b      	ands	r3, r1
 8006bc4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	e000      	b.n	8006be4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006be2:	2302      	movs	r3, #2
  }
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3718      	adds	r7, #24
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	80002400 	.word	0x80002400
 8006bf0:	fe00e800 	.word	0xfe00e800

08006bf4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af02      	add	r7, sp, #8
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	4608      	mov	r0, r1
 8006bfe:	4611      	mov	r1, r2
 8006c00:	461a      	mov	r2, r3
 8006c02:	4603      	mov	r3, r0
 8006c04:	817b      	strh	r3, [r7, #10]
 8006c06:	460b      	mov	r3, r1
 8006c08:	813b      	strh	r3, [r7, #8]
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006c0e:	88fb      	ldrh	r3, [r7, #6]
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	8979      	ldrh	r1, [r7, #10]
 8006c14:	4b20      	ldr	r3, [pc, #128]	; (8006c98 <I2C_RequestMemoryWrite+0xa4>)
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f000 fa51 	bl	80070c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c22:	69fa      	ldr	r2, [r7, #28]
 8006c24:	69b9      	ldr	r1, [r7, #24]
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f000 f8ef 	bl	8006e0a <I2C_WaitOnTXISFlagUntilTimeout>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e02c      	b.n	8006c90 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c36:	88fb      	ldrh	r3, [r7, #6]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d105      	bne.n	8006c48 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c3c:	893b      	ldrh	r3, [r7, #8]
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	629a      	str	r2, [r3, #40]	; 0x28
 8006c46:	e015      	b.n	8006c74 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006c48:	893b      	ldrh	r3, [r7, #8]
 8006c4a:	0a1b      	lsrs	r3, r3, #8
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c56:	69fa      	ldr	r2, [r7, #28]
 8006c58:	69b9      	ldr	r1, [r7, #24]
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f000 f8d5 	bl	8006e0a <I2C_WaitOnTXISFlagUntilTimeout>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d001      	beq.n	8006c6a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e012      	b.n	8006c90 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c6a:	893b      	ldrh	r3, [r7, #8]
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	2180      	movs	r1, #128	; 0x80
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f000 f883 	bl	8006d8a <I2C_WaitOnFlagUntilTimeout>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e000      	b.n	8006c90 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	80002000 	.word	0x80002000

08006c9c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af02      	add	r7, sp, #8
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	4608      	mov	r0, r1
 8006ca6:	4611      	mov	r1, r2
 8006ca8:	461a      	mov	r2, r3
 8006caa:	4603      	mov	r3, r0
 8006cac:	817b      	strh	r3, [r7, #10]
 8006cae:	460b      	mov	r3, r1
 8006cb0:	813b      	strh	r3, [r7, #8]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006cb6:	88fb      	ldrh	r3, [r7, #6]
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	8979      	ldrh	r1, [r7, #10]
 8006cbc:	4b20      	ldr	r3, [pc, #128]	; (8006d40 <I2C_RequestMemoryRead+0xa4>)
 8006cbe:	9300      	str	r3, [sp, #0]
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f000 f9fe 	bl	80070c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cc8:	69fa      	ldr	r2, [r7, #28]
 8006cca:	69b9      	ldr	r1, [r7, #24]
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 f89c 	bl	8006e0a <I2C_WaitOnTXISFlagUntilTimeout>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d001      	beq.n	8006cdc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e02c      	b.n	8006d36 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006cdc:	88fb      	ldrh	r3, [r7, #6]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d105      	bne.n	8006cee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ce2:	893b      	ldrh	r3, [r7, #8]
 8006ce4:	b2da      	uxtb	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	629a      	str	r2, [r3, #40]	; 0x28
 8006cec:	e015      	b.n	8006d1a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006cee:	893b      	ldrh	r3, [r7, #8]
 8006cf0:	0a1b      	lsrs	r3, r3, #8
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cfc:	69fa      	ldr	r2, [r7, #28]
 8006cfe:	69b9      	ldr	r1, [r7, #24]
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f000 f882 	bl	8006e0a <I2C_WaitOnTXISFlagUntilTimeout>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d001      	beq.n	8006d10 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e012      	b.n	8006d36 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d10:	893b      	ldrh	r3, [r7, #8]
 8006d12:	b2da      	uxtb	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	2200      	movs	r2, #0
 8006d22:	2140      	movs	r1, #64	; 0x40
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 f830 	bl	8006d8a <I2C_WaitOnFlagUntilTimeout>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e000      	b.n	8006d36 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	80002000 	.word	0x80002000

08006d44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d103      	bne.n	8006d62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d007      	beq.n	8006d80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	699a      	ldr	r2, [r3, #24]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f042 0201 	orr.w	r2, r2, #1
 8006d7e:	619a      	str	r2, [r3, #24]
  }
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bc80      	pop	{r7}
 8006d88:	4770      	bx	lr

08006d8a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b084      	sub	sp, #16
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	60f8      	str	r0, [r7, #12]
 8006d92:	60b9      	str	r1, [r7, #8]
 8006d94:	603b      	str	r3, [r7, #0]
 8006d96:	4613      	mov	r3, r2
 8006d98:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d9a:	e022      	b.n	8006de2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006da2:	d01e      	beq.n	8006de2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006da4:	f7fb fd16 	bl	80027d4 <HAL_GetTick>
 8006da8:	4602      	mov	r2, r0
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d302      	bcc.n	8006dba <I2C_WaitOnFlagUntilTimeout+0x30>
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d113      	bne.n	8006de2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dbe:	f043 0220 	orr.w	r2, r3, #32
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e00f      	b.n	8006e02 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	699a      	ldr	r2, [r3, #24]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	4013      	ands	r3, r2
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	bf0c      	ite	eq
 8006df2:	2301      	moveq	r3, #1
 8006df4:	2300      	movne	r3, #0
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	461a      	mov	r2, r3
 8006dfa:	79fb      	ldrb	r3, [r7, #7]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d0cd      	beq.n	8006d9c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b084      	sub	sp, #16
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	60f8      	str	r0, [r7, #12]
 8006e12:	60b9      	str	r1, [r7, #8]
 8006e14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e16:	e02c      	b.n	8006e72 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	68b9      	ldr	r1, [r7, #8]
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f000 f871 	bl	8006f04 <I2C_IsErrorOccurred>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d001      	beq.n	8006e2c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e02a      	b.n	8006e82 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e32:	d01e      	beq.n	8006e72 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e34:	f7fb fcce 	bl	80027d4 <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d302      	bcc.n	8006e4a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d113      	bne.n	8006e72 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e4e:	f043 0220 	orr.w	r2, r3, #32
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e007      	b.n	8006e82 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	f003 0302 	and.w	r3, r3, #2
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d1cb      	bne.n	8006e18 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b084      	sub	sp, #16
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	60f8      	str	r0, [r7, #12]
 8006e92:	60b9      	str	r1, [r7, #8]
 8006e94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e96:	e028      	b.n	8006eea <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	68b9      	ldr	r1, [r7, #8]
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 f831 	bl	8006f04 <I2C_IsErrorOccurred>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d001      	beq.n	8006eac <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e026      	b.n	8006efa <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eac:	f7fb fc92 	bl	80027d4 <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d302      	bcc.n	8006ec2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d113      	bne.n	8006eea <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec6:	f043 0220 	orr.w	r2, r3, #32
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2220      	movs	r2, #32
 8006ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e007      	b.n	8006efa <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	f003 0320 	and.w	r3, r3, #32
 8006ef4:	2b20      	cmp	r3, #32
 8006ef6:	d1cf      	bne.n	8006e98 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b08a      	sub	sp, #40	; 0x28
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f10:	2300      	movs	r3, #0
 8006f12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	f003 0310 	and.w	r3, r3, #16
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d068      	beq.n	8007002 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2210      	movs	r2, #16
 8006f36:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006f38:	e049      	b.n	8006fce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f40:	d045      	beq.n	8006fce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006f42:	f7fb fc47 	bl	80027d4 <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d302      	bcc.n	8006f58 <I2C_IsErrorOccurred+0x54>
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d13a      	bne.n	8006fce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f62:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f6a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f7a:	d121      	bne.n	8006fc0 <I2C_IsErrorOccurred+0xbc>
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f82:	d01d      	beq.n	8006fc0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006f84:	7cfb      	ldrb	r3, [r7, #19]
 8006f86:	2b20      	cmp	r3, #32
 8006f88:	d01a      	beq.n	8006fc0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	685a      	ldr	r2, [r3, #4]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f98:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006f9a:	f7fb fc1b 	bl	80027d4 <HAL_GetTick>
 8006f9e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006fa0:	e00e      	b.n	8006fc0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006fa2:	f7fb fc17 	bl	80027d4 <HAL_GetTick>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	2b19      	cmp	r3, #25
 8006fae:	d907      	bls.n	8006fc0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	f043 0320 	orr.w	r3, r3, #32
 8006fb6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006fbe:	e006      	b.n	8006fce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	f003 0320 	and.w	r3, r3, #32
 8006fca:	2b20      	cmp	r3, #32
 8006fcc:	d1e9      	bne.n	8006fa2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	f003 0320 	and.w	r3, r3, #32
 8006fd8:	2b20      	cmp	r3, #32
 8006fda:	d003      	beq.n	8006fe4 <I2C_IsErrorOccurred+0xe0>
 8006fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d0aa      	beq.n	8006f3a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d103      	bne.n	8006ff4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2220      	movs	r2, #32
 8006ff2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	f043 0304 	orr.w	r3, r3, #4
 8006ffa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00b      	beq.n	800702c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007014:	6a3b      	ldr	r3, [r7, #32]
 8007016:	f043 0301 	orr.w	r3, r3, #1
 800701a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007024:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00b      	beq.n	800704e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	f043 0308 	orr.w	r3, r3, #8
 800703c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007046:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00b      	beq.n	8007070 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	f043 0302 	orr.w	r3, r3, #2
 800705e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007068:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007074:	2b00      	cmp	r3, #0
 8007076:	d01c      	beq.n	80070b2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f7ff fe63 	bl	8006d44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	6859      	ldr	r1, [r3, #4]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	4b0d      	ldr	r3, [pc, #52]	; (80070c0 <I2C_IsErrorOccurred+0x1bc>)
 800708a:	400b      	ands	r3, r1
 800708c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	431a      	orrs	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2220      	movs	r2, #32
 800709e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80070b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3728      	adds	r7, #40	; 0x28
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	fe00e800 	.word	0xfe00e800

080070c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b087      	sub	sp, #28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	607b      	str	r3, [r7, #4]
 80070ce:	460b      	mov	r3, r1
 80070d0:	817b      	strh	r3, [r7, #10]
 80070d2:	4613      	mov	r3, r2
 80070d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80070d6:	897b      	ldrh	r3, [r7, #10]
 80070d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80070dc:	7a7b      	ldrb	r3, [r7, #9]
 80070de:	041b      	lsls	r3, r3, #16
 80070e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80070e4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070f2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	6a3b      	ldr	r3, [r7, #32]
 80070fc:	0d5b      	lsrs	r3, r3, #21
 80070fe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007102:	4b07      	ldr	r3, [pc, #28]	; (8007120 <I2C_TransferConfig+0x5c>)
 8007104:	430b      	orrs	r3, r1
 8007106:	43db      	mvns	r3, r3
 8007108:	ea02 0103 	and.w	r1, r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	697a      	ldr	r2, [r7, #20]
 8007112:	430a      	orrs	r2, r1
 8007114:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007116:	bf00      	nop
 8007118:	371c      	adds	r7, #28
 800711a:	46bd      	mov	sp, r7
 800711c:	bc80      	pop	{r7}
 800711e:	4770      	bx	lr
 8007120:	03ff63ff 	.word	0x03ff63ff

08007124 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b20      	cmp	r3, #32
 8007138:	d138      	bne.n	80071ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007140:	2b01      	cmp	r3, #1
 8007142:	d101      	bne.n	8007148 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007144:	2302      	movs	r3, #2
 8007146:	e032      	b.n	80071ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2224      	movs	r2, #36	; 0x24
 8007154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f022 0201 	bic.w	r2, r2, #1
 8007166:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007176:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	6819      	ldr	r1, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	430a      	orrs	r2, r1
 8007186:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f042 0201 	orr.w	r2, r2, #1
 8007196:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2220      	movs	r2, #32
 800719c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	e000      	b.n	80071ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80071ac:	2302      	movs	r3, #2
  }
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	370c      	adds	r7, #12
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bc80      	pop	{r7}
 80071b6:	4770      	bx	lr

080071b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	2b20      	cmp	r3, #32
 80071cc:	d139      	bne.n	8007242 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d101      	bne.n	80071dc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80071d8:	2302      	movs	r3, #2
 80071da:	e033      	b.n	8007244 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2224      	movs	r2, #36	; 0x24
 80071e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 0201 	bic.w	r2, r2, #1
 80071fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800720a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	021b      	lsls	r3, r3, #8
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	4313      	orrs	r3, r2
 8007214:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f042 0201 	orr.w	r2, r2, #1
 800722c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2220      	movs	r2, #32
 8007232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	e000      	b.n	8007244 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007242:	2302      	movs	r3, #2
  }
}
 8007244:	4618      	mov	r0, r3
 8007246:	3714      	adds	r7, #20
 8007248:	46bd      	mov	sp, r7
 800724a:	bc80      	pop	{r7}
 800724c:	4770      	bx	lr
	...

08007250 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007250:	b480      	push	{r7}
 8007252:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007254:	4b04      	ldr	r3, [pc, #16]	; (8007268 <HAL_PWR_EnableBkUpAccess+0x18>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a03      	ldr	r2, [pc, #12]	; (8007268 <HAL_PWR_EnableBkUpAccess+0x18>)
 800725a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800725e:	6013      	str	r3, [r2, #0]
}
 8007260:	bf00      	nop
 8007262:	46bd      	mov	sp, r7
 8007264:	bc80      	pop	{r7}
 8007266:	4770      	bx	lr
 8007268:	58000400 	.word	0x58000400

0800726c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	460b      	mov	r3, r1
 8007276:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10c      	bne.n	8007298 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800727e:	4b13      	ldr	r3, [pc, #76]	; (80072cc <HAL_PWR_EnterSLEEPMode+0x60>)
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800728a:	d10d      	bne.n	80072a8 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800728c:	f000 f83c 	bl	8007308 <HAL_PWREx_DisableLowPowerRunMode>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d008      	beq.n	80072a8 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8007296:	e015      	b.n	80072c4 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8007298:	4b0c      	ldr	r3, [pc, #48]	; (80072cc <HAL_PWR_EnterSLEEPMode+0x60>)
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80072a4:	f000 f822 	bl	80072ec <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80072a8:	4b09      	ldr	r3, [pc, #36]	; (80072d0 <HAL_PWR_EnterSLEEPMode+0x64>)
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	4a08      	ldr	r2, [pc, #32]	; (80072d0 <HAL_PWR_EnterSLEEPMode+0x64>)
 80072ae:	f023 0304 	bic.w	r3, r3, #4
 80072b2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80072b4:	78fb      	ldrb	r3, [r7, #3]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d101      	bne.n	80072be <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80072ba:	bf30      	wfi
 80072bc:	e002      	b.n	80072c4 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80072be:	bf40      	sev
    __WFE();
 80072c0:	bf20      	wfe
    __WFE();
 80072c2:	bf20      	wfe
  }
}
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	58000400 	.word	0x58000400
 80072d0:	e000ed00 	.word	0xe000ed00

080072d4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80072d4:	b480      	push	{r7}
 80072d6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80072d8:	4b03      	ldr	r3, [pc, #12]	; (80072e8 <HAL_PWREx_GetVoltageRange+0x14>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bc80      	pop	{r7}
 80072e6:	4770      	bx	lr
 80072e8:	58000400 	.word	0x58000400

080072ec <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80072ec:	b480      	push	{r7}
 80072ee:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80072f0:	4b04      	ldr	r3, [pc, #16]	; (8007304 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a03      	ldr	r2, [pc, #12]	; (8007304 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80072f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072fa:	6013      	str	r3, [r2, #0]
}
 80072fc:	bf00      	nop
 80072fe:	46bd      	mov	sp, r7
 8007300:	bc80      	pop	{r7}
 8007302:	4770      	bx	lr
 8007304:	58000400 	.word	0x58000400

08007308 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800730e:	4b16      	ldr	r3, [pc, #88]	; (8007368 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a15      	ldr	r2, [pc, #84]	; (8007368 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8007314:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007318:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800731a:	4b14      	ldr	r3, [pc, #80]	; (800736c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2232      	movs	r2, #50	; 0x32
 8007320:	fb02 f303 	mul.w	r3, r2, r3
 8007324:	4a12      	ldr	r2, [pc, #72]	; (8007370 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8007326:	fba2 2303 	umull	r2, r3, r2, r3
 800732a:	0c9b      	lsrs	r3, r3, #18
 800732c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800732e:	e002      	b.n	8007336 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3b01      	subs	r3, #1
 8007334:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8007336:	4b0c      	ldr	r3, [pc, #48]	; (8007368 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800733e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007342:	d102      	bne.n	800734a <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1f2      	bne.n	8007330 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800734a:	4b07      	ldr	r3, [pc, #28]	; (8007368 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800734c:	695b      	ldr	r3, [r3, #20]
 800734e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007356:	d101      	bne.n	800735c <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e000      	b.n	800735e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	370c      	adds	r7, #12
 8007362:	46bd      	mov	sp, r7
 8007364:	bc80      	pop	{r7}
 8007366:	4770      	bx	lr
 8007368:	58000400 	.word	0x58000400
 800736c:	20000000 	.word	0x20000000
 8007370:	431bde83 	.word	0x431bde83

08007374 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	4603      	mov	r3, r0
 800737c:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800737e:	4b10      	ldr	r3, [pc, #64]	; (80073c0 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f023 0307 	bic.w	r3, r3, #7
 8007386:	4a0e      	ldr	r2, [pc, #56]	; (80073c0 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8007388:	f043 0302 	orr.w	r3, r3, #2
 800738c:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800738e:	4b0d      	ldr	r3, [pc, #52]	; (80073c4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	4a0c      	ldr	r2, [pc, #48]	; (80073c4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8007394:	f043 0304 	orr.w	r3, r3, #4
 8007398:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800739a:	79fb      	ldrb	r3, [r7, #7]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d101      	bne.n	80073a4 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80073a0:	bf30      	wfi
 80073a2:	e002      	b.n	80073aa <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80073a4:	bf40      	sev
    __WFE();
 80073a6:	bf20      	wfe
    __WFE();
 80073a8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80073aa:	4b06      	ldr	r3, [pc, #24]	; (80073c4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	4a05      	ldr	r2, [pc, #20]	; (80073c4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80073b0:	f023 0304 	bic.w	r3, r3, #4
 80073b4:	6113      	str	r3, [r2, #16]
}
 80073b6:	bf00      	nop
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bc80      	pop	{r7}
 80073be:	4770      	bx	lr
 80073c0:	58000400 	.word	0x58000400
 80073c4:	e000ed00 	.word	0xe000ed00

080073c8 <LL_PWR_IsEnabledBkUpAccess>:
{
 80073c8:	b480      	push	{r7}
 80073ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80073cc:	4b06      	ldr	r3, [pc, #24]	; (80073e8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073d8:	d101      	bne.n	80073de <LL_PWR_IsEnabledBkUpAccess+0x16>
 80073da:	2301      	movs	r3, #1
 80073dc:	e000      	b.n	80073e0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bc80      	pop	{r7}
 80073e6:	4770      	bx	lr
 80073e8:	58000400 	.word	0x58000400

080073ec <LL_RCC_HSE_EnableTcxo>:
{
 80073ec:	b480      	push	{r7}
 80073ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80073f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80073fe:	6013      	str	r3, [r2, #0]
}
 8007400:	bf00      	nop
 8007402:	46bd      	mov	sp, r7
 8007404:	bc80      	pop	{r7}
 8007406:	4770      	bx	lr

08007408 <LL_RCC_HSE_DisableTcxo>:
{
 8007408:	b480      	push	{r7}
 800740a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800740c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007416:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800741a:	6013      	str	r3, [r2, #0]
}
 800741c:	bf00      	nop
 800741e:	46bd      	mov	sp, r7
 8007420:	bc80      	pop	{r7}
 8007422:	4770      	bx	lr

08007424 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007424:	b480      	push	{r7}
 8007426:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007436:	d101      	bne.n	800743c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007438:	2301      	movs	r3, #1
 800743a:	e000      	b.n	800743e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	46bd      	mov	sp, r7
 8007442:	bc80      	pop	{r7}
 8007444:	4770      	bx	lr

08007446 <LL_RCC_HSE_Enable>:
{
 8007446:	b480      	push	{r7}
 8007448:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800744a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007458:	6013      	str	r3, [r2, #0]
}
 800745a:	bf00      	nop
 800745c:	46bd      	mov	sp, r7
 800745e:	bc80      	pop	{r7}
 8007460:	4770      	bx	lr

08007462 <LL_RCC_HSE_Disable>:
{
 8007462:	b480      	push	{r7}
 8007464:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8007466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007474:	6013      	str	r3, [r2, #0]
}
 8007476:	bf00      	nop
 8007478:	46bd      	mov	sp, r7
 800747a:	bc80      	pop	{r7}
 800747c:	4770      	bx	lr

0800747e <LL_RCC_HSE_IsReady>:
{
 800747e:	b480      	push	{r7}
 8007480:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800748c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007490:	d101      	bne.n	8007496 <LL_RCC_HSE_IsReady+0x18>
 8007492:	2301      	movs	r3, #1
 8007494:	e000      	b.n	8007498 <LL_RCC_HSE_IsReady+0x1a>
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	46bd      	mov	sp, r7
 800749c:	bc80      	pop	{r7}
 800749e:	4770      	bx	lr

080074a0 <LL_RCC_HSI_Enable>:
{
 80074a0:	b480      	push	{r7}
 80074a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80074a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074b2:	6013      	str	r3, [r2, #0]
}
 80074b4:	bf00      	nop
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bc80      	pop	{r7}
 80074ba:	4770      	bx	lr

080074bc <LL_RCC_HSI_Disable>:
{
 80074bc:	b480      	push	{r7}
 80074be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80074c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074ce:	6013      	str	r3, [r2, #0]
}
 80074d0:	bf00      	nop
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bc80      	pop	{r7}
 80074d6:	4770      	bx	lr

080074d8 <LL_RCC_HSI_IsReady>:
{
 80074d8:	b480      	push	{r7}
 80074da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80074dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074ea:	d101      	bne.n	80074f0 <LL_RCC_HSI_IsReady+0x18>
 80074ec:	2301      	movs	r3, #1
 80074ee:	e000      	b.n	80074f2 <LL_RCC_HSI_IsReady+0x1a>
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bc80      	pop	{r7}
 80074f8:	4770      	bx	lr

080074fa <LL_RCC_HSI_SetCalibTrimming>:
{
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	061b      	lsls	r3, r3, #24
 8007510:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007514:	4313      	orrs	r3, r2
 8007516:	604b      	str	r3, [r1, #4]
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	bc80      	pop	{r7}
 8007520:	4770      	bx	lr

08007522 <LL_RCC_LSE_IsReady>:
{
 8007522:	b480      	push	{r7}
 8007524:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800752a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	2b02      	cmp	r3, #2
 8007534:	d101      	bne.n	800753a <LL_RCC_LSE_IsReady+0x18>
 8007536:	2301      	movs	r3, #1
 8007538:	e000      	b.n	800753c <LL_RCC_LSE_IsReady+0x1a>
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	46bd      	mov	sp, r7
 8007540:	bc80      	pop	{r7}
 8007542:	4770      	bx	lr

08007544 <LL_RCC_LSI_Enable>:
{
 8007544:	b480      	push	{r7}
 8007546:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8007548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800754c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007550:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007554:	f043 0301 	orr.w	r3, r3, #1
 8007558:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800755c:	bf00      	nop
 800755e:	46bd      	mov	sp, r7
 8007560:	bc80      	pop	{r7}
 8007562:	4770      	bx	lr

08007564 <LL_RCC_LSI_Disable>:
{
 8007564:	b480      	push	{r7}
 8007566:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8007568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800756c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007570:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007574:	f023 0301 	bic.w	r3, r3, #1
 8007578:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800757c:	bf00      	nop
 800757e:	46bd      	mov	sp, r7
 8007580:	bc80      	pop	{r7}
 8007582:	4770      	bx	lr

08007584 <LL_RCC_LSI_IsReady>:
{
 8007584:	b480      	push	{r7}
 8007586:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8007588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800758c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007590:	f003 0302 	and.w	r3, r3, #2
 8007594:	2b02      	cmp	r3, #2
 8007596:	d101      	bne.n	800759c <LL_RCC_LSI_IsReady+0x18>
 8007598:	2301      	movs	r3, #1
 800759a:	e000      	b.n	800759e <LL_RCC_LSI_IsReady+0x1a>
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bc80      	pop	{r7}
 80075a4:	4770      	bx	lr

080075a6 <LL_RCC_MSI_Enable>:
{
 80075a6:	b480      	push	{r7}
 80075a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80075aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075b4:	f043 0301 	orr.w	r3, r3, #1
 80075b8:	6013      	str	r3, [r2, #0]
}
 80075ba:	bf00      	nop
 80075bc:	46bd      	mov	sp, r7
 80075be:	bc80      	pop	{r7}
 80075c0:	4770      	bx	lr

080075c2 <LL_RCC_MSI_Disable>:
{
 80075c2:	b480      	push	{r7}
 80075c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80075c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075d0:	f023 0301 	bic.w	r3, r3, #1
 80075d4:	6013      	str	r3, [r2, #0]
}
 80075d6:	bf00      	nop
 80075d8:	46bd      	mov	sp, r7
 80075da:	bc80      	pop	{r7}
 80075dc:	4770      	bx	lr

080075de <LL_RCC_MSI_IsReady>:
{
 80075de:	b480      	push	{r7}
 80075e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80075e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 0302 	and.w	r3, r3, #2
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d101      	bne.n	80075f4 <LL_RCC_MSI_IsReady+0x16>
 80075f0:	2301      	movs	r3, #1
 80075f2:	e000      	b.n	80075f6 <LL_RCC_MSI_IsReady+0x18>
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bc80      	pop	{r7}
 80075fc:	4770      	bx	lr

080075fe <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80075fe:	b480      	push	{r7}
 8007600:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8007602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0308 	and.w	r3, r3, #8
 800760c:	2b08      	cmp	r3, #8
 800760e:	d101      	bne.n	8007614 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8007610:	2301      	movs	r3, #1
 8007612:	e000      	b.n	8007616 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	46bd      	mov	sp, r7
 800761a:	bc80      	pop	{r7}
 800761c:	4770      	bx	lr

0800761e <LL_RCC_MSI_GetRange>:
{
 800761e:	b480      	push	{r7}
 8007620:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8007622:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800762c:	4618      	mov	r0, r3
 800762e:	46bd      	mov	sp, r7
 8007630:	bc80      	pop	{r7}
 8007632:	4770      	bx	lr

08007634 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8007634:	b480      	push	{r7}
 8007636:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8007638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800763c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007640:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8007644:	4618      	mov	r0, r3
 8007646:	46bd      	mov	sp, r7
 8007648:	bc80      	pop	{r7}
 800764a:	4770      	bx	lr

0800764c <LL_RCC_MSI_SetCalibTrimming>:
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8007654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	021b      	lsls	r3, r3, #8
 8007662:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007666:	4313      	orrs	r3, r2
 8007668:	604b      	str	r3, [r1, #4]
}
 800766a:	bf00      	nop
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	bc80      	pop	{r7}
 8007672:	4770      	bx	lr

08007674 <LL_RCC_SetSysClkSource>:
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800767c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f023 0203 	bic.w	r2, r3, #3
 8007686:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4313      	orrs	r3, r2
 800768e:	608b      	str	r3, [r1, #8]
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	bc80      	pop	{r7}
 8007698:	4770      	bx	lr

0800769a <LL_RCC_GetSysClkSource>:
{
 800769a:	b480      	push	{r7}
 800769c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800769e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	f003 030c 	and.w	r3, r3, #12
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bc80      	pop	{r7}
 80076ae:	4770      	bx	lr

080076b0 <LL_RCC_SetAHBPrescaler>:
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80076b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	608b      	str	r3, [r1, #8]
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bc80      	pop	{r7}
 80076d4:	4770      	bx	lr

080076d6 <LL_RCC_SetAHB3Prescaler>:
{
 80076d6:	b480      	push	{r7}
 80076d8:	b083      	sub	sp, #12
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80076de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80076e6:	f023 020f 	bic.w	r2, r3, #15
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	091b      	lsrs	r3, r3, #4
 80076ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076f2:	4313      	orrs	r3, r2
 80076f4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80076f8:	bf00      	nop
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bc80      	pop	{r7}
 8007700:	4770      	bx	lr

08007702 <LL_RCC_SetAPB1Prescaler>:
{
 8007702:	b480      	push	{r7}
 8007704:	b083      	sub	sp, #12
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800770a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007714:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4313      	orrs	r3, r2
 800771c:	608b      	str	r3, [r1, #8]
}
 800771e:	bf00      	nop
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	bc80      	pop	{r7}
 8007726:	4770      	bx	lr

08007728 <LL_RCC_SetAPB2Prescaler>:
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800773a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4313      	orrs	r3, r2
 8007742:	608b      	str	r3, [r1, #8]
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	bc80      	pop	{r7}
 800774c:	4770      	bx	lr

0800774e <LL_RCC_GetAHBPrescaler>:
{
 800774e:	b480      	push	{r7}
 8007750:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800775c:	4618      	mov	r0, r3
 800775e:	46bd      	mov	sp, r7
 8007760:	bc80      	pop	{r7}
 8007762:	4770      	bx	lr

08007764 <LL_RCC_GetAHB3Prescaler>:
{
 8007764:	b480      	push	{r7}
 8007766:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8007768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800776c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007770:	011b      	lsls	r3, r3, #4
 8007772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007776:	4618      	mov	r0, r3
 8007778:	46bd      	mov	sp, r7
 800777a:	bc80      	pop	{r7}
 800777c:	4770      	bx	lr

0800777e <LL_RCC_GetAPB1Prescaler>:
{
 800777e:	b480      	push	{r7}
 8007780:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800778c:	4618      	mov	r0, r3
 800778e:	46bd      	mov	sp, r7
 8007790:	bc80      	pop	{r7}
 8007792:	4770      	bx	lr

08007794 <LL_RCC_GetAPB2Prescaler>:
{
 8007794:	b480      	push	{r7}
 8007796:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bc80      	pop	{r7}
 80077a8:	4770      	bx	lr

080077aa <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80077aa:	b480      	push	{r7}
 80077ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80077ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077bc:	6013      	str	r3, [r2, #0]
}
 80077be:	bf00      	nop
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bc80      	pop	{r7}
 80077c4:	4770      	bx	lr

080077c6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80077c6:	b480      	push	{r7}
 80077c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80077ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077d8:	6013      	str	r3, [r2, #0]
}
 80077da:	bf00      	nop
 80077dc:	46bd      	mov	sp, r7
 80077de:	bc80      	pop	{r7}
 80077e0:	4770      	bx	lr

080077e2 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80077e2:	b480      	push	{r7}
 80077e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80077e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077f4:	d101      	bne.n	80077fa <LL_RCC_PLL_IsReady+0x18>
 80077f6:	2301      	movs	r3, #1
 80077f8:	e000      	b.n	80077fc <LL_RCC_PLL_IsReady+0x1a>
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	46bd      	mov	sp, r7
 8007800:	bc80      	pop	{r7}
 8007802:	4770      	bx	lr

08007804 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007804:	b480      	push	{r7}
 8007806:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	0a1b      	lsrs	r3, r3, #8
 8007810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007814:	4618      	mov	r0, r3
 8007816:	46bd      	mov	sp, r7
 8007818:	bc80      	pop	{r7}
 800781a:	4770      	bx	lr

0800781c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800781c:	b480      	push	{r7}
 800781e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800782a:	4618      	mov	r0, r3
 800782c:	46bd      	mov	sp, r7
 800782e:	bc80      	pop	{r7}
 8007830:	4770      	bx	lr

08007832 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007832:	b480      	push	{r7}
 8007834:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8007840:	4618      	mov	r0, r3
 8007842:	46bd      	mov	sp, r7
 8007844:	bc80      	pop	{r7}
 8007846:	4770      	bx	lr

08007848 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007848:	b480      	push	{r7}
 800784a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800784c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	f003 0303 	and.w	r3, r3, #3
}
 8007856:	4618      	mov	r0, r3
 8007858:	46bd      	mov	sp, r7
 800785a:	bc80      	pop	{r7}
 800785c:	4770      	bx	lr

0800785e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800785e:	b480      	push	{r7}
 8007860:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8007862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800786c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007870:	d101      	bne.n	8007876 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8007872:	2301      	movs	r3, #1
 8007874:	e000      	b.n	8007878 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	46bd      	mov	sp, r7
 800787c:	bc80      	pop	{r7}
 800787e:	4770      	bx	lr

08007880 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8007880:	b480      	push	{r7}
 8007882:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8007884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007888:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800788c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007894:	d101      	bne.n	800789a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8007896:	2301      	movs	r3, #1
 8007898:	e000      	b.n	800789c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	46bd      	mov	sp, r7
 80078a0:	bc80      	pop	{r7}
 80078a2:	4770      	bx	lr

080078a4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80078a4:	b480      	push	{r7}
 80078a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80078a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078b6:	d101      	bne.n	80078bc <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80078b8:	2301      	movs	r3, #1
 80078ba:	e000      	b.n	80078be <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bc80      	pop	{r7}
 80078c4:	4770      	bx	lr

080078c6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80078c6:	b480      	push	{r7}
 80078c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80078ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80078d8:	d101      	bne.n	80078de <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80078da:	2301      	movs	r3, #1
 80078dc:	e000      	b.n	80078e0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bc80      	pop	{r7}
 80078e6:	4770      	bx	lr

080078e8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b088      	sub	sp, #32
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e36f      	b.n	8007fda <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078fa:	f7ff fece 	bl	800769a <LL_RCC_GetSysClkSource>
 80078fe:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007900:	f7ff ffa2 	bl	8007848 <LL_RCC_PLL_GetMainSource>
 8007904:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 0320 	and.w	r3, r3, #32
 800790e:	2b00      	cmp	r3, #0
 8007910:	f000 80c4 	beq.w	8007a9c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d005      	beq.n	8007926 <HAL_RCC_OscConfig+0x3e>
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	2b0c      	cmp	r3, #12
 800791e:	d176      	bne.n	8007a0e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d173      	bne.n	8007a0e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d101      	bne.n	8007932 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e353      	b.n	8007fda <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0308 	and.w	r3, r3, #8
 8007940:	2b00      	cmp	r3, #0
 8007942:	d005      	beq.n	8007950 <HAL_RCC_OscConfig+0x68>
 8007944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800794e:	e006      	b.n	800795e <HAL_RCC_OscConfig+0x76>
 8007950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007958:	091b      	lsrs	r3, r3, #4
 800795a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800795e:	4293      	cmp	r3, r2
 8007960:	d222      	bcs.n	80079a8 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007966:	4618      	mov	r0, r3
 8007968:	f000 fd3c 	bl	80083e4 <RCC_SetFlashLatencyFromMSIRange>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d001      	beq.n	8007976 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e331      	b.n	8007fda <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007980:	f043 0308 	orr.w	r3, r3, #8
 8007984:	6013      	str	r3, [r2, #0]
 8007986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007994:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007998:	4313      	orrs	r3, r2
 800799a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7ff fe53 	bl	800764c <LL_RCC_MSI_SetCalibTrimming>
 80079a6:	e021      	b.n	80079ec <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80079a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079b2:	f043 0308 	orr.w	r3, r3, #8
 80079b6:	6013      	str	r3, [r2, #0]
 80079b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80079ca:	4313      	orrs	r3, r2
 80079cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7ff fe3a 	bl	800764c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 fd01 	bl	80083e4 <RCC_SetFlashLatencyFromMSIRange>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d001      	beq.n	80079ec <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e2f6      	b.n	8007fda <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80079ec:	f000 fcc2 	bl	8008374 <HAL_RCC_GetHCLKFreq>
 80079f0:	4603      	mov	r3, r0
 80079f2:	4aa7      	ldr	r2, [pc, #668]	; (8007c90 <HAL_RCC_OscConfig+0x3a8>)
 80079f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80079f6:	4ba7      	ldr	r3, [pc, #668]	; (8007c94 <HAL_RCC_OscConfig+0x3ac>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7fa fee0 	bl	80027c0 <HAL_InitTick>
 8007a00:	4603      	mov	r3, r0
 8007a02:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8007a04:	7cfb      	ldrb	r3, [r7, #19]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d047      	beq.n	8007a9a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8007a0a:	7cfb      	ldrb	r3, [r7, #19]
 8007a0c:	e2e5      	b.n	8007fda <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a1b      	ldr	r3, [r3, #32]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d02c      	beq.n	8007a70 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007a16:	f7ff fdc6 	bl	80075a6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007a1a:	f7fa fedb 	bl	80027d4 <HAL_GetTick>
 8007a1e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8007a20:	e008      	b.n	8007a34 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007a22:	f7fa fed7 	bl	80027d4 <HAL_GetTick>
 8007a26:	4602      	mov	r2, r0
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d901      	bls.n	8007a34 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8007a30:	2303      	movs	r3, #3
 8007a32:	e2d2      	b.n	8007fda <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007a34:	f7ff fdd3 	bl	80075de <LL_RCC_MSI_IsReady>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d0f1      	beq.n	8007a22 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a48:	f043 0308 	orr.w	r3, r3, #8
 8007a4c:	6013      	str	r3, [r2, #0]
 8007a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a60:	4313      	orrs	r3, r2
 8007a62:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7ff fdef 	bl	800764c <LL_RCC_MSI_SetCalibTrimming>
 8007a6e:	e015      	b.n	8007a9c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007a70:	f7ff fda7 	bl	80075c2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007a74:	f7fa feae 	bl	80027d4 <HAL_GetTick>
 8007a78:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8007a7a:	e008      	b.n	8007a8e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007a7c:	f7fa feaa 	bl	80027d4 <HAL_GetTick>
 8007a80:	4602      	mov	r2, r0
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	1ad3      	subs	r3, r2, r3
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d901      	bls.n	8007a8e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e2a5      	b.n	8007fda <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007a8e:	f7ff fda6 	bl	80075de <LL_RCC_MSI_IsReady>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1f1      	bne.n	8007a7c <HAL_RCC_OscConfig+0x194>
 8007a98:	e000      	b.n	8007a9c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007a9a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0301 	and.w	r3, r3, #1
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d058      	beq.n	8007b5a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	2b08      	cmp	r3, #8
 8007aac:	d005      	beq.n	8007aba <HAL_RCC_OscConfig+0x1d2>
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	2b0c      	cmp	r3, #12
 8007ab2:	d108      	bne.n	8007ac6 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	d105      	bne.n	8007ac6 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d14b      	bne.n	8007b5a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e289      	b.n	8007fda <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8007ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ae4:	d102      	bne.n	8007aec <HAL_RCC_OscConfig+0x204>
 8007ae6:	f7ff fcae 	bl	8007446 <LL_RCC_HSE_Enable>
 8007aea:	e00d      	b.n	8007b08 <HAL_RCC_OscConfig+0x220>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8007af4:	d104      	bne.n	8007b00 <HAL_RCC_OscConfig+0x218>
 8007af6:	f7ff fc79 	bl	80073ec <LL_RCC_HSE_EnableTcxo>
 8007afa:	f7ff fca4 	bl	8007446 <LL_RCC_HSE_Enable>
 8007afe:	e003      	b.n	8007b08 <HAL_RCC_OscConfig+0x220>
 8007b00:	f7ff fcaf 	bl	8007462 <LL_RCC_HSE_Disable>
 8007b04:	f7ff fc80 	bl	8007408 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d012      	beq.n	8007b36 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b10:	f7fa fe60 	bl	80027d4 <HAL_GetTick>
 8007b14:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8007b16:	e008      	b.n	8007b2a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b18:	f7fa fe5c 	bl	80027d4 <HAL_GetTick>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	2b64      	cmp	r3, #100	; 0x64
 8007b24:	d901      	bls.n	8007b2a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e257      	b.n	8007fda <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8007b2a:	f7ff fca8 	bl	800747e <LL_RCC_HSE_IsReady>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d0f1      	beq.n	8007b18 <HAL_RCC_OscConfig+0x230>
 8007b34:	e011      	b.n	8007b5a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b36:	f7fa fe4d 	bl	80027d4 <HAL_GetTick>
 8007b3a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8007b3c:	e008      	b.n	8007b50 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b3e:	f7fa fe49 	bl	80027d4 <HAL_GetTick>
 8007b42:	4602      	mov	r2, r0
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	2b64      	cmp	r3, #100	; 0x64
 8007b4a:	d901      	bls.n	8007b50 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e244      	b.n	8007fda <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007b50:	f7ff fc95 	bl	800747e <LL_RCC_HSE_IsReady>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1f1      	bne.n	8007b3e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 0302 	and.w	r3, r3, #2
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d046      	beq.n	8007bf4 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	2b04      	cmp	r3, #4
 8007b6a:	d005      	beq.n	8007b78 <HAL_RCC_OscConfig+0x290>
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	2b0c      	cmp	r3, #12
 8007b70:	d10e      	bne.n	8007b90 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d10b      	bne.n	8007b90 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	e22a      	b.n	8007fda <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	695b      	ldr	r3, [r3, #20]
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7ff fcb6 	bl	80074fa <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007b8e:	e031      	b.n	8007bf4 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d019      	beq.n	8007bcc <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b98:	f7ff fc82 	bl	80074a0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b9c:	f7fa fe1a 	bl	80027d4 <HAL_GetTick>
 8007ba0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007ba2:	e008      	b.n	8007bb6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ba4:	f7fa fe16 	bl	80027d4 <HAL_GetTick>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d901      	bls.n	8007bb6 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e211      	b.n	8007fda <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8007bb6:	f7ff fc8f 	bl	80074d8 <LL_RCC_HSI_IsReady>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d0f1      	beq.n	8007ba4 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	695b      	ldr	r3, [r3, #20]
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7ff fc98 	bl	80074fa <LL_RCC_HSI_SetCalibTrimming>
 8007bca:	e013      	b.n	8007bf4 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bcc:	f7ff fc76 	bl	80074bc <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bd0:	f7fa fe00 	bl	80027d4 <HAL_GetTick>
 8007bd4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8007bd6:	e008      	b.n	8007bea <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bd8:	f7fa fdfc 	bl	80027d4 <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d901      	bls.n	8007bea <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e1f7      	b.n	8007fda <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8007bea:	f7ff fc75 	bl	80074d8 <LL_RCC_HSI_IsReady>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1f1      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0308 	and.w	r3, r3, #8
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d06e      	beq.n	8007cde <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d056      	beq.n	8007cb6 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8007c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c10:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	69da      	ldr	r2, [r3, #28]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f003 0310 	and.w	r3, r3, #16
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d031      	beq.n	8007c84 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f003 0302 	and.w	r3, r3, #2
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d006      	beq.n	8007c38 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d101      	bne.n	8007c38 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e1d0      	b.n	8007fda <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f003 0301 	and.w	r3, r3, #1
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d013      	beq.n	8007c6a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8007c42:	f7ff fc8f 	bl	8007564 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007c46:	f7fa fdc5 	bl	80027d4 <HAL_GetTick>
 8007c4a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8007c4c:	e008      	b.n	8007c60 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c4e:	f7fa fdc1 	bl	80027d4 <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	2b11      	cmp	r3, #17
 8007c5a:	d901      	bls.n	8007c60 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e1bc      	b.n	8007fda <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8007c60:	f7ff fc90 	bl	8007584 <LL_RCC_LSI_IsReady>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1f1      	bne.n	8007c4e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8007c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c72:	f023 0210 	bic.w	r2, r3, #16
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c84:	f7ff fc5e 	bl	8007544 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c88:	f7fa fda4 	bl	80027d4 <HAL_GetTick>
 8007c8c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8007c8e:	e00c      	b.n	8007caa <HAL_RCC_OscConfig+0x3c2>
 8007c90:	20000000 	.word	0x20000000
 8007c94:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c98:	f7fa fd9c 	bl	80027d4 <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	2b11      	cmp	r3, #17
 8007ca4:	d901      	bls.n	8007caa <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e197      	b.n	8007fda <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8007caa:	f7ff fc6b 	bl	8007584 <LL_RCC_LSI_IsReady>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d0f1      	beq.n	8007c98 <HAL_RCC_OscConfig+0x3b0>
 8007cb4:	e013      	b.n	8007cde <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007cb6:	f7ff fc55 	bl	8007564 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cba:	f7fa fd8b 	bl	80027d4 <HAL_GetTick>
 8007cbe:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8007cc0:	e008      	b.n	8007cd4 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cc2:	f7fa fd87 	bl	80027d4 <HAL_GetTick>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	2b11      	cmp	r3, #17
 8007cce:	d901      	bls.n	8007cd4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e182      	b.n	8007fda <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8007cd4:	f7ff fc56 	bl	8007584 <LL_RCC_LSI_IsReady>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1f1      	bne.n	8007cc2 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0304 	and.w	r3, r3, #4
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f000 80d8 	beq.w	8007e9c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007cec:	f7ff fb6c 	bl	80073c8 <LL_PWR_IsEnabledBkUpAccess>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d113      	bne.n	8007d1e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007cf6:	f7ff faab 	bl	8007250 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007cfa:	f7fa fd6b 	bl	80027d4 <HAL_GetTick>
 8007cfe:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007d00:	e008      	b.n	8007d14 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d02:	f7fa fd67 	bl	80027d4 <HAL_GetTick>
 8007d06:	4602      	mov	r2, r0
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	2b02      	cmp	r3, #2
 8007d0e:	d901      	bls.n	8007d14 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8007d10:	2303      	movs	r3, #3
 8007d12:	e162      	b.n	8007fda <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007d14:	f7ff fb58 	bl	80073c8 <LL_PWR_IsEnabledBkUpAccess>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d0f1      	beq.n	8007d02 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d07b      	beq.n	8007e1e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	2b85      	cmp	r3, #133	; 0x85
 8007d2c:	d003      	beq.n	8007d36 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	2b05      	cmp	r3, #5
 8007d34:	d109      	bne.n	8007d4a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d42:	f043 0304 	orr.w	r3, r3, #4
 8007d46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d4a:	f7fa fd43 	bl	80027d4 <HAL_GetTick>
 8007d4e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d5c:	f043 0301 	orr.w	r3, r3, #1
 8007d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007d64:	e00a      	b.n	8007d7c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d66:	f7fa fd35 	bl	80027d4 <HAL_GetTick>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	1ad3      	subs	r3, r2, r3
 8007d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d901      	bls.n	8007d7c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e12e      	b.n	8007fda <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007d7c:	f7ff fbd1 	bl	8007522 <LL_RCC_LSE_IsReady>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d0ef      	beq.n	8007d66 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	2b81      	cmp	r3, #129	; 0x81
 8007d8c:	d003      	beq.n	8007d96 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	2b85      	cmp	r3, #133	; 0x85
 8007d94:	d121      	bne.n	8007dda <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d96:	f7fa fd1d 	bl	80027d4 <HAL_GetTick>
 8007d9a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007da4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007db0:	e00a      	b.n	8007dc8 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007db2:	f7fa fd0f 	bl	80027d4 <HAL_GetTick>
 8007db6:	4602      	mov	r2, r0
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d901      	bls.n	8007dc8 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e108      	b.n	8007fda <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d0ec      	beq.n	8007db2 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8007dd8:	e060      	b.n	8007e9c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dda:	f7fa fcfb 	bl	80027d4 <HAL_GetTick>
 8007dde:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007de8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007dec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007df4:	e00a      	b.n	8007e0c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007df6:	f7fa fced 	bl	80027d4 <HAL_GetTick>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	1ad3      	subs	r3, r2, r3
 8007e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d901      	bls.n	8007e0c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e0e6      	b.n	8007fda <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1ec      	bne.n	8007df6 <HAL_RCC_OscConfig+0x50e>
 8007e1c:	e03e      	b.n	8007e9c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e1e:	f7fa fcd9 	bl	80027d4 <HAL_GetTick>
 8007e22:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007e38:	e00a      	b.n	8007e50 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e3a:	f7fa fccb 	bl	80027d4 <HAL_GetTick>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d901      	bls.n	8007e50 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e0c4      	b.n	8007fda <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1ec      	bne.n	8007e3a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e60:	f7fa fcb8 	bl	80027d4 <HAL_GetTick>
 8007e64:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e72:	f023 0301 	bic.w	r3, r3, #1
 8007e76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007e7a:	e00a      	b.n	8007e92 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e7c:	f7fa fcaa 	bl	80027d4 <HAL_GetTick>
 8007e80:	4602      	mov	r2, r0
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d901      	bls.n	8007e92 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e0a3      	b.n	8007fda <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007e92:	f7ff fb46 	bl	8007522 <LL_RCC_LSE_IsReady>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1ef      	bne.n	8007e7c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f000 8099 	beq.w	8007fd8 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	2b0c      	cmp	r3, #12
 8007eaa:	d06c      	beq.n	8007f86 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d14b      	bne.n	8007f4c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007eb4:	f7ff fc87 	bl	80077c6 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007eb8:	f7fa fc8c 	bl	80027d4 <HAL_GetTick>
 8007ebc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007ebe:	e008      	b.n	8007ed2 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ec0:	f7fa fc88 	bl	80027d4 <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	2b0a      	cmp	r3, #10
 8007ecc:	d901      	bls.n	8007ed2 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e083      	b.n	8007fda <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007ed2:	f7ff fc86 	bl	80077e2 <LL_RCC_PLL_IsReady>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1f1      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ee0:	68da      	ldr	r2, [r3, #12]
 8007ee2:	4b40      	ldr	r3, [pc, #256]	; (8007fe4 <HAL_RCC_OscConfig+0x6fc>)
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007eee:	4311      	orrs	r1, r2
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007ef4:	0212      	lsls	r2, r2, #8
 8007ef6:	4311      	orrs	r1, r2
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007efc:	4311      	orrs	r1, r2
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007f02:	4311      	orrs	r1, r2
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007f08:	430a      	orrs	r2, r1
 8007f0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f12:	f7ff fc4a 	bl	80077aa <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f24:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f26:	f7fa fc55 	bl	80027d4 <HAL_GetTick>
 8007f2a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8007f2c:	e008      	b.n	8007f40 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f2e:	f7fa fc51 	bl	80027d4 <HAL_GetTick>
 8007f32:	4602      	mov	r2, r0
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	2b0a      	cmp	r3, #10
 8007f3a:	d901      	bls.n	8007f40 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e04c      	b.n	8007fda <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8007f40:	f7ff fc4f 	bl	80077e2 <LL_RCC_PLL_IsReady>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d0f1      	beq.n	8007f2e <HAL_RCC_OscConfig+0x646>
 8007f4a:	e045      	b.n	8007fd8 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f4c:	f7ff fc3b 	bl	80077c6 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f50:	f7fa fc40 	bl	80027d4 <HAL_GetTick>
 8007f54:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007f56:	e008      	b.n	8007f6a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f58:	f7fa fc3c 	bl	80027d4 <HAL_GetTick>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	2b0a      	cmp	r3, #10
 8007f64:	d901      	bls.n	8007f6a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e037      	b.n	8007fda <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007f6a:	f7ff fc3a 	bl	80077e2 <LL_RCC_PLL_IsReady>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1f1      	bne.n	8007f58 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8007f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f78:	68da      	ldr	r2, [r3, #12]
 8007f7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f7e:	4b1a      	ldr	r3, [pc, #104]	; (8007fe8 <HAL_RCC_OscConfig+0x700>)
 8007f80:	4013      	ands	r3, r2
 8007f82:	60cb      	str	r3, [r1, #12]
 8007f84:	e028      	b.n	8007fd8 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d101      	bne.n	8007f92 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e023      	b.n	8007fda <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	f003 0203 	and.w	r2, r3, #3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d115      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d10e      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc0:	021b      	lsls	r3, r3, #8
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d106      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d001      	beq.n	8007fd8 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e000      	b.n	8007fda <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3720      	adds	r7, #32
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	11c1808c 	.word	0x11c1808c
 8007fe8:	eefefffc 	.word	0xeefefffc

08007fec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d101      	bne.n	8008000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e10f      	b.n	8008220 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008000:	4b89      	ldr	r3, [pc, #548]	; (8008228 <HAL_RCC_ClockConfig+0x23c>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 0307 	and.w	r3, r3, #7
 8008008:	683a      	ldr	r2, [r7, #0]
 800800a:	429a      	cmp	r2, r3
 800800c:	d91b      	bls.n	8008046 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800800e:	4b86      	ldr	r3, [pc, #536]	; (8008228 <HAL_RCC_ClockConfig+0x23c>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f023 0207 	bic.w	r2, r3, #7
 8008016:	4984      	ldr	r1, [pc, #528]	; (8008228 <HAL_RCC_ClockConfig+0x23c>)
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	4313      	orrs	r3, r2
 800801c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800801e:	f7fa fbd9 	bl	80027d4 <HAL_GetTick>
 8008022:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008024:	e008      	b.n	8008038 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008026:	f7fa fbd5 	bl	80027d4 <HAL_GetTick>
 800802a:	4602      	mov	r2, r0
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	2b02      	cmp	r3, #2
 8008032:	d901      	bls.n	8008038 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e0f3      	b.n	8008220 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008038:	4b7b      	ldr	r3, [pc, #492]	; (8008228 <HAL_RCC_ClockConfig+0x23c>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 0307 	and.w	r3, r3, #7
 8008040:	683a      	ldr	r2, [r7, #0]
 8008042:	429a      	cmp	r2, r3
 8008044:	d1ef      	bne.n	8008026 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 0302 	and.w	r3, r3, #2
 800804e:	2b00      	cmp	r3, #0
 8008050:	d016      	beq.n	8008080 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	4618      	mov	r0, r3
 8008058:	f7ff fb2a 	bl	80076b0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800805c:	f7fa fbba 	bl	80027d4 <HAL_GetTick>
 8008060:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008062:	e008      	b.n	8008076 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008064:	f7fa fbb6 	bl	80027d4 <HAL_GetTick>
 8008068:	4602      	mov	r2, r0
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	2b02      	cmp	r3, #2
 8008070:	d901      	bls.n	8008076 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e0d4      	b.n	8008220 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008076:	f7ff fbf2 	bl	800785e <LL_RCC_IsActiveFlag_HPRE>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d0f1      	beq.n	8008064 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008088:	2b00      	cmp	r3, #0
 800808a:	d016      	beq.n	80080ba <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	695b      	ldr	r3, [r3, #20]
 8008090:	4618      	mov	r0, r3
 8008092:	f7ff fb20 	bl	80076d6 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008096:	f7fa fb9d 	bl	80027d4 <HAL_GetTick>
 800809a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800809c:	e008      	b.n	80080b0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800809e:	f7fa fb99 	bl	80027d4 <HAL_GetTick>
 80080a2:	4602      	mov	r2, r0
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d901      	bls.n	80080b0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e0b7      	b.n	8008220 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80080b0:	f7ff fbe6 	bl	8007880 <LL_RCC_IsActiveFlag_SHDHPRE>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d0f1      	beq.n	800809e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f003 0304 	and.w	r3, r3, #4
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d016      	beq.n	80080f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7ff fb19 	bl	8007702 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80080d0:	f7fa fb80 	bl	80027d4 <HAL_GetTick>
 80080d4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80080d6:	e008      	b.n	80080ea <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80080d8:	f7fa fb7c 	bl	80027d4 <HAL_GetTick>
 80080dc:	4602      	mov	r2, r0
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d901      	bls.n	80080ea <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e09a      	b.n	8008220 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80080ea:	f7ff fbdb 	bl	80078a4 <LL_RCC_IsActiveFlag_PPRE1>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d0f1      	beq.n	80080d8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0308 	and.w	r3, r3, #8
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d017      	beq.n	8008130 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	00db      	lsls	r3, r3, #3
 8008106:	4618      	mov	r0, r3
 8008108:	f7ff fb0e 	bl	8007728 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800810c:	f7fa fb62 	bl	80027d4 <HAL_GetTick>
 8008110:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008112:	e008      	b.n	8008126 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008114:	f7fa fb5e 	bl	80027d4 <HAL_GetTick>
 8008118:	4602      	mov	r2, r0
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	2b02      	cmp	r3, #2
 8008120:	d901      	bls.n	8008126 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e07c      	b.n	8008220 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008126:	f7ff fbce 	bl	80078c6 <LL_RCC_IsActiveFlag_PPRE2>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d0f1      	beq.n	8008114 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	2b00      	cmp	r3, #0
 800813a:	d043      	beq.n	80081c4 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	2b02      	cmp	r3, #2
 8008142:	d106      	bne.n	8008152 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8008144:	f7ff f99b 	bl	800747e <LL_RCC_HSE_IsReady>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d11e      	bne.n	800818c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	e066      	b.n	8008220 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	2b03      	cmp	r3, #3
 8008158:	d106      	bne.n	8008168 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800815a:	f7ff fb42 	bl	80077e2 <LL_RCC_PLL_IsReady>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d113      	bne.n	800818c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e05b      	b.n	8008220 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d106      	bne.n	800817e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8008170:	f7ff fa35 	bl	80075de <LL_RCC_MSI_IsReady>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d108      	bne.n	800818c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e050      	b.n	8008220 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800817e:	f7ff f9ab 	bl	80074d8 <LL_RCC_HSI_IsReady>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d101      	bne.n	800818c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e049      	b.n	8008220 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	4618      	mov	r0, r3
 8008192:	f7ff fa6f 	bl	8007674 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008196:	f7fa fb1d 	bl	80027d4 <HAL_GetTick>
 800819a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800819c:	e00a      	b.n	80081b4 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800819e:	f7fa fb19 	bl	80027d4 <HAL_GetTick>
 80081a2:	4602      	mov	r2, r0
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d901      	bls.n	80081b4 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e035      	b.n	8008220 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081b4:	f7ff fa71 	bl	800769a <LL_RCC_GetSysClkSource>
 80081b8:	4602      	mov	r2, r0
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d1ec      	bne.n	800819e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80081c4:	4b18      	ldr	r3, [pc, #96]	; (8008228 <HAL_RCC_ClockConfig+0x23c>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 0307 	and.w	r3, r3, #7
 80081cc:	683a      	ldr	r2, [r7, #0]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d21b      	bcs.n	800820a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081d2:	4b15      	ldr	r3, [pc, #84]	; (8008228 <HAL_RCC_ClockConfig+0x23c>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f023 0207 	bic.w	r2, r3, #7
 80081da:	4913      	ldr	r1, [pc, #76]	; (8008228 <HAL_RCC_ClockConfig+0x23c>)
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	4313      	orrs	r3, r2
 80081e0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80081e2:	f7fa faf7 	bl	80027d4 <HAL_GetTick>
 80081e6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081e8:	e008      	b.n	80081fc <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80081ea:	f7fa faf3 	bl	80027d4 <HAL_GetTick>
 80081ee:	4602      	mov	r2, r0
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d901      	bls.n	80081fc <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e011      	b.n	8008220 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081fc:	4b0a      	ldr	r3, [pc, #40]	; (8008228 <HAL_RCC_ClockConfig+0x23c>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 0307 	and.w	r3, r3, #7
 8008204:	683a      	ldr	r2, [r7, #0]
 8008206:	429a      	cmp	r2, r3
 8008208:	d1ef      	bne.n	80081ea <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800820a:	f000 f8b3 	bl	8008374 <HAL_RCC_GetHCLKFreq>
 800820e:	4603      	mov	r3, r0
 8008210:	4a06      	ldr	r2, [pc, #24]	; (800822c <HAL_RCC_ClockConfig+0x240>)
 8008212:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8008214:	4b06      	ldr	r3, [pc, #24]	; (8008230 <HAL_RCC_ClockConfig+0x244>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4618      	mov	r0, r3
 800821a:	f7fa fad1 	bl	80027c0 <HAL_InitTick>
 800821e:	4603      	mov	r3, r0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	58004000 	.word	0x58004000
 800822c:	20000000 	.word	0x20000000
 8008230:	20000004 	.word	0x20000004

08008234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008234:	b590      	push	{r4, r7, lr}
 8008236:	b087      	sub	sp, #28
 8008238:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800823a:	2300      	movs	r3, #0
 800823c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800823e:	2300      	movs	r3, #0
 8008240:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008242:	f7ff fa2a 	bl	800769a <LL_RCC_GetSysClkSource>
 8008246:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008248:	f7ff fafe 	bl	8007848 <LL_RCC_PLL_GetMainSource>
 800824c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d005      	beq.n	8008260 <HAL_RCC_GetSysClockFreq+0x2c>
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	2b0c      	cmp	r3, #12
 8008258:	d139      	bne.n	80082ce <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d136      	bne.n	80082ce <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8008260:	f7ff f9cd 	bl	80075fe <LL_RCC_MSI_IsEnabledRangeSelect>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d115      	bne.n	8008296 <HAL_RCC_GetSysClockFreq+0x62>
 800826a:	f7ff f9c8 	bl	80075fe <LL_RCC_MSI_IsEnabledRangeSelect>
 800826e:	4603      	mov	r3, r0
 8008270:	2b01      	cmp	r3, #1
 8008272:	d106      	bne.n	8008282 <HAL_RCC_GetSysClockFreq+0x4e>
 8008274:	f7ff f9d3 	bl	800761e <LL_RCC_MSI_GetRange>
 8008278:	4603      	mov	r3, r0
 800827a:	0a1b      	lsrs	r3, r3, #8
 800827c:	f003 030f 	and.w	r3, r3, #15
 8008280:	e005      	b.n	800828e <HAL_RCC_GetSysClockFreq+0x5a>
 8008282:	f7ff f9d7 	bl	8007634 <LL_RCC_MSI_GetRangeAfterStandby>
 8008286:	4603      	mov	r3, r0
 8008288:	0a1b      	lsrs	r3, r3, #8
 800828a:	f003 030f 	and.w	r3, r3, #15
 800828e:	4a36      	ldr	r2, [pc, #216]	; (8008368 <HAL_RCC_GetSysClockFreq+0x134>)
 8008290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008294:	e014      	b.n	80082c0 <HAL_RCC_GetSysClockFreq+0x8c>
 8008296:	f7ff f9b2 	bl	80075fe <LL_RCC_MSI_IsEnabledRangeSelect>
 800829a:	4603      	mov	r3, r0
 800829c:	2b01      	cmp	r3, #1
 800829e:	d106      	bne.n	80082ae <HAL_RCC_GetSysClockFreq+0x7a>
 80082a0:	f7ff f9bd 	bl	800761e <LL_RCC_MSI_GetRange>
 80082a4:	4603      	mov	r3, r0
 80082a6:	091b      	lsrs	r3, r3, #4
 80082a8:	f003 030f 	and.w	r3, r3, #15
 80082ac:	e005      	b.n	80082ba <HAL_RCC_GetSysClockFreq+0x86>
 80082ae:	f7ff f9c1 	bl	8007634 <LL_RCC_MSI_GetRangeAfterStandby>
 80082b2:	4603      	mov	r3, r0
 80082b4:	091b      	lsrs	r3, r3, #4
 80082b6:	f003 030f 	and.w	r3, r3, #15
 80082ba:	4a2b      	ldr	r2, [pc, #172]	; (8008368 <HAL_RCC_GetSysClockFreq+0x134>)
 80082bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082c0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d115      	bne.n	80082f4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80082cc:	e012      	b.n	80082f4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2b04      	cmp	r3, #4
 80082d2:	d102      	bne.n	80082da <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80082d4:	4b25      	ldr	r3, [pc, #148]	; (800836c <HAL_RCC_GetSysClockFreq+0x138>)
 80082d6:	617b      	str	r3, [r7, #20]
 80082d8:	e00c      	b.n	80082f4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	2b08      	cmp	r3, #8
 80082de:	d109      	bne.n	80082f4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80082e0:	f7ff f8a0 	bl	8007424 <LL_RCC_HSE_IsEnabledDiv2>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d102      	bne.n	80082f0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80082ea:	4b20      	ldr	r3, [pc, #128]	; (800836c <HAL_RCC_GetSysClockFreq+0x138>)
 80082ec:	617b      	str	r3, [r7, #20]
 80082ee:	e001      	b.n	80082f4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80082f0:	4b1f      	ldr	r3, [pc, #124]	; (8008370 <HAL_RCC_GetSysClockFreq+0x13c>)
 80082f2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80082f4:	f7ff f9d1 	bl	800769a <LL_RCC_GetSysClkSource>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b0c      	cmp	r3, #12
 80082fc:	d12f      	bne.n	800835e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80082fe:	f7ff faa3 	bl	8007848 <LL_RCC_PLL_GetMainSource>
 8008302:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2b02      	cmp	r3, #2
 8008308:	d003      	beq.n	8008312 <HAL_RCC_GetSysClockFreq+0xde>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2b03      	cmp	r3, #3
 800830e:	d003      	beq.n	8008318 <HAL_RCC_GetSysClockFreq+0xe4>
 8008310:	e00d      	b.n	800832e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8008312:	4b16      	ldr	r3, [pc, #88]	; (800836c <HAL_RCC_GetSysClockFreq+0x138>)
 8008314:	60fb      	str	r3, [r7, #12]
        break;
 8008316:	e00d      	b.n	8008334 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008318:	f7ff f884 	bl	8007424 <LL_RCC_HSE_IsEnabledDiv2>
 800831c:	4603      	mov	r3, r0
 800831e:	2b01      	cmp	r3, #1
 8008320:	d102      	bne.n	8008328 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8008322:	4b12      	ldr	r3, [pc, #72]	; (800836c <HAL_RCC_GetSysClockFreq+0x138>)
 8008324:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008326:	e005      	b.n	8008334 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8008328:	4b11      	ldr	r3, [pc, #68]	; (8008370 <HAL_RCC_GetSysClockFreq+0x13c>)
 800832a:	60fb      	str	r3, [r7, #12]
        break;
 800832c:	e002      	b.n	8008334 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	60fb      	str	r3, [r7, #12]
        break;
 8008332:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008334:	f7ff fa66 	bl	8007804 <LL_RCC_PLL_GetN>
 8008338:	4602      	mov	r2, r0
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	fb03 f402 	mul.w	r4, r3, r2
 8008340:	f7ff fa77 	bl	8007832 <LL_RCC_PLL_GetDivider>
 8008344:	4603      	mov	r3, r0
 8008346:	091b      	lsrs	r3, r3, #4
 8008348:	3301      	adds	r3, #1
 800834a:	fbb4 f4f3 	udiv	r4, r4, r3
 800834e:	f7ff fa65 	bl	800781c <LL_RCC_PLL_GetR>
 8008352:	4603      	mov	r3, r0
 8008354:	0f5b      	lsrs	r3, r3, #29
 8008356:	3301      	adds	r3, #1
 8008358:	fbb4 f3f3 	udiv	r3, r4, r3
 800835c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800835e:	697b      	ldr	r3, [r7, #20]
}
 8008360:	4618      	mov	r0, r3
 8008362:	371c      	adds	r7, #28
 8008364:	46bd      	mov	sp, r7
 8008366:	bd90      	pop	{r4, r7, pc}
 8008368:	0801f024 	.word	0x0801f024
 800836c:	00f42400 	.word	0x00f42400
 8008370:	01e84800 	.word	0x01e84800

08008374 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008374:	b598      	push	{r3, r4, r7, lr}
 8008376:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008378:	f7ff ff5c 	bl	8008234 <HAL_RCC_GetSysClockFreq>
 800837c:	4604      	mov	r4, r0
 800837e:	f7ff f9e6 	bl	800774e <LL_RCC_GetAHBPrescaler>
 8008382:	4603      	mov	r3, r0
 8008384:	091b      	lsrs	r3, r3, #4
 8008386:	f003 030f 	and.w	r3, r3, #15
 800838a:	4a03      	ldr	r2, [pc, #12]	; (8008398 <HAL_RCC_GetHCLKFreq+0x24>)
 800838c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008390:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8008394:	4618      	mov	r0, r3
 8008396:	bd98      	pop	{r3, r4, r7, pc}
 8008398:	0801efc4 	.word	0x0801efc4

0800839c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800839c:	b598      	push	{r3, r4, r7, lr}
 800839e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80083a0:	f7ff ffe8 	bl	8008374 <HAL_RCC_GetHCLKFreq>
 80083a4:	4604      	mov	r4, r0
 80083a6:	f7ff f9ea 	bl	800777e <LL_RCC_GetAPB1Prescaler>
 80083aa:	4603      	mov	r3, r0
 80083ac:	0a1b      	lsrs	r3, r3, #8
 80083ae:	4a03      	ldr	r2, [pc, #12]	; (80083bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80083b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083b4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	bd98      	pop	{r3, r4, r7, pc}
 80083bc:	0801f004 	.word	0x0801f004

080083c0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80083c0:	b598      	push	{r3, r4, r7, lr}
 80083c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80083c4:	f7ff ffd6 	bl	8008374 <HAL_RCC_GetHCLKFreq>
 80083c8:	4604      	mov	r4, r0
 80083ca:	f7ff f9e3 	bl	8007794 <LL_RCC_GetAPB2Prescaler>
 80083ce:	4603      	mov	r3, r0
 80083d0:	0adb      	lsrs	r3, r3, #11
 80083d2:	4a03      	ldr	r2, [pc, #12]	; (80083e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80083d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083d8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80083dc:	4618      	mov	r0, r3
 80083de:	bd98      	pop	{r3, r4, r7, pc}
 80083e0:	0801f004 	.word	0x0801f004

080083e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80083e4:	b590      	push	{r4, r7, lr}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	091b      	lsrs	r3, r3, #4
 80083f0:	f003 030f 	and.w	r3, r3, #15
 80083f4:	4a10      	ldr	r2, [pc, #64]	; (8008438 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80083f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083fa:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80083fc:	f7ff f9b2 	bl	8007764 <LL_RCC_GetAHB3Prescaler>
 8008400:	4603      	mov	r3, r0
 8008402:	091b      	lsrs	r3, r3, #4
 8008404:	f003 030f 	and.w	r3, r3, #15
 8008408:	4a0c      	ldr	r2, [pc, #48]	; (800843c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800840a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	fbb2 f3f3 	udiv	r3, r2, r3
 8008414:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	4a09      	ldr	r2, [pc, #36]	; (8008440 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800841a:	fba2 2303 	umull	r2, r3, r2, r3
 800841e:	0c9c      	lsrs	r4, r3, #18
 8008420:	f7fe ff58 	bl	80072d4 <HAL_PWREx_GetVoltageRange>
 8008424:	4603      	mov	r3, r0
 8008426:	4619      	mov	r1, r3
 8008428:	4620      	mov	r0, r4
 800842a:	f000 f80b 	bl	8008444 <RCC_SetFlashLatency>
 800842e:	4603      	mov	r3, r0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3714      	adds	r7, #20
 8008434:	46bd      	mov	sp, r7
 8008436:	bd90      	pop	{r4, r7, pc}
 8008438:	0801f024 	.word	0x0801f024
 800843c:	0801efc4 	.word	0x0801efc4
 8008440:	431bde83 	.word	0x431bde83

08008444 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b08e      	sub	sp, #56	; 0x38
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800844e:	4a3a      	ldr	r2, [pc, #232]	; (8008538 <RCC_SetFlashLatency+0xf4>)
 8008450:	f107 0320 	add.w	r3, r7, #32
 8008454:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008458:	6018      	str	r0, [r3, #0]
 800845a:	3304      	adds	r3, #4
 800845c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800845e:	4a37      	ldr	r2, [pc, #220]	; (800853c <RCC_SetFlashLatency+0xf8>)
 8008460:	f107 0318 	add.w	r3, r7, #24
 8008464:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008468:	6018      	str	r0, [r3, #0]
 800846a:	3304      	adds	r3, #4
 800846c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800846e:	4a34      	ldr	r2, [pc, #208]	; (8008540 <RCC_SetFlashLatency+0xfc>)
 8008470:	f107 030c 	add.w	r3, r7, #12
 8008474:	ca07      	ldmia	r2, {r0, r1, r2}
 8008476:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800847a:	2300      	movs	r3, #0
 800847c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008484:	d11b      	bne.n	80084be <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008486:	2300      	movs	r3, #0
 8008488:	633b      	str	r3, [r7, #48]	; 0x30
 800848a:	e014      	b.n	80084b6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800848c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848e:	005b      	lsls	r3, r3, #1
 8008490:	3338      	adds	r3, #56	; 0x38
 8008492:	443b      	add	r3, r7
 8008494:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8008498:	461a      	mov	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4293      	cmp	r3, r2
 800849e:	d807      	bhi.n	80084b0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80084a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	3338      	adds	r3, #56	; 0x38
 80084a6:	443b      	add	r3, r7
 80084a8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80084ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084ae:	e021      	b.n	80084f4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80084b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b2:	3301      	adds	r3, #1
 80084b4:	633b      	str	r3, [r7, #48]	; 0x30
 80084b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d9e7      	bls.n	800848c <RCC_SetFlashLatency+0x48>
 80084bc:	e01a      	b.n	80084f4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80084be:	2300      	movs	r3, #0
 80084c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084c2:	e014      	b.n	80084ee <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80084c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c6:	005b      	lsls	r3, r3, #1
 80084c8:	3338      	adds	r3, #56	; 0x38
 80084ca:	443b      	add	r3, r7
 80084cc:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80084d0:	461a      	mov	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d807      	bhi.n	80084e8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80084d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	3338      	adds	r3, #56	; 0x38
 80084de:	443b      	add	r3, r7
 80084e0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80084e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084e6:	e005      	b.n	80084f4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80084e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ea:	3301      	adds	r3, #1
 80084ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d9e7      	bls.n	80084c4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80084f4:	4b13      	ldr	r3, [pc, #76]	; (8008544 <RCC_SetFlashLatency+0x100>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f023 0207 	bic.w	r2, r3, #7
 80084fc:	4911      	ldr	r1, [pc, #68]	; (8008544 <RCC_SetFlashLatency+0x100>)
 80084fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008500:	4313      	orrs	r3, r2
 8008502:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008504:	f7fa f966 	bl	80027d4 <HAL_GetTick>
 8008508:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800850a:	e008      	b.n	800851e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800850c:	f7fa f962 	bl	80027d4 <HAL_GetTick>
 8008510:	4602      	mov	r2, r0
 8008512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	2b02      	cmp	r3, #2
 8008518:	d901      	bls.n	800851e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800851a:	2303      	movs	r3, #3
 800851c:	e007      	b.n	800852e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800851e:	4b09      	ldr	r3, [pc, #36]	; (8008544 <RCC_SetFlashLatency+0x100>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 0307 	and.w	r3, r3, #7
 8008526:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008528:	429a      	cmp	r2, r3
 800852a:	d1ef      	bne.n	800850c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3738      	adds	r7, #56	; 0x38
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	0801e700 	.word	0x0801e700
 800853c:	0801e708 	.word	0x0801e708
 8008540:	0801e710 	.word	0x0801e710
 8008544:	58004000 	.word	0x58004000

08008548 <LL_RCC_LSE_IsReady>:
{
 8008548:	b480      	push	{r7}
 800854a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800854c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008554:	f003 0302 	and.w	r3, r3, #2
 8008558:	2b02      	cmp	r3, #2
 800855a:	d101      	bne.n	8008560 <LL_RCC_LSE_IsReady+0x18>
 800855c:	2301      	movs	r3, #1
 800855e:	e000      	b.n	8008562 <LL_RCC_LSE_IsReady+0x1a>
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	46bd      	mov	sp, r7
 8008566:	bc80      	pop	{r7}
 8008568:	4770      	bx	lr

0800856a <LL_RCC_SetUSARTClockSource>:
{
 800856a:	b480      	push	{r7}
 800856c:	b083      	sub	sp, #12
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8008572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008576:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	0c1b      	lsrs	r3, r3, #16
 800857e:	43db      	mvns	r3, r3
 8008580:	401a      	ands	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	b29b      	uxth	r3, r3
 8008586:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800858a:	4313      	orrs	r3, r2
 800858c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008590:	bf00      	nop
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	bc80      	pop	{r7}
 8008598:	4770      	bx	lr

0800859a <LL_RCC_SetI2SClockSource>:
{
 800859a:	b480      	push	{r7}
 800859c:	b083      	sub	sp, #12
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80085a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80085ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80085ba:	bf00      	nop
 80085bc:	370c      	adds	r7, #12
 80085be:	46bd      	mov	sp, r7
 80085c0:	bc80      	pop	{r7}
 80085c2:	4770      	bx	lr

080085c4 <LL_RCC_SetLPUARTClockSource>:
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80085cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80085d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4313      	orrs	r3, r2
 80085e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bc80      	pop	{r7}
 80085ec:	4770      	bx	lr

080085ee <LL_RCC_SetI2CClockSource>:
{
 80085ee:	b480      	push	{r7}
 80085f0:	b083      	sub	sp, #12
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80085f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	091b      	lsrs	r3, r3, #4
 8008602:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008606:	43db      	mvns	r3, r3
 8008608:	401a      	ands	r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	011b      	lsls	r3, r3, #4
 800860e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008612:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008616:	4313      	orrs	r3, r2
 8008618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	bc80      	pop	{r7}
 8008624:	4770      	bx	lr

08008626 <LL_RCC_SetLPTIMClockSource>:
{
 8008626:	b480      	push	{r7}
 8008628:	b083      	sub	sp, #12
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800862e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008632:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	0c1b      	lsrs	r3, r3, #16
 800863a:	041b      	lsls	r3, r3, #16
 800863c:	43db      	mvns	r3, r3
 800863e:	401a      	ands	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	041b      	lsls	r3, r3, #16
 8008644:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008648:	4313      	orrs	r3, r2
 800864a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800864e:	bf00      	nop
 8008650:	370c      	adds	r7, #12
 8008652:	46bd      	mov	sp, r7
 8008654:	bc80      	pop	{r7}
 8008656:	4770      	bx	lr

08008658 <LL_RCC_SetRNGClockSource>:
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008668:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800866c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4313      	orrs	r3, r2
 8008674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008678:	bf00      	nop
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	bc80      	pop	{r7}
 8008680:	4770      	bx	lr

08008682 <LL_RCC_SetADCClockSource>:
{
 8008682:	b480      	push	{r7}
 8008684:	b083      	sub	sp, #12
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800868a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800868e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008692:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008696:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4313      	orrs	r3, r2
 800869e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80086a2:	bf00      	nop
 80086a4:	370c      	adds	r7, #12
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bc80      	pop	{r7}
 80086aa:	4770      	bx	lr

080086ac <LL_RCC_SetRTCClockSource>:
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80086b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80086cc:	bf00      	nop
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bc80      	pop	{r7}
 80086d4:	4770      	bx	lr

080086d6 <LL_RCC_GetRTCClockSource>:
{
 80086d6:	b480      	push	{r7}
 80086d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80086da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bc80      	pop	{r7}
 80086ec:	4770      	bx	lr

080086ee <LL_RCC_ForceBackupDomainReset>:
{
 80086ee:	b480      	push	{r7}
 80086f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80086f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008702:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008706:	bf00      	nop
 8008708:	46bd      	mov	sp, r7
 800870a:	bc80      	pop	{r7}
 800870c:	4770      	bx	lr

0800870e <LL_RCC_ReleaseBackupDomainReset>:
{
 800870e:	b480      	push	{r7}
 8008710:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800871a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800871e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008722:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008726:	bf00      	nop
 8008728:	46bd      	mov	sp, r7
 800872a:	bc80      	pop	{r7}
 800872c:	4770      	bx	lr
	...

08008730 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8008738:	2300      	movs	r3, #0
 800873a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800873c:	2300      	movs	r3, #0
 800873e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008740:	2300      	movs	r3, #0
 8008742:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800874c:	2b00      	cmp	r3, #0
 800874e:	d058      	beq.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8008750:	f7fe fd7e 	bl	8007250 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008754:	f7fa f83e 	bl	80027d4 <HAL_GetTick>
 8008758:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800875a:	e009      	b.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800875c:	f7fa f83a 	bl	80027d4 <HAL_GetTick>
 8008760:	4602      	mov	r2, r0
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	1ad3      	subs	r3, r2, r3
 8008766:	2b02      	cmp	r3, #2
 8008768:	d902      	bls.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800876a:	2303      	movs	r3, #3
 800876c:	74fb      	strb	r3, [r7, #19]
        break;
 800876e:	e006      	b.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8008770:	4b7b      	ldr	r3, [pc, #492]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800877c:	d1ee      	bne.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800877e:	7cfb      	ldrb	r3, [r7, #19]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d13c      	bne.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8008784:	f7ff ffa7 	bl	80086d6 <LL_RCC_GetRTCClockSource>
 8008788:	4602      	mov	r2, r0
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800878e:	429a      	cmp	r2, r3
 8008790:	d00f      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800879a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800879e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80087a0:	f7ff ffa5 	bl	80086ee <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80087a4:	f7ff ffb3 	bl	800870e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80087a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	f003 0302 	and.w	r3, r3, #2
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d014      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087bc:	f7fa f80a 	bl	80027d4 <HAL_GetTick>
 80087c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80087c2:	e00b      	b.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087c4:	f7fa f806 	bl	80027d4 <HAL_GetTick>
 80087c8:	4602      	mov	r2, r0
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	1ad3      	subs	r3, r2, r3
 80087ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d902      	bls.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80087d6:	2303      	movs	r3, #3
 80087d8:	74fb      	strb	r3, [r7, #19]
            break;
 80087da:	e004      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80087dc:	f7ff feb4 	bl	8008548 <LL_RCC_LSE_IsReady>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d1ee      	bne.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80087e6:	7cfb      	ldrb	r3, [r7, #19]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d105      	bne.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7ff ff5b 	bl	80086ac <LL_RCC_SetRTCClockSource>
 80087f6:	e004      	b.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80087f8:	7cfb      	ldrb	r3, [r7, #19]
 80087fa:	74bb      	strb	r3, [r7, #18]
 80087fc:	e001      	b.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087fe:	7cfb      	ldrb	r3, [r7, #19]
 8008800:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	2b00      	cmp	r3, #0
 800880c:	d004      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	4618      	mov	r0, r3
 8008814:	f7ff fea9 	bl	800856a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 0302 	and.w	r3, r3, #2
 8008820:	2b00      	cmp	r3, #0
 8008822:	d004      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	4618      	mov	r0, r3
 800882a:	f7ff fe9e 	bl	800856a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 0320 	and.w	r3, r3, #32
 8008836:	2b00      	cmp	r3, #0
 8008838:	d004      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	4618      	mov	r0, r3
 8008840:	f7ff fec0 	bl	80085c4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800884c:	2b00      	cmp	r3, #0
 800884e:	d004      	beq.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6a1b      	ldr	r3, [r3, #32]
 8008854:	4618      	mov	r0, r3
 8008856:	f7ff fee6 	bl	8008626 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008862:	2b00      	cmp	r3, #0
 8008864:	d004      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886a:	4618      	mov	r0, r3
 800886c:	f7ff fedb 	bl	8008626 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008878:	2b00      	cmp	r3, #0
 800887a:	d004      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008880:	4618      	mov	r0, r3
 8008882:	f7ff fed0 	bl	8008626 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800888e:	2b00      	cmp	r3, #0
 8008890:	d004      	beq.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	695b      	ldr	r3, [r3, #20]
 8008896:	4618      	mov	r0, r3
 8008898:	f7ff fea9 	bl	80085ee <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d004      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	699b      	ldr	r3, [r3, #24]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7ff fe9e 	bl	80085ee <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d004      	beq.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	69db      	ldr	r3, [r3, #28]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7ff fe93 	bl	80085ee <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 0310 	and.w	r3, r3, #16
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d011      	beq.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	4618      	mov	r0, r3
 80088da:	f7ff fe5e 	bl	800859a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088e6:	d107      	bne.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80088e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80088f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80088f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008900:	2b00      	cmp	r3, #0
 8008902:	d010      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008908:	4618      	mov	r0, r3
 800890a:	f7ff fea5 	bl	8008658 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008912:	2b00      	cmp	r3, #0
 8008914:	d107      	bne.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008920:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008924:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800892e:	2b00      	cmp	r3, #0
 8008930:	d011      	beq.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008936:	4618      	mov	r0, r3
 8008938:	f7ff fea3 	bl	8008682 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008944:	d107      	bne.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008954:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8008956:	7cbb      	ldrb	r3, [r7, #18]
}
 8008958:	4618      	mov	r0, r3
 800895a:	3718      	adds	r7, #24
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	58000400 	.word	0x58000400

08008964 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d071      	beq.n	8008a5a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800897c:	b2db      	uxtb	r3, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	d106      	bne.n	8008990 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7f9 fb9a 	bl	80020c4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2202      	movs	r2, #2
 8008994:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008998:	4b32      	ldr	r3, [pc, #200]	; (8008a64 <HAL_RTC_Init+0x100>)
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	f003 0310 	and.w	r3, r3, #16
 80089a0:	2b10      	cmp	r3, #16
 80089a2:	d051      	beq.n	8008a48 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089a4:	4b2f      	ldr	r3, [pc, #188]	; (8008a64 <HAL_RTC_Init+0x100>)
 80089a6:	22ca      	movs	r2, #202	; 0xca
 80089a8:	625a      	str	r2, [r3, #36]	; 0x24
 80089aa:	4b2e      	ldr	r3, [pc, #184]	; (8008a64 <HAL_RTC_Init+0x100>)
 80089ac:	2253      	movs	r2, #83	; 0x53
 80089ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 fa11 	bl	8008dd8 <RTC_EnterInitMode>
 80089b6:	4603      	mov	r3, r0
 80089b8:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80089ba:	7bfb      	ldrb	r3, [r7, #15]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d13f      	bne.n	8008a40 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80089c0:	4b28      	ldr	r3, [pc, #160]	; (8008a64 <HAL_RTC_Init+0x100>)
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	4a27      	ldr	r2, [pc, #156]	; (8008a64 <HAL_RTC_Init+0x100>)
 80089c6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80089ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089ce:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80089d0:	4b24      	ldr	r3, [pc, #144]	; (8008a64 <HAL_RTC_Init+0x100>)
 80089d2:	699a      	ldr	r2, [r3, #24]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6859      	ldr	r1, [r3, #4]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	4319      	orrs	r1, r3
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	430b      	orrs	r3, r1
 80089e4:	491f      	ldr	r1, [pc, #124]	; (8008a64 <HAL_RTC_Init+0x100>)
 80089e6:	4313      	orrs	r3, r2
 80089e8:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	68da      	ldr	r2, [r3, #12]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	041b      	lsls	r3, r3, #16
 80089f4:	491b      	ldr	r1, [pc, #108]	; (8008a64 <HAL_RTC_Init+0x100>)
 80089f6:	4313      	orrs	r3, r2
 80089f8:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80089fa:	4b1a      	ldr	r3, [pc, #104]	; (8008a64 <HAL_RTC_Init+0x100>)
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0a:	430b      	orrs	r3, r1
 8008a0c:	4915      	ldr	r1, [pc, #84]	; (8008a64 <HAL_RTC_Init+0x100>)
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fa14 	bl	8008e40 <RTC_ExitInitMode>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8008a1c:	7bfb      	ldrb	r3, [r7, #15]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10e      	bne.n	8008a40 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8008a22:	4b10      	ldr	r3, [pc, #64]	; (8008a64 <HAL_RTC_Init+0x100>)
 8008a24:	699b      	ldr	r3, [r3, #24]
 8008a26:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a19      	ldr	r1, [r3, #32]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	69db      	ldr	r3, [r3, #28]
 8008a32:	4319      	orrs	r1, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	695b      	ldr	r3, [r3, #20]
 8008a38:	430b      	orrs	r3, r1
 8008a3a:	490a      	ldr	r1, [pc, #40]	; (8008a64 <HAL_RTC_Init+0x100>)
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a40:	4b08      	ldr	r3, [pc, #32]	; (8008a64 <HAL_RTC_Init+0x100>)
 8008a42:	22ff      	movs	r2, #255	; 0xff
 8008a44:	625a      	str	r2, [r3, #36]	; 0x24
 8008a46:	e001      	b.n	8008a4c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008a4c:	7bfb      	ldrb	r3, [r7, #15]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d103      	bne.n	8008a5a <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	40002800 	.word	0x40002800

08008a68 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008a68:	b590      	push	{r4, r7, lr}
 8008a6a:	b087      	sub	sp, #28
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008a74:	2300      	movs	r3, #0
 8008a76:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d101      	bne.n	8008a86 <HAL_RTC_SetAlarm_IT+0x1e>
 8008a82:	2302      	movs	r3, #2
 8008a84:	e0f3      	b.n	8008c6e <HAL_RTC_SetAlarm_IT+0x206>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2201      	movs	r2, #1
 8008a8a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2202      	movs	r2, #2
 8008a92:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8008a96:	4b78      	ldr	r3, [pc, #480]	; (8008c78 <HAL_RTC_SetAlarm_IT+0x210>)
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a9e:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aa6:	d06a      	beq.n	8008b7e <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d13a      	bne.n	8008b24 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008aae:	4b72      	ldr	r3, [pc, #456]	; (8008c78 <HAL_RTC_SetAlarm_IT+0x210>)
 8008ab0:	699b      	ldr	r3, [r3, #24]
 8008ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d102      	bne.n	8008ac0 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	2200      	movs	r2, #0
 8008abe:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	695b      	ldr	r3, [r3, #20]
 8008ac4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f000 f9f5 	bl	8008ebc <RTC_ByteToBcd2>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	785b      	ldrb	r3, [r3, #1]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 f9ee 	bl	8008ebc <RTC_ByteToBcd2>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008ae4:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	789b      	ldrb	r3, [r3, #2]
 8008aea:	4618      	mov	r0, r3
 8008aec:	f000 f9e6 	bl	8008ebc <RTC_ByteToBcd2>
 8008af0:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008af2:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	78db      	ldrb	r3, [r3, #3]
 8008afa:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008afc:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008b06:	4618      	mov	r0, r3
 8008b08:	f000 f9d8 	bl	8008ebc <RTC_ByteToBcd2>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008b10:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008b18:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	617b      	str	r3, [r7, #20]
 8008b22:	e02c      	b.n	8008b7e <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	695b      	ldr	r3, [r3, #20]
 8008b28:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8008b2c:	d00d      	beq.n	8008b4a <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	695b      	ldr	r3, [r3, #20]
 8008b32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b36:	d008      	beq.n	8008b4a <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008b38:	4b4f      	ldr	r3, [pc, #316]	; (8008c78 <HAL_RTC_SetAlarm_IT+0x210>)
 8008b3a:	699b      	ldr	r3, [r3, #24]
 8008b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d102      	bne.n	8008b4a <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	2200      	movs	r2, #0
 8008b48:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	785b      	ldrb	r3, [r3, #1]
 8008b54:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008b56:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008b58:	68ba      	ldr	r2, [r7, #8]
 8008b5a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008b5c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	78db      	ldrb	r3, [r3, #3]
 8008b62:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008b64:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008b6c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008b6e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008b74:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b7e:	4b3e      	ldr	r3, [pc, #248]	; (8008c78 <HAL_RTC_SetAlarm_IT+0x210>)
 8008b80:	22ca      	movs	r2, #202	; 0xca
 8008b82:	625a      	str	r2, [r3, #36]	; 0x24
 8008b84:	4b3c      	ldr	r3, [pc, #240]	; (8008c78 <HAL_RTC_SetAlarm_IT+0x210>)
 8008b86:	2253      	movs	r2, #83	; 0x53
 8008b88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b92:	d12c      	bne.n	8008bee <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008b94:	4b38      	ldr	r3, [pc, #224]	; (8008c78 <HAL_RTC_SetAlarm_IT+0x210>)
 8008b96:	699b      	ldr	r3, [r3, #24]
 8008b98:	4a37      	ldr	r2, [pc, #220]	; (8008c78 <HAL_RTC_SetAlarm_IT+0x210>)
 8008b9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008b9e:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008ba0:	4b35      	ldr	r3, [pc, #212]	; (8008c78 <HAL_RTC_SetAlarm_IT+0x210>)
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bac:	d107      	bne.n	8008bbe <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	699a      	ldr	r2, [r3, #24]
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	69db      	ldr	r3, [r3, #28]
 8008bb6:	4930      	ldr	r1, [pc, #192]	; (8008c78 <HAL_RTC_SetAlarm_IT+0x210>)
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	644b      	str	r3, [r1, #68]	; 0x44
 8008bbc:	e006      	b.n	8008bcc <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8008bbe:	4a2e      	ldr	r2, [pc, #184]	; (8008c78 <HAL_RTC_SetAlarm_IT+0x210>)
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8008bc4:	4a2c      	ldr	r2, [pc, #176]	; (8008c78 <HAL_RTC_SetAlarm_IT+0x210>)
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	699b      	ldr	r3, [r3, #24]
 8008bca:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8008bcc:	4a2a      	ldr	r2, [pc, #168]	; (8008c78 <HAL_RTC_SetAlarm_IT+0x210>)
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd8:	f043 0201 	orr.w	r2, r3, #1
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008be0:	4b25      	ldr	r3, [pc, #148]	; (8008c78 <HAL_RTC_SetAlarm_IT+0x210>)
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	4a24      	ldr	r2, [pc, #144]	; (8008c78 <HAL_RTC_SetAlarm_IT+0x210>)
 8008be6:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8008bea:	6193      	str	r3, [r2, #24]
 8008bec:	e02b      	b.n	8008c46 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008bee:	4b22      	ldr	r3, [pc, #136]	; (8008c78 <HAL_RTC_SetAlarm_IT+0x210>)
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	4a21      	ldr	r2, [pc, #132]	; (8008c78 <HAL_RTC_SetAlarm_IT+0x210>)
 8008bf4:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8008bf8:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008bfa:	4b1f      	ldr	r3, [pc, #124]	; (8008c78 <HAL_RTC_SetAlarm_IT+0x210>)
 8008bfc:	2202      	movs	r2, #2
 8008bfe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c06:	d107      	bne.n	8008c18 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	699a      	ldr	r2, [r3, #24]
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	69db      	ldr	r3, [r3, #28]
 8008c10:	4919      	ldr	r1, [pc, #100]	; (8008c78 <HAL_RTC_SetAlarm_IT+0x210>)
 8008c12:	4313      	orrs	r3, r2
 8008c14:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008c16:	e006      	b.n	8008c26 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8008c18:	4a17      	ldr	r2, [pc, #92]	; (8008c78 <HAL_RTC_SetAlarm_IT+0x210>)
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8008c1e:	4a16      	ldr	r2, [pc, #88]	; (8008c78 <HAL_RTC_SetAlarm_IT+0x210>)
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8008c26:	4a14      	ldr	r2, [pc, #80]	; (8008c78 <HAL_RTC_SetAlarm_IT+0x210>)
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c32:	f043 0202 	orr.w	r2, r3, #2
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008c3a:	4b0f      	ldr	r3, [pc, #60]	; (8008c78 <HAL_RTC_SetAlarm_IT+0x210>)
 8008c3c:	699b      	ldr	r3, [r3, #24]
 8008c3e:	4a0e      	ldr	r2, [pc, #56]	; (8008c78 <HAL_RTC_SetAlarm_IT+0x210>)
 8008c40:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8008c44:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8008c46:	4b0d      	ldr	r3, [pc, #52]	; (8008c7c <HAL_RTC_SetAlarm_IT+0x214>)
 8008c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c4c:	4a0b      	ldr	r2, [pc, #44]	; (8008c7c <HAL_RTC_SetAlarm_IT+0x214>)
 8008c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c52:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c56:	4b08      	ldr	r3, [pc, #32]	; (8008c78 <HAL_RTC_SetAlarm_IT+0x210>)
 8008c58:	22ff      	movs	r2, #255	; 0xff
 8008c5a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	371c      	adds	r7, #28
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd90      	pop	{r4, r7, pc}
 8008c76:	bf00      	nop
 8008c78:	40002800 	.word	0x40002800
 8008c7c:	58000800 	.word	0x58000800

08008c80 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d101      	bne.n	8008c98 <HAL_RTC_DeactivateAlarm+0x18>
 8008c94:	2302      	movs	r3, #2
 8008c96:	e048      	b.n	8008d2a <HAL_RTC_DeactivateAlarm+0xaa>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ca8:	4b22      	ldr	r3, [pc, #136]	; (8008d34 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008caa:	22ca      	movs	r2, #202	; 0xca
 8008cac:	625a      	str	r2, [r3, #36]	; 0x24
 8008cae:	4b21      	ldr	r3, [pc, #132]	; (8008d34 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008cb0:	2253      	movs	r2, #83	; 0x53
 8008cb2:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cba:	d115      	bne.n	8008ce8 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008cbc:	4b1d      	ldr	r3, [pc, #116]	; (8008d34 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008cbe:	699b      	ldr	r3, [r3, #24]
 8008cc0:	4a1c      	ldr	r2, [pc, #112]	; (8008d34 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008cc2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008cc6:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8008cc8:	4b1a      	ldr	r3, [pc, #104]	; (8008d34 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ccc:	4a19      	ldr	r2, [pc, #100]	; (8008d34 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008cce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008cd2:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd8:	f023 0201 	bic.w	r2, r3, #1
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008ce0:	4b14      	ldr	r3, [pc, #80]	; (8008d34 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	65da      	str	r2, [r3, #92]	; 0x5c
 8008ce6:	e014      	b.n	8008d12 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008ce8:	4b12      	ldr	r3, [pc, #72]	; (8008d34 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008cea:	699b      	ldr	r3, [r3, #24]
 8008cec:	4a11      	ldr	r2, [pc, #68]	; (8008d34 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008cee:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8008cf2:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8008cf4:	4b0f      	ldr	r3, [pc, #60]	; (8008d34 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cf8:	4a0e      	ldr	r2, [pc, #56]	; (8008d34 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008cfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008cfe:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d04:	f023 0202 	bic.w	r2, r3, #2
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008d0c:	4b09      	ldr	r3, [pc, #36]	; (8008d34 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008d0e:	2202      	movs	r2, #2
 8008d10:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d12:	4b08      	ldr	r3, [pc, #32]	; (8008d34 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008d14:	22ff      	movs	r2, #255	; 0xff
 8008d16:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	370c      	adds	r7, #12
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bc80      	pop	{r7}
 8008d32:	4770      	bx	lr
 8008d34:	40002800 	.word	0x40002800

08008d38 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8008d40:	4b11      	ldr	r3, [pc, #68]	; (8008d88 <HAL_RTC_AlarmIRQHandler+0x50>)
 8008d42:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d48:	4013      	ands	r3, r2
 8008d4a:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f003 0301 	and.w	r3, r3, #1
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d005      	beq.n	8008d62 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008d56:	4b0c      	ldr	r3, [pc, #48]	; (8008d88 <HAL_RTC_AlarmIRQHandler+0x50>)
 8008d58:	2201      	movs	r2, #1
 8008d5a:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f7f9 ff1a 	bl	8002b96 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f003 0302 	and.w	r3, r3, #2
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d005      	beq.n	8008d78 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008d6c:	4b06      	ldr	r3, [pc, #24]	; (8008d88 <HAL_RTC_AlarmIRQHandler+0x50>)
 8008d6e:	2202      	movs	r2, #2
 8008d70:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f94a 	bl	800900c <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8008d80:	bf00      	nop
 8008d82:	3710      	adds	r7, #16
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	40002800 	.word	0x40002800

08008d8c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8008d94:	4b0f      	ldr	r3, [pc, #60]	; (8008dd4 <HAL_RTC_WaitForSynchro+0x48>)
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	4a0e      	ldr	r2, [pc, #56]	; (8008dd4 <HAL_RTC_WaitForSynchro+0x48>)
 8008d9a:	f023 0320 	bic.w	r3, r3, #32
 8008d9e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8008da0:	f7f9 fd18 	bl	80027d4 <HAL_GetTick>
 8008da4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008da6:	e009      	b.n	8008dbc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008da8:	f7f9 fd14 	bl	80027d4 <HAL_GetTick>
 8008dac:	4602      	mov	r2, r0
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008db6:	d901      	bls.n	8008dbc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008db8:	2303      	movs	r3, #3
 8008dba:	e006      	b.n	8008dca <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008dbc:	4b05      	ldr	r3, [pc, #20]	; (8008dd4 <HAL_RTC_WaitForSynchro+0x48>)
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	f003 0320 	and.w	r3, r3, #32
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d0ef      	beq.n	8008da8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	40002800 	.word	0x40002800

08008dd8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008de0:	2300      	movs	r3, #0
 8008de2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008de4:	4b15      	ldr	r3, [pc, #84]	; (8008e3c <RTC_EnterInitMode+0x64>)
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d120      	bne.n	8008e32 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008df0:	4b12      	ldr	r3, [pc, #72]	; (8008e3c <RTC_EnterInitMode+0x64>)
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	4a11      	ldr	r2, [pc, #68]	; (8008e3c <RTC_EnterInitMode+0x64>)
 8008df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dfa:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8008dfc:	f7f9 fcea 	bl	80027d4 <HAL_GetTick>
 8008e00:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008e02:	e00d      	b.n	8008e20 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008e04:	f7f9 fce6 	bl	80027d4 <HAL_GetTick>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e12:	d905      	bls.n	8008e20 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008e14:	2303      	movs	r3, #3
 8008e16:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2203      	movs	r2, #3
 8008e1c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008e20:	4b06      	ldr	r3, [pc, #24]	; (8008e3c <RTC_EnterInitMode+0x64>)
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d102      	bne.n	8008e32 <RTC_EnterInitMode+0x5a>
 8008e2c:	7bfb      	ldrb	r3, [r7, #15]
 8008e2e:	2b03      	cmp	r3, #3
 8008e30:	d1e8      	bne.n	8008e04 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8008e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	40002800 	.word	0x40002800

08008e40 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008e4c:	4b1a      	ldr	r3, [pc, #104]	; (8008eb8 <RTC_ExitInitMode+0x78>)
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	4a19      	ldr	r2, [pc, #100]	; (8008eb8 <RTC_ExitInitMode+0x78>)
 8008e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e56:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008e58:	4b17      	ldr	r3, [pc, #92]	; (8008eb8 <RTC_ExitInitMode+0x78>)
 8008e5a:	699b      	ldr	r3, [r3, #24]
 8008e5c:	f003 0320 	and.w	r3, r3, #32
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d10c      	bne.n	8008e7e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7ff ff91 	bl	8008d8c <HAL_RTC_WaitForSynchro>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d01e      	beq.n	8008eae <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2203      	movs	r2, #3
 8008e74:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008e78:	2303      	movs	r3, #3
 8008e7a:	73fb      	strb	r3, [r7, #15]
 8008e7c:	e017      	b.n	8008eae <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008e7e:	4b0e      	ldr	r3, [pc, #56]	; (8008eb8 <RTC_ExitInitMode+0x78>)
 8008e80:	699b      	ldr	r3, [r3, #24]
 8008e82:	4a0d      	ldr	r2, [pc, #52]	; (8008eb8 <RTC_ExitInitMode+0x78>)
 8008e84:	f023 0320 	bic.w	r3, r3, #32
 8008e88:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f7ff ff7e 	bl	8008d8c <HAL_RTC_WaitForSynchro>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d005      	beq.n	8008ea2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2203      	movs	r2, #3
 8008e9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008ea2:	4b05      	ldr	r3, [pc, #20]	; (8008eb8 <RTC_ExitInitMode+0x78>)
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	4a04      	ldr	r2, [pc, #16]	; (8008eb8 <RTC_ExitInitMode+0x78>)
 8008ea8:	f043 0320 	orr.w	r3, r3, #32
 8008eac:	6193      	str	r3, [r2, #24]
  }

  return status;
 8008eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	40002800 	.word	0x40002800

08008ebc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8008eca:	79fb      	ldrb	r3, [r7, #7]
 8008ecc:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8008ece:	e005      	b.n	8008edc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8008ed6:	7afb      	ldrb	r3, [r7, #11]
 8008ed8:	3b0a      	subs	r3, #10
 8008eda:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8008edc:	7afb      	ldrb	r3, [r7, #11]
 8008ede:	2b09      	cmp	r3, #9
 8008ee0:	d8f6      	bhi.n	8008ed0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	011b      	lsls	r3, r3, #4
 8008ee8:	b2da      	uxtb	r2, r3
 8008eea:	7afb      	ldrb	r3, [r7, #11]
 8008eec:	4313      	orrs	r3, r2
 8008eee:	b2db      	uxtb	r3, r3
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3714      	adds	r7, #20
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bc80      	pop	{r7}
 8008ef8:	4770      	bx	lr
	...

08008efc <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d101      	bne.n	8008f12 <HAL_RTCEx_EnableBypassShadow+0x16>
 8008f0e:	2302      	movs	r3, #2
 8008f10:	e01f      	b.n	8008f52 <HAL_RTCEx_EnableBypassShadow+0x56>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2201      	movs	r2, #1
 8008f16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2202      	movs	r2, #2
 8008f1e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f22:	4b0e      	ldr	r3, [pc, #56]	; (8008f5c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008f24:	22ca      	movs	r2, #202	; 0xca
 8008f26:	625a      	str	r2, [r3, #36]	; 0x24
 8008f28:	4b0c      	ldr	r3, [pc, #48]	; (8008f5c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008f2a:	2253      	movs	r2, #83	; 0x53
 8008f2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008f2e:	4b0b      	ldr	r3, [pc, #44]	; (8008f5c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	4a0a      	ldr	r2, [pc, #40]	; (8008f5c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008f34:	f043 0320 	orr.w	r3, r3, #32
 8008f38:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f3a:	4b08      	ldr	r3, [pc, #32]	; (8008f5c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008f3c:	22ff      	movs	r2, #255	; 0xff
 8008f3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	370c      	adds	r7, #12
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bc80      	pop	{r7}
 8008f5a:	4770      	bx	lr
 8008f5c:	40002800 	.word	0x40002800

08008f60 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d101      	bne.n	8008f76 <HAL_RTCEx_SetSSRU_IT+0x16>
 8008f72:	2302      	movs	r3, #2
 8008f74:	e027      	b.n	8008fc6 <HAL_RTCEx_SetSSRU_IT+0x66>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2202      	movs	r2, #2
 8008f82:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f86:	4b12      	ldr	r3, [pc, #72]	; (8008fd0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008f88:	22ca      	movs	r2, #202	; 0xca
 8008f8a:	625a      	str	r2, [r3, #36]	; 0x24
 8008f8c:	4b10      	ldr	r3, [pc, #64]	; (8008fd0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008f8e:	2253      	movs	r2, #83	; 0x53
 8008f90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8008f92:	4b0f      	ldr	r3, [pc, #60]	; (8008fd0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008f94:	699b      	ldr	r3, [r3, #24]
 8008f96:	4a0e      	ldr	r2, [pc, #56]	; (8008fd0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f9c:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8008f9e:	4b0d      	ldr	r3, [pc, #52]	; (8008fd4 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8008fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fa4:	4a0b      	ldr	r2, [pc, #44]	; (8008fd4 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8008fa6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008faa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fae:	4b08      	ldr	r3, [pc, #32]	; (8008fd0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008fb0:	22ff      	movs	r2, #255	; 0xff
 8008fb2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	370c      	adds	r7, #12
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bc80      	pop	{r7}
 8008fce:	4770      	bx	lr
 8008fd0:	40002800 	.word	0x40002800
 8008fd4:	58000800 	.word	0x58000800

08008fd8 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8008fe0:	4b09      	ldr	r3, [pc, #36]	; (8009008 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d005      	beq.n	8008ff8 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8008fec:	4b06      	ldr	r3, [pc, #24]	; (8009008 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008fee:	2240      	movs	r2, #64	; 0x40
 8008ff0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f7f9 fdd9 	bl	8002baa <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8009000:	bf00      	nop
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	40002800 	.word	0x40002800

0800900c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8009014:	bf00      	nop
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	bc80      	pop	{r7}
 800901c:	4770      	bx	lr
	...

08009020 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009020:	b480      	push	{r7}
 8009022:	b087      	sub	sp, #28
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800902c:	4b07      	ldr	r3, [pc, #28]	; (800904c <HAL_RTCEx_BKUPWrite+0x2c>)
 800902e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	697a      	ldr	r2, [r7, #20]
 8009036:	4413      	add	r3, r2
 8009038:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	601a      	str	r2, [r3, #0]
}
 8009040:	bf00      	nop
 8009042:	371c      	adds	r7, #28
 8009044:	46bd      	mov	sp, r7
 8009046:	bc80      	pop	{r7}
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	4000b100 	.word	0x4000b100

08009050 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800905a:	4b07      	ldr	r3, [pc, #28]	; (8009078 <HAL_RTCEx_BKUPRead+0x28>)
 800905c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	4413      	add	r3, r2
 8009066:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3714      	adds	r7, #20
 8009070:	46bd      	mov	sp, r7
 8009072:	bc80      	pop	{r7}
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	4000b100 	.word	0x4000b100

0800907c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d101      	bne.n	800908e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	e0c6      	b.n	800921c <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009092:	2b00      	cmp	r3, #0
 8009094:	d108      	bne.n	80090a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800909e:	d009      	beq.n	80090b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	61da      	str	r2, [r3, #28]
 80090a6:	e005      	b.n	80090b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d106      	bne.n	80090ce <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f7f9 f8a5 	bl	8002218 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2202      	movs	r2, #2
 80090d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090e4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80090ee:	d902      	bls.n	80090f6 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80090f0:	2300      	movs	r3, #0
 80090f2:	60fb      	str	r3, [r7, #12]
 80090f4:	e002      	b.n	80090fc <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80090f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090fa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009104:	d007      	beq.n	8009116 <HAL_SPI_Init+0x9a>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800910e:	d002      	beq.n	8009116 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009126:	431a      	orrs	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	691b      	ldr	r3, [r3, #16]
 800912c:	f003 0302 	and.w	r3, r3, #2
 8009130:	431a      	orrs	r2, r3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	695b      	ldr	r3, [r3, #20]
 8009136:	f003 0301 	and.w	r3, r3, #1
 800913a:	431a      	orrs	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009144:	431a      	orrs	r2, r3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	69db      	ldr	r3, [r3, #28]
 800914a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800914e:	431a      	orrs	r2, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a1b      	ldr	r3, [r3, #32]
 8009154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009158:	ea42 0103 	orr.w	r1, r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009160:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	430a      	orrs	r2, r1
 800916a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009174:	d11b      	bne.n	80091ae <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10b      	bne.n	8009196 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009186:	d903      	bls.n	8009190 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2202      	movs	r2, #2
 800918c:	631a      	str	r2, [r3, #48]	; 0x30
 800918e:	e002      	b.n	8009196 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800919a:	2b02      	cmp	r3, #2
 800919c:	d107      	bne.n	80091ae <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	699b      	ldr	r3, [r3, #24]
 80091b2:	0c1b      	lsrs	r3, r3, #16
 80091b4:	f003 0204 	and.w	r2, r3, #4
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091bc:	f003 0310 	and.w	r3, r3, #16
 80091c0:	431a      	orrs	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091c6:	f003 0308 	and.w	r3, r3, #8
 80091ca:	431a      	orrs	r2, r3
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80091d4:	ea42 0103 	orr.w	r1, r2, r3
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	430a      	orrs	r2, r1
 80091e4:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091ee:	d105      	bne.n	80091fc <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	b292      	uxth	r2, r2
 80091fa:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	69da      	ldr	r2, [r3, #28]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800920a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2201      	movs	r2, #1
 8009216:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3710      	adds	r7, #16
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <LL_PWR_SetRadioBusyTrigger>:
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800922c:	4b06      	ldr	r3, [pc, #24]	; (8009248 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009234:	4904      	ldr	r1, [pc, #16]	; (8009248 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4313      	orrs	r3, r2
 800923a:	608b      	str	r3, [r1, #8]
}
 800923c:	bf00      	nop
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	bc80      	pop	{r7}
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	58000400 	.word	0x58000400

0800924c <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 800924c:	b480      	push	{r7}
 800924e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009250:	4b05      	ldr	r3, [pc, #20]	; (8009268 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8009252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009256:	4a04      	ldr	r2, [pc, #16]	; (8009268 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8009258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800925c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009260:	bf00      	nop
 8009262:	46bd      	mov	sp, r7
 8009264:	bc80      	pop	{r7}
 8009266:	4770      	bx	lr
 8009268:	58000400 	.word	0x58000400

0800926c <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 800926c:	b480      	push	{r7}
 800926e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009270:	4b05      	ldr	r3, [pc, #20]	; (8009288 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8009272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009276:	4a04      	ldr	r2, [pc, #16]	; (8009288 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8009278:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800927c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009280:	bf00      	nop
 8009282:	46bd      	mov	sp, r7
 8009284:	bc80      	pop	{r7}
 8009286:	4770      	bx	lr
 8009288:	58000400 	.word	0x58000400

0800928c <LL_PWR_ClearFlag_RFBUSY>:
{
 800928c:	b480      	push	{r7}
 800928e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8009290:	4b03      	ldr	r3, [pc, #12]	; (80092a0 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8009292:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009296:	619a      	str	r2, [r3, #24]
}
 8009298:	bf00      	nop
 800929a:	46bd      	mov	sp, r7
 800929c:	bc80      	pop	{r7}
 800929e:	4770      	bx	lr
 80092a0:	58000400 	.word	0x58000400

080092a4 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 80092a4:	b480      	push	{r7}
 80092a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80092a8:	4b06      	ldr	r3, [pc, #24]	; (80092c4 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80092aa:	695b      	ldr	r3, [r3, #20]
 80092ac:	f003 0302 	and.w	r3, r3, #2
 80092b0:	2b02      	cmp	r3, #2
 80092b2:	d101      	bne.n	80092b8 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80092b4:	2301      	movs	r3, #1
 80092b6:	e000      	b.n	80092ba <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	46bd      	mov	sp, r7
 80092be:	bc80      	pop	{r7}
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	58000400 	.word	0x58000400

080092c8 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 80092c8:	b480      	push	{r7}
 80092ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80092cc:	4b06      	ldr	r3, [pc, #24]	; (80092e8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80092ce:	695b      	ldr	r3, [r3, #20]
 80092d0:	f003 0304 	and.w	r3, r3, #4
 80092d4:	2b04      	cmp	r3, #4
 80092d6:	d101      	bne.n	80092dc <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80092d8:	2301      	movs	r3, #1
 80092da:	e000      	b.n	80092de <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bc80      	pop	{r7}
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	58000400 	.word	0x58000400

080092ec <LL_RCC_RF_DisableReset>:
{
 80092ec:	b480      	push	{r7}
 80092ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80092f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80092fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009300:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009304:	bf00      	nop
 8009306:	46bd      	mov	sp, r7
 8009308:	bc80      	pop	{r7}
 800930a:	4770      	bx	lr

0800930c <LL_RCC_IsRFUnderReset>:
{
 800930c:	b480      	push	{r7}
 800930e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8009310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009314:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800931c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009320:	d101      	bne.n	8009326 <LL_RCC_IsRFUnderReset+0x1a>
 8009322:	2301      	movs	r3, #1
 8009324:	e000      	b.n	8009328 <LL_RCC_IsRFUnderReset+0x1c>
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	46bd      	mov	sp, r7
 800932c:	bc80      	pop	{r7}
 800932e:	4770      	bx	lr

08009330 <LL_EXTI_EnableIT_32_63>:
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8009338:	4b06      	ldr	r3, [pc, #24]	; (8009354 <LL_EXTI_EnableIT_32_63+0x24>)
 800933a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800933e:	4905      	ldr	r1, [pc, #20]	; (8009354 <LL_EXTI_EnableIT_32_63+0x24>)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4313      	orrs	r3, r2
 8009344:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009348:	bf00      	nop
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	bc80      	pop	{r7}
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	58000800 	.word	0x58000800

08009358 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d103      	bne.n	800936e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	73fb      	strb	r3, [r7, #15]
    return status;
 800936a:	7bfb      	ldrb	r3, [r7, #15]
 800936c:	e052      	b.n	8009414 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800936e:	2300      	movs	r3, #0
 8009370:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	799b      	ldrb	r3, [r3, #6]
 8009376:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8009378:	7bbb      	ldrb	r3, [r7, #14]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d002      	beq.n	8009384 <HAL_SUBGHZ_Init+0x2c>
 800937e:	7bbb      	ldrb	r3, [r7, #14]
 8009380:	2b03      	cmp	r3, #3
 8009382:	d109      	bne.n	8009398 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f7f9 f87a 	bl	8002484 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8009390:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009394:	f7ff ffcc 	bl	8009330 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8009398:	7bbb      	ldrb	r3, [r7, #14]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d126      	bne.n	80093ec <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2202      	movs	r2, #2
 80093a2:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80093a4:	f7ff ffa2 	bl	80092ec <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80093a8:	4b1c      	ldr	r3, [pc, #112]	; (800941c <HAL_SUBGHZ_Init+0xc4>)
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	4613      	mov	r3, r2
 80093ae:	00db      	lsls	r3, r3, #3
 80093b0:	1a9b      	subs	r3, r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	0cdb      	lsrs	r3, r3, #19
 80093b6:	2264      	movs	r2, #100	; 0x64
 80093b8:	fb02 f303 	mul.w	r3, r2, r3
 80093bc:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d105      	bne.n	80093d0 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	609a      	str	r2, [r3, #8]
        break;
 80093ce:	e007      	b.n	80093e0 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	3b01      	subs	r3, #1
 80093d4:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80093d6:	f7ff ff99 	bl	800930c <LL_RCC_IsRFUnderReset>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1ee      	bne.n	80093be <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80093e0:	f7ff ff34 	bl	800924c <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80093e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80093e8:	f7ff ff1c 	bl	8009224 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80093ec:	f7ff ff4e 	bl	800928c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80093f0:	7bfb      	ldrb	r3, [r7, #15]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d10a      	bne.n	800940c <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4618      	mov	r0, r3
 80093fc:	f000 faac 	bl	8009958 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	719a      	strb	r2, [r3, #6]

  return status;
 8009412:	7bfb      	ldrb	r3, [r7, #15]
}
 8009414:	4618      	mov	r0, r3
 8009416:	3710      	adds	r7, #16
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	20000000 	.word	0x20000000

08009420 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b086      	sub	sp, #24
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	607a      	str	r2, [r7, #4]
 800942a:	461a      	mov	r2, r3
 800942c:	460b      	mov	r3, r1
 800942e:	817b      	strh	r3, [r7, #10]
 8009430:	4613      	mov	r3, r2
 8009432:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	799b      	ldrb	r3, [r3, #6]
 8009438:	b2db      	uxtb	r3, r3
 800943a:	2b01      	cmp	r3, #1
 800943c:	d14a      	bne.n	80094d4 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	795b      	ldrb	r3, [r3, #5]
 8009442:	2b01      	cmp	r3, #1
 8009444:	d101      	bne.n	800944a <HAL_SUBGHZ_WriteRegisters+0x2a>
 8009446:	2302      	movs	r3, #2
 8009448:	e045      	b.n	80094d6 <HAL_SUBGHZ_WriteRegisters+0xb6>
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2201      	movs	r2, #1
 800944e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2202      	movs	r2, #2
 8009454:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f000 fb4c 	bl	8009af4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800945c:	f7ff ff06 	bl	800926c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8009460:	210d      	movs	r1, #13
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f000 fa98 	bl	8009998 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8009468:	897b      	ldrh	r3, [r7, #10]
 800946a:	0a1b      	lsrs	r3, r3, #8
 800946c:	b29b      	uxth	r3, r3
 800946e:	b2db      	uxtb	r3, r3
 8009470:	4619      	mov	r1, r3
 8009472:	68f8      	ldr	r0, [r7, #12]
 8009474:	f000 fa90 	bl	8009998 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8009478:	897b      	ldrh	r3, [r7, #10]
 800947a:	b2db      	uxtb	r3, r3
 800947c:	4619      	mov	r1, r3
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	f000 fa8a 	bl	8009998 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009484:	2300      	movs	r3, #0
 8009486:	82bb      	strh	r3, [r7, #20]
 8009488:	e00a      	b.n	80094a0 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800948a:	8abb      	ldrh	r3, [r7, #20]
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	4413      	add	r3, r2
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	4619      	mov	r1, r3
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f000 fa7f 	bl	8009998 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800949a:	8abb      	ldrh	r3, [r7, #20]
 800949c:	3301      	adds	r3, #1
 800949e:	82bb      	strh	r3, [r7, #20]
 80094a0:	8aba      	ldrh	r2, [r7, #20]
 80094a2:	893b      	ldrh	r3, [r7, #8]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d3f0      	bcc.n	800948a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80094a8:	f7ff fed0 	bl	800924c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	f000 fb45 	bl	8009b3c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d002      	beq.n	80094c0 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	75fb      	strb	r3, [r7, #23]
 80094be:	e001      	b.n	80094c4 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80094c0:	2300      	movs	r3, #0
 80094c2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2201      	movs	r2, #1
 80094c8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2200      	movs	r2, #0
 80094ce:	715a      	strb	r2, [r3, #5]

    return status;
 80094d0:	7dfb      	ldrb	r3, [r7, #23]
 80094d2:	e000      	b.n	80094d6 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80094d4:	2302      	movs	r3, #2
  }
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3718      	adds	r7, #24
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b088      	sub	sp, #32
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	60f8      	str	r0, [r7, #12]
 80094e6:	607a      	str	r2, [r7, #4]
 80094e8:	461a      	mov	r2, r3
 80094ea:	460b      	mov	r3, r1
 80094ec:	817b      	strh	r3, [r7, #10]
 80094ee:	4613      	mov	r3, r2
 80094f0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	799b      	ldrb	r3, [r3, #6]
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d14a      	bne.n	8009596 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	795b      	ldrb	r3, [r3, #5]
 8009504:	2b01      	cmp	r3, #1
 8009506:	d101      	bne.n	800950c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8009508:	2302      	movs	r3, #2
 800950a:	e045      	b.n	8009598 <HAL_SUBGHZ_ReadRegisters+0xba>
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2201      	movs	r2, #1
 8009510:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009512:	68f8      	ldr	r0, [r7, #12]
 8009514:	f000 faee 	bl	8009af4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009518:	f7ff fea8 	bl	800926c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800951c:	211d      	movs	r1, #29
 800951e:	68f8      	ldr	r0, [r7, #12]
 8009520:	f000 fa3a 	bl	8009998 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8009524:	897b      	ldrh	r3, [r7, #10]
 8009526:	0a1b      	lsrs	r3, r3, #8
 8009528:	b29b      	uxth	r3, r3
 800952a:	b2db      	uxtb	r3, r3
 800952c:	4619      	mov	r1, r3
 800952e:	68f8      	ldr	r0, [r7, #12]
 8009530:	f000 fa32 	bl	8009998 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8009534:	897b      	ldrh	r3, [r7, #10]
 8009536:	b2db      	uxtb	r3, r3
 8009538:	4619      	mov	r1, r3
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	f000 fa2c 	bl	8009998 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8009540:	2100      	movs	r1, #0
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f000 fa28 	bl	8009998 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009548:	2300      	movs	r3, #0
 800954a:	82fb      	strh	r3, [r7, #22]
 800954c:	e009      	b.n	8009562 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800954e:	69b9      	ldr	r1, [r7, #24]
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	f000 fa77 	bl	8009a44 <SUBGHZSPI_Receive>
      pData++;
 8009556:	69bb      	ldr	r3, [r7, #24]
 8009558:	3301      	adds	r3, #1
 800955a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800955c:	8afb      	ldrh	r3, [r7, #22]
 800955e:	3301      	adds	r3, #1
 8009560:	82fb      	strh	r3, [r7, #22]
 8009562:	8afa      	ldrh	r2, [r7, #22]
 8009564:	893b      	ldrh	r3, [r7, #8]
 8009566:	429a      	cmp	r2, r3
 8009568:	d3f1      	bcc.n	800954e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800956a:	f7ff fe6f 	bl	800924c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f000 fae4 	bl	8009b3c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d002      	beq.n	8009582 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	77fb      	strb	r3, [r7, #31]
 8009580:	e001      	b.n	8009586 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8009582:	2300      	movs	r3, #0
 8009584:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2201      	movs	r2, #1
 800958a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	715a      	strb	r2, [r3, #5]

    return status;
 8009592:	7ffb      	ldrb	r3, [r7, #31]
 8009594:	e000      	b.n	8009598 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8009596:	2302      	movs	r3, #2
  }
}
 8009598:	4618      	mov	r0, r3
 800959a:	3720      	adds	r7, #32
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b086      	sub	sp, #24
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	607a      	str	r2, [r7, #4]
 80095aa:	461a      	mov	r2, r3
 80095ac:	460b      	mov	r3, r1
 80095ae:	72fb      	strb	r3, [r7, #11]
 80095b0:	4613      	mov	r3, r2
 80095b2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	799b      	ldrb	r3, [r3, #6]
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d14a      	bne.n	8009654 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	795b      	ldrb	r3, [r3, #5]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d101      	bne.n	80095ca <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80095c6:	2302      	movs	r3, #2
 80095c8:	e045      	b.n	8009656 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2201      	movs	r2, #1
 80095ce:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f000 fa8f 	bl	8009af4 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80095d6:	7afb      	ldrb	r3, [r7, #11]
 80095d8:	2b84      	cmp	r3, #132	; 0x84
 80095da:	d002      	beq.n	80095e2 <HAL_SUBGHZ_ExecSetCmd+0x42>
 80095dc:	7afb      	ldrb	r3, [r7, #11]
 80095de:	2b94      	cmp	r3, #148	; 0x94
 80095e0:	d103      	bne.n	80095ea <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2201      	movs	r2, #1
 80095e6:	711a      	strb	r2, [r3, #4]
 80095e8:	e002      	b.n	80095f0 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2200      	movs	r2, #0
 80095ee:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80095f0:	f7ff fe3c 	bl	800926c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80095f4:	7afb      	ldrb	r3, [r7, #11]
 80095f6:	4619      	mov	r1, r3
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f000 f9cd 	bl	8009998 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80095fe:	2300      	movs	r3, #0
 8009600:	82bb      	strh	r3, [r7, #20]
 8009602:	e00a      	b.n	800961a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009604:	8abb      	ldrh	r3, [r7, #20]
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	4413      	add	r3, r2
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	4619      	mov	r1, r3
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f000 f9c2 	bl	8009998 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009614:	8abb      	ldrh	r3, [r7, #20]
 8009616:	3301      	adds	r3, #1
 8009618:	82bb      	strh	r3, [r7, #20]
 800961a:	8aba      	ldrh	r2, [r7, #20]
 800961c:	893b      	ldrh	r3, [r7, #8]
 800961e:	429a      	cmp	r2, r3
 8009620:	d3f0      	bcc.n	8009604 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009622:	f7ff fe13 	bl	800924c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8009626:	7afb      	ldrb	r3, [r7, #11]
 8009628:	2b84      	cmp	r3, #132	; 0x84
 800962a:	d002      	beq.n	8009632 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f000 fa85 	bl	8009b3c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d002      	beq.n	8009640 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	75fb      	strb	r3, [r7, #23]
 800963e:	e001      	b.n	8009644 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8009640:	2300      	movs	r3, #0
 8009642:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2201      	movs	r2, #1
 8009648:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2200      	movs	r2, #0
 800964e:	715a      	strb	r2, [r3, #5]

    return status;
 8009650:	7dfb      	ldrb	r3, [r7, #23]
 8009652:	e000      	b.n	8009656 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8009654:	2302      	movs	r3, #2
  }
}
 8009656:	4618      	mov	r0, r3
 8009658:	3718      	adds	r7, #24
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b088      	sub	sp, #32
 8009662:	af00      	add	r7, sp, #0
 8009664:	60f8      	str	r0, [r7, #12]
 8009666:	607a      	str	r2, [r7, #4]
 8009668:	461a      	mov	r2, r3
 800966a:	460b      	mov	r3, r1
 800966c:	72fb      	strb	r3, [r7, #11]
 800966e:	4613      	mov	r3, r2
 8009670:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	799b      	ldrb	r3, [r3, #6]
 800967a:	b2db      	uxtb	r3, r3
 800967c:	2b01      	cmp	r3, #1
 800967e:	d13d      	bne.n	80096fc <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	795b      	ldrb	r3, [r3, #5]
 8009684:	2b01      	cmp	r3, #1
 8009686:	d101      	bne.n	800968c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8009688:	2302      	movs	r3, #2
 800968a:	e038      	b.n	80096fe <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2201      	movs	r2, #1
 8009690:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f000 fa2e 	bl	8009af4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009698:	f7ff fde8 	bl	800926c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800969c:	7afb      	ldrb	r3, [r7, #11]
 800969e:	4619      	mov	r1, r3
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f000 f979 	bl	8009998 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80096a6:	2100      	movs	r1, #0
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f000 f975 	bl	8009998 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80096ae:	2300      	movs	r3, #0
 80096b0:	82fb      	strh	r3, [r7, #22]
 80096b2:	e009      	b.n	80096c8 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80096b4:	69b9      	ldr	r1, [r7, #24]
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f000 f9c4 	bl	8009a44 <SUBGHZSPI_Receive>
      pData++;
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	3301      	adds	r3, #1
 80096c0:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80096c2:	8afb      	ldrh	r3, [r7, #22]
 80096c4:	3301      	adds	r3, #1
 80096c6:	82fb      	strh	r3, [r7, #22]
 80096c8:	8afa      	ldrh	r2, [r7, #22]
 80096ca:	893b      	ldrh	r3, [r7, #8]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d3f1      	bcc.n	80096b4 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80096d0:	f7ff fdbc 	bl	800924c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	f000 fa31 	bl	8009b3c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d002      	beq.n	80096e8 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	77fb      	strb	r3, [r7, #31]
 80096e6:	e001      	b.n	80096ec <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80096e8:	2300      	movs	r3, #0
 80096ea:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2201      	movs	r2, #1
 80096f0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2200      	movs	r2, #0
 80096f6:	715a      	strb	r2, [r3, #5]

    return status;
 80096f8:	7ffb      	ldrb	r3, [r7, #31]
 80096fa:	e000      	b.n	80096fe <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80096fc:	2302      	movs	r3, #2
  }
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3720      	adds	r7, #32
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b086      	sub	sp, #24
 800970a:	af00      	add	r7, sp, #0
 800970c:	60f8      	str	r0, [r7, #12]
 800970e:	607a      	str	r2, [r7, #4]
 8009710:	461a      	mov	r2, r3
 8009712:	460b      	mov	r3, r1
 8009714:	72fb      	strb	r3, [r7, #11]
 8009716:	4613      	mov	r3, r2
 8009718:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	799b      	ldrb	r3, [r3, #6]
 800971e:	b2db      	uxtb	r3, r3
 8009720:	2b01      	cmp	r3, #1
 8009722:	d13e      	bne.n	80097a2 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	795b      	ldrb	r3, [r3, #5]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d101      	bne.n	8009730 <HAL_SUBGHZ_WriteBuffer+0x2a>
 800972c:	2302      	movs	r3, #2
 800972e:	e039      	b.n	80097a4 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2201      	movs	r2, #1
 8009734:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f000 f9dc 	bl	8009af4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800973c:	f7ff fd96 	bl	800926c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8009740:	210e      	movs	r1, #14
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f000 f928 	bl	8009998 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8009748:	7afb      	ldrb	r3, [r7, #11]
 800974a:	4619      	mov	r1, r3
 800974c:	68f8      	ldr	r0, [r7, #12]
 800974e:	f000 f923 	bl	8009998 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009752:	2300      	movs	r3, #0
 8009754:	82bb      	strh	r3, [r7, #20]
 8009756:	e00a      	b.n	800976e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009758:	8abb      	ldrh	r3, [r7, #20]
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	4413      	add	r3, r2
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	4619      	mov	r1, r3
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f000 f918 	bl	8009998 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009768:	8abb      	ldrh	r3, [r7, #20]
 800976a:	3301      	adds	r3, #1
 800976c:	82bb      	strh	r3, [r7, #20]
 800976e:	8aba      	ldrh	r2, [r7, #20]
 8009770:	893b      	ldrh	r3, [r7, #8]
 8009772:	429a      	cmp	r2, r3
 8009774:	d3f0      	bcc.n	8009758 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009776:	f7ff fd69 	bl	800924c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	f000 f9de 	bl	8009b3c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d002      	beq.n	800978e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	75fb      	strb	r3, [r7, #23]
 800978c:	e001      	b.n	8009792 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800978e:	2300      	movs	r3, #0
 8009790:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2201      	movs	r2, #1
 8009796:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2200      	movs	r2, #0
 800979c:	715a      	strb	r2, [r3, #5]

    return status;
 800979e:	7dfb      	ldrb	r3, [r7, #23]
 80097a0:	e000      	b.n	80097a4 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80097a2:	2302      	movs	r3, #2
  }
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3718      	adds	r7, #24
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b088      	sub	sp, #32
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	607a      	str	r2, [r7, #4]
 80097b6:	461a      	mov	r2, r3
 80097b8:	460b      	mov	r3, r1
 80097ba:	72fb      	strb	r3, [r7, #11]
 80097bc:	4613      	mov	r3, r2
 80097be:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	799b      	ldrb	r3, [r3, #6]
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d141      	bne.n	8009852 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	795b      	ldrb	r3, [r3, #5]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d101      	bne.n	80097da <HAL_SUBGHZ_ReadBuffer+0x2e>
 80097d6:	2302      	movs	r3, #2
 80097d8:	e03c      	b.n	8009854 <HAL_SUBGHZ_ReadBuffer+0xa8>
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2201      	movs	r2, #1
 80097de:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f000 f987 	bl	8009af4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80097e6:	f7ff fd41 	bl	800926c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80097ea:	211e      	movs	r1, #30
 80097ec:	68f8      	ldr	r0, [r7, #12]
 80097ee:	f000 f8d3 	bl	8009998 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80097f2:	7afb      	ldrb	r3, [r7, #11]
 80097f4:	4619      	mov	r1, r3
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	f000 f8ce 	bl	8009998 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80097fc:	2100      	movs	r1, #0
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f000 f8ca 	bl	8009998 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009804:	2300      	movs	r3, #0
 8009806:	82fb      	strh	r3, [r7, #22]
 8009808:	e009      	b.n	800981e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800980a:	69b9      	ldr	r1, [r7, #24]
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f000 f919 	bl	8009a44 <SUBGHZSPI_Receive>
      pData++;
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	3301      	adds	r3, #1
 8009816:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8009818:	8afb      	ldrh	r3, [r7, #22]
 800981a:	3301      	adds	r3, #1
 800981c:	82fb      	strh	r3, [r7, #22]
 800981e:	8afa      	ldrh	r2, [r7, #22]
 8009820:	893b      	ldrh	r3, [r7, #8]
 8009822:	429a      	cmp	r2, r3
 8009824:	d3f1      	bcc.n	800980a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009826:	f7ff fd11 	bl	800924c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f000 f986 	bl	8009b3c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d002      	beq.n	800983e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	77fb      	strb	r3, [r7, #31]
 800983c:	e001      	b.n	8009842 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2201      	movs	r2, #1
 8009846:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2200      	movs	r2, #0
 800984c:	715a      	strb	r2, [r3, #5]

    return status;
 800984e:	7ffb      	ldrb	r3, [r7, #31]
 8009850:	e000      	b.n	8009854 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8009852:	2302      	movs	r3, #2
  }
}
 8009854:	4618      	mov	r0, r3
 8009856:	3720      	adds	r7, #32
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8009864:	2300      	movs	r3, #0
 8009866:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8009868:	f107 020c 	add.w	r2, r7, #12
 800986c:	2302      	movs	r3, #2
 800986e:	2112      	movs	r1, #18
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7ff fef4 	bl	800965e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8009876:	7b3b      	ldrb	r3, [r7, #12]
 8009878:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800987a:	89fb      	ldrh	r3, [r7, #14]
 800987c:	021b      	lsls	r3, r3, #8
 800987e:	b21a      	sxth	r2, r3
 8009880:	7b7b      	ldrb	r3, [r7, #13]
 8009882:	b21b      	sxth	r3, r3
 8009884:	4313      	orrs	r3, r2
 8009886:	b21b      	sxth	r3, r3
 8009888:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800988a:	f107 020c 	add.w	r2, r7, #12
 800988e:	2302      	movs	r3, #2
 8009890:	2102      	movs	r1, #2
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f7ff fe84 	bl	80095a0 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8009898:	89fb      	ldrh	r3, [r7, #14]
 800989a:	f003 0301 	and.w	r3, r3, #1
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d002      	beq.n	80098a8 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f013 f8c0 	bl	801ca28 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80098a8:	89fb      	ldrh	r3, [r7, #14]
 80098aa:	f003 0302 	and.w	r3, r3, #2
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d002      	beq.n	80098b8 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f013 f8c6 	bl	801ca44 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80098b8:	89fb      	ldrh	r3, [r7, #14]
 80098ba:	f003 0304 	and.w	r3, r3, #4
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d002      	beq.n	80098c8 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f013 f916 	bl	801caf4 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80098c8:	89fb      	ldrh	r3, [r7, #14]
 80098ca:	f003 0308 	and.w	r3, r3, #8
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d002      	beq.n	80098d8 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f013 f91c 	bl	801cb10 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80098d8:	89fb      	ldrh	r3, [r7, #14]
 80098da:	f003 0310 	and.w	r3, r3, #16
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d002      	beq.n	80098e8 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f013 f922 	bl	801cb2c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80098e8:	89fb      	ldrh	r3, [r7, #14]
 80098ea:	f003 0320 	and.w	r3, r3, #32
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d002      	beq.n	80098f8 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f013 f8f0 	bl	801cad8 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80098f8:	89fb      	ldrh	r3, [r7, #14]
 80098fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d002      	beq.n	8009908 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f013 f8ac 	bl	801ca60 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8009908:	89fb      	ldrh	r3, [r7, #14]
 800990a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00d      	beq.n	800992e <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8009912:	89fb      	ldrh	r3, [r7, #14]
 8009914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009918:	2b00      	cmp	r3, #0
 800991a:	d004      	beq.n	8009926 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800991c:	2101      	movs	r1, #1
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f013 f8ac 	bl	801ca7c <HAL_SUBGHZ_CADStatusCallback>
 8009924:	e003      	b.n	800992e <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8009926:	2100      	movs	r1, #0
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f013 f8a7 	bl	801ca7c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800992e:	89fb      	ldrh	r3, [r7, #14]
 8009930:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009934:	2b00      	cmp	r3, #0
 8009936:	d002      	beq.n	800993e <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f013 f8bd 	bl	801cab8 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800993e:	89fb      	ldrh	r3, [r7, #14]
 8009940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009944:	2b00      	cmp	r3, #0
 8009946:	d002      	beq.n	800994e <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f013 f8fd 	bl	801cb48 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800994e:	bf00      	nop
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
	...

08009958 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8009960:	4b0c      	ldr	r3, [pc, #48]	; (8009994 <SUBGHZSPI_Init+0x3c>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a0b      	ldr	r2, [pc, #44]	; (8009994 <SUBGHZSPI_Init+0x3c>)
 8009966:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800996a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800996c:	4a09      	ldr	r2, [pc, #36]	; (8009994 <SUBGHZSPI_Init+0x3c>)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8009974:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8009976:	4b07      	ldr	r3, [pc, #28]	; (8009994 <SUBGHZSPI_Init+0x3c>)
 8009978:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800997c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800997e:	4b05      	ldr	r3, [pc, #20]	; (8009994 <SUBGHZSPI_Init+0x3c>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a04      	ldr	r2, [pc, #16]	; (8009994 <SUBGHZSPI_Init+0x3c>)
 8009984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009988:	6013      	str	r3, [r2, #0]
}
 800998a:	bf00      	nop
 800998c:	370c      	adds	r7, #12
 800998e:	46bd      	mov	sp, r7
 8009990:	bc80      	pop	{r7}
 8009992:	4770      	bx	lr
 8009994:	58010000 	.word	0x58010000

08009998 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8009998:	b480      	push	{r7}
 800999a:	b087      	sub	sp, #28
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	460b      	mov	r3, r1
 80099a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80099a4:	2300      	movs	r3, #0
 80099a6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80099a8:	4b23      	ldr	r3, [pc, #140]	; (8009a38 <SUBGHZSPI_Transmit+0xa0>)
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	4613      	mov	r3, r2
 80099ae:	00db      	lsls	r3, r3, #3
 80099b0:	1a9b      	subs	r3, r3, r2
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	0cdb      	lsrs	r3, r3, #19
 80099b6:	2264      	movs	r2, #100	; 0x64
 80099b8:	fb02 f303 	mul.w	r3, r2, r3
 80099bc:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d105      	bne.n	80099d0 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80099c4:	2301      	movs	r3, #1
 80099c6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	609a      	str	r2, [r3, #8]
      break;
 80099ce:	e008      	b.n	80099e2 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	3b01      	subs	r3, #1
 80099d4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80099d6:	4b19      	ldr	r3, [pc, #100]	; (8009a3c <SUBGHZSPI_Transmit+0xa4>)
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	f003 0302 	and.w	r3, r3, #2
 80099de:	2b02      	cmp	r3, #2
 80099e0:	d1ed      	bne.n	80099be <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80099e2:	4b17      	ldr	r3, [pc, #92]	; (8009a40 <SUBGHZSPI_Transmit+0xa8>)
 80099e4:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	78fa      	ldrb	r2, [r7, #3]
 80099ea:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80099ec:	4b12      	ldr	r3, [pc, #72]	; (8009a38 <SUBGHZSPI_Transmit+0xa0>)
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	4613      	mov	r3, r2
 80099f2:	00db      	lsls	r3, r3, #3
 80099f4:	1a9b      	subs	r3, r3, r2
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	0cdb      	lsrs	r3, r3, #19
 80099fa:	2264      	movs	r2, #100	; 0x64
 80099fc:	fb02 f303 	mul.w	r3, r2, r3
 8009a00:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d105      	bne.n	8009a14 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	609a      	str	r2, [r3, #8]
      break;
 8009a12:	e008      	b.n	8009a26 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	3b01      	subs	r3, #1
 8009a18:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8009a1a:	4b08      	ldr	r3, [pc, #32]	; (8009a3c <SUBGHZSPI_Transmit+0xa4>)
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	f003 0301 	and.w	r3, r3, #1
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d1ed      	bne.n	8009a02 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8009a26:	4b05      	ldr	r3, [pc, #20]	; (8009a3c <SUBGHZSPI_Transmit+0xa4>)
 8009a28:	68db      	ldr	r3, [r3, #12]

  return status;
 8009a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	371c      	adds	r7, #28
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bc80      	pop	{r7}
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop
 8009a38:	20000000 	.word	0x20000000
 8009a3c:	58010000 	.word	0x58010000
 8009a40:	5801000c 	.word	0x5801000c

08009a44 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b087      	sub	sp, #28
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009a52:	4b25      	ldr	r3, [pc, #148]	; (8009ae8 <SUBGHZSPI_Receive+0xa4>)
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	4613      	mov	r3, r2
 8009a58:	00db      	lsls	r3, r3, #3
 8009a5a:	1a9b      	subs	r3, r3, r2
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	0cdb      	lsrs	r3, r3, #19
 8009a60:	2264      	movs	r2, #100	; 0x64
 8009a62:	fb02 f303 	mul.w	r3, r2, r3
 8009a66:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d105      	bne.n	8009a7a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2201      	movs	r2, #1
 8009a76:	609a      	str	r2, [r3, #8]
      break;
 8009a78:	e008      	b.n	8009a8c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8009a80:	4b1a      	ldr	r3, [pc, #104]	; (8009aec <SUBGHZSPI_Receive+0xa8>)
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	f003 0302 	and.w	r3, r3, #2
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d1ed      	bne.n	8009a68 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8009a8c:	4b18      	ldr	r3, [pc, #96]	; (8009af0 <SUBGHZSPI_Receive+0xac>)
 8009a8e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	22ff      	movs	r2, #255	; 0xff
 8009a94:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009a96:	4b14      	ldr	r3, [pc, #80]	; (8009ae8 <SUBGHZSPI_Receive+0xa4>)
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	00db      	lsls	r3, r3, #3
 8009a9e:	1a9b      	subs	r3, r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	0cdb      	lsrs	r3, r3, #19
 8009aa4:	2264      	movs	r2, #100	; 0x64
 8009aa6:	fb02 f303 	mul.w	r3, r2, r3
 8009aaa:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d105      	bne.n	8009abe <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	609a      	str	r2, [r3, #8]
      break;
 8009abc:	e008      	b.n	8009ad0 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8009ac4:	4b09      	ldr	r3, [pc, #36]	; (8009aec <SUBGHZSPI_Receive+0xa8>)
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	f003 0301 	and.w	r3, r3, #1
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d1ed      	bne.n	8009aac <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8009ad0:	4b06      	ldr	r3, [pc, #24]	; (8009aec <SUBGHZSPI_Receive+0xa8>)
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	b2da      	uxtb	r2, r3
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	701a      	strb	r2, [r3, #0]

  return status;
 8009ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	371c      	adds	r7, #28
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bc80      	pop	{r7}
 8009ae4:	4770      	bx	lr
 8009ae6:	bf00      	nop
 8009ae8:	20000000 	.word	0x20000000
 8009aec:	58010000 	.word	0x58010000
 8009af0:	5801000c 	.word	0x5801000c

08009af4 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	791b      	ldrb	r3, [r3, #4]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d111      	bne.n	8009b28 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8009b04:	4b0c      	ldr	r3, [pc, #48]	; (8009b38 <SUBGHZ_CheckDeviceReady+0x44>)
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	4613      	mov	r3, r2
 8009b0a:	005b      	lsls	r3, r3, #1
 8009b0c:	4413      	add	r3, r2
 8009b0e:	00db      	lsls	r3, r3, #3
 8009b10:	0c1b      	lsrs	r3, r3, #16
 8009b12:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009b14:	f7ff fbaa 	bl	800926c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1f9      	bne.n	8009b18 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009b24:	f7ff fb92 	bl	800924c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 f807 	bl	8009b3c <SUBGHZ_WaitOnBusy>
 8009b2e:	4603      	mov	r3, r0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	20000000 	.word	0x20000000

08009b3c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b086      	sub	sp, #24
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8009b44:	2300      	movs	r3, #0
 8009b46:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8009b48:	4b12      	ldr	r3, [pc, #72]	; (8009b94 <SUBGHZ_WaitOnBusy+0x58>)
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	005b      	lsls	r3, r3, #1
 8009b50:	4413      	add	r3, r2
 8009b52:	00db      	lsls	r3, r3, #3
 8009b54:	0d1b      	lsrs	r3, r3, #20
 8009b56:	2264      	movs	r2, #100	; 0x64
 8009b58:	fb02 f303 	mul.w	r3, r2, r3
 8009b5c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8009b5e:	f7ff fbb3 	bl	80092c8 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8009b62:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d105      	bne.n	8009b76 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2202      	movs	r2, #2
 8009b72:	609a      	str	r2, [r3, #8]
      break;
 8009b74:	e009      	b.n	8009b8a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	3b01      	subs	r3, #1
 8009b7a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8009b7c:	f7ff fb92 	bl	80092a4 <LL_PWR_IsActiveFlag_RFBUSYS>
 8009b80:	4602      	mov	r2, r0
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	4013      	ands	r3, r2
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d0e9      	beq.n	8009b5e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8009b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3718      	adds	r7, #24
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	20000000 	.word	0x20000000

08009b98 <LL_RCC_GetUSARTClockSource>:
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8009ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ba4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	401a      	ands	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	041b      	lsls	r3, r3, #16
 8009bb0:	4313      	orrs	r3, r2
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	370c      	adds	r7, #12
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bc80      	pop	{r7}
 8009bba:	4770      	bx	lr

08009bbc <LL_RCC_GetLPUARTClockSource>:
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8009bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009bc8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	4013      	ands	r3, r2
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bc80      	pop	{r7}
 8009bd8:	4770      	bx	lr

08009bda <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b082      	sub	sp, #8
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d101      	bne.n	8009bec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009be8:	2301      	movs	r3, #1
 8009bea:	e042      	b.n	8009c72 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d106      	bne.n	8009c04 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f7f9 f938 	bl	8002e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2224      	movs	r2, #36	; 0x24
 8009c08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f022 0201 	bic.w	r2, r2, #1
 8009c1a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 fc3b 	bl	800a498 <UART_SetConfig>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d101      	bne.n	8009c2c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e022      	b.n	8009c72 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d002      	beq.n	8009c3a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 fea3 	bl	800a980 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	685a      	ldr	r2, [r3, #4]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c48:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	689a      	ldr	r2, [r3, #8]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c58:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f042 0201 	orr.w	r2, r2, #1
 8009c68:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 ff29 	bl	800aac2 <UART_CheckIdleState>
 8009c70:	4603      	mov	r3, r0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
	...

08009c7c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b08a      	sub	sp, #40	; 0x28
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	4613      	mov	r3, r2
 8009c88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c90:	2b20      	cmp	r3, #32
 8009c92:	d137      	bne.n	8009d04 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d002      	beq.n	8009ca0 <HAL_UART_Receive_IT+0x24>
 8009c9a:	88fb      	ldrh	r3, [r7, #6]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d101      	bne.n	8009ca4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e030      	b.n	8009d06 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a18      	ldr	r2, [pc, #96]	; (8009d10 <HAL_UART_Receive_IT+0x94>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d01f      	beq.n	8009cf4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d018      	beq.n	8009cf4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	e853 3f00 	ldrex	r3, [r3]
 8009cce:	613b      	str	r3, [r7, #16]
   return(result);
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce0:	623b      	str	r3, [r7, #32]
 8009ce2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce4:	69f9      	ldr	r1, [r7, #28]
 8009ce6:	6a3a      	ldr	r2, [r7, #32]
 8009ce8:	e841 2300 	strex	r3, r2, [r1]
 8009cec:	61bb      	str	r3, [r7, #24]
   return(result);
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d1e6      	bne.n	8009cc2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009cf4:	88fb      	ldrh	r3, [r7, #6]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	68b9      	ldr	r1, [r7, #8]
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f000 fff8 	bl	800acf0 <UART_Start_Receive_IT>
 8009d00:	4603      	mov	r3, r0
 8009d02:	e000      	b.n	8009d06 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009d04:	2302      	movs	r3, #2
  }
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3728      	adds	r7, #40	; 0x28
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	40008000 	.word	0x40008000

08009d14 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b08a      	sub	sp, #40	; 0x28
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	4613      	mov	r3, r2
 8009d20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d28:	2b20      	cmp	r3, #32
 8009d2a:	d167      	bne.n	8009dfc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d002      	beq.n	8009d38 <HAL_UART_Transmit_DMA+0x24>
 8009d32:	88fb      	ldrh	r3, [r7, #6]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d101      	bne.n	8009d3c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e060      	b.n	8009dfe <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	68ba      	ldr	r2, [r7, #8]
 8009d40:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	88fa      	ldrh	r2, [r7, #6]
 8009d46:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	88fa      	ldrh	r2, [r7, #6]
 8009d4e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2200      	movs	r2, #0
 8009d56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2221      	movs	r2, #33	; 0x21
 8009d5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d028      	beq.n	8009dbc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d6e:	4a26      	ldr	r2, [pc, #152]	; (8009e08 <HAL_UART_Transmit_DMA+0xf4>)
 8009d70:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d76:	4a25      	ldr	r2, [pc, #148]	; (8009e0c <HAL_UART_Transmit_DMA+0xf8>)
 8009d78:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d7e:	4a24      	ldr	r2, [pc, #144]	; (8009e10 <HAL_UART_Transmit_DMA+0xfc>)
 8009d80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d86:	2200      	movs	r2, #0
 8009d88:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d92:	4619      	mov	r1, r3
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	3328      	adds	r3, #40	; 0x28
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	88fb      	ldrh	r3, [r7, #6]
 8009d9e:	f7fb fd49 	bl	8005834 <HAL_DMA_Start_IT>
 8009da2:	4603      	mov	r3, r0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d009      	beq.n	8009dbc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2210      	movs	r2, #16
 8009dac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2220      	movs	r2, #32
 8009db4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8009db8:	2301      	movs	r3, #1
 8009dba:	e020      	b.n	8009dfe <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2240      	movs	r2, #64	; 0x40
 8009dc2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	3308      	adds	r3, #8
 8009dca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	e853 3f00 	ldrex	r3, [r3]
 8009dd2:	613b      	str	r3, [r7, #16]
   return(result);
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dda:	627b      	str	r3, [r7, #36]	; 0x24
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	3308      	adds	r3, #8
 8009de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009de4:	623a      	str	r2, [r7, #32]
 8009de6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de8:	69f9      	ldr	r1, [r7, #28]
 8009dea:	6a3a      	ldr	r2, [r7, #32]
 8009dec:	e841 2300 	strex	r3, r2, [r1]
 8009df0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d1e5      	bne.n	8009dc4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	e000      	b.n	8009dfe <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009dfc:	2302      	movs	r3, #2
  }
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3728      	adds	r7, #40	; 0x28
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	0800b07b 	.word	0x0800b07b
 8009e0c:	0800b115 	.word	0x0800b115
 8009e10:	0800b131 	.word	0x0800b131

08009e14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b0ba      	sub	sp, #232	; 0xe8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	69db      	ldr	r3, [r3, #28]
 8009e22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009e3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009e3e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009e42:	4013      	ands	r3, r2
 8009e44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009e48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d11b      	bne.n	8009e88 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e54:	f003 0320 	and.w	r3, r3, #32
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d015      	beq.n	8009e88 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e60:	f003 0320 	and.w	r3, r3, #32
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d105      	bne.n	8009e74 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009e68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d009      	beq.n	8009e88 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f000 82e3 	beq.w	800a444 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	4798      	blx	r3
      }
      return;
 8009e86:	e2dd      	b.n	800a444 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009e88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f000 8123 	beq.w	800a0d8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009e92:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009e96:	4b8d      	ldr	r3, [pc, #564]	; (800a0cc <HAL_UART_IRQHandler+0x2b8>)
 8009e98:	4013      	ands	r3, r2
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d106      	bne.n	8009eac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009e9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009ea2:	4b8b      	ldr	r3, [pc, #556]	; (800a0d0 <HAL_UART_IRQHandler+0x2bc>)
 8009ea4:	4013      	ands	r3, r2
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	f000 8116 	beq.w	800a0d8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eb0:	f003 0301 	and.w	r3, r3, #1
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d011      	beq.n	8009edc <HAL_UART_IRQHandler+0xc8>
 8009eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d00b      	beq.n	8009edc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ed2:	f043 0201 	orr.w	r2, r3, #1
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ee0:	f003 0302 	and.w	r3, r3, #2
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d011      	beq.n	8009f0c <HAL_UART_IRQHandler+0xf8>
 8009ee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009eec:	f003 0301 	and.w	r3, r3, #1
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d00b      	beq.n	8009f0c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2202      	movs	r2, #2
 8009efa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f02:	f043 0204 	orr.w	r2, r3, #4
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f10:	f003 0304 	and.w	r3, r3, #4
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d011      	beq.n	8009f3c <HAL_UART_IRQHandler+0x128>
 8009f18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f1c:	f003 0301 	and.w	r3, r3, #1
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00b      	beq.n	8009f3c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	2204      	movs	r2, #4
 8009f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f32:	f043 0202 	orr.w	r2, r3, #2
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f40:	f003 0308 	and.w	r3, r3, #8
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d017      	beq.n	8009f78 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f4c:	f003 0320 	and.w	r3, r3, #32
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d105      	bne.n	8009f60 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009f54:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009f58:	4b5c      	ldr	r3, [pc, #368]	; (800a0cc <HAL_UART_IRQHandler+0x2b8>)
 8009f5a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d00b      	beq.n	8009f78 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2208      	movs	r2, #8
 8009f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f6e:	f043 0208 	orr.w	r2, r3, #8
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d012      	beq.n	8009faa <HAL_UART_IRQHandler+0x196>
 8009f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d00c      	beq.n	8009faa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fa0:	f043 0220 	orr.w	r2, r3, #32
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f000 8249 	beq.w	800a448 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fba:	f003 0320 	and.w	r3, r3, #32
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d013      	beq.n	8009fea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fc6:	f003 0320 	and.w	r3, r3, #32
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d105      	bne.n	8009fda <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009fce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d007      	beq.n	8009fea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d003      	beq.n	8009fea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ff0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ffe:	2b40      	cmp	r3, #64	; 0x40
 800a000:	d005      	beq.n	800a00e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a002:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a006:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d054      	beq.n	800a0b8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 ffce 	bl	800afb0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a01e:	2b40      	cmp	r3, #64	; 0x40
 800a020:	d146      	bne.n	800a0b0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3308      	adds	r3, #8
 800a028:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a030:	e853 3f00 	ldrex	r3, [r3]
 800a034:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a038:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a03c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a040:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	3308      	adds	r3, #8
 800a04a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a04e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a052:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a056:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a05a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a05e:	e841 2300 	strex	r3, r2, [r1]
 800a062:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a066:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d1d9      	bne.n	800a022 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a074:	2b00      	cmp	r3, #0
 800a076:	d017      	beq.n	800a0a8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a07e:	4a15      	ldr	r2, [pc, #84]	; (800a0d4 <HAL_UART_IRQHandler+0x2c0>)
 800a080:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a088:	4618      	mov	r0, r3
 800a08a:	f7fb fcaf 	bl	80059ec <HAL_DMA_Abort_IT>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d019      	beq.n	800a0c8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a09a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800a0a2:	4610      	mov	r0, r2
 800a0a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0a6:	e00f      	b.n	800a0c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 f9e0 	bl	800a46e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0ae:	e00b      	b.n	800a0c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 f9dc 	bl	800a46e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0b6:	e007      	b.n	800a0c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 f9d8 	bl	800a46e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800a0c6:	e1bf      	b.n	800a448 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0c8:	bf00      	nop
    return;
 800a0ca:	e1bd      	b.n	800a448 <HAL_UART_IRQHandler+0x634>
 800a0cc:	10000001 	.word	0x10000001
 800a0d0:	04000120 	.word	0x04000120
 800a0d4:	0800b1b1 	.word	0x0800b1b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	f040 8153 	bne.w	800a388 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a0e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0e6:	f003 0310 	and.w	r3, r3, #16
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	f000 814c 	beq.w	800a388 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a0f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0f4:	f003 0310 	and.w	r3, r3, #16
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f000 8145 	beq.w	800a388 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2210      	movs	r2, #16
 800a104:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a110:	2b40      	cmp	r3, #64	; 0x40
 800a112:	f040 80bb 	bne.w	800a28c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a124:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f000 818f 	beq.w	800a44c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a134:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a138:	429a      	cmp	r2, r3
 800a13a:	f080 8187 	bcs.w	800a44c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a144:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f003 0320 	and.w	r3, r3, #32
 800a156:	2b00      	cmp	r3, #0
 800a158:	f040 8087 	bne.w	800a26a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a164:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a168:	e853 3f00 	ldrex	r3, [r3]
 800a16c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a170:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a178:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	461a      	mov	r2, r3
 800a182:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a186:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a18a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a192:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a196:	e841 2300 	strex	r3, r2, [r1]
 800a19a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a19e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d1da      	bne.n	800a15c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	3308      	adds	r3, #8
 800a1ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1b0:	e853 3f00 	ldrex	r3, [r3]
 800a1b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a1b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a1b8:	f023 0301 	bic.w	r3, r3, #1
 800a1bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	3308      	adds	r3, #8
 800a1c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a1ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a1ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a1d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a1d6:	e841 2300 	strex	r3, r2, [r1]
 800a1da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a1dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1e1      	bne.n	800a1a6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	3308      	adds	r3, #8
 800a1e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1ec:	e853 3f00 	ldrex	r3, [r3]
 800a1f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a1f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	3308      	adds	r3, #8
 800a202:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a206:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a208:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a20c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a20e:	e841 2300 	strex	r3, r2, [r1]
 800a212:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a216:	2b00      	cmp	r3, #0
 800a218:	d1e3      	bne.n	800a1e2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2220      	movs	r2, #32
 800a21e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2200      	movs	r2, #0
 800a226:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a230:	e853 3f00 	ldrex	r3, [r3]
 800a234:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a238:	f023 0310 	bic.w	r3, r3, #16
 800a23c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	461a      	mov	r2, r3
 800a246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a24a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a24c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a250:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a252:	e841 2300 	strex	r3, r2, [r1]
 800a256:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d1e4      	bne.n	800a228 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a264:	4618      	mov	r0, r3
 800a266:	f7fb fb63 	bl	8005930 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2202      	movs	r2, #2
 800a26e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	1ad3      	subs	r3, r2, r3
 800a280:	b29b      	uxth	r3, r3
 800a282:	4619      	mov	r1, r3
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 f8fb 	bl	800a480 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a28a:	e0df      	b.n	800a44c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a298:	b29b      	uxth	r3, r3
 800a29a:	1ad3      	subs	r3, r2, r3
 800a29c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	f000 80d1 	beq.w	800a450 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800a2ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	f000 80cc 	beq.w	800a450 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c0:	e853 3f00 	ldrex	r3, [r3]
 800a2c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a2c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a2cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a2da:	647b      	str	r3, [r7, #68]	; 0x44
 800a2dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a2e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2e2:	e841 2300 	strex	r3, r2, [r1]
 800a2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a2e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d1e4      	bne.n	800a2b8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	3308      	adds	r3, #8
 800a2f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f8:	e853 3f00 	ldrex	r3, [r3]
 800a2fc:	623b      	str	r3, [r7, #32]
   return(result);
 800a2fe:	6a3b      	ldr	r3, [r7, #32]
 800a300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a304:	f023 0301 	bic.w	r3, r3, #1
 800a308:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	3308      	adds	r3, #8
 800a312:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a316:	633a      	str	r2, [r7, #48]	; 0x30
 800a318:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a31a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a31c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a31e:	e841 2300 	strex	r3, r2, [r1]
 800a322:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a326:	2b00      	cmp	r3, #0
 800a328:	d1e1      	bne.n	800a2ee <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2220      	movs	r2, #32
 800a32e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	e853 3f00 	ldrex	r3, [r3]
 800a34a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f023 0310 	bic.w	r3, r3, #16
 800a352:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	461a      	mov	r2, r3
 800a35c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a360:	61fb      	str	r3, [r7, #28]
 800a362:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a364:	69b9      	ldr	r1, [r7, #24]
 800a366:	69fa      	ldr	r2, [r7, #28]
 800a368:	e841 2300 	strex	r3, r2, [r1]
 800a36c:	617b      	str	r3, [r7, #20]
   return(result);
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d1e4      	bne.n	800a33e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2202      	movs	r2, #2
 800a378:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a37a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a37e:	4619      	mov	r1, r3
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 f87d 	bl	800a480 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a386:	e063      	b.n	800a450 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a38c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a390:	2b00      	cmp	r3, #0
 800a392:	d00e      	beq.n	800a3b2 <HAL_UART_IRQHandler+0x59e>
 800a394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a398:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d008      	beq.n	800a3b2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a3a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f001 fc5e 	bl	800bc6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a3b0:	e051      	b.n	800a456 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a3b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d014      	beq.n	800a3e8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a3be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d105      	bne.n	800a3d6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a3ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a3ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d008      	beq.n	800a3e8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d03a      	beq.n	800a454 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	4798      	blx	r3
    }
    return;
 800a3e6:	e035      	b.n	800a454 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a3e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d009      	beq.n	800a408 <HAL_UART_IRQHandler+0x5f4>
 800a3f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d003      	beq.n	800a408 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 feeb 	bl	800b1dc <UART_EndTransmit_IT>
    return;
 800a406:	e026      	b.n	800a456 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a40c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a410:	2b00      	cmp	r3, #0
 800a412:	d009      	beq.n	800a428 <HAL_UART_IRQHandler+0x614>
 800a414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a418:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d003      	beq.n	800a428 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f001 fc35 	bl	800bc90 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a426:	e016      	b.n	800a456 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a42c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a430:	2b00      	cmp	r3, #0
 800a432:	d010      	beq.n	800a456 <HAL_UART_IRQHandler+0x642>
 800a434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	da0c      	bge.n	800a456 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f001 fc1e 	bl	800bc7e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a442:	e008      	b.n	800a456 <HAL_UART_IRQHandler+0x642>
      return;
 800a444:	bf00      	nop
 800a446:	e006      	b.n	800a456 <HAL_UART_IRQHandler+0x642>
    return;
 800a448:	bf00      	nop
 800a44a:	e004      	b.n	800a456 <HAL_UART_IRQHandler+0x642>
      return;
 800a44c:	bf00      	nop
 800a44e:	e002      	b.n	800a456 <HAL_UART_IRQHandler+0x642>
      return;
 800a450:	bf00      	nop
 800a452:	e000      	b.n	800a456 <HAL_UART_IRQHandler+0x642>
    return;
 800a454:	bf00      	nop
  }
}
 800a456:	37e8      	adds	r7, #232	; 0xe8
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a464:	bf00      	nop
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	bc80      	pop	{r7}
 800a46c:	4770      	bx	lr

0800a46e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a46e:	b480      	push	{r7}
 800a470:	b083      	sub	sp, #12
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a476:	bf00      	nop
 800a478:	370c      	adds	r7, #12
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bc80      	pop	{r7}
 800a47e:	4770      	bx	lr

0800a480 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	460b      	mov	r3, r1
 800a48a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a48c:	bf00      	nop
 800a48e:	370c      	adds	r7, #12
 800a490:	46bd      	mov	sp, r7
 800a492:	bc80      	pop	{r7}
 800a494:	4770      	bx	lr
	...

0800a498 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a49c:	b08c      	sub	sp, #48	; 0x30
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	689a      	ldr	r2, [r3, #8]
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	691b      	ldr	r3, [r3, #16]
 800a4b0:	431a      	orrs	r2, r3
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	695b      	ldr	r3, [r3, #20]
 800a4b6:	431a      	orrs	r2, r3
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	69db      	ldr	r3, [r3, #28]
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	4b94      	ldr	r3, [pc, #592]	; (800a718 <UART_SetConfig+0x280>)
 800a4c8:	4013      	ands	r3, r2
 800a4ca:	697a      	ldr	r2, [r7, #20]
 800a4cc:	6812      	ldr	r2, [r2, #0]
 800a4ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4d0:	430b      	orrs	r3, r1
 800a4d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	68da      	ldr	r2, [r3, #12]
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	430a      	orrs	r2, r1
 800a4e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	699b      	ldr	r3, [r3, #24]
 800a4ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a89      	ldr	r2, [pc, #548]	; (800a71c <UART_SetConfig+0x284>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d004      	beq.n	800a504 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	6a1b      	ldr	r3, [r3, #32]
 800a4fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a500:	4313      	orrs	r3, r2
 800a502:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a50e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a512:	697a      	ldr	r2, [r7, #20]
 800a514:	6812      	ldr	r2, [r2, #0]
 800a516:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a518:	430b      	orrs	r3, r1
 800a51a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a522:	f023 010f 	bic.w	r1, r3, #15
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	430a      	orrs	r2, r1
 800a530:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a7a      	ldr	r2, [pc, #488]	; (800a720 <UART_SetConfig+0x288>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d127      	bne.n	800a58c <UART_SetConfig+0xf4>
 800a53c:	2003      	movs	r0, #3
 800a53e:	f7ff fb2b 	bl	8009b98 <LL_RCC_GetUSARTClockSource>
 800a542:	4603      	mov	r3, r0
 800a544:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800a548:	2b03      	cmp	r3, #3
 800a54a:	d81b      	bhi.n	800a584 <UART_SetConfig+0xec>
 800a54c:	a201      	add	r2, pc, #4	; (adr r2, 800a554 <UART_SetConfig+0xbc>)
 800a54e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a552:	bf00      	nop
 800a554:	0800a565 	.word	0x0800a565
 800a558:	0800a575 	.word	0x0800a575
 800a55c:	0800a56d 	.word	0x0800a56d
 800a560:	0800a57d 	.word	0x0800a57d
 800a564:	2301      	movs	r3, #1
 800a566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a56a:	e080      	b.n	800a66e <UART_SetConfig+0x1d6>
 800a56c:	2302      	movs	r3, #2
 800a56e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a572:	e07c      	b.n	800a66e <UART_SetConfig+0x1d6>
 800a574:	2304      	movs	r3, #4
 800a576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a57a:	e078      	b.n	800a66e <UART_SetConfig+0x1d6>
 800a57c:	2308      	movs	r3, #8
 800a57e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a582:	e074      	b.n	800a66e <UART_SetConfig+0x1d6>
 800a584:	2310      	movs	r3, #16
 800a586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a58a:	e070      	b.n	800a66e <UART_SetConfig+0x1d6>
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a64      	ldr	r2, [pc, #400]	; (800a724 <UART_SetConfig+0x28c>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d138      	bne.n	800a608 <UART_SetConfig+0x170>
 800a596:	200c      	movs	r0, #12
 800a598:	f7ff fafe 	bl	8009b98 <LL_RCC_GetUSARTClockSource>
 800a59c:	4603      	mov	r3, r0
 800a59e:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800a5a2:	2b0c      	cmp	r3, #12
 800a5a4:	d82c      	bhi.n	800a600 <UART_SetConfig+0x168>
 800a5a6:	a201      	add	r2, pc, #4	; (adr r2, 800a5ac <UART_SetConfig+0x114>)
 800a5a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ac:	0800a5e1 	.word	0x0800a5e1
 800a5b0:	0800a601 	.word	0x0800a601
 800a5b4:	0800a601 	.word	0x0800a601
 800a5b8:	0800a601 	.word	0x0800a601
 800a5bc:	0800a5f1 	.word	0x0800a5f1
 800a5c0:	0800a601 	.word	0x0800a601
 800a5c4:	0800a601 	.word	0x0800a601
 800a5c8:	0800a601 	.word	0x0800a601
 800a5cc:	0800a5e9 	.word	0x0800a5e9
 800a5d0:	0800a601 	.word	0x0800a601
 800a5d4:	0800a601 	.word	0x0800a601
 800a5d8:	0800a601 	.word	0x0800a601
 800a5dc:	0800a5f9 	.word	0x0800a5f9
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5e6:	e042      	b.n	800a66e <UART_SetConfig+0x1d6>
 800a5e8:	2302      	movs	r3, #2
 800a5ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5ee:	e03e      	b.n	800a66e <UART_SetConfig+0x1d6>
 800a5f0:	2304      	movs	r3, #4
 800a5f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5f6:	e03a      	b.n	800a66e <UART_SetConfig+0x1d6>
 800a5f8:	2308      	movs	r3, #8
 800a5fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5fe:	e036      	b.n	800a66e <UART_SetConfig+0x1d6>
 800a600:	2310      	movs	r3, #16
 800a602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a606:	e032      	b.n	800a66e <UART_SetConfig+0x1d6>
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a43      	ldr	r2, [pc, #268]	; (800a71c <UART_SetConfig+0x284>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d12a      	bne.n	800a668 <UART_SetConfig+0x1d0>
 800a612:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a616:	f7ff fad1 	bl	8009bbc <LL_RCC_GetLPUARTClockSource>
 800a61a:	4603      	mov	r3, r0
 800a61c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a620:	d01a      	beq.n	800a658 <UART_SetConfig+0x1c0>
 800a622:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a626:	d81b      	bhi.n	800a660 <UART_SetConfig+0x1c8>
 800a628:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a62c:	d00c      	beq.n	800a648 <UART_SetConfig+0x1b0>
 800a62e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a632:	d815      	bhi.n	800a660 <UART_SetConfig+0x1c8>
 800a634:	2b00      	cmp	r3, #0
 800a636:	d003      	beq.n	800a640 <UART_SetConfig+0x1a8>
 800a638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a63c:	d008      	beq.n	800a650 <UART_SetConfig+0x1b8>
 800a63e:	e00f      	b.n	800a660 <UART_SetConfig+0x1c8>
 800a640:	2300      	movs	r3, #0
 800a642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a646:	e012      	b.n	800a66e <UART_SetConfig+0x1d6>
 800a648:	2302      	movs	r3, #2
 800a64a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a64e:	e00e      	b.n	800a66e <UART_SetConfig+0x1d6>
 800a650:	2304      	movs	r3, #4
 800a652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a656:	e00a      	b.n	800a66e <UART_SetConfig+0x1d6>
 800a658:	2308      	movs	r3, #8
 800a65a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a65e:	e006      	b.n	800a66e <UART_SetConfig+0x1d6>
 800a660:	2310      	movs	r3, #16
 800a662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a666:	e002      	b.n	800a66e <UART_SetConfig+0x1d6>
 800a668:	2310      	movs	r3, #16
 800a66a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4a2a      	ldr	r2, [pc, #168]	; (800a71c <UART_SetConfig+0x284>)
 800a674:	4293      	cmp	r3, r2
 800a676:	f040 80a4 	bne.w	800a7c2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a67a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a67e:	2b08      	cmp	r3, #8
 800a680:	d823      	bhi.n	800a6ca <UART_SetConfig+0x232>
 800a682:	a201      	add	r2, pc, #4	; (adr r2, 800a688 <UART_SetConfig+0x1f0>)
 800a684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a688:	0800a6ad 	.word	0x0800a6ad
 800a68c:	0800a6cb 	.word	0x0800a6cb
 800a690:	0800a6b5 	.word	0x0800a6b5
 800a694:	0800a6cb 	.word	0x0800a6cb
 800a698:	0800a6bb 	.word	0x0800a6bb
 800a69c:	0800a6cb 	.word	0x0800a6cb
 800a6a0:	0800a6cb 	.word	0x0800a6cb
 800a6a4:	0800a6cb 	.word	0x0800a6cb
 800a6a8:	0800a6c3 	.word	0x0800a6c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6ac:	f7fd fe76 	bl	800839c <HAL_RCC_GetPCLK1Freq>
 800a6b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a6b2:	e010      	b.n	800a6d6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6b4:	4b1c      	ldr	r3, [pc, #112]	; (800a728 <UART_SetConfig+0x290>)
 800a6b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a6b8:	e00d      	b.n	800a6d6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6ba:	f7fd fdbb 	bl	8008234 <HAL_RCC_GetSysClockFreq>
 800a6be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a6c0:	e009      	b.n	800a6d6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a6c8:	e005      	b.n	800a6d6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a6d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	f000 8137 	beq.w	800a94c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e2:	4a12      	ldr	r2, [pc, #72]	; (800a72c <UART_SetConfig+0x294>)
 800a6e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6f0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	685a      	ldr	r2, [r3, #4]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	005b      	lsls	r3, r3, #1
 800a6fa:	4413      	add	r3, r2
 800a6fc:	69ba      	ldr	r2, [r7, #24]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d305      	bcc.n	800a70e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a708:	69ba      	ldr	r2, [r7, #24]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d910      	bls.n	800a730 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800a70e:	2301      	movs	r3, #1
 800a710:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a714:	e11a      	b.n	800a94c <UART_SetConfig+0x4b4>
 800a716:	bf00      	nop
 800a718:	cfff69f3 	.word	0xcfff69f3
 800a71c:	40008000 	.word	0x40008000
 800a720:	40013800 	.word	0x40013800
 800a724:	40004400 	.word	0x40004400
 800a728:	00f42400 	.word	0x00f42400
 800a72c:	0801f0b4 	.word	0x0801f0b4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a732:	2200      	movs	r2, #0
 800a734:	60bb      	str	r3, [r7, #8]
 800a736:	60fa      	str	r2, [r7, #12]
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73c:	4a8e      	ldr	r2, [pc, #568]	; (800a978 <UART_SetConfig+0x4e0>)
 800a73e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a742:	b29b      	uxth	r3, r3
 800a744:	2200      	movs	r2, #0
 800a746:	603b      	str	r3, [r7, #0]
 800a748:	607a      	str	r2, [r7, #4]
 800a74a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a74e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a752:	f7f6 fc3b 	bl	8000fcc <__aeabi_uldivmod>
 800a756:	4602      	mov	r2, r0
 800a758:	460b      	mov	r3, r1
 800a75a:	4610      	mov	r0, r2
 800a75c:	4619      	mov	r1, r3
 800a75e:	f04f 0200 	mov.w	r2, #0
 800a762:	f04f 0300 	mov.w	r3, #0
 800a766:	020b      	lsls	r3, r1, #8
 800a768:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a76c:	0202      	lsls	r2, r0, #8
 800a76e:	6979      	ldr	r1, [r7, #20]
 800a770:	6849      	ldr	r1, [r1, #4]
 800a772:	0849      	lsrs	r1, r1, #1
 800a774:	2000      	movs	r0, #0
 800a776:	460c      	mov	r4, r1
 800a778:	4605      	mov	r5, r0
 800a77a:	eb12 0804 	adds.w	r8, r2, r4
 800a77e:	eb43 0905 	adc.w	r9, r3, r5
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	469a      	mov	sl, r3
 800a78a:	4693      	mov	fp, r2
 800a78c:	4652      	mov	r2, sl
 800a78e:	465b      	mov	r3, fp
 800a790:	4640      	mov	r0, r8
 800a792:	4649      	mov	r1, r9
 800a794:	f7f6 fc1a 	bl	8000fcc <__aeabi_uldivmod>
 800a798:	4602      	mov	r2, r0
 800a79a:	460b      	mov	r3, r1
 800a79c:	4613      	mov	r3, r2
 800a79e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a7a0:	6a3b      	ldr	r3, [r7, #32]
 800a7a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7a6:	d308      	bcc.n	800a7ba <UART_SetConfig+0x322>
 800a7a8:	6a3b      	ldr	r3, [r7, #32]
 800a7aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7ae:	d204      	bcs.n	800a7ba <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	6a3a      	ldr	r2, [r7, #32]
 800a7b6:	60da      	str	r2, [r3, #12]
 800a7b8:	e0c8      	b.n	800a94c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a7c0:	e0c4      	b.n	800a94c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	69db      	ldr	r3, [r3, #28]
 800a7c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7ca:	d167      	bne.n	800a89c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800a7cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a7d0:	2b08      	cmp	r3, #8
 800a7d2:	d828      	bhi.n	800a826 <UART_SetConfig+0x38e>
 800a7d4:	a201      	add	r2, pc, #4	; (adr r2, 800a7dc <UART_SetConfig+0x344>)
 800a7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7da:	bf00      	nop
 800a7dc:	0800a801 	.word	0x0800a801
 800a7e0:	0800a809 	.word	0x0800a809
 800a7e4:	0800a811 	.word	0x0800a811
 800a7e8:	0800a827 	.word	0x0800a827
 800a7ec:	0800a817 	.word	0x0800a817
 800a7f0:	0800a827 	.word	0x0800a827
 800a7f4:	0800a827 	.word	0x0800a827
 800a7f8:	0800a827 	.word	0x0800a827
 800a7fc:	0800a81f 	.word	0x0800a81f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a800:	f7fd fdcc 	bl	800839c <HAL_RCC_GetPCLK1Freq>
 800a804:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a806:	e014      	b.n	800a832 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a808:	f7fd fdda 	bl	80083c0 <HAL_RCC_GetPCLK2Freq>
 800a80c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a80e:	e010      	b.n	800a832 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a810:	4b5a      	ldr	r3, [pc, #360]	; (800a97c <UART_SetConfig+0x4e4>)
 800a812:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a814:	e00d      	b.n	800a832 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a816:	f7fd fd0d 	bl	8008234 <HAL_RCC_GetSysClockFreq>
 800a81a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a81c:	e009      	b.n	800a832 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a81e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a822:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a824:	e005      	b.n	800a832 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800a826:	2300      	movs	r3, #0
 800a828:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a82a:	2301      	movs	r3, #1
 800a82c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a830:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a834:	2b00      	cmp	r3, #0
 800a836:	f000 8089 	beq.w	800a94c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83e:	4a4e      	ldr	r2, [pc, #312]	; (800a978 <UART_SetConfig+0x4e0>)
 800a840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a844:	461a      	mov	r2, r3
 800a846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a848:	fbb3 f3f2 	udiv	r3, r3, r2
 800a84c:	005a      	lsls	r2, r3, #1
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	085b      	lsrs	r3, r3, #1
 800a854:	441a      	add	r2, r3
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a85e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a860:	6a3b      	ldr	r3, [r7, #32]
 800a862:	2b0f      	cmp	r3, #15
 800a864:	d916      	bls.n	800a894 <UART_SetConfig+0x3fc>
 800a866:	6a3b      	ldr	r3, [r7, #32]
 800a868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a86c:	d212      	bcs.n	800a894 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a86e:	6a3b      	ldr	r3, [r7, #32]
 800a870:	b29b      	uxth	r3, r3
 800a872:	f023 030f 	bic.w	r3, r3, #15
 800a876:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a878:	6a3b      	ldr	r3, [r7, #32]
 800a87a:	085b      	lsrs	r3, r3, #1
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	f003 0307 	and.w	r3, r3, #7
 800a882:	b29a      	uxth	r2, r3
 800a884:	8bfb      	ldrh	r3, [r7, #30]
 800a886:	4313      	orrs	r3, r2
 800a888:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	8bfa      	ldrh	r2, [r7, #30]
 800a890:	60da      	str	r2, [r3, #12]
 800a892:	e05b      	b.n	800a94c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a89a:	e057      	b.n	800a94c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a89c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a8a0:	2b08      	cmp	r3, #8
 800a8a2:	d828      	bhi.n	800a8f6 <UART_SetConfig+0x45e>
 800a8a4:	a201      	add	r2, pc, #4	; (adr r2, 800a8ac <UART_SetConfig+0x414>)
 800a8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8aa:	bf00      	nop
 800a8ac:	0800a8d1 	.word	0x0800a8d1
 800a8b0:	0800a8d9 	.word	0x0800a8d9
 800a8b4:	0800a8e1 	.word	0x0800a8e1
 800a8b8:	0800a8f7 	.word	0x0800a8f7
 800a8bc:	0800a8e7 	.word	0x0800a8e7
 800a8c0:	0800a8f7 	.word	0x0800a8f7
 800a8c4:	0800a8f7 	.word	0x0800a8f7
 800a8c8:	0800a8f7 	.word	0x0800a8f7
 800a8cc:	0800a8ef 	.word	0x0800a8ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8d0:	f7fd fd64 	bl	800839c <HAL_RCC_GetPCLK1Freq>
 800a8d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a8d6:	e014      	b.n	800a902 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8d8:	f7fd fd72 	bl	80083c0 <HAL_RCC_GetPCLK2Freq>
 800a8dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a8de:	e010      	b.n	800a902 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a8e0:	4b26      	ldr	r3, [pc, #152]	; (800a97c <UART_SetConfig+0x4e4>)
 800a8e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a8e4:	e00d      	b.n	800a902 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a8e6:	f7fd fca5 	bl	8008234 <HAL_RCC_GetSysClockFreq>
 800a8ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a8ec:	e009      	b.n	800a902 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a8f4:	e005      	b.n	800a902 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a900:	bf00      	nop
    }

    if (pclk != 0U)
 800a902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a904:	2b00      	cmp	r3, #0
 800a906:	d021      	beq.n	800a94c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90c:	4a1a      	ldr	r2, [pc, #104]	; (800a978 <UART_SetConfig+0x4e0>)
 800a90e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a912:	461a      	mov	r2, r3
 800a914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a916:	fbb3 f2f2 	udiv	r2, r3, r2
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	085b      	lsrs	r3, r3, #1
 800a920:	441a      	add	r2, r3
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	fbb2 f3f3 	udiv	r3, r2, r3
 800a92a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a92c:	6a3b      	ldr	r3, [r7, #32]
 800a92e:	2b0f      	cmp	r3, #15
 800a930:	d909      	bls.n	800a946 <UART_SetConfig+0x4ae>
 800a932:	6a3b      	ldr	r3, [r7, #32]
 800a934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a938:	d205      	bcs.n	800a946 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a93a:	6a3b      	ldr	r3, [r7, #32]
 800a93c:	b29a      	uxth	r2, r3
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	60da      	str	r2, [r3, #12]
 800a944:	e002      	b.n	800a94c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800a946:	2301      	movs	r3, #1
 800a948:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	2201      	movs	r2, #1
 800a950:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	2201      	movs	r2, #1
 800a958:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	2200      	movs	r2, #0
 800a960:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	2200      	movs	r2, #0
 800a966:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a968:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3730      	adds	r7, #48	; 0x30
 800a970:	46bd      	mov	sp, r7
 800a972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a976:	bf00      	nop
 800a978:	0801f0b4 	.word	0x0801f0b4
 800a97c:	00f42400 	.word	0x00f42400

0800a980 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a98c:	f003 0301 	and.w	r3, r3, #1
 800a990:	2b00      	cmp	r3, #0
 800a992:	d00a      	beq.n	800a9aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	430a      	orrs	r2, r1
 800a9a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ae:	f003 0302 	and.w	r3, r3, #2
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d00a      	beq.n	800a9cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	430a      	orrs	r2, r1
 800a9ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d0:	f003 0304 	and.w	r3, r3, #4
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d00a      	beq.n	800a9ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	430a      	orrs	r2, r1
 800a9ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f2:	f003 0308 	and.w	r3, r3, #8
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d00a      	beq.n	800aa10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	430a      	orrs	r2, r1
 800aa0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa14:	f003 0310 	and.w	r3, r3, #16
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00a      	beq.n	800aa32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	430a      	orrs	r2, r1
 800aa30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa36:	f003 0320 	and.w	r3, r3, #32
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d00a      	beq.n	800aa54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	430a      	orrs	r2, r1
 800aa52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d01a      	beq.n	800aa96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	430a      	orrs	r2, r1
 800aa74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa7e:	d10a      	bne.n	800aa96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	430a      	orrs	r2, r1
 800aa94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00a      	beq.n	800aab8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	430a      	orrs	r2, r1
 800aab6:	605a      	str	r2, [r3, #4]
  }
}
 800aab8:	bf00      	nop
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bc80      	pop	{r7}
 800aac0:	4770      	bx	lr

0800aac2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b086      	sub	sp, #24
 800aac6:	af02      	add	r7, sp, #8
 800aac8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aad2:	f7f7 fe7f 	bl	80027d4 <HAL_GetTick>
 800aad6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f003 0308 	and.w	r3, r3, #8
 800aae2:	2b08      	cmp	r3, #8
 800aae4:	d10e      	bne.n	800ab04 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aae6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aaea:	9300      	str	r3, [sp, #0]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 f832 	bl	800ab5e <UART_WaitOnFlagUntilTimeout>
 800aafa:	4603      	mov	r3, r0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d001      	beq.n	800ab04 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab00:	2303      	movs	r3, #3
 800ab02:	e028      	b.n	800ab56 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f003 0304 	and.w	r3, r3, #4
 800ab0e:	2b04      	cmp	r3, #4
 800ab10:	d10e      	bne.n	800ab30 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab16:	9300      	str	r3, [sp, #0]
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 f81c 	bl	800ab5e <UART_WaitOnFlagUntilTimeout>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d001      	beq.n	800ab30 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	e012      	b.n	800ab56 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2220      	movs	r2, #32
 800ab34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2220      	movs	r2, #32
 800ab3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2200      	movs	r2, #0
 800ab44:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b09c      	sub	sp, #112	; 0x70
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	60f8      	str	r0, [r7, #12]
 800ab66:	60b9      	str	r1, [r7, #8]
 800ab68:	603b      	str	r3, [r7, #0]
 800ab6a:	4613      	mov	r3, r2
 800ab6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab6e:	e0a9      	b.n	800acc4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab76:	f000 80a5 	beq.w	800acc4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab7a:	f7f7 fe2b 	bl	80027d4 <HAL_GetTick>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	1ad3      	subs	r3, r2, r3
 800ab84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d302      	bcc.n	800ab90 <UART_WaitOnFlagUntilTimeout+0x32>
 800ab8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d140      	bne.n	800ac12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab98:	e853 3f00 	ldrex	r3, [r3]
 800ab9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ab9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aba0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aba4:	667b      	str	r3, [r7, #100]	; 0x64
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	461a      	mov	r2, r3
 800abac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800abb0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800abb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800abb6:	e841 2300 	strex	r3, r2, [r1]
 800abba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800abbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d1e6      	bne.n	800ab90 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	3308      	adds	r3, #8
 800abc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abcc:	e853 3f00 	ldrex	r3, [r3]
 800abd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800abd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd4:	f023 0301 	bic.w	r3, r3, #1
 800abd8:	663b      	str	r3, [r7, #96]	; 0x60
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	3308      	adds	r3, #8
 800abe0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800abe2:	64ba      	str	r2, [r7, #72]	; 0x48
 800abe4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800abe8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abea:	e841 2300 	strex	r3, r2, [r1]
 800abee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800abf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d1e5      	bne.n	800abc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2220      	movs	r2, #32
 800abfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2220      	movs	r2, #32
 800ac02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800ac0e:	2303      	movs	r3, #3
 800ac10:	e069      	b.n	800ace6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f003 0304 	and.w	r3, r3, #4
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d051      	beq.n	800acc4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	69db      	ldr	r3, [r3, #28]
 800ac26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac2e:	d149      	bne.n	800acc4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac38:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac42:	e853 3f00 	ldrex	r3, [r3]
 800ac46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ac4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	461a      	mov	r2, r3
 800ac56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac58:	637b      	str	r3, [r7, #52]	; 0x34
 800ac5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac60:	e841 2300 	strex	r3, r2, [r1]
 800ac64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ac66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d1e6      	bne.n	800ac3a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	3308      	adds	r3, #8
 800ac72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	e853 3f00 	ldrex	r3, [r3]
 800ac7a:	613b      	str	r3, [r7, #16]
   return(result);
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	f023 0301 	bic.w	r3, r3, #1
 800ac82:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	3308      	adds	r3, #8
 800ac8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ac8c:	623a      	str	r2, [r7, #32]
 800ac8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac90:	69f9      	ldr	r1, [r7, #28]
 800ac92:	6a3a      	ldr	r2, [r7, #32]
 800ac94:	e841 2300 	strex	r3, r2, [r1]
 800ac98:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac9a:	69bb      	ldr	r3, [r7, #24]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d1e5      	bne.n	800ac6c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2220      	movs	r2, #32
 800aca4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2220      	movs	r2, #32
 800acac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2220      	movs	r2, #32
 800acb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2200      	movs	r2, #0
 800acbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800acc0:	2303      	movs	r3, #3
 800acc2:	e010      	b.n	800ace6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	69da      	ldr	r2, [r3, #28]
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	4013      	ands	r3, r2
 800acce:	68ba      	ldr	r2, [r7, #8]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	bf0c      	ite	eq
 800acd4:	2301      	moveq	r3, #1
 800acd6:	2300      	movne	r3, #0
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	461a      	mov	r2, r3
 800acdc:	79fb      	ldrb	r3, [r7, #7]
 800acde:	429a      	cmp	r2, r3
 800ace0:	f43f af46 	beq.w	800ab70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ace4:	2300      	movs	r3, #0
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3770      	adds	r7, #112	; 0x70
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
	...

0800acf0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b0a3      	sub	sp, #140	; 0x8c
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	4613      	mov	r3, r2
 800acfc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	68ba      	ldr	r2, [r7, #8]
 800ad02:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	88fa      	ldrh	r2, [r7, #6]
 800ad08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	88fa      	ldrh	r2, [r7, #6]
 800ad10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2200      	movs	r2, #0
 800ad18:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad22:	d10e      	bne.n	800ad42 <UART_Start_Receive_IT+0x52>
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	691b      	ldr	r3, [r3, #16]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d105      	bne.n	800ad38 <UART_Start_Receive_IT+0x48>
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ad32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ad36:	e02d      	b.n	800ad94 <UART_Start_Receive_IT+0xa4>
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	22ff      	movs	r2, #255	; 0xff
 800ad3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ad40:	e028      	b.n	800ad94 <UART_Start_Receive_IT+0xa4>
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	689b      	ldr	r3, [r3, #8]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d10d      	bne.n	800ad66 <UART_Start_Receive_IT+0x76>
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d104      	bne.n	800ad5c <UART_Start_Receive_IT+0x6c>
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	22ff      	movs	r2, #255	; 0xff
 800ad56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ad5a:	e01b      	b.n	800ad94 <UART_Start_Receive_IT+0xa4>
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	227f      	movs	r2, #127	; 0x7f
 800ad60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ad64:	e016      	b.n	800ad94 <UART_Start_Receive_IT+0xa4>
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	689b      	ldr	r3, [r3, #8]
 800ad6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad6e:	d10d      	bne.n	800ad8c <UART_Start_Receive_IT+0x9c>
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	691b      	ldr	r3, [r3, #16]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d104      	bne.n	800ad82 <UART_Start_Receive_IT+0x92>
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	227f      	movs	r2, #127	; 0x7f
 800ad7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ad80:	e008      	b.n	800ad94 <UART_Start_Receive_IT+0xa4>
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	223f      	movs	r2, #63	; 0x3f
 800ad86:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ad8a:	e003      	b.n	800ad94 <UART_Start_Receive_IT+0xa4>
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2200      	movs	r2, #0
 800ad98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2222      	movs	r2, #34	; 0x22
 800ada0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	3308      	adds	r3, #8
 800adaa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adae:	e853 3f00 	ldrex	r3, [r3]
 800adb2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800adb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800adb6:	f043 0301 	orr.w	r3, r3, #1
 800adba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	3308      	adds	r3, #8
 800adc4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800adc8:	673a      	str	r2, [r7, #112]	; 0x70
 800adca:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adcc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800adce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800add0:	e841 2300 	strex	r3, r2, [r1]
 800add4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800add6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800add8:	2b00      	cmp	r3, #0
 800adda:	d1e3      	bne.n	800ada4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ade0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ade4:	d14f      	bne.n	800ae86 <UART_Start_Receive_IT+0x196>
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800adec:	88fa      	ldrh	r2, [r7, #6]
 800adee:	429a      	cmp	r2, r3
 800adf0:	d349      	bcc.n	800ae86 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	689b      	ldr	r3, [r3, #8]
 800adf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adfa:	d107      	bne.n	800ae0c <UART_Start_Receive_IT+0x11c>
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	691b      	ldr	r3, [r3, #16]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d103      	bne.n	800ae0c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	4a46      	ldr	r2, [pc, #280]	; (800af20 <UART_Start_Receive_IT+0x230>)
 800ae08:	675a      	str	r2, [r3, #116]	; 0x74
 800ae0a:	e002      	b.n	800ae12 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	4a45      	ldr	r2, [pc, #276]	; (800af24 <UART_Start_Receive_IT+0x234>)
 800ae10:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	691b      	ldr	r3, [r3, #16]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d01a      	beq.n	800ae50 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae22:	e853 3f00 	ldrex	r3, [r3]
 800ae26:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ae28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	461a      	mov	r2, r3
 800ae38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ae3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae3e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae40:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ae42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ae44:	e841 2300 	strex	r3, r2, [r1]
 800ae48:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ae4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d1e4      	bne.n	800ae1a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	3308      	adds	r3, #8
 800ae56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae5a:	e853 3f00 	ldrex	r3, [r3]
 800ae5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ae60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae66:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	3308      	adds	r3, #8
 800ae6e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ae70:	64ba      	str	r2, [r7, #72]	; 0x48
 800ae72:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae74:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ae76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae78:	e841 2300 	strex	r3, r2, [r1]
 800ae7c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ae7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d1e5      	bne.n	800ae50 <UART_Start_Receive_IT+0x160>
 800ae84:	e046      	b.n	800af14 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	689b      	ldr	r3, [r3, #8]
 800ae8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae8e:	d107      	bne.n	800aea0 <UART_Start_Receive_IT+0x1b0>
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	691b      	ldr	r3, [r3, #16]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d103      	bne.n	800aea0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	4a23      	ldr	r2, [pc, #140]	; (800af28 <UART_Start_Receive_IT+0x238>)
 800ae9c:	675a      	str	r2, [r3, #116]	; 0x74
 800ae9e:	e002      	b.n	800aea6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	4a22      	ldr	r2, [pc, #136]	; (800af2c <UART_Start_Receive_IT+0x23c>)
 800aea4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	691b      	ldr	r3, [r3, #16]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d019      	beq.n	800aee2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb6:	e853 3f00 	ldrex	r3, [r3]
 800aeba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800aec2:	677b      	str	r3, [r7, #116]	; 0x74
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	461a      	mov	r2, r3
 800aeca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aecc:	637b      	str	r3, [r7, #52]	; 0x34
 800aece:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aed2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aed4:	e841 2300 	strex	r3, r2, [r1]
 800aed8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aeda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d1e6      	bne.n	800aeae <UART_Start_Receive_IT+0x1be>
 800aee0:	e018      	b.n	800af14 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	e853 3f00 	ldrex	r3, [r3]
 800aeee:	613b      	str	r3, [r7, #16]
   return(result);
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	f043 0320 	orr.w	r3, r3, #32
 800aef6:	67bb      	str	r3, [r7, #120]	; 0x78
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	461a      	mov	r2, r3
 800aefe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af00:	623b      	str	r3, [r7, #32]
 800af02:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af04:	69f9      	ldr	r1, [r7, #28]
 800af06:	6a3a      	ldr	r2, [r7, #32]
 800af08:	e841 2300 	strex	r3, r2, [r1]
 800af0c:	61bb      	str	r3, [r7, #24]
   return(result);
 800af0e:	69bb      	ldr	r3, [r7, #24]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d1e6      	bne.n	800aee2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	378c      	adds	r7, #140	; 0x8c
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bc80      	pop	{r7}
 800af1e:	4770      	bx	lr
 800af20:	0800b905 	.word	0x0800b905
 800af24:	0800b5a5 	.word	0x0800b5a5
 800af28:	0800b3ed 	.word	0x0800b3ed
 800af2c:	0800b235 	.word	0x0800b235

0800af30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800af30:	b480      	push	{r7}
 800af32:	b08f      	sub	sp, #60	; 0x3c
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af3e:	6a3b      	ldr	r3, [r7, #32]
 800af40:	e853 3f00 	ldrex	r3, [r3]
 800af44:	61fb      	str	r3, [r7, #28]
   return(result);
 800af46:	69fb      	ldr	r3, [r7, #28]
 800af48:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800af4c:	637b      	str	r3, [r7, #52]	; 0x34
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	461a      	mov	r2, r3
 800af54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af56:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af58:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af5e:	e841 2300 	strex	r3, r2, [r1]
 800af62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af66:	2b00      	cmp	r3, #0
 800af68:	d1e6      	bne.n	800af38 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	3308      	adds	r3, #8
 800af70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	e853 3f00 	ldrex	r3, [r3]
 800af78:	60bb      	str	r3, [r7, #8]
   return(result);
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800af80:	633b      	str	r3, [r7, #48]	; 0x30
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	3308      	adds	r3, #8
 800af88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af8a:	61ba      	str	r2, [r7, #24]
 800af8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af8e:	6979      	ldr	r1, [r7, #20]
 800af90:	69ba      	ldr	r2, [r7, #24]
 800af92:	e841 2300 	strex	r3, r2, [r1]
 800af96:	613b      	str	r3, [r7, #16]
   return(result);
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d1e5      	bne.n	800af6a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2220      	movs	r2, #32
 800afa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800afa6:	bf00      	nop
 800afa8:	373c      	adds	r7, #60	; 0x3c
 800afaa:	46bd      	mov	sp, r7
 800afac:	bc80      	pop	{r7}
 800afae:	4770      	bx	lr

0800afb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b095      	sub	sp, #84	; 0x54
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afc0:	e853 3f00 	ldrex	r3, [r3]
 800afc4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800afc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800afcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	461a      	mov	r2, r3
 800afd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afd6:	643b      	str	r3, [r7, #64]	; 0x40
 800afd8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800afdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800afde:	e841 2300 	strex	r3, r2, [r1]
 800afe2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800afe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d1e6      	bne.n	800afb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	3308      	adds	r3, #8
 800aff0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff2:	6a3b      	ldr	r3, [r7, #32]
 800aff4:	e853 3f00 	ldrex	r3, [r3]
 800aff8:	61fb      	str	r3, [r7, #28]
   return(result);
 800affa:	69fb      	ldr	r3, [r7, #28]
 800affc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b000:	f023 0301 	bic.w	r3, r3, #1
 800b004:	64bb      	str	r3, [r7, #72]	; 0x48
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	3308      	adds	r3, #8
 800b00c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b00e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b010:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b012:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b016:	e841 2300 	strex	r3, r2, [r1]
 800b01a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d1e3      	bne.n	800afea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b026:	2b01      	cmp	r3, #1
 800b028:	d118      	bne.n	800b05c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	e853 3f00 	ldrex	r3, [r3]
 800b036:	60bb      	str	r3, [r7, #8]
   return(result);
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	f023 0310 	bic.w	r3, r3, #16
 800b03e:	647b      	str	r3, [r7, #68]	; 0x44
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	461a      	mov	r2, r3
 800b046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b048:	61bb      	str	r3, [r7, #24]
 800b04a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b04c:	6979      	ldr	r1, [r7, #20]
 800b04e:	69ba      	ldr	r2, [r7, #24]
 800b050:	e841 2300 	strex	r3, r2, [r1]
 800b054:	613b      	str	r3, [r7, #16]
   return(result);
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d1e6      	bne.n	800b02a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2220      	movs	r2, #32
 800b060:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2200      	movs	r2, #0
 800b068:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b070:	bf00      	nop
 800b072:	3754      	adds	r7, #84	; 0x54
 800b074:	46bd      	mov	sp, r7
 800b076:	bc80      	pop	{r7}
 800b078:	4770      	bx	lr

0800b07a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b07a:	b580      	push	{r7, lr}
 800b07c:	b090      	sub	sp, #64	; 0x40
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b086:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f003 0320 	and.w	r3, r3, #32
 800b092:	2b00      	cmp	r3, #0
 800b094:	d137      	bne.n	800b106 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b098:	2200      	movs	r2, #0
 800b09a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b09e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	3308      	adds	r3, #8
 800b0a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a8:	e853 3f00 	ldrex	r3, [r3]
 800b0ac:	623b      	str	r3, [r7, #32]
   return(result);
 800b0ae:	6a3b      	ldr	r3, [r7, #32]
 800b0b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0b4:	63bb      	str	r3, [r7, #56]	; 0x38
 800b0b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	3308      	adds	r3, #8
 800b0bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0be:	633a      	str	r2, [r7, #48]	; 0x30
 800b0c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0c6:	e841 2300 	strex	r3, r2, [r1]
 800b0ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d1e5      	bne.n	800b09e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b0d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	e853 3f00 	ldrex	r3, [r3]
 800b0de:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0e6:	637b      	str	r3, [r7, #52]	; 0x34
 800b0e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0f0:	61fb      	str	r3, [r7, #28]
 800b0f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f4:	69b9      	ldr	r1, [r7, #24]
 800b0f6:	69fa      	ldr	r2, [r7, #28]
 800b0f8:	e841 2300 	strex	r3, r2, [r1]
 800b0fc:	617b      	str	r3, [r7, #20]
   return(result);
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d1e6      	bne.n	800b0d2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b104:	e002      	b.n	800b10c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b106:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b108:	f7f8 f820 	bl	800314c <HAL_UART_TxCpltCallback>
}
 800b10c:	bf00      	nop
 800b10e:	3740      	adds	r7, #64	; 0x40
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b120:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b122:	68f8      	ldr	r0, [r7, #12]
 800b124:	f7ff f99a 	bl	800a45c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b128:	bf00      	nop
 800b12a:	3710      	adds	r7, #16
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b086      	sub	sp, #24
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b13c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b144:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b14c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b158:	2b80      	cmp	r3, #128	; 0x80
 800b15a:	d109      	bne.n	800b170 <UART_DMAError+0x40>
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	2b21      	cmp	r3, #33	; 0x21
 800b160:	d106      	bne.n	800b170 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	2200      	movs	r2, #0
 800b166:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800b16a:	6978      	ldr	r0, [r7, #20]
 800b16c:	f7ff fee0 	bl	800af30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b17a:	2b40      	cmp	r3, #64	; 0x40
 800b17c:	d109      	bne.n	800b192 <UART_DMAError+0x62>
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2b22      	cmp	r3, #34	; 0x22
 800b182:	d106      	bne.n	800b192 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	2200      	movs	r2, #0
 800b188:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b18c:	6978      	ldr	r0, [r7, #20]
 800b18e:	f7ff ff0f 	bl	800afb0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b198:	f043 0210 	orr.w	r2, r3, #16
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b1a2:	6978      	ldr	r0, [r7, #20]
 800b1a4:	f7ff f963 	bl	800a46e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1a8:	bf00      	nop
 800b1aa:	3718      	adds	r7, #24
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b1ce:	68f8      	ldr	r0, [r7, #12]
 800b1d0:	f7ff f94d 	bl	800a46e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1d4:	bf00      	nop
 800b1d6:	3710      	adds	r7, #16
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b088      	sub	sp, #32
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	e853 3f00 	ldrex	r3, [r3]
 800b1f0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1f8:	61fb      	str	r3, [r7, #28]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	461a      	mov	r2, r3
 800b200:	69fb      	ldr	r3, [r7, #28]
 800b202:	61bb      	str	r3, [r7, #24]
 800b204:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b206:	6979      	ldr	r1, [r7, #20]
 800b208:	69ba      	ldr	r2, [r7, #24]
 800b20a:	e841 2300 	strex	r3, r2, [r1]
 800b20e:	613b      	str	r3, [r7, #16]
   return(result);
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d1e6      	bne.n	800b1e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2220      	movs	r2, #32
 800b21a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f7f7 ff91 	bl	800314c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b22a:	bf00      	nop
 800b22c:	3720      	adds	r7, #32
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
	...

0800b234 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b09c      	sub	sp, #112	; 0x70
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b242:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b24c:	2b22      	cmp	r3, #34	; 0x22
 800b24e:	f040 80be 	bne.w	800b3ce <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b258:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b25c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b260:	b2d9      	uxtb	r1, r3
 800b262:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b266:	b2da      	uxtb	r2, r3
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b26c:	400a      	ands	r2, r1
 800b26e:	b2d2      	uxtb	r2, r2
 800b270:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b276:	1c5a      	adds	r2, r3, #1
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b282:	b29b      	uxth	r3, r3
 800b284:	3b01      	subs	r3, #1
 800b286:	b29a      	uxth	r2, r3
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b294:	b29b      	uxth	r3, r3
 800b296:	2b00      	cmp	r3, #0
 800b298:	f040 80a1 	bne.w	800b3de <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2a4:	e853 3f00 	ldrex	r3, [r3]
 800b2a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b2aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b2b0:	66bb      	str	r3, [r7, #104]	; 0x68
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b2ba:	65bb      	str	r3, [r7, #88]	; 0x58
 800b2bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b2c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b2c2:	e841 2300 	strex	r3, r2, [r1]
 800b2c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b2c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d1e6      	bne.n	800b29c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	3308      	adds	r3, #8
 800b2d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d8:	e853 3f00 	ldrex	r3, [r3]
 800b2dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b2de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2e0:	f023 0301 	bic.w	r3, r3, #1
 800b2e4:	667b      	str	r3, [r7, #100]	; 0x64
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	3308      	adds	r3, #8
 800b2ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b2ee:	647a      	str	r2, [r7, #68]	; 0x44
 800b2f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b2f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2f6:	e841 2300 	strex	r3, r2, [r1]
 800b2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b2fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d1e5      	bne.n	800b2ce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2220      	movs	r2, #32
 800b306:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2200      	movs	r2, #0
 800b30e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2200      	movs	r2, #0
 800b314:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4a33      	ldr	r2, [pc, #204]	; (800b3e8 <UART_RxISR_8BIT+0x1b4>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d01f      	beq.n	800b360 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d018      	beq.n	800b360 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b336:	e853 3f00 	ldrex	r3, [r3]
 800b33a:	623b      	str	r3, [r7, #32]
   return(result);
 800b33c:	6a3b      	ldr	r3, [r7, #32]
 800b33e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b342:	663b      	str	r3, [r7, #96]	; 0x60
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	461a      	mov	r2, r3
 800b34a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b34c:	633b      	str	r3, [r7, #48]	; 0x30
 800b34e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b350:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b354:	e841 2300 	strex	r3, r2, [r1]
 800b358:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d1e6      	bne.n	800b32e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b364:	2b01      	cmp	r3, #1
 800b366:	d12e      	bne.n	800b3c6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2200      	movs	r2, #0
 800b36c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	e853 3f00 	ldrex	r3, [r3]
 800b37a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f023 0310 	bic.w	r3, r3, #16
 800b382:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	461a      	mov	r2, r3
 800b38a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b38c:	61fb      	str	r3, [r7, #28]
 800b38e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b390:	69b9      	ldr	r1, [r7, #24]
 800b392:	69fa      	ldr	r2, [r7, #28]
 800b394:	e841 2300 	strex	r3, r2, [r1]
 800b398:	617b      	str	r3, [r7, #20]
   return(result);
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d1e6      	bne.n	800b36e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	69db      	ldr	r3, [r3, #28]
 800b3a6:	f003 0310 	and.w	r3, r3, #16
 800b3aa:	2b10      	cmp	r3, #16
 800b3ac:	d103      	bne.n	800b3b6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	2210      	movs	r2, #16
 800b3b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b3bc:	4619      	mov	r1, r3
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f7ff f85e 	bl	800a480 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b3c4:	e00b      	b.n	800b3de <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f7f7 fed6 	bl	8003178 <HAL_UART_RxCpltCallback>
}
 800b3cc:	e007      	b.n	800b3de <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	699a      	ldr	r2, [r3, #24]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f042 0208 	orr.w	r2, r2, #8
 800b3dc:	619a      	str	r2, [r3, #24]
}
 800b3de:	bf00      	nop
 800b3e0:	3770      	adds	r7, #112	; 0x70
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	40008000 	.word	0x40008000

0800b3ec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b09c      	sub	sp, #112	; 0x70
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b3fa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b404:	2b22      	cmp	r3, #34	; 0x22
 800b406:	f040 80be 	bne.w	800b586 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b410:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b418:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b41a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800b41e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b422:	4013      	ands	r3, r2
 800b424:	b29a      	uxth	r2, r3
 800b426:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b428:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b42e:	1c9a      	adds	r2, r3, #2
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b43a:	b29b      	uxth	r3, r3
 800b43c:	3b01      	subs	r3, #1
 800b43e:	b29a      	uxth	r2, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b44c:	b29b      	uxth	r3, r3
 800b44e:	2b00      	cmp	r3, #0
 800b450:	f040 80a1 	bne.w	800b596 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b45a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b45c:	e853 3f00 	ldrex	r3, [r3]
 800b460:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b464:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b468:	667b      	str	r3, [r7, #100]	; 0x64
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	461a      	mov	r2, r3
 800b470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b472:	657b      	str	r3, [r7, #84]	; 0x54
 800b474:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b476:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b478:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b47a:	e841 2300 	strex	r3, r2, [r1]
 800b47e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b482:	2b00      	cmp	r3, #0
 800b484:	d1e6      	bne.n	800b454 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	3308      	adds	r3, #8
 800b48c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b490:	e853 3f00 	ldrex	r3, [r3]
 800b494:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b498:	f023 0301 	bic.w	r3, r3, #1
 800b49c:	663b      	str	r3, [r7, #96]	; 0x60
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	3308      	adds	r3, #8
 800b4a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b4a6:	643a      	str	r2, [r7, #64]	; 0x40
 800b4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b4ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b4ae:	e841 2300 	strex	r3, r2, [r1]
 800b4b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d1e5      	bne.n	800b486 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2220      	movs	r2, #32
 800b4be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4a33      	ldr	r2, [pc, #204]	; (800b5a0 <UART_RxISR_16BIT+0x1b4>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d01f      	beq.n	800b518 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d018      	beq.n	800b518 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ec:	6a3b      	ldr	r3, [r7, #32]
 800b4ee:	e853 3f00 	ldrex	r3, [r3]
 800b4f2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4f4:	69fb      	ldr	r3, [r7, #28]
 800b4f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b4fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	461a      	mov	r2, r3
 800b502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b504:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b506:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b50a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b50c:	e841 2300 	strex	r3, r2, [r1]
 800b510:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b514:	2b00      	cmp	r3, #0
 800b516:	d1e6      	bne.n	800b4e6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d12e      	bne.n	800b57e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2200      	movs	r2, #0
 800b524:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	e853 3f00 	ldrex	r3, [r3]
 800b532:	60bb      	str	r3, [r7, #8]
   return(result);
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	f023 0310 	bic.w	r3, r3, #16
 800b53a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	461a      	mov	r2, r3
 800b542:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b544:	61bb      	str	r3, [r7, #24]
 800b546:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b548:	6979      	ldr	r1, [r7, #20]
 800b54a:	69ba      	ldr	r2, [r7, #24]
 800b54c:	e841 2300 	strex	r3, r2, [r1]
 800b550:	613b      	str	r3, [r7, #16]
   return(result);
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d1e6      	bne.n	800b526 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	69db      	ldr	r3, [r3, #28]
 800b55e:	f003 0310 	and.w	r3, r3, #16
 800b562:	2b10      	cmp	r3, #16
 800b564:	d103      	bne.n	800b56e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	2210      	movs	r2, #16
 800b56c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b574:	4619      	mov	r1, r3
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f7fe ff82 	bl	800a480 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b57c:	e00b      	b.n	800b596 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f7f7 fdfa 	bl	8003178 <HAL_UART_RxCpltCallback>
}
 800b584:	e007      	b.n	800b596 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	699a      	ldr	r2, [r3, #24]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f042 0208 	orr.w	r2, r2, #8
 800b594:	619a      	str	r2, [r3, #24]
}
 800b596:	bf00      	nop
 800b598:	3770      	adds	r7, #112	; 0x70
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	40008000 	.word	0x40008000

0800b5a4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b0ac      	sub	sp, #176	; 0xb0
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b5b2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	69db      	ldr	r3, [r3, #28]
 800b5bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5da:	2b22      	cmp	r3, #34	; 0x22
 800b5dc:	f040 8182 	bne.w	800b8e4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b5e6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b5ea:	e125      	b.n	800b838 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b5f6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b5fa:	b2d9      	uxtb	r1, r3
 800b5fc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800b600:	b2da      	uxtb	r2, r3
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b606:	400a      	ands	r2, r1
 800b608:	b2d2      	uxtb	r2, r2
 800b60a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b610:	1c5a      	adds	r2, r3, #1
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	3b01      	subs	r3, #1
 800b620:	b29a      	uxth	r2, r3
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	69db      	ldr	r3, [r3, #28]
 800b62e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b636:	f003 0307 	and.w	r3, r3, #7
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d053      	beq.n	800b6e6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b63e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b642:	f003 0301 	and.w	r3, r3, #1
 800b646:	2b00      	cmp	r3, #0
 800b648:	d011      	beq.n	800b66e <UART_RxISR_8BIT_FIFOEN+0xca>
 800b64a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b64e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b652:	2b00      	cmp	r3, #0
 800b654:	d00b      	beq.n	800b66e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	2201      	movs	r2, #1
 800b65c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b664:	f043 0201 	orr.w	r2, r3, #1
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b66e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b672:	f003 0302 	and.w	r3, r3, #2
 800b676:	2b00      	cmp	r3, #0
 800b678:	d011      	beq.n	800b69e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b67a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b67e:	f003 0301 	and.w	r3, r3, #1
 800b682:	2b00      	cmp	r3, #0
 800b684:	d00b      	beq.n	800b69e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2202      	movs	r2, #2
 800b68c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b694:	f043 0204 	orr.w	r2, r3, #4
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b69e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b6a2:	f003 0304 	and.w	r3, r3, #4
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d011      	beq.n	800b6ce <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b6aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b6ae:	f003 0301 	and.w	r3, r3, #1
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d00b      	beq.n	800b6ce <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	2204      	movs	r2, #4
 800b6bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6c4:	f043 0202 	orr.w	r2, r3, #2
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d006      	beq.n	800b6e6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f7fe fec8 	bl	800a46e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	f040 80a2 	bne.w	800b838 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b6fc:	e853 3f00 	ldrex	r3, [r3]
 800b700:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800b702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b708:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	461a      	mov	r2, r3
 800b712:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b716:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b718:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b71a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b71c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b71e:	e841 2300 	strex	r3, r2, [r1]
 800b722:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800b724:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b726:	2b00      	cmp	r3, #0
 800b728:	d1e4      	bne.n	800b6f4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	3308      	adds	r3, #8
 800b730:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b734:	e853 3f00 	ldrex	r3, [r3]
 800b738:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b73a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b73c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b740:	f023 0301 	bic.w	r3, r3, #1
 800b744:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	3308      	adds	r3, #8
 800b74e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b752:	66ba      	str	r2, [r7, #104]	; 0x68
 800b754:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b756:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b758:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b75a:	e841 2300 	strex	r3, r2, [r1]
 800b75e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b760:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1e1      	bne.n	800b72a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2220      	movs	r2, #32
 800b76a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2200      	movs	r2, #0
 800b772:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4a5f      	ldr	r2, [pc, #380]	; (800b8fc <UART_RxISR_8BIT_FIFOEN+0x358>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d021      	beq.n	800b7c8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d01a      	beq.n	800b7c8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b79a:	e853 3f00 	ldrex	r3, [r3]
 800b79e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b7a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b7a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b7b4:	657b      	str	r3, [r7, #84]	; 0x54
 800b7b6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b7ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b7bc:	e841 2300 	strex	r3, r2, [r1]
 800b7c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b7c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d1e4      	bne.n	800b792 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d130      	bne.n	800b832 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7de:	e853 3f00 	ldrex	r3, [r3]
 800b7e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e6:	f023 0310 	bic.w	r3, r3, #16
 800b7ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b7f8:	643b      	str	r3, [r7, #64]	; 0x40
 800b7fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b7fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b800:	e841 2300 	strex	r3, r2, [r1]
 800b804:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d1e4      	bne.n	800b7d6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	69db      	ldr	r3, [r3, #28]
 800b812:	f003 0310 	and.w	r3, r3, #16
 800b816:	2b10      	cmp	r3, #16
 800b818:	d103      	bne.n	800b822 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2210      	movs	r2, #16
 800b820:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b828:	4619      	mov	r1, r3
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f7fe fe28 	bl	800a480 <HAL_UARTEx_RxEventCallback>
 800b830:	e002      	b.n	800b838 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f7f7 fca0 	bl	8003178 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b838:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d006      	beq.n	800b84e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800b840:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b844:	f003 0320 	and.w	r3, r3, #32
 800b848:	2b00      	cmp	r3, #0
 800b84a:	f47f aecf 	bne.w	800b5ec <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b854:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b858:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d049      	beq.n	800b8f4 <UART_RxISR_8BIT_FIFOEN+0x350>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b866:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d242      	bcs.n	800b8f4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	3308      	adds	r3, #8
 800b874:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b876:	6a3b      	ldr	r3, [r7, #32]
 800b878:	e853 3f00 	ldrex	r3, [r3]
 800b87c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b87e:	69fb      	ldr	r3, [r7, #28]
 800b880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b884:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	3308      	adds	r3, #8
 800b88e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b892:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b894:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b896:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b89a:	e841 2300 	strex	r3, r2, [r1]
 800b89e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d1e3      	bne.n	800b86e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	4a15      	ldr	r2, [pc, #84]	; (800b900 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b8aa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	e853 3f00 	ldrex	r3, [r3]
 800b8b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	f043 0320 	orr.w	r3, r3, #32
 800b8c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b8ce:	61bb      	str	r3, [r7, #24]
 800b8d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d2:	6979      	ldr	r1, [r7, #20]
 800b8d4:	69ba      	ldr	r2, [r7, #24]
 800b8d6:	e841 2300 	strex	r3, r2, [r1]
 800b8da:	613b      	str	r3, [r7, #16]
   return(result);
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d1e4      	bne.n	800b8ac <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b8e2:	e007      	b.n	800b8f4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	699a      	ldr	r2, [r3, #24]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f042 0208 	orr.w	r2, r2, #8
 800b8f2:	619a      	str	r2, [r3, #24]
}
 800b8f4:	bf00      	nop
 800b8f6:	37b0      	adds	r7, #176	; 0xb0
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	40008000 	.word	0x40008000
 800b900:	0800b235 	.word	0x0800b235

0800b904 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b0ae      	sub	sp, #184	; 0xb8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b912:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	69db      	ldr	r3, [r3, #28]
 800b91c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	689b      	ldr	r3, [r3, #8]
 800b930:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b93a:	2b22      	cmp	r3, #34	; 0x22
 800b93c:	f040 8186 	bne.w	800bc4c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b946:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b94a:	e129      	b.n	800bba0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b952:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b95a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b95e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800b962:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800b966:	4013      	ands	r3, r2
 800b968:	b29a      	uxth	r2, r3
 800b96a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b96e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b974:	1c9a      	adds	r2, r3, #2
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b980:	b29b      	uxth	r3, r3
 800b982:	3b01      	subs	r3, #1
 800b984:	b29a      	uxth	r2, r3
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	69db      	ldr	r3, [r3, #28]
 800b992:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b996:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b99a:	f003 0307 	and.w	r3, r3, #7
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d053      	beq.n	800ba4a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b9a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b9a6:	f003 0301 	and.w	r3, r3, #1
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d011      	beq.n	800b9d2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800b9ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b9b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d00b      	beq.n	800b9d2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9c8:	f043 0201 	orr.w	r2, r3, #1
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b9d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b9d6:	f003 0302 	and.w	r3, r3, #2
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d011      	beq.n	800ba02 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b9de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b9e2:	f003 0301 	and.w	r3, r3, #1
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00b      	beq.n	800ba02 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2202      	movs	r2, #2
 800b9f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9f8:	f043 0204 	orr.w	r2, r3, #4
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ba06:	f003 0304 	and.w	r3, r3, #4
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d011      	beq.n	800ba32 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ba0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ba12:	f003 0301 	and.w	r3, r3, #1
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d00b      	beq.n	800ba32 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	2204      	movs	r2, #4
 800ba20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba28:	f043 0202 	orr.w	r2, r3, #2
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d006      	beq.n	800ba4a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f7fe fd16 	bl	800a46e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2200      	movs	r2, #0
 800ba46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	f040 80a4 	bne.w	800bba0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba60:	e853 3f00 	ldrex	r3, [r3]
 800ba64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ba66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	461a      	mov	r2, r3
 800ba76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ba7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ba7e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ba82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ba86:	e841 2300 	strex	r3, r2, [r1]
 800ba8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ba8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d1e2      	bne.n	800ba58 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	3308      	adds	r3, #8
 800ba98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba9c:	e853 3f00 	ldrex	r3, [r3]
 800baa0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800baa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800baa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800baa8:	f023 0301 	bic.w	r3, r3, #1
 800baac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	3308      	adds	r3, #8
 800bab6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800baba:	66fa      	str	r2, [r7, #108]	; 0x6c
 800babc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800babe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bac0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bac2:	e841 2300 	strex	r3, r2, [r1]
 800bac6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d1e1      	bne.n	800ba92 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2220      	movs	r2, #32
 800bad2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2200      	movs	r2, #0
 800bada:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2200      	movs	r2, #0
 800bae0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a5f      	ldr	r2, [pc, #380]	; (800bc64 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d021      	beq.n	800bb30 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d01a      	beq.n	800bb30 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb02:	e853 3f00 	ldrex	r3, [r3]
 800bb06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bb08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bb0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	461a      	mov	r2, r3
 800bb18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bb1c:	65bb      	str	r3, [r7, #88]	; 0x58
 800bb1e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bb22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb24:	e841 2300 	strex	r3, r2, [r1]
 800bb28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bb2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d1e4      	bne.n	800bafa <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d130      	bne.n	800bb9a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb46:	e853 3f00 	ldrex	r3, [r3]
 800bb4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bb4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb4e:	f023 0310 	bic.w	r3, r3, #16
 800bb52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bb60:	647b      	str	r3, [r7, #68]	; 0x44
 800bb62:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb68:	e841 2300 	strex	r3, r2, [r1]
 800bb6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bb6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d1e4      	bne.n	800bb3e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	69db      	ldr	r3, [r3, #28]
 800bb7a:	f003 0310 	and.w	r3, r3, #16
 800bb7e:	2b10      	cmp	r3, #16
 800bb80:	d103      	bne.n	800bb8a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	2210      	movs	r2, #16
 800bb88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bb90:	4619      	mov	r1, r3
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f7fe fc74 	bl	800a480 <HAL_UARTEx_RxEventCallback>
 800bb98:	e002      	b.n	800bba0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f7f7 faec 	bl	8003178 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bba0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d006      	beq.n	800bbb6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800bba8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bbac:	f003 0320 	and.w	r3, r3, #32
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	f47f aecb 	bne.w	800b94c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bbbc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bbc0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d049      	beq.n	800bc5c <UART_RxISR_16BIT_FIFOEN+0x358>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bbce:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d242      	bcs.n	800bc5c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	3308      	adds	r3, #8
 800bbdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe0:	e853 3f00 	ldrex	r3, [r3]
 800bbe4:	623b      	str	r3, [r7, #32]
   return(result);
 800bbe6:	6a3b      	ldr	r3, [r7, #32]
 800bbe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bbec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	3308      	adds	r3, #8
 800bbf6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800bbfa:	633a      	str	r2, [r7, #48]	; 0x30
 800bbfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc02:	e841 2300 	strex	r3, r2, [r1]
 800bc06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d1e3      	bne.n	800bbd6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	4a15      	ldr	r2, [pc, #84]	; (800bc68 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800bc12:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	e853 3f00 	ldrex	r3, [r3]
 800bc20:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f043 0320 	orr.w	r3, r3, #32
 800bc28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	461a      	mov	r2, r3
 800bc32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc36:	61fb      	str	r3, [r7, #28]
 800bc38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc3a:	69b9      	ldr	r1, [r7, #24]
 800bc3c:	69fa      	ldr	r2, [r7, #28]
 800bc3e:	e841 2300 	strex	r3, r2, [r1]
 800bc42:	617b      	str	r3, [r7, #20]
   return(result);
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d1e4      	bne.n	800bc14 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bc4a:	e007      	b.n	800bc5c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	699a      	ldr	r2, [r3, #24]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f042 0208 	orr.w	r2, r2, #8
 800bc5a:	619a      	str	r2, [r3, #24]
}
 800bc5c:	bf00      	nop
 800bc5e:	37b8      	adds	r7, #184	; 0xb8
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}
 800bc64:	40008000 	.word	0x40008000
 800bc68:	0800b3ed 	.word	0x0800b3ed

0800bc6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b083      	sub	sp, #12
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bc74:	bf00      	nop
 800bc76:	370c      	adds	r7, #12
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bc80      	pop	{r7}
 800bc7c:	4770      	bx	lr

0800bc7e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bc7e:	b480      	push	{r7}
 800bc80:	b083      	sub	sp, #12
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bc86:	bf00      	nop
 800bc88:	370c      	adds	r7, #12
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bc80      	pop	{r7}
 800bc8e:	4770      	bx	lr

0800bc90 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b083      	sub	sp, #12
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bc98:	bf00      	nop
 800bc9a:	370c      	adds	r7, #12
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bc80      	pop	{r7}
 800bca0:	4770      	bx	lr

0800bca2 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800bca2:	b580      	push	{r7, lr}
 800bca4:	b088      	sub	sp, #32
 800bca6:	af02      	add	r7, sp, #8
 800bca8:	60f8      	str	r0, [r7, #12]
 800bcaa:	1d3b      	adds	r3, r7, #4
 800bcac:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bcba:	2b01      	cmp	r3, #1
 800bcbc:	d101      	bne.n	800bcc2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800bcbe:	2302      	movs	r3, #2
 800bcc0:	e046      	b.n	800bd50 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2224      	movs	r2, #36	; 0x24
 800bcce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f022 0201 	bic.w	r2, r2, #1
 800bce0:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bcec:	687a      	ldr	r2, [r7, #4]
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	430a      	orrs	r2, r1
 800bcf4:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d105      	bne.n	800bd08 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800bcfc:	1d3b      	adds	r3, r7, #4
 800bcfe:	e893 0006 	ldmia.w	r3, {r1, r2}
 800bd02:	68f8      	ldr	r0, [r7, #12]
 800bd04:	f000 f911 	bl	800bf2a <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f042 0201 	orr.w	r2, r2, #1
 800bd16:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bd18:	f7f6 fd5c 	bl	80027d4 <HAL_GetTick>
 800bd1c:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd1e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bd22:	9300      	str	r3, [sp, #0]
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	2200      	movs	r2, #0
 800bd28:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f7fe ff16 	bl	800ab5e <UART_WaitOnFlagUntilTimeout>
 800bd32:	4603      	mov	r3, r0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d002      	beq.n	800bd3e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800bd38:	2303      	movs	r3, #3
 800bd3a:	75fb      	strb	r3, [r7, #23]
 800bd3c:	e003      	b.n	800bd46 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2220      	movs	r2, #32
 800bd42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 800bd4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3718      	adds	r7, #24
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b089      	sub	sp, #36	; 0x24
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d101      	bne.n	800bd6e <HAL_UARTEx_EnableStopMode+0x16>
 800bd6a:	2302      	movs	r3, #2
 800bd6c:	e021      	b.n	800bdb2 <HAL_UARTEx_EnableStopMode+0x5a>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2201      	movs	r2, #1
 800bd72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	e853 3f00 	ldrex	r3, [r3]
 800bd82:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	f043 0302 	orr.w	r3, r3, #2
 800bd8a:	61fb      	str	r3, [r7, #28]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	461a      	mov	r2, r3
 800bd92:	69fb      	ldr	r3, [r7, #28]
 800bd94:	61bb      	str	r3, [r7, #24]
 800bd96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd98:	6979      	ldr	r1, [r7, #20]
 800bd9a:	69ba      	ldr	r2, [r7, #24]
 800bd9c:	e841 2300 	strex	r3, r2, [r1]
 800bda0:	613b      	str	r3, [r7, #16]
   return(result);
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d1e6      	bne.n	800bd76 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bdb0:	2300      	movs	r3, #0
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3724      	adds	r7, #36	; 0x24
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bc80      	pop	{r7}
 800bdba:	4770      	bx	lr

0800bdbc <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b084      	sub	sp, #16
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bdca:	2b01      	cmp	r3, #1
 800bdcc:	d101      	bne.n	800bdd2 <HAL_UARTEx_EnableFifoMode+0x16>
 800bdce:	2302      	movs	r3, #2
 800bdd0:	e02b      	b.n	800be2a <HAL_UARTEx_EnableFifoMode+0x6e>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2201      	movs	r2, #1
 800bdd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2224      	movs	r2, #36	; 0x24
 800bdde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	681a      	ldr	r2, [r3, #0]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f022 0201 	bic.w	r2, r2, #1
 800bdf8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800be00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800be08:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	68fa      	ldr	r2, [r7, #12]
 800be10:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 f8ac 	bl	800bf70 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2220      	movs	r2, #32
 800be1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2200      	movs	r2, #0
 800be24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800be28:	2300      	movs	r3, #0
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3710      	adds	r7, #16
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}

0800be32 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be32:	b580      	push	{r7, lr}
 800be34:	b084      	sub	sp, #16
 800be36:	af00      	add	r7, sp, #0
 800be38:	6078      	str	r0, [r7, #4]
 800be3a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800be42:	2b01      	cmp	r3, #1
 800be44:	d101      	bne.n	800be4a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800be46:	2302      	movs	r3, #2
 800be48:	e02d      	b.n	800bea6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2201      	movs	r2, #1
 800be4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2224      	movs	r2, #36	; 0x24
 800be56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	681a      	ldr	r2, [r3, #0]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f022 0201 	bic.w	r2, r2, #1
 800be70:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	689b      	ldr	r3, [r3, #8]
 800be78:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	683a      	ldr	r2, [r7, #0]
 800be82:	430a      	orrs	r2, r1
 800be84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f000 f872 	bl	800bf70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	68fa      	ldr	r2, [r7, #12]
 800be92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2220      	movs	r2, #32
 800be98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2200      	movs	r2, #0
 800bea0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bea4:	2300      	movs	r3, #0
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3710      	adds	r7, #16
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}

0800beae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800beae:	b580      	push	{r7, lr}
 800beb0:	b084      	sub	sp, #16
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	6078      	str	r0, [r7, #4]
 800beb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d101      	bne.n	800bec6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bec2:	2302      	movs	r3, #2
 800bec4:	e02d      	b.n	800bf22 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2201      	movs	r2, #1
 800beca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2224      	movs	r2, #36	; 0x24
 800bed2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f022 0201 	bic.w	r2, r2, #1
 800beec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	683a      	ldr	r2, [r7, #0]
 800befe:	430a      	orrs	r2, r1
 800bf00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f000 f834 	bl	800bf70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	68fa      	ldr	r2, [r7, #12]
 800bf0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2220      	movs	r2, #32
 800bf14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bf20:	2300      	movs	r3, #0
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3710      	adds	r7, #16
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}

0800bf2a <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800bf2a:	b480      	push	{r7}
 800bf2c:	b085      	sub	sp, #20
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	60f8      	str	r0, [r7, #12]
 800bf32:	1d3b      	adds	r3, r7, #4
 800bf34:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	f023 0210 	bic.w	r2, r3, #16
 800bf42:	893b      	ldrh	r3, [r7, #8]
 800bf44:	4619      	mov	r1, r3
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	430a      	orrs	r2, r1
 800bf4c:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800bf58:	7abb      	ldrb	r3, [r7, #10]
 800bf5a:	061a      	lsls	r2, r3, #24
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	430a      	orrs	r2, r1
 800bf62:	605a      	str	r2, [r3, #4]
}
 800bf64:	bf00      	nop
 800bf66:	3714      	adds	r7, #20
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bc80      	pop	{r7}
 800bf6c:	4770      	bx	lr
	...

0800bf70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b085      	sub	sp, #20
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d108      	bne.n	800bf92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2201      	movs	r2, #1
 800bf84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bf90:	e031      	b.n	800bff6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bf92:	2308      	movs	r3, #8
 800bf94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bf96:	2308      	movs	r3, #8
 800bf98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	0e5b      	lsrs	r3, r3, #25
 800bfa2:	b2db      	uxtb	r3, r3
 800bfa4:	f003 0307 	and.w	r3, r3, #7
 800bfa8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	689b      	ldr	r3, [r3, #8]
 800bfb0:	0f5b      	lsrs	r3, r3, #29
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	f003 0307 	and.w	r3, r3, #7
 800bfb8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bfba:	7bbb      	ldrb	r3, [r7, #14]
 800bfbc:	7b3a      	ldrb	r2, [r7, #12]
 800bfbe:	4910      	ldr	r1, [pc, #64]	; (800c000 <UARTEx_SetNbDataToProcess+0x90>)
 800bfc0:	5c8a      	ldrb	r2, [r1, r2]
 800bfc2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bfc6:	7b3a      	ldrb	r2, [r7, #12]
 800bfc8:	490e      	ldr	r1, [pc, #56]	; (800c004 <UARTEx_SetNbDataToProcess+0x94>)
 800bfca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bfcc:	fb93 f3f2 	sdiv	r3, r3, r2
 800bfd0:	b29a      	uxth	r2, r3
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bfd8:	7bfb      	ldrb	r3, [r7, #15]
 800bfda:	7b7a      	ldrb	r2, [r7, #13]
 800bfdc:	4908      	ldr	r1, [pc, #32]	; (800c000 <UARTEx_SetNbDataToProcess+0x90>)
 800bfde:	5c8a      	ldrb	r2, [r1, r2]
 800bfe0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bfe4:	7b7a      	ldrb	r2, [r7, #13]
 800bfe6:	4907      	ldr	r1, [pc, #28]	; (800c004 <UARTEx_SetNbDataToProcess+0x94>)
 800bfe8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bfea:	fb93 f3f2 	sdiv	r3, r3, r2
 800bfee:	b29a      	uxth	r2, r3
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bff6:	bf00      	nop
 800bff8:	3714      	adds	r7, #20
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bc80      	pop	{r7}
 800bffe:	4770      	bx	lr
 800c000:	0801f0cc 	.word	0x0801f0cc
 800c004:	0801f0d4 	.word	0x0801f0d4

0800c008 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800c00c:	f7f6 fa82 	bl	8002514 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800c010:	f000 f820 	bl	800c054 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800c014:	bf00      	nop
 800c016:	bd80      	pop	{r7, pc}

0800c018 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800c01c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c020:	f011 fb82 	bl	801d728 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800c024:	bf00      	nop
 800c026:	bd80      	pop	{r7, pc}

0800c028 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800c028:	b480      	push	{r7}
 800c02a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800c02c:	f3bf 8f4f 	dsb	sy
}
 800c030:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800c032:	4b06      	ldr	r3, [pc, #24]	; (800c04c <__NVIC_SystemReset+0x24>)
 800c034:	68db      	ldr	r3, [r3, #12]
 800c036:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800c03a:	4904      	ldr	r1, [pc, #16]	; (800c04c <__NVIC_SystemReset+0x24>)
 800c03c:	4b04      	ldr	r3, [pc, #16]	; (800c050 <__NVIC_SystemReset+0x28>)
 800c03e:	4313      	orrs	r3, r2
 800c040:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c042:	f3bf 8f4f 	dsb	sy
}
 800c046:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800c048:	bf00      	nop
 800c04a:	e7fd      	b.n	800c048 <__NVIC_SystemReset+0x20>
 800c04c:	e000ed00 	.word	0xe000ed00
 800c050:	05fa0004 	.word	0x05fa0004

0800c054 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b086      	sub	sp, #24
 800c058:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800c05a:	2300      	movs	r3, #0
 800c05c:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800c05e:	2300      	movs	r3, #0
 800c060:	9302      	str	r3, [sp, #8]
 800c062:	2303      	movs	r3, #3
 800c064:	9301      	str	r3, [sp, #4]
 800c066:	2301      	movs	r3, #1
 800c068:	9300      	str	r3, [sp, #0]
 800c06a:	4b59      	ldr	r3, [pc, #356]	; (800c1d0 <LoRaWAN_Init+0x17c>)
 800c06c:	2200      	movs	r2, #0
 800c06e:	2100      	movs	r1, #0
 800c070:	2002      	movs	r0, #2
 800c072:	f011 ffa7 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800c076:	2300      	movs	r3, #0
 800c078:	9302      	str	r3, [sp, #8]
 800c07a:	2305      	movs	r3, #5
 800c07c:	9301      	str	r3, [sp, #4]
 800c07e:	2302      	movs	r3, #2
 800c080:	9300      	str	r3, [sp, #0]
 800c082:	4b54      	ldr	r3, [pc, #336]	; (800c1d4 <LoRaWAN_Init+0x180>)
 800c084:	2200      	movs	r2, #0
 800c086:	2100      	movs	r1, #0
 800c088:	2002      	movs	r0, #2
 800c08a:	f011 ff9b 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800c08e:	2300      	movs	r3, #0
 800c090:	9302      	str	r3, [sp, #8]
 800c092:	2303      	movs	r3, #3
 800c094:	9301      	str	r3, [sp, #4]
 800c096:	2301      	movs	r3, #1
 800c098:	9300      	str	r3, [sp, #0]
 800c09a:	4b4f      	ldr	r3, [pc, #316]	; (800c1d8 <LoRaWAN_Init+0x184>)
 800c09c:	2200      	movs	r2, #0
 800c09e:	2100      	movs	r1, #0
 800c0a0:	2002      	movs	r0, #2
 800c0a2:	f011 ff8f 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800c0a6:	1d3b      	adds	r3, r7, #4
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	2000      	movs	r0, #0
 800c0ac:	f003 fa70 	bl	800f590 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	0e1b      	lsrs	r3, r3, #24
 800c0b4:	b2db      	uxtb	r3, r3
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	0c1b      	lsrs	r3, r3, #16
 800c0bc:	b2db      	uxtb	r3, r3
 800c0be:	4619      	mov	r1, r3
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	0a1b      	lsrs	r3, r3, #8
 800c0c4:	b2db      	uxtb	r3, r3
 800c0c6:	9302      	str	r3, [sp, #8]
 800c0c8:	9101      	str	r1, [sp, #4]
 800c0ca:	9200      	str	r2, [sp, #0]
 800c0cc:	4b43      	ldr	r3, [pc, #268]	; (800c1dc <LoRaWAN_Init+0x188>)
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	2100      	movs	r1, #0
 800c0d2:	2002      	movs	r0, #2
 800c0d4:	f011 ff76 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800c0d8:	1d3b      	adds	r3, r7, #4
 800c0da:	4619      	mov	r1, r3
 800c0dc:	2001      	movs	r0, #1
 800c0de:	f003 fa57 	bl	800f590 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	0e1b      	lsrs	r3, r3, #24
 800c0e6:	b2db      	uxtb	r3, r3
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	0c1b      	lsrs	r3, r3, #16
 800c0ee:	b2db      	uxtb	r3, r3
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	0a1b      	lsrs	r3, r3, #8
 800c0f6:	b2db      	uxtb	r3, r3
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	b2c0      	uxtb	r0, r0
 800c0fc:	9003      	str	r0, [sp, #12]
 800c0fe:	9302      	str	r3, [sp, #8]
 800c100:	9101      	str	r1, [sp, #4]
 800c102:	9200      	str	r2, [sp, #0]
 800c104:	4b36      	ldr	r3, [pc, #216]	; (800c1e0 <LoRaWAN_Init+0x18c>)
 800c106:	2200      	movs	r2, #0
 800c108:	2100      	movs	r1, #0
 800c10a:	2002      	movs	r0, #2
 800c10c:	f011 ff5a 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800c110:	2300      	movs	r3, #0
 800c112:	9300      	str	r3, [sp, #0]
 800c114:	4b33      	ldr	r3, [pc, #204]	; (800c1e4 <LoRaWAN_Init+0x190>)
 800c116:	2200      	movs	r2, #0
 800c118:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c11c:	4832      	ldr	r0, [pc, #200]	; (800c1e8 <LoRaWAN_Init+0x194>)
 800c11e:	f011 fca3 	bl	801da68 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800c122:	2300      	movs	r3, #0
 800c124:	9300      	str	r3, [sp, #0]
 800c126:	4b31      	ldr	r3, [pc, #196]	; (800c1ec <LoRaWAN_Init+0x198>)
 800c128:	2200      	movs	r2, #0
 800c12a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c12e:	4830      	ldr	r0, [pc, #192]	; (800c1f0 <LoRaWAN_Init+0x19c>)
 800c130:	f011 fc9a 	bl	801da68 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800c134:	2300      	movs	r3, #0
 800c136:	9300      	str	r3, [sp, #0]
 800c138:	4b2e      	ldr	r3, [pc, #184]	; (800c1f4 <LoRaWAN_Init+0x1a0>)
 800c13a:	2201      	movs	r2, #1
 800c13c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c140:	482d      	ldr	r0, [pc, #180]	; (800c1f8 <LoRaWAN_Init+0x1a4>)
 800c142:	f011 fc91 	bl	801da68 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800c146:	2300      	movs	r3, #0
 800c148:	9300      	str	r3, [sp, #0]
 800c14a:	4b2c      	ldr	r3, [pc, #176]	; (800c1fc <LoRaWAN_Init+0x1a8>)
 800c14c:	2200      	movs	r2, #0
 800c14e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800c152:	482b      	ldr	r0, [pc, #172]	; (800c200 <LoRaWAN_Init+0x1ac>)
 800c154:	f011 fc88 	bl	801da68 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800c158:	4a2a      	ldr	r2, [pc, #168]	; (800c204 <LoRaWAN_Init+0x1b0>)
 800c15a:	2100      	movs	r1, #0
 800c15c:	2001      	movs	r0, #1
 800c15e:	f011 fbdf 	bl	801d920 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800c162:	4a29      	ldr	r2, [pc, #164]	; (800c208 <LoRaWAN_Init+0x1b4>)
 800c164:	2100      	movs	r1, #0
 800c166:	2002      	movs	r0, #2
 800c168:	f011 fbda 	bl	801d920 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800c16c:	4a27      	ldr	r2, [pc, #156]	; (800c20c <LoRaWAN_Init+0x1b8>)
 800c16e:	2100      	movs	r1, #0
 800c170:	2004      	movs	r0, #4
 800c172:	f011 fbd5 	bl	801d920 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800c176:	4a26      	ldr	r2, [pc, #152]	; (800c210 <LoRaWAN_Init+0x1bc>)
 800c178:	2100      	movs	r1, #0
 800c17a:	2008      	movs	r0, #8
 800c17c:	f011 fbd0 	bl	801d920 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800c180:	f000 fd64 	bl	800cc4c <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800c184:	4923      	ldr	r1, [pc, #140]	; (800c214 <LoRaWAN_Init+0x1c0>)
 800c186:	4824      	ldr	r0, [pc, #144]	; (800c218 <LoRaWAN_Init+0x1c4>)
 800c188:	f002 fa74 	bl	800e674 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800c18c:	4823      	ldr	r0, [pc, #140]	; (800c21c <LoRaWAN_Init+0x1c8>)
 800c18e:	f002 fadf 	bl	800e750 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800c192:	4819      	ldr	r0, [pc, #100]	; (800c1f8 <LoRaWAN_Init+0x1a4>)
 800c194:	f011 fc9e 	bl	801dad4 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800c198:	4b21      	ldr	r3, [pc, #132]	; (800c220 <LoRaWAN_Init+0x1cc>)
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	4a21      	ldr	r2, [pc, #132]	; (800c224 <LoRaWAN_Init+0x1d0>)
 800c19e:	7812      	ldrb	r2, [r2, #0]
 800c1a0:	4611      	mov	r1, r2
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f002 fc2c 	bl	800ea00 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800c1a8:	4b1f      	ldr	r3, [pc, #124]	; (800c228 <LoRaWAN_Init+0x1d4>)
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d10b      	bne.n	800c1c8 <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800c1b0:	4b1e      	ldr	r3, [pc, #120]	; (800c22c <LoRaWAN_Init+0x1d8>)
 800c1b2:	6819      	ldr	r1, [r3, #0]
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	9300      	str	r3, [sp, #0]
 800c1b8:	4b1d      	ldr	r3, [pc, #116]	; (800c230 <LoRaWAN_Init+0x1dc>)
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	481d      	ldr	r0, [pc, #116]	; (800c234 <LoRaWAN_Init+0x1e0>)
 800c1be:	f011 fc53 	bl	801da68 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800c1c2:	481c      	ldr	r0, [pc, #112]	; (800c234 <LoRaWAN_Init+0x1e0>)
 800c1c4:	f011 fc86 	bl	801dad4 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800c1c8:	bf00      	nop
 800c1ca:	3708      	adds	r7, #8
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	0801e73c 	.word	0x0801e73c
 800c1d4:	0801e760 	.word	0x0801e760
 800c1d8:	0801e784 	.word	0x0801e784
 800c1dc:	0801e7a8 	.word	0x0801e7a8
 800c1e0:	0801e7cc 	.word	0x0801e7cc
 800c1e4:	0800c76d 	.word	0x0800c76d
 800c1e8:	20000620 	.word	0x20000620
 800c1ec:	0800c77f 	.word	0x0800c77f
 800c1f0:	20000638 	.word	0x20000638
 800c1f4:	0800c791 	.word	0x0800c791
 800c1f8:	20000650 	.word	0x20000650
 800c1fc:	0800cb4d 	.word	0x0800cb4d
 800c200:	20000514 	.word	0x20000514
 800c204:	0800e995 	.word	0x0800e995
 800c208:	0800c381 	.word	0x0800c381
 800c20c:	0800cb71 	.word	0x0800cb71
 800c210:	0800cacd 	.word	0x0800cacd
 800c214:	01030000 	.word	0x01030000
 800c218:	20000024 	.word	0x20000024
 800c21c:	20000070 	.word	0x20000070
 800c220:	20000020 	.word	0x20000020
 800c224:	20000021 	.word	0x20000021
 800c228:	200004f8 	.word	0x200004f8
 800c22c:	20000088 	.word	0x20000088
 800c230:	0800c739 	.word	0x0800c739
 800c234:	200004fc 	.word	0x200004fc

0800c238 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800c238:	b5b0      	push	{r4, r5, r7, lr}
 800c23a:	b08a      	sub	sp, #40	; 0x28
 800c23c:	af06      	add	r7, sp, #24
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800c242:	2300      	movs	r3, #0
 800c244:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	f000 8086 	beq.w	800c35a <OnRxData+0x122>
  {

    UTIL_TIMER_Start(&RxLedTimer);
 800c24e:	4845      	ldr	r0, [pc, #276]	; (800c364 <OnRxData+0x12c>)
 800c250:	f011 fc40 	bl	801dad4 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d05a      	beq.n	800c312 <OnRxData+0xda>
    {
      if (appData != NULL)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d057      	beq.n	800c312 <OnRxData+0xda>
      {
        RxPort = appData->Port;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d050      	beq.n	800c312 <OnRxData+0xda>
        {
          switch (appData->Port)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	2b02      	cmp	r3, #2
 800c276:	d01f      	beq.n	800c2b8 <OnRxData+0x80>
 800c278:	2b03      	cmp	r3, #3
 800c27a:	d145      	bne.n	800c308 <OnRxData+0xd0>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	785b      	ldrb	r3, [r3, #1]
 800c280:	2b01      	cmp	r3, #1
 800c282:	d143      	bne.n	800c30c <OnRxData+0xd4>
              {
                switch (appData->Buffer[0])
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	781b      	ldrb	r3, [r3, #0]
 800c28a:	2b02      	cmp	r3, #2
 800c28c:	d00e      	beq.n	800c2ac <OnRxData+0x74>
 800c28e:	2b02      	cmp	r3, #2
 800c290:	dc10      	bgt.n	800c2b4 <OnRxData+0x7c>
 800c292:	2b00      	cmp	r3, #0
 800c294:	d002      	beq.n	800c29c <OnRxData+0x64>
 800c296:	2b01      	cmp	r3, #1
 800c298:	d004      	beq.n	800c2a4 <OnRxData+0x6c>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800c29a:	e00b      	b.n	800c2b4 <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_A);
 800c29c:	2000      	movs	r0, #0
 800c29e:	f002 fd63 	bl	800ed68 <LmHandlerRequestClass>
                    break;
 800c2a2:	e008      	b.n	800c2b6 <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_B);
 800c2a4:	2001      	movs	r0, #1
 800c2a6:	f002 fd5f 	bl	800ed68 <LmHandlerRequestClass>
                    break;
 800c2aa:	e004      	b.n	800c2b6 <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_C);
 800c2ac:	2002      	movs	r0, #2
 800c2ae:	f002 fd5b 	bl	800ed68 <LmHandlerRequestClass>
                    break;
 800c2b2:	e000      	b.n	800c2b6 <OnRxData+0x7e>
                    break;
 800c2b4:	bf00      	nop
                }
              }
              break;
 800c2b6:	e029      	b.n	800c30c <OnRxData+0xd4>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	785b      	ldrb	r3, [r3, #1]
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d127      	bne.n	800c310 <OnRxData+0xd8>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	f003 0301 	and.w	r3, r3, #1
 800c2ca:	b2da      	uxtb	r2, r3
 800c2cc:	4b26      	ldr	r3, [pc, #152]	; (800c368 <OnRxData+0x130>)
 800c2ce:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800c2d0:	4b25      	ldr	r3, [pc, #148]	; (800c368 <OnRxData+0x130>)
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d10b      	bne.n	800c2f0 <OnRxData+0xb8>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800c2d8:	4b24      	ldr	r3, [pc, #144]	; (800c36c <OnRxData+0x134>)
 800c2da:	2200      	movs	r2, #0
 800c2dc:	2100      	movs	r1, #0
 800c2de:	2003      	movs	r0, #3
 800c2e0:	f011 fe70 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	2120      	movs	r1, #32
 800c2e8:	4821      	ldr	r0, [pc, #132]	; (800c370 <OnRxData+0x138>)
 800c2ea:	f7fa f9ae 	bl	800664a <HAL_GPIO_WritePin>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
                }
              }
              break;
 800c2ee:	e00f      	b.n	800c310 <OnRxData+0xd8>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800c2f0:	4b20      	ldr	r3, [pc, #128]	; (800c374 <OnRxData+0x13c>)
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	2100      	movs	r1, #0
 800c2f6:	2003      	movs	r0, #3
 800c2f8:	f011 fe64 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	2120      	movs	r1, #32
 800c300:	481b      	ldr	r0, [pc, #108]	; (800c370 <OnRxData+0x138>)
 800c302:	f7fa f9a2 	bl	800664a <HAL_GPIO_WritePin>
              break;
 800c306:	e003      	b.n	800c310 <OnRxData+0xd8>

            default:

              break;
 800c308:	bf00      	nop
 800c30a:	e002      	b.n	800c312 <OnRxData+0xda>
              break;
 800c30c:	bf00      	nop
 800c30e:	e000      	b.n	800c312 <OnRxData+0xda>
              break;
 800c310:	bf00      	nop
          }
        }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	7c1b      	ldrb	r3, [r3, #16]
 800c316:	2b05      	cmp	r3, #5
 800c318:	d81f      	bhi.n	800c35a <OnRxData+0x122>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	68db      	ldr	r3, [r3, #12]
 800c31e:	7bfa      	ldrb	r2, [r7, #15]
 800c320:	6839      	ldr	r1, [r7, #0]
 800c322:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800c326:	460c      	mov	r4, r1
 800c328:	6839      	ldr	r1, [r7, #0]
 800c32a:	7c09      	ldrb	r1, [r1, #16]
 800c32c:	4608      	mov	r0, r1
 800c32e:	4912      	ldr	r1, [pc, #72]	; (800c378 <OnRxData+0x140>)
 800c330:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c334:	6838      	ldr	r0, [r7, #0]
 800c336:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800c33a:	4605      	mov	r5, r0
 800c33c:	6838      	ldr	r0, [r7, #0]
 800c33e:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800c342:	9005      	str	r0, [sp, #20]
 800c344:	9504      	str	r5, [sp, #16]
 800c346:	9103      	str	r1, [sp, #12]
 800c348:	9402      	str	r4, [sp, #8]
 800c34a:	9201      	str	r2, [sp, #4]
 800c34c:	9300      	str	r3, [sp, #0]
 800c34e:	4b0b      	ldr	r3, [pc, #44]	; (800c37c <OnRxData+0x144>)
 800c350:	2200      	movs	r2, #0
 800c352:	2100      	movs	r1, #0
 800c354:	2003      	movs	r0, #3
 800c356:	f011 fe35 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800c35a:	bf00      	nop
 800c35c:	3710      	adds	r7, #16
 800c35e:	46bd      	mov	sp, r7
 800c360:	bdb0      	pop	{r4, r5, r7, pc}
 800c362:	bf00      	nop
 800c364:	20000638 	.word	0x20000638
 800c368:	2000061e 	.word	0x2000061e
 800c36c:	0801e7f0 	.word	0x0801e7f0
 800c370:	48000400 	.word	0x48000400
 800c374:	0801e7fc 	.word	0x0801e7fc
 800c378:	20000008 	.word	0x20000008
 800c37c:	0801e808 	.word	0x0801e808

0800c380 <SendTxData>:

static void SendTxData(void)
{
 800c380:	b590      	push	{r4, r7, lr}
 800c382:	b093      	sub	sp, #76	; 0x4c
 800c384:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800c386:	23ff      	movs	r3, #255	; 0xff
 800c388:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint8_t batteryLevel = GetBatteryLevel();
 800c38c:	f7f6 f8f2 	bl	8002574 <GetBatteryLevel>
 800c390:	4603      	mov	r3, r0
 800c392:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800c396:	2300      	movs	r3, #0
 800c398:	63fb      	str	r3, [r7, #60]	; 0x3c

  uint16_t pressure = 0;
 800c39a:	2300      	movs	r3, #0
 800c39c:	86bb      	strh	r3, [r7, #52]	; 0x34
  int16_t temperature = 0;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t humidity = 0;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	863b      	strh	r3, [r7, #48]	; 0x30
  uint32_t i = 0;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	63bb      	str	r3, [r7, #56]	; 0x38
  int32_t latitude = 0;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  int32_t longitude = 0;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t altitudeGps = 0;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	84fb      	strh	r3, [r7, #38]	; 0x26

  EnvSensors_Read(&sensor_data);
 800c3b6:	1d3b      	adds	r3, r7, #4
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7f6 fa4d 	bl	8002858 <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800c3be:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c3c2:	9300      	str	r3, [sp, #0]
 800c3c4:	4b72      	ldr	r3, [pc, #456]	; (800c590 <SendTxData+0x210>)
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	2100      	movs	r1, #0
 800c3ca:	2002      	movs	r0, #2
 800c3cc:	f011 fdfa 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
  float temperature_f = sensor_data.temperature*100;
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	4970      	ldr	r1, [pc, #448]	; (800c594 <SendTxData+0x214>)
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7f4 fc63 	bl	8000ca0 <__aeabi_fmul>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	623b      	str	r3, [r7, #32]
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d.%02d [C]\r\n", (int)temperature_f / 100, (int)temperature_f % 100);
 800c3de:	6a38      	ldr	r0, [r7, #32]
 800c3e0:	f7f4 fdae 	bl	8000f40 <__aeabi_f2iz>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	4a6c      	ldr	r2, [pc, #432]	; (800c598 <SendTxData+0x218>)
 800c3e8:	fb82 1203 	smull	r1, r2, r2, r3
 800c3ec:	1152      	asrs	r2, r2, #5
 800c3ee:	17db      	asrs	r3, r3, #31
 800c3f0:	1ad4      	subs	r4, r2, r3
 800c3f2:	6a38      	ldr	r0, [r7, #32]
 800c3f4:	f7f4 fda4 	bl	8000f40 <__aeabi_f2iz>
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	4b67      	ldr	r3, [pc, #412]	; (800c598 <SendTxData+0x218>)
 800c3fc:	fb83 1302 	smull	r1, r3, r3, r2
 800c400:	1159      	asrs	r1, r3, #5
 800c402:	17d3      	asrs	r3, r2, #31
 800c404:	1acb      	subs	r3, r1, r3
 800c406:	2164      	movs	r1, #100	; 0x64
 800c408:	fb01 f303 	mul.w	r3, r1, r3
 800c40c:	1ad3      	subs	r3, r2, r3
 800c40e:	9301      	str	r3, [sp, #4]
 800c410:	9400      	str	r4, [sp, #0]
 800c412:	4b62      	ldr	r3, [pc, #392]	; (800c59c <SendTxData+0x21c>)
 800c414:	2201      	movs	r2, #1
 800c416:	2100      	movs	r1, #0
 800c418:	2002      	movs	r0, #2
 800c41a:	f011 fdd3 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
  temperature = (uint16_t)temperature_f;
 800c41e:	6a38      	ldr	r0, [r7, #32]
 800c420:	f7f4 fdb4 	bl	8000f8c <__aeabi_f2uiz>
 800c424:	4603      	mov	r3, r0
 800c426:	b29b      	uxth	r3, r3
 800c428:	867b      	strh	r3, [r7, #50]	; 0x32

  float pressure_f = sensor_data.pressure*100;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	4959      	ldr	r1, [pc, #356]	; (800c594 <SendTxData+0x214>)
 800c42e:	4618      	mov	r0, r3
 800c430:	f7f4 fc36 	bl	8000ca0 <__aeabi_fmul>
 800c434:	4603      	mov	r3, r0
 800c436:	61fb      	str	r3, [r7, #28]
  APP_LOG(TS_ON, VLEVEL_M, "pressure: %d.%02d [Pa]\r\n", (int)pressure_f / 100, (int)pressure_f % 100);
 800c438:	69f8      	ldr	r0, [r7, #28]
 800c43a:	f7f4 fd81 	bl	8000f40 <__aeabi_f2iz>
 800c43e:	4603      	mov	r3, r0
 800c440:	4a55      	ldr	r2, [pc, #340]	; (800c598 <SendTxData+0x218>)
 800c442:	fb82 1203 	smull	r1, r2, r2, r3
 800c446:	1152      	asrs	r2, r2, #5
 800c448:	17db      	asrs	r3, r3, #31
 800c44a:	1ad4      	subs	r4, r2, r3
 800c44c:	69f8      	ldr	r0, [r7, #28]
 800c44e:	f7f4 fd77 	bl	8000f40 <__aeabi_f2iz>
 800c452:	4602      	mov	r2, r0
 800c454:	4b50      	ldr	r3, [pc, #320]	; (800c598 <SendTxData+0x218>)
 800c456:	fb83 1302 	smull	r1, r3, r3, r2
 800c45a:	1159      	asrs	r1, r3, #5
 800c45c:	17d3      	asrs	r3, r2, #31
 800c45e:	1acb      	subs	r3, r1, r3
 800c460:	2164      	movs	r1, #100	; 0x64
 800c462:	fb01 f303 	mul.w	r3, r1, r3
 800c466:	1ad3      	subs	r3, r2, r3
 800c468:	9301      	str	r3, [sp, #4]
 800c46a:	9400      	str	r4, [sp, #0]
 800c46c:	4b4c      	ldr	r3, [pc, #304]	; (800c5a0 <SendTxData+0x220>)
 800c46e:	2201      	movs	r2, #1
 800c470:	2100      	movs	r1, #0
 800c472:	2002      	movs	r0, #2
 800c474:	f011 fda6 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800c478:	4b4a      	ldr	r3, [pc, #296]	; (800c5a4 <SendTxData+0x224>)
 800c47a:	2202      	movs	r2, #2
 800c47c:	701a      	strb	r2, [r3, #0]

  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	4949      	ldr	r1, [pc, #292]	; (800c5a8 <SendTxData+0x228>)
 800c482:	4618      	mov	r0, r3
 800c484:	f7f4 fc0c 	bl	8000ca0 <__aeabi_fmul>
 800c488:	4603      	mov	r3, r0
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7f4 fd7e 	bl	8000f8c <__aeabi_f2uiz>
 800c490:	4603      	mov	r3, r0
 800c492:	863b      	strh	r3, [r7, #48]	; 0x30
  temperature = (int16_t)(sensor_data.temperature);
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	4618      	mov	r0, r3
 800c498:	f7f4 fd52 	bl	8000f40 <__aeabi_f2iz>
 800c49c:	4603      	mov	r3, r0
 800c49e:	867b      	strh	r3, [r7, #50]	; 0x32
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	493c      	ldr	r1, [pc, #240]	; (800c594 <SendTxData+0x214>)
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f7f4 fbfb 	bl	8000ca0 <__aeabi_fmul>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	493e      	ldr	r1, [pc, #248]	; (800c5a8 <SendTxData+0x228>)
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7f4 fcaa 	bl	8000e08 <__aeabi_fdiv>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7f4 fd68 	bl	8000f8c <__aeabi_f2uiz>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	86bb      	strh	r3, [r7, #52]	; 0x34

  AppData.Buffer[i++] = AppLedStateOn;
 800c4c0:	4b38      	ldr	r3, [pc, #224]	; (800c5a4 <SendTxData+0x224>)
 800c4c2:	685a      	ldr	r2, [r3, #4]
 800c4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c6:	1c59      	adds	r1, r3, #1
 800c4c8:	63b9      	str	r1, [r7, #56]	; 0x38
 800c4ca:	4413      	add	r3, r2
 800c4cc:	4a37      	ldr	r2, [pc, #220]	; (800c5ac <SendTxData+0x22c>)
 800c4ce:	7812      	ldrb	r2, [r2, #0]
 800c4d0:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800c4d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c4d4:	0a1b      	lsrs	r3, r3, #8
 800c4d6:	b298      	uxth	r0, r3
 800c4d8:	4b32      	ldr	r3, [pc, #200]	; (800c5a4 <SendTxData+0x224>)
 800c4da:	685a      	ldr	r2, [r3, #4]
 800c4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4de:	1c59      	adds	r1, r3, #1
 800c4e0:	63b9      	str	r1, [r7, #56]	; 0x38
 800c4e2:	4413      	add	r3, r2
 800c4e4:	b2c2      	uxtb	r2, r0
 800c4e6:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800c4e8:	4b2e      	ldr	r3, [pc, #184]	; (800c5a4 <SendTxData+0x224>)
 800c4ea:	685a      	ldr	r2, [r3, #4]
 800c4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ee:	1c59      	adds	r1, r3, #1
 800c4f0:	63b9      	str	r1, [r7, #56]	; 0x38
 800c4f2:	4413      	add	r3, r2
 800c4f4:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800c4f6:	b2d2      	uxtb	r2, r2
 800c4f8:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800c4fa:	4b2a      	ldr	r3, [pc, #168]	; (800c5a4 <SendTxData+0x224>)
 800c4fc:	685a      	ldr	r2, [r3, #4]
 800c4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c500:	1c59      	adds	r1, r3, #1
 800c502:	63b9      	str	r1, [r7, #56]	; 0x38
 800c504:	4413      	add	r3, r2
 800c506:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800c508:	b2d2      	uxtb	r2, r2
 800c50a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800c50c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c50e:	0a1b      	lsrs	r3, r3, #8
 800c510:	b298      	uxth	r0, r3
 800c512:	4b24      	ldr	r3, [pc, #144]	; (800c5a4 <SendTxData+0x224>)
 800c514:	685a      	ldr	r2, [r3, #4]
 800c516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c518:	1c59      	adds	r1, r3, #1
 800c51a:	63b9      	str	r1, [r7, #56]	; 0x38
 800c51c:	4413      	add	r3, r2
 800c51e:	b2c2      	uxtb	r2, r0
 800c520:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800c522:	4b20      	ldr	r3, [pc, #128]	; (800c5a4 <SendTxData+0x224>)
 800c524:	685a      	ldr	r2, [r3, #4]
 800c526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c528:	1c59      	adds	r1, r3, #1
 800c52a:	63b9      	str	r1, [r7, #56]	; 0x38
 800c52c:	4413      	add	r3, r2
 800c52e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800c530:	b2d2      	uxtb	r2, r2
 800c532:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800c534:	4b1e      	ldr	r3, [pc, #120]	; (800c5b0 <SendTxData+0x230>)
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	2b08      	cmp	r3, #8
 800c53a:	d007      	beq.n	800c54c <SendTxData+0x1cc>
 800c53c:	4b1c      	ldr	r3, [pc, #112]	; (800c5b0 <SendTxData+0x230>)
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	2b01      	cmp	r3, #1
 800c542:	d003      	beq.n	800c54c <SendTxData+0x1cc>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800c544:	4b1a      	ldr	r3, [pc, #104]	; (800c5b0 <SendTxData+0x230>)
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d133      	bne.n	800c5b4 <SendTxData+0x234>
  {
    AppData.Buffer[i++] = 0;
 800c54c:	4b15      	ldr	r3, [pc, #84]	; (800c5a4 <SendTxData+0x224>)
 800c54e:	685a      	ldr	r2, [r3, #4]
 800c550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c552:	1c59      	adds	r1, r3, #1
 800c554:	63b9      	str	r1, [r7, #56]	; 0x38
 800c556:	4413      	add	r3, r2
 800c558:	2200      	movs	r2, #0
 800c55a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800c55c:	4b11      	ldr	r3, [pc, #68]	; (800c5a4 <SendTxData+0x224>)
 800c55e:	685a      	ldr	r2, [r3, #4]
 800c560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c562:	1c59      	adds	r1, r3, #1
 800c564:	63b9      	str	r1, [r7, #56]	; 0x38
 800c566:	4413      	add	r3, r2
 800c568:	2200      	movs	r2, #0
 800c56a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800c56c:	4b0d      	ldr	r3, [pc, #52]	; (800c5a4 <SendTxData+0x224>)
 800c56e:	685a      	ldr	r2, [r3, #4]
 800c570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c572:	1c59      	adds	r1, r3, #1
 800c574:	63b9      	str	r1, [r7, #56]	; 0x38
 800c576:	4413      	add	r3, r2
 800c578:	2200      	movs	r2, #0
 800c57a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800c57c:	4b09      	ldr	r3, [pc, #36]	; (800c5a4 <SendTxData+0x224>)
 800c57e:	685a      	ldr	r2, [r3, #4]
 800c580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c582:	1c59      	adds	r1, r3, #1
 800c584:	63b9      	str	r1, [r7, #56]	; 0x38
 800c586:	4413      	add	r3, r2
 800c588:	2200      	movs	r2, #0
 800c58a:	701a      	strb	r2, [r3, #0]
 800c58c:	e06e      	b.n	800c66c <SendTxData+0x2ec>
 800c58e:	bf00      	nop
 800c590:	0801e850 	.word	0x0801e850
 800c594:	42c80000 	.word	0x42c80000
 800c598:	51eb851f 	.word	0x51eb851f
 800c59c:	0801e85c 	.word	0x0801e85c
 800c5a0:	0801e870 	.word	0x0801e870
 800c5a4:	2000008c 	.word	0x2000008c
 800c5a8:	41200000 	.word	0x41200000
 800c5ac:	2000061e 	.word	0x2000061e
 800c5b0:	20000070 	.word	0x20000070
  }
  else
  {
    latitude = sensor_data.latitude;
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    longitude = sensor_data.longitude;
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	62bb      	str	r3, [r7, #40]	; 0x28

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800c5bc:	4b55      	ldr	r3, [pc, #340]	; (800c714 <SendTxData+0x394>)
 800c5be:	685a      	ldr	r2, [r3, #4]
 800c5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c2:	1c59      	adds	r1, r3, #1
 800c5c4:	63b9      	str	r1, [r7, #56]	; 0x38
 800c5c6:	18d4      	adds	r4, r2, r3
 800c5c8:	f7f5 ffd4 	bl	8002574 <GetBatteryLevel>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800c5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d2:	1418      	asrs	r0, r3, #16
 800c5d4:	4b4f      	ldr	r3, [pc, #316]	; (800c714 <SendTxData+0x394>)
 800c5d6:	685a      	ldr	r2, [r3, #4]
 800c5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5da:	1c59      	adds	r1, r3, #1
 800c5dc:	63b9      	str	r1, [r7, #56]	; 0x38
 800c5de:	4413      	add	r3, r2
 800c5e0:	b2c2      	uxtb	r2, r0
 800c5e2:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800c5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e6:	1218      	asrs	r0, r3, #8
 800c5e8:	4b4a      	ldr	r3, [pc, #296]	; (800c714 <SendTxData+0x394>)
 800c5ea:	685a      	ldr	r2, [r3, #4]
 800c5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ee:	1c59      	adds	r1, r3, #1
 800c5f0:	63b9      	str	r1, [r7, #56]	; 0x38
 800c5f2:	4413      	add	r3, r2
 800c5f4:	b2c2      	uxtb	r2, r0
 800c5f6:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800c5f8:	4b46      	ldr	r3, [pc, #280]	; (800c714 <SendTxData+0x394>)
 800c5fa:	685a      	ldr	r2, [r3, #4]
 800c5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5fe:	1c59      	adds	r1, r3, #1
 800c600:	63b9      	str	r1, [r7, #56]	; 0x38
 800c602:	4413      	add	r3, r2
 800c604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c606:	b2d2      	uxtb	r2, r2
 800c608:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800c60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60c:	1418      	asrs	r0, r3, #16
 800c60e:	4b41      	ldr	r3, [pc, #260]	; (800c714 <SendTxData+0x394>)
 800c610:	685a      	ldr	r2, [r3, #4]
 800c612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c614:	1c59      	adds	r1, r3, #1
 800c616:	63b9      	str	r1, [r7, #56]	; 0x38
 800c618:	4413      	add	r3, r2
 800c61a:	b2c2      	uxtb	r2, r0
 800c61c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800c61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c620:	1218      	asrs	r0, r3, #8
 800c622:	4b3c      	ldr	r3, [pc, #240]	; (800c714 <SendTxData+0x394>)
 800c624:	685a      	ldr	r2, [r3, #4]
 800c626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c628:	1c59      	adds	r1, r3, #1
 800c62a:	63b9      	str	r1, [r7, #56]	; 0x38
 800c62c:	4413      	add	r3, r2
 800c62e:	b2c2      	uxtb	r2, r0
 800c630:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800c632:	4b38      	ldr	r3, [pc, #224]	; (800c714 <SendTxData+0x394>)
 800c634:	685a      	ldr	r2, [r3, #4]
 800c636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c638:	1c59      	adds	r1, r3, #1
 800c63a:	63b9      	str	r1, [r7, #56]	; 0x38
 800c63c:	4413      	add	r3, r2
 800c63e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c640:	b2d2      	uxtb	r2, r2
 800c642:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800c644:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c646:	0a1b      	lsrs	r3, r3, #8
 800c648:	b298      	uxth	r0, r3
 800c64a:	4b32      	ldr	r3, [pc, #200]	; (800c714 <SendTxData+0x394>)
 800c64c:	685a      	ldr	r2, [r3, #4]
 800c64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c650:	1c59      	adds	r1, r3, #1
 800c652:	63b9      	str	r1, [r7, #56]	; 0x38
 800c654:	4413      	add	r3, r2
 800c656:	b2c2      	uxtb	r2, r0
 800c658:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800c65a:	4b2e      	ldr	r3, [pc, #184]	; (800c714 <SendTxData+0x394>)
 800c65c:	685a      	ldr	r2, [r3, #4]
 800c65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c660:	1c59      	adds	r1, r3, #1
 800c662:	63b9      	str	r1, [r7, #56]	; 0x38
 800c664:	4413      	add	r3, r2
 800c666:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c668:	b2d2      	uxtb	r2, r2
 800c66a:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800c66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66e:	b2da      	uxtb	r2, r3
 800c670:	4b28      	ldr	r3, [pc, #160]	; (800c714 <SendTxData+0x394>)
 800c672:	705a      	strb	r2, [r3, #1]


  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800c674:	4b28      	ldr	r3, [pc, #160]	; (800c718 <SendTxData+0x398>)
 800c676:	7a5b      	ldrb	r3, [r3, #9]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d007      	beq.n	800c68c <SendTxData+0x30c>
 800c67c:	f002 fa62 	bl	800eb44 <LmHandlerJoinStatus>
 800c680:	4603      	mov	r3, r0
 800c682:	2b01      	cmp	r3, #1
 800c684:	d102      	bne.n	800c68c <SendTxData+0x30c>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800c686:	4824      	ldr	r0, [pc, #144]	; (800c718 <SendTxData+0x398>)
 800c688:	f011 fa92 	bl	801dbb0 <UTIL_TIMER_Stop>
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800c68c:	4b23      	ldr	r3, [pc, #140]	; (800c71c <SendTxData+0x39c>)
 800c68e:	78db      	ldrb	r3, [r3, #3]
 800c690:	2200      	movs	r2, #0
 800c692:	4619      	mov	r1, r3
 800c694:	481f      	ldr	r0, [pc, #124]	; (800c714 <SendTxData+0x394>)
 800c696:	f002 fa71 	bl	800eb7c <LmHandlerSend>
 800c69a:	4603      	mov	r3, r0
 800c69c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (LORAMAC_HANDLER_SUCCESS == status)
 800c6a0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d106      	bne.n	800c6b6 <SendTxData+0x336>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800c6a8:	4b1d      	ldr	r3, [pc, #116]	; (800c720 <SendTxData+0x3a0>)
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	2100      	movs	r1, #0
 800c6ae:	2001      	movs	r0, #1
 800c6b0:	f011 fc88 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
 800c6b4:	e016      	b.n	800c6e4 <SendTxData+0x364>
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800c6b6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c6ba:	f113 0f06 	cmn.w	r3, #6
 800c6be:	d111      	bne.n	800c6e4 <SendTxData+0x364>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800c6c0:	f002 f994 	bl	800e9ec <LmHandlerGetDutyCycleWaitTime>
 800c6c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (nextTxIn > 0)
 800c6c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d00b      	beq.n	800c6e4 <SendTxData+0x364>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800c6cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6ce:	4a15      	ldr	r2, [pc, #84]	; (800c724 <SendTxData+0x3a4>)
 800c6d0:	fba2 2303 	umull	r2, r3, r2, r3
 800c6d4:	099b      	lsrs	r3, r3, #6
 800c6d6:	9300      	str	r3, [sp, #0]
 800c6d8:	4b13      	ldr	r3, [pc, #76]	; (800c728 <SendTxData+0x3a8>)
 800c6da:	2201      	movs	r2, #1
 800c6dc:	2100      	movs	r1, #0
 800c6de:	2001      	movs	r0, #1
 800c6e0:	f011 fc70 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800c6e4:	4b11      	ldr	r3, [pc, #68]	; (800c72c <SendTxData+0x3ac>)
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d10f      	bne.n	800c70c <SendTxData+0x38c>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800c6ec:	4810      	ldr	r0, [pc, #64]	; (800c730 <SendTxData+0x3b0>)
 800c6ee:	f011 fa5f 	bl	801dbb0 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800c6f2:	4b10      	ldr	r3, [pc, #64]	; (800c734 <SendTxData+0x3b4>)
 800c6f4:	681a      	ldr	r2, [r3, #0]
 800c6f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	bf38      	it	cc
 800c6fc:	4613      	movcc	r3, r2
 800c6fe:	4619      	mov	r1, r3
 800c700:	480b      	ldr	r0, [pc, #44]	; (800c730 <SendTxData+0x3b0>)
 800c702:	f011 fac5 	bl	801dc90 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800c706:	480a      	ldr	r0, [pc, #40]	; (800c730 <SendTxData+0x3b0>)
 800c708:	f011 f9e4 	bl	801dad4 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800c70c:	bf00      	nop
 800c70e:	3744      	adds	r7, #68	; 0x44
 800c710:	46bd      	mov	sp, r7
 800c712:	bd90      	pop	{r4, r7, pc}
 800c714:	2000008c 	.word	0x2000008c
 800c718:	20000650 	.word	0x20000650
 800c71c:	20000070 	.word	0x20000070
 800c720:	0801e88c 	.word	0x0801e88c
 800c724:	10624dd3 	.word	0x10624dd3
 800c728:	0801e89c 	.word	0x0801e89c
 800c72c:	200004f8 	.word	0x200004f8
 800c730:	200004fc 	.word	0x200004fc
 800c734:	20000088 	.word	0x20000088

0800c738 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */
	APP_LOG(TS_ON, VLEVEL_M, "starting TX timer\r\n");
 800c740:	4b08      	ldr	r3, [pc, #32]	; (800c764 <OnTxTimerEvent+0x2c>)
 800c742:	2201      	movs	r2, #1
 800c744:	2100      	movs	r1, #0
 800c746:	2002      	movs	r0, #2
 800c748:	f011 fc3c 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800c74c:	2100      	movs	r1, #0
 800c74e:	2002      	movs	r0, #2
 800c750:	f011 f908 	bl	801d964 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800c754:	4804      	ldr	r0, [pc, #16]	; (800c768 <OnTxTimerEvent+0x30>)
 800c756:	f011 f9bd 	bl	801dad4 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800c75a:	bf00      	nop
 800c75c:	3708      	adds	r7, #8
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
 800c762:	bf00      	nop
 800c764:	0801e8bc 	.word	0x0801e8bc
 800c768:	200004fc 	.word	0x200004fc

0800c76c <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{ }
 800c76c:	b480      	push	{r7}
 800c76e:	b083      	sub	sp, #12
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	bf00      	nop
 800c776:	370c      	adds	r7, #12
 800c778:	46bd      	mov	sp, r7
 800c77a:	bc80      	pop	{r7}
 800c77c:	4770      	bx	lr

0800c77e <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{ }
 800c77e:	b480      	push	{r7}
 800c780:	b083      	sub	sp, #12
 800c782:	af00      	add	r7, sp, #0
 800c784:	6078      	str	r0, [r7, #4]
 800c786:	bf00      	nop
 800c788:	370c      	adds	r7, #12
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bc80      	pop	{r7}
 800c78e:	4770      	bx	lr

0800c790 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{ }
 800c790:	b480      	push	{r7}
 800c792:	b083      	sub	sp, #12
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	bf00      	nop
 800c79a:	370c      	adds	r7, #12
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bc80      	pop	{r7}
 800c7a0:	4770      	bx	lr
	...

0800c7a4 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b086      	sub	sp, #24
 800c7a8:	af04      	add	r7, sp, #16
 800c7aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d041      	beq.n	800c836 <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d03d      	beq.n	800c836 <OnTxData+0x92>
    {
      UTIL_TIMER_Start(&TxLedTimer);
 800c7ba:	4821      	ldr	r0, [pc, #132]	; (800c840 <OnTxData+0x9c>)
 800c7bc:	f011 f98a 	bl	801dad4 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800c7c0:	4b20      	ldr	r3, [pc, #128]	; (800c844 <OnTxData+0xa0>)
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	2100      	movs	r1, #0
 800c7c6:	2002      	movs	r0, #2
 800c7c8:	f011 fbfc 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_M, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	68db      	ldr	r3, [r3, #12]
 800c7d0:	687a      	ldr	r2, [r7, #4]
 800c7d2:	7c12      	ldrb	r2, [r2, #16]
 800c7d4:	4611      	mov	r1, r2
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800c7dc:	4610      	mov	r0, r2
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800c7e4:	9203      	str	r2, [sp, #12]
 800c7e6:	9002      	str	r0, [sp, #8]
 800c7e8:	9101      	str	r1, [sp, #4]
 800c7ea:	9300      	str	r3, [sp, #0]
 800c7ec:	4b16      	ldr	r3, [pc, #88]	; (800c848 <OnTxData+0xa4>)
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	2002      	movs	r0, #2
 800c7f4:	f011 fbe6 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_M, " | MSG TYPE:");
 800c7f8:	4b14      	ldr	r3, [pc, #80]	; (800c84c <OnTxData+0xa8>)
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	2100      	movs	r1, #0
 800c7fe:	2002      	movs	r0, #2
 800c800:	f011 fbe0 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	7a1b      	ldrb	r3, [r3, #8]
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d10e      	bne.n	800c82a <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	7a5b      	ldrb	r3, [r3, #9]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d001      	beq.n	800c818 <OnTxData+0x74>
 800c814:	4b0e      	ldr	r3, [pc, #56]	; (800c850 <OnTxData+0xac>)
 800c816:	e000      	b.n	800c81a <OnTxData+0x76>
 800c818:	4b0e      	ldr	r3, [pc, #56]	; (800c854 <OnTxData+0xb0>)
 800c81a:	9300      	str	r3, [sp, #0]
 800c81c:	4b0e      	ldr	r3, [pc, #56]	; (800c858 <OnTxData+0xb4>)
 800c81e:	2200      	movs	r2, #0
 800c820:	2100      	movs	r1, #0
 800c822:	2002      	movs	r0, #2
 800c824:	f011 fbce 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_M, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800c828:	e005      	b.n	800c836 <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_M, "UNCONFIRMED\r\n");
 800c82a:	4b0c      	ldr	r3, [pc, #48]	; (800c85c <OnTxData+0xb8>)
 800c82c:	2200      	movs	r2, #0
 800c82e:	2100      	movs	r1, #0
 800c830:	2002      	movs	r0, #2
 800c832:	f011 fbc7 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
}
 800c836:	bf00      	nop
 800c838:	3708      	adds	r7, #8
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	20000620 	.word	0x20000620
 800c844:	0801e8d0 	.word	0x0801e8d0
 800c848:	0801e904 	.word	0x0801e904
 800c84c:	0801e938 	.word	0x0801e938
 800c850:	0801e948 	.word	0x0801e948
 800c854:	0801e94c 	.word	0x0801e94c
 800c858:	0801e954 	.word	0x0801e954
 800c85c:	0801e968 	.word	0x0801e968

0800c860 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b082      	sub	sp, #8
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d039      	beq.n	800c8e2 <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d11e      	bne.n	800c8b6 <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800c878:	2100      	movs	r1, #0
 800c87a:	2004      	movs	r0, #4
 800c87c:	f011 f872 	bl	801d964 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800c880:	481a      	ldr	r0, [pc, #104]	; (800c8ec <OnJoinRequest+0x8c>)
 800c882:	f011 f995 	bl	801dbb0 <UTIL_TIMER_Stop>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800c886:	4b1a      	ldr	r3, [pc, #104]	; (800c8f0 <OnJoinRequest+0x90>)
 800c888:	2200      	movs	r2, #0
 800c88a:	2100      	movs	r1, #0
 800c88c:	2002      	movs	r0, #2
 800c88e:	f011 fb99 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	79db      	ldrb	r3, [r3, #7]
 800c896:	2b01      	cmp	r3, #1
 800c898:	d106      	bne.n	800c8a8 <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800c89a:	4b16      	ldr	r3, [pc, #88]	; (800c8f4 <OnJoinRequest+0x94>)
 800c89c:	2200      	movs	r2, #0
 800c89e:	2100      	movs	r1, #0
 800c8a0:	2002      	movs	r0, #2
 800c8a2:	f011 fb8f 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800c8a6:	e01c      	b.n	800c8e2 <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800c8a8:	4b13      	ldr	r3, [pc, #76]	; (800c8f8 <OnJoinRequest+0x98>)
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	2100      	movs	r1, #0
 800c8ae:	2002      	movs	r0, #2
 800c8b0:	f011 fb88 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
}
 800c8b4:	e015      	b.n	800c8e2 <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800c8b6:	4b11      	ldr	r3, [pc, #68]	; (800c8fc <OnJoinRequest+0x9c>)
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	2100      	movs	r1, #0
 800c8bc:	2002      	movs	r0, #2
 800c8be:	f011 fb81 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	79db      	ldrb	r3, [r3, #7]
 800c8c6:	2b02      	cmp	r3, #2
 800c8c8:	d10b      	bne.n	800c8e2 <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800c8ca:	4b0d      	ldr	r3, [pc, #52]	; (800c900 <OnJoinRequest+0xa0>)
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	2100      	movs	r1, #0
 800c8d0:	2002      	movs	r0, #2
 800c8d2:	f011 fb77 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800c8d6:	4b0b      	ldr	r3, [pc, #44]	; (800c904 <OnJoinRequest+0xa4>)
 800c8d8:	781b      	ldrb	r3, [r3, #0]
 800c8da:	2101      	movs	r1, #1
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f002 f88f 	bl	800ea00 <LmHandlerJoin>
}
 800c8e2:	bf00      	nop
 800c8e4:	3708      	adds	r7, #8
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}
 800c8ea:	bf00      	nop
 800c8ec:	20000650 	.word	0x20000650
 800c8f0:	0801e978 	.word	0x0801e978
 800c8f4:	0801e990 	.word	0x0801e990
 800c8f8:	0801e9b0 	.word	0x0801e9b0
 800c8fc:	0801e9d0 	.word	0x0801e9d0
 800c900:	0801e9ec 	.word	0x0801e9ec
 800c904:	20000020 	.word	0x20000020

0800c908 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800c908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c90a:	b093      	sub	sp, #76	; 0x4c
 800c90c:	af0c      	add	r7, sp, #48	; 0x30
 800c90e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d056      	beq.n	800c9c4 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	785b      	ldrb	r3, [r3, #1]
 800c91a:	2b02      	cmp	r3, #2
 800c91c:	d008      	beq.n	800c930 <OnBeaconStatusChange+0x28>
 800c91e:	2b03      	cmp	r3, #3
 800c920:	d049      	beq.n	800c9b6 <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800c922:	4b2a      	ldr	r3, [pc, #168]	; (800c9cc <OnBeaconStatusChange+0xc4>)
 800c924:	2200      	movs	r2, #0
 800c926:	2100      	movs	r1, #0
 800c928:	2002      	movs	r0, #2
 800c92a:	f011 fb4b 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800c92e:	e049      	b.n	800c9c4 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	7c1b      	ldrb	r3, [r3, #16]
 800c934:	4618      	mov	r0, r3
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c93c:	461c      	mov	r4, r3
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800c944:	461d      	mov	r5, r3
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	68db      	ldr	r3, [r3, #12]
 800c94a:	697a      	ldr	r2, [r7, #20]
 800c94c:	6852      	ldr	r2, [r2, #4]
 800c94e:	6979      	ldr	r1, [r7, #20]
 800c950:	7d89      	ldrb	r1, [r1, #22]
 800c952:	460e      	mov	r6, r1
 800c954:	6979      	ldr	r1, [r7, #20]
 800c956:	7dc9      	ldrb	r1, [r1, #23]
 800c958:	6139      	str	r1, [r7, #16]
 800c95a:	6979      	ldr	r1, [r7, #20]
 800c95c:	7e09      	ldrb	r1, [r1, #24]
 800c95e:	60f9      	str	r1, [r7, #12]
 800c960:	6979      	ldr	r1, [r7, #20]
 800c962:	7e49      	ldrb	r1, [r1, #25]
 800c964:	60b9      	str	r1, [r7, #8]
 800c966:	6979      	ldr	r1, [r7, #20]
 800c968:	7e89      	ldrb	r1, [r1, #26]
 800c96a:	6079      	str	r1, [r7, #4]
 800c96c:	6979      	ldr	r1, [r7, #20]
 800c96e:	7ec9      	ldrb	r1, [r1, #27]
 800c970:	6039      	str	r1, [r7, #0]
 800c972:	6979      	ldr	r1, [r7, #20]
 800c974:	7f09      	ldrb	r1, [r1, #28]
 800c976:	910b      	str	r1, [sp, #44]	; 0x2c
 800c978:	f8d7 c000 	ldr.w	ip, [r7]
 800c97c:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800c980:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800c984:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800c988:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800c98c:	f8cd c020 	str.w	ip, [sp, #32]
 800c990:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800c994:	f8cd c01c 	str.w	ip, [sp, #28]
 800c998:	6939      	ldr	r1, [r7, #16]
 800c99a:	9106      	str	r1, [sp, #24]
 800c99c:	9605      	str	r6, [sp, #20]
 800c99e:	9204      	str	r2, [sp, #16]
 800c9a0:	9303      	str	r3, [sp, #12]
 800c9a2:	9502      	str	r5, [sp, #8]
 800c9a4:	9401      	str	r4, [sp, #4]
 800c9a6:	9000      	str	r0, [sp, #0]
 800c9a8:	4b09      	ldr	r3, [pc, #36]	; (800c9d0 <OnBeaconStatusChange+0xc8>)
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	2100      	movs	r1, #0
 800c9ae:	2002      	movs	r0, #2
 800c9b0:	f011 fb08 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800c9b4:	e006      	b.n	800c9c4 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800c9b6:	4b07      	ldr	r3, [pc, #28]	; (800c9d4 <OnBeaconStatusChange+0xcc>)
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	2100      	movs	r1, #0
 800c9bc:	2002      	movs	r0, #2
 800c9be:	f011 fb01 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800c9c2:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800c9c4:	bf00      	nop
 800c9c6:	371c      	adds	r7, #28
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9cc:	0801ea10 	.word	0x0801ea10
 800c9d0:	0801ea28 	.word	0x0801ea28
 800c9d4:	0801ea9c 	.word	0x0801ea9c

0800c9d8 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800c9dc:	bf00      	nop
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bc80      	pop	{r7}
 800c9e2:	4770      	bx	lr

0800c9e4 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af02      	add	r7, sp, #8
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800c9ee:	79fb      	ldrb	r3, [r7, #7]
 800c9f0:	4a06      	ldr	r2, [pc, #24]	; (800ca0c <OnClassChange+0x28>)
 800c9f2:	5cd3      	ldrb	r3, [r2, r3]
 800c9f4:	9300      	str	r3, [sp, #0]
 800c9f6:	4b06      	ldr	r3, [pc, #24]	; (800ca10 <OnClassChange+0x2c>)
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	2100      	movs	r1, #0
 800c9fc:	2002      	movs	r0, #2
 800c9fe:	f011 fae1 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800ca02:	bf00      	nop
 800ca04:	3708      	adds	r7, #8
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}
 800ca0a:	bf00      	nop
 800ca0c:	0801ead8 	.word	0x0801ead8
 800ca10:	0801eabc 	.word	0x0801eabc

0800ca14 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800ca18:	2100      	movs	r1, #0
 800ca1a:	2001      	movs	r0, #1
 800ca1c:	f010 ffa2 	bl	801d964 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800ca20:	bf00      	nop
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800ca2c:	4a0d      	ldr	r2, [pc, #52]	; (800ca64 <OnTxPeriodicityChanged+0x40>)
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800ca32:	4b0c      	ldr	r3, [pc, #48]	; (800ca64 <OnTxPeriodicityChanged+0x40>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d103      	bne.n	800ca42 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800ca3a:	4b0a      	ldr	r3, [pc, #40]	; (800ca64 <OnTxPeriodicityChanged+0x40>)
 800ca3c:	f242 7210 	movw	r2, #10000	; 0x2710
 800ca40:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800ca42:	4809      	ldr	r0, [pc, #36]	; (800ca68 <OnTxPeriodicityChanged+0x44>)
 800ca44:	f011 f8b4 	bl	801dbb0 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800ca48:	4b06      	ldr	r3, [pc, #24]	; (800ca64 <OnTxPeriodicityChanged+0x40>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	4806      	ldr	r0, [pc, #24]	; (800ca68 <OnTxPeriodicityChanged+0x44>)
 800ca50:	f011 f91e 	bl	801dc90 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800ca54:	4804      	ldr	r0, [pc, #16]	; (800ca68 <OnTxPeriodicityChanged+0x44>)
 800ca56:	f011 f83d 	bl	801dad4 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800ca5a:	bf00      	nop
 800ca5c:	3708      	adds	r7, #8
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	20000088 	.word	0x20000088
 800ca68:	200004fc 	.word	0x200004fc

0800ca6c <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b083      	sub	sp, #12
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	4603      	mov	r3, r0
 800ca74:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800ca76:	4a04      	ldr	r2, [pc, #16]	; (800ca88 <OnTxFrameCtrlChanged+0x1c>)
 800ca78:	79fb      	ldrb	r3, [r7, #7]
 800ca7a:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800ca7c:	bf00      	nop
 800ca7e:	370c      	adds	r7, #12
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bc80      	pop	{r7}
 800ca84:	4770      	bx	lr
 800ca86:	bf00      	nop
 800ca88:	20000070 	.word	0x20000070

0800ca8c <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b083      	sub	sp, #12
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	4603      	mov	r3, r0
 800ca94:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800ca96:	4a04      	ldr	r2, [pc, #16]	; (800caa8 <OnPingSlotPeriodicityChanged+0x1c>)
 800ca98:	79fb      	ldrb	r3, [r7, #7]
 800ca9a:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800ca9c:	bf00      	nop
 800ca9e:	370c      	adds	r7, #12
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bc80      	pop	{r7}
 800caa4:	4770      	bx	lr
 800caa6:	bf00      	nop
 800caa8:	20000070 	.word	0x20000070

0800caac <OnSystemReset>:

static void OnSystemReset(void)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800cab0:	f002 fd9f 	bl	800f5f2 <LmHandlerHalt>
 800cab4:	4603      	mov	r3, r0
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d106      	bne.n	800cac8 <OnSystemReset+0x1c>
 800caba:	f002 f843 	bl	800eb44 <LmHandlerJoinStatus>
 800cabe:	4603      	mov	r3, r0
 800cac0:	2b01      	cmp	r3, #1
 800cac2:	d101      	bne.n	800cac8 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800cac4:	f7ff fab0 	bl	800c028 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800cac8:	bf00      	nop
 800caca:	bd80      	pop	{r7, pc}

0800cacc <StopJoin>:

static void StopJoin(void)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StopJoin_1 */

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800cad0:	4817      	ldr	r0, [pc, #92]	; (800cb30 <StopJoin+0x64>)
 800cad2:	f011 f86d 	bl	801dbb0 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800cad6:	f002 fd7f 	bl	800f5d8 <LmHandlerStop>
 800cada:	4603      	mov	r3, r0
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d006      	beq.n	800caee <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800cae0:	4b14      	ldr	r3, [pc, #80]	; (800cb34 <StopJoin+0x68>)
 800cae2:	2200      	movs	r2, #0
 800cae4:	2100      	movs	r1, #0
 800cae6:	2002      	movs	r0, #2
 800cae8:	f011 fa6c 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
 800caec:	e01a      	b.n	800cb24 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800caee:	4b12      	ldr	r3, [pc, #72]	; (800cb38 <StopJoin+0x6c>)
 800caf0:	2200      	movs	r2, #0
 800caf2:	2100      	movs	r1, #0
 800caf4:	2002      	movs	r0, #2
 800caf6:	f011 fa65 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800cafa:	4b10      	ldr	r3, [pc, #64]	; (800cb3c <StopJoin+0x70>)
 800cafc:	2201      	movs	r2, #1
 800cafe:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800cb00:	4b0f      	ldr	r3, [pc, #60]	; (800cb40 <StopJoin+0x74>)
 800cb02:	2200      	movs	r2, #0
 800cb04:	2100      	movs	r1, #0
 800cb06:	2002      	movs	r0, #2
 800cb08:	f011 fa5c 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800cb0c:	480d      	ldr	r0, [pc, #52]	; (800cb44 <StopJoin+0x78>)
 800cb0e:	f001 fe1f 	bl	800e750 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800cb12:	4b0a      	ldr	r3, [pc, #40]	; (800cb3c <StopJoin+0x70>)
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	2101      	movs	r1, #1
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f001 ff71 	bl	800ea00 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800cb1e:	4804      	ldr	r0, [pc, #16]	; (800cb30 <StopJoin+0x64>)
 800cb20:	f010 ffd8 	bl	801dad4 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800cb24:	4808      	ldr	r0, [pc, #32]	; (800cb48 <StopJoin+0x7c>)
 800cb26:	f010 ffd5 	bl	801dad4 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800cb2a:	bf00      	nop
 800cb2c:	bd80      	pop	{r7, pc}
 800cb2e:	bf00      	nop
 800cb30:	200004fc 	.word	0x200004fc
 800cb34:	0801eadc 	.word	0x0801eadc
 800cb38:	0801eafc 	.word	0x0801eafc
 800cb3c:	20000020 	.word	0x20000020
 800cb40:	0801eb10 	.word	0x0801eb10
 800cb44:	20000070 	.word	0x20000070
 800cb48:	20000514 	.word	0x20000514

0800cb4c <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b082      	sub	sp, #8
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800cb54:	4b05      	ldr	r3, [pc, #20]	; (800cb6c <OnStopJoinTimerEvent+0x20>)
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	2b02      	cmp	r3, #2
 800cb5a:	d103      	bne.n	800cb64 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800cb5c:	2100      	movs	r1, #0
 800cb5e:	2008      	movs	r0, #8
 800cb60:	f010 ff00 	bl	801d964 <UTIL_SEQ_SetTask>
  }
  /* USER CODE BEGIN OnStopJoinTimerEvent_Last */

  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800cb64:	bf00      	nop
 800cb66:	3708      	adds	r7, #8
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}
 800cb6c:	20000020 	.word	0x20000020

0800cb70 <StoreContext>:

static void StoreContext(void)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800cb76:	23ff      	movs	r3, #255	; 0xff
 800cb78:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800cb7a:	f002 fd6f 	bl	800f65c <LmHandlerNvmDataStore>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800cb82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb86:	f113 0f08 	cmn.w	r3, #8
 800cb8a:	d106      	bne.n	800cb9a <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800cb8c:	4b0a      	ldr	r3, [pc, #40]	; (800cbb8 <StoreContext+0x48>)
 800cb8e:	2200      	movs	r2, #0
 800cb90:	2100      	movs	r1, #0
 800cb92:	2002      	movs	r0, #2
 800cb94:	f011 fa16 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800cb98:	e00a      	b.n	800cbb0 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800cb9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cba2:	d105      	bne.n	800cbb0 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800cba4:	4b05      	ldr	r3, [pc, #20]	; (800cbbc <StoreContext+0x4c>)
 800cba6:	2200      	movs	r2, #0
 800cba8:	2100      	movs	r1, #0
 800cbaa:	2002      	movs	r0, #2
 800cbac:	f011 fa0a 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
}
 800cbb0:	bf00      	nop
 800cbb2:	3708      	adds	r7, #8
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	0801eb30 	.word	0x0801eb30
 800cbbc:	0801eb48 	.word	0x0801eb48

0800cbc0 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800cbca:	79fb      	ldrb	r3, [r7, #7]
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	d106      	bne.n	800cbde <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800cbd0:	4b08      	ldr	r3, [pc, #32]	; (800cbf4 <OnNvmDataChange+0x34>)
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	2100      	movs	r1, #0
 800cbd6:	2002      	movs	r0, #2
 800cbd8:	f011 f9f4 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800cbdc:	e005      	b.n	800cbea <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800cbde:	4b06      	ldr	r3, [pc, #24]	; (800cbf8 <OnNvmDataChange+0x38>)
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	2100      	movs	r1, #0
 800cbe4:	2002      	movs	r0, #2
 800cbe6:	f011 f9ed 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
}
 800cbea:	bf00      	nop
 800cbec:	3708      	adds	r7, #8
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	0801eb60 	.word	0x0801eb60
 800cbf8:	0801eb74 	.word	0x0801eb74

0800cbfc <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b082      	sub	sp, #8
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
 800cc04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800cc06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800cc0a:	4807      	ldr	r0, [pc, #28]	; (800cc28 <OnStoreContextRequest+0x2c>)
 800cc0c:	f7f4 fda8 	bl	8001760 <FLASH_IF_Erase>
 800cc10:	4603      	mov	r3, r0
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d104      	bne.n	800cc20 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800cc16:	683a      	ldr	r2, [r7, #0]
 800cc18:	6879      	ldr	r1, [r7, #4]
 800cc1a:	4803      	ldr	r0, [pc, #12]	; (800cc28 <OnStoreContextRequest+0x2c>)
 800cc1c:	f7f4 fd50 	bl	80016c0 <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800cc20:	bf00      	nop
 800cc22:	3708      	adds	r7, #8
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	0803f000 	.word	0x0803f000

0800cc2c <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b082      	sub	sp, #8
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800cc36:	683a      	ldr	r2, [r7, #0]
 800cc38:	4903      	ldr	r1, [pc, #12]	; (800cc48 <OnRestoreContextRequest+0x1c>)
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f7f4 fd68 	bl	8001710 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800cc40:	bf00      	nop
 800cc42:	3708      	adds	r7, #8
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}
 800cc48:	0803f000 	.word	0x0803f000

0800cc4c <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800cc50:	4b15      	ldr	r3, [pc, #84]	; (800cca8 <LoraInfo_Init+0x5c>)
 800cc52:	2200      	movs	r2, #0
 800cc54:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800cc56:	4b14      	ldr	r3, [pc, #80]	; (800cca8 <LoraInfo_Init+0x5c>)
 800cc58:	2200      	movs	r2, #0
 800cc5a:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800cc5c:	4b12      	ldr	r3, [pc, #72]	; (800cca8 <LoraInfo_Init+0x5c>)
 800cc5e:	2200      	movs	r2, #0
 800cc60:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800cc62:	4b11      	ldr	r3, [pc, #68]	; (800cca8 <LoraInfo_Init+0x5c>)
 800cc64:	2200      	movs	r2, #0
 800cc66:	60da      	str	r2, [r3, #12]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 800cc68:	4b0f      	ldr	r3, [pc, #60]	; (800cca8 <LoraInfo_Init+0x5c>)
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc70:	4a0d      	ldr	r2, [pc, #52]	; (800cca8 <LoraInfo_Init+0x5c>)
 800cc72:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800cc74:	4b0c      	ldr	r3, [pc, #48]	; (800cca8 <LoraInfo_Init+0x5c>)
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d10c      	bne.n	800cc96 <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800cc7c:	4b0b      	ldr	r3, [pc, #44]	; (800ccac <LoraInfo_Init+0x60>)
 800cc7e:	2200      	movs	r2, #0
 800cc80:	2100      	movs	r1, #0
 800cc82:	2000      	movs	r0, #0
 800cc84:	f011 f99e 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800cc88:	bf00      	nop
 800cc8a:	f011 f989 	bl	801dfa0 <UTIL_ADV_TRACE_IsBufferEmpty>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	2b01      	cmp	r3, #1
 800cc92:	d1fa      	bne.n	800cc8a <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800cc94:	e7fe      	b.n	800cc94 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800cc96:	4b04      	ldr	r3, [pc, #16]	; (800cca8 <LoraInfo_Init+0x5c>)
 800cc98:	2200      	movs	r2, #0
 800cc9a:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800cc9c:	4b02      	ldr	r3, [pc, #8]	; (800cca8 <LoraInfo_Init+0x5c>)
 800cc9e:	2201      	movs	r2, #1
 800cca0:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800cca2:	bf00      	nop
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	bf00      	nop
 800cca8:	20000668 	.word	0x20000668
 800ccac:	0801eb88 	.word	0x0801eb88

0800ccb0 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800ccb4:	4b02      	ldr	r3, [pc, #8]	; (800ccc0 <LoraInfo_GetPtr+0x10>)
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bc80      	pop	{r7}
 800ccbc:	4770      	bx	lr
 800ccbe:	bf00      	nop
 800ccc0:	20000668 	.word	0x20000668

0800ccc4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800ccc8:	f7f7 f9ae 	bl	8004028 <BSP_RADIO_Init>
 800cccc:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	bd80      	pop	{r7, pc}

0800ccd2 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800ccd2:	b580      	push	{r7, lr}
 800ccd4:	b082      	sub	sp, #8
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	4603      	mov	r3, r0
 800ccda:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800ccdc:	79fb      	ldrb	r3, [r7, #7]
 800ccde:	4618      	mov	r0, r3
 800cce0:	f7f7 f9d4 	bl	800408c <BSP_RADIO_ConfigRFSwitch>
 800cce4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3708      	adds	r7, #8
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}

0800ccee <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800ccee:	b580      	push	{r7, lr}
 800ccf0:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800ccf2:	f7f7 fa19 	bl	8004128 <BSP_RADIO_GetTxConfig>
 800ccf6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800cd00:	f7f7 fa19 	bl	8004136 <BSP_RADIO_IsTCXO>
 800cd04:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	bd80      	pop	{r7, pc}

0800cd0a <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800cd0a:	b580      	push	{r7, lr}
 800cd0c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800cd0e:	f7f7 fa19 	bl	8004144 <BSP_RADIO_IsDCDC>
 800cd12:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	bd80      	pop	{r7, pc}

0800cd18 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	4603      	mov	r3, r0
 800cd20:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800cd22:	79fb      	ldrb	r3, [r7, #7]
 800cd24:	4618      	mov	r0, r3
 800cd26:	f7f7 fa14 	bl	8004152 <BSP_RADIO_GetRFOMaxPowerConfig>
 800cd2a:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3708      	adds	r7, #8
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}

0800cd34 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	33f1      	adds	r3, #241	; 0xf1
 800cd40:	2210      	movs	r2, #16
 800cd42:	2100      	movs	r1, #0
 800cd44:	4618      	mov	r0, r3
 800cd46:	f00c fdd3 	bl	80198f0 <memset1>
    ctx->M_n = 0;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	22f0      	movs	r2, #240	; 0xf0
 800cd56:	2100      	movs	r1, #0
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f00c fdc9 	bl	80198f0 <memset1>
}
 800cd5e:	bf00      	nop
 800cd60:	3708      	adds	r7, #8
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}

0800cd66 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800cd66:	b580      	push	{r7, lr}
 800cd68:	b082      	sub	sp, #8
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]
 800cd6e:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	461a      	mov	r2, r3
 800cd74:	2110      	movs	r1, #16
 800cd76:	6838      	ldr	r0, [r7, #0]
 800cd78:	f000 fe5c 	bl	800da34 <lorawan_aes_set_key>
}
 800cd7c:	bf00      	nop
 800cd7e:	3708      	adds	r7, #8
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b08c      	sub	sp, #48	; 0x30
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	60b9      	str	r1, [r7, #8]
 800cd8e:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	f000 80a1 	beq.w	800cede <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cda2:	f1c3 0310 	rsb	r3, r3, #16
 800cda6:	687a      	ldr	r2, [r7, #4]
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	bf28      	it	cs
 800cdac:	4613      	movcs	r3, r2
 800cdae:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f203 1201 	addw	r2, r3, #257	; 0x101
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cdbc:	4413      	add	r3, r2
 800cdbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdc0:	b292      	uxth	r2, r2
 800cdc2:	68b9      	ldr	r1, [r7, #8]
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f00c fd58 	bl	801987a <memcpy1>
        ctx->M_n += mlen;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800cdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd2:	441a      	add	r2, r3
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cde0:	2b0f      	cmp	r3, #15
 800cde2:	f240 808d 	bls.w	800cf00 <AES_CMAC_Update+0x17c>
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdea:	429a      	cmp	r2, r3
 800cdec:	f000 8088 	beq.w	800cf00 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cdf4:	e015      	b.n	800ce22 <AES_CMAC_Update+0x9e>
 800cdf6:	68fa      	ldr	r2, [r7, #12]
 800cdf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdfa:	4413      	add	r3, r2
 800cdfc:	33f1      	adds	r3, #241	; 0xf1
 800cdfe:	781a      	ldrb	r2, [r3, #0]
 800ce00:	68f9      	ldr	r1, [r7, #12]
 800ce02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce04:	440b      	add	r3, r1
 800ce06:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	4053      	eors	r3, r2
 800ce0e:	b2d9      	uxtb	r1, r3
 800ce10:	68fa      	ldr	r2, [r7, #12]
 800ce12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce14:	4413      	add	r3, r2
 800ce16:	33f1      	adds	r3, #241	; 0xf1
 800ce18:	460a      	mov	r2, r1
 800ce1a:	701a      	strb	r2, [r3, #0]
 800ce1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1e:	3301      	adds	r3, #1
 800ce20:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce24:	2b0f      	cmp	r3, #15
 800ce26:	dde6      	ble.n	800cdf6 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800ce2e:	f107 0314 	add.w	r3, r7, #20
 800ce32:	2210      	movs	r2, #16
 800ce34:	4618      	mov	r0, r3
 800ce36:	f00c fd20 	bl	801987a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ce3a:	68fa      	ldr	r2, [r7, #12]
 800ce3c:	f107 0114 	add.w	r1, r7, #20
 800ce40:	f107 0314 	add.w	r3, r7, #20
 800ce44:	4618      	mov	r0, r3
 800ce46:	f000 fed3 	bl	800dbf0 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	33f1      	adds	r3, #241	; 0xf1
 800ce4e:	f107 0114 	add.w	r1, r7, #20
 800ce52:	2210      	movs	r2, #16
 800ce54:	4618      	mov	r0, r3
 800ce56:	f00c fd10 	bl	801987a <memcpy1>

        data += mlen;
 800ce5a:	68ba      	ldr	r2, [r7, #8]
 800ce5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5e:	4413      	add	r3, r2
 800ce60:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800ce62:	687a      	ldr	r2, [r7, #4]
 800ce64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce66:	1ad3      	subs	r3, r2, r3
 800ce68:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800ce6a:	e038      	b.n	800cede <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce70:	e013      	b.n	800ce9a <AES_CMAC_Update+0x116>
 800ce72:	68fa      	ldr	r2, [r7, #12]
 800ce74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce76:	4413      	add	r3, r2
 800ce78:	33f1      	adds	r3, #241	; 0xf1
 800ce7a:	781a      	ldrb	r2, [r3, #0]
 800ce7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7e:	68b9      	ldr	r1, [r7, #8]
 800ce80:	440b      	add	r3, r1
 800ce82:	781b      	ldrb	r3, [r3, #0]
 800ce84:	4053      	eors	r3, r2
 800ce86:	b2d9      	uxtb	r1, r3
 800ce88:	68fa      	ldr	r2, [r7, #12]
 800ce8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce8c:	4413      	add	r3, r2
 800ce8e:	33f1      	adds	r3, #241	; 0xf1
 800ce90:	460a      	mov	r2, r1
 800ce92:	701a      	strb	r2, [r3, #0]
 800ce94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce96:	3301      	adds	r3, #1
 800ce98:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce9c:	2b0f      	cmp	r3, #15
 800ce9e:	dde8      	ble.n	800ce72 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800cea6:	f107 0314 	add.w	r3, r7, #20
 800ceaa:	2210      	movs	r2, #16
 800ceac:	4618      	mov	r0, r3
 800ceae:	f00c fce4 	bl	801987a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ceb2:	68fa      	ldr	r2, [r7, #12]
 800ceb4:	f107 0114 	add.w	r1, r7, #20
 800ceb8:	f107 0314 	add.w	r3, r7, #20
 800cebc:	4618      	mov	r0, r3
 800cebe:	f000 fe97 	bl	800dbf0 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	33f1      	adds	r3, #241	; 0xf1
 800cec6:	f107 0114 	add.w	r1, r7, #20
 800ceca:	2210      	movs	r2, #16
 800cecc:	4618      	mov	r0, r3
 800cece:	f00c fcd4 	bl	801987a <memcpy1>

        data += 16;
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	3310      	adds	r3, #16
 800ced6:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	3b10      	subs	r3, #16
 800cedc:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2b10      	cmp	r3, #16
 800cee2:	d8c3      	bhi.n	800ce6c <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ceea:	687a      	ldr	r2, [r7, #4]
 800ceec:	b292      	uxth	r2, r2
 800ceee:	68b9      	ldr	r1, [r7, #8]
 800cef0:	4618      	mov	r0, r3
 800cef2:	f00c fcc2 	bl	801987a <memcpy1>
    ctx->M_n = len;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	687a      	ldr	r2, [r7, #4]
 800cefa:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800cefe:	e000      	b.n	800cf02 <AES_CMAC_Update+0x17e>
            return;
 800cf00:	bf00      	nop
}
 800cf02:	3730      	adds	r7, #48	; 0x30
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b092      	sub	sp, #72	; 0x48
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800cf12:	f107 031c 	add.w	r3, r7, #28
 800cf16:	2210      	movs	r2, #16
 800cf18:	2100      	movs	r1, #0
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f00c fce8 	bl	80198f0 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800cf20:	683a      	ldr	r2, [r7, #0]
 800cf22:	f107 011c 	add.w	r1, r7, #28
 800cf26:	f107 031c 	add.w	r3, r7, #28
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f000 fe60 	bl	800dbf0 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800cf30:	7f3b      	ldrb	r3, [r7, #28]
 800cf32:	b25b      	sxtb	r3, r3
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	da30      	bge.n	800cf9a <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800cf38:	2300      	movs	r3, #0
 800cf3a:	647b      	str	r3, [r7, #68]	; 0x44
 800cf3c:	e01b      	b.n	800cf76 <AES_CMAC_Final+0x6e>
 800cf3e:	f107 021c 	add.w	r2, r7, #28
 800cf42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf44:	4413      	add	r3, r2
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	005b      	lsls	r3, r3, #1
 800cf4a:	b25a      	sxtb	r2, r3
 800cf4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf4e:	3301      	adds	r3, #1
 800cf50:	3348      	adds	r3, #72	; 0x48
 800cf52:	443b      	add	r3, r7
 800cf54:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800cf58:	09db      	lsrs	r3, r3, #7
 800cf5a:	b2db      	uxtb	r3, r3
 800cf5c:	b25b      	sxtb	r3, r3
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	b25b      	sxtb	r3, r3
 800cf62:	b2d9      	uxtb	r1, r3
 800cf64:	f107 021c 	add.w	r2, r7, #28
 800cf68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf6a:	4413      	add	r3, r2
 800cf6c:	460a      	mov	r2, r1
 800cf6e:	701a      	strb	r2, [r3, #0]
 800cf70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf72:	3301      	adds	r3, #1
 800cf74:	647b      	str	r3, [r7, #68]	; 0x44
 800cf76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf78:	2b0e      	cmp	r3, #14
 800cf7a:	dde0      	ble.n	800cf3e <AES_CMAC_Final+0x36>
 800cf7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cf80:	005b      	lsls	r3, r3, #1
 800cf82:	b2db      	uxtb	r3, r3
 800cf84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800cf88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cf8c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800cf90:	43db      	mvns	r3, r3
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cf98:	e027      	b.n	800cfea <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	643b      	str	r3, [r7, #64]	; 0x40
 800cf9e:	e01b      	b.n	800cfd8 <AES_CMAC_Final+0xd0>
 800cfa0:	f107 021c 	add.w	r2, r7, #28
 800cfa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfa6:	4413      	add	r3, r2
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	005b      	lsls	r3, r3, #1
 800cfac:	b25a      	sxtb	r2, r3
 800cfae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	3348      	adds	r3, #72	; 0x48
 800cfb4:	443b      	add	r3, r7
 800cfb6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800cfba:	09db      	lsrs	r3, r3, #7
 800cfbc:	b2db      	uxtb	r3, r3
 800cfbe:	b25b      	sxtb	r3, r3
 800cfc0:	4313      	orrs	r3, r2
 800cfc2:	b25b      	sxtb	r3, r3
 800cfc4:	b2d9      	uxtb	r1, r3
 800cfc6:	f107 021c 	add.w	r2, r7, #28
 800cfca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfcc:	4413      	add	r3, r2
 800cfce:	460a      	mov	r2, r1
 800cfd0:	701a      	strb	r2, [r3, #0]
 800cfd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	643b      	str	r3, [r7, #64]	; 0x40
 800cfd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfda:	2b0e      	cmp	r3, #14
 800cfdc:	dde0      	ble.n	800cfa0 <AES_CMAC_Final+0x98>
 800cfde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cfe2:	005b      	lsls	r3, r3, #1
 800cfe4:	b2db      	uxtb	r3, r3
 800cfe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cff0:	2b10      	cmp	r3, #16
 800cff2:	d11d      	bne.n	800d030 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800cff4:	2300      	movs	r3, #0
 800cff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cff8:	e016      	b.n	800d028 <AES_CMAC_Final+0x120>
 800cffa:	683a      	ldr	r2, [r7, #0]
 800cffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cffe:	4413      	add	r3, r2
 800d000:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d004:	781a      	ldrb	r2, [r3, #0]
 800d006:	f107 011c 	add.w	r1, r7, #28
 800d00a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d00c:	440b      	add	r3, r1
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	4053      	eors	r3, r2
 800d012:	b2d9      	uxtb	r1, r3
 800d014:	683a      	ldr	r2, [r7, #0]
 800d016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d018:	4413      	add	r3, r2
 800d01a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d01e:	460a      	mov	r2, r1
 800d020:	701a      	strb	r2, [r3, #0]
 800d022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d024:	3301      	adds	r3, #1
 800d026:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d02a:	2b0f      	cmp	r3, #15
 800d02c:	dde5      	ble.n	800cffa <AES_CMAC_Final+0xf2>
 800d02e:	e096      	b.n	800d15e <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800d030:	7f3b      	ldrb	r3, [r7, #28]
 800d032:	b25b      	sxtb	r3, r3
 800d034:	2b00      	cmp	r3, #0
 800d036:	da30      	bge.n	800d09a <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800d038:	2300      	movs	r3, #0
 800d03a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d03c:	e01b      	b.n	800d076 <AES_CMAC_Final+0x16e>
 800d03e:	f107 021c 	add.w	r2, r7, #28
 800d042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d044:	4413      	add	r3, r2
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	005b      	lsls	r3, r3, #1
 800d04a:	b25a      	sxtb	r2, r3
 800d04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04e:	3301      	adds	r3, #1
 800d050:	3348      	adds	r3, #72	; 0x48
 800d052:	443b      	add	r3, r7
 800d054:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800d058:	09db      	lsrs	r3, r3, #7
 800d05a:	b2db      	uxtb	r3, r3
 800d05c:	b25b      	sxtb	r3, r3
 800d05e:	4313      	orrs	r3, r2
 800d060:	b25b      	sxtb	r3, r3
 800d062:	b2d9      	uxtb	r1, r3
 800d064:	f107 021c 	add.w	r2, r7, #28
 800d068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d06a:	4413      	add	r3, r2
 800d06c:	460a      	mov	r2, r1
 800d06e:	701a      	strb	r2, [r3, #0]
 800d070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d072:	3301      	adds	r3, #1
 800d074:	63bb      	str	r3, [r7, #56]	; 0x38
 800d076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d078:	2b0e      	cmp	r3, #14
 800d07a:	dde0      	ble.n	800d03e <AES_CMAC_Final+0x136>
 800d07c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d080:	005b      	lsls	r3, r3, #1
 800d082:	b2db      	uxtb	r3, r3
 800d084:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800d088:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d08c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800d090:	43db      	mvns	r3, r3
 800d092:	b2db      	uxtb	r3, r3
 800d094:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d098:	e027      	b.n	800d0ea <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800d09a:	2300      	movs	r3, #0
 800d09c:	637b      	str	r3, [r7, #52]	; 0x34
 800d09e:	e01b      	b.n	800d0d8 <AES_CMAC_Final+0x1d0>
 800d0a0:	f107 021c 	add.w	r2, r7, #28
 800d0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0a6:	4413      	add	r3, r2
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	005b      	lsls	r3, r3, #1
 800d0ac:	b25a      	sxtb	r2, r3
 800d0ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	3348      	adds	r3, #72	; 0x48
 800d0b4:	443b      	add	r3, r7
 800d0b6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800d0ba:	09db      	lsrs	r3, r3, #7
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	b25b      	sxtb	r3, r3
 800d0c0:	4313      	orrs	r3, r2
 800d0c2:	b25b      	sxtb	r3, r3
 800d0c4:	b2d9      	uxtb	r1, r3
 800d0c6:	f107 021c 	add.w	r2, r7, #28
 800d0ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0cc:	4413      	add	r3, r2
 800d0ce:	460a      	mov	r2, r1
 800d0d0:	701a      	strb	r2, [r3, #0]
 800d0d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0d4:	3301      	adds	r3, #1
 800d0d6:	637b      	str	r3, [r7, #52]	; 0x34
 800d0d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0da:	2b0e      	cmp	r3, #14
 800d0dc:	dde0      	ble.n	800d0a0 <AES_CMAC_Final+0x198>
 800d0de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d0e2:	005b      	lsls	r3, r3, #1
 800d0e4:	b2db      	uxtb	r3, r3
 800d0e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d0f0:	683a      	ldr	r2, [r7, #0]
 800d0f2:	4413      	add	r3, r2
 800d0f4:	2280      	movs	r2, #128	; 0x80
 800d0f6:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800d0fa:	e007      	b.n	800d10c <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d102:	683a      	ldr	r2, [r7, #0]
 800d104:	4413      	add	r3, r2
 800d106:	2200      	movs	r2, #0
 800d108:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d112:	1c5a      	adds	r2, r3, #1
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d120:	2b0f      	cmp	r3, #15
 800d122:	d9eb      	bls.n	800d0fc <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800d124:	2300      	movs	r3, #0
 800d126:	633b      	str	r3, [r7, #48]	; 0x30
 800d128:	e016      	b.n	800d158 <AES_CMAC_Final+0x250>
 800d12a:	683a      	ldr	r2, [r7, #0]
 800d12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d12e:	4413      	add	r3, r2
 800d130:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d134:	781a      	ldrb	r2, [r3, #0]
 800d136:	f107 011c 	add.w	r1, r7, #28
 800d13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d13c:	440b      	add	r3, r1
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	4053      	eors	r3, r2
 800d142:	b2d9      	uxtb	r1, r3
 800d144:	683a      	ldr	r2, [r7, #0]
 800d146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d148:	4413      	add	r3, r2
 800d14a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d14e:	460a      	mov	r2, r1
 800d150:	701a      	strb	r2, [r3, #0]
 800d152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d154:	3301      	adds	r3, #1
 800d156:	633b      	str	r3, [r7, #48]	; 0x30
 800d158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d15a:	2b0f      	cmp	r3, #15
 800d15c:	dde5      	ble.n	800d12a <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800d15e:	2300      	movs	r3, #0
 800d160:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d162:	e015      	b.n	800d190 <AES_CMAC_Final+0x288>
 800d164:	683a      	ldr	r2, [r7, #0]
 800d166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d168:	4413      	add	r3, r2
 800d16a:	33f1      	adds	r3, #241	; 0xf1
 800d16c:	781a      	ldrb	r2, [r3, #0]
 800d16e:	6839      	ldr	r1, [r7, #0]
 800d170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d172:	440b      	add	r3, r1
 800d174:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d178:	781b      	ldrb	r3, [r3, #0]
 800d17a:	4053      	eors	r3, r2
 800d17c:	b2d9      	uxtb	r1, r3
 800d17e:	683a      	ldr	r2, [r7, #0]
 800d180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d182:	4413      	add	r3, r2
 800d184:	33f1      	adds	r3, #241	; 0xf1
 800d186:	460a      	mov	r2, r1
 800d188:	701a      	strb	r2, [r3, #0]
 800d18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d18c:	3301      	adds	r3, #1
 800d18e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d192:	2b0f      	cmp	r3, #15
 800d194:	dde6      	ble.n	800d164 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800d19c:	f107 030c 	add.w	r3, r7, #12
 800d1a0:	2210      	movs	r2, #16
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f00c fb69 	bl	801987a <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800d1a8:	683a      	ldr	r2, [r7, #0]
 800d1aa:	f107 030c 	add.w	r3, r7, #12
 800d1ae:	6879      	ldr	r1, [r7, #4]
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f000 fd1d 	bl	800dbf0 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800d1b6:	f107 031c 	add.w	r3, r7, #28
 800d1ba:	2210      	movs	r2, #16
 800d1bc:	2100      	movs	r1, #0
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f00c fb96 	bl	80198f0 <memset1>
}
 800d1c4:	bf00      	nop
 800d1c6:	3748      	adds	r7, #72	; 0x48
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}

0800d1cc <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b083      	sub	sp, #12
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	781a      	ldrb	r2, [r3, #0]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	683a      	ldr	r2, [r7, #0]
 800d1e4:	7852      	ldrb	r2, [r2, #1]
 800d1e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	3302      	adds	r3, #2
 800d1ec:	683a      	ldr	r2, [r7, #0]
 800d1ee:	7892      	ldrb	r2, [r2, #2]
 800d1f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	3303      	adds	r3, #3
 800d1f6:	683a      	ldr	r2, [r7, #0]
 800d1f8:	78d2      	ldrb	r2, [r2, #3]
 800d1fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	3304      	adds	r3, #4
 800d200:	683a      	ldr	r2, [r7, #0]
 800d202:	7912      	ldrb	r2, [r2, #4]
 800d204:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	3305      	adds	r3, #5
 800d20a:	683a      	ldr	r2, [r7, #0]
 800d20c:	7952      	ldrb	r2, [r2, #5]
 800d20e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	3306      	adds	r3, #6
 800d214:	683a      	ldr	r2, [r7, #0]
 800d216:	7992      	ldrb	r2, [r2, #6]
 800d218:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	3307      	adds	r3, #7
 800d21e:	683a      	ldr	r2, [r7, #0]
 800d220:	79d2      	ldrb	r2, [r2, #7]
 800d222:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	3308      	adds	r3, #8
 800d228:	683a      	ldr	r2, [r7, #0]
 800d22a:	7a12      	ldrb	r2, [r2, #8]
 800d22c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	3309      	adds	r3, #9
 800d232:	683a      	ldr	r2, [r7, #0]
 800d234:	7a52      	ldrb	r2, [r2, #9]
 800d236:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	330a      	adds	r3, #10
 800d23c:	683a      	ldr	r2, [r7, #0]
 800d23e:	7a92      	ldrb	r2, [r2, #10]
 800d240:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	330b      	adds	r3, #11
 800d246:	683a      	ldr	r2, [r7, #0]
 800d248:	7ad2      	ldrb	r2, [r2, #11]
 800d24a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	330c      	adds	r3, #12
 800d250:	683a      	ldr	r2, [r7, #0]
 800d252:	7b12      	ldrb	r2, [r2, #12]
 800d254:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	330d      	adds	r3, #13
 800d25a:	683a      	ldr	r2, [r7, #0]
 800d25c:	7b52      	ldrb	r2, [r2, #13]
 800d25e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	330e      	adds	r3, #14
 800d264:	683a      	ldr	r2, [r7, #0]
 800d266:	7b92      	ldrb	r2, [r2, #14]
 800d268:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	330f      	adds	r3, #15
 800d26e:	683a      	ldr	r2, [r7, #0]
 800d270:	7bd2      	ldrb	r2, [r2, #15]
 800d272:	701a      	strb	r2, [r3, #0]
#endif
}
 800d274:	bf00      	nop
 800d276:	370c      	adds	r7, #12
 800d278:	46bd      	mov	sp, r7
 800d27a:	bc80      	pop	{r7}
 800d27c:	4770      	bx	lr

0800d27e <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800d27e:	b480      	push	{r7}
 800d280:	b085      	sub	sp, #20
 800d282:	af00      	add	r7, sp, #0
 800d284:	60f8      	str	r0, [r7, #12]
 800d286:	60b9      	str	r1, [r7, #8]
 800d288:	4613      	mov	r3, r2
 800d28a:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800d28c:	e007      	b.n	800d29e <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800d28e:	68ba      	ldr	r2, [r7, #8]
 800d290:	1c53      	adds	r3, r2, #1
 800d292:	60bb      	str	r3, [r7, #8]
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	1c59      	adds	r1, r3, #1
 800d298:	60f9      	str	r1, [r7, #12]
 800d29a:	7812      	ldrb	r2, [r2, #0]
 800d29c:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800d29e:	79fb      	ldrb	r3, [r7, #7]
 800d2a0:	1e5a      	subs	r2, r3, #1
 800d2a2:	71fa      	strb	r2, [r7, #7]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d1f2      	bne.n	800d28e <copy_block_nn+0x10>
}
 800d2a8:	bf00      	nop
 800d2aa:	bf00      	nop
 800d2ac:	3714      	adds	r7, #20
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bc80      	pop	{r7}
 800d2b2:	4770      	bx	lr

0800d2b4 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b083      	sub	sp, #12
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	781a      	ldrb	r2, [r3, #0]
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	781b      	ldrb	r3, [r3, #0]
 800d2c6:	4053      	eors	r3, r2
 800d2c8:	b2da      	uxtb	r2, r3
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	7819      	ldrb	r1, [r3, #0]
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	3301      	adds	r3, #1
 800d2d8:	781a      	ldrb	r2, [r3, #0]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	3301      	adds	r3, #1
 800d2de:	404a      	eors	r2, r1
 800d2e0:	b2d2      	uxtb	r2, r2
 800d2e2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	3302      	adds	r3, #2
 800d2e8:	7819      	ldrb	r1, [r3, #0]
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	3302      	adds	r3, #2
 800d2ee:	781a      	ldrb	r2, [r3, #0]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	3302      	adds	r3, #2
 800d2f4:	404a      	eors	r2, r1
 800d2f6:	b2d2      	uxtb	r2, r2
 800d2f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	3303      	adds	r3, #3
 800d2fe:	7819      	ldrb	r1, [r3, #0]
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	3303      	adds	r3, #3
 800d304:	781a      	ldrb	r2, [r3, #0]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	3303      	adds	r3, #3
 800d30a:	404a      	eors	r2, r1
 800d30c:	b2d2      	uxtb	r2, r2
 800d30e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	3304      	adds	r3, #4
 800d314:	7819      	ldrb	r1, [r3, #0]
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	3304      	adds	r3, #4
 800d31a:	781a      	ldrb	r2, [r3, #0]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	3304      	adds	r3, #4
 800d320:	404a      	eors	r2, r1
 800d322:	b2d2      	uxtb	r2, r2
 800d324:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	3305      	adds	r3, #5
 800d32a:	7819      	ldrb	r1, [r3, #0]
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	3305      	adds	r3, #5
 800d330:	781a      	ldrb	r2, [r3, #0]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	3305      	adds	r3, #5
 800d336:	404a      	eors	r2, r1
 800d338:	b2d2      	uxtb	r2, r2
 800d33a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	3306      	adds	r3, #6
 800d340:	7819      	ldrb	r1, [r3, #0]
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	3306      	adds	r3, #6
 800d346:	781a      	ldrb	r2, [r3, #0]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	3306      	adds	r3, #6
 800d34c:	404a      	eors	r2, r1
 800d34e:	b2d2      	uxtb	r2, r2
 800d350:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	3307      	adds	r3, #7
 800d356:	7819      	ldrb	r1, [r3, #0]
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	3307      	adds	r3, #7
 800d35c:	781a      	ldrb	r2, [r3, #0]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	3307      	adds	r3, #7
 800d362:	404a      	eors	r2, r1
 800d364:	b2d2      	uxtb	r2, r2
 800d366:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	3308      	adds	r3, #8
 800d36c:	7819      	ldrb	r1, [r3, #0]
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	3308      	adds	r3, #8
 800d372:	781a      	ldrb	r2, [r3, #0]
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	3308      	adds	r3, #8
 800d378:	404a      	eors	r2, r1
 800d37a:	b2d2      	uxtb	r2, r2
 800d37c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	3309      	adds	r3, #9
 800d382:	7819      	ldrb	r1, [r3, #0]
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	3309      	adds	r3, #9
 800d388:	781a      	ldrb	r2, [r3, #0]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	3309      	adds	r3, #9
 800d38e:	404a      	eors	r2, r1
 800d390:	b2d2      	uxtb	r2, r2
 800d392:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	330a      	adds	r3, #10
 800d398:	7819      	ldrb	r1, [r3, #0]
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	330a      	adds	r3, #10
 800d39e:	781a      	ldrb	r2, [r3, #0]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	330a      	adds	r3, #10
 800d3a4:	404a      	eors	r2, r1
 800d3a6:	b2d2      	uxtb	r2, r2
 800d3a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	330b      	adds	r3, #11
 800d3ae:	7819      	ldrb	r1, [r3, #0]
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	330b      	adds	r3, #11
 800d3b4:	781a      	ldrb	r2, [r3, #0]
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	330b      	adds	r3, #11
 800d3ba:	404a      	eors	r2, r1
 800d3bc:	b2d2      	uxtb	r2, r2
 800d3be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	330c      	adds	r3, #12
 800d3c4:	7819      	ldrb	r1, [r3, #0]
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	330c      	adds	r3, #12
 800d3ca:	781a      	ldrb	r2, [r3, #0]
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	330c      	adds	r3, #12
 800d3d0:	404a      	eors	r2, r1
 800d3d2:	b2d2      	uxtb	r2, r2
 800d3d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	330d      	adds	r3, #13
 800d3da:	7819      	ldrb	r1, [r3, #0]
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	330d      	adds	r3, #13
 800d3e0:	781a      	ldrb	r2, [r3, #0]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	330d      	adds	r3, #13
 800d3e6:	404a      	eors	r2, r1
 800d3e8:	b2d2      	uxtb	r2, r2
 800d3ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	330e      	adds	r3, #14
 800d3f0:	7819      	ldrb	r1, [r3, #0]
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	330e      	adds	r3, #14
 800d3f6:	781a      	ldrb	r2, [r3, #0]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	330e      	adds	r3, #14
 800d3fc:	404a      	eors	r2, r1
 800d3fe:	b2d2      	uxtb	r2, r2
 800d400:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	330f      	adds	r3, #15
 800d406:	7819      	ldrb	r1, [r3, #0]
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	330f      	adds	r3, #15
 800d40c:	781a      	ldrb	r2, [r3, #0]
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	330f      	adds	r3, #15
 800d412:	404a      	eors	r2, r1
 800d414:	b2d2      	uxtb	r2, r2
 800d416:	701a      	strb	r2, [r3, #0]
#endif
}
 800d418:	bf00      	nop
 800d41a:	370c      	adds	r7, #12
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bc80      	pop	{r7}
 800d420:	4770      	bx	lr

0800d422 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800d422:	b480      	push	{r7}
 800d424:	b085      	sub	sp, #20
 800d426:	af00      	add	r7, sp, #0
 800d428:	60f8      	str	r0, [r7, #12]
 800d42a:	60b9      	str	r1, [r7, #8]
 800d42c:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	781a      	ldrb	r2, [r3, #0]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	781b      	ldrb	r3, [r3, #0]
 800d436:	4053      	eors	r3, r2
 800d438:	b2da      	uxtb	r2, r3
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	3301      	adds	r3, #1
 800d442:	7819      	ldrb	r1, [r3, #0]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	3301      	adds	r3, #1
 800d448:	781a      	ldrb	r2, [r3, #0]
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	3301      	adds	r3, #1
 800d44e:	404a      	eors	r2, r1
 800d450:	b2d2      	uxtb	r2, r2
 800d452:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	3302      	adds	r3, #2
 800d458:	7819      	ldrb	r1, [r3, #0]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	3302      	adds	r3, #2
 800d45e:	781a      	ldrb	r2, [r3, #0]
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	3302      	adds	r3, #2
 800d464:	404a      	eors	r2, r1
 800d466:	b2d2      	uxtb	r2, r2
 800d468:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	3303      	adds	r3, #3
 800d46e:	7819      	ldrb	r1, [r3, #0]
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	3303      	adds	r3, #3
 800d474:	781a      	ldrb	r2, [r3, #0]
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	3303      	adds	r3, #3
 800d47a:	404a      	eors	r2, r1
 800d47c:	b2d2      	uxtb	r2, r2
 800d47e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	3304      	adds	r3, #4
 800d484:	7819      	ldrb	r1, [r3, #0]
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	3304      	adds	r3, #4
 800d48a:	781a      	ldrb	r2, [r3, #0]
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	3304      	adds	r3, #4
 800d490:	404a      	eors	r2, r1
 800d492:	b2d2      	uxtb	r2, r2
 800d494:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	3305      	adds	r3, #5
 800d49a:	7819      	ldrb	r1, [r3, #0]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	3305      	adds	r3, #5
 800d4a0:	781a      	ldrb	r2, [r3, #0]
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	3305      	adds	r3, #5
 800d4a6:	404a      	eors	r2, r1
 800d4a8:	b2d2      	uxtb	r2, r2
 800d4aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	3306      	adds	r3, #6
 800d4b0:	7819      	ldrb	r1, [r3, #0]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	3306      	adds	r3, #6
 800d4b6:	781a      	ldrb	r2, [r3, #0]
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	3306      	adds	r3, #6
 800d4bc:	404a      	eors	r2, r1
 800d4be:	b2d2      	uxtb	r2, r2
 800d4c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	3307      	adds	r3, #7
 800d4c6:	7819      	ldrb	r1, [r3, #0]
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	3307      	adds	r3, #7
 800d4cc:	781a      	ldrb	r2, [r3, #0]
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	3307      	adds	r3, #7
 800d4d2:	404a      	eors	r2, r1
 800d4d4:	b2d2      	uxtb	r2, r2
 800d4d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	3308      	adds	r3, #8
 800d4dc:	7819      	ldrb	r1, [r3, #0]
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	3308      	adds	r3, #8
 800d4e2:	781a      	ldrb	r2, [r3, #0]
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	3308      	adds	r3, #8
 800d4e8:	404a      	eors	r2, r1
 800d4ea:	b2d2      	uxtb	r2, r2
 800d4ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	3309      	adds	r3, #9
 800d4f2:	7819      	ldrb	r1, [r3, #0]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	3309      	adds	r3, #9
 800d4f8:	781a      	ldrb	r2, [r3, #0]
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	3309      	adds	r3, #9
 800d4fe:	404a      	eors	r2, r1
 800d500:	b2d2      	uxtb	r2, r2
 800d502:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	330a      	adds	r3, #10
 800d508:	7819      	ldrb	r1, [r3, #0]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	330a      	adds	r3, #10
 800d50e:	781a      	ldrb	r2, [r3, #0]
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	330a      	adds	r3, #10
 800d514:	404a      	eors	r2, r1
 800d516:	b2d2      	uxtb	r2, r2
 800d518:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	330b      	adds	r3, #11
 800d51e:	7819      	ldrb	r1, [r3, #0]
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	330b      	adds	r3, #11
 800d524:	781a      	ldrb	r2, [r3, #0]
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	330b      	adds	r3, #11
 800d52a:	404a      	eors	r2, r1
 800d52c:	b2d2      	uxtb	r2, r2
 800d52e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	330c      	adds	r3, #12
 800d534:	7819      	ldrb	r1, [r3, #0]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	330c      	adds	r3, #12
 800d53a:	781a      	ldrb	r2, [r3, #0]
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	330c      	adds	r3, #12
 800d540:	404a      	eors	r2, r1
 800d542:	b2d2      	uxtb	r2, r2
 800d544:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	330d      	adds	r3, #13
 800d54a:	7819      	ldrb	r1, [r3, #0]
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	330d      	adds	r3, #13
 800d550:	781a      	ldrb	r2, [r3, #0]
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	330d      	adds	r3, #13
 800d556:	404a      	eors	r2, r1
 800d558:	b2d2      	uxtb	r2, r2
 800d55a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	330e      	adds	r3, #14
 800d560:	7819      	ldrb	r1, [r3, #0]
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	330e      	adds	r3, #14
 800d566:	781a      	ldrb	r2, [r3, #0]
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	330e      	adds	r3, #14
 800d56c:	404a      	eors	r2, r1
 800d56e:	b2d2      	uxtb	r2, r2
 800d570:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	330f      	adds	r3, #15
 800d576:	7819      	ldrb	r1, [r3, #0]
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	330f      	adds	r3, #15
 800d57c:	781a      	ldrb	r2, [r3, #0]
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	330f      	adds	r3, #15
 800d582:	404a      	eors	r2, r1
 800d584:	b2d2      	uxtb	r2, r2
 800d586:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800d588:	bf00      	nop
 800d58a:	3714      	adds	r7, #20
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bc80      	pop	{r7}
 800d590:	4770      	bx	lr

0800d592 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800d592:	b580      	push	{r7, lr}
 800d594:	b082      	sub	sp, #8
 800d596:	af00      	add	r7, sp, #0
 800d598:	6078      	str	r0, [r7, #4]
 800d59a:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800d59c:	6839      	ldr	r1, [r7, #0]
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f7ff fe88 	bl	800d2b4 <xor_block>
}
 800d5a4:	bf00      	nop
 800d5a6:	3708      	adds	r7, #8
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800d5ac:	b480      	push	{r7}
 800d5ae:	b085      	sub	sp, #20
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	781b      	ldrb	r3, [r3, #0]
 800d5b8:	461a      	mov	r2, r3
 800d5ba:	4b48      	ldr	r3, [pc, #288]	; (800d6dc <shift_sub_rows+0x130>)
 800d5bc:	5c9a      	ldrb	r2, [r3, r2]
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	701a      	strb	r2, [r3, #0]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	3304      	adds	r3, #4
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	3304      	adds	r3, #4
 800d5ce:	4a43      	ldr	r2, [pc, #268]	; (800d6dc <shift_sub_rows+0x130>)
 800d5d0:	5c52      	ldrb	r2, [r2, r1]
 800d5d2:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	3308      	adds	r3, #8
 800d5d8:	781b      	ldrb	r3, [r3, #0]
 800d5da:	4619      	mov	r1, r3
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	3308      	adds	r3, #8
 800d5e0:	4a3e      	ldr	r2, [pc, #248]	; (800d6dc <shift_sub_rows+0x130>)
 800d5e2:	5c52      	ldrb	r2, [r2, r1]
 800d5e4:	701a      	strb	r2, [r3, #0]
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	330c      	adds	r3, #12
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	330c      	adds	r3, #12
 800d5f2:	4a3a      	ldr	r2, [pc, #232]	; (800d6dc <shift_sub_rows+0x130>)
 800d5f4:	5c52      	ldrb	r2, [r2, r1]
 800d5f6:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	785b      	ldrb	r3, [r3, #1]
 800d5fc:	73fb      	strb	r3, [r7, #15]
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	3305      	adds	r3, #5
 800d602:	781b      	ldrb	r3, [r3, #0]
 800d604:	4619      	mov	r1, r3
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	3301      	adds	r3, #1
 800d60a:	4a34      	ldr	r2, [pc, #208]	; (800d6dc <shift_sub_rows+0x130>)
 800d60c:	5c52      	ldrb	r2, [r2, r1]
 800d60e:	701a      	strb	r2, [r3, #0]
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	3309      	adds	r3, #9
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	4619      	mov	r1, r3
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	3305      	adds	r3, #5
 800d61c:	4a2f      	ldr	r2, [pc, #188]	; (800d6dc <shift_sub_rows+0x130>)
 800d61e:	5c52      	ldrb	r2, [r2, r1]
 800d620:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	330d      	adds	r3, #13
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	4619      	mov	r1, r3
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	3309      	adds	r3, #9
 800d62e:	4a2b      	ldr	r2, [pc, #172]	; (800d6dc <shift_sub_rows+0x130>)
 800d630:	5c52      	ldrb	r2, [r2, r1]
 800d632:	701a      	strb	r2, [r3, #0]
 800d634:	7bfa      	ldrb	r2, [r7, #15]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	330d      	adds	r3, #13
 800d63a:	4928      	ldr	r1, [pc, #160]	; (800d6dc <shift_sub_rows+0x130>)
 800d63c:	5c8a      	ldrb	r2, [r1, r2]
 800d63e:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	789b      	ldrb	r3, [r3, #2]
 800d644:	73fb      	strb	r3, [r7, #15]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	330a      	adds	r3, #10
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	4619      	mov	r1, r3
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	3302      	adds	r3, #2
 800d652:	4a22      	ldr	r2, [pc, #136]	; (800d6dc <shift_sub_rows+0x130>)
 800d654:	5c52      	ldrb	r2, [r2, r1]
 800d656:	701a      	strb	r2, [r3, #0]
 800d658:	7bfa      	ldrb	r2, [r7, #15]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	330a      	adds	r3, #10
 800d65e:	491f      	ldr	r1, [pc, #124]	; (800d6dc <shift_sub_rows+0x130>)
 800d660:	5c8a      	ldrb	r2, [r1, r2]
 800d662:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	799b      	ldrb	r3, [r3, #6]
 800d668:	73fb      	strb	r3, [r7, #15]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	330e      	adds	r3, #14
 800d66e:	781b      	ldrb	r3, [r3, #0]
 800d670:	4619      	mov	r1, r3
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	3306      	adds	r3, #6
 800d676:	4a19      	ldr	r2, [pc, #100]	; (800d6dc <shift_sub_rows+0x130>)
 800d678:	5c52      	ldrb	r2, [r2, r1]
 800d67a:	701a      	strb	r2, [r3, #0]
 800d67c:	7bfa      	ldrb	r2, [r7, #15]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	330e      	adds	r3, #14
 800d682:	4916      	ldr	r1, [pc, #88]	; (800d6dc <shift_sub_rows+0x130>)
 800d684:	5c8a      	ldrb	r2, [r1, r2]
 800d686:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	7bdb      	ldrb	r3, [r3, #15]
 800d68c:	73fb      	strb	r3, [r7, #15]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	330b      	adds	r3, #11
 800d692:	781b      	ldrb	r3, [r3, #0]
 800d694:	4619      	mov	r1, r3
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	330f      	adds	r3, #15
 800d69a:	4a10      	ldr	r2, [pc, #64]	; (800d6dc <shift_sub_rows+0x130>)
 800d69c:	5c52      	ldrb	r2, [r2, r1]
 800d69e:	701a      	strb	r2, [r3, #0]
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	3307      	adds	r3, #7
 800d6a4:	781b      	ldrb	r3, [r3, #0]
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	330b      	adds	r3, #11
 800d6ac:	4a0b      	ldr	r2, [pc, #44]	; (800d6dc <shift_sub_rows+0x130>)
 800d6ae:	5c52      	ldrb	r2, [r2, r1]
 800d6b0:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	3303      	adds	r3, #3
 800d6b6:	781b      	ldrb	r3, [r3, #0]
 800d6b8:	4619      	mov	r1, r3
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	3307      	adds	r3, #7
 800d6be:	4a07      	ldr	r2, [pc, #28]	; (800d6dc <shift_sub_rows+0x130>)
 800d6c0:	5c52      	ldrb	r2, [r2, r1]
 800d6c2:	701a      	strb	r2, [r3, #0]
 800d6c4:	7bfa      	ldrb	r2, [r7, #15]
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	3303      	adds	r3, #3
 800d6ca:	4904      	ldr	r1, [pc, #16]	; (800d6dc <shift_sub_rows+0x130>)
 800d6cc:	5c8a      	ldrb	r2, [r1, r2]
 800d6ce:	701a      	strb	r2, [r3, #0]
}
 800d6d0:	bf00      	nop
 800d6d2:	3714      	adds	r7, #20
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bc80      	pop	{r7}
 800d6d8:	4770      	bx	lr
 800d6da:	bf00      	nop
 800d6dc:	0801f0dc 	.word	0x0801f0dc

0800d6e0 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b086      	sub	sp, #24
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800d6e8:	f107 0308 	add.w	r3, r7, #8
 800d6ec:	6879      	ldr	r1, [r7, #4]
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7ff fd6c 	bl	800d1cc <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800d6f4:	7a3b      	ldrb	r3, [r7, #8]
 800d6f6:	461a      	mov	r2, r3
 800d6f8:	4b9a      	ldr	r3, [pc, #616]	; (800d964 <mix_sub_columns+0x284>)
 800d6fa:	5c9a      	ldrb	r2, [r3, r2]
 800d6fc:	7b7b      	ldrb	r3, [r7, #13]
 800d6fe:	4619      	mov	r1, r3
 800d700:	4b99      	ldr	r3, [pc, #612]	; (800d968 <mix_sub_columns+0x288>)
 800d702:	5c5b      	ldrb	r3, [r3, r1]
 800d704:	4053      	eors	r3, r2
 800d706:	b2da      	uxtb	r2, r3
 800d708:	7cbb      	ldrb	r3, [r7, #18]
 800d70a:	4619      	mov	r1, r3
 800d70c:	4b97      	ldr	r3, [pc, #604]	; (800d96c <mix_sub_columns+0x28c>)
 800d70e:	5c5b      	ldrb	r3, [r3, r1]
 800d710:	4053      	eors	r3, r2
 800d712:	b2da      	uxtb	r2, r3
 800d714:	7dfb      	ldrb	r3, [r7, #23]
 800d716:	4619      	mov	r1, r3
 800d718:	4b94      	ldr	r3, [pc, #592]	; (800d96c <mix_sub_columns+0x28c>)
 800d71a:	5c5b      	ldrb	r3, [r3, r1]
 800d71c:	4053      	eors	r3, r2
 800d71e:	b2da      	uxtb	r2, r3
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800d724:	7a3b      	ldrb	r3, [r7, #8]
 800d726:	461a      	mov	r2, r3
 800d728:	4b90      	ldr	r3, [pc, #576]	; (800d96c <mix_sub_columns+0x28c>)
 800d72a:	5c9a      	ldrb	r2, [r3, r2]
 800d72c:	7b7b      	ldrb	r3, [r7, #13]
 800d72e:	4619      	mov	r1, r3
 800d730:	4b8c      	ldr	r3, [pc, #560]	; (800d964 <mix_sub_columns+0x284>)
 800d732:	5c5b      	ldrb	r3, [r3, r1]
 800d734:	4053      	eors	r3, r2
 800d736:	b2da      	uxtb	r2, r3
 800d738:	7cbb      	ldrb	r3, [r7, #18]
 800d73a:	4619      	mov	r1, r3
 800d73c:	4b8a      	ldr	r3, [pc, #552]	; (800d968 <mix_sub_columns+0x288>)
 800d73e:	5c5b      	ldrb	r3, [r3, r1]
 800d740:	4053      	eors	r3, r2
 800d742:	b2d9      	uxtb	r1, r3
 800d744:	7dfb      	ldrb	r3, [r7, #23]
 800d746:	461a      	mov	r2, r3
 800d748:	4b88      	ldr	r3, [pc, #544]	; (800d96c <mix_sub_columns+0x28c>)
 800d74a:	5c9a      	ldrb	r2, [r3, r2]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	3301      	adds	r3, #1
 800d750:	404a      	eors	r2, r1
 800d752:	b2d2      	uxtb	r2, r2
 800d754:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800d756:	7a3b      	ldrb	r3, [r7, #8]
 800d758:	461a      	mov	r2, r3
 800d75a:	4b84      	ldr	r3, [pc, #528]	; (800d96c <mix_sub_columns+0x28c>)
 800d75c:	5c9a      	ldrb	r2, [r3, r2]
 800d75e:	7b7b      	ldrb	r3, [r7, #13]
 800d760:	4619      	mov	r1, r3
 800d762:	4b82      	ldr	r3, [pc, #520]	; (800d96c <mix_sub_columns+0x28c>)
 800d764:	5c5b      	ldrb	r3, [r3, r1]
 800d766:	4053      	eors	r3, r2
 800d768:	b2da      	uxtb	r2, r3
 800d76a:	7cbb      	ldrb	r3, [r7, #18]
 800d76c:	4619      	mov	r1, r3
 800d76e:	4b7d      	ldr	r3, [pc, #500]	; (800d964 <mix_sub_columns+0x284>)
 800d770:	5c5b      	ldrb	r3, [r3, r1]
 800d772:	4053      	eors	r3, r2
 800d774:	b2d9      	uxtb	r1, r3
 800d776:	7dfb      	ldrb	r3, [r7, #23]
 800d778:	461a      	mov	r2, r3
 800d77a:	4b7b      	ldr	r3, [pc, #492]	; (800d968 <mix_sub_columns+0x288>)
 800d77c:	5c9a      	ldrb	r2, [r3, r2]
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	3302      	adds	r3, #2
 800d782:	404a      	eors	r2, r1
 800d784:	b2d2      	uxtb	r2, r2
 800d786:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800d788:	7a3b      	ldrb	r3, [r7, #8]
 800d78a:	461a      	mov	r2, r3
 800d78c:	4b76      	ldr	r3, [pc, #472]	; (800d968 <mix_sub_columns+0x288>)
 800d78e:	5c9a      	ldrb	r2, [r3, r2]
 800d790:	7b7b      	ldrb	r3, [r7, #13]
 800d792:	4619      	mov	r1, r3
 800d794:	4b75      	ldr	r3, [pc, #468]	; (800d96c <mix_sub_columns+0x28c>)
 800d796:	5c5b      	ldrb	r3, [r3, r1]
 800d798:	4053      	eors	r3, r2
 800d79a:	b2da      	uxtb	r2, r3
 800d79c:	7cbb      	ldrb	r3, [r7, #18]
 800d79e:	4619      	mov	r1, r3
 800d7a0:	4b72      	ldr	r3, [pc, #456]	; (800d96c <mix_sub_columns+0x28c>)
 800d7a2:	5c5b      	ldrb	r3, [r3, r1]
 800d7a4:	4053      	eors	r3, r2
 800d7a6:	b2d9      	uxtb	r1, r3
 800d7a8:	7dfb      	ldrb	r3, [r7, #23]
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	4b6d      	ldr	r3, [pc, #436]	; (800d964 <mix_sub_columns+0x284>)
 800d7ae:	5c9a      	ldrb	r2, [r3, r2]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	3303      	adds	r3, #3
 800d7b4:	404a      	eors	r2, r1
 800d7b6:	b2d2      	uxtb	r2, r2
 800d7b8:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800d7ba:	7b3b      	ldrb	r3, [r7, #12]
 800d7bc:	461a      	mov	r2, r3
 800d7be:	4b69      	ldr	r3, [pc, #420]	; (800d964 <mix_sub_columns+0x284>)
 800d7c0:	5c9a      	ldrb	r2, [r3, r2]
 800d7c2:	7c7b      	ldrb	r3, [r7, #17]
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	4b68      	ldr	r3, [pc, #416]	; (800d968 <mix_sub_columns+0x288>)
 800d7c8:	5c5b      	ldrb	r3, [r3, r1]
 800d7ca:	4053      	eors	r3, r2
 800d7cc:	b2da      	uxtb	r2, r3
 800d7ce:	7dbb      	ldrb	r3, [r7, #22]
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	4b66      	ldr	r3, [pc, #408]	; (800d96c <mix_sub_columns+0x28c>)
 800d7d4:	5c5b      	ldrb	r3, [r3, r1]
 800d7d6:	4053      	eors	r3, r2
 800d7d8:	b2d9      	uxtb	r1, r3
 800d7da:	7afb      	ldrb	r3, [r7, #11]
 800d7dc:	461a      	mov	r2, r3
 800d7de:	4b63      	ldr	r3, [pc, #396]	; (800d96c <mix_sub_columns+0x28c>)
 800d7e0:	5c9a      	ldrb	r2, [r3, r2]
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	3304      	adds	r3, #4
 800d7e6:	404a      	eors	r2, r1
 800d7e8:	b2d2      	uxtb	r2, r2
 800d7ea:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800d7ec:	7b3b      	ldrb	r3, [r7, #12]
 800d7ee:	461a      	mov	r2, r3
 800d7f0:	4b5e      	ldr	r3, [pc, #376]	; (800d96c <mix_sub_columns+0x28c>)
 800d7f2:	5c9a      	ldrb	r2, [r3, r2]
 800d7f4:	7c7b      	ldrb	r3, [r7, #17]
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	4b5a      	ldr	r3, [pc, #360]	; (800d964 <mix_sub_columns+0x284>)
 800d7fa:	5c5b      	ldrb	r3, [r3, r1]
 800d7fc:	4053      	eors	r3, r2
 800d7fe:	b2da      	uxtb	r2, r3
 800d800:	7dbb      	ldrb	r3, [r7, #22]
 800d802:	4619      	mov	r1, r3
 800d804:	4b58      	ldr	r3, [pc, #352]	; (800d968 <mix_sub_columns+0x288>)
 800d806:	5c5b      	ldrb	r3, [r3, r1]
 800d808:	4053      	eors	r3, r2
 800d80a:	b2d9      	uxtb	r1, r3
 800d80c:	7afb      	ldrb	r3, [r7, #11]
 800d80e:	461a      	mov	r2, r3
 800d810:	4b56      	ldr	r3, [pc, #344]	; (800d96c <mix_sub_columns+0x28c>)
 800d812:	5c9a      	ldrb	r2, [r3, r2]
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	3305      	adds	r3, #5
 800d818:	404a      	eors	r2, r1
 800d81a:	b2d2      	uxtb	r2, r2
 800d81c:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800d81e:	7b3b      	ldrb	r3, [r7, #12]
 800d820:	461a      	mov	r2, r3
 800d822:	4b52      	ldr	r3, [pc, #328]	; (800d96c <mix_sub_columns+0x28c>)
 800d824:	5c9a      	ldrb	r2, [r3, r2]
 800d826:	7c7b      	ldrb	r3, [r7, #17]
 800d828:	4619      	mov	r1, r3
 800d82a:	4b50      	ldr	r3, [pc, #320]	; (800d96c <mix_sub_columns+0x28c>)
 800d82c:	5c5b      	ldrb	r3, [r3, r1]
 800d82e:	4053      	eors	r3, r2
 800d830:	b2da      	uxtb	r2, r3
 800d832:	7dbb      	ldrb	r3, [r7, #22]
 800d834:	4619      	mov	r1, r3
 800d836:	4b4b      	ldr	r3, [pc, #300]	; (800d964 <mix_sub_columns+0x284>)
 800d838:	5c5b      	ldrb	r3, [r3, r1]
 800d83a:	4053      	eors	r3, r2
 800d83c:	b2d9      	uxtb	r1, r3
 800d83e:	7afb      	ldrb	r3, [r7, #11]
 800d840:	461a      	mov	r2, r3
 800d842:	4b49      	ldr	r3, [pc, #292]	; (800d968 <mix_sub_columns+0x288>)
 800d844:	5c9a      	ldrb	r2, [r3, r2]
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	3306      	adds	r3, #6
 800d84a:	404a      	eors	r2, r1
 800d84c:	b2d2      	uxtb	r2, r2
 800d84e:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800d850:	7b3b      	ldrb	r3, [r7, #12]
 800d852:	461a      	mov	r2, r3
 800d854:	4b44      	ldr	r3, [pc, #272]	; (800d968 <mix_sub_columns+0x288>)
 800d856:	5c9a      	ldrb	r2, [r3, r2]
 800d858:	7c7b      	ldrb	r3, [r7, #17]
 800d85a:	4619      	mov	r1, r3
 800d85c:	4b43      	ldr	r3, [pc, #268]	; (800d96c <mix_sub_columns+0x28c>)
 800d85e:	5c5b      	ldrb	r3, [r3, r1]
 800d860:	4053      	eors	r3, r2
 800d862:	b2da      	uxtb	r2, r3
 800d864:	7dbb      	ldrb	r3, [r7, #22]
 800d866:	4619      	mov	r1, r3
 800d868:	4b40      	ldr	r3, [pc, #256]	; (800d96c <mix_sub_columns+0x28c>)
 800d86a:	5c5b      	ldrb	r3, [r3, r1]
 800d86c:	4053      	eors	r3, r2
 800d86e:	b2d9      	uxtb	r1, r3
 800d870:	7afb      	ldrb	r3, [r7, #11]
 800d872:	461a      	mov	r2, r3
 800d874:	4b3b      	ldr	r3, [pc, #236]	; (800d964 <mix_sub_columns+0x284>)
 800d876:	5c9a      	ldrb	r2, [r3, r2]
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	3307      	adds	r3, #7
 800d87c:	404a      	eors	r2, r1
 800d87e:	b2d2      	uxtb	r2, r2
 800d880:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800d882:	7c3b      	ldrb	r3, [r7, #16]
 800d884:	461a      	mov	r2, r3
 800d886:	4b37      	ldr	r3, [pc, #220]	; (800d964 <mix_sub_columns+0x284>)
 800d888:	5c9a      	ldrb	r2, [r3, r2]
 800d88a:	7d7b      	ldrb	r3, [r7, #21]
 800d88c:	4619      	mov	r1, r3
 800d88e:	4b36      	ldr	r3, [pc, #216]	; (800d968 <mix_sub_columns+0x288>)
 800d890:	5c5b      	ldrb	r3, [r3, r1]
 800d892:	4053      	eors	r3, r2
 800d894:	b2da      	uxtb	r2, r3
 800d896:	7abb      	ldrb	r3, [r7, #10]
 800d898:	4619      	mov	r1, r3
 800d89a:	4b34      	ldr	r3, [pc, #208]	; (800d96c <mix_sub_columns+0x28c>)
 800d89c:	5c5b      	ldrb	r3, [r3, r1]
 800d89e:	4053      	eors	r3, r2
 800d8a0:	b2d9      	uxtb	r1, r3
 800d8a2:	7bfb      	ldrb	r3, [r7, #15]
 800d8a4:	461a      	mov	r2, r3
 800d8a6:	4b31      	ldr	r3, [pc, #196]	; (800d96c <mix_sub_columns+0x28c>)
 800d8a8:	5c9a      	ldrb	r2, [r3, r2]
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	3308      	adds	r3, #8
 800d8ae:	404a      	eors	r2, r1
 800d8b0:	b2d2      	uxtb	r2, r2
 800d8b2:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800d8b4:	7c3b      	ldrb	r3, [r7, #16]
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	4b2c      	ldr	r3, [pc, #176]	; (800d96c <mix_sub_columns+0x28c>)
 800d8ba:	5c9a      	ldrb	r2, [r3, r2]
 800d8bc:	7d7b      	ldrb	r3, [r7, #21]
 800d8be:	4619      	mov	r1, r3
 800d8c0:	4b28      	ldr	r3, [pc, #160]	; (800d964 <mix_sub_columns+0x284>)
 800d8c2:	5c5b      	ldrb	r3, [r3, r1]
 800d8c4:	4053      	eors	r3, r2
 800d8c6:	b2da      	uxtb	r2, r3
 800d8c8:	7abb      	ldrb	r3, [r7, #10]
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	4b26      	ldr	r3, [pc, #152]	; (800d968 <mix_sub_columns+0x288>)
 800d8ce:	5c5b      	ldrb	r3, [r3, r1]
 800d8d0:	4053      	eors	r3, r2
 800d8d2:	b2d9      	uxtb	r1, r3
 800d8d4:	7bfb      	ldrb	r3, [r7, #15]
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	4b24      	ldr	r3, [pc, #144]	; (800d96c <mix_sub_columns+0x28c>)
 800d8da:	5c9a      	ldrb	r2, [r3, r2]
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	3309      	adds	r3, #9
 800d8e0:	404a      	eors	r2, r1
 800d8e2:	b2d2      	uxtb	r2, r2
 800d8e4:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800d8e6:	7c3b      	ldrb	r3, [r7, #16]
 800d8e8:	461a      	mov	r2, r3
 800d8ea:	4b20      	ldr	r3, [pc, #128]	; (800d96c <mix_sub_columns+0x28c>)
 800d8ec:	5c9a      	ldrb	r2, [r3, r2]
 800d8ee:	7d7b      	ldrb	r3, [r7, #21]
 800d8f0:	4619      	mov	r1, r3
 800d8f2:	4b1e      	ldr	r3, [pc, #120]	; (800d96c <mix_sub_columns+0x28c>)
 800d8f4:	5c5b      	ldrb	r3, [r3, r1]
 800d8f6:	4053      	eors	r3, r2
 800d8f8:	b2da      	uxtb	r2, r3
 800d8fa:	7abb      	ldrb	r3, [r7, #10]
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	4b19      	ldr	r3, [pc, #100]	; (800d964 <mix_sub_columns+0x284>)
 800d900:	5c5b      	ldrb	r3, [r3, r1]
 800d902:	4053      	eors	r3, r2
 800d904:	b2d9      	uxtb	r1, r3
 800d906:	7bfb      	ldrb	r3, [r7, #15]
 800d908:	461a      	mov	r2, r3
 800d90a:	4b17      	ldr	r3, [pc, #92]	; (800d968 <mix_sub_columns+0x288>)
 800d90c:	5c9a      	ldrb	r2, [r3, r2]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	330a      	adds	r3, #10
 800d912:	404a      	eors	r2, r1
 800d914:	b2d2      	uxtb	r2, r2
 800d916:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800d918:	7c3b      	ldrb	r3, [r7, #16]
 800d91a:	461a      	mov	r2, r3
 800d91c:	4b12      	ldr	r3, [pc, #72]	; (800d968 <mix_sub_columns+0x288>)
 800d91e:	5c9a      	ldrb	r2, [r3, r2]
 800d920:	7d7b      	ldrb	r3, [r7, #21]
 800d922:	4619      	mov	r1, r3
 800d924:	4b11      	ldr	r3, [pc, #68]	; (800d96c <mix_sub_columns+0x28c>)
 800d926:	5c5b      	ldrb	r3, [r3, r1]
 800d928:	4053      	eors	r3, r2
 800d92a:	b2da      	uxtb	r2, r3
 800d92c:	7abb      	ldrb	r3, [r7, #10]
 800d92e:	4619      	mov	r1, r3
 800d930:	4b0e      	ldr	r3, [pc, #56]	; (800d96c <mix_sub_columns+0x28c>)
 800d932:	5c5b      	ldrb	r3, [r3, r1]
 800d934:	4053      	eors	r3, r2
 800d936:	b2d9      	uxtb	r1, r3
 800d938:	7bfb      	ldrb	r3, [r7, #15]
 800d93a:	461a      	mov	r2, r3
 800d93c:	4b09      	ldr	r3, [pc, #36]	; (800d964 <mix_sub_columns+0x284>)
 800d93e:	5c9a      	ldrb	r2, [r3, r2]
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	330b      	adds	r3, #11
 800d944:	404a      	eors	r2, r1
 800d946:	b2d2      	uxtb	r2, r2
 800d948:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800d94a:	7d3b      	ldrb	r3, [r7, #20]
 800d94c:	461a      	mov	r2, r3
 800d94e:	4b05      	ldr	r3, [pc, #20]	; (800d964 <mix_sub_columns+0x284>)
 800d950:	5c9a      	ldrb	r2, [r3, r2]
 800d952:	7a7b      	ldrb	r3, [r7, #9]
 800d954:	4619      	mov	r1, r3
 800d956:	4b04      	ldr	r3, [pc, #16]	; (800d968 <mix_sub_columns+0x288>)
 800d958:	5c5b      	ldrb	r3, [r3, r1]
 800d95a:	4053      	eors	r3, r2
 800d95c:	b2da      	uxtb	r2, r3
 800d95e:	7bbb      	ldrb	r3, [r7, #14]
 800d960:	4619      	mov	r1, r3
 800d962:	e005      	b.n	800d970 <mix_sub_columns+0x290>
 800d964:	0801f1dc 	.word	0x0801f1dc
 800d968:	0801f2dc 	.word	0x0801f2dc
 800d96c:	0801f0dc 	.word	0x0801f0dc
 800d970:	4b2d      	ldr	r3, [pc, #180]	; (800da28 <mix_sub_columns+0x348>)
 800d972:	5c5b      	ldrb	r3, [r3, r1]
 800d974:	4053      	eors	r3, r2
 800d976:	b2d9      	uxtb	r1, r3
 800d978:	7cfb      	ldrb	r3, [r7, #19]
 800d97a:	461a      	mov	r2, r3
 800d97c:	4b2a      	ldr	r3, [pc, #168]	; (800da28 <mix_sub_columns+0x348>)
 800d97e:	5c9a      	ldrb	r2, [r3, r2]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	330c      	adds	r3, #12
 800d984:	404a      	eors	r2, r1
 800d986:	b2d2      	uxtb	r2, r2
 800d988:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800d98a:	7d3b      	ldrb	r3, [r7, #20]
 800d98c:	461a      	mov	r2, r3
 800d98e:	4b26      	ldr	r3, [pc, #152]	; (800da28 <mix_sub_columns+0x348>)
 800d990:	5c9a      	ldrb	r2, [r3, r2]
 800d992:	7a7b      	ldrb	r3, [r7, #9]
 800d994:	4619      	mov	r1, r3
 800d996:	4b25      	ldr	r3, [pc, #148]	; (800da2c <mix_sub_columns+0x34c>)
 800d998:	5c5b      	ldrb	r3, [r3, r1]
 800d99a:	4053      	eors	r3, r2
 800d99c:	b2da      	uxtb	r2, r3
 800d99e:	7bbb      	ldrb	r3, [r7, #14]
 800d9a0:	4619      	mov	r1, r3
 800d9a2:	4b23      	ldr	r3, [pc, #140]	; (800da30 <mix_sub_columns+0x350>)
 800d9a4:	5c5b      	ldrb	r3, [r3, r1]
 800d9a6:	4053      	eors	r3, r2
 800d9a8:	b2d9      	uxtb	r1, r3
 800d9aa:	7cfb      	ldrb	r3, [r7, #19]
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	4b1e      	ldr	r3, [pc, #120]	; (800da28 <mix_sub_columns+0x348>)
 800d9b0:	5c9a      	ldrb	r2, [r3, r2]
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	330d      	adds	r3, #13
 800d9b6:	404a      	eors	r2, r1
 800d9b8:	b2d2      	uxtb	r2, r2
 800d9ba:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800d9bc:	7d3b      	ldrb	r3, [r7, #20]
 800d9be:	461a      	mov	r2, r3
 800d9c0:	4b19      	ldr	r3, [pc, #100]	; (800da28 <mix_sub_columns+0x348>)
 800d9c2:	5c9a      	ldrb	r2, [r3, r2]
 800d9c4:	7a7b      	ldrb	r3, [r7, #9]
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	4b17      	ldr	r3, [pc, #92]	; (800da28 <mix_sub_columns+0x348>)
 800d9ca:	5c5b      	ldrb	r3, [r3, r1]
 800d9cc:	4053      	eors	r3, r2
 800d9ce:	b2da      	uxtb	r2, r3
 800d9d0:	7bbb      	ldrb	r3, [r7, #14]
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	4b15      	ldr	r3, [pc, #84]	; (800da2c <mix_sub_columns+0x34c>)
 800d9d6:	5c5b      	ldrb	r3, [r3, r1]
 800d9d8:	4053      	eors	r3, r2
 800d9da:	b2d9      	uxtb	r1, r3
 800d9dc:	7cfb      	ldrb	r3, [r7, #19]
 800d9de:	461a      	mov	r2, r3
 800d9e0:	4b13      	ldr	r3, [pc, #76]	; (800da30 <mix_sub_columns+0x350>)
 800d9e2:	5c9a      	ldrb	r2, [r3, r2]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	330e      	adds	r3, #14
 800d9e8:	404a      	eors	r2, r1
 800d9ea:	b2d2      	uxtb	r2, r2
 800d9ec:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800d9ee:	7d3b      	ldrb	r3, [r7, #20]
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	4b0f      	ldr	r3, [pc, #60]	; (800da30 <mix_sub_columns+0x350>)
 800d9f4:	5c9a      	ldrb	r2, [r3, r2]
 800d9f6:	7a7b      	ldrb	r3, [r7, #9]
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	4b0b      	ldr	r3, [pc, #44]	; (800da28 <mix_sub_columns+0x348>)
 800d9fc:	5c5b      	ldrb	r3, [r3, r1]
 800d9fe:	4053      	eors	r3, r2
 800da00:	b2da      	uxtb	r2, r3
 800da02:	7bbb      	ldrb	r3, [r7, #14]
 800da04:	4619      	mov	r1, r3
 800da06:	4b08      	ldr	r3, [pc, #32]	; (800da28 <mix_sub_columns+0x348>)
 800da08:	5c5b      	ldrb	r3, [r3, r1]
 800da0a:	4053      	eors	r3, r2
 800da0c:	b2d9      	uxtb	r1, r3
 800da0e:	7cfb      	ldrb	r3, [r7, #19]
 800da10:	461a      	mov	r2, r3
 800da12:	4b06      	ldr	r3, [pc, #24]	; (800da2c <mix_sub_columns+0x34c>)
 800da14:	5c9a      	ldrb	r2, [r3, r2]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	330f      	adds	r3, #15
 800da1a:	404a      	eors	r2, r1
 800da1c:	b2d2      	uxtb	r2, r2
 800da1e:	701a      	strb	r2, [r3, #0]
  }
 800da20:	bf00      	nop
 800da22:	3718      	adds	r7, #24
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}
 800da28:	0801f0dc 	.word	0x0801f0dc
 800da2c:	0801f1dc 	.word	0x0801f1dc
 800da30:	0801f2dc 	.word	0x0801f2dc

0800da34 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b086      	sub	sp, #24
 800da38:	af00      	add	r7, sp, #0
 800da3a:	60f8      	str	r0, [r7, #12]
 800da3c:	460b      	mov	r3, r1
 800da3e:	607a      	str	r2, [r7, #4]
 800da40:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800da42:	7afb      	ldrb	r3, [r7, #11]
 800da44:	3b10      	subs	r3, #16
 800da46:	2b10      	cmp	r3, #16
 800da48:	bf8c      	ite	hi
 800da4a:	2201      	movhi	r2, #1
 800da4c:	2200      	movls	r2, #0
 800da4e:	b2d2      	uxtb	r2, r2
 800da50:	2a00      	cmp	r2, #0
 800da52:	d10b      	bne.n	800da6c <lorawan_aes_set_key+0x38>
 800da54:	4a64      	ldr	r2, [pc, #400]	; (800dbe8 <lorawan_aes_set_key+0x1b4>)
 800da56:	fa22 f303 	lsr.w	r3, r2, r3
 800da5a:	f003 0301 	and.w	r3, r3, #1
 800da5e:	2b00      	cmp	r3, #0
 800da60:	bf14      	ite	ne
 800da62:	2301      	movne	r3, #1
 800da64:	2300      	moveq	r3, #0
 800da66:	b2db      	uxtb	r3, r3
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d105      	bne.n	800da78 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2200      	movs	r2, #0
 800da70:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800da74:	23ff      	movs	r3, #255	; 0xff
 800da76:	e0b2      	b.n	800dbde <lorawan_aes_set_key+0x1aa>
        break;
 800da78:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	7afa      	ldrb	r2, [r7, #11]
 800da7e:	68f9      	ldr	r1, [r7, #12]
 800da80:	4618      	mov	r0, r3
 800da82:	f7ff fbfc 	bl	800d27e <copy_block_nn>
    hi = (keylen + 28) << 2;
 800da86:	7afb      	ldrb	r3, [r7, #11]
 800da88:	331c      	adds	r3, #28
 800da8a:	b2db      	uxtb	r3, r3
 800da8c:	009b      	lsls	r3, r3, #2
 800da8e:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800da90:	7c7b      	ldrb	r3, [r7, #17]
 800da92:	091b      	lsrs	r3, r3, #4
 800da94:	b2db      	uxtb	r3, r3
 800da96:	3b01      	subs	r3, #1
 800da98:	b2da      	uxtb	r2, r3
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800daa0:	7afb      	ldrb	r3, [r7, #11]
 800daa2:	75fb      	strb	r3, [r7, #23]
 800daa4:	2301      	movs	r3, #1
 800daa6:	75bb      	strb	r3, [r7, #22]
 800daa8:	e093      	b.n	800dbd2 <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800daaa:	7dfb      	ldrb	r3, [r7, #23]
 800daac:	3b04      	subs	r3, #4
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	5cd3      	ldrb	r3, [r2, r3]
 800dab2:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800dab4:	7dfb      	ldrb	r3, [r7, #23]
 800dab6:	3b03      	subs	r3, #3
 800dab8:	687a      	ldr	r2, [r7, #4]
 800daba:	5cd3      	ldrb	r3, [r2, r3]
 800dabc:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800dabe:	7dfb      	ldrb	r3, [r7, #23]
 800dac0:	3b02      	subs	r3, #2
 800dac2:	687a      	ldr	r2, [r7, #4]
 800dac4:	5cd3      	ldrb	r3, [r2, r3]
 800dac6:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800dac8:	7dfb      	ldrb	r3, [r7, #23]
 800daca:	3b01      	subs	r3, #1
 800dacc:	687a      	ldr	r2, [r7, #4]
 800dace:	5cd3      	ldrb	r3, [r2, r3]
 800dad0:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800dad2:	7dfb      	ldrb	r3, [r7, #23]
 800dad4:	7afa      	ldrb	r2, [r7, #11]
 800dad6:	fbb3 f1f2 	udiv	r1, r3, r2
 800dada:	fb01 f202 	mul.w	r2, r1, r2
 800dade:	1a9b      	subs	r3, r3, r2
 800dae0:	b2db      	uxtb	r3, r3
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d127      	bne.n	800db36 <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800dae6:	7d7b      	ldrb	r3, [r7, #21]
 800dae8:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800daea:	7d3b      	ldrb	r3, [r7, #20]
 800daec:	4a3f      	ldr	r2, [pc, #252]	; (800dbec <lorawan_aes_set_key+0x1b8>)
 800daee:	5cd2      	ldrb	r2, [r2, r3]
 800daf0:	7dbb      	ldrb	r3, [r7, #22]
 800daf2:	4053      	eors	r3, r2
 800daf4:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800daf6:	7cfb      	ldrb	r3, [r7, #19]
 800daf8:	4a3c      	ldr	r2, [pc, #240]	; (800dbec <lorawan_aes_set_key+0x1b8>)
 800dafa:	5cd3      	ldrb	r3, [r2, r3]
 800dafc:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800dafe:	7cbb      	ldrb	r3, [r7, #18]
 800db00:	4a3a      	ldr	r2, [pc, #232]	; (800dbec <lorawan_aes_set_key+0x1b8>)
 800db02:	5cd3      	ldrb	r3, [r2, r3]
 800db04:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800db06:	7c3b      	ldrb	r3, [r7, #16]
 800db08:	4a38      	ldr	r2, [pc, #224]	; (800dbec <lorawan_aes_set_key+0x1b8>)
 800db0a:	5cd3      	ldrb	r3, [r2, r3]
 800db0c:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800db0e:	7dbb      	ldrb	r3, [r7, #22]
 800db10:	005b      	lsls	r3, r3, #1
 800db12:	b25a      	sxtb	r2, r3
 800db14:	7dbb      	ldrb	r3, [r7, #22]
 800db16:	09db      	lsrs	r3, r3, #7
 800db18:	b2db      	uxtb	r3, r3
 800db1a:	4619      	mov	r1, r3
 800db1c:	0049      	lsls	r1, r1, #1
 800db1e:	440b      	add	r3, r1
 800db20:	4619      	mov	r1, r3
 800db22:	00c8      	lsls	r0, r1, #3
 800db24:	4619      	mov	r1, r3
 800db26:	4603      	mov	r3, r0
 800db28:	440b      	add	r3, r1
 800db2a:	b2db      	uxtb	r3, r3
 800db2c:	b25b      	sxtb	r3, r3
 800db2e:	4053      	eors	r3, r2
 800db30:	b25b      	sxtb	r3, r3
 800db32:	75bb      	strb	r3, [r7, #22]
 800db34:	e01c      	b.n	800db70 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800db36:	7afb      	ldrb	r3, [r7, #11]
 800db38:	2b18      	cmp	r3, #24
 800db3a:	d919      	bls.n	800db70 <lorawan_aes_set_key+0x13c>
 800db3c:	7dfb      	ldrb	r3, [r7, #23]
 800db3e:	7afa      	ldrb	r2, [r7, #11]
 800db40:	fbb3 f1f2 	udiv	r1, r3, r2
 800db44:	fb01 f202 	mul.w	r2, r1, r2
 800db48:	1a9b      	subs	r3, r3, r2
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	2b10      	cmp	r3, #16
 800db4e:	d10f      	bne.n	800db70 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800db50:	7d7b      	ldrb	r3, [r7, #21]
 800db52:	4a26      	ldr	r2, [pc, #152]	; (800dbec <lorawan_aes_set_key+0x1b8>)
 800db54:	5cd3      	ldrb	r3, [r2, r3]
 800db56:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800db58:	7d3b      	ldrb	r3, [r7, #20]
 800db5a:	4a24      	ldr	r2, [pc, #144]	; (800dbec <lorawan_aes_set_key+0x1b8>)
 800db5c:	5cd3      	ldrb	r3, [r2, r3]
 800db5e:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800db60:	7cfb      	ldrb	r3, [r7, #19]
 800db62:	4a22      	ldr	r2, [pc, #136]	; (800dbec <lorawan_aes_set_key+0x1b8>)
 800db64:	5cd3      	ldrb	r3, [r2, r3]
 800db66:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800db68:	7cbb      	ldrb	r3, [r7, #18]
 800db6a:	4a20      	ldr	r2, [pc, #128]	; (800dbec <lorawan_aes_set_key+0x1b8>)
 800db6c:	5cd3      	ldrb	r3, [r2, r3]
 800db6e:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800db70:	7dfa      	ldrb	r2, [r7, #23]
 800db72:	7afb      	ldrb	r3, [r7, #11]
 800db74:	1ad3      	subs	r3, r2, r3
 800db76:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800db78:	7c3b      	ldrb	r3, [r7, #16]
 800db7a:	687a      	ldr	r2, [r7, #4]
 800db7c:	5cd1      	ldrb	r1, [r2, r3]
 800db7e:	7dfb      	ldrb	r3, [r7, #23]
 800db80:	7d7a      	ldrb	r2, [r7, #21]
 800db82:	404a      	eors	r2, r1
 800db84:	b2d1      	uxtb	r1, r2
 800db86:	687a      	ldr	r2, [r7, #4]
 800db88:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800db8a:	7c3b      	ldrb	r3, [r7, #16]
 800db8c:	3301      	adds	r3, #1
 800db8e:	687a      	ldr	r2, [r7, #4]
 800db90:	5cd1      	ldrb	r1, [r2, r3]
 800db92:	7dfb      	ldrb	r3, [r7, #23]
 800db94:	3301      	adds	r3, #1
 800db96:	7d3a      	ldrb	r2, [r7, #20]
 800db98:	404a      	eors	r2, r1
 800db9a:	b2d1      	uxtb	r1, r2
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800dba0:	7c3b      	ldrb	r3, [r7, #16]
 800dba2:	3302      	adds	r3, #2
 800dba4:	687a      	ldr	r2, [r7, #4]
 800dba6:	5cd1      	ldrb	r1, [r2, r3]
 800dba8:	7dfb      	ldrb	r3, [r7, #23]
 800dbaa:	3302      	adds	r3, #2
 800dbac:	7cfa      	ldrb	r2, [r7, #19]
 800dbae:	404a      	eors	r2, r1
 800dbb0:	b2d1      	uxtb	r1, r2
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800dbb6:	7c3b      	ldrb	r3, [r7, #16]
 800dbb8:	3303      	adds	r3, #3
 800dbba:	687a      	ldr	r2, [r7, #4]
 800dbbc:	5cd1      	ldrb	r1, [r2, r3]
 800dbbe:	7dfb      	ldrb	r3, [r7, #23]
 800dbc0:	3303      	adds	r3, #3
 800dbc2:	7cba      	ldrb	r2, [r7, #18]
 800dbc4:	404a      	eors	r2, r1
 800dbc6:	b2d1      	uxtb	r1, r2
 800dbc8:	687a      	ldr	r2, [r7, #4]
 800dbca:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800dbcc:	7dfb      	ldrb	r3, [r7, #23]
 800dbce:	3304      	adds	r3, #4
 800dbd0:	75fb      	strb	r3, [r7, #23]
 800dbd2:	7dfa      	ldrb	r2, [r7, #23]
 800dbd4:	7c7b      	ldrb	r3, [r7, #17]
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	f4ff af67 	bcc.w	800daaa <lorawan_aes_set_key+0x76>
    }
    return 0;
 800dbdc:	2300      	movs	r3, #0
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3718      	adds	r7, #24
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}
 800dbe6:	bf00      	nop
 800dbe8:	00010101 	.word	0x00010101
 800dbec:	0801f0dc 	.word	0x0801f0dc

0800dbf0 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b08a      	sub	sp, #40	; 0x28
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	60f8      	str	r0, [r7, #12]
 800dbf8:	60b9      	str	r1, [r7, #8]
 800dbfa:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d038      	beq.n	800dc78 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800dc06:	687a      	ldr	r2, [r7, #4]
 800dc08:	f107 0314 	add.w	r3, r7, #20
 800dc0c:	68f9      	ldr	r1, [r7, #12]
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f7ff fc07 	bl	800d422 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800dc14:	2301      	movs	r3, #1
 800dc16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dc1a:	e014      	b.n	800dc46 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800dc1c:	f107 0314 	add.w	r3, r7, #20
 800dc20:	4618      	mov	r0, r3
 800dc22:	f7ff fd5d 	bl	800d6e0 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dc2c:	0112      	lsls	r2, r2, #4
 800dc2e:	441a      	add	r2, r3
 800dc30:	f107 0314 	add.w	r3, r7, #20
 800dc34:	4611      	mov	r1, r2
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7ff fcab 	bl	800d592 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800dc3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc40:	3301      	adds	r3, #1
 800dc42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800dc4c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dc50:	429a      	cmp	r2, r3
 800dc52:	d3e3      	bcc.n	800dc1c <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800dc54:	f107 0314 	add.w	r3, r7, #20
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f7ff fca7 	bl	800d5ac <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dc64:	0112      	lsls	r2, r2, #4
 800dc66:	441a      	add	r2, r3
 800dc68:	f107 0314 	add.w	r3, r7, #20
 800dc6c:	4619      	mov	r1, r3
 800dc6e:	68b8      	ldr	r0, [r7, #8]
 800dc70:	f7ff fbd7 	bl	800d422 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800dc74:	2300      	movs	r3, #0
 800dc76:	e000      	b.n	800dc7a <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800dc78:	23ff      	movs	r3, #255	; 0xff
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3728      	adds	r7, #40	; 0x28
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
	...

0800dc84 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800dc84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc86:	b0a1      	sub	sp, #132	; 0x84
 800dc88:	af12      	add	r7, sp, #72	; 0x48
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800dc90:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800dc94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc98:	4611      	mov	r1, r2
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f000 fa12 	bl	800e0c4 <SecureElementGetKeyByID>
 800dca0:	4603      	mov	r3, r0
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d174      	bne.n	800dd90 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dca6:	2300      	movs	r3, #0
 800dca8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dcac:	e06c      	b.n	800dd88 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800dcae:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800dcb2:	4939      	ldr	r1, [pc, #228]	; (800dd98 <PrintKey+0x114>)
 800dcb4:	4613      	mov	r3, r2
 800dcb6:	005b      	lsls	r3, r3, #1
 800dcb8:	4413      	add	r3, r2
 800dcba:	009b      	lsls	r3, r3, #2
 800dcbc:	440b      	add	r3, r1
 800dcbe:	781b      	ldrb	r3, [r3, #0]
 800dcc0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800dcc4:	429a      	cmp	r2, r3
 800dcc6:	d15a      	bne.n	800dd7e <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800dcc8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800dccc:	4932      	ldr	r1, [pc, #200]	; (800dd98 <PrintKey+0x114>)
 800dcce:	4613      	mov	r3, r2
 800dcd0:	005b      	lsls	r3, r3, #1
 800dcd2:	4413      	add	r3, r2
 800dcd4:	009b      	lsls	r3, r3, #2
 800dcd6:	440b      	add	r3, r1
 800dcd8:	3308      	adds	r3, #8
 800dcda:	6819      	ldr	r1, [r3, #0]
 800dcdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcde:	785b      	ldrb	r3, [r3, #1]
 800dce0:	461d      	mov	r5, r3
 800dce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce4:	789b      	ldrb	r3, [r3, #2]
 800dce6:	461e      	mov	r6, r3
 800dce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcea:	78db      	ldrb	r3, [r3, #3]
 800dcec:	62bb      	str	r3, [r7, #40]	; 0x28
 800dcee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf0:	791b      	ldrb	r3, [r3, #4]
 800dcf2:	627b      	str	r3, [r7, #36]	; 0x24
 800dcf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf6:	795b      	ldrb	r3, [r3, #5]
 800dcf8:	623b      	str	r3, [r7, #32]
 800dcfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfc:	799b      	ldrb	r3, [r3, #6]
 800dcfe:	61fb      	str	r3, [r7, #28]
 800dd00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd02:	79db      	ldrb	r3, [r3, #7]
 800dd04:	61bb      	str	r3, [r7, #24]
 800dd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd08:	7a1b      	ldrb	r3, [r3, #8]
 800dd0a:	617b      	str	r3, [r7, #20]
 800dd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd0e:	7a5b      	ldrb	r3, [r3, #9]
 800dd10:	613b      	str	r3, [r7, #16]
 800dd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd14:	7a9b      	ldrb	r3, [r3, #10]
 800dd16:	60fb      	str	r3, [r7, #12]
 800dd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd1a:	7adb      	ldrb	r3, [r3, #11]
 800dd1c:	60bb      	str	r3, [r7, #8]
 800dd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd20:	7b1b      	ldrb	r3, [r3, #12]
 800dd22:	607b      	str	r3, [r7, #4]
 800dd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd26:	7b5b      	ldrb	r3, [r3, #13]
 800dd28:	461c      	mov	r4, r3
 800dd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd2c:	7b9b      	ldrb	r3, [r3, #14]
 800dd2e:	4618      	mov	r0, r3
 800dd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd32:	7bdb      	ldrb	r3, [r3, #15]
 800dd34:	461a      	mov	r2, r3
 800dd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd38:	7c1b      	ldrb	r3, [r3, #16]
 800dd3a:	9310      	str	r3, [sp, #64]	; 0x40
 800dd3c:	920f      	str	r2, [sp, #60]	; 0x3c
 800dd3e:	900e      	str	r0, [sp, #56]	; 0x38
 800dd40:	940d      	str	r4, [sp, #52]	; 0x34
 800dd42:	687a      	ldr	r2, [r7, #4]
 800dd44:	920c      	str	r2, [sp, #48]	; 0x30
 800dd46:	68ba      	ldr	r2, [r7, #8]
 800dd48:	920b      	str	r2, [sp, #44]	; 0x2c
 800dd4a:	68fa      	ldr	r2, [r7, #12]
 800dd4c:	920a      	str	r2, [sp, #40]	; 0x28
 800dd4e:	693a      	ldr	r2, [r7, #16]
 800dd50:	9209      	str	r2, [sp, #36]	; 0x24
 800dd52:	697a      	ldr	r2, [r7, #20]
 800dd54:	9208      	str	r2, [sp, #32]
 800dd56:	69ba      	ldr	r2, [r7, #24]
 800dd58:	9207      	str	r2, [sp, #28]
 800dd5a:	69fa      	ldr	r2, [r7, #28]
 800dd5c:	9206      	str	r2, [sp, #24]
 800dd5e:	6a3a      	ldr	r2, [r7, #32]
 800dd60:	9205      	str	r2, [sp, #20]
 800dd62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd64:	9204      	str	r2, [sp, #16]
 800dd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd68:	9303      	str	r3, [sp, #12]
 800dd6a:	9602      	str	r6, [sp, #8]
 800dd6c:	9501      	str	r5, [sp, #4]
 800dd6e:	9100      	str	r1, [sp, #0]
 800dd70:	4b0a      	ldr	r3, [pc, #40]	; (800dd9c <PrintKey+0x118>)
 800dd72:	2200      	movs	r2, #0
 800dd74:	2100      	movs	r1, #0
 800dd76:	2002      	movs	r0, #2
 800dd78:	f010 f924 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
 800dd7c:	e008      	b.n	800dd90 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dd7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dd82:	3301      	adds	r3, #1
 800dd84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800dd88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dd8c:	2b0a      	cmp	r3, #10
 800dd8e:	d98e      	bls.n	800dcae <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800dd90:	373c      	adds	r7, #60	; 0x3c
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd96:	bf00      	nop
 800dd98:	0801f3dc 	.word	0x0801f3dc
 800dd9c:	0801ec6c 	.word	0x0801ec6c

0800dda0 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800dda0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dda2:	b091      	sub	sp, #68	; 0x44
 800dda4:	af08      	add	r7, sp, #32
 800dda6:	4603      	mov	r3, r0
 800dda8:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800ddae:	f107 0310 	add.w	r3, r7, #16
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f000 fbda 	bl	800e56c <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800ddb8:	7c3b      	ldrb	r3, [r7, #16]
 800ddba:	7c7a      	ldrb	r2, [r7, #17]
 800ddbc:	7cb9      	ldrb	r1, [r7, #18]
 800ddbe:	7cf8      	ldrb	r0, [r7, #19]
 800ddc0:	7d3c      	ldrb	r4, [r7, #20]
 800ddc2:	7d7d      	ldrb	r5, [r7, #21]
 800ddc4:	7dbe      	ldrb	r6, [r7, #22]
 800ddc6:	f897 c017 	ldrb.w	ip, [r7, #23]
 800ddca:	f8cd c01c 	str.w	ip, [sp, #28]
 800ddce:	9606      	str	r6, [sp, #24]
 800ddd0:	9505      	str	r5, [sp, #20]
 800ddd2:	9404      	str	r4, [sp, #16]
 800ddd4:	9003      	str	r0, [sp, #12]
 800ddd6:	9102      	str	r1, [sp, #8]
 800ddd8:	9201      	str	r2, [sp, #4]
 800ddda:	9300      	str	r3, [sp, #0]
 800dddc:	4b24      	ldr	r3, [pc, #144]	; (800de70 <PrintIds+0xd0>)
 800ddde:	2200      	movs	r2, #0
 800dde0:	2100      	movs	r1, #0
 800dde2:	2002      	movs	r0, #2
 800dde4:	f010 f8ee 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800dde8:	f107 0318 	add.w	r3, r7, #24
 800ddec:	4618      	mov	r0, r3
 800ddee:	f000 fbed 	bl	800e5cc <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800ddf2:	7e3b      	ldrb	r3, [r7, #24]
 800ddf4:	7e7a      	ldrb	r2, [r7, #25]
 800ddf6:	7eb9      	ldrb	r1, [r7, #26]
 800ddf8:	7ef8      	ldrb	r0, [r7, #27]
 800ddfa:	7f3c      	ldrb	r4, [r7, #28]
 800ddfc:	7f7d      	ldrb	r5, [r7, #29]
 800ddfe:	7fbe      	ldrb	r6, [r7, #30]
 800de00:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800de04:	f8cd c01c 	str.w	ip, [sp, #28]
 800de08:	9606      	str	r6, [sp, #24]
 800de0a:	9505      	str	r5, [sp, #20]
 800de0c:	9404      	str	r4, [sp, #16]
 800de0e:	9003      	str	r0, [sp, #12]
 800de10:	9102      	str	r1, [sp, #8]
 800de12:	9201      	str	r2, [sp, #4]
 800de14:	9300      	str	r3, [sp, #0]
 800de16:	4b17      	ldr	r3, [pc, #92]	; (800de74 <PrintIds+0xd4>)
 800de18:	2200      	movs	r2, #0
 800de1a:	2100      	movs	r1, #0
 800de1c:	2002      	movs	r0, #2
 800de1e:	f010 f8d1 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800de22:	f107 020c 	add.w	r2, r7, #12
 800de26:	79fb      	ldrb	r3, [r7, #7]
 800de28:	4611      	mov	r1, r2
 800de2a:	4618      	mov	r0, r3
 800de2c:	f000 fc00 	bl	800e630 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800de30:	f107 030c 	add.w	r3, r7, #12
 800de34:	3303      	adds	r3, #3
 800de36:	781b      	ldrb	r3, [r3, #0]
 800de38:	461a      	mov	r2, r3
 800de3a:	f107 030c 	add.w	r3, r7, #12
 800de3e:	3302      	adds	r3, #2
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	4619      	mov	r1, r3
 800de44:	f107 030c 	add.w	r3, r7, #12
 800de48:	3301      	adds	r3, #1
 800de4a:	781b      	ldrb	r3, [r3, #0]
 800de4c:	4618      	mov	r0, r3
 800de4e:	f107 030c 	add.w	r3, r7, #12
 800de52:	781b      	ldrb	r3, [r3, #0]
 800de54:	9303      	str	r3, [sp, #12]
 800de56:	9002      	str	r0, [sp, #8]
 800de58:	9101      	str	r1, [sp, #4]
 800de5a:	9200      	str	r2, [sp, #0]
 800de5c:	4b06      	ldr	r3, [pc, #24]	; (800de78 <PrintIds+0xd8>)
 800de5e:	2200      	movs	r2, #0
 800de60:	2100      	movs	r1, #0
 800de62:	2002      	movs	r0, #2
 800de64:	f010 f8ae 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800de68:	bf00      	nop
 800de6a:	3724      	adds	r7, #36	; 0x24
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de70:	0801ecc8 	.word	0x0801ecc8
 800de74:	0801ed08 	.word	0x0801ed08
 800de78:	0801ed48 	.word	0x0801ed48

0800de7c <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800de7c:	b480      	push	{r7}
 800de7e:	b085      	sub	sp, #20
 800de80:	af00      	add	r7, sp, #0
 800de82:	4603      	mov	r3, r0
 800de84:	6039      	str	r1, [r7, #0]
 800de86:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800de88:	2300      	movs	r3, #0
 800de8a:	73fb      	strb	r3, [r7, #15]
 800de8c:	e01a      	b.n	800dec4 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800de8e:	4b12      	ldr	r3, [pc, #72]	; (800ded8 <GetKeyByID+0x5c>)
 800de90:	6819      	ldr	r1, [r3, #0]
 800de92:	7bfa      	ldrb	r2, [r7, #15]
 800de94:	4613      	mov	r3, r2
 800de96:	011b      	lsls	r3, r3, #4
 800de98:	4413      	add	r3, r2
 800de9a:	440b      	add	r3, r1
 800de9c:	3318      	adds	r3, #24
 800de9e:	781b      	ldrb	r3, [r3, #0]
 800dea0:	79fa      	ldrb	r2, [r7, #7]
 800dea2:	429a      	cmp	r2, r3
 800dea4:	d10b      	bne.n	800debe <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800dea6:	4b0c      	ldr	r3, [pc, #48]	; (800ded8 <GetKeyByID+0x5c>)
 800dea8:	6819      	ldr	r1, [r3, #0]
 800deaa:	7bfa      	ldrb	r2, [r7, #15]
 800deac:	4613      	mov	r3, r2
 800deae:	011b      	lsls	r3, r3, #4
 800deb0:	4413      	add	r3, r2
 800deb2:	3318      	adds	r3, #24
 800deb4:	18ca      	adds	r2, r1, r3
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800deba:	2300      	movs	r3, #0
 800debc:	e006      	b.n	800decc <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800debe:	7bfb      	ldrb	r3, [r7, #15]
 800dec0:	3301      	adds	r3, #1
 800dec2:	73fb      	strb	r3, [r7, #15]
 800dec4:	7bfb      	ldrb	r3, [r7, #15]
 800dec6:	2b0a      	cmp	r3, #10
 800dec8:	d9e1      	bls.n	800de8e <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800deca:	2303      	movs	r3, #3
}
 800decc:	4618      	mov	r0, r3
 800dece:	3714      	adds	r7, #20
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bc80      	pop	{r7}
 800ded4:	4770      	bx	lr
 800ded6:	bf00      	nop
 800ded8:	20000678 	.word	0x20000678

0800dedc <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800dedc:	b590      	push	{r4, r7, lr}
 800dede:	b0d1      	sub	sp, #324	; 0x144
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800dee6:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800deea:	6020      	str	r0, [r4, #0]
 800deec:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800def0:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800def4:	6001      	str	r1, [r0, #0]
 800def6:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800defa:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800defe:	600a      	str	r2, [r1, #0]
 800df00:	461a      	mov	r2, r3
 800df02:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800df06:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800df0a:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800df0c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800df10:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d003      	beq.n	800df22 <ComputeCmac+0x46>
 800df1a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d101      	bne.n	800df26 <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800df22:	2302      	movs	r3, #2
 800df24:	e05d      	b.n	800dfe2 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800df26:	f107 0314 	add.w	r3, r7, #20
 800df2a:	4618      	mov	r0, r3
 800df2c:	f7fe ff02 	bl	800cd34 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800df30:	f107 0210 	add.w	r2, r7, #16
 800df34:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800df38:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800df3c:	781b      	ldrb	r3, [r3, #0]
 800df3e:	4611      	mov	r1, r2
 800df40:	4618      	mov	r0, r3
 800df42:	f7ff ff9b 	bl	800de7c <GetKeyByID>
 800df46:	4603      	mov	r3, r0
 800df48:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800df4c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800df50:	2b00      	cmp	r3, #0
 800df52:	d144      	bne.n	800dfde <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800df54:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800df58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	1c5a      	adds	r2, r3, #1
 800df60:	f107 0314 	add.w	r3, r7, #20
 800df64:	4611      	mov	r1, r2
 800df66:	4618      	mov	r0, r3
 800df68:	f7fe fefd 	bl	800cd66 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800df6c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800df70:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d009      	beq.n	800df8e <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800df7a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800df7e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800df82:	f107 0014 	add.w	r0, r7, #20
 800df86:	2210      	movs	r2, #16
 800df88:	6819      	ldr	r1, [r3, #0]
 800df8a:	f7fe fefb 	bl	800cd84 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800df8e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800df92:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800df96:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800df9a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800df9e:	f107 0014 	add.w	r0, r7, #20
 800dfa2:	6812      	ldr	r2, [r2, #0]
 800dfa4:	6819      	ldr	r1, [r3, #0]
 800dfa6:	f7fe feed 	bl	800cd84 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800dfaa:	f107 0214 	add.w	r2, r7, #20
 800dfae:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800dfb2:	4611      	mov	r1, r2
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f7fe ffa7 	bl	800cf08 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800dfba:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800dfbe:	461a      	mov	r2, r3
 800dfc0:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800dfc4:	021b      	lsls	r3, r3, #8
 800dfc6:	431a      	orrs	r2, r3
 800dfc8:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800dfcc:	041b      	lsls	r3, r3, #16
 800dfce:	431a      	orrs	r2, r3
 800dfd0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800dfd4:	061b      	lsls	r3, r3, #24
 800dfd6:	431a      	orrs	r2, r3
 800dfd8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800dfdc:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800dfde:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd90      	pop	{r4, r7, pc}

0800dfec <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b082      	sub	sp, #8
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d101      	bne.n	800dffe <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800dffa:	2302      	movs	r3, #2
 800dffc:	e00a      	b.n	800e014 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800dffe:	4a07      	ldr	r2, [pc, #28]	; (800e01c <SecureElementInit+0x30>)
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800e004:	4b05      	ldr	r3, [pc, #20]	; (800e01c <SecureElementInit+0x30>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	22d8      	movs	r2, #216	; 0xd8
 800e00a:	4905      	ldr	r1, [pc, #20]	; (800e020 <SecureElementInit+0x34>)
 800e00c:	4618      	mov	r0, r3
 800e00e:	f00b fc34 	bl	801987a <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800e012:	2300      	movs	r3, #0
}
 800e014:	4618      	mov	r0, r3
 800e016:	3708      	adds	r7, #8
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}
 800e01c:	20000678 	.word	0x20000678
 800e020:	0801f644 	.word	0x0801f644

0800e024 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b086      	sub	sp, #24
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800e02e:	2300      	movs	r3, #0
 800e030:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800e032:	f107 030c 	add.w	r3, r7, #12
 800e036:	4618      	mov	r0, r3
 800e038:	f000 fa98 	bl	800e56c <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800e03c:	f107 0308 	add.w	r3, r7, #8
 800e040:	4619      	mov	r1, r3
 800e042:	2001      	movs	r0, #1
 800e044:	f000 faf4 	bl	800e630 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d024      	beq.n	800e098 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800e04e:	2300      	movs	r3, #0
 800e050:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800e052:	2300      	movs	r3, #0
 800e054:	75bb      	strb	r3, [r7, #22]
 800e056:	e00c      	b.n	800e072 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800e058:	7dbb      	ldrb	r3, [r7, #22]
 800e05a:	3318      	adds	r3, #24
 800e05c:	443b      	add	r3, r7
 800e05e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d002      	beq.n	800e06c <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800e066:	2301      	movs	r3, #1
 800e068:	75fb      	strb	r3, [r7, #23]
                break;
 800e06a:	e005      	b.n	800e078 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800e06c:	7dbb      	ldrb	r3, [r7, #22]
 800e06e:	3301      	adds	r3, #1
 800e070:	75bb      	strb	r3, [r7, #22]
 800e072:	7dbb      	ldrb	r3, [r7, #22]
 800e074:	2b07      	cmp	r3, #7
 800e076:	d9ef      	bls.n	800e058 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800e078:	7dfb      	ldrb	r3, [r7, #23]
 800e07a:	f083 0301 	eor.w	r3, r3, #1
 800e07e:	b2db      	uxtb	r3, r3
 800e080:	2b00      	cmp	r3, #0
 800e082:	d009      	beq.n	800e098 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800e084:	f107 020c 	add.w	r2, r7, #12
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	4610      	mov	r0, r2
 800e08c:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800e08e:	f107 030c 	add.w	r3, r7, #12
 800e092:	4618      	mov	r0, r3
 800e094:	f000 fa52 	bl	800e53c <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d00c      	beq.n	800e0b8 <SecureElementInitMcuID+0x94>
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d109      	bne.n	800e0b8 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800e0a4:	f107 0208 	add.w	r2, r7, #8
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	4610      	mov	r0, r2
 800e0ac:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	2001      	movs	r0, #1
 800e0b4:	f000 faa2 	bl	800e5fc <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800e0b8:	2300      	movs	r3, #0
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3718      	adds	r7, #24
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
	...

0800e0c4 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800e0c4:	b480      	push	{r7}
 800e0c6:	b085      	sub	sp, #20
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	6039      	str	r1, [r7, #0]
 800e0ce:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	73fb      	strb	r3, [r7, #15]
 800e0d4:	e01a      	b.n	800e10c <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800e0d6:	4b12      	ldr	r3, [pc, #72]	; (800e120 <SecureElementGetKeyByID+0x5c>)
 800e0d8:	6819      	ldr	r1, [r3, #0]
 800e0da:	7bfa      	ldrb	r2, [r7, #15]
 800e0dc:	4613      	mov	r3, r2
 800e0de:	011b      	lsls	r3, r3, #4
 800e0e0:	4413      	add	r3, r2
 800e0e2:	440b      	add	r3, r1
 800e0e4:	3318      	adds	r3, #24
 800e0e6:	781b      	ldrb	r3, [r3, #0]
 800e0e8:	79fa      	ldrb	r2, [r7, #7]
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d10b      	bne.n	800e106 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800e0ee:	4b0c      	ldr	r3, [pc, #48]	; (800e120 <SecureElementGetKeyByID+0x5c>)
 800e0f0:	6819      	ldr	r1, [r3, #0]
 800e0f2:	7bfa      	ldrb	r2, [r7, #15]
 800e0f4:	4613      	mov	r3, r2
 800e0f6:	011b      	lsls	r3, r3, #4
 800e0f8:	4413      	add	r3, r2
 800e0fa:	3318      	adds	r3, #24
 800e0fc:	18ca      	adds	r2, r1, r3
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800e102:	2300      	movs	r3, #0
 800e104:	e006      	b.n	800e114 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e106:	7bfb      	ldrb	r3, [r7, #15]
 800e108:	3301      	adds	r3, #1
 800e10a:	73fb      	strb	r3, [r7, #15]
 800e10c:	7bfb      	ldrb	r3, [r7, #15]
 800e10e:	2b0a      	cmp	r3, #10
 800e110:	d9e1      	bls.n	800e0d6 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e112:	2303      	movs	r3, #3
}
 800e114:	4618      	mov	r0, r3
 800e116:	3714      	adds	r7, #20
 800e118:	46bd      	mov	sp, r7
 800e11a:	bc80      	pop	{r7}
 800e11c:	4770      	bx	lr
 800e11e:	bf00      	nop
 800e120:	20000678 	.word	0x20000678

0800e124 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800e124:	b580      	push	{r7, lr}
 800e126:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800e128:	2000      	movs	r0, #0
 800e12a:	f7ff fdab 	bl	800dc84 <PrintKey>
    PrintKey( NWK_KEY );
 800e12e:	2001      	movs	r0, #1
 800e130:	f7ff fda8 	bl	800dc84 <PrintKey>
    PrintKey( APP_S_KEY );
 800e134:	2009      	movs	r0, #9
 800e136:	f7ff fda5 	bl	800dc84 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800e13a:	2008      	movs	r0, #8
 800e13c:	f7ff fda2 	bl	800dc84 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800e140:	2000      	movs	r0, #0
 800e142:	f7ff fe2d 	bl	800dda0 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800e146:	2300      	movs	r3, #0
}
 800e148:	4618      	mov	r0, r3
 800e14a:	bd80      	pop	{r7, pc}

0800e14c <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b082      	sub	sp, #8
 800e150:	af00      	add	r7, sp, #0
 800e152:	4603      	mov	r3, r0
 800e154:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800e156:	200b      	movs	r0, #11
 800e158:	f7ff fd94 	bl	800dc84 <PrintKey>
    PrintKey( MC_KE_KEY );
 800e15c:	200c      	movs	r0, #12
 800e15e:	f7ff fd91 	bl	800dc84 <PrintKey>
    PrintKey( APP_S_KEY );
 800e162:	2009      	movs	r0, #9
 800e164:	f7ff fd8e 	bl	800dc84 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800e168:	2008      	movs	r0, #8
 800e16a:	f7ff fd8b 	bl	800dc84 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800e16e:	200a      	movs	r0, #10
 800e170:	f7ff fd88 	bl	800dc84 <PrintKey>
    PrintIds( mode );
 800e174:	79fb      	ldrb	r3, [r7, #7]
 800e176:	4618      	mov	r0, r3
 800e178:	f7ff fe12 	bl	800dda0 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800e17c:	2300      	movs	r3, #0
}
 800e17e:	4618      	mov	r0, r3
 800e180:	3708      	adds	r7, #8
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}
	...

0800e188 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b088      	sub	sp, #32
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	4603      	mov	r3, r0
 800e190:	6039      	str	r1, [r7, #0]
 800e192:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d101      	bne.n	800e19e <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e19a:	2302      	movs	r3, #2
 800e19c:	e04c      	b.n	800e238 <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e19e:	2300      	movs	r3, #0
 800e1a0:	77fb      	strb	r3, [r7, #31]
 800e1a2:	e045      	b.n	800e230 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800e1a4:	4b26      	ldr	r3, [pc, #152]	; (800e240 <SecureElementSetKey+0xb8>)
 800e1a6:	6819      	ldr	r1, [r3, #0]
 800e1a8:	7ffa      	ldrb	r2, [r7, #31]
 800e1aa:	4613      	mov	r3, r2
 800e1ac:	011b      	lsls	r3, r3, #4
 800e1ae:	4413      	add	r3, r2
 800e1b0:	440b      	add	r3, r1
 800e1b2:	3318      	adds	r3, #24
 800e1b4:	781b      	ldrb	r3, [r3, #0]
 800e1b6:	79fa      	ldrb	r2, [r7, #7]
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	d136      	bne.n	800e22a <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800e1bc:	79fb      	ldrb	r3, [r7, #7]
 800e1be:	2b0d      	cmp	r3, #13
 800e1c0:	d123      	bne.n	800e20a <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800e1c2:	2306      	movs	r3, #6
 800e1c4:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	60fb      	str	r3, [r7, #12]
 800e1ca:	f107 0310 	add.w	r3, r7, #16
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	601a      	str	r2, [r3, #0]
 800e1d2:	605a      	str	r2, [r3, #4]
 800e1d4:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800e1d6:	f107 030c 	add.w	r3, r7, #12
 800e1da:	220c      	movs	r2, #12
 800e1dc:	2110      	movs	r1, #16
 800e1de:	6838      	ldr	r0, [r7, #0]
 800e1e0:	f000 f876 	bl	800e2d0 <SecureElementAesEncrypt>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800e1e8:	4b15      	ldr	r3, [pc, #84]	; (800e240 <SecureElementSetKey+0xb8>)
 800e1ea:	6819      	ldr	r1, [r3, #0]
 800e1ec:	7ffa      	ldrb	r2, [r7, #31]
 800e1ee:	4613      	mov	r3, r2
 800e1f0:	011b      	lsls	r3, r3, #4
 800e1f2:	4413      	add	r3, r2
 800e1f4:	3318      	adds	r3, #24
 800e1f6:	440b      	add	r3, r1
 800e1f8:	3301      	adds	r3, #1
 800e1fa:	f107 010c 	add.w	r1, r7, #12
 800e1fe:	2210      	movs	r2, #16
 800e200:	4618      	mov	r0, r3
 800e202:	f00b fb3a 	bl	801987a <memcpy1>
                return retval;
 800e206:	7fbb      	ldrb	r3, [r7, #30]
 800e208:	e016      	b.n	800e238 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800e20a:	4b0d      	ldr	r3, [pc, #52]	; (800e240 <SecureElementSetKey+0xb8>)
 800e20c:	6819      	ldr	r1, [r3, #0]
 800e20e:	7ffa      	ldrb	r2, [r7, #31]
 800e210:	4613      	mov	r3, r2
 800e212:	011b      	lsls	r3, r3, #4
 800e214:	4413      	add	r3, r2
 800e216:	3318      	adds	r3, #24
 800e218:	440b      	add	r3, r1
 800e21a:	3301      	adds	r3, #1
 800e21c:	2210      	movs	r2, #16
 800e21e:	6839      	ldr	r1, [r7, #0]
 800e220:	4618      	mov	r0, r3
 800e222:	f00b fb2a 	bl	801987a <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800e226:	2300      	movs	r3, #0
 800e228:	e006      	b.n	800e238 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e22a:	7ffb      	ldrb	r3, [r7, #31]
 800e22c:	3301      	adds	r3, #1
 800e22e:	77fb      	strb	r3, [r7, #31]
 800e230:	7ffb      	ldrb	r3, [r7, #31]
 800e232:	2b0a      	cmp	r3, #10
 800e234:	d9b6      	bls.n	800e1a4 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e236:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3720      	adds	r7, #32
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}
 800e240:	20000678 	.word	0x20000678

0800e244 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b086      	sub	sp, #24
 800e248:	af02      	add	r7, sp, #8
 800e24a:	60f8      	str	r0, [r7, #12]
 800e24c:	60b9      	str	r1, [r7, #8]
 800e24e:	607a      	str	r2, [r7, #4]
 800e250:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800e252:	78fb      	ldrb	r3, [r7, #3]
 800e254:	2b0b      	cmp	r3, #11
 800e256:	d901      	bls.n	800e25c <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e258:	2303      	movs	r3, #3
 800e25a:	e009      	b.n	800e270 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800e25c:	78fa      	ldrb	r2, [r7, #3]
 800e25e:	69bb      	ldr	r3, [r7, #24]
 800e260:	9300      	str	r3, [sp, #0]
 800e262:	4613      	mov	r3, r2
 800e264:	687a      	ldr	r2, [r7, #4]
 800e266:	68b9      	ldr	r1, [r7, #8]
 800e268:	68f8      	ldr	r0, [r7, #12]
 800e26a:	f7ff fe37 	bl	800dedc <ComputeCmac>
 800e26e:	4603      	mov	r3, r0
}
 800e270:	4618      	mov	r0, r3
 800e272:	3710      	adds	r7, #16
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}

0800e278 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b088      	sub	sp, #32
 800e27c:	af02      	add	r7, sp, #8
 800e27e:	60f8      	str	r0, [r7, #12]
 800e280:	60b9      	str	r1, [r7, #8]
 800e282:	607a      	str	r2, [r7, #4]
 800e284:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d101      	bne.n	800e290 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e28c:	2302      	movs	r3, #2
 800e28e:	e01b      	b.n	800e2c8 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800e290:	2306      	movs	r3, #6
 800e292:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800e294:	2300      	movs	r3, #0
 800e296:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800e298:	78fa      	ldrb	r2, [r7, #3]
 800e29a:	f107 0310 	add.w	r3, r7, #16
 800e29e:	9300      	str	r3, [sp, #0]
 800e2a0:	4613      	mov	r3, r2
 800e2a2:	68ba      	ldr	r2, [r7, #8]
 800e2a4:	68f9      	ldr	r1, [r7, #12]
 800e2a6:	2000      	movs	r0, #0
 800e2a8:	f7ff fe18 	bl	800dedc <ComputeCmac>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e2b0:	7dfb      	ldrb	r3, [r7, #23]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d001      	beq.n	800e2ba <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800e2b6:	7dfb      	ldrb	r3, [r7, #23]
 800e2b8:	e006      	b.n	800e2c8 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	687a      	ldr	r2, [r7, #4]
 800e2be:	429a      	cmp	r2, r3
 800e2c0:	d001      	beq.n	800e2c6 <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800e2c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3718      	adds	r7, #24
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}

0800e2d0 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b0c2      	sub	sp, #264	; 0x108
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	60f8      	str	r0, [r7, #12]
 800e2d8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e2dc:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800e2e0:	6001      	str	r1, [r0, #0]
 800e2e2:	4611      	mov	r1, r2
 800e2e4:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800e2e8:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800e2ec:	6013      	str	r3, [r2, #0]
 800e2ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2f2:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800e2f6:	460a      	mov	r2, r1
 800e2f8:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d006      	beq.n	800e30e <SecureElementAesEncrypt+0x3e>
 800e300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e304:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d101      	bne.n	800e312 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e30e:	2302      	movs	r3, #2
 800e310:	e059      	b.n	800e3c6 <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800e312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e316:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	f003 030f 	and.w	r3, r3, #15
 800e320:	2b00      	cmp	r3, #0
 800e322:	d001      	beq.n	800e328 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800e324:	2305      	movs	r3, #5
 800e326:	e04e      	b.n	800e3c6 <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800e328:	f107 0314 	add.w	r3, r7, #20
 800e32c:	22f0      	movs	r2, #240	; 0xf0
 800e32e:	2100      	movs	r1, #0
 800e330:	4618      	mov	r0, r3
 800e332:	f00b fadd 	bl	80198f0 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800e336:	f107 0210 	add.w	r2, r7, #16
 800e33a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e33e:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800e342:	781b      	ldrb	r3, [r3, #0]
 800e344:	4611      	mov	r1, r2
 800e346:	4618      	mov	r0, r3
 800e348:	f7ff fd98 	bl	800de7c <GetKeyByID>
 800e34c:	4603      	mov	r3, r0
 800e34e:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800e352:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800e356:	2b00      	cmp	r3, #0
 800e358:	d133      	bne.n	800e3c2 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	3301      	adds	r3, #1
 800e35e:	f107 0214 	add.w	r2, r7, #20
 800e362:	2110      	movs	r1, #16
 800e364:	4618      	mov	r0, r3
 800e366:	f7ff fb65 	bl	800da34 <lorawan_aes_set_key>

        uint8_t block = 0;
 800e36a:	2300      	movs	r3, #0
 800e36c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800e370:	e020      	b.n	800e3b4 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800e372:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800e376:	68fa      	ldr	r2, [r7, #12]
 800e378:	18d0      	adds	r0, r2, r3
 800e37a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800e37e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800e382:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800e386:	6812      	ldr	r2, [r2, #0]
 800e388:	4413      	add	r3, r2
 800e38a:	f107 0214 	add.w	r2, r7, #20
 800e38e:	4619      	mov	r1, r3
 800e390:	f7ff fc2e 	bl	800dbf0 <lorawan_aes_encrypt>
            block = block + 16;
 800e394:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800e398:	3310      	adds	r3, #16
 800e39a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800e39e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3a2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e3a6:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800e3aa:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800e3ae:	6812      	ldr	r2, [r2, #0]
 800e3b0:	3a10      	subs	r2, #16
 800e3b2:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800e3b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3b8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d1d7      	bne.n	800e372 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800e3c2:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}

0800e3d0 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b088      	sub	sp, #32
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
 800e3d8:	460b      	mov	r3, r1
 800e3da:	70fb      	strb	r3, [r7, #3]
 800e3dc:	4613      	mov	r3, r2
 800e3de:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d101      	bne.n	800e3ea <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e3e6:	2302      	movs	r3, #2
 800e3e8:	e02e      	b.n	800e448 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800e3ea:	2306      	movs	r3, #6
 800e3ec:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800e3ee:	78bb      	ldrb	r3, [r7, #2]
 800e3f0:	2b0c      	cmp	r3, #12
 800e3f2:	d104      	bne.n	800e3fe <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800e3f4:	78fb      	ldrb	r3, [r7, #3]
 800e3f6:	2b0b      	cmp	r3, #11
 800e3f8:	d001      	beq.n	800e3fe <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e3fa:	2303      	movs	r3, #3
 800e3fc:	e024      	b.n	800e448 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800e3fe:	2300      	movs	r3, #0
 800e400:	60fb      	str	r3, [r7, #12]
 800e402:	f107 0310 	add.w	r3, r7, #16
 800e406:	2200      	movs	r2, #0
 800e408:	601a      	str	r2, [r3, #0]
 800e40a:	605a      	str	r2, [r3, #4]
 800e40c:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800e40e:	f107 030c 	add.w	r3, r7, #12
 800e412:	78fa      	ldrb	r2, [r7, #3]
 800e414:	2110      	movs	r1, #16
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f7ff ff5a 	bl	800e2d0 <SecureElementAesEncrypt>
 800e41c:	4603      	mov	r3, r0
 800e41e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e420:	7ffb      	ldrb	r3, [r7, #31]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d001      	beq.n	800e42a <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800e426:	7ffb      	ldrb	r3, [r7, #31]
 800e428:	e00e      	b.n	800e448 <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800e42a:	f107 020c 	add.w	r2, r7, #12
 800e42e:	78bb      	ldrb	r3, [r7, #2]
 800e430:	4611      	mov	r1, r2
 800e432:	4618      	mov	r0, r3
 800e434:	f7ff fea8 	bl	800e188 <SecureElementSetKey>
 800e438:	4603      	mov	r3, r0
 800e43a:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e43c:	7ffb      	ldrb	r3, [r7, #31]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d001      	beq.n	800e446 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800e442:	7ffb      	ldrb	r3, [r7, #31]
 800e444:	e000      	b.n	800e448 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800e446:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3720      	adds	r7, #32
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}

0800e450 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b086      	sub	sp, #24
 800e454:	af00      	add	r7, sp, #0
 800e456:	60b9      	str	r1, [r7, #8]
 800e458:	607b      	str	r3, [r7, #4]
 800e45a:	4603      	mov	r3, r0
 800e45c:	73fb      	strb	r3, [r7, #15]
 800e45e:	4613      	mov	r3, r2
 800e460:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d005      	beq.n	800e474 <SecureElementProcessJoinAccept+0x24>
 800e468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d002      	beq.n	800e474 <SecureElementProcessJoinAccept+0x24>
 800e46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e470:	2b00      	cmp	r3, #0
 800e472:	d101      	bne.n	800e478 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e474:	2302      	movs	r3, #2
 800e476:	e05c      	b.n	800e532 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800e478:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e47c:	2b21      	cmp	r3, #33	; 0x21
 800e47e:	d901      	bls.n	800e484 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800e480:	2305      	movs	r3, #5
 800e482:	e056      	b.n	800e532 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800e484:	2301      	movs	r3, #1
 800e486:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800e488:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e48c:	b29b      	uxth	r3, r3
 800e48e:	461a      	mov	r2, r3
 800e490:	6879      	ldr	r1, [r7, #4]
 800e492:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e494:	f00b f9f1 	bl	801987a <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	1c58      	adds	r0, r3, #1
 800e49c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e4a0:	3b01      	subs	r3, #1
 800e4a2:	4619      	mov	r1, r3
 800e4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4a6:	3301      	adds	r3, #1
 800e4a8:	7dfa      	ldrb	r2, [r7, #23]
 800e4aa:	f7ff ff11 	bl	800e2d0 <SecureElementAesEncrypt>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d001      	beq.n	800e4b8 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800e4b4:	2307      	movs	r3, #7
 800e4b6:	e03c      	b.n	800e532 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800e4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ba:	330b      	adds	r3, #11
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	09db      	lsrs	r3, r3, #7
 800e4c0:	b2da      	uxtb	r2, r3
 800e4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c4:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800e4c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e4ca:	3b04      	subs	r3, #4
 800e4cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4ce:	4413      	add	r3, r2
 800e4d0:	781b      	ldrb	r3, [r3, #0]
 800e4d2:	4619      	mov	r1, r3
 800e4d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e4d8:	3b03      	subs	r3, #3
 800e4da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4dc:	4413      	add	r3, r2
 800e4de:	781b      	ldrb	r3, [r3, #0]
 800e4e0:	021b      	lsls	r3, r3, #8
 800e4e2:	ea41 0203 	orr.w	r2, r1, r3
 800e4e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e4ea:	3b02      	subs	r3, #2
 800e4ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e4ee:	440b      	add	r3, r1
 800e4f0:	781b      	ldrb	r3, [r3, #0]
 800e4f2:	041b      	lsls	r3, r3, #16
 800e4f4:	431a      	orrs	r2, r3
 800e4f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e4fa:	3b01      	subs	r3, #1
 800e4fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e4fe:	440b      	add	r3, r1
 800e500:	781b      	ldrb	r3, [r3, #0]
 800e502:	061b      	lsls	r3, r3, #24
 800e504:	4313      	orrs	r3, r2
 800e506:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800e508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e50a:	781b      	ldrb	r3, [r3, #0]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d10d      	bne.n	800e52c <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800e510:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e514:	3b04      	subs	r3, #4
 800e516:	4619      	mov	r1, r3
 800e518:	2301      	movs	r3, #1
 800e51a:	693a      	ldr	r2, [r7, #16]
 800e51c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e51e:	f7ff feab 	bl	800e278 <SecureElementVerifyAesCmac>
 800e522:	4603      	mov	r3, r0
 800e524:	2b00      	cmp	r3, #0
 800e526:	d003      	beq.n	800e530 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800e528:	2301      	movs	r3, #1
 800e52a:	e002      	b.n	800e532 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800e52c:	2304      	movs	r3, #4
 800e52e:	e000      	b.n	800e532 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800e530:	2300      	movs	r3, #0
}
 800e532:	4618      	mov	r0, r3
 800e534:	3718      	adds	r7, #24
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
	...

0800e53c <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b082      	sub	sp, #8
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d101      	bne.n	800e54e <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e54a:	2302      	movs	r3, #2
 800e54c:	e007      	b.n	800e55e <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800e54e:	4b06      	ldr	r3, [pc, #24]	; (800e568 <SecureElementSetDevEui+0x2c>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	2208      	movs	r2, #8
 800e554:	6879      	ldr	r1, [r7, #4]
 800e556:	4618      	mov	r0, r3
 800e558:	f00b f98f 	bl	801987a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e55c:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800e55e:	4618      	mov	r0, r3
 800e560:	3708      	adds	r7, #8
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
 800e566:	bf00      	nop
 800e568:	20000678 	.word	0x20000678

0800e56c <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b082      	sub	sp, #8
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d101      	bne.n	800e57e <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e57a:	2302      	movs	r3, #2
 800e57c:	e007      	b.n	800e58e <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800e57e:	4b06      	ldr	r3, [pc, #24]	; (800e598 <SecureElementGetDevEui+0x2c>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	2208      	movs	r2, #8
 800e584:	4619      	mov	r1, r3
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f00b f977 	bl	801987a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e58c:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3708      	adds	r7, #8
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
 800e596:	bf00      	nop
 800e598:	20000678 	.word	0x20000678

0800e59c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b082      	sub	sp, #8
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d101      	bne.n	800e5ae <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e5aa:	2302      	movs	r3, #2
 800e5ac:	e008      	b.n	800e5c0 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800e5ae:	4b06      	ldr	r3, [pc, #24]	; (800e5c8 <SecureElementSetJoinEui+0x2c>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	3308      	adds	r3, #8
 800e5b4:	2208      	movs	r2, #8
 800e5b6:	6879      	ldr	r1, [r7, #4]
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f00b f95e 	bl	801987a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e5be:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3708      	adds	r7, #8
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}
 800e5c8:	20000678 	.word	0x20000678

0800e5cc <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b082      	sub	sp, #8
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d101      	bne.n	800e5de <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e5da:	2302      	movs	r3, #2
 800e5dc:	e008      	b.n	800e5f0 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800e5de:	4b06      	ldr	r3, [pc, #24]	; (800e5f8 <SecureElementGetJoinEui+0x2c>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	3308      	adds	r3, #8
 800e5e4:	2208      	movs	r2, #8
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f00b f946 	bl	801987a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e5ee:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	3708      	adds	r7, #8
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}
 800e5f8:	20000678 	.word	0x20000678

0800e5fc <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800e5fc:	b480      	push	{r7}
 800e5fe:	b083      	sub	sp, #12
 800e600:	af00      	add	r7, sp, #0
 800e602:	4603      	mov	r3, r0
 800e604:	6039      	str	r1, [r7, #0]
 800e606:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800e608:	79fb      	ldrb	r3, [r7, #7]
 800e60a:	2b02      	cmp	r3, #2
 800e60c:	d104      	bne.n	800e618 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800e60e:	4b07      	ldr	r3, [pc, #28]	; (800e62c <SecureElementSetDevAddr+0x30>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	683a      	ldr	r2, [r7, #0]
 800e614:	611a      	str	r2, [r3, #16]
 800e616:	e003      	b.n	800e620 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800e618:	4b04      	ldr	r3, [pc, #16]	; (800e62c <SecureElementSetDevAddr+0x30>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	683a      	ldr	r2, [r7, #0]
 800e61e:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800e620:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800e622:	4618      	mov	r0, r3
 800e624:	370c      	adds	r7, #12
 800e626:	46bd      	mov	sp, r7
 800e628:	bc80      	pop	{r7}
 800e62a:	4770      	bx	lr
 800e62c:	20000678 	.word	0x20000678

0800e630 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800e630:	b480      	push	{r7}
 800e632:	b083      	sub	sp, #12
 800e634:	af00      	add	r7, sp, #0
 800e636:	4603      	mov	r3, r0
 800e638:	6039      	str	r1, [r7, #0]
 800e63a:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d101      	bne.n	800e646 <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e642:	2302      	movs	r3, #2
 800e644:	e00e      	b.n	800e664 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800e646:	79fb      	ldrb	r3, [r7, #7]
 800e648:	2b02      	cmp	r3, #2
 800e64a:	d105      	bne.n	800e658 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800e64c:	4b08      	ldr	r3, [pc, #32]	; (800e670 <SecureElementGetDevAddr+0x40>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	691a      	ldr	r2, [r3, #16]
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	601a      	str	r2, [r3, #0]
 800e656:	e004      	b.n	800e662 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800e658:	4b05      	ldr	r3, [pc, #20]	; (800e670 <SecureElementGetDevAddr+0x40>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	695a      	ldr	r2, [r3, #20]
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800e662:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800e664:	4618      	mov	r0, r3
 800e666:	370c      	adds	r7, #12
 800e668:	46bd      	mov	sp, r7
 800e66a:	bc80      	pop	{r7}
 800e66c:	4770      	bx	lr
 800e66e:	bf00      	nop
 800e670:	20000678 	.word	0x20000678

0800e674 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b082      	sub	sp, #8
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800e67e:	4a29      	ldr	r2, [pc, #164]	; (800e724 <LmHandlerInit+0xb0>)
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800e684:	4b28      	ldr	r3, [pc, #160]	; (800e728 <LmHandlerInit+0xb4>)
 800e686:	4a29      	ldr	r2, [pc, #164]	; (800e72c <LmHandlerInit+0xb8>)
 800e688:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800e68a:	4b27      	ldr	r3, [pc, #156]	; (800e728 <LmHandlerInit+0xb4>)
 800e68c:	4a28      	ldr	r2, [pc, #160]	; (800e730 <LmHandlerInit+0xbc>)
 800e68e:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800e690:	4b25      	ldr	r3, [pc, #148]	; (800e728 <LmHandlerInit+0xb4>)
 800e692:	4a28      	ldr	r2, [pc, #160]	; (800e734 <LmHandlerInit+0xc0>)
 800e694:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800e696:	4b24      	ldr	r3, [pc, #144]	; (800e728 <LmHandlerInit+0xb4>)
 800e698:	4a27      	ldr	r2, [pc, #156]	; (800e738 <LmHandlerInit+0xc4>)
 800e69a:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800e69c:	4b21      	ldr	r3, [pc, #132]	; (800e724 <LmHandlerInit+0xb0>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	4a26      	ldr	r2, [pc, #152]	; (800e73c <LmHandlerInit+0xc8>)
 800e6a4:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800e6a6:	4b1f      	ldr	r3, [pc, #124]	; (800e724 <LmHandlerInit+0xb0>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	685b      	ldr	r3, [r3, #4]
 800e6ac:	4a23      	ldr	r2, [pc, #140]	; (800e73c <LmHandlerInit+0xc8>)
 800e6ae:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800e6b0:	4b1c      	ldr	r3, [pc, #112]	; (800e724 <LmHandlerInit+0xb0>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	689b      	ldr	r3, [r3, #8]
 800e6b6:	4a21      	ldr	r2, [pc, #132]	; (800e73c <LmHandlerInit+0xc8>)
 800e6b8:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800e6ba:	4b1a      	ldr	r3, [pc, #104]	; (800e724 <LmHandlerInit+0xb0>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	68db      	ldr	r3, [r3, #12]
 800e6c0:	4a1e      	ldr	r2, [pc, #120]	; (800e73c <LmHandlerInit+0xc8>)
 800e6c2:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800e6c4:	4b1d      	ldr	r3, [pc, #116]	; (800e73c <LmHandlerInit+0xc8>)
 800e6c6:	4a1e      	ldr	r2, [pc, #120]	; (800e740 <LmHandlerInit+0xcc>)
 800e6c8:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800e6ca:	4b16      	ldr	r3, [pc, #88]	; (800e724 <LmHandlerInit+0xb0>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	699b      	ldr	r3, [r3, #24]
 800e6d0:	4a1a      	ldr	r2, [pc, #104]	; (800e73c <LmHandlerInit+0xc8>)
 800e6d2:	6153      	str	r3, [r2, #20]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	4a1b      	ldr	r2, [pc, #108]	; (800e744 <LmHandlerInit+0xd0>)
 800e6d8:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800e6da:	4b12      	ldr	r3, [pc, #72]	; (800e724 <LmHandlerInit+0xb0>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6e0:	4a18      	ldr	r2, [pc, #96]	; (800e744 <LmHandlerInit+0xd0>)
 800e6e2:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 800e6e4:	4b17      	ldr	r3, [pc, #92]	; (800e744 <LmHandlerInit+0xd0>)
 800e6e6:	4a18      	ldr	r2, [pc, #96]	; (800e748 <LmHandlerInit+0xd4>)
 800e6e8:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800e6ea:	4b16      	ldr	r3, [pc, #88]	; (800e744 <LmHandlerInit+0xd0>)
 800e6ec:	4a17      	ldr	r2, [pc, #92]	; (800e74c <LmHandlerInit+0xd8>)
 800e6ee:	60da      	str	r2, [r3, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800e6f0:	4914      	ldr	r1, [pc, #80]	; (800e744 <LmHandlerInit+0xd0>)
 800e6f2:	2000      	movs	r0, #0
 800e6f4:	f000 fdb4 	bl	800f260 <LmHandlerPackageRegister>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d002      	beq.n	800e704 <LmHandlerInit+0x90>
    {
        return LORAMAC_HANDLER_ERROR;
 800e6fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e702:	e00a      	b.n	800e71a <LmHandlerInit+0xa6>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800e704:	463b      	mov	r3, r7
 800e706:	4618      	mov	r0, r3
 800e708:	f001 fd2a 	bl	8010160 <LmhpPackagesRegistrationInit>
 800e70c:	4603      	mov	r3, r0
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d002      	beq.n	800e718 <LmHandlerInit+0xa4>
    {
        return LORAMAC_HANDLER_ERROR;
 800e712:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e716:	e000      	b.n	800e71a <LmHandlerInit+0xa6>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800e718:	2300      	movs	r3, #0
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	3708      	adds	r7, #8
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}
 800e722:	bf00      	nop
 800e724:	200006d0 	.word	0x200006d0
 800e728:	200006d4 	.word	0x200006d4
 800e72c:	0800ef39 	.word	0x0800ef39
 800e730:	0800efad 	.word	0x0800efad
 800e734:	0800f07d 	.word	0x0800f07d
 800e738:	0800f1cd 	.word	0x0800f1cd
 800e73c:	200006e4 	.word	0x200006e4
 800e740:	0800f70d 	.word	0x0800f70d
 800e744:	20000694 	.word	0x20000694
 800e748:	0800f521 	.word	0x0800f521
 800e74c:	0800f559 	.word	0x0800f559

0800e750 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b092      	sub	sp, #72	; 0x48
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800e758:	2218      	movs	r2, #24
 800e75a:	6879      	ldr	r1, [r7, #4]
 800e75c:	4884      	ldr	r0, [pc, #528]	; (800e970 <LmHandlerConfigure+0x220>)
 800e75e:	f00b f88c 	bl	801987a <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 800e762:	4b84      	ldr	r3, [pc, #528]	; (800e974 <LmHandlerConfigure+0x224>)
 800e764:	2200      	movs	r2, #0
 800e766:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800e768:	f7fe faa2 	bl	800ccb0 <LoraInfo_GetPtr>
 800e76c:	6478      	str	r0, [r7, #68]	; 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800e76e:	4b80      	ldr	r3, [pc, #512]	; (800e970 <LmHandlerConfigure+0x220>)
 800e770:	781b      	ldrb	r3, [r3, #0]
 800e772:	461a      	mov	r2, r3
 800e774:	2301      	movs	r3, #1
 800e776:	4093      	lsls	r3, r2
 800e778:	461a      	mov	r2, r3
 800e77a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e77c:	685b      	ldr	r3, [r3, #4]
 800e77e:	4013      	ands	r3, r2
 800e780:	2b00      	cmp	r3, #0
 800e782:	d106      	bne.n	800e792 <LmHandlerConfigure+0x42>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800e784:	4b7c      	ldr	r3, [pc, #496]	; (800e978 <LmHandlerConfigure+0x228>)
 800e786:	2201      	movs	r2, #1
 800e788:	2100      	movs	r1, #0
 800e78a:	2000      	movs	r0, #0
 800e78c:	f00f fc1a 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800e790:	e7fe      	b.n	800e790 <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800e792:	4b77      	ldr	r3, [pc, #476]	; (800e970 <LmHandlerConfigure+0x220>)
 800e794:	781b      	ldrb	r3, [r3, #0]
 800e796:	461a      	mov	r2, r3
 800e798:	4978      	ldr	r1, [pc, #480]	; (800e97c <LmHandlerConfigure+0x22c>)
 800e79a:	4879      	ldr	r0, [pc, #484]	; (800e980 <LmHandlerConfigure+0x230>)
 800e79c:	f004 ffd4 	bl	8013748 <LoRaMacInitialization>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d002      	beq.n	800e7ac <LmHandlerConfigure+0x5c>
    {
        return LORAMAC_HANDLER_ERROR;
 800e7a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e7aa:	e0dc      	b.n	800e966 <LmHandlerConfigure+0x216>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 800e7ac:	2327      	movs	r3, #39	; 0x27
 800e7ae:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e7b0:	f107 0318 	add.w	r3, r7, #24
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f005 fd53 	bl	8014260 <LoRaMacMibSetRequestConfirm>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d103      	bne.n	800e7c8 <LmHandlerConfigure+0x78>
    {
        CtxRestoreDone = true;
 800e7c0:	4b70      	ldr	r3, [pc, #448]	; (800e984 <LmHandlerConfigure+0x234>)
 800e7c2:	2201      	movs	r2, #1
 800e7c4:	701a      	strb	r2, [r3, #0]
 800e7c6:	e02a      	b.n	800e81e <LmHandlerConfigure+0xce>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800e7c8:	2328      	movs	r3, #40	; 0x28
 800e7ca:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800e7cc:	4b6e      	ldr	r3, [pc, #440]	; (800e988 <LmHandlerConfigure+0x238>)
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	691b      	ldr	r3, [r3, #16]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d00c      	beq.n	800e7f0 <LmHandlerConfigure+0xa0>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800e7d6:	f107 0318 	add.w	r3, r7, #24
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f005 fb68 	bl	8013eb0 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800e7e0:	4b69      	ldr	r3, [pc, #420]	; (800e988 <LmHandlerConfigure+0x238>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	691b      	ldr	r3, [r3, #16]
 800e7e6:	69fa      	ldr	r2, [r7, #28]
 800e7e8:	f240 51cc 	movw	r1, #1484	; 0x5cc
 800e7ec:	4610      	mov	r0, r2
 800e7ee:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 800e7f0:	2327      	movs	r3, #39	; 0x27
 800e7f2:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e7f4:	f107 0318 	add.w	r3, r7, #24
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f005 fd31 	bl	8014260 <LoRaMacMibSetRequestConfirm>
 800e7fe:	4603      	mov	r3, r0
 800e800:	2b00      	cmp	r3, #0
 800e802:	d10c      	bne.n	800e81e <LmHandlerConfigure+0xce>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e804:	2301      	movs	r3, #1
 800e806:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800e808:	f107 0318 	add.w	r3, r7, #24
 800e80c:	4618      	mov	r0, r3
 800e80e:	f005 fb4f 	bl	8013eb0 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800e812:	7f3b      	ldrb	r3, [r7, #28]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d002      	beq.n	800e81e <LmHandlerConfigure+0xce>
            {
                CtxRestoreDone = true;
 800e818:	4b5a      	ldr	r3, [pc, #360]	; (800e984 <LmHandlerConfigure+0x234>)
 800e81a:	2201      	movs	r2, #1
 800e81c:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 800e81e:	4b59      	ldr	r3, [pc, #356]	; (800e984 <LmHandlerConfigure+0x234>)
 800e820:	781b      	ldrb	r3, [r3, #0]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d022      	beq.n	800e86c <LmHandlerConfigure+0x11c>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800e826:	4b58      	ldr	r3, [pc, #352]	; (800e988 <LmHandlerConfigure+0x238>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	69db      	ldr	r3, [r3, #28]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d004      	beq.n	800e83a <LmHandlerConfigure+0xea>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800e830:	4b55      	ldr	r3, [pc, #340]	; (800e988 <LmHandlerConfigure+0x238>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	69db      	ldr	r3, [r3, #28]
 800e836:	2000      	movs	r0, #0
 800e838:	4798      	blx	r3
        }

        mibReq.Type = MIB_NVM_CTXS;
 800e83a:	2327      	movs	r3, #39	; 0x27
 800e83c:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800e83e:	f107 0318 	add.w	r3, r7, #24
 800e842:	4618      	mov	r0, r3
 800e844:	f005 fb34 	bl	8013eb0 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800e848:	69fb      	ldr	r3, [r7, #28]
 800e84a:	643b      	str	r3, [r7, #64]	; 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800e84c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e84e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800e852:	4b47      	ldr	r3, [pc, #284]	; (800e970 <LmHandlerConfigure+0x220>)
 800e854:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800e856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e858:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 800e85c:	4b44      	ldr	r3, [pc, #272]	; (800e970 <LmHandlerConfigure+0x220>)
 800e85e:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800e860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e862:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 800e866:	4b42      	ldr	r3, [pc, #264]	; (800e970 <LmHandlerConfigure+0x220>)
 800e868:	709a      	strb	r2, [r3, #2]
 800e86a:	e008      	b.n	800e87e <LmHandlerConfigure+0x12e>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800e86c:	2305      	movs	r3, #5
 800e86e:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800e870:	2300      	movs	r3, #0
 800e872:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800e874:	f107 0318 	add.w	r3, r7, #24
 800e878:	4618      	mov	r0, r3
 800e87a:	f005 fcf1 	bl	8014260 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800e87e:	4b3f      	ldr	r3, [pc, #252]	; (800e97c <LmHandlerConfigure+0x22c>)
 800e880:	689b      	ldr	r3, [r3, #8]
 800e882:	4a3e      	ldr	r2, [pc, #248]	; (800e97c <LmHandlerConfigure+0x22c>)
 800e884:	68d2      	ldr	r2, [r2, #12]
 800e886:	4611      	mov	r1, r2
 800e888:	4618      	mov	r0, r3
 800e88a:	f7ff fbcb 	bl	800e024 <SecureElementInitMcuID>
 800e88e:	4603      	mov	r3, r0
 800e890:	2b00      	cmp	r3, #0
 800e892:	d002      	beq.n	800e89a <LmHandlerConfigure+0x14a>
    {
        return LORAMAC_HANDLER_ERROR;
 800e894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e898:	e065      	b.n	800e966 <LmHandlerConfigure+0x216>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800e89a:	2306      	movs	r3, #6
 800e89c:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800e89e:	f107 0318 	add.w	r3, r7, #24
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f005 fb04 	bl	8013eb0 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800e8a8:	69fb      	ldr	r3, [r7, #28]
 800e8aa:	4a38      	ldr	r2, [pc, #224]	; (800e98c <LmHandlerConfigure+0x23c>)
 800e8ac:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e8ae:	f107 0318 	add.w	r3, r7, #24
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f005 fcd4 	bl	8014260 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800e8b8:	2302      	movs	r3, #2
 800e8ba:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800e8bc:	4b33      	ldr	r3, [pc, #204]	; (800e98c <LmHandlerConfigure+0x23c>)
 800e8be:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800e8c0:	f107 0318 	add.w	r3, r7, #24
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f005 faf3 	bl	8013eb0 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800e8ca:	2303      	movs	r3, #3
 800e8cc:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800e8ce:	4b30      	ldr	r3, [pc, #192]	; (800e990 <LmHandlerConfigure+0x240>)
 800e8d0:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800e8d2:	f107 0318 	add.w	r3, r7, #24
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f005 faea 	bl	8013eb0 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800e8dc:	f7ff fc22 	bl	800e124 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800e8e0:	230f      	movs	r3, #15
 800e8e2:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e8e8:	f107 0318 	add.w	r3, r7, #24
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f005 fcb7 	bl	8014260 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800e8f2:	2310      	movs	r3, #16
 800e8f4:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e8fa:	f107 0318 	add.w	r3, r7, #24
 800e8fe:	4618      	mov	r0, r3
 800e900:	f005 fcae 	bl	8014260 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800e904:	2304      	movs	r3, #4
 800e906:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800e908:	4b19      	ldr	r3, [pc, #100]	; (800e970 <LmHandlerConfigure+0x220>)
 800e90a:	789b      	ldrb	r3, [r3, #2]
 800e90c:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e90e:	f107 0318 	add.w	r3, r7, #24
 800e912:	4618      	mov	r0, r3
 800e914:	f005 fca4 	bl	8014260 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800e918:	233a      	movs	r3, #58	; 0x3a
 800e91a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800e91c:	4b14      	ldr	r3, [pc, #80]	; (800e970 <LmHandlerConfigure+0x220>)
 800e91e:	695b      	ldr	r3, [r3, #20]
 800e920:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e922:	f107 0318 	add.w	r3, r7, #24
 800e926:	4618      	mov	r0, r3
 800e928:	f005 fc9a 	bl	8014260 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800e92c:	230f      	movs	r3, #15
 800e92e:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800e930:	4b0f      	ldr	r3, [pc, #60]	; (800e970 <LmHandlerConfigure+0x220>)
 800e932:	781b      	ldrb	r3, [r3, #0]
 800e934:	f107 0210 	add.w	r2, r7, #16
 800e938:	4611      	mov	r1, r2
 800e93a:	4618      	mov	r0, r3
 800e93c:	f008 fbe5 	bl	801710a <RegionGetPhyParam>
 800e940:	4603      	mov	r3, r0
 800e942:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	2b00      	cmp	r3, #0
 800e948:	bf14      	ite	ne
 800e94a:	2301      	movne	r3, #1
 800e94c:	2300      	moveq	r3, #0
 800e94e:	b2da      	uxtb	r2, r3
 800e950:	4b07      	ldr	r3, [pc, #28]	; (800e970 <LmHandlerConfigure+0x220>)
 800e952:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800e954:	2014      	movs	r0, #20
 800e956:	f000 fad7 	bl	800ef08 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800e95a:	4b05      	ldr	r3, [pc, #20]	; (800e970 <LmHandlerConfigure+0x220>)
 800e95c:	79db      	ldrb	r3, [r3, #7]
 800e95e:	4618      	mov	r0, r3
 800e960:	f006 faf8 	bl	8014f54 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800e964:	2300      	movs	r3, #0
}
 800e966:	4618      	mov	r0, r3
 800e968:	3748      	adds	r7, #72	; 0x48
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
 800e96e:	bf00      	nop
 800e970:	200006b8 	.word	0x200006b8
 800e974:	20000700 	.word	0x20000700
 800e978:	0801ed74 	.word	0x0801ed74
 800e97c:	200006e4 	.word	0x200006e4
 800e980:	200006d4 	.word	0x200006d4
 800e984:	200007f6 	.word	0x200007f6
 800e988:	200006d0 	.word	0x200006d0
 800e98c:	2000067c 	.word	0x2000067c
 800e990:	20000684 	.word	0x20000684

0800e994 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b082      	sub	sp, #8
 800e998:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800e99a:	f002 fe49 	bl	8011630 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800e99e:	f000 fd8b 	bl	800f4b8 <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800e9a2:	f000 fd5f 	bl	800f464 <LmHandlerPackageIsTxPending>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d117      	bne.n	800e9dc <LmHandlerProcess+0x48>
        return;
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    /* If a MAC layer scheduled uplink is still pending try to send it. */
    if( IsUplinkTxPending == true )
 800e9ac:	4b0d      	ldr	r3, [pc, #52]	; (800e9e4 <LmHandlerProcess+0x50>)
 800e9ae:	781b      	ldrb	r3, [r3, #0]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d014      	beq.n	800e9de <LmHandlerProcess+0x4a>
    {
        /* Send an empty message */
        LmHandlerAppData_t appData =
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	703b      	strb	r3, [r7, #0]
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	707b      	strb	r3, [r7, #1]
 800e9bc:	2300      	movs	r3, #0
 800e9be:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800e9c0:	4b09      	ldr	r3, [pc, #36]	; (800e9e8 <LmHandlerProcess+0x54>)
 800e9c2:	78d9      	ldrb	r1, [r3, #3]
 800e9c4:	463b      	mov	r3, r7
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f000 f8d7 	bl	800eb7c <LmHandlerSend>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d104      	bne.n	800e9de <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800e9d4:	4b03      	ldr	r3, [pc, #12]	; (800e9e4 <LmHandlerProcess+0x50>)
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	701a      	strb	r2, [r3, #0]
 800e9da:	e000      	b.n	800e9de <LmHandlerProcess+0x4a>
        return;
 800e9dc:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800e9de:	3708      	adds	r7, #8
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}
 800e9e4:	20000700 	.word	0x20000700
 800e9e8:	200006b8 	.word	0x200006b8

0800e9ec <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800e9f0:	4b02      	ldr	r3, [pc, #8]	; (800e9fc <LmHandlerGetDutyCycleWaitTime+0x10>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bc80      	pop	{r7}
 800e9fa:	4770      	bx	lr
 800e9fc:	200006fc 	.word	0x200006fc

0800ea00 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b092      	sub	sp, #72	; 0x48
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	4603      	mov	r3, r0
 800ea08:	460a      	mov	r2, r1
 800ea0a:	71fb      	strb	r3, [r7, #7]
 800ea0c:	4613      	mov	r3, r2
 800ea0e:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800ea10:	2301      	movs	r3, #1
 800ea12:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800ea16:	4b46      	ldr	r3, [pc, #280]	; (800eb30 <LmHandlerJoin+0x130>)
 800ea18:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ea1c:	b2db      	uxtb	r3, r3
 800ea1e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800ea22:	4b43      	ldr	r3, [pc, #268]	; (800eb30 <LmHandlerJoin+0x130>)
 800ea24:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800ea28:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800ea2c:	79fb      	ldrb	r3, [r7, #7]
 800ea2e:	2b02      	cmp	r3, #2
 800ea30:	d10b      	bne.n	800ea4a <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800ea32:	2302      	movs	r3, #2
 800ea34:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800ea38:	4b3e      	ldr	r3, [pc, #248]	; (800eb34 <LmHandlerJoin+0x134>)
 800ea3a:	2202      	movs	r2, #2
 800ea3c:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800ea3e:	4a3d      	ldr	r2, [pc, #244]	; (800eb34 <LmHandlerJoin+0x134>)
 800ea40:	79bb      	ldrb	r3, [r7, #6]
 800ea42:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800ea44:	f005 f936 	bl	8013cb4 <LoRaMacStart>
 800ea48:	e05c      	b.n	800eb04 <LmHandlerJoin+0x104>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800ea50:	4b38      	ldr	r3, [pc, #224]	; (800eb34 <LmHandlerJoin+0x134>)
 800ea52:	2201      	movs	r2, #1
 800ea54:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800ea56:	4b36      	ldr	r3, [pc, #216]	; (800eb30 <LmHandlerJoin+0x130>)
 800ea58:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800ea5c:	4b35      	ldr	r3, [pc, #212]	; (800eb34 <LmHandlerJoin+0x134>)
 800ea5e:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800ea60:	4b33      	ldr	r3, [pc, #204]	; (800eb30 <LmHandlerJoin+0x130>)
 800ea62:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800ea66:	4b33      	ldr	r3, [pc, #204]	; (800eb34 <LmHandlerJoin+0x134>)
 800ea68:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800ea6a:	4b32      	ldr	r3, [pc, #200]	; (800eb34 <LmHandlerJoin+0x134>)
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800ea70:	4a30      	ldr	r2, [pc, #192]	; (800eb34 <LmHandlerJoin+0x134>)
 800ea72:	79bb      	ldrb	r3, [r7, #6]
 800ea74:	7213      	strb	r3, [r2, #8]

        if( CtxRestoreDone == false )
 800ea76:	4b30      	ldr	r3, [pc, #192]	; (800eb38 <LmHandlerJoin+0x138>)
 800ea78:	781b      	ldrb	r3, [r3, #0]
 800ea7a:	f083 0301 	eor.w	r3, r3, #1
 800ea7e:	b2db      	uxtb	r3, r3
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d034      	beq.n	800eaee <LmHandlerJoin+0xee>
        {
            /* Configure the default datarate */
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800ea84:	231f      	movs	r3, #31
 800ea86:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800ea88:	4b29      	ldr	r3, [pc, #164]	; (800eb30 <LmHandlerJoin+0x130>)
 800ea8a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ea8e:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800ea90:	f107 030c 	add.w	r3, r7, #12
 800ea94:	4618      	mov	r0, r3
 800ea96:	f005 fbe3 	bl	8014260 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800ea9a:	2320      	movs	r3, #32
 800ea9c:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800ea9e:	4b24      	ldr	r3, [pc, #144]	; (800eb30 <LmHandlerJoin+0x130>)
 800eaa0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800eaa4:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800eaa6:	f107 030c 	add.w	r3, r7, #12
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f005 fbd8 	bl	8014260 <LoRaMacMibSetRequestConfirm>

            /* Configure the default Tx Power */
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800eab0:	2322      	movs	r3, #34	; 0x22
 800eab2:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800eab4:	4b1e      	ldr	r3, [pc, #120]	; (800eb30 <LmHandlerJoin+0x130>)
 800eab6:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800eaba:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800eabc:	f107 030c 	add.w	r3, r7, #12
 800eac0:	4618      	mov	r0, r3
 800eac2:	f005 fbcd 	bl	8014260 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800eac6:	2321      	movs	r3, #33	; 0x21
 800eac8:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800eaca:	4b19      	ldr	r3, [pc, #100]	; (800eb30 <LmHandlerJoin+0x130>)
 800eacc:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800ead0:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800ead2:	f107 030c 	add.w	r3, r7, #12
 800ead6:	4618      	mov	r0, r3
 800ead8:	f005 fbc2 	bl	8014260 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800eadc:	2329      	movs	r3, #41	; 0x29
 800eade:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800eae0:	4b16      	ldr	r3, [pc, #88]	; (800eb3c <LmHandlerJoin+0x13c>)
 800eae2:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800eae4:	f107 030c 	add.w	r3, r7, #12
 800eae8:	4618      	mov	r0, r3
 800eaea:	f005 fbb9 	bl	8014260 <LoRaMacMibSetRequestConfirm>
        }

        LoRaMacStart();
 800eaee:	f005 f8e1 	bl	8013cb4 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800eaf6:	2301      	movs	r3, #1
 800eaf8:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800eafa:	f107 030c 	add.w	r3, r7, #12
 800eafe:	4618      	mov	r0, r3
 800eb00:	f005 fbae 	bl	8014260 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
#endif /* LORAMAC_VERSION */
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 800eb04:	4b0c      	ldr	r3, [pc, #48]	; (800eb38 <LmHandlerJoin+0x138>)
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	f083 0301 	eor.w	r3, r3, #1
 800eb0c:	b2db      	uxtb	r3, r3
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d102      	bne.n	800eb18 <LmHandlerJoin+0x118>
 800eb12:	79bb      	ldrb	r3, [r7, #6]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d004      	beq.n	800eb22 <LmHandlerJoin+0x122>
    {
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800eb18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f005 ff49 	bl	80149b4 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800eb22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb24:	4a06      	ldr	r2, [pc, #24]	; (800eb40 <LmHandlerJoin+0x140>)
 800eb26:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800eb28:	bf00      	nop
 800eb2a:	3748      	adds	r7, #72	; 0x48
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	200006b8 	.word	0x200006b8
 800eb34:	20000094 	.word	0x20000094
 800eb38:	200007f6 	.word	0x200007f6
 800eb3c:	01000400 	.word	0x01000400
 800eb40:	200006fc 	.word	0x200006fc

0800eb44 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b08c      	sub	sp, #48	; 0x30
 800eb48:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800eb4e:	1d3b      	adds	r3, r7, #4
 800eb50:	4618      	mov	r0, r3
 800eb52:	f005 f9ad 	bl	8013eb0 <LoRaMacMibGetRequestConfirm>
 800eb56:	4603      	mov	r3, r0
 800eb58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( status == LORAMAC_STATUS_OK )
 800eb5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d106      	bne.n	800eb72 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800eb64:	7a3b      	ldrb	r3, [r7, #8]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d101      	bne.n	800eb6e <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	e002      	b.n	800eb74 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800eb6e:	2301      	movs	r3, #1
 800eb70:	e000      	b.n	800eb74 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800eb72:	2300      	movs	r3, #0
    }
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	3730      	adds	r7, #48	; 0x30
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}

0800eb7c <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b08a      	sub	sp, #40	; 0x28
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	460b      	mov	r3, r1
 800eb86:	70fb      	strb	r3, [r7, #3]
 800eb88:	4613      	mov	r3, r2
 800eb8a:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800eb8c:	23ff      	movs	r3, #255	; 0xff
 800eb8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800eb92:	f002 faa7 	bl	80110e4 <LoRaMacIsBusy>
 800eb96:	4603      	mov	r3, r0
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d002      	beq.n	800eba2 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800eb9c:	f06f 0301 	mvn.w	r3, #1
 800eba0:	e0ab      	b.n	800ecfa <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 800eba2:	f002 fac7 	bl	8011134 <LoRaMacIsStopped>
 800eba6:	4603      	mov	r3, r0
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d002      	beq.n	800ebb2 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ebac:	f06f 0302 	mvn.w	r3, #2
 800ebb0:	e0a3      	b.n	800ecfa <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800ebb2:	f7ff ffc7 	bl	800eb44 <LmHandlerJoinStatus>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	2b01      	cmp	r3, #1
 800ebba:	d00a      	beq.n	800ebd2 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800ebbc:	4b51      	ldr	r3, [pc, #324]	; (800ed04 <LmHandlerSend+0x188>)
 800ebbe:	79db      	ldrb	r3, [r3, #7]
 800ebc0:	4a50      	ldr	r2, [pc, #320]	; (800ed04 <LmHandlerSend+0x188>)
 800ebc2:	7a12      	ldrb	r2, [r2, #8]
 800ebc4:	4611      	mov	r1, r2
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7ff ff1a 	bl	800ea00 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ebcc:	f06f 0302 	mvn.w	r3, #2
 800ebd0:	e093      	b.n	800ecfa <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800ebd2:	4a4d      	ldr	r2, [pc, #308]	; (800ed08 <LmHandlerSend+0x18c>)
 800ebd4:	78fb      	ldrb	r3, [r7, #3]
 800ebd6:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800ebd8:	78fb      	ldrb	r3, [r7, #3]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	bf14      	ite	ne
 800ebde:	2301      	movne	r3, #1
 800ebe0:	2300      	moveq	r3, #0
 800ebe2:	b2db      	uxtb	r3, r3
 800ebe4:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800ebe6:	4b49      	ldr	r3, [pc, #292]	; (800ed0c <LmHandlerSend+0x190>)
 800ebe8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ebec:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	785b      	ldrb	r3, [r3, #1]
 800ebf2:	f107 020c 	add.w	r2, r7, #12
 800ebf6:	4611      	mov	r1, r2
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f005 f8c9 	bl	8013d90 <LoRaMacQueryTxPossible>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d009      	beq.n	800ec18 <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800ec04:	2300      	movs	r3, #0
 800ec06:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800ec08:	2300      	movs	r3, #0
 800ec0a:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800ec10:	23f9      	movs	r3, #249	; 0xf9
 800ec12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec16:	e009      	b.n	800ec2c <LmHandlerSend+0xb0>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	781b      	ldrb	r3, [r3, #0]
 800ec1c:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	785b      	ldrb	r3, [r3, #1]
 800ec22:	b29b      	uxth	r3, r3
 800ec24:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	685b      	ldr	r3, [r3, #4]
 800ec2a:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800ec2c:	4b36      	ldr	r3, [pc, #216]	; (800ed08 <LmHandlerSend+0x18c>)
 800ec2e:	687a      	ldr	r2, [r7, #4]
 800ec30:	3310      	adds	r3, #16
 800ec32:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec36:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800ec3a:	4b34      	ldr	r3, [pc, #208]	; (800ed0c <LmHandlerSend+0x190>)
 800ec3c:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800ec40:	4b31      	ldr	r3, [pc, #196]	; (800ed08 <LmHandlerSend+0x18c>)
 800ec42:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800ec44:	78ba      	ldrb	r2, [r7, #2]
 800ec46:	f107 0310 	add.w	r3, r7, #16
 800ec4a:	4611      	mov	r1, r2
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f006 f849 	bl	8014ce4 <LoRaMacMcpsRequest>
 800ec52:	4603      	mov	r3, r0
 800ec54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800ec58:	6a3b      	ldr	r3, [r7, #32]
 800ec5a:	4a2d      	ldr	r2, [pc, #180]	; (800ed10 <LmHandlerSend+0x194>)
 800ec5c:	6013      	str	r3, [r2, #0]

    switch( status )
 800ec5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ec62:	2b11      	cmp	r3, #17
 800ec64:	d842      	bhi.n	800ecec <LmHandlerSend+0x170>
 800ec66:	a201      	add	r2, pc, #4	; (adr r2, 800ec6c <LmHandlerSend+0xf0>)
 800ec68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec6c:	0800ecb5 	.word	0x0800ecb5
 800ec70:	0800eccd 	.word	0x0800eccd
 800ec74:	0800eced 	.word	0x0800eced
 800ec78:	0800eced 	.word	0x0800eced
 800ec7c:	0800eced 	.word	0x0800eced
 800ec80:	0800eced 	.word	0x0800eced
 800ec84:	0800eced 	.word	0x0800eced
 800ec88:	0800ecd5 	.word	0x0800ecd5
 800ec8c:	0800eced 	.word	0x0800eced
 800ec90:	0800eced 	.word	0x0800eced
 800ec94:	0800eced 	.word	0x0800eced
 800ec98:	0800ece5 	.word	0x0800ece5
 800ec9c:	0800eced 	.word	0x0800eced
 800eca0:	0800eced 	.word	0x0800eced
 800eca4:	0800eccd 	.word	0x0800eccd
 800eca8:	0800eccd 	.word	0x0800eccd
 800ecac:	0800eccd 	.word	0x0800eccd
 800ecb0:	0800ecdd 	.word	0x0800ecdd
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 800ecb4:	4b17      	ldr	r3, [pc, #92]	; (800ed14 <LmHandlerSend+0x198>)
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800ecba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ecbe:	f113 0f07 	cmn.w	r3, #7
 800ecc2:	d017      	beq.n	800ecf4 <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800ecca:	e013      	b.n	800ecf4 <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800eccc:	23fe      	movs	r3, #254	; 0xfe
 800ecce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800ecd2:	e010      	b.n	800ecf6 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ecd4:	23fd      	movs	r3, #253	; 0xfd
 800ecd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800ecda:	e00c      	b.n	800ecf6 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800ecdc:	23fb      	movs	r3, #251	; 0xfb
 800ecde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800ece2:	e008      	b.n	800ecf6 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800ece4:	23fa      	movs	r3, #250	; 0xfa
 800ece6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800ecea:	e004      	b.n	800ecf6 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800ecec:	23ff      	movs	r3, #255	; 0xff
 800ecee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800ecf2:	e000      	b.n	800ecf6 <LmHandlerSend+0x17a>
            break;
 800ecf4:	bf00      	nop
    }

    return lmhStatus;
 800ecf6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3728      	adds	r7, #40	; 0x28
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}
 800ed02:	bf00      	nop
 800ed04:	20000094 	.word	0x20000094
 800ed08:	200000a0 	.word	0x200000a0
 800ed0c:	200006b8 	.word	0x200006b8
 800ed10:	200006fc 	.word	0x200006fc
 800ed14:	20000700 	.word	0x20000700

0800ed18 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b086      	sub	sp, #24
 800ed1c:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800ed1e:	2309      	movs	r3, #9
 800ed20:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800ed22:	463b      	mov	r3, r7
 800ed24:	4618      	mov	r0, r3
 800ed26:	f005 fe45 	bl	80149b4 <LoRaMacMlmeRequest>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	4a06      	ldr	r2, [pc, #24]	; (800ed4c <LmHandlerDeviceTimeReq+0x34>)
 800ed32:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800ed34:	7dfb      	ldrb	r3, [r7, #23]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d101      	bne.n	800ed3e <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	e001      	b.n	800ed42 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800ed3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	3718      	adds	r7, #24
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}
 800ed4a:	bf00      	nop
 800ed4c:	200006fc 	.word	0x200006fc

0800ed50 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800ed50:	b480      	push	{r7}
 800ed52:	b083      	sub	sp, #12
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	4603      	mov	r3, r0
 800ed58:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800ed5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	370c      	adds	r7, #12
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bc80      	pop	{r7}
 800ed66:	4770      	bx	lr

0800ed68 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b08e      	sub	sp, #56	; 0x38
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	4603      	mov	r3, r0
 800ed70:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800ed72:	2300      	movs	r3, #0
 800ed74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( LoRaMacIsBusy() == true )
 800ed78:	f002 f9b4 	bl	80110e4 <LoRaMacIsBusy>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d002      	beq.n	800ed88 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ed82:	f06f 0301 	mvn.w	r3, #1
 800ed86:	e071      	b.n	800ee6c <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800ed88:	f7ff fedc 	bl	800eb44 <LmHandlerJoinStatus>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	2b01      	cmp	r3, #1
 800ed90:	d002      	beq.n	800ed98 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ed92:	f06f 0302 	mvn.w	r3, #2
 800ed96:	e069      	b.n	800ee6c <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800ed98:	2300      	movs	r3, #0
 800ed9a:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800ed9c:	f107 030c 	add.w	r3, r7, #12
 800eda0:	4618      	mov	r0, r3
 800eda2:	f005 f885 	bl	8013eb0 <LoRaMacMibGetRequestConfirm>
 800eda6:	4603      	mov	r3, r0
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d002      	beq.n	800edb2 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800edac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800edb0:	e05c      	b.n	800ee6c <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800edb2:	7c3b      	ldrb	r3, [r7, #16]
 800edb4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800edb8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800edbc:	79fb      	ldrb	r3, [r7, #7]
 800edbe:	429a      	cmp	r2, r3
 800edc0:	d052      	beq.n	800ee68 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800edc2:	79fb      	ldrb	r3, [r7, #7]
 800edc4:	2b02      	cmp	r3, #2
 800edc6:	d028      	beq.n	800ee1a <LmHandlerRequestClass+0xb2>
 800edc8:	2b02      	cmp	r3, #2
 800edca:	dc48      	bgt.n	800ee5e <LmHandlerRequestClass+0xf6>
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d002      	beq.n	800edd6 <LmHandlerRequestClass+0x6e>
 800edd0:	2b01      	cmp	r3, #1
 800edd2:	d01e      	beq.n	800ee12 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800edd4:	e043      	b.n	800ee5e <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800edd6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d041      	beq.n	800ee62 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800edde:	79fb      	ldrb	r3, [r7, #7]
 800ede0:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800ede2:	f107 030c 	add.w	r3, r7, #12
 800ede6:	4618      	mov	r0, r3
 800ede8:	f005 fa3a 	bl	8014260 <LoRaMacMibSetRequestConfirm>
 800edec:	4603      	mov	r3, r0
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d10b      	bne.n	800ee0a <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800edf2:	4b20      	ldr	r3, [pc, #128]	; (800ee74 <LmHandlerRequestClass+0x10c>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d032      	beq.n	800ee62 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800edfc:	4b1d      	ldr	r3, [pc, #116]	; (800ee74 <LmHandlerRequestClass+0x10c>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee02:	79fa      	ldrb	r2, [r7, #7]
 800ee04:	4610      	mov	r0, r2
 800ee06:	4798      	blx	r3
                break;
 800ee08:	e02b      	b.n	800ee62 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800ee0a:	23ff      	movs	r3, #255	; 0xff
 800ee0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800ee10:	e027      	b.n	800ee62 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800ee12:	23ff      	movs	r3, #255	; 0xff
 800ee14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800ee18:	e026      	b.n	800ee68 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800ee1a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d003      	beq.n	800ee2a <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800ee22:	23ff      	movs	r3, #255	; 0xff
 800ee24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800ee28:	e01d      	b.n	800ee66 <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800ee2a:	79fb      	ldrb	r3, [r7, #7]
 800ee2c:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800ee2e:	f107 030c 	add.w	r3, r7, #12
 800ee32:	4618      	mov	r0, r3
 800ee34:	f005 fa14 	bl	8014260 <LoRaMacMibSetRequestConfirm>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d10b      	bne.n	800ee56 <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800ee3e:	4b0d      	ldr	r3, [pc, #52]	; (800ee74 <LmHandlerRequestClass+0x10c>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d00e      	beq.n	800ee66 <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800ee48:	4b0a      	ldr	r3, [pc, #40]	; (800ee74 <LmHandlerRequestClass+0x10c>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee4e:	79fa      	ldrb	r2, [r7, #7]
 800ee50:	4610      	mov	r0, r2
 800ee52:	4798      	blx	r3
                break;
 800ee54:	e007      	b.n	800ee66 <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800ee56:	23ff      	movs	r3, #255	; 0xff
 800ee58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800ee5c:	e003      	b.n	800ee66 <LmHandlerRequestClass+0xfe>
                break;
 800ee5e:	bf00      	nop
 800ee60:	e002      	b.n	800ee68 <LmHandlerRequestClass+0x100>
                break;
 800ee62:	bf00      	nop
 800ee64:	e000      	b.n	800ee68 <LmHandlerRequestClass+0x100>
                break;
 800ee66:	bf00      	nop
        }
    }
    return errorStatus;
 800ee68:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	3738      	adds	r7, #56	; 0x38
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}
 800ee74:	200006d0 	.word	0x200006d0

0800ee78 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b08c      	sub	sp, #48	; 0x30
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d102      	bne.n	800ee8c <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800ee86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee8a:	e010      	b.n	800eeae <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800ee90:	f107 0308 	add.w	r3, r7, #8
 800ee94:	4618      	mov	r0, r3
 800ee96:	f005 f80b 	bl	8013eb0 <LoRaMacMibGetRequestConfirm>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d002      	beq.n	800eea6 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800eea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eea4:	e003      	b.n	800eeae <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800eea6:	7b3a      	ldrb	r2, [r7, #12]
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800eeac:	2300      	movs	r3, #0
}
 800eeae:	4618      	mov	r0, r3
 800eeb0:	3730      	adds	r7, #48	; 0x30
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}
	...

0800eeb8 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b08c      	sub	sp, #48	; 0x30
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d102      	bne.n	800eecc <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800eec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eeca:	e016      	b.n	800eefa <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800eecc:	2320      	movs	r3, #32
 800eece:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800eed0:	f107 0308 	add.w	r3, r7, #8
 800eed4:	4618      	mov	r0, r3
 800eed6:	f004 ffeb 	bl	8013eb0 <LoRaMacMibGetRequestConfirm>
 800eeda:	4603      	mov	r3, r0
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d002      	beq.n	800eee6 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800eee0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eee4:	e009      	b.n	800eefa <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800eee6:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f993 2000 	ldrsb.w	r2, [r3]
 800eef4:	4b03      	ldr	r3, [pc, #12]	; (800ef04 <LmHandlerGetTxDatarate+0x4c>)
 800eef6:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800eef8:	2300      	movs	r3, #0
}
 800eefa:	4618      	mov	r0, r3
 800eefc:	3730      	adds	r7, #48	; 0x30
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}
 800ef02:	bf00      	nop
 800ef04:	200006b8 	.word	0x200006b8

0800ef08 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b08c      	sub	sp, #48	; 0x30
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800ef10:	2323      	movs	r3, #35	; 0x23
 800ef12:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800ef18:	f107 0308 	add.w	r3, r7, #8
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f005 f99f 	bl	8014260 <LoRaMacMibSetRequestConfirm>
 800ef22:	4603      	mov	r3, r0
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d002      	beq.n	800ef2e <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800ef28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ef2c:	e000      	b.n	800ef30 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800ef2e:	2300      	movs	r3, #0
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	3730      	adds	r7, #48	; 0x30
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}

0800ef38 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b082      	sub	sp, #8
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800ef40:	4b18      	ldr	r3, [pc, #96]	; (800efa4 <McpsConfirm+0x6c>)
 800ef42:	2201      	movs	r2, #1
 800ef44:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	785a      	ldrb	r2, [r3, #1]
 800ef4a:	4b16      	ldr	r3, [pc, #88]	; (800efa4 <McpsConfirm+0x6c>)
 800ef4c:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	789b      	ldrb	r3, [r3, #2]
 800ef52:	b25a      	sxtb	r2, r3
 800ef54:	4b13      	ldr	r3, [pc, #76]	; (800efa4 <McpsConfirm+0x6c>)
 800ef56:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	68db      	ldr	r3, [r3, #12]
 800ef5c:	4a11      	ldr	r2, [pc, #68]	; (800efa4 <McpsConfirm+0x6c>)
 800ef5e:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800ef66:	4b0f      	ldr	r3, [pc, #60]	; (800efa4 <McpsConfirm+0x6c>)
 800ef68:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	691b      	ldr	r3, [r3, #16]
 800ef6e:	b2da      	uxtb	r2, r3
 800ef70:	4b0c      	ldr	r3, [pc, #48]	; (800efa4 <McpsConfirm+0x6c>)
 800ef72:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	791b      	ldrb	r3, [r3, #4]
 800ef78:	461a      	mov	r2, r3
 800ef7a:	4b0a      	ldr	r3, [pc, #40]	; (800efa4 <McpsConfirm+0x6c>)
 800ef7c:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800ef7e:	4b0a      	ldr	r3, [pc, #40]	; (800efa8 <McpsConfirm+0x70>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d004      	beq.n	800ef92 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800ef88:	4b07      	ldr	r3, [pc, #28]	; (800efa8 <McpsConfirm+0x70>)
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef8e:	4805      	ldr	r0, [pc, #20]	; (800efa4 <McpsConfirm+0x6c>)
 800ef90:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800ef92:	6879      	ldr	r1, [r7, #4]
 800ef94:	2000      	movs	r0, #0
 800ef96:	f000 f9e9 	bl	800f36c <LmHandlerPackagesNotify>
}
 800ef9a:	bf00      	nop
 800ef9c:	3708      	adds	r7, #8
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
 800efa2:	bf00      	nop
 800efa4:	200000a0 	.word	0x200000a0
 800efa8:	200006d0 	.word	0x200006d0

0800efac <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b086      	sub	sp, #24
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
 800efb4:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800efb6:	2300      	movs	r3, #0
 800efb8:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800efba:	4b2d      	ldr	r3, [pc, #180]	; (800f070 <McpsIndication+0xc4>)
 800efbc:	2201      	movs	r2, #1
 800efbe:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	785a      	ldrb	r2, [r3, #1]
 800efc4:	4b2a      	ldr	r3, [pc, #168]	; (800f070 <McpsIndication+0xc4>)
 800efc6:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800efc8:	4b29      	ldr	r3, [pc, #164]	; (800f070 <McpsIndication+0xc4>)
 800efca:	785b      	ldrb	r3, [r3, #1]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d14b      	bne.n	800f068 <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	791b      	ldrb	r3, [r3, #4]
 800efd4:	b25a      	sxtb	r2, r3
 800efd6:	4b26      	ldr	r3, [pc, #152]	; (800f070 <McpsIndication+0xc4>)
 800efd8:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800efe0:	b25a      	sxtb	r2, r3
 800efe2:	4b23      	ldr	r3, [pc, #140]	; (800f070 <McpsIndication+0xc4>)
 800efe4:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800efec:	4b20      	ldr	r3, [pc, #128]	; (800f070 <McpsIndication+0xc4>)
 800efee:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	78da      	ldrb	r2, [r3, #3]
 800eff4:	4b1e      	ldr	r3, [pc, #120]	; (800f070 <McpsIndication+0xc4>)
 800eff6:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	691b      	ldr	r3, [r3, #16]
 800effc:	4a1c      	ldr	r2, [pc, #112]	; (800f070 <McpsIndication+0xc4>)
 800effe:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	78db      	ldrb	r3, [r3, #3]
 800f004:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	7b1b      	ldrb	r3, [r3, #12]
 800f00a:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	689b      	ldr	r3, [r3, #8]
 800f010:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800f012:	4b18      	ldr	r3, [pc, #96]	; (800f074 <McpsIndication+0xc8>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d007      	beq.n	800f02c <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800f01c:	4b15      	ldr	r3, [pc, #84]	; (800f074 <McpsIndication+0xc8>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f022:	f107 0210 	add.w	r2, r7, #16
 800f026:	4912      	ldr	r1, [pc, #72]	; (800f070 <McpsIndication+0xc4>)
 800f028:	4610      	mov	r0, r2
 800f02a:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800f02c:	4b11      	ldr	r3, [pc, #68]	; (800f074 <McpsIndication+0xc8>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f032:	2b00      	cmp	r3, #0
 800f034:	d007      	beq.n	800f046 <McpsIndication+0x9a>
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	7e1b      	ldrb	r3, [r3, #24]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d003      	beq.n	800f046 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800f03e:	4b0d      	ldr	r3, [pc, #52]	; (800f074 <McpsIndication+0xc8>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f044:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800f046:	6879      	ldr	r1, [r7, #4]
 800f048:	2001      	movs	r0, #1
 800f04a:	f000 f98f 	bl	800f36c <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800f04e:	f107 030f 	add.w	r3, r7, #15
 800f052:	4618      	mov	r0, r3
 800f054:	f7ff ff10 	bl	800ee78 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	795b      	ldrb	r3, [r3, #5]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d004      	beq.n	800f06a <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 800f060:	4b05      	ldr	r3, [pc, #20]	; (800f078 <McpsIndication+0xcc>)
 800f062:	2201      	movs	r2, #1
 800f064:	701a      	strb	r2, [r3, #0]
 800f066:	e000      	b.n	800f06a <McpsIndication+0xbe>
        return;
 800f068:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800f06a:	3718      	adds	r7, #24
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}
 800f070:	200000bc 	.word	0x200000bc
 800f074:	200006d0 	.word	0x200006d0
 800f078:	20000700 	.word	0x20000700

0800f07c <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b08c      	sub	sp, #48	; 0x30
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800f084:	4b49      	ldr	r3, [pc, #292]	; (800f1ac <MlmeConfirm+0x130>)
 800f086:	2200      	movs	r2, #0
 800f088:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	785a      	ldrb	r2, [r3, #1]
 800f08e:	4b47      	ldr	r3, [pc, #284]	; (800f1ac <MlmeConfirm+0x130>)
 800f090:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800f092:	4b47      	ldr	r3, [pc, #284]	; (800f1b0 <MlmeConfirm+0x134>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d004      	beq.n	800f0a6 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800f09c:	4b44      	ldr	r3, [pc, #272]	; (800f1b0 <MlmeConfirm+0x134>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0a2:	4842      	ldr	r0, [pc, #264]	; (800f1ac <MlmeConfirm+0x130>)
 800f0a4:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800f0a6:	6879      	ldr	r1, [r7, #4]
 800f0a8:	2002      	movs	r0, #2
 800f0aa:	f000 f95f 	bl	800f36c <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	781b      	ldrb	r3, [r3, #0]
 800f0b2:	3b01      	subs	r3, #1
 800f0b4:	2b0b      	cmp	r3, #11
 800f0b6:	d872      	bhi.n	800f19e <MlmeConfirm+0x122>
 800f0b8:	a201      	add	r2, pc, #4	; (adr r2, 800f0c0 <MlmeConfirm+0x44>)
 800f0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0be:	bf00      	nop
 800f0c0:	0800f0f1 	.word	0x0800f0f1
 800f0c4:	0800f19f 	.word	0x0800f19f
 800f0c8:	0800f19f 	.word	0x0800f19f
 800f0cc:	0800f19f 	.word	0x0800f19f
 800f0d0:	0800f16d 	.word	0x0800f16d
 800f0d4:	0800f19f 	.word	0x0800f19f
 800f0d8:	0800f19f 	.word	0x0800f19f
 800f0dc:	0800f19f 	.word	0x0800f19f
 800f0e0:	0800f19f 	.word	0x0800f19f
 800f0e4:	0800f19f 	.word	0x0800f19f
 800f0e8:	0800f185 	.word	0x0800f185
 800f0ec:	0800f19f 	.word	0x0800f19f
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800f0f0:	2306      	movs	r3, #6
 800f0f2:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800f0f4:	f107 0308 	add.w	r3, r7, #8
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f004 fed9 	bl	8013eb0 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800f0fe:	4b2d      	ldr	r3, [pc, #180]	; (800f1b4 <MlmeConfirm+0x138>)
 800f100:	79db      	ldrb	r3, [r3, #7]
 800f102:	68fa      	ldr	r2, [r7, #12]
 800f104:	4611      	mov	r1, r2
 800f106:	4618      	mov	r0, r3
 800f108:	f7ff fa78 	bl	800e5fc <SecureElementSetDevAddr>
 800f10c:	4603      	mov	r3, r0
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d102      	bne.n	800f118 <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	4a28      	ldr	r2, [pc, #160]	; (800f1b8 <MlmeConfirm+0x13c>)
 800f116:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800f118:	4828      	ldr	r0, [pc, #160]	; (800f1bc <MlmeConfirm+0x140>)
 800f11a:	f7ff fecd 	bl	800eeb8 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800f11e:	4828      	ldr	r0, [pc, #160]	; (800f1c0 <MlmeConfirm+0x144>)
 800f120:	f000 fa74 	bl	800f60c <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800f124:	4b21      	ldr	r3, [pc, #132]	; (800f1ac <MlmeConfirm+0x130>)
 800f126:	785b      	ldrb	r3, [r3, #1]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d108      	bne.n	800f13e <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800f12c:	4b21      	ldr	r3, [pc, #132]	; (800f1b4 <MlmeConfirm+0x138>)
 800f12e:	2200      	movs	r2, #0
 800f130:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800f132:	4b24      	ldr	r3, [pc, #144]	; (800f1c4 <MlmeConfirm+0x148>)
 800f134:	785b      	ldrb	r3, [r3, #1]
 800f136:	4618      	mov	r0, r3
 800f138:	f7ff fe16 	bl	800ed68 <LmHandlerRequestClass>
 800f13c:	e002      	b.n	800f144 <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800f13e:	4b1d      	ldr	r3, [pc, #116]	; (800f1b4 <MlmeConfirm+0x138>)
 800f140:	22ff      	movs	r2, #255	; 0xff
 800f142:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800f144:	4b1a      	ldr	r3, [pc, #104]	; (800f1b0 <MlmeConfirm+0x134>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d004      	beq.n	800f158 <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800f14e:	4b18      	ldr	r3, [pc, #96]	; (800f1b0 <MlmeConfirm+0x134>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f154:	4817      	ldr	r0, [pc, #92]	; (800f1b4 <MlmeConfirm+0x138>)
 800f156:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800f158:	4b14      	ldr	r3, [pc, #80]	; (800f1ac <MlmeConfirm+0x130>)
 800f15a:	785b      	ldrb	r3, [r3, #1]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d120      	bne.n	800f1a2 <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800f160:	4b14      	ldr	r3, [pc, #80]	; (800f1b4 <MlmeConfirm+0x138>)
 800f162:	79db      	ldrb	r3, [r3, #7]
 800f164:	4618      	mov	r0, r3
 800f166:	f7fe fff1 	bl	800e14c <SecureElementPrintSessionKeys>
                }
            }
            break;
 800f16a:	e01a      	b.n	800f1a2 <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800f16c:	4b16      	ldr	r3, [pc, #88]	; (800f1c8 <MlmeConfirm+0x14c>)
 800f16e:	2201      	movs	r2, #1
 800f170:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	7a1a      	ldrb	r2, [r3, #8]
 800f176:	4b14      	ldr	r3, [pc, #80]	; (800f1c8 <MlmeConfirm+0x14c>)
 800f178:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	7a5a      	ldrb	r2, [r3, #9]
 800f17e:	4b12      	ldr	r3, [pc, #72]	; (800f1c8 <MlmeConfirm+0x14c>)
 800f180:	74da      	strb	r2, [r3, #19]
            }
            break;
 800f182:	e00f      	b.n	800f1a4 <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	785b      	ldrb	r3, [r3, #1]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d105      	bne.n	800f198 <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800f18c:	4b0d      	ldr	r3, [pc, #52]	; (800f1c4 <MlmeConfirm+0x148>)
 800f18e:	7c1b      	ldrb	r3, [r3, #16]
 800f190:	4618      	mov	r0, r3
 800f192:	f7ff fddd 	bl	800ed50 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800f196:	e005      	b.n	800f1a4 <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 800f198:	f7ff fdbe 	bl	800ed18 <LmHandlerDeviceTimeReq>
            break;
 800f19c:	e002      	b.n	800f1a4 <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800f19e:	bf00      	nop
 800f1a0:	e000      	b.n	800f1a4 <MlmeConfirm+0x128>
            break;
 800f1a2:	bf00      	nop
    }
}
 800f1a4:	bf00      	nop
 800f1a6:	3730      	adds	r7, #48	; 0x30
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}
 800f1ac:	200000a0 	.word	0x200000a0
 800f1b0:	200006d0 	.word	0x200006d0
 800f1b4:	20000094 	.word	0x20000094
 800f1b8:	2000067c 	.word	0x2000067c
 800f1bc:	20000098 	.word	0x20000098
 800f1c0:	20000099 	.word	0x20000099
 800f1c4:	200006b8 	.word	0x200006b8
 800f1c8:	200000bc 	.word	0x200000bc

0800f1cc <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b082      	sub	sp, #8
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
 800f1d4:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800f1d6:	4b20      	ldr	r3, [pc, #128]	; (800f258 <MlmeIndication+0x8c>)
 800f1d8:	2200      	movs	r2, #0
 800f1da:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	785a      	ldrb	r2, [r3, #1]
 800f1e0:	4b1d      	ldr	r3, [pc, #116]	; (800f258 <MlmeIndication+0x8c>)
 800f1e2:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	789b      	ldrb	r3, [r3, #2]
 800f1e8:	b25a      	sxtb	r2, r3
 800f1ea:	4b1b      	ldr	r3, [pc, #108]	; (800f258 <MlmeIndication+0x8c>)
 800f1ec:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f1f4:	b25a      	sxtb	r2, r3
 800f1f6:	4b18      	ldr	r3, [pc, #96]	; (800f258 <MlmeIndication+0x8c>)
 800f1f8:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800f200:	4b15      	ldr	r3, [pc, #84]	; (800f258 <MlmeIndication+0x8c>)
 800f202:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	78da      	ldrb	r2, [r3, #3]
 800f208:	4b13      	ldr	r3, [pc, #76]	; (800f258 <MlmeIndication+0x8c>)
 800f20a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	685b      	ldr	r3, [r3, #4]
 800f210:	4a11      	ldr	r2, [pc, #68]	; (800f258 <MlmeIndication+0x8c>)
 800f212:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800f214:	4b11      	ldr	r3, [pc, #68]	; (800f25c <MlmeIndication+0x90>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d00d      	beq.n	800f23a <MlmeIndication+0x6e>
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	781b      	ldrb	r3, [r3, #0]
 800f222:	2b0a      	cmp	r3, #10
 800f224:	d009      	beq.n	800f23a <MlmeIndication+0x6e>
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	781b      	ldrb	r3, [r3, #0]
 800f22a:	2b0e      	cmp	r3, #14
 800f22c:	d005      	beq.n	800f23a <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800f22e:	4b0b      	ldr	r3, [pc, #44]	; (800f25c <MlmeIndication+0x90>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f234:	4908      	ldr	r1, [pc, #32]	; (800f258 <MlmeIndication+0x8c>)
 800f236:	2000      	movs	r0, #0
 800f238:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800f23a:	6879      	ldr	r1, [r7, #4]
 800f23c:	2003      	movs	r0, #3
 800f23e:	f000 f895 	bl	800f36c <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	781b      	ldrb	r3, [r3, #0]
 800f246:	2b0a      	cmp	r3, #10
 800f248:	d001      	beq.n	800f24e <MlmeIndication+0x82>
 800f24a:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800f24c:	e000      	b.n	800f250 <MlmeIndication+0x84>
            break;
 800f24e:	bf00      	nop
    }
}
 800f250:	bf00      	nop
 800f252:	3708      	adds	r7, #8
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}
 800f258:	200000bc 	.word	0x200000bc
 800f25c:	200006d0 	.word	0x200006d0

0800f260 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b084      	sub	sp, #16
 800f264:	af00      	add	r7, sp, #0
 800f266:	4603      	mov	r3, r0
 800f268:	6039      	str	r1, [r7, #0]
 800f26a:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800f26c:	2300      	movs	r3, #0
 800f26e:	60fb      	str	r3, [r7, #12]
    switch( id )
 800f270:	79fb      	ldrb	r3, [r7, #7]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d104      	bne.n	800f280 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800f276:	f000 fa8b 	bl	800f790 <LmhpCompliancePackageFactory>
 800f27a:	4603      	mov	r3, r0
 800f27c:	60fb      	str	r3, [r7, #12]
                break;
 800f27e:	e00d      	b.n	800f29c <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800f280:	f107 020c 	add.w	r2, r7, #12
 800f284:	79fb      	ldrb	r3, [r7, #7]
 800f286:	4611      	mov	r1, r2
 800f288:	4618      	mov	r0, r3
 800f28a:	f000 ff73 	bl	8010174 <LmhpPackagesRegister>
 800f28e:	4603      	mov	r3, r0
 800f290:	2b00      	cmp	r3, #0
 800f292:	d002      	beq.n	800f29a <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800f294:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f298:	e03b      	b.n	800f312 <LmHandlerPackageRegister+0xb2>
                }
                break;
 800f29a:	bf00      	nop
            }
    }
    if( package != NULL )
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d035      	beq.n	800f30e <LmHandlerPackageRegister+0xae>
    {
        LmHandlerPackages[id] = package;
 800f2a2:	79fb      	ldrb	r3, [r7, #7]
 800f2a4:	68fa      	ldr	r2, [r7, #12]
 800f2a6:	491d      	ldr	r1, [pc, #116]	; (800f31c <LmHandlerPackageRegister+0xbc>)
 800f2a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800f2ac:	79fb      	ldrb	r3, [r7, #7]
 800f2ae:	4a1b      	ldr	r2, [pc, #108]	; (800f31c <LmHandlerPackageRegister+0xbc>)
 800f2b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2b4:	4a1a      	ldr	r2, [pc, #104]	; (800f320 <LmHandlerPackageRegister+0xc0>)
 800f2b6:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800f2b8:	4b1a      	ldr	r3, [pc, #104]	; (800f324 <LmHandlerPackageRegister+0xc4>)
 800f2ba:	681a      	ldr	r2, [r3, #0]
 800f2bc:	79fb      	ldrb	r3, [r7, #7]
 800f2be:	4917      	ldr	r1, [pc, #92]	; (800f31c <LmHandlerPackageRegister+0xbc>)
 800f2c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f2c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800f2c6:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800f2c8:	4b16      	ldr	r3, [pc, #88]	; (800f324 <LmHandlerPackageRegister+0xc4>)
 800f2ca:	681a      	ldr	r2, [r3, #0]
 800f2cc:	79fb      	ldrb	r3, [r7, #7]
 800f2ce:	4913      	ldr	r1, [pc, #76]	; (800f31c <LmHandlerPackageRegister+0xbc>)
 800f2d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f2d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800f2d6:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800f2d8:	79fb      	ldrb	r3, [r7, #7]
 800f2da:	4a10      	ldr	r2, [pc, #64]	; (800f31c <LmHandlerPackageRegister+0xbc>)
 800f2dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2e0:	4a11      	ldr	r2, [pc, #68]	; (800f328 <LmHandlerPackageRegister+0xc8>)
 800f2e2:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800f2e4:	4b0f      	ldr	r3, [pc, #60]	; (800f324 <LmHandlerPackageRegister+0xc4>)
 800f2e6:	681a      	ldr	r2, [r3, #0]
 800f2e8:	79fb      	ldrb	r3, [r7, #7]
 800f2ea:	490c      	ldr	r1, [pc, #48]	; (800f31c <LmHandlerPackageRegister+0xbc>)
 800f2ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f2f0:	6992      	ldr	r2, [r2, #24]
 800f2f2:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800f2f4:	79fb      	ldrb	r3, [r7, #7]
 800f2f6:	4a09      	ldr	r2, [pc, #36]	; (800f31c <LmHandlerPackageRegister+0xbc>)
 800f2f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2fc:	685b      	ldr	r3, [r3, #4]
 800f2fe:	4a0b      	ldr	r2, [pc, #44]	; (800f32c <LmHandlerPackageRegister+0xcc>)
 800f300:	6851      	ldr	r1, [r2, #4]
 800f302:	4a0a      	ldr	r2, [pc, #40]	; (800f32c <LmHandlerPackageRegister+0xcc>)
 800f304:	7852      	ldrb	r2, [r2, #1]
 800f306:	6838      	ldr	r0, [r7, #0]
 800f308:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800f30a:	2300      	movs	r3, #0
 800f30c:	e001      	b.n	800f312 <LmHandlerPackageRegister+0xb2>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800f30e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800f312:	4618      	mov	r0, r3
 800f314:	3710      	adds	r7, #16
 800f316:	46bd      	mov	sp, r7
 800f318:	bd80      	pop	{r7, pc}
 800f31a:	bf00      	nop
 800f31c:	200006a4 	.word	0x200006a4
 800f320:	0800ea01 	.word	0x0800ea01
 800f324:	200006d0 	.word	0x200006d0
 800f328:	0800ed19 	.word	0x0800ed19
 800f32c:	200000d0 	.word	0x200000d0

0800f330 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b082      	sub	sp, #8
 800f334:	af00      	add	r7, sp, #0
 800f336:	4603      	mov	r3, r0
 800f338:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800f33a:	79fb      	ldrb	r3, [r7, #7]
 800f33c:	2b04      	cmp	r3, #4
 800f33e:	d80e      	bhi.n	800f35e <LmHandlerPackageIsInitialized+0x2e>
 800f340:	79fb      	ldrb	r3, [r7, #7]
 800f342:	4a09      	ldr	r2, [pc, #36]	; (800f368 <LmHandlerPackageIsInitialized+0x38>)
 800f344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f348:	689b      	ldr	r3, [r3, #8]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d007      	beq.n	800f35e <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800f34e:	79fb      	ldrb	r3, [r7, #7]
 800f350:	4a05      	ldr	r2, [pc, #20]	; (800f368 <LmHandlerPackageIsInitialized+0x38>)
 800f352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f356:	689b      	ldr	r3, [r3, #8]
 800f358:	4798      	blx	r3
 800f35a:	4603      	mov	r3, r0
 800f35c:	e000      	b.n	800f360 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800f35e:	2300      	movs	r3, #0
    }
}
 800f360:	4618      	mov	r0, r3
 800f362:	3708      	adds	r7, #8
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}
 800f368:	200006a4 	.word	0x200006a4

0800f36c <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b084      	sub	sp, #16
 800f370:	af00      	add	r7, sp, #0
 800f372:	4603      	mov	r3, r0
 800f374:	6039      	str	r1, [r7, #0]
 800f376:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800f378:	2300      	movs	r3, #0
 800f37a:	73fb      	strb	r3, [r7, #15]
 800f37c:	e067      	b.n	800f44e <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800f37e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f382:	4a37      	ldr	r2, [pc, #220]	; (800f460 <LmHandlerPackagesNotify+0xf4>)
 800f384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d05a      	beq.n	800f442 <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800f38c:	79fb      	ldrb	r3, [r7, #7]
 800f38e:	2b03      	cmp	r3, #3
 800f390:	d84e      	bhi.n	800f430 <LmHandlerPackagesNotify+0xc4>
 800f392:	a201      	add	r2, pc, #4	; (adr r2, 800f398 <LmHandlerPackagesNotify+0x2c>)
 800f394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f398:	0800f3a9 	.word	0x0800f3a9
 800f39c:	0800f3cb 	.word	0x0800f3cb
 800f3a0:	0800f3ed 	.word	0x0800f3ed
 800f3a4:	0800f40f 	.word	0x0800f40f
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800f3a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3ac:	4a2c      	ldr	r2, [pc, #176]	; (800f460 <LmHandlerPackagesNotify+0xf4>)
 800f3ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3b2:	699b      	ldr	r3, [r3, #24]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d03d      	beq.n	800f434 <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800f3b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3bc:	4a28      	ldr	r2, [pc, #160]	; (800f460 <LmHandlerPackagesNotify+0xf4>)
 800f3be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3c2:	699b      	ldr	r3, [r3, #24]
 800f3c4:	6838      	ldr	r0, [r7, #0]
 800f3c6:	4798      	blx	r3
                        }
                        break;
 800f3c8:	e034      	b.n	800f434 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800f3ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3ce:	4a24      	ldr	r2, [pc, #144]	; (800f460 <LmHandlerPackagesNotify+0xf4>)
 800f3d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3d4:	69db      	ldr	r3, [r3, #28]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d02e      	beq.n	800f438 <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800f3da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3de:	4a20      	ldr	r2, [pc, #128]	; (800f460 <LmHandlerPackagesNotify+0xf4>)
 800f3e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3e4:	69db      	ldr	r3, [r3, #28]
 800f3e6:	6838      	ldr	r0, [r7, #0]
 800f3e8:	4798      	blx	r3
                        }
                        break;
 800f3ea:	e025      	b.n	800f438 <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800f3ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3f0:	4a1b      	ldr	r2, [pc, #108]	; (800f460 <LmHandlerPackagesNotify+0xf4>)
 800f3f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3f6:	6a1b      	ldr	r3, [r3, #32]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d01f      	beq.n	800f43c <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800f3fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f400:	4a17      	ldr	r2, [pc, #92]	; (800f460 <LmHandlerPackagesNotify+0xf4>)
 800f402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f406:	6a1b      	ldr	r3, [r3, #32]
 800f408:	6838      	ldr	r0, [r7, #0]
 800f40a:	4798      	blx	r3
                        }
                        break;
 800f40c:	e016      	b.n	800f43c <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800f40e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f412:	4a13      	ldr	r2, [pc, #76]	; (800f460 <LmHandlerPackagesNotify+0xf4>)
 800f414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d010      	beq.n	800f440 <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800f41e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f422:	4a0f      	ldr	r2, [pc, #60]	; (800f460 <LmHandlerPackagesNotify+0xf4>)
 800f424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f42a:	6838      	ldr	r0, [r7, #0]
 800f42c:	4798      	blx	r3
                        }
                        break;
 800f42e:	e007      	b.n	800f440 <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 800f430:	bf00      	nop
 800f432:	e006      	b.n	800f442 <LmHandlerPackagesNotify+0xd6>
                        break;
 800f434:	bf00      	nop
 800f436:	e004      	b.n	800f442 <LmHandlerPackagesNotify+0xd6>
                        break;
 800f438:	bf00      	nop
 800f43a:	e002      	b.n	800f442 <LmHandlerPackagesNotify+0xd6>
                        break;
 800f43c:	bf00      	nop
 800f43e:	e000      	b.n	800f442 <LmHandlerPackagesNotify+0xd6>
                        break;
 800f440:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800f442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f446:	b2db      	uxtb	r3, r3
 800f448:	3301      	adds	r3, #1
 800f44a:	b2db      	uxtb	r3, r3
 800f44c:	73fb      	strb	r3, [r7, #15]
 800f44e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f452:	2b04      	cmp	r3, #4
 800f454:	dd93      	ble.n	800f37e <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800f456:	bf00      	nop
 800f458:	bf00      	nop
 800f45a:	3710      	adds	r7, #16
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}
 800f460:	200006a4 	.word	0x200006a4

0800f464 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b082      	sub	sp, #8
 800f468:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800f46a:	2300      	movs	r3, #0
 800f46c:	71fb      	strb	r3, [r7, #7]
 800f46e:	e018      	b.n	800f4a2 <LmHandlerPackageIsTxPending+0x3e>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 800f470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f474:	4a0f      	ldr	r2, [pc, #60]	; (800f4b4 <LmHandlerPackageIsTxPending+0x50>)
 800f476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d00b      	beq.n	800f496 <LmHandlerPackageIsTxPending+0x32>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800f47e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f482:	4a0c      	ldr	r2, [pc, #48]	; (800f4b4 <LmHandlerPackageIsTxPending+0x50>)
 800f484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f488:	68db      	ldr	r3, [r3, #12]
 800f48a:	4798      	blx	r3
 800f48c:	4603      	mov	r3, r0
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d001      	beq.n	800f496 <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800f492:	2301      	movs	r3, #1
 800f494:	e00a      	b.n	800f4ac <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800f496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f49a:	b2db      	uxtb	r3, r3
 800f49c:	3301      	adds	r3, #1
 800f49e:	b2db      	uxtb	r3, r3
 800f4a0:	71fb      	strb	r3, [r7, #7]
 800f4a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f4a6:	2b04      	cmp	r3, #4
 800f4a8:	dde2      	ble.n	800f470 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800f4aa:	2300      	movs	r3, #0
}
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	3708      	adds	r7, #8
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}
 800f4b4:	200006a4 	.word	0x200006a4

0800f4b8 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b082      	sub	sp, #8
 800f4bc:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800f4be:	2300      	movs	r3, #0
 800f4c0:	71fb      	strb	r3, [r7, #7]
 800f4c2:	e022      	b.n	800f50a <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800f4c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f4c8:	4a14      	ldr	r2, [pc, #80]	; (800f51c <LmHandlerPackagesProcess+0x64>)
 800f4ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d015      	beq.n	800f4fe <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800f4d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f4d6:	4a11      	ldr	r2, [pc, #68]	; (800f51c <LmHandlerPackagesProcess+0x64>)
 800f4d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4dc:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d00d      	beq.n	800f4fe <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800f4e2:	79fb      	ldrb	r3, [r7, #7]
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f7ff ff23 	bl	800f330 <LmHandlerPackageIsInitialized>
 800f4ea:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d006      	beq.n	800f4fe <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800f4f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f4f4:	4a09      	ldr	r2, [pc, #36]	; (800f51c <LmHandlerPackagesProcess+0x64>)
 800f4f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4fa:	691b      	ldr	r3, [r3, #16]
 800f4fc:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800f4fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f502:	b2db      	uxtb	r3, r3
 800f504:	3301      	adds	r3, #1
 800f506:	b2db      	uxtb	r3, r3
 800f508:	71fb      	strb	r3, [r7, #7]
 800f50a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f50e:	2b04      	cmp	r3, #4
 800f510:	ddd8      	ble.n	800f4c4 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800f512:	bf00      	nop
 800f514:	bf00      	nop
 800f516:	3708      	adds	r7, #8
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}
 800f51c:	200006a4 	.word	0x200006a4

0800f520 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b082      	sub	sp, #8
 800f524:	af00      	add	r7, sp, #0
 800f526:	4603      	mov	r3, r0
 800f528:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800f52a:	4a09      	ldr	r2, [pc, #36]	; (800f550 <LmHandlerOnTxFrameCtrlChanged+0x30>)
 800f52c:	79fb      	ldrb	r3, [r7, #7]
 800f52e:	70d3      	strb	r3, [r2, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 800f530:	4b08      	ldr	r3, [pc, #32]	; (800f554 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f536:	2b00      	cmp	r3, #0
 800f538:	d005      	beq.n	800f546 <LmHandlerOnTxFrameCtrlChanged+0x26>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800f53a:	4b06      	ldr	r3, [pc, #24]	; (800f554 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f540:	79fa      	ldrb	r2, [r7, #7]
 800f542:	4610      	mov	r0, r2
 800f544:	4798      	blx	r3
    }
}
 800f546:	bf00      	nop
 800f548:	3708      	adds	r7, #8
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}
 800f54e:	bf00      	nop
 800f550:	200006b8 	.word	0x200006b8
 800f554:	200006d0 	.word	0x200006d0

0800f558 <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b082      	sub	sp, #8
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	4603      	mov	r3, r0
 800f560:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800f562:	4a09      	ldr	r2, [pc, #36]	; (800f588 <LmHandlerOnPingSlotPeriodicityChanged+0x30>)
 800f564:	79fb      	ldrb	r3, [r7, #7]
 800f566:	7413      	strb	r3, [r2, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 800f568:	4b08      	ldr	r3, [pc, #32]	; (800f58c <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d005      	beq.n	800f57e <LmHandlerOnPingSlotPeriodicityChanged+0x26>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 800f572:	4b06      	ldr	r3, [pc, #24]	; (800f58c <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f578:	79fa      	ldrb	r2, [r7, #7]
 800f57a:	4610      	mov	r0, r2
 800f57c:	4798      	blx	r3
    }
}
 800f57e:	bf00      	nop
 800f580:	3708      	adds	r7, #8
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}
 800f586:	bf00      	nop
 800f588:	200006b8 	.word	0x200006b8
 800f58c:	200006d0 	.word	0x200006d0

0800f590 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 800f590:	b480      	push	{r7}
 800f592:	b083      	sub	sp, #12
 800f594:	af00      	add	r7, sp, #0
 800f596:	4603      	mov	r3, r0
 800f598:	6039      	str	r1, [r7, #0]
 800f59a:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d102      	bne.n	800f5a8 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800f5a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f5a6:	e00e      	b.n	800f5c6 <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 800f5a8:	79fb      	ldrb	r3, [r7, #7]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d002      	beq.n	800f5b4 <LmHandlerGetVersion+0x24>
 800f5ae:	2b01      	cmp	r3, #1
 800f5b0:	d004      	beq.n	800f5bc <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 800f5b2:	e007      	b.n	800f5c4 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	4a06      	ldr	r2, [pc, #24]	; (800f5d0 <LmHandlerGetVersion+0x40>)
 800f5b8:	601a      	str	r2, [r3, #0]
            break;
 800f5ba:	e003      	b.n	800f5c4 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	4a05      	ldr	r2, [pc, #20]	; (800f5d4 <LmHandlerGetVersion+0x44>)
 800f5c0:	601a      	str	r2, [r3, #0]
            break;
 800f5c2:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800f5c4:	2300      	movs	r3, #0
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	370c      	adds	r7, #12
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bc80      	pop	{r7}
 800f5ce:	4770      	bx	lr
 800f5d0:	01000400 	.word	0x01000400
 800f5d4:	02010001 	.word	0x02010001

0800f5d8 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800f5dc:	f005 fce0 	bl	8014fa0 <LoRaMacDeInitialization>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d101      	bne.n	800f5ea <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	e001      	b.n	800f5ee <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f5ea:	f06f 0301 	mvn.w	r3, #1
    }
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	bd80      	pop	{r7, pc}

0800f5f2 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800f5f2:	b580      	push	{r7, lr}
 800f5f4:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800f5f6:	f004 fb93 	bl	8013d20 <LoRaMacHalt>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d101      	bne.n	800f604 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800f600:	2300      	movs	r3, #0
 800f602:	e001      	b.n	800f608 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f604:	f06f 0301 	mvn.w	r3, #1
    }
}
 800f608:	4618      	mov	r0, r3
 800f60a:	bd80      	pop	{r7, pc}

0800f60c <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b08c      	sub	sp, #48	; 0x30
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d102      	bne.n	800f620 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800f61a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f61e:	e016      	b.n	800f64e <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800f620:	2321      	movs	r3, #33	; 0x21
 800f622:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800f624:	f107 0308 	add.w	r3, r7, #8
 800f628:	4618      	mov	r0, r3
 800f62a:	f004 fc41 	bl	8013eb0 <LoRaMacMibGetRequestConfirm>
 800f62e:	4603      	mov	r3, r0
 800f630:	2b00      	cmp	r3, #0
 800f632:	d002      	beq.n	800f63a <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800f634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f638:	e009      	b.n	800f64e <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800f63a:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	f993 2000 	ldrsb.w	r2, [r3]
 800f648:	4b03      	ldr	r3, [pc, #12]	; (800f658 <LmHandlerGetTxPower+0x4c>)
 800f64a:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800f64c:	2300      	movs	r3, #0
}
 800f64e:	4618      	mov	r0, r3
 800f650:	3730      	adds	r7, #48	; 0x30
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}
 800f656:	bf00      	nop
 800f658:	200006b8 	.word	0x200006b8

0800f65c <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b08e      	sub	sp, #56	; 0x38
 800f660:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800f662:	2300      	movs	r3, #0
 800f664:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 800f668:	2300      	movs	r3, #0
 800f66a:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 800f66c:	f7ff ffc1 	bl	800f5f2 <LmHandlerHalt>
 800f670:	4603      	mov	r3, r0
 800f672:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800f676:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d12f      	bne.n	800f6de <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800f67e:	f000 f859 	bl	800f734 <NvmDataMgmtStoreBegin>
 800f682:	6338      	str	r0, [r7, #48]	; 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 800f684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f686:	f113 0f02 	cmn.w	r3, #2
 800f68a:	d103      	bne.n	800f694 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800f68c:	23f8      	movs	r3, #248	; 0xf8
 800f68e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f692:	e01c      	b.n	800f6ce <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800f694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f696:	2b00      	cmp	r3, #0
 800f698:	d104      	bne.n	800f6a4 <LmHandlerNvmDataStore+0x48>
 800f69a:	4b1b      	ldr	r3, [pc, #108]	; (800f708 <LmHandlerNvmDataStore+0xac>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	695b      	ldr	r3, [r3, #20]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d103      	bne.n	800f6ac <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800f6a4:	23ff      	movs	r3, #255	; 0xff
 800f6a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f6aa:	e010      	b.n	800f6ce <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 800f6ac:	2327      	movs	r3, #39	; 0x27
 800f6ae:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800f6b0:	463b      	mov	r3, r7
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f004 fbfc 	bl	8013eb0 <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	62fb      	str	r3, [r7, #44]	; 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 800f6bc:	f44f 63ba 	mov.w	r3, #1488	; 0x5d0
 800f6c0:	62bb      	str	r3, [r7, #40]	; 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 800f6c2:	4b11      	ldr	r3, [pc, #68]	; (800f708 <LmHandlerNvmDataStore+0xac>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	695b      	ldr	r3, [r3, #20]
 800f6c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f6ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6cc:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800f6ce:	f000 f847 	bl	800f760 <NvmDataMgmtStoreEnd>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d002      	beq.n	800f6de <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800f6d8:	23ff      	movs	r3, #255	; 0xff
 800f6da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800f6de:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d109      	bne.n	800f6fa <LmHandlerNvmDataStore+0x9e>
 800f6e6:	4b08      	ldr	r3, [pc, #32]	; (800f708 <LmHandlerNvmDataStore+0xac>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	69db      	ldr	r3, [r3, #28]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d004      	beq.n	800f6fa <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800f6f0:	4b05      	ldr	r3, [pc, #20]	; (800f708 <LmHandlerNvmDataStore+0xac>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	69db      	ldr	r3, [r3, #28]
 800f6f6:	2001      	movs	r0, #1
 800f6f8:	4798      	blx	r3
    }

    return lmhStatus;
 800f6fa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800f6fe:	4618      	mov	r0, r3
 800f700:	3738      	adds	r7, #56	; 0x38
 800f702:	46bd      	mov	sp, r7
 800f704:	bd80      	pop	{r7, pc}
 800f706:	bf00      	nop
 800f708:	200006d0 	.word	0x200006d0

0800f70c <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800f70c:	b480      	push	{r7}
 800f70e:	b083      	sub	sp, #12
 800f710:	af00      	add	r7, sp, #0
 800f712:	4603      	mov	r3, r0
 800f714:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800f716:	4b06      	ldr	r3, [pc, #24]	; (800f730 <NvmDataMgmtEvent+0x24>)
 800f718:	881a      	ldrh	r2, [r3, #0]
 800f71a:	88fb      	ldrh	r3, [r7, #6]
 800f71c:	4313      	orrs	r3, r2
 800f71e:	b29a      	uxth	r2, r3
 800f720:	4b03      	ldr	r3, [pc, #12]	; (800f730 <NvmDataMgmtEvent+0x24>)
 800f722:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800f724:	bf00      	nop
 800f726:	370c      	adds	r7, #12
 800f728:	46bd      	mov	sp, r7
 800f72a:	bc80      	pop	{r7}
 800f72c:	4770      	bx	lr
 800f72e:	bf00      	nop
 800f730:	200007f8 	.word	0x200007f8

0800f734 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800f734:	b580      	push	{r7, lr}
 800f736:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800f738:	4b08      	ldr	r3, [pc, #32]	; (800f75c <NvmDataMgmtStoreBegin+0x28>)
 800f73a:	881b      	ldrh	r3, [r3, #0]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d102      	bne.n	800f746 <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 800f740:	f06f 0301 	mvn.w	r3, #1
 800f744:	e008      	b.n	800f758 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800f746:	f004 fac3 	bl	8013cd0 <LoRaMacStop>
 800f74a:	4603      	mov	r3, r0
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d002      	beq.n	800f756 <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800f750:	f06f 0302 	mvn.w	r3, #2
 800f754:	e000      	b.n	800f758 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800f756:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800f758:	4618      	mov	r0, r3
 800f75a:	bd80      	pop	{r7, pc}
 800f75c:	200007f8 	.word	0x200007f8

0800f760 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800f760:	b580      	push	{r7, lr}
 800f762:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800f764:	4b03      	ldr	r3, [pc, #12]	; (800f774 <NvmDataMgmtStoreEnd+0x14>)
 800f766:	2200      	movs	r2, #0
 800f768:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800f76a:	f004 faa3 	bl	8013cb4 <LoRaMacStart>
    return NVM_DATA_OK;
 800f76e:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800f770:	4618      	mov	r0, r3
 800f772:	bd80      	pop	{r7, pc}
 800f774:	200007f8 	.word	0x200007f8

0800f778 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	af00      	add	r7, sp, #0
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800f77c:	2220      	movs	r2, #32
 800f77e:	2100      	movs	r1, #0
 800f780:	4802      	ldr	r0, [pc, #8]	; (800f78c <ClassBStatusReset+0x14>)
 800f782:	f00a f8b5 	bl	80198f0 <memset1>
}
 800f786:	bf00      	nop
 800f788:	bd80      	pop	{r7, pc}
 800f78a:	bf00      	nop
 800f78c:	20000810 	.word	0x20000810

0800f790 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  /* To be initialized by LmHandler */
    .OnSystemReset           = NULL,  /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800f790:	b480      	push	{r7}
 800f792:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800f794:	4b02      	ldr	r3, [pc, #8]	; (800f7a0 <LmhpCompliancePackageFactory+0x10>)
}
 800f796:	4618      	mov	r0, r3
 800f798:	46bd      	mov	sp, r7
 800f79a:	bc80      	pop	{r7}
 800f79c:	4770      	bx	lr
 800f79e:	bf00      	nop
 800f7a0:	200000d8 	.word	0x200000d8

0800f7a4 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b086      	sub	sp, #24
 800f7a8:	af02      	add	r7, sp, #8
 800f7aa:	60f8      	str	r0, [r7, #12]
 800f7ac:	60b9      	str	r1, [r7, #8]
 800f7ae:	4613      	mov	r3, r2
 800f7b0:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d018      	beq.n	800f7ea <LmhpComplianceInit+0x46>
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d015      	beq.n	800f7ea <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 800f7be:	4a19      	ldr	r2, [pc, #100]	; (800f824 <LmhpComplianceInit+0x80>)
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800f7c4:	4a18      	ldr	r2, [pc, #96]	; (800f828 <LmhpComplianceInit+0x84>)
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800f7ca:	4a17      	ldr	r2, [pc, #92]	; (800f828 <LmhpComplianceInit+0x84>)
 800f7cc:	79fb      	ldrb	r3, [r7, #7]
 800f7ce:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800f7d0:	4b15      	ldr	r3, [pc, #84]	; (800f828 <LmhpComplianceInit+0x84>)
 800f7d2:	2201      	movs	r2, #1
 800f7d4:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	9300      	str	r3, [sp, #0]
 800f7da:	4b14      	ldr	r3, [pc, #80]	; (800f82c <LmhpComplianceInit+0x88>)
 800f7dc:	2200      	movs	r2, #0
 800f7de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f7e2:	4813      	ldr	r0, [pc, #76]	; (800f830 <LmhpComplianceInit+0x8c>)
 800f7e4:	f00e f940 	bl	801da68 <UTIL_TIMER_Create>
 800f7e8:	e005      	b.n	800f7f6 <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800f7ea:	4b0e      	ldr	r3, [pc, #56]	; (800f824 <LmhpComplianceInit+0x80>)
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800f7f0:	4b0d      	ldr	r3, [pc, #52]	; (800f828 <LmhpComplianceInit+0x84>)
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800f7f6:	4b0c      	ldr	r3, [pc, #48]	; (800f828 <LmhpComplianceInit+0x84>)
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800f7fc:	f7ff ffbc 	bl	800f778 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800f800:	4b09      	ldr	r3, [pc, #36]	; (800f828 <LmhpComplianceInit+0x84>)
 800f802:	2200      	movs	r2, #0
 800f804:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800f806:	4b08      	ldr	r3, [pc, #32]	; (800f828 <LmhpComplianceInit+0x84>)
 800f808:	2200      	movs	r2, #0
 800f80a:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800f80c:	4b06      	ldr	r3, [pc, #24]	; (800f828 <LmhpComplianceInit+0x84>)
 800f80e:	2200      	movs	r2, #0
 800f810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800f814:	4b04      	ldr	r3, [pc, #16]	; (800f828 <LmhpComplianceInit+0x84>)
 800f816:	2200      	movs	r2, #0
 800f818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 800f81c:	bf00      	nop
 800f81e:	3710      	adds	r7, #16
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}
 800f824:	20000834 	.word	0x20000834
 800f828:	200007fc 	.word	0x200007fc
 800f82c:	0801012d 	.word	0x0801012d
 800f830:	20000838 	.word	0x20000838

0800f834 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800f834:	b480      	push	{r7}
 800f836:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800f838:	4b02      	ldr	r3, [pc, #8]	; (800f844 <LmhpComplianceIsInitialized+0x10>)
 800f83a:	781b      	ldrb	r3, [r3, #0]
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	46bd      	mov	sp, r7
 800f840:	bc80      	pop	{r7}
 800f842:	4770      	bx	lr
 800f844:	200007fc 	.word	0x200007fc

0800f848 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800f848:	b480      	push	{r7}
 800f84a:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800f84c:	4b02      	ldr	r3, [pc, #8]	; (800f858 <LmhpComplianceIsTxPending+0x10>)
 800f84e:	785b      	ldrb	r3, [r3, #1]
}
 800f850:	4618      	mov	r0, r3
 800f852:	46bd      	mov	sp, r7
 800f854:	bc80      	pop	{r7}
 800f856:	4770      	bx	lr
 800f858:	200007fc 	.word	0x200007fc

0800f85c <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800f85c:	b590      	push	{r4, r7, lr}
 800f85e:	b085      	sub	sp, #20
 800f860:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800f862:	4b33      	ldr	r3, [pc, #204]	; (800f930 <LmhpComplianceProcess+0xd4>)
 800f864:	785b      	ldrb	r3, [r3, #1]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d03e      	beq.n	800f8e8 <LmhpComplianceProcess+0x8c>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800f86a:	f00e fabb 	bl	801dde4 <UTIL_TIMER_GetCurrentTime>
 800f86e:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800f870:	4b2f      	ldr	r3, [pc, #188]	; (800f930 <LmhpComplianceProcess+0xd4>)
 800f872:	685c      	ldr	r4, [r3, #4]
 800f874:	f7ff f8ba 	bl	800e9ec <LmHandlerGetDutyCycleWaitTime>
 800f878:	4603      	mov	r3, r0
 800f87a:	4423      	add	r3, r4
 800f87c:	68fa      	ldr	r2, [r7, #12]
 800f87e:	429a      	cmp	r2, r3
 800f880:	d941      	bls.n	800f906 <LmhpComplianceProcess+0xaa>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800f882:	4b2b      	ldr	r3, [pc, #172]	; (800f930 <LmhpComplianceProcess+0xd4>)
 800f884:	7a9b      	ldrb	r3, [r3, #10]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d03d      	beq.n	800f906 <LmhpComplianceProcess+0xaa>
            {
                /* Answer commands */
                LmHandlerAppData_t appData =
 800f88a:	23e0      	movs	r3, #224	; 0xe0
 800f88c:	703b      	strb	r3, [r7, #0]
                {
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800f88e:	4b28      	ldr	r3, [pc, #160]	; (800f930 <LmhpComplianceProcess+0xd4>)
 800f890:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData =
 800f892:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800f894:	4b26      	ldr	r3, [pc, #152]	; (800f930 <LmhpComplianceProcess+0xd4>)
 800f896:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData =
 800f898:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };

                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800f89a:	23ff      	movs	r3, #255	; 0xff
 800f89c:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800f89e:	4b24      	ldr	r3, [pc, #144]	; (800f930 <LmhpComplianceProcess+0xd4>)
 800f8a0:	7a19      	ldrb	r1, [r3, #8]
 800f8a2:	463b      	mov	r3, r7
 800f8a4:	2201      	movs	r2, #1
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f7ff f968 	bl	800eb7c <LmHandlerSend>
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	72fb      	strb	r3, [r7, #11]
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 800f8b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d004      	beq.n	800f8c2 <LmhpComplianceProcess+0x66>
 800f8b8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f8bc:	f113 0f07 	cmn.w	r3, #7
 800f8c0:	d106      	bne.n	800f8d0 <LmhpComplianceProcess+0x74>
                {
                    ComplianceTestState.IsTxPending = false;
 800f8c2:	4b1b      	ldr	r3, [pc, #108]	; (800f930 <LmhpComplianceProcess+0xd4>)
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800f8c8:	4b19      	ldr	r3, [pc, #100]	; (800f930 <LmhpComplianceProcess+0xd4>)
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	729a      	strb	r2, [r3, #10]
 800f8ce:	e007      	b.n	800f8e0 <LmhpComplianceProcess+0x84>
                }
                else
                {
                    /* try to send the message again */
                    TimerSetValue( &ProcessTimer, 1500 );
 800f8d0:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800f8d4:	4817      	ldr	r0, [pc, #92]	; (800f934 <LmhpComplianceProcess+0xd8>)
 800f8d6:	f00e f9db 	bl	801dc90 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 800f8da:	4816      	ldr	r0, [pc, #88]	; (800f934 <LmhpComplianceProcess+0xd8>)
 800f8dc:	f00e f8fa 	bl	801dad4 <UTIL_TIMER_Start>
                }

                ComplianceTestState.TxPendingTimestamp = now;
 800f8e0:	4a13      	ldr	r2, [pc, #76]	; (800f930 <LmhpComplianceProcess+0xd4>)
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	6053      	str	r3, [r2, #4]
 800f8e6:	e00e      	b.n	800f906 <LmhpComplianceProcess+0xaa>
        }
    }
    else
    {
        /* If no Tx is pending process other commands */
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800f8e8:	4b11      	ldr	r3, [pc, #68]	; (800f930 <LmhpComplianceProcess+0xd4>)
 800f8ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d009      	beq.n	800f906 <LmhpComplianceProcess+0xaa>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800f8f2:	4b0f      	ldr	r3, [pc, #60]	; (800f930 <LmhpComplianceProcess+0xd4>)
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800f8fa:	4b0d      	ldr	r3, [pc, #52]	; (800f930 <LmhpComplianceProcess+0xd4>)
 800f8fc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800f900:	4618      	mov	r0, r3
 800f902:	f7ff fa31 	bl	800ed68 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800f906:	4b0a      	ldr	r3, [pc, #40]	; (800f930 <LmhpComplianceProcess+0xd4>)
 800f908:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d00a      	beq.n	800f926 <LmhpComplianceProcess+0xca>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800f910:	4b07      	ldr	r3, [pc, #28]	; (800f930 <LmhpComplianceProcess+0xd4>)
 800f912:	2200      	movs	r2, #0
 800f914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Call platform MCU reset API */
        if( CompliancePackage.OnSystemReset != NULL )
 800f918:	4b07      	ldr	r3, [pc, #28]	; (800f938 <LmhpComplianceProcess+0xdc>)
 800f91a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d002      	beq.n	800f926 <LmhpComplianceProcess+0xca>
        {
            CompliancePackage.OnSystemReset( );
 800f920:	4b05      	ldr	r3, [pc, #20]	; (800f938 <LmhpComplianceProcess+0xdc>)
 800f922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f924:	4798      	blx	r3
        }
    }
}
 800f926:	bf00      	nop
 800f928:	3714      	adds	r7, #20
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd90      	pop	{r4, r7, pc}
 800f92e:	bf00      	nop
 800f930:	200007fc 	.word	0x200007fc
 800f934:	20000838 	.word	0x20000838
 800f938:	200000d8 	.word	0x200000d8

0800f93c <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800f93c:	b5b0      	push	{r4, r5, r7, lr}
 800f93e:	b0a4      	sub	sp, #144	; 0x90
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800f944:	2300      	movs	r3, #0
 800f946:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800f94a:	4bd0      	ldr	r3, [pc, #832]	; (800fc8c <LmhpComplianceOnMcpsIndication+0x350>)
 800f94c:	781b      	ldrb	r3, [r3, #0]
 800f94e:	f083 0301 	eor.w	r3, r3, #1
 800f952:	b2db      	uxtb	r3, r3
 800f954:	2b00      	cmp	r3, #0
 800f956:	f040 83bf 	bne.w	80100d8 <LmhpComplianceOnMcpsIndication+0x79c>
        return;
    }

    /* Increment the compliance certification protocol downlink counter */
    /* Not counting downlinks on FPort 0 */
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	78db      	ldrb	r3, [r3, #3]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d103      	bne.n	800f96a <LmhpComplianceOnMcpsIndication+0x2e>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	7b9b      	ldrb	r3, [r3, #14]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d005      	beq.n	800f976 <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800f96a:	4bc8      	ldr	r3, [pc, #800]	; (800fc8c <LmhpComplianceOnMcpsIndication+0x350>)
 800f96c:	8a1b      	ldrh	r3, [r3, #16]
 800f96e:	3301      	adds	r3, #1
 800f970:	b29a      	uxth	r2, r3
 800f972:	4bc6      	ldr	r3, [pc, #792]	; (800fc8c <LmhpComplianceOnMcpsIndication+0x350>)
 800f974:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	7b5b      	ldrb	r3, [r3, #13]
 800f97a:	f083 0301 	eor.w	r3, r3, #1
 800f97e:	b2db      	uxtb	r3, r3
 800f980:	2b00      	cmp	r3, #0
 800f982:	f040 83ab 	bne.w	80100dc <LmhpComplianceOnMcpsIndication+0x7a0>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	78db      	ldrb	r3, [r3, #3]
 800f98a:	2be0      	cmp	r3, #224	; 0xe0
 800f98c:	f040 83a8 	bne.w	80100e0 <LmhpComplianceOnMcpsIndication+0x7a4>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800f990:	4bbe      	ldr	r3, [pc, #760]	; (800fc8c <LmhpComplianceOnMcpsIndication+0x350>)
 800f992:	2200      	movs	r2, #0
 800f994:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	689a      	ldr	r2, [r3, #8]
 800f99a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f99e:	1c59      	adds	r1, r3, #1
 800f9a0:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800f9a4:	4413      	add	r3, r2
 800f9a6:	781b      	ldrb	r3, [r3, #0]
 800f9a8:	2b7f      	cmp	r3, #127	; 0x7f
 800f9aa:	f200 8372 	bhi.w	8010092 <LmhpComplianceOnMcpsIndication+0x756>
 800f9ae:	a201      	add	r2, pc, #4	; (adr r2, 800f9b4 <LmhpComplianceOnMcpsIndication+0x78>)
 800f9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9b4:	0800fbb5 	.word	0x0800fbb5
 800f9b8:	0800fbf9 	.word	0x0800fbf9
 800f9bc:	0800fc03 	.word	0x0800fc03
 800f9c0:	0800fc19 	.word	0x0800fc19
 800f9c4:	0800fc3b 	.word	0x0800fc3b
 800f9c8:	0800fc69 	.word	0x0800fc69
 800f9cc:	0800fc95 	.word	0x0800fc95
 800f9d0:	0800fcf3 	.word	0x0800fcf3
 800f9d4:	0800fd4b 	.word	0x0800fd4b
 800f9d8:	0800fdb7 	.word	0x0800fdb7
 800f9dc:	0800fe07 	.word	0x0800fe07
 800f9e0:	08010093 	.word	0x08010093
 800f9e4:	08010093 	.word	0x08010093
 800f9e8:	08010093 	.word	0x08010093
 800f9ec:	08010093 	.word	0x08010093
 800f9f0:	08010093 	.word	0x08010093
 800f9f4:	08010093 	.word	0x08010093
 800f9f8:	08010093 	.word	0x08010093
 800f9fc:	08010093 	.word	0x08010093
 800fa00:	08010093 	.word	0x08010093
 800fa04:	08010093 	.word	0x08010093
 800fa08:	08010093 	.word	0x08010093
 800fa0c:	08010093 	.word	0x08010093
 800fa10:	08010093 	.word	0x08010093
 800fa14:	08010093 	.word	0x08010093
 800fa18:	08010093 	.word	0x08010093
 800fa1c:	08010093 	.word	0x08010093
 800fa20:	08010093 	.word	0x08010093
 800fa24:	08010093 	.word	0x08010093
 800fa28:	08010093 	.word	0x08010093
 800fa2c:	08010093 	.word	0x08010093
 800fa30:	08010093 	.word	0x08010093
 800fa34:	0800fe0f 	.word	0x0800fe0f
 800fa38:	0800fe21 	.word	0x0800fe21
 800fa3c:	0800fe29 	.word	0x0800fe29
 800fa40:	08010093 	.word	0x08010093
 800fa44:	08010093 	.word	0x08010093
 800fa48:	08010093 	.word	0x08010093
 800fa4c:	08010093 	.word	0x08010093
 800fa50:	08010093 	.word	0x08010093
 800fa54:	08010093 	.word	0x08010093
 800fa58:	08010093 	.word	0x08010093
 800fa5c:	08010093 	.word	0x08010093
 800fa60:	08010093 	.word	0x08010093
 800fa64:	08010093 	.word	0x08010093
 800fa68:	08010093 	.word	0x08010093
 800fa6c:	08010093 	.word	0x08010093
 800fa70:	08010093 	.word	0x08010093
 800fa74:	08010093 	.word	0x08010093
 800fa78:	08010093 	.word	0x08010093
 800fa7c:	08010093 	.word	0x08010093
 800fa80:	08010093 	.word	0x08010093
 800fa84:	08010093 	.word	0x08010093
 800fa88:	08010093 	.word	0x08010093
 800fa8c:	08010093 	.word	0x08010093
 800fa90:	08010093 	.word	0x08010093
 800fa94:	08010093 	.word	0x08010093
 800fa98:	08010093 	.word	0x08010093
 800fa9c:	08010093 	.word	0x08010093
 800faa0:	08010093 	.word	0x08010093
 800faa4:	08010093 	.word	0x08010093
 800faa8:	08010093 	.word	0x08010093
 800faac:	08010093 	.word	0x08010093
 800fab0:	08010093 	.word	0x08010093
 800fab4:	08010093 	.word	0x08010093
 800fab8:	08010093 	.word	0x08010093
 800fabc:	08010093 	.word	0x08010093
 800fac0:	08010093 	.word	0x08010093
 800fac4:	08010093 	.word	0x08010093
 800fac8:	08010093 	.word	0x08010093
 800facc:	08010093 	.word	0x08010093
 800fad0:	08010093 	.word	0x08010093
 800fad4:	08010093 	.word	0x08010093
 800fad8:	08010093 	.word	0x08010093
 800fadc:	08010093 	.word	0x08010093
 800fae0:	08010093 	.word	0x08010093
 800fae4:	08010093 	.word	0x08010093
 800fae8:	08010093 	.word	0x08010093
 800faec:	08010093 	.word	0x08010093
 800faf0:	08010093 	.word	0x08010093
 800faf4:	08010093 	.word	0x08010093
 800faf8:	08010093 	.word	0x08010093
 800fafc:	08010093 	.word	0x08010093
 800fb00:	08010093 	.word	0x08010093
 800fb04:	08010093 	.word	0x08010093
 800fb08:	08010093 	.word	0x08010093
 800fb0c:	08010093 	.word	0x08010093
 800fb10:	08010093 	.word	0x08010093
 800fb14:	08010093 	.word	0x08010093
 800fb18:	08010093 	.word	0x08010093
 800fb1c:	08010093 	.word	0x08010093
 800fb20:	08010093 	.word	0x08010093
 800fb24:	08010093 	.word	0x08010093
 800fb28:	08010093 	.word	0x08010093
 800fb2c:	08010093 	.word	0x08010093
 800fb30:	08010093 	.word	0x08010093
 800fb34:	08010093 	.word	0x08010093
 800fb38:	08010093 	.word	0x08010093
 800fb3c:	08010093 	.word	0x08010093
 800fb40:	08010093 	.word	0x08010093
 800fb44:	08010093 	.word	0x08010093
 800fb48:	08010093 	.word	0x08010093
 800fb4c:	08010093 	.word	0x08010093
 800fb50:	08010093 	.word	0x08010093
 800fb54:	08010093 	.word	0x08010093
 800fb58:	08010093 	.word	0x08010093
 800fb5c:	08010093 	.word	0x08010093
 800fb60:	08010093 	.word	0x08010093
 800fb64:	08010093 	.word	0x08010093
 800fb68:	08010093 	.word	0x08010093
 800fb6c:	08010093 	.word	0x08010093
 800fb70:	08010093 	.word	0x08010093
 800fb74:	08010093 	.word	0x08010093
 800fb78:	08010093 	.word	0x08010093
 800fb7c:	08010093 	.word	0x08010093
 800fb80:	08010093 	.word	0x08010093
 800fb84:	08010093 	.word	0x08010093
 800fb88:	08010093 	.word	0x08010093
 800fb8c:	08010093 	.word	0x08010093
 800fb90:	08010093 	.word	0x08010093
 800fb94:	08010093 	.word	0x08010093
 800fb98:	08010093 	.word	0x08010093
 800fb9c:	08010093 	.word	0x08010093
 800fba0:	08010093 	.word	0x08010093
 800fba4:	08010093 	.word	0x08010093
 800fba8:	0800fe5b 	.word	0x0800fe5b
 800fbac:	0800ff0b 	.word	0x0800ff0b
 800fbb0:	0800ff3d 	.word	0x0800ff3d
    {
        case COMPLIANCE_PKG_VERSION_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800fbb4:	4b35      	ldr	r3, [pc, #212]	; (800fc8c <LmhpComplianceOnMcpsIndication+0x350>)
 800fbb6:	68da      	ldr	r2, [r3, #12]
 800fbb8:	4b34      	ldr	r3, [pc, #208]	; (800fc8c <LmhpComplianceOnMcpsIndication+0x350>)
 800fbba:	7a9b      	ldrb	r3, [r3, #10]
 800fbbc:	1c59      	adds	r1, r3, #1
 800fbbe:	b2c8      	uxtb	r0, r1
 800fbc0:	4932      	ldr	r1, [pc, #200]	; (800fc8c <LmhpComplianceOnMcpsIndication+0x350>)
 800fbc2:	7288      	strb	r0, [r1, #10]
 800fbc4:	4413      	add	r3, r2
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800fbca:	4b30      	ldr	r3, [pc, #192]	; (800fc8c <LmhpComplianceOnMcpsIndication+0x350>)
 800fbcc:	68da      	ldr	r2, [r3, #12]
 800fbce:	4b2f      	ldr	r3, [pc, #188]	; (800fc8c <LmhpComplianceOnMcpsIndication+0x350>)
 800fbd0:	7a9b      	ldrb	r3, [r3, #10]
 800fbd2:	1c59      	adds	r1, r3, #1
 800fbd4:	b2c8      	uxtb	r0, r1
 800fbd6:	492d      	ldr	r1, [pc, #180]	; (800fc8c <LmhpComplianceOnMcpsIndication+0x350>)
 800fbd8:	7288      	strb	r0, [r1, #10]
 800fbda:	4413      	add	r3, r2
 800fbdc:	2206      	movs	r2, #6
 800fbde:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800fbe0:	4b2a      	ldr	r3, [pc, #168]	; (800fc8c <LmhpComplianceOnMcpsIndication+0x350>)
 800fbe2:	68da      	ldr	r2, [r3, #12]
 800fbe4:	4b29      	ldr	r3, [pc, #164]	; (800fc8c <LmhpComplianceOnMcpsIndication+0x350>)
 800fbe6:	7a9b      	ldrb	r3, [r3, #10]
 800fbe8:	1c59      	adds	r1, r3, #1
 800fbea:	b2c8      	uxtb	r0, r1
 800fbec:	4927      	ldr	r1, [pc, #156]	; (800fc8c <LmhpComplianceOnMcpsIndication+0x350>)
 800fbee:	7288      	strb	r0, [r1, #10]
 800fbf0:	4413      	add	r3, r2
 800fbf2:	2201      	movs	r2, #1
 800fbf4:	701a      	strb	r2, [r3, #0]
                break;
 800fbf6:	e257      	b.n	80100a8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_RESET_REQ:
            {
                ComplianceTestState.IsResetCmdPending = true;
 800fbf8:	4b24      	ldr	r3, [pc, #144]	; (800fc8c <LmhpComplianceOnMcpsIndication+0x350>)
 800fbfa:	2201      	movs	r2, #1
 800fbfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 800fc00:	e252      	b.n	80100a8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_JOIN_REQ:
            {
                if( CompliancePackage.OnJoinRequest != NULL )
 800fc02:	4b23      	ldr	r3, [pc, #140]	; (800fc90 <LmhpComplianceOnMcpsIndication+0x354>)
 800fc04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	f000 8245 	beq.w	8010096 <LmhpComplianceOnMcpsIndication+0x75a>
                {
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800fc0c:	4b20      	ldr	r3, [pc, #128]	; (800fc90 <LmhpComplianceOnMcpsIndication+0x354>)
 800fc0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc10:	2101      	movs	r1, #1
 800fc12:	2002      	movs	r0, #2
 800fc14:	4798      	blx	r3
                }
                break;
 800fc16:	e23e      	b.n	8010096 <LmhpComplianceOnMcpsIndication+0x75a>
            }
        case COMPLIANCE_SWITCH_CLASS_REQ:
            {
                /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	689a      	ldr	r2, [r3, #8]
 800fc1c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800fc20:	1c59      	adds	r1, r3, #1
 800fc22:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800fc26:	4413      	add	r3, r2
 800fc28:	781a      	ldrb	r2, [r3, #0]
 800fc2a:	4b18      	ldr	r3, [pc, #96]	; (800fc8c <LmhpComplianceOnMcpsIndication+0x350>)
 800fc2c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 800fc30:	4b16      	ldr	r3, [pc, #88]	; (800fc8c <LmhpComplianceOnMcpsIndication+0x350>)
 800fc32:	2201      	movs	r2, #1
 800fc34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                break;
 800fc38:	e236      	b.n	80100a8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_ADR_BIT_CHANGE_REQ:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type            = MIB_ADR;
 800fc3a:	2304      	movs	r3, #4
 800fc3c:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	689a      	ldr	r2, [r3, #8]
 800fc42:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800fc46:	1c59      	adds	r1, r3, #1
 800fc48:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800fc4c:	4413      	add	r3, r2
 800fc4e:	781b      	ldrb	r3, [r3, #0]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	bf14      	ite	ne
 800fc54:	2301      	movne	r3, #1
 800fc56:	2300      	moveq	r3, #0
 800fc58:	b2db      	uxtb	r3, r3
 800fc5a:	733b      	strb	r3, [r7, #12]

                LoRaMacMibSetRequestConfirm( &mibReq );
 800fc5c:	f107 0308 	add.w	r3, r7, #8
 800fc60:	4618      	mov	r0, r3
 800fc62:	f004 fafd 	bl	8014260 <LoRaMacMibSetRequestConfirm>
                break;
 800fc66:	e21f      	b.n	80100a8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
            {
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	689a      	ldr	r2, [r3, #8]
 800fc6c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800fc70:	1c59      	adds	r1, r3, #1
 800fc72:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800fc76:	4413      	add	r3, r2
 800fc78:	781b      	ldrb	r3, [r3, #0]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	bf14      	ite	ne
 800fc7e:	2301      	movne	r3, #1
 800fc80:	2300      	moveq	r3, #0
 800fc82:	b2db      	uxtb	r3, r3
 800fc84:	4618      	mov	r0, r3
 800fc86:	f005 f965 	bl	8014f54 <LoRaMacTestSetDutyCycleOn>
                break;
 800fc8a:	e20d      	b.n	80100a8 <LmhpComplianceOnMcpsIndication+0x76c>
 800fc8c:	200007fc 	.word	0x200007fc
 800fc90:	200000d8 	.word	0x200000d8
            }
        case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
            {
                /* Periodicity in milli-seconds */
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800fc94:	4ba5      	ldr	r3, [pc, #660]	; (800ff2c <LmhpComplianceOnMcpsIndication+0x5f0>)
 800fc96:	f107 0408 	add.w	r4, r7, #8
 800fc9a:	461d      	mov	r5, r3
 800fc9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fca4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fca8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	689a      	ldr	r2, [r3, #8]
 800fcb0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800fcb4:	1c59      	adds	r1, r3, #1
 800fcb6:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800fcba:	4413      	add	r3, r2
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800fcc2:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800fcc6:	2b0a      	cmp	r3, #10
 800fcc8:	f200 81e7 	bhi.w	801009a <LmhpComplianceOnMcpsIndication+0x75e>
                {
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800fccc:	4b98      	ldr	r3, [pc, #608]	; (800ff30 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	685b      	ldr	r3, [r3, #4]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	f000 81e1 	beq.w	801009a <LmhpComplianceOnMcpsIndication+0x75e>
                    {
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800fcd8:	4b95      	ldr	r3, [pc, #596]	; (800ff30 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	685a      	ldr	r2, [r3, #4]
 800fcde:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800fce2:	009b      	lsls	r3, r3, #2
 800fce4:	3390      	adds	r3, #144	; 0x90
 800fce6:	443b      	add	r3, r7
 800fce8:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800fcec:	4618      	mov	r0, r3
 800fcee:	4790      	blx	r2
                    }
                }
                break;
 800fcf0:	e1d3      	b.n	801009a <LmhpComplianceOnMcpsIndication+0x75e>
            }
        case COMPLIANCE_TX_FRAMES_CTRL_REQ:
            {
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	689a      	ldr	r2, [r3, #8]
 800fcf6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800fcfa:	1c59      	adds	r1, r3, #1
 800fcfc:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800fd00:	4413      	add	r3, r2
 800fd02:	781b      	ldrb	r3, [r3, #0]
 800fd04:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

                if( ( frameType == 1 ) || ( frameType == 2 ) )
 800fd08:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800fd0c:	2b01      	cmp	r3, #1
 800fd0e:	d004      	beq.n	800fd1a <LmhpComplianceOnMcpsIndication+0x3de>
 800fd10:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800fd14:	2b02      	cmp	r3, #2
 800fd16:	f040 81c2 	bne.w	801009e <LmhpComplianceOnMcpsIndication+0x762>
                {
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800fd1a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800fd1e:	2b01      	cmp	r3, #1
 800fd20:	bf14      	ite	ne
 800fd22:	2301      	movne	r3, #1
 800fd24:	2300      	moveq	r3, #0
 800fd26:	b2db      	uxtb	r3, r3
 800fd28:	461a      	mov	r2, r3
 800fd2a:	4b82      	ldr	r3, [pc, #520]	; (800ff34 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fd2c:	721a      	strb	r2, [r3, #8]

                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800fd2e:	4b80      	ldr	r3, [pc, #512]	; (800ff30 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	689b      	ldr	r3, [r3, #8]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	f000 81b2 	beq.w	801009e <LmhpComplianceOnMcpsIndication+0x762>
                    {
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800fd3a:	4b7d      	ldr	r3, [pc, #500]	; (800ff30 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	689b      	ldr	r3, [r3, #8]
 800fd40:	4a7c      	ldr	r2, [pc, #496]	; (800ff34 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fd42:	7a12      	ldrb	r2, [r2, #8]
 800fd44:	4610      	mov	r0, r2
 800fd46:	4798      	blx	r3
                    }
                }
                break;
 800fd48:	e1a9      	b.n	801009e <LmhpComplianceOnMcpsIndication+0x762>
            }
        case COMPLIANCE_ECHO_PAYLOAD_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800fd4a:	4b7a      	ldr	r3, [pc, #488]	; (800ff34 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fd4c:	68da      	ldr	r2, [r3, #12]
 800fd4e:	4b79      	ldr	r3, [pc, #484]	; (800ff34 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fd50:	7a9b      	ldrb	r3, [r3, #10]
 800fd52:	1c59      	adds	r1, r3, #1
 800fd54:	b2c8      	uxtb	r0, r1
 800fd56:	4977      	ldr	r1, [pc, #476]	; (800ff34 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fd58:	7288      	strb	r0, [r1, #10]
 800fd5a:	4413      	add	r3, r2
 800fd5c:	2208      	movs	r2, #8
 800fd5e:	701a      	strb	r2, [r3, #0]

                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800fd60:	2301      	movs	r3, #1
 800fd62:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800fd66:	e019      	b.n	800fd9c <LmhpComplianceOnMcpsIndication+0x460>
                     i++ )
                {
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	689a      	ldr	r2, [r3, #8]
 800fd6c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800fd70:	1c59      	adds	r1, r3, #1
 800fd72:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800fd76:	4413      	add	r3, r2
 800fd78:	781a      	ldrb	r2, [r3, #0]
 800fd7a:	4b6e      	ldr	r3, [pc, #440]	; (800ff34 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fd7c:	68d9      	ldr	r1, [r3, #12]
 800fd7e:	4b6d      	ldr	r3, [pc, #436]	; (800ff34 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fd80:	7a9b      	ldrb	r3, [r3, #10]
 800fd82:	1c58      	adds	r0, r3, #1
 800fd84:	b2c4      	uxtb	r4, r0
 800fd86:	486b      	ldr	r0, [pc, #428]	; (800ff34 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fd88:	7284      	strb	r4, [r0, #10]
 800fd8a:	440b      	add	r3, r1
 800fd8c:	3201      	adds	r2, #1
 800fd8e:	b2d2      	uxtb	r2, r2
 800fd90:	701a      	strb	r2, [r3, #0]
                     i++ )
 800fd92:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800fd96:	3301      	adds	r3, #1
 800fd98:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800fd9c:	4b65      	ldr	r3, [pc, #404]	; (800ff34 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fd9e:	7a5a      	ldrb	r2, [r3, #9]
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	7b1b      	ldrb	r3, [r3, #12]
 800fda4:	4293      	cmp	r3, r2
 800fda6:	bf28      	it	cs
 800fda8:	4613      	movcs	r3, r2
 800fdaa:	b2db      	uxtb	r3, r3
 800fdac:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800fdb0:	429a      	cmp	r2, r3
 800fdb2:	d3d9      	bcc.n	800fd68 <LmhpComplianceOnMcpsIndication+0x42c>
                }
                break;
 800fdb4:	e178      	b.n	80100a8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800fdb6:	4b5f      	ldr	r3, [pc, #380]	; (800ff34 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fdb8:	68da      	ldr	r2, [r3, #12]
 800fdba:	4b5e      	ldr	r3, [pc, #376]	; (800ff34 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fdbc:	7a9b      	ldrb	r3, [r3, #10]
 800fdbe:	1c59      	adds	r1, r3, #1
 800fdc0:	b2c8      	uxtb	r0, r1
 800fdc2:	495c      	ldr	r1, [pc, #368]	; (800ff34 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fdc4:	7288      	strb	r0, [r1, #10]
 800fdc6:	4413      	add	r3, r2
 800fdc8:	2209      	movs	r2, #9
 800fdca:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800fdcc:	4b59      	ldr	r3, [pc, #356]	; (800ff34 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fdce:	8a18      	ldrh	r0, [r3, #16]
 800fdd0:	4b58      	ldr	r3, [pc, #352]	; (800ff34 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fdd2:	68da      	ldr	r2, [r3, #12]
 800fdd4:	4b57      	ldr	r3, [pc, #348]	; (800ff34 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fdd6:	7a9b      	ldrb	r3, [r3, #10]
 800fdd8:	1c59      	adds	r1, r3, #1
 800fdda:	b2cc      	uxtb	r4, r1
 800fddc:	4955      	ldr	r1, [pc, #340]	; (800ff34 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fdde:	728c      	strb	r4, [r1, #10]
 800fde0:	4413      	add	r3, r2
 800fde2:	b2c2      	uxtb	r2, r0
 800fde4:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800fde6:	4b53      	ldr	r3, [pc, #332]	; (800ff34 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fde8:	8a1b      	ldrh	r3, [r3, #16]
 800fdea:	0a1b      	lsrs	r3, r3, #8
 800fdec:	b298      	uxth	r0, r3
 800fdee:	4b51      	ldr	r3, [pc, #324]	; (800ff34 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fdf0:	68da      	ldr	r2, [r3, #12]
 800fdf2:	4b50      	ldr	r3, [pc, #320]	; (800ff34 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fdf4:	7a9b      	ldrb	r3, [r3, #10]
 800fdf6:	1c59      	adds	r1, r3, #1
 800fdf8:	b2cc      	uxtb	r4, r1
 800fdfa:	494e      	ldr	r1, [pc, #312]	; (800ff34 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fdfc:	728c      	strb	r4, [r1, #10]
 800fdfe:	4413      	add	r3, r2
 800fe00:	b2c2      	uxtb	r2, r0
 800fe02:	701a      	strb	r2, [r3, #0]
                break;
 800fe04:	e150      	b.n	80100a8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_RESET_REQ:
            {
                ComplianceTestState.RxAppCnt = 0;
 800fe06:	4b4b      	ldr	r3, [pc, #300]	; (800ff34 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fe08:	2200      	movs	r2, #0
 800fe0a:	821a      	strh	r2, [r3, #16]
                break;
 800fe0c:	e14c      	b.n	80100a8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_LINK_CHECK_REQ:
            {
                MlmeReq_t mlmeReq;
                mlmeReq.Type = MLME_LINK_CHECK;
 800fe0e:	2305      	movs	r3, #5
 800fe10:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

                LoRaMacMlmeRequest( &mlmeReq );
 800fe14:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fe18:	4618      	mov	r0, r3
 800fe1a:	f004 fdcb 	bl	80149b4 <LoRaMacMlmeRequest>
                break;
 800fe1e:	e143      	b.n	80100a8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DEVICE_TIME_REQ:
            {
                CompliancePackage.OnDeviceTimeRequest( );
 800fe20:	4b45      	ldr	r3, [pc, #276]	; (800ff38 <LmhpComplianceOnMcpsIndication+0x5fc>)
 800fe22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe24:	4798      	blx	r3
                break;
 800fe26:	e13f      	b.n	80100a8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_PING_SLOT_INFO_REQ:
            {
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	689a      	ldr	r2, [r3, #8]
 800fe2c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800fe30:	1c59      	adds	r1, r3, #1
 800fe32:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800fe36:	4413      	add	r3, r2
 800fe38:	781a      	ldrb	r2, [r3, #0]
 800fe3a:	4b3e      	ldr	r3, [pc, #248]	; (800ff34 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fe3c:	755a      	strb	r2, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800fe3e:	4b3c      	ldr	r3, [pc, #240]	; (800ff30 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	68db      	ldr	r3, [r3, #12]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	f000 812c 	beq.w	80100a2 <LmhpComplianceOnMcpsIndication+0x766>
                {
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800fe4a:	4b39      	ldr	r3, [pc, #228]	; (800ff30 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	68db      	ldr	r3, [r3, #12]
 800fe50:	4a38      	ldr	r2, [pc, #224]	; (800ff34 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fe52:	7d52      	ldrb	r2, [r2, #21]
 800fe54:	4610      	mov	r0, r2
 800fe56:	4798      	blx	r3
                }
                break;
 800fe58:	e123      	b.n	80100a2 <LmhpComplianceOnMcpsIndication+0x766>
            }
#endif /* CLASS_B not available */
        case COMPLIANCE_TX_CW_REQ:
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 7 )
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	7b1b      	ldrb	r3, [r3, #12]
 800fe5e:	2b07      	cmp	r3, #7
 800fe60:	f040 8121 	bne.w	80100a6 <LmhpComplianceOnMcpsIndication+0x76a>
                {
                    mlmeReq.Type = MLME_TXCW;
 800fe64:	2306      	movs	r3, #6
 800fe66:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                    mlmeReq.Req.TxCw.Timeout =
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	689a      	ldr	r2, [r3, #8]
 800fe6e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800fe72:	4413      	add	r3, r2
 800fe74:	781b      	ldrb	r3, [r3, #0]
 800fe76:	b21a      	sxth	r2, r3
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	6899      	ldr	r1, [r3, #8]
 800fe7c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800fe80:	3301      	adds	r3, #1
 800fe82:	440b      	add	r3, r1
 800fe84:	781b      	ldrb	r3, [r3, #0]
 800fe86:	021b      	lsls	r3, r3, #8
 800fe88:	b21b      	sxth	r3, r3
 800fe8a:	4313      	orrs	r3, r2
 800fe8c:	b21b      	sxth	r3, r3
 800fe8e:	b29b      	uxth	r3, r3
                    mlmeReq.Req.TxCw.Timeout =
 800fe90:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                    cmdIndex += 2;
 800fe94:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800fe98:	3302      	adds	r3, #2
 800fe9a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Frequency =
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	689a      	ldr	r2, [r3, #8]
 800fea2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800fea6:	4413      	add	r3, r2
 800fea8:	781b      	ldrb	r3, [r3, #0]
 800feaa:	4619      	mov	r1, r3
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	689a      	ldr	r2, [r3, #8]
 800feb0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800feb4:	3301      	adds	r3, #1
 800feb6:	4413      	add	r3, r2
 800feb8:	781b      	ldrb	r3, [r3, #0]
 800feba:	021b      	lsls	r3, r3, #8
 800febc:	ea41 0203 	orr.w	r2, r1, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	6899      	ldr	r1, [r3, #8]
 800fec4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800fec8:	3302      	adds	r3, #2
 800feca:	440b      	add	r3, r1
 800fecc:	781b      	ldrb	r3, [r3, #0]
 800fece:	041b      	lsls	r3, r3, #16
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800fed0:	4313      	orrs	r3, r2
 800fed2:	461a      	mov	r2, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800fed4:	2364      	movs	r3, #100	; 0x64
 800fed6:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 800feda:	647b      	str	r3, [r7, #68]	; 0x44
                        100;
                    cmdIndex += 3;
 800fedc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800fee0:	3303      	adds	r3, #3
 800fee2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	689a      	ldr	r2, [r3, #8]
 800feea:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800feee:	1c59      	adds	r1, r3, #1
 800fef0:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800fef4:	4413      	add	r3, r2
 800fef6:	781b      	ldrb	r3, [r3, #0]
 800fef8:	b25b      	sxtb	r3, r3
 800fefa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 800fefe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ff02:	4618      	mov	r0, r3
 800ff04:	f004 fd56 	bl	80149b4 <LoRaMacMlmeRequest>
                }
                break;
 800ff08:	e0cd      	b.n	80100a6 <LmhpComplianceOnMcpsIndication+0x76a>
            }
        case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
            {
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800ff0a:	233b      	movs	r3, #59	; 0x3b
 800ff0c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                mibReq.Param.IsCertPortOn = false;
 800ff10:	2300      	movs	r3, #0
 800ff12:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacMibSetRequestConfirm( &mibReq );
 800ff16:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f004 f9a0 	bl	8014260 <LoRaMacMibSetRequestConfirm>

                ComplianceTestState.IsResetCmdPending = true;
 800ff20:	4b04      	ldr	r3, [pc, #16]	; (800ff34 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800ff22:	2201      	movs	r2, #1
 800ff24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 800ff28:	e0be      	b.n	80100a8 <LmhpComplianceOnMcpsIndication+0x76c>
 800ff2a:	bf00      	nop
 800ff2c:	0801edc0 	.word	0x0801edc0
 800ff30:	20000834 	.word	0x20000834
 800ff34:	200007fc 	.word	0x200007fc
 800ff38:	200000d8 	.word	0x200000d8
            {
                Version_t           lrwanVersion;
                Version_t           lrwanRpVersion;
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_LORAWAN_VERSION;
 800ff3c:	232a      	movs	r3, #42	; 0x2a
 800ff3e:	723b      	strb	r3, [r7, #8]

                LoRaMacMibGetRequestConfirm( &mibReq );
 800ff40:	f107 0308 	add.w	r3, r7, #8
 800ff44:	4618      	mov	r0, r3
 800ff46:	f003 ffb3 	bl	8013eb0 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	63bb      	str	r3, [r7, #56]	; 0x38
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800ff4e:	693b      	ldr	r3, [r7, #16]
 800ff50:	637b      	str	r3, [r7, #52]	; 0x34

                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800ff52:	4b65      	ldr	r3, [pc, #404]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ff54:	68da      	ldr	r2, [r3, #12]
 800ff56:	4b64      	ldr	r3, [pc, #400]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ff58:	7a9b      	ldrb	r3, [r3, #10]
 800ff5a:	1c59      	adds	r1, r3, #1
 800ff5c:	b2c8      	uxtb	r0, r1
 800ff5e:	4962      	ldr	r1, [pc, #392]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ff60:	7288      	strb	r0, [r1, #10]
 800ff62:	4413      	add	r3, r2
 800ff64:	227f      	movs	r2, #127	; 0x7f
 800ff66:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800ff68:	4b60      	ldr	r3, [pc, #384]	; (80100ec <LmhpComplianceOnMcpsIndication+0x7b0>)
 800ff6a:	681a      	ldr	r2, [r3, #0]
 800ff6c:	4b5e      	ldr	r3, [pc, #376]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ff6e:	68d9      	ldr	r1, [r3, #12]
 800ff70:	4b5d      	ldr	r3, [pc, #372]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ff72:	7a9b      	ldrb	r3, [r3, #10]
 800ff74:	1c58      	adds	r0, r3, #1
 800ff76:	b2c4      	uxtb	r4, r0
 800ff78:	485b      	ldr	r0, [pc, #364]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ff7a:	7284      	strb	r4, [r0, #10]
 800ff7c:	440b      	add	r3, r1
 800ff7e:	78d2      	ldrb	r2, [r2, #3]
 800ff80:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800ff82:	4b5a      	ldr	r3, [pc, #360]	; (80100ec <LmhpComplianceOnMcpsIndication+0x7b0>)
 800ff84:	681a      	ldr	r2, [r3, #0]
 800ff86:	4b58      	ldr	r3, [pc, #352]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ff88:	68d9      	ldr	r1, [r3, #12]
 800ff8a:	4b57      	ldr	r3, [pc, #348]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ff8c:	7a9b      	ldrb	r3, [r3, #10]
 800ff8e:	1c58      	adds	r0, r3, #1
 800ff90:	b2c4      	uxtb	r4, r0
 800ff92:	4855      	ldr	r0, [pc, #340]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ff94:	7284      	strb	r4, [r0, #10]
 800ff96:	440b      	add	r3, r1
 800ff98:	7892      	ldrb	r2, [r2, #2]
 800ff9a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800ff9c:	4b53      	ldr	r3, [pc, #332]	; (80100ec <LmhpComplianceOnMcpsIndication+0x7b0>)
 800ff9e:	681a      	ldr	r2, [r3, #0]
 800ffa0:	4b51      	ldr	r3, [pc, #324]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ffa2:	68d9      	ldr	r1, [r3, #12]
 800ffa4:	4b50      	ldr	r3, [pc, #320]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ffa6:	7a9b      	ldrb	r3, [r3, #10]
 800ffa8:	1c58      	adds	r0, r3, #1
 800ffaa:	b2c4      	uxtb	r4, r0
 800ffac:	484e      	ldr	r0, [pc, #312]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ffae:	7284      	strb	r4, [r0, #10]
 800ffb0:	440b      	add	r3, r1
 800ffb2:	7852      	ldrb	r2, [r2, #1]
 800ffb4:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800ffb6:	4b4d      	ldr	r3, [pc, #308]	; (80100ec <LmhpComplianceOnMcpsIndication+0x7b0>)
 800ffb8:	681a      	ldr	r2, [r3, #0]
 800ffba:	4b4b      	ldr	r3, [pc, #300]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ffbc:	68d9      	ldr	r1, [r3, #12]
 800ffbe:	4b4a      	ldr	r3, [pc, #296]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ffc0:	7a9b      	ldrb	r3, [r3, #10]
 800ffc2:	1c58      	adds	r0, r3, #1
 800ffc4:	b2c4      	uxtb	r4, r0
 800ffc6:	4848      	ldr	r0, [pc, #288]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ffc8:	7284      	strb	r4, [r0, #10]
 800ffca:	440b      	add	r3, r1
 800ffcc:	7812      	ldrb	r2, [r2, #0]
 800ffce:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800ffd0:	4b45      	ldr	r3, [pc, #276]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ffd2:	68da      	ldr	r2, [r3, #12]
 800ffd4:	4b44      	ldr	r3, [pc, #272]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ffd6:	7a9b      	ldrb	r3, [r3, #10]
 800ffd8:	1c59      	adds	r1, r3, #1
 800ffda:	b2c8      	uxtb	r0, r1
 800ffdc:	4942      	ldr	r1, [pc, #264]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ffde:	7288      	strb	r0, [r1, #10]
 800ffe0:	4413      	add	r3, r2
 800ffe2:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800ffe6:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800ffe8:	4b3f      	ldr	r3, [pc, #252]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ffea:	68da      	ldr	r2, [r3, #12]
 800ffec:	4b3e      	ldr	r3, [pc, #248]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800ffee:	7a9b      	ldrb	r3, [r3, #10]
 800fff0:	1c59      	adds	r1, r3, #1
 800fff2:	b2c8      	uxtb	r0, r1
 800fff4:	493c      	ldr	r1, [pc, #240]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fff6:	7288      	strb	r0, [r1, #10]
 800fff8:	4413      	add	r3, r2
 800fffa:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800fffe:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 8010000:	4b39      	ldr	r3, [pc, #228]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010002:	68da      	ldr	r2, [r3, #12]
 8010004:	4b38      	ldr	r3, [pc, #224]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010006:	7a9b      	ldrb	r3, [r3, #10]
 8010008:	1c59      	adds	r1, r3, #1
 801000a:	b2c8      	uxtb	r0, r1
 801000c:	4936      	ldr	r1, [pc, #216]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801000e:	7288      	strb	r0, [r1, #10]
 8010010:	4413      	add	r3, r2
 8010012:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8010016:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 8010018:	4b33      	ldr	r3, [pc, #204]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801001a:	68da      	ldr	r2, [r3, #12]
 801001c:	4b32      	ldr	r3, [pc, #200]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801001e:	7a9b      	ldrb	r3, [r3, #10]
 8010020:	1c59      	adds	r1, r3, #1
 8010022:	b2c8      	uxtb	r0, r1
 8010024:	4930      	ldr	r1, [pc, #192]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010026:	7288      	strb	r0, [r1, #10]
 8010028:	4413      	add	r3, r2
 801002a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801002e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 8010030:	4b2d      	ldr	r3, [pc, #180]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010032:	68da      	ldr	r2, [r3, #12]
 8010034:	4b2c      	ldr	r3, [pc, #176]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010036:	7a9b      	ldrb	r3, [r3, #10]
 8010038:	1c59      	adds	r1, r3, #1
 801003a:	b2c8      	uxtb	r0, r1
 801003c:	492a      	ldr	r1, [pc, #168]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801003e:	7288      	strb	r0, [r1, #10]
 8010040:	4413      	add	r3, r2
 8010042:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010046:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 8010048:	4b27      	ldr	r3, [pc, #156]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801004a:	68da      	ldr	r2, [r3, #12]
 801004c:	4b26      	ldr	r3, [pc, #152]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801004e:	7a9b      	ldrb	r3, [r3, #10]
 8010050:	1c59      	adds	r1, r3, #1
 8010052:	b2c8      	uxtb	r0, r1
 8010054:	4924      	ldr	r1, [pc, #144]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010056:	7288      	strb	r0, [r1, #10]
 8010058:	4413      	add	r3, r2
 801005a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801005e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 8010060:	4b21      	ldr	r3, [pc, #132]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010062:	68da      	ldr	r2, [r3, #12]
 8010064:	4b20      	ldr	r3, [pc, #128]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010066:	7a9b      	ldrb	r3, [r3, #10]
 8010068:	1c59      	adds	r1, r3, #1
 801006a:	b2c8      	uxtb	r0, r1
 801006c:	491e      	ldr	r1, [pc, #120]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801006e:	7288      	strb	r0, [r1, #10]
 8010070:	4413      	add	r3, r2
 8010072:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8010076:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 8010078:	4b1b      	ldr	r3, [pc, #108]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801007a:	68da      	ldr	r2, [r3, #12]
 801007c:	4b1a      	ldr	r3, [pc, #104]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801007e:	7a9b      	ldrb	r3, [r3, #10]
 8010080:	1c59      	adds	r1, r3, #1
 8010082:	b2c8      	uxtb	r0, r1
 8010084:	4918      	ldr	r1, [pc, #96]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010086:	7288      	strb	r0, [r1, #10]
 8010088:	4413      	add	r3, r2
 801008a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 801008e:	701a      	strb	r2, [r3, #0]
                break;
 8010090:	e00a      	b.n	80100a8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        default:
            {
                break;
 8010092:	bf00      	nop
 8010094:	e008      	b.n	80100a8 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8010096:	bf00      	nop
 8010098:	e006      	b.n	80100a8 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 801009a:	bf00      	nop
 801009c:	e004      	b.n	80100a8 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 801009e:	bf00      	nop
 80100a0:	e002      	b.n	80100a8 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 80100a2:	bf00      	nop
 80100a4:	e000      	b.n	80100a8 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 80100a6:	bf00      	nop
            }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 80100a8:	4b0f      	ldr	r3, [pc, #60]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80100aa:	7a9b      	ldrb	r3, [r3, #10]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d00c      	beq.n	80100ca <LmhpComplianceOnMcpsIndication+0x78e>
    {
        if( ProcessTimer.IsRunning == 0U)
 80100b0:	4b0f      	ldr	r3, [pc, #60]	; (80100f0 <LmhpComplianceOnMcpsIndication+0x7b4>)
 80100b2:	7a5b      	ldrb	r3, [r3, #9]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d114      	bne.n	80100e2 <LmhpComplianceOnMcpsIndication+0x7a6>
        {
            TimerSetValue( &ProcessTimer, 1000 );
 80100b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80100bc:	480c      	ldr	r0, [pc, #48]	; (80100f0 <LmhpComplianceOnMcpsIndication+0x7b4>)
 80100be:	f00d fde7 	bl	801dc90 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 80100c2:	480b      	ldr	r0, [pc, #44]	; (80100f0 <LmhpComplianceOnMcpsIndication+0x7b4>)
 80100c4:	f00d fd06 	bl	801dad4 <UTIL_TIMER_Start>
 80100c8:	e00b      	b.n	80100e2 <LmhpComplianceOnMcpsIndication+0x7a6>
        }
    }
    else
    {
        /* Abort any pending Tx as a new command has been processed */
        TimerStop( &ProcessTimer );
 80100ca:	4809      	ldr	r0, [pc, #36]	; (80100f0 <LmhpComplianceOnMcpsIndication+0x7b4>)
 80100cc:	f00d fd70 	bl	801dbb0 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 80100d0:	4b05      	ldr	r3, [pc, #20]	; (80100e8 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80100d2:	2200      	movs	r2, #0
 80100d4:	705a      	strb	r2, [r3, #1]
 80100d6:	e004      	b.n	80100e2 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 80100d8:	bf00      	nop
 80100da:	e002      	b.n	80100e2 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 80100dc:	bf00      	nop
 80100de:	e000      	b.n	80100e2 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 80100e0:	bf00      	nop
    }
}
 80100e2:	3790      	adds	r7, #144	; 0x90
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bdb0      	pop	{r4, r5, r7, pc}
 80100e8:	200007fc 	.word	0x200007fc
 80100ec:	20000834 	.word	0x20000834
 80100f0:	20000838 	.word	0x20000838

080100f4 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 80100f4:	b480      	push	{r7}
 80100f6:	b083      	sub	sp, #12
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
                }
                break;
            }
#endif /* CLASS_B not available */
        default:
            break;
 80100fc:	bf00      	nop
    }
}
 80100fe:	bf00      	nop
 8010100:	370c      	adds	r7, #12
 8010102:	46bd      	mov	sp, r7
 8010104:	bc80      	pop	{r7}
 8010106:	4770      	bx	lr

08010108 <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t *mlmeIndication )
{
 8010108:	b480      	push	{r7}
 801010a:	b083      	sub	sp, #12
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8010110:	4b05      	ldr	r3, [pc, #20]	; (8010128 <LmhpComplianceOnMlmeIndication+0x20>)
 8010112:	781b      	ldrb	r3, [r3, #0]
 8010114:	f083 0301 	eor.w	r3, r3, #1
 8010118:	b2db      	uxtb	r3, r3
 801011a:	2b00      	cmp	r3, #0
    {
        return;
 801011c:	bf00      	nop
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 801011e:	370c      	adds	r7, #12
 8010120:	46bd      	mov	sp, r7
 8010122:	bc80      	pop	{r7}
 8010124:	4770      	bx	lr
 8010126:	bf00      	nop
 8010128:	200007fc 	.word	0x200007fc

0801012c <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b082      	sub	sp, #8
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.DataBufferSize != 0 )
 8010134:	4b08      	ldr	r3, [pc, #32]	; (8010158 <OnProcessTimer+0x2c>)
 8010136:	7a9b      	ldrb	r3, [r3, #10]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d002      	beq.n	8010142 <OnProcessTimer+0x16>
    {
        ComplianceTestState.IsTxPending = true;
 801013c:	4b06      	ldr	r3, [pc, #24]	; (8010158 <OnProcessTimer+0x2c>)
 801013e:	2201      	movs	r2, #1
 8010140:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 8010142:	4b06      	ldr	r3, [pc, #24]	; (801015c <OnProcessTimer+0x30>)
 8010144:	695b      	ldr	r3, [r3, #20]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d002      	beq.n	8010150 <OnProcessTimer+0x24>
    {
        CompliancePackage.OnPackageProcessEvent();
 801014a:	4b04      	ldr	r3, [pc, #16]	; (801015c <OnProcessTimer+0x30>)
 801014c:	695b      	ldr	r3, [r3, #20]
 801014e:	4798      	blx	r3
    }
}
 8010150:	bf00      	nop
 8010152:	3708      	adds	r7, #8
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}
 8010158:	200007fc 	.word	0x200007fc
 801015c:	200000d8 	.word	0x200000d8

08010160 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 8010160:	b480      	push	{r7}
 8010162:	b083      	sub	sp, #12
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 8010168:	2300      	movs	r3, #0
}
 801016a:	4618      	mov	r0, r3
 801016c:	370c      	adds	r7, #12
 801016e:	46bd      	mov	sp, r7
 8010170:	bc80      	pop	{r7}
 8010172:	4770      	bx	lr

08010174 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 8010174:	b480      	push	{r7}
 8010176:	b083      	sub	sp, #12
 8010178:	af00      	add	r7, sp, #0
 801017a:	4603      	mov	r3, r0
 801017c:	6039      	str	r1, [r7, #0]
 801017e:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 8010180:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 8010184:	4618      	mov	r0, r3
 8010186:	370c      	adds	r7, #12
 8010188:	46bd      	mov	sp, r7
 801018a:	bc80      	pop	{r7}
 801018c:	4770      	bx	lr
	...

08010190 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 8010190:	b590      	push	{r4, r7, lr}
 8010192:	b083      	sub	sp, #12
 8010194:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8010196:	f00d fe25 	bl	801dde4 <UTIL_TIMER_GetCurrentTime>
 801019a:	4603      	mov	r3, r0
 801019c:	4a0f      	ldr	r2, [pc, #60]	; (80101dc <OnRadioTxDone+0x4c>)
 801019e:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 80101a0:	4c0f      	ldr	r4, [pc, #60]	; (80101e0 <OnRadioTxDone+0x50>)
 80101a2:	463b      	mov	r3, r7
 80101a4:	4618      	mov	r0, r3
 80101a6:	f00c ff9b 	bl	801d0e0 <SysTimeGet>
 80101aa:	f504 734e 	add.w	r3, r4, #824	; 0x338
 80101ae:	463a      	mov	r2, r7
 80101b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80101b4:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 80101b8:	4a0a      	ldr	r2, [pc, #40]	; (80101e4 <OnRadioTxDone+0x54>)
 80101ba:	7813      	ldrb	r3, [r2, #0]
 80101bc:	f043 0320 	orr.w	r3, r3, #32
 80101c0:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 80101c2:	f003 fa71 	bl	80136a8 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 80101c6:	4b08      	ldr	r3, [pc, #32]	; (80101e8 <OnRadioTxDone+0x58>)
 80101c8:	2201      	movs	r2, #1
 80101ca:	2100      	movs	r1, #0
 80101cc:	2002      	movs	r0, #2
 80101ce:	f00d fef9 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
}
 80101d2:	bf00      	nop
 80101d4:	370c      	adds	r7, #12
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd90      	pop	{r4, r7, pc}
 80101da:	bf00      	nop
 80101dc:	20001998 	.word	0x20001998
 80101e0:	20000850 	.word	0x20000850
 80101e4:	20001994 	.word	0x20001994
 80101e8:	0801edec 	.word	0x0801edec

080101ec <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b084      	sub	sp, #16
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	60f8      	str	r0, [r7, #12]
 80101f4:	4608      	mov	r0, r1
 80101f6:	4611      	mov	r1, r2
 80101f8:	461a      	mov	r2, r3
 80101fa:	4603      	mov	r3, r0
 80101fc:	817b      	strh	r3, [r7, #10]
 80101fe:	460b      	mov	r3, r1
 8010200:	813b      	strh	r3, [r7, #8]
 8010202:	4613      	mov	r3, r2
 8010204:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8010206:	f00d fded 	bl	801dde4 <UTIL_TIMER_GetCurrentTime>
 801020a:	4603      	mov	r3, r0
 801020c:	4a11      	ldr	r2, [pc, #68]	; (8010254 <OnRadioRxDone+0x68>)
 801020e:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 8010210:	4a10      	ldr	r2, [pc, #64]	; (8010254 <OnRadioRxDone+0x68>)
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 8010216:	4a0f      	ldr	r2, [pc, #60]	; (8010254 <OnRadioRxDone+0x68>)
 8010218:	897b      	ldrh	r3, [r7, #10]
 801021a:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 801021c:	4a0d      	ldr	r2, [pc, #52]	; (8010254 <OnRadioRxDone+0x68>)
 801021e:	893b      	ldrh	r3, [r7, #8]
 8010220:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 8010222:	4a0c      	ldr	r2, [pc, #48]	; (8010254 <OnRadioRxDone+0x68>)
 8010224:	79fb      	ldrb	r3, [r7, #7]
 8010226:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 8010228:	4a0b      	ldr	r2, [pc, #44]	; (8010258 <OnRadioRxDone+0x6c>)
 801022a:	7813      	ldrb	r3, [r2, #0]
 801022c:	f043 0310 	orr.w	r3, r3, #16
 8010230:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 8010232:	4a09      	ldr	r2, [pc, #36]	; (8010258 <OnRadioRxDone+0x6c>)
 8010234:	7813      	ldrb	r3, [r2, #0]
 8010236:	f043 0301 	orr.w	r3, r3, #1
 801023a:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 801023c:	f003 fa34 	bl	80136a8 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8010240:	4b06      	ldr	r3, [pc, #24]	; (801025c <OnRadioRxDone+0x70>)
 8010242:	2201      	movs	r2, #1
 8010244:	2100      	movs	r1, #0
 8010246:	2002      	movs	r0, #2
 8010248:	f00d febc 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
}
 801024c:	bf00      	nop
 801024e:	3710      	adds	r7, #16
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}
 8010254:	2000199c 	.word	0x2000199c
 8010258:	20001994 	.word	0x20001994
 801025c:	0801edfc 	.word	0x0801edfc

08010260 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 8010260:	b580      	push	{r7, lr}
 8010262:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8010264:	4a07      	ldr	r2, [pc, #28]	; (8010284 <OnRadioTxTimeout+0x24>)
 8010266:	7813      	ldrb	r3, [r2, #0]
 8010268:	f043 0308 	orr.w	r3, r3, #8
 801026c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 801026e:	f003 fa1b 	bl	80136a8 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8010272:	4b05      	ldr	r3, [pc, #20]	; (8010288 <OnRadioTxTimeout+0x28>)
 8010274:	2201      	movs	r2, #1
 8010276:	2100      	movs	r1, #0
 8010278:	2002      	movs	r0, #2
 801027a:	f00d fea3 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
}
 801027e:	bf00      	nop
 8010280:	bd80      	pop	{r7, pc}
 8010282:	bf00      	nop
 8010284:	20001994 	.word	0x20001994
 8010288:	0801ee0c 	.word	0x0801ee0c

0801028c <OnRadioRxError>:

static void OnRadioRxError( void )
{
 801028c:	b580      	push	{r7, lr}
 801028e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 8010290:	4a04      	ldr	r2, [pc, #16]	; (80102a4 <OnRadioRxError+0x18>)
 8010292:	7813      	ldrb	r3, [r2, #0]
 8010294:	f043 0304 	orr.w	r3, r3, #4
 8010298:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 801029a:	f003 fa05 	bl	80136a8 <OnMacProcessNotify>
}
 801029e:	bf00      	nop
 80102a0:	bd80      	pop	{r7, pc}
 80102a2:	bf00      	nop
 80102a4:	20001994 	.word	0x20001994

080102a8 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 80102ac:	4a07      	ldr	r2, [pc, #28]	; (80102cc <OnRadioRxTimeout+0x24>)
 80102ae:	7813      	ldrb	r3, [r2, #0]
 80102b0:	f043 0302 	orr.w	r3, r3, #2
 80102b4:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 80102b6:	f003 f9f7 	bl	80136a8 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 80102ba:	4b05      	ldr	r3, [pc, #20]	; (80102d0 <OnRadioRxTimeout+0x28>)
 80102bc:	2201      	movs	r2, #1
 80102be:	2100      	movs	r1, #0
 80102c0:	2002      	movs	r0, #2
 80102c2:	f00d fe7f 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
}
 80102c6:	bf00      	nop
 80102c8:	bd80      	pop	{r7, pc}
 80102ca:	bf00      	nop
 80102cc:	20001994 	.word	0x20001994
 80102d0:	0801ee1c 	.word	0x0801ee1c

080102d4 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 80102d4:	b480      	push	{r7}
 80102d6:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80102d8:	4b08      	ldr	r3, [pc, #32]	; (80102fc <UpdateRxSlotIdleState+0x28>)
 80102da:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80102de:	2b02      	cmp	r3, #2
 80102e0:	d004      	beq.n	80102ec <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 80102e2:	4b07      	ldr	r3, [pc, #28]	; (8010300 <UpdateRxSlotIdleState+0x2c>)
 80102e4:	2206      	movs	r2, #6
 80102e6:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 80102ea:	e003      	b.n	80102f4 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 80102ec:	4b04      	ldr	r3, [pc, #16]	; (8010300 <UpdateRxSlotIdleState+0x2c>)
 80102ee:	2202      	movs	r2, #2
 80102f0:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
}
 80102f4:	bf00      	nop
 80102f6:	46bd      	mov	sp, r7
 80102f8:	bc80      	pop	{r7}
 80102fa:	4770      	bx	lr
 80102fc:	20000d6c 	.word	0x20000d6c
 8010300:	20000850 	.word	0x20000850

08010304 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b092      	sub	sp, #72	; 0x48
 8010308:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 801030a:	4b4a      	ldr	r3, [pc, #296]	; (8010434 <ProcessRadioTxDone+0x130>)
 801030c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010310:	2b02      	cmp	r3, #2
 8010312:	d002      	beq.n	801031a <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 8010314:	4b48      	ldr	r3, [pc, #288]	; (8010438 <ProcessRadioTxDone+0x134>)
 8010316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010318:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801031a:	f3ef 8310 	mrs	r3, PRIMASK
 801031e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8010320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 8010322:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 8010324:	b672      	cpsid	i
}
 8010326:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 8010328:	f00d fd5c 	bl	801dde4 <UTIL_TIMER_GetCurrentTime>
 801032c:	4602      	mov	r2, r0
 801032e:	4b43      	ldr	r3, [pc, #268]	; (801043c <ProcessRadioTxDone+0x138>)
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	1ad3      	subs	r3, r2, r3
 8010334:	63bb      	str	r3, [r7, #56]	; 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 8010336:	4b42      	ldr	r3, [pc, #264]	; (8010440 <ProcessRadioTxDone+0x13c>)
 8010338:	f8d3 23b0 	ldr.w	r2, [r3, #944]	; 0x3b0
 801033c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801033e:	1ad3      	subs	r3, r2, r3
 8010340:	4619      	mov	r1, r3
 8010342:	4840      	ldr	r0, [pc, #256]	; (8010444 <ProcessRadioTxDone+0x140>)
 8010344:	f00d fca4 	bl	801dc90 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8010348:	483e      	ldr	r0, [pc, #248]	; (8010444 <ProcessRadioTxDone+0x140>)
 801034a:	f00d fbc3 	bl	801dad4 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 801034e:	4b3c      	ldr	r3, [pc, #240]	; (8010440 <ProcessRadioTxDone+0x13c>)
 8010350:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8010354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010356:	1ad3      	subs	r3, r2, r3
 8010358:	4619      	mov	r1, r3
 801035a:	483b      	ldr	r0, [pc, #236]	; (8010448 <ProcessRadioTxDone+0x144>)
 801035c:	f00d fc98 	bl	801dc90 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8010360:	4839      	ldr	r0, [pc, #228]	; (8010448 <ProcessRadioTxDone+0x144>)
 8010362:	f00d fbb7 	bl	801dad4 <UTIL_TIMER_Start>
 8010366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010368:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801036a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801036c:	f383 8810 	msr	PRIMASK, r3
}
 8010370:	bf00      	nop
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 8010372:	4b33      	ldr	r3, [pc, #204]	; (8010440 <ProcessRadioTxDone+0x13c>)
 8010374:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8010378:	2b00      	cmp	r3, #0
 801037a:	d01a      	beq.n	80103b2 <ProcessRadioTxDone+0xae>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 801037c:	2315      	movs	r3, #21
 801037e:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010382:	4b2c      	ldr	r3, [pc, #176]	; (8010434 <ProcessRadioTxDone+0x130>)
 8010384:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010388:	f107 0220 	add.w	r2, r7, #32
 801038c:	4611      	mov	r1, r2
 801038e:	4618      	mov	r0, r3
 8010390:	f006 febb 	bl	801710a <RegionGetPhyParam>
 8010394:	4603      	mov	r3, r0
 8010396:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8010398:	4b29      	ldr	r3, [pc, #164]	; (8010440 <ProcessRadioTxDone+0x13c>)
 801039a:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 801039e:	69fb      	ldr	r3, [r7, #28]
 80103a0:	4413      	add	r3, r2
 80103a2:	4619      	mov	r1, r3
 80103a4:	4829      	ldr	r0, [pc, #164]	; (801044c <ProcessRadioTxDone+0x148>)
 80103a6:	f00d fc73 	bl	801dc90 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 80103aa:	4828      	ldr	r0, [pc, #160]	; (801044c <ProcessRadioTxDone+0x148>)
 80103ac:	f00d fb92 	bl	801dad4 <UTIL_TIMER_Start>
 80103b0:	e003      	b.n	80103ba <ProcessRadioTxDone+0xb6>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80103b2:	4b23      	ldr	r3, [pc, #140]	; (8010440 <ProcessRadioTxDone+0x13c>)
 80103b4:	2200      	movs	r2, #0
 80103b6:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 80103ba:	4b20      	ldr	r3, [pc, #128]	; (801043c <ProcessRadioTxDone+0x138>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	4a1d      	ldr	r2, [pc, #116]	; (8010434 <ProcessRadioTxDone+0x130>)
 80103c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 80103c2:	4b1f      	ldr	r3, [pc, #124]	; (8010440 <ProcessRadioTxDone+0x13c>)
 80103c4:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 80103c8:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 80103ca:	4b1c      	ldr	r3, [pc, #112]	; (801043c <ProcessRadioTxDone+0x138>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80103d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80103d4:	4618      	mov	r0, r3
 80103d6:	f00c febb 	bl	801d150 <SysTimeGetMcuTime>
 80103da:	4638      	mov	r0, r7
 80103dc:	4b15      	ldr	r3, [pc, #84]	; (8010434 <ProcessRadioTxDone+0x130>)
 80103de:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 80103e2:	9200      	str	r2, [sp, #0]
 80103e4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80103e8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80103ec:	ca06      	ldmia	r2, {r1, r2}
 80103ee:	f00c fe10 	bl	801d012 <SysTimeSub>
 80103f2:	f107 0314 	add.w	r3, r7, #20
 80103f6:	463a      	mov	r2, r7
 80103f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80103fc:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8010400:	4b0f      	ldr	r3, [pc, #60]	; (8010440 <ProcessRadioTxDone+0x13c>)
 8010402:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8010406:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 8010408:	2301      	movs	r3, #1
 801040a:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 801040c:	4b09      	ldr	r3, [pc, #36]	; (8010434 <ProcessRadioTxDone+0x130>)
 801040e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8010412:	2b00      	cmp	r3, #0
 8010414:	d101      	bne.n	801041a <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 8010416:	2300      	movs	r3, #0
 8010418:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 801041a:	4b06      	ldr	r3, [pc, #24]	; (8010434 <ProcessRadioTxDone+0x130>)
 801041c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010420:	f107 0208 	add.w	r2, r7, #8
 8010424:	4611      	mov	r1, r2
 8010426:	4618      	mov	r0, r3
 8010428:	f006 fe87 	bl	801713a <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 801042c:	bf00      	nop
 801042e:	3740      	adds	r7, #64	; 0x40
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}
 8010434:	20000d6c 	.word	0x20000d6c
 8010438:	0801f4f4 	.word	0x0801f4f4
 801043c:	20001998 	.word	0x20001998
 8010440:	20000850 	.word	0x20000850
 8010444:	20000bd0 	.word	0x20000bd0
 8010448:	20000be8 	.word	0x20000be8
 801044c:	20000c50 	.word	0x20000c50

08010450 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 8010450:	b580      	push	{r7, lr}
 8010452:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8010454:	4b10      	ldr	r3, [pc, #64]	; (8010498 <PrepareRxDoneAbort+0x48>)
 8010456:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801045a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801045e:	4a0e      	ldr	r2, [pc, #56]	; (8010498 <PrepareRxDoneAbort+0x48>)
 8010460:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 8010464:	4b0c      	ldr	r3, [pc, #48]	; (8010498 <PrepareRxDoneAbort+0x48>)
 8010466:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 801046a:	2b00      	cmp	r3, #0
 801046c:	d002      	beq.n	8010474 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 801046e:	2000      	movs	r0, #0
 8010470:	f001 f9fa 	bl	8011868 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 8010474:	4a08      	ldr	r2, [pc, #32]	; (8010498 <PrepareRxDoneAbort+0x48>)
 8010476:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801047a:	f043 0302 	orr.w	r3, r3, #2
 801047e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 8010482:	4a05      	ldr	r2, [pc, #20]	; (8010498 <PrepareRxDoneAbort+0x48>)
 8010484:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010488:	f043 0310 	orr.w	r3, r3, #16
 801048c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

    UpdateRxSlotIdleState( );
 8010490:	f7ff ff20 	bl	80102d4 <UpdateRxSlotIdleState>
}
 8010494:	bf00      	nop
 8010496:	bd80      	pop	{r7, pc}
 8010498:	20000850 	.word	0x20000850

0801049c <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 801049c:	b590      	push	{r4, r7, lr}
 801049e:	b0ab      	sub	sp, #172	; 0xac
 80104a0:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 80104a2:	2312      	movs	r3, #18
 80104a4:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 80104a8:	4b81      	ldr	r3, [pc, #516]	; (80106b0 <ProcessRadioRxDone+0x214>)
 80104aa:	685b      	ldr	r3, [r3, #4]
 80104ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint16_t size = RxDoneParams.Size;
 80104b0:	4b7f      	ldr	r3, [pc, #508]	; (80106b0 <ProcessRadioRxDone+0x214>)
 80104b2:	891b      	ldrh	r3, [r3, #8]
 80104b4:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    int16_t rssi = RxDoneParams.Rssi;
 80104b8:	4b7d      	ldr	r3, [pc, #500]	; (80106b0 <ProcessRadioRxDone+0x214>)
 80104ba:	895b      	ldrh	r3, [r3, #10]
 80104bc:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
    int8_t snr = RxDoneParams.Snr;
 80104c0:	4b7b      	ldr	r3, [pc, #492]	; (80106b0 <ProcessRadioRxDone+0x214>)
 80104c2:	7b1b      	ldrb	r3, [r3, #12]
 80104c4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

    uint8_t pktHeaderLen = 0;
 80104c8:	2300      	movs	r3, #0
 80104ca:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

    uint32_t downLinkCounter = 0;
 80104ce:	2300      	movs	r3, #0
 80104d0:	617b      	str	r3, [r7, #20]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80104d2:	4b78      	ldr	r3, [pc, #480]	; (80106b4 <ProcessRadioRxDone+0x218>)
 80104d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80104d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint8_t multicast = 0;
 80104dc:	2300      	movs	r3, #0
 80104de:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 80104e2:	2301      	movs	r3, #1
 80104e4:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 80104e8:	2301      	movs	r3, #1
 80104ea:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 80104ee:	4a72      	ldr	r2, [pc, #456]	; (80106b8 <ProcessRadioRxDone+0x21c>)
 80104f0:	7813      	ldrb	r3, [r2, #0]
 80104f2:	f36f 0300 	bfc	r3, #0, #1
 80104f6:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 80104f8:	4b70      	ldr	r3, [pc, #448]	; (80106bc <ProcessRadioRxDone+0x220>)
 80104fa:	2200      	movs	r2, #0
 80104fc:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
    MacCtx.RxStatus.Rssi = rssi;
 8010500:	4a6e      	ldr	r2, [pc, #440]	; (80106bc <ProcessRadioRxDone+0x220>)
 8010502:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8010506:	f8a2 348c 	strh.w	r3, [r2, #1164]	; 0x48c
    MacCtx.RxStatus.Snr = snr;
 801050a:	4a6c      	ldr	r2, [pc, #432]	; (80106bc <ProcessRadioRxDone+0x220>)
 801050c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010510:	f882 348e 	strb.w	r3, [r2, #1166]	; 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8010514:	4b69      	ldr	r3, [pc, #420]	; (80106bc <ProcessRadioRxDone+0x220>)
 8010516:	f893 2490 	ldrb.w	r2, [r3, #1168]	; 0x490
 801051a:	4b68      	ldr	r3, [pc, #416]	; (80106bc <ProcessRadioRxDone+0x220>)
 801051c:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
    MacCtx.McpsIndication.Port = 0;
 8010520:	4b66      	ldr	r3, [pc, #408]	; (80106bc <ProcessRadioRxDone+0x220>)
 8010522:	2200      	movs	r2, #0
 8010524:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
    MacCtx.McpsIndication.Multicast = 0;
 8010528:	4b64      	ldr	r3, [pc, #400]	; (80106bc <ProcessRadioRxDone+0x220>)
 801052a:	2200      	movs	r2, #0
 801052c:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 8010530:	4b62      	ldr	r3, [pc, #392]	; (80106bc <ProcessRadioRxDone+0x220>)
 8010532:	2200      	movs	r2, #0
 8010534:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 8010538:	4b60      	ldr	r3, [pc, #384]	; (80106bc <ProcessRadioRxDone+0x220>)
 801053a:	2200      	movs	r2, #0
 801053c:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 8010540:	4b5e      	ldr	r3, [pc, #376]	; (80106bc <ProcessRadioRxDone+0x220>)
 8010542:	2200      	movs	r2, #0
 8010544:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 8010548:	4b5c      	ldr	r3, [pc, #368]	; (80106bc <ProcessRadioRxDone+0x220>)
 801054a:	2200      	movs	r2, #0
 801054c:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 8010550:	4b5a      	ldr	r3, [pc, #360]	; (80106bc <ProcessRadioRxDone+0x220>)
 8010552:	2200      	movs	r2, #0
 8010554:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8010558:	4b58      	ldr	r3, [pc, #352]	; (80106bc <ProcessRadioRxDone+0x220>)
 801055a:	2200      	movs	r2, #0
 801055c:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8010560:	4b56      	ldr	r3, [pc, #344]	; (80106bc <ProcessRadioRxDone+0x220>)
 8010562:	2200      	movs	r2, #0
 8010564:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 8010568:	4b54      	ldr	r3, [pc, #336]	; (80106bc <ProcessRadioRxDone+0x220>)
 801056a:	2200      	movs	r2, #0
 801056c:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8010570:	4b52      	ldr	r3, [pc, #328]	; (80106bc <ProcessRadioRxDone+0x220>)
 8010572:	2200      	movs	r2, #0
 8010574:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 8010578:	4b50      	ldr	r3, [pc, #320]	; (80106bc <ProcessRadioRxDone+0x220>)
 801057a:	2200      	movs	r2, #0
 801057c:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 8010580:	4b4f      	ldr	r3, [pc, #316]	; (80106c0 <ProcessRadioRxDone+0x224>)
 8010582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010584:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8010586:	4b4d      	ldr	r3, [pc, #308]	; (80106bc <ProcessRadioRxDone+0x220>)
 8010588:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 801058c:	2b00      	cmp	r3, #0
 801058e:	d102      	bne.n	8010596 <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 8010590:	484c      	ldr	r0, [pc, #304]	; (80106c4 <ProcessRadioRxDone+0x228>)
 8010592:	f00d fb0d 	bl	801dbb0 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8010596:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 801059a:	4619      	mov	r1, r3
 801059c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80105a0:	f004 fe28 	bl	80151f4 <LoRaMacClassBRxBeacon>
 80105a4:	4603      	mov	r3, r0
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d00b      	beq.n	80105c2 <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 80105aa:	4a44      	ldr	r2, [pc, #272]	; (80106bc <ProcessRadioRxDone+0x220>)
 80105ac:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80105b0:	f8a2 347e 	strh.w	r3, [r2, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 80105b4:	4a41      	ldr	r2, [pc, #260]	; (80106bc <ProcessRadioRxDone+0x220>)
 80105b6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80105ba:	f882 3480 	strb.w	r3, [r2, #1152]	; 0x480
        return;
 80105be:	f000 bc75 	b.w	8010eac <ProcessRadioRxDone+0xa10>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80105c2:	4b3c      	ldr	r3, [pc, #240]	; (80106b4 <ProcessRadioRxDone+0x218>)
 80105c4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80105c8:	2b01      	cmp	r3, #1
 80105ca:	d11e      	bne.n	801060a <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80105cc:	f004 fe25 	bl	801521a <LoRaMacClassBIsPingExpected>
 80105d0:	4603      	mov	r3, r0
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d00a      	beq.n	80105ec <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80105d6:	2000      	movs	r0, #0
 80105d8:	f004 fdd6 	bl	8015188 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80105dc:	2000      	movs	r0, #0
 80105de:	f004 fdf7 	bl	80151d0 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 80105e2:	4b36      	ldr	r3, [pc, #216]	; (80106bc <ProcessRadioRxDone+0x220>)
 80105e4:	2204      	movs	r2, #4
 80105e6:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 80105ea:	e00e      	b.n	801060a <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80105ec:	f004 fe1c 	bl	8015228 <LoRaMacClassBIsMulticastExpected>
 80105f0:	4603      	mov	r3, r0
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d009      	beq.n	801060a <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80105f6:	2000      	movs	r0, #0
 80105f8:	f004 fdd0 	bl	801519c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80105fc:	2000      	movs	r0, #0
 80105fe:	f004 fdf0 	bl	80151e2 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8010602:	4b2e      	ldr	r3, [pc, #184]	; (80106bc <ProcessRadioRxDone+0x220>)
 8010604:	2205      	movs	r2, #5
 8010606:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 801060a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 801060e:	2b00      	cmp	r3, #0
 8010610:	d107      	bne.n	8010622 <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010612:	4b2a      	ldr	r3, [pc, #168]	; (80106bc <ProcessRadioRxDone+0x220>)
 8010614:	2201      	movs	r2, #1
 8010616:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
        PrepareRxDoneAbort( );
 801061a:	f7ff ff19 	bl	8010450 <PrepareRxDoneAbort>
        return;
 801061e:	f000 bc45 	b.w	8010eac <ProcessRadioRxDone+0xa10>
    }

    macHdr.Value = payload[pktHeaderLen++];
 8010622:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8010626:	1c5a      	adds	r2, r3, #1
 8010628:	f887 208e 	strb.w	r2, [r7, #142]	; 0x8e
 801062c:	461a      	mov	r2, r3
 801062e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010632:	4413      	add	r3, r2
 8010634:	781b      	ldrb	r3, [r3, #0]
 8010636:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 801063a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 801063e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010642:	b2db      	uxtb	r3, r3
 8010644:	3b01      	subs	r3, #1
 8010646:	2b06      	cmp	r3, #6
 8010648:	f200 8403 	bhi.w	8010e52 <ProcessRadioRxDone+0x9b6>
 801064c:	a201      	add	r2, pc, #4	; (adr r2, 8010654 <ProcessRadioRxDone+0x1b8>)
 801064e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010652:	bf00      	nop
 8010654:	08010671 	.word	0x08010671
 8010658:	08010e53 	.word	0x08010e53
 801065c:	0801086f 	.word	0x0801086f
 8010660:	08010e53 	.word	0x08010e53
 8010664:	08010867 	.word	0x08010867
 8010668:	08010e53 	.word	0x08010e53
 801066c:	08010df7 	.word	0x08010df7
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8010670:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010674:	2b10      	cmp	r3, #16
 8010676:	d807      	bhi.n	8010688 <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010678:	4b10      	ldr	r3, [pc, #64]	; (80106bc <ProcessRadioRxDone+0x220>)
 801067a:	2201      	movs	r2, #1
 801067c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8010680:	f7ff fee6 	bl	8010450 <PrepareRxDoneAbort>
                return;
 8010684:	f000 bc12 	b.w	8010eac <ProcessRadioRxDone+0xa10>
            }
            macMsgJoinAccept.Buffer = payload;
 8010688:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801068c:	61bb      	str	r3, [r7, #24]
            macMsgJoinAccept.BufSize = size;
 801068e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010692:	b2db      	uxtb	r3, r3
 8010694:	773b      	strb	r3, [r7, #28]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8010696:	4b07      	ldr	r3, [pc, #28]	; (80106b4 <ProcessRadioRxDone+0x218>)
 8010698:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 801069c:	2b00      	cmp	r3, #0
 801069e:	d013      	beq.n	80106c8 <ProcessRadioRxDone+0x22c>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80106a0:	4b06      	ldr	r3, [pc, #24]	; (80106bc <ProcessRadioRxDone+0x220>)
 80106a2:	2201      	movs	r2, #1
 80106a4:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 80106a8:	f7ff fed2 	bl	8010450 <PrepareRxDoneAbort>
                return;
 80106ac:	e3fe      	b.n	8010eac <ProcessRadioRxDone+0xa10>
 80106ae:	bf00      	nop
 80106b0:	2000199c 	.word	0x2000199c
 80106b4:	20000d6c 	.word	0x20000d6c
 80106b8:	20001994 	.word	0x20001994
 80106bc:	20000850 	.word	0x20000850
 80106c0:	0801f4f4 	.word	0x0801f4f4
 80106c4:	20000be8 	.word	0x20000be8
            }

            SecureElementGetJoinEui( joinEui );
 80106c8:	f107 0308 	add.w	r3, r7, #8
 80106cc:	4618      	mov	r0, r3
 80106ce:	f7fd ff7d 	bl	800e5cc <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 80106d2:	f107 0218 	add.w	r2, r7, #24
 80106d6:	f107 0308 	add.w	r3, r7, #8
 80106da:	4619      	mov	r1, r3
 80106dc:	20ff      	movs	r0, #255	; 0xff
 80106de:	f005 ff95 	bl	801660c <LoRaMacCryptoHandleJoinAccept>
 80106e2:	4603      	mov	r3, r0
 80106e4:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 80106e8:	2300      	movs	r3, #0
 80106ea:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80106ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80106f2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80106f6:	b2db      	uxtb	r3, r3
 80106f8:	b25b      	sxtb	r3, r3
 80106fa:	713b      	strb	r3, [r7, #4]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80106fc:	4bb1      	ldr	r3, [pc, #708]	; (80109c4 <ProcessRadioRxDone+0x528>)
 80106fe:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8010702:	717b      	strb	r3, [r7, #5]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 8010704:	4baf      	ldr	r3, [pc, #700]	; (80109c4 <ProcessRadioRxDone+0x528>)
 8010706:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801070a:	1d39      	adds	r1, r7, #4
 801070c:	2207      	movs	r2, #7
 801070e:	4618      	mov	r0, r3
 8010710:	f006 fd36 	bl	8017180 <RegionVerify>
 8010714:	4603      	mov	r3, r0
 8010716:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 801071a:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 801071e:	2b00      	cmp	r3, #0
 8010720:	f040 8095 	bne.w	801084e <ProcessRadioRxDone+0x3b2>
 8010724:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8010728:	2b00      	cmp	r3, #0
 801072a:	f000 8090 	beq.w	801084e <ProcessRadioRxDone+0x3b2>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 801072e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010732:	461a      	mov	r2, r3
 8010734:	4ba3      	ldr	r3, [pc, #652]	; (80109c4 <ProcessRadioRxDone+0x528>)
 8010736:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 801073a:	4ba2      	ldr	r3, [pc, #648]	; (80109c4 <ProcessRadioRxDone+0x528>)
 801073c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8010740:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010744:	021b      	lsls	r3, r3, #8
 8010746:	4313      	orrs	r3, r2
 8010748:	4a9e      	ldr	r2, [pc, #632]	; (80109c4 <ProcessRadioRxDone+0x528>)
 801074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 801074e:	4b9d      	ldr	r3, [pc, #628]	; (80109c4 <ProcessRadioRxDone+0x528>)
 8010750:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8010754:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010758:	041b      	lsls	r3, r3, #16
 801075a:	4313      	orrs	r3, r2
 801075c:	4a99      	ldr	r2, [pc, #612]	; (80109c4 <ProcessRadioRxDone+0x528>)
 801075e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8010762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010764:	4a97      	ldr	r2, [pc, #604]	; (80109c4 <ProcessRadioRxDone+0x528>)
 8010766:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 801076a:	4b96      	ldr	r3, [pc, #600]	; (80109c4 <ProcessRadioRxDone+0x528>)
 801076c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010770:	4619      	mov	r1, r3
 8010772:	2002      	movs	r0, #2
 8010774:	f7fd ff42 	bl	800e5fc <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8010778:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801077c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8010780:	b2db      	uxtb	r3, r3
 8010782:	461a      	mov	r2, r3
 8010784:	4b8f      	ldr	r3, [pc, #572]	; (80109c4 <ProcessRadioRxDone+0x528>)
 8010786:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 801078a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801078e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010792:	b2db      	uxtb	r3, r3
 8010794:	461a      	mov	r2, r3
 8010796:	4b8b      	ldr	r3, [pc, #556]	; (80109c4 <ProcessRadioRxDone+0x528>)
 8010798:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 801079c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80107a0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80107a4:	b2db      	uxtb	r3, r3
 80107a6:	461a      	mov	r2, r3
 80107a8:	4b86      	ldr	r3, [pc, #536]	; (80109c4 <ProcessRadioRxDone+0x528>)
 80107aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 80107ae:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80107b2:	461a      	mov	r2, r3
 80107b4:	4b83      	ldr	r3, [pc, #524]	; (80109c4 <ProcessRadioRxDone+0x528>)
 80107b6:	659a      	str	r2, [r3, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 80107b8:	4b82      	ldr	r3, [pc, #520]	; (80109c4 <ProcessRadioRxDone+0x528>)
 80107ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d102      	bne.n	80107c6 <ProcessRadioRxDone+0x32a>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 80107c0:	4b80      	ldr	r3, [pc, #512]	; (80109c4 <ProcessRadioRxDone+0x528>)
 80107c2:	2201      	movs	r2, #1
 80107c4:	659a      	str	r2, [r3, #88]	; 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 80107c6:	4b7f      	ldr	r3, [pc, #508]	; (80109c4 <ProcessRadioRxDone+0x528>)
 80107c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80107ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80107ce:	fb02 f303 	mul.w	r3, r2, r3
 80107d2:	4a7c      	ldr	r2, [pc, #496]	; (80109c4 <ProcessRadioRxDone+0x528>)
 80107d4:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80107d6:	4b7b      	ldr	r3, [pc, #492]	; (80109c4 <ProcessRadioRxDone+0x528>)
 80107d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80107da:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80107de:	4a79      	ldr	r2, [pc, #484]	; (80109c4 <ProcessRadioRxDone+0x528>)
 80107e0:	65d3      	str	r3, [r2, #92]	; 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 80107e2:	4b78      	ldr	r3, [pc, #480]	; (80109c4 <ProcessRadioRxDone+0x528>)
 80107e4:	2201      	movs	r2, #1
 80107e6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 80107ea:	4b76      	ldr	r3, [pc, #472]	; (80109c4 <ProcessRadioRxDone+0x528>)
 80107ec:	2200      	movs	r2, #0
 80107ee:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 80107f2:	f107 0318 	add.w	r3, r7, #24
 80107f6:	3312      	adds	r3, #18
 80107f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 80107fc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010800:	b2db      	uxtb	r3, r3
 8010802:	3b11      	subs	r3, #17
 8010804:	b2db      	uxtb	r3, r3
 8010806:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 801080a:	4b6f      	ldr	r3, [pc, #444]	; (80109c8 <ProcessRadioRxDone+0x52c>)
 801080c:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 8010810:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8010814:	4b6b      	ldr	r3, [pc, #428]	; (80109c4 <ProcessRadioRxDone+0x528>)
 8010816:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801081a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 801081e:	4611      	mov	r1, r2
 8010820:	4618      	mov	r0, r3
 8010822:	f006 fcc4 	bl	80171ae <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8010826:	4b67      	ldr	r3, [pc, #412]	; (80109c4 <ProcessRadioRxDone+0x528>)
 8010828:	2202      	movs	r2, #2
 801082a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 801082e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8010832:	4618      	mov	r0, r3
 8010834:	f005 f9f4 	bl	8015c20 <LoRaMacConfirmQueueIsCmdActive>
 8010838:	4603      	mov	r3, r0
 801083a:	2b00      	cmp	r3, #0
 801083c:	f000 8311 	beq.w	8010e62 <ProcessRadioRxDone+0x9c6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 8010840:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8010844:	4619      	mov	r1, r3
 8010846:	2000      	movs	r0, #0
 8010848:	f005 f95e 	bl	8015b08 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 801084c:	e309      	b.n	8010e62 <ProcessRadioRxDone+0x9c6>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 801084e:	2001      	movs	r0, #1
 8010850:	f005 f9e6 	bl	8015c20 <LoRaMacConfirmQueueIsCmdActive>
 8010854:	4603      	mov	r3, r0
 8010856:	2b00      	cmp	r3, #0
 8010858:	f000 8302 	beq.w	8010e60 <ProcessRadioRxDone+0x9c4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 801085c:	2101      	movs	r1, #1
 801085e:	2007      	movs	r0, #7
 8010860:	f005 f952 	bl	8015b08 <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 8010864:	e2fc      	b.n	8010e60 <ProcessRadioRxDone+0x9c4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8010866:	4b58      	ldr	r3, [pc, #352]	; (80109c8 <ProcessRadioRxDone+0x52c>)
 8010868:	2201      	movs	r2, #1
 801086a:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801086e:	4b55      	ldr	r3, [pc, #340]	; (80109c4 <ProcessRadioRxDone+0x528>)
 8010870:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8010874:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8010878:	4b53      	ldr	r3, [pc, #332]	; (80109c8 <ProcessRadioRxDone+0x52c>)
 801087a:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 801087e:	b25b      	sxtb	r3, r3
 8010880:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8010884:	230d      	movs	r3, #13
 8010886:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 801088a:	4b4e      	ldr	r3, [pc, #312]	; (80109c4 <ProcessRadioRxDone+0x528>)
 801088c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8010890:	2b00      	cmp	r3, #0
 8010892:	d002      	beq.n	801089a <ProcessRadioRxDone+0x3fe>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8010894:	230e      	movs	r3, #14
 8010896:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801089a:	4b4a      	ldr	r3, [pc, #296]	; (80109c4 <ProcessRadioRxDone+0x528>)
 801089c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80108a0:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80108a4:	4611      	mov	r1, r2
 80108a6:	4618      	mov	r0, r3
 80108a8:	f006 fc2f 	bl	801710a <RegionGetPhyParam>
 80108ac:	4603      	mov	r3, r0
 80108ae:	673b      	str	r3, [r7, #112]	; 0x70
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 80108b0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80108b4:	3b0d      	subs	r3, #13
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	b21b      	sxth	r3, r3
 80108ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80108be:	b21a      	sxth	r2, r3
 80108c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80108c2:	b21b      	sxth	r3, r3
 80108c4:	429a      	cmp	r2, r3
 80108c6:	dc03      	bgt.n	80108d0 <ProcessRadioRxDone+0x434>
 80108c8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80108cc:	2b0b      	cmp	r3, #11
 80108ce:	d806      	bhi.n	80108de <ProcessRadioRxDone+0x442>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80108d0:	4b3d      	ldr	r3, [pc, #244]	; (80109c8 <ProcessRadioRxDone+0x52c>)
 80108d2:	2201      	movs	r2, #1
 80108d4:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 80108d8:	f7ff fdba 	bl	8010450 <PrepareRxDoneAbort>
                return;
 80108dc:	e2e6      	b.n	8010eac <ProcessRadioRxDone+0xa10>
            }
            macMsgData.Buffer = payload;
 80108de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80108e2:	643b      	str	r3, [r7, #64]	; 0x40
            macMsgData.BufSize = size;
 80108e4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80108e8:	b2db      	uxtb	r3, r3
 80108ea:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
            macMsgData.FRMPayload = MacCtx.RxPayload;
 80108ee:	4b37      	ldr	r3, [pc, #220]	; (80109cc <ProcessRadioRxDone+0x530>)
 80108f0:	667b      	str	r3, [r7, #100]	; 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 80108f2:	23ff      	movs	r3, #255	; 0xff
 80108f4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 80108f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80108fc:	4618      	mov	r0, r3
 80108fe:	f006 f987 	bl	8016c10 <LoRaMacParserData>
 8010902:	4603      	mov	r3, r0
 8010904:	2b00      	cmp	r3, #0
 8010906:	d006      	beq.n	8010916 <ProcessRadioRxDone+0x47a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010908:	4b2f      	ldr	r3, [pc, #188]	; (80109c8 <ProcessRadioRxDone+0x52c>)
 801090a:	2201      	movs	r2, #1
 801090c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8010910:	f7ff fd9e 	bl	8010450 <PrepareRxDoneAbort>
                return;
 8010914:	e2ca      	b.n	8010eac <ProcessRadioRxDone+0xa10>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010916:	4b2b      	ldr	r3, [pc, #172]	; (80109c4 <ProcessRadioRxDone+0x528>)
 8010918:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801091c:	2b01      	cmp	r3, #1
 801091e:	d132      	bne.n	8010986 <ProcessRadioRxDone+0x4ea>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 8010920:	f004 fc7b 	bl	801521a <LoRaMacClassBIsPingExpected>
 8010924:	4603      	mov	r3, r0
 8010926:	2b00      	cmp	r3, #0
 8010928:	d014      	beq.n	8010954 <ProcessRadioRxDone+0x4b8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801092a:	2000      	movs	r0, #0
 801092c:	f004 fc2c 	bl	8015188 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 8010930:	2000      	movs	r0, #0
 8010932:	f004 fc4d 	bl	80151d0 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8010936:	4b24      	ldr	r3, [pc, #144]	; (80109c8 <ProcessRadioRxDone+0x52c>)
 8010938:	2204      	movs	r2, #4
 801093a:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 801093e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010940:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8010944:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8010948:	b2db      	uxtb	r3, r3
 801094a:	4619      	mov	r1, r3
 801094c:	4610      	mov	r0, r2
 801094e:	f004 fced 	bl	801532c <LoRaMacClassBSetFPendingBit>
 8010952:	e018      	b.n	8010986 <ProcessRadioRxDone+0x4ea>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010954:	f004 fc68 	bl	8015228 <LoRaMacClassBIsMulticastExpected>
 8010958:	4603      	mov	r3, r0
 801095a:	2b00      	cmp	r3, #0
 801095c:	d013      	beq.n	8010986 <ProcessRadioRxDone+0x4ea>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801095e:	2000      	movs	r0, #0
 8010960:	f004 fc1c 	bl	801519c <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8010964:	2000      	movs	r0, #0
 8010966:	f004 fc3c 	bl	80151e2 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 801096a:	4b17      	ldr	r3, [pc, #92]	; (80109c8 <ProcessRadioRxDone+0x52c>)
 801096c:	2205      	movs	r2, #5
 801096e:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8010972:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010974:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8010978:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801097c:	b2db      	uxtb	r3, r3
 801097e:	4619      	mov	r1, r3
 8010980:	4610      	mov	r0, r2
 8010982:	f004 fcd3 	bl	801532c <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8010986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010988:	4a0f      	ldr	r2, [pc, #60]	; (80109c8 <ProcessRadioRxDone+0x52c>)
 801098a:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 801098e:	f107 0212 	add.w	r2, r7, #18
 8010992:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010996:	4611      	mov	r1, r2
 8010998:	4618      	mov	r0, r3
 801099a:	f002 fd81 	bl	80134a0 <DetermineFrameType>
 801099e:	4603      	mov	r3, r0
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d006      	beq.n	80109b2 <ProcessRadioRxDone+0x516>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80109a4:	4b08      	ldr	r3, [pc, #32]	; (80109c8 <ProcessRadioRxDone+0x52c>)
 80109a6:	2201      	movs	r2, #1
 80109a8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 80109ac:	f7ff fd50 	bl	8010450 <PrepareRxDoneAbort>
                return;
 80109b0:	e27c      	b.n	8010eac <ProcessRadioRxDone+0xa10>
            }

            //Check if it is a multicast message
            multicast = 0;
 80109b2:	2300      	movs	r3, #0
 80109b4:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
            downLinkCounter = 0;
 80109b8:	2300      	movs	r3, #0
 80109ba:	617b      	str	r3, [r7, #20]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80109bc:	2300      	movs	r3, #0
 80109be:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 80109c2:	e055      	b.n	8010a70 <ProcessRadioRxDone+0x5d4>
 80109c4:	20000d6c 	.word	0x20000d6c
 80109c8:	20000850 	.word	0x20000850
 80109cc:	20000a88 	.word	0x20000a88
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80109d0:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 80109d4:	499f      	ldr	r1, [pc, #636]	; (8010c54 <ProcessRadioRxDone+0x7b8>)
 80109d6:	4613      	mov	r3, r2
 80109d8:	005b      	lsls	r3, r3, #1
 80109da:	4413      	add	r3, r2
 80109dc:	011b      	lsls	r3, r3, #4
 80109de:	440b      	add	r3, r1
 80109e0:	33ec      	adds	r3, #236	; 0xec
 80109e2:	681a      	ldr	r2, [r3, #0]
 80109e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109e6:	429a      	cmp	r2, r3
 80109e8:	d13d      	bne.n	8010a66 <ProcessRadioRxDone+0x5ca>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 80109ea:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 80109ee:	4999      	ldr	r1, [pc, #612]	; (8010c54 <ProcessRadioRxDone+0x7b8>)
 80109f0:	4613      	mov	r3, r2
 80109f2:	005b      	lsls	r3, r3, #1
 80109f4:	4413      	add	r3, r2
 80109f6:	011b      	lsls	r3, r3, #4
 80109f8:	440b      	add	r3, r1
 80109fa:	33e9      	adds	r3, #233	; 0xe9
 80109fc:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d031      	beq.n	8010a66 <ProcessRadioRxDone+0x5ca>
                {
                    multicast = 1;
 8010a02:	2301      	movs	r3, #1
 8010a04:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8010a08:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8010a0c:	4991      	ldr	r1, [pc, #580]	; (8010c54 <ProcessRadioRxDone+0x7b8>)
 8010a0e:	4613      	mov	r3, r2
 8010a10:	005b      	lsls	r3, r3, #1
 8010a12:	4413      	add	r3, r2
 8010a14:	011b      	lsls	r3, r3, #4
 8010a16:	440b      	add	r3, r1
 8010a18:	33ea      	adds	r3, #234	; 0xea
 8010a1a:	781b      	ldrb	r3, [r3, #0]
 8010a1c:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8010a20:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8010a24:	498b      	ldr	r1, [pc, #556]	; (8010c54 <ProcessRadioRxDone+0x7b8>)
 8010a26:	4613      	mov	r3, r2
 8010a28:	005b      	lsls	r3, r3, #1
 8010a2a:	4413      	add	r3, r2
 8010a2c:	011b      	lsls	r3, r3, #4
 8010a2e:	440b      	add	r3, r1
 8010a30:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	617b      	str	r3, [r7, #20]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8010a3a:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8010a3e:	4985      	ldr	r1, [pc, #532]	; (8010c54 <ProcessRadioRxDone+0x7b8>)
 8010a40:	4613      	mov	r3, r2
 8010a42:	005b      	lsls	r3, r3, #1
 8010a44:	4413      	add	r3, r2
 8010a46:	011b      	lsls	r3, r3, #4
 8010a48:	440b      	add	r3, r1
 8010a4a:	33ec      	adds	r3, #236	; 0xec
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8010a52:	4b80      	ldr	r3, [pc, #512]	; (8010c54 <ProcessRadioRxDone+0x7b8>)
 8010a54:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010a58:	2b02      	cmp	r3, #2
 8010a5a:	d10e      	bne.n	8010a7a <ProcessRadioRxDone+0x5de>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8010a5c:	4b7e      	ldr	r3, [pc, #504]	; (8010c58 <ProcessRadioRxDone+0x7bc>)
 8010a5e:	2203      	movs	r2, #3
 8010a60:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    }
                    break;
 8010a64:	e009      	b.n	8010a7a <ProcessRadioRxDone+0x5de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010a66:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8010a6a:	3301      	adds	r3, #1
 8010a6c:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 8010a70:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d0ab      	beq.n	80109d0 <ProcessRadioRxDone+0x534>
 8010a78:	e000      	b.n	8010a7c <ProcessRadioRxDone+0x5e0>
                    break;
 8010a7a:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8010a7c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8010a80:	2b01      	cmp	r3, #1
 8010a82:	d117      	bne.n	8010ab4 <ProcessRadioRxDone+0x618>
 8010a84:	7cbb      	ldrb	r3, [r7, #18]
 8010a86:	2b03      	cmp	r3, #3
 8010a88:	d10d      	bne.n	8010aa6 <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8010a8a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8010a8e:	f003 0320 	and.w	r3, r3, #32
 8010a92:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d106      	bne.n	8010aa6 <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 8010a98:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8010a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010aa0:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d006      	beq.n	8010ab4 <ProcessRadioRxDone+0x618>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010aa6:	4b6c      	ldr	r3, [pc, #432]	; (8010c58 <ProcessRadioRxDone+0x7bc>)
 8010aa8:	2201      	movs	r2, #1
 8010aaa:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8010aae:	f7ff fccf 	bl	8010450 <PrepareRxDoneAbort>
                return;
 8010ab2:	e1fb      	b.n	8010eac <ProcessRadioRxDone+0xa10>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 8010ab4:	7cb9      	ldrb	r1, [r7, #18]
 8010ab6:	4c67      	ldr	r4, [pc, #412]	; (8010c54 <ProcessRadioRxDone+0x7b8>)
 8010ab8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8010abc:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8010ac0:	f107 0314 	add.w	r3, r7, #20
 8010ac4:	9301      	str	r3, [sp, #4]
 8010ac6:	f107 0313 	add.w	r3, r7, #19
 8010aca:	9300      	str	r3, [sp, #0]
 8010acc:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8010ad0:	f000 fee4 	bl	801189c <GetFCntDown>
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8010ada:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d017      	beq.n	8010b12 <ProcessRadioRxDone+0x676>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8010ae2:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8010ae6:	2b07      	cmp	r3, #7
 8010ae8:	d104      	bne.n	8010af4 <ProcessRadioRxDone+0x658>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8010aea:	4b5b      	ldr	r3, [pc, #364]	; (8010c58 <ProcessRadioRxDone+0x7bc>)
 8010aec:	2208      	movs	r2, #8
 8010aee:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 8010af2:	e003      	b.n	8010afc <ProcessRadioRxDone+0x660>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010af4:	4b58      	ldr	r3, [pc, #352]	; (8010c58 <ProcessRadioRxDone+0x7bc>)
 8010af6:	2201      	movs	r2, #1
 8010af8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8010afc:	697b      	ldr	r3, [r7, #20]
 8010afe:	4a56      	ldr	r2, [pc, #344]	; (8010c58 <ProcessRadioRxDone+0x7bc>)
 8010b00:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8010b04:	697b      	ldr	r3, [r7, #20]
 8010b06:	4a54      	ldr	r2, [pc, #336]	; (8010c58 <ProcessRadioRxDone+0x7bc>)
 8010b08:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
                PrepareRxDoneAbort( );
 8010b0c:	f7ff fca0 	bl	8010450 <PrepareRxDoneAbort>
                return;
 8010b10:	e1cc      	b.n	8010eac <ProcessRadioRxDone+0xa10>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8010b12:	7cfa      	ldrb	r2, [r7, #19]
 8010b14:	6979      	ldr	r1, [r7, #20]
 8010b16:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8010b1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010b1e:	9300      	str	r3, [sp, #0]
 8010b20:	460b      	mov	r3, r1
 8010b22:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8010b26:	f005 fed3 	bl	80168d0 <LoRaMacCryptoUnsecureMessage>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8010b30:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d00f      	beq.n	8010b58 <ProcessRadioRxDone+0x6bc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8010b38:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8010b3c:	2b02      	cmp	r3, #2
 8010b3e:	d104      	bne.n	8010b4a <ProcessRadioRxDone+0x6ae>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8010b40:	4b45      	ldr	r3, [pc, #276]	; (8010c58 <ProcessRadioRxDone+0x7bc>)
 8010b42:	220a      	movs	r2, #10
 8010b44:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 8010b48:	e003      	b.n	8010b52 <ProcessRadioRxDone+0x6b6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8010b4a:	4b43      	ldr	r3, [pc, #268]	; (8010c58 <ProcessRadioRxDone+0x7bc>)
 8010b4c:	220b      	movs	r2, #11
 8010b4e:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                PrepareRxDoneAbort( );
 8010b52:	f7ff fc7d 	bl	8010450 <PrepareRxDoneAbort>
                return;
 8010b56:	e1a9      	b.n	8010eac <ProcessRadioRxDone+0xa10>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010b58:	4b3f      	ldr	r3, [pc, #252]	; (8010c58 <ProcessRadioRxDone+0x7bc>)
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 8010b60:	4a3d      	ldr	r2, [pc, #244]	; (8010c58 <ProcessRadioRxDone+0x7bc>)
 8010b62:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8010b66:	f882 3422 	strb.w	r3, [r2, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 8010b6a:	4b3b      	ldr	r3, [pc, #236]	; (8010c58 <ProcessRadioRxDone+0x7bc>)
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 8010b72:	4b39      	ldr	r3, [pc, #228]	; (8010c58 <ProcessRadioRxDone+0x7bc>)
 8010b74:	2200      	movs	r2, #0
 8010b76:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8010b7a:	697b      	ldr	r3, [r7, #20]
 8010b7c:	4a36      	ldr	r2, [pc, #216]	; (8010c58 <ProcessRadioRxDone+0x7bc>)
 8010b7e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8010b82:	697b      	ldr	r3, [r7, #20]
 8010b84:	4a34      	ldr	r2, [pc, #208]	; (8010c58 <ProcessRadioRxDone+0x7bc>)
 8010b86:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8010b8a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8010b8e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010b92:	b2db      	uxtb	r3, r3
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	bf14      	ite	ne
 8010b98:	2301      	movne	r3, #1
 8010b9a:	2300      	moveq	r3, #0
 8010b9c:	b2da      	uxtb	r2, r3
 8010b9e:	4b2e      	ldr	r3, [pc, #184]	; (8010c58 <ProcessRadioRxDone+0x7bc>)
 8010ba0:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010ba4:	4b2c      	ldr	r3, [pc, #176]	; (8010c58 <ProcessRadioRxDone+0x7bc>)
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8010bac:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8010bb0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010bb4:	b2db      	uxtb	r3, r3
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	bf14      	ite	ne
 8010bba:	2301      	movne	r3, #1
 8010bbc:	2300      	moveq	r3, #0
 8010bbe:	b2da      	uxtb	r2, r3
 8010bc0:	4b25      	ldr	r3, [pc, #148]	; (8010c58 <ProcessRadioRxDone+0x7bc>)
 8010bc2:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010bc6:	4b24      	ldr	r3, [pc, #144]	; (8010c58 <ProcessRadioRxDone+0x7bc>)
 8010bc8:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d004      	beq.n	8010bda <ProcessRadioRxDone+0x73e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8010bd0:	4b21      	ldr	r3, [pc, #132]	; (8010c58 <ProcessRadioRxDone+0x7bc>)
 8010bd2:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010bd6:	2b01      	cmp	r3, #1
 8010bd8:	d106      	bne.n	8010be8 <ProcessRadioRxDone+0x74c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 8010bda:	4b1e      	ldr	r3, [pc, #120]	; (8010c54 <ProcessRadioRxDone+0x7b8>)
 8010bdc:	2200      	movs	r2, #0
 8010bde:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 8010be0:	4b1c      	ldr	r3, [pc, #112]	; (8010c54 <ProcessRadioRxDone+0x7b8>)
 8010be2:	2201      	movs	r2, #1
 8010be4:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 8010be8:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8010bec:	2b01      	cmp	r3, #1
 8010bee:	d104      	bne.n	8010bfa <ProcessRadioRxDone+0x75e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8010bf0:	4b19      	ldr	r3, [pc, #100]	; (8010c58 <ProcessRadioRxDone+0x7bc>)
 8010bf2:	2202      	movs	r2, #2
 8010bf4:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 8010bf8:	e03a      	b.n	8010c70 <ProcessRadioRxDone+0x7d4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8010bfa:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8010bfe:	f023 031f 	bic.w	r3, r3, #31
 8010c02:	b2db      	uxtb	r3, r3
 8010c04:	2ba0      	cmp	r3, #160	; 0xa0
 8010c06:	d12b      	bne.n	8010c60 <ProcessRadioRxDone+0x7c4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 8010c08:	4b12      	ldr	r3, [pc, #72]	; (8010c54 <ProcessRadioRxDone+0x7b8>)
 8010c0a:	2201      	movs	r2, #1
 8010c0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8010c10:	4b10      	ldr	r3, [pc, #64]	; (8010c54 <ProcessRadioRxDone+0x7b8>)
 8010c12:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d102      	bne.n	8010c20 <ProcessRadioRxDone+0x784>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8010c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c1c:	4a0d      	ldr	r2, [pc, #52]	; (8010c54 <ProcessRadioRxDone+0x7b8>)
 8010c1e:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8010c20:	4b0d      	ldr	r3, [pc, #52]	; (8010c58 <ProcessRadioRxDone+0x7bc>)
 8010c22:	2201      	movs	r2, #1
 8010c24:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010c28:	4b0b      	ldr	r3, [pc, #44]	; (8010c58 <ProcessRadioRxDone+0x7bc>)
 8010c2a:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d01e      	beq.n	8010c70 <ProcessRadioRxDone+0x7d4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 8010c32:	4b09      	ldr	r3, [pc, #36]	; (8010c58 <ProcessRadioRxDone+0x7bc>)
 8010c34:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010c38:	2b01      	cmp	r3, #1
 8010c3a:	d019      	beq.n	8010c70 <ProcessRadioRxDone+0x7d4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8010c3c:	4b05      	ldr	r3, [pc, #20]	; (8010c54 <ProcessRadioRxDone+0x7b8>)
 8010c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c42:	4a05      	ldr	r2, [pc, #20]	; (8010c58 <ProcessRadioRxDone+0x7bc>)
 8010c44:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 8010c48:	4b04      	ldr	r3, [pc, #16]	; (8010c5c <ProcessRadioRxDone+0x7c0>)
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	4a02      	ldr	r2, [pc, #8]	; (8010c58 <ProcessRadioRxDone+0x7bc>)
 8010c4e:	f8c2 3498 	str.w	r3, [r2, #1176]	; 0x498
 8010c52:	e00d      	b.n	8010c70 <ProcessRadioRxDone+0x7d4>
 8010c54:	20000d6c 	.word	0x20000d6c
 8010c58:	20000850 	.word	0x20000850
 8010c5c:	2000199c 	.word	0x2000199c
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 8010c60:	4b94      	ldr	r3, [pc, #592]	; (8010eb4 <ProcessRadioRxDone+0xa18>)
 8010c62:	2200      	movs	r2, #0
 8010c64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8010c68:	4b93      	ldr	r3, [pc, #588]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 8010c70:	4b90      	ldr	r3, [pc, #576]	; (8010eb4 <ProcessRadioRxDone+0xa18>)
 8010c72:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d106      	bne.n	8010c88 <ProcessRadioRxDone+0x7ec>
 8010c7a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8010c7e:	f003 0310 	and.w	r3, r3, #16
 8010c82:	b2db      	uxtb	r3, r3
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d008      	beq.n	8010c9a <ProcessRadioRxDone+0x7fe>
 8010c88:	4b8a      	ldr	r3, [pc, #552]	; (8010eb4 <ProcessRadioRxDone+0xa18>)
 8010c8a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d103      	bne.n	8010c9a <ProcessRadioRxDone+0x7fe>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 8010c92:	4b89      	ldr	r3, [pc, #548]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010c94:	2201      	movs	r2, #1
 8010c96:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8010c9a:	4b87      	ldr	r3, [pc, #540]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010c9c:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8010ca0:	4a85      	ldr	r2, [pc, #532]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010ca2:	f892 2440 	ldrb.w	r2, [r2, #1088]	; 0x440
 8010ca6:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 8010caa:	4618      	mov	r0, r3
 8010cac:	f001 ff8a 	bl	8012bc4 <RemoveMacCommands>

            switch( fType )
 8010cb0:	7cbb      	ldrb	r3, [r7, #18]
 8010cb2:	2b03      	cmp	r3, #3
 8010cb4:	d873      	bhi.n	8010d9e <ProcessRadioRxDone+0x902>
 8010cb6:	a201      	add	r2, pc, #4	; (adr r2, 8010cbc <ProcessRadioRxDone+0x820>)
 8010cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cbc:	08010ccd 	.word	0x08010ccd
 8010cc0:	08010d1d 	.word	0x08010d1d
 8010cc4:	08010d53 	.word	0x08010d53
 8010cc8:	08010d79 	.word	0x08010d79
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8010ccc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8010cd0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010cd4:	b2db      	uxtb	r3, r3
 8010cd6:	461c      	mov	r4, r3
 8010cd8:	4b77      	ldr	r3, [pc, #476]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010cda:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8010cde:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 8010ce2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8010ce6:	f102 0010 	add.w	r0, r2, #16
 8010cea:	9300      	str	r3, [sp, #0]
 8010cec:	460b      	mov	r3, r1
 8010cee:	4622      	mov	r2, r4
 8010cf0:	2100      	movs	r1, #0
 8010cf2:	f000 ff4f 	bl	8011b94 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010cf6:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8010cfa:	4b6f      	ldr	r3, [pc, #444]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010cfc:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8010d00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010d02:	4a6d      	ldr	r2, [pc, #436]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010d04:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8010d08:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8010d0c:	4b6a      	ldr	r3, [pc, #424]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010d0e:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8010d12:	4b69      	ldr	r3, [pc, #420]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010d14:	2201      	movs	r2, #1
 8010d16:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 8010d1a:	e047      	b.n	8010dac <ProcessRadioRxDone+0x910>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8010d1c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8010d20:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010d24:	b2db      	uxtb	r3, r3
 8010d26:	461c      	mov	r4, r3
 8010d28:	4b63      	ldr	r3, [pc, #396]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010d2a:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8010d2e:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 8010d32:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8010d36:	f102 0010 	add.w	r0, r2, #16
 8010d3a:	9300      	str	r3, [sp, #0]
 8010d3c:	460b      	mov	r3, r1
 8010d3e:	4622      	mov	r2, r4
 8010d40:	2100      	movs	r1, #0
 8010d42:	f000 ff27 	bl	8011b94 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010d46:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8010d4a:	4b5b      	ldr	r3, [pc, #364]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010d4c:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 8010d50:	e02c      	b.n	8010dac <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8010d52:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8010d54:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8010d58:	4b57      	ldr	r3, [pc, #348]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010d5a:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8010d5e:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 8010d62:	9300      	str	r3, [sp, #0]
 8010d64:	460b      	mov	r3, r1
 8010d66:	2100      	movs	r1, #0
 8010d68:	f000 ff14 	bl	8011b94 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010d6c:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8010d70:	4b51      	ldr	r3, [pc, #324]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010d72:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 8010d76:	e019      	b.n	8010dac <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010d78:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8010d7c:	4b4e      	ldr	r3, [pc, #312]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010d7e:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8010d82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010d84:	4a4c      	ldr	r2, [pc, #304]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010d86:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8010d8a:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8010d8e:	4b4a      	ldr	r3, [pc, #296]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010d90:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8010d94:	4b48      	ldr	r3, [pc, #288]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010d96:	2201      	movs	r2, #1
 8010d98:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 8010d9c:	e006      	b.n	8010dac <ProcessRadioRxDone+0x910>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010d9e:	4b46      	ldr	r3, [pc, #280]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010da0:	2201      	movs	r2, #1
 8010da2:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 8010da6:	f7ff fb53 	bl	8010450 <PrepareRxDoneAbort>
                    break;
 8010daa:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8010dac:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8010db0:	2be0      	cmp	r3, #224	; 0xe0
 8010db2:	d118      	bne.n	8010de6 <ProcessRadioRxDone+0x94a>
 8010db4:	4b3f      	ldr	r3, [pc, #252]	; (8010eb4 <ProcessRadioRxDone+0xa18>)
 8010db6:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 8010dba:	f083 0301 	eor.w	r3, r3, #1
 8010dbe:	b2db      	uxtb	r3, r3
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d010      	beq.n	8010de6 <ProcessRadioRxDone+0x94a>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010dc4:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8010dc8:	4b3b      	ldr	r3, [pc, #236]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010dca:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 8010dce:	4b3a      	ldr	r3, [pc, #232]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 8010dd6:	4b38      	ldr	r3, [pc, #224]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010dd8:	2200      	movs	r2, #0
 8010dda:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                MacCtx.McpsIndication.RxData = false;
 8010dde:	4b36      	ldr	r3, [pc, #216]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010de0:	2200      	movs	r2, #0
 8010de2:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8010de6:	4a34      	ldr	r2, [pc, #208]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010de8:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010dec:	f043 0302 	orr.w	r3, r3, #2
 8010df0:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

            break;
 8010df4:	e035      	b.n	8010e62 <ProcessRadioRxDone+0x9c6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8010df6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8010dfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010dfe:	18d1      	adds	r1, r2, r3
 8010e00:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8010e04:	b29b      	uxth	r3, r3
 8010e06:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8010e0a:	1ad3      	subs	r3, r2, r3
 8010e0c:	b29b      	uxth	r3, r3
 8010e0e:	461a      	mov	r2, r3
 8010e10:	482a      	ldr	r0, [pc, #168]	; (8010ebc <ProcessRadioRxDone+0xa20>)
 8010e12:	f008 fd32 	bl	801987a <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8010e16:	4b28      	ldr	r3, [pc, #160]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010e18:	2203      	movs	r2, #3
 8010e1a:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010e1e:	4b26      	ldr	r3, [pc, #152]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010e20:	2200      	movs	r2, #0
 8010e22:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8010e26:	4b24      	ldr	r3, [pc, #144]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010e28:	4a24      	ldr	r2, [pc, #144]	; (8010ebc <ProcessRadioRxDone+0xa20>)
 8010e2a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8010e2e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010e32:	b2da      	uxtb	r2, r3
 8010e34:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8010e38:	1ad3      	subs	r3, r2, r3
 8010e3a:	b2da      	uxtb	r2, r3
 8010e3c:	4b1e      	ldr	r3, [pc, #120]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010e3e:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 8010e42:	4a1d      	ldr	r2, [pc, #116]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010e44:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010e48:	f043 0302 	orr.w	r3, r3, #2
 8010e4c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            break;
 8010e50:	e007      	b.n	8010e62 <ProcessRadioRxDone+0x9c6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010e52:	4b19      	ldr	r3, [pc, #100]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010e54:	2201      	movs	r2, #1
 8010e56:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            PrepareRxDoneAbort( );
 8010e5a:	f7ff faf9 	bl	8010450 <PrepareRxDoneAbort>
            break;
 8010e5e:	e000      	b.n	8010e62 <ProcessRadioRxDone+0x9c6>
            break;
 8010e60:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010e62:	4b15      	ldr	r3, [pc, #84]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010e64:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d004      	beq.n	8010e76 <ProcessRadioRxDone+0x9da>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8010e6c:	4b12      	ldr	r3, [pc, #72]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010e6e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010e72:	2b01      	cmp	r3, #1
 8010e74:	d10c      	bne.n	8010e90 <ProcessRadioRxDone+0x9f4>
    {
        if( MacCtx.NodeAckRequested == true )
 8010e76:	4b10      	ldr	r3, [pc, #64]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010e78:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d007      	beq.n	8010e90 <ProcessRadioRxDone+0x9f4>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 8010e80:	4b0d      	ldr	r3, [pc, #52]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010e82:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d002      	beq.n	8010e90 <ProcessRadioRxDone+0x9f4>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 8010e8a:	2000      	movs	r0, #0
 8010e8c:	f000 fcec 	bl	8011868 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 8010e90:	4b09      	ldr	r3, [pc, #36]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010e92:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8010e96:	2b02      	cmp	r3, #2
 8010e98:	d006      	beq.n	8010ea8 <ProcessRadioRxDone+0xa0c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 8010e9a:	4a07      	ldr	r2, [pc, #28]	; (8010eb8 <ProcessRadioRxDone+0xa1c>)
 8010e9c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010ea0:	f043 0310 	orr.w	r3, r3, #16
 8010ea4:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 8010ea8:	f7ff fa14 	bl	80102d4 <UpdateRxSlotIdleState>
}
 8010eac:	37a4      	adds	r7, #164	; 0xa4
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd90      	pop	{r4, r7, pc}
 8010eb2:	bf00      	nop
 8010eb4:	20000d6c 	.word	0x20000d6c
 8010eb8:	20000850 	.word	0x20000850
 8010ebc:	20000a88 	.word	0x20000a88

08010ec0 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010ec4:	4b11      	ldr	r3, [pc, #68]	; (8010f0c <ProcessRadioTxTimeout+0x4c>)
 8010ec6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010eca:	2b02      	cmp	r3, #2
 8010ecc:	d002      	beq.n	8010ed4 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 8010ece:	4b10      	ldr	r3, [pc, #64]	; (8010f10 <ProcessRadioTxTimeout+0x50>)
 8010ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ed2:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8010ed4:	f7ff f9fe 	bl	80102d4 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8010ed8:	4b0e      	ldr	r3, [pc, #56]	; (8010f14 <ProcessRadioTxTimeout+0x54>)
 8010eda:	2202      	movs	r2, #2
 8010edc:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8010ee0:	2002      	movs	r0, #2
 8010ee2:	f004 fe69 	bl	8015bb8 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8010ee6:	4b0b      	ldr	r3, [pc, #44]	; (8010f14 <ProcessRadioTxTimeout+0x54>)
 8010ee8:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d003      	beq.n	8010ef8 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 8010ef0:	4b08      	ldr	r3, [pc, #32]	; (8010f14 <ProcessRadioTxTimeout+0x54>)
 8010ef2:	2201      	movs	r2, #1
 8010ef4:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8010ef8:	4a06      	ldr	r2, [pc, #24]	; (8010f14 <ProcessRadioTxTimeout+0x54>)
 8010efa:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010efe:	f043 0310 	orr.w	r3, r3, #16
 8010f02:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
}
 8010f06:	bf00      	nop
 8010f08:	bd80      	pop	{r7, pc}
 8010f0a:	bf00      	nop
 8010f0c:	20000d6c 	.word	0x20000d6c
 8010f10:	0801f4f4 	.word	0x0801f4f4
 8010f14:	20000850 	.word	0x20000850

08010f18 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b084      	sub	sp, #16
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	4603      	mov	r3, r0
 8010f20:	460a      	mov	r2, r1
 8010f22:	71fb      	strb	r3, [r7, #7]
 8010f24:	4613      	mov	r3, r2
 8010f26:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 8010f28:	2300      	movs	r3, #0
 8010f2a:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010f2c:	4b3d      	ldr	r3, [pc, #244]	; (8011024 <HandleRadioRxErrorTimeout+0x10c>)
 8010f2e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010f32:	2b02      	cmp	r3, #2
 8010f34:	d002      	beq.n	8010f3c <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 8010f36:	4b3c      	ldr	r3, [pc, #240]	; (8011028 <HandleRadioRxErrorTimeout+0x110>)
 8010f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f3a:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8010f3c:	f004 f966 	bl	801520c <LoRaMacClassBIsBeaconExpected>
 8010f40:	4603      	mov	r3, r0
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d007      	beq.n	8010f56 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8010f46:	2002      	movs	r0, #2
 8010f48:	f004 f914 	bl	8015174 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8010f4c:	2000      	movs	r0, #0
 8010f4e:	f004 f936 	bl	80151be <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8010f52:	2301      	movs	r3, #1
 8010f54:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010f56:	4b33      	ldr	r3, [pc, #204]	; (8011024 <HandleRadioRxErrorTimeout+0x10c>)
 8010f58:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010f5c:	2b01      	cmp	r3, #1
 8010f5e:	d119      	bne.n	8010f94 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010f60:	f004 f95b 	bl	801521a <LoRaMacClassBIsPingExpected>
 8010f64:	4603      	mov	r3, r0
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d007      	beq.n	8010f7a <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010f6a:	2000      	movs	r0, #0
 8010f6c:	f004 f90c 	bl	8015188 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8010f70:	2000      	movs	r0, #0
 8010f72:	f004 f92d 	bl	80151d0 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8010f76:	2301      	movs	r3, #1
 8010f78:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010f7a:	f004 f955 	bl	8015228 <LoRaMacClassBIsMulticastExpected>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d007      	beq.n	8010f94 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010f84:	2000      	movs	r0, #0
 8010f86:	f004 f909 	bl	801519c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8010f8a:	2000      	movs	r0, #0
 8010f8c:	f004 f929 	bl	80151e2 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8010f90:	2301      	movs	r3, #1
 8010f92:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 8010f94:	7bfb      	ldrb	r3, [r7, #15]
 8010f96:	f083 0301 	eor.w	r3, r3, #1
 8010f9a:	b2db      	uxtb	r3, r3
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d03b      	beq.n	8011018 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010fa0:	4b22      	ldr	r3, [pc, #136]	; (801102c <HandleRadioRxErrorTimeout+0x114>)
 8010fa2:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d122      	bne.n	8010ff0 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 8010faa:	4b20      	ldr	r3, [pc, #128]	; (801102c <HandleRadioRxErrorTimeout+0x114>)
 8010fac:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d003      	beq.n	8010fbc <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8010fb4:	4a1d      	ldr	r2, [pc, #116]	; (801102c <HandleRadioRxErrorTimeout+0x114>)
 8010fb6:	79fb      	ldrb	r3, [r7, #7]
 8010fb8:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8010fbc:	79fb      	ldrb	r3, [r7, #7]
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	f004 fdfa 	bl	8015bb8 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8010fc4:	4b17      	ldr	r3, [pc, #92]	; (8011024 <HandleRadioRxErrorTimeout+0x10c>)
 8010fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fc8:	4618      	mov	r0, r3
 8010fca:	f00c ff1d 	bl	801de08 <UTIL_TIMER_GetElapsedTime>
 8010fce:	4602      	mov	r2, r0
 8010fd0:	4b16      	ldr	r3, [pc, #88]	; (801102c <HandleRadioRxErrorTimeout+0x114>)
 8010fd2:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8010fd6:	429a      	cmp	r2, r3
 8010fd8:	d31e      	bcc.n	8011018 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 8010fda:	4815      	ldr	r0, [pc, #84]	; (8011030 <HandleRadioRxErrorTimeout+0x118>)
 8010fdc:	f00c fde8 	bl	801dbb0 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8010fe0:	4a12      	ldr	r2, [pc, #72]	; (801102c <HandleRadioRxErrorTimeout+0x114>)
 8010fe2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010fe6:	f043 0310 	orr.w	r3, r3, #16
 8010fea:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8010fee:	e013      	b.n	8011018 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 8010ff0:	4b0e      	ldr	r3, [pc, #56]	; (801102c <HandleRadioRxErrorTimeout+0x114>)
 8010ff2:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d003      	beq.n	8011002 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8010ffa:	4a0c      	ldr	r2, [pc, #48]	; (801102c <HandleRadioRxErrorTimeout+0x114>)
 8010ffc:	79bb      	ldrb	r3, [r7, #6]
 8010ffe:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8011002:	79bb      	ldrb	r3, [r7, #6]
 8011004:	4618      	mov	r0, r3
 8011006:	f004 fdd7 	bl	8015bb8 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 801100a:	4a08      	ldr	r2, [pc, #32]	; (801102c <HandleRadioRxErrorTimeout+0x114>)
 801100c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011010:	f043 0310 	orr.w	r3, r3, #16
 8011014:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 8011018:	f7ff f95c 	bl	80102d4 <UpdateRxSlotIdleState>
}
 801101c:	bf00      	nop
 801101e:	3710      	adds	r7, #16
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}
 8011024:	20000d6c 	.word	0x20000d6c
 8011028:	0801f4f4 	.word	0x0801f4f4
 801102c:	20000850 	.word	0x20000850
 8011030:	20000be8 	.word	0x20000be8

08011034 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 8011034:	b580      	push	{r7, lr}
 8011036:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8011038:	2106      	movs	r1, #6
 801103a:	2005      	movs	r0, #5
 801103c:	f7ff ff6c 	bl	8010f18 <HandleRadioRxErrorTimeout>
}
 8011040:	bf00      	nop
 8011042:	bd80      	pop	{r7, pc}

08011044 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8011044:	b580      	push	{r7, lr}
 8011046:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8011048:	2104      	movs	r1, #4
 801104a:	2003      	movs	r0, #3
 801104c:	f7ff ff64 	bl	8010f18 <HandleRadioRxErrorTimeout>
}
 8011050:	bf00      	nop
 8011052:	bd80      	pop	{r7, pc}

08011054 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b084      	sub	sp, #16
 8011058:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801105a:	f3ef 8310 	mrs	r3, PRIMASK
 801105e:	607b      	str	r3, [r7, #4]
  return(result);
 8011060:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8011062:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8011064:	b672      	cpsid	i
}
 8011066:	bf00      	nop
    events = LoRaMacRadioEvents;
 8011068:	4b1d      	ldr	r3, [pc, #116]	; (80110e0 <LoRaMacHandleIrqEvents+0x8c>)
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 801106e:	4b1c      	ldr	r3, [pc, #112]	; (80110e0 <LoRaMacHandleIrqEvents+0x8c>)
 8011070:	2200      	movs	r2, #0
 8011072:	601a      	str	r2, [r3, #0]
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011078:	68bb      	ldr	r3, [r7, #8]
 801107a:	f383 8810 	msr	PRIMASK, r3
}
 801107e:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d027      	beq.n	80110d6 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 8011086:	783b      	ldrb	r3, [r7, #0]
 8011088:	f003 0320 	and.w	r3, r3, #32
 801108c:	b2db      	uxtb	r3, r3
 801108e:	2b00      	cmp	r3, #0
 8011090:	d001      	beq.n	8011096 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 8011092:	f7ff f937 	bl	8010304 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8011096:	783b      	ldrb	r3, [r7, #0]
 8011098:	f003 0310 	and.w	r3, r3, #16
 801109c:	b2db      	uxtb	r3, r3
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d001      	beq.n	80110a6 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 80110a2:	f7ff f9fb 	bl	801049c <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 80110a6:	783b      	ldrb	r3, [r7, #0]
 80110a8:	f003 0308 	and.w	r3, r3, #8
 80110ac:	b2db      	uxtb	r3, r3
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d001      	beq.n	80110b6 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 80110b2:	f7ff ff05 	bl	8010ec0 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 80110b6:	783b      	ldrb	r3, [r7, #0]
 80110b8:	f003 0304 	and.w	r3, r3, #4
 80110bc:	b2db      	uxtb	r3, r3
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d001      	beq.n	80110c6 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 80110c2:	f7ff ffb7 	bl	8011034 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 80110c6:	783b      	ldrb	r3, [r7, #0]
 80110c8:	f003 0302 	and.w	r3, r3, #2
 80110cc:	b2db      	uxtb	r3, r3
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d001      	beq.n	80110d6 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 80110d2:	f7ff ffb7 	bl	8011044 <ProcessRadioRxTimeout>
        }
    }
}
 80110d6:	bf00      	nop
 80110d8:	3710      	adds	r7, #16
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}
 80110de:	bf00      	nop
 80110e0:	20001994 	.word	0x20001994

080110e4 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 80110e4:	b480      	push	{r7}
 80110e6:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 80110e8:	4b10      	ldr	r3, [pc, #64]	; (801112c <LoRaMacIsBusy+0x48>)
 80110ea:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80110ee:	2b01      	cmp	r3, #1
 80110f0:	d101      	bne.n	80110f6 <LoRaMacIsBusy+0x12>
    {
        return false;
 80110f2:	2300      	movs	r3, #0
 80110f4:	e015      	b.n	8011122 <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 80110f6:	4b0e      	ldr	r3, [pc, #56]	; (8011130 <LoRaMacIsBusy+0x4c>)
 80110f8:	781b      	ldrb	r3, [r3, #0]
 80110fa:	f003 0301 	and.w	r3, r3, #1
 80110fe:	b2db      	uxtb	r3, r3
 8011100:	2b00      	cmp	r3, #0
 8011102:	d001      	beq.n	8011108 <LoRaMacIsBusy+0x24>
    {
        return true;
 8011104:	2301      	movs	r3, #1
 8011106:	e00c      	b.n	8011122 <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011108:	4b08      	ldr	r3, [pc, #32]	; (801112c <LoRaMacIsBusy+0x48>)
 801110a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801110e:	2b00      	cmp	r3, #0
 8011110:	d106      	bne.n	8011120 <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8011112:	4b06      	ldr	r3, [pc, #24]	; (801112c <LoRaMacIsBusy+0x48>)
 8011114:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011118:	2b01      	cmp	r3, #1
 801111a:	d101      	bne.n	8011120 <LoRaMacIsBusy+0x3c>
    {
        return false;
 801111c:	2300      	movs	r3, #0
 801111e:	e000      	b.n	8011122 <LoRaMacIsBusy+0x3e>
    }
    return true;
 8011120:	2301      	movs	r3, #1
}
 8011122:	4618      	mov	r0, r3
 8011124:	46bd      	mov	sp, r7
 8011126:	bc80      	pop	{r7}
 8011128:	4770      	bx	lr
 801112a:	bf00      	nop
 801112c:	20000850 	.word	0x20000850
 8011130:	20001994 	.word	0x20001994

08011134 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 8011134:	b480      	push	{r7}
 8011136:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8011138:	4b05      	ldr	r3, [pc, #20]	; (8011150 <LoRaMacIsStopped+0x1c>)
 801113a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801113e:	2b01      	cmp	r3, #1
 8011140:	d101      	bne.n	8011146 <LoRaMacIsStopped+0x12>
    {
        return true;
 8011142:	2301      	movs	r3, #1
 8011144:	e000      	b.n	8011148 <LoRaMacIsStopped+0x14>
    }
    return false;
 8011146:	2300      	movs	r3, #0
}
 8011148:	4618      	mov	r0, r3
 801114a:	46bd      	mov	sp, r7
 801114c:	bc80      	pop	{r7}
 801114e:	4770      	bx	lr
 8011150:	20000850 	.word	0x20000850

08011154 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8011154:	b480      	push	{r7}
 8011156:	b083      	sub	sp, #12
 8011158:	af00      	add	r7, sp, #0
 801115a:	4603      	mov	r3, r0
 801115c:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 801115e:	4a04      	ldr	r2, [pc, #16]	; (8011170 <LoRaMacEnableRequests+0x1c>)
 8011160:	79fb      	ldrb	r3, [r7, #7]
 8011162:	f882 3492 	strb.w	r3, [r2, #1170]	; 0x492
}
 8011166:	bf00      	nop
 8011168:	370c      	adds	r7, #12
 801116a:	46bd      	mov	sp, r7
 801116c:	bc80      	pop	{r7}
 801116e:	4770      	bx	lr
 8011170:	20000850 	.word	0x20000850

08011174 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b082      	sub	sp, #8
 8011178:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 801117a:	4b2c      	ldr	r3, [pc, #176]	; (801122c <LoRaMacHandleRequestEvents+0xb8>)
 801117c:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011180:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 8011182:	4b2a      	ldr	r3, [pc, #168]	; (801122c <LoRaMacHandleRequestEvents+0xb8>)
 8011184:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011188:	2b00      	cmp	r3, #0
 801118a:	d14a      	bne.n	8011222 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 801118c:	4b27      	ldr	r3, [pc, #156]	; (801122c <LoRaMacHandleRequestEvents+0xb8>)
 801118e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011192:	f003 0301 	and.w	r3, r3, #1
 8011196:	b2db      	uxtb	r3, r3
 8011198:	2b00      	cmp	r3, #0
 801119a:	d006      	beq.n	80111aa <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 801119c:	4a23      	ldr	r2, [pc, #140]	; (801122c <LoRaMacHandleRequestEvents+0xb8>)
 801119e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80111a2:	f36f 0300 	bfc	r3, #0, #1
 80111a6:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80111aa:	4b20      	ldr	r3, [pc, #128]	; (801122c <LoRaMacHandleRequestEvents+0xb8>)
 80111ac:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80111b0:	f003 0304 	and.w	r3, r3, #4
 80111b4:	b2db      	uxtb	r3, r3
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d006      	beq.n	80111c8 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80111ba:	4a1c      	ldr	r2, [pc, #112]	; (801122c <LoRaMacHandleRequestEvents+0xb8>)
 80111bc:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80111c0:	f36f 0382 	bfc	r3, #2, #1
 80111c4:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80111c8:	2001      	movs	r0, #1
 80111ca:	f7ff ffc3 	bl	8011154 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 80111ce:	793b      	ldrb	r3, [r7, #4]
 80111d0:	f003 0301 	and.w	r3, r3, #1
 80111d4:	b2db      	uxtb	r3, r3
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d005      	beq.n	80111e6 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 80111da:	4b14      	ldr	r3, [pc, #80]	; (801122c <LoRaMacHandleRequestEvents+0xb8>)
 80111dc:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	4813      	ldr	r0, [pc, #76]	; (8011230 <LoRaMacHandleRequestEvents+0xbc>)
 80111e4:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 80111e6:	793b      	ldrb	r3, [r7, #4]
 80111e8:	f003 0304 	and.w	r3, r3, #4
 80111ec:	b2db      	uxtb	r3, r3
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d00e      	beq.n	8011210 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 80111f2:	4810      	ldr	r0, [pc, #64]	; (8011234 <LoRaMacHandleRequestEvents+0xc0>)
 80111f4:	f004 fd2e 	bl	8015c54 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 80111f8:	f004 fd7e 	bl	8015cf8 <LoRaMacConfirmQueueGetCnt>
 80111fc:	4603      	mov	r3, r0
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d006      	beq.n	8011210 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011202:	4a0a      	ldr	r2, [pc, #40]	; (801122c <LoRaMacHandleRequestEvents+0xb8>)
 8011204:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011208:	f043 0304 	orr.w	r3, r3, #4
 801120c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 8011210:	f004 f828 	bl	8015264 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 8011214:	4a05      	ldr	r2, [pc, #20]	; (801122c <LoRaMacHandleRequestEvents+0xb8>)
 8011216:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801121a:	f36f 1304 	bfc	r3, #4, #1
 801121e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 8011222:	bf00      	nop
 8011224:	3708      	adds	r7, #8
 8011226:	46bd      	mov	sp, r7
 8011228:	bd80      	pop	{r7, pc}
 801122a:	bf00      	nop
 801122c:	20000850 	.word	0x20000850
 8011230:	20000c90 	.word	0x20000c90
 8011234:	20000ca4 	.word	0x20000ca4

08011238 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 8011238:	b580      	push	{r7, lr}
 801123a:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 801123c:	4b16      	ldr	r3, [pc, #88]	; (8011298 <LoRaMacHandleIndicationEvents+0x60>)
 801123e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011242:	f003 0308 	and.w	r3, r3, #8
 8011246:	b2db      	uxtb	r3, r3
 8011248:	2b00      	cmp	r3, #0
 801124a:	d00d      	beq.n	8011268 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 801124c:	4a12      	ldr	r2, [pc, #72]	; (8011298 <LoRaMacHandleIndicationEvents+0x60>)
 801124e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011252:	f36f 03c3 	bfc	r3, #3, #1
 8011256:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 801125a:	4b0f      	ldr	r3, [pc, #60]	; (8011298 <LoRaMacHandleIndicationEvents+0x60>)
 801125c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011260:	68db      	ldr	r3, [r3, #12]
 8011262:	490e      	ldr	r1, [pc, #56]	; (801129c <LoRaMacHandleIndicationEvents+0x64>)
 8011264:	480e      	ldr	r0, [pc, #56]	; (80112a0 <LoRaMacHandleIndicationEvents+0x68>)
 8011266:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011268:	4b0b      	ldr	r3, [pc, #44]	; (8011298 <LoRaMacHandleIndicationEvents+0x60>)
 801126a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801126e:	f003 0302 	and.w	r3, r3, #2
 8011272:	b2db      	uxtb	r3, r3
 8011274:	2b00      	cmp	r3, #0
 8011276:	d00d      	beq.n	8011294 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8011278:	4a07      	ldr	r2, [pc, #28]	; (8011298 <LoRaMacHandleIndicationEvents+0x60>)
 801127a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801127e:	f36f 0341 	bfc	r3, #1, #1
 8011282:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8011286:	4b04      	ldr	r3, [pc, #16]	; (8011298 <LoRaMacHandleIndicationEvents+0x60>)
 8011288:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 801128c:	685b      	ldr	r3, [r3, #4]
 801128e:	4903      	ldr	r1, [pc, #12]	; (801129c <LoRaMacHandleIndicationEvents+0x64>)
 8011290:	4804      	ldr	r0, [pc, #16]	; (80112a4 <LoRaMacHandleIndicationEvents+0x6c>)
 8011292:	4798      	blx	r3
    }
}
 8011294:	bf00      	nop
 8011296:	bd80      	pop	{r7, pc}
 8011298:	20000850 	.word	0x20000850
 801129c:	20000cdc 	.word	0x20000cdc
 80112a0:	20000cb8 	.word	0x20000cb8
 80112a4:	20000c70 	.word	0x20000c70

080112a8 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b082      	sub	sp, #8
 80112ac:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80112ae:	4b2a      	ldr	r3, [pc, #168]	; (8011358 <LoRaMacHandleMcpsRequest+0xb0>)
 80112b0:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80112b4:	f003 0301 	and.w	r3, r3, #1
 80112b8:	b2db      	uxtb	r3, r3
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d048      	beq.n	8011350 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 80112be:	2300      	movs	r3, #0
 80112c0:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 80112c2:	2300      	movs	r3, #0
 80112c4:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80112c6:	4b24      	ldr	r3, [pc, #144]	; (8011358 <LoRaMacHandleMcpsRequest+0xb0>)
 80112c8:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d004      	beq.n	80112da <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 80112d0:	4b21      	ldr	r3, [pc, #132]	; (8011358 <LoRaMacHandleMcpsRequest+0xb0>)
 80112d2:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80112d6:	2b03      	cmp	r3, #3
 80112d8:	d104      	bne.n	80112e4 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 80112da:	f002 f943 	bl	8013564 <CheckRetransUnconfirmedUplink>
 80112de:	4603      	mov	r3, r0
 80112e0:	71fb      	strb	r3, [r7, #7]
 80112e2:	e010      	b.n	8011306 <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 80112e4:	4b1c      	ldr	r3, [pc, #112]	; (8011358 <LoRaMacHandleMcpsRequest+0xb0>)
 80112e6:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 80112ea:	2b01      	cmp	r3, #1
 80112ec:	d10b      	bne.n	8011306 <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 80112ee:	4b1a      	ldr	r3, [pc, #104]	; (8011358 <LoRaMacHandleMcpsRequest+0xb0>)
 80112f0:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d004      	beq.n	8011302 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 80112f8:	f002 f960 	bl	80135bc <CheckRetransConfirmedUplink>
 80112fc:	4603      	mov	r3, r0
 80112fe:	71fb      	strb	r3, [r7, #7]
 8011300:	e001      	b.n	8011306 <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 8011302:	2301      	movs	r3, #1
 8011304:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 8011306:	79fb      	ldrb	r3, [r7, #7]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d00d      	beq.n	8011328 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 801130c:	4813      	ldr	r0, [pc, #76]	; (801135c <LoRaMacHandleMcpsRequest+0xb4>)
 801130e:	f00c fc4f 	bl	801dbb0 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8011312:	4b11      	ldr	r3, [pc, #68]	; (8011358 <LoRaMacHandleMcpsRequest+0xb0>)
 8011314:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011318:	f023 0320 	bic.w	r3, r3, #32
 801131c:	4a0e      	ldr	r2, [pc, #56]	; (8011358 <LoRaMacHandleMcpsRequest+0xb0>)
 801131e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 8011322:	f002 f985 	bl	8013630 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 8011326:	e013      	b.n	8011350 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 8011328:	79bb      	ldrb	r3, [r7, #6]
 801132a:	f083 0301 	eor.w	r3, r3, #1
 801132e:	b2db      	uxtb	r3, r3
 8011330:	2b00      	cmp	r3, #0
 8011332:	d00d      	beq.n	8011350 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8011334:	4a08      	ldr	r2, [pc, #32]	; (8011358 <LoRaMacHandleMcpsRequest+0xb0>)
 8011336:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801133a:	f36f 1304 	bfc	r3, #4, #1
 801133e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 8011342:	4b05      	ldr	r3, [pc, #20]	; (8011358 <LoRaMacHandleMcpsRequest+0xb0>)
 8011344:	2200      	movs	r2, #0
 8011346:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 801134a:	2000      	movs	r0, #0
 801134c:	f000 f9c8 	bl	80116e0 <OnTxDelayedTimerEvent>
}
 8011350:	bf00      	nop
 8011352:	3708      	adds	r7, #8
 8011354:	46bd      	mov	sp, r7
 8011356:	bd80      	pop	{r7, pc}
 8011358:	20000850 	.word	0x20000850
 801135c:	20000bb8 	.word	0x20000bb8

08011360 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8011360:	b580      	push	{r7, lr}
 8011362:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011364:	4b18      	ldr	r3, [pc, #96]	; (80113c8 <LoRaMacHandleMlmeRequest+0x68>)
 8011366:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801136a:	f003 0304 	and.w	r3, r3, #4
 801136e:	b2db      	uxtb	r3, r3
 8011370:	2b00      	cmp	r3, #0
 8011372:	d026      	beq.n	80113c2 <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8011374:	2001      	movs	r0, #1
 8011376:	f004 fc53 	bl	8015c20 <LoRaMacConfirmQueueIsCmdActive>
 801137a:	4603      	mov	r3, r0
 801137c:	2b00      	cmp	r3, #0
 801137e:	d012      	beq.n	80113a6 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8011380:	2001      	movs	r0, #1
 8011382:	f004 fbef 	bl	8015b64 <LoRaMacConfirmQueueGetStatus>
 8011386:	4603      	mov	r3, r0
 8011388:	2b00      	cmp	r3, #0
 801138a:	d103      	bne.n	8011394 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 801138c:	4b0e      	ldr	r3, [pc, #56]	; (80113c8 <LoRaMacHandleMlmeRequest+0x68>)
 801138e:	2200      	movs	r2, #0
 8011390:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011394:	4b0c      	ldr	r3, [pc, #48]	; (80113c8 <LoRaMacHandleMlmeRequest+0x68>)
 8011396:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801139a:	f023 0302 	bic.w	r3, r3, #2
 801139e:	4a0a      	ldr	r2, [pc, #40]	; (80113c8 <LoRaMacHandleMlmeRequest+0x68>)
 80113a0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 80113a4:	e00d      	b.n	80113c2 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 80113a6:	2006      	movs	r0, #6
 80113a8:	f004 fc3a 	bl	8015c20 <LoRaMacConfirmQueueIsCmdActive>
 80113ac:	4603      	mov	r3, r0
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d007      	beq.n	80113c2 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80113b2:	4b05      	ldr	r3, [pc, #20]	; (80113c8 <LoRaMacHandleMlmeRequest+0x68>)
 80113b4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80113b8:	f023 0302 	bic.w	r3, r3, #2
 80113bc:	4a02      	ldr	r2, [pc, #8]	; (80113c8 <LoRaMacHandleMlmeRequest+0x68>)
 80113be:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 80113c2:	bf00      	nop
 80113c4:	bd80      	pop	{r7, pc}
 80113c6:	bf00      	nop
 80113c8:	20000850 	.word	0x20000850

080113cc <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80113d0:	200b      	movs	r0, #11
 80113d2:	f004 fc25 	bl	8015c20 <LoRaMacConfirmQueueIsCmdActive>
 80113d6:	4603      	mov	r3, r0
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d019      	beq.n	8011410 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 80113dc:	4b0e      	ldr	r3, [pc, #56]	; (8011418 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80113de:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80113e2:	f003 0301 	and.w	r3, r3, #1
 80113e6:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d111      	bne.n	8011410 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80113ec:	4b0a      	ldr	r3, [pc, #40]	; (8011418 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80113ee:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80113f2:	f003 0304 	and.w	r3, r3, #4
 80113f6:	b2db      	uxtb	r3, r3
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d009      	beq.n	8011410 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80113fc:	4b06      	ldr	r3, [pc, #24]	; (8011418 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80113fe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011402:	f023 0302 	bic.w	r3, r3, #2
 8011406:	4a04      	ldr	r2, [pc, #16]	; (8011418 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011408:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 801140c:	2301      	movs	r3, #1
 801140e:	e000      	b.n	8011412 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 8011410:	2300      	movs	r3, #0
}
 8011412:	4618      	mov	r0, r3
 8011414:	bd80      	pop	{r7, pc}
 8011416:	bf00      	nop
 8011418:	20000850 	.word	0x20000850

0801141c <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 801141c:	b480      	push	{r7}
 801141e:	b083      	sub	sp, #12
 8011420:	af00      	add	r7, sp, #0
 8011422:	4603      	mov	r3, r0
 8011424:	71fb      	strb	r3, [r7, #7]
 8011426:	460b      	mov	r3, r1
 8011428:	71bb      	strb	r3, [r7, #6]
 801142a:	4613      	mov	r3, r2
 801142c:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 801142e:	79fb      	ldrb	r3, [r7, #7]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d00a      	beq.n	801144a <CheckForMinimumAbpDatarate+0x2e>
 8011434:	79bb      	ldrb	r3, [r7, #6]
 8011436:	2b01      	cmp	r3, #1
 8011438:	d107      	bne.n	801144a <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 801143a:	797b      	ldrb	r3, [r7, #5]
 801143c:	f083 0301 	eor.w	r3, r3, #1
 8011440:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8011442:	2b00      	cmp	r3, #0
 8011444:	d001      	beq.n	801144a <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 8011446:	2301      	movs	r3, #1
 8011448:	e000      	b.n	801144c <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 801144a:	2300      	movs	r3, #0
}
 801144c:	4618      	mov	r0, r3
 801144e:	370c      	adds	r7, #12
 8011450:	46bd      	mov	sp, r7
 8011452:	bc80      	pop	{r7}
 8011454:	4770      	bx	lr
	...

08011458 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 8011458:	b480      	push	{r7}
 801145a:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 801145c:	4b0d      	ldr	r3, [pc, #52]	; (8011494 <LoRaMacCheckForRxAbort+0x3c>)
 801145e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011466:	2b00      	cmp	r3, #0
 8011468:	d00f      	beq.n	801148a <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 801146a:	4b0a      	ldr	r3, [pc, #40]	; (8011494 <LoRaMacCheckForRxAbort+0x3c>)
 801146c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011474:	4a07      	ldr	r2, [pc, #28]	; (8011494 <LoRaMacCheckForRxAbort+0x3c>)
 8011476:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801147a:	4b06      	ldr	r3, [pc, #24]	; (8011494 <LoRaMacCheckForRxAbort+0x3c>)
 801147c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011480:	f023 0302 	bic.w	r3, r3, #2
 8011484:	4a03      	ldr	r2, [pc, #12]	; (8011494 <LoRaMacCheckForRxAbort+0x3c>)
 8011486:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 801148a:	bf00      	nop
 801148c:	46bd      	mov	sp, r7
 801148e:	bc80      	pop	{r7}
 8011490:	4770      	bx	lr
 8011492:	bf00      	nop
 8011494:	20000850 	.word	0x20000850

08011498 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b084      	sub	sp, #16
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 80114a0:	2300      	movs	r3, #0
 80114a2:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 80114a4:	2300      	movs	r3, #0
 80114a6:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 80114a8:	4b51      	ldr	r3, [pc, #324]	; (80115f0 <LoRaMacHandleNvm+0x158>)
 80114aa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	f040 8099 	bne.w	80115e6 <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	2124      	movs	r1, #36	; 0x24
 80114b8:	4618      	mov	r0, r3
 80114ba:	f008 fa33 	bl	8019924 <Crc32>
 80114be:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114c4:	68ba      	ldr	r2, [r7, #8]
 80114c6:	429a      	cmp	r2, r3
 80114c8:	d006      	beq.n	80114d8 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	68ba      	ldr	r2, [r7, #8]
 80114ce:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 80114d0:	89fb      	ldrh	r3, [r7, #14]
 80114d2:	f043 0301 	orr.w	r3, r3, #1
 80114d6:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	3328      	adds	r3, #40	; 0x28
 80114dc:	211c      	movs	r1, #28
 80114de:	4618      	mov	r0, r3
 80114e0:	f008 fa20 	bl	8019924 <Crc32>
 80114e4:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114ea:	68ba      	ldr	r2, [r7, #8]
 80114ec:	429a      	cmp	r2, r3
 80114ee:	d006      	beq.n	80114fe <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	68ba      	ldr	r2, [r7, #8]
 80114f4:	645a      	str	r2, [r3, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 80114f6:	89fb      	ldrh	r3, [r7, #14]
 80114f8:	f043 0302 	orr.w	r3, r3, #2
 80114fc:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	3348      	adds	r3, #72	; 0x48
 8011502:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011506:	4618      	mov	r0, r3
 8011508:	f008 fa0c 	bl	8019924 <Crc32>
 801150c:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8011514:	68ba      	ldr	r2, [r7, #8]
 8011516:	429a      	cmp	r2, r3
 8011518:	d007      	beq.n	801152a <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	68ba      	ldr	r2, [r7, #8]
 801151e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8011522:	89fb      	ldrh	r3, [r7, #14]
 8011524:	f043 0304 	orr.w	r3, r3, #4
 8011528:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8011530:	21d4      	movs	r1, #212	; 0xd4
 8011532:	4618      	mov	r0, r3
 8011534:	f008 f9f6 	bl	8019924 <Crc32>
 8011538:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8011540:	68ba      	ldr	r2, [r7, #8]
 8011542:	429a      	cmp	r2, r3
 8011544:	d007      	beq.n	8011556 <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	68ba      	ldr	r2, [r7, #8]
 801154a:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 801154e:	89fb      	ldrh	r3, [r7, #14]
 8011550:	f043 0308 	orr.w	r3, r3, #8
 8011554:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	f503 7309 	add.w	r3, r3, #548	; 0x224
 801155c:	2110      	movs	r1, #16
 801155e:	4618      	mov	r0, r3
 8011560:	f008 f9e0 	bl	8019924 <Crc32>
 8011564:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 801156c:	68ba      	ldr	r2, [r7, #8]
 801156e:	429a      	cmp	r2, r3
 8011570:	d007      	beq.n	8011582 <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	68ba      	ldr	r2, [r7, #8]
 8011576:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 801157a:	89fb      	ldrh	r3, [r7, #14]
 801157c:	f043 0310 	orr.w	r3, r3, #16
 8011580:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8011588:	f44f 715e 	mov.w	r1, #888	; 0x378
 801158c:	4618      	mov	r0, r3
 801158e:	f008 f9c9 	bl	8019924 <Crc32>
 8011592:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 801159a:	68ba      	ldr	r2, [r7, #8]
 801159c:	429a      	cmp	r2, r3
 801159e:	d007      	beq.n	80115b0 <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	68ba      	ldr	r2, [r7, #8]
 80115a4:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 80115a8:	89fb      	ldrh	r3, [r7, #14]
 80115aa:	f043 0320 	orr.w	r3, r3, #32
 80115ae:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 80115b6:	2114      	movs	r1, #20
 80115b8:	4618      	mov	r0, r3
 80115ba:	f008 f9b3 	bl	8019924 <Crc32>
 80115be:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 80115c6:	68ba      	ldr	r2, [r7, #8]
 80115c8:	429a      	cmp	r2, r3
 80115ca:	d007      	beq.n	80115dc <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	68ba      	ldr	r2, [r7, #8]
 80115d0:	f8c3 25c8 	str.w	r2, [r3, #1480]	; 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 80115d4:	89fb      	ldrh	r3, [r7, #14]
 80115d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115da:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 80115dc:	89fb      	ldrh	r3, [r7, #14]
 80115de:	4618      	mov	r0, r3
 80115e0:	f002 f878 	bl	80136d4 <CallNvmDataChangeCallback>
 80115e4:	e000      	b.n	80115e8 <LoRaMacHandleNvm+0x150>
        return;
 80115e6:	bf00      	nop
}
 80115e8:	3710      	adds	r7, #16
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd80      	pop	{r7, pc}
 80115ee:	bf00      	nop
 80115f0:	20000850 	.word	0x20000850

080115f4 <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b084      	sub	sp, #16
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
 80115fc:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 80115fe:	683b      	ldr	r3, [r7, #0]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d00d      	beq.n	8011620 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 8011604:	6838      	ldr	r0, [r7, #0]
 8011606:	f00c fbff 	bl	801de08 <UTIL_TIMER_GetElapsedTime>
 801160a:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 801160c:	68fa      	ldr	r2, [r7, #12]
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	429a      	cmp	r2, r3
 8011612:	d905      	bls.n	8011620 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 8011614:	4b05      	ldr	r3, [pc, #20]	; (801162c <LoRaMacHandleResponseTimeout+0x38>)
 8011616:	2200      	movs	r2, #0
 8011618:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 801161c:	2301      	movs	r3, #1
 801161e:	e000      	b.n	8011622 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 8011620:	2300      	movs	r3, #0
}
 8011622:	4618      	mov	r0, r3
 8011624:	3710      	adds	r7, #16
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}
 801162a:	bf00      	nop
 801162c:	20000d6c 	.word	0x20000d6c

08011630 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b082      	sub	sp, #8
 8011634:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 8011636:	2300      	movs	r3, #0
 8011638:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 801163a:	f7ff fd0b 	bl	8011054 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 801163e:	f003 fe80 	bl	8015342 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8011642:	4b25      	ldr	r3, [pc, #148]	; (80116d8 <LoRaMacProcess+0xa8>)
 8011644:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011648:	f003 0310 	and.w	r3, r3, #16
 801164c:	b2db      	uxtb	r3, r3
 801164e:	2b00      	cmp	r3, #0
 8011650:	d023      	beq.n	801169a <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8011652:	2000      	movs	r0, #0
 8011654:	f7ff fd7e 	bl	8011154 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8011658:	f7ff fefe 	bl	8011458 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 801165c:	f002 f858 	bl	8013710 <IsRequestPending>
 8011660:	4603      	mov	r3, r0
 8011662:	2b00      	cmp	r3, #0
 8011664:	d006      	beq.n	8011674 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8011666:	f7ff feb1 	bl	80113cc <LoRaMacCheckForBeaconAcquisition>
 801166a:	4603      	mov	r3, r0
 801166c:	461a      	mov	r2, r3
 801166e:	79fb      	ldrb	r3, [r7, #7]
 8011670:	4313      	orrs	r3, r2
 8011672:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8011674:	79fb      	ldrb	r3, [r7, #7]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d103      	bne.n	8011682 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 801167a:	f7ff fe71 	bl	8011360 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 801167e:	f7ff fe13 	bl	80112a8 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8011682:	f7ff fd77 	bl	8011174 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011686:	2001      	movs	r0, #1
 8011688:	f7ff fd64 	bl	8011154 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 801168c:	4a12      	ldr	r2, [pc, #72]	; (80116d8 <LoRaMacProcess+0xa8>)
 801168e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011692:	f043 0320 	orr.w	r3, r3, #32
 8011696:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
    LoRaMacHandleIndicationEvents( );
 801169a:	f7ff fdcd 	bl	8011238 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 801169e:	4b0e      	ldr	r3, [pc, #56]	; (80116d8 <LoRaMacProcess+0xa8>)
 80116a0:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 80116a4:	2b02      	cmp	r3, #2
 80116a6:	d101      	bne.n	80116ac <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 80116a8:	f001 fc1a 	bl	8012ee0 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 80116ac:	4b0a      	ldr	r3, [pc, #40]	; (80116d8 <LoRaMacProcess+0xa8>)
 80116ae:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80116b2:	f003 0320 	and.w	r3, r3, #32
 80116b6:	b2db      	uxtb	r3, r3
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d009      	beq.n	80116d0 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 80116bc:	4a06      	ldr	r2, [pc, #24]	; (80116d8 <LoRaMacProcess+0xa8>)
 80116be:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80116c2:	f36f 1345 	bfc	r3, #5, #1
 80116c6:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        LoRaMacHandleNvm( &Nvm );
 80116ca:	4804      	ldr	r0, [pc, #16]	; (80116dc <LoRaMacProcess+0xac>)
 80116cc:	f7ff fee4 	bl	8011498 <LoRaMacHandleNvm>
    }
}
 80116d0:	bf00      	nop
 80116d2:	3708      	adds	r7, #8
 80116d4:	46bd      	mov	sp, r7
 80116d6:	bd80      	pop	{r7, pc}
 80116d8:	20000850 	.word	0x20000850
 80116dc:	20000d6c 	.word	0x20000d6c

080116e0 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b082      	sub	sp, #8
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 80116e8:	481e      	ldr	r0, [pc, #120]	; (8011764 <OnTxDelayedTimerEvent+0x84>)
 80116ea:	f00c fa61 	bl	801dbb0 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80116ee:	4b1e      	ldr	r3, [pc, #120]	; (8011768 <OnTxDelayedTimerEvent+0x88>)
 80116f0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80116f4:	f023 0320 	bic.w	r3, r3, #32
 80116f8:	4a1b      	ldr	r2, [pc, #108]	; (8011768 <OnTxDelayedTimerEvent+0x88>)
 80116fa:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 80116fe:	4b1b      	ldr	r3, [pc, #108]	; (801176c <OnTxDelayedTimerEvent+0x8c>)
 8011700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011704:	4a18      	ldr	r2, [pc, #96]	; (8011768 <OnTxDelayedTimerEvent+0x88>)
 8011706:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 801170a:	4611      	mov	r1, r2
 801170c:	4618      	mov	r0, r3
 801170e:	f7ff ff71 	bl	80115f4 <LoRaMacHandleResponseTimeout>
 8011712:	4603      	mov	r3, r0
 8011714:	2b00      	cmp	r3, #0
 8011716:	d11e      	bne.n	8011756 <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 8011718:	2001      	movs	r0, #1
 801171a:	f001 f92b 	bl	8012974 <ScheduleTx>
 801171e:	4603      	mov	r3, r0
 8011720:	2b00      	cmp	r3, #0
 8011722:	d01a      	beq.n	801175a <OnTxDelayedTimerEvent+0x7a>
 8011724:	2b0b      	cmp	r3, #11
 8011726:	d018      	beq.n	801175a <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011728:	4b10      	ldr	r3, [pc, #64]	; (801176c <OnTxDelayedTimerEvent+0x8c>)
 801172a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801172e:	b2da      	uxtb	r2, r3
 8011730:	4b0d      	ldr	r3, [pc, #52]	; (8011768 <OnTxDelayedTimerEvent+0x88>)
 8011732:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8011736:	4b0c      	ldr	r3, [pc, #48]	; (8011768 <OnTxDelayedTimerEvent+0x88>)
 8011738:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 801173c:	4b0a      	ldr	r3, [pc, #40]	; (8011768 <OnTxDelayedTimerEvent+0x88>)
 801173e:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8011742:	4b09      	ldr	r3, [pc, #36]	; (8011768 <OnTxDelayedTimerEvent+0x88>)
 8011744:	2209      	movs	r2, #9
 8011746:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 801174a:	2009      	movs	r0, #9
 801174c:	f004 fa34 	bl	8015bb8 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8011750:	f001 ff6e 	bl	8013630 <StopRetransmission>
            break;
 8011754:	e002      	b.n	801175c <OnTxDelayedTimerEvent+0x7c>
        return;
 8011756:	bf00      	nop
 8011758:	e000      	b.n	801175c <OnTxDelayedTimerEvent+0x7c>
            break;
 801175a:	bf00      	nop
        }
    }
}
 801175c:	3708      	adds	r7, #8
 801175e:	46bd      	mov	sp, r7
 8011760:	bd80      	pop	{r7, pc}
 8011762:	bf00      	nop
 8011764:	20000bb8 	.word	0x20000bb8
 8011768:	20000850 	.word	0x20000850
 801176c:	20000d6c 	.word	0x20000d6c

08011770 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b082      	sub	sp, #8
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8011778:	4b17      	ldr	r3, [pc, #92]	; (80117d8 <OnRxWindow1TimerEvent+0x68>)
 801177a:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 801177e:	4b16      	ldr	r3, [pc, #88]	; (80117d8 <OnRxWindow1TimerEvent+0x68>)
 8011780:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8011784:	4b15      	ldr	r3, [pc, #84]	; (80117dc <OnRxWindow1TimerEvent+0x6c>)
 8011786:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 801178a:	b25a      	sxtb	r2, r3
 801178c:	4b12      	ldr	r3, [pc, #72]	; (80117d8 <OnRxWindow1TimerEvent+0x68>)
 801178e:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011792:	4b12      	ldr	r3, [pc, #72]	; (80117dc <OnRxWindow1TimerEvent+0x6c>)
 8011794:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8011798:	4b0f      	ldr	r3, [pc, #60]	; (80117d8 <OnRxWindow1TimerEvent+0x68>)
 801179a:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801179e:	4b0f      	ldr	r3, [pc, #60]	; (80117dc <OnRxWindow1TimerEvent+0x6c>)
 80117a0:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80117a4:	4b0c      	ldr	r3, [pc, #48]	; (80117d8 <OnRxWindow1TimerEvent+0x68>)
 80117a6:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 80117aa:	4b0b      	ldr	r3, [pc, #44]	; (80117d8 <OnRxWindow1TimerEvent+0x68>)
 80117ac:	2200      	movs	r2, #0
 80117ae:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 80117b2:	4b09      	ldr	r3, [pc, #36]	; (80117d8 <OnRxWindow1TimerEvent+0x68>)
 80117b4:	2200      	movs	r2, #0
 80117b6:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80117ba:	4b08      	ldr	r3, [pc, #32]	; (80117dc <OnRxWindow1TimerEvent+0x6c>)
 80117bc:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80117c0:	4b05      	ldr	r3, [pc, #20]	; (80117d8 <OnRxWindow1TimerEvent+0x68>)
 80117c2:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80117c6:	4906      	ldr	r1, [pc, #24]	; (80117e0 <OnRxWindow1TimerEvent+0x70>)
 80117c8:	4806      	ldr	r0, [pc, #24]	; (80117e4 <OnRxWindow1TimerEvent+0x74>)
 80117ca:	f001 fb55 	bl	8012e78 <RxWindowSetup>
}
 80117ce:	bf00      	nop
 80117d0:	3708      	adds	r7, #8
 80117d2:	46bd      	mov	sp, r7
 80117d4:	bd80      	pop	{r7, pc}
 80117d6:	bf00      	nop
 80117d8:	20000850 	.word	0x20000850
 80117dc:	20000d6c 	.word	0x20000d6c
 80117e0:	20000c08 	.word	0x20000c08
 80117e4:	20000bd0 	.word	0x20000bd0

080117e8 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b082      	sub	sp, #8
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80117f0:	4b19      	ldr	r3, [pc, #100]	; (8011858 <OnRxWindow2TimerEvent+0x70>)
 80117f2:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d029      	beq.n	801184e <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80117fa:	4b17      	ldr	r3, [pc, #92]	; (8011858 <OnRxWindow2TimerEvent+0x70>)
 80117fc:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8011800:	4b15      	ldr	r3, [pc, #84]	; (8011858 <OnRxWindow2TimerEvent+0x70>)
 8011802:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8011806:	4b15      	ldr	r3, [pc, #84]	; (801185c <OnRxWindow2TimerEvent+0x74>)
 8011808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801180a:	4a13      	ldr	r2, [pc, #76]	; (8011858 <OnRxWindow2TimerEvent+0x70>)
 801180c:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011810:	4b12      	ldr	r3, [pc, #72]	; (801185c <OnRxWindow2TimerEvent+0x74>)
 8011812:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8011816:	4b10      	ldr	r3, [pc, #64]	; (8011858 <OnRxWindow2TimerEvent+0x70>)
 8011818:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801181c:	4b0f      	ldr	r3, [pc, #60]	; (801185c <OnRxWindow2TimerEvent+0x74>)
 801181e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8011822:	4b0d      	ldr	r3, [pc, #52]	; (8011858 <OnRxWindow2TimerEvent+0x70>)
 8011824:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8011828:	4b0b      	ldr	r3, [pc, #44]	; (8011858 <OnRxWindow2TimerEvent+0x70>)
 801182a:	2200      	movs	r2, #0
 801182c:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8011830:	4b09      	ldr	r3, [pc, #36]	; (8011858 <OnRxWindow2TimerEvent+0x70>)
 8011832:	2201      	movs	r2, #1
 8011834:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011838:	4b08      	ldr	r3, [pc, #32]	; (801185c <OnRxWindow2TimerEvent+0x74>)
 801183a:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 801183e:	4b06      	ldr	r3, [pc, #24]	; (8011858 <OnRxWindow2TimerEvent+0x70>)
 8011840:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8011844:	4906      	ldr	r1, [pc, #24]	; (8011860 <OnRxWindow2TimerEvent+0x78>)
 8011846:	4807      	ldr	r0, [pc, #28]	; (8011864 <OnRxWindow2TimerEvent+0x7c>)
 8011848:	f001 fb16 	bl	8012e78 <RxWindowSetup>
 801184c:	e000      	b.n	8011850 <OnRxWindow2TimerEvent+0x68>
        return;
 801184e:	bf00      	nop
}
 8011850:	3708      	adds	r7, #8
 8011852:	46bd      	mov	sp, r7
 8011854:	bd80      	pop	{r7, pc}
 8011856:	bf00      	nop
 8011858:	20000850 	.word	0x20000850
 801185c:	20000d6c 	.word	0x20000d6c
 8011860:	20000c20 	.word	0x20000c20
 8011864:	20000be8 	.word	0x20000be8

08011868 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 8011868:	b580      	push	{r7, lr}
 801186a:	b082      	sub	sp, #8
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8011870:	4808      	ldr	r0, [pc, #32]	; (8011894 <OnRetransmitTimeoutTimerEvent+0x2c>)
 8011872:	f00c f99d 	bl	801dbb0 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 8011876:	4b08      	ldr	r3, [pc, #32]	; (8011898 <OnRetransmitTimeoutTimerEvent+0x30>)
 8011878:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 801187c:	2b00      	cmp	r3, #0
 801187e:	d003      	beq.n	8011888 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 8011880:	4b05      	ldr	r3, [pc, #20]	; (8011898 <OnRetransmitTimeoutTimerEvent+0x30>)
 8011882:	2201      	movs	r2, #1
 8011884:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    }
    OnMacProcessNotify( );
 8011888:	f001 ff0e 	bl	80136a8 <OnMacProcessNotify>
}
 801188c:	bf00      	nop
 801188e:	3708      	adds	r7, #8
 8011890:	46bd      	mov	sp, r7
 8011892:	bd80      	pop	{r7, pc}
 8011894:	20000c50 	.word	0x20000c50
 8011898:	20000850 	.word	0x20000850

0801189c <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b084      	sub	sp, #16
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	60ba      	str	r2, [r7, #8]
 80118a4:	607b      	str	r3, [r7, #4]
 80118a6:	4603      	mov	r3, r0
 80118a8:	73fb      	strb	r3, [r7, #15]
 80118aa:	460b      	mov	r3, r1
 80118ac:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 80118ae:	68bb      	ldr	r3, [r7, #8]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d005      	beq.n	80118c0 <GetFCntDown+0x24>
 80118b4:	69bb      	ldr	r3, [r7, #24]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d002      	beq.n	80118c0 <GetFCntDown+0x24>
 80118ba:	69fb      	ldr	r3, [r7, #28]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d101      	bne.n	80118c4 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80118c0:	2309      	movs	r3, #9
 80118c2:	e028      	b.n	8011916 <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 80118c4:	7bfb      	ldrb	r3, [r7, #15]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d016      	beq.n	80118f8 <GetFCntDown+0x5c>
 80118ca:	2b01      	cmp	r3, #1
 80118cc:	d118      	bne.n	8011900 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 80118ce:	79bb      	ldrb	r3, [r7, #6]
 80118d0:	2b01      	cmp	r3, #1
 80118d2:	d10d      	bne.n	80118f0 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 80118d4:	7bbb      	ldrb	r3, [r7, #14]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d002      	beq.n	80118e0 <GetFCntDown+0x44>
 80118da:	7bbb      	ldrb	r3, [r7, #14]
 80118dc:	2b03      	cmp	r3, #3
 80118de:	d103      	bne.n	80118e8 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 80118e0:	69bb      	ldr	r3, [r7, #24]
 80118e2:	2202      	movs	r2, #2
 80118e4:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 80118e6:	e00d      	b.n	8011904 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 80118e8:	69bb      	ldr	r3, [r7, #24]
 80118ea:	2201      	movs	r2, #1
 80118ec:	701a      	strb	r2, [r3, #0]
            break;
 80118ee:	e009      	b.n	8011904 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 80118f0:	69bb      	ldr	r3, [r7, #24]
 80118f2:	2203      	movs	r2, #3
 80118f4:	701a      	strb	r2, [r3, #0]
            break;
 80118f6:	e005      	b.n	8011904 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 80118f8:	69bb      	ldr	r3, [r7, #24]
 80118fa:	2204      	movs	r2, #4
 80118fc:	701a      	strb	r2, [r3, #0]
            break;
 80118fe:	e001      	b.n	8011904 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8011900:	2305      	movs	r3, #5
 8011902:	e008      	b.n	8011916 <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8011904:	69bb      	ldr	r3, [r7, #24]
 8011906:	7818      	ldrb	r0, [r3, #0]
 8011908:	68bb      	ldr	r3, [r7, #8]
 801190a:	89db      	ldrh	r3, [r3, #14]
 801190c:	69fa      	ldr	r2, [r7, #28]
 801190e:	4619      	mov	r1, r3
 8011910:	f004 fd90 	bl	8016434 <LoRaMacCryptoGetFCntDown>
 8011914:	4603      	mov	r3, r0
}
 8011916:	4618      	mov	r0, r3
 8011918:	3710      	adds	r7, #16
 801191a:	46bd      	mov	sp, r7
 801191c:	bd80      	pop	{r7, pc}
	...

08011920 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8011920:	b5b0      	push	{r4, r5, r7, lr}
 8011922:	b084      	sub	sp, #16
 8011924:	af00      	add	r7, sp, #0
 8011926:	4603      	mov	r3, r0
 8011928:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801192a:	2303      	movs	r3, #3
 801192c:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 801192e:	4b6e      	ldr	r3, [pc, #440]	; (8011ae8 <SwitchClass+0x1c8>)
 8011930:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011934:	2b02      	cmp	r3, #2
 8011936:	f000 80bb 	beq.w	8011ab0 <SwitchClass+0x190>
 801193a:	2b02      	cmp	r3, #2
 801193c:	f300 80ce 	bgt.w	8011adc <SwitchClass+0x1bc>
 8011940:	2b00      	cmp	r3, #0
 8011942:	d003      	beq.n	801194c <SwitchClass+0x2c>
 8011944:	2b01      	cmp	r3, #1
 8011946:	f000 80a5 	beq.w	8011a94 <SwitchClass+0x174>
 801194a:	e0c7      	b.n	8011adc <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 801194c:	79fb      	ldrb	r3, [r7, #7]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d109      	bne.n	8011966 <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8011952:	4b65      	ldr	r3, [pc, #404]	; (8011ae8 <SwitchClass+0x1c8>)
 8011954:	4a64      	ldr	r2, [pc, #400]	; (8011ae8 <SwitchClass+0x1c8>)
 8011956:	3374      	adds	r3, #116	; 0x74
 8011958:	326c      	adds	r2, #108	; 0x6c
 801195a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801195e:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 8011962:	2300      	movs	r3, #0
 8011964:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 8011966:	79fb      	ldrb	r3, [r7, #7]
 8011968:	2b01      	cmp	r3, #1
 801196a:	d10c      	bne.n	8011986 <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 801196c:	79fb      	ldrb	r3, [r7, #7]
 801196e:	4618      	mov	r0, r3
 8011970:	f003 fc7e 	bl	8015270 <LoRaMacClassBSwitchClass>
 8011974:	4603      	mov	r3, r0
 8011976:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8011978:	7bfb      	ldrb	r3, [r7, #15]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d103      	bne.n	8011986 <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 801197e:	4a5a      	ldr	r2, [pc, #360]	; (8011ae8 <SwitchClass+0x1c8>)
 8011980:	79fb      	ldrb	r3, [r7, #7]
 8011982:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
                }
            }

            if( deviceClass == CLASS_C )
 8011986:	79fb      	ldrb	r3, [r7, #7]
 8011988:	2b02      	cmp	r3, #2
 801198a:	f040 80a2 	bne.w	8011ad2 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 801198e:	4a56      	ldr	r2, [pc, #344]	; (8011ae8 <SwitchClass+0x1c8>)
 8011990:	79fb      	ldrb	r3, [r7, #7]
 8011992:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8011996:	4a55      	ldr	r2, [pc, #340]	; (8011aec <SwitchClass+0x1cc>)
 8011998:	4b54      	ldr	r3, [pc, #336]	; (8011aec <SwitchClass+0x1cc>)
 801199a:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 801199e:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 80119a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80119a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80119aa:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80119ae:	4b4f      	ldr	r3, [pc, #316]	; (8011aec <SwitchClass+0x1cc>)
 80119b0:	2202      	movs	r2, #2
 80119b2:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80119b6:	2300      	movs	r3, #0
 80119b8:	73bb      	strb	r3, [r7, #14]
 80119ba:	e05b      	b.n	8011a74 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 80119bc:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80119c0:	4949      	ldr	r1, [pc, #292]	; (8011ae8 <SwitchClass+0x1c8>)
 80119c2:	4613      	mov	r3, r2
 80119c4:	005b      	lsls	r3, r3, #1
 80119c6:	4413      	add	r3, r2
 80119c8:	011b      	lsls	r3, r3, #4
 80119ca:	440b      	add	r3, r1
 80119cc:	33e9      	adds	r3, #233	; 0xe9
 80119ce:	781b      	ldrb	r3, [r3, #0]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d049      	beq.n	8011a68 <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 80119d4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80119d8:	4943      	ldr	r1, [pc, #268]	; (8011ae8 <SwitchClass+0x1c8>)
 80119da:	4613      	mov	r3, r2
 80119dc:	005b      	lsls	r3, r3, #1
 80119de:	4413      	add	r3, r2
 80119e0:	011b      	lsls	r3, r3, #4
 80119e2:	440b      	add	r3, r1
 80119e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80119e8:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 80119ea:	2b02      	cmp	r3, #2
 80119ec:	d13c      	bne.n	8011a68 <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 80119ee:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80119f2:	493d      	ldr	r1, [pc, #244]	; (8011ae8 <SwitchClass+0x1c8>)
 80119f4:	4613      	mov	r3, r2
 80119f6:	005b      	lsls	r3, r3, #1
 80119f8:	4413      	add	r3, r2
 80119fa:	011b      	lsls	r3, r3, #4
 80119fc:	440b      	add	r3, r1
 80119fe:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	4a38      	ldr	r2, [pc, #224]	; (8011ae8 <SwitchClass+0x1c8>)
 8011a06:	6753      	str	r3, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 8011a08:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8011a0c:	4936      	ldr	r1, [pc, #216]	; (8011ae8 <SwitchClass+0x1c8>)
 8011a0e:	4613      	mov	r3, r2
 8011a10:	005b      	lsls	r3, r3, #1
 8011a12:	4413      	add	r3, r2
 8011a14:	011b      	lsls	r3, r3, #4
 8011a16:	440b      	add	r3, r1
 8011a18:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8011a1c:	f993 3000 	ldrsb.w	r3, [r3]
 8011a20:	b2da      	uxtb	r2, r3
 8011a22:	4b31      	ldr	r3, [pc, #196]	; (8011ae8 <SwitchClass+0x1c8>)
 8011a24:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8011a28:	4b30      	ldr	r3, [pc, #192]	; (8011aec <SwitchClass+0x1cc>)
 8011a2a:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8011a2e:	4b2f      	ldr	r3, [pc, #188]	; (8011aec <SwitchClass+0x1cc>)
 8011a30:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8011a34:	4b2c      	ldr	r3, [pc, #176]	; (8011ae8 <SwitchClass+0x1c8>)
 8011a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a38:	4a2c      	ldr	r2, [pc, #176]	; (8011aec <SwitchClass+0x1cc>)
 8011a3a:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011a3e:	4b2a      	ldr	r3, [pc, #168]	; (8011ae8 <SwitchClass+0x1c8>)
 8011a40:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8011a44:	4b29      	ldr	r3, [pc, #164]	; (8011aec <SwitchClass+0x1cc>)
 8011a46:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011a4a:	4b27      	ldr	r3, [pc, #156]	; (8011ae8 <SwitchClass+0x1c8>)
 8011a4c:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8011a50:	4b26      	ldr	r3, [pc, #152]	; (8011aec <SwitchClass+0x1cc>)
 8011a52:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8011a56:	4b25      	ldr	r3, [pc, #148]	; (8011aec <SwitchClass+0x1cc>)
 8011a58:	2203      	movs	r2, #3
 8011a5a:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8011a5e:	4b23      	ldr	r3, [pc, #140]	; (8011aec <SwitchClass+0x1cc>)
 8011a60:	2201      	movs	r2, #1
 8011a62:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 8011a66:	e009      	b.n	8011a7c <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011a68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011a6c:	b2db      	uxtb	r3, r3
 8011a6e:	3301      	adds	r3, #1
 8011a70:	b2db      	uxtb	r3, r3
 8011a72:	73bb      	strb	r3, [r7, #14]
 8011a74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	dd9f      	ble.n	80119bc <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8011a7c:	4b1b      	ldr	r3, [pc, #108]	; (8011aec <SwitchClass+0x1cc>)
 8011a7e:	2200      	movs	r2, #0
 8011a80:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8011a84:	4b1a      	ldr	r3, [pc, #104]	; (8011af0 <SwitchClass+0x1d0>)
 8011a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a88:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 8011a8a:	f001 fa29 	bl	8012ee0 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 8011a8e:	2300      	movs	r3, #0
 8011a90:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8011a92:	e01e      	b.n	8011ad2 <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8011a94:	79fb      	ldrb	r3, [r7, #7]
 8011a96:	4618      	mov	r0, r3
 8011a98:	f003 fbea 	bl	8015270 <LoRaMacClassBSwitchClass>
 8011a9c:	4603      	mov	r3, r0
 8011a9e:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8011aa0:	7bfb      	ldrb	r3, [r7, #15]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d117      	bne.n	8011ad6 <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8011aa6:	4a10      	ldr	r2, [pc, #64]	; (8011ae8 <SwitchClass+0x1c8>)
 8011aa8:	79fb      	ldrb	r3, [r7, #7]
 8011aaa:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            }
            break;
 8011aae:	e012      	b.n	8011ad6 <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8011ab0:	79fb      	ldrb	r3, [r7, #7]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d111      	bne.n	8011ada <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 8011ab6:	4b0d      	ldr	r3, [pc, #52]	; (8011aec <SwitchClass+0x1cc>)
 8011ab8:	2206      	movs	r2, #6
 8011aba:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 8011abe:	4a0a      	ldr	r2, [pc, #40]	; (8011ae8 <SwitchClass+0x1c8>)
 8011ac0:	79fb      	ldrb	r3, [r7, #7]
 8011ac2:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8011ac6:	4b0a      	ldr	r3, [pc, #40]	; (8011af0 <SwitchClass+0x1d0>)
 8011ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aca:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8011acc:	2300      	movs	r3, #0
 8011ace:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 8011ad0:	e003      	b.n	8011ada <SwitchClass+0x1ba>
            break;
 8011ad2:	bf00      	nop
 8011ad4:	e002      	b.n	8011adc <SwitchClass+0x1bc>
            break;
 8011ad6:	bf00      	nop
 8011ad8:	e000      	b.n	8011adc <SwitchClass+0x1bc>
            break;
 8011ada:	bf00      	nop
        }
    }

    return status;
 8011adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ade:	4618      	mov	r0, r3
 8011ae0:	3710      	adds	r7, #16
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8011ae6:	bf00      	nop
 8011ae8:	20000d6c 	.word	0x20000d6c
 8011aec:	20000850 	.word	0x20000850
 8011af0:	0801f4f4 	.word	0x0801f4f4

08011af4 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b086      	sub	sp, #24
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	4603      	mov	r3, r0
 8011afc:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011afe:	4b10      	ldr	r3, [pc, #64]	; (8011b40 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8011b00:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8011b04:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8011b06:	79fb      	ldrb	r3, [r7, #7]
 8011b08:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8011b0a:	230d      	movs	r3, #13
 8011b0c:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8011b0e:	4b0c      	ldr	r3, [pc, #48]	; (8011b40 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8011b10:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d001      	beq.n	8011b1c <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8011b18:	230e      	movs	r3, #14
 8011b1a:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b1c:	4b08      	ldr	r3, [pc, #32]	; (8011b40 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8011b1e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011b22:	f107 0210 	add.w	r2, r7, #16
 8011b26:	4611      	mov	r1, r2
 8011b28:	4618      	mov	r0, r3
 8011b2a:	f005 faee 	bl	801710a <RegionGetPhyParam>
 8011b2e:	4603      	mov	r3, r0
 8011b30:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	b2db      	uxtb	r3, r3
}
 8011b36:	4618      	mov	r0, r3
 8011b38:	3718      	adds	r7, #24
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	bd80      	pop	{r7, pc}
 8011b3e:	bf00      	nop
 8011b40:	20000d6c 	.word	0x20000d6c

08011b44 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b084      	sub	sp, #16
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	71fb      	strb	r3, [r7, #7]
 8011b4e:	460b      	mov	r3, r1
 8011b50:	71bb      	strb	r3, [r7, #6]
 8011b52:	4613      	mov	r3, r2
 8011b54:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8011b56:	2300      	movs	r3, #0
 8011b58:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8011b5e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011b62:	4618      	mov	r0, r3
 8011b64:	f7ff ffc6 	bl	8011af4 <GetMaxAppPayloadWithoutFOptsLength>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8011b6c:	79fb      	ldrb	r3, [r7, #7]
 8011b6e:	b29a      	uxth	r2, r3
 8011b70:	797b      	ldrb	r3, [r7, #5]
 8011b72:	b29b      	uxth	r3, r3
 8011b74:	4413      	add	r3, r2
 8011b76:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8011b78:	89ba      	ldrh	r2, [r7, #12]
 8011b7a:	89fb      	ldrh	r3, [r7, #14]
 8011b7c:	429a      	cmp	r2, r3
 8011b7e:	d804      	bhi.n	8011b8a <ValidatePayloadLength+0x46>
 8011b80:	89bb      	ldrh	r3, [r7, #12]
 8011b82:	2bff      	cmp	r3, #255	; 0xff
 8011b84:	d801      	bhi.n	8011b8a <ValidatePayloadLength+0x46>
    {
        return true;
 8011b86:	2301      	movs	r3, #1
 8011b88:	e000      	b.n	8011b8c <ValidatePayloadLength+0x48>
    }
    return false;
 8011b8a:	2300      	movs	r3, #0
}
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	3710      	adds	r7, #16
 8011b90:	46bd      	mov	sp, r7
 8011b92:	bd80      	pop	{r7, pc}

08011b94 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8011b94:	b590      	push	{r4, r7, lr}
 8011b96:	b0a5      	sub	sp, #148	; 0x94
 8011b98:	af02      	add	r7, sp, #8
 8011b9a:	6078      	str	r0, [r7, #4]
 8011b9c:	4608      	mov	r0, r1
 8011b9e:	4611      	mov	r1, r2
 8011ba0:	461a      	mov	r2, r3
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	70fb      	strb	r3, [r7, #3]
 8011ba6:	460b      	mov	r3, r1
 8011ba8:	70bb      	strb	r3, [r7, #2]
 8011baa:	4613      	mov	r3, r2
 8011bac:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 8011bae:	2300      	movs	r3, #0
 8011bb0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8011bba:	2300      	movs	r3, #0
 8011bbc:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8011bc0:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	f000 84ab 	beq.w	8012520 <ProcessMacCommands+0x98c>
 8011bca:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8011bce:	2b01      	cmp	r3, #1
 8011bd0:	f040 84ac 	bne.w	801252c <ProcessMacCommands+0x998>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8011bd4:	f000 bca4 	b.w	8012520 <ProcessMacCommands+0x98c>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8011bd8:	78fb      	ldrb	r3, [r7, #3]
 8011bda:	687a      	ldr	r2, [r7, #4]
 8011bdc:	4413      	add	r3, r2
 8011bde:	781b      	ldrb	r3, [r3, #0]
 8011be0:	4618      	mov	r0, r3
 8011be2:	f003 fe45 	bl	8015870 <LoRaMacCommandsGetCmdSize>
 8011be6:	4603      	mov	r3, r0
 8011be8:	461a      	mov	r2, r3
 8011bea:	78fb      	ldrb	r3, [r7, #3]
 8011bec:	441a      	add	r2, r3
 8011bee:	78bb      	ldrb	r3, [r7, #2]
 8011bf0:	429a      	cmp	r2, r3
 8011bf2:	f300 849d 	bgt.w	8012530 <ProcessMacCommands+0x99c>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8011bf6:	78fb      	ldrb	r3, [r7, #3]
 8011bf8:	1c5a      	adds	r2, r3, #1
 8011bfa:	70fa      	strb	r2, [r7, #3]
 8011bfc:	461a      	mov	r2, r3
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	4413      	add	r3, r2
 8011c02:	781b      	ldrb	r3, [r3, #0]
 8011c04:	3b02      	subs	r3, #2
 8011c06:	2b11      	cmp	r3, #17
 8011c08:	f200 8494 	bhi.w	8012534 <ProcessMacCommands+0x9a0>
 8011c0c:	a201      	add	r2, pc, #4	; (adr r2, 8011c14 <ProcessMacCommands+0x80>)
 8011c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c12:	bf00      	nop
 8011c14:	08011c5d 	.word	0x08011c5d
 8011c18:	08011c9f 	.word	0x08011c9f
 8011c1c:	08011e1b 	.word	0x08011e1b
 8011c20:	08011e59 	.word	0x08011e59
 8011c24:	08011f51 	.word	0x08011f51
 8011c28:	08011fa1 	.word	0x08011fa1
 8011c2c:	0801205d 	.word	0x0801205d
 8011c30:	080120b3 	.word	0x080120b3
 8011c34:	08012199 	.word	0x08012199
 8011c38:	08012535 	.word	0x08012535
 8011c3c:	08012535 	.word	0x08012535
 8011c40:	08012241 	.word	0x08012241
 8011c44:	08012535 	.word	0x08012535
 8011c48:	08012535 	.word	0x08012535
 8011c4c:	08012361 	.word	0x08012361
 8011c50:	08012395 	.word	0x08012395
 8011c54:	08012425 	.word	0x08012425
 8011c58:	0801249b 	.word	0x0801249b
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8011c5c:	2005      	movs	r0, #5
 8011c5e:	f003 ffdf 	bl	8015c20 <LoRaMacConfirmQueueIsCmdActive>
 8011c62:	4603      	mov	r3, r0
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	f000 845b 	beq.w	8012520 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8011c6a:	2105      	movs	r1, #5
 8011c6c:	2000      	movs	r0, #0
 8011c6e:	f003 ff4b 	bl	8015b08 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8011c72:	78fb      	ldrb	r3, [r7, #3]
 8011c74:	1c5a      	adds	r2, r3, #1
 8011c76:	70fa      	strb	r2, [r7, #3]
 8011c78:	461a      	mov	r2, r3
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	4413      	add	r3, r2
 8011c7e:	781a      	ldrb	r2, [r3, #0]
 8011c80:	4bb0      	ldr	r3, [pc, #704]	; (8011f44 <ProcessMacCommands+0x3b0>)
 8011c82:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8011c86:	78fb      	ldrb	r3, [r7, #3]
 8011c88:	1c5a      	adds	r2, r3, #1
 8011c8a:	70fa      	strb	r2, [r7, #3]
 8011c8c:	461a      	mov	r2, r3
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	4413      	add	r3, r2
 8011c92:	781a      	ldrb	r2, [r3, #0]
 8011c94:	4bab      	ldr	r3, [pc, #684]	; (8011f44 <ProcessMacCommands+0x3b0>)
 8011c96:	f883 245d 	strb.w	r2, [r3, #1117]	; 0x45d
                }
                break;
 8011c9a:	f000 bc41 	b.w	8012520 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 8011caa:	2300      	movs	r3, #0
 8011cac:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 8011cb6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8011cba:	f083 0301 	eor.w	r3, r3, #1
 8011cbe:	b2db      	uxtb	r3, r3
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	f000 80a5 	beq.w	8011e10 <ProcessMacCommands+0x27c>
                {
                    adrBlockFound = true;
 8011cc6:	2301      	movs	r3, #1
 8011cc8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8011ccc:	78fb      	ldrb	r3, [r7, #3]
 8011cce:	3b01      	subs	r3, #1
 8011cd0:	687a      	ldr	r2, [r7, #4]
 8011cd2:	4413      	add	r3, r2
 8011cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8011cd6:	4b9c      	ldr	r3, [pc, #624]	; (8011f48 <ProcessMacCommands+0x3b4>)
 8011cd8:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8011cdc:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011ce0:	4b99      	ldr	r3, [pc, #612]	; (8011f48 <ProcessMacCommands+0x3b4>)
 8011ce2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8011ce6:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8011cea:	4b97      	ldr	r3, [pc, #604]	; (8011f48 <ProcessMacCommands+0x3b4>)
 8011cec:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011cf0:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011cf4:	4b94      	ldr	r3, [pc, #592]	; (8011f48 <ProcessMacCommands+0x3b4>)
 8011cf6:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8011cfa:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011cfe:	4b92      	ldr	r3, [pc, #584]	; (8011f48 <ProcessMacCommands+0x3b4>)
 8011d00:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8011d04:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 8011d08:	4b8f      	ldr	r3, [pc, #572]	; (8011f48 <ProcessMacCommands+0x3b4>)
 8011d0a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8011d0e:	65bb      	str	r3, [r7, #88]	; 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8011d10:	4b8d      	ldr	r3, [pc, #564]	; (8011f48 <ProcessMacCommands+0x3b4>)
 8011d12:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d008      	beq.n	8011d2c <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8011d1a:	78ba      	ldrb	r2, [r7, #2]
 8011d1c:	78fb      	ldrb	r3, [r7, #3]
 8011d1e:	1ad3      	subs	r3, r2, r3
 8011d20:	b2db      	uxtb	r3, r3
 8011d22:	3301      	adds	r3, #1
 8011d24:	b2db      	uxtb	r3, r3
 8011d26:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 8011d2a:	e002      	b.n	8011d32 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 8011d2c:	2305      	movs	r3, #5
 8011d2e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8011d32:	4b85      	ldr	r3, [pc, #532]	; (8011f48 <ProcessMacCommands+0x3b4>)
 8011d34:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8011d38:	f107 0456 	add.w	r4, r7, #86	; 0x56
 8011d3c:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8011d40:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8011d44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011d48:	9301      	str	r3, [sp, #4]
 8011d4a:	f107 0355 	add.w	r3, r7, #85	; 0x55
 8011d4e:	9300      	str	r3, [sp, #0]
 8011d50:	4623      	mov	r3, r4
 8011d52:	f005 fa97 	bl	8017284 <RegionLinkAdrReq>
 8011d56:	4603      	mov	r3, r0
 8011d58:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 8011d5c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011d60:	f003 0307 	and.w	r3, r3, #7
 8011d64:	2b07      	cmp	r3, #7
 8011d66:	d119      	bne.n	8011d9c <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8011d68:	4b77      	ldr	r3, [pc, #476]	; (8011f48 <ProcessMacCommands+0x3b4>)
 8011d6a:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8011d6e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8011d72:	429a      	cmp	r2, r3
 8011d74:	da03      	bge.n	8011d7e <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8011d76:	4b74      	ldr	r3, [pc, #464]	; (8011f48 <ProcessMacCommands+0x3b4>)
 8011d78:	2201      	movs	r2, #1
 8011d7a:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8011d7e:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 8011d82:	4b71      	ldr	r3, [pc, #452]	; (8011f48 <ProcessMacCommands+0x3b4>)
 8011d84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8011d88:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 8011d8c:	4b6e      	ldr	r3, [pc, #440]	; (8011f48 <ProcessMacCommands+0x3b4>)
 8011d8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8011d92:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8011d96:	4b6c      	ldr	r3, [pc, #432]	; (8011f48 <ProcessMacCommands+0x3b4>)
 8011d98:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8011da2:	e00b      	b.n	8011dbc <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8011da4:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 8011da8:	2201      	movs	r2, #1
 8011daa:	4619      	mov	r1, r3
 8011dac:	2003      	movs	r0, #3
 8011dae:	f003 fbff 	bl	80155b0 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8011db2:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8011db6:	3301      	adds	r3, #1
 8011db8:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8011dbc:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8011dc0:	4a62      	ldr	r2, [pc, #392]	; (8011f4c <ProcessMacCommands+0x3b8>)
 8011dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8011dc6:	089b      	lsrs	r3, r3, #2
 8011dc8:	b2db      	uxtb	r3, r3
 8011dca:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8011dce:	429a      	cmp	r2, r3
 8011dd0:	d3e8      	bcc.n	8011da4 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 8011dd2:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8011dd6:	78fb      	ldrb	r3, [r7, #3]
 8011dd8:	4413      	add	r3, r2
 8011dda:	b2db      	uxtb	r3, r3
 8011ddc:	3b01      	subs	r3, #1
 8011dde:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 8011de0:	78fa      	ldrb	r2, [r7, #3]
 8011de2:	78bb      	ldrb	r3, [r7, #2]
 8011de4:	429a      	cmp	r2, r3
 8011de6:	d20a      	bcs.n	8011dfe <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8011de8:	78fb      	ldrb	r3, [r7, #3]
 8011dea:	1c5a      	adds	r2, r3, #1
 8011dec:	70fa      	strb	r2, [r7, #3]
 8011dee:	461a      	mov	r2, r3
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	4413      	add	r3, r2
 8011df4:	781b      	ldrb	r3, [r3, #0]
 8011df6:	2b03      	cmp	r3, #3
 8011df8:	f43f af68 	beq.w	8011ccc <ProcessMacCommands+0x138>
 8011dfc:	e000      	b.n	8011e00 <ProcessMacCommands+0x26c>
                            break;
 8011dfe:	bf00      	nop

                    if( macIndex < commandsSize )
 8011e00:	78fa      	ldrb	r2, [r7, #3]
 8011e02:	78bb      	ldrb	r3, [r7, #2]
 8011e04:	429a      	cmp	r2, r3
 8011e06:	d206      	bcs.n	8011e16 <ProcessMacCommands+0x282>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 8011e08:	78fb      	ldrb	r3, [r7, #3]
 8011e0a:	3b01      	subs	r3, #1
 8011e0c:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 8011e0e:	e002      	b.n	8011e16 <ProcessMacCommands+0x282>
                    macIndex += 4;
 8011e10:	78fb      	ldrb	r3, [r7, #3]
 8011e12:	3304      	adds	r3, #4
 8011e14:	70fb      	strb	r3, [r7, #3]
                break;
 8011e16:	bf00      	nop
 8011e18:	e382      	b.n	8012520 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8011e1a:	78fb      	ldrb	r3, [r7, #3]
 8011e1c:	1c5a      	adds	r2, r3, #1
 8011e1e:	70fa      	strb	r2, [r7, #3]
 8011e20:	461a      	mov	r2, r3
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	4413      	add	r3, r2
 8011e26:	781b      	ldrb	r3, [r3, #0]
 8011e28:	f003 030f 	and.w	r3, r3, #15
 8011e2c:	b2da      	uxtb	r2, r3
 8011e2e:	4b46      	ldr	r3, [pc, #280]	; (8011f48 <ProcessMacCommands+0x3b4>)
 8011e30:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8011e34:	4b44      	ldr	r3, [pc, #272]	; (8011f48 <ProcessMacCommands+0x3b4>)
 8011e36:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8011e3a:	461a      	mov	r2, r3
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	4093      	lsls	r3, r2
 8011e40:	b29a      	uxth	r2, r3
 8011e42:	4b41      	ldr	r3, [pc, #260]	; (8011f48 <ProcessMacCommands+0x3b4>)
 8011e44:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8011e48:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011e4c:	2200      	movs	r2, #0
 8011e4e:	4619      	mov	r1, r3
 8011e50:	2004      	movs	r0, #4
 8011e52:	f003 fbad 	bl	80155b0 <LoRaMacCommandsAddCmd>
                break;
 8011e56:	e363      	b.n	8012520 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8011e58:	2307      	movs	r3, #7
 8011e5a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8011e5e:	78fb      	ldrb	r3, [r7, #3]
 8011e60:	687a      	ldr	r2, [r7, #4]
 8011e62:	4413      	add	r3, r2
 8011e64:	781b      	ldrb	r3, [r3, #0]
 8011e66:	091b      	lsrs	r3, r3, #4
 8011e68:	b2db      	uxtb	r3, r3
 8011e6a:	b25b      	sxtb	r3, r3
 8011e6c:	f003 0307 	and.w	r3, r3, #7
 8011e70:	b25b      	sxtb	r3, r3
 8011e72:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8011e76:	78fb      	ldrb	r3, [r7, #3]
 8011e78:	687a      	ldr	r2, [r7, #4]
 8011e7a:	4413      	add	r3, r2
 8011e7c:	781b      	ldrb	r3, [r3, #0]
 8011e7e:	b25b      	sxtb	r3, r3
 8011e80:	f003 030f 	and.w	r3, r3, #15
 8011e84:	b25b      	sxtb	r3, r3
 8011e86:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 8011e8a:	78fb      	ldrb	r3, [r7, #3]
 8011e8c:	3301      	adds	r3, #1
 8011e8e:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8011e90:	78fb      	ldrb	r3, [r7, #3]
 8011e92:	1c5a      	adds	r2, r3, #1
 8011e94:	70fa      	strb	r2, [r7, #3]
 8011e96:	461a      	mov	r2, r3
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	4413      	add	r3, r2
 8011e9c:	781b      	ldrb	r3, [r3, #0]
 8011e9e:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011ea0:	78fb      	ldrb	r3, [r7, #3]
 8011ea2:	1c5a      	adds	r2, r3, #1
 8011ea4:	70fa      	strb	r2, [r7, #3]
 8011ea6:	461a      	mov	r2, r3
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	4413      	add	r3, r2
 8011eac:	781b      	ldrb	r3, [r3, #0]
 8011eae:	021a      	lsls	r2, r3, #8
 8011eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011eb2:	4313      	orrs	r3, r2
 8011eb4:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8011eb6:	78fb      	ldrb	r3, [r7, #3]
 8011eb8:	1c5a      	adds	r2, r3, #1
 8011eba:	70fa      	strb	r2, [r7, #3]
 8011ebc:	461a      	mov	r2, r3
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	4413      	add	r3, r2
 8011ec2:	781b      	ldrb	r3, [r3, #0]
 8011ec4:	041a      	lsls	r2, r3, #16
 8011ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ec8:	4313      	orrs	r3, r2
 8011eca:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 8011ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ece:	2264      	movs	r2, #100	; 0x64
 8011ed0:	fb02 f303 	mul.w	r3, r2, r3
 8011ed4:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8011ed6:	4b1c      	ldr	r3, [pc, #112]	; (8011f48 <ProcessMacCommands+0x3b4>)
 8011ed8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011edc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8011ee0:	4611      	mov	r1, r2
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f005 f9e8 	bl	80172b8 <RegionRxParamSetupReq>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8011eee:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011ef2:	f003 0307 	and.w	r3, r3, #7
 8011ef6:	2b07      	cmp	r3, #7
 8011ef8:	d117      	bne.n	8011f2a <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8011efa:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8011efe:	b2da      	uxtb	r2, r3
 8011f00:	4b11      	ldr	r3, [pc, #68]	; (8011f48 <ProcessMacCommands+0x3b4>)
 8011f02:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8011f06:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8011f0a:	b2da      	uxtb	r2, r3
 8011f0c:	4b0e      	ldr	r3, [pc, #56]	; (8011f48 <ProcessMacCommands+0x3b4>)
 8011f0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8011f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f14:	4a0c      	ldr	r2, [pc, #48]	; (8011f48 <ProcessMacCommands+0x3b4>)
 8011f16:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8011f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f1a:	4a0b      	ldr	r2, [pc, #44]	; (8011f48 <ProcessMacCommands+0x3b4>)
 8011f1c:	6753      	str	r3, [r2, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8011f1e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8011f22:	b2da      	uxtb	r2, r3
 8011f24:	4b08      	ldr	r3, [pc, #32]	; (8011f48 <ProcessMacCommands+0x3b4>)
 8011f26:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                }
                macCmdPayload[0] = status;
 8011f2a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011f2e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8011f32:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011f36:	2201      	movs	r2, #1
 8011f38:	4619      	mov	r1, r3
 8011f3a:	2005      	movs	r0, #5
 8011f3c:	f003 fb38 	bl	80155b0 <LoRaMacCommandsAddCmd>
                break;
 8011f40:	bf00      	nop
 8011f42:	e2ed      	b.n	8012520 <ProcessMacCommands+0x98c>
 8011f44:	20000850 	.word	0x20000850
 8011f48:	20000d6c 	.word	0x20000d6c
 8011f4c:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8011f50:	23ff      	movs	r3, #255	; 0xff
 8011f52:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8011f56:	4bb7      	ldr	r3, [pc, #732]	; (8012234 <ProcessMacCommands+0x6a0>)
 8011f58:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d00d      	beq.n	8011f7c <ProcessMacCommands+0x3e8>
 8011f60:	4bb4      	ldr	r3, [pc, #720]	; (8012234 <ProcessMacCommands+0x6a0>)
 8011f62:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d007      	beq.n	8011f7c <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8011f6c:	4bb1      	ldr	r3, [pc, #708]	; (8012234 <ProcessMacCommands+0x6a0>)
 8011f6e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	4798      	blx	r3
 8011f76:	4603      	mov	r3, r0
 8011f78:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8011f7c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8011f80:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8011f84:	787b      	ldrb	r3, [r7, #1]
 8011f86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011f8a:	b2db      	uxtb	r3, r3
 8011f8c:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8011f90:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011f94:	2202      	movs	r2, #2
 8011f96:	4619      	mov	r1, r3
 8011f98:	2006      	movs	r0, #6
 8011f9a:	f003 fb09 	bl	80155b0 <LoRaMacCommandsAddCmd>
                break;
 8011f9e:	e2bf      	b.n	8012520 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8011fa0:	2303      	movs	r3, #3
 8011fa2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8011fa6:	78fb      	ldrb	r3, [r7, #3]
 8011fa8:	1c5a      	adds	r2, r3, #1
 8011faa:	70fa      	strb	r2, [r7, #3]
 8011fac:	461a      	mov	r2, r3
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	4413      	add	r3, r2
 8011fb2:	781b      	ldrb	r3, [r3, #0]
 8011fb4:	b25b      	sxtb	r3, r3
 8011fb6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 8011fba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011fbe:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8011fc0:	78fb      	ldrb	r3, [r7, #3]
 8011fc2:	1c5a      	adds	r2, r3, #1
 8011fc4:	70fa      	strb	r2, [r7, #3]
 8011fc6:	461a      	mov	r2, r3
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	4413      	add	r3, r2
 8011fcc:	781b      	ldrb	r3, [r3, #0]
 8011fce:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011fd0:	78fb      	ldrb	r3, [r7, #3]
 8011fd2:	1c5a      	adds	r2, r3, #1
 8011fd4:	70fa      	strb	r2, [r7, #3]
 8011fd6:	461a      	mov	r2, r3
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	4413      	add	r3, r2
 8011fdc:	781b      	ldrb	r3, [r3, #0]
 8011fde:	021a      	lsls	r2, r3, #8
 8011fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fe2:	4313      	orrs	r3, r2
 8011fe4:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8011fe6:	78fb      	ldrb	r3, [r7, #3]
 8011fe8:	1c5a      	adds	r2, r3, #1
 8011fea:	70fa      	strb	r2, [r7, #3]
 8011fec:	461a      	mov	r2, r3
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	4413      	add	r3, r2
 8011ff2:	781b      	ldrb	r3, [r3, #0]
 8011ff4:	041a      	lsls	r2, r3, #16
 8011ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ff8:	4313      	orrs	r3, r2
 8011ffa:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 8011ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ffe:	2264      	movs	r2, #100	; 0x64
 8012000:	fb02 f303 	mul.w	r3, r2, r3
 8012004:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 8012006:	2300      	movs	r3, #0
 8012008:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 801200a:	78fb      	ldrb	r3, [r7, #3]
 801200c:	1c5a      	adds	r2, r3, #1
 801200e:	70fa      	strb	r2, [r7, #3]
 8012010:	461a      	mov	r2, r3
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	4413      	add	r3, r2
 8012016:	781b      	ldrb	r3, [r3, #0]
 8012018:	b25b      	sxtb	r3, r3
 801201a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 801201e:	4b86      	ldr	r3, [pc, #536]	; (8012238 <ProcessMacCommands+0x6a4>)
 8012020:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012024:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8012028:	4611      	mov	r1, r2
 801202a:	4618      	mov	r0, r3
 801202c:	f005 f957 	bl	80172de <RegionNewChannelReq>
 8012030:	4603      	mov	r3, r0
 8012032:	b2db      	uxtb	r3, r3
 8012034:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012038:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801203c:	b25b      	sxtb	r3, r3
 801203e:	2b00      	cmp	r3, #0
 8012040:	db0a      	blt.n	8012058 <ProcessMacCommands+0x4c4>
                {
                    macCmdPayload[0] = status;
 8012042:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012046:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 801204a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801204e:	2201      	movs	r2, #1
 8012050:	4619      	mov	r1, r3
 8012052:	2007      	movs	r0, #7
 8012054:	f003 faac 	bl	80155b0 <LoRaMacCommandsAddCmd>
                }
                break;
 8012058:	bf00      	nop
 801205a:	e261      	b.n	8012520 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 801205c:	78fb      	ldrb	r3, [r7, #3]
 801205e:	1c5a      	adds	r2, r3, #1
 8012060:	70fa      	strb	r2, [r7, #3]
 8012062:	461a      	mov	r2, r3
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	4413      	add	r3, r2
 8012068:	781b      	ldrb	r3, [r3, #0]
 801206a:	f003 030f 	and.w	r3, r3, #15
 801206e:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 8012072:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012076:	2b00      	cmp	r3, #0
 8012078:	d104      	bne.n	8012084 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 801207a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801207e:	3301      	adds	r3, #1
 8012080:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8012084:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012088:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801208c:	fb02 f303 	mul.w	r3, r2, r3
 8012090:	461a      	mov	r2, r3
 8012092:	4b69      	ldr	r3, [pc, #420]	; (8012238 <ProcessMacCommands+0x6a4>)
 8012094:	659a      	str	r2, [r3, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8012096:	4b68      	ldr	r3, [pc, #416]	; (8012238 <ProcessMacCommands+0x6a4>)
 8012098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801209a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801209e:	4a66      	ldr	r2, [pc, #408]	; (8012238 <ProcessMacCommands+0x6a4>)
 80120a0:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80120a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80120a6:	2200      	movs	r2, #0
 80120a8:	4619      	mov	r1, r3
 80120aa:	2008      	movs	r0, #8
 80120ac:	f003 fa80 	bl	80155b0 <LoRaMacCommandsAddCmd>
                break;
 80120b0:	e236      	b.n	8012520 <ProcessMacCommands+0x98c>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 80120b2:	78fb      	ldrb	r3, [r7, #3]
 80120b4:	1c5a      	adds	r2, r3, #1
 80120b6:	70fa      	strb	r2, [r7, #3]
 80120b8:	461a      	mov	r2, r3
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	4413      	add	r3, r2
 80120be:	781b      	ldrb	r3, [r3, #0]
 80120c0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 80120c4:	2300      	movs	r3, #0
 80120c6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 80120ca:	2300      	movs	r3, #0
 80120cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80120d0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80120d4:	f003 0320 	and.w	r3, r3, #32
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d002      	beq.n	80120e2 <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 80120dc:	2301      	movs	r3, #1
 80120de:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80120e2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80120e6:	f003 0310 	and.w	r3, r3, #16
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d002      	beq.n	80120f4 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 80120ee:	2301      	movs	r3, #1
 80120f0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80120f4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80120f8:	f003 030f 	and.w	r3, r3, #15
 80120fc:	b2db      	uxtb	r3, r3
 80120fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8012102:	4b4d      	ldr	r3, [pc, #308]	; (8012238 <ProcessMacCommands+0x6a4>)
 8012104:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012108:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801210c:	4611      	mov	r1, r2
 801210e:	4618      	mov	r0, r3
 8012110:	f005 f8f8 	bl	8017304 <RegionTxParamSetupReq>
 8012114:	4603      	mov	r3, r0
 8012116:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801211a:	d03b      	beq.n	8012194 <ProcessMacCommands+0x600>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 801211c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8012120:	4b45      	ldr	r3, [pc, #276]	; (8012238 <ProcessMacCommands+0x6a4>)
 8012122:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8012126:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 801212a:	4b43      	ldr	r3, [pc, #268]	; (8012238 <ProcessMacCommands+0x6a4>)
 801212c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8012130:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012134:	461a      	mov	r2, r3
 8012136:	4b41      	ldr	r3, [pc, #260]	; (801223c <ProcessMacCommands+0x6a8>)
 8012138:	5c9b      	ldrb	r3, [r3, r2]
 801213a:	4618      	mov	r0, r3
 801213c:	f7ee fd58 	bl	8000bf0 <__aeabi_ui2f>
 8012140:	4603      	mov	r3, r0
 8012142:	4a3d      	ldr	r2, [pc, #244]	; (8012238 <ProcessMacCommands+0x6a4>)
 8012144:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8012148:	2302      	movs	r3, #2
 801214a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801214e:	4b3a      	ldr	r3, [pc, #232]	; (8012238 <ProcessMacCommands+0x6a4>)
 8012150:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012154:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012158:	4b37      	ldr	r3, [pc, #220]	; (8012238 <ProcessMacCommands+0x6a4>)
 801215a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801215e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012162:	4611      	mov	r1, r2
 8012164:	4618      	mov	r0, r3
 8012166:	f004 ffd0 	bl	801710a <RegionGetPhyParam>
 801216a:	4603      	mov	r3, r0
 801216c:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 801216e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012170:	b25a      	sxtb	r2, r3
 8012172:	4b31      	ldr	r3, [pc, #196]	; (8012238 <ProcessMacCommands+0x6a4>)
 8012174:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012178:	4293      	cmp	r3, r2
 801217a:	bfb8      	it	lt
 801217c:	4613      	movlt	r3, r2
 801217e:	b25a      	sxtb	r2, r3
 8012180:	4b2d      	ldr	r3, [pc, #180]	; (8012238 <ProcessMacCommands+0x6a4>)
 8012182:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8012186:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801218a:	2200      	movs	r2, #0
 801218c:	4619      	mov	r1, r3
 801218e:	2009      	movs	r0, #9
 8012190:	f003 fa0e 	bl	80155b0 <LoRaMacCommandsAddCmd>
                }
                break;
 8012194:	bf00      	nop
 8012196:	e1c3      	b.n	8012520 <ProcessMacCommands+0x98c>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8012198:	2303      	movs	r3, #3
 801219a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 801219e:	78fb      	ldrb	r3, [r7, #3]
 80121a0:	1c5a      	adds	r2, r3, #1
 80121a2:	70fa      	strb	r2, [r7, #3]
 80121a4:	461a      	mov	r2, r3
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	4413      	add	r3, r2
 80121aa:	781b      	ldrb	r3, [r3, #0]
 80121ac:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80121b0:	78fb      	ldrb	r3, [r7, #3]
 80121b2:	1c5a      	adds	r2, r3, #1
 80121b4:	70fa      	strb	r2, [r7, #3]
 80121b6:	461a      	mov	r2, r3
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	4413      	add	r3, r2
 80121bc:	781b      	ldrb	r3, [r3, #0]
 80121be:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80121c0:	78fb      	ldrb	r3, [r7, #3]
 80121c2:	1c5a      	adds	r2, r3, #1
 80121c4:	70fa      	strb	r2, [r7, #3]
 80121c6:	461a      	mov	r2, r3
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	4413      	add	r3, r2
 80121cc:	781b      	ldrb	r3, [r3, #0]
 80121ce:	021a      	lsls	r2, r3, #8
 80121d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d2:	4313      	orrs	r3, r2
 80121d4:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80121d6:	78fb      	ldrb	r3, [r7, #3]
 80121d8:	1c5a      	adds	r2, r3, #1
 80121da:	70fa      	strb	r2, [r7, #3]
 80121dc:	461a      	mov	r2, r3
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	4413      	add	r3, r2
 80121e2:	781b      	ldrb	r3, [r3, #0]
 80121e4:	041a      	lsls	r2, r3, #16
 80121e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121e8:	4313      	orrs	r3, r2
 80121ea:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 80121ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ee:	2264      	movs	r2, #100	; 0x64
 80121f0:	fb02 f303 	mul.w	r3, r2, r3
 80121f4:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80121f6:	4b10      	ldr	r3, [pc, #64]	; (8012238 <ProcessMacCommands+0x6a4>)
 80121f8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80121fc:	f107 0220 	add.w	r2, r7, #32
 8012200:	4611      	mov	r1, r2
 8012202:	4618      	mov	r0, r3
 8012204:	f005 f891 	bl	801732a <RegionDlChannelReq>
 8012208:	4603      	mov	r3, r0
 801220a:	b2db      	uxtb	r3, r3
 801220c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012210:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012214:	b25b      	sxtb	r3, r3
 8012216:	2b00      	cmp	r3, #0
 8012218:	db0a      	blt.n	8012230 <ProcessMacCommands+0x69c>
                {
                    macCmdPayload[0] = status;
 801221a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801221e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8012222:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012226:	2201      	movs	r2, #1
 8012228:	4619      	mov	r1, r3
 801222a:	200a      	movs	r0, #10
 801222c:	f003 f9c0 	bl	80155b0 <LoRaMacCommandsAddCmd>
                }
                break;
 8012230:	bf00      	nop
 8012232:	e175      	b.n	8012520 <ProcessMacCommands+0x98c>
 8012234:	20000850 	.word	0x20000850
 8012238:	20000d6c 	.word	0x20000d6c
 801223c:	0801f460 	.word	0x0801f460
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8012240:	2009      	movs	r0, #9
 8012242:	f003 fced 	bl	8015c20 <LoRaMacConfirmQueueIsCmdActive>
 8012246:	4603      	mov	r3, r0
 8012248:	2b00      	cmp	r3, #0
 801224a:	f000 8084 	beq.w	8012356 <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 801224e:	2109      	movs	r1, #9
 8012250:	2000      	movs	r0, #0
 8012252:	f003 fc59 	bl	8015b08 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 8012256:	f107 0318 	add.w	r3, r7, #24
 801225a:	2200      	movs	r2, #0
 801225c:	601a      	str	r2, [r3, #0]
 801225e:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8012260:	f107 0310 	add.w	r3, r7, #16
 8012264:	2200      	movs	r2, #0
 8012266:	601a      	str	r2, [r3, #0]
 8012268:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 801226a:	f107 0308 	add.w	r3, r7, #8
 801226e:	2200      	movs	r2, #0
 8012270:	601a      	str	r2, [r3, #0]
 8012272:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8012274:	78fb      	ldrb	r3, [r7, #3]
 8012276:	1c5a      	adds	r2, r3, #1
 8012278:	70fa      	strb	r2, [r7, #3]
 801227a:	461a      	mov	r2, r3
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	4413      	add	r3, r2
 8012280:	781b      	ldrb	r3, [r3, #0]
 8012282:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8012284:	78fb      	ldrb	r3, [r7, #3]
 8012286:	1c5a      	adds	r2, r3, #1
 8012288:	70fa      	strb	r2, [r7, #3]
 801228a:	461a      	mov	r2, r3
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	4413      	add	r3, r2
 8012290:	781b      	ldrb	r3, [r3, #0]
 8012292:	021a      	lsls	r2, r3, #8
 8012294:	69bb      	ldr	r3, [r7, #24]
 8012296:	4313      	orrs	r3, r2
 8012298:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 801229a:	78fb      	ldrb	r3, [r7, #3]
 801229c:	1c5a      	adds	r2, r3, #1
 801229e:	70fa      	strb	r2, [r7, #3]
 80122a0:	461a      	mov	r2, r3
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	4413      	add	r3, r2
 80122a6:	781b      	ldrb	r3, [r3, #0]
 80122a8:	041a      	lsls	r2, r3, #16
 80122aa:	69bb      	ldr	r3, [r7, #24]
 80122ac:	4313      	orrs	r3, r2
 80122ae:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80122b0:	78fb      	ldrb	r3, [r7, #3]
 80122b2:	1c5a      	adds	r2, r3, #1
 80122b4:	70fa      	strb	r2, [r7, #3]
 80122b6:	461a      	mov	r2, r3
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	4413      	add	r3, r2
 80122bc:	781b      	ldrb	r3, [r3, #0]
 80122be:	061a      	lsls	r2, r3, #24
 80122c0:	69bb      	ldr	r3, [r7, #24]
 80122c2:	4313      	orrs	r3, r2
 80122c4:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80122c6:	78fb      	ldrb	r3, [r7, #3]
 80122c8:	1c5a      	adds	r2, r3, #1
 80122ca:	70fa      	strb	r2, [r7, #3]
 80122cc:	461a      	mov	r2, r3
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	4413      	add	r3, r2
 80122d2:	781b      	ldrb	r3, [r3, #0]
 80122d4:	b21b      	sxth	r3, r3
 80122d6:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80122d8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80122dc:	461a      	mov	r2, r3
 80122de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80122e2:	fb02 f303 	mul.w	r3, r2, r3
 80122e6:	121b      	asrs	r3, r3, #8
 80122e8:	b21b      	sxth	r3, r3
 80122ea:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 80122ec:	f107 0310 	add.w	r3, r7, #16
 80122f0:	f107 0218 	add.w	r2, r7, #24
 80122f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122f8:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80122fc:	693a      	ldr	r2, [r7, #16]
 80122fe:	4b8f      	ldr	r3, [pc, #572]	; (801253c <ProcessMacCommands+0x9a8>)
 8012300:	4413      	add	r3, r2
 8012302:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8012304:	f107 0308 	add.w	r3, r7, #8
 8012308:	4618      	mov	r0, r3
 801230a:	f00a fee9 	bl	801d0e0 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 801230e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8012312:	4b8b      	ldr	r3, [pc, #556]	; (8012540 <ProcessMacCommands+0x9ac>)
 8012314:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8012318:	9200      	str	r2, [sp, #0]
 801231a:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 801231e:	f107 0210 	add.w	r2, r7, #16
 8012322:	ca06      	ldmia	r2, {r1, r2}
 8012324:	f00a fe75 	bl	801d012 <SysTimeSub>
 8012328:	f107 0010 	add.w	r0, r7, #16
 801232c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801232e:	9300      	str	r3, [sp, #0]
 8012330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012332:	f107 0208 	add.w	r2, r7, #8
 8012336:	ca06      	ldmia	r2, {r1, r2}
 8012338:	f00a fe32 	bl	801cfa0 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 801233c:	f107 0310 	add.w	r3, r7, #16
 8012340:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012344:	f00a fe9e 	bl	801d084 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8012348:	f002 ffd0 	bl	80152ec <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 801234c:	4b7c      	ldr	r3, [pc, #496]	; (8012540 <ProcessMacCommands+0x9ac>)
 801234e:	2201      	movs	r2, #1
 8012350:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8012354:	e0e4      	b.n	8012520 <ProcessMacCommands+0x98c>
                }
                else
                {
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8012356:	4b7a      	ldr	r3, [pc, #488]	; (8012540 <ProcessMacCommands+0x9ac>)
 8012358:	2200      	movs	r2, #0
 801235a:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#endif /* LORAMAC_VERSION */
                }
                break;
 801235e:	e0df      	b.n	8012520 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8012360:	200c      	movs	r0, #12
 8012362:	f003 fc5d 	bl	8015c20 <LoRaMacConfirmQueueIsCmdActive>
 8012366:	4603      	mov	r3, r0
 8012368:	2b00      	cmp	r3, #0
 801236a:	f000 80d9 	beq.w	8012520 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 801236e:	210c      	movs	r1, #12
 8012370:	2000      	movs	r0, #0
 8012372:	f003 fbc9 	bl	8015b08 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8012376:	4b72      	ldr	r3, [pc, #456]	; (8012540 <ProcessMacCommands+0x9ac>)
 8012378:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 801237c:	2b04      	cmp	r3, #4
 801237e:	f000 80cf 	beq.w	8012520 <ProcessMacCommands+0x98c>
 8012382:	4b6f      	ldr	r3, [pc, #444]	; (8012540 <ProcessMacCommands+0x9ac>)
 8012384:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8012388:	2b05      	cmp	r3, #5
 801238a:	f000 80c9 	beq.w	8012520 <ProcessMacCommands+0x98c>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 801238e:	f002 ff8e 	bl	80152ae <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8012392:	e0c5      	b.n	8012520 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8012394:	2303      	movs	r3, #3
 8012396:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 801239a:	2300      	movs	r3, #0
 801239c:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 801239e:	78fb      	ldrb	r3, [r7, #3]
 80123a0:	1c5a      	adds	r2, r3, #1
 80123a2:	70fa      	strb	r2, [r7, #3]
 80123a4:	461a      	mov	r2, r3
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	4413      	add	r3, r2
 80123aa:	781b      	ldrb	r3, [r3, #0]
 80123ac:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 80123ae:	78fb      	ldrb	r3, [r7, #3]
 80123b0:	1c5a      	adds	r2, r3, #1
 80123b2:	70fa      	strb	r2, [r7, #3]
 80123b4:	461a      	mov	r2, r3
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	4413      	add	r3, r2
 80123ba:	781b      	ldrb	r3, [r3, #0]
 80123bc:	021b      	lsls	r3, r3, #8
 80123be:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80123c0:	4313      	orrs	r3, r2
 80123c2:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 80123c4:	78fb      	ldrb	r3, [r7, #3]
 80123c6:	1c5a      	adds	r2, r3, #1
 80123c8:	70fa      	strb	r2, [r7, #3]
 80123ca:	461a      	mov	r2, r3
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	4413      	add	r3, r2
 80123d0:	781b      	ldrb	r3, [r3, #0]
 80123d2:	041b      	lsls	r3, r3, #16
 80123d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80123d6:	4313      	orrs	r3, r2
 80123d8:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 80123da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80123dc:	2264      	movs	r2, #100	; 0x64
 80123de:	fb02 f303 	mul.w	r3, r2, r3
 80123e2:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 80123e4:	78fb      	ldrb	r3, [r7, #3]
 80123e6:	1c5a      	adds	r2, r3, #1
 80123e8:	70fa      	strb	r2, [r7, #3]
 80123ea:	461a      	mov	r2, r3
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	4413      	add	r3, r2
 80123f0:	781b      	ldrb	r3, [r3, #0]
 80123f2:	f003 030f 	and.w	r3, r3, #15
 80123f6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80123fa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80123fe:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012400:	4618      	mov	r0, r3
 8012402:	f002 ff5a 	bl	80152ba <LoRaMacClassBPingSlotChannelReq>
 8012406:	4603      	mov	r3, r0
 8012408:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 801240c:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8012410:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8012414:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012418:	2201      	movs	r2, #1
 801241a:	4619      	mov	r1, r3
 801241c:	2011      	movs	r0, #17
 801241e:	f003 f8c7 	bl	80155b0 <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 8012422:	e07d      	b.n	8012520 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8012424:	200d      	movs	r0, #13
 8012426:	f003 fbfb 	bl	8015c20 <LoRaMacConfirmQueueIsCmdActive>
 801242a:	4603      	mov	r3, r0
 801242c:	2b00      	cmp	r3, #0
 801242e:	d077      	beq.n	8012520 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8012430:	210d      	movs	r1, #13
 8012432:	2000      	movs	r0, #0
 8012434:	f003 fb68 	bl	8015b08 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8012438:	2300      	movs	r3, #0
 801243a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 801243e:	2300      	movs	r3, #0
 8012440:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8012444:	78fb      	ldrb	r3, [r7, #3]
 8012446:	1c5a      	adds	r2, r3, #1
 8012448:	70fa      	strb	r2, [r7, #3]
 801244a:	461a      	mov	r2, r3
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	4413      	add	r3, r2
 8012450:	781b      	ldrb	r3, [r3, #0]
 8012452:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8012456:	78fb      	ldrb	r3, [r7, #3]
 8012458:	1c5a      	adds	r2, r3, #1
 801245a:	70fa      	strb	r2, [r7, #3]
 801245c:	461a      	mov	r2, r3
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	4413      	add	r3, r2
 8012462:	781b      	ldrb	r3, [r3, #0]
 8012464:	021b      	lsls	r3, r3, #8
 8012466:	b21a      	sxth	r2, r3
 8012468:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801246c:	4313      	orrs	r3, r2
 801246e:	b21b      	sxth	r3, r3
 8012470:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8012474:	78fb      	ldrb	r3, [r7, #3]
 8012476:	1c5a      	adds	r2, r3, #1
 8012478:	70fa      	strb	r2, [r7, #3]
 801247a:	461a      	mov	r2, r3
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	4413      	add	r3, r2
 8012480:	781b      	ldrb	r3, [r3, #0]
 8012482:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8012486:	4b2f      	ldr	r3, [pc, #188]	; (8012544 <ProcessMacCommands+0x9b0>)
 8012488:	681a      	ldr	r2, [r3, #0]
 801248a:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 801248e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8012492:	4618      	mov	r0, r3
 8012494:	f002 ff1d 	bl	80152d2 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8012498:	e042      	b.n	8012520 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 801249a:	2300      	movs	r3, #0
 801249c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 80124a0:	78fb      	ldrb	r3, [r7, #3]
 80124a2:	1c5a      	adds	r2, r3, #1
 80124a4:	70fa      	strb	r2, [r7, #3]
 80124a6:	461a      	mov	r2, r3
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	4413      	add	r3, r2
 80124ac:	781b      	ldrb	r3, [r3, #0]
 80124ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80124b2:	78fb      	ldrb	r3, [r7, #3]
 80124b4:	1c5a      	adds	r2, r3, #1
 80124b6:	70fa      	strb	r2, [r7, #3]
 80124b8:	461a      	mov	r2, r3
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	4413      	add	r3, r2
 80124be:	781b      	ldrb	r3, [r3, #0]
 80124c0:	021b      	lsls	r3, r3, #8
 80124c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80124c6:	4313      	orrs	r3, r2
 80124c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80124cc:	78fb      	ldrb	r3, [r7, #3]
 80124ce:	1c5a      	adds	r2, r3, #1
 80124d0:	70fa      	strb	r2, [r7, #3]
 80124d2:	461a      	mov	r2, r3
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	4413      	add	r3, r2
 80124d8:	781b      	ldrb	r3, [r3, #0]
 80124da:	041b      	lsls	r3, r3, #16
 80124dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80124e0:	4313      	orrs	r3, r2
 80124e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 80124e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80124ea:	2264      	movs	r2, #100	; 0x64
 80124ec:	fb02 f303 	mul.w	r3, r2, r3
 80124f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80124f4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80124f8:	f002 fefe 	bl	80152f8 <LoRaMacClassBBeaconFreqReq>
 80124fc:	4603      	mov	r3, r0
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d003      	beq.n	801250a <ProcessMacCommands+0x976>
                    {
                        macCmdPayload[0] = 1;
 8012502:	2301      	movs	r3, #1
 8012504:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8012508:	e002      	b.n	8012510 <ProcessMacCommands+0x97c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 801250a:	2300      	movs	r3, #0
 801250c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8012510:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012514:	2201      	movs	r2, #1
 8012516:	4619      	mov	r1, r3
 8012518:	2013      	movs	r0, #19
 801251a:	f003 f849 	bl	80155b0 <LoRaMacCommandsAddCmd>
                }
                break;
 801251e:	bf00      	nop
    while( macIndex < commandsSize )
 8012520:	78fa      	ldrb	r2, [r7, #3]
 8012522:	78bb      	ldrb	r3, [r7, #2]
 8012524:	429a      	cmp	r2, r3
 8012526:	f4ff ab57 	bcc.w	8011bd8 <ProcessMacCommands+0x44>
 801252a:	e004      	b.n	8012536 <ProcessMacCommands+0x9a2>
        return;
 801252c:	bf00      	nop
 801252e:	e002      	b.n	8012536 <ProcessMacCommands+0x9a2>
            return;
 8012530:	bf00      	nop
 8012532:	e000      	b.n	8012536 <ProcessMacCommands+0x9a2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8012534:	bf00      	nop
        }
    }
}
 8012536:	378c      	adds	r7, #140	; 0x8c
 8012538:	46bd      	mov	sp, r7
 801253a:	bd90      	pop	{r4, r7, pc}
 801253c:	12d53d80 	.word	0x12d53d80
 8012540:	20000850 	.word	0x20000850
 8012544:	2000199c 	.word	0x2000199c

08012548 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b08e      	sub	sp, #56	; 0x38
 801254c:	af02      	add	r7, sp, #8
 801254e:	60f8      	str	r0, [r7, #12]
 8012550:	607a      	str	r2, [r7, #4]
 8012552:	461a      	mov	r2, r3
 8012554:	460b      	mov	r3, r1
 8012556:	72fb      	strb	r3, [r7, #11]
 8012558:	4613      	mov	r3, r2
 801255a:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801255c:	2303      	movs	r3, #3
 801255e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012562:	4b66      	ldr	r3, [pc, #408]	; (80126fc <Send+0x1b4>)
 8012564:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012568:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 801256c:	4b63      	ldr	r3, [pc, #396]	; (80126fc <Send+0x1b4>)
 801256e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012572:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012576:	4b61      	ldr	r3, [pc, #388]	; (80126fc <Send+0x1b4>)
 8012578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801257a:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 801257c:	4b5f      	ldr	r3, [pc, #380]	; (80126fc <Send+0x1b4>)
 801257e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8012582:	2b00      	cmp	r3, #0
 8012584:	d101      	bne.n	801258a <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8012586:	2307      	movs	r3, #7
 8012588:	e0b4      	b.n	80126f4 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 801258a:	4b5c      	ldr	r3, [pc, #368]	; (80126fc <Send+0x1b4>)
 801258c:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8012590:	2b00      	cmp	r3, #0
 8012592:	d102      	bne.n	801259a <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8012594:	4b59      	ldr	r3, [pc, #356]	; (80126fc <Send+0x1b4>)
 8012596:	2200      	movs	r2, #0
 8012598:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 801259a:	2300      	movs	r3, #0
 801259c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 80125a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80125a4:	f36f 0303 	bfc	r3, #0, #4
 80125a8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 80125ac:	4b53      	ldr	r3, [pc, #332]	; (80126fc <Send+0x1b4>)
 80125ae:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 80125b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80125b6:	f362 13c7 	bfi	r3, r2, #7, #1
 80125ba:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80125be:	4b4f      	ldr	r3, [pc, #316]	; (80126fc <Send+0x1b4>)
 80125c0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80125c4:	2b01      	cmp	r3, #1
 80125c6:	d106      	bne.n	80125d6 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 80125c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80125cc:	f043 0310 	orr.w	r3, r3, #16
 80125d0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80125d4:	e005      	b.n	80125e2 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 80125d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80125da:	f36f 1304 	bfc	r3, #4, #1
 80125de:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 80125e2:	4b46      	ldr	r3, [pc, #280]	; (80126fc <Send+0x1b4>)
 80125e4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d005      	beq.n	80125f8 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 80125ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80125f0:	f043 0320 	orr.w	r3, r3, #32
 80125f4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 80125f8:	2301      	movs	r3, #1
 80125fa:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 80125fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012600:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8012604:	b2db      	uxtb	r3, r3
 8012606:	2b00      	cmp	r3, #0
 8012608:	bf14      	ite	ne
 801260a:	2301      	movne	r3, #1
 801260c:	2300      	moveq	r3, #0
 801260e:	b2db      	uxtb	r3, r3
 8012610:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012612:	4b3a      	ldr	r3, [pc, #232]	; (80126fc <Send+0x1b4>)
 8012614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012616:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8012618:	4b38      	ldr	r3, [pc, #224]	; (80126fc <Send+0x1b4>)
 801261a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 801261e:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8012620:	4b36      	ldr	r3, [pc, #216]	; (80126fc <Send+0x1b4>)
 8012622:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8012626:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012628:	4b34      	ldr	r3, [pc, #208]	; (80126fc <Send+0x1b4>)
 801262a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801262e:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012632:	4b32      	ldr	r3, [pc, #200]	; (80126fc <Send+0x1b4>)
 8012634:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012638:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801263c:	4b2f      	ldr	r3, [pc, #188]	; (80126fc <Send+0x1b4>)
 801263e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8012646:	4b2d      	ldr	r3, [pc, #180]	; (80126fc <Send+0x1b4>)
 8012648:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801264c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8012650:	4b2a      	ldr	r3, [pc, #168]	; (80126fc <Send+0x1b4>)
 8012652:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8012656:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 801265a:	f107 0014 	add.w	r0, r7, #20
 801265e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012662:	9300      	str	r3, [sp, #0]
 8012664:	4b26      	ldr	r3, [pc, #152]	; (8012700 <Send+0x1b8>)
 8012666:	4a27      	ldr	r2, [pc, #156]	; (8012704 <Send+0x1bc>)
 8012668:	4927      	ldr	r1, [pc, #156]	; (8012708 <Send+0x1c0>)
 801266a:	f002 fcbf 	bl	8014fec <LoRaMacAdrCalcNext>
 801266e:	4603      	mov	r3, r0
 8012670:	461a      	mov	r2, r3
 8012672:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012676:	f362 1386 	bfi	r3, r2, #6, #1
 801267a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 801267e:	7afa      	ldrb	r2, [r7, #11]
 8012680:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8012684:	893b      	ldrh	r3, [r7, #8]
 8012686:	9300      	str	r3, [sp, #0]
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	68f8      	ldr	r0, [r7, #12]
 801268c:	f000 fc72 	bl	8012f74 <PrepareFrame>
 8012690:	4603      	mov	r3, r0
 8012692:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8012696:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801269a:	2b00      	cmp	r3, #0
 801269c:	d003      	beq.n	80126a6 <Send+0x15e>
 801269e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126a2:	2b0a      	cmp	r3, #10
 80126a4:	d107      	bne.n	80126b6 <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 80126a6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80126aa:	4618      	mov	r0, r3
 80126ac:	f000 f962 	bl	8012974 <ScheduleTx>
 80126b0:	4603      	mov	r3, r0
 80126b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 80126b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d00a      	beq.n	80126d4 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 80126be:	4a0f      	ldr	r2, [pc, #60]	; (80126fc <Send+0x1b4>)
 80126c0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80126c4:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 80126c8:	4a0c      	ldr	r2, [pc, #48]	; (80126fc <Send+0x1b4>)
 80126ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80126ce:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 80126d2:	e00d      	b.n	80126f0 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 80126d4:	4b09      	ldr	r3, [pc, #36]	; (80126fc <Send+0x1b4>)
 80126d6:	2200      	movs	r2, #0
 80126d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 80126dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126de:	4a07      	ldr	r2, [pc, #28]	; (80126fc <Send+0x1b4>)
 80126e0:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 80126e2:	f003 f80b 	bl	80156fc <LoRaMacCommandsRemoveNoneStickyCmds>
 80126e6:	4603      	mov	r3, r0
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d001      	beq.n	80126f0 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80126ec:	2313      	movs	r3, #19
 80126ee:	e001      	b.n	80126f4 <Send+0x1ac>
        }
    }
    return status;
 80126f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80126f4:	4618      	mov	r0, r3
 80126f6:	3730      	adds	r7, #48	; 0x30
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd80      	pop	{r7, pc}
 80126fc:	20000d6c 	.word	0x20000d6c
 8012700:	20000dd4 	.word	0x20000dd4
 8012704:	20000da4 	.word	0x20000da4
 8012708:	20000da5 	.word	0x20000da5

0801270c <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 801270c:	b580      	push	{r7, lr}
 801270e:	b084      	sub	sp, #16
 8012710:	af00      	add	r7, sp, #0
 8012712:	4603      	mov	r3, r0
 8012714:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012716:	2300      	movs	r3, #0
 8012718:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 801271a:	2300      	movs	r3, #0
 801271c:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 801271e:	2301      	movs	r3, #1
 8012720:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8012722:	79fb      	ldrb	r3, [r7, #7]
 8012724:	2bff      	cmp	r3, #255	; 0xff
 8012726:	d11f      	bne.n	8012768 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8012728:	2000      	movs	r0, #0
 801272a:	f7ff f8f9 	bl	8011920 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 801272e:	4b15      	ldr	r3, [pc, #84]	; (8012784 <SendReJoinReq+0x78>)
 8012730:	2200      	movs	r2, #0
 8012732:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8012736:	4b13      	ldr	r3, [pc, #76]	; (8012784 <SendReJoinReq+0x78>)
 8012738:	4a13      	ldr	r2, [pc, #76]	; (8012788 <SendReJoinReq+0x7c>)
 801273a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801273e:	4b11      	ldr	r3, [pc, #68]	; (8012784 <SendReJoinReq+0x78>)
 8012740:	22ff      	movs	r2, #255	; 0xff
 8012742:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8012746:	7b3b      	ldrb	r3, [r7, #12]
 8012748:	f36f 1347 	bfc	r3, #5, #3
 801274c:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 801274e:	7b3a      	ldrb	r2, [r7, #12]
 8012750:	4b0c      	ldr	r3, [pc, #48]	; (8012784 <SendReJoinReq+0x78>)
 8012752:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 8012756:	480d      	ldr	r0, [pc, #52]	; (801278c <SendReJoinReq+0x80>)
 8012758:	f7fb ff38 	bl	800e5cc <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 801275c:	480c      	ldr	r0, [pc, #48]	; (8012790 <SendReJoinReq+0x84>)
 801275e:	f7fb ff05 	bl	800e56c <SecureElementGetDevEui>

            allowDelayedTx = false;
 8012762:	2300      	movs	r3, #0
 8012764:	73fb      	strb	r3, [r7, #15]

            break;
 8012766:	e002      	b.n	801276e <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012768:	2302      	movs	r3, #2
 801276a:	73bb      	strb	r3, [r7, #14]
            break;
 801276c:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 801276e:	7bfb      	ldrb	r3, [r7, #15]
 8012770:	4618      	mov	r0, r3
 8012772:	f000 f8ff 	bl	8012974 <ScheduleTx>
 8012776:	4603      	mov	r3, r0
 8012778:	73bb      	strb	r3, [r7, #14]
    return status;
 801277a:	7bbb      	ldrb	r3, [r7, #14]
}
 801277c:	4618      	mov	r0, r3
 801277e:	3710      	adds	r7, #16
 8012780:	46bd      	mov	sp, r7
 8012782:	bd80      	pop	{r7, pc}
 8012784:	20000850 	.word	0x20000850
 8012788:	20000852 	.word	0x20000852
 801278c:	2000095e 	.word	0x2000095e
 8012790:	20000966 	.word	0x20000966

08012794 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8012794:	b580      	push	{r7, lr}
 8012796:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8012798:	f002 fd38 	bl	801520c <LoRaMacClassBIsBeaconExpected>
 801279c:	4603      	mov	r3, r0
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d001      	beq.n	80127a6 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 80127a2:	230e      	movs	r3, #14
 80127a4:	e013      	b.n	80127ce <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80127a6:	4b0b      	ldr	r3, [pc, #44]	; (80127d4 <CheckForClassBCollision+0x40>)
 80127a8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80127ac:	2b01      	cmp	r3, #1
 80127ae:	d10d      	bne.n	80127cc <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80127b0:	f002 fd33 	bl	801521a <LoRaMacClassBIsPingExpected>
 80127b4:	4603      	mov	r3, r0
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d001      	beq.n	80127be <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80127ba:	230f      	movs	r3, #15
 80127bc:	e007      	b.n	80127ce <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80127be:	f002 fd33 	bl	8015228 <LoRaMacClassBIsMulticastExpected>
 80127c2:	4603      	mov	r3, r0
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d001      	beq.n	80127cc <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80127c8:	230f      	movs	r3, #15
 80127ca:	e000      	b.n	80127ce <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 80127cc:	2300      	movs	r3, #0
}
 80127ce:	4618      	mov	r0, r3
 80127d0:	bd80      	pop	{r7, pc}
 80127d2:	bf00      	nop
 80127d4:	20000d6c 	.word	0x20000d6c

080127d8 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 80127d8:	b590      	push	{r4, r7, lr}
 80127da:	b083      	sub	sp, #12
 80127dc:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80127de:	4b2d      	ldr	r3, [pc, #180]	; (8012894 <ComputeRxWindowParameters+0xbc>)
 80127e0:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80127e4:	4b2b      	ldr	r3, [pc, #172]	; (8012894 <ComputeRxWindowParameters+0xbc>)
 80127e6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80127ea:	4b2a      	ldr	r3, [pc, #168]	; (8012894 <ComputeRxWindowParameters+0xbc>)
 80127ec:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 80127f0:	4b28      	ldr	r3, [pc, #160]	; (8012894 <ComputeRxWindowParameters+0xbc>)
 80127f2:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 80127f6:	4b27      	ldr	r3, [pc, #156]	; (8012894 <ComputeRxWindowParameters+0xbc>)
 80127f8:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80127fc:	b25b      	sxtb	r3, r3
 80127fe:	f004 fdd9 	bl	80173b4 <RegionApplyDrOffset>
 8012802:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012804:	b259      	sxtb	r1, r3
 8012806:	4b23      	ldr	r3, [pc, #140]	; (8012894 <ComputeRxWindowParameters+0xbc>)
 8012808:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 801280c:	4b21      	ldr	r3, [pc, #132]	; (8012894 <ComputeRxWindowParameters+0xbc>)
 801280e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012810:	4821      	ldr	r0, [pc, #132]	; (8012898 <ComputeRxWindowParameters+0xc0>)
 8012812:	9000      	str	r0, [sp, #0]
 8012814:	4620      	mov	r0, r4
 8012816:	f004 fcef 	bl	80171f8 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801281a:	4b1e      	ldr	r3, [pc, #120]	; (8012894 <ComputeRxWindowParameters+0xbc>)
 801281c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8012820:	4b1c      	ldr	r3, [pc, #112]	; (8012894 <ComputeRxWindowParameters+0xbc>)
 8012822:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012826:	b259      	sxtb	r1, r3
 8012828:	4b1a      	ldr	r3, [pc, #104]	; (8012894 <ComputeRxWindowParameters+0xbc>)
 801282a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 801282e:	4b19      	ldr	r3, [pc, #100]	; (8012894 <ComputeRxWindowParameters+0xbc>)
 8012830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012832:	4c1a      	ldr	r4, [pc, #104]	; (801289c <ComputeRxWindowParameters+0xc4>)
 8012834:	9400      	str	r4, [sp, #0]
 8012836:	f004 fcdf 	bl	80171f8 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801283a:	4b16      	ldr	r3, [pc, #88]	; (8012894 <ComputeRxWindowParameters+0xbc>)
 801283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801283e:	4a18      	ldr	r2, [pc, #96]	; (80128a0 <ComputeRxWindowParameters+0xc8>)
 8012840:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8012844:	4413      	add	r3, r2
 8012846:	4a16      	ldr	r2, [pc, #88]	; (80128a0 <ComputeRxWindowParameters+0xc8>)
 8012848:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 801284c:	4b11      	ldr	r3, [pc, #68]	; (8012894 <ComputeRxWindowParameters+0xbc>)
 801284e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012850:	4a13      	ldr	r2, [pc, #76]	; (80128a0 <ComputeRxWindowParameters+0xc8>)
 8012852:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8012856:	4413      	add	r3, r2
 8012858:	4a11      	ldr	r2, [pc, #68]	; (80128a0 <ComputeRxWindowParameters+0xc8>)
 801285a:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 801285e:	4b10      	ldr	r3, [pc, #64]	; (80128a0 <ComputeRxWindowParameters+0xc8>)
 8012860:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012864:	2b04      	cmp	r3, #4
 8012866:	d011      	beq.n	801288c <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8012868:	4b0a      	ldr	r3, [pc, #40]	; (8012894 <ComputeRxWindowParameters+0xbc>)
 801286a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801286c:	4a0c      	ldr	r2, [pc, #48]	; (80128a0 <ComputeRxWindowParameters+0xc8>)
 801286e:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8012872:	4413      	add	r3, r2
 8012874:	4a0a      	ldr	r2, [pc, #40]	; (80128a0 <ComputeRxWindowParameters+0xc8>)
 8012876:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 801287a:	4b06      	ldr	r3, [pc, #24]	; (8012894 <ComputeRxWindowParameters+0xbc>)
 801287c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801287e:	4a08      	ldr	r2, [pc, #32]	; (80128a0 <ComputeRxWindowParameters+0xc8>)
 8012880:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8012884:	4413      	add	r3, r2
 8012886:	4a06      	ldr	r2, [pc, #24]	; (80128a0 <ComputeRxWindowParameters+0xc8>)
 8012888:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 801288c:	bf00      	nop
 801288e:	3704      	adds	r7, #4
 8012890:	46bd      	mov	sp, r7
 8012892:	bd90      	pop	{r4, r7, pc}
 8012894:	20000d6c 	.word	0x20000d6c
 8012898:	20000c08 	.word	0x20000c08
 801289c:	20000c20 	.word	0x20000c20
 80128a0:	20000850 	.word	0x20000850

080128a4 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b082      	sub	sp, #8
 80128a8:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 80128aa:	2300      	movs	r3, #0
 80128ac:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80128ae:	4b13      	ldr	r3, [pc, #76]	; (80128fc <VerifyTxFrame+0x58>)
 80128b0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d01b      	beq.n	80128f0 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80128b8:	1d3b      	adds	r3, r7, #4
 80128ba:	4618      	mov	r0, r3
 80128bc:	f002 ff6e 	bl	801579c <LoRaMacCommandsGetSizeSerializedCmds>
 80128c0:	4603      	mov	r3, r0
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d001      	beq.n	80128ca <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80128c6:	2313      	movs	r3, #19
 80128c8:	e013      	b.n	80128f2 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 80128ca:	4b0d      	ldr	r3, [pc, #52]	; (8012900 <VerifyTxFrame+0x5c>)
 80128cc:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80128d0:	4a0a      	ldr	r2, [pc, #40]	; (80128fc <VerifyTxFrame+0x58>)
 80128d2:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 80128d6:	687a      	ldr	r2, [r7, #4]
 80128d8:	b2d2      	uxtb	r2, r2
 80128da:	4618      	mov	r0, r3
 80128dc:	f7ff f932 	bl	8011b44 <ValidatePayloadLength>
 80128e0:	4603      	mov	r3, r0
 80128e2:	f083 0301 	eor.w	r3, r3, #1
 80128e6:	b2db      	uxtb	r3, r3
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d001      	beq.n	80128f0 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 80128ec:	2308      	movs	r3, #8
 80128ee:	e000      	b.n	80128f2 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 80128f0:	2300      	movs	r3, #0
}
 80128f2:	4618      	mov	r0, r3
 80128f4:	3708      	adds	r7, #8
 80128f6:	46bd      	mov	sp, r7
 80128f8:	bd80      	pop	{r7, pc}
 80128fa:	bf00      	nop
 80128fc:	20000d6c 	.word	0x20000d6c
 8012900:	20000850 	.word	0x20000850

08012904 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8012904:	b580      	push	{r7, lr}
 8012906:	b082      	sub	sp, #8
 8012908:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 801290a:	4b18      	ldr	r3, [pc, #96]	; (801296c <SerializeTxFrame+0x68>)
 801290c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012910:	2b00      	cmp	r3, #0
 8012912:	d002      	beq.n	801291a <SerializeTxFrame+0x16>
 8012914:	2b04      	cmp	r3, #4
 8012916:	d011      	beq.n	801293c <SerializeTxFrame+0x38>
 8012918:	e021      	b.n	801295e <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 801291a:	4815      	ldr	r0, [pc, #84]	; (8012970 <SerializeTxFrame+0x6c>)
 801291c:	f004 fa6c 	bl	8016df8 <LoRaMacSerializerJoinRequest>
 8012920:	4603      	mov	r3, r0
 8012922:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8012924:	79fb      	ldrb	r3, [r7, #7]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d001      	beq.n	801292e <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801292a:	2311      	movs	r3, #17
 801292c:	e01a      	b.n	8012964 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 801292e:	4b0f      	ldr	r3, [pc, #60]	; (801296c <SerializeTxFrame+0x68>)
 8012930:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8012934:	b29a      	uxth	r2, r3
 8012936:	4b0d      	ldr	r3, [pc, #52]	; (801296c <SerializeTxFrame+0x68>)
 8012938:	801a      	strh	r2, [r3, #0]
            break;
 801293a:	e012      	b.n	8012962 <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 801293c:	480c      	ldr	r0, [pc, #48]	; (8012970 <SerializeTxFrame+0x6c>)
 801293e:	f004 fadd 	bl	8016efc <LoRaMacSerializerData>
 8012942:	4603      	mov	r3, r0
 8012944:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8012946:	79fb      	ldrb	r3, [r7, #7]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d001      	beq.n	8012950 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801294c:	2311      	movs	r3, #17
 801294e:	e009      	b.n	8012964 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8012950:	4b06      	ldr	r3, [pc, #24]	; (801296c <SerializeTxFrame+0x68>)
 8012952:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8012956:	b29a      	uxth	r2, r3
 8012958:	4b04      	ldr	r3, [pc, #16]	; (801296c <SerializeTxFrame+0x68>)
 801295a:	801a      	strh	r2, [r3, #0]
            break;
 801295c:	e001      	b.n	8012962 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801295e:	2303      	movs	r3, #3
 8012960:	e000      	b.n	8012964 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8012962:	2300      	movs	r3, #0
}
 8012964:	4618      	mov	r0, r3
 8012966:	3708      	adds	r7, #8
 8012968:	46bd      	mov	sp, r7
 801296a:	bd80      	pop	{r7, pc}
 801296c:	20000850 	.word	0x20000850
 8012970:	20000958 	.word	0x20000958

08012974 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8012974:	b580      	push	{r7, lr}
 8012976:	b090      	sub	sp, #64	; 0x40
 8012978:	af02      	add	r7, sp, #8
 801297a:	4603      	mov	r3, r0
 801297c:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801297e:	2303      	movs	r3, #3
 8012980:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8012984:	f7ff ff06 	bl	8012794 <CheckForClassBCollision>
 8012988:	4603      	mov	r3, r0
 801298a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 801298e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012992:	2b00      	cmp	r3, #0
 8012994:	d002      	beq.n	801299c <ScheduleTx+0x28>
    {
        return status;
 8012996:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801299a:	e092      	b.n	8012ac2 <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 801299c:	f000 f8f8 	bl	8012b90 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 80129a0:	f7ff ffb0 	bl	8012904 <SerializeTxFrame>
 80129a4:	4603      	mov	r3, r0
 80129a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 80129aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d002      	beq.n	80129b8 <ScheduleTx+0x44>
    {
        return status;
 80129b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80129b6:	e084      	b.n	8012ac2 <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 80129b8:	4b44      	ldr	r3, [pc, #272]	; (8012acc <ScheduleTx+0x158>)
 80129ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129bc:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80129be:	4b43      	ldr	r3, [pc, #268]	; (8012acc <ScheduleTx+0x158>)
 80129c0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80129c4:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 80129c6:	4b41      	ldr	r3, [pc, #260]	; (8012acc <ScheduleTx+0x158>)
 80129c8:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80129cc:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80129ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80129d2:	4618      	mov	r0, r3
 80129d4:	f00a fbbc 	bl	801d150 <SysTimeGetMcuTime>
 80129d8:	4638      	mov	r0, r7
 80129da:	4b3c      	ldr	r3, [pc, #240]	; (8012acc <ScheduleTx+0x158>)
 80129dc:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 80129e0:	9200      	str	r2, [sp, #0]
 80129e2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80129e6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80129ea:	ca06      	ldmia	r2, {r1, r2}
 80129ec:	f00a fb11 	bl	801d012 <SysTimeSub>
 80129f0:	f107 0320 	add.w	r3, r7, #32
 80129f4:	463a      	mov	r2, r7
 80129f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80129fa:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80129fe:	4b33      	ldr	r3, [pc, #204]	; (8012acc <ScheduleTx+0x158>)
 8012a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a02:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8012a04:	2300      	movs	r3, #0
 8012a06:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 8012a0a:	2301      	movs	r3, #1
 8012a0c:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8012a0e:	4b30      	ldr	r3, [pc, #192]	; (8012ad0 <ScheduleTx+0x15c>)
 8012a10:	881b      	ldrh	r3, [r3, #0]
 8012a12:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8012a14:	4b2d      	ldr	r3, [pc, #180]	; (8012acc <ScheduleTx+0x158>)
 8012a16:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d104      	bne.n	8012a28 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8012a1e:	2301      	movs	r3, #1
 8012a20:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8012a24:	2300      	movs	r3, #0
 8012a26:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8012a28:	4b28      	ldr	r3, [pc, #160]	; (8012acc <ScheduleTx+0x158>)
 8012a2a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8012a2e:	f107 0114 	add.w	r1, r7, #20
 8012a32:	4b28      	ldr	r3, [pc, #160]	; (8012ad4 <ScheduleTx+0x160>)
 8012a34:	9300      	str	r3, [sp, #0]
 8012a36:	4b28      	ldr	r3, [pc, #160]	; (8012ad8 <ScheduleTx+0x164>)
 8012a38:	4a28      	ldr	r2, [pc, #160]	; (8012adc <ScheduleTx+0x168>)
 8012a3a:	f004 fca3 	bl	8017384 <RegionNextChannel>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8012a44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d025      	beq.n	8012a98 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8012a4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a50:	2b0b      	cmp	r3, #11
 8012a52:	d11e      	bne.n	8012a92 <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8012a54:	4b1e      	ldr	r3, [pc, #120]	; (8012ad0 <ScheduleTx+0x15c>)
 8012a56:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d01c      	beq.n	8012a98 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 8012a5e:	7bfb      	ldrb	r3, [r7, #15]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d013      	beq.n	8012a8c <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8012a64:	4b1a      	ldr	r3, [pc, #104]	; (8012ad0 <ScheduleTx+0x15c>)
 8012a66:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012a6a:	f043 0320 	orr.w	r3, r3, #32
 8012a6e:	4a18      	ldr	r2, [pc, #96]	; (8012ad0 <ScheduleTx+0x15c>)
 8012a70:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8012a74:	4b16      	ldr	r3, [pc, #88]	; (8012ad0 <ScheduleTx+0x15c>)
 8012a76:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8012a7a:	4619      	mov	r1, r3
 8012a7c:	4818      	ldr	r0, [pc, #96]	; (8012ae0 <ScheduleTx+0x16c>)
 8012a7e:	f00b f907 	bl	801dc90 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8012a82:	4817      	ldr	r0, [pc, #92]	; (8012ae0 <ScheduleTx+0x16c>)
 8012a84:	f00b f826 	bl	801dad4 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8012a88:	2300      	movs	r3, #0
 8012a8a:	e01a      	b.n	8012ac2 <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8012a8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a90:	e017      	b.n	8012ac2 <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8012a92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a96:	e014      	b.n	8012ac2 <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8012a98:	f7ff fe9e 	bl	80127d8 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8012a9c:	f7ff ff02 	bl	80128a4 <VerifyTxFrame>
 8012aa0:	4603      	mov	r3, r0
 8012aa2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8012aa6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d002      	beq.n	8012ab4 <ScheduleTx+0x140>
    {
        return status;
 8012aae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ab2:	e006      	b.n	8012ac2 <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8012ab4:	4b06      	ldr	r3, [pc, #24]	; (8012ad0 <ScheduleTx+0x15c>)
 8012ab6:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 8012aba:	4618      	mov	r0, r3
 8012abc:	f000 fb76 	bl	80131ac <SendFrameOnChannel>
 8012ac0:	4603      	mov	r3, r0
}
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	3738      	adds	r7, #56	; 0x38
 8012ac6:	46bd      	mov	sp, r7
 8012ac8:	bd80      	pop	{r7, pc}
 8012aca:	bf00      	nop
 8012acc:	20000d6c 	.word	0x20000d6c
 8012ad0:	20000850 	.word	0x20000850
 8012ad4:	20000d9c 	.word	0x20000d9c
 8012ad8:	20000ce4 	.word	0x20000ce4
 8012adc:	20000c6b 	.word	0x20000c6b
 8012ae0:	20000bb8 	.word	0x20000bb8

08012ae4 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b084      	sub	sp, #16
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	4603      	mov	r3, r0
 8012aec:	460a      	mov	r2, r1
 8012aee:	71fb      	strb	r3, [r7, #7]
 8012af0:	4613      	mov	r3, r2
 8012af2:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8012af4:	2312      	movs	r3, #18
 8012af6:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8012af8:	2300      	movs	r3, #0
 8012afa:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8012afc:	4b22      	ldr	r3, [pc, #136]	; (8012b88 <SecureFrame+0xa4>)
 8012afe:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d002      	beq.n	8012b0c <SecureFrame+0x28>
 8012b06:	2b04      	cmp	r3, #4
 8012b08:	d011      	beq.n	8012b2e <SecureFrame+0x4a>
 8012b0a:	e036      	b.n	8012b7a <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8012b0c:	481f      	ldr	r0, [pc, #124]	; (8012b8c <SecureFrame+0xa8>)
 8012b0e:	f003 fd3f 	bl	8016590 <LoRaMacCryptoPrepareJoinRequest>
 8012b12:	4603      	mov	r3, r0
 8012b14:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8012b16:	7bfb      	ldrb	r3, [r7, #15]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d001      	beq.n	8012b20 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012b1c:	2311      	movs	r3, #17
 8012b1e:	e02f      	b.n	8012b80 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8012b20:	4b19      	ldr	r3, [pc, #100]	; (8012b88 <SecureFrame+0xa4>)
 8012b22:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8012b26:	b29a      	uxth	r2, r3
 8012b28:	4b17      	ldr	r3, [pc, #92]	; (8012b88 <SecureFrame+0xa4>)
 8012b2a:	801a      	strh	r2, [r3, #0]
            break;
 8012b2c:	e027      	b.n	8012b7e <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8012b2e:	f107 0308 	add.w	r3, r7, #8
 8012b32:	4618      	mov	r0, r3
 8012b34:	f003 fc66 	bl	8016404 <LoRaMacCryptoGetFCntUp>
 8012b38:	4603      	mov	r3, r0
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d001      	beq.n	8012b42 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8012b3e:	2312      	movs	r3, #18
 8012b40:	e01e      	b.n	8012b80 <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8012b42:	4b11      	ldr	r3, [pc, #68]	; (8012b88 <SecureFrame+0xa4>)
 8012b44:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d002      	beq.n	8012b52 <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8012b4c:	68bb      	ldr	r3, [r7, #8]
 8012b4e:	3b01      	subs	r3, #1
 8012b50:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8012b52:	68b8      	ldr	r0, [r7, #8]
 8012b54:	79ba      	ldrb	r2, [r7, #6]
 8012b56:	79f9      	ldrb	r1, [r7, #7]
 8012b58:	4b0c      	ldr	r3, [pc, #48]	; (8012b8c <SecureFrame+0xa8>)
 8012b5a:	f003 fe41 	bl	80167e0 <LoRaMacCryptoSecureMessage>
 8012b5e:	4603      	mov	r3, r0
 8012b60:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8012b62:	7bfb      	ldrb	r3, [r7, #15]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d001      	beq.n	8012b6c <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012b68:	2311      	movs	r3, #17
 8012b6a:	e009      	b.n	8012b80 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8012b6c:	4b06      	ldr	r3, [pc, #24]	; (8012b88 <SecureFrame+0xa4>)
 8012b6e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8012b72:	b29a      	uxth	r2, r3
 8012b74:	4b04      	ldr	r3, [pc, #16]	; (8012b88 <SecureFrame+0xa4>)
 8012b76:	801a      	strh	r2, [r3, #0]
            break;
 8012b78:	e001      	b.n	8012b7e <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8012b7a:	2303      	movs	r3, #3
 8012b7c:	e000      	b.n	8012b80 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 8012b7e:	2300      	movs	r3, #0
}
 8012b80:	4618      	mov	r0, r3
 8012b82:	3710      	adds	r7, #16
 8012b84:	46bd      	mov	sp, r7
 8012b86:	bd80      	pop	{r7, pc}
 8012b88:	20000850 	.word	0x20000850
 8012b8c:	20000958 	.word	0x20000958

08012b90 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8012b90:	b480      	push	{r7}
 8012b92:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8012b94:	4b09      	ldr	r3, [pc, #36]	; (8012bbc <CalculateBackOff+0x2c>)
 8012b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d10a      	bne.n	8012bb2 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8012b9c:	4b07      	ldr	r3, [pc, #28]	; (8012bbc <CalculateBackOff+0x2c>)
 8012b9e:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8012ba2:	3b01      	subs	r3, #1
 8012ba4:	4a06      	ldr	r2, [pc, #24]	; (8012bc0 <CalculateBackOff+0x30>)
 8012ba6:	f8d2 241c 	ldr.w	r2, [r2, #1052]	; 0x41c
 8012baa:	fb02 f303 	mul.w	r3, r2, r3
 8012bae:	4a03      	ldr	r2, [pc, #12]	; (8012bbc <CalculateBackOff+0x2c>)
 8012bb0:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8012bb2:	bf00      	nop
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bc80      	pop	{r7}
 8012bb8:	4770      	bx	lr
 8012bba:	bf00      	nop
 8012bbc:	20000d6c 	.word	0x20000d6c
 8012bc0:	20000850 	.word	0x20000850

08012bc4 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b082      	sub	sp, #8
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	4603      	mov	r3, r0
 8012bcc:	7139      	strb	r1, [r7, #4]
 8012bce:	71fb      	strb	r3, [r7, #7]
 8012bd0:	4613      	mov	r3, r2
 8012bd2:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8012bd4:	79fb      	ldrb	r3, [r7, #7]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d002      	beq.n	8012be0 <RemoveMacCommands+0x1c>
 8012bda:	79fb      	ldrb	r3, [r7, #7]
 8012bdc:	2b01      	cmp	r3, #1
 8012bde:	d10d      	bne.n	8012bfc <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8012be0:	79bb      	ldrb	r3, [r7, #6]
 8012be2:	2b01      	cmp	r3, #1
 8012be4:	d108      	bne.n	8012bf8 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8012be6:	793b      	ldrb	r3, [r7, #4]
 8012be8:	f003 0320 	and.w	r3, r3, #32
 8012bec:	b2db      	uxtb	r3, r3
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d004      	beq.n	8012bfc <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8012bf2:	f002 fda7 	bl	8015744 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8012bf6:	e001      	b.n	8012bfc <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8012bf8:	f002 fda4 	bl	8015744 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8012bfc:	bf00      	nop
 8012bfe:	3708      	adds	r7, #8
 8012c00:	46bd      	mov	sp, r7
 8012c02:	bd80      	pop	{r7, pc}

08012c04 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 8012c04:	b5b0      	push	{r4, r5, r7, lr}
 8012c06:	b092      	sub	sp, #72	; 0x48
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 8012c0e:	79fb      	ldrb	r3, [r7, #7]
 8012c10:	f083 0301 	eor.w	r3, r3, #1
 8012c14:	b2db      	uxtb	r3, r3
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d003      	beq.n	8012c22 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8012c1a:	4b88      	ldr	r3, [pc, #544]	; (8012e3c <ResetMacParameters+0x238>)
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8012c22:	4b86      	ldr	r3, [pc, #536]	; (8012e3c <ResetMacParameters+0x238>)
 8012c24:	2200      	movs	r2, #0
 8012c26:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8012c28:	4b85      	ldr	r3, [pc, #532]	; (8012e40 <ResetMacParameters+0x23c>)
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8012c30:	4b83      	ldr	r3, [pc, #524]	; (8012e40 <ResetMacParameters+0x23c>)
 8012c32:	2200      	movs	r2, #0
 8012c34:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 8012c38:	4b81      	ldr	r3, [pc, #516]	; (8012e40 <ResetMacParameters+0x23c>)
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8012c40:	4b7e      	ldr	r3, [pc, #504]	; (8012e3c <ResetMacParameters+0x238>)
 8012c42:	2200      	movs	r2, #0
 8012c44:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8012c48:	4b7c      	ldr	r3, [pc, #496]	; (8012e3c <ResetMacParameters+0x238>)
 8012c4a:	2201      	movs	r2, #1
 8012c4c:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012c50:	4b7a      	ldr	r3, [pc, #488]	; (8012e3c <ResetMacParameters+0x238>)
 8012c52:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8012c56:	4b79      	ldr	r3, [pc, #484]	; (8012e3c <ResetMacParameters+0x238>)
 8012c58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012c5c:	4b77      	ldr	r3, [pc, #476]	; (8012e3c <ResetMacParameters+0x238>)
 8012c5e:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8012c62:	4b76      	ldr	r3, [pc, #472]	; (8012e3c <ResetMacParameters+0x238>)
 8012c64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8012c68:	4b74      	ldr	r3, [pc, #464]	; (8012e3c <ResetMacParameters+0x238>)
 8012c6a:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 8012c6e:	4b73      	ldr	r3, [pc, #460]	; (8012e3c <ResetMacParameters+0x238>)
 8012c70:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8012c74:	4b71      	ldr	r3, [pc, #452]	; (8012e3c <ResetMacParameters+0x238>)
 8012c76:	4a71      	ldr	r2, [pc, #452]	; (8012e3c <ResetMacParameters+0x238>)
 8012c78:	336c      	adds	r3, #108	; 0x6c
 8012c7a:	32b4      	adds	r2, #180	; 0xb4
 8012c7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012c80:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8012c84:	4b6d      	ldr	r3, [pc, #436]	; (8012e3c <ResetMacParameters+0x238>)
 8012c86:	4a6d      	ldr	r2, [pc, #436]	; (8012e3c <ResetMacParameters+0x238>)
 8012c88:	3374      	adds	r3, #116	; 0x74
 8012c8a:	32bc      	adds	r2, #188	; 0xbc
 8012c8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012c90:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8012c94:	4b69      	ldr	r3, [pc, #420]	; (8012e3c <ResetMacParameters+0x238>)
 8012c96:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 8012c9a:	4b68      	ldr	r3, [pc, #416]	; (8012e3c <ResetMacParameters+0x238>)
 8012c9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8012ca0:	4b66      	ldr	r3, [pc, #408]	; (8012e3c <ResetMacParameters+0x238>)
 8012ca2:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 8012ca6:	4b65      	ldr	r3, [pc, #404]	; (8012e3c <ResetMacParameters+0x238>)
 8012ca8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8012cac:	4b63      	ldr	r3, [pc, #396]	; (8012e3c <ResetMacParameters+0x238>)
 8012cae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8012cb2:	4a62      	ldr	r2, [pc, #392]	; (8012e3c <ResetMacParameters+0x238>)
 8012cb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8012cb8:	4b60      	ldr	r3, [pc, #384]	; (8012e3c <ResetMacParameters+0x238>)
 8012cba:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8012cbe:	4a5f      	ldr	r2, [pc, #380]	; (8012e3c <ResetMacParameters+0x238>)
 8012cc0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8012cc4:	4b5d      	ldr	r3, [pc, #372]	; (8012e3c <ResetMacParameters+0x238>)
 8012cc6:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8012cca:	4b5c      	ldr	r3, [pc, #368]	; (8012e3c <ResetMacParameters+0x238>)
 8012ccc:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8012cd0:	4b5a      	ldr	r3, [pc, #360]	; (8012e3c <ResetMacParameters+0x238>)
 8012cd2:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8012cd6:	4b59      	ldr	r3, [pc, #356]	; (8012e3c <ResetMacParameters+0x238>)
 8012cd8:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

    MacCtx.NodeAckRequested = false;
 8012cdc:	4b58      	ldr	r3, [pc, #352]	; (8012e40 <ResetMacParameters+0x23c>)
 8012cde:	2200      	movs	r2, #0
 8012ce0:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 8012ce4:	4b55      	ldr	r3, [pc, #340]	; (8012e3c <ResetMacParameters+0x238>)
 8012ce6:	2200      	movs	r2, #0
 8012ce8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8012cec:	4b53      	ldr	r3, [pc, #332]	; (8012e3c <ResetMacParameters+0x238>)
 8012cee:	2200      	movs	r2, #0
 8012cf0:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 8012cf4:	4b51      	ldr	r3, [pc, #324]	; (8012e3c <ResetMacParameters+0x238>)
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 8012cfc:	4b4f      	ldr	r3, [pc, #316]	; (8012e3c <ResetMacParameters+0x238>)
 8012cfe:	2200      	movs	r2, #0
 8012d00:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 8012d04:	4b4d      	ldr	r3, [pc, #308]	; (8012e3c <ResetMacParameters+0x238>)
 8012d06:	2200      	movs	r2, #0
 8012d08:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 8012d0c:	4b4b      	ldr	r3, [pc, #300]	; (8012e3c <ResetMacParameters+0x238>)
 8012d0e:	2200      	movs	r2, #0
 8012d10:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8012d14:	4b49      	ldr	r3, [pc, #292]	; (8012e3c <ResetMacParameters+0x238>)
 8012d16:	2200      	movs	r2, #0
 8012d18:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 8012d1c:	4b47      	ldr	r3, [pc, #284]	; (8012e3c <ResetMacParameters+0x238>)
 8012d1e:	2200      	movs	r2, #0
 8012d20:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8012d24:	4b45      	ldr	r3, [pc, #276]	; (8012e3c <ResetMacParameters+0x238>)
 8012d26:	2200      	movs	r2, #0
 8012d28:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8012d2c:	4b43      	ldr	r3, [pc, #268]	; (8012e3c <ResetMacParameters+0x238>)
 8012d2e:	2200      	movs	r2, #0
 8012d30:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8012d34:	4b41      	ldr	r3, [pc, #260]	; (8012e3c <ResetMacParameters+0x238>)
 8012d36:	2200      	movs	r2, #0
 8012d38:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8012d3c:	2301      	movs	r3, #1
 8012d3e:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8012d40:	4b40      	ldr	r3, [pc, #256]	; (8012e44 <ResetMacParameters+0x240>)
 8012d42:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8012d44:	4b40      	ldr	r3, [pc, #256]	; (8012e48 <ResetMacParameters+0x244>)
 8012d46:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 8012d48:	4b40      	ldr	r3, [pc, #256]	; (8012e4c <ResetMacParameters+0x248>)
 8012d4a:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012d4c:	4b3b      	ldr	r3, [pc, #236]	; (8012e3c <ResetMacParameters+0x238>)
 8012d4e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012d52:	f107 020c 	add.w	r2, r7, #12
 8012d56:	4611      	mov	r1, r2
 8012d58:	4618      	mov	r0, r3
 8012d5a:	f004 f9ff 	bl	801715c <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8012d5e:	4b38      	ldr	r3, [pc, #224]	; (8012e40 <ResetMacParameters+0x23c>)
 8012d60:	2200      	movs	r2, #0
 8012d62:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8012d66:	4b36      	ldr	r3, [pc, #216]	; (8012e40 <ResetMacParameters+0x23c>)
 8012d68:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8012d6c:	4b34      	ldr	r3, [pc, #208]	; (8012e40 <ResetMacParameters+0x23c>)
 8012d6e:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8012d72:	4b32      	ldr	r3, [pc, #200]	; (8012e3c <ResetMacParameters+0x238>)
 8012d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d76:	4a32      	ldr	r2, [pc, #200]	; (8012e40 <ResetMacParameters+0x23c>)
 8012d78:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012d7c:	4b2f      	ldr	r3, [pc, #188]	; (8012e3c <ResetMacParameters+0x238>)
 8012d7e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8012d82:	4b2f      	ldr	r3, [pc, #188]	; (8012e40 <ResetMacParameters+0x23c>)
 8012d84:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012d88:	4b2c      	ldr	r3, [pc, #176]	; (8012e3c <ResetMacParameters+0x238>)
 8012d8a:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8012d8e:	4b2c      	ldr	r3, [pc, #176]	; (8012e40 <ResetMacParameters+0x23c>)
 8012d90:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8012d94:	4b2a      	ldr	r3, [pc, #168]	; (8012e40 <ResetMacParameters+0x23c>)
 8012d96:	2200      	movs	r2, #0
 8012d98:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8012d9c:	4b28      	ldr	r3, [pc, #160]	; (8012e40 <ResetMacParameters+0x23c>)
 8012d9e:	2201      	movs	r2, #1
 8012da0:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8012da4:	4b25      	ldr	r3, [pc, #148]	; (8012e3c <ResetMacParameters+0x238>)
 8012da6:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8012daa:	4b25      	ldr	r3, [pc, #148]	; (8012e40 <ResetMacParameters+0x23c>)
 8012dac:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8012db0:	4a23      	ldr	r2, [pc, #140]	; (8012e40 <ResetMacParameters+0x23c>)
 8012db2:	4b23      	ldr	r3, [pc, #140]	; (8012e40 <ResetMacParameters+0x23c>)
 8012db4:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 8012db8:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 8012dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012dc0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012dc4:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8012dc8:	4b1d      	ldr	r3, [pc, #116]	; (8012e40 <ResetMacParameters+0x23c>)
 8012dca:	2201      	movs	r2, #1
 8012dcc:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012dd0:	4b1b      	ldr	r3, [pc, #108]	; (8012e40 <ResetMacParameters+0x23c>)
 8012dd2:	2202      	movs	r2, #2
 8012dd4:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8012dd8:	2300      	movs	r3, #0
 8012dda:	643b      	str	r3, [r7, #64]	; 0x40
    classBCallbacks.MacProcessNotify = NULL;
 8012ddc:	2300      	movs	r3, #0
 8012dde:	647b      	str	r3, [r7, #68]	; 0x44

    if( MacCtx.MacCallbacks != NULL )
 8012de0:	4b17      	ldr	r3, [pc, #92]	; (8012e40 <ResetMacParameters+0x23c>)
 8012de2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d009      	beq.n	8012dfe <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8012dea:	4b15      	ldr	r3, [pc, #84]	; (8012e40 <ResetMacParameters+0x23c>)
 8012dec:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012df0:	685b      	ldr	r3, [r3, #4]
 8012df2:	643b      	str	r3, [r7, #64]	; 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8012df4:	4b12      	ldr	r3, [pc, #72]	; (8012e40 <ResetMacParameters+0x23c>)
 8012df6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012dfa:	695b      	ldr	r3, [r3, #20]
 8012dfc:	647b      	str	r3, [r7, #68]	; 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8012dfe:	4b14      	ldr	r3, [pc, #80]	; (8012e50 <ResetMacParameters+0x24c>)
 8012e00:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8012e02:	4b14      	ldr	r3, [pc, #80]	; (8012e54 <ResetMacParameters+0x250>)
 8012e04:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8012e06:	4b14      	ldr	r3, [pc, #80]	; (8012e58 <ResetMacParameters+0x254>)
 8012e08:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8012e0a:	4b14      	ldr	r3, [pc, #80]	; (8012e5c <ResetMacParameters+0x258>)
 8012e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8012e0e:	4b14      	ldr	r3, [pc, #80]	; (8012e60 <ResetMacParameters+0x25c>)
 8012e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8012e12:	4b14      	ldr	r3, [pc, #80]	; (8012e64 <ResetMacParameters+0x260>)
 8012e14:	633b      	str	r3, [r7, #48]	; 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8012e16:	4b14      	ldr	r3, [pc, #80]	; (8012e68 <ResetMacParameters+0x264>)
 8012e18:	637b      	str	r3, [r7, #52]	; 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8012e1a:	4b14      	ldr	r3, [pc, #80]	; (8012e6c <ResetMacParameters+0x268>)
 8012e1c:	63bb      	str	r3, [r7, #56]	; 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8012e1e:	4b14      	ldr	r3, [pc, #80]	; (8012e70 <ResetMacParameters+0x26c>)
 8012e20:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8012e22:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8012e26:	f107 031c 	add.w	r3, r7, #28
 8012e2a:	4a12      	ldr	r2, [pc, #72]	; (8012e74 <ResetMacParameters+0x270>)
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f002 f996 	bl	801515e <LoRaMacClassBInit>
}
 8012e32:	bf00      	nop
 8012e34:	3748      	adds	r7, #72	; 0x48
 8012e36:	46bd      	mov	sp, r7
 8012e38:	bdb0      	pop	{r4, r5, r7, pc}
 8012e3a:	bf00      	nop
 8012e3c:	20000d6c 	.word	0x20000d6c
 8012e40:	20000850 	.word	0x20000850
 8012e44:	20000f90 	.word	0x20000f90
 8012e48:	20000fa4 	.word	0x20000fa4
 8012e4c:	20001904 	.word	0x20001904
 8012e50:	20000cb8 	.word	0x20000cb8
 8012e54:	20000c70 	.word	0x20000c70
 8012e58:	20000ca4 	.word	0x20000ca4
 8012e5c:	20000ce1 	.word	0x20000ce1
 8012e60:	20000e50 	.word	0x20000e50
 8012e64:	20000db4 	.word	0x20000db4
 8012e68:	20000db8 	.word	0x20000db8
 8012e6c:	20000e54 	.word	0x20000e54
 8012e70:	20000e9c 	.word	0x20000e9c
 8012e74:	20001320 	.word	0x20001320

08012e78 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	b082      	sub	sp, #8
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	6078      	str	r0, [r7, #4]
 8012e80:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8012e82:	6878      	ldr	r0, [r7, #4]
 8012e84:	f00a fe94 	bl	801dbb0 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8012e88:	4b11      	ldr	r3, [pc, #68]	; (8012ed0 <RxWindowSetup+0x58>)
 8012e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e8c:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8012e8e:	4b11      	ldr	r3, [pc, #68]	; (8012ed4 <RxWindowSetup+0x5c>)
 8012e90:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012e94:	4a10      	ldr	r2, [pc, #64]	; (8012ed8 <RxWindowSetup+0x60>)
 8012e96:	6839      	ldr	r1, [r7, #0]
 8012e98:	4618      	mov	r0, r3
 8012e9a:	f004 f9c7 	bl	801722c <RegionRxConfig>
 8012e9e:	4603      	mov	r3, r0
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d010      	beq.n	8012ec6 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8012ea4:	4b0d      	ldr	r3, [pc, #52]	; (8012edc <RxWindowSetup+0x64>)
 8012ea6:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 8012eaa:	4b0c      	ldr	r3, [pc, #48]	; (8012edc <RxWindowSetup+0x64>)
 8012eac:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8012eb0:	4b07      	ldr	r3, [pc, #28]	; (8012ed0 <RxWindowSetup+0x58>)
 8012eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012eb4:	4a07      	ldr	r2, [pc, #28]	; (8012ed4 <RxWindowSetup+0x5c>)
 8012eb6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8012eb8:	4610      	mov	r0, r2
 8012eba:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8012ebc:	683b      	ldr	r3, [r7, #0]
 8012ebe:	7cda      	ldrb	r2, [r3, #19]
 8012ec0:	4b06      	ldr	r3, [pc, #24]	; (8012edc <RxWindowSetup+0x64>)
 8012ec2:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 8012ec6:	bf00      	nop
 8012ec8:	3708      	adds	r7, #8
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	bd80      	pop	{r7, pc}
 8012ece:	bf00      	nop
 8012ed0:	0801f4f4 	.word	0x0801f4f4
 8012ed4:	20000d6c 	.word	0x20000d6c
 8012ed8:	20000c74 	.word	0x20000c74
 8012edc:	20000850 	.word	0x20000850

08012ee0 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8012ee0:	b590      	push	{r4, r7, lr}
 8012ee2:	b083      	sub	sp, #12
 8012ee4:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012ee6:	4b1e      	ldr	r3, [pc, #120]	; (8012f60 <OpenContinuousRxCWindow+0x80>)
 8012ee8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8012eec:	4b1c      	ldr	r3, [pc, #112]	; (8012f60 <OpenContinuousRxCWindow+0x80>)
 8012eee:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012ef2:	b259      	sxtb	r1, r3
 8012ef4:	4b1a      	ldr	r3, [pc, #104]	; (8012f60 <OpenContinuousRxCWindow+0x80>)
 8012ef6:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8012efa:	4b19      	ldr	r3, [pc, #100]	; (8012f60 <OpenContinuousRxCWindow+0x80>)
 8012efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012efe:	4c19      	ldr	r4, [pc, #100]	; (8012f64 <OpenContinuousRxCWindow+0x84>)
 8012f00:	9400      	str	r4, [sp, #0]
 8012f02:	f004 f979 	bl	80171f8 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012f06:	4b18      	ldr	r3, [pc, #96]	; (8012f68 <OpenContinuousRxCWindow+0x88>)
 8012f08:	2202      	movs	r2, #2
 8012f0a:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8012f0e:	4b14      	ldr	r3, [pc, #80]	; (8012f60 <OpenContinuousRxCWindow+0x80>)
 8012f10:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8012f14:	4b14      	ldr	r3, [pc, #80]	; (8012f68 <OpenContinuousRxCWindow+0x88>)
 8012f16:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8012f1a:	4b13      	ldr	r3, [pc, #76]	; (8012f68 <OpenContinuousRxCWindow+0x88>)
 8012f1c:	2201      	movs	r2, #1
 8012f1e:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8012f22:	4b0f      	ldr	r3, [pc, #60]	; (8012f60 <OpenContinuousRxCWindow+0x80>)
 8012f24:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012f28:	4a10      	ldr	r2, [pc, #64]	; (8012f6c <OpenContinuousRxCWindow+0x8c>)
 8012f2a:	490e      	ldr	r1, [pc, #56]	; (8012f64 <OpenContinuousRxCWindow+0x84>)
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	f004 f97d 	bl	801722c <RegionRxConfig>
 8012f32:	4603      	mov	r3, r0
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d00f      	beq.n	8012f58 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8012f38:	4b0b      	ldr	r3, [pc, #44]	; (8012f68 <OpenContinuousRxCWindow+0x88>)
 8012f3a:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 8012f3e:	4b0a      	ldr	r3, [pc, #40]	; (8012f68 <OpenContinuousRxCWindow+0x88>)
 8012f40:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( 0 ); // Continuous mode
 8012f44:	4b0a      	ldr	r3, [pc, #40]	; (8012f70 <OpenContinuousRxCWindow+0x90>)
 8012f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f48:	2000      	movs	r0, #0
 8012f4a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8012f4c:	4b06      	ldr	r3, [pc, #24]	; (8012f68 <OpenContinuousRxCWindow+0x88>)
 8012f4e:	f893 23fb 	ldrb.w	r2, [r3, #1019]	; 0x3fb
 8012f52:	4b05      	ldr	r3, [pc, #20]	; (8012f68 <OpenContinuousRxCWindow+0x88>)
 8012f54:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 8012f58:	bf00      	nop
 8012f5a:	3704      	adds	r7, #4
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	bd90      	pop	{r4, r7, pc}
 8012f60:	20000d6c 	.word	0x20000d6c
 8012f64:	20000c38 	.word	0x20000c38
 8012f68:	20000850 	.word	0x20000850
 8012f6c:	20000c74 	.word	0x20000c74
 8012f70:	0801f4f4 	.word	0x0801f4f4

08012f74 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b088      	sub	sp, #32
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	60f8      	str	r0, [r7, #12]
 8012f7c:	60b9      	str	r1, [r7, #8]
 8012f7e:	603b      	str	r3, [r7, #0]
 8012f80:	4613      	mov	r3, r2
 8012f82:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8012f84:	4b82      	ldr	r3, [pc, #520]	; (8013190 <PrepareFrame+0x21c>)
 8012f86:	2200      	movs	r2, #0
 8012f88:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8012f8a:	4b81      	ldr	r3, [pc, #516]	; (8013190 <PrepareFrame+0x21c>)
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    uint32_t fCntUp = 0;
 8012f92:	2300      	movs	r3, #0
 8012f94:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8012f96:	2300      	movs	r3, #0
 8012f98:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8012f9e:	683b      	ldr	r3, [r7, #0]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d101      	bne.n	8012fa8 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8012fa8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012faa:	461a      	mov	r2, r3
 8012fac:	6839      	ldr	r1, [r7, #0]
 8012fae:	4879      	ldr	r0, [pc, #484]	; (8013194 <PrepareFrame+0x220>)
 8012fb0:	f006 fc63 	bl	801987a <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8012fb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012fb6:	b2da      	uxtb	r2, r3
 8012fb8:	4b75      	ldr	r3, [pc, #468]	; (8013190 <PrepareFrame+0x21c>)
 8012fba:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	781a      	ldrb	r2, [r3, #0]
 8012fc2:	4b73      	ldr	r3, [pc, #460]	; (8013190 <PrepareFrame+0x21c>)
 8012fc4:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	781b      	ldrb	r3, [r3, #0]
 8012fca:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8012fce:	b2db      	uxtb	r3, r3
 8012fd0:	2b07      	cmp	r3, #7
 8012fd2:	f000 80b9 	beq.w	8013148 <PrepareFrame+0x1d4>
 8012fd6:	2b07      	cmp	r3, #7
 8012fd8:	f300 80d0 	bgt.w	801317c <PrepareFrame+0x208>
 8012fdc:	2b02      	cmp	r3, #2
 8012fde:	d006      	beq.n	8012fee <PrepareFrame+0x7a>
 8012fe0:	2b04      	cmp	r3, #4
 8012fe2:	f040 80cb 	bne.w	801317c <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8012fe6:	4b6a      	ldr	r3, [pc, #424]	; (8013190 <PrepareFrame+0x21c>)
 8012fe8:	2201      	movs	r2, #1
 8012fea:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8012fee:	4b68      	ldr	r3, [pc, #416]	; (8013190 <PrepareFrame+0x21c>)
 8012ff0:	2204      	movs	r2, #4
 8012ff2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8012ff6:	4b66      	ldr	r3, [pc, #408]	; (8013190 <PrepareFrame+0x21c>)
 8012ff8:	4a67      	ldr	r2, [pc, #412]	; (8013198 <PrepareFrame+0x224>)
 8012ffa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8012ffe:	4b64      	ldr	r3, [pc, #400]	; (8013190 <PrepareFrame+0x21c>)
 8013000:	22ff      	movs	r2, #255	; 0xff
 8013002:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	781a      	ldrb	r2, [r3, #0]
 801300a:	4b61      	ldr	r3, [pc, #388]	; (8013190 <PrepareFrame+0x21c>)
 801300c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8013010:	4a5f      	ldr	r2, [pc, #380]	; (8013190 <PrepareFrame+0x21c>)
 8013012:	79fb      	ldrb	r3, [r7, #7]
 8013014:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8013018:	4b60      	ldr	r3, [pc, #384]	; (801319c <PrepareFrame+0x228>)
 801301a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801301e:	4a5c      	ldr	r2, [pc, #368]	; (8013190 <PrepareFrame+0x21c>)
 8013020:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8013024:	68bb      	ldr	r3, [r7, #8]
 8013026:	781a      	ldrb	r2, [r3, #0]
 8013028:	4b59      	ldr	r3, [pc, #356]	; (8013190 <PrepareFrame+0x21c>)
 801302a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 801302e:	4b58      	ldr	r3, [pc, #352]	; (8013190 <PrepareFrame+0x21c>)
 8013030:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8013034:	4b56      	ldr	r3, [pc, #344]	; (8013190 <PrepareFrame+0x21c>)
 8013036:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 801303a:	4b55      	ldr	r3, [pc, #340]	; (8013190 <PrepareFrame+0x21c>)
 801303c:	4a55      	ldr	r2, [pc, #340]	; (8013194 <PrepareFrame+0x220>)
 801303e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8013042:	f107 0318 	add.w	r3, r7, #24
 8013046:	4618      	mov	r0, r3
 8013048:	f003 f9dc 	bl	8016404 <LoRaMacCryptoGetFCntUp>
 801304c:	4603      	mov	r3, r0
 801304e:	2b00      	cmp	r3, #0
 8013050:	d001      	beq.n	8013056 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8013052:	2312      	movs	r3, #18
 8013054:	e098      	b.n	8013188 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8013056:	69bb      	ldr	r3, [r7, #24]
 8013058:	b29a      	uxth	r2, r3
 801305a:	4b4d      	ldr	r3, [pc, #308]	; (8013190 <PrepareFrame+0x21c>)
 801305c:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 8013060:	4b4b      	ldr	r3, [pc, #300]	; (8013190 <PrepareFrame+0x21c>)
 8013062:	2200      	movs	r2, #0
 8013064:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8013068:	4b49      	ldr	r3, [pc, #292]	; (8013190 <PrepareFrame+0x21c>)
 801306a:	2200      	movs	r2, #0
 801306c:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8013070:	69bb      	ldr	r3, [r7, #24]
 8013072:	4a47      	ldr	r2, [pc, #284]	; (8013190 <PrepareFrame+0x21c>)
 8013074:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013078:	f107 0314 	add.w	r3, r7, #20
 801307c:	4618      	mov	r0, r3
 801307e:	f002 fb8d 	bl	801579c <LoRaMacCommandsGetSizeSerializedCmds>
 8013082:	4603      	mov	r3, r0
 8013084:	2b00      	cmp	r3, #0
 8013086:	d001      	beq.n	801308c <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013088:	2313      	movs	r3, #19
 801308a:	e07d      	b.n	8013188 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 801308c:	697b      	ldr	r3, [r7, #20]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d076      	beq.n	8013180 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8013092:	4b42      	ldr	r3, [pc, #264]	; (801319c <PrepareFrame+0x228>)
 8013094:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013098:	4618      	mov	r0, r3
 801309a:	f7fe fd2b 	bl	8011af4 <GetMaxAppPayloadWithoutFOptsLength>
 801309e:	4603      	mov	r3, r0
 80130a0:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80130a2:	4b3b      	ldr	r3, [pc, #236]	; (8013190 <PrepareFrame+0x21c>)
 80130a4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d01d      	beq.n	80130e8 <PrepareFrame+0x174>
 80130ac:	697b      	ldr	r3, [r7, #20]
 80130ae:	2b0f      	cmp	r3, #15
 80130b0:	d81a      	bhi.n	80130e8 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80130b2:	f107 0314 	add.w	r3, r7, #20
 80130b6:	4a3a      	ldr	r2, [pc, #232]	; (80131a0 <PrepareFrame+0x22c>)
 80130b8:	4619      	mov	r1, r3
 80130ba:	200f      	movs	r0, #15
 80130bc:	f002 fb84 	bl	80157c8 <LoRaMacCommandsSerializeCmds>
 80130c0:	4603      	mov	r3, r0
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d001      	beq.n	80130ca <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80130c6:	2313      	movs	r3, #19
 80130c8:	e05e      	b.n	8013188 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80130ca:	697b      	ldr	r3, [r7, #20]
 80130cc:	f003 030f 	and.w	r3, r3, #15
 80130d0:	b2d9      	uxtb	r1, r3
 80130d2:	68ba      	ldr	r2, [r7, #8]
 80130d4:	7813      	ldrb	r3, [r2, #0]
 80130d6:	f361 0303 	bfi	r3, r1, #0, #4
 80130da:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80130dc:	68bb      	ldr	r3, [r7, #8]
 80130de:	781a      	ldrb	r2, [r3, #0]
 80130e0:	4b2b      	ldr	r3, [pc, #172]	; (8013190 <PrepareFrame+0x21c>)
 80130e2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 80130e6:	e04b      	b.n	8013180 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80130e8:	4b29      	ldr	r3, [pc, #164]	; (8013190 <PrepareFrame+0x21c>)
 80130ea:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d010      	beq.n	8013114 <PrepareFrame+0x1a0>
 80130f2:	697b      	ldr	r3, [r7, #20]
 80130f4:	2b0f      	cmp	r3, #15
 80130f6:	d90d      	bls.n	8013114 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80130f8:	7ffb      	ldrb	r3, [r7, #31]
 80130fa:	f107 0114 	add.w	r1, r7, #20
 80130fe:	4a29      	ldr	r2, [pc, #164]	; (80131a4 <PrepareFrame+0x230>)
 8013100:	4618      	mov	r0, r3
 8013102:	f002 fb61 	bl	80157c8 <LoRaMacCommandsSerializeCmds>
 8013106:	4603      	mov	r3, r0
 8013108:	2b00      	cmp	r3, #0
 801310a:	d001      	beq.n	8013110 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801310c:	2313      	movs	r3, #19
 801310e:	e03b      	b.n	8013188 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8013110:	230a      	movs	r3, #10
 8013112:	e039      	b.n	8013188 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8013114:	7ffb      	ldrb	r3, [r7, #31]
 8013116:	f107 0114 	add.w	r1, r7, #20
 801311a:	4a22      	ldr	r2, [pc, #136]	; (80131a4 <PrepareFrame+0x230>)
 801311c:	4618      	mov	r0, r3
 801311e:	f002 fb53 	bl	80157c8 <LoRaMacCommandsSerializeCmds>
 8013122:	4603      	mov	r3, r0
 8013124:	2b00      	cmp	r3, #0
 8013126:	d001      	beq.n	801312c <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013128:	2313      	movs	r3, #19
 801312a:	e02d      	b.n	8013188 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 801312c:	4b18      	ldr	r3, [pc, #96]	; (8013190 <PrepareFrame+0x21c>)
 801312e:	2200      	movs	r2, #0
 8013130:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8013134:	4b16      	ldr	r3, [pc, #88]	; (8013190 <PrepareFrame+0x21c>)
 8013136:	4a1b      	ldr	r2, [pc, #108]	; (80131a4 <PrepareFrame+0x230>)
 8013138:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 801313c:	697b      	ldr	r3, [r7, #20]
 801313e:	b2da      	uxtb	r2, r3
 8013140:	4b13      	ldr	r3, [pc, #76]	; (8013190 <PrepareFrame+0x21c>)
 8013142:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 8013146:	e01b      	b.n	8013180 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8013148:	683b      	ldr	r3, [r7, #0]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d01a      	beq.n	8013184 <PrepareFrame+0x210>
 801314e:	4b10      	ldr	r3, [pc, #64]	; (8013190 <PrepareFrame+0x21c>)
 8013150:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013154:	2b00      	cmp	r3, #0
 8013156:	d015      	beq.n	8013184 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8013158:	4813      	ldr	r0, [pc, #76]	; (80131a8 <PrepareFrame+0x234>)
 801315a:	4b0d      	ldr	r3, [pc, #52]	; (8013190 <PrepareFrame+0x21c>)
 801315c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013160:	b29b      	uxth	r3, r3
 8013162:	461a      	mov	r2, r3
 8013164:	6839      	ldr	r1, [r7, #0]
 8013166:	f006 fb88 	bl	801987a <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 801316a:	4b09      	ldr	r3, [pc, #36]	; (8013190 <PrepareFrame+0x21c>)
 801316c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013170:	b29b      	uxth	r3, r3
 8013172:	3301      	adds	r3, #1
 8013174:	b29a      	uxth	r2, r3
 8013176:	4b06      	ldr	r3, [pc, #24]	; (8013190 <PrepareFrame+0x21c>)
 8013178:	801a      	strh	r2, [r3, #0]
            }
            break;
 801317a:	e003      	b.n	8013184 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801317c:	2302      	movs	r3, #2
 801317e:	e003      	b.n	8013188 <PrepareFrame+0x214>
            break;
 8013180:	bf00      	nop
 8013182:	e000      	b.n	8013186 <PrepareFrame+0x212>
            break;
 8013184:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8013186:	2300      	movs	r3, #0
}
 8013188:	4618      	mov	r0, r3
 801318a:	3720      	adds	r7, #32
 801318c:	46bd      	mov	sp, r7
 801318e:	bd80      	pop	{r7, pc}
 8013190:	20000850 	.word	0x20000850
 8013194:	20000988 	.word	0x20000988
 8013198:	20000852 	.word	0x20000852
 801319c:	20000d6c 	.word	0x20000d6c
 80131a0:	20000968 	.word	0x20000968
 80131a4:	20000cec 	.word	0x20000cec
 80131a8:	20000853 	.word	0x20000853

080131ac <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80131ac:	b580      	push	{r7, lr}
 80131ae:	b08a      	sub	sp, #40	; 0x28
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	4603      	mov	r3, r0
 80131b4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80131b6:	2303      	movs	r3, #3
 80131b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80131bc:	2300      	movs	r3, #0
 80131be:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80131c0:	79fb      	ldrb	r3, [r7, #7]
 80131c2:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80131c4:	4b4b      	ldr	r3, [pc, #300]	; (80132f4 <SendFrameOnChannel+0x148>)
 80131c6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80131ca:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80131cc:	4b49      	ldr	r3, [pc, #292]	; (80132f4 <SendFrameOnChannel+0x148>)
 80131ce:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80131d2:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80131d4:	4b47      	ldr	r3, [pc, #284]	; (80132f4 <SendFrameOnChannel+0x148>)
 80131d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80131da:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80131dc:	4b45      	ldr	r3, [pc, #276]	; (80132f4 <SendFrameOnChannel+0x148>)
 80131de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80131e2:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80131e4:	4b44      	ldr	r3, [pc, #272]	; (80132f8 <SendFrameOnChannel+0x14c>)
 80131e6:	881b      	ldrh	r3, [r3, #0]
 80131e8:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80131ea:	4b42      	ldr	r3, [pc, #264]	; (80132f4 <SendFrameOnChannel+0x148>)
 80131ec:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80131f0:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80131f2:	4b40      	ldr	r3, [pc, #256]	; (80132f4 <SendFrameOnChannel+0x148>)
 80131f4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80131f8:	f107 020f 	add.w	r2, r7, #15
 80131fc:	f107 0110 	add.w	r1, r7, #16
 8013200:	4b3e      	ldr	r3, [pc, #248]	; (80132fc <SendFrameOnChannel+0x150>)
 8013202:	f004 f828 	bl	8017256 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013206:	4b3c      	ldr	r3, [pc, #240]	; (80132f8 <SendFrameOnChannel+0x14c>)
 8013208:	2201      	movs	r2, #1
 801320a:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801320e:	4b39      	ldr	r3, [pc, #228]	; (80132f4 <SendFrameOnChannel+0x148>)
 8013210:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013214:	b2da      	uxtb	r2, r3
 8013216:	4b38      	ldr	r3, [pc, #224]	; (80132f8 <SendFrameOnChannel+0x14c>)
 8013218:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 801321c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8013220:	4b35      	ldr	r3, [pc, #212]	; (80132f8 <SendFrameOnChannel+0x14c>)
 8013222:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
    MacCtx.McpsConfirm.Channel = channel;
 8013226:	79fb      	ldrb	r3, [r7, #7]
 8013228:	4a33      	ldr	r2, [pc, #204]	; (80132f8 <SendFrameOnChannel+0x14c>)
 801322a:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801322e:	4b32      	ldr	r3, [pc, #200]	; (80132f8 <SendFrameOnChannel+0x14c>)
 8013230:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8013234:	4a30      	ldr	r2, [pc, #192]	; (80132f8 <SendFrameOnChannel+0x14c>)
 8013236:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801323a:	4b2f      	ldr	r3, [pc, #188]	; (80132f8 <SendFrameOnChannel+0x14c>)
 801323c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8013240:	4a2d      	ldr	r2, [pc, #180]	; (80132f8 <SendFrameOnChannel+0x14c>)
 8013242:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8013246:	f001 fff6 	bl	8015236 <LoRaMacClassBIsBeaconModeActive>
 801324a:	4603      	mov	r3, r0
 801324c:	2b00      	cmp	r3, #0
 801324e:	d00b      	beq.n	8013268 <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8013250:	4b29      	ldr	r3, [pc, #164]	; (80132f8 <SendFrameOnChannel+0x14c>)
 8013252:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8013256:	4618      	mov	r0, r3
 8013258:	f002 f858 	bl	801530c <LoRaMacClassBIsUplinkCollision>
 801325c:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 801325e:	6a3b      	ldr	r3, [r7, #32]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d001      	beq.n	8013268 <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8013264:	2310      	movs	r3, #16
 8013266:	e040      	b.n	80132ea <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8013268:	4b22      	ldr	r3, [pc, #136]	; (80132f4 <SendFrameOnChannel+0x148>)
 801326a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801326e:	2b01      	cmp	r3, #1
 8013270:	d101      	bne.n	8013276 <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8013272:	f002 f855 	bl	8015320 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8013276:	f001 ffef 	bl	8015258 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 801327a:	4b1e      	ldr	r3, [pc, #120]	; (80132f4 <SendFrameOnChannel+0x148>)
 801327c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013280:	b2db      	uxtb	r3, r3
 8013282:	4a1d      	ldr	r2, [pc, #116]	; (80132f8 <SendFrameOnChannel+0x14c>)
 8013284:	f892 241b 	ldrb.w	r2, [r2, #1051]	; 0x41b
 8013288:	4611      	mov	r1, r2
 801328a:	4618      	mov	r0, r3
 801328c:	f7ff fc2a 	bl	8012ae4 <SecureFrame>
 8013290:	4603      	mov	r3, r0
 8013292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8013296:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801329a:	2b00      	cmp	r3, #0
 801329c:	d002      	beq.n	80132a4 <SendFrameOnChannel+0xf8>
    {
        return status;
 801329e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132a2:	e022      	b.n	80132ea <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80132a4:	4b14      	ldr	r3, [pc, #80]	; (80132f8 <SendFrameOnChannel+0x14c>)
 80132a6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80132aa:	f043 0302 	orr.w	r3, r3, #2
 80132ae:	4a12      	ldr	r2, [pc, #72]	; (80132f8 <SendFrameOnChannel+0x14c>)
 80132b0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 80132b4:	4b10      	ldr	r3, [pc, #64]	; (80132f8 <SendFrameOnChannel+0x14c>)
 80132b6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80132ba:	3301      	adds	r3, #1
 80132bc:	b2da      	uxtb	r2, r3
 80132be:	4b0e      	ldr	r3, [pc, #56]	; (80132f8 <SendFrameOnChannel+0x14c>)
 80132c0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80132c4:	4b0c      	ldr	r3, [pc, #48]	; (80132f8 <SendFrameOnChannel+0x14c>)
 80132c6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80132ca:	4b0b      	ldr	r3, [pc, #44]	; (80132f8 <SendFrameOnChannel+0x14c>)
 80132cc:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 80132d0:	4b09      	ldr	r3, [pc, #36]	; (80132f8 <SendFrameOnChannel+0x14c>)
 80132d2:	2200      	movs	r2, #0
 80132d4:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80132d8:	4b09      	ldr	r3, [pc, #36]	; (8013300 <SendFrameOnChannel+0x154>)
 80132da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132dc:	4a06      	ldr	r2, [pc, #24]	; (80132f8 <SendFrameOnChannel+0x14c>)
 80132de:	8812      	ldrh	r2, [r2, #0]
 80132e0:	b2d2      	uxtb	r2, r2
 80132e2:	4611      	mov	r1, r2
 80132e4:	4807      	ldr	r0, [pc, #28]	; (8013304 <SendFrameOnChannel+0x158>)
 80132e6:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80132e8:	2300      	movs	r3, #0
}
 80132ea:	4618      	mov	r0, r3
 80132ec:	3728      	adds	r7, #40	; 0x28
 80132ee:	46bd      	mov	sp, r7
 80132f0:	bd80      	pop	{r7, pc}
 80132f2:	bf00      	nop
 80132f4:	20000d6c 	.word	0x20000d6c
 80132f8:	20000850 	.word	0x20000850
 80132fc:	20000c6c 	.word	0x20000c6c
 8013300:	0801f4f4 	.word	0x0801f4f4
 8013304:	20000852 	.word	0x20000852

08013308 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b082      	sub	sp, #8
 801330c:	af00      	add	r7, sp, #0
 801330e:	4603      	mov	r3, r0
 8013310:	6039      	str	r1, [r7, #0]
 8013312:	80fb      	strh	r3, [r7, #6]
 8013314:	4613      	mov	r3, r2
 8013316:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8013318:	4b09      	ldr	r3, [pc, #36]	; (8013340 <SetTxContinuousWave+0x38>)
 801331a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801331c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013320:	88fa      	ldrh	r2, [r7, #6]
 8013322:	6838      	ldr	r0, [r7, #0]
 8013324:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013326:	4b07      	ldr	r3, [pc, #28]	; (8013344 <SetTxContinuousWave+0x3c>)
 8013328:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801332c:	f043 0302 	orr.w	r3, r3, #2
 8013330:	4a04      	ldr	r2, [pc, #16]	; (8013344 <SetTxContinuousWave+0x3c>)
 8013332:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013336:	2300      	movs	r3, #0
}
 8013338:	4618      	mov	r0, r3
 801333a:	3708      	adds	r7, #8
 801333c:	46bd      	mov	sp, r7
 801333e:	bd80      	pop	{r7, pc}
 8013340:	0801f4f4 	.word	0x0801f4f4
 8013344:	20000850 	.word	0x20000850

08013348 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8013348:	b580      	push	{r7, lr}
 801334a:	b082      	sub	sp, #8
 801334c:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 801334e:	2300      	movs	r3, #0
 8013350:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8013352:	4b49      	ldr	r3, [pc, #292]	; (8013478 <RestoreNvmData+0x130>)
 8013354:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013358:	2b01      	cmp	r3, #1
 801335a:	d001      	beq.n	8013360 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 801335c:	2301      	movs	r3, #1
 801335e:	e087      	b.n	8013470 <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8013360:	2124      	movs	r1, #36	; 0x24
 8013362:	4846      	ldr	r0, [pc, #280]	; (801347c <RestoreNvmData+0x134>)
 8013364:	f006 fade 	bl	8019924 <Crc32>
 8013368:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 801336a:	4b44      	ldr	r3, [pc, #272]	; (801347c <RestoreNvmData+0x134>)
 801336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801336e:	687a      	ldr	r2, [r7, #4]
 8013370:	429a      	cmp	r2, r3
 8013372:	d001      	beq.n	8013378 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013374:	2317      	movs	r3, #23
 8013376:	e07b      	b.n	8013470 <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8013378:	211c      	movs	r1, #28
 801337a:	4841      	ldr	r0, [pc, #260]	; (8013480 <RestoreNvmData+0x138>)
 801337c:	f006 fad2 	bl	8019924 <Crc32>
 8013380:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8013382:	4b3e      	ldr	r3, [pc, #248]	; (801347c <RestoreNvmData+0x134>)
 8013384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013386:	687a      	ldr	r2, [r7, #4]
 8013388:	429a      	cmp	r2, r3
 801338a:	d001      	beq.n	8013390 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801338c:	2317      	movs	r3, #23
 801338e:	e06f      	b.n	8013470 <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8013390:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013394:	483b      	ldr	r0, [pc, #236]	; (8013484 <RestoreNvmData+0x13c>)
 8013396:	f006 fac5 	bl	8019924 <Crc32>
 801339a:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 801339c:	4b37      	ldr	r3, [pc, #220]	; (801347c <RestoreNvmData+0x134>)
 801339e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80133a2:	687a      	ldr	r2, [r7, #4]
 80133a4:	429a      	cmp	r2, r3
 80133a6:	d001      	beq.n	80133ac <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80133a8:	2317      	movs	r3, #23
 80133aa:	e061      	b.n	8013470 <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 80133ac:	21d4      	movs	r1, #212	; 0xd4
 80133ae:	4836      	ldr	r0, [pc, #216]	; (8013488 <RestoreNvmData+0x140>)
 80133b0:	f006 fab8 	bl	8019924 <Crc32>
 80133b4:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 80133b6:	4b31      	ldr	r3, [pc, #196]	; (801347c <RestoreNvmData+0x134>)
 80133b8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80133bc:	687a      	ldr	r2, [r7, #4]
 80133be:	429a      	cmp	r2, r3
 80133c0:	d001      	beq.n	80133c6 <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80133c2:	2317      	movs	r3, #23
 80133c4:	e054      	b.n	8013470 <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 80133c6:	2110      	movs	r1, #16
 80133c8:	4830      	ldr	r0, [pc, #192]	; (801348c <RestoreNvmData+0x144>)
 80133ca:	f006 faab 	bl	8019924 <Crc32>
 80133ce:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 80133d0:	4b2a      	ldr	r3, [pc, #168]	; (801347c <RestoreNvmData+0x134>)
 80133d2:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 80133d6:	687a      	ldr	r2, [r7, #4]
 80133d8:	429a      	cmp	r2, r3
 80133da:	d001      	beq.n	80133e0 <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80133dc:	2317      	movs	r3, #23
 80133de:	e047      	b.n	8013470 <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 80133e0:	f44f 715e 	mov.w	r1, #888	; 0x378
 80133e4:	482a      	ldr	r0, [pc, #168]	; (8013490 <RestoreNvmData+0x148>)
 80133e6:	f006 fa9d 	bl	8019924 <Crc32>
 80133ea:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 80133ec:	4b23      	ldr	r3, [pc, #140]	; (801347c <RestoreNvmData+0x134>)
 80133ee:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 80133f2:	687a      	ldr	r2, [r7, #4]
 80133f4:	429a      	cmp	r2, r3
 80133f6:	d001      	beq.n	80133fc <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80133f8:	2317      	movs	r3, #23
 80133fa:	e039      	b.n	8013470 <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 80133fc:	2114      	movs	r1, #20
 80133fe:	4825      	ldr	r0, [pc, #148]	; (8013494 <RestoreNvmData+0x14c>)
 8013400:	f006 fa90 	bl	8019924 <Crc32>
 8013404:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8013406:	4b1d      	ldr	r3, [pc, #116]	; (801347c <RestoreNvmData+0x134>)
 8013408:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 801340c:	687a      	ldr	r2, [r7, #4]
 801340e:	429a      	cmp	r2, r3
 8013410:	d001      	beq.n	8013416 <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013412:	2317      	movs	r3, #23
 8013414:	e02c      	b.n	8013470 <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8013416:	f240 52cc 	movw	r2, #1484	; 0x5cc
 801341a:	4918      	ldr	r1, [pc, #96]	; (801347c <RestoreNvmData+0x134>)
 801341c:	481e      	ldr	r0, [pc, #120]	; (8013498 <RestoreNvmData+0x150>)
 801341e:	f006 fa2c 	bl	801987a <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8013422:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8013426:	2100      	movs	r1, #0
 8013428:	4814      	ldr	r0, [pc, #80]	; (801347c <RestoreNvmData+0x134>)
 801342a:	f006 fa61 	bl	80198f0 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 801342e:	4b12      	ldr	r3, [pc, #72]	; (8013478 <RestoreNvmData+0x130>)
 8013430:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8013434:	4b10      	ldr	r3, [pc, #64]	; (8013478 <RestoreNvmData+0x130>)
 8013436:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 801343a:	4b17      	ldr	r3, [pc, #92]	; (8013498 <RestoreNvmData+0x150>)
 801343c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801343e:	4a0e      	ldr	r2, [pc, #56]	; (8013478 <RestoreNvmData+0x130>)
 8013440:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013444:	4b14      	ldr	r3, [pc, #80]	; (8013498 <RestoreNvmData+0x150>)
 8013446:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 801344a:	4b0b      	ldr	r3, [pc, #44]	; (8013478 <RestoreNvmData+0x130>)
 801344c:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013450:	4b09      	ldr	r3, [pc, #36]	; (8013478 <RestoreNvmData+0x130>)
 8013452:	2201      	movs	r2, #1
 8013454:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013458:	4b07      	ldr	r3, [pc, #28]	; (8013478 <RestoreNvmData+0x130>)
 801345a:	2202      	movs	r2, #2
 801345c:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8013460:	4b0e      	ldr	r3, [pc, #56]	; (801349c <RestoreNvmData+0x154>)
 8013462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013464:	4a0c      	ldr	r2, [pc, #48]	; (8013498 <RestoreNvmData+0x150>)
 8013466:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 801346a:	4610      	mov	r0, r2
 801346c:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 801346e:	2300      	movs	r3, #0
}
 8013470:	4618      	mov	r0, r3
 8013472:	3708      	adds	r7, #8
 8013474:	46bd      	mov	sp, r7
 8013476:	bd80      	pop	{r7, pc}
 8013478:	20000850 	.word	0x20000850
 801347c:	20001338 	.word	0x20001338
 8013480:	20001360 	.word	0x20001360
 8013484:	20001380 	.word	0x20001380
 8013488:	20001484 	.word	0x20001484
 801348c:	2000155c 	.word	0x2000155c
 8013490:	20001570 	.word	0x20001570
 8013494:	200018ec 	.word	0x200018ec
 8013498:	20000d6c 	.word	0x20000d6c
 801349c:	0801f4f4 	.word	0x0801f4f4

080134a0 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80134a0:	b480      	push	{r7}
 80134a2:	b083      	sub	sp, #12
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
 80134a8:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d002      	beq.n	80134b6 <DetermineFrameType+0x16>
 80134b0:	683b      	ldr	r3, [r7, #0]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d101      	bne.n	80134ba <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80134b6:	2303      	movs	r3, #3
 80134b8:	e03b      	b.n	8013532 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	7b1b      	ldrb	r3, [r3, #12]
 80134be:	f003 030f 	and.w	r3, r3, #15
 80134c2:	b2db      	uxtb	r3, r3
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d008      	beq.n	80134da <DetermineFrameType+0x3a>
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d003      	beq.n	80134da <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80134d2:	683b      	ldr	r3, [r7, #0]
 80134d4:	2200      	movs	r2, #0
 80134d6:	701a      	strb	r2, [r3, #0]
 80134d8:	e02a      	b.n	8013530 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d103      	bne.n	80134ec <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80134e4:	683b      	ldr	r3, [r7, #0]
 80134e6:	2201      	movs	r2, #1
 80134e8:	701a      	strb	r2, [r3, #0]
 80134ea:	e021      	b.n	8013530 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	7b1b      	ldrb	r3, [r3, #12]
 80134f0:	f003 030f 	and.w	r3, r3, #15
 80134f4:	b2db      	uxtb	r3, r3
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d108      	bne.n	801350c <DetermineFrameType+0x6c>
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013500:	2b00      	cmp	r3, #0
 8013502:	d103      	bne.n	801350c <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8013504:	683b      	ldr	r3, [r7, #0]
 8013506:	2202      	movs	r2, #2
 8013508:	701a      	strb	r2, [r3, #0]
 801350a:	e011      	b.n	8013530 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	7b1b      	ldrb	r3, [r3, #12]
 8013510:	f003 030f 	and.w	r3, r3, #15
 8013514:	b2db      	uxtb	r3, r3
 8013516:	2b00      	cmp	r3, #0
 8013518:	d108      	bne.n	801352c <DetermineFrameType+0x8c>
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d003      	beq.n	801352c <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8013524:	683b      	ldr	r3, [r7, #0]
 8013526:	2203      	movs	r2, #3
 8013528:	701a      	strb	r2, [r3, #0]
 801352a:	e001      	b.n	8013530 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 801352c:	2318      	movs	r3, #24
 801352e:	e000      	b.n	8013532 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8013530:	2300      	movs	r3, #0
}
 8013532:	4618      	mov	r0, r3
 8013534:	370c      	adds	r7, #12
 8013536:	46bd      	mov	sp, r7
 8013538:	bc80      	pop	{r7}
 801353a:	4770      	bx	lr

0801353c <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 801353c:	b480      	push	{r7}
 801353e:	b083      	sub	sp, #12
 8013540:	af00      	add	r7, sp, #0
 8013542:	4603      	mov	r3, r0
 8013544:	460a      	mov	r2, r1
 8013546:	71fb      	strb	r3, [r7, #7]
 8013548:	4613      	mov	r3, r2
 801354a:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 801354c:	79fa      	ldrb	r2, [r7, #7]
 801354e:	79bb      	ldrb	r3, [r7, #6]
 8013550:	429a      	cmp	r2, r3
 8013552:	d301      	bcc.n	8013558 <CheckRetrans+0x1c>
    {
        return true;
 8013554:	2301      	movs	r3, #1
 8013556:	e000      	b.n	801355a <CheckRetrans+0x1e>
    }
    return false;
 8013558:	2300      	movs	r3, #0
}
 801355a:	4618      	mov	r0, r3
 801355c:	370c      	adds	r7, #12
 801355e:	46bd      	mov	sp, r7
 8013560:	bc80      	pop	{r7}
 8013562:	4770      	bx	lr

08013564 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8013564:	b580      	push	{r7, lr}
 8013566:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8013568:	4b12      	ldr	r3, [pc, #72]	; (80135b4 <CheckRetransUnconfirmedUplink+0x50>)
 801356a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801356e:	4a12      	ldr	r2, [pc, #72]	; (80135b8 <CheckRetransUnconfirmedUplink+0x54>)
 8013570:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 8013574:	4611      	mov	r1, r2
 8013576:	4618      	mov	r0, r3
 8013578:	f7ff ffe0 	bl	801353c <CheckRetrans>
 801357c:	4603      	mov	r3, r0
 801357e:	2b00      	cmp	r3, #0
 8013580:	d001      	beq.n	8013586 <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8013582:	2301      	movs	r3, #1
 8013584:	e014      	b.n	80135b0 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013586:	4b0b      	ldr	r3, [pc, #44]	; (80135b4 <CheckRetransUnconfirmedUplink+0x50>)
 8013588:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801358c:	f003 0302 	and.w	r3, r3, #2
 8013590:	b2db      	uxtb	r3, r3
 8013592:	2b00      	cmp	r3, #0
 8013594:	d00b      	beq.n	80135ae <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8013596:	4b07      	ldr	r3, [pc, #28]	; (80135b4 <CheckRetransUnconfirmedUplink+0x50>)
 8013598:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 801359c:	2b00      	cmp	r3, #0
 801359e:	d004      	beq.n	80135aa <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 80135a0:	4b04      	ldr	r3, [pc, #16]	; (80135b4 <CheckRetransUnconfirmedUplink+0x50>)
 80135a2:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80135a6:	2b01      	cmp	r3, #1
 80135a8:	d101      	bne.n	80135ae <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 80135aa:	2301      	movs	r3, #1
 80135ac:	e000      	b.n	80135b0 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 80135ae:	2300      	movs	r3, #0
}
 80135b0:	4618      	mov	r0, r3
 80135b2:	bd80      	pop	{r7, pc}
 80135b4:	20000850 	.word	0x20000850
 80135b8:	20000d6c 	.word	0x20000d6c

080135bc <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 80135c0:	4b10      	ldr	r3, [pc, #64]	; (8013604 <CheckRetransConfirmedUplink+0x48>)
 80135c2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80135c6:	4a10      	ldr	r2, [pc, #64]	; (8013608 <CheckRetransConfirmedUplink+0x4c>)
 80135c8:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 80135cc:	4611      	mov	r1, r2
 80135ce:	4618      	mov	r0, r3
 80135d0:	f7ff ffb4 	bl	801353c <CheckRetrans>
 80135d4:	4603      	mov	r3, r0
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d001      	beq.n	80135de <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 80135da:	2301      	movs	r3, #1
 80135dc:	e00f      	b.n	80135fe <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80135de:	4b09      	ldr	r3, [pc, #36]	; (8013604 <CheckRetransConfirmedUplink+0x48>)
 80135e0:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80135e4:	f003 0302 	and.w	r3, r3, #2
 80135e8:	b2db      	uxtb	r3, r3
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d006      	beq.n	80135fc <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80135ee:	4b05      	ldr	r3, [pc, #20]	; (8013604 <CheckRetransConfirmedUplink+0x48>)
 80135f0:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d001      	beq.n	80135fc <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 80135f8:	2301      	movs	r3, #1
 80135fa:	e000      	b.n	80135fe <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 80135fc:	2300      	movs	r3, #0
}
 80135fe:	4618      	mov	r0, r3
 8013600:	bd80      	pop	{r7, pc}
 8013602:	bf00      	nop
 8013604:	20000850 	.word	0x20000850
 8013608:	20000d6c 	.word	0x20000d6c

0801360c <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 801360c:	b480      	push	{r7}
 801360e:	b083      	sub	sp, #12
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801361a:	d002      	beq.n	8013622 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	3301      	adds	r3, #1
 8013620:	607b      	str	r3, [r7, #4]
    }
    return counter;
 8013622:	687b      	ldr	r3, [r7, #4]
}
 8013624:	4618      	mov	r0, r3
 8013626:	370c      	adds	r7, #12
 8013628:	46bd      	mov	sp, r7
 801362a:	bc80      	pop	{r7}
 801362c:	4770      	bx	lr
	...

08013630 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8013630:	b580      	push	{r7, lr}
 8013632:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8013634:	4b1a      	ldr	r3, [pc, #104]	; (80136a0 <StopRetransmission+0x70>)
 8013636:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801363a:	f003 0302 	and.w	r3, r3, #2
 801363e:	b2db      	uxtb	r3, r3
 8013640:	2b00      	cmp	r3, #0
 8013642:	d009      	beq.n	8013658 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013644:	4b16      	ldr	r3, [pc, #88]	; (80136a0 <StopRetransmission+0x70>)
 8013646:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801364a:	2b00      	cmp	r3, #0
 801364c:	d011      	beq.n	8013672 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 801364e:	4b14      	ldr	r3, [pc, #80]	; (80136a0 <StopRetransmission+0x70>)
 8013650:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013654:	2b01      	cmp	r3, #1
 8013656:	d00c      	beq.n	8013672 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8013658:	4b12      	ldr	r3, [pc, #72]	; (80136a4 <StopRetransmission+0x74>)
 801365a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801365e:	2b00      	cmp	r3, #0
 8013660:	d007      	beq.n	8013672 <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8013662:	4b10      	ldr	r3, [pc, #64]	; (80136a4 <StopRetransmission+0x74>)
 8013664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013666:	4618      	mov	r0, r3
 8013668:	f7ff ffd0 	bl	801360c <IncreaseAdrAckCounter>
 801366c:	4603      	mov	r3, r0
 801366e:	4a0d      	ldr	r2, [pc, #52]	; (80136a4 <StopRetransmission+0x74>)
 8013670:	6293      	str	r3, [r2, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8013672:	4b0b      	ldr	r3, [pc, #44]	; (80136a0 <StopRetransmission+0x70>)
 8013674:	2200      	movs	r2, #0
 8013676:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 801367a:	4b09      	ldr	r3, [pc, #36]	; (80136a0 <StopRetransmission+0x70>)
 801367c:	2200      	movs	r2, #0
 801367e:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8013682:	4b07      	ldr	r3, [pc, #28]	; (80136a0 <StopRetransmission+0x70>)
 8013684:	2200      	movs	r2, #0
 8013686:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801368a:	4b05      	ldr	r3, [pc, #20]	; (80136a0 <StopRetransmission+0x70>)
 801368c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013690:	f023 0302 	bic.w	r3, r3, #2
 8013694:	4a02      	ldr	r2, [pc, #8]	; (80136a0 <StopRetransmission+0x70>)
 8013696:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 801369a:	2301      	movs	r3, #1
}
 801369c:	4618      	mov	r0, r3
 801369e:	bd80      	pop	{r7, pc}
 80136a0:	20000850 	.word	0x20000850
 80136a4:	20000d6c 	.word	0x20000d6c

080136a8 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80136ac:	4b08      	ldr	r3, [pc, #32]	; (80136d0 <OnMacProcessNotify+0x28>)
 80136ae:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d00a      	beq.n	80136cc <OnMacProcessNotify+0x24>
 80136b6:	4b06      	ldr	r3, [pc, #24]	; (80136d0 <OnMacProcessNotify+0x28>)
 80136b8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80136bc:	695b      	ldr	r3, [r3, #20]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d004      	beq.n	80136cc <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80136c2:	4b03      	ldr	r3, [pc, #12]	; (80136d0 <OnMacProcessNotify+0x28>)
 80136c4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80136c8:	695b      	ldr	r3, [r3, #20]
 80136ca:	4798      	blx	r3
    }
}
 80136cc:	bf00      	nop
 80136ce:	bd80      	pop	{r7, pc}
 80136d0:	20000850 	.word	0x20000850

080136d4 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b082      	sub	sp, #8
 80136d8:	af00      	add	r7, sp, #0
 80136da:	4603      	mov	r3, r0
 80136dc:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80136de:	4b0b      	ldr	r3, [pc, #44]	; (801370c <CallNvmDataChangeCallback+0x38>)
 80136e0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d00c      	beq.n	8013702 <CallNvmDataChangeCallback+0x2e>
 80136e8:	4b08      	ldr	r3, [pc, #32]	; (801370c <CallNvmDataChangeCallback+0x38>)
 80136ea:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80136ee:	691b      	ldr	r3, [r3, #16]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d006      	beq.n	8013702 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80136f4:	4b05      	ldr	r3, [pc, #20]	; (801370c <CallNvmDataChangeCallback+0x38>)
 80136f6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80136fa:	691b      	ldr	r3, [r3, #16]
 80136fc:	88fa      	ldrh	r2, [r7, #6]
 80136fe:	4610      	mov	r0, r2
 8013700:	4798      	blx	r3
    }
}
 8013702:	bf00      	nop
 8013704:	3708      	adds	r7, #8
 8013706:	46bd      	mov	sp, r7
 8013708:	bd80      	pop	{r7, pc}
 801370a:	bf00      	nop
 801370c:	20000850 	.word	0x20000850

08013710 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8013710:	b480      	push	{r7}
 8013712:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8013714:	4b0b      	ldr	r3, [pc, #44]	; (8013744 <IsRequestPending+0x34>)
 8013716:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801371a:	f003 0304 	and.w	r3, r3, #4
 801371e:	b2db      	uxtb	r3, r3
 8013720:	2b00      	cmp	r3, #0
 8013722:	d107      	bne.n	8013734 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8013724:	4b07      	ldr	r3, [pc, #28]	; (8013744 <IsRequestPending+0x34>)
 8013726:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801372a:	f003 0301 	and.w	r3, r3, #1
 801372e:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8013730:	2b00      	cmp	r3, #0
 8013732:	d001      	beq.n	8013738 <IsRequestPending+0x28>
    {
        return 1;
 8013734:	2301      	movs	r3, #1
 8013736:	e000      	b.n	801373a <IsRequestPending+0x2a>
    }
    return 0;
 8013738:	2300      	movs	r3, #0
}
 801373a:	4618      	mov	r0, r3
 801373c:	46bd      	mov	sp, r7
 801373e:	bc80      	pop	{r7}
 8013740:	4770      	bx	lr
 8013742:	bf00      	nop
 8013744:	20000850 	.word	0x20000850

08013748 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8013748:	b590      	push	{r4, r7, lr}
 801374a:	b091      	sub	sp, #68	; 0x44
 801374c:	af02      	add	r7, sp, #8
 801374e:	6178      	str	r0, [r7, #20]
 8013750:	6139      	str	r1, [r7, #16]
 8013752:	4613      	mov	r3, r2
 8013754:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8013756:	697b      	ldr	r3, [r7, #20]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d002      	beq.n	8013762 <LoRaMacInitialization+0x1a>
 801375c:	693b      	ldr	r3, [r7, #16]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d101      	bne.n	8013766 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013762:	2303      	movs	r3, #3
 8013764:	e27a      	b.n	8013c5c <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013766:	697b      	ldr	r3, [r7, #20]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d00b      	beq.n	8013786 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 801376e:	697b      	ldr	r3, [r7, #20]
 8013770:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013772:	2b00      	cmp	r3, #0
 8013774:	d007      	beq.n	8013786 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013776:	697b      	ldr	r3, [r7, #20]
 8013778:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 801377a:	2b00      	cmp	r3, #0
 801377c:	d003      	beq.n	8013786 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 801377e:	697b      	ldr	r3, [r7, #20]
 8013780:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013782:	2b00      	cmp	r3, #0
 8013784:	d101      	bne.n	801378a <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013786:	2303      	movs	r3, #3
 8013788:	e268      	b.n	8013c5c <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 801378a:	7bfb      	ldrb	r3, [r7, #15]
 801378c:	4618      	mov	r0, r3
 801378e:	f003 fcac 	bl	80170ea <RegionIsActive>
 8013792:	4603      	mov	r3, r0
 8013794:	f083 0301 	eor.w	r3, r3, #1
 8013798:	b2db      	uxtb	r3, r3
 801379a:	2b00      	cmp	r3, #0
 801379c:	d001      	beq.n	80137a2 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801379e:	2309      	movs	r3, #9
 80137a0:	e25c      	b.n	8013c5c <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 80137a2:	6978      	ldr	r0, [r7, #20]
 80137a4:	f002 f932 	bl	8015a0c <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80137a8:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80137ac:	2100      	movs	r1, #0
 80137ae:	48c7      	ldr	r0, [pc, #796]	; (8013acc <LoRaMacInitialization+0x384>)
 80137b0:	f006 f89e 	bl	80198f0 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 80137b4:	f240 521c 	movw	r2, #1308	; 0x51c
 80137b8:	2100      	movs	r1, #0
 80137ba:	48c5      	ldr	r0, [pc, #788]	; (8013ad0 <LoRaMacInitialization+0x388>)
 80137bc:	f006 f898 	bl	80198f0 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 80137c0:	4ac2      	ldr	r2, [pc, #776]	; (8013acc <LoRaMacInitialization+0x384>)
 80137c2:	7bfb      	ldrb	r3, [r7, #15]
 80137c4:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 80137c8:	4bc0      	ldr	r3, [pc, #768]	; (8013acc <LoRaMacInitialization+0x384>)
 80137ca:	2200      	movs	r2, #0
 80137cc:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 80137d0:	4bbe      	ldr	r3, [pc, #760]	; (8013acc <LoRaMacInitialization+0x384>)
 80137d2:	2200      	movs	r2, #0
 80137d4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 80137d8:	4bbc      	ldr	r3, [pc, #752]	; (8013acc <LoRaMacInitialization+0x384>)
 80137da:	4abe      	ldr	r2, [pc, #760]	; (8013ad4 <LoRaMacInitialization+0x38c>)
 80137dc:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 80137e0:	2300      	movs	r3, #0
 80137e2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80137e6:	4bbc      	ldr	r3, [pc, #752]	; (8013ad8 <LoRaMacInitialization+0x390>)
 80137e8:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80137ea:	4bbc      	ldr	r3, [pc, #752]	; (8013adc <LoRaMacInitialization+0x394>)
 80137ec:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 80137ee:	4bbc      	ldr	r3, [pc, #752]	; (8013ae0 <LoRaMacInitialization+0x398>)
 80137f0:	627b      	str	r3, [r7, #36]	; 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80137f2:	4bb6      	ldr	r3, [pc, #728]	; (8013acc <LoRaMacInitialization+0x384>)
 80137f4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80137f8:	f107 021c 	add.w	r2, r7, #28
 80137fc:	4611      	mov	r1, r2
 80137fe:	4618      	mov	r0, r3
 8013800:	f003 fcac 	bl	801715c <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8013804:	230f      	movs	r3, #15
 8013806:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801380a:	4bb0      	ldr	r3, [pc, #704]	; (8013acc <LoRaMacInitialization+0x384>)
 801380c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013810:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013814:	4611      	mov	r1, r2
 8013816:	4618      	mov	r0, r3
 8013818:	f003 fc77 	bl	801710a <RegionGetPhyParam>
 801381c:	4603      	mov	r3, r0
 801381e:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8013820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013822:	2b00      	cmp	r3, #0
 8013824:	bf14      	ite	ne
 8013826:	2301      	movne	r3, #1
 8013828:	2300      	moveq	r3, #0
 801382a:	b2da      	uxtb	r2, r3
 801382c:	4ba7      	ldr	r3, [pc, #668]	; (8013acc <LoRaMacInitialization+0x384>)
 801382e:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8013832:	230a      	movs	r3, #10
 8013834:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013838:	4ba4      	ldr	r3, [pc, #656]	; (8013acc <LoRaMacInitialization+0x384>)
 801383a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801383e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013842:	4611      	mov	r1, r2
 8013844:	4618      	mov	r0, r3
 8013846:	f003 fc60 	bl	801710a <RegionGetPhyParam>
 801384a:	4603      	mov	r3, r0
 801384c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 801384e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013850:	b25a      	sxtb	r2, r3
 8013852:	4b9e      	ldr	r3, [pc, #632]	; (8013acc <LoRaMacInitialization+0x384>)
 8013854:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8013858:	2306      	movs	r3, #6
 801385a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801385e:	4b9b      	ldr	r3, [pc, #620]	; (8013acc <LoRaMacInitialization+0x384>)
 8013860:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013864:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013868:	4611      	mov	r1, r2
 801386a:	4618      	mov	r0, r3
 801386c:	f003 fc4d 	bl	801710a <RegionGetPhyParam>
 8013870:	4603      	mov	r3, r0
 8013872:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8013874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013876:	b25a      	sxtb	r2, r3
 8013878:	4b94      	ldr	r3, [pc, #592]	; (8013acc <LoRaMacInitialization+0x384>)
 801387a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 801387e:	2310      	movs	r3, #16
 8013880:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013884:	4b91      	ldr	r3, [pc, #580]	; (8013acc <LoRaMacInitialization+0x384>)
 8013886:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801388a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801388e:	4611      	mov	r1, r2
 8013890:	4618      	mov	r0, r3
 8013892:	f003 fc3a 	bl	801710a <RegionGetPhyParam>
 8013896:	4603      	mov	r3, r0
 8013898:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 801389a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801389c:	4a8b      	ldr	r2, [pc, #556]	; (8013acc <LoRaMacInitialization+0x384>)
 801389e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80138a2:	2311      	movs	r3, #17
 80138a4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80138a8:	4b88      	ldr	r3, [pc, #544]	; (8013acc <LoRaMacInitialization+0x384>)
 80138aa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80138ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80138b2:	4611      	mov	r1, r2
 80138b4:	4618      	mov	r0, r3
 80138b6:	f003 fc28 	bl	801710a <RegionGetPhyParam>
 80138ba:	4603      	mov	r3, r0
 80138bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80138be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138c0:	4a82      	ldr	r2, [pc, #520]	; (8013acc <LoRaMacInitialization+0x384>)
 80138c2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80138c6:	2312      	movs	r3, #18
 80138c8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80138cc:	4b7f      	ldr	r3, [pc, #508]	; (8013acc <LoRaMacInitialization+0x384>)
 80138ce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80138d2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80138d6:	4611      	mov	r1, r2
 80138d8:	4618      	mov	r0, r3
 80138da:	f003 fc16 	bl	801710a <RegionGetPhyParam>
 80138de:	4603      	mov	r3, r0
 80138e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80138e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138e4:	4a79      	ldr	r2, [pc, #484]	; (8013acc <LoRaMacInitialization+0x384>)
 80138e6:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80138ea:	2313      	movs	r3, #19
 80138ec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80138f0:	4b76      	ldr	r3, [pc, #472]	; (8013acc <LoRaMacInitialization+0x384>)
 80138f2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80138f6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80138fa:	4611      	mov	r1, r2
 80138fc:	4618      	mov	r0, r3
 80138fe:	f003 fc04 	bl	801710a <RegionGetPhyParam>
 8013902:	4603      	mov	r3, r0
 8013904:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8013906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013908:	4a70      	ldr	r2, [pc, #448]	; (8013acc <LoRaMacInitialization+0x384>)
 801390a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 801390e:	2314      	movs	r3, #20
 8013910:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013914:	4b6d      	ldr	r3, [pc, #436]	; (8013acc <LoRaMacInitialization+0x384>)
 8013916:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801391a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801391e:	4611      	mov	r1, r2
 8013920:	4618      	mov	r0, r3
 8013922:	f003 fbf2 	bl	801710a <RegionGetPhyParam>
 8013926:	4603      	mov	r3, r0
 8013928:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 801392a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801392c:	4a67      	ldr	r2, [pc, #412]	; (8013acc <LoRaMacInitialization+0x384>)
 801392e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8013932:	2316      	movs	r3, #22
 8013934:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013938:	4b64      	ldr	r3, [pc, #400]	; (8013acc <LoRaMacInitialization+0x384>)
 801393a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801393e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013942:	4611      	mov	r1, r2
 8013944:	4618      	mov	r0, r3
 8013946:	f003 fbe0 	bl	801710a <RegionGetPhyParam>
 801394a:	4603      	mov	r3, r0
 801394c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 801394e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013950:	b2da      	uxtb	r2, r3
 8013952:	4b5e      	ldr	r3, [pc, #376]	; (8013acc <LoRaMacInitialization+0x384>)
 8013954:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8013958:	2317      	movs	r3, #23
 801395a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801395e:	4b5b      	ldr	r3, [pc, #364]	; (8013acc <LoRaMacInitialization+0x384>)
 8013960:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013964:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013968:	4611      	mov	r1, r2
 801396a:	4618      	mov	r0, r3
 801396c:	f003 fbcd 	bl	801710a <RegionGetPhyParam>
 8013970:	4603      	mov	r3, r0
 8013972:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8013974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013976:	4a55      	ldr	r2, [pc, #340]	; (8013acc <LoRaMacInitialization+0x384>)
 8013978:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 801397c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801397e:	4a53      	ldr	r2, [pc, #332]	; (8013acc <LoRaMacInitialization+0x384>)
 8013980:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8013984:	2318      	movs	r3, #24
 8013986:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801398a:	4b50      	ldr	r3, [pc, #320]	; (8013acc <LoRaMacInitialization+0x384>)
 801398c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013990:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013994:	4611      	mov	r1, r2
 8013996:	4618      	mov	r0, r3
 8013998:	f003 fbb7 	bl	801710a <RegionGetPhyParam>
 801399c:	4603      	mov	r3, r0
 801399e:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80139a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139a2:	b2da      	uxtb	r2, r3
 80139a4:	4b49      	ldr	r3, [pc, #292]	; (8013acc <LoRaMacInitialization+0x384>)
 80139a6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80139aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139ac:	b2da      	uxtb	r2, r3
 80139ae:	4b47      	ldr	r3, [pc, #284]	; (8013acc <LoRaMacInitialization+0x384>)
 80139b0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80139b4:	231d      	movs	r3, #29
 80139b6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80139ba:	4b44      	ldr	r3, [pc, #272]	; (8013acc <LoRaMacInitialization+0x384>)
 80139bc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80139c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80139c4:	4611      	mov	r1, r2
 80139c6:	4618      	mov	r0, r3
 80139c8:	f003 fb9f 	bl	801710a <RegionGetPhyParam>
 80139cc:	4603      	mov	r3, r0
 80139ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 80139d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139d2:	b2da      	uxtb	r2, r3
 80139d4:	4b3d      	ldr	r3, [pc, #244]	; (8013acc <LoRaMacInitialization+0x384>)
 80139d6:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80139da:	231e      	movs	r3, #30
 80139dc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80139e0:	4b3a      	ldr	r3, [pc, #232]	; (8013acc <LoRaMacInitialization+0x384>)
 80139e2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80139e6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80139ea:	4611      	mov	r1, r2
 80139ec:	4618      	mov	r0, r3
 80139ee:	f003 fb8c 	bl	801710a <RegionGetPhyParam>
 80139f2:	4603      	mov	r3, r0
 80139f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80139f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139f8:	b2da      	uxtb	r2, r3
 80139fa:	4b34      	ldr	r3, [pc, #208]	; (8013acc <LoRaMacInitialization+0x384>)
 80139fc:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8013a00:	231f      	movs	r3, #31
 8013a02:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013a06:	4b31      	ldr	r3, [pc, #196]	; (8013acc <LoRaMacInitialization+0x384>)
 8013a08:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013a0c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013a10:	4611      	mov	r1, r2
 8013a12:	4618      	mov	r0, r3
 8013a14:	f003 fb79 	bl	801710a <RegionGetPhyParam>
 8013a18:	4603      	mov	r3, r0
 8013a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8013a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a1e:	4a2b      	ldr	r2, [pc, #172]	; (8013acc <LoRaMacInitialization+0x384>)
 8013a20:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8013a24:	2320      	movs	r3, #32
 8013a26:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013a2a:	4b28      	ldr	r3, [pc, #160]	; (8013acc <LoRaMacInitialization+0x384>)
 8013a2c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013a30:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013a34:	4611      	mov	r1, r2
 8013a36:	4618      	mov	r0, r3
 8013a38:	f003 fb67 	bl	801710a <RegionGetPhyParam>
 8013a3c:	4603      	mov	r3, r0
 8013a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8013a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a42:	4a22      	ldr	r2, [pc, #136]	; (8013acc <LoRaMacInitialization+0x384>)
 8013a44:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8013a48:	230b      	movs	r3, #11
 8013a4a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013a4e:	4b1f      	ldr	r3, [pc, #124]	; (8013acc <LoRaMacInitialization+0x384>)
 8013a50:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013a54:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013a58:	4611      	mov	r1, r2
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	f003 fb55 	bl	801710a <RegionGetPhyParam>
 8013a60:	4603      	mov	r3, r0
 8013a62:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8013a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a66:	b29a      	uxth	r2, r3
 8013a68:	4b18      	ldr	r3, [pc, #96]	; (8013acc <LoRaMacInitialization+0x384>)
 8013a6a:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8013a6e:	230c      	movs	r3, #12
 8013a70:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013a74:	4b15      	ldr	r3, [pc, #84]	; (8013acc <LoRaMacInitialization+0x384>)
 8013a76:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013a7a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013a7e:	4611      	mov	r1, r2
 8013a80:	4618      	mov	r0, r3
 8013a82:	f003 fb42 	bl	801710a <RegionGetPhyParam>
 8013a86:	4603      	mov	r3, r0
 8013a88:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 8013a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a8c:	b29a      	uxth	r2, r3
 8013a8e:	4b0f      	ldr	r3, [pc, #60]	; (8013acc <LoRaMacInitialization+0x384>)
 8013a90:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8013a94:	4b0d      	ldr	r3, [pc, #52]	; (8013acc <LoRaMacInitialization+0x384>)
 8013a96:	2201      	movs	r2, #1
 8013a98:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8013a9c:	4b0b      	ldr	r3, [pc, #44]	; (8013acc <LoRaMacInitialization+0x384>)
 8013a9e:	220a      	movs	r2, #10
 8013aa0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8013aa4:	4b09      	ldr	r3, [pc, #36]	; (8013acc <LoRaMacInitialization+0x384>)
 8013aa6:	2206      	movs	r2, #6
 8013aa8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8013aac:	4b07      	ldr	r3, [pc, #28]	; (8013acc <LoRaMacInitialization+0x384>)
 8013aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013ab2:	4a06      	ldr	r2, [pc, #24]	; (8013acc <LoRaMacInitialization+0x384>)
 8013ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8013ab6:	4b05      	ldr	r3, [pc, #20]	; (8013acc <LoRaMacInitialization+0x384>)
 8013ab8:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8013abc:	4b03      	ldr	r3, [pc, #12]	; (8013acc <LoRaMacInitialization+0x384>)
 8013abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8013ac2:	4b02      	ldr	r3, [pc, #8]	; (8013acc <LoRaMacInitialization+0x384>)
 8013ac4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013ac8:	e00c      	b.n	8013ae4 <LoRaMacInitialization+0x39c>
 8013aca:	bf00      	nop
 8013acc:	20000d6c 	.word	0x20000d6c
 8013ad0:	20000850 	.word	0x20000850
 8013ad4:	01000400 	.word	0x01000400
 8013ad8:	20000f90 	.word	0x20000f90
 8013adc:	20000fa4 	.word	0x20000fa4
 8013ae0:	20001904 	.word	0x20001904
 8013ae4:	4a5f      	ldr	r2, [pc, #380]	; (8013c64 <LoRaMacInitialization+0x51c>)
 8013ae6:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8013ae8:	4b5e      	ldr	r3, [pc, #376]	; (8013c64 <LoRaMacInitialization+0x51c>)
 8013aea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013aee:	4a5d      	ldr	r2, [pc, #372]	; (8013c64 <LoRaMacInitialization+0x51c>)
 8013af0:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8013af2:	4b5c      	ldr	r3, [pc, #368]	; (8013c64 <LoRaMacInitialization+0x51c>)
 8013af4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013af8:	4a5a      	ldr	r2, [pc, #360]	; (8013c64 <LoRaMacInitialization+0x51c>)
 8013afa:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8013afc:	4b59      	ldr	r3, [pc, #356]	; (8013c64 <LoRaMacInitialization+0x51c>)
 8013afe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8013b02:	4a58      	ldr	r2, [pc, #352]	; (8013c64 <LoRaMacInitialization+0x51c>)
 8013b04:	6613      	str	r3, [r2, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8013b06:	4b57      	ldr	r3, [pc, #348]	; (8013c64 <LoRaMacInitialization+0x51c>)
 8013b08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013b0c:	4a55      	ldr	r2, [pc, #340]	; (8013c64 <LoRaMacInitialization+0x51c>)
 8013b0e:	6653      	str	r3, [r2, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8013b10:	4b54      	ldr	r3, [pc, #336]	; (8013c64 <LoRaMacInitialization+0x51c>)
 8013b12:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 8013b16:	4b53      	ldr	r3, [pc, #332]	; (8013c64 <LoRaMacInitialization+0x51c>)
 8013b18:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8013b1c:	4b51      	ldr	r3, [pc, #324]	; (8013c64 <LoRaMacInitialization+0x51c>)
 8013b1e:	2201      	movs	r2, #1
 8013b20:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8013b24:	4a50      	ldr	r2, [pc, #320]	; (8013c68 <LoRaMacInitialization+0x520>)
 8013b26:	693b      	ldr	r3, [r7, #16]
 8013b28:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( false );
 8013b2c:	2000      	movs	r0, #0
 8013b2e:	f7ff f869 	bl	8012c04 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8013b32:	4b4c      	ldr	r3, [pc, #304]	; (8013c64 <LoRaMacInitialization+0x51c>)
 8013b34:	2201      	movs	r2, #1
 8013b36:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 8013b3a:	4a4b      	ldr	r2, [pc, #300]	; (8013c68 <LoRaMacInitialization+0x520>)
 8013b3c:	697b      	ldr	r3, [r7, #20]
 8013b3e:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8013b42:	4b49      	ldr	r3, [pc, #292]	; (8013c68 <LoRaMacInitialization+0x520>)
 8013b44:	2200      	movs	r2, #0
 8013b46:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 8013b4a:	4b47      	ldr	r3, [pc, #284]	; (8013c68 <LoRaMacInitialization+0x520>)
 8013b4c:	2201      	movs	r2, #1
 8013b4e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8013b52:	4b44      	ldr	r3, [pc, #272]	; (8013c64 <LoRaMacInitialization+0x51c>)
 8013b54:	2200      	movs	r2, #0
 8013b56:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8013b58:	4b42      	ldr	r3, [pc, #264]	; (8013c64 <LoRaMacInitialization+0x51c>)
 8013b5a:	2200      	movs	r2, #0
 8013b5c:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8013b5e:	2300      	movs	r3, #0
 8013b60:	9300      	str	r3, [sp, #0]
 8013b62:	4b42      	ldr	r3, [pc, #264]	; (8013c6c <LoRaMacInitialization+0x524>)
 8013b64:	2200      	movs	r2, #0
 8013b66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013b6a:	4841      	ldr	r0, [pc, #260]	; (8013c70 <LoRaMacInitialization+0x528>)
 8013b6c:	f009 ff7c 	bl	801da68 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8013b70:	2300      	movs	r3, #0
 8013b72:	9300      	str	r3, [sp, #0]
 8013b74:	4b3f      	ldr	r3, [pc, #252]	; (8013c74 <LoRaMacInitialization+0x52c>)
 8013b76:	2200      	movs	r2, #0
 8013b78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013b7c:	483e      	ldr	r0, [pc, #248]	; (8013c78 <LoRaMacInitialization+0x530>)
 8013b7e:	f009 ff73 	bl	801da68 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8013b82:	2300      	movs	r3, #0
 8013b84:	9300      	str	r3, [sp, #0]
 8013b86:	4b3d      	ldr	r3, [pc, #244]	; (8013c7c <LoRaMacInitialization+0x534>)
 8013b88:	2200      	movs	r2, #0
 8013b8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013b8e:	483c      	ldr	r0, [pc, #240]	; (8013c80 <LoRaMacInitialization+0x538>)
 8013b90:	f009 ff6a 	bl	801da68 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8013b94:	2300      	movs	r3, #0
 8013b96:	9300      	str	r3, [sp, #0]
 8013b98:	4b3a      	ldr	r3, [pc, #232]	; (8013c84 <LoRaMacInitialization+0x53c>)
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013ba0:	4839      	ldr	r0, [pc, #228]	; (8013c88 <LoRaMacInitialization+0x540>)
 8013ba2:	f009 ff61 	bl	801da68 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8013ba6:	4c2f      	ldr	r4, [pc, #188]	; (8013c64 <LoRaMacInitialization+0x51c>)
 8013ba8:	463b      	mov	r3, r7
 8013baa:	4618      	mov	r0, r3
 8013bac:	f009 fad0 	bl	801d150 <SysTimeGetMcuTime>
 8013bb0:	f504 7392 	add.w	r3, r4, #292	; 0x124
 8013bb4:	463a      	mov	r2, r7
 8013bb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013bba:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8013bbe:	4b33      	ldr	r3, [pc, #204]	; (8013c8c <LoRaMacInitialization+0x544>)
 8013bc0:	2200      	movs	r2, #0
 8013bc2:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8013bc4:	4b28      	ldr	r3, [pc, #160]	; (8013c68 <LoRaMacInitialization+0x520>)
 8013bc6:	4a32      	ldr	r2, [pc, #200]	; (8013c90 <LoRaMacInitialization+0x548>)
 8013bc8:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8013bcc:	4b26      	ldr	r3, [pc, #152]	; (8013c68 <LoRaMacInitialization+0x520>)
 8013bce:	4a31      	ldr	r2, [pc, #196]	; (8013c94 <LoRaMacInitialization+0x54c>)
 8013bd0:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8013bd4:	4b24      	ldr	r3, [pc, #144]	; (8013c68 <LoRaMacInitialization+0x520>)
 8013bd6:	4a30      	ldr	r2, [pc, #192]	; (8013c98 <LoRaMacInitialization+0x550>)
 8013bd8:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8013bdc:	4b22      	ldr	r3, [pc, #136]	; (8013c68 <LoRaMacInitialization+0x520>)
 8013bde:	4a2f      	ldr	r2, [pc, #188]	; (8013c9c <LoRaMacInitialization+0x554>)
 8013be0:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8013be4:	4b20      	ldr	r3, [pc, #128]	; (8013c68 <LoRaMacInitialization+0x520>)
 8013be6:	4a2e      	ldr	r2, [pc, #184]	; (8013ca0 <LoRaMacInitialization+0x558>)
 8013be8:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8013bec:	4b2d      	ldr	r3, [pc, #180]	; (8013ca4 <LoRaMacInitialization+0x55c>)
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	482d      	ldr	r0, [pc, #180]	; (8013ca8 <LoRaMacInitialization+0x560>)
 8013bf2:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8013bf4:	482d      	ldr	r0, [pc, #180]	; (8013cac <LoRaMacInitialization+0x564>)
 8013bf6:	f7fa f9f9 	bl	800dfec <SecureElementInit>
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d001      	beq.n	8013c04 <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013c00:	2311      	movs	r3, #17
 8013c02:	e02b      	b.n	8013c5c <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8013c04:	4817      	ldr	r0, [pc, #92]	; (8013c64 <LoRaMacInitialization+0x51c>)
 8013c06:	f002 fbc1 	bl	801638c <LoRaMacCryptoInit>
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d001      	beq.n	8013c14 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013c10:	2311      	movs	r3, #17
 8013c12:	e023      	b.n	8013c5c <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8013c14:	f001 fcbc 	bl	8015590 <LoRaMacCommandsInit>
 8013c18:	4603      	mov	r3, r0
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d001      	beq.n	8013c22 <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013c1e:	2313      	movs	r3, #19
 8013c20:	e01c      	b.n	8013c5c <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8013c22:	4823      	ldr	r0, [pc, #140]	; (8013cb0 <LoRaMacInitialization+0x568>)
 8013c24:	f002 fc52 	bl	80164cc <LoRaMacCryptoSetMulticastReference>
 8013c28:	4603      	mov	r3, r0
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d001      	beq.n	8013c32 <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013c2e:	2311      	movs	r3, #17
 8013c30:	e014      	b.n	8013c5c <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8013c32:	4b1c      	ldr	r3, [pc, #112]	; (8013ca4 <LoRaMacInitialization+0x55c>)
 8013c34:	695b      	ldr	r3, [r3, #20]
 8013c36:	4798      	blx	r3
 8013c38:	4603      	mov	r3, r0
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f005 fdf8 	bl	8019830 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8013c40:	4b18      	ldr	r3, [pc, #96]	; (8013ca4 <LoRaMacInitialization+0x55c>)
 8013c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013c44:	4a07      	ldr	r2, [pc, #28]	; (8013c64 <LoRaMacInitialization+0x51c>)
 8013c46:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8013c4a:	4610      	mov	r0, r2
 8013c4c:	4798      	blx	r3
    Radio.Sleep( );
 8013c4e:	4b15      	ldr	r3, [pc, #84]	; (8013ca4 <LoRaMacInitialization+0x55c>)
 8013c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c52:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8013c54:	2001      	movs	r0, #1
 8013c56:	f7fd fa7d 	bl	8011154 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8013c5a:	2300      	movs	r3, #0
}
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	373c      	adds	r7, #60	; 0x3c
 8013c60:	46bd      	mov	sp, r7
 8013c62:	bd90      	pop	{r4, r7, pc}
 8013c64:	20000d6c 	.word	0x20000d6c
 8013c68:	20000850 	.word	0x20000850
 8013c6c:	080116e1 	.word	0x080116e1
 8013c70:	20000bb8 	.word	0x20000bb8
 8013c74:	08011771 	.word	0x08011771
 8013c78:	20000bd0 	.word	0x20000bd0
 8013c7c:	080117e9 	.word	0x080117e9
 8013c80:	20000be8 	.word	0x20000be8
 8013c84:	08011869 	.word	0x08011869
 8013c88:	20000c50 	.word	0x20000c50
 8013c8c:	20001994 	.word	0x20001994
 8013c90:	08010191 	.word	0x08010191
 8013c94:	080101ed 	.word	0x080101ed
 8013c98:	0801028d 	.word	0x0801028d
 8013c9c:	08010261 	.word	0x08010261
 8013ca0:	080102a9 	.word	0x080102a9
 8013ca4:	0801f4f4 	.word	0x0801f4f4
 8013ca8:	20000b9c 	.word	0x20000b9c
 8013cac:	20000eb8 	.word	0x20000eb8
 8013cb0:	20000e54 	.word	0x20000e54

08013cb4 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8013cb8:	4b04      	ldr	r3, [pc, #16]	; (8013ccc <LoRaMacStart+0x18>)
 8013cba:	2200      	movs	r2, #0
 8013cbc:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 8013cc0:	f7fc fb08 	bl	80102d4 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8013cc4:	2300      	movs	r3, #0
}
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	bd80      	pop	{r7, pc}
 8013cca:	bf00      	nop
 8013ccc:	20000850 	.word	0x20000850

08013cd0 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8013cd4:	f7fd fa06 	bl	80110e4 <LoRaMacIsBusy>
 8013cd8:	4603      	mov	r3, r0
 8013cda:	f083 0301 	eor.w	r3, r3, #1
 8013cde:	b2db      	uxtb	r3, r3
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d00d      	beq.n	8013d00 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8013ce4:	4b0b      	ldr	r3, [pc, #44]	; (8013d14 <LoRaMacStop+0x44>)
 8013ce6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013cea:	2b02      	cmp	r3, #2
 8013cec:	d102      	bne.n	8013cf4 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 8013cee:	4b0a      	ldr	r3, [pc, #40]	; (8013d18 <LoRaMacStop+0x48>)
 8013cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cf2:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 8013cf4:	4b09      	ldr	r3, [pc, #36]	; (8013d1c <LoRaMacStop+0x4c>)
 8013cf6:	2201      	movs	r2, #1
 8013cf8:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	e007      	b.n	8013d10 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8013d00:	4b06      	ldr	r3, [pc, #24]	; (8013d1c <LoRaMacStop+0x4c>)
 8013d02:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013d06:	2b01      	cmp	r3, #1
 8013d08:	d101      	bne.n	8013d0e <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	e000      	b.n	8013d10 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 8013d0e:	2301      	movs	r3, #1
}
 8013d10:	4618      	mov	r0, r3
 8013d12:	bd80      	pop	{r7, pc}
 8013d14:	20000d6c 	.word	0x20000d6c
 8013d18:	0801f4f4 	.word	0x0801f4f4
 8013d1c:	20000850 	.word	0x20000850

08013d20 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8013d20:	b580      	push	{r7, lr}
 8013d22:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8013d24:	4812      	ldr	r0, [pc, #72]	; (8013d70 <LoRaMacHalt+0x50>)
 8013d26:	f009 ff43 	bl	801dbb0 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8013d2a:	4812      	ldr	r0, [pc, #72]	; (8013d74 <LoRaMacHalt+0x54>)
 8013d2c:	f009 ff40 	bl	801dbb0 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8013d30:	4811      	ldr	r0, [pc, #68]	; (8013d78 <LoRaMacHalt+0x58>)
 8013d32:	f009 ff3d 	bl	801dbb0 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8013d36:	4811      	ldr	r0, [pc, #68]	; (8013d7c <LoRaMacHalt+0x5c>)
 8013d38:	f009 ff3a 	bl	801dbb0 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8013d3c:	f001 fa8c 	bl	8015258 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8013d40:	4b0f      	ldr	r3, [pc, #60]	; (8013d80 <LoRaMacHalt+0x60>)
 8013d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d44:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8013d46:	4b0f      	ldr	r3, [pc, #60]	; (8013d84 <LoRaMacHalt+0x64>)
 8013d48:	2200      	movs	r2, #0
 8013d4a:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 8013d4e:	480e      	ldr	r0, [pc, #56]	; (8013d88 <LoRaMacHalt+0x68>)
 8013d50:	f7fd fba2 	bl	8011498 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8013d54:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8013d58:	490b      	ldr	r1, [pc, #44]	; (8013d88 <LoRaMacHalt+0x68>)
 8013d5a:	480c      	ldr	r0, [pc, #48]	; (8013d8c <LoRaMacHalt+0x6c>)
 8013d5c:	f005 fd8d 	bl	801987a <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 8013d60:	4b08      	ldr	r3, [pc, #32]	; (8013d84 <LoRaMacHalt+0x64>)
 8013d62:	2201      	movs	r2, #1
 8013d64:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013d68:	2300      	movs	r3, #0
}
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	bd80      	pop	{r7, pc}
 8013d6e:	bf00      	nop
 8013d70:	20000bb8 	.word	0x20000bb8
 8013d74:	20000bd0 	.word	0x20000bd0
 8013d78:	20000be8 	.word	0x20000be8
 8013d7c:	20000c50 	.word	0x20000c50
 8013d80:	0801f4f4 	.word	0x0801f4f4
 8013d84:	20000850 	.word	0x20000850
 8013d88:	20000d6c 	.word	0x20000d6c
 8013d8c:	20001338 	.word	0x20001338

08013d90 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8013d90:	b590      	push	{r4, r7, lr}
 8013d92:	b08d      	sub	sp, #52	; 0x34
 8013d94:	af02      	add	r7, sp, #8
 8013d96:	4603      	mov	r3, r0
 8013d98:	6039      	str	r1, [r7, #0]
 8013d9a:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8013d9c:	4b42      	ldr	r3, [pc, #264]	; (8013ea8 <LoRaMacQueryTxPossible+0x118>)
 8013d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013da0:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8013da2:	4b41      	ldr	r3, [pc, #260]	; (8013ea8 <LoRaMacQueryTxPossible+0x118>)
 8013da4:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 8013da8:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8013daa:	4b3f      	ldr	r3, [pc, #252]	; (8013ea8 <LoRaMacQueryTxPossible+0x118>)
 8013dac:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 8013db0:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8013db2:	4b3e      	ldr	r3, [pc, #248]	; (8013eac <LoRaMacQueryTxPossible+0x11c>)
 8013db4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013db8:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8013dba:	2300      	movs	r3, #0
 8013dbc:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8013dbe:	683b      	ldr	r3, [r7, #0]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d101      	bne.n	8013dc8 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013dc4:	2303      	movs	r3, #3
 8013dc6:	e06b      	b.n	8013ea0 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8013dc8:	2300      	movs	r3, #0
 8013dca:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8013dcc:	4b36      	ldr	r3, [pc, #216]	; (8013ea8 <LoRaMacQueryTxPossible+0x118>)
 8013dce:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8013dd2:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8013dd4:	4b34      	ldr	r3, [pc, #208]	; (8013ea8 <LoRaMacQueryTxPossible+0x118>)
 8013dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013dd8:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8013dda:	4b33      	ldr	r3, [pc, #204]	; (8013ea8 <LoRaMacQueryTxPossible+0x118>)
 8013ddc:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8013de0:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8013de2:	4b31      	ldr	r3, [pc, #196]	; (8013ea8 <LoRaMacQueryTxPossible+0x118>)
 8013de4:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8013de8:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013dea:	4b2f      	ldr	r3, [pc, #188]	; (8013ea8 <LoRaMacQueryTxPossible+0x118>)
 8013dec:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013df0:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013df4:	4b2c      	ldr	r3, [pc, #176]	; (8013ea8 <LoRaMacQueryTxPossible+0x118>)
 8013df6:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013dfa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 8013dfe:	4b2b      	ldr	r3, [pc, #172]	; (8013eac <LoRaMacQueryTxPossible+0x11c>)
 8013e00:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013e04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013e08:	4b27      	ldr	r3, [pc, #156]	; (8013ea8 <LoRaMacQueryTxPossible+0x118>)
 8013e0a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8013e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8013e12:	4b25      	ldr	r3, [pc, #148]	; (8013ea8 <LoRaMacQueryTxPossible+0x118>)
 8013e14:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013e18:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8013e1c:	f107 040d 	add.w	r4, r7, #13
 8013e20:	f107 020e 	add.w	r2, r7, #14
 8013e24:	f107 010f 	add.w	r1, r7, #15
 8013e28:	f107 0014 	add.w	r0, r7, #20
 8013e2c:	f107 0310 	add.w	r3, r7, #16
 8013e30:	9300      	str	r3, [sp, #0]
 8013e32:	4623      	mov	r3, r4
 8013e34:	f001 f8da 	bl	8014fec <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8013e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	f7fd fe59 	bl	8011af4 <GetMaxAppPayloadWithoutFOptsLength>
 8013e42:	4603      	mov	r3, r0
 8013e44:	461a      	mov	r2, r3
 8013e46:	683b      	ldr	r3, [r7, #0]
 8013e48:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013e4a:	f107 0308 	add.w	r3, r7, #8
 8013e4e:	4618      	mov	r0, r3
 8013e50:	f001 fca4 	bl	801579c <LoRaMacCommandsGetSizeSerializedCmds>
 8013e54:	4603      	mov	r3, r0
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d001      	beq.n	8013e5e <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013e5a:	2313      	movs	r3, #19
 8013e5c:	e020      	b.n	8013ea0 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8013e5e:	68bb      	ldr	r3, [r7, #8]
 8013e60:	2b0f      	cmp	r3, #15
 8013e62:	d819      	bhi.n	8013e98 <LoRaMacQueryTxPossible+0x108>
 8013e64:	683b      	ldr	r3, [r7, #0]
 8013e66:	785b      	ldrb	r3, [r3, #1]
 8013e68:	461a      	mov	r2, r3
 8013e6a:	68bb      	ldr	r3, [r7, #8]
 8013e6c:	429a      	cmp	r2, r3
 8013e6e:	d313      	bcc.n	8013e98 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8013e70:	683b      	ldr	r3, [r7, #0]
 8013e72:	785a      	ldrb	r2, [r3, #1]
 8013e74:	68bb      	ldr	r3, [r7, #8]
 8013e76:	b2db      	uxtb	r3, r3
 8013e78:	1ad3      	subs	r3, r2, r3
 8013e7a:	b2da      	uxtb	r2, r3
 8013e7c:	683b      	ldr	r3, [r7, #0]
 8013e7e:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8013e80:	683b      	ldr	r3, [r7, #0]
 8013e82:	785b      	ldrb	r3, [r3, #1]
 8013e84:	4619      	mov	r1, r3
 8013e86:	79fa      	ldrb	r2, [r7, #7]
 8013e88:	68bb      	ldr	r3, [r7, #8]
 8013e8a:	4413      	add	r3, r2
 8013e8c:	4299      	cmp	r1, r3
 8013e8e:	d301      	bcc.n	8013e94 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8013e90:	2300      	movs	r3, #0
 8013e92:	e005      	b.n	8013ea0 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8013e94:	2308      	movs	r3, #8
 8013e96:	e003      	b.n	8013ea0 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8013e98:	683b      	ldr	r3, [r7, #0]
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8013e9e:	2308      	movs	r3, #8
    }
}
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	372c      	adds	r7, #44	; 0x2c
 8013ea4:	46bd      	mov	sp, r7
 8013ea6:	bd90      	pop	{r4, r7, pc}
 8013ea8:	20000d6c 	.word	0x20000d6c
 8013eac:	20000850 	.word	0x20000850

08013eb0 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8013eb0:	b590      	push	{r4, r7, lr}
 8013eb2:	b087      	sub	sp, #28
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013eb8:	2300      	movs	r3, #0
 8013eba:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d101      	bne.n	8013ec6 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013ec2:	2303      	movs	r3, #3
 8013ec4:	e1c4      	b.n	8014250 <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	781b      	ldrb	r3, [r3, #0]
 8013eca:	2b41      	cmp	r3, #65	; 0x41
 8013ecc:	f200 81b9 	bhi.w	8014242 <LoRaMacMibGetRequestConfirm+0x392>
 8013ed0:	a201      	add	r2, pc, #4	; (adr r2, 8013ed8 <LoRaMacMibGetRequestConfirm+0x28>)
 8013ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ed6:	bf00      	nop
 8013ed8:	08013fe1 	.word	0x08013fe1
 8013edc:	08013fed 	.word	0x08013fed
 8013ee0:	08013ff9 	.word	0x08013ff9
 8013ee4:	08014005 	.word	0x08014005
 8013ee8:	08014011 	.word	0x08014011
 8013eec:	0801401d 	.word	0x0801401d
 8013ef0:	08014029 	.word	0x08014029
 8013ef4:	08014243 	.word	0x08014243
 8013ef8:	08014243 	.word	0x08014243
 8013efc:	08014243 	.word	0x08014243
 8013f00:	08014243 	.word	0x08014243
 8013f04:	08014243 	.word	0x08014243
 8013f08:	08014243 	.word	0x08014243
 8013f0c:	08014243 	.word	0x08014243
 8013f10:	08014243 	.word	0x08014243
 8013f14:	0801403d 	.word	0x0801403d
 8013f18:	08014049 	.word	0x08014049
 8013f1c:	08014055 	.word	0x08014055
 8013f20:	08014077 	.word	0x08014077
 8013f24:	08014089 	.word	0x08014089
 8013f28:	0801409b 	.word	0x0801409b
 8013f2c:	080140ad 	.word	0x080140ad
 8013f30:	080140e1 	.word	0x080140e1
 8013f34:	080140bf 	.word	0x080140bf
 8013f38:	08014103 	.word	0x08014103
 8013f3c:	0801410f 	.word	0x0801410f
 8013f40:	08014119 	.word	0x08014119
 8013f44:	08014123 	.word	0x08014123
 8013f48:	0801412d 	.word	0x0801412d
 8013f4c:	08014137 	.word	0x08014137
 8013f50:	08014141 	.word	0x08014141
 8013f54:	0801416d 	.word	0x0801416d
 8013f58:	08014179 	.word	0x08014179
 8013f5c:	08014191 	.word	0x08014191
 8013f60:	08014185 	.word	0x08014185
 8013f64:	0801419d 	.word	0x0801419d
 8013f68:	080141a7 	.word	0x080141a7
 8013f6c:	080141b3 	.word	0x080141b3
 8013f70:	080141cf 	.word	0x080141cf
 8013f74:	080141bf 	.word	0x080141bf
 8013f78:	080141c7 	.word	0x080141c7
 8013f7c:	08014243 	.word	0x08014243
 8013f80:	080141db 	.word	0x080141db
 8013f84:	08014243 	.word	0x08014243
 8013f88:	08014243 	.word	0x08014243
 8013f8c:	08014243 	.word	0x08014243
 8013f90:	08014243 	.word	0x08014243
 8013f94:	08014243 	.word	0x08014243
 8013f98:	08014243 	.word	0x08014243
 8013f9c:	08014243 	.word	0x08014243
 8013fa0:	08014243 	.word	0x08014243
 8013fa4:	08014243 	.word	0x08014243
 8013fa8:	08014243 	.word	0x08014243
 8013fac:	08014243 	.word	0x08014243
 8013fb0:	08014243 	.word	0x08014243
 8013fb4:	08014243 	.word	0x08014243
 8013fb8:	08014243 	.word	0x08014243
 8013fbc:	08014243 	.word	0x08014243
 8013fc0:	080141ef 	.word	0x080141ef
 8013fc4:	080141fb 	.word	0x080141fb
 8013fc8:	08014207 	.word	0x08014207
 8013fcc:	08014213 	.word	0x08014213
 8013fd0:	0801421f 	.word	0x0801421f
 8013fd4:	0801422b 	.word	0x0801422b
 8013fd8:	08014237 	.word	0x08014237
 8013fdc:	0801423d 	.word	0x0801423d
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8013fe0:	4b9d      	ldr	r3, [pc, #628]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013fe2:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	711a      	strb	r2, [r3, #4]
            break;
 8013fea:	e130      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8013fec:	4b9a      	ldr	r3, [pc, #616]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013fee:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	711a      	strb	r2, [r3, #4]
            break;
 8013ff6:	e12a      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	685b      	ldr	r3, [r3, #4]
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	f7fa fab5 	bl	800e56c <SecureElementGetDevEui>
            break;
 8014002:	e124      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	685b      	ldr	r3, [r3, #4]
 8014008:	4618      	mov	r0, r3
 801400a:	f7fa fadf 	bl	800e5cc <SecureElementGetJoinEui>
            break;
 801400e:	e11e      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8014010:	4b91      	ldr	r3, [pc, #580]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014012:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	711a      	strb	r2, [r3, #4]
            break;
 801401a:	e118      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 801401c:	4b8e      	ldr	r3, [pc, #568]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801401e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	605a      	str	r2, [r3, #4]
            break;
 8014026:	e112      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 8014028:	4b8b      	ldr	r3, [pc, #556]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801402a:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	3304      	adds	r3, #4
 8014032:	4619      	mov	r1, r3
 8014034:	4610      	mov	r0, r2
 8014036:	f7fa fafb 	bl	800e630 <SecureElementGetDevAddr>
            break;
 801403a:	e108      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 801403c:	4b86      	ldr	r3, [pc, #536]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801403e:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	711a      	strb	r2, [r3, #4]
            break;
 8014046:	e102      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8014048:	4b83      	ldr	r3, [pc, #524]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801404a:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	711a      	strb	r2, [r3, #4]
            break;
 8014052:	e0fc      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8014054:	231c      	movs	r3, #28
 8014056:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014058:	4b7f      	ldr	r3, [pc, #508]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801405a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801405e:	f107 0210 	add.w	r2, r7, #16
 8014062:	4611      	mov	r1, r2
 8014064:	4618      	mov	r0, r3
 8014066:	f003 f850 	bl	801710a <RegionGetPhyParam>
 801406a:	4603      	mov	r3, r0
 801406c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 801406e:	68fa      	ldr	r2, [r7, #12]
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	605a      	str	r2, [r3, #4]
            break;
 8014074:	e0eb      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	4a77      	ldr	r2, [pc, #476]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801407a:	3304      	adds	r3, #4
 801407c:	326c      	adds	r2, #108	; 0x6c
 801407e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014082:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014086:	e0e2      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	4a73      	ldr	r2, [pc, #460]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801408c:	3304      	adds	r3, #4
 801408e:	32b4      	adds	r2, #180	; 0xb4
 8014090:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014094:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014098:	e0d9      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	4a6e      	ldr	r2, [pc, #440]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801409e:	3304      	adds	r3, #4
 80140a0:	3274      	adds	r2, #116	; 0x74
 80140a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80140a6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80140aa:	e0d0      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	4a6a      	ldr	r2, [pc, #424]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80140b0:	3304      	adds	r3, #4
 80140b2:	32bc      	adds	r2, #188	; 0xbc
 80140b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80140b8:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80140bc:	e0c7      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80140be:	231a      	movs	r3, #26
 80140c0:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80140c2:	4b65      	ldr	r3, [pc, #404]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80140c4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80140c8:	f107 0210 	add.w	r2, r7, #16
 80140cc:	4611      	mov	r1, r2
 80140ce:	4618      	mov	r0, r3
 80140d0:	f003 f81b 	bl	801710a <RegionGetPhyParam>
 80140d4:	4603      	mov	r3, r0
 80140d6:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80140d8:	68fa      	ldr	r2, [r7, #12]
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	605a      	str	r2, [r3, #4]
            break;
 80140de:	e0b6      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80140e0:	2319      	movs	r3, #25
 80140e2:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80140e4:	4b5c      	ldr	r3, [pc, #368]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80140e6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80140ea:	f107 0210 	add.w	r2, r7, #16
 80140ee:	4611      	mov	r1, r2
 80140f0:	4618      	mov	r0, r3
 80140f2:	f003 f80a 	bl	801710a <RegionGetPhyParam>
 80140f6:	4603      	mov	r3, r0
 80140f8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80140fa:	68fa      	ldr	r2, [r7, #12]
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	605a      	str	r2, [r3, #4]
            break;
 8014100:	e0a5      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8014102:	4b55      	ldr	r3, [pc, #340]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014104:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	711a      	strb	r2, [r3, #4]
            break;
 801410c:	e09f      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 801410e:	4b52      	ldr	r3, [pc, #328]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014110:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	605a      	str	r2, [r3, #4]
            break;
 8014116:	e09a      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8014118:	4b4f      	ldr	r3, [pc, #316]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801411a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	605a      	str	r2, [r3, #4]
            break;
 8014120:	e095      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8014122:	4b4d      	ldr	r3, [pc, #308]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014124:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	605a      	str	r2, [r3, #4]
            break;
 801412a:	e090      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 801412c:	4b4a      	ldr	r3, [pc, #296]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801412e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	605a      	str	r2, [r3, #4]
            break;
 8014134:	e08b      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8014136:	4b48      	ldr	r3, [pc, #288]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014138:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	605a      	str	r2, [r3, #4]
            break;
 801413e:	e086      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 8014140:	2302      	movs	r3, #2
 8014142:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014144:	4b44      	ldr	r3, [pc, #272]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014146:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801414a:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801414c:	4b42      	ldr	r3, [pc, #264]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801414e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014152:	f107 0210 	add.w	r2, r7, #16
 8014156:	4611      	mov	r1, r2
 8014158:	4618      	mov	r0, r3
 801415a:	f002 ffd6 	bl	801710a <RegionGetPhyParam>
 801415e:	4603      	mov	r3, r0
 8014160:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	b25a      	sxtb	r2, r3
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	711a      	strb	r2, [r3, #4]
            break;
 801416a:	e070      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801416c:	4b3a      	ldr	r3, [pc, #232]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801416e:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	711a      	strb	r2, [r3, #4]
            break;
 8014176:	e06a      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8014178:	4b37      	ldr	r3, [pc, #220]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801417a:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	711a      	strb	r2, [r3, #4]
            break;
 8014182:	e064      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8014184:	4b34      	ldr	r3, [pc, #208]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014186:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	711a      	strb	r2, [r3, #4]
            break;
 801418e:	e05e      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014190:	4b31      	ldr	r3, [pc, #196]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014192:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	711a      	strb	r2, [r3, #4]
            break;
 801419a:	e058      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 801419c:	4b2e      	ldr	r3, [pc, #184]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801419e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	605a      	str	r2, [r3, #4]
            break;
 80141a4:	e053      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 80141a6:	4b2c      	ldr	r3, [pc, #176]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80141a8:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	711a      	strb	r2, [r3, #4]
            break;
 80141b0:	e04d      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80141b2:	4b29      	ldr	r3, [pc, #164]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80141b4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	605a      	str	r2, [r3, #4]
            break;
 80141bc:	e047      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	4a25      	ldr	r2, [pc, #148]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80141c2:	605a      	str	r2, [r3, #4]
            break;
 80141c4:	e043      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	4a24      	ldr	r2, [pc, #144]	; (801425c <LoRaMacMibGetRequestConfirm+0x3ac>)
 80141ca:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 80141cc:	e03f      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80141ce:	4b22      	ldr	r3, [pc, #136]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80141d0:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	605a      	str	r2, [r3, #4]
            break;
 80141d8:	e039      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	4a1e      	ldr	r2, [pc, #120]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80141de:	f8d2 212c 	ldr.w	r2, [r2, #300]	; 0x12c
 80141e2:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80141e4:	687c      	ldr	r4, [r7, #4]
 80141e6:	f003 f907 	bl	80173f8 <RegionGetVersion>
 80141ea:	60a0      	str	r0, [r4, #8]
            break;
 80141ec:	e02f      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80141ee:	4b1a      	ldr	r3, [pc, #104]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80141f0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	605a      	str	r2, [r3, #4]
            break;
 80141f8:	e029      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 80141fa:	4b17      	ldr	r3, [pc, #92]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80141fc:	f893 211f 	ldrb.w	r2, [r3, #287]	; 0x11f
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	711a      	strb	r2, [r3, #4]
            break;
 8014204:	e023      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8014206:	4b14      	ldr	r3, [pc, #80]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014208:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	809a      	strh	r2, [r3, #4]
            break;
 8014210:	e01d      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8014212:	4b11      	ldr	r3, [pc, #68]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014214:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	809a      	strh	r2, [r3, #4]
            break;
 801421c:	e017      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 801421e:	4b0e      	ldr	r3, [pc, #56]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014220:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	809a      	strh	r2, [r3, #4]
            break;
 8014228:	e011      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 801422a:	4b0b      	ldr	r3, [pc, #44]	; (8014258 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801422c:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	809a      	strh	r2, [r3, #4]
            break;
 8014234:	e00b      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8014236:	2318      	movs	r3, #24
 8014238:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 801423a:	e008      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 801423c:	2318      	movs	r3, #24
 801423e:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8014240:	e005      	b.n	801424e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8014242:	6878      	ldr	r0, [r7, #4]
 8014244:	f001 f81f 	bl	8015286 <LoRaMacClassBMibGetRequestConfirm>
 8014248:	4603      	mov	r3, r0
 801424a:	75fb      	strb	r3, [r7, #23]
            break;
 801424c:	bf00      	nop
        }
    }
    return status;
 801424e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014250:	4618      	mov	r0, r3
 8014252:	371c      	adds	r7, #28
 8014254:	46bd      	mov	sp, r7
 8014256:	bd90      	pop	{r4, r7, pc}
 8014258:	20000d6c 	.word	0x20000d6c
 801425c:	20001338 	.word	0x20001338

08014260 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b086      	sub	sp, #24
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8014268:	2300      	movs	r3, #0
 801426a:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d101      	bne.n	8014276 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014272:	2303      	movs	r3, #3
 8014274:	e396      	b.n	80149a4 <LoRaMacMibSetRequestConfirm+0x744>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8014276:	4bbd      	ldr	r3, [pc, #756]	; (801456c <LoRaMacMibSetRequestConfirm+0x30c>)
 8014278:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801427c:	f003 0302 	and.w	r3, r3, #2
 8014280:	2b00      	cmp	r3, #0
 8014282:	d001      	beq.n	8014288 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8014284:	2301      	movs	r3, #1
 8014286:	e38d      	b.n	80149a4 <LoRaMacMibSetRequestConfirm+0x744>
    }

    switch( mibSet->Type )
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	781b      	ldrb	r3, [r3, #0]
 801428c:	2b41      	cmp	r3, #65	; 0x41
 801428e:	f200 835d 	bhi.w	801494c <LoRaMacMibSetRequestConfirm+0x6ec>
 8014292:	a201      	add	r2, pc, #4	; (adr r2, 8014298 <LoRaMacMibSetRequestConfirm+0x38>)
 8014294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014298:	080143a1 	.word	0x080143a1
 801429c:	080143b1 	.word	0x080143b1
 80142a0:	080143cb 	.word	0x080143cb
 80142a4:	080143e3 	.word	0x080143e3
 80142a8:	080143fb 	.word	0x080143fb
 80142ac:	08014407 	.word	0x08014407
 80142b0:	08014413 	.word	0x08014413
 80142b4:	0801443d 	.word	0x0801443d
 80142b8:	08014463 	.word	0x08014463
 80142bc:	08014489 	.word	0x08014489
 80142c0:	080144af 	.word	0x080144af
 80142c4:	080144d5 	.word	0x080144d5
 80142c8:	080144fb 	.word	0x080144fb
 80142cc:	08014521 	.word	0x08014521
 80142d0:	08014547 	.word	0x08014547
 80142d4:	08014575 	.word	0x08014575
 80142d8:	08014595 	.word	0x08014595
 80142dc:	0801494d 	.word	0x0801494d
 80142e0:	080145a1 	.word	0x080145a1
 80142e4:	08014611 	.word	0x08014611
 80142e8:	08014651 	.word	0x08014651
 80142ec:	080146b3 	.word	0x080146b3
 80142f0:	08014723 	.word	0x08014723
 80142f4:	080146f3 	.word	0x080146f3
 80142f8:	08014753 	.word	0x08014753
 80142fc:	08014775 	.word	0x08014775
 8014300:	0801477f 	.word	0x0801477f
 8014304:	08014789 	.word	0x08014789
 8014308:	08014793 	.word	0x08014793
 801430c:	0801479d 	.word	0x0801479d
 8014310:	0801494d 	.word	0x0801494d
 8014314:	080147a7 	.word	0x080147a7
 8014318:	080147d9 	.word	0x080147d9
 801431c:	0801484d 	.word	0x0801484d
 8014320:	08014813 	.word	0x08014813
 8014324:	0801487f 	.word	0x0801487f
 8014328:	08014895 	.word	0x08014895
 801432c:	080148ad 	.word	0x080148ad
 8014330:	080148b9 	.word	0x080148b9
 8014334:	080148c5 	.word	0x080148c5
 8014338:	0801494d 	.word	0x0801494d
 801433c:	080148cf 	.word	0x080148cf
 8014340:	0801494d 	.word	0x0801494d
 8014344:	0801494d 	.word	0x0801494d
 8014348:	0801494d 	.word	0x0801494d
 801434c:	0801494d 	.word	0x0801494d
 8014350:	0801494d 	.word	0x0801494d
 8014354:	0801494d 	.word	0x0801494d
 8014358:	0801494d 	.word	0x0801494d
 801435c:	0801494d 	.word	0x0801494d
 8014360:	0801494d 	.word	0x0801494d
 8014364:	0801494d 	.word	0x0801494d
 8014368:	0801494d 	.word	0x0801494d
 801436c:	0801494d 	.word	0x0801494d
 8014370:	0801494d 	.word	0x0801494d
 8014374:	0801494d 	.word	0x0801494d
 8014378:	0801494d 	.word	0x0801494d
 801437c:	0801494d 	.word	0x0801494d
 8014380:	080148f9 	.word	0x080148f9
 8014384:	08014905 	.word	0x08014905
 8014388:	08014911 	.word	0x08014911
 801438c:	0801491d 	.word	0x0801491d
 8014390:	08014929 	.word	0x08014929
 8014394:	08014935 	.word	0x08014935
 8014398:	08014941 	.word	0x08014941
 801439c:	08014947 	.word	0x08014947
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	791b      	ldrb	r3, [r3, #4]
 80143a4:	4618      	mov	r0, r3
 80143a6:	f7fd fabb 	bl	8011920 <SwitchClass>
 80143aa:	4603      	mov	r3, r0
 80143ac:	75fb      	strb	r3, [r7, #23]
            break;
 80143ae:	e2ee      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	791b      	ldrb	r3, [r3, #4]
 80143b4:	2b02      	cmp	r3, #2
 80143b6:	d005      	beq.n	80143c4 <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	791a      	ldrb	r2, [r3, #4]
 80143bc:	4b6c      	ldr	r3, [pc, #432]	; (8014570 <LoRaMacMibSetRequestConfirm+0x310>)
 80143be:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80143c2:	e2e4      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80143c4:	2303      	movs	r3, #3
 80143c6:	75fb      	strb	r3, [r7, #23]
            break;
 80143c8:	e2e1      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	685b      	ldr	r3, [r3, #4]
 80143ce:	4618      	mov	r0, r3
 80143d0:	f7fa f8b4 	bl	800e53c <SecureElementSetDevEui>
 80143d4:	4603      	mov	r3, r0
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	f000 82be 	beq.w	8014958 <LoRaMacMibSetRequestConfirm+0x6f8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80143dc:	2303      	movs	r3, #3
 80143de:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80143e0:	e2ba      	b.n	8014958 <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	685b      	ldr	r3, [r3, #4]
 80143e6:	4618      	mov	r0, r3
 80143e8:	f7fa f8d8 	bl	800e59c <SecureElementSetJoinEui>
 80143ec:	4603      	mov	r3, r0
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	f000 82b4 	beq.w	801495c <LoRaMacMibSetRequestConfirm+0x6fc>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80143f4:	2303      	movs	r3, #3
 80143f6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80143f8:	e2b0      	b.n	801495c <LoRaMacMibSetRequestConfirm+0x6fc>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	791a      	ldrb	r2, [r3, #4]
 80143fe:	4b5c      	ldr	r3, [pc, #368]	; (8014570 <LoRaMacMibSetRequestConfirm+0x310>)
 8014400:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            break;
 8014404:	e2c3      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	685b      	ldr	r3, [r3, #4]
 801440a:	4a59      	ldr	r2, [pc, #356]	; (8014570 <LoRaMacMibSetRequestConfirm+0x310>)
 801440c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            break;
 8014410:	e2bd      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8014412:	4b57      	ldr	r3, [pc, #348]	; (8014570 <LoRaMacMibSetRequestConfirm+0x310>)
 8014414:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	685b      	ldr	r3, [r3, #4]
 801441c:	4619      	mov	r1, r3
 801441e:	4610      	mov	r0, r2
 8014420:	f7fa f8ec 	bl	800e5fc <SecureElementSetDevAddr>
 8014424:	4603      	mov	r3, r0
 8014426:	2b00      	cmp	r3, #0
 8014428:	d002      	beq.n	8014430 <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801442a:	2303      	movs	r3, #3
 801442c:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 801442e:	e2ae      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	685b      	ldr	r3, [r3, #4]
 8014434:	4a4e      	ldr	r2, [pc, #312]	; (8014570 <LoRaMacMibSetRequestConfirm+0x310>)
 8014436:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            break;
 801443a:	e2a8      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	685b      	ldr	r3, [r3, #4]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d00b      	beq.n	801445c <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	685b      	ldr	r3, [r3, #4]
 8014448:	4619      	mov	r1, r3
 801444a:	2000      	movs	r0, #0
 801444c:	f002 f868 	bl	8016520 <LoRaMacCryptoSetKey>
 8014450:	4603      	mov	r3, r0
 8014452:	2b00      	cmp	r3, #0
 8014454:	f000 8284 	beq.w	8014960 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014458:	2311      	movs	r3, #17
 801445a:	e2a3      	b.n	80149a4 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801445c:	2303      	movs	r3, #3
 801445e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014460:	e27e      	b.n	8014960 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	685b      	ldr	r3, [r3, #4]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d00b      	beq.n	8014482 <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	685b      	ldr	r3, [r3, #4]
 801446e:	4619      	mov	r1, r3
 8014470:	2001      	movs	r0, #1
 8014472:	f002 f855 	bl	8016520 <LoRaMacCryptoSetKey>
 8014476:	4603      	mov	r3, r0
 8014478:	2b00      	cmp	r3, #0
 801447a:	f000 8273 	beq.w	8014964 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801447e:	2311      	movs	r3, #17
 8014480:	e290      	b.n	80149a4 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014482:	2303      	movs	r3, #3
 8014484:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014486:	e26d      	b.n	8014964 <LoRaMacMibSetRequestConfirm+0x704>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	685b      	ldr	r3, [r3, #4]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d00b      	beq.n	80144a8 <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	685b      	ldr	r3, [r3, #4]
 8014494:	4619      	mov	r1, r3
 8014496:	2008      	movs	r0, #8
 8014498:	f002 f842 	bl	8016520 <LoRaMacCryptoSetKey>
 801449c:	4603      	mov	r3, r0
 801449e:	2b00      	cmp	r3, #0
 80144a0:	f000 8262 	beq.w	8014968 <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80144a4:	2311      	movs	r3, #17
 80144a6:	e27d      	b.n	80149a4 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80144a8:	2303      	movs	r3, #3
 80144aa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80144ac:	e25c      	b.n	8014968 <LoRaMacMibSetRequestConfirm+0x708>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	685b      	ldr	r3, [r3, #4]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d00b      	beq.n	80144ce <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	685b      	ldr	r3, [r3, #4]
 80144ba:	4619      	mov	r1, r3
 80144bc:	2009      	movs	r0, #9
 80144be:	f002 f82f 	bl	8016520 <LoRaMacCryptoSetKey>
 80144c2:	4603      	mov	r3, r0
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	f000 8251 	beq.w	801496c <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80144ca:	2311      	movs	r3, #17
 80144cc:	e26a      	b.n	80149a4 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80144ce:	2303      	movs	r3, #3
 80144d0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80144d2:	e24b      	b.n	801496c <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	685b      	ldr	r3, [r3, #4]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d00b      	beq.n	80144f4 <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	685b      	ldr	r3, [r3, #4]
 80144e0:	4619      	mov	r1, r3
 80144e2:	200c      	movs	r0, #12
 80144e4:	f002 f81c 	bl	8016520 <LoRaMacCryptoSetKey>
 80144e8:	4603      	mov	r3, r0
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	f000 8240 	beq.w	8014970 <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80144f0:	2311      	movs	r3, #17
 80144f2:	e257      	b.n	80149a4 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80144f4:	2303      	movs	r3, #3
 80144f6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80144f8:	e23a      	b.n	8014970 <LoRaMacMibSetRequestConfirm+0x710>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	685b      	ldr	r3, [r3, #4]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d00b      	beq.n	801451a <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	685b      	ldr	r3, [r3, #4]
 8014506:	4619      	mov	r1, r3
 8014508:	200d      	movs	r0, #13
 801450a:	f002 f809 	bl	8016520 <LoRaMacCryptoSetKey>
 801450e:	4603      	mov	r3, r0
 8014510:	2b00      	cmp	r3, #0
 8014512:	f000 822f 	beq.w	8014974 <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014516:	2311      	movs	r3, #17
 8014518:	e244      	b.n	80149a4 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801451a:	2303      	movs	r3, #3
 801451c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801451e:	e229      	b.n	8014974 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	685b      	ldr	r3, [r3, #4]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d00b      	beq.n	8014540 <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	685b      	ldr	r3, [r3, #4]
 801452c:	4619      	mov	r1, r3
 801452e:	200e      	movs	r0, #14
 8014530:	f001 fff6 	bl	8016520 <LoRaMacCryptoSetKey>
 8014534:	4603      	mov	r3, r0
 8014536:	2b00      	cmp	r3, #0
 8014538:	f000 821e 	beq.w	8014978 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801453c:	2311      	movs	r3, #17
 801453e:	e231      	b.n	80149a4 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014540:	2303      	movs	r3, #3
 8014542:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014544:	e218      	b.n	8014978 <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	685b      	ldr	r3, [r3, #4]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d00b      	beq.n	8014566 <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	685b      	ldr	r3, [r3, #4]
 8014552:	4619      	mov	r1, r3
 8014554:	200f      	movs	r0, #15
 8014556:	f001 ffe3 	bl	8016520 <LoRaMacCryptoSetKey>
 801455a:	4603      	mov	r3, r0
 801455c:	2b00      	cmp	r3, #0
 801455e:	f000 820d 	beq.w	801497c <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014562:	2311      	movs	r3, #17
 8014564:	e21e      	b.n	80149a4 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014566:	2303      	movs	r3, #3
 8014568:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801456a:	e207      	b.n	801497c <LoRaMacMibSetRequestConfirm+0x71c>
 801456c:	20000850 	.word	0x20000850
 8014570:	20000d6c 	.word	0x20000d6c
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	791a      	ldrb	r2, [r3, #4]
 8014578:	4bb2      	ldr	r3, [pc, #712]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801457a:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801457e:	4bb2      	ldr	r3, [pc, #712]	; (8014848 <LoRaMacMibSetRequestConfirm+0x5e8>)
 8014580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014582:	4ab0      	ldr	r2, [pc, #704]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014584:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8014588:	4610      	mov	r0, r2
 801458a:	4798      	blx	r3
            Radio.Sleep( );
 801458c:	4bae      	ldr	r3, [pc, #696]	; (8014848 <LoRaMacMibSetRequestConfirm+0x5e8>)
 801458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014590:	4798      	blx	r3
            break;
 8014592:	e1fc      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	791a      	ldrb	r2, [r3, #4]
 8014598:	4baa      	ldr	r3, [pc, #680]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801459a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 801459e:	e1f6      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	7a1b      	ldrb	r3, [r3, #8]
 80145a4:	b25b      	sxtb	r3, r3
 80145a6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80145a8:	4ba6      	ldr	r3, [pc, #664]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80145aa:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80145ae:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 80145b0:	4ba4      	ldr	r3, [pc, #656]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80145b2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80145b6:	f107 0108 	add.w	r1, r7, #8
 80145ba:	2207      	movs	r2, #7
 80145bc:	4618      	mov	r0, r3
 80145be:	f002 fddf 	bl	8017180 <RegionVerify>
 80145c2:	4603      	mov	r3, r0
 80145c4:	f083 0301 	eor.w	r3, r3, #1
 80145c8:	b2db      	uxtb	r3, r3
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d002      	beq.n	80145d4 <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80145ce:	2303      	movs	r3, #3
 80145d0:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 80145d2:	e1dc      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	685b      	ldr	r3, [r3, #4]
 80145d8:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 80145da:	4b9a      	ldr	r3, [pc, #616]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80145dc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80145e0:	f107 0108 	add.w	r1, r7, #8
 80145e4:	2200      	movs	r2, #0
 80145e6:	4618      	mov	r0, r3
 80145e8:	f002 fdca 	bl	8017180 <RegionVerify>
 80145ec:	4603      	mov	r3, r0
 80145ee:	f083 0301 	eor.w	r3, r3, #1
 80145f2:	b2db      	uxtb	r3, r3
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d002      	beq.n	80145fe <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 80145f8:	2303      	movs	r3, #3
 80145fa:	75fb      	strb	r3, [r7, #23]
            break;
 80145fc:	e1c7      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80145fe:	4b91      	ldr	r3, [pc, #580]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014600:	687a      	ldr	r2, [r7, #4]
 8014602:	336c      	adds	r3, #108	; 0x6c
 8014604:	3204      	adds	r2, #4
 8014606:	e892 0003 	ldmia.w	r2, {r0, r1}
 801460a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801460e:	e1be      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	7a1b      	ldrb	r3, [r3, #8]
 8014614:	b25b      	sxtb	r3, r3
 8014616:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014618:	4b8a      	ldr	r3, [pc, #552]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801461a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 801461e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014620:	4b88      	ldr	r3, [pc, #544]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014622:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014626:	f107 0108 	add.w	r1, r7, #8
 801462a:	2207      	movs	r2, #7
 801462c:	4618      	mov	r0, r3
 801462e:	f002 fda7 	bl	8017180 <RegionVerify>
 8014632:	4603      	mov	r3, r0
 8014634:	2b00      	cmp	r3, #0
 8014636:	d008      	beq.n	801464a <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8014638:	4b82      	ldr	r3, [pc, #520]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801463a:	687a      	ldr	r2, [r7, #4]
 801463c:	33b4      	adds	r3, #180	; 0xb4
 801463e:	3204      	adds	r2, #4
 8014640:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014644:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014648:	e1a1      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801464a:	2303      	movs	r3, #3
 801464c:	75fb      	strb	r3, [r7, #23]
            break;
 801464e:	e19e      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	7a1b      	ldrb	r3, [r3, #8]
 8014654:	b25b      	sxtb	r3, r3
 8014656:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014658:	4b7a      	ldr	r3, [pc, #488]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801465a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 801465e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014660:	4b78      	ldr	r3, [pc, #480]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014662:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014666:	f107 0108 	add.w	r1, r7, #8
 801466a:	2207      	movs	r2, #7
 801466c:	4618      	mov	r0, r3
 801466e:	f002 fd87 	bl	8017180 <RegionVerify>
 8014672:	4603      	mov	r3, r0
 8014674:	2b00      	cmp	r3, #0
 8014676:	d019      	beq.n	80146ac <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8014678:	4b72      	ldr	r3, [pc, #456]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801467a:	687a      	ldr	r2, [r7, #4]
 801467c:	3374      	adds	r3, #116	; 0x74
 801467e:	3204      	adds	r2, #4
 8014680:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014684:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8014688:	4b6e      	ldr	r3, [pc, #440]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801468a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801468e:	2b02      	cmp	r3, #2
 8014690:	f040 8176 	bne.w	8014980 <LoRaMacMibSetRequestConfirm+0x720>
 8014694:	4b6b      	ldr	r3, [pc, #428]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014696:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 801469a:	2b00      	cmp	r3, #0
 801469c:	f000 8170 	beq.w	8014980 <LoRaMacMibSetRequestConfirm+0x720>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80146a0:	4b69      	ldr	r3, [pc, #420]	; (8014848 <LoRaMacMibSetRequestConfirm+0x5e8>)
 80146a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146a4:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80146a6:	f7fe fc1b 	bl	8012ee0 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80146aa:	e169      	b.n	8014980 <LoRaMacMibSetRequestConfirm+0x720>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80146ac:	2303      	movs	r3, #3
 80146ae:	75fb      	strb	r3, [r7, #23]
            break;
 80146b0:	e166      	b.n	8014980 <LoRaMacMibSetRequestConfirm+0x720>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	7a1b      	ldrb	r3, [r3, #8]
 80146b6:	b25b      	sxtb	r3, r3
 80146b8:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80146ba:	4b62      	ldr	r3, [pc, #392]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80146bc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80146c0:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80146c2:	4b60      	ldr	r3, [pc, #384]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80146c4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80146c8:	f107 0108 	add.w	r1, r7, #8
 80146cc:	2207      	movs	r2, #7
 80146ce:	4618      	mov	r0, r3
 80146d0:	f002 fd56 	bl	8017180 <RegionVerify>
 80146d4:	4603      	mov	r3, r0
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d008      	beq.n	80146ec <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80146da:	4b5a      	ldr	r3, [pc, #360]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80146dc:	687a      	ldr	r2, [r7, #4]
 80146de:	33bc      	adds	r3, #188	; 0xbc
 80146e0:	3204      	adds	r2, #4
 80146e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80146e6:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80146ea:	e150      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80146ec:	2303      	movs	r3, #3
 80146ee:	75fb      	strb	r3, [r7, #23]
            break;
 80146f0:	e14d      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	685b      	ldr	r3, [r3, #4]
 80146f6:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80146f8:	2301      	movs	r3, #1
 80146fa:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80146fc:	4b51      	ldr	r3, [pc, #324]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80146fe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014702:	f107 020c 	add.w	r2, r7, #12
 8014706:	4611      	mov	r1, r2
 8014708:	4618      	mov	r0, r3
 801470a:	f002 fd62 	bl	80171d2 <RegionChanMaskSet>
 801470e:	4603      	mov	r3, r0
 8014710:	f083 0301 	eor.w	r3, r3, #1
 8014714:	b2db      	uxtb	r3, r3
 8014716:	2b00      	cmp	r3, #0
 8014718:	f000 8134 	beq.w	8014984 <LoRaMacMibSetRequestConfirm+0x724>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801471c:	2303      	movs	r3, #3
 801471e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014720:	e130      	b.n	8014984 <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	685b      	ldr	r3, [r3, #4]
 8014726:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8014728:	2300      	movs	r3, #0
 801472a:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 801472c:	4b45      	ldr	r3, [pc, #276]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801472e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014732:	f107 020c 	add.w	r2, r7, #12
 8014736:	4611      	mov	r1, r2
 8014738:	4618      	mov	r0, r3
 801473a:	f002 fd4a 	bl	80171d2 <RegionChanMaskSet>
 801473e:	4603      	mov	r3, r0
 8014740:	f083 0301 	eor.w	r3, r3, #1
 8014744:	b2db      	uxtb	r3, r3
 8014746:	2b00      	cmp	r3, #0
 8014748:	f000 811e 	beq.w	8014988 <LoRaMacMibSetRequestConfirm+0x728>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801474c:	2303      	movs	r3, #3
 801474e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014750:	e11a      	b.n	8014988 <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	791b      	ldrb	r3, [r3, #4]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d009      	beq.n	801476e <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801475e:	2b0f      	cmp	r3, #15
 8014760:	d805      	bhi.n	801476e <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	791a      	ldrb	r2, [r3, #4]
 8014766:	4b37      	ldr	r3, [pc, #220]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014768:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801476c:	e10f      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801476e:	2303      	movs	r3, #3
 8014770:	75fb      	strb	r3, [r7, #23]
            break;
 8014772:	e10c      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	685b      	ldr	r3, [r3, #4]
 8014778:	4a32      	ldr	r2, [pc, #200]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801477a:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 801477c:	e107      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	685b      	ldr	r3, [r3, #4]
 8014782:	4a30      	ldr	r2, [pc, #192]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014784:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8014786:	e102      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	685b      	ldr	r3, [r3, #4]
 801478c:	4a2d      	ldr	r2, [pc, #180]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801478e:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8014790:	e0fd      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	685b      	ldr	r3, [r3, #4]
 8014796:	4a2b      	ldr	r2, [pc, #172]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014798:	6613      	str	r3, [r2, #96]	; 0x60
            break;
 801479a:	e0f8      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	685b      	ldr	r3, [r3, #4]
 80147a0:	4a28      	ldr	r2, [pc, #160]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80147a2:	6653      	str	r3, [r2, #100]	; 0x64
            break;
 80147a4:	e0f3      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80147ac:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80147ae:	4b25      	ldr	r3, [pc, #148]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80147b0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80147b4:	f107 0108 	add.w	r1, r7, #8
 80147b8:	2206      	movs	r2, #6
 80147ba:	4618      	mov	r0, r3
 80147bc:	f002 fce0 	bl	8017180 <RegionVerify>
 80147c0:	4603      	mov	r3, r0
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d005      	beq.n	80147d2 <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 80147c6:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80147ca:	4b1e      	ldr	r3, [pc, #120]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80147cc:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80147d0:	e0dd      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80147d2:	2303      	movs	r3, #3
 80147d4:	75fb      	strb	r3, [r7, #23]
            break;
 80147d6:	e0da      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80147de:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80147e0:	4b18      	ldr	r3, [pc, #96]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80147e2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80147e6:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80147e8:	4b16      	ldr	r3, [pc, #88]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80147ea:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80147ee:	f107 0108 	add.w	r1, r7, #8
 80147f2:	2205      	movs	r2, #5
 80147f4:	4618      	mov	r0, r3
 80147f6:	f002 fcc3 	bl	8017180 <RegionVerify>
 80147fa:	4603      	mov	r3, r0
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d005      	beq.n	801480c <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014800:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014804:	4b0f      	ldr	r3, [pc, #60]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014806:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801480a:	e0c0      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801480c:	2303      	movs	r3, #3
 801480e:	75fb      	strb	r3, [r7, #23]
            break;
 8014810:	e0bd      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014818:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 801481a:	4b0a      	ldr	r3, [pc, #40]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801481c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014820:	f107 0108 	add.w	r1, r7, #8
 8014824:	220a      	movs	r2, #10
 8014826:	4618      	mov	r0, r3
 8014828:	f002 fcaa 	bl	8017180 <RegionVerify>
 801482c:	4603      	mov	r3, r0
 801482e:	2b00      	cmp	r3, #0
 8014830:	d005      	beq.n	801483e <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8014832:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014836:	4b03      	ldr	r3, [pc, #12]	; (8014844 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014838:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801483c:	e0a7      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801483e:	2303      	movs	r3, #3
 8014840:	75fb      	strb	r3, [r7, #23]
            break;
 8014842:	e0a4      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
 8014844:	20000d6c 	.word	0x20000d6c
 8014848:	0801f4f4 	.word	0x0801f4f4
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014852:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8014854:	4b55      	ldr	r3, [pc, #340]	; (80149ac <LoRaMacMibSetRequestConfirm+0x74c>)
 8014856:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801485a:	f107 0108 	add.w	r1, r7, #8
 801485e:	2209      	movs	r2, #9
 8014860:	4618      	mov	r0, r3
 8014862:	f002 fc8d 	bl	8017180 <RegionVerify>
 8014866:	4603      	mov	r3, r0
 8014868:	2b00      	cmp	r3, #0
 801486a:	d005      	beq.n	8014878 <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 801486c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014870:	4b4e      	ldr	r3, [pc, #312]	; (80149ac <LoRaMacMibSetRequestConfirm+0x74c>)
 8014872:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014876:	e08a      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014878:	2303      	movs	r3, #3
 801487a:	75fb      	strb	r3, [r7, #23]
            break;
 801487c:	e087      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	685b      	ldr	r3, [r3, #4]
 8014882:	4a4a      	ldr	r2, [pc, #296]	; (80149ac <LoRaMacMibSetRequestConfirm+0x74c>)
 8014884:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8014888:	4b48      	ldr	r3, [pc, #288]	; (80149ac <LoRaMacMibSetRequestConfirm+0x74c>)
 801488a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801488e:	4a47      	ldr	r2, [pc, #284]	; (80149ac <LoRaMacMibSetRequestConfirm+0x74c>)
 8014890:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8014892:	e07c      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	791a      	ldrb	r2, [r3, #4]
 8014898:	4b44      	ldr	r3, [pc, #272]	; (80149ac <LoRaMacMibSetRequestConfirm+0x74c>)
 801489a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 801489e:	4b43      	ldr	r3, [pc, #268]	; (80149ac <LoRaMacMibSetRequestConfirm+0x74c>)
 80148a0:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 80148a4:	4b41      	ldr	r3, [pc, #260]	; (80149ac <LoRaMacMibSetRequestConfirm+0x74c>)
 80148a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            break;
 80148aa:	e070      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	685b      	ldr	r3, [r3, #4]
 80148b0:	4a3e      	ldr	r2, [pc, #248]	; (80149ac <LoRaMacMibSetRequestConfirm+0x74c>)
 80148b2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 80148b6:	e06a      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	685b      	ldr	r3, [r3, #4]
 80148bc:	4a3b      	ldr	r2, [pc, #236]	; (80149ac <LoRaMacMibSetRequestConfirm+0x74c>)
 80148be:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 80148c2:	e064      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 80148c4:	f7fe fd40 	bl	8013348 <RestoreNvmData>
 80148c8:	4603      	mov	r3, r0
 80148ca:	75fb      	strb	r3, [r7, #23]
            break;
 80148cc:	e05f      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	799b      	ldrb	r3, [r3, #6]
 80148d2:	2b01      	cmp	r3, #1
 80148d4:	d80d      	bhi.n	80148f2 <LoRaMacMibSetRequestConfirm+0x692>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 80148d6:	4a35      	ldr	r2, [pc, #212]	; (80149ac <LoRaMacMibSetRequestConfirm+0x74c>)
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	685b      	ldr	r3, [r3, #4]
 80148dc:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	6858      	ldr	r0, [r3, #4]
 80148e4:	f001 fd7e 	bl	80163e4 <LoRaMacCryptoSetLrWanVersion>
 80148e8:	4603      	mov	r3, r0
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d04e      	beq.n	801498c <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80148ee:	2311      	movs	r3, #17
 80148f0:	e058      	b.n	80149a4 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80148f2:	2303      	movs	r3, #3
 80148f4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80148f6:	e049      	b.n	801498c <LoRaMacMibSetRequestConfirm+0x72c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	685b      	ldr	r3, [r3, #4]
 80148fc:	4a2b      	ldr	r2, [pc, #172]	; (80149ac <LoRaMacMibSetRequestConfirm+0x74c>)
 80148fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
            break;
 8014902:	e044      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	791a      	ldrb	r2, [r3, #4]
 8014908:	4b28      	ldr	r3, [pc, #160]	; (80149ac <LoRaMacMibSetRequestConfirm+0x74c>)
 801490a:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
            break;
 801490e:	e03e      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	889a      	ldrh	r2, [r3, #4]
 8014914:	4b25      	ldr	r3, [pc, #148]	; (80149ac <LoRaMacMibSetRequestConfirm+0x74c>)
 8014916:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            break;
 801491a:	e038      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	889a      	ldrh	r2, [r3, #4]
 8014920:	4b22      	ldr	r3, [pc, #136]	; (80149ac <LoRaMacMibSetRequestConfirm+0x74c>)
 8014922:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            break;
 8014926:	e032      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	889a      	ldrh	r2, [r3, #4]
 801492c:	4b1f      	ldr	r3, [pc, #124]	; (80149ac <LoRaMacMibSetRequestConfirm+0x74c>)
 801492e:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
            break;
 8014932:	e02c      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	889a      	ldrh	r2, [r3, #4]
 8014938:	4b1c      	ldr	r3, [pc, #112]	; (80149ac <LoRaMacMibSetRequestConfirm+0x74c>)
 801493a:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
            break;
 801493e:	e026      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8014940:	2318      	movs	r3, #24
 8014942:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8014944:	e023      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8014946:	2318      	movs	r3, #24
 8014948:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 801494a:	e020      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 801494c:	6878      	ldr	r0, [r7, #4]
 801494e:	f000 fca4 	bl	801529a <LoRaMacMibClassBSetRequestConfirm>
 8014952:	4603      	mov	r3, r0
 8014954:	75fb      	strb	r3, [r7, #23]
            break;
 8014956:	e01a      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8014958:	bf00      	nop
 801495a:	e018      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 801495c:	bf00      	nop
 801495e:	e016      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8014960:	bf00      	nop
 8014962:	e014      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8014964:	bf00      	nop
 8014966:	e012      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8014968:	bf00      	nop
 801496a:	e010      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 801496c:	bf00      	nop
 801496e:	e00e      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8014970:	bf00      	nop
 8014972:	e00c      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8014974:	bf00      	nop
 8014976:	e00a      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8014978:	bf00      	nop
 801497a:	e008      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 801497c:	bf00      	nop
 801497e:	e006      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8014980:	bf00      	nop
 8014982:	e004      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8014984:	bf00      	nop
 8014986:	e002      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8014988:	bf00      	nop
 801498a:	e000      	b.n	801498e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 801498c:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 801498e:	7dfb      	ldrb	r3, [r7, #23]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d106      	bne.n	80149a2 <LoRaMacMibSetRequestConfirm+0x742>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8014994:	4a06      	ldr	r2, [pc, #24]	; (80149b0 <LoRaMacMibSetRequestConfirm+0x750>)
 8014996:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801499a:	f043 0320 	orr.w	r3, r3, #32
 801499e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 80149a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80149a4:	4618      	mov	r0, r3
 80149a6:	3718      	adds	r7, #24
 80149a8:	46bd      	mov	sp, r7
 80149aa:	bd80      	pop	{r7, pc}
 80149ac:	20000d6c 	.word	0x20000d6c
 80149b0:	20000850 	.word	0x20000850

080149b4 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b08a      	sub	sp, #40	; 0x28
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80149bc:	2302      	movs	r3, #2
 80149be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80149c2:	2300      	movs	r3, #0
 80149c4:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d101      	bne.n	80149d0 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80149cc:	2303      	movs	r3, #3
 80149ce:	e17e      	b.n	8014cce <LoRaMacMlmeRequest+0x31a>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	2200      	movs	r2, #0
 80149d4:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 80149d6:	f7fc fb85 	bl	80110e4 <LoRaMacIsBusy>
 80149da:	4603      	mov	r3, r0
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d001      	beq.n	80149e4 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 80149e0:	2301      	movs	r3, #1
 80149e2:	e174      	b.n	8014cce <LoRaMacMlmeRequest+0x31a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80149e4:	f001 f994 	bl	8015d10 <LoRaMacConfirmQueueIsFull>
 80149e8:	4603      	mov	r3, r0
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d001      	beq.n	80149f2 <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 80149ee:	2301      	movs	r3, #1
 80149f0:	e16d      	b.n	8014cce <LoRaMacMlmeRequest+0x31a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80149f2:	f001 f981 	bl	8015cf8 <LoRaMacConfirmQueueGetCnt>
 80149f6:	4603      	mov	r3, r0
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d104      	bne.n	8014a06 <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 80149fc:	2214      	movs	r2, #20
 80149fe:	2100      	movs	r1, #0
 8014a00:	48b5      	ldr	r0, [pc, #724]	; (8014cd8 <LoRaMacMlmeRequest+0x324>)
 8014a02:	f004 ff75 	bl	80198f0 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014a06:	4bb5      	ldr	r3, [pc, #724]	; (8014cdc <LoRaMacMlmeRequest+0x328>)
 8014a08:	2201      	movs	r2, #1
 8014a0a:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8014a0e:	4ab3      	ldr	r2, [pc, #716]	; (8014cdc <LoRaMacMlmeRequest+0x328>)
 8014a10:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8014a14:	f043 0304 	orr.w	r3, r3, #4
 8014a18:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    queueElement.Request = mlmeRequest->Type;
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	781b      	ldrb	r3, [r3, #0]
 8014a20:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014a24:	2301      	movs	r3, #1
 8014a26:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 8014a30:	2300      	movs	r3, #0
 8014a32:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	781b      	ldrb	r3, [r3, #0]
 8014a3a:	3b01      	subs	r3, #1
 8014a3c:	2b0c      	cmp	r3, #12
 8014a3e:	f200 811a 	bhi.w	8014c76 <LoRaMacMlmeRequest+0x2c2>
 8014a42:	a201      	add	r2, pc, #4	; (adr r2, 8014a48 <LoRaMacMlmeRequest+0x94>)
 8014a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a48:	08014a7d 	.word	0x08014a7d
 8014a4c:	08014c77 	.word	0x08014c77
 8014a50:	08014c77 	.word	0x08014c77
 8014a54:	08014c77 	.word	0x08014c77
 8014a58:	08014b5b 	.word	0x08014b5b
 8014a5c:	08014b7f 	.word	0x08014b7f
 8014a60:	08014c77 	.word	0x08014c77
 8014a64:	08014c77 	.word	0x08014c77
 8014a68:	08014b9d 	.word	0x08014b9d
 8014a6c:	08014c77 	.word	0x08014c77
 8014a70:	08014c45 	.word	0x08014c45
 8014a74:	08014bd9 	.word	0x08014bd9
 8014a78:	08014c23 	.word	0x08014c23
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8014a7c:	4b97      	ldr	r3, [pc, #604]	; (8014cdc <LoRaMacMlmeRequest+0x328>)
 8014a7e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014a82:	f003 0320 	and.w	r3, r3, #32
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d001      	beq.n	8014a8e <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 8014a8a:	2301      	movs	r3, #1
 8014a8c:	e11f      	b.n	8014cce <LoRaMacMlmeRequest+0x31a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	791b      	ldrb	r3, [r3, #4]
 8014a92:	2b02      	cmp	r3, #2
 8014a94:	d135      	bne.n	8014b02 <LoRaMacMlmeRequest+0x14e>
            {
                ResetMacParameters( false );
 8014a96:	2000      	movs	r0, #0
 8014a98:	f7fe f8b4 	bl	8012c04 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8014a9c:	4b90      	ldr	r3, [pc, #576]	; (8014ce0 <LoRaMacMlmeRequest+0x32c>)
 8014a9e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	795b      	ldrb	r3, [r3, #5]
 8014aa6:	b25b      	sxtb	r3, r3
 8014aa8:	2200      	movs	r2, #0
 8014aaa:	4619      	mov	r1, r3
 8014aac:	f002 fc50 	bl	8017350 <RegionAlternateDr>
 8014ab0:	4603      	mov	r3, r0
 8014ab2:	461a      	mov	r2, r3
 8014ab4:	4b8a      	ldr	r3, [pc, #552]	; (8014ce0 <LoRaMacMlmeRequest+0x32c>)
 8014ab6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8014ac0:	4b87      	ldr	r3, [pc, #540]	; (8014ce0 <LoRaMacMlmeRequest+0x32c>)
 8014ac2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8014ac6:	2307      	movs	r3, #7
 8014ac8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

                status = SendReJoinReq( JOIN_REQ );
 8014acc:	20ff      	movs	r0, #255	; 0xff
 8014ace:	f7fd fe1d 	bl	801270c <SendReJoinReq>
 8014ad2:	4603      	mov	r3, r0
 8014ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if( status != LORAMAC_STATUS_OK )
 8014ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	f000 80cc 	beq.w	8014c7a <LoRaMacMlmeRequest+0x2c6>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8014ae2:	4b7f      	ldr	r3, [pc, #508]	; (8014ce0 <LoRaMacMlmeRequest+0x32c>)
 8014ae4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	795b      	ldrb	r3, [r3, #5]
 8014aec:	b25b      	sxtb	r3, r3
 8014aee:	2201      	movs	r2, #1
 8014af0:	4619      	mov	r1, r3
 8014af2:	f002 fc2d 	bl	8017350 <RegionAlternateDr>
 8014af6:	4603      	mov	r3, r0
 8014af8:	461a      	mov	r2, r3
 8014afa:	4b79      	ldr	r3, [pc, #484]	; (8014ce0 <LoRaMacMlmeRequest+0x32c>)
 8014afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8014b00:	e0bb      	b.n	8014c7a <LoRaMacMlmeRequest+0x2c6>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	791b      	ldrb	r3, [r3, #4]
 8014b06:	2b01      	cmp	r3, #1
 8014b08:	f040 80b7 	bne.w	8014c7a <LoRaMacMlmeRequest+0x2c6>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8014b0c:	4b74      	ldr	r3, [pc, #464]	; (8014ce0 <LoRaMacMlmeRequest+0x32c>)
 8014b0e:	2200      	movs	r2, #0
 8014b10:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8014b14:	2302      	movs	r3, #2
 8014b16:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8014b18:	4b71      	ldr	r3, [pc, #452]	; (8014ce0 <LoRaMacMlmeRequest+0x32c>)
 8014b1a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014b1e:	f107 020c 	add.w	r2, r7, #12
 8014b22:	4611      	mov	r1, r2
 8014b24:	4618      	mov	r0, r3
 8014b26:	f002 fb19 	bl	801715c <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	791a      	ldrb	r2, [r3, #4]
 8014b2e:	4b6c      	ldr	r3, [pc, #432]	; (8014ce0 <LoRaMacMlmeRequest+0x32c>)
 8014b30:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8014b34:	2300      	movs	r3, #0
 8014b36:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                queueElement.ReadyToHandle = true;
 8014b3a:	2301      	movs	r3, #1
 8014b3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                OnMacProcessNotify( );
 8014b40:	f7fe fdb2 	bl	80136a8 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8014b44:	4a65      	ldr	r2, [pc, #404]	; (8014cdc <LoRaMacMlmeRequest+0x328>)
 8014b46:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8014b4a:	f043 0310 	orr.w	r3, r3, #16
 8014b4e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
                status = LORAMAC_STATUS_OK;
 8014b52:	2300      	movs	r3, #0
 8014b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8014b58:	e08f      	b.n	8014c7a <LoRaMacMlmeRequest+0x2c6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014b60:	f107 031c 	add.w	r3, r7, #28
 8014b64:	2200      	movs	r2, #0
 8014b66:	4619      	mov	r1, r3
 8014b68:	2002      	movs	r0, #2
 8014b6a:	f000 fd21 	bl	80155b0 <LoRaMacCommandsAddCmd>
 8014b6e:	4603      	mov	r3, r0
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	f000 8084 	beq.w	8014c7e <LoRaMacMlmeRequest+0x2ca>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014b76:	2313      	movs	r3, #19
 8014b78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8014b7c:	e07f      	b.n	8014c7e <LoRaMacMlmeRequest+0x2ca>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	8898      	ldrh	r0, [r3, #4]
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	6899      	ldr	r1, [r3, #8]
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8014b8c:	b2db      	uxtb	r3, r3
 8014b8e:	461a      	mov	r2, r3
 8014b90:	f7fe fbba 	bl	8013308 <SetTxContinuousWave>
 8014b94:	4603      	mov	r3, r0
 8014b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8014b9a:	e077      	b.n	8014c8c <LoRaMacMlmeRequest+0x2d8>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8014ba2:	f107 0308 	add.w	r3, r7, #8
 8014ba6:	4619      	mov	r1, r3
 8014ba8:	200d      	movs	r0, #13
 8014baa:	f000 fd81 	bl	80156b0 <LoRaMacCommandsGetCmd>
 8014bae:	4603      	mov	r3, r0
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d103      	bne.n	8014bbc <LoRaMacMlmeRequest+0x208>
            {
                status = LORAMAC_STATUS_OK;
 8014bb4:	2300      	movs	r3, #0
 8014bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8014bba:	e062      	b.n	8014c82 <LoRaMacMlmeRequest+0x2ce>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014bbc:	f107 031c 	add.w	r3, r7, #28
 8014bc0:	2200      	movs	r2, #0
 8014bc2:	4619      	mov	r1, r3
 8014bc4:	200d      	movs	r0, #13
 8014bc6:	f000 fcf3 	bl	80155b0 <LoRaMacCommandsAddCmd>
 8014bca:	4603      	mov	r3, r0
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d058      	beq.n	8014c82 <LoRaMacMlmeRequest+0x2ce>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014bd0:	2313      	movs	r3, #19
 8014bd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8014bd6:	e054      	b.n	8014c82 <LoRaMacMlmeRequest+0x2ce>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8014bd8:	4b41      	ldr	r3, [pc, #260]	; (8014ce0 <LoRaMacMlmeRequest+0x32c>)
 8014bda:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d151      	bne.n	8014c86 <LoRaMacMlmeRequest+0x2d2>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	791b      	ldrb	r3, [r3, #4]
 8014be6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	791b      	ldrb	r3, [r3, #4]
 8014bee:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8014bf2:	b2db      	uxtb	r3, r3
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	f000 fb25 	bl	8015244 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8014bfa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014bfe:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 8014c00:	2300      	movs	r3, #0
 8014c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8014c06:	f107 031c 	add.w	r3, r7, #28
 8014c0a:	2201      	movs	r2, #1
 8014c0c:	4619      	mov	r1, r3
 8014c0e:	2010      	movs	r0, #16
 8014c10:	f000 fcce 	bl	80155b0 <LoRaMacCommandsAddCmd>
 8014c14:	4603      	mov	r3, r0
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d035      	beq.n	8014c86 <LoRaMacMlmeRequest+0x2d2>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014c1a:	2313      	movs	r3, #19
 8014c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
            break;
 8014c20:	e031      	b.n	8014c86 <LoRaMacMlmeRequest+0x2d2>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014c22:	2300      	movs	r3, #0
 8014c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014c28:	f107 031c 	add.w	r3, r7, #28
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	4619      	mov	r1, r3
 8014c30:	2012      	movs	r0, #18
 8014c32:	f000 fcbd 	bl	80155b0 <LoRaMacCommandsAddCmd>
 8014c36:	4603      	mov	r3, r0
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d026      	beq.n	8014c8a <LoRaMacMlmeRequest+0x2d6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014c3c:	2313      	movs	r3, #19
 8014c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8014c42:	e022      	b.n	8014c8a <LoRaMacMlmeRequest+0x2d6>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8014c44:	2301      	movs	r3, #1
 8014c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8014c4a:	f000 fab1 	bl	80151b0 <LoRaMacClassBIsAcquisitionInProgress>
 8014c4e:	4603      	mov	r3, r0
 8014c50:	f083 0301 	eor.w	r3, r3, #1
 8014c54:	b2db      	uxtb	r3, r3
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d009      	beq.n	8014c6e <LoRaMacMlmeRequest+0x2ba>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8014c5a:	2000      	movs	r0, #0
 8014c5c:	f000 fa8a 	bl	8015174 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8014c60:	2000      	movs	r0, #0
 8014c62:	f000 faac 	bl	80151be <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8014c66:	2300      	movs	r3, #0
 8014c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8014c6c:	e00e      	b.n	8014c8c <LoRaMacMlmeRequest+0x2d8>
                status = LORAMAC_STATUS_BUSY;
 8014c6e:	2301      	movs	r3, #1
 8014c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8014c74:	e00a      	b.n	8014c8c <LoRaMacMlmeRequest+0x2d8>
        }
        default:
            break;
 8014c76:	bf00      	nop
 8014c78:	e008      	b.n	8014c8c <LoRaMacMlmeRequest+0x2d8>
            break;
 8014c7a:	bf00      	nop
 8014c7c:	e006      	b.n	8014c8c <LoRaMacMlmeRequest+0x2d8>
            break;
 8014c7e:	bf00      	nop
 8014c80:	e004      	b.n	8014c8c <LoRaMacMlmeRequest+0x2d8>
            break;
 8014c82:	bf00      	nop
 8014c84:	e002      	b.n	8014c8c <LoRaMacMlmeRequest+0x2d8>
            break;
 8014c86:	bf00      	nop
 8014c88:	e000      	b.n	8014c8c <LoRaMacMlmeRequest+0x2d8>
            break;
 8014c8a:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8014c8c:	4b13      	ldr	r3, [pc, #76]	; (8014cdc <LoRaMacMlmeRequest+0x328>)
 8014c8e:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8014c96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d010      	beq.n	8014cc0 <LoRaMacMlmeRequest+0x30c>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8014c9e:	f001 f82b 	bl	8015cf8 <LoRaMacConfirmQueueGetCnt>
 8014ca2:	4603      	mov	r3, r0
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d110      	bne.n	8014cca <LoRaMacMlmeRequest+0x316>
        {
            MacCtx.NodeAckRequested = false;
 8014ca8:	4b0c      	ldr	r3, [pc, #48]	; (8014cdc <LoRaMacMlmeRequest+0x328>)
 8014caa:	2200      	movs	r2, #0
 8014cac:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8014cb0:	4a0a      	ldr	r2, [pc, #40]	; (8014cdc <LoRaMacMlmeRequest+0x328>)
 8014cb2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8014cb6:	f36f 0382 	bfc	r3, #2, #1
 8014cba:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8014cbe:	e004      	b.n	8014cca <LoRaMacMlmeRequest+0x316>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8014cc0:	f107 0320 	add.w	r3, r7, #32
 8014cc4:	4618      	mov	r0, r3
 8014cc6:	f000 fec3 	bl	8015a50 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8014cca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8014cce:	4618      	mov	r0, r3
 8014cd0:	3728      	adds	r7, #40	; 0x28
 8014cd2:	46bd      	mov	sp, r7
 8014cd4:	bd80      	pop	{r7, pc}
 8014cd6:	bf00      	nop
 8014cd8:	20000ca4 	.word	0x20000ca4
 8014cdc:	20000850 	.word	0x20000850
 8014ce0:	20000d6c 	.word	0x20000d6c

08014ce4 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8014ce4:	b5b0      	push	{r4, r5, r7, lr}
 8014ce6:	b092      	sub	sp, #72	; 0x48
 8014ce8:	af02      	add	r7, sp, #8
 8014cea:	6078      	str	r0, [r7, #4]
 8014cec:	460b      	mov	r3, r1
 8014cee:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014cf0:	2302      	movs	r3, #2
 8014cf2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    void* fBuffer = NULL;
 8014cfc:	2300      	movs	r3, #0
 8014cfe:	63bb      	str	r3, [r7, #56]	; 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8014d00:	2300      	movs	r3, #0
 8014d02:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool readyToSend = false;
 8014d06:	2300      	movs	r3, #0
 8014d08:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    if( mcpsRequest == NULL )
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d101      	bne.n	8014d16 <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014d12:	2303      	movs	r3, #3
 8014d14:	e113      	b.n	8014f3e <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	2200      	movs	r2, #0
 8014d1a:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 8014d1c:	f7fc f9e2 	bl	80110e4 <LoRaMacIsBusy>
 8014d20:	4603      	mov	r3, r0
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d001      	beq.n	8014d2a <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 8014d26:	2301      	movs	r3, #1
 8014d28:	e109      	b.n	8014f3e <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	f107 040c 	add.w	r4, r7, #12
 8014d30:	461d      	mov	r5, r3
 8014d32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014d34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014d36:	682b      	ldr	r3, [r5, #0]
 8014d38:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8014d40:	2214      	movs	r2, #20
 8014d42:	2100      	movs	r1, #0
 8014d44:	4880      	ldr	r0, [pc, #512]	; (8014f48 <LoRaMacMcpsRequest+0x264>)
 8014d46:	f004 fdd3 	bl	80198f0 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014d4a:	4b80      	ldr	r3, [pc, #512]	; (8014f4c <LoRaMacMcpsRequest+0x268>)
 8014d4c:	2201      	movs	r2, #1
 8014d4e:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8014d52:	4b7f      	ldr	r3, [pc, #508]	; (8014f50 <LoRaMacMcpsRequest+0x26c>)
 8014d54:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8014d58:	2b02      	cmp	r3, #2
 8014d5a:	d111      	bne.n	8014d80 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8014d5c:	4b7c      	ldr	r3, [pc, #496]	; (8014f50 <LoRaMacMcpsRequest+0x26c>)
 8014d5e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8014d62:	2b02      	cmp	r3, #2
 8014d64:	d10c      	bne.n	8014d80 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8014d66:	4b7a      	ldr	r3, [pc, #488]	; (8014f50 <LoRaMacMcpsRequest+0x26c>)
 8014d68:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 8014d6c:	f083 0301 	eor.w	r3, r3, #1
 8014d70:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d004      	beq.n	8014d80 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 8014d76:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d101      	bne.n	8014d80 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8014d7c:	2301      	movs	r3, #1
 8014d7e:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8014d80:	7b3b      	ldrb	r3, [r7, #12]
 8014d82:	2b03      	cmp	r3, #3
 8014d84:	d030      	beq.n	8014de8 <LoRaMacMcpsRequest+0x104>
 8014d86:	2b03      	cmp	r3, #3
 8014d88:	dc3f      	bgt.n	8014e0a <LoRaMacMcpsRequest+0x126>
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d002      	beq.n	8014d94 <LoRaMacMcpsRequest+0xb0>
 8014d8e:	2b01      	cmp	r3, #1
 8014d90:	d015      	beq.n	8014dbe <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8014d92:	e03a      	b.n	8014e0a <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8014d94:	2301      	movs	r3, #1
 8014d96:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8014d9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014d9e:	2202      	movs	r2, #2
 8014da0:	f362 1347 	bfi	r3, r2, #5, #3
 8014da4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8014da8:	7c3b      	ldrb	r3, [r7, #16]
 8014daa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8014dae:	697b      	ldr	r3, [r7, #20]
 8014db0:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8014db2:	8b3b      	ldrh	r3, [r7, #24]
 8014db4:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 8014db6:	7ebb      	ldrb	r3, [r7, #26]
 8014db8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8014dbc:	e026      	b.n	8014e0c <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8014dbe:	2301      	movs	r3, #1
 8014dc0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8014dc4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014dc8:	2204      	movs	r2, #4
 8014dca:	f362 1347 	bfi	r3, r2, #5, #3
 8014dce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Confirmed.fPort;
 8014dd2:	7c3b      	ldrb	r3, [r7, #16]
 8014dd4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 8014dd8:	697b      	ldr	r3, [r7, #20]
 8014dda:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8014ddc:	8b3b      	ldrh	r3, [r7, #24]
 8014dde:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Confirmed.Datarate;
 8014de0:	7ebb      	ldrb	r3, [r7, #26]
 8014de2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8014de6:	e011      	b.n	8014e0c <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8014de8:	2301      	movs	r3, #1
 8014dea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8014dee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014df2:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8014df6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 8014dfa:	693b      	ldr	r3, [r7, #16]
 8014dfc:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8014dfe:	8abb      	ldrh	r3, [r7, #20]
 8014e00:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Proprietary.Datarate;
 8014e02:	7dbb      	ldrb	r3, [r7, #22]
 8014e04:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8014e08:	e000      	b.n	8014e0c <LoRaMacMcpsRequest+0x128>
            break;
 8014e0a:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 8014e0c:	2302      	movs	r3, #2
 8014e0e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014e12:	4b4f      	ldr	r3, [pc, #316]	; (8014f50 <LoRaMacMcpsRequest+0x26c>)
 8014e14:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014e18:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014e1c:	4b4c      	ldr	r3, [pc, #304]	; (8014f50 <LoRaMacMcpsRequest+0x26c>)
 8014e1e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014e22:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8014e26:	4611      	mov	r1, r2
 8014e28:	4618      	mov	r0, r3
 8014e2a:	f002 f96e 	bl	801710a <RegionGetPhyParam>
 8014e2e:	4603      	mov	r3, r0
 8014e30:	62bb      	str	r3, [r7, #40]	; 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8014e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e34:	b25b      	sxtb	r3, r3
 8014e36:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 8014e3a:	4293      	cmp	r3, r2
 8014e3c:	bfb8      	it	lt
 8014e3e:	4613      	movlt	r3, r2
 8014e40:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8014e44:	4b42      	ldr	r3, [pc, #264]	; (8014f50 <LoRaMacMcpsRequest+0x26c>)
 8014e46:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8014e4a:	4a41      	ldr	r2, [pc, #260]	; (8014f50 <LoRaMacMcpsRequest+0x26c>)
 8014e4c:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 8014e50:	4a3f      	ldr	r2, [pc, #252]	; (8014f50 <LoRaMacMcpsRequest+0x26c>)
 8014e52:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 8014e56:	4618      	mov	r0, r3
 8014e58:	f7fc fae0 	bl	801141c <CheckForMinimumAbpDatarate>
 8014e5c:	4603      	mov	r3, r0
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d002      	beq.n	8014e68 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 8014e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e64:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if( readyToSend == true )
 8014e68:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d05f      	beq.n	8014f30 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8014e70:	4b37      	ldr	r3, [pc, #220]	; (8014f50 <LoRaMacMcpsRequest+0x26c>)
 8014e72:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8014e76:	f083 0301 	eor.w	r3, r3, #1
 8014e7a:	b2db      	uxtb	r3, r3
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d10e      	bne.n	8014e9e <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8014e80:	4b33      	ldr	r3, [pc, #204]	; (8014f50 <LoRaMacMcpsRequest+0x26c>)
 8014e82:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8014e86:	4a32      	ldr	r2, [pc, #200]	; (8014f50 <LoRaMacMcpsRequest+0x26c>)
 8014e88:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 8014e8c:	4a30      	ldr	r2, [pc, #192]	; (8014f50 <LoRaMacMcpsRequest+0x26c>)
 8014e8e:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 8014e92:	4618      	mov	r0, r3
 8014e94:	f7fc fac2 	bl	801141c <CheckForMinimumAbpDatarate>
 8014e98:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d01c      	beq.n	8014ed8 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8014e9e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8014ea2:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014ea6:	4b2a      	ldr	r3, [pc, #168]	; (8014f50 <LoRaMacMcpsRequest+0x26c>)
 8014ea8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014eac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8014eb0:	4b27      	ldr	r3, [pc, #156]	; (8014f50 <LoRaMacMcpsRequest+0x26c>)
 8014eb2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014eb6:	f107 0120 	add.w	r1, r7, #32
 8014eba:	2205      	movs	r2, #5
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	f002 f95f 	bl	8017180 <RegionVerify>
 8014ec2:	4603      	mov	r3, r0
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d005      	beq.n	8014ed4 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014ec8:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8014ecc:	4b20      	ldr	r3, [pc, #128]	; (8014f50 <LoRaMacMcpsRequest+0x26c>)
 8014ece:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8014ed2:	e001      	b.n	8014ed8 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8014ed4:	2303      	movs	r3, #3
 8014ed6:	e032      	b.n	8014f3e <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8014ed8:	4b1d      	ldr	r3, [pc, #116]	; (8014f50 <LoRaMacMcpsRequest+0x26c>)
 8014eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014ede:	4a1b      	ldr	r2, [pc, #108]	; (8014f4c <LoRaMacMcpsRequest+0x268>)
 8014ee0:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 8014ee4:	4611      	mov	r1, r2
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	f7fc fb84 	bl	80115f4 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8014eec:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014eee:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8014ef2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8014ef6:	78fb      	ldrb	r3, [r7, #3]
 8014ef8:	9300      	str	r3, [sp, #0]
 8014efa:	4613      	mov	r3, r2
 8014efc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014efe:	f7fd fb23 	bl	8012548 <Send>
 8014f02:	4603      	mov	r3, r0
 8014f04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if( status == LORAMAC_STATUS_OK )
 8014f08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d10b      	bne.n	8014f28 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8014f10:	7b3a      	ldrb	r2, [r7, #12]
 8014f12:	4b0e      	ldr	r3, [pc, #56]	; (8014f4c <LoRaMacMcpsRequest+0x268>)
 8014f14:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8014f18:	4a0c      	ldr	r2, [pc, #48]	; (8014f4c <LoRaMacMcpsRequest+0x268>)
 8014f1a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8014f1e:	f043 0301 	orr.w	r3, r3, #1
 8014f22:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8014f26:	e003      	b.n	8014f30 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8014f28:	4b08      	ldr	r3, [pc, #32]	; (8014f4c <LoRaMacMcpsRequest+0x268>)
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8014f30:	4b06      	ldr	r3, [pc, #24]	; (8014f4c <LoRaMacMcpsRequest+0x268>)
 8014f32:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	611a      	str	r2, [r3, #16]

    return status;
 8014f3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014f3e:	4618      	mov	r0, r3
 8014f40:	3740      	adds	r7, #64	; 0x40
 8014f42:	46bd      	mov	sp, r7
 8014f44:	bdb0      	pop	{r4, r5, r7, pc}
 8014f46:	bf00      	nop
 8014f48:	20000c90 	.word	0x20000c90
 8014f4c:	20000850 	.word	0x20000850
 8014f50:	20000d6c 	.word	0x20000d6c

08014f54 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8014f54:	b580      	push	{r7, lr}
 8014f56:	b084      	sub	sp, #16
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	4603      	mov	r3, r0
 8014f5c:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8014f5e:	79fb      	ldrb	r3, [r7, #7]
 8014f60:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8014f62:	4b0d      	ldr	r3, [pc, #52]	; (8014f98 <LoRaMacTestSetDutyCycleOn+0x44>)
 8014f64:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014f68:	f107 010c 	add.w	r1, r7, #12
 8014f6c:	220f      	movs	r2, #15
 8014f6e:	4618      	mov	r0, r3
 8014f70:	f002 f906 	bl	8017180 <RegionVerify>
 8014f74:	4603      	mov	r3, r0
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d00a      	beq.n	8014f90 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8014f7a:	4a07      	ldr	r2, [pc, #28]	; (8014f98 <LoRaMacTestSetDutyCycleOn+0x44>)
 8014f7c:	79fb      	ldrb	r3, [r7, #7]
 8014f7e:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8014f82:	4a06      	ldr	r2, [pc, #24]	; (8014f9c <LoRaMacTestSetDutyCycleOn+0x48>)
 8014f84:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8014f88:	f043 0320 	orr.w	r3, r3, #32
 8014f8c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 8014f90:	bf00      	nop
 8014f92:	3710      	adds	r7, #16
 8014f94:	46bd      	mov	sp, r7
 8014f96:	bd80      	pop	{r7, pc}
 8014f98:	20000d6c 	.word	0x20000d6c
 8014f9c:	20000850 	.word	0x20000850

08014fa0 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8014fa4:	f7fe fe94 	bl	8013cd0 <LoRaMacStop>
 8014fa8:	4603      	mov	r3, r0
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d112      	bne.n	8014fd4 <LoRaMacDeInitialization+0x34>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8014fae:	480b      	ldr	r0, [pc, #44]	; (8014fdc <LoRaMacDeInitialization+0x3c>)
 8014fb0:	f008 fdfe 	bl	801dbb0 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8014fb4:	480a      	ldr	r0, [pc, #40]	; (8014fe0 <LoRaMacDeInitialization+0x40>)
 8014fb6:	f008 fdfb 	bl	801dbb0 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8014fba:	480a      	ldr	r0, [pc, #40]	; (8014fe4 <LoRaMacDeInitialization+0x44>)
 8014fbc:	f008 fdf8 	bl	801dbb0 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8014fc0:	f000 f94a 	bl	8015258 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8014fc4:	2000      	movs	r0, #0
 8014fc6:	f7fd fe1d 	bl	8012c04 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8014fca:	4b07      	ldr	r3, [pc, #28]	; (8014fe8 <LoRaMacDeInitialization+0x48>)
 8014fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fce:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8014fd0:	2300      	movs	r3, #0
 8014fd2:	e000      	b.n	8014fd6 <LoRaMacDeInitialization+0x36>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8014fd4:	2301      	movs	r3, #1
    }
}
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	bd80      	pop	{r7, pc}
 8014fda:	bf00      	nop
 8014fdc:	20000bb8 	.word	0x20000bb8
 8014fe0:	20000bd0 	.word	0x20000bd0
 8014fe4:	20000be8 	.word	0x20000be8
 8014fe8:	0801f4f4 	.word	0x0801f4f4

08014fec <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b08c      	sub	sp, #48	; 0x30
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	60f8      	str	r0, [r7, #12]
 8014ff4:	60b9      	str	r1, [r7, #8]
 8014ff6:	607a      	str	r2, [r7, #4]
 8014ff8:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8014ffa:	2300      	movs	r3, #0
 8014ffc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	7b1b      	ldrb	r3, [r3, #12]
 8015004:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	7b5b      	ldrb	r3, [r3, #13]
 801500c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	7b9b      	ldrb	r3, [r3, #14]
 8015014:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	685a      	ldr	r2, [r3, #4]
 801501c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801501e:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	785b      	ldrb	r3, [r3, #1]
 8015024:	2b00      	cmp	r3, #0
 8015026:	f000 8088 	beq.w	801513a <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 801502a:	2302      	movs	r3, #2
 801502c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	7bdb      	ldrb	r3, [r3, #15]
 8015034:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	7c1b      	ldrb	r3, [r3, #16]
 801503c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015040:	4611      	mov	r1, r2
 8015042:	4618      	mov	r0, r3
 8015044:	f002 f861 	bl	801710a <RegionGetPhyParam>
 8015048:	4603      	mov	r3, r0
 801504a:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 801504c:	6a3b      	ldr	r3, [r7, #32]
 801504e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        datarate = MAX( datarate, minTxDatarate );
 8015052:	f997 202b 	ldrsb.w	r2, [r7, #43]	; 0x2b
 8015056:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 801505a:	4293      	cmp	r3, r2
 801505c:	bfb8      	it	lt
 801505e:	4613      	movlt	r3, r2
 8015060:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	685b      	ldr	r3, [r3, #4]
 8015068:	68fa      	ldr	r2, [r7, #12]
 801506a:	8912      	ldrh	r2, [r2, #8]
 801506c:	4293      	cmp	r3, r2
 801506e:	d302      	bcc.n	8015076 <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8015070:	2301      	movs	r3, #1
 8015072:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8015076:	68fb      	ldr	r3, [r7, #12]
 8015078:	685b      	ldr	r3, [r3, #4]
 801507a:	68fa      	ldr	r2, [r7, #12]
 801507c:	8912      	ldrh	r2, [r2, #8]
 801507e:	4611      	mov	r1, r2
 8015080:	68fa      	ldr	r2, [r7, #12]
 8015082:	8952      	ldrh	r2, [r2, #10]
 8015084:	440a      	add	r2, r1
 8015086:	4293      	cmp	r3, r2
 8015088:	d30f      	bcc.n	80150aa <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 801508a:	230a      	movs	r3, #10
 801508c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	7c1b      	ldrb	r3, [r3, #16]
 8015094:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015098:	4611      	mov	r1, r2
 801509a:	4618      	mov	r0, r3
 801509c:	f002 f835 	bl	801710a <RegionGetPhyParam>
 80150a0:	4603      	mov	r3, r0
 80150a2:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 80150a4:	6a3b      	ldr	r3, [r7, #32]
 80150a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	685b      	ldr	r3, [r3, #4]
 80150ae:	68fa      	ldr	r2, [r7, #12]
 80150b0:	8912      	ldrh	r2, [r2, #8]
 80150b2:	4611      	mov	r1, r2
 80150b4:	68fa      	ldr	r2, [r7, #12]
 80150b6:	8952      	ldrh	r2, [r2, #10]
 80150b8:	0052      	lsls	r2, r2, #1
 80150ba:	440a      	add	r2, r1
 80150bc:	4293      	cmp	r3, r2
 80150be:	d33c      	bcc.n	801513a <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	685b      	ldr	r3, [r3, #4]
 80150c4:	68fa      	ldr	r2, [r7, #12]
 80150c6:	8912      	ldrh	r2, [r2, #8]
 80150c8:	1a9b      	subs	r3, r3, r2
 80150ca:	68fa      	ldr	r2, [r7, #12]
 80150cc:	8952      	ldrh	r2, [r2, #10]
 80150ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80150d2:	fb01 f202 	mul.w	r2, r1, r2
 80150d6:	1a9b      	subs	r3, r3, r2
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d12e      	bne.n	801513a <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 80150dc:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80150e0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80150e4:	429a      	cmp	r2, r3
 80150e6:	d110      	bne.n	801510a <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	781b      	ldrb	r3, [r3, #0]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d009      	beq.n	8015104 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80150f0:	2302      	movs	r3, #2
 80150f2:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	7c1b      	ldrb	r3, [r3, #16]
 80150f8:	f107 0210 	add.w	r2, r7, #16
 80150fc:	4611      	mov	r1, r2
 80150fe:	4618      	mov	r0, r3
 8015100:	f002 f82c 	bl	801715c <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8015104:	2301      	movs	r3, #1
 8015106:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801510a:	2321      	movs	r3, #33	; 0x21
 801510c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                getPhy.Datarate = datarate;
 8015110:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8015114:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	7bdb      	ldrb	r3, [r3, #15]
 801511c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	7c1b      	ldrb	r3, [r3, #16]
 8015124:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015128:	4611      	mov	r1, r2
 801512a:	4618      	mov	r0, r3
 801512c:	f001 ffed 	bl	801710a <RegionGetPhyParam>
 8015130:	4603      	mov	r3, r0
 8015132:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 8015134:	6a3b      	ldr	r3, [r7, #32]
 8015136:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }
        }
    }

    *drOut = datarate;
 801513a:	68bb      	ldr	r3, [r7, #8]
 801513c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8015140:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8015148:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 801514a:	683b      	ldr	r3, [r7, #0]
 801514c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015150:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8015152:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015156:	4618      	mov	r0, r3
 8015158:	3730      	adds	r7, #48	; 0x30
 801515a:	46bd      	mov	sp, r7
 801515c:	bd80      	pop	{r7, pc}

0801515e <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 801515e:	b480      	push	{r7}
 8015160:	b085      	sub	sp, #20
 8015162:	af00      	add	r7, sp, #0
 8015164:	60f8      	str	r0, [r7, #12]
 8015166:	60b9      	str	r1, [r7, #8]
 8015168:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801516a:	bf00      	nop
 801516c:	3714      	adds	r7, #20
 801516e:	46bd      	mov	sp, r7
 8015170:	bc80      	pop	{r7}
 8015172:	4770      	bx	lr

08015174 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8015174:	b480      	push	{r7}
 8015176:	b083      	sub	sp, #12
 8015178:	af00      	add	r7, sp, #0
 801517a:	4603      	mov	r3, r0
 801517c:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801517e:	bf00      	nop
 8015180:	370c      	adds	r7, #12
 8015182:	46bd      	mov	sp, r7
 8015184:	bc80      	pop	{r7}
 8015186:	4770      	bx	lr

08015188 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8015188:	b480      	push	{r7}
 801518a:	b083      	sub	sp, #12
 801518c:	af00      	add	r7, sp, #0
 801518e:	4603      	mov	r3, r0
 8015190:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015192:	bf00      	nop
 8015194:	370c      	adds	r7, #12
 8015196:	46bd      	mov	sp, r7
 8015198:	bc80      	pop	{r7}
 801519a:	4770      	bx	lr

0801519c <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 801519c:	b480      	push	{r7}
 801519e:	b083      	sub	sp, #12
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	4603      	mov	r3, r0
 80151a4:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80151a6:	bf00      	nop
 80151a8:	370c      	adds	r7, #12
 80151aa:	46bd      	mov	sp, r7
 80151ac:	bc80      	pop	{r7}
 80151ae:	4770      	bx	lr

080151b0 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 80151b0:	b480      	push	{r7}
 80151b2:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 80151b4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80151b6:	4618      	mov	r0, r3
 80151b8:	46bd      	mov	sp, r7
 80151ba:	bc80      	pop	{r7}
 80151bc:	4770      	bx	lr

080151be <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 80151be:	b480      	push	{r7}
 80151c0:	b083      	sub	sp, #12
 80151c2:	af00      	add	r7, sp, #0
 80151c4:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80151c6:	bf00      	nop
 80151c8:	370c      	adds	r7, #12
 80151ca:	46bd      	mov	sp, r7
 80151cc:	bc80      	pop	{r7}
 80151ce:	4770      	bx	lr

080151d0 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 80151d0:	b480      	push	{r7}
 80151d2:	b083      	sub	sp, #12
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80151d8:	bf00      	nop
 80151da:	370c      	adds	r7, #12
 80151dc:	46bd      	mov	sp, r7
 80151de:	bc80      	pop	{r7}
 80151e0:	4770      	bx	lr

080151e2 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 80151e2:	b480      	push	{r7}
 80151e4:	b083      	sub	sp, #12
 80151e6:	af00      	add	r7, sp, #0
 80151e8:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80151ea:	bf00      	nop
 80151ec:	370c      	adds	r7, #12
 80151ee:	46bd      	mov	sp, r7
 80151f0:	bc80      	pop	{r7}
 80151f2:	4770      	bx	lr

080151f4 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80151f4:	b480      	push	{r7}
 80151f6:	b083      	sub	sp, #12
 80151f8:	af00      	add	r7, sp, #0
 80151fa:	6078      	str	r0, [r7, #4]
 80151fc:	460b      	mov	r3, r1
 80151fe:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8015200:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015202:	4618      	mov	r0, r3
 8015204:	370c      	adds	r7, #12
 8015206:	46bd      	mov	sp, r7
 8015208:	bc80      	pop	{r7}
 801520a:	4770      	bx	lr

0801520c <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 801520c:	b480      	push	{r7}
 801520e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015210:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015212:	4618      	mov	r0, r3
 8015214:	46bd      	mov	sp, r7
 8015216:	bc80      	pop	{r7}
 8015218:	4770      	bx	lr

0801521a <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 801521a:	b480      	push	{r7}
 801521c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801521e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015220:	4618      	mov	r0, r3
 8015222:	46bd      	mov	sp, r7
 8015224:	bc80      	pop	{r7}
 8015226:	4770      	bx	lr

08015228 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8015228:	b480      	push	{r7}
 801522a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801522c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801522e:	4618      	mov	r0, r3
 8015230:	46bd      	mov	sp, r7
 8015232:	bc80      	pop	{r7}
 8015234:	4770      	bx	lr

08015236 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8015236:	b480      	push	{r7}
 8015238:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801523a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801523c:	4618      	mov	r0, r3
 801523e:	46bd      	mov	sp, r7
 8015240:	bc80      	pop	{r7}
 8015242:	4770      	bx	lr

08015244 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8015244:	b480      	push	{r7}
 8015246:	b083      	sub	sp, #12
 8015248:	af00      	add	r7, sp, #0
 801524a:	4603      	mov	r3, r0
 801524c:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801524e:	bf00      	nop
 8015250:	370c      	adds	r7, #12
 8015252:	46bd      	mov	sp, r7
 8015254:	bc80      	pop	{r7}
 8015256:	4770      	bx	lr

08015258 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8015258:	b480      	push	{r7}
 801525a:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801525c:	bf00      	nop
 801525e:	46bd      	mov	sp, r7
 8015260:	bc80      	pop	{r7}
 8015262:	4770      	bx	lr

08015264 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8015264:	b480      	push	{r7}
 8015266:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015268:	bf00      	nop
 801526a:	46bd      	mov	sp, r7
 801526c:	bc80      	pop	{r7}
 801526e:	4770      	bx	lr

08015270 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8015270:	b480      	push	{r7}
 8015272:	b083      	sub	sp, #12
 8015274:	af00      	add	r7, sp, #0
 8015276:	4603      	mov	r3, r0
 8015278:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801527a:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801527c:	4618      	mov	r0, r3
 801527e:	370c      	adds	r7, #12
 8015280:	46bd      	mov	sp, r7
 8015282:	bc80      	pop	{r7}
 8015284:	4770      	bx	lr

08015286 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8015286:	b480      	push	{r7}
 8015288:	b083      	sub	sp, #12
 801528a:	af00      	add	r7, sp, #0
 801528c:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801528e:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015290:	4618      	mov	r0, r3
 8015292:	370c      	adds	r7, #12
 8015294:	46bd      	mov	sp, r7
 8015296:	bc80      	pop	{r7}
 8015298:	4770      	bx	lr

0801529a <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 801529a:	b480      	push	{r7}
 801529c:	b083      	sub	sp, #12
 801529e:	af00      	add	r7, sp, #0
 80152a0:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80152a2:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80152a4:	4618      	mov	r0, r3
 80152a6:	370c      	adds	r7, #12
 80152a8:	46bd      	mov	sp, r7
 80152aa:	bc80      	pop	{r7}
 80152ac:	4770      	bx	lr

080152ae <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 80152ae:	b480      	push	{r7}
 80152b0:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80152b2:	bf00      	nop
 80152b4:	46bd      	mov	sp, r7
 80152b6:	bc80      	pop	{r7}
 80152b8:	4770      	bx	lr

080152ba <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 80152ba:	b480      	push	{r7}
 80152bc:	b083      	sub	sp, #12
 80152be:	af00      	add	r7, sp, #0
 80152c0:	4603      	mov	r3, r0
 80152c2:	6039      	str	r1, [r7, #0]
 80152c4:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 80152c6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80152c8:	4618      	mov	r0, r3
 80152ca:	370c      	adds	r7, #12
 80152cc:	46bd      	mov	sp, r7
 80152ce:	bc80      	pop	{r7}
 80152d0:	4770      	bx	lr

080152d2 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 80152d2:	b480      	push	{r7}
 80152d4:	b083      	sub	sp, #12
 80152d6:	af00      	add	r7, sp, #0
 80152d8:	4603      	mov	r3, r0
 80152da:	603a      	str	r2, [r7, #0]
 80152dc:	80fb      	strh	r3, [r7, #6]
 80152de:	460b      	mov	r3, r1
 80152e0:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80152e2:	bf00      	nop
 80152e4:	370c      	adds	r7, #12
 80152e6:	46bd      	mov	sp, r7
 80152e8:	bc80      	pop	{r7}
 80152ea:	4770      	bx	lr

080152ec <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80152ec:	b480      	push	{r7}
 80152ee:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80152f0:	bf00      	nop
 80152f2:	46bd      	mov	sp, r7
 80152f4:	bc80      	pop	{r7}
 80152f6:	4770      	bx	lr

080152f8 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80152f8:	b480      	push	{r7}
 80152fa:	b083      	sub	sp, #12
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8015300:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015302:	4618      	mov	r0, r3
 8015304:	370c      	adds	r7, #12
 8015306:	46bd      	mov	sp, r7
 8015308:	bc80      	pop	{r7}
 801530a:	4770      	bx	lr

0801530c <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 801530c:	b480      	push	{r7}
 801530e:	b083      	sub	sp, #12
 8015310:	af00      	add	r7, sp, #0
 8015312:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8015314:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015316:	4618      	mov	r0, r3
 8015318:	370c      	adds	r7, #12
 801531a:	46bd      	mov	sp, r7
 801531c:	bc80      	pop	{r7}
 801531e:	4770      	bx	lr

08015320 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8015320:	b480      	push	{r7}
 8015322:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015324:	bf00      	nop
 8015326:	46bd      	mov	sp, r7
 8015328:	bc80      	pop	{r7}
 801532a:	4770      	bx	lr

0801532c <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 801532c:	b480      	push	{r7}
 801532e:	b083      	sub	sp, #12
 8015330:	af00      	add	r7, sp, #0
 8015332:	6078      	str	r0, [r7, #4]
 8015334:	460b      	mov	r3, r1
 8015336:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015338:	bf00      	nop
 801533a:	370c      	adds	r7, #12
 801533c:	46bd      	mov	sp, r7
 801533e:	bc80      	pop	{r7}
 8015340:	4770      	bx	lr

08015342 <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8015342:	b480      	push	{r7}
 8015344:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015346:	bf00      	nop
 8015348:	46bd      	mov	sp, r7
 801534a:	bc80      	pop	{r7}
 801534c:	4770      	bx	lr

0801534e <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 801534e:	b480      	push	{r7}
 8015350:	b085      	sub	sp, #20
 8015352:	af00      	add	r7, sp, #0
 8015354:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801535a:	2300      	movs	r3, #0
 801535c:	81fb      	strh	r3, [r7, #14]
 801535e:	e00a      	b.n	8015376 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8015360:	89fb      	ldrh	r3, [r7, #14]
 8015362:	68ba      	ldr	r2, [r7, #8]
 8015364:	4413      	add	r3, r2
 8015366:	781b      	ldrb	r3, [r3, #0]
 8015368:	2b00      	cmp	r3, #0
 801536a:	d001      	beq.n	8015370 <IsSlotFree+0x22>
        {
            return false;
 801536c:	2300      	movs	r3, #0
 801536e:	e006      	b.n	801537e <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8015370:	89fb      	ldrh	r3, [r7, #14]
 8015372:	3301      	adds	r3, #1
 8015374:	81fb      	strh	r3, [r7, #14]
 8015376:	89fb      	ldrh	r3, [r7, #14]
 8015378:	2b0f      	cmp	r3, #15
 801537a:	d9f1      	bls.n	8015360 <IsSlotFree+0x12>
        }
    }
    return true;
 801537c:	2301      	movs	r3, #1
}
 801537e:	4618      	mov	r0, r3
 8015380:	3714      	adds	r7, #20
 8015382:	46bd      	mov	sp, r7
 8015384:	bc80      	pop	{r7}
 8015386:	4770      	bx	lr

08015388 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8015388:	b580      	push	{r7, lr}
 801538a:	b082      	sub	sp, #8
 801538c:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 801538e:	2300      	movs	r3, #0
 8015390:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8015392:	e007      	b.n	80153a4 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8015394:	79fb      	ldrb	r3, [r7, #7]
 8015396:	3301      	adds	r3, #1
 8015398:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 801539a:	79fb      	ldrb	r3, [r7, #7]
 801539c:	2b20      	cmp	r3, #32
 801539e:	d101      	bne.n	80153a4 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 80153a0:	2300      	movs	r3, #0
 80153a2:	e012      	b.n	80153ca <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80153a4:	79fb      	ldrb	r3, [r7, #7]
 80153a6:	011b      	lsls	r3, r3, #4
 80153a8:	3308      	adds	r3, #8
 80153aa:	4a0a      	ldr	r2, [pc, #40]	; (80153d4 <MallocNewMacCommandSlot+0x4c>)
 80153ac:	4413      	add	r3, r2
 80153ae:	4618      	mov	r0, r3
 80153b0:	f7ff ffcd 	bl	801534e <IsSlotFree>
 80153b4:	4603      	mov	r3, r0
 80153b6:	f083 0301 	eor.w	r3, r3, #1
 80153ba:	b2db      	uxtb	r3, r3
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d1e9      	bne.n	8015394 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 80153c0:	79fb      	ldrb	r3, [r7, #7]
 80153c2:	011b      	lsls	r3, r3, #4
 80153c4:	3308      	adds	r3, #8
 80153c6:	4a03      	ldr	r2, [pc, #12]	; (80153d4 <MallocNewMacCommandSlot+0x4c>)
 80153c8:	4413      	add	r3, r2
}
 80153ca:	4618      	mov	r0, r3
 80153cc:	3708      	adds	r7, #8
 80153ce:	46bd      	mov	sp, r7
 80153d0:	bd80      	pop	{r7, pc}
 80153d2:	bf00      	nop
 80153d4:	200019ac 	.word	0x200019ac

080153d8 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	b082      	sub	sp, #8
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d101      	bne.n	80153ea <FreeMacCommandSlot+0x12>
    {
        return false;
 80153e6:	2300      	movs	r3, #0
 80153e8:	e005      	b.n	80153f6 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80153ea:	2210      	movs	r2, #16
 80153ec:	2100      	movs	r1, #0
 80153ee:	6878      	ldr	r0, [r7, #4]
 80153f0:	f004 fa7e 	bl	80198f0 <memset1>

    return true;
 80153f4:	2301      	movs	r3, #1
}
 80153f6:	4618      	mov	r0, r3
 80153f8:	3708      	adds	r7, #8
 80153fa:	46bd      	mov	sp, r7
 80153fc:	bd80      	pop	{r7, pc}

080153fe <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 80153fe:	b480      	push	{r7}
 8015400:	b083      	sub	sp, #12
 8015402:	af00      	add	r7, sp, #0
 8015404:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d101      	bne.n	8015410 <LinkedListInit+0x12>
    {
        return false;
 801540c:	2300      	movs	r3, #0
 801540e:	e006      	b.n	801541e <LinkedListInit+0x20>
    }

    list->First = NULL;
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	2200      	movs	r2, #0
 8015414:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	2200      	movs	r2, #0
 801541a:	605a      	str	r2, [r3, #4]

    return true;
 801541c:	2301      	movs	r3, #1
}
 801541e:	4618      	mov	r0, r3
 8015420:	370c      	adds	r7, #12
 8015422:	46bd      	mov	sp, r7
 8015424:	bc80      	pop	{r7}
 8015426:	4770      	bx	lr

08015428 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8015428:	b480      	push	{r7}
 801542a:	b083      	sub	sp, #12
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
 8015430:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	2b00      	cmp	r3, #0
 8015436:	d002      	beq.n	801543e <LinkedListAdd+0x16>
 8015438:	683b      	ldr	r3, [r7, #0]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d101      	bne.n	8015442 <LinkedListAdd+0x1a>
    {
        return false;
 801543e:	2300      	movs	r3, #0
 8015440:	e015      	b.n	801546e <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d102      	bne.n	8015450 <LinkedListAdd+0x28>
    {
        list->First = element;
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	683a      	ldr	r2, [r7, #0]
 801544e:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	685b      	ldr	r3, [r3, #4]
 8015454:	2b00      	cmp	r3, #0
 8015456:	d003      	beq.n	8015460 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	685b      	ldr	r3, [r3, #4]
 801545c:	683a      	ldr	r2, [r7, #0]
 801545e:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8015460:	683b      	ldr	r3, [r7, #0]
 8015462:	2200      	movs	r2, #0
 8015464:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	683a      	ldr	r2, [r7, #0]
 801546a:	605a      	str	r2, [r3, #4]

    return true;
 801546c:	2301      	movs	r3, #1
}
 801546e:	4618      	mov	r0, r3
 8015470:	370c      	adds	r7, #12
 8015472:	46bd      	mov	sp, r7
 8015474:	bc80      	pop	{r7}
 8015476:	4770      	bx	lr

08015478 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8015478:	b480      	push	{r7}
 801547a:	b085      	sub	sp, #20
 801547c:	af00      	add	r7, sp, #0
 801547e:	6078      	str	r0, [r7, #4]
 8015480:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d002      	beq.n	801548e <LinkedListGetPrevious+0x16>
 8015488:	683b      	ldr	r3, [r7, #0]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d101      	bne.n	8015492 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 801548e:	2300      	movs	r3, #0
 8015490:	e016      	b.n	80154c0 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8015498:	683a      	ldr	r2, [r7, #0]
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	429a      	cmp	r2, r3
 801549e:	d00c      	beq.n	80154ba <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80154a0:	e002      	b.n	80154a8 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d007      	beq.n	80154be <LinkedListGetPrevious+0x46>
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	683a      	ldr	r2, [r7, #0]
 80154b4:	429a      	cmp	r2, r3
 80154b6:	d1f4      	bne.n	80154a2 <LinkedListGetPrevious+0x2a>
 80154b8:	e001      	b.n	80154be <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 80154ba:	2300      	movs	r3, #0
 80154bc:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 80154be:	68fb      	ldr	r3, [r7, #12]
}
 80154c0:	4618      	mov	r0, r3
 80154c2:	3714      	adds	r7, #20
 80154c4:	46bd      	mov	sp, r7
 80154c6:	bc80      	pop	{r7}
 80154c8:	4770      	bx	lr

080154ca <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 80154ca:	b580      	push	{r7, lr}
 80154cc:	b084      	sub	sp, #16
 80154ce:	af00      	add	r7, sp, #0
 80154d0:	6078      	str	r0, [r7, #4]
 80154d2:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d002      	beq.n	80154e0 <LinkedListRemove+0x16>
 80154da:	683b      	ldr	r3, [r7, #0]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d101      	bne.n	80154e4 <LinkedListRemove+0x1a>
    {
        return false;
 80154e0:	2300      	movs	r3, #0
 80154e2:	e020      	b.n	8015526 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 80154e4:	6839      	ldr	r1, [r7, #0]
 80154e6:	6878      	ldr	r0, [r7, #4]
 80154e8:	f7ff ffc6 	bl	8015478 <LinkedListGetPrevious>
 80154ec:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	683a      	ldr	r2, [r7, #0]
 80154f4:	429a      	cmp	r2, r3
 80154f6:	d103      	bne.n	8015500 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 80154f8:	683b      	ldr	r3, [r7, #0]
 80154fa:	681a      	ldr	r2, [r3, #0]
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	685b      	ldr	r3, [r3, #4]
 8015504:	683a      	ldr	r2, [r7, #0]
 8015506:	429a      	cmp	r2, r3
 8015508:	d102      	bne.n	8015510 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	68fa      	ldr	r2, [r7, #12]
 801550e:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	2b00      	cmp	r3, #0
 8015514:	d003      	beq.n	801551e <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8015516:	683b      	ldr	r3, [r7, #0]
 8015518:	681a      	ldr	r2, [r3, #0]
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 801551e:	683b      	ldr	r3, [r7, #0]
 8015520:	2200      	movs	r2, #0
 8015522:	601a      	str	r2, [r3, #0]

    return true;
 8015524:	2301      	movs	r3, #1
}
 8015526:	4618      	mov	r0, r3
 8015528:	3710      	adds	r7, #16
 801552a:	46bd      	mov	sp, r7
 801552c:	bd80      	pop	{r7, pc}
	...

08015530 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8015530:	b480      	push	{r7}
 8015532:	b083      	sub	sp, #12
 8015534:	af00      	add	r7, sp, #0
 8015536:	4603      	mov	r3, r0
 8015538:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 801553a:	79fb      	ldrb	r3, [r7, #7]
 801553c:	2b11      	cmp	r3, #17
 801553e:	bf8c      	ite	hi
 8015540:	2201      	movhi	r2, #1
 8015542:	2200      	movls	r2, #0
 8015544:	b2d2      	uxtb	r2, r2
 8015546:	2a00      	cmp	r2, #0
 8015548:	d10d      	bne.n	8015566 <IsSticky+0x36>
 801554a:	4a0a      	ldr	r2, [pc, #40]	; (8015574 <IsSticky+0x44>)
 801554c:	fa22 f303 	lsr.w	r3, r2, r3
 8015550:	f003 0301 	and.w	r3, r3, #1
 8015554:	2b00      	cmp	r3, #0
 8015556:	bf14      	ite	ne
 8015558:	2301      	movne	r3, #1
 801555a:	2300      	moveq	r3, #0
 801555c:	b2db      	uxtb	r3, r3
 801555e:	2b00      	cmp	r3, #0
 8015560:	d001      	beq.n	8015566 <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8015562:	2301      	movs	r3, #1
 8015564:	e000      	b.n	8015568 <IsSticky+0x38>
        default:
            return false;
 8015566:	2300      	movs	r3, #0
    }
}
 8015568:	4618      	mov	r0, r3
 801556a:	370c      	adds	r7, #12
 801556c:	46bd      	mov	sp, r7
 801556e:	bc80      	pop	{r7}
 8015570:	4770      	bx	lr
 8015572:	bf00      	nop
 8015574:	00020720 	.word	0x00020720

08015578 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8015578:	b480      	push	{r7}
 801557a:	b083      	sub	sp, #12
 801557c:	af00      	add	r7, sp, #0
 801557e:	4603      	mov	r3, r0
 8015580:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8015582:	2300      	movs	r3, #0
    }
}
 8015584:	4618      	mov	r0, r3
 8015586:	370c      	adds	r7, #12
 8015588:	46bd      	mov	sp, r7
 801558a:	bc80      	pop	{r7}
 801558c:	4770      	bx	lr
	...

08015590 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8015590:	b580      	push	{r7, lr}
 8015592:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8015594:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8015598:	2100      	movs	r1, #0
 801559a:	4804      	ldr	r0, [pc, #16]	; (80155ac <LoRaMacCommandsInit+0x1c>)
 801559c:	f004 f9a8 	bl	80198f0 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 80155a0:	4802      	ldr	r0, [pc, #8]	; (80155ac <LoRaMacCommandsInit+0x1c>)
 80155a2:	f7ff ff2c 	bl	80153fe <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 80155a6:	2300      	movs	r3, #0
}
 80155a8:	4618      	mov	r0, r3
 80155aa:	bd80      	pop	{r7, pc}
 80155ac:	200019ac 	.word	0x200019ac

080155b0 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b086      	sub	sp, #24
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	4603      	mov	r3, r0
 80155b8:	60b9      	str	r1, [r7, #8]
 80155ba:	607a      	str	r2, [r7, #4]
 80155bc:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 80155be:	68bb      	ldr	r3, [r7, #8]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d101      	bne.n	80155c8 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80155c4:	2301      	movs	r3, #1
 80155c6:	e03b      	b.n	8015640 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 80155c8:	f7ff fede 	bl	8015388 <MallocNewMacCommandSlot>
 80155cc:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 80155ce:	697b      	ldr	r3, [r7, #20]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d101      	bne.n	80155d8 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80155d4:	2302      	movs	r3, #2
 80155d6:	e033      	b.n	8015640 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 80155d8:	6979      	ldr	r1, [r7, #20]
 80155da:	481b      	ldr	r0, [pc, #108]	; (8015648 <LoRaMacCommandsAddCmd+0x98>)
 80155dc:	f7ff ff24 	bl	8015428 <LinkedListAdd>
 80155e0:	4603      	mov	r3, r0
 80155e2:	f083 0301 	eor.w	r3, r3, #1
 80155e6:	b2db      	uxtb	r3, r3
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d001      	beq.n	80155f0 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 80155ec:	2305      	movs	r3, #5
 80155ee:	e027      	b.n	8015640 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 80155f0:	697b      	ldr	r3, [r7, #20]
 80155f2:	7bfa      	ldrb	r2, [r7, #15]
 80155f4:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80155f6:	697b      	ldr	r3, [r7, #20]
 80155f8:	687a      	ldr	r2, [r7, #4]
 80155fa:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80155fc:	697b      	ldr	r3, [r7, #20]
 80155fe:	3305      	adds	r3, #5
 8015600:	687a      	ldr	r2, [r7, #4]
 8015602:	b292      	uxth	r2, r2
 8015604:	68b9      	ldr	r1, [r7, #8]
 8015606:	4618      	mov	r0, r3
 8015608:	f004 f937 	bl	801987a <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 801560c:	7bfb      	ldrb	r3, [r7, #15]
 801560e:	4618      	mov	r0, r3
 8015610:	f7ff ff8e 	bl	8015530 <IsSticky>
 8015614:	4603      	mov	r3, r0
 8015616:	461a      	mov	r2, r3
 8015618:	697b      	ldr	r3, [r7, #20]
 801561a:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 801561c:	7bfb      	ldrb	r3, [r7, #15]
 801561e:	4618      	mov	r0, r3
 8015620:	f7ff ffaa 	bl	8015578 <IsConfirmationRequired>
 8015624:	4603      	mov	r3, r0
 8015626:	461a      	mov	r2, r3
 8015628:	697b      	ldr	r3, [r7, #20]
 801562a:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 801562c:	4b06      	ldr	r3, [pc, #24]	; (8015648 <LoRaMacCommandsAddCmd+0x98>)
 801562e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	4413      	add	r3, r2
 8015636:	3301      	adds	r3, #1
 8015638:	4a03      	ldr	r2, [pc, #12]	; (8015648 <LoRaMacCommandsAddCmd+0x98>)
 801563a:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 801563e:	2300      	movs	r3, #0
}
 8015640:	4618      	mov	r0, r3
 8015642:	3718      	adds	r7, #24
 8015644:	46bd      	mov	sp, r7
 8015646:	bd80      	pop	{r7, pc}
 8015648:	200019ac 	.word	0x200019ac

0801564c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 801564c:	b580      	push	{r7, lr}
 801564e:	b082      	sub	sp, #8
 8015650:	af00      	add	r7, sp, #0
 8015652:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	2b00      	cmp	r3, #0
 8015658:	d101      	bne.n	801565e <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801565a:	2301      	movs	r3, #1
 801565c:	e021      	b.n	80156a2 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 801565e:	6879      	ldr	r1, [r7, #4]
 8015660:	4812      	ldr	r0, [pc, #72]	; (80156ac <LoRaMacCommandsRemoveCmd+0x60>)
 8015662:	f7ff ff32 	bl	80154ca <LinkedListRemove>
 8015666:	4603      	mov	r3, r0
 8015668:	f083 0301 	eor.w	r3, r3, #1
 801566c:	b2db      	uxtb	r3, r3
 801566e:	2b00      	cmp	r3, #0
 8015670:	d001      	beq.n	8015676 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8015672:	2303      	movs	r3, #3
 8015674:	e015      	b.n	80156a2 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8015676:	4b0d      	ldr	r3, [pc, #52]	; (80156ac <LoRaMacCommandsRemoveCmd+0x60>)
 8015678:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	689b      	ldr	r3, [r3, #8]
 8015680:	1ad3      	subs	r3, r2, r3
 8015682:	3b01      	subs	r3, #1
 8015684:	4a09      	ldr	r2, [pc, #36]	; (80156ac <LoRaMacCommandsRemoveCmd+0x60>)
 8015686:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 801568a:	6878      	ldr	r0, [r7, #4]
 801568c:	f7ff fea4 	bl	80153d8 <FreeMacCommandSlot>
 8015690:	4603      	mov	r3, r0
 8015692:	f083 0301 	eor.w	r3, r3, #1
 8015696:	b2db      	uxtb	r3, r3
 8015698:	2b00      	cmp	r3, #0
 801569a:	d001      	beq.n	80156a0 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 801569c:	2305      	movs	r3, #5
 801569e:	e000      	b.n	80156a2 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80156a0:	2300      	movs	r3, #0
}
 80156a2:	4618      	mov	r0, r3
 80156a4:	3708      	adds	r7, #8
 80156a6:	46bd      	mov	sp, r7
 80156a8:	bd80      	pop	{r7, pc}
 80156aa:	bf00      	nop
 80156ac:	200019ac 	.word	0x200019ac

080156b0 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 80156b0:	b480      	push	{r7}
 80156b2:	b085      	sub	sp, #20
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	4603      	mov	r3, r0
 80156b8:	6039      	str	r1, [r7, #0]
 80156ba:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80156bc:	4b0e      	ldr	r3, [pc, #56]	; (80156f8 <LoRaMacCommandsGetCmd+0x48>)
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 80156c2:	e002      	b.n	80156ca <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d004      	beq.n	80156da <LoRaMacCommandsGetCmd+0x2a>
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	791b      	ldrb	r3, [r3, #4]
 80156d4:	79fa      	ldrb	r2, [r7, #7]
 80156d6:	429a      	cmp	r2, r3
 80156d8:	d1f4      	bne.n	80156c4 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 80156da:	683b      	ldr	r3, [r7, #0]
 80156dc:	68fa      	ldr	r2, [r7, #12]
 80156de:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d101      	bne.n	80156ea <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80156e6:	2303      	movs	r3, #3
 80156e8:	e000      	b.n	80156ec <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 80156ea:	2300      	movs	r3, #0
}
 80156ec:	4618      	mov	r0, r3
 80156ee:	3714      	adds	r7, #20
 80156f0:	46bd      	mov	sp, r7
 80156f2:	bc80      	pop	{r7}
 80156f4:	4770      	bx	lr
 80156f6:	bf00      	nop
 80156f8:	200019ac 	.word	0x200019ac

080156fc <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80156fc:	b580      	push	{r7, lr}
 80156fe:	b082      	sub	sp, #8
 8015700:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015702:	4b0f      	ldr	r3, [pc, #60]	; (8015740 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015708:	e012      	b.n	8015730 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	7b1b      	ldrb	r3, [r3, #12]
 801570e:	f083 0301 	eor.w	r3, r3, #1
 8015712:	b2db      	uxtb	r3, r3
 8015714:	2b00      	cmp	r3, #0
 8015716:	d008      	beq.n	801572a <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 801571e:	6878      	ldr	r0, [r7, #4]
 8015720:	f7ff ff94 	bl	801564c <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8015724:	683b      	ldr	r3, [r7, #0]
 8015726:	607b      	str	r3, [r7, #4]
 8015728:	e002      	b.n	8015730 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	2b00      	cmp	r3, #0
 8015734:	d1e9      	bne.n	801570a <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015736:	2300      	movs	r3, #0
}
 8015738:	4618      	mov	r0, r3
 801573a:	3708      	adds	r7, #8
 801573c:	46bd      	mov	sp, r7
 801573e:	bd80      	pop	{r7, pc}
 8015740:	200019ac 	.word	0x200019ac

08015744 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8015744:	b580      	push	{r7, lr}
 8015746:	b082      	sub	sp, #8
 8015748:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801574a:	4b13      	ldr	r3, [pc, #76]	; (8015798 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015750:	e01a      	b.n	8015788 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	681b      	ldr	r3, [r3, #0]
 8015756:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	791b      	ldrb	r3, [r3, #4]
 801575c:	4618      	mov	r0, r3
 801575e:	f7ff fee7 	bl	8015530 <IsSticky>
 8015762:	4603      	mov	r3, r0
 8015764:	2b00      	cmp	r3, #0
 8015766:	d00d      	beq.n	8015784 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	791b      	ldrb	r3, [r3, #4]
 801576c:	4618      	mov	r0, r3
 801576e:	f7ff ff03 	bl	8015578 <IsConfirmationRequired>
 8015772:	4603      	mov	r3, r0
 8015774:	f083 0301 	eor.w	r3, r3, #1
 8015778:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 801577a:	2b00      	cmp	r3, #0
 801577c:	d002      	beq.n	8015784 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 801577e:	6878      	ldr	r0, [r7, #4]
 8015780:	f7ff ff64 	bl	801564c <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8015784:	683b      	ldr	r3, [r7, #0]
 8015786:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	2b00      	cmp	r3, #0
 801578c:	d1e1      	bne.n	8015752 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801578e:	2300      	movs	r3, #0
}
 8015790:	4618      	mov	r0, r3
 8015792:	3708      	adds	r7, #8
 8015794:	46bd      	mov	sp, r7
 8015796:	bd80      	pop	{r7, pc}
 8015798:	200019ac 	.word	0x200019ac

0801579c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 801579c:	b480      	push	{r7}
 801579e:	b083      	sub	sp, #12
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d101      	bne.n	80157ae <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80157aa:	2301      	movs	r3, #1
 80157ac:	e005      	b.n	80157ba <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 80157ae:	4b05      	ldr	r3, [pc, #20]	; (80157c4 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 80157b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80157b8:	2300      	movs	r3, #0
}
 80157ba:	4618      	mov	r0, r3
 80157bc:	370c      	adds	r7, #12
 80157be:	46bd      	mov	sp, r7
 80157c0:	bc80      	pop	{r7}
 80157c2:	4770      	bx	lr
 80157c4:	200019ac 	.word	0x200019ac

080157c8 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80157c8:	b580      	push	{r7, lr}
 80157ca:	b088      	sub	sp, #32
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	60f8      	str	r0, [r7, #12]
 80157d0:	60b9      	str	r1, [r7, #8]
 80157d2:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 80157d4:	4b25      	ldr	r3, [pc, #148]	; (801586c <LoRaMacCommandsSerializeCmds+0xa4>)
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 80157da:	2300      	movs	r3, #0
 80157dc:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d002      	beq.n	80157ea <LoRaMacCommandsSerializeCmds+0x22>
 80157e4:	68bb      	ldr	r3, [r7, #8]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d126      	bne.n	8015838 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80157ea:	2301      	movs	r3, #1
 80157ec:	e039      	b.n	8015862 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80157ee:	7efb      	ldrb	r3, [r7, #27]
 80157f0:	68fa      	ldr	r2, [r7, #12]
 80157f2:	1ad2      	subs	r2, r2, r3
 80157f4:	69fb      	ldr	r3, [r7, #28]
 80157f6:	689b      	ldr	r3, [r3, #8]
 80157f8:	3301      	adds	r3, #1
 80157fa:	429a      	cmp	r2, r3
 80157fc:	d320      	bcc.n	8015840 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 80157fe:	7efb      	ldrb	r3, [r7, #27]
 8015800:	1c5a      	adds	r2, r3, #1
 8015802:	76fa      	strb	r2, [r7, #27]
 8015804:	461a      	mov	r2, r3
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	4413      	add	r3, r2
 801580a:	69fa      	ldr	r2, [r7, #28]
 801580c:	7912      	ldrb	r2, [r2, #4]
 801580e:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8015810:	7efb      	ldrb	r3, [r7, #27]
 8015812:	687a      	ldr	r2, [r7, #4]
 8015814:	18d0      	adds	r0, r2, r3
 8015816:	69fb      	ldr	r3, [r7, #28]
 8015818:	1d59      	adds	r1, r3, #5
 801581a:	69fb      	ldr	r3, [r7, #28]
 801581c:	689b      	ldr	r3, [r3, #8]
 801581e:	b29b      	uxth	r3, r3
 8015820:	461a      	mov	r2, r3
 8015822:	f004 f82a 	bl	801987a <memcpy1>
            itr += curElement->PayloadSize;
 8015826:	69fb      	ldr	r3, [r7, #28]
 8015828:	689b      	ldr	r3, [r3, #8]
 801582a:	b2da      	uxtb	r2, r3
 801582c:	7efb      	ldrb	r3, [r7, #27]
 801582e:	4413      	add	r3, r2
 8015830:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8015832:	69fb      	ldr	r3, [r7, #28]
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015838:	69fb      	ldr	r3, [r7, #28]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d1d7      	bne.n	80157ee <LoRaMacCommandsSerializeCmds+0x26>
 801583e:	e009      	b.n	8015854 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8015840:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8015842:	e007      	b.n	8015854 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8015844:	69fb      	ldr	r3, [r7, #28]
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 801584a:	69f8      	ldr	r0, [r7, #28]
 801584c:	f7ff fefe 	bl	801564c <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8015850:	697b      	ldr	r3, [r7, #20]
 8015852:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015854:	69fb      	ldr	r3, [r7, #28]
 8015856:	2b00      	cmp	r3, #0
 8015858:	d1f4      	bne.n	8015844 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 801585a:	68b8      	ldr	r0, [r7, #8]
 801585c:	f7ff ff9e 	bl	801579c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8015860:	2300      	movs	r3, #0
}
 8015862:	4618      	mov	r0, r3
 8015864:	3720      	adds	r7, #32
 8015866:	46bd      	mov	sp, r7
 8015868:	bd80      	pop	{r7, pc}
 801586a:	bf00      	nop
 801586c:	200019ac 	.word	0x200019ac

08015870 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8015870:	b480      	push	{r7}
 8015872:	b085      	sub	sp, #20
 8015874:	af00      	add	r7, sp, #0
 8015876:	4603      	mov	r3, r0
 8015878:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 801587a:	2300      	movs	r3, #0
 801587c:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 801587e:	79fb      	ldrb	r3, [r7, #7]
 8015880:	3b02      	subs	r3, #2
 8015882:	2b11      	cmp	r3, #17
 8015884:	d850      	bhi.n	8015928 <LoRaMacCommandsGetCmdSize+0xb8>
 8015886:	a201      	add	r2, pc, #4	; (adr r2, 801588c <LoRaMacCommandsGetCmdSize+0x1c>)
 8015888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801588c:	080158d5 	.word	0x080158d5
 8015890:	080158db 	.word	0x080158db
 8015894:	080158e1 	.word	0x080158e1
 8015898:	080158e7 	.word	0x080158e7
 801589c:	080158ed 	.word	0x080158ed
 80158a0:	080158f3 	.word	0x080158f3
 80158a4:	080158f9 	.word	0x080158f9
 80158a8:	080158ff 	.word	0x080158ff
 80158ac:	08015905 	.word	0x08015905
 80158b0:	08015929 	.word	0x08015929
 80158b4:	08015929 	.word	0x08015929
 80158b8:	0801590b 	.word	0x0801590b
 80158bc:	08015929 	.word	0x08015929
 80158c0:	08015929 	.word	0x08015929
 80158c4:	08015911 	.word	0x08015911
 80158c8:	08015917 	.word	0x08015917
 80158cc:	0801591d 	.word	0x0801591d
 80158d0:	08015923 	.word	0x08015923
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 80158d4:	2303      	movs	r3, #3
 80158d6:	73fb      	strb	r3, [r7, #15]
            break;
 80158d8:	e027      	b.n	801592a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 80158da:	2305      	movs	r3, #5
 80158dc:	73fb      	strb	r3, [r7, #15]
            break;
 80158de:	e024      	b.n	801592a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 80158e0:	2302      	movs	r3, #2
 80158e2:	73fb      	strb	r3, [r7, #15]
            break;
 80158e4:	e021      	b.n	801592a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 80158e6:	2305      	movs	r3, #5
 80158e8:	73fb      	strb	r3, [r7, #15]
            break;
 80158ea:	e01e      	b.n	801592a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 80158ec:	2301      	movs	r3, #1
 80158ee:	73fb      	strb	r3, [r7, #15]
            break;
 80158f0:	e01b      	b.n	801592a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 80158f2:	2306      	movs	r3, #6
 80158f4:	73fb      	strb	r3, [r7, #15]
            break;
 80158f6:	e018      	b.n	801592a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 80158f8:	2302      	movs	r3, #2
 80158fa:	73fb      	strb	r3, [r7, #15]
            break;
 80158fc:	e015      	b.n	801592a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 80158fe:	2302      	movs	r3, #2
 8015900:	73fb      	strb	r3, [r7, #15]
            break;
 8015902:	e012      	b.n	801592a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8015904:	2305      	movs	r3, #5
 8015906:	73fb      	strb	r3, [r7, #15]
            break;
 8015908:	e00f      	b.n	801592a <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 801590a:	2306      	movs	r3, #6
 801590c:	73fb      	strb	r3, [r7, #15]
            break;
 801590e:	e00c      	b.n	801592a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8015910:	2301      	movs	r3, #1
 8015912:	73fb      	strb	r3, [r7, #15]
            break;
 8015914:	e009      	b.n	801592a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8015916:	2305      	movs	r3, #5
 8015918:	73fb      	strb	r3, [r7, #15]
            break;
 801591a:	e006      	b.n	801592a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 801591c:	2304      	movs	r3, #4
 801591e:	73fb      	strb	r3, [r7, #15]
            break;
 8015920:	e003      	b.n	801592a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8015922:	2304      	movs	r3, #4
 8015924:	73fb      	strb	r3, [r7, #15]
            break;
 8015926:	e000      	b.n	801592a <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8015928:	bf00      	nop
        }
    }
    return cidSize;
 801592a:	7bfb      	ldrb	r3, [r7, #15]
}
 801592c:	4618      	mov	r0, r3
 801592e:	3714      	adds	r7, #20
 8015930:	46bd      	mov	sp, r7
 8015932:	bc80      	pop	{r7}
 8015934:	4770      	bx	lr
 8015936:	bf00      	nop

08015938 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8015938:	b480      	push	{r7}
 801593a:	b083      	sub	sp, #12
 801593c:	af00      	add	r7, sp, #0
 801593e:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	4a07      	ldr	r2, [pc, #28]	; (8015960 <IncreaseBufferPointer+0x28>)
 8015944:	4293      	cmp	r3, r2
 8015946:	d102      	bne.n	801594e <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8015948:	4b06      	ldr	r3, [pc, #24]	; (8015964 <IncreaseBufferPointer+0x2c>)
 801594a:	607b      	str	r3, [r7, #4]
 801594c:	e002      	b.n	8015954 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	3304      	adds	r3, #4
 8015952:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8015954:	687b      	ldr	r3, [r7, #4]
}
 8015956:	4618      	mov	r0, r3
 8015958:	370c      	adds	r7, #12
 801595a:	46bd      	mov	sp, r7
 801595c:	bc80      	pop	{r7}
 801595e:	4770      	bx	lr
 8015960:	20001bd4 	.word	0x20001bd4
 8015964:	20001bc4 	.word	0x20001bc4

08015968 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8015968:	b480      	push	{r7}
 801596a:	b083      	sub	sp, #12
 801596c:	af00      	add	r7, sp, #0
 801596e:	4603      	mov	r3, r0
 8015970:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8015972:	79fb      	ldrb	r3, [r7, #7]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d101      	bne.n	801597c <IsListEmpty+0x14>
    {
        return true;
 8015978:	2301      	movs	r3, #1
 801597a:	e000      	b.n	801597e <IsListEmpty+0x16>
    }
    return false;
 801597c:	2300      	movs	r3, #0
}
 801597e:	4618      	mov	r0, r3
 8015980:	370c      	adds	r7, #12
 8015982:	46bd      	mov	sp, r7
 8015984:	bc80      	pop	{r7}
 8015986:	4770      	bx	lr

08015988 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8015988:	b480      	push	{r7}
 801598a:	b083      	sub	sp, #12
 801598c:	af00      	add	r7, sp, #0
 801598e:	4603      	mov	r3, r0
 8015990:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8015992:	79fb      	ldrb	r3, [r7, #7]
 8015994:	2b04      	cmp	r3, #4
 8015996:	d901      	bls.n	801599c <IsListFull+0x14>
    {
        return true;
 8015998:	2301      	movs	r3, #1
 801599a:	e000      	b.n	801599e <IsListFull+0x16>
    }
    return false;
 801599c:	2300      	movs	r3, #0
}
 801599e:	4618      	mov	r0, r3
 80159a0:	370c      	adds	r7, #12
 80159a2:	46bd      	mov	sp, r7
 80159a4:	bc80      	pop	{r7}
 80159a6:	4770      	bx	lr

080159a8 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 80159a8:	b580      	push	{r7, lr}
 80159aa:	b086      	sub	sp, #24
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	4603      	mov	r3, r0
 80159b0:	60b9      	str	r1, [r7, #8]
 80159b2:	607a      	str	r2, [r7, #4]
 80159b4:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 80159b6:	68bb      	ldr	r3, [r7, #8]
 80159b8:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80159ba:	4b13      	ldr	r3, [pc, #76]	; (8015a08 <GetElement+0x60>)
 80159bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80159c0:	4618      	mov	r0, r3
 80159c2:	f7ff ffd1 	bl	8015968 <IsListEmpty>
 80159c6:	4603      	mov	r3, r0
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d001      	beq.n	80159d0 <GetElement+0x28>
    {
        return NULL;
 80159cc:	2300      	movs	r3, #0
 80159ce:	e017      	b.n	8015a00 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80159d0:	2300      	movs	r3, #0
 80159d2:	74fb      	strb	r3, [r7, #19]
 80159d4:	e00d      	b.n	80159f2 <GetElement+0x4a>
    {
        if( element->Request == request )
 80159d6:	697b      	ldr	r3, [r7, #20]
 80159d8:	781b      	ldrb	r3, [r3, #0]
 80159da:	7bfa      	ldrb	r2, [r7, #15]
 80159dc:	429a      	cmp	r2, r3
 80159de:	d101      	bne.n	80159e4 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 80159e0:	697b      	ldr	r3, [r7, #20]
 80159e2:	e00d      	b.n	8015a00 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 80159e4:	6978      	ldr	r0, [r7, #20]
 80159e6:	f7ff ffa7 	bl	8015938 <IncreaseBufferPointer>
 80159ea:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80159ec:	7cfb      	ldrb	r3, [r7, #19]
 80159ee:	3301      	adds	r3, #1
 80159f0:	74fb      	strb	r3, [r7, #19]
 80159f2:	4b05      	ldr	r3, [pc, #20]	; (8015a08 <GetElement+0x60>)
 80159f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80159f8:	7cfa      	ldrb	r2, [r7, #19]
 80159fa:	429a      	cmp	r2, r3
 80159fc:	d3eb      	bcc.n	80159d6 <GetElement+0x2e>
    }

    return NULL;
 80159fe:	2300      	movs	r3, #0
}
 8015a00:	4618      	mov	r0, r3
 8015a02:	3718      	adds	r7, #24
 8015a04:	46bd      	mov	sp, r7
 8015a06:	bd80      	pop	{r7, pc}
 8015a08:	20001bb8 	.word	0x20001bb8

08015a0c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8015a0c:	b580      	push	{r7, lr}
 8015a0e:	b082      	sub	sp, #8
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8015a14:	4a0c      	ldr	r2, [pc, #48]	; (8015a48 <LoRaMacConfirmQueueInit+0x3c>)
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8015a1a:	4b0b      	ldr	r3, [pc, #44]	; (8015a48 <LoRaMacConfirmQueueInit+0x3c>)
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8015a22:	4b09      	ldr	r3, [pc, #36]	; (8015a48 <LoRaMacConfirmQueueInit+0x3c>)
 8015a24:	4a09      	ldr	r2, [pc, #36]	; (8015a4c <LoRaMacConfirmQueueInit+0x40>)
 8015a26:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8015a28:	4b07      	ldr	r3, [pc, #28]	; (8015a48 <LoRaMacConfirmQueueInit+0x3c>)
 8015a2a:	4a08      	ldr	r2, [pc, #32]	; (8015a4c <LoRaMacConfirmQueueInit+0x40>)
 8015a2c:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8015a2e:	2214      	movs	r2, #20
 8015a30:	21ff      	movs	r1, #255	; 0xff
 8015a32:	4806      	ldr	r0, [pc, #24]	; (8015a4c <LoRaMacConfirmQueueInit+0x40>)
 8015a34:	f003 ff5c 	bl	80198f0 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015a38:	4b03      	ldr	r3, [pc, #12]	; (8015a48 <LoRaMacConfirmQueueInit+0x3c>)
 8015a3a:	2201      	movs	r2, #1
 8015a3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8015a40:	bf00      	nop
 8015a42:	3708      	adds	r7, #8
 8015a44:	46bd      	mov	sp, r7
 8015a46:	bd80      	pop	{r7, pc}
 8015a48:	20001bb8 	.word	0x20001bb8
 8015a4c:	20001bc4 	.word	0x20001bc4

08015a50 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	b082      	sub	sp, #8
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8015a58:	4b19      	ldr	r3, [pc, #100]	; (8015ac0 <LoRaMacConfirmQueueAdd+0x70>)
 8015a5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015a5e:	4618      	mov	r0, r3
 8015a60:	f7ff ff92 	bl	8015988 <IsListFull>
 8015a64:	4603      	mov	r3, r0
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d001      	beq.n	8015a6e <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8015a6a:	2300      	movs	r3, #0
 8015a6c:	e024      	b.n	8015ab8 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8015a6e:	4b14      	ldr	r3, [pc, #80]	; (8015ac0 <LoRaMacConfirmQueueAdd+0x70>)
 8015a70:	689b      	ldr	r3, [r3, #8]
 8015a72:	687a      	ldr	r2, [r7, #4]
 8015a74:	7812      	ldrb	r2, [r2, #0]
 8015a76:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8015a78:	4b11      	ldr	r3, [pc, #68]	; (8015ac0 <LoRaMacConfirmQueueAdd+0x70>)
 8015a7a:	689b      	ldr	r3, [r3, #8]
 8015a7c:	687a      	ldr	r2, [r7, #4]
 8015a7e:	7852      	ldrb	r2, [r2, #1]
 8015a80:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8015a82:	4b0f      	ldr	r3, [pc, #60]	; (8015ac0 <LoRaMacConfirmQueueAdd+0x70>)
 8015a84:	689b      	ldr	r3, [r3, #8]
 8015a86:	687a      	ldr	r2, [r7, #4]
 8015a88:	78d2      	ldrb	r2, [r2, #3]
 8015a8a:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8015a8c:	4b0c      	ldr	r3, [pc, #48]	; (8015ac0 <LoRaMacConfirmQueueAdd+0x70>)
 8015a8e:	689b      	ldr	r3, [r3, #8]
 8015a90:	687a      	ldr	r2, [r7, #4]
 8015a92:	7892      	ldrb	r2, [r2, #2]
 8015a94:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8015a96:	4b0a      	ldr	r3, [pc, #40]	; (8015ac0 <LoRaMacConfirmQueueAdd+0x70>)
 8015a98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015a9c:	3301      	adds	r3, #1
 8015a9e:	b2da      	uxtb	r2, r3
 8015aa0:	4b07      	ldr	r3, [pc, #28]	; (8015ac0 <LoRaMacConfirmQueueAdd+0x70>)
 8015aa2:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8015aa6:	4b06      	ldr	r3, [pc, #24]	; (8015ac0 <LoRaMacConfirmQueueAdd+0x70>)
 8015aa8:	689b      	ldr	r3, [r3, #8]
 8015aaa:	4618      	mov	r0, r3
 8015aac:	f7ff ff44 	bl	8015938 <IncreaseBufferPointer>
 8015ab0:	4603      	mov	r3, r0
 8015ab2:	4a03      	ldr	r2, [pc, #12]	; (8015ac0 <LoRaMacConfirmQueueAdd+0x70>)
 8015ab4:	6093      	str	r3, [r2, #8]

    return true;
 8015ab6:	2301      	movs	r3, #1
}
 8015ab8:	4618      	mov	r0, r3
 8015aba:	3708      	adds	r7, #8
 8015abc:	46bd      	mov	sp, r7
 8015abe:	bd80      	pop	{r7, pc}
 8015ac0:	20001bb8 	.word	0x20001bb8

08015ac4 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8015ac4:	b580      	push	{r7, lr}
 8015ac6:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8015ac8:	4b0e      	ldr	r3, [pc, #56]	; (8015b04 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015aca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015ace:	4618      	mov	r0, r3
 8015ad0:	f7ff ff4a 	bl	8015968 <IsListEmpty>
 8015ad4:	4603      	mov	r3, r0
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d001      	beq.n	8015ade <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8015ada:	2300      	movs	r3, #0
 8015adc:	e010      	b.n	8015b00 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8015ade:	4b09      	ldr	r3, [pc, #36]	; (8015b04 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015ae0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015ae4:	3b01      	subs	r3, #1
 8015ae6:	b2da      	uxtb	r2, r3
 8015ae8:	4b06      	ldr	r3, [pc, #24]	; (8015b04 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015aea:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8015aee:	4b05      	ldr	r3, [pc, #20]	; (8015b04 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015af0:	685b      	ldr	r3, [r3, #4]
 8015af2:	4618      	mov	r0, r3
 8015af4:	f7ff ff20 	bl	8015938 <IncreaseBufferPointer>
 8015af8:	4603      	mov	r3, r0
 8015afa:	4a02      	ldr	r2, [pc, #8]	; (8015b04 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015afc:	6053      	str	r3, [r2, #4]

    return true;
 8015afe:	2301      	movs	r3, #1
}
 8015b00:	4618      	mov	r0, r3
 8015b02:	bd80      	pop	{r7, pc}
 8015b04:	20001bb8 	.word	0x20001bb8

08015b08 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8015b08:	b580      	push	{r7, lr}
 8015b0a:	b084      	sub	sp, #16
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	4603      	mov	r3, r0
 8015b10:	460a      	mov	r2, r1
 8015b12:	71fb      	strb	r3, [r7, #7]
 8015b14:	4613      	mov	r3, r2
 8015b16:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8015b18:	2300      	movs	r3, #0
 8015b1a:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8015b1c:	4b10      	ldr	r3, [pc, #64]	; (8015b60 <LoRaMacConfirmQueueSetStatus+0x58>)
 8015b1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015b22:	4618      	mov	r0, r3
 8015b24:	f7ff ff20 	bl	8015968 <IsListEmpty>
 8015b28:	4603      	mov	r3, r0
 8015b2a:	f083 0301 	eor.w	r3, r3, #1
 8015b2e:	b2db      	uxtb	r3, r3
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d011      	beq.n	8015b58 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8015b34:	4b0a      	ldr	r3, [pc, #40]	; (8015b60 <LoRaMacConfirmQueueSetStatus+0x58>)
 8015b36:	6859      	ldr	r1, [r3, #4]
 8015b38:	4b09      	ldr	r3, [pc, #36]	; (8015b60 <LoRaMacConfirmQueueSetStatus+0x58>)
 8015b3a:	689a      	ldr	r2, [r3, #8]
 8015b3c:	79bb      	ldrb	r3, [r7, #6]
 8015b3e:	4618      	mov	r0, r3
 8015b40:	f7ff ff32 	bl	80159a8 <GetElement>
 8015b44:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d005      	beq.n	8015b58 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	79fa      	ldrb	r2, [r7, #7]
 8015b50:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	2201      	movs	r2, #1
 8015b56:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8015b58:	bf00      	nop
 8015b5a:	3710      	adds	r7, #16
 8015b5c:	46bd      	mov	sp, r7
 8015b5e:	bd80      	pop	{r7, pc}
 8015b60:	20001bb8 	.word	0x20001bb8

08015b64 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8015b64:	b580      	push	{r7, lr}
 8015b66:	b084      	sub	sp, #16
 8015b68:	af00      	add	r7, sp, #0
 8015b6a:	4603      	mov	r3, r0
 8015b6c:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8015b6e:	2300      	movs	r3, #0
 8015b70:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8015b72:	4b10      	ldr	r3, [pc, #64]	; (8015bb4 <LoRaMacConfirmQueueGetStatus+0x50>)
 8015b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015b78:	4618      	mov	r0, r3
 8015b7a:	f7ff fef5 	bl	8015968 <IsListEmpty>
 8015b7e:	4603      	mov	r3, r0
 8015b80:	f083 0301 	eor.w	r3, r3, #1
 8015b84:	b2db      	uxtb	r3, r3
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d00e      	beq.n	8015ba8 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8015b8a:	4b0a      	ldr	r3, [pc, #40]	; (8015bb4 <LoRaMacConfirmQueueGetStatus+0x50>)
 8015b8c:	6859      	ldr	r1, [r3, #4]
 8015b8e:	4b09      	ldr	r3, [pc, #36]	; (8015bb4 <LoRaMacConfirmQueueGetStatus+0x50>)
 8015b90:	689a      	ldr	r2, [r3, #8]
 8015b92:	79fb      	ldrb	r3, [r7, #7]
 8015b94:	4618      	mov	r0, r3
 8015b96:	f7ff ff07 	bl	80159a8 <GetElement>
 8015b9a:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d002      	beq.n	8015ba8 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	785b      	ldrb	r3, [r3, #1]
 8015ba6:	e000      	b.n	8015baa <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015ba8:	2301      	movs	r3, #1
}
 8015baa:	4618      	mov	r0, r3
 8015bac:	3710      	adds	r7, #16
 8015bae:	46bd      	mov	sp, r7
 8015bb0:	bd80      	pop	{r7, pc}
 8015bb2:	bf00      	nop
 8015bb4:	20001bb8 	.word	0x20001bb8

08015bb8 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	b084      	sub	sp, #16
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	4603      	mov	r3, r0
 8015bc0:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8015bc2:	4b16      	ldr	r3, [pc, #88]	; (8015c1c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015bc4:	685b      	ldr	r3, [r3, #4]
 8015bc6:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8015bc8:	4a14      	ldr	r2, [pc, #80]	; (8015c1c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015bca:	79fb      	ldrb	r3, [r7, #7]
 8015bcc:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8015bd0:	4b12      	ldr	r3, [pc, #72]	; (8015c1c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015bd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	f7ff fec6 	bl	8015968 <IsListEmpty>
 8015bdc:	4603      	mov	r3, r0
 8015bde:	f083 0301 	eor.w	r3, r3, #1
 8015be2:	b2db      	uxtb	r3, r3
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d015      	beq.n	8015c14 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	79fa      	ldrb	r2, [r7, #7]
 8015bec:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	78db      	ldrb	r3, [r3, #3]
 8015bf2:	f083 0301 	eor.w	r3, r3, #1
 8015bf6:	b2db      	uxtb	r3, r3
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d002      	beq.n	8015c02 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	2201      	movs	r2, #1
 8015c00:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8015c02:	68f8      	ldr	r0, [r7, #12]
 8015c04:	f7ff fe98 	bl	8015938 <IncreaseBufferPointer>
 8015c08:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8015c0a:	4b04      	ldr	r3, [pc, #16]	; (8015c1c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015c0c:	689b      	ldr	r3, [r3, #8]
 8015c0e:	68fa      	ldr	r2, [r7, #12]
 8015c10:	429a      	cmp	r2, r3
 8015c12:	d1e9      	bne.n	8015be8 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8015c14:	bf00      	nop
 8015c16:	3710      	adds	r7, #16
 8015c18:	46bd      	mov	sp, r7
 8015c1a:	bd80      	pop	{r7, pc}
 8015c1c:	20001bb8 	.word	0x20001bb8

08015c20 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b082      	sub	sp, #8
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	4603      	mov	r3, r0
 8015c28:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8015c2a:	4b09      	ldr	r3, [pc, #36]	; (8015c50 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8015c2c:	6859      	ldr	r1, [r3, #4]
 8015c2e:	4b08      	ldr	r3, [pc, #32]	; (8015c50 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8015c30:	689a      	ldr	r2, [r3, #8]
 8015c32:	79fb      	ldrb	r3, [r7, #7]
 8015c34:	4618      	mov	r0, r3
 8015c36:	f7ff feb7 	bl	80159a8 <GetElement>
 8015c3a:	4603      	mov	r3, r0
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d001      	beq.n	8015c44 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8015c40:	2301      	movs	r3, #1
 8015c42:	e000      	b.n	8015c46 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8015c44:	2300      	movs	r3, #0
}
 8015c46:	4618      	mov	r0, r3
 8015c48:	3708      	adds	r7, #8
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	bd80      	pop	{r7, pc}
 8015c4e:	bf00      	nop
 8015c50:	20001bb8 	.word	0x20001bb8

08015c54 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8015c54:	b580      	push	{r7, lr}
 8015c56:	b084      	sub	sp, #16
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8015c5c:	4b25      	ldr	r3, [pc, #148]	; (8015cf4 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015c5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015c62:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8015c64:	2300      	movs	r3, #0
 8015c66:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8015c68:	f107 0308 	add.w	r3, r7, #8
 8015c6c:	2204      	movs	r2, #4
 8015c6e:	2100      	movs	r1, #0
 8015c70:	4618      	mov	r0, r3
 8015c72:	f003 fe3d 	bl	80198f0 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 8015c76:	2300      	movs	r3, #0
 8015c78:	73fb      	strb	r3, [r7, #15]
 8015c7a:	e032      	b.n	8015ce2 <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8015c7c:	4b1d      	ldr	r3, [pc, #116]	; (8015cf4 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015c7e:	685b      	ldr	r3, [r3, #4]
 8015c80:	781a      	ldrb	r2, [r3, #0]
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8015c86:	4b1b      	ldr	r3, [pc, #108]	; (8015cf4 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015c88:	685b      	ldr	r3, [r3, #4]
 8015c8a:	785a      	ldrb	r2, [r3, #1]
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8015c90:	4b18      	ldr	r3, [pc, #96]	; (8015cf4 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015c92:	685b      	ldr	r3, [r3, #4]
 8015c94:	789b      	ldrb	r3, [r3, #2]
 8015c96:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8015c98:	7b7b      	ldrb	r3, [r7, #13]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d005      	beq.n	8015caa <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8015c9e:	4b15      	ldr	r3, [pc, #84]	; (8015cf4 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	689b      	ldr	r3, [r3, #8]
 8015ca4:	6878      	ldr	r0, [r7, #4]
 8015ca6:	4798      	blx	r3
 8015ca8:	e00b      	b.n	8015cc2 <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8015caa:	4b12      	ldr	r3, [pc, #72]	; (8015cf4 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015cac:	685b      	ldr	r3, [r3, #4]
 8015cae:	781b      	ldrb	r3, [r3, #0]
 8015cb0:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8015cb2:	4b10      	ldr	r3, [pc, #64]	; (8015cf4 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015cb4:	685b      	ldr	r3, [r3, #4]
 8015cb6:	785b      	ldrb	r3, [r3, #1]
 8015cb8:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8015cba:	4b0e      	ldr	r3, [pc, #56]	; (8015cf4 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015cbc:	685b      	ldr	r3, [r3, #4]
 8015cbe:	78db      	ldrb	r3, [r3, #3]
 8015cc0:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8015cc2:	f7ff feff 	bl	8015ac4 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8015cc6:	7b7b      	ldrb	r3, [r7, #13]
 8015cc8:	f083 0301 	eor.w	r3, r3, #1
 8015ccc:	b2db      	uxtb	r3, r3
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d004      	beq.n	8015cdc <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8015cd2:	f107 0308 	add.w	r3, r7, #8
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	f7ff feba 	bl	8015a50 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8015cdc:	7bfb      	ldrb	r3, [r7, #15]
 8015cde:	3301      	adds	r3, #1
 8015ce0:	73fb      	strb	r3, [r7, #15]
 8015ce2:	7bfa      	ldrb	r2, [r7, #15]
 8015ce4:	7bbb      	ldrb	r3, [r7, #14]
 8015ce6:	429a      	cmp	r2, r3
 8015ce8:	d3c8      	bcc.n	8015c7c <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 8015cea:	bf00      	nop
 8015cec:	bf00      	nop
 8015cee:	3710      	adds	r7, #16
 8015cf0:	46bd      	mov	sp, r7
 8015cf2:	bd80      	pop	{r7, pc}
 8015cf4:	20001bb8 	.word	0x20001bb8

08015cf8 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8015cf8:	b480      	push	{r7}
 8015cfa:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8015cfc:	4b03      	ldr	r3, [pc, #12]	; (8015d0c <LoRaMacConfirmQueueGetCnt+0x14>)
 8015cfe:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8015d02:	4618      	mov	r0, r3
 8015d04:	46bd      	mov	sp, r7
 8015d06:	bc80      	pop	{r7}
 8015d08:	4770      	bx	lr
 8015d0a:	bf00      	nop
 8015d0c:	20001bb8 	.word	0x20001bb8

08015d10 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8015d14:	4b06      	ldr	r3, [pc, #24]	; (8015d30 <LoRaMacConfirmQueueIsFull+0x20>)
 8015d16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	f7ff fe34 	bl	8015988 <IsListFull>
 8015d20:	4603      	mov	r3, r0
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d001      	beq.n	8015d2a <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8015d26:	2301      	movs	r3, #1
 8015d28:	e000      	b.n	8015d2c <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8015d2a:	2300      	movs	r3, #0
    }
}
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	bd80      	pop	{r7, pc}
 8015d30:	20001bb8 	.word	0x20001bb8

08015d34 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8015d34:	b580      	push	{r7, lr}
 8015d36:	b08e      	sub	sp, #56	; 0x38
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	60f8      	str	r0, [r7, #12]
 8015d3c:	607b      	str	r3, [r7, #4]
 8015d3e:	460b      	mov	r3, r1
 8015d40:	817b      	strh	r3, [r7, #10]
 8015d42:	4613      	mov	r3, r2
 8015d44:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d101      	bne.n	8015d50 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015d4c:	2309      	movs	r3, #9
 8015d4e:	e086      	b.n	8015e5e <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8015d50:	2300      	movs	r3, #0
 8015d52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8015d56:	2301      	movs	r3, #1
 8015d58:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8015d5a:	2300      	movs	r3, #0
 8015d5c:	623b      	str	r3, [r7, #32]
 8015d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015d62:	2200      	movs	r2, #0
 8015d64:	601a      	str	r2, [r3, #0]
 8015d66:	605a      	str	r2, [r3, #4]
 8015d68:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	613b      	str	r3, [r7, #16]
 8015d6e:	f107 0314 	add.w	r3, r7, #20
 8015d72:	2200      	movs	r2, #0
 8015d74:	601a      	str	r2, [r3, #0]
 8015d76:	605a      	str	r2, [r3, #4]
 8015d78:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8015d7a:	2301      	movs	r3, #1
 8015d7c:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8015d7e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8015d82:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	b2db      	uxtb	r3, r3
 8015d88:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	0a1b      	lsrs	r3, r3, #8
 8015d8e:	b2db      	uxtb	r3, r3
 8015d90:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	0c1b      	lsrs	r3, r3, #16
 8015d96:	b2db      	uxtb	r3, r3
 8015d98:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	0e1b      	lsrs	r3, r3, #24
 8015d9e:	b2db      	uxtb	r3, r3
 8015da0:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8015da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015da4:	b2db      	uxtb	r3, r3
 8015da6:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8015da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015daa:	0a1b      	lsrs	r3, r3, #8
 8015dac:	b2db      	uxtb	r3, r3
 8015dae:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8015db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015db2:	0c1b      	lsrs	r3, r3, #16
 8015db4:	b2db      	uxtb	r3, r3
 8015db6:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8015db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015dba:	0e1b      	lsrs	r3, r3, #24
 8015dbc:	b2db      	uxtb	r3, r3
 8015dbe:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8015dc0:	e048      	b.n	8015e54 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8015dc2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015dc4:	b2db      	uxtb	r3, r3
 8015dc6:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8015dc8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015dca:	3301      	adds	r3, #1
 8015dcc:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8015dce:	f107 0320 	add.w	r3, r7, #32
 8015dd2:	7a7a      	ldrb	r2, [r7, #9]
 8015dd4:	f107 0010 	add.w	r0, r7, #16
 8015dd8:	2110      	movs	r1, #16
 8015dda:	f7f8 fa79 	bl	800e2d0 <SecureElementAesEncrypt>
 8015dde:	4603      	mov	r3, r0
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d001      	beq.n	8015de8 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015de4:	230e      	movs	r3, #14
 8015de6:	e03a      	b.n	8015e5e <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015de8:	2300      	movs	r3, #0
 8015dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015dee:	e01e      	b.n	8015e2e <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8015df0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8015df4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015df8:	4413      	add	r3, r2
 8015dfa:	461a      	mov	r2, r3
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	4413      	add	r3, r2
 8015e00:	7819      	ldrb	r1, [r3, #0]
 8015e02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015e06:	3338      	adds	r3, #56	; 0x38
 8015e08:	443b      	add	r3, r7
 8015e0a:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8015e0e:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8015e12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015e16:	4403      	add	r3, r0
 8015e18:	4618      	mov	r0, r3
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	4403      	add	r3, r0
 8015e1e:	404a      	eors	r2, r1
 8015e20:	b2d2      	uxtb	r2, r2
 8015e22:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015e24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015e28:	3301      	adds	r3, #1
 8015e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015e2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015e32:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8015e36:	2a10      	cmp	r2, #16
 8015e38:	bfa8      	it	ge
 8015e3a:	2210      	movge	r2, #16
 8015e3c:	b212      	sxth	r2, r2
 8015e3e:	4293      	cmp	r3, r2
 8015e40:	dbd6      	blt.n	8015df0 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8015e42:	897b      	ldrh	r3, [r7, #10]
 8015e44:	3b10      	subs	r3, #16
 8015e46:	b29b      	uxth	r3, r3
 8015e48:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8015e4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015e4e:	3310      	adds	r3, #16
 8015e50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8015e54:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	dcb2      	bgt.n	8015dc2 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015e5c:	2300      	movs	r3, #0
}
 8015e5e:	4618      	mov	r0, r3
 8015e60:	3738      	adds	r7, #56	; 0x38
 8015e62:	46bd      	mov	sp, r7
 8015e64:	bd80      	pop	{r7, pc}

08015e66 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8015e66:	b490      	push	{r4, r7}
 8015e68:	b082      	sub	sp, #8
 8015e6a:	af00      	add	r7, sp, #0
 8015e6c:	4604      	mov	r4, r0
 8015e6e:	4608      	mov	r0, r1
 8015e70:	4611      	mov	r1, r2
 8015e72:	461a      	mov	r2, r3
 8015e74:	4623      	mov	r3, r4
 8015e76:	80fb      	strh	r3, [r7, #6]
 8015e78:	4603      	mov	r3, r0
 8015e7a:	717b      	strb	r3, [r7, #5]
 8015e7c:	460b      	mov	r3, r1
 8015e7e:	713b      	strb	r3, [r7, #4]
 8015e80:	4613      	mov	r3, r2
 8015e82:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8015e84:	69bb      	ldr	r3, [r7, #24]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d101      	bne.n	8015e8e <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015e8a:	2309      	movs	r3, #9
 8015e8c:	e04e      	b.n	8015f2c <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8015e8e:	69bb      	ldr	r3, [r7, #24]
 8015e90:	2249      	movs	r2, #73	; 0x49
 8015e92:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8015e94:	69bb      	ldr	r3, [r7, #24]
 8015e96:	3301      	adds	r3, #1
 8015e98:	2200      	movs	r2, #0
 8015e9a:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8015e9c:	69bb      	ldr	r3, [r7, #24]
 8015e9e:	3302      	adds	r3, #2
 8015ea0:	2200      	movs	r2, #0
 8015ea2:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8015ea4:	69bb      	ldr	r3, [r7, #24]
 8015ea6:	3303      	adds	r3, #3
 8015ea8:	2200      	movs	r2, #0
 8015eaa:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8015eac:	69bb      	ldr	r3, [r7, #24]
 8015eae:	3304      	adds	r3, #4
 8015eb0:	2200      	movs	r2, #0
 8015eb2:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8015eb4:	69bb      	ldr	r3, [r7, #24]
 8015eb6:	3305      	adds	r3, #5
 8015eb8:	78fa      	ldrb	r2, [r7, #3]
 8015eba:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8015ebc:	69bb      	ldr	r3, [r7, #24]
 8015ebe:	3306      	adds	r3, #6
 8015ec0:	693a      	ldr	r2, [r7, #16]
 8015ec2:	b2d2      	uxtb	r2, r2
 8015ec4:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8015ec6:	693b      	ldr	r3, [r7, #16]
 8015ec8:	0a1a      	lsrs	r2, r3, #8
 8015eca:	69bb      	ldr	r3, [r7, #24]
 8015ecc:	3307      	adds	r3, #7
 8015ece:	b2d2      	uxtb	r2, r2
 8015ed0:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8015ed2:	693b      	ldr	r3, [r7, #16]
 8015ed4:	0c1a      	lsrs	r2, r3, #16
 8015ed6:	69bb      	ldr	r3, [r7, #24]
 8015ed8:	3308      	adds	r3, #8
 8015eda:	b2d2      	uxtb	r2, r2
 8015edc:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8015ede:	693b      	ldr	r3, [r7, #16]
 8015ee0:	0e1a      	lsrs	r2, r3, #24
 8015ee2:	69bb      	ldr	r3, [r7, #24]
 8015ee4:	3309      	adds	r3, #9
 8015ee6:	b2d2      	uxtb	r2, r2
 8015ee8:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8015eea:	69bb      	ldr	r3, [r7, #24]
 8015eec:	330a      	adds	r3, #10
 8015eee:	697a      	ldr	r2, [r7, #20]
 8015ef0:	b2d2      	uxtb	r2, r2
 8015ef2:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8015ef4:	697b      	ldr	r3, [r7, #20]
 8015ef6:	0a1a      	lsrs	r2, r3, #8
 8015ef8:	69bb      	ldr	r3, [r7, #24]
 8015efa:	330b      	adds	r3, #11
 8015efc:	b2d2      	uxtb	r2, r2
 8015efe:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8015f00:	697b      	ldr	r3, [r7, #20]
 8015f02:	0c1a      	lsrs	r2, r3, #16
 8015f04:	69bb      	ldr	r3, [r7, #24]
 8015f06:	330c      	adds	r3, #12
 8015f08:	b2d2      	uxtb	r2, r2
 8015f0a:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8015f0c:	697b      	ldr	r3, [r7, #20]
 8015f0e:	0e1a      	lsrs	r2, r3, #24
 8015f10:	69bb      	ldr	r3, [r7, #24]
 8015f12:	330d      	adds	r3, #13
 8015f14:	b2d2      	uxtb	r2, r2
 8015f16:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8015f18:	69bb      	ldr	r3, [r7, #24]
 8015f1a:	330e      	adds	r3, #14
 8015f1c:	2200      	movs	r2, #0
 8015f1e:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8015f20:	69bb      	ldr	r3, [r7, #24]
 8015f22:	330f      	adds	r3, #15
 8015f24:	88fa      	ldrh	r2, [r7, #6]
 8015f26:	b2d2      	uxtb	r2, r2
 8015f28:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8015f2a:	2300      	movs	r3, #0
}
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	3708      	adds	r7, #8
 8015f30:	46bd      	mov	sp, r7
 8015f32:	bc90      	pop	{r4, r7}
 8015f34:	4770      	bx	lr

08015f36 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8015f36:	b590      	push	{r4, r7, lr}
 8015f38:	b08b      	sub	sp, #44	; 0x2c
 8015f3a:	af04      	add	r7, sp, #16
 8015f3c:	6078      	str	r0, [r7, #4]
 8015f3e:	4608      	mov	r0, r1
 8015f40:	4611      	mov	r1, r2
 8015f42:	461a      	mov	r2, r3
 8015f44:	4603      	mov	r3, r0
 8015f46:	807b      	strh	r3, [r7, #2]
 8015f48:	460b      	mov	r3, r1
 8015f4a:	707b      	strb	r3, [r7, #1]
 8015f4c:	4613      	mov	r3, r2
 8015f4e:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d002      	beq.n	8015f5c <ComputeCmacB0+0x26>
 8015f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d101      	bne.n	8015f60 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015f5c:	2309      	movs	r3, #9
 8015f5e:	e024      	b.n	8015faa <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8015f60:	887b      	ldrh	r3, [r7, #2]
 8015f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015f66:	d901      	bls.n	8015f6c <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8015f68:	230d      	movs	r3, #13
 8015f6a:	e01e      	b.n	8015faa <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8015f6c:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8015f70:	783a      	ldrb	r2, [r7, #0]
 8015f72:	7879      	ldrb	r1, [r7, #1]
 8015f74:	8878      	ldrh	r0, [r7, #2]
 8015f76:	f107 0308 	add.w	r3, r7, #8
 8015f7a:	9302      	str	r3, [sp, #8]
 8015f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f7e:	9301      	str	r3, [sp, #4]
 8015f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f82:	9300      	str	r3, [sp, #0]
 8015f84:	4623      	mov	r3, r4
 8015f86:	f7ff ff6e 	bl	8015e66 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8015f8a:	887a      	ldrh	r2, [r7, #2]
 8015f8c:	7879      	ldrb	r1, [r7, #1]
 8015f8e:	f107 0008 	add.w	r0, r7, #8
 8015f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f94:	9300      	str	r3, [sp, #0]
 8015f96:	460b      	mov	r3, r1
 8015f98:	6879      	ldr	r1, [r7, #4]
 8015f9a:	f7f8 f953 	bl	800e244 <SecureElementComputeAesCmac>
 8015f9e:	4603      	mov	r3, r0
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d001      	beq.n	8015fa8 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015fa4:	230e      	movs	r3, #14
 8015fa6:	e000      	b.n	8015faa <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015fa8:	2300      	movs	r3, #0
}
 8015faa:	4618      	mov	r0, r3
 8015fac:	371c      	adds	r7, #28
 8015fae:	46bd      	mov	sp, r7
 8015fb0:	bd90      	pop	{r4, r7, pc}

08015fb2 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8015fb2:	b590      	push	{r4, r7, lr}
 8015fb4:	b0cd      	sub	sp, #308	; 0x134
 8015fb6:	af04      	add	r7, sp, #16
 8015fb8:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8015fbc:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8015fc0:	6020      	str	r0, [r4, #0]
 8015fc2:	460c      	mov	r4, r1
 8015fc4:	4610      	mov	r0, r2
 8015fc6:	4619      	mov	r1, r3
 8015fc8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015fcc:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8015fd0:	4622      	mov	r2, r4
 8015fd2:	801a      	strh	r2, [r3, #0]
 8015fd4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015fd8:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8015fdc:	4602      	mov	r2, r0
 8015fde:	701a      	strb	r2, [r3, #0]
 8015fe0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015fe4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8015fe8:	460a      	mov	r2, r1
 8015fea:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8015fec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015ff0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d101      	bne.n	8015ffe <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015ffa:	2309      	movs	r3, #9
 8015ffc:	e063      	b.n	80160c6 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8015ffe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016002:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016006:	881b      	ldrh	r3, [r3, #0]
 8016008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801600c:	d901      	bls.n	8016012 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801600e:	230d      	movs	r3, #13
 8016010:	e059      	b.n	80160c6 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8016012:	f107 030c 	add.w	r3, r7, #12
 8016016:	f44f 7288 	mov.w	r2, #272	; 0x110
 801601a:	2100      	movs	r1, #0
 801601c:	4618      	mov	r0, r3
 801601e:	f003 fc67 	bl	80198f0 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8016022:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8016026:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801602a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801602e:	781a      	ldrb	r2, [r3, #0]
 8016030:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016034:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016038:	7819      	ldrb	r1, [r3, #0]
 801603a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801603e:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016042:	8818      	ldrh	r0, [r3, #0]
 8016044:	f107 030c 	add.w	r3, r7, #12
 8016048:	9302      	str	r3, [sp, #8]
 801604a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801604e:	9301      	str	r3, [sp, #4]
 8016050:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8016054:	9300      	str	r3, [sp, #0]
 8016056:	4623      	mov	r3, r4
 8016058:	f7ff ff05 	bl	8015e66 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 801605c:	f107 030c 	add.w	r3, r7, #12
 8016060:	3310      	adds	r3, #16
 8016062:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8016066:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 801606a:	8812      	ldrh	r2, [r2, #0]
 801606c:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8016070:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8016074:	6809      	ldr	r1, [r1, #0]
 8016076:	4618      	mov	r0, r3
 8016078:	f003 fbff 	bl	801987a <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 801607c:	2306      	movs	r3, #6
 801607e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8016082:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016086:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801608a:	881b      	ldrh	r3, [r3, #0]
 801608c:	3310      	adds	r3, #16
 801608e:	4619      	mov	r1, r3
 8016090:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016094:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016098:	781b      	ldrb	r3, [r3, #0]
 801609a:	f107 000c 	add.w	r0, r7, #12
 801609e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80160a2:	f7f8 f8e9 	bl	800e278 <SecureElementVerifyAesCmac>
 80160a6:	4603      	mov	r3, r0
 80160a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 80160ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d101      	bne.n	80160b8 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 80160b4:	2300      	movs	r3, #0
 80160b6:	e006      	b.n	80160c6 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 80160b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80160bc:	2b01      	cmp	r3, #1
 80160be:	d101      	bne.n	80160c4 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 80160c0:	2301      	movs	r3, #1
 80160c2:	e000      	b.n	80160c6 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80160c4:	230e      	movs	r3, #14
}
 80160c6:	4618      	mov	r0, r3
 80160c8:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80160cc:	46bd      	mov	sp, r7
 80160ce:	bd90      	pop	{r4, r7, pc}

080160d0 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 80160d0:	b480      	push	{r7}
 80160d2:	b085      	sub	sp, #20
 80160d4:	af00      	add	r7, sp, #0
 80160d6:	4603      	mov	r3, r0
 80160d8:	6039      	str	r1, [r7, #0]
 80160da:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80160dc:	2300      	movs	r3, #0
 80160de:	73fb      	strb	r3, [r7, #15]
 80160e0:	e011      	b.n	8016106 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 80160e2:	7bfb      	ldrb	r3, [r7, #15]
 80160e4:	4a0c      	ldr	r2, [pc, #48]	; (8016118 <GetKeyAddrItem+0x48>)
 80160e6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80160ea:	79fa      	ldrb	r2, [r7, #7]
 80160ec:	429a      	cmp	r2, r3
 80160ee:	d107      	bne.n	8016100 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 80160f0:	7bfb      	ldrb	r3, [r7, #15]
 80160f2:	009b      	lsls	r3, r3, #2
 80160f4:	4a08      	ldr	r2, [pc, #32]	; (8016118 <GetKeyAddrItem+0x48>)
 80160f6:	441a      	add	r2, r3
 80160f8:	683b      	ldr	r3, [r7, #0]
 80160fa:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80160fc:	2300      	movs	r3, #0
 80160fe:	e006      	b.n	801610e <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8016100:	7bfb      	ldrb	r3, [r7, #15]
 8016102:	3301      	adds	r3, #1
 8016104:	73fb      	strb	r3, [r7, #15]
 8016106:	7bfb      	ldrb	r3, [r7, #15]
 8016108:	2b01      	cmp	r3, #1
 801610a:	d9ea      	bls.n	80160e2 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 801610c:	230b      	movs	r3, #11
}
 801610e:	4618      	mov	r0, r3
 8016110:	3714      	adds	r7, #20
 8016112:	46bd      	mov	sp, r7
 8016114:	bc80      	pop	{r7}
 8016116:	4770      	bx	lr
 8016118:	20000110 	.word	0x20000110

0801611c <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 801611c:	b580      	push	{r7, lr}
 801611e:	b088      	sub	sp, #32
 8016120:	af00      	add	r7, sp, #0
 8016122:	60b9      	str	r1, [r7, #8]
 8016124:	607a      	str	r2, [r7, #4]
 8016126:	461a      	mov	r2, r3
 8016128:	4603      	mov	r3, r0
 801612a:	73fb      	strb	r3, [r7, #15]
 801612c:	4613      	mov	r3, r2
 801612e:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8016130:	2300      	movs	r3, #0
 8016132:	613b      	str	r3, [r7, #16]
 8016134:	f107 0314 	add.w	r3, r7, #20
 8016138:	2200      	movs	r2, #0
 801613a:	601a      	str	r2, [r3, #0]
 801613c:	605a      	str	r2, [r3, #4]
 801613e:	609a      	str	r2, [r3, #8]

    switch( keyID )
 8016140:	7bfb      	ldrb	r3, [r7, #15]
 8016142:	2b08      	cmp	r3, #8
 8016144:	d002      	beq.n	801614c <DeriveSessionKey10x+0x30>
 8016146:	2b09      	cmp	r3, #9
 8016148:	d003      	beq.n	8016152 <DeriveSessionKey10x+0x36>
 801614a:	e005      	b.n	8016158 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 801614c:	2301      	movs	r3, #1
 801614e:	743b      	strb	r3, [r7, #16]
            break;
 8016150:	e004      	b.n	801615c <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8016152:	2302      	movs	r3, #2
 8016154:	743b      	strb	r3, [r7, #16]
            break;
 8016156:	e001      	b.n	801615c <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8016158:	230a      	movs	r3, #10
 801615a:	e02a      	b.n	80161b2 <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 801615c:	68bb      	ldr	r3, [r7, #8]
 801615e:	b2db      	uxtb	r3, r3
 8016160:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8016162:	68bb      	ldr	r3, [r7, #8]
 8016164:	0a1b      	lsrs	r3, r3, #8
 8016166:	b2db      	uxtb	r3, r3
 8016168:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 801616a:	68bb      	ldr	r3, [r7, #8]
 801616c:	0c1b      	lsrs	r3, r3, #16
 801616e:	b2db      	uxtb	r3, r3
 8016170:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	b2db      	uxtb	r3, r3
 8016176:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	0a1b      	lsrs	r3, r3, #8
 801617c:	b2db      	uxtb	r3, r3
 801617e:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	0c1b      	lsrs	r3, r3, #16
 8016184:	b2db      	uxtb	r3, r3
 8016186:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8016188:	89bb      	ldrh	r3, [r7, #12]
 801618a:	b2db      	uxtb	r3, r3
 801618c:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 801618e:	89bb      	ldrh	r3, [r7, #12]
 8016190:	0a1b      	lsrs	r3, r3, #8
 8016192:	b29b      	uxth	r3, r3
 8016194:	b2db      	uxtb	r3, r3
 8016196:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8016198:	7bfa      	ldrb	r2, [r7, #15]
 801619a:	f107 0310 	add.w	r3, r7, #16
 801619e:	2101      	movs	r1, #1
 80161a0:	4618      	mov	r0, r3
 80161a2:	f7f8 f915 	bl	800e3d0 <SecureElementDeriveAndStoreKey>
 80161a6:	4603      	mov	r3, r0
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d001      	beq.n	80161b0 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80161ac:	230e      	movs	r3, #14
 80161ae:	e000      	b.n	80161b2 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80161b0:	2300      	movs	r3, #0
}
 80161b2:	4618      	mov	r0, r3
 80161b4:	3720      	adds	r7, #32
 80161b6:	46bd      	mov	sp, r7
 80161b8:	bd80      	pop	{r7, pc}
	...

080161bc <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 80161bc:	b480      	push	{r7}
 80161be:	b083      	sub	sp, #12
 80161c0:	af00      	add	r7, sp, #0
 80161c2:	4603      	mov	r3, r0
 80161c4:	6039      	str	r1, [r7, #0]
 80161c6:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 80161c8:	683b      	ldr	r3, [r7, #0]
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d101      	bne.n	80161d2 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80161ce:	2309      	movs	r3, #9
 80161d0:	e029      	b.n	8016226 <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 80161d2:	79fb      	ldrb	r3, [r7, #7]
 80161d4:	3b01      	subs	r3, #1
 80161d6:	2b03      	cmp	r3, #3
 80161d8:	d822      	bhi.n	8016220 <GetLastFcntDown+0x64>
 80161da:	a201      	add	r2, pc, #4	; (adr r2, 80161e0 <GetLastFcntDown+0x24>)
 80161dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80161e0:	080161f1 	.word	0x080161f1
 80161e4:	080161fd 	.word	0x080161fd
 80161e8:	08016209 	.word	0x08016209
 80161ec:	08016215 	.word	0x08016215
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 80161f0:	4b0f      	ldr	r3, [pc, #60]	; (8016230 <GetLastFcntDown+0x74>)
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	691a      	ldr	r2, [r3, #16]
 80161f6:	683b      	ldr	r3, [r7, #0]
 80161f8:	601a      	str	r2, [r3, #0]
            break;
 80161fa:	e013      	b.n	8016224 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80161fc:	4b0c      	ldr	r3, [pc, #48]	; (8016230 <GetLastFcntDown+0x74>)
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	695a      	ldr	r2, [r3, #20]
 8016202:	683b      	ldr	r3, [r7, #0]
 8016204:	601a      	str	r2, [r3, #0]
            break;
 8016206:	e00d      	b.n	8016224 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8016208:	4b09      	ldr	r3, [pc, #36]	; (8016230 <GetLastFcntDown+0x74>)
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	699a      	ldr	r2, [r3, #24]
 801620e:	683b      	ldr	r3, [r7, #0]
 8016210:	601a      	str	r2, [r3, #0]
            break;
 8016212:	e007      	b.n	8016224 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8016214:	4b06      	ldr	r3, [pc, #24]	; (8016230 <GetLastFcntDown+0x74>)
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	69da      	ldr	r2, [r3, #28]
 801621a:	683b      	ldr	r3, [r7, #0]
 801621c:	601a      	str	r2, [r3, #0]
            break;
 801621e:	e001      	b.n	8016224 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8016220:	2305      	movs	r3, #5
 8016222:	e000      	b.n	8016226 <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016224:	2300      	movs	r3, #0
}
 8016226:	4618      	mov	r0, r3
 8016228:	370c      	adds	r7, #12
 801622a:	46bd      	mov	sp, r7
 801622c:	bc80      	pop	{r7}
 801622e:	4770      	bx	lr
 8016230:	20001bdc 	.word	0x20001bdc

08016234 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8016234:	b580      	push	{r7, lr}
 8016236:	b084      	sub	sp, #16
 8016238:	af00      	add	r7, sp, #0
 801623a:	4603      	mov	r3, r0
 801623c:	6039      	str	r1, [r7, #0]
 801623e:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8016240:	2300      	movs	r3, #0
 8016242:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8016244:	f107 020c 	add.w	r2, r7, #12
 8016248:	79fb      	ldrb	r3, [r7, #7]
 801624a:	4611      	mov	r1, r2
 801624c:	4618      	mov	r0, r3
 801624e:	f7ff ffb5 	bl	80161bc <GetLastFcntDown>
 8016252:	4603      	mov	r3, r0
 8016254:	2b00      	cmp	r3, #0
 8016256:	d001      	beq.n	801625c <CheckFCntDown+0x28>
    {
        return false;
 8016258:	2300      	movs	r3, #0
 801625a:	e00a      	b.n	8016272 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	683a      	ldr	r2, [r7, #0]
 8016260:	429a      	cmp	r2, r3
 8016262:	d803      	bhi.n	801626c <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8016264:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8016266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801626a:	d101      	bne.n	8016270 <CheckFCntDown+0x3c>
    {
        return true;
 801626c:	2301      	movs	r3, #1
 801626e:	e000      	b.n	8016272 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8016270:	2300      	movs	r3, #0
    }
}
 8016272:	4618      	mov	r0, r3
 8016274:	3710      	adds	r7, #16
 8016276:	46bd      	mov	sp, r7
 8016278:	bd80      	pop	{r7, pc}
	...

0801627c <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 801627c:	b480      	push	{r7}
 801627e:	b083      	sub	sp, #12
 8016280:	af00      	add	r7, sp, #0
 8016282:	4603      	mov	r3, r0
 8016284:	6039      	str	r1, [r7, #0]
 8016286:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8016288:	79fb      	ldrb	r3, [r7, #7]
 801628a:	3b01      	subs	r3, #1
 801628c:	2b03      	cmp	r3, #3
 801628e:	d82b      	bhi.n	80162e8 <UpdateFCntDown+0x6c>
 8016290:	a201      	add	r2, pc, #4	; (adr r2, 8016298 <UpdateFCntDown+0x1c>)
 8016292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016296:	bf00      	nop
 8016298:	080162a9 	.word	0x080162a9
 801629c:	080162bb 	.word	0x080162bb
 80162a0:	080162cd 	.word	0x080162cd
 80162a4:	080162df 	.word	0x080162df
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 80162a8:	4b12      	ldr	r3, [pc, #72]	; (80162f4 <UpdateFCntDown+0x78>)
 80162aa:	681b      	ldr	r3, [r3, #0]
 80162ac:	683a      	ldr	r2, [r7, #0]
 80162ae:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 80162b0:	4b10      	ldr	r3, [pc, #64]	; (80162f4 <UpdateFCntDown+0x78>)
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	683a      	ldr	r2, [r7, #0]
 80162b6:	621a      	str	r2, [r3, #32]
            break;
 80162b8:	e017      	b.n	80162ea <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 80162ba:	4b0e      	ldr	r3, [pc, #56]	; (80162f4 <UpdateFCntDown+0x78>)
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	683a      	ldr	r2, [r7, #0]
 80162c0:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 80162c2:	4b0c      	ldr	r3, [pc, #48]	; (80162f4 <UpdateFCntDown+0x78>)
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	683a      	ldr	r2, [r7, #0]
 80162c8:	621a      	str	r2, [r3, #32]
            break;
 80162ca:	e00e      	b.n	80162ea <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 80162cc:	4b09      	ldr	r3, [pc, #36]	; (80162f4 <UpdateFCntDown+0x78>)
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	683a      	ldr	r2, [r7, #0]
 80162d2:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 80162d4:	4b07      	ldr	r3, [pc, #28]	; (80162f4 <UpdateFCntDown+0x78>)
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	683a      	ldr	r2, [r7, #0]
 80162da:	621a      	str	r2, [r3, #32]
            break;
 80162dc:	e005      	b.n	80162ea <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 80162de:	4b05      	ldr	r3, [pc, #20]	; (80162f4 <UpdateFCntDown+0x78>)
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	683a      	ldr	r2, [r7, #0]
 80162e4:	61da      	str	r2, [r3, #28]
            break;
 80162e6:	e000      	b.n	80162ea <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 80162e8:	bf00      	nop
    }
}
 80162ea:	bf00      	nop
 80162ec:	370c      	adds	r7, #12
 80162ee:	46bd      	mov	sp, r7
 80162f0:	bc80      	pop	{r7}
 80162f2:	4770      	bx	lr
 80162f4:	20001bdc 	.word	0x20001bdc

080162f8 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 80162f8:	b480      	push	{r7}
 80162fa:	b083      	sub	sp, #12
 80162fc:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 80162fe:	4b18      	ldr	r3, [pc, #96]	; (8016360 <ResetFCnts+0x68>)
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	2200      	movs	r2, #0
 8016304:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016306:	4b16      	ldr	r3, [pc, #88]	; (8016360 <ResetFCnts+0x68>)
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801630e:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016310:	4b13      	ldr	r3, [pc, #76]	; (8016360 <ResetFCnts+0x68>)
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016318:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 801631a:	4b11      	ldr	r3, [pc, #68]	; (8016360 <ResetFCnts+0x68>)
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016322:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8016324:	4b0e      	ldr	r3, [pc, #56]	; (8016360 <ResetFCnts+0x68>)
 8016326:	681a      	ldr	r2, [r3, #0]
 8016328:	4b0d      	ldr	r3, [pc, #52]	; (8016360 <ResetFCnts+0x68>)
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	6992      	ldr	r2, [r2, #24]
 801632e:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016330:	2300      	movs	r3, #0
 8016332:	607b      	str	r3, [r7, #4]
 8016334:	e00b      	b.n	801634e <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 8016336:	4b0a      	ldr	r3, [pc, #40]	; (8016360 <ResetFCnts+0x68>)
 8016338:	681a      	ldr	r2, [r3, #0]
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	3306      	adds	r3, #6
 801633e:	009b      	lsls	r3, r3, #2
 8016340:	4413      	add	r3, r2
 8016342:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016346:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	3301      	adds	r3, #1
 801634c:	607b      	str	r3, [r7, #4]
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	2b00      	cmp	r3, #0
 8016352:	ddf0      	ble.n	8016336 <ResetFCnts+0x3e>
    }
}
 8016354:	bf00      	nop
 8016356:	bf00      	nop
 8016358:	370c      	adds	r7, #12
 801635a:	46bd      	mov	sp, r7
 801635c:	bc80      	pop	{r7}
 801635e:	4770      	bx	lr
 8016360:	20001bdc 	.word	0x20001bdc

08016364 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8016364:	b480      	push	{r7}
 8016366:	b083      	sub	sp, #12
 8016368:	af00      	add	r7, sp, #0
 801636a:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 801636c:	4b06      	ldr	r3, [pc, #24]	; (8016388 <IsJoinNonce10xOk+0x24>)
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	689b      	ldr	r3, [r3, #8]
 8016372:	687a      	ldr	r2, [r7, #4]
 8016374:	429a      	cmp	r2, r3
 8016376:	bf8c      	ite	hi
 8016378:	2301      	movhi	r3, #1
 801637a:	2300      	movls	r3, #0
 801637c:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 801637e:	4618      	mov	r0, r3
 8016380:	370c      	adds	r7, #12
 8016382:	46bd      	mov	sp, r7
 8016384:	bc80      	pop	{r7}
 8016386:	4770      	bx	lr
 8016388:	20001bdc 	.word	0x20001bdc

0801638c <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 801638c:	b580      	push	{r7, lr}
 801638e:	b082      	sub	sp, #8
 8016390:	af00      	add	r7, sp, #0
 8016392:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	2b00      	cmp	r3, #0
 8016398:	d101      	bne.n	801639e <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 801639a:	2308      	movs	r3, #8
 801639c:	e01c      	b.n	80163d8 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 801639e:	4a10      	ldr	r2, [pc, #64]	; (80163e0 <LoRaMacCryptoInit+0x54>)
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 80163a4:	4b0e      	ldr	r3, [pc, #56]	; (80163e0 <LoRaMacCryptoInit+0x54>)
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	2228      	movs	r2, #40	; 0x28
 80163aa:	2100      	movs	r1, #0
 80163ac:	4618      	mov	r0, r3
 80163ae:	f003 fa9f 	bl	80198f0 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 80163b2:	4b0b      	ldr	r3, [pc, #44]	; (80163e0 <LoRaMacCryptoInit+0x54>)
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	2201      	movs	r2, #1
 80163b8:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 80163ba:	4b09      	ldr	r3, [pc, #36]	; (80163e0 <LoRaMacCryptoInit+0x54>)
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	2201      	movs	r2, #1
 80163c0:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 80163c2:	4b07      	ldr	r3, [pc, #28]	; (80163e0 <LoRaMacCryptoInit+0x54>)
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	2201      	movs	r2, #1
 80163c8:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 80163ca:	4b05      	ldr	r3, [pc, #20]	; (80163e0 <LoRaMacCryptoInit+0x54>)
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	2200      	movs	r2, #0
 80163d0:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 80163d2:	f7ff ff91 	bl	80162f8 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80163d6:	2300      	movs	r3, #0
}
 80163d8:	4618      	mov	r0, r3
 80163da:	3708      	adds	r7, #8
 80163dc:	46bd      	mov	sp, r7
 80163de:	bd80      	pop	{r7, pc}
 80163e0:	20001bdc 	.word	0x20001bdc

080163e4 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 80163e4:	b480      	push	{r7}
 80163e6:	b083      	sub	sp, #12
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 80163ec:	4b04      	ldr	r3, [pc, #16]	; (8016400 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	687a      	ldr	r2, [r7, #4]
 80163f2:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80163f4:	2300      	movs	r3, #0
}
 80163f6:	4618      	mov	r0, r3
 80163f8:	370c      	adds	r7, #12
 80163fa:	46bd      	mov	sp, r7
 80163fc:	bc80      	pop	{r7}
 80163fe:	4770      	bx	lr
 8016400:	20001bdc 	.word	0x20001bdc

08016404 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8016404:	b480      	push	{r7}
 8016406:	b083      	sub	sp, #12
 8016408:	af00      	add	r7, sp, #0
 801640a:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	2b00      	cmp	r3, #0
 8016410:	d101      	bne.n	8016416 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016412:	2309      	movs	r3, #9
 8016414:	e006      	b.n	8016424 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8016416:	4b06      	ldr	r3, [pc, #24]	; (8016430 <LoRaMacCryptoGetFCntUp+0x2c>)
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	68db      	ldr	r3, [r3, #12]
 801641c:	1c5a      	adds	r2, r3, #1
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8016422:	2300      	movs	r3, #0
}
 8016424:	4618      	mov	r0, r3
 8016426:	370c      	adds	r7, #12
 8016428:	46bd      	mov	sp, r7
 801642a:	bc80      	pop	{r7}
 801642c:	4770      	bx	lr
 801642e:	bf00      	nop
 8016430:	20001bdc 	.word	0x20001bdc

08016434 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8016434:	b580      	push	{r7, lr}
 8016436:	b088      	sub	sp, #32
 8016438:	af00      	add	r7, sp, #0
 801643a:	4603      	mov	r3, r0
 801643c:	60b9      	str	r1, [r7, #8]
 801643e:	607a      	str	r2, [r7, #4]
 8016440:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8016442:	2300      	movs	r3, #0
 8016444:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8016446:	2300      	movs	r3, #0
 8016448:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 801644a:	2312      	movs	r3, #18
 801644c:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	2b00      	cmp	r3, #0
 8016452:	d101      	bne.n	8016458 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016454:	2309      	movs	r3, #9
 8016456:	e035      	b.n	80164c4 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8016458:	f107 0214 	add.w	r2, r7, #20
 801645c:	7bfb      	ldrb	r3, [r7, #15]
 801645e:	4611      	mov	r1, r2
 8016460:	4618      	mov	r0, r3
 8016462:	f7ff feab 	bl	80161bc <GetLastFcntDown>
 8016466:	4603      	mov	r3, r0
 8016468:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801646a:	7efb      	ldrb	r3, [r7, #27]
 801646c:	2b00      	cmp	r3, #0
 801646e:	d001      	beq.n	8016474 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8016470:	7efb      	ldrb	r3, [r7, #27]
 8016472:	e027      	b.n	80164c4 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8016474:	697b      	ldr	r3, [r7, #20]
 8016476:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801647a:	d103      	bne.n	8016484 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	68ba      	ldr	r2, [r7, #8]
 8016480:	601a      	str	r2, [r3, #0]
 8016482:	e01e      	b.n	80164c2 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8016484:	697b      	ldr	r3, [r7, #20]
 8016486:	b29b      	uxth	r3, r3
 8016488:	68ba      	ldr	r2, [r7, #8]
 801648a:	1ad3      	subs	r3, r2, r3
 801648c:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 801648e:	69fb      	ldr	r3, [r7, #28]
 8016490:	2b00      	cmp	r3, #0
 8016492:	dd05      	ble.n	80164a0 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8016494:	697a      	ldr	r2, [r7, #20]
 8016496:	69fb      	ldr	r3, [r7, #28]
 8016498:	441a      	add	r2, r3
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	601a      	str	r2, [r3, #0]
 801649e:	e010      	b.n	80164c2 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 80164a0:	69fb      	ldr	r3, [r7, #28]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d104      	bne.n	80164b0 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 80164a6:	697a      	ldr	r2, [r7, #20]
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80164ac:	2307      	movs	r3, #7
 80164ae:	e009      	b.n	80164c4 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80164b0:	697b      	ldr	r3, [r7, #20]
 80164b2:	0c1b      	lsrs	r3, r3, #16
 80164b4:	041b      	lsls	r3, r3, #16
 80164b6:	68ba      	ldr	r2, [r7, #8]
 80164b8:	4413      	add	r3, r2
 80164ba:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80164c2:	2300      	movs	r3, #0
}
 80164c4:	4618      	mov	r0, r3
 80164c6:	3720      	adds	r7, #32
 80164c8:	46bd      	mov	sp, r7
 80164ca:	bd80      	pop	{r7, pc}

080164cc <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80164cc:	b480      	push	{r7}
 80164ce:	b085      	sub	sp, #20
 80164d0:	af00      	add	r7, sp, #0
 80164d2:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d101      	bne.n	80164de <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80164da:	2309      	movs	r3, #9
 80164dc:	e019      	b.n	8016512 <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80164de:	2300      	movs	r3, #0
 80164e0:	60fb      	str	r3, [r7, #12]
 80164e2:	e012      	b.n	801650a <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80164e4:	4b0d      	ldr	r3, [pc, #52]	; (801651c <LoRaMacCryptoSetMulticastReference+0x50>)
 80164e6:	6819      	ldr	r1, [r3, #0]
 80164e8:	68fa      	ldr	r2, [r7, #12]
 80164ea:	4613      	mov	r3, r2
 80164ec:	005b      	lsls	r3, r3, #1
 80164ee:	4413      	add	r3, r2
 80164f0:	011b      	lsls	r3, r3, #4
 80164f2:	461a      	mov	r2, r3
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	4413      	add	r3, r2
 80164f8:	68fa      	ldr	r2, [r7, #12]
 80164fa:	3206      	adds	r2, #6
 80164fc:	0092      	lsls	r2, r2, #2
 80164fe:	440a      	add	r2, r1
 8016500:	3204      	adds	r2, #4
 8016502:	625a      	str	r2, [r3, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	3301      	adds	r3, #1
 8016508:	60fb      	str	r3, [r7, #12]
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	2b00      	cmp	r3, #0
 801650e:	dde9      	ble.n	80164e4 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016510:	2300      	movs	r3, #0
}
 8016512:	4618      	mov	r0, r3
 8016514:	3714      	adds	r7, #20
 8016516:	46bd      	mov	sp, r7
 8016518:	bc80      	pop	{r7}
 801651a:	4770      	bx	lr
 801651c:	20001bdc 	.word	0x20001bdc

08016520 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8016520:	b580      	push	{r7, lr}
 8016522:	b082      	sub	sp, #8
 8016524:	af00      	add	r7, sp, #0
 8016526:	4603      	mov	r3, r0
 8016528:	6039      	str	r1, [r7, #0]
 801652a:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 801652c:	79fb      	ldrb	r3, [r7, #7]
 801652e:	6839      	ldr	r1, [r7, #0]
 8016530:	4618      	mov	r0, r3
 8016532:	f7f7 fe29 	bl	800e188 <SecureElementSetKey>
 8016536:	4603      	mov	r3, r0
 8016538:	2b00      	cmp	r3, #0
 801653a:	d001      	beq.n	8016540 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801653c:	230e      	movs	r3, #14
 801653e:	e021      	b.n	8016584 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8016540:	79fb      	ldrb	r3, [r7, #7]
 8016542:	2b00      	cmp	r3, #0
 8016544:	d11d      	bne.n	8016582 <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016546:	4b11      	ldr	r3, [pc, #68]	; (801658c <LoRaMacCryptoSetKey+0x6c>)
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	789b      	ldrb	r3, [r3, #2]
 801654c:	210b      	movs	r1, #11
 801654e:	4618      	mov	r0, r3
 8016550:	f000 fa58 	bl	8016a04 <LoRaMacCryptoDeriveLifeTimeKey>
 8016554:	4603      	mov	r3, r0
 8016556:	2b00      	cmp	r3, #0
 8016558:	d001      	beq.n	801655e <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801655a:	230e      	movs	r3, #14
 801655c:	e012      	b.n	8016584 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801655e:	210c      	movs	r1, #12
 8016560:	2000      	movs	r0, #0
 8016562:	f000 fa4f 	bl	8016a04 <LoRaMacCryptoDeriveLifeTimeKey>
 8016566:	4603      	mov	r3, r0
 8016568:	2b00      	cmp	r3, #0
 801656a:	d001      	beq.n	8016570 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801656c:	230e      	movs	r3, #14
 801656e:	e009      	b.n	8016584 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016570:	210a      	movs	r1, #10
 8016572:	2000      	movs	r0, #0
 8016574:	f000 fa46 	bl	8016a04 <LoRaMacCryptoDeriveLifeTimeKey>
 8016578:	4603      	mov	r3, r0
 801657a:	2b00      	cmp	r3, #0
 801657c:	d001      	beq.n	8016582 <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801657e:	230e      	movs	r3, #14
 8016580:	e000      	b.n	8016584 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016582:	2300      	movs	r3, #0
}
 8016584:	4618      	mov	r0, r3
 8016586:	3708      	adds	r7, #8
 8016588:	46bd      	mov	sp, r7
 801658a:	bd80      	pop	{r7, pc}
 801658c:	20001bdc 	.word	0x20001bdc

08016590 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016590:	b580      	push	{r7, lr}
 8016592:	b086      	sub	sp, #24
 8016594:	af02      	add	r7, sp, #8
 8016596:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	2b00      	cmp	r3, #0
 801659c:	d101      	bne.n	80165a2 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801659e:	2309      	movs	r3, #9
 80165a0:	e02d      	b.n	80165fe <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80165a2:	2301      	movs	r3, #1
 80165a4:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 80165a6:	4b18      	ldr	r3, [pc, #96]	; (8016608 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	889a      	ldrh	r2, [r3, #4]
 80165ac:	3201      	adds	r2, #1
 80165ae:	b292      	uxth	r2, r2
 80165b0:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80165b2:	4b15      	ldr	r3, [pc, #84]	; (8016608 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	889a      	ldrh	r2, [r3, #4]
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80165bc:	6878      	ldr	r0, [r7, #4]
 80165be:	f000 fc1b 	bl	8016df8 <LoRaMacSerializerJoinRequest>
 80165c2:	4603      	mov	r3, r0
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d001      	beq.n	80165cc <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80165c8:	2310      	movs	r3, #16
 80165ca:	e018      	b.n	80165fe <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	6819      	ldr	r1, [r3, #0]
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	3318      	adds	r3, #24
 80165d4:	7bfa      	ldrb	r2, [r7, #15]
 80165d6:	9300      	str	r3, [sp, #0]
 80165d8:	4613      	mov	r3, r2
 80165da:	2213      	movs	r2, #19
 80165dc:	2000      	movs	r0, #0
 80165de:	f7f7 fe31 	bl	800e244 <SecureElementComputeAesCmac>
 80165e2:	4603      	mov	r3, r0
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d001      	beq.n	80165ec <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80165e8:	230e      	movs	r3, #14
 80165ea:	e008      	b.n	80165fe <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80165ec:	6878      	ldr	r0, [r7, #4]
 80165ee:	f000 fc03 	bl	8016df8 <LoRaMacSerializerJoinRequest>
 80165f2:	4603      	mov	r3, r0
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d001      	beq.n	80165fc <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80165f8:	2310      	movs	r3, #16
 80165fa:	e000      	b.n	80165fe <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80165fc:	2300      	movs	r3, #0
}
 80165fe:	4618      	mov	r0, r3
 8016600:	3710      	adds	r7, #16
 8016602:	46bd      	mov	sp, r7
 8016604:	bd80      	pop	{r7, pc}
 8016606:	bf00      	nop
 8016608:	20001bdc 	.word	0x20001bdc

0801660c <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 801660c:	b590      	push	{r4, r7, lr}
 801660e:	b097      	sub	sp, #92	; 0x5c
 8016610:	af04      	add	r7, sp, #16
 8016612:	4603      	mov	r3, r0
 8016614:	60b9      	str	r1, [r7, #8]
 8016616:	607a      	str	r2, [r7, #4]
 8016618:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	2b00      	cmp	r3, #0
 801661e:	d002      	beq.n	8016626 <LoRaMacCryptoHandleJoinAccept+0x1a>
 8016620:	68bb      	ldr	r3, [r7, #8]
 8016622:	2b00      	cmp	r3, #0
 8016624:	d101      	bne.n	801662a <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016626:	2309      	movs	r3, #9
 8016628:	e0d3      	b.n	80167d2 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801662a:	2312      	movs	r3, #18
 801662c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8016630:	2300      	movs	r3, #0
 8016632:	617b      	str	r3, [r7, #20]
 8016634:	f107 0318 	add.w	r3, r7, #24
 8016638:	221d      	movs	r2, #29
 801663a:	2100      	movs	r1, #0
 801663c:	4618      	mov	r0, r3
 801663e:	f007 ffbb 	bl	801e5b8 <memset>
    uint8_t versionMinor         = 0;
 8016642:	2300      	movs	r3, #0
 8016644:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8016646:	4b65      	ldr	r3, [pc, #404]	; (80167dc <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	889b      	ldrh	r3, [r3, #4]
 801664c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	681c      	ldr	r4, [r3, #0]
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	791b      	ldrb	r3, [r3, #4]
 8016658:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 801665c:	7bf8      	ldrb	r0, [r7, #15]
 801665e:	f107 0213 	add.w	r2, r7, #19
 8016662:	9202      	str	r2, [sp, #8]
 8016664:	f107 0214 	add.w	r2, r7, #20
 8016668:	9201      	str	r2, [sp, #4]
 801666a:	9300      	str	r3, [sp, #0]
 801666c:	4623      	mov	r3, r4
 801666e:	460a      	mov	r2, r1
 8016670:	68b9      	ldr	r1, [r7, #8]
 8016672:	f7f7 feed 	bl	800e450 <SecureElementProcessJoinAccept>
 8016676:	4603      	mov	r3, r0
 8016678:	2b00      	cmp	r3, #0
 801667a:	d001      	beq.n	8016680 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801667c:	230e      	movs	r3, #14
 801667e:	e0a8      	b.n	80167d2 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	6818      	ldr	r0, [r3, #0]
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	791b      	ldrb	r3, [r3, #4]
 8016688:	b29a      	uxth	r2, r3
 801668a:	f107 0314 	add.w	r3, r7, #20
 801668e:	4619      	mov	r1, r3
 8016690:	f003 f8f3 	bl	801987a <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016694:	6878      	ldr	r0, [r7, #4]
 8016696:	f000 f9f0 	bl	8016a7a <LoRaMacParserJoinAccept>
 801669a:	4603      	mov	r3, r0
 801669c:	2b00      	cmp	r3, #0
 801669e:	d001      	beq.n	80166a4 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80166a0:	230f      	movs	r3, #15
 80166a2:	e096      	b.n	80167d2 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 80166a4:	2300      	movs	r3, #0
 80166a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	799b      	ldrb	r3, [r3, #6]
 80166ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	79db      	ldrb	r3, [r3, #7]
 80166b4:	021b      	lsls	r3, r3, #8
 80166b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80166b8:	4313      	orrs	r3, r2
 80166ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	7a1b      	ldrb	r3, [r3, #8]
 80166c0:	041b      	lsls	r3, r3, #16
 80166c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80166c4:	4313      	orrs	r3, r2
 80166c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 80166c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80166ca:	f7ff fe4b 	bl	8016364 <IsJoinNonce10xOk>
 80166ce:	4603      	mov	r3, r0
 80166d0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    if( isJoinNonceOk == true )
 80166d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d010      	beq.n	80166fe <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 80166dc:	4b3f      	ldr	r3, [pc, #252]	; (80167dc <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80166e2:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 80166e4:	7cfb      	ldrb	r3, [r7, #19]
 80166e6:	210b      	movs	r1, #11
 80166e8:	4618      	mov	r0, r3
 80166ea:	f000 f98b 	bl	8016a04 <LoRaMacCryptoDeriveLifeTimeKey>
 80166ee:	4603      	mov	r3, r0
 80166f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80166f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d005      	beq.n	8016708 <LoRaMacCryptoHandleJoinAccept+0xfc>
 80166fc:	e001      	b.n	8016702 <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 80166fe:	2303      	movs	r3, #3
 8016700:	e067      	b.n	80167d2 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 8016702:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016706:	e064      	b.n	80167d2 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8016708:	210c      	movs	r1, #12
 801670a:	2000      	movs	r0, #0
 801670c:	f000 f97a 	bl	8016a04 <LoRaMacCryptoDeriveLifeTimeKey>
 8016710:	4603      	mov	r3, r0
 8016712:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016716:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801671a:	2b00      	cmp	r3, #0
 801671c:	d002      	beq.n	8016724 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 801671e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016722:	e056      	b.n	80167d2 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8016724:	210a      	movs	r1, #10
 8016726:	2000      	movs	r0, #0
 8016728:	f000 f96c 	bl	8016a04 <LoRaMacCryptoDeriveLifeTimeKey>
 801672c:	4603      	mov	r3, r0
 801672e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016732:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016736:	2b00      	cmp	r3, #0
 8016738:	d002      	beq.n	8016740 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 801673a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801673e:	e048      	b.n	80167d2 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	7a5b      	ldrb	r3, [r3, #9]
 8016744:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	7a9b      	ldrb	r3, [r3, #10]
 801674a:	021b      	lsls	r3, r3, #8
 801674c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801674e:	4313      	orrs	r3, r2
 8016750:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	7adb      	ldrb	r3, [r3, #11]
 8016756:	041b      	lsls	r3, r3, #16
 8016758:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801675a:	4313      	orrs	r3, r2
 801675c:	63bb      	str	r3, [r7, #56]	; 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 801675e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016762:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016764:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016766:	2009      	movs	r0, #9
 8016768:	f7ff fcd8 	bl	801611c <DeriveSessionKey10x>
 801676c:	4603      	mov	r3, r0
 801676e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016772:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016776:	2b00      	cmp	r3, #0
 8016778:	d002      	beq.n	8016780 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 801677a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801677e:	e028      	b.n	80167d2 <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8016780:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016784:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016786:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016788:	2008      	movs	r0, #8
 801678a:	f7ff fcc7 	bl	801611c <DeriveSessionKey10x>
 801678e:	4603      	mov	r3, r0
 8016790:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016794:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016798:	2b00      	cmp	r3, #0
 801679a:	d002      	beq.n	80167a2 <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 801679c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80167a0:	e017      	b.n	80167d2 <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80167a2:	4b0e      	ldr	r3, [pc, #56]	; (80167dc <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	7cfa      	ldrb	r2, [r7, #19]
 80167a8:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 80167aa:	4b0c      	ldr	r3, [pc, #48]	; (80167dc <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	2200      	movs	r2, #0
 80167b0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 80167b2:	4b0a      	ldr	r3, [pc, #40]	; (80167dc <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80167ba:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80167bc:	4b07      	ldr	r3, [pc, #28]	; (80167dc <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80167c4:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80167c6:	4b05      	ldr	r3, [pc, #20]	; (80167dc <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80167ce:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 80167d0:	2300      	movs	r3, #0
}
 80167d2:	4618      	mov	r0, r3
 80167d4:	374c      	adds	r7, #76	; 0x4c
 80167d6:	46bd      	mov	sp, r7
 80167d8:	bd90      	pop	{r4, r7, pc}
 80167da:	bf00      	nop
 80167dc:	20001bdc 	.word	0x20001bdc

080167e0 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80167e0:	b590      	push	{r4, r7, lr}
 80167e2:	b08b      	sub	sp, #44	; 0x2c
 80167e4:	af04      	add	r7, sp, #16
 80167e6:	60f8      	str	r0, [r7, #12]
 80167e8:	607b      	str	r3, [r7, #4]
 80167ea:	460b      	mov	r3, r1
 80167ec:	72fb      	strb	r3, [r7, #11]
 80167ee:	4613      	mov	r3, r2
 80167f0:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80167f2:	2312      	movs	r3, #18
 80167f4:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80167f6:	2309      	movs	r3, #9
 80167f8:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d101      	bne.n	8016804 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016800:	2309      	movs	r3, #9
 8016802:	e05f      	b.n	80168c4 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8016804:	4b31      	ldr	r3, [pc, #196]	; (80168cc <LoRaMacCryptoSecureMessage+0xec>)
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	68db      	ldr	r3, [r3, #12]
 801680a:	68fa      	ldr	r2, [r7, #12]
 801680c:	429a      	cmp	r2, r3
 801680e:	d201      	bcs.n	8016814 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016810:	2306      	movs	r3, #6
 8016812:	e057      	b.n	80168c4 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	f893 3020 	ldrb.w	r3, [r3, #32]
 801681a:	2b00      	cmp	r3, #0
 801681c:	d101      	bne.n	8016822 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 801681e:	2308      	movs	r3, #8
 8016820:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8016822:	4b2a      	ldr	r3, [pc, #168]	; (80168cc <LoRaMacCryptoSecureMessage+0xec>)
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	68db      	ldr	r3, [r3, #12]
 8016828:	68fa      	ldr	r2, [r7, #12]
 801682a:	429a      	cmp	r2, r3
 801682c:	d916      	bls.n	801685c <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016838:	b219      	sxth	r1, r3
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	689c      	ldr	r4, [r3, #8]
 801683e:	7dfa      	ldrb	r2, [r7, #23]
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	9301      	str	r3, [sp, #4]
 8016844:	2300      	movs	r3, #0
 8016846:	9300      	str	r3, [sp, #0]
 8016848:	4623      	mov	r3, r4
 801684a:	f7ff fa73 	bl	8015d34 <PayloadEncrypt>
 801684e:	4603      	mov	r3, r0
 8016850:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016852:	7dbb      	ldrb	r3, [r7, #22]
 8016854:	2b00      	cmp	r3, #0
 8016856:	d001      	beq.n	801685c <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8016858:	7dbb      	ldrb	r3, [r7, #22]
 801685a:	e033      	b.n	80168c4 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801685c:	6878      	ldr	r0, [r7, #4]
 801685e:	f000 fb4d 	bl	8016efc <LoRaMacSerializerData>
 8016862:	4603      	mov	r3, r0
 8016864:	2b00      	cmp	r3, #0
 8016866:	d001      	beq.n	801686c <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016868:	2310      	movs	r3, #16
 801686a:	e02b      	b.n	80168c4 <LoRaMacCryptoSecureMessage+0xe4>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 801686c:	2308      	movs	r3, #8
 801686e:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	6818      	ldr	r0, [r3, #0]
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	791b      	ldrb	r3, [r3, #4]
 8016878:	b29b      	uxth	r3, r3
 801687a:	3b04      	subs	r3, #4
 801687c:	b299      	uxth	r1, r3
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	689b      	ldr	r3, [r3, #8]
 8016882:	687a      	ldr	r2, [r7, #4]
 8016884:	322c      	adds	r2, #44	; 0x2c
 8016886:	7dfc      	ldrb	r4, [r7, #23]
 8016888:	9203      	str	r2, [sp, #12]
 801688a:	68fa      	ldr	r2, [r7, #12]
 801688c:	9202      	str	r2, [sp, #8]
 801688e:	9301      	str	r3, [sp, #4]
 8016890:	2300      	movs	r3, #0
 8016892:	9300      	str	r3, [sp, #0]
 8016894:	2300      	movs	r3, #0
 8016896:	4622      	mov	r2, r4
 8016898:	f7ff fb4d 	bl	8015f36 <ComputeCmacB0>
 801689c:	4603      	mov	r3, r0
 801689e:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80168a0:	7dbb      	ldrb	r3, [r7, #22]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d001      	beq.n	80168aa <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 80168a6:	7dbb      	ldrb	r3, [r7, #22]
 80168a8:	e00c      	b.n	80168c4 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80168aa:	6878      	ldr	r0, [r7, #4]
 80168ac:	f000 fb26 	bl	8016efc <LoRaMacSerializerData>
 80168b0:	4603      	mov	r3, r0
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d001      	beq.n	80168ba <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80168b6:	2310      	movs	r3, #16
 80168b8:	e004      	b.n	80168c4 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 80168ba:	4b04      	ldr	r3, [pc, #16]	; (80168cc <LoRaMacCryptoSecureMessage+0xec>)
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	68fa      	ldr	r2, [r7, #12]
 80168c0:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 80168c2:	2300      	movs	r3, #0
}
 80168c4:	4618      	mov	r0, r3
 80168c6:	371c      	adds	r7, #28
 80168c8:	46bd      	mov	sp, r7
 80168ca:	bd90      	pop	{r4, r7, pc}
 80168cc:	20001bdc 	.word	0x20001bdc

080168d0 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 80168d0:	b590      	push	{r4, r7, lr}
 80168d2:	b08b      	sub	sp, #44	; 0x2c
 80168d4:	af04      	add	r7, sp, #16
 80168d6:	60b9      	str	r1, [r7, #8]
 80168d8:	607b      	str	r3, [r7, #4]
 80168da:	4603      	mov	r3, r0
 80168dc:	73fb      	strb	r3, [r7, #15]
 80168de:	4613      	mov	r3, r2
 80168e0:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 80168e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d101      	bne.n	80168ec <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80168e8:	2309      	movs	r3, #9
 80168ea:	e084      	b.n	80169f6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 80168ec:	7bbb      	ldrb	r3, [r7, #14]
 80168ee:	6879      	ldr	r1, [r7, #4]
 80168f0:	4618      	mov	r0, r3
 80168f2:	f7ff fc9f 	bl	8016234 <CheckFCntDown>
 80168f6:	4603      	mov	r3, r0
 80168f8:	f083 0301 	eor.w	r3, r3, #1
 80168fc:	b2db      	uxtb	r3, r3
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d001      	beq.n	8016906 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016902:	2306      	movs	r3, #6
 8016904:	e077      	b.n	80169f6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016906:	2312      	movs	r3, #18
 8016908:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801690a:	2309      	movs	r3, #9
 801690c:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 801690e:	2308      	movs	r3, #8
 8016910:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016912:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016914:	f000 f97c 	bl	8016c10 <LoRaMacParserData>
 8016918:	4603      	mov	r3, r0
 801691a:	2b00      	cmp	r3, #0
 801691c:	d001      	beq.n	8016922 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801691e:	230f      	movs	r3, #15
 8016920:	e069      	b.n	80169f6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8016922:	f107 0210 	add.w	r2, r7, #16
 8016926:	7bfb      	ldrb	r3, [r7, #15]
 8016928:	4611      	mov	r1, r2
 801692a:	4618      	mov	r0, r3
 801692c:	f7ff fbd0 	bl	80160d0 <GetKeyAddrItem>
 8016930:	4603      	mov	r3, r0
 8016932:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016934:	7d7b      	ldrb	r3, [r7, #21]
 8016936:	2b00      	cmp	r3, #0
 8016938:	d001      	beq.n	801693e <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801693a:	7d7b      	ldrb	r3, [r7, #21]
 801693c:	e05b      	b.n	80169f6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 801693e:	693b      	ldr	r3, [r7, #16]
 8016940:	785b      	ldrb	r3, [r3, #1]
 8016942:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8016944:	693b      	ldr	r3, [r7, #16]
 8016946:	789b      	ldrb	r3, [r3, #2]
 8016948:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801694a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801694c:	689b      	ldr	r3, [r3, #8]
 801694e:	68ba      	ldr	r2, [r7, #8]
 8016950:	429a      	cmp	r2, r3
 8016952:	d001      	beq.n	8016958 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8016954:	2302      	movs	r3, #2
 8016956:	e04e      	b.n	80169f6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8016958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801695a:	7b1b      	ldrb	r3, [r3, #12]
 801695c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8016960:	b2db      	uxtb	r3, r3
 8016962:	2b00      	cmp	r3, #0
 8016964:	bf14      	ite	ne
 8016966:	2301      	movne	r3, #1
 8016968:	2300      	moveq	r3, #0
 801696a:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 801696c:	4b24      	ldr	r3, [pc, #144]	; (8016a00 <LoRaMacCryptoUnsecureMessage+0x130>)
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	789b      	ldrb	r3, [r3, #2]
 8016972:	2b00      	cmp	r3, #0
 8016974:	d101      	bne.n	801697a <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8016976:	2300      	movs	r3, #0
 8016978:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801697a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801697c:	6818      	ldr	r0, [r3, #0]
 801697e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016980:	791b      	ldrb	r3, [r3, #4]
 8016982:	b29b      	uxth	r3, r3
 8016984:	3b04      	subs	r3, #4
 8016986:	b299      	uxth	r1, r3
 8016988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801698a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801698c:	7dbc      	ldrb	r4, [r7, #22]
 801698e:	7d3a      	ldrb	r2, [r7, #20]
 8016990:	9303      	str	r3, [sp, #12]
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	9302      	str	r3, [sp, #8]
 8016996:	68bb      	ldr	r3, [r7, #8]
 8016998:	9301      	str	r3, [sp, #4]
 801699a:	2301      	movs	r3, #1
 801699c:	9300      	str	r3, [sp, #0]
 801699e:	4623      	mov	r3, r4
 80169a0:	f7ff fb07 	bl	8015fb2 <VerifyCmacB0>
 80169a4:	4603      	mov	r3, r0
 80169a6:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80169a8:	7d7b      	ldrb	r3, [r7, #21]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d001      	beq.n	80169b2 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 80169ae:	7d7b      	ldrb	r3, [r7, #21]
 80169b0:	e021      	b.n	80169f6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80169b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d101      	bne.n	80169c0 <LoRaMacCryptoUnsecureMessage+0xf0>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80169bc:	2308      	movs	r3, #8
 80169be:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80169c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169c2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80169c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80169ca:	b219      	sxth	r1, r3
 80169cc:	7dfa      	ldrb	r2, [r7, #23]
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	9301      	str	r3, [sp, #4]
 80169d2:	2301      	movs	r3, #1
 80169d4:	9300      	str	r3, [sp, #0]
 80169d6:	68bb      	ldr	r3, [r7, #8]
 80169d8:	f7ff f9ac 	bl	8015d34 <PayloadEncrypt>
 80169dc:	4603      	mov	r3, r0
 80169de:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80169e0:	7d7b      	ldrb	r3, [r7, #21]
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d001      	beq.n	80169ea <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 80169e6:	7d7b      	ldrb	r3, [r7, #21]
 80169e8:	e005      	b.n	80169f6 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 80169ea:	7bbb      	ldrb	r3, [r7, #14]
 80169ec:	6879      	ldr	r1, [r7, #4]
 80169ee:	4618      	mov	r0, r3
 80169f0:	f7ff fc44 	bl	801627c <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80169f4:	2300      	movs	r3, #0
}
 80169f6:	4618      	mov	r0, r3
 80169f8:	371c      	adds	r7, #28
 80169fa:	46bd      	mov	sp, r7
 80169fc:	bd90      	pop	{r4, r7, pc}
 80169fe:	bf00      	nop
 8016a00:	20001bdc 	.word	0x20001bdc

08016a04 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8016a04:	b580      	push	{r7, lr}
 8016a06:	b088      	sub	sp, #32
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	4603      	mov	r3, r0
 8016a0c:	460a      	mov	r2, r1
 8016a0e:	71fb      	strb	r3, [r7, #7]
 8016a10:	4613      	mov	r3, r2
 8016a12:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8016a14:	2300      	movs	r3, #0
 8016a16:	60fb      	str	r3, [r7, #12]
 8016a18:	f107 0310 	add.w	r3, r7, #16
 8016a1c:	2200      	movs	r2, #0
 8016a1e:	601a      	str	r2, [r3, #0]
 8016a20:	605a      	str	r2, [r3, #4]
 8016a22:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8016a24:	2300      	movs	r3, #0
 8016a26:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8016a28:	79bb      	ldrb	r3, [r7, #6]
 8016a2a:	2b0c      	cmp	r3, #12
 8016a2c:	d00b      	beq.n	8016a46 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 8016a2e:	2b0c      	cmp	r3, #12
 8016a30:	dc0f      	bgt.n	8016a52 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 8016a32:	2b0a      	cmp	r3, #10
 8016a34:	d00a      	beq.n	8016a4c <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 8016a36:	2b0b      	cmp	r3, #11
 8016a38:	d10b      	bne.n	8016a52 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8016a3a:	79fb      	ldrb	r3, [r7, #7]
 8016a3c:	2b01      	cmp	r3, #1
 8016a3e:	d10a      	bne.n	8016a56 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8016a40:	2320      	movs	r3, #32
 8016a42:	733b      	strb	r3, [r7, #12]
            }
            break;
 8016a44:	e007      	b.n	8016a56 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8016a46:	230b      	movs	r3, #11
 8016a48:	77fb      	strb	r3, [r7, #31]
            break;
 8016a4a:	e005      	b.n	8016a58 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8016a4c:	2330      	movs	r3, #48	; 0x30
 8016a4e:	733b      	strb	r3, [r7, #12]
            break;
 8016a50:	e002      	b.n	8016a58 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8016a52:	230a      	movs	r3, #10
 8016a54:	e00d      	b.n	8016a72 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 8016a56:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8016a58:	79ba      	ldrb	r2, [r7, #6]
 8016a5a:	7ff9      	ldrb	r1, [r7, #31]
 8016a5c:	f107 030c 	add.w	r3, r7, #12
 8016a60:	4618      	mov	r0, r3
 8016a62:	f7f7 fcb5 	bl	800e3d0 <SecureElementDeriveAndStoreKey>
 8016a66:	4603      	mov	r3, r0
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d001      	beq.n	8016a70 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016a6c:	230e      	movs	r3, #14
 8016a6e:	e000      	b.n	8016a72 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016a70:	2300      	movs	r3, #0
}
 8016a72:	4618      	mov	r0, r3
 8016a74:	3720      	adds	r7, #32
 8016a76:	46bd      	mov	sp, r7
 8016a78:	bd80      	pop	{r7, pc}

08016a7a <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8016a7a:	b580      	push	{r7, lr}
 8016a7c:	b084      	sub	sp, #16
 8016a7e:	af00      	add	r7, sp, #0
 8016a80:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d003      	beq.n	8016a90 <LoRaMacParserJoinAccept+0x16>
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d101      	bne.n	8016a94 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8016a90:	2302      	movs	r3, #2
 8016a92:	e0b9      	b.n	8016c08 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8016a94:	2300      	movs	r3, #0
 8016a96:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	681a      	ldr	r2, [r3, #0]
 8016a9c:	89fb      	ldrh	r3, [r7, #14]
 8016a9e:	1c59      	adds	r1, r3, #1
 8016aa0:	81f9      	strh	r1, [r7, #14]
 8016aa2:	4413      	add	r3, r2
 8016aa4:	781a      	ldrb	r2, [r3, #0]
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	1d98      	adds	r0, r3, #6
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	681a      	ldr	r2, [r3, #0]
 8016ab2:	89fb      	ldrh	r3, [r7, #14]
 8016ab4:	4413      	add	r3, r2
 8016ab6:	2203      	movs	r2, #3
 8016ab8:	4619      	mov	r1, r3
 8016aba:	f002 fede 	bl	801987a <memcpy1>
    bufItr = bufItr + 3;
 8016abe:	89fb      	ldrh	r3, [r7, #14]
 8016ac0:	3303      	adds	r3, #3
 8016ac2:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	f103 0009 	add.w	r0, r3, #9
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	681a      	ldr	r2, [r3, #0]
 8016ace:	89fb      	ldrh	r3, [r7, #14]
 8016ad0:	4413      	add	r3, r2
 8016ad2:	2203      	movs	r2, #3
 8016ad4:	4619      	mov	r1, r3
 8016ad6:	f002 fed0 	bl	801987a <memcpy1>
    bufItr = bufItr + 3;
 8016ada:	89fb      	ldrh	r3, [r7, #14]
 8016adc:	3303      	adds	r3, #3
 8016ade:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	681a      	ldr	r2, [r3, #0]
 8016ae4:	89fb      	ldrh	r3, [r7, #14]
 8016ae6:	1c59      	adds	r1, r3, #1
 8016ae8:	81f9      	strh	r1, [r7, #14]
 8016aea:	4413      	add	r3, r2
 8016aec:	781b      	ldrb	r3, [r3, #0]
 8016aee:	461a      	mov	r2, r3
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	681a      	ldr	r2, [r3, #0]
 8016af8:	89fb      	ldrh	r3, [r7, #14]
 8016afa:	1c59      	adds	r1, r3, #1
 8016afc:	81f9      	strh	r1, [r7, #14]
 8016afe:	4413      	add	r3, r2
 8016b00:	781b      	ldrb	r3, [r3, #0]
 8016b02:	021a      	lsls	r2, r3, #8
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	68db      	ldr	r3, [r3, #12]
 8016b08:	431a      	orrs	r2, r3
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	681a      	ldr	r2, [r3, #0]
 8016b12:	89fb      	ldrh	r3, [r7, #14]
 8016b14:	1c59      	adds	r1, r3, #1
 8016b16:	81f9      	strh	r1, [r7, #14]
 8016b18:	4413      	add	r3, r2
 8016b1a:	781b      	ldrb	r3, [r3, #0]
 8016b1c:	041a      	lsls	r2, r3, #16
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	68db      	ldr	r3, [r3, #12]
 8016b22:	431a      	orrs	r2, r3
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	681a      	ldr	r2, [r3, #0]
 8016b2c:	89fb      	ldrh	r3, [r7, #14]
 8016b2e:	1c59      	adds	r1, r3, #1
 8016b30:	81f9      	strh	r1, [r7, #14]
 8016b32:	4413      	add	r3, r2
 8016b34:	781b      	ldrb	r3, [r3, #0]
 8016b36:	061a      	lsls	r2, r3, #24
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	68db      	ldr	r3, [r3, #12]
 8016b3c:	431a      	orrs	r2, r3
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	681a      	ldr	r2, [r3, #0]
 8016b46:	89fb      	ldrh	r3, [r7, #14]
 8016b48:	1c59      	adds	r1, r3, #1
 8016b4a:	81f9      	strh	r1, [r7, #14]
 8016b4c:	4413      	add	r3, r2
 8016b4e:	781a      	ldrb	r2, [r3, #0]
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	681a      	ldr	r2, [r3, #0]
 8016b58:	89fb      	ldrh	r3, [r7, #14]
 8016b5a:	1c59      	adds	r1, r3, #1
 8016b5c:	81f9      	strh	r1, [r7, #14]
 8016b5e:	4413      	add	r3, r2
 8016b60:	781a      	ldrb	r2, [r3, #0]
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	791b      	ldrb	r3, [r3, #4]
 8016b6a:	1f1a      	subs	r2, r3, #4
 8016b6c:	89fb      	ldrh	r3, [r7, #14]
 8016b6e:	1ad3      	subs	r3, r2, r3
 8016b70:	2b10      	cmp	r3, #16
 8016b72:	d10e      	bne.n	8016b92 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	f103 0012 	add.w	r0, r3, #18
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	681a      	ldr	r2, [r3, #0]
 8016b7e:	89fb      	ldrh	r3, [r7, #14]
 8016b80:	4413      	add	r3, r2
 8016b82:	2210      	movs	r2, #16
 8016b84:	4619      	mov	r1, r3
 8016b86:	f002 fe78 	bl	801987a <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8016b8a:	89fb      	ldrh	r3, [r7, #14]
 8016b8c:	3310      	adds	r3, #16
 8016b8e:	81fb      	strh	r3, [r7, #14]
 8016b90:	e008      	b.n	8016ba4 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	791b      	ldrb	r3, [r3, #4]
 8016b96:	1f1a      	subs	r2, r3, #4
 8016b98:	89fb      	ldrh	r3, [r7, #14]
 8016b9a:	1ad3      	subs	r3, r2, r3
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	dd01      	ble.n	8016ba4 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8016ba0:	2301      	movs	r3, #1
 8016ba2:	e031      	b.n	8016c08 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	681a      	ldr	r2, [r3, #0]
 8016ba8:	89fb      	ldrh	r3, [r7, #14]
 8016baa:	1c59      	adds	r1, r3, #1
 8016bac:	81f9      	strh	r1, [r7, #14]
 8016bae:	4413      	add	r3, r2
 8016bb0:	781b      	ldrb	r3, [r3, #0]
 8016bb2:	461a      	mov	r2, r3
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	681a      	ldr	r2, [r3, #0]
 8016bbc:	89fb      	ldrh	r3, [r7, #14]
 8016bbe:	1c59      	adds	r1, r3, #1
 8016bc0:	81f9      	strh	r1, [r7, #14]
 8016bc2:	4413      	add	r3, r2
 8016bc4:	781b      	ldrb	r3, [r3, #0]
 8016bc6:	021a      	lsls	r2, r3, #8
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bcc:	431a      	orrs	r2, r3
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	681a      	ldr	r2, [r3, #0]
 8016bd6:	89fb      	ldrh	r3, [r7, #14]
 8016bd8:	1c59      	adds	r1, r3, #1
 8016bda:	81f9      	strh	r1, [r7, #14]
 8016bdc:	4413      	add	r3, r2
 8016bde:	781b      	ldrb	r3, [r3, #0]
 8016be0:	041a      	lsls	r2, r3, #16
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016be6:	431a      	orrs	r2, r3
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	681a      	ldr	r2, [r3, #0]
 8016bf0:	89fb      	ldrh	r3, [r7, #14]
 8016bf2:	1c59      	adds	r1, r3, #1
 8016bf4:	81f9      	strh	r1, [r7, #14]
 8016bf6:	4413      	add	r3, r2
 8016bf8:	781b      	ldrb	r3, [r3, #0]
 8016bfa:	061a      	lsls	r2, r3, #24
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c00:	431a      	orrs	r2, r3
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8016c06:	2300      	movs	r3, #0
}
 8016c08:	4618      	mov	r0, r3
 8016c0a:	3710      	adds	r7, #16
 8016c0c:	46bd      	mov	sp, r7
 8016c0e:	bd80      	pop	{r7, pc}

08016c10 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8016c10:	b580      	push	{r7, lr}
 8016c12:	b084      	sub	sp, #16
 8016c14:	af00      	add	r7, sp, #0
 8016c16:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d003      	beq.n	8016c26 <LoRaMacParserData+0x16>
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d101      	bne.n	8016c2a <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8016c26:	2302      	movs	r3, #2
 8016c28:	e0e2      	b.n	8016df0 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8016c2a:	2300      	movs	r3, #0
 8016c2c:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	681a      	ldr	r2, [r3, #0]
 8016c32:	89fb      	ldrh	r3, [r7, #14]
 8016c34:	1c59      	adds	r1, r3, #1
 8016c36:	81f9      	strh	r1, [r7, #14]
 8016c38:	4413      	add	r3, r2
 8016c3a:	781a      	ldrb	r2, [r3, #0]
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	681a      	ldr	r2, [r3, #0]
 8016c44:	89fb      	ldrh	r3, [r7, #14]
 8016c46:	1c59      	adds	r1, r3, #1
 8016c48:	81f9      	strh	r1, [r7, #14]
 8016c4a:	4413      	add	r3, r2
 8016c4c:	781b      	ldrb	r3, [r3, #0]
 8016c4e:	461a      	mov	r2, r3
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	681a      	ldr	r2, [r3, #0]
 8016c58:	89fb      	ldrh	r3, [r7, #14]
 8016c5a:	1c59      	adds	r1, r3, #1
 8016c5c:	81f9      	strh	r1, [r7, #14]
 8016c5e:	4413      	add	r3, r2
 8016c60:	781b      	ldrb	r3, [r3, #0]
 8016c62:	021a      	lsls	r2, r3, #8
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	689b      	ldr	r3, [r3, #8]
 8016c68:	431a      	orrs	r2, r3
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	681a      	ldr	r2, [r3, #0]
 8016c72:	89fb      	ldrh	r3, [r7, #14]
 8016c74:	1c59      	adds	r1, r3, #1
 8016c76:	81f9      	strh	r1, [r7, #14]
 8016c78:	4413      	add	r3, r2
 8016c7a:	781b      	ldrb	r3, [r3, #0]
 8016c7c:	041a      	lsls	r2, r3, #16
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	689b      	ldr	r3, [r3, #8]
 8016c82:	431a      	orrs	r2, r3
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	681a      	ldr	r2, [r3, #0]
 8016c8c:	89fb      	ldrh	r3, [r7, #14]
 8016c8e:	1c59      	adds	r1, r3, #1
 8016c90:	81f9      	strh	r1, [r7, #14]
 8016c92:	4413      	add	r3, r2
 8016c94:	781b      	ldrb	r3, [r3, #0]
 8016c96:	061a      	lsls	r2, r3, #24
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	689b      	ldr	r3, [r3, #8]
 8016c9c:	431a      	orrs	r2, r3
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	681a      	ldr	r2, [r3, #0]
 8016ca6:	89fb      	ldrh	r3, [r7, #14]
 8016ca8:	1c59      	adds	r1, r3, #1
 8016caa:	81f9      	strh	r1, [r7, #14]
 8016cac:	4413      	add	r3, r2
 8016cae:	781a      	ldrb	r2, [r3, #0]
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	681a      	ldr	r2, [r3, #0]
 8016cb8:	89fb      	ldrh	r3, [r7, #14]
 8016cba:	1c59      	adds	r1, r3, #1
 8016cbc:	81f9      	strh	r1, [r7, #14]
 8016cbe:	4413      	add	r3, r2
 8016cc0:	781b      	ldrb	r3, [r3, #0]
 8016cc2:	b29a      	uxth	r2, r3
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	681a      	ldr	r2, [r3, #0]
 8016ccc:	89fb      	ldrh	r3, [r7, #14]
 8016cce:	1c59      	adds	r1, r3, #1
 8016cd0:	81f9      	strh	r1, [r7, #14]
 8016cd2:	4413      	add	r3, r2
 8016cd4:	781b      	ldrb	r3, [r3, #0]
 8016cd6:	0219      	lsls	r1, r3, #8
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	89db      	ldrh	r3, [r3, #14]
 8016cdc:	b21a      	sxth	r2, r3
 8016cde:	b20b      	sxth	r3, r1
 8016ce0:	4313      	orrs	r3, r2
 8016ce2:	b21b      	sxth	r3, r3
 8016ce4:	b29a      	uxth	r2, r3
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	f103 0010 	add.w	r0, r3, #16
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	681a      	ldr	r2, [r3, #0]
 8016cf4:	89fb      	ldrh	r3, [r7, #14]
 8016cf6:	18d1      	adds	r1, r2, r3
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	7b1b      	ldrb	r3, [r3, #12]
 8016cfc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8016d00:	b2db      	uxtb	r3, r3
 8016d02:	b29b      	uxth	r3, r3
 8016d04:	461a      	mov	r2, r3
 8016d06:	f002 fdb8 	bl	801987a <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	7b1b      	ldrb	r3, [r3, #12]
 8016d0e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8016d12:	b2db      	uxtb	r3, r3
 8016d14:	b29a      	uxth	r2, r3
 8016d16:	89fb      	ldrh	r3, [r7, #14]
 8016d18:	4413      	add	r3, r2
 8016d1a:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	2200      	movs	r2, #0
 8016d20:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	2200      	movs	r2, #0
 8016d28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	791b      	ldrb	r3, [r3, #4]
 8016d30:	461a      	mov	r2, r3
 8016d32:	89fb      	ldrh	r3, [r7, #14]
 8016d34:	1ad3      	subs	r3, r2, r3
 8016d36:	2b04      	cmp	r3, #4
 8016d38:	dd28      	ble.n	8016d8c <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	681a      	ldr	r2, [r3, #0]
 8016d3e:	89fb      	ldrh	r3, [r7, #14]
 8016d40:	1c59      	adds	r1, r3, #1
 8016d42:	81f9      	strh	r1, [r7, #14]
 8016d44:	4413      	add	r3, r2
 8016d46:	781a      	ldrb	r2, [r3, #0]
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	791a      	ldrb	r2, [r3, #4]
 8016d52:	89fb      	ldrh	r3, [r7, #14]
 8016d54:	b2db      	uxtb	r3, r3
 8016d56:	1ad3      	subs	r3, r2, r3
 8016d58:	b2db      	uxtb	r3, r3
 8016d5a:	3b04      	subs	r3, #4
 8016d5c:	b2da      	uxtb	r2, r3
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	681a      	ldr	r2, [r3, #0]
 8016d6c:	89fb      	ldrh	r3, [r7, #14]
 8016d6e:	18d1      	adds	r1, r2, r3
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016d76:	b29b      	uxth	r3, r3
 8016d78:	461a      	mov	r2, r3
 8016d7a:	f002 fd7e 	bl	801987a <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016d84:	b29a      	uxth	r2, r3
 8016d86:	89fb      	ldrh	r3, [r7, #14]
 8016d88:	4413      	add	r3, r2
 8016d8a:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	681a      	ldr	r2, [r3, #0]
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	791b      	ldrb	r3, [r3, #4]
 8016d94:	3b04      	subs	r3, #4
 8016d96:	4413      	add	r3, r2
 8016d98:	781b      	ldrb	r3, [r3, #0]
 8016d9a:	461a      	mov	r2, r3
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	6819      	ldr	r1, [r3, #0]
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	791b      	ldrb	r3, [r3, #4]
 8016dac:	3b03      	subs	r3, #3
 8016dae:	440b      	add	r3, r1
 8016db0:	781b      	ldrb	r3, [r3, #0]
 8016db2:	021b      	lsls	r3, r3, #8
 8016db4:	431a      	orrs	r2, r3
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	6819      	ldr	r1, [r3, #0]
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	791b      	ldrb	r3, [r3, #4]
 8016dc6:	3b02      	subs	r3, #2
 8016dc8:	440b      	add	r3, r1
 8016dca:	781b      	ldrb	r3, [r3, #0]
 8016dcc:	041b      	lsls	r3, r3, #16
 8016dce:	431a      	orrs	r2, r3
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	6819      	ldr	r1, [r3, #0]
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	791b      	ldrb	r3, [r3, #4]
 8016de0:	3b01      	subs	r3, #1
 8016de2:	440b      	add	r3, r1
 8016de4:	781b      	ldrb	r3, [r3, #0]
 8016de6:	061b      	lsls	r3, r3, #24
 8016de8:	431a      	orrs	r2, r3
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8016dee:	2300      	movs	r3, #0
}
 8016df0:	4618      	mov	r0, r3
 8016df2:	3710      	adds	r7, #16
 8016df4:	46bd      	mov	sp, r7
 8016df6:	bd80      	pop	{r7, pc}

08016df8 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016df8:	b580      	push	{r7, lr}
 8016dfa:	b084      	sub	sp, #16
 8016dfc:	af00      	add	r7, sp, #0
 8016dfe:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d003      	beq.n	8016e0e <LoRaMacSerializerJoinRequest+0x16>
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d101      	bne.n	8016e12 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8016e0e:	2301      	movs	r3, #1
 8016e10:	e070      	b.n	8016ef4 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8016e12:	2300      	movs	r3, #0
 8016e14:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	791b      	ldrb	r3, [r3, #4]
 8016e1a:	2b16      	cmp	r3, #22
 8016e1c:	d801      	bhi.n	8016e22 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8016e1e:	2302      	movs	r3, #2
 8016e20:	e068      	b.n	8016ef4 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	681a      	ldr	r2, [r3, #0]
 8016e26:	89fb      	ldrh	r3, [r7, #14]
 8016e28:	1c59      	adds	r1, r3, #1
 8016e2a:	81f9      	strh	r1, [r7, #14]
 8016e2c:	4413      	add	r3, r2
 8016e2e:	687a      	ldr	r2, [r7, #4]
 8016e30:	7952      	ldrb	r2, [r2, #5]
 8016e32:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	681a      	ldr	r2, [r3, #0]
 8016e38:	89fb      	ldrh	r3, [r7, #14]
 8016e3a:	18d0      	adds	r0, r2, r3
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	3306      	adds	r3, #6
 8016e40:	2208      	movs	r2, #8
 8016e42:	4619      	mov	r1, r3
 8016e44:	f002 fd34 	bl	80198b0 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8016e48:	89fb      	ldrh	r3, [r7, #14]
 8016e4a:	3308      	adds	r3, #8
 8016e4c:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	681a      	ldr	r2, [r3, #0]
 8016e52:	89fb      	ldrh	r3, [r7, #14]
 8016e54:	18d0      	adds	r0, r2, r3
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	330e      	adds	r3, #14
 8016e5a:	2208      	movs	r2, #8
 8016e5c:	4619      	mov	r1, r3
 8016e5e:	f002 fd27 	bl	80198b0 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8016e62:	89fb      	ldrh	r3, [r7, #14]
 8016e64:	3308      	adds	r3, #8
 8016e66:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	8ad9      	ldrh	r1, [r3, #22]
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	681a      	ldr	r2, [r3, #0]
 8016e70:	89fb      	ldrh	r3, [r7, #14]
 8016e72:	1c58      	adds	r0, r3, #1
 8016e74:	81f8      	strh	r0, [r7, #14]
 8016e76:	4413      	add	r3, r2
 8016e78:	b2ca      	uxtb	r2, r1
 8016e7a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	8adb      	ldrh	r3, [r3, #22]
 8016e80:	0a1b      	lsrs	r3, r3, #8
 8016e82:	b299      	uxth	r1, r3
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	681a      	ldr	r2, [r3, #0]
 8016e88:	89fb      	ldrh	r3, [r7, #14]
 8016e8a:	1c58      	adds	r0, r3, #1
 8016e8c:	81f8      	strh	r0, [r7, #14]
 8016e8e:	4413      	add	r3, r2
 8016e90:	b2ca      	uxtb	r2, r1
 8016e92:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	6999      	ldr	r1, [r3, #24]
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	681a      	ldr	r2, [r3, #0]
 8016e9c:	89fb      	ldrh	r3, [r7, #14]
 8016e9e:	1c58      	adds	r0, r3, #1
 8016ea0:	81f8      	strh	r0, [r7, #14]
 8016ea2:	4413      	add	r3, r2
 8016ea4:	b2ca      	uxtb	r2, r1
 8016ea6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	699b      	ldr	r3, [r3, #24]
 8016eac:	0a19      	lsrs	r1, r3, #8
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	681a      	ldr	r2, [r3, #0]
 8016eb2:	89fb      	ldrh	r3, [r7, #14]
 8016eb4:	1c58      	adds	r0, r3, #1
 8016eb6:	81f8      	strh	r0, [r7, #14]
 8016eb8:	4413      	add	r3, r2
 8016eba:	b2ca      	uxtb	r2, r1
 8016ebc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	699b      	ldr	r3, [r3, #24]
 8016ec2:	0c19      	lsrs	r1, r3, #16
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	681a      	ldr	r2, [r3, #0]
 8016ec8:	89fb      	ldrh	r3, [r7, #14]
 8016eca:	1c58      	adds	r0, r3, #1
 8016ecc:	81f8      	strh	r0, [r7, #14]
 8016ece:	4413      	add	r3, r2
 8016ed0:	b2ca      	uxtb	r2, r1
 8016ed2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	699b      	ldr	r3, [r3, #24]
 8016ed8:	0e19      	lsrs	r1, r3, #24
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	681a      	ldr	r2, [r3, #0]
 8016ede:	89fb      	ldrh	r3, [r7, #14]
 8016ee0:	1c58      	adds	r0, r3, #1
 8016ee2:	81f8      	strh	r0, [r7, #14]
 8016ee4:	4413      	add	r3, r2
 8016ee6:	b2ca      	uxtb	r2, r1
 8016ee8:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8016eea:	89fb      	ldrh	r3, [r7, #14]
 8016eec:	b2da      	uxtb	r2, r3
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8016ef2:	2300      	movs	r3, #0
}
 8016ef4:	4618      	mov	r0, r3
 8016ef6:	3710      	adds	r7, #16
 8016ef8:	46bd      	mov	sp, r7
 8016efa:	bd80      	pop	{r7, pc}

08016efc <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8016efc:	b580      	push	{r7, lr}
 8016efe:	b084      	sub	sp, #16
 8016f00:	af00      	add	r7, sp, #0
 8016f02:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d003      	beq.n	8016f12 <LoRaMacSerializerData+0x16>
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	681b      	ldr	r3, [r3, #0]
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d101      	bne.n	8016f16 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8016f12:	2301      	movs	r3, #1
 8016f14:	e0e5      	b.n	80170e2 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8016f16:	2300      	movs	r3, #0
 8016f18:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8016f1a:	2308      	movs	r3, #8
 8016f1c:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	7b1b      	ldrb	r3, [r3, #12]
 8016f22:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8016f26:	b2db      	uxtb	r3, r3
 8016f28:	b29a      	uxth	r2, r3
 8016f2a:	89bb      	ldrh	r3, [r7, #12]
 8016f2c:	4413      	add	r3, r2
 8016f2e:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d002      	beq.n	8016f40 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8016f3a:	89bb      	ldrh	r3, [r7, #12]
 8016f3c:	3301      	adds	r3, #1
 8016f3e:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016f46:	b29a      	uxth	r2, r3
 8016f48:	89bb      	ldrh	r3, [r7, #12]
 8016f4a:	4413      	add	r3, r2
 8016f4c:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8016f4e:	89bb      	ldrh	r3, [r7, #12]
 8016f50:	3304      	adds	r3, #4
 8016f52:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	791b      	ldrb	r3, [r3, #4]
 8016f58:	b29b      	uxth	r3, r3
 8016f5a:	89ba      	ldrh	r2, [r7, #12]
 8016f5c:	429a      	cmp	r2, r3
 8016f5e:	d901      	bls.n	8016f64 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8016f60:	2302      	movs	r3, #2
 8016f62:	e0be      	b.n	80170e2 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	681a      	ldr	r2, [r3, #0]
 8016f68:	89fb      	ldrh	r3, [r7, #14]
 8016f6a:	1c59      	adds	r1, r3, #1
 8016f6c:	81f9      	strh	r1, [r7, #14]
 8016f6e:	4413      	add	r3, r2
 8016f70:	687a      	ldr	r2, [r7, #4]
 8016f72:	7952      	ldrb	r2, [r2, #5]
 8016f74:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	6899      	ldr	r1, [r3, #8]
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	681a      	ldr	r2, [r3, #0]
 8016f7e:	89fb      	ldrh	r3, [r7, #14]
 8016f80:	1c58      	adds	r0, r3, #1
 8016f82:	81f8      	strh	r0, [r7, #14]
 8016f84:	4413      	add	r3, r2
 8016f86:	b2ca      	uxtb	r2, r1
 8016f88:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	689b      	ldr	r3, [r3, #8]
 8016f8e:	0a19      	lsrs	r1, r3, #8
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	681a      	ldr	r2, [r3, #0]
 8016f94:	89fb      	ldrh	r3, [r7, #14]
 8016f96:	1c58      	adds	r0, r3, #1
 8016f98:	81f8      	strh	r0, [r7, #14]
 8016f9a:	4413      	add	r3, r2
 8016f9c:	b2ca      	uxtb	r2, r1
 8016f9e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	689b      	ldr	r3, [r3, #8]
 8016fa4:	0c19      	lsrs	r1, r3, #16
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	681a      	ldr	r2, [r3, #0]
 8016faa:	89fb      	ldrh	r3, [r7, #14]
 8016fac:	1c58      	adds	r0, r3, #1
 8016fae:	81f8      	strh	r0, [r7, #14]
 8016fb0:	4413      	add	r3, r2
 8016fb2:	b2ca      	uxtb	r2, r1
 8016fb4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	689b      	ldr	r3, [r3, #8]
 8016fba:	0e19      	lsrs	r1, r3, #24
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	681a      	ldr	r2, [r3, #0]
 8016fc0:	89fb      	ldrh	r3, [r7, #14]
 8016fc2:	1c58      	adds	r0, r3, #1
 8016fc4:	81f8      	strh	r0, [r7, #14]
 8016fc6:	4413      	add	r3, r2
 8016fc8:	b2ca      	uxtb	r2, r1
 8016fca:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	681a      	ldr	r2, [r3, #0]
 8016fd0:	89fb      	ldrh	r3, [r7, #14]
 8016fd2:	1c59      	adds	r1, r3, #1
 8016fd4:	81f9      	strh	r1, [r7, #14]
 8016fd6:	4413      	add	r3, r2
 8016fd8:	687a      	ldr	r2, [r7, #4]
 8016fda:	7b12      	ldrb	r2, [r2, #12]
 8016fdc:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	89d9      	ldrh	r1, [r3, #14]
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	681a      	ldr	r2, [r3, #0]
 8016fe6:	89fb      	ldrh	r3, [r7, #14]
 8016fe8:	1c58      	adds	r0, r3, #1
 8016fea:	81f8      	strh	r0, [r7, #14]
 8016fec:	4413      	add	r3, r2
 8016fee:	b2ca      	uxtb	r2, r1
 8016ff0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	89db      	ldrh	r3, [r3, #14]
 8016ff6:	0a1b      	lsrs	r3, r3, #8
 8016ff8:	b299      	uxth	r1, r3
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	681a      	ldr	r2, [r3, #0]
 8016ffe:	89fb      	ldrh	r3, [r7, #14]
 8017000:	1c58      	adds	r0, r3, #1
 8017002:	81f8      	strh	r0, [r7, #14]
 8017004:	4413      	add	r3, r2
 8017006:	b2ca      	uxtb	r2, r1
 8017008:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	681a      	ldr	r2, [r3, #0]
 801700e:	89fb      	ldrh	r3, [r7, #14]
 8017010:	18d0      	adds	r0, r2, r3
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	f103 0110 	add.w	r1, r3, #16
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	7b1b      	ldrb	r3, [r3, #12]
 801701c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017020:	b2db      	uxtb	r3, r3
 8017022:	b29b      	uxth	r3, r3
 8017024:	461a      	mov	r2, r3
 8017026:	f002 fc28 	bl	801987a <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	7b1b      	ldrb	r3, [r3, #12]
 801702e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017032:	b2db      	uxtb	r3, r3
 8017034:	b29a      	uxth	r2, r3
 8017036:	89fb      	ldrh	r3, [r7, #14]
 8017038:	4413      	add	r3, r2
 801703a:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017042:	2b00      	cmp	r3, #0
 8017044:	d009      	beq.n	801705a <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	681a      	ldr	r2, [r3, #0]
 801704a:	89fb      	ldrh	r3, [r7, #14]
 801704c:	1c59      	adds	r1, r3, #1
 801704e:	81f9      	strh	r1, [r7, #14]
 8017050:	4413      	add	r3, r2
 8017052:	687a      	ldr	r2, [r7, #4]
 8017054:	f892 2020 	ldrb.w	r2, [r2, #32]
 8017058:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	681a      	ldr	r2, [r3, #0]
 801705e:	89fb      	ldrh	r3, [r7, #14]
 8017060:	18d0      	adds	r0, r2, r3
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801706c:	b29b      	uxth	r3, r3
 801706e:	461a      	mov	r2, r3
 8017070:	f002 fc03 	bl	801987a <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801707a:	b29a      	uxth	r2, r3
 801707c:	89fb      	ldrh	r3, [r7, #14]
 801707e:	4413      	add	r3, r2
 8017080:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	681a      	ldr	r2, [r3, #0]
 801708a:	89fb      	ldrh	r3, [r7, #14]
 801708c:	1c58      	adds	r0, r3, #1
 801708e:	81f8      	strh	r0, [r7, #14]
 8017090:	4413      	add	r3, r2
 8017092:	b2ca      	uxtb	r2, r1
 8017094:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801709a:	0a19      	lsrs	r1, r3, #8
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	681a      	ldr	r2, [r3, #0]
 80170a0:	89fb      	ldrh	r3, [r7, #14]
 80170a2:	1c58      	adds	r0, r3, #1
 80170a4:	81f8      	strh	r0, [r7, #14]
 80170a6:	4413      	add	r3, r2
 80170a8:	b2ca      	uxtb	r2, r1
 80170aa:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170b0:	0c19      	lsrs	r1, r3, #16
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	681a      	ldr	r2, [r3, #0]
 80170b6:	89fb      	ldrh	r3, [r7, #14]
 80170b8:	1c58      	adds	r0, r3, #1
 80170ba:	81f8      	strh	r0, [r7, #14]
 80170bc:	4413      	add	r3, r2
 80170be:	b2ca      	uxtb	r2, r1
 80170c0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170c6:	0e19      	lsrs	r1, r3, #24
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	681a      	ldr	r2, [r3, #0]
 80170cc:	89fb      	ldrh	r3, [r7, #14]
 80170ce:	1c58      	adds	r0, r3, #1
 80170d0:	81f8      	strh	r0, [r7, #14]
 80170d2:	4413      	add	r3, r2
 80170d4:	b2ca      	uxtb	r2, r1
 80170d6:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80170d8:	89fb      	ldrh	r3, [r7, #14]
 80170da:	b2da      	uxtb	r2, r3
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80170e0:	2300      	movs	r3, #0
}
 80170e2:	4618      	mov	r0, r3
 80170e4:	3710      	adds	r7, #16
 80170e6:	46bd      	mov	sp, r7
 80170e8:	bd80      	pop	{r7, pc}

080170ea <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80170ea:	b480      	push	{r7}
 80170ec:	b083      	sub	sp, #12
 80170ee:	af00      	add	r7, sp, #0
 80170f0:	4603      	mov	r3, r0
 80170f2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80170f4:	79fb      	ldrb	r3, [r7, #7]
 80170f6:	2b08      	cmp	r3, #8
 80170f8:	d101      	bne.n	80170fe <RegionIsActive+0x14>
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 80170fa:	2301      	movs	r3, #1
 80170fc:	e000      	b.n	8017100 <RegionIsActive+0x16>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80170fe:	2300      	movs	r3, #0
        }
    }
}
 8017100:	4618      	mov	r0, r3
 8017102:	370c      	adds	r7, #12
 8017104:	46bd      	mov	sp, r7
 8017106:	bc80      	pop	{r7}
 8017108:	4770      	bx	lr

0801710a <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 801710a:	b580      	push	{r7, lr}
 801710c:	b084      	sub	sp, #16
 801710e:	af00      	add	r7, sp, #0
 8017110:	4603      	mov	r3, r0
 8017112:	6039      	str	r1, [r7, #0]
 8017114:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8017116:	2300      	movs	r3, #0
 8017118:	60bb      	str	r3, [r7, #8]
    switch( region )
 801711a:	79fb      	ldrb	r3, [r7, #7]
 801711c:	2b08      	cmp	r3, #8
 801711e:	d105      	bne.n	801712c <RegionGetPhyParam+0x22>
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 8017120:	6838      	ldr	r0, [r7, #0]
 8017122:	f001 fa11 	bl	8018548 <RegionUS915GetPhyParam>
 8017126:	4603      	mov	r3, r0
 8017128:	60fb      	str	r3, [r7, #12]
 801712a:	e001      	b.n	8017130 <RegionGetPhyParam+0x26>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 801712c:	68bb      	ldr	r3, [r7, #8]
 801712e:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8017130:	68fb      	ldr	r3, [r7, #12]
 8017132:	4618      	mov	r0, r3
 8017134:	3710      	adds	r7, #16
 8017136:	46bd      	mov	sp, r7
 8017138:	bd80      	pop	{r7, pc}

0801713a <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 801713a:	b580      	push	{r7, lr}
 801713c:	b082      	sub	sp, #8
 801713e:	af00      	add	r7, sp, #0
 8017140:	4603      	mov	r3, r0
 8017142:	6039      	str	r1, [r7, #0]
 8017144:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017146:	79fb      	ldrb	r3, [r7, #7]
 8017148:	2b08      	cmp	r3, #8
 801714a:	d103      	bne.n	8017154 <RegionSetBandTxDone+0x1a>
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
        KR920_SET_BAND_TX_DONE( );
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
 801714c:	6838      	ldr	r0, [r7, #0]
 801714e:	f001 fb57 	bl	8018800 <RegionUS915SetBandTxDone>
 8017152:	e000      	b.n	8017156 <RegionSetBandTxDone+0x1c>
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8017154:	bf00      	nop
        }
    }
}
 8017156:	3708      	adds	r7, #8
 8017158:	46bd      	mov	sp, r7
 801715a:	bd80      	pop	{r7, pc}

0801715c <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 801715c:	b580      	push	{r7, lr}
 801715e:	b082      	sub	sp, #8
 8017160:	af00      	add	r7, sp, #0
 8017162:	4603      	mov	r3, r0
 8017164:	6039      	str	r1, [r7, #0]
 8017166:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017168:	79fb      	ldrb	r3, [r7, #7]
 801716a:	2b08      	cmp	r3, #8
 801716c:	d103      	bne.n	8017176 <RegionInitDefaults+0x1a>
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
        KR920_INIT_DEFAULTS( );
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
 801716e:	6838      	ldr	r0, [r7, #0]
 8017170:	f001 fb72 	bl	8018858 <RegionUS915InitDefaults>
 8017174:	e000      	b.n	8017178 <RegionInitDefaults+0x1c>
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8017176:	bf00      	nop
        }
    }
}
 8017178:	bf00      	nop
 801717a:	3708      	adds	r7, #8
 801717c:	46bd      	mov	sp, r7
 801717e:	bd80      	pop	{r7, pc}

08017180 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017180:	b580      	push	{r7, lr}
 8017182:	b082      	sub	sp, #8
 8017184:	af00      	add	r7, sp, #0
 8017186:	4603      	mov	r3, r0
 8017188:	6039      	str	r1, [r7, #0]
 801718a:	71fb      	strb	r3, [r7, #7]
 801718c:	4613      	mov	r3, r2
 801718e:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8017190:	79fb      	ldrb	r3, [r7, #7]
 8017192:	2b08      	cmp	r3, #8
 8017194:	d106      	bne.n	80171a4 <RegionVerify+0x24>
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 8017196:	79bb      	ldrb	r3, [r7, #6]
 8017198:	4619      	mov	r1, r3
 801719a:	6838      	ldr	r0, [r7, #0]
 801719c:	f001 fc8e 	bl	8018abc <RegionUS915Verify>
 80171a0:	4603      	mov	r3, r0
 80171a2:	e000      	b.n	80171a6 <RegionVerify+0x26>
        RU864_VERIFY( );
        default:
        {
            return false;
 80171a4:	2300      	movs	r3, #0
        }
    }
}
 80171a6:	4618      	mov	r0, r3
 80171a8:	3708      	adds	r7, #8
 80171aa:	46bd      	mov	sp, r7
 80171ac:	bd80      	pop	{r7, pc}

080171ae <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80171ae:	b580      	push	{r7, lr}
 80171b0:	b082      	sub	sp, #8
 80171b2:	af00      	add	r7, sp, #0
 80171b4:	4603      	mov	r3, r0
 80171b6:	6039      	str	r1, [r7, #0]
 80171b8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80171ba:	79fb      	ldrb	r3, [r7, #7]
 80171bc:	2b08      	cmp	r3, #8
 80171be:	d103      	bne.n	80171c8 <RegionApplyCFList+0x1a>
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
        KR920_APPLY_CF_LIST( );
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
 80171c0:	6838      	ldr	r0, [r7, #0]
 80171c2:	f001 fcf1 	bl	8018ba8 <RegionUS915ApplyCFList>
 80171c6:	e000      	b.n	80171ca <RegionApplyCFList+0x1c>
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80171c8:	bf00      	nop
        }
    }
}
 80171ca:	bf00      	nop
 80171cc:	3708      	adds	r7, #8
 80171ce:	46bd      	mov	sp, r7
 80171d0:	bd80      	pop	{r7, pc}

080171d2 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80171d2:	b580      	push	{r7, lr}
 80171d4:	b082      	sub	sp, #8
 80171d6:	af00      	add	r7, sp, #0
 80171d8:	4603      	mov	r3, r0
 80171da:	6039      	str	r1, [r7, #0]
 80171dc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80171de:	79fb      	ldrb	r3, [r7, #7]
 80171e0:	2b08      	cmp	r3, #8
 80171e2:	d104      	bne.n	80171ee <RegionChanMaskSet+0x1c>
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 80171e4:	6838      	ldr	r0, [r7, #0]
 80171e6:	f001 fd53 	bl	8018c90 <RegionUS915ChanMaskSet>
 80171ea:	4603      	mov	r3, r0
 80171ec:	e000      	b.n	80171f0 <RegionChanMaskSet+0x1e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80171ee:	2300      	movs	r3, #0
        }
    }
}
 80171f0:	4618      	mov	r0, r3
 80171f2:	3708      	adds	r7, #8
 80171f4:	46bd      	mov	sp, r7
 80171f6:	bd80      	pop	{r7, pc}

080171f8 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80171f8:	b580      	push	{r7, lr}
 80171fa:	b082      	sub	sp, #8
 80171fc:	af00      	add	r7, sp, #0
 80171fe:	603b      	str	r3, [r7, #0]
 8017200:	4603      	mov	r3, r0
 8017202:	71fb      	strb	r3, [r7, #7]
 8017204:	460b      	mov	r3, r1
 8017206:	71bb      	strb	r3, [r7, #6]
 8017208:	4613      	mov	r3, r2
 801720a:	717b      	strb	r3, [r7, #5]
    switch( region )
 801720c:	79fb      	ldrb	r3, [r7, #7]
 801720e:	2b08      	cmp	r3, #8
 8017210:	d107      	bne.n	8017222 <RegionComputeRxWindowParameters+0x2a>
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
        KR920_COMPUTE_RX_WINDOW_PARAMETERS( );
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8017212:	7979      	ldrb	r1, [r7, #5]
 8017214:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8017218:	693b      	ldr	r3, [r7, #16]
 801721a:	683a      	ldr	r2, [r7, #0]
 801721c:	f001 fda0 	bl	8018d60 <RegionUS915ComputeRxWindowParameters>
 8017220:	e000      	b.n	8017224 <RegionComputeRxWindowParameters+0x2c>
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8017222:	bf00      	nop
        }
    }
}
 8017224:	bf00      	nop
 8017226:	3708      	adds	r7, #8
 8017228:	46bd      	mov	sp, r7
 801722a:	bd80      	pop	{r7, pc}

0801722c <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801722c:	b580      	push	{r7, lr}
 801722e:	b084      	sub	sp, #16
 8017230:	af00      	add	r7, sp, #0
 8017232:	4603      	mov	r3, r0
 8017234:	60b9      	str	r1, [r7, #8]
 8017236:	607a      	str	r2, [r7, #4]
 8017238:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801723a:	7bfb      	ldrb	r3, [r7, #15]
 801723c:	2b08      	cmp	r3, #8
 801723e:	d105      	bne.n	801724c <RegionRxConfig+0x20>
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 8017240:	6879      	ldr	r1, [r7, #4]
 8017242:	68b8      	ldr	r0, [r7, #8]
 8017244:	f001 fdd6 	bl	8018df4 <RegionUS915RxConfig>
 8017248:	4603      	mov	r3, r0
 801724a:	e000      	b.n	801724e <RegionRxConfig+0x22>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 801724c:	2300      	movs	r3, #0
        }
    }
}
 801724e:	4618      	mov	r0, r3
 8017250:	3710      	adds	r7, #16
 8017252:	46bd      	mov	sp, r7
 8017254:	bd80      	pop	{r7, pc}

08017256 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8017256:	b580      	push	{r7, lr}
 8017258:	b084      	sub	sp, #16
 801725a:	af00      	add	r7, sp, #0
 801725c:	60b9      	str	r1, [r7, #8]
 801725e:	607a      	str	r2, [r7, #4]
 8017260:	603b      	str	r3, [r7, #0]
 8017262:	4603      	mov	r3, r0
 8017264:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017266:	7bfb      	ldrb	r3, [r7, #15]
 8017268:	2b08      	cmp	r3, #8
 801726a:	d106      	bne.n	801727a <RegionTxConfig+0x24>
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 801726c:	683a      	ldr	r2, [r7, #0]
 801726e:	6879      	ldr	r1, [r7, #4]
 8017270:	68b8      	ldr	r0, [r7, #8]
 8017272:	f001 fe43 	bl	8018efc <RegionUS915TxConfig>
 8017276:	4603      	mov	r3, r0
 8017278:	e000      	b.n	801727c <RegionTxConfig+0x26>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 801727a:	2300      	movs	r3, #0
        }
    }
}
 801727c:	4618      	mov	r0, r3
 801727e:	3710      	adds	r7, #16
 8017280:	46bd      	mov	sp, r7
 8017282:	bd80      	pop	{r7, pc}

08017284 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8017284:	b580      	push	{r7, lr}
 8017286:	b086      	sub	sp, #24
 8017288:	af02      	add	r7, sp, #8
 801728a:	60b9      	str	r1, [r7, #8]
 801728c:	607a      	str	r2, [r7, #4]
 801728e:	603b      	str	r3, [r7, #0]
 8017290:	4603      	mov	r3, r0
 8017292:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017294:	7bfb      	ldrb	r3, [r7, #15]
 8017296:	2b08      	cmp	r3, #8
 8017298:	d109      	bne.n	80172ae <RegionLinkAdrReq+0x2a>
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 801729a:	69fb      	ldr	r3, [r7, #28]
 801729c:	9300      	str	r3, [sp, #0]
 801729e:	69bb      	ldr	r3, [r7, #24]
 80172a0:	683a      	ldr	r2, [r7, #0]
 80172a2:	6879      	ldr	r1, [r7, #4]
 80172a4:	68b8      	ldr	r0, [r7, #8]
 80172a6:	f001 fed3 	bl	8019050 <RegionUS915LinkAdrReq>
 80172aa:	4603      	mov	r3, r0
 80172ac:	e000      	b.n	80172b0 <RegionLinkAdrReq+0x2c>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80172ae:	2300      	movs	r3, #0
        }
    }
}
 80172b0:	4618      	mov	r0, r3
 80172b2:	3710      	adds	r7, #16
 80172b4:	46bd      	mov	sp, r7
 80172b6:	bd80      	pop	{r7, pc}

080172b8 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 80172b8:	b580      	push	{r7, lr}
 80172ba:	b082      	sub	sp, #8
 80172bc:	af00      	add	r7, sp, #0
 80172be:	4603      	mov	r3, r0
 80172c0:	6039      	str	r1, [r7, #0]
 80172c2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80172c4:	79fb      	ldrb	r3, [r7, #7]
 80172c6:	2b08      	cmp	r3, #8
 80172c8:	d104      	bne.n	80172d4 <RegionRxParamSetupReq+0x1c>
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 80172ca:	6838      	ldr	r0, [r7, #0]
 80172cc:	f002 f8da 	bl	8019484 <RegionUS915RxParamSetupReq>
 80172d0:	4603      	mov	r3, r0
 80172d2:	e000      	b.n	80172d6 <RegionRxParamSetupReq+0x1e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80172d4:	2300      	movs	r3, #0
        }
    }
}
 80172d6:	4618      	mov	r0, r3
 80172d8:	3708      	adds	r7, #8
 80172da:	46bd      	mov	sp, r7
 80172dc:	bd80      	pop	{r7, pc}

080172de <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80172de:	b580      	push	{r7, lr}
 80172e0:	b082      	sub	sp, #8
 80172e2:	af00      	add	r7, sp, #0
 80172e4:	4603      	mov	r3, r0
 80172e6:	6039      	str	r1, [r7, #0]
 80172e8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80172ea:	79fb      	ldrb	r3, [r7, #7]
 80172ec:	2b08      	cmp	r3, #8
 80172ee:	d104      	bne.n	80172fa <RegionNewChannelReq+0x1c>
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 80172f0:	6838      	ldr	r0, [r7, #0]
 80172f2:	f002 f913 	bl	801951c <RegionUS915NewChannelReq>
 80172f6:	4603      	mov	r3, r0
 80172f8:	e000      	b.n	80172fc <RegionNewChannelReq+0x1e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80172fa:	2300      	movs	r3, #0
        }
    }
}
 80172fc:	4618      	mov	r0, r3
 80172fe:	3708      	adds	r7, #8
 8017300:	46bd      	mov	sp, r7
 8017302:	bd80      	pop	{r7, pc}

08017304 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8017304:	b580      	push	{r7, lr}
 8017306:	b082      	sub	sp, #8
 8017308:	af00      	add	r7, sp, #0
 801730a:	4603      	mov	r3, r0
 801730c:	6039      	str	r1, [r7, #0]
 801730e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017310:	79fb      	ldrb	r3, [r7, #7]
 8017312:	2b08      	cmp	r3, #8
 8017314:	d104      	bne.n	8017320 <RegionTxParamSetupReq+0x1c>
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 8017316:	6838      	ldr	r0, [r7, #0]
 8017318:	f002 f90b 	bl	8019532 <RegionUS915TxParamSetupReq>
 801731c:	4603      	mov	r3, r0
 801731e:	e000      	b.n	8017322 <RegionTxParamSetupReq+0x1e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017320:	2300      	movs	r3, #0
        }
    }
}
 8017322:	4618      	mov	r0, r3
 8017324:	3708      	adds	r7, #8
 8017326:	46bd      	mov	sp, r7
 8017328:	bd80      	pop	{r7, pc}

0801732a <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 801732a:	b580      	push	{r7, lr}
 801732c:	b082      	sub	sp, #8
 801732e:	af00      	add	r7, sp, #0
 8017330:	4603      	mov	r3, r0
 8017332:	6039      	str	r1, [r7, #0]
 8017334:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017336:	79fb      	ldrb	r3, [r7, #7]
 8017338:	2b08      	cmp	r3, #8
 801733a:	d104      	bne.n	8017346 <RegionDlChannelReq+0x1c>
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 801733c:	6838      	ldr	r0, [r7, #0]
 801733e:	f002 f903 	bl	8019548 <RegionUS915DlChannelReq>
 8017342:	4603      	mov	r3, r0
 8017344:	e000      	b.n	8017348 <RegionDlChannelReq+0x1e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8017346:	2300      	movs	r3, #0
        }
    }
}
 8017348:	4618      	mov	r0, r3
 801734a:	3708      	adds	r7, #8
 801734c:	46bd      	mov	sp, r7
 801734e:	bd80      	pop	{r7, pc}

08017350 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8017350:	b580      	push	{r7, lr}
 8017352:	b082      	sub	sp, #8
 8017354:	af00      	add	r7, sp, #0
 8017356:	4603      	mov	r3, r0
 8017358:	71fb      	strb	r3, [r7, #7]
 801735a:	460b      	mov	r3, r1
 801735c:	71bb      	strb	r3, [r7, #6]
 801735e:	4613      	mov	r3, r2
 8017360:	717b      	strb	r3, [r7, #5]
    switch( region )
 8017362:	79fb      	ldrb	r3, [r7, #7]
 8017364:	2b08      	cmp	r3, #8
 8017366:	d108      	bne.n	801737a <RegionAlternateDr+0x2a>
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8017368:	797a      	ldrb	r2, [r7, #5]
 801736a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801736e:	4611      	mov	r1, r2
 8017370:	4618      	mov	r0, r3
 8017372:	f002 f8f5 	bl	8019560 <RegionUS915AlternateDr>
 8017376:	4603      	mov	r3, r0
 8017378:	e000      	b.n	801737c <RegionAlternateDr+0x2c>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 801737a:	2300      	movs	r3, #0
        }
    }
}
 801737c:	4618      	mov	r0, r3
 801737e:	3708      	adds	r7, #8
 8017380:	46bd      	mov	sp, r7
 8017382:	bd80      	pop	{r7, pc}

08017384 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8017384:	b580      	push	{r7, lr}
 8017386:	b084      	sub	sp, #16
 8017388:	af00      	add	r7, sp, #0
 801738a:	60b9      	str	r1, [r7, #8]
 801738c:	607a      	str	r2, [r7, #4]
 801738e:	603b      	str	r3, [r7, #0]
 8017390:	4603      	mov	r3, r0
 8017392:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017394:	7bfb      	ldrb	r3, [r7, #15]
 8017396:	2b08      	cmp	r3, #8
 8017398:	d107      	bne.n	80173aa <RegionNextChannel+0x26>
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 801739a:	69bb      	ldr	r3, [r7, #24]
 801739c:	683a      	ldr	r2, [r7, #0]
 801739e:	6879      	ldr	r1, [r7, #4]
 80173a0:	68b8      	ldr	r0, [r7, #8]
 80173a2:	f002 f913 	bl	80195cc <RegionUS915NextChannel>
 80173a6:	4603      	mov	r3, r0
 80173a8:	e000      	b.n	80173ac <RegionNextChannel+0x28>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80173aa:	2309      	movs	r3, #9
        }
    }
}
 80173ac:	4618      	mov	r0, r3
 80173ae:	3710      	adds	r7, #16
 80173b0:	46bd      	mov	sp, r7
 80173b2:	bd80      	pop	{r7, pc}

080173b4 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80173b4:	b590      	push	{r4, r7, lr}
 80173b6:	b083      	sub	sp, #12
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	4604      	mov	r4, r0
 80173bc:	4608      	mov	r0, r1
 80173be:	4611      	mov	r1, r2
 80173c0:	461a      	mov	r2, r3
 80173c2:	4623      	mov	r3, r4
 80173c4:	71fb      	strb	r3, [r7, #7]
 80173c6:	4603      	mov	r3, r0
 80173c8:	71bb      	strb	r3, [r7, #6]
 80173ca:	460b      	mov	r3, r1
 80173cc:	717b      	strb	r3, [r7, #5]
 80173ce:	4613      	mov	r3, r2
 80173d0:	713b      	strb	r3, [r7, #4]
    switch( region )
 80173d2:	79fb      	ldrb	r3, [r7, #7]
 80173d4:	2b08      	cmp	r3, #8
 80173d6:	d109      	bne.n	80173ec <RegionApplyDrOffset+0x38>
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 80173d8:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80173dc:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80173e0:	79bb      	ldrb	r3, [r7, #6]
 80173e2:	4618      	mov	r0, r3
 80173e4:	f002 f9e0 	bl	80197a8 <RegionUS915ApplyDrOffset>
 80173e8:	4603      	mov	r3, r0
 80173ea:	e000      	b.n	80173ee <RegionApplyDrOffset+0x3a>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80173ec:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 80173ee:	4618      	mov	r0, r3
 80173f0:	370c      	adds	r7, #12
 80173f2:	46bd      	mov	sp, r7
 80173f4:	bd90      	pop	{r4, r7, pc}
	...

080173f8 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 80173f8:	b480      	push	{r7}
 80173fa:	b083      	sub	sp, #12
 80173fc:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 80173fe:	4b04      	ldr	r3, [pc, #16]	; (8017410 <RegionGetVersion+0x18>)
 8017400:	607b      	str	r3, [r7, #4]

    return version;
 8017402:	687b      	ldr	r3, [r7, #4]
}
 8017404:	4618      	mov	r0, r3
 8017406:	370c      	adds	r7, #12
 8017408:	46bd      	mov	sp, r7
 801740a:	bc80      	pop	{r7}
 801740c:	4770      	bx	lr
 801740e:	bf00      	nop
 8017410:	02010001 	.word	0x02010001

08017414 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 8017414:	b480      	push	{r7}
 8017416:	b087      	sub	sp, #28
 8017418:	af00      	add	r7, sp, #0
 801741a:	4603      	mov	r3, r0
 801741c:	60b9      	str	r1, [r7, #8]
 801741e:	607a      	str	r2, [r7, #4]
 8017420:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 8017422:	68bb      	ldr	r3, [r7, #8]
 8017424:	2b00      	cmp	r3, #0
 8017426:	d002      	beq.n	801742e <FindAvailable125kHzChannels+0x1a>
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	2b00      	cmp	r3, #0
 801742c:	d101      	bne.n	8017432 <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801742e:	2303      	movs	r3, #3
 8017430:	e021      	b.n	8017476 <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	2200      	movs	r2, #0
 8017436:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8017438:	2300      	movs	r3, #0
 801743a:	75fb      	strb	r3, [r7, #23]
 801743c:	e017      	b.n	801746e <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 801743e:	89fa      	ldrh	r2, [r7, #14]
 8017440:	7dfb      	ldrb	r3, [r7, #23]
 8017442:	fa42 f303 	asr.w	r3, r2, r3
 8017446:	f003 0301 	and.w	r3, r3, #1
 801744a:	2b00      	cmp	r3, #0
 801744c:	d00c      	beq.n	8017468 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	781b      	ldrb	r3, [r3, #0]
 8017452:	461a      	mov	r2, r3
 8017454:	68bb      	ldr	r3, [r7, #8]
 8017456:	4413      	add	r3, r2
 8017458:	7dfa      	ldrb	r2, [r7, #23]
 801745a:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	781b      	ldrb	r3, [r3, #0]
 8017460:	3301      	adds	r3, #1
 8017462:	b2da      	uxtb	r2, r3
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8017468:	7dfb      	ldrb	r3, [r7, #23]
 801746a:	3301      	adds	r3, #1
 801746c:	75fb      	strb	r3, [r7, #23]
 801746e:	7dfb      	ldrb	r3, [r7, #23]
 8017470:	2b07      	cmp	r3, #7
 8017472:	d9e4      	bls.n	801743e <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 8017474:	2300      	movs	r3, #0
}
 8017476:	4618      	mov	r0, r3
 8017478:	371c      	adds	r7, #28
 801747a:	46bd      	mov	sp, r7
 801747c:	bc80      	pop	{r7}
 801747e:	4770      	bx	lr

08017480 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8017480:	b590      	push	{r4, r7, lr}
 8017482:	b089      	sub	sp, #36	; 0x24
 8017484:	af00      	add	r7, sp, #0
 8017486:	60f8      	str	r0, [r7, #12]
 8017488:	60b9      	str	r1, [r7, #8]
 801748a:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 801748c:	2300      	movs	r3, #0
 801748e:	617b      	str	r3, [r7, #20]
 8017490:	2300      	movs	r3, #0
 8017492:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 8017494:	2300      	movs	r3, #0
 8017496:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8017498:	68fb      	ldr	r3, [r7, #12]
 801749a:	2b00      	cmp	r3, #0
 801749c:	d005      	beq.n	80174aa <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 801749e:	68bb      	ldr	r3, [r7, #8]
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d002      	beq.n	80174aa <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d101      	bne.n	80174ae <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80174aa:	2303      	movs	r3, #3
 80174ac:	e055      	b.n	801755a <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 80174ae:	68bb      	ldr	r3, [r7, #8]
 80174b0:	781b      	ldrb	r3, [r3, #0]
 80174b2:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 80174b4:	7f7b      	ldrb	r3, [r7, #29]
 80174b6:	085b      	lsrs	r3, r3, #1
 80174b8:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 80174ba:	7f7b      	ldrb	r3, [r7, #29]
 80174bc:	f003 0301 	and.w	r3, r3, #1
 80174c0:	b2db      	uxtb	r3, r3
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d107      	bne.n	80174d6 <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 80174c6:	7f3b      	ldrb	r3, [r7, #28]
 80174c8:	005b      	lsls	r3, r3, #1
 80174ca:	68fa      	ldr	r2, [r7, #12]
 80174cc:	4413      	add	r3, r2
 80174ce:	881b      	ldrh	r3, [r3, #0]
 80174d0:	b2db      	uxtb	r3, r3
 80174d2:	83fb      	strh	r3, [r7, #30]
 80174d4:	e006      	b.n	80174e4 <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 80174d6:	7f3b      	ldrb	r3, [r7, #28]
 80174d8:	005b      	lsls	r3, r3, #1
 80174da:	68fa      	ldr	r2, [r7, #12]
 80174dc:	4413      	add	r3, r2
 80174de:	881b      	ldrh	r3, [r3, #0]
 80174e0:	0a1b      	lsrs	r3, r3, #8
 80174e2:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 80174e4:	f107 0213 	add.w	r2, r7, #19
 80174e8:	f107 0114 	add.w	r1, r7, #20
 80174ec:	8bfb      	ldrh	r3, [r7, #30]
 80174ee:	4618      	mov	r0, r3
 80174f0:	f7ff ff90 	bl	8017414 <FindAvailable125kHzChannels>
 80174f4:	4603      	mov	r3, r0
 80174f6:	2b03      	cmp	r3, #3
 80174f8:	d101      	bne.n	80174fe <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80174fa:	2303      	movs	r3, #3
 80174fc:	e02d      	b.n	801755a <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 80174fe:	7cfb      	ldrb	r3, [r7, #19]
 8017500:	2b00      	cmp	r3, #0
 8017502:	d011      	beq.n	8017528 <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8017504:	7f7b      	ldrb	r3, [r7, #29]
 8017506:	00db      	lsls	r3, r3, #3
 8017508:	b2dc      	uxtb	r4, r3
 801750a:	7cfb      	ldrb	r3, [r7, #19]
 801750c:	3b01      	subs	r3, #1
 801750e:	4619      	mov	r1, r3
 8017510:	2000      	movs	r0, #0
 8017512:	f002 f99b 	bl	801984c <randr>
 8017516:	4603      	mov	r3, r0
 8017518:	3320      	adds	r3, #32
 801751a:	443b      	add	r3, r7
 801751c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8017520:	4423      	add	r3, r4
 8017522:	b2da      	uxtb	r2, r3
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 8017528:	7f7b      	ldrb	r3, [r7, #29]
 801752a:	3301      	adds	r3, #1
 801752c:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 801752e:	7f7b      	ldrb	r3, [r7, #29]
 8017530:	2b07      	cmp	r3, #7
 8017532:	d901      	bls.n	8017538 <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 8017534:	2300      	movs	r3, #0
 8017536:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8017538:	7cfb      	ldrb	r3, [r7, #19]
 801753a:	2b00      	cmp	r3, #0
 801753c:	d104      	bne.n	8017548 <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 801753e:	68bb      	ldr	r3, [r7, #8]
 8017540:	781b      	ldrb	r3, [r3, #0]
 8017542:	7f7a      	ldrb	r2, [r7, #29]
 8017544:	429a      	cmp	r2, r3
 8017546:	d1b5      	bne.n	80174b4 <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 8017548:	7cfb      	ldrb	r3, [r7, #19]
 801754a:	2b00      	cmp	r3, #0
 801754c:	d004      	beq.n	8017558 <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 801754e:	68bb      	ldr	r3, [r7, #8]
 8017550:	7f7a      	ldrb	r2, [r7, #29]
 8017552:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8017554:	2300      	movs	r3, #0
 8017556:	e000      	b.n	801755a <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8017558:	2303      	movs	r3, #3
}
 801755a:	4618      	mov	r0, r3
 801755c:	3724      	adds	r7, #36	; 0x24
 801755e:	46bd      	mov	sp, r7
 8017560:	bd90      	pop	{r4, r7, pc}

08017562 <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 8017562:	b480      	push	{r7}
 8017564:	b085      	sub	sp, #20
 8017566:	af00      	add	r7, sp, #0
 8017568:	4603      	mov	r3, r0
 801756a:	60b9      	str	r1, [r7, #8]
 801756c:	607a      	str	r2, [r7, #4]
 801756e:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 8017570:	7bfb      	ldrb	r3, [r7, #15]
 8017572:	687a      	ldr	r2, [r7, #4]
 8017574:	fb03 f202 	mul.w	r2, r3, r2
 8017578:	68bb      	ldr	r3, [r7, #8]
 801757a:	4413      	add	r3, r2
}
 801757c:	4618      	mov	r0, r3
 801757e:	3714      	adds	r7, #20
 8017580:	46bd      	mov	sp, r7
 8017582:	bc80      	pop	{r7}
 8017584:	4770      	bx	lr

08017586 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017586:	b480      	push	{r7}
 8017588:	b087      	sub	sp, #28
 801758a:	af00      	add	r7, sp, #0
 801758c:	60f8      	str	r0, [r7, #12]
 801758e:	4608      	mov	r0, r1
 8017590:	4639      	mov	r1, r7
 8017592:	e881 000c 	stmia.w	r1, {r2, r3}
 8017596:	4603      	mov	r3, r0
 8017598:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 801759a:	68fb      	ldr	r3, [r7, #12]
 801759c:	881b      	ldrh	r3, [r3, #0]
 801759e:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 80175a0:	7afb      	ldrb	r3, [r7, #11]
 80175a2:	f083 0301 	eor.w	r3, r3, #1
 80175a6:	b2db      	uxtb	r3, r3
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d01b      	beq.n	80175e4 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 80175ac:	f242 7310 	movw	r3, #10000	; 0x2710
 80175b0:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80175b2:	683b      	ldr	r3, [r7, #0]
 80175b4:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80175b8:	d202      	bcs.n	80175c0 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 80175ba:	2364      	movs	r3, #100	; 0x64
 80175bc:	82bb      	strh	r3, [r7, #20]
 80175be:	e00b      	b.n	80175d8 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80175c0:	683b      	ldr	r3, [r7, #0]
 80175c2:	f649 22af 	movw	r2, #39599	; 0x9aaf
 80175c6:	4293      	cmp	r3, r2
 80175c8:	d803      	bhi.n	80175d2 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 80175ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80175ce:	82bb      	strh	r3, [r7, #20]
 80175d0:	e002      	b.n	80175d8 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 80175d2:	f242 7310 	movw	r3, #10000	; 0x2710
 80175d6:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80175d8:	8aba      	ldrh	r2, [r7, #20]
 80175da:	8afb      	ldrh	r3, [r7, #22]
 80175dc:	4293      	cmp	r3, r2
 80175de:	bf38      	it	cc
 80175e0:	4613      	movcc	r3, r2
 80175e2:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80175e4:	8afb      	ldrh	r3, [r7, #22]
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d101      	bne.n	80175ee <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 80175ea:	2301      	movs	r3, #1
 80175ec:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 80175ee:	8afb      	ldrh	r3, [r7, #22]
}
 80175f0:	4618      	mov	r0, r3
 80175f2:	371c      	adds	r7, #28
 80175f4:	46bd      	mov	sp, r7
 80175f6:	bc80      	pop	{r7}
 80175f8:	4770      	bx	lr
	...

080175fc <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 80175fc:	b580      	push	{r7, lr}
 80175fe:	b08e      	sub	sp, #56	; 0x38
 8017600:	af02      	add	r7, sp, #8
 8017602:	60f8      	str	r0, [r7, #12]
 8017604:	4608      	mov	r0, r1
 8017606:	4639      	mov	r1, r7
 8017608:	e881 000c 	stmia.w	r1, {r2, r3}
 801760c:	4603      	mov	r3, r0
 801760e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017610:	68fb      	ldr	r3, [r7, #12]
 8017612:	881b      	ldrh	r3, [r3, #0]
 8017614:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017616:	4b4b      	ldr	r3, [pc, #300]	; (8017744 <SetMaxTimeCredits+0x148>)
 8017618:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 801761a:	463b      	mov	r3, r7
 801761c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017620:	f005 fdb6 	bl	801d190 <SysTimeToMs>
 8017624:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8017626:	f107 0314 	add.w	r3, r7, #20
 801762a:	2200      	movs	r2, #0
 801762c:	601a      	str	r2, [r3, #0]
 801762e:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017630:	7af9      	ldrb	r1, [r7, #11]
 8017632:	463b      	mov	r3, r7
 8017634:	cb0c      	ldmia	r3, {r2, r3}
 8017636:	68f8      	ldr	r0, [r7, #12]
 8017638:	f7ff ffa5 	bl	8017586 <GetDutyCycle>
 801763c:	4603      	mov	r3, r0
 801763e:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8017640:	7afb      	ldrb	r3, [r7, #11]
 8017642:	f083 0301 	eor.w	r3, r3, #1
 8017646:	b2db      	uxtb	r3, r3
 8017648:	2b00      	cmp	r3, #0
 801764a:	d062      	beq.n	8017712 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 801764c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801764e:	2b64      	cmp	r3, #100	; 0x64
 8017650:	d105      	bne.n	801765e <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017652:	4b3c      	ldr	r3, [pc, #240]	; (8017744 <SetMaxTimeCredits+0x148>)
 8017654:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8017656:	68fb      	ldr	r3, [r7, #12]
 8017658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801765a:	609a      	str	r2, [r3, #8]
 801765c:	e00b      	b.n	8017676 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801765e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017660:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017664:	d105      	bne.n	8017672 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8017666:	4b38      	ldr	r3, [pc, #224]	; (8017748 <SetMaxTimeCredits+0x14c>)
 8017668:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801766a:	68fb      	ldr	r3, [r7, #12]
 801766c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801766e:	609a      	str	r2, [r3, #8]
 8017670:	e001      	b.n	8017676 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8017672:	4b36      	ldr	r3, [pc, #216]	; (801774c <SetMaxTimeCredits+0x150>)
 8017674:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8017676:	68fb      	ldr	r3, [r7, #12]
 8017678:	689a      	ldr	r2, [r3, #8]
 801767a:	f107 031c 	add.w	r3, r7, #28
 801767e:	4611      	mov	r1, r2
 8017680:	4618      	mov	r0, r3
 8017682:	f005 fdad 	bl	801d1e0 <SysTimeFromMs>
 8017686:	f107 0014 	add.w	r0, r7, #20
 801768a:	6a3b      	ldr	r3, [r7, #32]
 801768c:	9300      	str	r3, [sp, #0]
 801768e:	69fb      	ldr	r3, [r7, #28]
 8017690:	463a      	mov	r2, r7
 8017692:	ca06      	ldmia	r2, {r1, r2}
 8017694:	f005 fcbd 	bl	801d012 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8017698:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801769c:	f083 0301 	eor.w	r3, r3, #1
 80176a0:	b2db      	uxtb	r3, r3
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d006      	beq.n	80176b4 <SetMaxTimeCredits+0xb8>
 80176a6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80176aa:	f083 0301 	eor.w	r3, r3, #1
 80176ae:	b2db      	uxtb	r3, r3
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d108      	bne.n	80176c6 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 80176b4:	68fb      	ldr	r3, [r7, #12]
 80176b6:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80176b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80176ba:	429a      	cmp	r2, r3
 80176bc:	d103      	bne.n	80176c6 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 80176be:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 80176c0:	4a23      	ldr	r2, [pc, #140]	; (8017750 <SetMaxTimeCredits+0x154>)
 80176c2:	4293      	cmp	r3, r2
 80176c4:	d92f      	bls.n	8017726 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 80176c6:	68fb      	ldr	r3, [r7, #12]
 80176c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80176ca:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80176cc:	683b      	ldr	r3, [r7, #0]
 80176ce:	4a21      	ldr	r2, [pc, #132]	; (8017754 <SetMaxTimeCredits+0x158>)
 80176d0:	4293      	cmp	r3, r2
 80176d2:	d928      	bls.n	8017726 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 80176d4:	683b      	ldr	r3, [r7, #0]
 80176d6:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80176da:	3b30      	subs	r3, #48	; 0x30
 80176dc:	4a1e      	ldr	r2, [pc, #120]	; (8017758 <SetMaxTimeCredits+0x15c>)
 80176de:	fba2 2303 	umull	r2, r3, r2, r3
 80176e2:	0c1b      	lsrs	r3, r3, #16
 80176e4:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 80176e6:	697b      	ldr	r3, [r7, #20]
 80176e8:	4a1c      	ldr	r2, [pc, #112]	; (801775c <SetMaxTimeCredits+0x160>)
 80176ea:	fb02 f303 	mul.w	r3, r2, r3
 80176ee:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80176f0:	697b      	ldr	r3, [r7, #20]
 80176f2:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 80176f6:	3330      	adds	r3, #48	; 0x30
 80176f8:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 80176fa:	2300      	movs	r3, #0
 80176fc:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80176fe:	f107 0314 	add.w	r3, r7, #20
 8017702:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017706:	f005 fd43 	bl	801d190 <SysTimeToMs>
 801770a:	4602      	mov	r2, r0
 801770c:	68fb      	ldr	r3, [r7, #12]
 801770e:	609a      	str	r2, [r3, #8]
 8017710:	e009      	b.n	8017726 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8017712:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017716:	f083 0301 	eor.w	r3, r3, #1
 801771a:	b2db      	uxtb	r3, r3
 801771c:	2b00      	cmp	r3, #0
 801771e:	d002      	beq.n	8017726 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8017720:	68fb      	ldr	r3, [r7, #12]
 8017722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017724:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	685b      	ldr	r3, [r3, #4]
 801772a:	2b00      	cmp	r3, #0
 801772c:	d102      	bne.n	8017734 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017732:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8017734:	68fb      	ldr	r3, [r7, #12]
 8017736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017738:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 801773a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 801773c:	4618      	mov	r0, r3
 801773e:	3730      	adds	r7, #48	; 0x30
 8017740:	46bd      	mov	sp, r7
 8017742:	bd80      	pop	{r7, pc}
 8017744:	001b7740 	.word	0x001b7740
 8017748:	0112a880 	.word	0x0112a880
 801774c:	02932e00 	.word	0x02932e00
 8017750:	0001517f 	.word	0x0001517f
 8017754:	0001ec2f 	.word	0x0001ec2f
 8017758:	c22e4507 	.word	0xc22e4507
 801775c:	00015180 	.word	0x00015180

08017760 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8017760:	b580      	push	{r7, lr}
 8017762:	b086      	sub	sp, #24
 8017764:	af02      	add	r7, sp, #8
 8017766:	6078      	str	r0, [r7, #4]
 8017768:	4608      	mov	r0, r1
 801776a:	4611      	mov	r1, r2
 801776c:	461a      	mov	r2, r3
 801776e:	4603      	mov	r3, r0
 8017770:	70fb      	strb	r3, [r7, #3]
 8017772:	460b      	mov	r3, r1
 8017774:	70bb      	strb	r3, [r7, #2]
 8017776:	4613      	mov	r3, r2
 8017778:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 801777a:	78f9      	ldrb	r1, [r7, #3]
 801777c:	787b      	ldrb	r3, [r7, #1]
 801777e:	9301      	str	r3, [sp, #4]
 8017780:	78bb      	ldrb	r3, [r7, #2]
 8017782:	9300      	str	r3, [sp, #0]
 8017784:	f107 0318 	add.w	r3, r7, #24
 8017788:	cb0c      	ldmia	r3, {r2, r3}
 801778a:	6878      	ldr	r0, [r7, #4]
 801778c:	f7ff ff36 	bl	80175fc <SetMaxTimeCredits>
 8017790:	4603      	mov	r3, r0
 8017792:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8017794:	78fb      	ldrb	r3, [r7, #3]
 8017796:	2b00      	cmp	r3, #0
 8017798:	d00a      	beq.n	80177b0 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	685b      	ldr	r3, [r3, #4]
 801779e:	4618      	mov	r0, r3
 80177a0:	f006 fb32 	bl	801de08 <UTIL_TIMER_GetElapsedTime>
 80177a4:	4602      	mov	r2, r0
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	68db      	ldr	r3, [r3, #12]
 80177aa:	441a      	add	r2, r3
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	68da      	ldr	r2, [r3, #12]
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	691b      	ldr	r3, [r3, #16]
 80177b8:	429a      	cmp	r2, r3
 80177ba:	d903      	bls.n	80177c4 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	691a      	ldr	r2, [r3, #16]
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	6a3a      	ldr	r2, [r7, #32]
 80177c8:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 80177ca:	89fb      	ldrh	r3, [r7, #14]
}
 80177cc:	4618      	mov	r0, r3
 80177ce:	3710      	adds	r7, #16
 80177d0:	46bd      	mov	sp, r7
 80177d2:	bd80      	pop	{r7, pc}

080177d4 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 80177d4:	b480      	push	{r7}
 80177d6:	b085      	sub	sp, #20
 80177d8:	af00      	add	r7, sp, #0
 80177da:	4603      	mov	r3, r0
 80177dc:	460a      	mov	r2, r1
 80177de:	80fb      	strh	r3, [r7, #6]
 80177e0:	4613      	mov	r3, r2
 80177e2:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 80177e4:	2300      	movs	r3, #0
 80177e6:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 80177e8:	2300      	movs	r3, #0
 80177ea:	73bb      	strb	r3, [r7, #14]
 80177ec:	e011      	b.n	8017812 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80177ee:	88fa      	ldrh	r2, [r7, #6]
 80177f0:	7bbb      	ldrb	r3, [r7, #14]
 80177f2:	2101      	movs	r1, #1
 80177f4:	fa01 f303 	lsl.w	r3, r1, r3
 80177f8:	401a      	ands	r2, r3
 80177fa:	7bbb      	ldrb	r3, [r7, #14]
 80177fc:	2101      	movs	r1, #1
 80177fe:	fa01 f303 	lsl.w	r3, r1, r3
 8017802:	429a      	cmp	r2, r3
 8017804:	d102      	bne.n	801780c <CountChannels+0x38>
        {
            nbActiveBits++;
 8017806:	7bfb      	ldrb	r3, [r7, #15]
 8017808:	3301      	adds	r3, #1
 801780a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 801780c:	7bbb      	ldrb	r3, [r7, #14]
 801780e:	3301      	adds	r3, #1
 8017810:	73bb      	strb	r3, [r7, #14]
 8017812:	7bba      	ldrb	r2, [r7, #14]
 8017814:	797b      	ldrb	r3, [r7, #5]
 8017816:	429a      	cmp	r2, r3
 8017818:	d3e9      	bcc.n	80177ee <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 801781a:	7bfb      	ldrb	r3, [r7, #15]
}
 801781c:	4618      	mov	r0, r3
 801781e:	3714      	adds	r7, #20
 8017820:	46bd      	mov	sp, r7
 8017822:	bc80      	pop	{r7}
 8017824:	4770      	bx	lr

08017826 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8017826:	b580      	push	{r7, lr}
 8017828:	b084      	sub	sp, #16
 801782a:	af00      	add	r7, sp, #0
 801782c:	6039      	str	r1, [r7, #0]
 801782e:	4611      	mov	r1, r2
 8017830:	461a      	mov	r2, r3
 8017832:	4603      	mov	r3, r0
 8017834:	71fb      	strb	r3, [r7, #7]
 8017836:	460b      	mov	r3, r1
 8017838:	71bb      	strb	r3, [r7, #6]
 801783a:	4613      	mov	r3, r2
 801783c:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 801783e:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8017842:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017846:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801784a:	4618      	mov	r0, r3
 801784c:	f000 f85d 	bl	801790a <RegionCommonValueInRange>
 8017850:	4603      	mov	r3, r0
 8017852:	2b00      	cmp	r3, #0
 8017854:	d101      	bne.n	801785a <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8017856:	2300      	movs	r3, #0
 8017858:	e053      	b.n	8017902 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801785a:	2300      	movs	r3, #0
 801785c:	73fb      	strb	r3, [r7, #15]
 801785e:	2300      	movs	r3, #0
 8017860:	73bb      	strb	r3, [r7, #14]
 8017862:	e049      	b.n	80178f8 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017864:	2300      	movs	r3, #0
 8017866:	737b      	strb	r3, [r7, #13]
 8017868:	e03d      	b.n	80178e6 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 801786a:	7bbb      	ldrb	r3, [r7, #14]
 801786c:	005b      	lsls	r3, r3, #1
 801786e:	683a      	ldr	r2, [r7, #0]
 8017870:	4413      	add	r3, r2
 8017872:	881b      	ldrh	r3, [r3, #0]
 8017874:	461a      	mov	r2, r3
 8017876:	7b7b      	ldrb	r3, [r7, #13]
 8017878:	fa42 f303 	asr.w	r3, r2, r3
 801787c:	f003 0301 	and.w	r3, r3, #1
 8017880:	2b00      	cmp	r3, #0
 8017882:	d02d      	beq.n	80178e0 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017884:	7bfa      	ldrb	r2, [r7, #15]
 8017886:	7b7b      	ldrb	r3, [r7, #13]
 8017888:	4413      	add	r3, r2
 801788a:	461a      	mov	r2, r3
 801788c:	4613      	mov	r3, r2
 801788e:	005b      	lsls	r3, r3, #1
 8017890:	4413      	add	r3, r2
 8017892:	009b      	lsls	r3, r3, #2
 8017894:	461a      	mov	r2, r3
 8017896:	69fb      	ldr	r3, [r7, #28]
 8017898:	4413      	add	r3, r2
 801789a:	7a1b      	ldrb	r3, [r3, #8]
 801789c:	f343 0303 	sbfx	r3, r3, #0, #4
 80178a0:	b25b      	sxtb	r3, r3
 80178a2:	f003 030f 	and.w	r3, r3, #15
 80178a6:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 80178a8:	7bfa      	ldrb	r2, [r7, #15]
 80178aa:	7b7b      	ldrb	r3, [r7, #13]
 80178ac:	4413      	add	r3, r2
 80178ae:	461a      	mov	r2, r3
 80178b0:	4613      	mov	r3, r2
 80178b2:	005b      	lsls	r3, r3, #1
 80178b4:	4413      	add	r3, r2
 80178b6:	009b      	lsls	r3, r3, #2
 80178b8:	461a      	mov	r2, r3
 80178ba:	69fb      	ldr	r3, [r7, #28]
 80178bc:	4413      	add	r3, r2
 80178be:	7a1b      	ldrb	r3, [r3, #8]
 80178c0:	f343 1303 	sbfx	r3, r3, #4, #4
 80178c4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80178c6:	f003 030f 	and.w	r3, r3, #15
 80178ca:	b25a      	sxtb	r2, r3
 80178cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80178d0:	4618      	mov	r0, r3
 80178d2:	f000 f81a 	bl	801790a <RegionCommonValueInRange>
 80178d6:	4603      	mov	r3, r0
 80178d8:	2b01      	cmp	r3, #1
 80178da:	d101      	bne.n	80178e0 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 80178dc:	2301      	movs	r3, #1
 80178de:	e010      	b.n	8017902 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 80178e0:	7b7b      	ldrb	r3, [r7, #13]
 80178e2:	3301      	adds	r3, #1
 80178e4:	737b      	strb	r3, [r7, #13]
 80178e6:	7b7b      	ldrb	r3, [r7, #13]
 80178e8:	2b0f      	cmp	r3, #15
 80178ea:	d9be      	bls.n	801786a <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80178ec:	7bfb      	ldrb	r3, [r7, #15]
 80178ee:	3310      	adds	r3, #16
 80178f0:	73fb      	strb	r3, [r7, #15]
 80178f2:	7bbb      	ldrb	r3, [r7, #14]
 80178f4:	3301      	adds	r3, #1
 80178f6:	73bb      	strb	r3, [r7, #14]
 80178f8:	7bfa      	ldrb	r2, [r7, #15]
 80178fa:	79fb      	ldrb	r3, [r7, #7]
 80178fc:	429a      	cmp	r2, r3
 80178fe:	d3b1      	bcc.n	8017864 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8017900:	2300      	movs	r3, #0
}
 8017902:	4618      	mov	r0, r3
 8017904:	3710      	adds	r7, #16
 8017906:	46bd      	mov	sp, r7
 8017908:	bd80      	pop	{r7, pc}

0801790a <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 801790a:	b480      	push	{r7}
 801790c:	b083      	sub	sp, #12
 801790e:	af00      	add	r7, sp, #0
 8017910:	4603      	mov	r3, r0
 8017912:	71fb      	strb	r3, [r7, #7]
 8017914:	460b      	mov	r3, r1
 8017916:	71bb      	strb	r3, [r7, #6]
 8017918:	4613      	mov	r3, r2
 801791a:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 801791c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017920:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017924:	429a      	cmp	r2, r3
 8017926:	db07      	blt.n	8017938 <RegionCommonValueInRange+0x2e>
 8017928:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801792c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8017930:	429a      	cmp	r2, r3
 8017932:	dc01      	bgt.n	8017938 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8017934:	2301      	movs	r3, #1
 8017936:	e000      	b.n	801793a <RegionCommonValueInRange+0x30>
    }
    return 0;
 8017938:	2300      	movs	r3, #0
}
 801793a:	4618      	mov	r0, r3
 801793c:	370c      	adds	r7, #12
 801793e:	46bd      	mov	sp, r7
 8017940:	bc80      	pop	{r7}
 8017942:	4770      	bx	lr

08017944 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8017944:	b480      	push	{r7}
 8017946:	b085      	sub	sp, #20
 8017948:	af00      	add	r7, sp, #0
 801794a:	6078      	str	r0, [r7, #4]
 801794c:	460b      	mov	r3, r1
 801794e:	70fb      	strb	r3, [r7, #3]
 8017950:	4613      	mov	r3, r2
 8017952:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8017954:	78fb      	ldrb	r3, [r7, #3]
 8017956:	091b      	lsrs	r3, r3, #4
 8017958:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 801795a:	78bb      	ldrb	r3, [r7, #2]
 801795c:	091b      	lsrs	r3, r3, #4
 801795e:	b2db      	uxtb	r3, r3
 8017960:	7bfa      	ldrb	r2, [r7, #15]
 8017962:	429a      	cmp	r2, r3
 8017964:	d803      	bhi.n	801796e <RegionCommonChanDisable+0x2a>
 8017966:	78fa      	ldrb	r2, [r7, #3]
 8017968:	78bb      	ldrb	r3, [r7, #2]
 801796a:	429a      	cmp	r2, r3
 801796c:	d301      	bcc.n	8017972 <RegionCommonChanDisable+0x2e>
    {
        return false;
 801796e:	2300      	movs	r3, #0
 8017970:	e017      	b.n	80179a2 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8017972:	7bfb      	ldrb	r3, [r7, #15]
 8017974:	005b      	lsls	r3, r3, #1
 8017976:	687a      	ldr	r2, [r7, #4]
 8017978:	4413      	add	r3, r2
 801797a:	881b      	ldrh	r3, [r3, #0]
 801797c:	b21a      	sxth	r2, r3
 801797e:	78fb      	ldrb	r3, [r7, #3]
 8017980:	f003 030f 	and.w	r3, r3, #15
 8017984:	2101      	movs	r1, #1
 8017986:	fa01 f303 	lsl.w	r3, r1, r3
 801798a:	b21b      	sxth	r3, r3
 801798c:	43db      	mvns	r3, r3
 801798e:	b21b      	sxth	r3, r3
 8017990:	4013      	ands	r3, r2
 8017992:	b219      	sxth	r1, r3
 8017994:	7bfb      	ldrb	r3, [r7, #15]
 8017996:	005b      	lsls	r3, r3, #1
 8017998:	687a      	ldr	r2, [r7, #4]
 801799a:	4413      	add	r3, r2
 801799c:	b28a      	uxth	r2, r1
 801799e:	801a      	strh	r2, [r3, #0]

    return true;
 80179a0:	2301      	movs	r3, #1
}
 80179a2:	4618      	mov	r0, r3
 80179a4:	3714      	adds	r7, #20
 80179a6:	46bd      	mov	sp, r7
 80179a8:	bc80      	pop	{r7}
 80179aa:	4770      	bx	lr

080179ac <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 80179ac:	b580      	push	{r7, lr}
 80179ae:	b084      	sub	sp, #16
 80179b0:	af00      	add	r7, sp, #0
 80179b2:	6078      	str	r0, [r7, #4]
 80179b4:	460b      	mov	r3, r1
 80179b6:	70fb      	strb	r3, [r7, #3]
 80179b8:	4613      	mov	r3, r2
 80179ba:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 80179bc:	2300      	movs	r3, #0
 80179be:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d101      	bne.n	80179ca <RegionCommonCountChannels+0x1e>
    {
        return 0;
 80179c6:	2300      	movs	r3, #0
 80179c8:	e018      	b.n	80179fc <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80179ca:	78fb      	ldrb	r3, [r7, #3]
 80179cc:	73bb      	strb	r3, [r7, #14]
 80179ce:	e010      	b.n	80179f2 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 80179d0:	7bbb      	ldrb	r3, [r7, #14]
 80179d2:	005b      	lsls	r3, r3, #1
 80179d4:	687a      	ldr	r2, [r7, #4]
 80179d6:	4413      	add	r3, r2
 80179d8:	881b      	ldrh	r3, [r3, #0]
 80179da:	2110      	movs	r1, #16
 80179dc:	4618      	mov	r0, r3
 80179de:	f7ff fef9 	bl	80177d4 <CountChannels>
 80179e2:	4603      	mov	r3, r0
 80179e4:	461a      	mov	r2, r3
 80179e6:	7bfb      	ldrb	r3, [r7, #15]
 80179e8:	4413      	add	r3, r2
 80179ea:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80179ec:	7bbb      	ldrb	r3, [r7, #14]
 80179ee:	3301      	adds	r3, #1
 80179f0:	73bb      	strb	r3, [r7, #14]
 80179f2:	7bba      	ldrb	r2, [r7, #14]
 80179f4:	78bb      	ldrb	r3, [r7, #2]
 80179f6:	429a      	cmp	r2, r3
 80179f8:	d3ea      	bcc.n	80179d0 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 80179fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80179fc:	4618      	mov	r0, r3
 80179fe:	3710      	adds	r7, #16
 8017a00:	46bd      	mov	sp, r7
 8017a02:	bd80      	pop	{r7, pc}

08017a04 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8017a04:	b480      	push	{r7}
 8017a06:	b087      	sub	sp, #28
 8017a08:	af00      	add	r7, sp, #0
 8017a0a:	60f8      	str	r0, [r7, #12]
 8017a0c:	60b9      	str	r1, [r7, #8]
 8017a0e:	4613      	mov	r3, r2
 8017a10:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8017a12:	68fb      	ldr	r3, [r7, #12]
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d016      	beq.n	8017a46 <RegionCommonChanMaskCopy+0x42>
 8017a18:	68bb      	ldr	r3, [r7, #8]
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d013      	beq.n	8017a46 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8017a1e:	2300      	movs	r3, #0
 8017a20:	75fb      	strb	r3, [r7, #23]
 8017a22:	e00c      	b.n	8017a3e <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8017a24:	7dfb      	ldrb	r3, [r7, #23]
 8017a26:	005b      	lsls	r3, r3, #1
 8017a28:	68ba      	ldr	r2, [r7, #8]
 8017a2a:	441a      	add	r2, r3
 8017a2c:	7dfb      	ldrb	r3, [r7, #23]
 8017a2e:	005b      	lsls	r3, r3, #1
 8017a30:	68f9      	ldr	r1, [r7, #12]
 8017a32:	440b      	add	r3, r1
 8017a34:	8812      	ldrh	r2, [r2, #0]
 8017a36:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8017a38:	7dfb      	ldrb	r3, [r7, #23]
 8017a3a:	3301      	adds	r3, #1
 8017a3c:	75fb      	strb	r3, [r7, #23]
 8017a3e:	7dfa      	ldrb	r2, [r7, #23]
 8017a40:	79fb      	ldrb	r3, [r7, #7]
 8017a42:	429a      	cmp	r2, r3
 8017a44:	d3ee      	bcc.n	8017a24 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8017a46:	bf00      	nop
 8017a48:	371c      	adds	r7, #28
 8017a4a:	46bd      	mov	sp, r7
 8017a4c:	bc80      	pop	{r7}
 8017a4e:	4770      	bx	lr

08017a50 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017a50:	b082      	sub	sp, #8
 8017a52:	b580      	push	{r7, lr}
 8017a54:	b086      	sub	sp, #24
 8017a56:	af00      	add	r7, sp, #0
 8017a58:	60f8      	str	r0, [r7, #12]
 8017a5a:	60b9      	str	r1, [r7, #8]
 8017a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8017a5e:	4613      	mov	r3, r2
 8017a60:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017a62:	79f9      	ldrb	r1, [r7, #7]
 8017a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017a68:	cb0c      	ldmia	r3, {r2, r3}
 8017a6a:	68f8      	ldr	r0, [r7, #12]
 8017a6c:	f7ff fd8b 	bl	8017586 <GetDutyCycle>
 8017a70:	4603      	mov	r3, r0
 8017a72:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	68da      	ldr	r2, [r3, #12]
 8017a78:	8afb      	ldrh	r3, [r7, #22]
 8017a7a:	68b9      	ldr	r1, [r7, #8]
 8017a7c:	fb01 f303 	mul.w	r3, r1, r3
 8017a80:	429a      	cmp	r2, r3
 8017a82:	d909      	bls.n	8017a98 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	68da      	ldr	r2, [r3, #12]
 8017a88:	8afb      	ldrh	r3, [r7, #22]
 8017a8a:	68b9      	ldr	r1, [r7, #8]
 8017a8c:	fb01 f303 	mul.w	r3, r1, r3
 8017a90:	1ad2      	subs	r2, r2, r3
 8017a92:	68fb      	ldr	r3, [r7, #12]
 8017a94:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8017a96:	e002      	b.n	8017a9e <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	2200      	movs	r2, #0
 8017a9c:	60da      	str	r2, [r3, #12]
}
 8017a9e:	bf00      	nop
 8017aa0:	3718      	adds	r7, #24
 8017aa2:	46bd      	mov	sp, r7
 8017aa4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8017aa8:	b002      	add	sp, #8
 8017aaa:	4770      	bx	lr

08017aac <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8017aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017aae:	b08f      	sub	sp, #60	; 0x3c
 8017ab0:	af04      	add	r7, sp, #16
 8017ab2:	6039      	str	r1, [r7, #0]
 8017ab4:	4611      	mov	r1, r2
 8017ab6:	461a      	mov	r2, r3
 8017ab8:	4603      	mov	r3, r0
 8017aba:	71fb      	strb	r3, [r7, #7]
 8017abc:	460b      	mov	r3, r1
 8017abe:	71bb      	strb	r3, [r7, #6]
 8017ac0:	4613      	mov	r3, r2
 8017ac2:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8017ac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017ac8:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8017aca:	f006 f98b 	bl	801dde4 <UTIL_TIMER_GetCurrentTime>
 8017ace:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8017ad0:	2300      	movs	r3, #0
 8017ad2:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8017ad4:	2301      	movs	r3, #1
 8017ad6:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8017ad8:	2300      	movs	r3, #0
 8017ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8017ade:	2300      	movs	r3, #0
 8017ae0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8017ae4:	e0ba      	b.n	8017c5c <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8017ae6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017aea:	4613      	mov	r3, r2
 8017aec:	005b      	lsls	r3, r3, #1
 8017aee:	4413      	add	r3, r2
 8017af0:	00db      	lsls	r3, r3, #3
 8017af2:	461a      	mov	r2, r3
 8017af4:	683b      	ldr	r3, [r7, #0]
 8017af6:	189c      	adds	r4, r3, r2
 8017af8:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8017afc:	797a      	ldrb	r2, [r7, #5]
 8017afe:	79fd      	ldrb	r5, [r7, #7]
 8017b00:	69fb      	ldr	r3, [r7, #28]
 8017b02:	9302      	str	r3, [sp, #8]
 8017b04:	46ec      	mov	ip, sp
 8017b06:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017b0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017b0e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017b12:	4633      	mov	r3, r6
 8017b14:	4629      	mov	r1, r5
 8017b16:	4620      	mov	r0, r4
 8017b18:	f7ff fe22 	bl	8017760 <UpdateTimeCredits>
 8017b1c:	4603      	mov	r3, r0
 8017b1e:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8017b20:	8afa      	ldrh	r2, [r7, #22]
 8017b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b24:	fb02 f303 	mul.w	r3, r2, r3
 8017b28:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8017b2a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017b2e:	4613      	mov	r3, r2
 8017b30:	005b      	lsls	r3, r3, #1
 8017b32:	4413      	add	r3, r2
 8017b34:	00db      	lsls	r3, r3, #3
 8017b36:	461a      	mov	r2, r3
 8017b38:	683b      	ldr	r3, [r7, #0]
 8017b3a:	4413      	add	r3, r2
 8017b3c:	68db      	ldr	r3, [r3, #12]
 8017b3e:	69ba      	ldr	r2, [r7, #24]
 8017b40:	429a      	cmp	r2, r3
 8017b42:	d908      	bls.n	8017b56 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8017b44:	797b      	ldrb	r3, [r7, #5]
 8017b46:	f083 0301 	eor.w	r3, r3, #1
 8017b4a:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d013      	beq.n	8017b78 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8017b50:	79fb      	ldrb	r3, [r7, #7]
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d010      	beq.n	8017b78 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8017b56:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017b5a:	4613      	mov	r3, r2
 8017b5c:	005b      	lsls	r3, r3, #1
 8017b5e:	4413      	add	r3, r2
 8017b60:	00db      	lsls	r3, r3, #3
 8017b62:	461a      	mov	r2, r3
 8017b64:	683b      	ldr	r3, [r7, #0]
 8017b66:	4413      	add	r3, r2
 8017b68:	2201      	movs	r2, #1
 8017b6a:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8017b6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017b70:	3301      	adds	r3, #1
 8017b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8017b76:	e06c      	b.n	8017c52 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8017b78:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017b7c:	4613      	mov	r3, r2
 8017b7e:	005b      	lsls	r3, r3, #1
 8017b80:	4413      	add	r3, r2
 8017b82:	00db      	lsls	r3, r3, #3
 8017b84:	461a      	mov	r2, r3
 8017b86:	683b      	ldr	r3, [r7, #0]
 8017b88:	4413      	add	r3, r2
 8017b8a:	2200      	movs	r2, #0
 8017b8c:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8017b8e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017b92:	4613      	mov	r3, r2
 8017b94:	005b      	lsls	r3, r3, #1
 8017b96:	4413      	add	r3, r2
 8017b98:	00db      	lsls	r3, r3, #3
 8017b9a:	461a      	mov	r2, r3
 8017b9c:	683b      	ldr	r3, [r7, #0]
 8017b9e:	4413      	add	r3, r2
 8017ba0:	691b      	ldr	r3, [r3, #16]
 8017ba2:	69ba      	ldr	r2, [r7, #24]
 8017ba4:	429a      	cmp	r2, r3
 8017ba6:	d815      	bhi.n	8017bd4 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8017ba8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017bac:	4613      	mov	r3, r2
 8017bae:	005b      	lsls	r3, r3, #1
 8017bb0:	4413      	add	r3, r2
 8017bb2:	00db      	lsls	r3, r3, #3
 8017bb4:	461a      	mov	r2, r3
 8017bb6:	683b      	ldr	r3, [r7, #0]
 8017bb8:	4413      	add	r3, r2
 8017bba:	68db      	ldr	r3, [r3, #12]
 8017bbc:	69ba      	ldr	r2, [r7, #24]
 8017bbe:	1ad3      	subs	r3, r2, r3
 8017bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017bc2:	4293      	cmp	r3, r2
 8017bc4:	bf28      	it	cs
 8017bc6:	4613      	movcs	r3, r2
 8017bc8:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8017bca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017bce:	3301      	adds	r3, #1
 8017bd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8017bd4:	79fb      	ldrb	r3, [r7, #7]
 8017bd6:	f083 0301 	eor.w	r3, r3, #1
 8017bda:	b2db      	uxtb	r3, r3
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	d038      	beq.n	8017c52 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8017be0:	2300      	movs	r3, #0
 8017be2:	60fb      	str	r3, [r7, #12]
 8017be4:	2300      	movs	r3, #0
 8017be6:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8017be8:	8afb      	ldrh	r3, [r7, #22]
 8017bea:	2b64      	cmp	r3, #100	; 0x64
 8017bec:	d103      	bne.n	8017bf6 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8017bee:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8017bf2:	60fb      	str	r3, [r7, #12]
 8017bf4:	e009      	b.n	8017c0a <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8017bf6:	8afb      	ldrh	r3, [r7, #22]
 8017bf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017bfc:	d103      	bne.n	8017c06 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8017bfe:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8017c02:	60fb      	str	r3, [r7, #12]
 8017c04:	e001      	b.n	8017c0a <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8017c06:	4b1e      	ldr	r3, [pc, #120]	; (8017c80 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8017c08:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8017c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017c0c:	4a1c      	ldr	r2, [pc, #112]	; (8017c80 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8017c0e:	4293      	cmp	r3, r2
 8017c10:	d90e      	bls.n	8017c30 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8017c12:	68fa      	ldr	r2, [r7, #12]
 8017c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017c16:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8017c1a:	3b30      	subs	r3, #48	; 0x30
 8017c1c:	4919      	ldr	r1, [pc, #100]	; (8017c84 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8017c1e:	fba1 1303 	umull	r1, r3, r1, r3
 8017c22:	0c1b      	lsrs	r3, r3, #16
 8017c24:	3301      	adds	r3, #1
 8017c26:	4918      	ldr	r1, [pc, #96]	; (8017c88 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8017c28:	fb01 f303 	mul.w	r3, r1, r3
 8017c2c:	4413      	add	r3, r2
 8017c2e:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8017c30:	f107 000c 	add.w	r0, r7, #12
 8017c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017c36:	9300      	str	r3, [sp, #0]
 8017c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017c3a:	f107 020c 	add.w	r2, r7, #12
 8017c3e:	ca06      	ldmia	r2, {r1, r2}
 8017c40:	f005 f9e7 	bl	801d012 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8017c44:	f107 030c 	add.w	r3, r7, #12
 8017c48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017c4c:	f005 faa0 	bl	801d190 <SysTimeToMs>
 8017c50:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8017c52:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017c56:	3301      	adds	r3, #1
 8017c58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8017c5c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017c60:	79bb      	ldrb	r3, [r7, #6]
 8017c62:	429a      	cmp	r2, r3
 8017c64:	f4ff af3f 	bcc.w	8017ae6 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8017c68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	d102      	bne.n	8017c76 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8017c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017c74:	e000      	b.n	8017c78 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8017c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017c78:	4618      	mov	r0, r3
 8017c7a:	372c      	adds	r7, #44	; 0x2c
 8017c7c:	46bd      	mov	sp, r7
 8017c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c80:	0001ec30 	.word	0x0001ec30
 8017c84:	c22e4507 	.word	0xc22e4507
 8017c88:	00015180 	.word	0x00015180

08017c8c <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8017c8c:	b480      	push	{r7}
 8017c8e:	b085      	sub	sp, #20
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	6078      	str	r0, [r7, #4]
 8017c94:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8017c96:	2300      	movs	r3, #0
 8017c98:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	781b      	ldrb	r3, [r3, #0]
 8017c9e:	2b03      	cmp	r3, #3
 8017ca0:	d13f      	bne.n	8017d22 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	3301      	adds	r3, #1
 8017ca6:	781b      	ldrb	r3, [r3, #0]
 8017ca8:	b25a      	sxtb	r2, r3
 8017caa:	683b      	ldr	r3, [r7, #0]
 8017cac:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8017cae:	683b      	ldr	r3, [r7, #0]
 8017cb0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017cb4:	f003 030f 	and.w	r3, r3, #15
 8017cb8:	b25a      	sxtb	r2, r3
 8017cba:	683b      	ldr	r3, [r7, #0]
 8017cbc:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8017cbe:	683b      	ldr	r3, [r7, #0]
 8017cc0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017cc4:	b2db      	uxtb	r3, r3
 8017cc6:	091b      	lsrs	r3, r3, #4
 8017cc8:	b2db      	uxtb	r3, r3
 8017cca:	b25a      	sxtb	r2, r3
 8017ccc:	683b      	ldr	r3, [r7, #0]
 8017cce:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	3302      	adds	r3, #2
 8017cd4:	781b      	ldrb	r3, [r3, #0]
 8017cd6:	b29a      	uxth	r2, r3
 8017cd8:	683b      	ldr	r3, [r7, #0]
 8017cda:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8017cdc:	683b      	ldr	r3, [r7, #0]
 8017cde:	889b      	ldrh	r3, [r3, #4]
 8017ce0:	b21a      	sxth	r2, r3
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	3303      	adds	r3, #3
 8017ce6:	781b      	ldrb	r3, [r3, #0]
 8017ce8:	021b      	lsls	r3, r3, #8
 8017cea:	b21b      	sxth	r3, r3
 8017cec:	4313      	orrs	r3, r2
 8017cee:	b21b      	sxth	r3, r3
 8017cf0:	b29a      	uxth	r2, r3
 8017cf2:	683b      	ldr	r3, [r7, #0]
 8017cf4:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	791a      	ldrb	r2, [r3, #4]
 8017cfa:	683b      	ldr	r3, [r7, #0]
 8017cfc:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8017cfe:	683b      	ldr	r3, [r7, #0]
 8017d00:	781b      	ldrb	r3, [r3, #0]
 8017d02:	091b      	lsrs	r3, r3, #4
 8017d04:	b2db      	uxtb	r3, r3
 8017d06:	f003 0307 	and.w	r3, r3, #7
 8017d0a:	b2da      	uxtb	r2, r3
 8017d0c:	683b      	ldr	r3, [r7, #0]
 8017d0e:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8017d10:	683b      	ldr	r3, [r7, #0]
 8017d12:	781b      	ldrb	r3, [r3, #0]
 8017d14:	f003 030f 	and.w	r3, r3, #15
 8017d18:	b2da      	uxtb	r2, r3
 8017d1a:	683b      	ldr	r3, [r7, #0]
 8017d1c:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8017d1e:	2305      	movs	r3, #5
 8017d20:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8017d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d24:	4618      	mov	r0, r3
 8017d26:	3714      	adds	r7, #20
 8017d28:	46bd      	mov	sp, r7
 8017d2a:	bc80      	pop	{r7}
 8017d2c:	4770      	bx	lr

08017d2e <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8017d2e:	b5b0      	push	{r4, r5, r7, lr}
 8017d30:	b088      	sub	sp, #32
 8017d32:	af02      	add	r7, sp, #8
 8017d34:	60f8      	str	r0, [r7, #12]
 8017d36:	60b9      	str	r1, [r7, #8]
 8017d38:	607a      	str	r2, [r7, #4]
 8017d3a:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8017d3c:	68fb      	ldr	r3, [r7, #12]
 8017d3e:	791b      	ldrb	r3, [r3, #4]
 8017d40:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8017d42:	68fb      	ldr	r3, [r7, #12]
 8017d44:	799b      	ldrb	r3, [r3, #6]
 8017d46:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8017d48:	68fb      	ldr	r3, [r7, #12]
 8017d4a:	79db      	ldrb	r3, [r3, #7]
 8017d4c:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8017d4e:	68fb      	ldr	r3, [r7, #12]
 8017d50:	7a1b      	ldrb	r3, [r3, #8]
 8017d52:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8017d54:	68fb      	ldr	r3, [r7, #12]
 8017d56:	795b      	ldrb	r3, [r3, #5]
 8017d58:	f083 0301 	eor.w	r3, r3, #1
 8017d5c:	b2db      	uxtb	r3, r3
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d008      	beq.n	8017d74 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8017d62:	68fb      	ldr	r3, [r7, #12]
 8017d64:	7adb      	ldrb	r3, [r3, #11]
 8017d66:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	7a5b      	ldrb	r3, [r3, #9]
 8017d6c:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	7a9b      	ldrb	r3, [r3, #10]
 8017d72:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8017d74:	7dfb      	ldrb	r3, [r7, #23]
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d04a      	beq.n	8017e10 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8017d7a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8017d7e:	2b0f      	cmp	r3, #15
 8017d80:	d103      	bne.n	8017d8a <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8017d82:	68fb      	ldr	r3, [r7, #12]
 8017d84:	7a5b      	ldrb	r3, [r3, #9]
 8017d86:	75bb      	strb	r3, [r7, #22]
 8017d88:	e01d      	b.n	8017dc6 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017d8a:	68fb      	ldr	r3, [r7, #12]
 8017d8c:	7b18      	ldrb	r0, [r3, #12]
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	6919      	ldr	r1, [r3, #16]
 8017d92:	68fb      	ldr	r3, [r7, #12]
 8017d94:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8017d9e:	68fa      	ldr	r2, [r7, #12]
 8017da0:	6992      	ldr	r2, [r2, #24]
 8017da2:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8017da6:	9201      	str	r2, [sp, #4]
 8017da8:	9300      	str	r3, [sp, #0]
 8017daa:	462b      	mov	r3, r5
 8017dac:	4622      	mov	r2, r4
 8017dae:	f7ff fd3a 	bl	8017826 <RegionCommonChanVerifyDr>
 8017db2:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8017db4:	f083 0301 	eor.w	r3, r3, #1
 8017db8:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	d003      	beq.n	8017dc6 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8017dbe:	7dfb      	ldrb	r3, [r7, #23]
 8017dc0:	f023 0302 	bic.w	r3, r3, #2
 8017dc4:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8017dc6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8017dca:	2b0f      	cmp	r3, #15
 8017dcc:	d103      	bne.n	8017dd6 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8017dce:	68fb      	ldr	r3, [r7, #12]
 8017dd0:	7a9b      	ldrb	r3, [r3, #10]
 8017dd2:	757b      	strb	r3, [r7, #21]
 8017dd4:	e01c      	b.n	8017e10 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8017ddc:	68fb      	ldr	r3, [r7, #12]
 8017dde:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8017de2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8017de6:	4618      	mov	r0, r3
 8017de8:	f7ff fd8f 	bl	801790a <RegionCommonValueInRange>
 8017dec:	4603      	mov	r3, r0
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d10e      	bne.n	8017e10 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8017df2:	68fb      	ldr	r3, [r7, #12]
 8017df4:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8017df8:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8017dfc:	429a      	cmp	r2, r3
 8017dfe:	da03      	bge.n	8017e08 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8017e00:	68fb      	ldr	r3, [r7, #12]
 8017e02:	7f5b      	ldrb	r3, [r3, #29]
 8017e04:	757b      	strb	r3, [r7, #21]
 8017e06:	e003      	b.n	8017e10 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8017e08:	7dfb      	ldrb	r3, [r7, #23]
 8017e0a:	f023 0304 	bic.w	r3, r3, #4
 8017e0e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8017e10:	7dfb      	ldrb	r3, [r7, #23]
 8017e12:	2b07      	cmp	r3, #7
 8017e14:	d105      	bne.n	8017e22 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8017e16:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d101      	bne.n	8017e22 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8017e1e:	2301      	movs	r3, #1
 8017e20:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8017e22:	68bb      	ldr	r3, [r7, #8]
 8017e24:	7dba      	ldrb	r2, [r7, #22]
 8017e26:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	7d7a      	ldrb	r2, [r7, #21]
 8017e2c:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8017e2e:	7d3a      	ldrb	r2, [r7, #20]
 8017e30:	683b      	ldr	r3, [r7, #0]
 8017e32:	701a      	strb	r2, [r3, #0]

    return status;
 8017e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8017e36:	4618      	mov	r0, r3
 8017e38:	3718      	adds	r7, #24
 8017e3a:	46bd      	mov	sp, r7
 8017e3c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08017e40 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8017e40:	b480      	push	{r7}
 8017e42:	b083      	sub	sp, #12
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	4603      	mov	r3, r0
 8017e48:	6039      	str	r1, [r7, #0]
 8017e4a:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8017e4c:	79fb      	ldrb	r3, [r7, #7]
 8017e4e:	4a06      	ldr	r2, [pc, #24]	; (8017e68 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8017e50:	fa02 f303 	lsl.w	r3, r2, r3
 8017e54:	461a      	mov	r2, r3
 8017e56:	683b      	ldr	r3, [r7, #0]
 8017e58:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017e5c:	4618      	mov	r0, r3
 8017e5e:	370c      	adds	r7, #12
 8017e60:	46bd      	mov	sp, r7
 8017e62:	bc80      	pop	{r7}
 8017e64:	4770      	bx	lr
 8017e66:	bf00      	nop
 8017e68:	000f4240 	.word	0x000f4240

08017e6c <RegionCommonComputeRxWindowParameters>:
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8017e6c:	b480      	push	{r7}
 8017e6e:	b085      	sub	sp, #20
 8017e70:	af00      	add	r7, sp, #0
 8017e72:	60f8      	str	r0, [r7, #12]
 8017e74:	607a      	str	r2, [r7, #4]
 8017e76:	603b      	str	r3, [r7, #0]
 8017e78:	460b      	mov	r3, r1
 8017e7a:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8017e7c:	7afa      	ldrb	r2, [r7, #11]
 8017e7e:	7afb      	ldrb	r3, [r7, #11]
 8017e80:	3b04      	subs	r3, #4
 8017e82:	4619      	mov	r1, r3
 8017e84:	68fb      	ldr	r3, [r7, #12]
 8017e86:	fb03 f101 	mul.w	r1, r3, r1
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017e90:	fb00 f303 	mul.w	r3, r0, r3
 8017e94:	440b      	add	r3, r1
 8017e96:	005b      	lsls	r3, r3, #1
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d013      	beq.n	8017ec4 <RegionCommonComputeRxWindowParameters+0x58>
 8017e9c:	7afb      	ldrb	r3, [r7, #11]
 8017e9e:	3b04      	subs	r3, #4
 8017ea0:	4619      	mov	r1, r3
 8017ea2:	68fb      	ldr	r3, [r7, #12]
 8017ea4:	fb03 f101 	mul.w	r1, r3, r1
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017eae:	fb00 f303 	mul.w	r3, r0, r3
 8017eb2:	440b      	add	r3, r1
 8017eb4:	0059      	lsls	r1, r3, #1
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	440b      	add	r3, r1
 8017eba:	1e59      	subs	r1, r3, #1
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	fbb1 f3f3 	udiv	r3, r1, r3
 8017ec2:	e00f      	b.n	8017ee4 <RegionCommonComputeRxWindowParameters+0x78>
 8017ec4:	7afb      	ldrb	r3, [r7, #11]
 8017ec6:	3b04      	subs	r3, #4
 8017ec8:	4619      	mov	r1, r3
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	fb03 f101 	mul.w	r1, r3, r1
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017ed6:	fb00 f303 	mul.w	r3, r0, r3
 8017eda:	440b      	add	r3, r1
 8017edc:	0059      	lsls	r1, r3, #1
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	fbb1 f3f3 	udiv	r3, r1, r3
 8017ee4:	429a      	cmp	r2, r3
 8017ee6:	bf38      	it	cc
 8017ee8:	461a      	movcc	r2, r3
 8017eea:	69bb      	ldr	r3, [r7, #24]
 8017eec:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	009b      	lsls	r3, r3, #2
 8017ef2:	4619      	mov	r1, r3
 8017ef4:	69bb      	ldr	r3, [r7, #24]
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	68fa      	ldr	r2, [r7, #12]
 8017efa:	fb02 f303 	mul.w	r3, r2, r3
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	d007      	beq.n	8017f12 <RegionCommonComputeRxWindowParameters+0xa6>
 8017f02:	69bb      	ldr	r3, [r7, #24]
 8017f04:	681b      	ldr	r3, [r3, #0]
 8017f06:	68fa      	ldr	r2, [r7, #12]
 8017f08:	fb02 f303 	mul.w	r3, r2, r3
 8017f0c:	3301      	adds	r3, #1
 8017f0e:	085b      	lsrs	r3, r3, #1
 8017f10:	e005      	b.n	8017f1e <RegionCommonComputeRxWindowParameters+0xb2>
 8017f12:	69bb      	ldr	r3, [r7, #24]
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	68fa      	ldr	r2, [r7, #12]
 8017f18:	fb02 f303 	mul.w	r3, r2, r3
 8017f1c:	085b      	lsrs	r3, r3, #1
 8017f1e:	1acb      	subs	r3, r1, r3
 8017f20:	683a      	ldr	r2, [r7, #0]
 8017f22:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017f26:	fb01 f202 	mul.w	r2, r1, r2
 8017f2a:	1a9b      	subs	r3, r3, r2
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	dd27      	ble.n	8017f80 <RegionCommonComputeRxWindowParameters+0x114>
 8017f30:	68fb      	ldr	r3, [r7, #12]
 8017f32:	009b      	lsls	r3, r3, #2
 8017f34:	4619      	mov	r1, r3
 8017f36:	69bb      	ldr	r3, [r7, #24]
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	68fa      	ldr	r2, [r7, #12]
 8017f3c:	fb02 f303 	mul.w	r3, r2, r3
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d007      	beq.n	8017f54 <RegionCommonComputeRxWindowParameters+0xe8>
 8017f44:	69bb      	ldr	r3, [r7, #24]
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	68fa      	ldr	r2, [r7, #12]
 8017f4a:	fb02 f303 	mul.w	r3, r2, r3
 8017f4e:	3301      	adds	r3, #1
 8017f50:	085b      	lsrs	r3, r3, #1
 8017f52:	e005      	b.n	8017f60 <RegionCommonComputeRxWindowParameters+0xf4>
 8017f54:	69bb      	ldr	r3, [r7, #24]
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	68fa      	ldr	r2, [r7, #12]
 8017f5a:	fb02 f303 	mul.w	r3, r2, r3
 8017f5e:	085b      	lsrs	r3, r3, #1
 8017f60:	1acb      	subs	r3, r1, r3
 8017f62:	683a      	ldr	r2, [r7, #0]
 8017f64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017f68:	fb01 f202 	mul.w	r2, r1, r2
 8017f6c:	1a9b      	subs	r3, r3, r2
 8017f6e:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8017f72:	4a19      	ldr	r2, [pc, #100]	; (8017fd8 <RegionCommonComputeRxWindowParameters+0x16c>)
 8017f74:	fb82 1203 	smull	r1, r2, r2, r3
 8017f78:	1192      	asrs	r2, r2, #6
 8017f7a:	17db      	asrs	r3, r3, #31
 8017f7c:	1ad3      	subs	r3, r2, r3
 8017f7e:	e024      	b.n	8017fca <RegionCommonComputeRxWindowParameters+0x15e>
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	009b      	lsls	r3, r3, #2
 8017f84:	4619      	mov	r1, r3
 8017f86:	69bb      	ldr	r3, [r7, #24]
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	68fa      	ldr	r2, [r7, #12]
 8017f8c:	fb02 f303 	mul.w	r3, r2, r3
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d007      	beq.n	8017fa4 <RegionCommonComputeRxWindowParameters+0x138>
 8017f94:	69bb      	ldr	r3, [r7, #24]
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	68fa      	ldr	r2, [r7, #12]
 8017f9a:	fb02 f303 	mul.w	r3, r2, r3
 8017f9e:	3301      	adds	r3, #1
 8017fa0:	085b      	lsrs	r3, r3, #1
 8017fa2:	e005      	b.n	8017fb0 <RegionCommonComputeRxWindowParameters+0x144>
 8017fa4:	69bb      	ldr	r3, [r7, #24]
 8017fa6:	681b      	ldr	r3, [r3, #0]
 8017fa8:	68fa      	ldr	r2, [r7, #12]
 8017faa:	fb02 f303 	mul.w	r3, r2, r3
 8017fae:	085b      	lsrs	r3, r3, #1
 8017fb0:	1acb      	subs	r3, r1, r3
 8017fb2:	683a      	ldr	r2, [r7, #0]
 8017fb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017fb8:	fb01 f202 	mul.w	r2, r1, r2
 8017fbc:	1a9b      	subs	r3, r3, r2
 8017fbe:	4a06      	ldr	r2, [pc, #24]	; (8017fd8 <RegionCommonComputeRxWindowParameters+0x16c>)
 8017fc0:	fb82 1203 	smull	r1, r2, r2, r3
 8017fc4:	1192      	asrs	r2, r2, #6
 8017fc6:	17db      	asrs	r3, r3, #31
 8017fc8:	1ad3      	subs	r3, r2, r3
 8017fca:	69fa      	ldr	r2, [r7, #28]
 8017fcc:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8017fce:	bf00      	nop
 8017fd0:	3714      	adds	r7, #20
 8017fd2:	46bd      	mov	sp, r7
 8017fd4:	bc80      	pop	{r7}
 8017fd6:	4770      	bx	lr
 8017fd8:	10624dd3 	.word	0x10624dd3

08017fdc <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8017fdc:	b580      	push	{r7, lr}
 8017fde:	b086      	sub	sp, #24
 8017fe0:	af00      	add	r7, sp, #0
 8017fe2:	4603      	mov	r3, r0
 8017fe4:	60b9      	str	r1, [r7, #8]
 8017fe6:	607a      	str	r2, [r7, #4]
 8017fe8:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8017fea:	2300      	movs	r3, #0
 8017fec:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8017fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017ff2:	005b      	lsls	r3, r3, #1
 8017ff4:	4618      	mov	r0, r3
 8017ff6:	f7e8 fdfb 	bl	8000bf0 <__aeabi_ui2f>
 8017ffa:	4603      	mov	r3, r0
 8017ffc:	4619      	mov	r1, r3
 8017ffe:	68b8      	ldr	r0, [r7, #8]
 8018000:	f7e8 fd44 	bl	8000a8c <__aeabi_fsub>
 8018004:	4603      	mov	r3, r0
 8018006:	6879      	ldr	r1, [r7, #4]
 8018008:	4618      	mov	r0, r3
 801800a:	f7e8 fd3f 	bl	8000a8c <__aeabi_fsub>
 801800e:	4603      	mov	r3, r0
 8018010:	4618      	mov	r0, r3
 8018012:	f7e8 fa1d 	bl	8000450 <__aeabi_f2d>
 8018016:	4602      	mov	r2, r0
 8018018:	460b      	mov	r3, r1
 801801a:	4610      	mov	r0, r2
 801801c:	4619      	mov	r1, r3
 801801e:	f006 fa4b 	bl	801e4b8 <floor>
 8018022:	4602      	mov	r2, r0
 8018024:	460b      	mov	r3, r1
 8018026:	4610      	mov	r0, r2
 8018028:	4619      	mov	r1, r3
 801802a:	f7e8 fd03 	bl	8000a34 <__aeabi_d2iz>
 801802e:	4603      	mov	r3, r0
 8018030:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8018032:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018036:	4618      	mov	r0, r3
 8018038:	3718      	adds	r7, #24
 801803a:	46bd      	mov	sp, r7
 801803c:	bd80      	pop	{r7, pc}

0801803e <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 801803e:	b590      	push	{r4, r7, lr}
 8018040:	b087      	sub	sp, #28
 8018042:	af00      	add	r7, sp, #0
 8018044:	60f8      	str	r0, [r7, #12]
 8018046:	60b9      	str	r1, [r7, #8]
 8018048:	607a      	str	r2, [r7, #4]
 801804a:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 801804c:	2300      	movs	r3, #0
 801804e:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8018050:	2300      	movs	r3, #0
 8018052:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8018054:	2300      	movs	r3, #0
 8018056:	757b      	strb	r3, [r7, #21]
 8018058:	2300      	movs	r3, #0
 801805a:	753b      	strb	r3, [r7, #20]
 801805c:	e09c      	b.n	8018198 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801805e:	2300      	movs	r3, #0
 8018060:	74fb      	strb	r3, [r7, #19]
 8018062:	e08f      	b.n	8018184 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8018064:	68fb      	ldr	r3, [r7, #12]
 8018066:	685a      	ldr	r2, [r3, #4]
 8018068:	7d3b      	ldrb	r3, [r7, #20]
 801806a:	005b      	lsls	r3, r3, #1
 801806c:	4413      	add	r3, r2
 801806e:	881b      	ldrh	r3, [r3, #0]
 8018070:	461a      	mov	r2, r3
 8018072:	7cfb      	ldrb	r3, [r7, #19]
 8018074:	fa42 f303 	asr.w	r3, r2, r3
 8018078:	f003 0301 	and.w	r3, r3, #1
 801807c:	2b00      	cmp	r3, #0
 801807e:	d07e      	beq.n	801817e <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8018080:	68fb      	ldr	r3, [r7, #12]
 8018082:	689a      	ldr	r2, [r3, #8]
 8018084:	7d79      	ldrb	r1, [r7, #21]
 8018086:	7cfb      	ldrb	r3, [r7, #19]
 8018088:	440b      	add	r3, r1
 801808a:	4619      	mov	r1, r3
 801808c:	460b      	mov	r3, r1
 801808e:	005b      	lsls	r3, r3, #1
 8018090:	440b      	add	r3, r1
 8018092:	009b      	lsls	r3, r3, #2
 8018094:	4413      	add	r3, r2
 8018096:	681b      	ldr	r3, [r3, #0]
 8018098:	2b00      	cmp	r3, #0
 801809a:	d06b      	beq.n	8018174 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801809c:	68fb      	ldr	r3, [r7, #12]
 801809e:	781b      	ldrb	r3, [r3, #0]
 80180a0:	f083 0301 	eor.w	r3, r3, #1
 80180a4:	b2db      	uxtb	r3, r3
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d011      	beq.n	80180ce <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 80180aa:	68fb      	ldr	r3, [r7, #12]
 80180ac:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d00d      	beq.n	80180ce <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 80180b2:	68fb      	ldr	r3, [r7, #12]
 80180b4:	695a      	ldr	r2, [r3, #20]
 80180b6:	7d3b      	ldrb	r3, [r7, #20]
 80180b8:	005b      	lsls	r3, r3, #1
 80180ba:	4413      	add	r3, r2
 80180bc:	881b      	ldrh	r3, [r3, #0]
 80180be:	461a      	mov	r2, r3
 80180c0:	7cfb      	ldrb	r3, [r7, #19]
 80180c2:	fa42 f303 	asr.w	r3, r2, r3
 80180c6:	f003 0301 	and.w	r3, r3, #1
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d054      	beq.n	8018178 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80180ce:	68fb      	ldr	r3, [r7, #12]
 80180d0:	785b      	ldrb	r3, [r3, #1]
 80180d2:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 80180d4:	68fb      	ldr	r3, [r7, #12]
 80180d6:	689a      	ldr	r2, [r3, #8]
 80180d8:	7d79      	ldrb	r1, [r7, #21]
 80180da:	7cfb      	ldrb	r3, [r7, #19]
 80180dc:	440b      	add	r3, r1
 80180de:	4619      	mov	r1, r3
 80180e0:	460b      	mov	r3, r1
 80180e2:	005b      	lsls	r3, r3, #1
 80180e4:	440b      	add	r3, r1
 80180e6:	009b      	lsls	r3, r3, #2
 80180e8:	4413      	add	r3, r2
 80180ea:	7a1b      	ldrb	r3, [r3, #8]
 80180ec:	f343 0303 	sbfx	r3, r3, #0, #4
 80180f0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80180f2:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 80180f4:	68fb      	ldr	r3, [r7, #12]
 80180f6:	689a      	ldr	r2, [r3, #8]
 80180f8:	7d79      	ldrb	r1, [r7, #21]
 80180fa:	7cfb      	ldrb	r3, [r7, #19]
 80180fc:	440b      	add	r3, r1
 80180fe:	4619      	mov	r1, r3
 8018100:	460b      	mov	r3, r1
 8018102:	005b      	lsls	r3, r3, #1
 8018104:	440b      	add	r3, r1
 8018106:	009b      	lsls	r3, r3, #2
 8018108:	4413      	add	r3, r2
 801810a:	7a1b      	ldrb	r3, [r3, #8]
 801810c:	f343 1303 	sbfx	r3, r3, #4, #4
 8018110:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8018112:	461a      	mov	r2, r3
 8018114:	4621      	mov	r1, r4
 8018116:	f7ff fbf8 	bl	801790a <RegionCommonValueInRange>
 801811a:	4603      	mov	r3, r0
 801811c:	2b00      	cmp	r3, #0
 801811e:	d02d      	beq.n	801817c <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8018120:	68fb      	ldr	r3, [r7, #12]
 8018122:	68da      	ldr	r2, [r3, #12]
 8018124:	68fb      	ldr	r3, [r7, #12]
 8018126:	6899      	ldr	r1, [r3, #8]
 8018128:	7d78      	ldrb	r0, [r7, #21]
 801812a:	7cfb      	ldrb	r3, [r7, #19]
 801812c:	4403      	add	r3, r0
 801812e:	4618      	mov	r0, r3
 8018130:	4603      	mov	r3, r0
 8018132:	005b      	lsls	r3, r3, #1
 8018134:	4403      	add	r3, r0
 8018136:	009b      	lsls	r3, r3, #2
 8018138:	440b      	add	r3, r1
 801813a:	7a5b      	ldrb	r3, [r3, #9]
 801813c:	4619      	mov	r1, r3
 801813e:	460b      	mov	r3, r1
 8018140:	005b      	lsls	r3, r3, #1
 8018142:	440b      	add	r3, r1
 8018144:	00db      	lsls	r3, r3, #3
 8018146:	4413      	add	r3, r2
 8018148:	7d1b      	ldrb	r3, [r3, #20]
 801814a:	f083 0301 	eor.w	r3, r3, #1
 801814e:	b2db      	uxtb	r3, r3
 8018150:	2b00      	cmp	r3, #0
 8018152:	d003      	beq.n	801815c <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8018154:	7dbb      	ldrb	r3, [r7, #22]
 8018156:	3301      	adds	r3, #1
 8018158:	75bb      	strb	r3, [r7, #22]
                    continue;
 801815a:	e010      	b.n	801817e <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 801815c:	7dfb      	ldrb	r3, [r7, #23]
 801815e:	1c5a      	adds	r2, r3, #1
 8018160:	75fa      	strb	r2, [r7, #23]
 8018162:	461a      	mov	r2, r3
 8018164:	68bb      	ldr	r3, [r7, #8]
 8018166:	4413      	add	r3, r2
 8018168:	7d79      	ldrb	r1, [r7, #21]
 801816a:	7cfa      	ldrb	r2, [r7, #19]
 801816c:	440a      	add	r2, r1
 801816e:	b2d2      	uxtb	r2, r2
 8018170:	701a      	strb	r2, [r3, #0]
 8018172:	e004      	b.n	801817e <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8018174:	bf00      	nop
 8018176:	e002      	b.n	801817e <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8018178:	bf00      	nop
 801817a:	e000      	b.n	801817e <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801817c:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 801817e:	7cfb      	ldrb	r3, [r7, #19]
 8018180:	3301      	adds	r3, #1
 8018182:	74fb      	strb	r3, [r7, #19]
 8018184:	7cfb      	ldrb	r3, [r7, #19]
 8018186:	2b0f      	cmp	r3, #15
 8018188:	f67f af6c 	bls.w	8018064 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801818c:	7d7b      	ldrb	r3, [r7, #21]
 801818e:	3310      	adds	r3, #16
 8018190:	757b      	strb	r3, [r7, #21]
 8018192:	7d3b      	ldrb	r3, [r7, #20]
 8018194:	3301      	adds	r3, #1
 8018196:	753b      	strb	r3, [r7, #20]
 8018198:	7d7b      	ldrb	r3, [r7, #21]
 801819a:	b29a      	uxth	r2, r3
 801819c:	68fb      	ldr	r3, [r7, #12]
 801819e:	8a1b      	ldrh	r3, [r3, #16]
 80181a0:	429a      	cmp	r2, r3
 80181a2:	f4ff af5c 	bcc.w	801805e <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	7dfa      	ldrb	r2, [r7, #23]
 80181aa:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 80181ac:	683b      	ldr	r3, [r7, #0]
 80181ae:	7dba      	ldrb	r2, [r7, #22]
 80181b0:	701a      	strb	r2, [r3, #0]
}
 80181b2:	bf00      	nop
 80181b4:	371c      	adds	r7, #28
 80181b6:	46bd      	mov	sp, r7
 80181b8:	bd90      	pop	{r4, r7, pc}

080181ba <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 80181ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181bc:	b08b      	sub	sp, #44	; 0x2c
 80181be:	af04      	add	r7, sp, #16
 80181c0:	60f8      	str	r0, [r7, #12]
 80181c2:	60b9      	str	r1, [r7, #8]
 80181c4:	607a      	str	r2, [r7, #4]
 80181c6:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80181c8:	68fb      	ldr	r3, [r7, #12]
 80181ca:	685b      	ldr	r3, [r3, #4]
 80181cc:	4618      	mov	r0, r3
 80181ce:	f005 fe1b 	bl	801de08 <UTIL_TIMER_GetElapsedTime>
 80181d2:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80181d4:	68fb      	ldr	r3, [r7, #12]
 80181d6:	681a      	ldr	r2, [r3, #0]
 80181d8:	697b      	ldr	r3, [r7, #20]
 80181da:	1ad2      	subs	r2, r2, r3
 80181dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80181de:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 80181e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181e2:	2201      	movs	r2, #1
 80181e4:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 80181e6:	683b      	ldr	r3, [r7, #0]
 80181e8:	2200      	movs	r2, #0
 80181ea:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80181ec:	68fb      	ldr	r3, [r7, #12]
 80181ee:	685b      	ldr	r3, [r3, #4]
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d004      	beq.n	80181fe <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 80181f4:	68fb      	ldr	r3, [r7, #12]
 80181f6:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80181f8:	697a      	ldr	r2, [r7, #20]
 80181fa:	429a      	cmp	r2, r3
 80181fc:	d32b      	bcc.n	8018256 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80181fe:	68bb      	ldr	r3, [r7, #8]
 8018200:	2200      	movs	r2, #0
 8018202:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8018204:	68fb      	ldr	r3, [r7, #12]
 8018206:	69db      	ldr	r3, [r3, #28]
 8018208:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 801820a:	68fb      	ldr	r3, [r7, #12]
 801820c:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801820e:	68dd      	ldr	r5, [r3, #12]
 8018210:	68fb      	ldr	r3, [r7, #12]
 8018212:	7a5e      	ldrb	r6, [r3, #9]
 8018214:	68fb      	ldr	r3, [r7, #12]
 8018216:	f893 c008 	ldrb.w	ip, [r3, #8]
 801821a:	68fb      	ldr	r3, [r7, #12]
 801821c:	7d1b      	ldrb	r3, [r3, #20]
 801821e:	68fa      	ldr	r2, [r7, #12]
 8018220:	6992      	ldr	r2, [r2, #24]
 8018222:	9203      	str	r2, [sp, #12]
 8018224:	68fa      	ldr	r2, [r7, #12]
 8018226:	f10d 0e04 	add.w	lr, sp, #4
 801822a:	320c      	adds	r2, #12
 801822c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018230:	e88e 0003 	stmia.w	lr, {r0, r1}
 8018234:	9300      	str	r3, [sp, #0]
 8018236:	4663      	mov	r3, ip
 8018238:	4632      	mov	r2, r6
 801823a:	4629      	mov	r1, r5
 801823c:	4620      	mov	r0, r4
 801823e:	f7ff fc35 	bl	8017aac <RegionCommonUpdateBandTimeOff>
 8018242:	4602      	mov	r2, r0
 8018244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018246:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8018248:	68fb      	ldr	r3, [r7, #12]
 801824a:	69d8      	ldr	r0, [r3, #28]
 801824c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801824e:	683a      	ldr	r2, [r7, #0]
 8018250:	6879      	ldr	r1, [r7, #4]
 8018252:	f7ff fef4 	bl	801803e <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8018256:	683b      	ldr	r3, [r7, #0]
 8018258:	781b      	ldrb	r3, [r3, #0]
 801825a:	2b00      	cmp	r3, #0
 801825c:	d004      	beq.n	8018268 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 801825e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018260:	2200      	movs	r2, #0
 8018262:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8018264:	2300      	movs	r3, #0
 8018266:	e006      	b.n	8018276 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8018268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801826a:	781b      	ldrb	r3, [r3, #0]
 801826c:	2b00      	cmp	r3, #0
 801826e:	d001      	beq.n	8018274 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8018270:	230b      	movs	r3, #11
 8018272:	e000      	b.n	8018276 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018274:	230c      	movs	r3, #12
    }
}
 8018276:	4618      	mov	r0, r3
 8018278:	371c      	adds	r7, #28
 801827a:	46bd      	mov	sp, r7
 801827c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801827e <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 801827e:	b5b0      	push	{r4, r5, r7, lr}
 8018280:	b086      	sub	sp, #24
 8018282:	af02      	add	r7, sp, #8
 8018284:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8018286:	687b      	ldr	r3, [r7, #4]
 8018288:	781b      	ldrb	r3, [r3, #0]
 801828a:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	f993 2000 	ldrsb.w	r2, [r3]
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018298:	429a      	cmp	r2, r3
 801829a:	d103      	bne.n	80182a4 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80182a2:	e026      	b.n	80182f2 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 80182a4:	7bfb      	ldrb	r3, [r7, #15]
 80182a6:	3b01      	subs	r3, #1
 80182a8:	b2db      	uxtb	r3, r3
 80182aa:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80182b2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80182b6:	429a      	cmp	r2, r3
 80182b8:	d019      	beq.n	80182ee <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	78d8      	ldrb	r0, [r3, #3]
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	6859      	ldr	r1, [r3, #4]
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	f993 5002 	ldrsb.w	r5, [r3, #2]
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80182ce:	687a      	ldr	r2, [r7, #4]
 80182d0:	6892      	ldr	r2, [r2, #8]
 80182d2:	f997 400f 	ldrsb.w	r4, [r7, #15]
 80182d6:	9201      	str	r2, [sp, #4]
 80182d8:	9300      	str	r3, [sp, #0]
 80182da:	462b      	mov	r3, r5
 80182dc:	4622      	mov	r2, r4
 80182de:	f7ff faa2 	bl	8017826 <RegionCommonChanVerifyDr>
 80182e2:	4603      	mov	r3, r0
 80182e4:	f083 0301 	eor.w	r3, r3, #1
 80182e8:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d1da      	bne.n	80182a4 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 80182ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 80182f2:	4618      	mov	r0, r3
 80182f4:	3710      	adds	r7, #16
 80182f6:	46bd      	mov	sp, r7
 80182f8:	bdb0      	pop	{r4, r5, r7, pc}

080182fa <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 80182fa:	b480      	push	{r7}
 80182fc:	b083      	sub	sp, #12
 80182fe:	af00      	add	r7, sp, #0
 8018300:	4603      	mov	r3, r0
 8018302:	460a      	mov	r2, r1
 8018304:	71fb      	strb	r3, [r7, #7]
 8018306:	4613      	mov	r3, r2
 8018308:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 801830a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801830e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018312:	4293      	cmp	r3, r2
 8018314:	bfb8      	it	lt
 8018316:	4613      	movlt	r3, r2
 8018318:	b25b      	sxtb	r3, r3
}
 801831a:	4618      	mov	r0, r3
 801831c:	370c      	adds	r7, #12
 801831e:	46bd      	mov	sp, r7
 8018320:	bc80      	pop	{r7}
 8018322:	4770      	bx	lr

08018324 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8018324:	b480      	push	{r7}
 8018326:	b083      	sub	sp, #12
 8018328:	af00      	add	r7, sp, #0
 801832a:	6078      	str	r0, [r7, #4]
 801832c:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	009b      	lsls	r3, r3, #2
 8018332:	683a      	ldr	r2, [r7, #0]
 8018334:	4413      	add	r3, r2
 8018336:	681b      	ldr	r3, [r3, #0]
 8018338:	4a07      	ldr	r2, [pc, #28]	; (8018358 <RegionCommonGetBandwidth+0x34>)
 801833a:	4293      	cmp	r3, r2
 801833c:	d004      	beq.n	8018348 <RegionCommonGetBandwidth+0x24>
 801833e:	4a07      	ldr	r2, [pc, #28]	; (801835c <RegionCommonGetBandwidth+0x38>)
 8018340:	4293      	cmp	r3, r2
 8018342:	d003      	beq.n	801834c <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8018344:	2300      	movs	r3, #0
 8018346:	e002      	b.n	801834e <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8018348:	2301      	movs	r3, #1
 801834a:	e000      	b.n	801834e <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 801834c:	2302      	movs	r3, #2
    }
}
 801834e:	4618      	mov	r0, r3
 8018350:	370c      	adds	r7, #12
 8018352:	46bd      	mov	sp, r7
 8018354:	bc80      	pop	{r7}
 8018356:	4770      	bx	lr
 8018358:	0003d090 	.word	0x0003d090
 801835c:	0007a120 	.word	0x0007a120

08018360 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8018360:	b580      	push	{r7, lr}
 8018362:	b086      	sub	sp, #24
 8018364:	af04      	add	r7, sp, #16
 8018366:	4603      	mov	r3, r0
 8018368:	6039      	str	r1, [r7, #0]
 801836a:	71fb      	strb	r3, [r7, #7]
 801836c:	4613      	mov	r3, r2
 801836e:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8018370:	79fb      	ldrb	r3, [r7, #7]
 8018372:	2b05      	cmp	r3, #5
 8018374:	d810      	bhi.n	8018398 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8018376:	79fb      	ldrb	r3, [r7, #7]
 8018378:	4a0f      	ldr	r2, [pc, #60]	; (80183b8 <RegionCommonRxConfigPrint+0x58>)
 801837a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801837e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018382:	9202      	str	r2, [sp, #8]
 8018384:	683a      	ldr	r2, [r7, #0]
 8018386:	9201      	str	r2, [sp, #4]
 8018388:	9300      	str	r3, [sp, #0]
 801838a:	4b0c      	ldr	r3, [pc, #48]	; (80183bc <RegionCommonRxConfigPrint+0x5c>)
 801838c:	2201      	movs	r2, #1
 801838e:	2100      	movs	r1, #0
 8018390:	2002      	movs	r0, #2
 8018392:	f005 fe17 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8018396:	e00a      	b.n	80183ae <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8018398:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801839c:	9301      	str	r3, [sp, #4]
 801839e:	683b      	ldr	r3, [r7, #0]
 80183a0:	9300      	str	r3, [sp, #0]
 80183a2:	4b07      	ldr	r3, [pc, #28]	; (80183c0 <RegionCommonRxConfigPrint+0x60>)
 80183a4:	2201      	movs	r2, #1
 80183a6:	2100      	movs	r1, #0
 80183a8:	2002      	movs	r0, #2
 80183aa:	f005 fe0b 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
}
 80183ae:	bf00      	nop
 80183b0:	3708      	adds	r7, #8
 80183b2:	46bd      	mov	sp, r7
 80183b4:	bd80      	pop	{r7, pc}
 80183b6:	bf00      	nop
 80183b8:	20000118 	.word	0x20000118
 80183bc:	0801ee6c 	.word	0x0801ee6c
 80183c0:	0801ee8c 	.word	0x0801ee8c

080183c4 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 80183c4:	b580      	push	{r7, lr}
 80183c6:	b084      	sub	sp, #16
 80183c8:	af02      	add	r7, sp, #8
 80183ca:	6078      	str	r0, [r7, #4]
 80183cc:	460b      	mov	r3, r1
 80183ce:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 80183d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80183d4:	9301      	str	r3, [sp, #4]
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	9300      	str	r3, [sp, #0]
 80183da:	4b05      	ldr	r3, [pc, #20]	; (80183f0 <RegionCommonTxConfigPrint+0x2c>)
 80183dc:	2201      	movs	r2, #1
 80183de:	2100      	movs	r1, #0
 80183e0:	2002      	movs	r0, #2
 80183e2:	f005 fdef 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
}
 80183e6:	bf00      	nop
 80183e8:	3708      	adds	r7, #8
 80183ea:	46bd      	mov	sp, r7
 80183ec:	bd80      	pop	{r7, pc}
 80183ee:	bf00      	nop
 80183f0:	0801eea8 	.word	0x0801eea8

080183f4 <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 80183f4:	b580      	push	{r7, lr}
 80183f6:	b084      	sub	sp, #16
 80183f8:	af00      	add	r7, sp, #0
 80183fa:	603b      	str	r3, [r7, #0]
 80183fc:	4603      	mov	r3, r0
 80183fe:	71fb      	strb	r3, [r7, #7]
 8018400:	460b      	mov	r3, r1
 8018402:	71bb      	strb	r3, [r7, #6]
 8018404:	4613      	mov	r3, r2
 8018406:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 8018408:	79fb      	ldrb	r3, [r7, #7]
 801840a:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 801840c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018414:	4611      	mov	r1, r2
 8018416:	4618      	mov	r0, r3
 8018418:	f7ff ff6f 	bl	80182fa <RegionCommonLimitTxPower>
 801841c:	4603      	mov	r3, r0
 801841e:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 8018420:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8018424:	2b04      	cmp	r3, #4
 8018426:	d106      	bne.n	8018436 <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8018428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801842c:	2b02      	cmp	r3, #2
 801842e:	bfb8      	it	lt
 8018430:	2302      	movlt	r3, #2
 8018432:	73fb      	strb	r3, [r7, #15]
 8018434:	e00d      	b.n	8018452 <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8018436:	2204      	movs	r2, #4
 8018438:	2100      	movs	r1, #0
 801843a:	6838      	ldr	r0, [r7, #0]
 801843c:	f7ff fab6 	bl	80179ac <RegionCommonCountChannels>
 8018440:	4603      	mov	r3, r0
 8018442:	2b31      	cmp	r3, #49	; 0x31
 8018444:	d805      	bhi.n	8018452 <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8018446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801844a:	2b05      	cmp	r3, #5
 801844c:	bfb8      	it	lt
 801844e:	2305      	movlt	r3, #5
 8018450:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 8018452:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018456:	4618      	mov	r0, r3
 8018458:	3710      	adds	r7, #16
 801845a:	46bd      	mov	sp, r7
 801845c:	bd80      	pop	{r7, pc}
	...

08018460 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8018460:	b580      	push	{r7, lr}
 8018462:	b082      	sub	sp, #8
 8018464:	af00      	add	r7, sp, #0
 8018466:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8018468:	4b18      	ldr	r3, [pc, #96]	; (80184cc <VerifyRfFreq+0x6c>)
 801846a:	6a1b      	ldr	r3, [r3, #32]
 801846c:	6878      	ldr	r0, [r7, #4]
 801846e:	4798      	blx	r3
 8018470:	4603      	mov	r3, r0
 8018472:	f083 0301 	eor.w	r3, r3, #1
 8018476:	b2db      	uxtb	r3, r3
 8018478:	2b00      	cmp	r3, #0
 801847a:	d001      	beq.n	8018480 <VerifyRfFreq+0x20>
    {
        return false;
 801847c:	2300      	movs	r3, #0
 801847e:	e021      	b.n	80184c4 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	4a13      	ldr	r2, [pc, #76]	; (80184d0 <VerifyRfFreq+0x70>)
 8018484:	4293      	cmp	r3, r2
 8018486:	d910      	bls.n	80184aa <VerifyRfFreq+0x4a>
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	4a12      	ldr	r2, [pc, #72]	; (80184d4 <VerifyRfFreq+0x74>)
 801848c:	4293      	cmp	r3, r2
 801848e:	d80c      	bhi.n	80184aa <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8018490:	687a      	ldr	r2, [r7, #4]
 8018492:	4b11      	ldr	r3, [pc, #68]	; (80184d8 <VerifyRfFreq+0x78>)
 8018494:	4413      	add	r3, r2
 8018496:	4a11      	ldr	r2, [pc, #68]	; (80184dc <VerifyRfFreq+0x7c>)
 8018498:	fba2 1203 	umull	r1, r2, r2, r3
 801849c:	0c92      	lsrs	r2, r2, #18
 801849e:	4910      	ldr	r1, [pc, #64]	; (80184e0 <VerifyRfFreq+0x80>)
 80184a0:	fb01 f202 	mul.w	r2, r1, r2
 80184a4:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 80184a6:	2a00      	cmp	r2, #0
 80184a8:	d001      	beq.n	80184ae <VerifyRfFreq+0x4e>
    {
        return false;
 80184aa:	2300      	movs	r3, #0
 80184ac:	e00a      	b.n	80184c4 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	4a0c      	ldr	r2, [pc, #48]	; (80184e4 <VerifyRfFreq+0x84>)
 80184b2:	4293      	cmp	r3, r2
 80184b4:	d903      	bls.n	80184be <VerifyRfFreq+0x5e>
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	4a06      	ldr	r2, [pc, #24]	; (80184d4 <VerifyRfFreq+0x74>)
 80184ba:	4293      	cmp	r3, r2
 80184bc:	d901      	bls.n	80184c2 <VerifyRfFreq+0x62>
    {
        return false;
 80184be:	2300      	movs	r3, #0
 80184c0:	e000      	b.n	80184c4 <VerifyRfFreq+0x64>
    }
    return true;
 80184c2:	2301      	movs	r3, #1
}
 80184c4:	4618      	mov	r0, r3
 80184c6:	3708      	adds	r7, #8
 80184c8:	46bd      	mov	sp, r7
 80184ca:	bd80      	pop	{r7, pc}
 80184cc:	0801f4f4 	.word	0x0801f4f4
 80184d0:	3708709f 	.word	0x3708709f
 80184d4:	374886e0 	.word	0x374886e0
 80184d8:	c8f78f60 	.word	0xc8f78f60
 80184dc:	6fd91d85 	.word	0x6fd91d85
 80184e0:	000927c0 	.word	0x000927c0
 80184e4:	35c8015f 	.word	0x35c8015f

080184e8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80184e8:	b590      	push	{r4, r7, lr}
 80184ea:	b089      	sub	sp, #36	; 0x24
 80184ec:	af04      	add	r7, sp, #16
 80184ee:	4603      	mov	r3, r0
 80184f0:	460a      	mov	r2, r1
 80184f2:	71fb      	strb	r3, [r7, #7]
 80184f4:	4613      	mov	r3, r2
 80184f6:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 80184f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80184fc:	4a0f      	ldr	r2, [pc, #60]	; (801853c <GetTimeOnAir+0x54>)
 80184fe:	5cd3      	ldrb	r3, [r2, r3]
 8018500:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8018502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018506:	490e      	ldr	r1, [pc, #56]	; (8018540 <GetTimeOnAir+0x58>)
 8018508:	4618      	mov	r0, r3
 801850a:	f7ff ff0b 	bl	8018324 <RegionCommonGetBandwidth>
 801850e:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8018510:	4b0c      	ldr	r3, [pc, #48]	; (8018544 <GetTimeOnAir+0x5c>)
 8018512:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018514:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8018518:	88bb      	ldrh	r3, [r7, #4]
 801851a:	b2db      	uxtb	r3, r3
 801851c:	2101      	movs	r1, #1
 801851e:	9103      	str	r1, [sp, #12]
 8018520:	9302      	str	r3, [sp, #8]
 8018522:	2300      	movs	r3, #0
 8018524:	9301      	str	r3, [sp, #4]
 8018526:	2308      	movs	r3, #8
 8018528:	9300      	str	r3, [sp, #0]
 801852a:	2301      	movs	r3, #1
 801852c:	68b9      	ldr	r1, [r7, #8]
 801852e:	2001      	movs	r0, #1
 8018530:	47a0      	blx	r4
 8018532:	4603      	mov	r3, r0
}
 8018534:	4618      	mov	r0, r3
 8018536:	3714      	adds	r7, #20
 8018538:	46bd      	mov	sp, r7
 801853a:	bd90      	pop	{r4, r7, pc}
 801853c:	0801f470 	.word	0x0801f470
 8018540:	0801f480 	.word	0x0801f480
 8018544:	0801f4f4 	.word	0x0801f4f4

08018548 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8018548:	b580      	push	{r7, lr}
 801854a:	b088      	sub	sp, #32
 801854c:	af00      	add	r7, sp, #0
 801854e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8018550:	2300      	movs	r3, #0
 8018552:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	781b      	ldrb	r3, [r3, #0]
 8018558:	3b01      	subs	r3, #1
 801855a:	2b37      	cmp	r3, #55	; 0x37
 801855c:	f200 8136 	bhi.w	80187cc <RegionUS915GetPhyParam+0x284>
 8018560:	a201      	add	r2, pc, #4	; (adr r2, 8018568 <RegionUS915GetPhyParam+0x20>)
 8018562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018566:	bf00      	nop
 8018568:	08018649 	.word	0x08018649
 801856c:	0801864f 	.word	0x0801864f
 8018570:	080187cd 	.word	0x080187cd
 8018574:	080187cd 	.word	0x080187cd
 8018578:	080187cd 	.word	0x080187cd
 801857c:	08018655 	.word	0x08018655
 8018580:	080187cd 	.word	0x080187cd
 8018584:	0801868f 	.word	0x0801868f
 8018588:	080187cd 	.word	0x080187cd
 801858c:	08018695 	.word	0x08018695
 8018590:	0801869b 	.word	0x0801869b
 8018594:	080186a1 	.word	0x080186a1
 8018598:	080186a7 	.word	0x080186a7
 801859c:	080186b7 	.word	0x080186b7
 80185a0:	080186c7 	.word	0x080186c7
 80185a4:	080186cd 	.word	0x080186cd
 80185a8:	080186d5 	.word	0x080186d5
 80185ac:	080186dd 	.word	0x080186dd
 80185b0:	080186e5 	.word	0x080186e5
 80185b4:	080186ed 	.word	0x080186ed
 80185b8:	080186f5 	.word	0x080186f5
 80185bc:	08018709 	.word	0x08018709
 80185c0:	0801870f 	.word	0x0801870f
 80185c4:	08018715 	.word	0x08018715
 80185c8:	0801871b 	.word	0x0801871b
 80185cc:	08018727 	.word	0x08018727
 80185d0:	08018733 	.word	0x08018733
 80185d4:	08018739 	.word	0x08018739
 80185d8:	08018741 	.word	0x08018741
 80185dc:	08018747 	.word	0x08018747
 80185e0:	0801874d 	.word	0x0801874d
 80185e4:	08018753 	.word	0x08018753
 80185e8:	0801865b 	.word	0x0801865b
 80185ec:	080187cd 	.word	0x080187cd
 80185f0:	080187cd 	.word	0x080187cd
 80185f4:	080187cd 	.word	0x080187cd
 80185f8:	080187cd 	.word	0x080187cd
 80185fc:	080187cd 	.word	0x080187cd
 8018600:	080187cd 	.word	0x080187cd
 8018604:	080187cd 	.word	0x080187cd
 8018608:	080187cd 	.word	0x080187cd
 801860c:	080187cd 	.word	0x080187cd
 8018610:	080187cd 	.word	0x080187cd
 8018614:	080187cd 	.word	0x080187cd
 8018618:	080187cd 	.word	0x080187cd
 801861c:	080187cd 	.word	0x080187cd
 8018620:	0801875b 	.word	0x0801875b
 8018624:	0801876f 	.word	0x0801876f
 8018628:	0801877d 	.word	0x0801877d
 801862c:	08018783 	.word	0x08018783
 8018630:	080187cd 	.word	0x080187cd
 8018634:	08018789 	.word	0x08018789
 8018638:	0801879d 	.word	0x0801879d
 801863c:	080187a3 	.word	0x080187a3
 8018640:	080187a9 	.word	0x080187a9
 8018644:	080187b9 	.word	0x080187b9
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8018648:	2308      	movs	r3, #8
 801864a:	61bb      	str	r3, [r7, #24]
            break;
 801864c:	e0bf      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 801864e:	2300      	movs	r3, #0
 8018650:	61bb      	str	r3, [r7, #24]
            break;
 8018652:	e0bc      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 8018654:	2300      	movs	r3, #0
 8018656:	61bb      	str	r3, [r7, #24]
            break;
 8018658:	e0b9      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018660:	733b      	strb	r3, [r7, #12]
 8018662:	2304      	movs	r3, #4
 8018664:	737b      	strb	r3, [r7, #13]
 8018666:	2300      	movs	r3, #0
 8018668:	73bb      	strb	r3, [r7, #14]
 801866a:	2348      	movs	r3, #72	; 0x48
 801866c:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801866e:	4b5b      	ldr	r3, [pc, #364]	; (80187dc <RegionUS915GetPhyParam+0x294>)
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018676:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8018678:	4b58      	ldr	r3, [pc, #352]	; (80187dc <RegionUS915GetPhyParam+0x294>)
 801867a:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801867c:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801867e:	f107 030c 	add.w	r3, r7, #12
 8018682:	4618      	mov	r0, r3
 8018684:	f7ff fdfb 	bl	801827e <RegionCommonGetNextLowerTxDr>
 8018688:	4603      	mov	r3, r0
 801868a:	61bb      	str	r3, [r7, #24]
            break;
 801868c:	e09f      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 801868e:	2300      	movs	r3, #0
 8018690:	61bb      	str	r3, [r7, #24]
            break;
 8018692:	e09c      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 8018694:	2300      	movs	r3, #0
 8018696:	61bb      	str	r3, [r7, #24]
            break;
 8018698:	e099      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801869a:	2340      	movs	r3, #64	; 0x40
 801869c:	61bb      	str	r3, [r7, #24]
            break;
 801869e:	e096      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80186a0:	2320      	movs	r3, #32
 80186a2:	61bb      	str	r3, [r7, #24]
            break;
 80186a4:	e093      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80186ac:	461a      	mov	r2, r3
 80186ae:	4b4c      	ldr	r3, [pc, #304]	; (80187e0 <RegionUS915GetPhyParam+0x298>)
 80186b0:	5c9b      	ldrb	r3, [r3, r2]
 80186b2:	61bb      	str	r3, [r7, #24]
            break;
 80186b4:	e08b      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80186bc:	461a      	mov	r2, r3
 80186be:	4b49      	ldr	r3, [pc, #292]	; (80187e4 <RegionUS915GetPhyParam+0x29c>)
 80186c0:	5c9b      	ldrb	r3, [r3, r2]
 80186c2:	61bb      	str	r3, [r7, #24]
            break;
 80186c4:	e083      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 80186c6:	2300      	movs	r3, #0
 80186c8:	61bb      	str	r3, [r7, #24]
            break;
 80186ca:	e080      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 80186cc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80186d0:	61bb      	str	r3, [r7, #24]
            break;
 80186d2:	e07c      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80186d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80186d8:	61bb      	str	r3, [r7, #24]
            break;
 80186da:	e078      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80186dc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80186e0:	61bb      	str	r3, [r7, #24]
            break;
 80186e2:	e074      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80186e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80186e8:	61bb      	str	r3, [r7, #24]
            break;
 80186ea:	e070      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80186ec:	f241 7370 	movw	r3, #6000	; 0x1770
 80186f0:	61bb      	str	r3, [r7, #24]
            break;
 80186f2:	e06c      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 80186f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80186f8:	483b      	ldr	r0, [pc, #236]	; (80187e8 <RegionUS915GetPhyParam+0x2a0>)
 80186fa:	f001 f8a7 	bl	801984c <randr>
 80186fe:	4603      	mov	r3, r0
 8018700:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8018704:	61bb      	str	r3, [r7, #24]
            break;
 8018706:	e062      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8018708:	2300      	movs	r3, #0
 801870a:	61bb      	str	r3, [r7, #24]
            break;
 801870c:	e05f      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 801870e:	4b37      	ldr	r3, [pc, #220]	; (80187ec <RegionUS915GetPhyParam+0x2a4>)
 8018710:	61bb      	str	r3, [r7, #24]
            break;
 8018712:	e05c      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 8018714:	2308      	movs	r3, #8
 8018716:	61bb      	str	r3, [r7, #24]
            break;
 8018718:	e059      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801871a:	4b30      	ldr	r3, [pc, #192]	; (80187dc <RegionUS915GetPhyParam+0x294>)
 801871c:	681b      	ldr	r3, [r3, #0]
 801871e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018722:	61bb      	str	r3, [r7, #24]
            break;
 8018724:	e053      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8018726:	4b2d      	ldr	r3, [pc, #180]	; (80187dc <RegionUS915GetPhyParam+0x294>)
 8018728:	681b      	ldr	r3, [r3, #0]
 801872a:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801872e:	61bb      	str	r3, [r7, #24]
            break;
 8018730:	e04d      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8018732:	2348      	movs	r3, #72	; 0x48
 8018734:	61bb      	str	r3, [r7, #24]
            break;
 8018736:	e04a      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8018738:	4b28      	ldr	r3, [pc, #160]	; (80187dc <RegionUS915GetPhyParam+0x294>)
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	61bb      	str	r3, [r7, #24]
            break;
 801873e:	e046      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 8018740:	2300      	movs	r3, #0
 8018742:	61bb      	str	r3, [r7, #24]
            break;
 8018744:	e043      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8018746:	2300      	movs	r3, #0
 8018748:	61bb      	str	r3, [r7, #24]
            break;
 801874a:	e040      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 801874c:	4b28      	ldr	r3, [pc, #160]	; (80187f0 <RegionUS915GetPhyParam+0x2a8>)
 801874e:	61bb      	str	r3, [r7, #24]
            break;
 8018750:	e03d      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 8018752:	f04f 0300 	mov.w	r3, #0
 8018756:	61bb      	str	r3, [r7, #24]
            break;
 8018758:	e039      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	791b      	ldrb	r3, [r3, #4]
 801875e:	4a25      	ldr	r2, [pc, #148]	; (80187f4 <RegionUS915GetPhyParam+0x2ac>)
 8018760:	4922      	ldr	r1, [pc, #136]	; (80187ec <RegionUS915GetPhyParam+0x2a4>)
 8018762:	4618      	mov	r0, r3
 8018764:	f7fe fefd 	bl	8017562 <RegionBaseUSCalcDownlinkFrequency>
 8018768:	4603      	mov	r3, r0
 801876a:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801876c:	e02f      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 801876e:	2317      	movs	r3, #23
 8018770:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8018772:	2304      	movs	r3, #4
 8018774:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8018776:	2303      	movs	r3, #3
 8018778:	76bb      	strb	r3, [r7, #26]
            break;
 801877a:	e028      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 801877c:	2308      	movs	r3, #8
 801877e:	61bb      	str	r3, [r7, #24]
            break;
 8018780:	e025      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8018782:	2308      	movs	r3, #8
 8018784:	61bb      	str	r3, [r7, #24]
            break;
 8018786:	e022      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	791b      	ldrb	r3, [r3, #4]
 801878c:	4a19      	ldr	r2, [pc, #100]	; (80187f4 <RegionUS915GetPhyParam+0x2ac>)
 801878e:	4917      	ldr	r1, [pc, #92]	; (80187ec <RegionUS915GetPhyParam+0x2a4>)
 8018790:	4618      	mov	r0, r3
 8018792:	f7fe fee6 	bl	8017562 <RegionBaseUSCalcDownlinkFrequency>
 8018796:	4603      	mov	r3, r0
 8018798:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801879a:	e018      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 801879c:	2308      	movs	r3, #8
 801879e:	61bb      	str	r3, [r7, #24]
            break;
 80187a0:	e015      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 80187a2:	2308      	movs	r3, #8
 80187a4:	61bb      	str	r3, [r7, #24]
            break;
 80187a6:	e012      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80187ae:	461a      	mov	r2, r3
 80187b0:	4b11      	ldr	r3, [pc, #68]	; (80187f8 <RegionUS915GetPhyParam+0x2b0>)
 80187b2:	5c9b      	ldrb	r3, [r3, r2]
 80187b4:	61bb      	str	r3, [r7, #24]
            break;
 80187b6:	e00a      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80187be:	490f      	ldr	r1, [pc, #60]	; (80187fc <RegionUS915GetPhyParam+0x2b4>)
 80187c0:	4618      	mov	r0, r3
 80187c2:	f7ff fdaf 	bl	8018324 <RegionCommonGetBandwidth>
 80187c6:	4603      	mov	r3, r0
 80187c8:	61bb      	str	r3, [r7, #24]
            break;
 80187ca:	e000      	b.n	80187ce <RegionUS915GetPhyParam+0x286>
        }
        default:
        {
            break;
 80187cc:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 80187ce:	69bb      	ldr	r3, [r7, #24]
 80187d0:	61fb      	str	r3, [r7, #28]
 80187d2:	69fb      	ldr	r3, [r7, #28]
}
 80187d4:	4618      	mov	r0, r3
 80187d6:	3720      	adds	r7, #32
 80187d8:	46bd      	mov	sp, r7
 80187da:	bd80      	pop	{r7, pc}
 80187dc:	20001be4 	.word	0x20001be4
 80187e0:	0801f4d4 	.word	0x0801f4d4
 80187e4:	0801f4e4 	.word	0x0801f4e4
 80187e8:	fffffc18 	.word	0xfffffc18
 80187ec:	370870a0 	.word	0x370870a0
 80187f0:	4200999a 	.word	0x4200999a
 80187f4:	000927c0 	.word	0x000927c0
 80187f8:	0801f470 	.word	0x0801f470
 80187fc:	0801f480 	.word	0x0801f480

08018800 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8018800:	b590      	push	{r4, r7, lr}
 8018802:	b085      	sub	sp, #20
 8018804:	af02      	add	r7, sp, #8
 8018806:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8018808:	4b11      	ldr	r3, [pc, #68]	; (8018850 <RegionUS915SetBandTxDone+0x50>)
 801880a:	681a      	ldr	r2, [r3, #0]
 801880c:	4b11      	ldr	r3, [pc, #68]	; (8018854 <RegionUS915SetBandTxDone+0x54>)
 801880e:	6819      	ldr	r1, [r3, #0]
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	781b      	ldrb	r3, [r3, #0]
 8018814:	4618      	mov	r0, r3
 8018816:	4603      	mov	r3, r0
 8018818:	005b      	lsls	r3, r3, #1
 801881a:	4403      	add	r3, r0
 801881c:	009b      	lsls	r3, r3, #2
 801881e:	440b      	add	r3, r1
 8018820:	3309      	adds	r3, #9
 8018822:	781b      	ldrb	r3, [r3, #0]
 8018824:	4619      	mov	r1, r3
 8018826:	460b      	mov	r3, r1
 8018828:	005b      	lsls	r3, r3, #1
 801882a:	440b      	add	r3, r1
 801882c:	00db      	lsls	r3, r3, #3
 801882e:	18d0      	adds	r0, r2, r3
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	6899      	ldr	r1, [r3, #8]
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	785c      	ldrb	r4, [r3, #1]
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	691a      	ldr	r2, [r3, #16]
 801883c:	9200      	str	r2, [sp, #0]
 801883e:	68db      	ldr	r3, [r3, #12]
 8018840:	4622      	mov	r2, r4
 8018842:	f7ff f905 	bl	8017a50 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 8018846:	bf00      	nop
 8018848:	370c      	adds	r7, #12
 801884a:	46bd      	mov	sp, r7
 801884c:	bd90      	pop	{r4, r7, pc}
 801884e:	bf00      	nop
 8018850:	20001be8 	.word	0x20001be8
 8018854:	20001be4 	.word	0x20001be4

08018858 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8018858:	b580      	push	{r7, lr}
 801885a:	b08a      	sub	sp, #40	; 0x28
 801885c:	af00      	add	r7, sp, #0
 801885e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8018860:	2301      	movs	r3, #1
 8018862:	81bb      	strh	r3, [r7, #12]
 8018864:	2300      	movs	r3, #0
 8018866:	73bb      	strb	r3, [r7, #14]
 8018868:	2300      	movs	r3, #0
 801886a:	613b      	str	r3, [r7, #16]
 801886c:	2300      	movs	r3, #0
 801886e:	617b      	str	r3, [r7, #20]
 8018870:	2300      	movs	r3, #0
 8018872:	61bb      	str	r3, [r7, #24]
 8018874:	2300      	movs	r3, #0
 8018876:	61fb      	str	r3, [r7, #28]
 8018878:	2300      	movs	r3, #0
 801887a:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	7b1b      	ldrb	r3, [r3, #12]
 8018882:	2b00      	cmp	r3, #0
 8018884:	d007      	beq.n	8018896 <RegionUS915InitDefaults+0x3e>
 8018886:	2b00      	cmp	r3, #0
 8018888:	f2c0 8104 	blt.w	8018a94 <RegionUS915InitDefaults+0x23c>
 801888c:	3b01      	subs	r3, #1
 801888e:	2b01      	cmp	r3, #1
 8018890:	f200 8100 	bhi.w	8018a94 <RegionUS915InitDefaults+0x23c>
 8018894:	e0ce      	b.n	8018a34 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	2b00      	cmp	r3, #0
 801889c:	f000 80fc 	beq.w	8018a98 <RegionUS915InitDefaults+0x240>
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	685b      	ldr	r3, [r3, #4]
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	f000 80f7 	beq.w	8018a98 <RegionUS915InitDefaults+0x240>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	4a7c      	ldr	r2, [pc, #496]	; (8018aa0 <RegionUS915InitDefaults+0x248>)
 80188b0:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	685b      	ldr	r3, [r3, #4]
 80188b6:	4a7b      	ldr	r2, [pc, #492]	; (8018aa4 <RegionUS915InitDefaults+0x24c>)
 80188b8:	6013      	str	r3, [r2, #0]
            RegionNvmGroup1->JoinTrialsCounter = 0;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	689b      	ldr	r3, [r3, #8]
 80188be:	4a7a      	ldr	r2, [pc, #488]	; (8018aa8 <RegionUS915InitDefaults+0x250>)
 80188c0:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 80188c2:	4b77      	ldr	r3, [pc, #476]	; (8018aa0 <RegionUS915InitDefaults+0x248>)
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	2200      	movs	r2, #0
 80188c8:	731a      	strb	r2, [r3, #12]

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 80188ca:	4b75      	ldr	r3, [pc, #468]	; (8018aa0 <RegionUS915InitDefaults+0x248>)
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	2200      	movs	r2, #0
 80188d0:	735a      	strb	r2, [r3, #13]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 80188d2:	4b75      	ldr	r3, [pc, #468]	; (8018aa8 <RegionUS915InitDefaults+0x250>)
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	f107 010c 	add.w	r1, r7, #12
 80188da:	2218      	movs	r2, #24
 80188dc:	4618      	mov	r0, r3
 80188de:	f000 ffcc 	bl	801987a <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 80188e2:	2300      	movs	r3, #0
 80188e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80188e8:	e02e      	b.n	8018948 <RegionUS915InitDefaults+0xf0>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 80188ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80188ee:	4a6f      	ldr	r2, [pc, #444]	; (8018aac <RegionUS915InitDefaults+0x254>)
 80188f0:	fb03 f202 	mul.w	r2, r3, r2
 80188f4:	4b6e      	ldr	r3, [pc, #440]	; (8018ab0 <RegionUS915InitDefaults+0x258>)
 80188f6:	4413      	add	r3, r2
 80188f8:	4a6a      	ldr	r2, [pc, #424]	; (8018aa4 <RegionUS915InitDefaults+0x24c>)
 80188fa:	6811      	ldr	r1, [r2, #0]
 80188fc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018900:	4618      	mov	r0, r3
 8018902:	4613      	mov	r3, r2
 8018904:	005b      	lsls	r3, r3, #1
 8018906:	4413      	add	r3, r2
 8018908:	009b      	lsls	r3, r3, #2
 801890a:	440b      	add	r3, r1
 801890c:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 801890e:	4b65      	ldr	r3, [pc, #404]	; (8018aa4 <RegionUS915InitDefaults+0x24c>)
 8018910:	6819      	ldr	r1, [r3, #0]
 8018912:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018916:	4613      	mov	r3, r2
 8018918:	005b      	lsls	r3, r3, #1
 801891a:	4413      	add	r3, r2
 801891c:	009b      	lsls	r3, r3, #2
 801891e:	440b      	add	r3, r1
 8018920:	3308      	adds	r3, #8
 8018922:	2230      	movs	r2, #48	; 0x30
 8018924:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8018926:	4b5f      	ldr	r3, [pc, #380]	; (8018aa4 <RegionUS915InitDefaults+0x24c>)
 8018928:	6819      	ldr	r1, [r3, #0]
 801892a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801892e:	4613      	mov	r3, r2
 8018930:	005b      	lsls	r3, r3, #1
 8018932:	4413      	add	r3, r2
 8018934:	009b      	lsls	r3, r3, #2
 8018936:	440b      	add	r3, r1
 8018938:	3309      	adds	r3, #9
 801893a:	2200      	movs	r2, #0
 801893c:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801893e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018942:	3301      	adds	r3, #1
 8018944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801894c:	2b3f      	cmp	r3, #63	; 0x3f
 801894e:	d9cc      	bls.n	80188ea <RegionUS915InitDefaults+0x92>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8018950:	2340      	movs	r3, #64	; 0x40
 8018952:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018956:	e02f      	b.n	80189b8 <RegionUS915InitDefaults+0x160>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 8018958:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801895c:	3b40      	subs	r3, #64	; 0x40
 801895e:	4a55      	ldr	r2, [pc, #340]	; (8018ab4 <RegionUS915InitDefaults+0x25c>)
 8018960:	fb03 f202 	mul.w	r2, r3, r2
 8018964:	4b54      	ldr	r3, [pc, #336]	; (8018ab8 <RegionUS915InitDefaults+0x260>)
 8018966:	4413      	add	r3, r2
 8018968:	4a4e      	ldr	r2, [pc, #312]	; (8018aa4 <RegionUS915InitDefaults+0x24c>)
 801896a:	6811      	ldr	r1, [r2, #0]
 801896c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8018970:	4618      	mov	r0, r3
 8018972:	4613      	mov	r3, r2
 8018974:	005b      	lsls	r3, r3, #1
 8018976:	4413      	add	r3, r2
 8018978:	009b      	lsls	r3, r3, #2
 801897a:	440b      	add	r3, r1
 801897c:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 801897e:	4b49      	ldr	r3, [pc, #292]	; (8018aa4 <RegionUS915InitDefaults+0x24c>)
 8018980:	6819      	ldr	r1, [r3, #0]
 8018982:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8018986:	4613      	mov	r3, r2
 8018988:	005b      	lsls	r3, r3, #1
 801898a:	4413      	add	r3, r2
 801898c:	009b      	lsls	r3, r3, #2
 801898e:	440b      	add	r3, r1
 8018990:	3308      	adds	r3, #8
 8018992:	2244      	movs	r2, #68	; 0x44
 8018994:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8018996:	4b43      	ldr	r3, [pc, #268]	; (8018aa4 <RegionUS915InitDefaults+0x24c>)
 8018998:	6819      	ldr	r1, [r3, #0]
 801899a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801899e:	4613      	mov	r3, r2
 80189a0:	005b      	lsls	r3, r3, #1
 80189a2:	4413      	add	r3, r2
 80189a4:	009b      	lsls	r3, r3, #2
 80189a6:	440b      	add	r3, r1
 80189a8:	3309      	adds	r3, #9
 80189aa:	2200      	movs	r2, #0
 80189ac:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 80189ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80189b2:	3301      	adds	r3, #1
 80189b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80189b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80189bc:	2b47      	cmp	r3, #71	; 0x47
 80189be:	d9cb      	bls.n	8018958 <RegionUS915InitDefaults+0x100>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 80189c0:	4b38      	ldr	r3, [pc, #224]	; (8018aa4 <RegionUS915InitDefaults+0x24c>)
 80189c2:	681b      	ldr	r3, [r3, #0]
 80189c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80189c8:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 80189cc:	4b35      	ldr	r3, [pc, #212]	; (8018aa4 <RegionUS915InitDefaults+0x24c>)
 80189ce:	681b      	ldr	r3, [r3, #0]
 80189d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80189d4:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 80189d8:	4b32      	ldr	r3, [pc, #200]	; (8018aa4 <RegionUS915InitDefaults+0x24c>)
 80189da:	681b      	ldr	r3, [r3, #0]
 80189dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80189e0:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 80189e4:	4b2f      	ldr	r3, [pc, #188]	; (8018aa4 <RegionUS915InitDefaults+0x24c>)
 80189e6:	681b      	ldr	r3, [r3, #0]
 80189e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80189ec:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 80189f0:	4b2c      	ldr	r3, [pc, #176]	; (8018aa4 <RegionUS915InitDefaults+0x24c>)
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	22ff      	movs	r2, #255	; 0xff
 80189f6:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 80189fa:	4b2a      	ldr	r3, [pc, #168]	; (8018aa4 <RegionUS915InitDefaults+0x24c>)
 80189fc:	681b      	ldr	r3, [r3, #0]
 80189fe:	2200      	movs	r2, #0
 8018a00:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018a04:	4b27      	ldr	r3, [pc, #156]	; (8018aa4 <RegionUS915InitDefaults+0x24c>)
 8018a06:	681b      	ldr	r3, [r3, #0]
 8018a08:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8018a0c:	4b25      	ldr	r3, [pc, #148]	; (8018aa4 <RegionUS915InitDefaults+0x24c>)
 8018a0e:	681b      	ldr	r3, [r3, #0]
 8018a10:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8018a14:	2206      	movs	r2, #6
 8018a16:	4619      	mov	r1, r3
 8018a18:	f7fe fff4 	bl	8017a04 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8018a1c:	4b20      	ldr	r3, [pc, #128]	; (8018aa0 <RegionUS915InitDefaults+0x248>)
 8018a1e:	681b      	ldr	r3, [r3, #0]
 8018a20:	4618      	mov	r0, r3
 8018a22:	4b20      	ldr	r3, [pc, #128]	; (8018aa4 <RegionUS915InitDefaults+0x24c>)
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018a2a:	2206      	movs	r2, #6
 8018a2c:	4619      	mov	r1, r3
 8018a2e:	f7fe ffe9 	bl	8017a04 <RegionCommonChanMaskCopy>
            break;
 8018a32:	e032      	b.n	8018a9a <RegionUS915InitDefaults+0x242>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018a34:	4b1b      	ldr	r3, [pc, #108]	; (8018aa4 <RegionUS915InitDefaults+0x24c>)
 8018a36:	681b      	ldr	r3, [r3, #0]
 8018a38:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8018a3c:	4b19      	ldr	r3, [pc, #100]	; (8018aa4 <RegionUS915InitDefaults+0x24c>)
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8018a44:	2206      	movs	r2, #6
 8018a46:	4619      	mov	r1, r3
 8018a48:	f7fe ffdc 	bl	8017a04 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 8018a4c:	2300      	movs	r3, #0
 8018a4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8018a52:	e01a      	b.n	8018a8a <RegionUS915InitDefaults+0x232>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8018a54:	4b12      	ldr	r3, [pc, #72]	; (8018aa0 <RegionUS915InitDefaults+0x248>)
 8018a56:	681b      	ldr	r3, [r3, #0]
 8018a58:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8018a5c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8018a60:	4b10      	ldr	r3, [pc, #64]	; (8018aa4 <RegionUS915InitDefaults+0x24c>)
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8018a68:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018a6c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8018a70:	4b0b      	ldr	r3, [pc, #44]	; (8018aa0 <RegionUS915InitDefaults+0x248>)
 8018a72:	681b      	ldr	r3, [r3, #0]
 8018a74:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8018a78:	4001      	ands	r1, r0
 8018a7a:	b289      	uxth	r1, r1
 8018a7c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 8018a80:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018a84:	3301      	adds	r3, #1
 8018a86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8018a8a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018a8e:	2b05      	cmp	r3, #5
 8018a90:	d9e0      	bls.n	8018a54 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 8018a92:	e002      	b.n	8018a9a <RegionUS915InitDefaults+0x242>
        }
        default:
        {
            break;
 8018a94:	bf00      	nop
 8018a96:	e000      	b.n	8018a9a <RegionUS915InitDefaults+0x242>
                return;
 8018a98:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 8018a9a:	3728      	adds	r7, #40	; 0x28
 8018a9c:	46bd      	mov	sp, r7
 8018a9e:	bd80      	pop	{r7, pc}
 8018aa0:	20001be0 	.word	0x20001be0
 8018aa4:	20001be4 	.word	0x20001be4
 8018aa8:	20001be8 	.word	0x20001be8
 8018aac:	00030d40 	.word	0x00030d40
 8018ab0:	35c80160 	.word	0x35c80160
 8018ab4:	00186a00 	.word	0x00186a00
 8018ab8:	35d2afc0 	.word	0x35d2afc0

08018abc <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8018abc:	b580      	push	{r7, lr}
 8018abe:	b082      	sub	sp, #8
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	6078      	str	r0, [r7, #4]
 8018ac4:	460b      	mov	r3, r1
 8018ac6:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 8018ac8:	78fb      	ldrb	r3, [r7, #3]
 8018aca:	2b0f      	cmp	r3, #15
 8018acc:	d867      	bhi.n	8018b9e <RegionUS915Verify+0xe2>
 8018ace:	a201      	add	r2, pc, #4	; (adr r2, 8018ad4 <RegionUS915Verify+0x18>)
 8018ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ad4:	08018b15 	.word	0x08018b15
 8018ad8:	08018b9f 	.word	0x08018b9f
 8018adc:	08018b9f 	.word	0x08018b9f
 8018ae0:	08018b9f 	.word	0x08018b9f
 8018ae4:	08018b9f 	.word	0x08018b9f
 8018ae8:	08018b23 	.word	0x08018b23
 8018aec:	08018b41 	.word	0x08018b41
 8018af0:	08018b5f 	.word	0x08018b5f
 8018af4:	08018b9f 	.word	0x08018b9f
 8018af8:	08018b7d 	.word	0x08018b7d
 8018afc:	08018b7d 	.word	0x08018b7d
 8018b00:	08018b9f 	.word	0x08018b9f
 8018b04:	08018b9f 	.word	0x08018b9f
 8018b08:	08018b9f 	.word	0x08018b9f
 8018b0c:	08018b9f 	.word	0x08018b9f
 8018b10:	08018b9b 	.word	0x08018b9b
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	681b      	ldr	r3, [r3, #0]
 8018b18:	4618      	mov	r0, r3
 8018b1a:	f7ff fca1 	bl	8018460 <VerifyRfFreq>
 8018b1e:	4603      	mov	r3, r0
 8018b20:	e03e      	b.n	8018ba0 <RegionUS915Verify+0xe4>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	f993 3000 	ldrsb.w	r3, [r3]
 8018b28:	2204      	movs	r2, #4
 8018b2a:	2100      	movs	r1, #0
 8018b2c:	4618      	mov	r0, r3
 8018b2e:	f7fe feec 	bl	801790a <RegionCommonValueInRange>
 8018b32:	4603      	mov	r3, r0
 8018b34:	2b00      	cmp	r3, #0
 8018b36:	bf14      	ite	ne
 8018b38:	2301      	movne	r3, #1
 8018b3a:	2300      	moveq	r3, #0
 8018b3c:	b2db      	uxtb	r3, r3
 8018b3e:	e02f      	b.n	8018ba0 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	f993 3000 	ldrsb.w	r3, [r3]
 8018b46:	2205      	movs	r2, #5
 8018b48:	2100      	movs	r1, #0
 8018b4a:	4618      	mov	r0, r3
 8018b4c:	f7fe fedd 	bl	801790a <RegionCommonValueInRange>
 8018b50:	4603      	mov	r3, r0
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	bf14      	ite	ne
 8018b56:	2301      	movne	r3, #1
 8018b58:	2300      	moveq	r3, #0
 8018b5a:	b2db      	uxtb	r3, r3
 8018b5c:	e020      	b.n	8018ba0 <RegionUS915Verify+0xe4>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	f993 3000 	ldrsb.w	r3, [r3]
 8018b64:	220d      	movs	r2, #13
 8018b66:	2108      	movs	r1, #8
 8018b68:	4618      	mov	r0, r3
 8018b6a:	f7fe fece 	bl	801790a <RegionCommonValueInRange>
 8018b6e:	4603      	mov	r3, r0
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	bf14      	ite	ne
 8018b74:	2301      	movne	r3, #1
 8018b76:	2300      	moveq	r3, #0
 8018b78:	b2db      	uxtb	r3, r3
 8018b7a:	e011      	b.n	8018ba0 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	f993 3000 	ldrsb.w	r3, [r3]
 8018b82:	220e      	movs	r2, #14
 8018b84:	2100      	movs	r1, #0
 8018b86:	4618      	mov	r0, r3
 8018b88:	f7fe febf 	bl	801790a <RegionCommonValueInRange>
 8018b8c:	4603      	mov	r3, r0
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	bf14      	ite	ne
 8018b92:	2301      	movne	r3, #1
 8018b94:	2300      	moveq	r3, #0
 8018b96:	b2db      	uxtb	r3, r3
 8018b98:	e002      	b.n	8018ba0 <RegionUS915Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 8018b9a:	2300      	movs	r3, #0
 8018b9c:	e000      	b.n	8018ba0 <RegionUS915Verify+0xe4>
        }
        default:
            return false;
 8018b9e:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 8018ba0:	4618      	mov	r0, r3
 8018ba2:	3708      	adds	r7, #8
 8018ba4:	46bd      	mov	sp, r7
 8018ba6:	bd80      	pop	{r7, pc}

08018ba8 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8018ba8:	b480      	push	{r7}
 8018baa:	b085      	sub	sp, #20
 8018bac:	af00      	add	r7, sp, #0
 8018bae:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	7a1b      	ldrb	r3, [r3, #8]
 8018bb4:	2b10      	cmp	r3, #16
 8018bb6:	d160      	bne.n	8018c7a <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	685b      	ldr	r3, [r3, #4]
 8018bbc:	330f      	adds	r3, #15
 8018bbe:	781b      	ldrb	r3, [r3, #0]
 8018bc0:	2b01      	cmp	r3, #1
 8018bc2:	d15c      	bne.n	8018c7e <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8018bc4:	2300      	movs	r3, #0
 8018bc6:	73fb      	strb	r3, [r7, #15]
 8018bc8:	2300      	movs	r3, #0
 8018bca:	73bb      	strb	r3, [r7, #14]
 8018bcc:	e051      	b.n	8018c72 <RegionUS915ApplyCFList+0xca>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	685a      	ldr	r2, [r3, #4]
 8018bd2:	7bbb      	ldrb	r3, [r7, #14]
 8018bd4:	4413      	add	r3, r2
 8018bd6:	7819      	ldrb	r1, [r3, #0]
 8018bd8:	4b2b      	ldr	r3, [pc, #172]	; (8018c88 <RegionUS915ApplyCFList+0xe0>)
 8018bda:	681b      	ldr	r3, [r3, #0]
 8018bdc:	7bfa      	ldrb	r2, [r7, #15]
 8018bde:	b289      	uxth	r1, r1
 8018be0:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018be4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8018be8:	4b27      	ldr	r3, [pc, #156]	; (8018c88 <RegionUS915ApplyCFList+0xe0>)
 8018bea:	681b      	ldr	r3, [r3, #0]
 8018bec:	7bfa      	ldrb	r2, [r7, #15]
 8018bee:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018bf2:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	685a      	ldr	r2, [r3, #4]
 8018bfa:	7bbb      	ldrb	r3, [r7, #14]
 8018bfc:	3301      	adds	r3, #1
 8018bfe:	4413      	add	r3, r2
 8018c00:	781b      	ldrb	r3, [r3, #0]
 8018c02:	b29b      	uxth	r3, r3
 8018c04:	021b      	lsls	r3, r3, #8
 8018c06:	b299      	uxth	r1, r3
 8018c08:	4b1f      	ldr	r3, [pc, #124]	; (8018c88 <RegionUS915ApplyCFList+0xe0>)
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	7bfa      	ldrb	r2, [r7, #15]
 8018c0e:	4301      	orrs	r1, r0
 8018c10:	b289      	uxth	r1, r1
 8018c12:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018c16:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 8018c1a:	7bfb      	ldrb	r3, [r7, #15]
 8018c1c:	2b04      	cmp	r3, #4
 8018c1e:	d10f      	bne.n	8018c40 <RegionUS915ApplyCFList+0x98>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8018c20:	4b19      	ldr	r3, [pc, #100]	; (8018c88 <RegionUS915ApplyCFList+0xe0>)
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	7bfa      	ldrb	r2, [r7, #15]
 8018c26:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018c2a:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8018c2e:	4b16      	ldr	r3, [pc, #88]	; (8018c88 <RegionUS915ApplyCFList+0xe0>)
 8018c30:	681b      	ldr	r3, [r3, #0]
 8018c32:	7bfa      	ldrb	r2, [r7, #15]
 8018c34:	b2c9      	uxtb	r1, r1
 8018c36:	b289      	uxth	r1, r1
 8018c38:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018c3c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8018c40:	4b12      	ldr	r3, [pc, #72]	; (8018c8c <RegionUS915ApplyCFList+0xe4>)
 8018c42:	681b      	ldr	r3, [r3, #0]
 8018c44:	7bfa      	ldrb	r2, [r7, #15]
 8018c46:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8018c4a:	4b0f      	ldr	r3, [pc, #60]	; (8018c88 <RegionUS915ApplyCFList+0xe0>)
 8018c4c:	681b      	ldr	r3, [r3, #0]
 8018c4e:	7bfa      	ldrb	r2, [r7, #15]
 8018c50:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018c54:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8018c58:	4b0c      	ldr	r3, [pc, #48]	; (8018c8c <RegionUS915ApplyCFList+0xe4>)
 8018c5a:	681b      	ldr	r3, [r3, #0]
 8018c5c:	7bfa      	ldrb	r2, [r7, #15]
 8018c5e:	4001      	ands	r1, r0
 8018c60:	b289      	uxth	r1, r1
 8018c62:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8018c66:	7bfb      	ldrb	r3, [r7, #15]
 8018c68:	3301      	adds	r3, #1
 8018c6a:	73fb      	strb	r3, [r7, #15]
 8018c6c:	7bbb      	ldrb	r3, [r7, #14]
 8018c6e:	3302      	adds	r3, #2
 8018c70:	73bb      	strb	r3, [r7, #14]
 8018c72:	7bfb      	ldrb	r3, [r7, #15]
 8018c74:	2b04      	cmp	r3, #4
 8018c76:	d9aa      	bls.n	8018bce <RegionUS915ApplyCFList+0x26>
 8018c78:	e002      	b.n	8018c80 <RegionUS915ApplyCFList+0xd8>
        return;
 8018c7a:	bf00      	nop
 8018c7c:	e000      	b.n	8018c80 <RegionUS915ApplyCFList+0xd8>
        return;
 8018c7e:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 8018c80:	3714      	adds	r7, #20
 8018c82:	46bd      	mov	sp, r7
 8018c84:	bc80      	pop	{r7}
 8018c86:	4770      	bx	lr
 8018c88:	20001be4 	.word	0x20001be4
 8018c8c:	20001be0 	.word	0x20001be0

08018c90 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8018c90:	b580      	push	{r7, lr}
 8018c92:	b084      	sub	sp, #16
 8018c94:	af00      	add	r7, sp, #0
 8018c96:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	681b      	ldr	r3, [r3, #0]
 8018c9c:	2204      	movs	r2, #4
 8018c9e:	2100      	movs	r1, #0
 8018ca0:	4618      	mov	r0, r3
 8018ca2:	f7fe fe83 	bl	80179ac <RegionCommonCountChannels>
 8018ca6:	4603      	mov	r3, r0
 8018ca8:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 8018caa:	7bbb      	ldrb	r3, [r7, #14]
 8018cac:	2b01      	cmp	r3, #1
 8018cae:	d804      	bhi.n	8018cba <RegionUS915ChanMaskSet+0x2a>
 8018cb0:	7bbb      	ldrb	r3, [r7, #14]
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d001      	beq.n	8018cba <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 8018cb6:	2300      	movs	r3, #0
 8018cb8:	e04a      	b.n	8018d50 <RegionUS915ChanMaskSet+0xc0>
    }

    switch( chanMaskSet->ChannelsMaskType )
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	791b      	ldrb	r3, [r3, #4]
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d002      	beq.n	8018cc8 <RegionUS915ChanMaskSet+0x38>
 8018cc2:	2b01      	cmp	r3, #1
 8018cc4:	d036      	beq.n	8018d34 <RegionUS915ChanMaskSet+0xa4>
 8018cc6:	e040      	b.n	8018d4a <RegionUS915ChanMaskSet+0xba>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8018cc8:	4b23      	ldr	r3, [pc, #140]	; (8018d58 <RegionUS915ChanMaskSet+0xc8>)
 8018cca:	681b      	ldr	r3, [r3, #0]
 8018ccc:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	2206      	movs	r2, #6
 8018cd6:	4619      	mov	r1, r3
 8018cd8:	f7fe fe94 	bl	8017a04 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 8018cdc:	4b1e      	ldr	r3, [pc, #120]	; (8018d58 <RegionUS915ChanMaskSet+0xc8>)
 8018cde:	681b      	ldr	r3, [r3, #0]
 8018ce0:	f8b3 2374 	ldrh.w	r2, [r3, #884]	; 0x374
 8018ce4:	4b1c      	ldr	r3, [pc, #112]	; (8018d58 <RegionUS915ChanMaskSet+0xc8>)
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	b2d2      	uxtb	r2, r2
 8018cea:	b292      	uxth	r2, r2
 8018cec:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8018cf0:	4b19      	ldr	r3, [pc, #100]	; (8018d58 <RegionUS915ChanMaskSet+0xc8>)
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	2200      	movs	r2, #0
 8018cf6:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8018cfa:	2300      	movs	r3, #0
 8018cfc:	73fb      	strb	r3, [r7, #15]
 8018cfe:	e015      	b.n	8018d2c <RegionUS915ChanMaskSet+0x9c>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8018d00:	4b16      	ldr	r3, [pc, #88]	; (8018d5c <RegionUS915ChanMaskSet+0xcc>)
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	7bfa      	ldrb	r2, [r7, #15]
 8018d06:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8018d0a:	4b13      	ldr	r3, [pc, #76]	; (8018d58 <RegionUS915ChanMaskSet+0xc8>)
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	7bfa      	ldrb	r2, [r7, #15]
 8018d10:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018d14:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8018d18:	4b10      	ldr	r3, [pc, #64]	; (8018d5c <RegionUS915ChanMaskSet+0xcc>)
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	7bfa      	ldrb	r2, [r7, #15]
 8018d1e:	4001      	ands	r1, r0
 8018d20:	b289      	uxth	r1, r1
 8018d22:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8018d26:	7bfb      	ldrb	r3, [r7, #15]
 8018d28:	3301      	adds	r3, #1
 8018d2a:	73fb      	strb	r3, [r7, #15]
 8018d2c:	7bfb      	ldrb	r3, [r7, #15]
 8018d2e:	2b05      	cmp	r3, #5
 8018d30:	d9e6      	bls.n	8018d00 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 8018d32:	e00c      	b.n	8018d4e <RegionUS915ChanMaskSet+0xbe>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8018d34:	4b08      	ldr	r3, [pc, #32]	; (8018d58 <RegionUS915ChanMaskSet+0xc8>)
 8018d36:	681b      	ldr	r3, [r3, #0]
 8018d38:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	2206      	movs	r2, #6
 8018d42:	4619      	mov	r1, r3
 8018d44:	f7fe fe5e 	bl	8017a04 <RegionCommonChanMaskCopy>
            break;
 8018d48:	e001      	b.n	8018d4e <RegionUS915ChanMaskSet+0xbe>
        }
        default:
            return false;
 8018d4a:	2300      	movs	r3, #0
 8018d4c:	e000      	b.n	8018d50 <RegionUS915ChanMaskSet+0xc0>
    }
    return true;
 8018d4e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8018d50:	4618      	mov	r0, r3
 8018d52:	3710      	adds	r7, #16
 8018d54:	46bd      	mov	sp, r7
 8018d56:	bd80      	pop	{r7, pc}
 8018d58:	20001be4 	.word	0x20001be4
 8018d5c:	20001be0 	.word	0x20001be0

08018d60 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8018d60:	b580      	push	{r7, lr}
 8018d62:	b088      	sub	sp, #32
 8018d64:	af02      	add	r7, sp, #8
 8018d66:	60ba      	str	r2, [r7, #8]
 8018d68:	607b      	str	r3, [r7, #4]
 8018d6a:	4603      	mov	r3, r0
 8018d6c:	73fb      	strb	r3, [r7, #15]
 8018d6e:	460b      	mov	r3, r1
 8018d70:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 8018d72:	2300      	movs	r3, #0
 8018d74:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 8018d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018d7a:	2b0d      	cmp	r3, #13
 8018d7c:	bfa8      	it	ge
 8018d7e:	230d      	movge	r3, #13
 8018d80:	b25a      	sxtb	r2, r3
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018d8c:	4916      	ldr	r1, [pc, #88]	; (8018de8 <RegionUS915ComputeRxWindowParameters+0x88>)
 8018d8e:	4618      	mov	r0, r3
 8018d90:	f7ff fac8 	bl	8018324 <RegionCommonGetBandwidth>
 8018d94:	4603      	mov	r3, r0
 8018d96:	b2da      	uxtb	r2, r3
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018da2:	461a      	mov	r2, r3
 8018da4:	4b11      	ldr	r3, [pc, #68]	; (8018dec <RegionUS915ComputeRxWindowParameters+0x8c>)
 8018da6:	5c9a      	ldrb	r2, [r3, r2]
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018dae:	4619      	mov	r1, r3
 8018db0:	4b0d      	ldr	r3, [pc, #52]	; (8018de8 <RegionUS915ComputeRxWindowParameters+0x88>)
 8018db2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018db6:	4619      	mov	r1, r3
 8018db8:	4610      	mov	r0, r2
 8018dba:	f7ff f841 	bl	8017e40 <RegionCommonComputeSymbolTimeLoRa>
 8018dbe:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8018dc0:	4b0b      	ldr	r3, [pc, #44]	; (8018df0 <RegionUS915ComputeRxWindowParameters+0x90>)
 8018dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018dc4:	4798      	blx	r3
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	3308      	adds	r3, #8
 8018dca:	687a      	ldr	r2, [r7, #4]
 8018dcc:	320c      	adds	r2, #12
 8018dce:	7bb9      	ldrb	r1, [r7, #14]
 8018dd0:	9201      	str	r2, [sp, #4]
 8018dd2:	9300      	str	r3, [sp, #0]
 8018dd4:	4603      	mov	r3, r0
 8018dd6:	68ba      	ldr	r2, [r7, #8]
 8018dd8:	6978      	ldr	r0, [r7, #20]
 8018dda:	f7ff f847 	bl	8017e6c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 8018dde:	bf00      	nop
 8018de0:	3718      	adds	r7, #24
 8018de2:	46bd      	mov	sp, r7
 8018de4:	bd80      	pop	{r7, pc}
 8018de6:	bf00      	nop
 8018de8:	0801f480 	.word	0x0801f480
 8018dec:	0801f470 	.word	0x0801f470
 8018df0:	0801f4f4 	.word	0x0801f4f4

08018df4 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8018df4:	b590      	push	{r4, r7, lr}
 8018df6:	b091      	sub	sp, #68	; 0x44
 8018df8:	af0a      	add	r7, sp, #40	; 0x28
 8018dfa:	6078      	str	r0, [r7, #4]
 8018dfc:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	785b      	ldrb	r3, [r3, #1]
 8018e02:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8018e04:	2300      	movs	r3, #0
 8018e06:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 8018e08:	2300      	movs	r3, #0
 8018e0a:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	685b      	ldr	r3, [r3, #4]
 8018e10:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8018e12:	4b34      	ldr	r3, [pc, #208]	; (8018ee4 <RegionUS915RxConfig+0xf0>)
 8018e14:	685b      	ldr	r3, [r3, #4]
 8018e16:	4798      	blx	r3
 8018e18:	4603      	mov	r3, r0
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	d001      	beq.n	8018e22 <RegionUS915RxConfig+0x2e>
    {
        return false;
 8018e1e:	2300      	movs	r3, #0
 8018e20:	e05c      	b.n	8018edc <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	7cdb      	ldrb	r3, [r3, #19]
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d109      	bne.n	8018e3e <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	781b      	ldrb	r3, [r3, #0]
 8018e2e:	f003 0307 	and.w	r3, r3, #7
 8018e32:	4a2d      	ldr	r2, [pc, #180]	; (8018ee8 <RegionUS915RxConfig+0xf4>)
 8018e34:	fb03 f202 	mul.w	r2, r3, r2
 8018e38:	4b2c      	ldr	r3, [pc, #176]	; (8018eec <RegionUS915RxConfig+0xf8>)
 8018e3a:	4413      	add	r3, r2
 8018e3c:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 8018e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018e42:	4a2b      	ldr	r2, [pc, #172]	; (8018ef0 <RegionUS915RxConfig+0xfc>)
 8018e44:	5cd3      	ldrb	r3, [r2, r3]
 8018e46:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8018e48:	4b26      	ldr	r3, [pc, #152]	; (8018ee4 <RegionUS915RxConfig+0xf0>)
 8018e4a:	68db      	ldr	r3, [r3, #12]
 8018e4c:	6938      	ldr	r0, [r7, #16]
 8018e4e:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8018e50:	4b24      	ldr	r3, [pc, #144]	; (8018ee4 <RegionUS915RxConfig+0xf0>)
 8018e52:	699c      	ldr	r4, [r3, #24]
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	789b      	ldrb	r3, [r3, #2]
 8018e58:	4618      	mov	r0, r3
 8018e5a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	689b      	ldr	r3, [r3, #8]
 8018e62:	b29b      	uxth	r3, r3
 8018e64:	687a      	ldr	r2, [r7, #4]
 8018e66:	7c92      	ldrb	r2, [r2, #18]
 8018e68:	9209      	str	r2, [sp, #36]	; 0x24
 8018e6a:	2201      	movs	r2, #1
 8018e6c:	9208      	str	r2, [sp, #32]
 8018e6e:	2200      	movs	r2, #0
 8018e70:	9207      	str	r2, [sp, #28]
 8018e72:	2200      	movs	r2, #0
 8018e74:	9206      	str	r2, [sp, #24]
 8018e76:	2200      	movs	r2, #0
 8018e78:	9205      	str	r2, [sp, #20]
 8018e7a:	2200      	movs	r2, #0
 8018e7c:	9204      	str	r2, [sp, #16]
 8018e7e:	2200      	movs	r2, #0
 8018e80:	9203      	str	r2, [sp, #12]
 8018e82:	9302      	str	r3, [sp, #8]
 8018e84:	2308      	movs	r3, #8
 8018e86:	9301      	str	r3, [sp, #4]
 8018e88:	2300      	movs	r3, #0
 8018e8a:	9300      	str	r3, [sp, #0]
 8018e8c:	2301      	movs	r3, #1
 8018e8e:	460a      	mov	r2, r1
 8018e90:	4601      	mov	r1, r0
 8018e92:	2001      	movs	r0, #1
 8018e94:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	7c5b      	ldrb	r3, [r3, #17]
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d005      	beq.n	8018eaa <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 8018e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018ea2:	4a14      	ldr	r2, [pc, #80]	; (8018ef4 <RegionUS915RxConfig+0x100>)
 8018ea4:	5cd3      	ldrb	r3, [r2, r3]
 8018ea6:	75fb      	strb	r3, [r7, #23]
 8018ea8:	e004      	b.n	8018eb4 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 8018eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018eae:	4a12      	ldr	r2, [pc, #72]	; (8018ef8 <RegionUS915RxConfig+0x104>)
 8018eb0:	5cd3      	ldrb	r3, [r2, r3]
 8018eb2:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8018eb4:	4b0b      	ldr	r3, [pc, #44]	; (8018ee4 <RegionUS915RxConfig+0xf0>)
 8018eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018eb8:	7dfa      	ldrb	r2, [r7, #23]
 8018eba:	320d      	adds	r2, #13
 8018ebc:	b2d2      	uxtb	r2, r2
 8018ebe:	4611      	mov	r1, r2
 8018ec0:	2001      	movs	r0, #1
 8018ec2:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	7cdb      	ldrb	r3, [r3, #19]
 8018ec8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8018ecc:	6939      	ldr	r1, [r7, #16]
 8018ece:	4618      	mov	r0, r3
 8018ed0:	f7ff fa46 	bl	8018360 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8018ed4:	683b      	ldr	r3, [r7, #0]
 8018ed6:	7bfa      	ldrb	r2, [r7, #15]
 8018ed8:	701a      	strb	r2, [r3, #0]
    return true;
 8018eda:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8018edc:	4618      	mov	r0, r3
 8018ede:	371c      	adds	r7, #28
 8018ee0:	46bd      	mov	sp, r7
 8018ee2:	bd90      	pop	{r4, r7, pc}
 8018ee4:	0801f4f4 	.word	0x0801f4f4
 8018ee8:	000927c0 	.word	0x000927c0
 8018eec:	370870a0 	.word	0x370870a0
 8018ef0:	0801f470 	.word	0x0801f470
 8018ef4:	0801f4e4 	.word	0x0801f4e4
 8018ef8:	0801f4d4 	.word	0x0801f4d4

08018efc <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8018efc:	b590      	push	{r4, r7, lr}
 8018efe:	b093      	sub	sp, #76	; 0x4c
 8018f00:	af0a      	add	r7, sp, #40	; 0x28
 8018f02:	60f8      	str	r0, [r7, #12]
 8018f04:	60b9      	str	r1, [r7, #8]
 8018f06:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 8018f08:	68fb      	ldr	r3, [r7, #12]
 8018f0a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018f0e:	461a      	mov	r2, r3
 8018f10:	4b49      	ldr	r3, [pc, #292]	; (8019038 <RegionUS915TxConfig+0x13c>)
 8018f12:	5c9b      	ldrb	r3, [r3, r2]
 8018f14:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 8018f16:	68fb      	ldr	r3, [r7, #12]
 8018f18:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8018f1c:	4b47      	ldr	r3, [pc, #284]	; (801903c <RegionUS915TxConfig+0x140>)
 8018f1e:	681a      	ldr	r2, [r3, #0]
 8018f20:	4b47      	ldr	r3, [pc, #284]	; (8019040 <RegionUS915TxConfig+0x144>)
 8018f22:	6819      	ldr	r1, [r3, #0]
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	781b      	ldrb	r3, [r3, #0]
 8018f28:	461c      	mov	r4, r3
 8018f2a:	4623      	mov	r3, r4
 8018f2c:	005b      	lsls	r3, r3, #1
 8018f2e:	4423      	add	r3, r4
 8018f30:	009b      	lsls	r3, r3, #2
 8018f32:	440b      	add	r3, r1
 8018f34:	3309      	adds	r3, #9
 8018f36:	781b      	ldrb	r3, [r3, #0]
 8018f38:	4619      	mov	r1, r3
 8018f3a:	460b      	mov	r3, r1
 8018f3c:	005b      	lsls	r3, r3, #1
 8018f3e:	440b      	add	r3, r1
 8018f40:	00db      	lsls	r3, r3, #3
 8018f42:	4413      	add	r3, r2
 8018f44:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8018f48:	68fb      	ldr	r3, [r7, #12]
 8018f4a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8018f4e:	4b3c      	ldr	r3, [pc, #240]	; (8019040 <RegionUS915TxConfig+0x144>)
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018f56:	f7ff fa4d 	bl	80183f4 <LimitTxPower>
 8018f5a:	4603      	mov	r3, r0
 8018f5c:	77bb      	strb	r3, [r7, #30]
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8018f5e:	68fb      	ldr	r3, [r7, #12]
 8018f60:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018f64:	4937      	ldr	r1, [pc, #220]	; (8019044 <RegionUS915TxConfig+0x148>)
 8018f66:	4618      	mov	r0, r3
 8018f68:	f7ff f9dc 	bl	8018324 <RegionCommonGetBandwidth>
 8018f6c:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8018f6e:	2300      	movs	r3, #0
 8018f70:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8018f72:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018f76:	f04f 0200 	mov.w	r2, #0
 8018f7a:	4933      	ldr	r1, [pc, #204]	; (8019048 <RegionUS915TxConfig+0x14c>)
 8018f7c:	4618      	mov	r0, r3
 8018f7e:	f7ff f82d 	bl	8017fdc <RegionCommonComputeTxPower>
 8018f82:	4603      	mov	r3, r0
 8018f84:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8018f86:	4b31      	ldr	r3, [pc, #196]	; (801904c <RegionUS915TxConfig+0x150>)
 8018f88:	68da      	ldr	r2, [r3, #12]
 8018f8a:	4b2d      	ldr	r3, [pc, #180]	; (8019040 <RegionUS915TxConfig+0x144>)
 8018f8c:	6819      	ldr	r1, [r3, #0]
 8018f8e:	68fb      	ldr	r3, [r7, #12]
 8018f90:	781b      	ldrb	r3, [r3, #0]
 8018f92:	4618      	mov	r0, r3
 8018f94:	4603      	mov	r3, r0
 8018f96:	005b      	lsls	r3, r3, #1
 8018f98:	4403      	add	r3, r0
 8018f9a:	009b      	lsls	r3, r3, #2
 8018f9c:	440b      	add	r3, r1
 8018f9e:	681b      	ldr	r3, [r3, #0]
 8018fa0:	4618      	mov	r0, r3
 8018fa2:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8018fa4:	4b29      	ldr	r3, [pc, #164]	; (801904c <RegionUS915TxConfig+0x150>)
 8018fa6:	69dc      	ldr	r4, [r3, #28]
 8018fa8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8018fac:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8018fb0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8018fb4:	9208      	str	r2, [sp, #32]
 8018fb6:	2200      	movs	r2, #0
 8018fb8:	9207      	str	r2, [sp, #28]
 8018fba:	2200      	movs	r2, #0
 8018fbc:	9206      	str	r2, [sp, #24]
 8018fbe:	2200      	movs	r2, #0
 8018fc0:	9205      	str	r2, [sp, #20]
 8018fc2:	2201      	movs	r2, #1
 8018fc4:	9204      	str	r2, [sp, #16]
 8018fc6:	2200      	movs	r2, #0
 8018fc8:	9203      	str	r2, [sp, #12]
 8018fca:	2208      	movs	r2, #8
 8018fcc:	9202      	str	r2, [sp, #8]
 8018fce:	2201      	movs	r2, #1
 8018fd0:	9201      	str	r2, [sp, #4]
 8018fd2:	9300      	str	r3, [sp, #0]
 8018fd4:	69bb      	ldr	r3, [r7, #24]
 8018fd6:	2200      	movs	r2, #0
 8018fd8:	2001      	movs	r0, #1
 8018fda:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8018fdc:	4b18      	ldr	r3, [pc, #96]	; (8019040 <RegionUS915TxConfig+0x144>)
 8018fde:	681a      	ldr	r2, [r3, #0]
 8018fe0:	68fb      	ldr	r3, [r7, #12]
 8018fe2:	781b      	ldrb	r3, [r3, #0]
 8018fe4:	4619      	mov	r1, r3
 8018fe6:	460b      	mov	r3, r1
 8018fe8:	005b      	lsls	r3, r3, #1
 8018fea:	440b      	add	r3, r1
 8018fec:	009b      	lsls	r3, r3, #2
 8018fee:	4413      	add	r3, r2
 8018ff0:	681a      	ldr	r2, [r3, #0]
 8018ff2:	68fb      	ldr	r3, [r7, #12]
 8018ff4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018ff8:	4619      	mov	r1, r3
 8018ffa:	4610      	mov	r0, r2
 8018ffc:	f7ff f9e2 	bl	80183c4 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8019000:	4b12      	ldr	r3, [pc, #72]	; (801904c <RegionUS915TxConfig+0x150>)
 8019002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019004:	68fa      	ldr	r2, [r7, #12]
 8019006:	8992      	ldrh	r2, [r2, #12]
 8019008:	b2d2      	uxtb	r2, r2
 801900a:	4611      	mov	r1, r2
 801900c:	2001      	movs	r0, #1
 801900e:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8019010:	68fb      	ldr	r3, [r7, #12]
 8019012:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8019016:	68fb      	ldr	r3, [r7, #12]
 8019018:	899b      	ldrh	r3, [r3, #12]
 801901a:	4619      	mov	r1, r3
 801901c:	4610      	mov	r0, r2
 801901e:	f7ff fa63 	bl	80184e8 <GetTimeOnAir>
 8019022:	4602      	mov	r2, r0
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8019028:	68bb      	ldr	r3, [r7, #8]
 801902a:	7fba      	ldrb	r2, [r7, #30]
 801902c:	701a      	strb	r2, [r3, #0]
    return true;
 801902e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8019030:	4618      	mov	r0, r3
 8019032:	3724      	adds	r7, #36	; 0x24
 8019034:	46bd      	mov	sp, r7
 8019036:	bd90      	pop	{r4, r7, pc}
 8019038:	0801f470 	.word	0x0801f470
 801903c:	20001be8 	.word	0x20001be8
 8019040:	20001be4 	.word	0x20001be4
 8019044:	0801f480 	.word	0x0801f480
 8019048:	41f00000 	.word	0x41f00000
 801904c:	0801f4f4 	.word	0x0801f4f4

08019050 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8019050:	b590      	push	{r4, r7, lr}
 8019052:	b097      	sub	sp, #92	; 0x5c
 8019054:	af00      	add	r7, sp, #0
 8019056:	60f8      	str	r0, [r7, #12]
 8019058:	60b9      	str	r1, [r7, #8]
 801905a:	607a      	str	r2, [r7, #4]
 801905c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801905e:	2307      	movs	r3, #7
 8019060:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8019064:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8019068:	2200      	movs	r2, #0
 801906a:	601a      	str	r2, [r3, #0]
 801906c:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801906e:	2300      	movs	r3, #0
 8019070:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    uint8_t bytesProcessed = 0;
 8019074:	2300      	movs	r3, #0
 8019076:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 801907a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801907e:	2200      	movs	r2, #0
 8019080:	601a      	str	r2, [r3, #0]
 8019082:	605a      	str	r2, [r3, #4]
 8019084:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8019086:	4b97      	ldr	r3, [pc, #604]	; (80192e4 <RegionUS915LinkAdrReq+0x294>)
 8019088:	681b      	ldr	r3, [r3, #0]
 801908a:	f503 7158 	add.w	r1, r3, #864	; 0x360
 801908e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019092:	2206      	movs	r2, #6
 8019094:	4618      	mov	r0, r3
 8019096:	f7fe fcb5 	bl	8017a04 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801909a:	e11b      	b.n	80192d4 <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801909c:	68fb      	ldr	r3, [r7, #12]
 801909e:	685a      	ldr	r2, [r3, #4]
 80190a0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80190a4:	4413      	add	r3, r2
 80190a6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80190aa:	4611      	mov	r1, r2
 80190ac:	4618      	mov	r0, r3
 80190ae:	f7fe fded 	bl	8017c8c <RegionCommonParseLinkAdrReq>
 80190b2:	4603      	mov	r3, r0
 80190b4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        if( nextIndex == 0 )
 80190b8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80190bc:	2b00      	cmp	r3, #0
 80190be:	f000 8113 	beq.w	80192e8 <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80190c2:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80190c6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80190ca:	4413      	add	r3, r2
 80190cc:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80190d0:	2307      	movs	r3, #7
 80190d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 80190d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80190da:	2b06      	cmp	r3, #6
 80190dc:	d116      	bne.n	801910c <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 80190de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80190e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0xFFFF;
 80190e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80190ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0xFFFF;
 80190ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80190f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0xFFFF;
 80190f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80190fa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 80190fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8019102:	b2db      	uxtb	r3, r3
 8019104:	b29b      	uxth	r3, r3
 8019106:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801910a:	e0e3      	b.n	80192d4 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 801910c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8019110:	2b07      	cmp	r3, #7
 8019112:	d112      	bne.n	801913a <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 8019114:	2300      	movs	r3, #0
 8019116:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0x0000;
 801911a:	2300      	movs	r3, #0
 801911c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0x0000;
 8019120:	2300      	movs	r3, #0
 8019122:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0x0000;
 8019126:	2300      	movs	r3, #0
 8019128:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801912c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8019130:	b2db      	uxtb	r3, r3
 8019132:	b29b      	uxth	r3, r3
 8019134:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8019138:	e0cc      	b.n	80192d4 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 801913a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801913e:	2b05      	cmp	r3, #5
 8019140:	f040 80bf 	bne.w	80192c2 <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 8019144:	2301      	movs	r3, #1
 8019146:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 801914a:	2300      	movs	r3, #0
 801914c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 8019150:	2300      	movs	r3, #0
 8019152:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8019156:	e0ae      	b.n	80192b6 <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8019158:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801915c:	b2da      	uxtb	r2, r3
 801915e:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8019162:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019166:	fa01 f303 	lsl.w	r3, r1, r3
 801916a:	4013      	ands	r3, r2
 801916c:	2b00      	cmp	r3, #0
 801916e:	d04d      	beq.n	801920c <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 8019170:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019174:	f003 0301 	and.w	r3, r3, #1
 8019178:	b2db      	uxtb	r3, r3
 801917a:	2b00      	cmp	r3, #0
 801917c:	d120      	bne.n	80191c0 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 801917e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8019182:	005b      	lsls	r3, r3, #1
 8019184:	3358      	adds	r3, #88	; 0x58
 8019186:	443b      	add	r3, r7
 8019188:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801918c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8019190:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8019194:	b292      	uxth	r2, r2
 8019196:	005b      	lsls	r3, r3, #1
 8019198:	3358      	adds	r3, #88	; 0x58
 801919a:	443b      	add	r3, r7
 801919c:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 80191a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80191a4:	b21a      	sxth	r2, r3
 80191a6:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 80191aa:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80191ae:	fa01 f303 	lsl.w	r3, r1, r3
 80191b2:	b21b      	sxth	r3, r3
 80191b4:	4313      	orrs	r3, r2
 80191b6:	b21b      	sxth	r3, r3
 80191b8:	b29b      	uxth	r3, r3
 80191ba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80191be:	e075      	b.n	80192ac <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 80191c0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80191c4:	005b      	lsls	r3, r3, #1
 80191c6:	3358      	adds	r3, #88	; 0x58
 80191c8:	443b      	add	r3, r7
 80191ca:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80191ce:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80191d2:	f062 02ff 	orn	r2, r2, #255	; 0xff
 80191d6:	b292      	uxth	r2, r2
 80191d8:	005b      	lsls	r3, r3, #1
 80191da:	3358      	adds	r3, #88	; 0x58
 80191dc:	443b      	add	r3, r7
 80191de:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 80191e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80191e6:	b21a      	sxth	r2, r3
 80191e8:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 80191ec:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80191f0:	fa01 f303 	lsl.w	r3, r1, r3
 80191f4:	b21b      	sxth	r3, r3
 80191f6:	4313      	orrs	r3, r2
 80191f8:	b21b      	sxth	r3, r3
 80191fa:	b29b      	uxth	r3, r3
 80191fc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8019200:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8019204:	3301      	adds	r3, #1
 8019206:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 801920a:	e04f      	b.n	80192ac <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 801920c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019210:	f003 0301 	and.w	r3, r3, #1
 8019214:	b2db      	uxtb	r3, r3
 8019216:	2b00      	cmp	r3, #0
 8019218:	d122      	bne.n	8019260 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 801921a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801921e:	005b      	lsls	r3, r3, #1
 8019220:	3358      	adds	r3, #88	; 0x58
 8019222:	443b      	add	r3, r7
 8019224:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8019228:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801922c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8019230:	b292      	uxth	r2, r2
 8019232:	005b      	lsls	r3, r3, #1
 8019234:	3358      	adds	r3, #88	; 0x58
 8019236:	443b      	add	r3, r7
 8019238:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801923c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8019240:	b21a      	sxth	r2, r3
 8019242:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8019246:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801924a:	fa01 f303 	lsl.w	r3, r1, r3
 801924e:	b21b      	sxth	r3, r3
 8019250:	43db      	mvns	r3, r3
 8019252:	b21b      	sxth	r3, r3
 8019254:	4013      	ands	r3, r2
 8019256:	b21b      	sxth	r3, r3
 8019258:	b29b      	uxth	r3, r3
 801925a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801925e:	e025      	b.n	80192ac <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 8019260:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8019264:	005b      	lsls	r3, r3, #1
 8019266:	3358      	adds	r3, #88	; 0x58
 8019268:	443b      	add	r3, r7
 801926a:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801926e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8019272:	b2d2      	uxtb	r2, r2
 8019274:	b292      	uxth	r2, r2
 8019276:	005b      	lsls	r3, r3, #1
 8019278:	3358      	adds	r3, #88	; 0x58
 801927a:	443b      	add	r3, r7
 801927c:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8019280:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8019284:	b21a      	sxth	r2, r3
 8019286:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801928a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801928e:	fa01 f303 	lsl.w	r3, r1, r3
 8019292:	b21b      	sxth	r3, r3
 8019294:	43db      	mvns	r3, r3
 8019296:	b21b      	sxth	r3, r3
 8019298:	4013      	ands	r3, r2
 801929a:	b21b      	sxth	r3, r3
 801929c:	b29b      	uxth	r3, r3
 801929e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 80192a2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80192a6:	3301      	adds	r3, #1
 80192a8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 80192ac:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80192b0:	3301      	adds	r3, #1
 80192b2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 80192b6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80192ba:	2b07      	cmp	r3, #7
 80192bc:	f67f af4c 	bls.w	8019158 <RegionUS915LinkAdrReq+0x108>
 80192c0:	e008      	b.n	80192d4 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 80192c2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80192c6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80192ca:	005b      	lsls	r3, r3, #1
 80192cc:	3358      	adds	r3, #88	; 0x58
 80192ce:	443b      	add	r3, r7
 80192d0:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80192d4:	68fb      	ldr	r3, [r7, #12]
 80192d6:	7a1b      	ldrb	r3, [r3, #8]
 80192d8:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80192dc:	429a      	cmp	r2, r3
 80192de:	f4ff aedd 	bcc.w	801909c <RegionUS915LinkAdrReq+0x4c>
 80192e2:	e002      	b.n	80192ea <RegionUS915LinkAdrReq+0x29a>
 80192e4:	20001be4 	.word	0x20001be4
            break; // break loop, since no more request has been found
 80192e8:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 80192ea:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80192ee:	2b03      	cmp	r3, #3
 80192f0:	dc0f      	bgt.n	8019312 <RegionUS915LinkAdrReq+0x2c2>
 80192f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80192f6:	2204      	movs	r2, #4
 80192f8:	2100      	movs	r1, #0
 80192fa:	4618      	mov	r0, r3
 80192fc:	f7fe fb56 	bl	80179ac <RegionCommonCountChannels>
 8019300:	4603      	mov	r3, r0
 8019302:	2b01      	cmp	r3, #1
 8019304:	d805      	bhi.n	8019312 <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 8019306:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801930a:	f023 0301 	bic.w	r3, r3, #1
 801930e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8019312:	2302      	movs	r3, #2
 8019314:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8019318:	68fb      	ldr	r3, [r7, #12]
 801931a:	7a5b      	ldrb	r3, [r3, #9]
 801931c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8019320:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019324:	4618      	mov	r0, r3
 8019326:	f7ff f90f 	bl	8018548 <RegionUS915GetPhyParam>
 801932a:	4603      	mov	r3, r0
 801932c:	637b      	str	r3, [r7, #52]	; 0x34

    linkAdrVerifyParams.Status = status;
 801932e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019332:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8019334:	68fb      	ldr	r3, [r7, #12]
 8019336:	7a9b      	ldrb	r3, [r3, #10]
 8019338:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801933a:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801933e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8019340:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8019344:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8019346:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801934a:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801934c:	68fb      	ldr	r3, [r7, #12]
 801934e:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8019352:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8019354:	68fb      	ldr	r3, [r7, #12]
 8019356:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801935a:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801935c:	68fb      	ldr	r3, [r7, #12]
 801935e:	7b5b      	ldrb	r3, [r3, #13]
 8019360:	b25b      	sxtb	r3, r3
 8019362:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8019364:	2348      	movs	r3, #72	; 0x48
 8019366:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 801936a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801936e:	627b      	str	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8019370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019372:	b25b      	sxtb	r3, r3
 8019374:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8019378:	2304      	movs	r3, #4
 801937a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801937e:	4b3f      	ldr	r3, [pc, #252]	; (801947c <RegionUS915LinkAdrReq+0x42c>)
 8019380:	681b      	ldr	r3, [r3, #0]
 8019382:	62fb      	str	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8019384:	230e      	movs	r3, #14
 8019386:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 801938a:	2300      	movs	r3, #0
 801938c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8019390:	68fb      	ldr	r3, [r7, #12]
 8019392:	681b      	ldr	r3, [r3, #0]
 8019394:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8019396:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 801939a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801939e:	1c9a      	adds	r2, r3, #2
 80193a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80193a4:	1c59      	adds	r1, r3, #1
 80193a6:	f107 0014 	add.w	r0, r7, #20
 80193aa:	4623      	mov	r3, r4
 80193ac:	f7fe fcbf 	bl	8017d2e <RegionCommonLinkAdrReqVerifyParams>
 80193b0:	4603      	mov	r3, r0
 80193b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80193b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80193ba:	2b07      	cmp	r3, #7
 80193bc:	d147      	bne.n	801944e <RegionUS915LinkAdrReq+0x3fe>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 80193be:	4b2f      	ldr	r3, [pc, #188]	; (801947c <RegionUS915LinkAdrReq+0x42c>)
 80193c0:	681b      	ldr	r3, [r3, #0]
 80193c2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80193c6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80193ca:	2206      	movs	r2, #6
 80193cc:	4618      	mov	r0, r3
 80193ce:	f7fe fb19 	bl	8017a04 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 80193d2:	4b2b      	ldr	r3, [pc, #172]	; (8019480 <RegionUS915LinkAdrReq+0x430>)
 80193d4:	681b      	ldr	r3, [r3, #0]
 80193d6:	8819      	ldrh	r1, [r3, #0]
 80193d8:	4b28      	ldr	r3, [pc, #160]	; (801947c <RegionUS915LinkAdrReq+0x42c>)
 80193da:	681b      	ldr	r3, [r3, #0]
 80193dc:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 80193e0:	4b27      	ldr	r3, [pc, #156]	; (8019480 <RegionUS915LinkAdrReq+0x430>)
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	400a      	ands	r2, r1
 80193e6:	b292      	uxth	r2, r2
 80193e8:	801a      	strh	r2, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 80193ea:	4b25      	ldr	r3, [pc, #148]	; (8019480 <RegionUS915LinkAdrReq+0x430>)
 80193ec:	681b      	ldr	r3, [r3, #0]
 80193ee:	8859      	ldrh	r1, [r3, #2]
 80193f0:	4b22      	ldr	r3, [pc, #136]	; (801947c <RegionUS915LinkAdrReq+0x42c>)
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	f8b3 2362 	ldrh.w	r2, [r3, #866]	; 0x362
 80193f8:	4b21      	ldr	r3, [pc, #132]	; (8019480 <RegionUS915LinkAdrReq+0x430>)
 80193fa:	681b      	ldr	r3, [r3, #0]
 80193fc:	400a      	ands	r2, r1
 80193fe:	b292      	uxth	r2, r2
 8019400:	805a      	strh	r2, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8019402:	4b1f      	ldr	r3, [pc, #124]	; (8019480 <RegionUS915LinkAdrReq+0x430>)
 8019404:	681b      	ldr	r3, [r3, #0]
 8019406:	8899      	ldrh	r1, [r3, #4]
 8019408:	4b1c      	ldr	r3, [pc, #112]	; (801947c <RegionUS915LinkAdrReq+0x42c>)
 801940a:	681b      	ldr	r3, [r3, #0]
 801940c:	f8b3 2364 	ldrh.w	r2, [r3, #868]	; 0x364
 8019410:	4b1b      	ldr	r3, [pc, #108]	; (8019480 <RegionUS915LinkAdrReq+0x430>)
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	400a      	ands	r2, r1
 8019416:	b292      	uxth	r2, r2
 8019418:	809a      	strh	r2, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 801941a:	4b19      	ldr	r3, [pc, #100]	; (8019480 <RegionUS915LinkAdrReq+0x430>)
 801941c:	681b      	ldr	r3, [r3, #0]
 801941e:	88d9      	ldrh	r1, [r3, #6]
 8019420:	4b16      	ldr	r3, [pc, #88]	; (801947c <RegionUS915LinkAdrReq+0x42c>)
 8019422:	681b      	ldr	r3, [r3, #0]
 8019424:	f8b3 2366 	ldrh.w	r2, [r3, #870]	; 0x366
 8019428:	4b15      	ldr	r3, [pc, #84]	; (8019480 <RegionUS915LinkAdrReq+0x430>)
 801942a:	681b      	ldr	r3, [r3, #0]
 801942c:	400a      	ands	r2, r1
 801942e:	b292      	uxth	r2, r2
 8019430:	80da      	strh	r2, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8019432:	4b12      	ldr	r3, [pc, #72]	; (801947c <RegionUS915LinkAdrReq+0x42c>)
 8019434:	681a      	ldr	r2, [r3, #0]
 8019436:	4b12      	ldr	r3, [pc, #72]	; (8019480 <RegionUS915LinkAdrReq+0x430>)
 8019438:	681b      	ldr	r3, [r3, #0]
 801943a:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 801943e:	811a      	strh	r2, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8019440:	4b0e      	ldr	r3, [pc, #56]	; (801947c <RegionUS915LinkAdrReq+0x42c>)
 8019442:	681a      	ldr	r2, [r3, #0]
 8019444:	4b0e      	ldr	r3, [pc, #56]	; (8019480 <RegionUS915LinkAdrReq+0x430>)
 8019446:	681b      	ldr	r3, [r3, #0]
 8019448:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 801944c:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801944e:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 8019452:	68bb      	ldr	r3, [r7, #8]
 8019454:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8019456:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 801945a:	687b      	ldr	r3, [r7, #4]
 801945c:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801945e:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8019462:	683b      	ldr	r3, [r7, #0]
 8019464:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8019466:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019468:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801946c:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 801946e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8019472:	4618      	mov	r0, r3
 8019474:	375c      	adds	r7, #92	; 0x5c
 8019476:	46bd      	mov	sp, r7
 8019478:	bd90      	pop	{r4, r7, pc}
 801947a:	bf00      	nop
 801947c:	20001be4 	.word	0x20001be4
 8019480:	20001be0 	.word	0x20001be0

08019484 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8019484:	b580      	push	{r7, lr}
 8019486:	b084      	sub	sp, #16
 8019488:	af00      	add	r7, sp, #0
 801948a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801948c:	2307      	movs	r3, #7
 801948e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	685b      	ldr	r3, [r3, #4]
 8019494:	4618      	mov	r0, r3
 8019496:	f7fe ffe3 	bl	8018460 <VerifyRfFreq>
 801949a:	4603      	mov	r3, r0
 801949c:	f083 0301 	eor.w	r3, r3, #1
 80194a0:	b2db      	uxtb	r3, r3
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d003      	beq.n	80194ae <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 80194a6:	7bfb      	ldrb	r3, [r7, #15]
 80194a8:	f023 0301 	bic.w	r3, r3, #1
 80194ac:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	f993 3000 	ldrsb.w	r3, [r3]
 80194b4:	220d      	movs	r2, #13
 80194b6:	2108      	movs	r1, #8
 80194b8:	4618      	mov	r0, r3
 80194ba:	f7fe fa26 	bl	801790a <RegionCommonValueInRange>
 80194be:	4603      	mov	r3, r0
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	d103      	bne.n	80194cc <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 80194c4:	7bfb      	ldrb	r3, [r7, #15]
 80194c6:	f023 0302 	bic.w	r3, r3, #2
 80194ca:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	f993 3000 	ldrsb.w	r3, [r3]
 80194d2:	2207      	movs	r2, #7
 80194d4:	2105      	movs	r1, #5
 80194d6:	4618      	mov	r0, r3
 80194d8:	f7fe fa17 	bl	801790a <RegionCommonValueInRange>
 80194dc:	4603      	mov	r3, r0
 80194de:	2b01      	cmp	r3, #1
 80194e0:	d004      	beq.n	80194ec <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 80194e8:	2b0d      	cmp	r3, #13
 80194ea:	dd03      	ble.n	80194f4 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 80194ec:	7bfb      	ldrb	r3, [r7, #15]
 80194ee:	f023 0302 	bic.w	r3, r3, #2
 80194f2:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80194fa:	2203      	movs	r2, #3
 80194fc:	2100      	movs	r1, #0
 80194fe:	4618      	mov	r0, r3
 8019500:	f7fe fa03 	bl	801790a <RegionCommonValueInRange>
 8019504:	4603      	mov	r3, r0
 8019506:	2b00      	cmp	r3, #0
 8019508:	d103      	bne.n	8019512 <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801950a:	7bfb      	ldrb	r3, [r7, #15]
 801950c:	f023 0304 	bic.w	r3, r3, #4
 8019510:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 8019512:	7bfb      	ldrb	r3, [r7, #15]
}
 8019514:	4618      	mov	r0, r3
 8019516:	3710      	adds	r7, #16
 8019518:	46bd      	mov	sp, r7
 801951a:	bd80      	pop	{r7, pc}

0801951c <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801951c:	b480      	push	{r7}
 801951e:	b083      	sub	sp, #12
 8019520:	af00      	add	r7, sp, #0
 8019522:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8019524:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8019528:	4618      	mov	r0, r3
 801952a:	370c      	adds	r7, #12
 801952c:	46bd      	mov	sp, r7
 801952e:	bc80      	pop	{r7}
 8019530:	4770      	bx	lr

08019532 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8019532:	b480      	push	{r7}
 8019534:	b083      	sub	sp, #12
 8019536:	af00      	add	r7, sp, #0
 8019538:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801953a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801953e:	4618      	mov	r0, r3
 8019540:	370c      	adds	r7, #12
 8019542:	46bd      	mov	sp, r7
 8019544:	bc80      	pop	{r7}
 8019546:	4770      	bx	lr

08019548 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8019548:	b480      	push	{r7}
 801954a:	b083      	sub	sp, #12
 801954c:	af00      	add	r7, sp, #0
 801954e:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8019550:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8019554:	4618      	mov	r0, r3
 8019556:	370c      	adds	r7, #12
 8019558:	46bd      	mov	sp, r7
 801955a:	bc80      	pop	{r7}
 801955c:	4770      	bx	lr
	...

08019560 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8019560:	b480      	push	{r7}
 8019562:	b083      	sub	sp, #12
 8019564:	af00      	add	r7, sp, #0
 8019566:	4603      	mov	r3, r0
 8019568:	460a      	mov	r2, r1
 801956a:	71fb      	strb	r3, [r7, #7]
 801956c:	4613      	mov	r3, r2
 801956e:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8019570:	79bb      	ldrb	r3, [r7, #6]
 8019572:	2b00      	cmp	r3, #0
 8019574:	d106      	bne.n	8019584 <RegionUS915AlternateDr+0x24>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 8019576:	4b13      	ldr	r3, [pc, #76]	; (80195c4 <RegionUS915AlternateDr+0x64>)
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	7b5a      	ldrb	r2, [r3, #13]
 801957c:	3201      	adds	r2, #1
 801957e:	b2d2      	uxtb	r2, r2
 8019580:	735a      	strb	r2, [r3, #13]
 8019582:	e005      	b.n	8019590 <RegionUS915AlternateDr+0x30>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 8019584:	4b0f      	ldr	r3, [pc, #60]	; (80195c4 <RegionUS915AlternateDr+0x64>)
 8019586:	681b      	ldr	r3, [r3, #0]
 8019588:	7b5a      	ldrb	r2, [r3, #13]
 801958a:	3a01      	subs	r2, #1
 801958c:	b2d2      	uxtb	r2, r2
 801958e:	735a      	strb	r2, [r3, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8019590:	4b0c      	ldr	r3, [pc, #48]	; (80195c4 <RegionUS915AlternateDr+0x64>)
 8019592:	681b      	ldr	r3, [r3, #0]
 8019594:	7b5a      	ldrb	r2, [r3, #13]
 8019596:	4b0c      	ldr	r3, [pc, #48]	; (80195c8 <RegionUS915AlternateDr+0x68>)
 8019598:	fba3 1302 	umull	r1, r3, r3, r2
 801959c:	0859      	lsrs	r1, r3, #1
 801959e:	460b      	mov	r3, r1
 80195a0:	00db      	lsls	r3, r3, #3
 80195a2:	440b      	add	r3, r1
 80195a4:	1ad3      	subs	r3, r2, r3
 80195a6:	b2db      	uxtb	r3, r3
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	d102      	bne.n	80195b2 <RegionUS915AlternateDr+0x52>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 80195ac:	2304      	movs	r3, #4
 80195ae:	71fb      	strb	r3, [r7, #7]
 80195b0:	e001      	b.n	80195b6 <RegionUS915AlternateDr+0x56>
    }
    else
    {
        currentDr = DR_0;
 80195b2:	2300      	movs	r3, #0
 80195b4:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 80195b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 80195ba:	4618      	mov	r0, r3
 80195bc:	370c      	adds	r7, #12
 80195be:	46bd      	mov	sp, r7
 80195c0:	bc80      	pop	{r7}
 80195c2:	4770      	bx	lr
 80195c4:	20001be0 	.word	0x20001be0
 80195c8:	38e38e39 	.word	0x38e38e39

080195cc <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80195cc:	b580      	push	{r7, lr}
 80195ce:	b0a8      	sub	sp, #160	; 0xa0
 80195d0:	af02      	add	r7, sp, #8
 80195d2:	60f8      	str	r0, [r7, #12]
 80195d4:	60b9      	str	r1, [r7, #8]
 80195d6:	607a      	str	r2, [r7, #4]
 80195d8:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 80195da:	2300      	movs	r3, #0
 80195dc:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t nbRestrictedChannels = 0;
 80195e0:	2300      	movs	r3, #0
 80195e2:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 80195e6:	2300      	movs	r3, #0
 80195e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80195ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80195ee:	2244      	movs	r2, #68	; 0x44
 80195f0:	2100      	movs	r1, #0
 80195f2:	4618      	mov	r0, r3
 80195f4:	f004 ffe0 	bl	801e5b8 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80195f8:	230c      	movs	r3, #12
 80195fa:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 80195fe:	4b67      	ldr	r3, [pc, #412]	; (801979c <RegionUS915NextChannel+0x1d0>)
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	2204      	movs	r2, #4
 8019604:	2100      	movs	r1, #0
 8019606:	4618      	mov	r0, r3
 8019608:	f7fe f9d0 	bl	80179ac <RegionCommonCountChannels>
 801960c:	4603      	mov	r3, r0
 801960e:	2b00      	cmp	r3, #0
 8019610:	d10e      	bne.n	8019630 <RegionUS915NextChannel+0x64>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8019612:	4b62      	ldr	r3, [pc, #392]	; (801979c <RegionUS915NextChannel+0x1d0>)
 8019614:	681b      	ldr	r3, [r3, #0]
 8019616:	4618      	mov	r0, r3
 8019618:	4b61      	ldr	r3, [pc, #388]	; (80197a0 <RegionUS915NextChannel+0x1d4>)
 801961a:	681b      	ldr	r3, [r3, #0]
 801961c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8019620:	2204      	movs	r2, #4
 8019622:	4619      	mov	r1, r3
 8019624:	f7fe f9ee 	bl	8017a04 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8019628:	4b5c      	ldr	r3, [pc, #368]	; (801979c <RegionUS915NextChannel+0x1d0>)
 801962a:	681b      	ldr	r3, [r3, #0]
 801962c:	2200      	movs	r2, #0
 801962e:	731a      	strb	r2, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8019630:	68fb      	ldr	r3, [r7, #12]
 8019632:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8019636:	2b03      	cmp	r3, #3
 8019638:	dd0c      	ble.n	8019654 <RegionUS915NextChannel+0x88>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 801963a:	4b58      	ldr	r3, [pc, #352]	; (801979c <RegionUS915NextChannel+0x1d0>)
 801963c:	681b      	ldr	r3, [r3, #0]
 801963e:	891b      	ldrh	r3, [r3, #8]
 8019640:	b2db      	uxtb	r3, r3
 8019642:	2b00      	cmp	r3, #0
 8019644:	d106      	bne.n	8019654 <RegionUS915NextChannel+0x88>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8019646:	4b56      	ldr	r3, [pc, #344]	; (80197a0 <RegionUS915NextChannel+0x1d4>)
 8019648:	681a      	ldr	r2, [r3, #0]
 801964a:	4b54      	ldr	r3, [pc, #336]	; (801979c <RegionUS915NextChannel+0x1d0>)
 801964c:	681b      	ldr	r3, [r3, #0]
 801964e:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8019652:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8019654:	68fb      	ldr	r3, [r7, #12]
 8019656:	7a5b      	ldrb	r3, [r3, #9]
 8019658:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801965a:	68fb      	ldr	r3, [r7, #12]
 801965c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8019660:	b2db      	uxtb	r3, r3
 8019662:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8019664:	4b4d      	ldr	r3, [pc, #308]	; (801979c <RegionUS915NextChannel+0x1d0>)
 8019666:	681b      	ldr	r3, [r3, #0]
 8019668:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801966a:	4b4d      	ldr	r3, [pc, #308]	; (80197a0 <RegionUS915NextChannel+0x1d4>)
 801966c:	681b      	ldr	r3, [r3, #0]
 801966e:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8019670:	4b4c      	ldr	r3, [pc, #304]	; (80197a4 <RegionUS915NextChannel+0x1d8>)
 8019672:	681b      	ldr	r3, [r3, #0]
 8019674:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8019676:	2348      	movs	r3, #72	; 0x48
 8019678:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = NULL;
 801967a:	2300      	movs	r3, #0
 801967c:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801967e:	68fb      	ldr	r3, [r7, #12]
 8019680:	681b      	ldr	r3, [r3, #0]
 8019682:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	685b      	ldr	r3, [r3, #4]
 8019688:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801968a:	68fb      	ldr	r3, [r7, #12]
 801968c:	7a9b      	ldrb	r3, [r3, #10]
 801968e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8019692:	2301      	movs	r3, #1
 8019694:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8019698:	f107 0314 	add.w	r3, r7, #20
 801969c:	64bb      	str	r3, [r7, #72]	; 0x48

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801969e:	68fa      	ldr	r2, [r7, #12]
 80196a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80196a4:	320c      	adds	r2, #12
 80196a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80196aa:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80196ae:	68fb      	ldr	r3, [r7, #12]
 80196b0:	7d1b      	ldrb	r3, [r3, #20]
 80196b2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80196b6:	68fb      	ldr	r3, [r7, #12]
 80196b8:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80196bc:	68fb      	ldr	r3, [r7, #12]
 80196be:	8adb      	ldrh	r3, [r3, #22]
 80196c0:	4619      	mov	r1, r3
 80196c2:	4610      	mov	r0, r2
 80196c4:	f7fe ff10 	bl	80184e8 <GetTimeOnAir>
 80196c8:	4603      	mov	r3, r0
 80196ca:	647b      	str	r3, [r7, #68]	; 0x44
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80196cc:	f107 0195 	add.w	r1, r7, #149	; 0x95
 80196d0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80196d4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80196d8:	687b      	ldr	r3, [r7, #4]
 80196da:	9301      	str	r3, [sp, #4]
 80196dc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80196e0:	9300      	str	r3, [sp, #0]
 80196e2:	460b      	mov	r3, r1
 80196e4:	6839      	ldr	r1, [r7, #0]
 80196e6:	f7fe fd68 	bl	80181ba <RegionCommonIdentifyChannels>
 80196ea:	4603      	mov	r3, r0
 80196ec:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80196f0:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	d14a      	bne.n	801978e <RegionUS915NextChannel+0x1c2>
    {
        if( nextChanParams->Joined == true )
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	7a5b      	ldrb	r3, [r3, #9]
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	d00e      	beq.n	801971e <RegionUS915NextChannel+0x152>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8019700:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8019704:	3b01      	subs	r3, #1
 8019706:	4619      	mov	r1, r3
 8019708:	2000      	movs	r0, #0
 801970a:	f000 f89f 	bl	801984c <randr>
 801970e:	4603      	mov	r3, r0
 8019710:	3398      	adds	r3, #152	; 0x98
 8019712:	443b      	add	r3, r7
 8019714:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8019718:	68bb      	ldr	r3, [r7, #8]
 801971a:	701a      	strb	r2, [r3, #0]
 801971c:	e02e      	b.n	801977c <RegionUS915NextChannel+0x1b0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 801971e:	68fb      	ldr	r3, [r7, #12]
 8019720:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8019724:	2b00      	cmp	r3, #0
 8019726:	d10e      	bne.n	8019746 <RegionUS915NextChannel+0x17a>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8019728:	4b1c      	ldr	r3, [pc, #112]	; (801979c <RegionUS915NextChannel+0x1d0>)
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	4618      	mov	r0, r3
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 801972e:	4b1b      	ldr	r3, [pc, #108]	; (801979c <RegionUS915NextChannel+0x1d0>)
 8019730:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8019732:	330c      	adds	r3, #12
 8019734:	68ba      	ldr	r2, [r7, #8]
 8019736:	4619      	mov	r1, r3
 8019738:	f7fd fea2 	bl	8017480 <RegionBaseUSComputeNext125kHzJoinChannel>
 801973c:	4603      	mov	r3, r0
 801973e:	2b03      	cmp	r3, #3
 8019740:	d11c      	bne.n	801977c <RegionUS915NextChannel+0x1b0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8019742:	2303      	movs	r3, #3
 8019744:	e025      	b.n	8019792 <RegionUS915NextChannel+0x1c6>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8019746:	2300      	movs	r3, #0
 8019748:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801974c:	e004      	b.n	8019758 <RegionUS915NextChannel+0x18c>
                {
                    i++;
 801974e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8019752:	3301      	adds	r3, #1
 8019754:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8019758:	4b10      	ldr	r3, [pc, #64]	; (801979c <RegionUS915NextChannel+0x1d0>)
 801975a:	681b      	ldr	r3, [r3, #0]
 801975c:	891b      	ldrh	r3, [r3, #8]
 801975e:	b2da      	uxtb	r2, r3
 8019760:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8019764:	fa42 f303 	asr.w	r3, r2, r3
 8019768:	f003 0301 	and.w	r3, r3, #1
 801976c:	2b00      	cmp	r3, #0
 801976e:	d0ee      	beq.n	801974e <RegionUS915NextChannel+0x182>
                }
                *channel = 64 + i;
 8019770:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8019774:	3340      	adds	r3, #64	; 0x40
 8019776:	b2da      	uxtb	r2, r3
 8019778:	68bb      	ldr	r3, [r7, #8]
 801977a:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 801977c:	4b07      	ldr	r3, [pc, #28]	; (801979c <RegionUS915NextChannel+0x1d0>)
 801977e:	681b      	ldr	r3, [r3, #0]
 8019780:	4618      	mov	r0, r3
 8019782:	68bb      	ldr	r3, [r7, #8]
 8019784:	781b      	ldrb	r3, [r3, #0]
 8019786:	2248      	movs	r2, #72	; 0x48
 8019788:	4619      	mov	r1, r3
 801978a:	f7fe f8db 	bl	8017944 <RegionCommonChanDisable>
    }
    return status;
 801978e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8019792:	4618      	mov	r0, r3
 8019794:	3798      	adds	r7, #152	; 0x98
 8019796:	46bd      	mov	sp, r7
 8019798:	bd80      	pop	{r7, pc}
 801979a:	bf00      	nop
 801979c:	20001be0 	.word	0x20001be0
 80197a0:	20001be4 	.word	0x20001be4
 80197a4:	20001be8 	.word	0x20001be8

080197a8 <RegionUS915ApplyDrOffset>:
#endif /* REGION_US915 */
}
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80197a8:	b480      	push	{r7}
 80197aa:	b085      	sub	sp, #20
 80197ac:	af00      	add	r7, sp, #0
 80197ae:	4603      	mov	r3, r0
 80197b0:	71fb      	strb	r3, [r7, #7]
 80197b2:	460b      	mov	r3, r1
 80197b4:	71bb      	strb	r3, [r7, #6]
 80197b6:	4613      	mov	r3, r2
 80197b8:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 80197ba:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80197be:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80197c2:	4909      	ldr	r1, [pc, #36]	; (80197e8 <RegionUS915ApplyDrOffset+0x40>)
 80197c4:	0092      	lsls	r2, r2, #2
 80197c6:	440a      	add	r2, r1
 80197c8:	4413      	add	r3, r2
 80197ca:	781b      	ldrb	r3, [r3, #0]
 80197cc:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 80197ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	da01      	bge.n	80197da <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 80197d6:	2300      	movs	r3, #0
 80197d8:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 80197da:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 80197dc:	4618      	mov	r0, r3
 80197de:	3714      	adds	r7, #20
 80197e0:	46bd      	mov	sp, r7
 80197e2:	bc80      	pop	{r7}
 80197e4:	4770      	bx	lr
 80197e6:	bf00      	nop
 80197e8:	0801f4c0 	.word	0x0801f4c0

080197ec <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 80197ec:	b480      	push	{r7}
 80197ee:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80197f0:	4b0d      	ldr	r3, [pc, #52]	; (8019828 <rand1+0x3c>)
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	4a0d      	ldr	r2, [pc, #52]	; (801982c <rand1+0x40>)
 80197f6:	fb02 f303 	mul.w	r3, r2, r3
 80197fa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80197fe:	3339      	adds	r3, #57	; 0x39
 8019800:	4a09      	ldr	r2, [pc, #36]	; (8019828 <rand1+0x3c>)
 8019802:	6013      	str	r3, [r2, #0]
 8019804:	4b08      	ldr	r3, [pc, #32]	; (8019828 <rand1+0x3c>)
 8019806:	681a      	ldr	r2, [r3, #0]
 8019808:	2303      	movs	r3, #3
 801980a:	fba3 1302 	umull	r1, r3, r3, r2
 801980e:	1ad1      	subs	r1, r2, r3
 8019810:	0849      	lsrs	r1, r1, #1
 8019812:	440b      	add	r3, r1
 8019814:	0f99      	lsrs	r1, r3, #30
 8019816:	460b      	mov	r3, r1
 8019818:	07db      	lsls	r3, r3, #31
 801981a:	1a5b      	subs	r3, r3, r1
 801981c:	1ad1      	subs	r1, r2, r3
 801981e:	460b      	mov	r3, r1
}
 8019820:	4618      	mov	r0, r3
 8019822:	46bd      	mov	sp, r7
 8019824:	bc80      	pop	{r7}
 8019826:	4770      	bx	lr
 8019828:	20000130 	.word	0x20000130
 801982c:	41c64e6d 	.word	0x41c64e6d

08019830 <srand1>:

void srand1( uint32_t seed )
{
 8019830:	b480      	push	{r7}
 8019832:	b083      	sub	sp, #12
 8019834:	af00      	add	r7, sp, #0
 8019836:	6078      	str	r0, [r7, #4]
    next = seed;
 8019838:	4a03      	ldr	r2, [pc, #12]	; (8019848 <srand1+0x18>)
 801983a:	687b      	ldr	r3, [r7, #4]
 801983c:	6013      	str	r3, [r2, #0]
}
 801983e:	bf00      	nop
 8019840:	370c      	adds	r7, #12
 8019842:	46bd      	mov	sp, r7
 8019844:	bc80      	pop	{r7}
 8019846:	4770      	bx	lr
 8019848:	20000130 	.word	0x20000130

0801984c <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801984c:	b580      	push	{r7, lr}
 801984e:	b082      	sub	sp, #8
 8019850:	af00      	add	r7, sp, #0
 8019852:	6078      	str	r0, [r7, #4]
 8019854:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8019856:	f7ff ffc9 	bl	80197ec <rand1>
 801985a:	4602      	mov	r2, r0
 801985c:	6839      	ldr	r1, [r7, #0]
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	1acb      	subs	r3, r1, r3
 8019862:	3301      	adds	r3, #1
 8019864:	fb92 f1f3 	sdiv	r1, r2, r3
 8019868:	fb01 f303 	mul.w	r3, r1, r3
 801986c:	1ad2      	subs	r2, r2, r3
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	4413      	add	r3, r2
}
 8019872:	4618      	mov	r0, r3
 8019874:	3708      	adds	r7, #8
 8019876:	46bd      	mov	sp, r7
 8019878:	bd80      	pop	{r7, pc}

0801987a <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801987a:	b480      	push	{r7}
 801987c:	b085      	sub	sp, #20
 801987e:	af00      	add	r7, sp, #0
 8019880:	60f8      	str	r0, [r7, #12]
 8019882:	60b9      	str	r1, [r7, #8]
 8019884:	4613      	mov	r3, r2
 8019886:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8019888:	e007      	b.n	801989a <memcpy1+0x20>
    {
        *dst++ = *src++;
 801988a:	68ba      	ldr	r2, [r7, #8]
 801988c:	1c53      	adds	r3, r2, #1
 801988e:	60bb      	str	r3, [r7, #8]
 8019890:	68fb      	ldr	r3, [r7, #12]
 8019892:	1c59      	adds	r1, r3, #1
 8019894:	60f9      	str	r1, [r7, #12]
 8019896:	7812      	ldrb	r2, [r2, #0]
 8019898:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801989a:	88fb      	ldrh	r3, [r7, #6]
 801989c:	1e5a      	subs	r2, r3, #1
 801989e:	80fa      	strh	r2, [r7, #6]
 80198a0:	2b00      	cmp	r3, #0
 80198a2:	d1f2      	bne.n	801988a <memcpy1+0x10>
    }
}
 80198a4:	bf00      	nop
 80198a6:	bf00      	nop
 80198a8:	3714      	adds	r7, #20
 80198aa:	46bd      	mov	sp, r7
 80198ac:	bc80      	pop	{r7}
 80198ae:	4770      	bx	lr

080198b0 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80198b0:	b480      	push	{r7}
 80198b2:	b085      	sub	sp, #20
 80198b4:	af00      	add	r7, sp, #0
 80198b6:	60f8      	str	r0, [r7, #12]
 80198b8:	60b9      	str	r1, [r7, #8]
 80198ba:	4613      	mov	r3, r2
 80198bc:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 80198be:	88fb      	ldrh	r3, [r7, #6]
 80198c0:	3b01      	subs	r3, #1
 80198c2:	68fa      	ldr	r2, [r7, #12]
 80198c4:	4413      	add	r3, r2
 80198c6:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80198c8:	e007      	b.n	80198da <memcpyr+0x2a>
    {
        *dst-- = *src++;
 80198ca:	68ba      	ldr	r2, [r7, #8]
 80198cc:	1c53      	adds	r3, r2, #1
 80198ce:	60bb      	str	r3, [r7, #8]
 80198d0:	68fb      	ldr	r3, [r7, #12]
 80198d2:	1e59      	subs	r1, r3, #1
 80198d4:	60f9      	str	r1, [r7, #12]
 80198d6:	7812      	ldrb	r2, [r2, #0]
 80198d8:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80198da:	88fb      	ldrh	r3, [r7, #6]
 80198dc:	1e5a      	subs	r2, r3, #1
 80198de:	80fa      	strh	r2, [r7, #6]
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	d1f2      	bne.n	80198ca <memcpyr+0x1a>
    }
}
 80198e4:	bf00      	nop
 80198e6:	bf00      	nop
 80198e8:	3714      	adds	r7, #20
 80198ea:	46bd      	mov	sp, r7
 80198ec:	bc80      	pop	{r7}
 80198ee:	4770      	bx	lr

080198f0 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 80198f0:	b480      	push	{r7}
 80198f2:	b083      	sub	sp, #12
 80198f4:	af00      	add	r7, sp, #0
 80198f6:	6078      	str	r0, [r7, #4]
 80198f8:	460b      	mov	r3, r1
 80198fa:	70fb      	strb	r3, [r7, #3]
 80198fc:	4613      	mov	r3, r2
 80198fe:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8019900:	e004      	b.n	801990c <memset1+0x1c>
    {
        *dst++ = value;
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	1c5a      	adds	r2, r3, #1
 8019906:	607a      	str	r2, [r7, #4]
 8019908:	78fa      	ldrb	r2, [r7, #3]
 801990a:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801990c:	883b      	ldrh	r3, [r7, #0]
 801990e:	1e5a      	subs	r2, r3, #1
 8019910:	803a      	strh	r2, [r7, #0]
 8019912:	2b00      	cmp	r3, #0
 8019914:	d1f5      	bne.n	8019902 <memset1+0x12>
    }
}
 8019916:	bf00      	nop
 8019918:	bf00      	nop
 801991a:	370c      	adds	r7, #12
 801991c:	46bd      	mov	sp, r7
 801991e:	bc80      	pop	{r7}
 8019920:	4770      	bx	lr
	...

08019924 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8019924:	b480      	push	{r7}
 8019926:	b085      	sub	sp, #20
 8019928:	af00      	add	r7, sp, #0
 801992a:	6078      	str	r0, [r7, #4]
 801992c:	460b      	mov	r3, r1
 801992e:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8019930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019934:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	2b00      	cmp	r3, #0
 801993a:	d101      	bne.n	8019940 <Crc32+0x1c>
    {
        return 0;
 801993c:	2300      	movs	r3, #0
 801993e:	e026      	b.n	801998e <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8019940:	2300      	movs	r3, #0
 8019942:	817b      	strh	r3, [r7, #10]
 8019944:	e01d      	b.n	8019982 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8019946:	897b      	ldrh	r3, [r7, #10]
 8019948:	687a      	ldr	r2, [r7, #4]
 801994a:	4413      	add	r3, r2
 801994c:	781b      	ldrb	r3, [r3, #0]
 801994e:	461a      	mov	r2, r3
 8019950:	68fb      	ldr	r3, [r7, #12]
 8019952:	4053      	eors	r3, r2
 8019954:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8019956:	2300      	movs	r3, #0
 8019958:	813b      	strh	r3, [r7, #8]
 801995a:	e00c      	b.n	8019976 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 801995c:	68fb      	ldr	r3, [r7, #12]
 801995e:	085a      	lsrs	r2, r3, #1
 8019960:	68fb      	ldr	r3, [r7, #12]
 8019962:	f003 0301 	and.w	r3, r3, #1
 8019966:	425b      	negs	r3, r3
 8019968:	490b      	ldr	r1, [pc, #44]	; (8019998 <Crc32+0x74>)
 801996a:	400b      	ands	r3, r1
 801996c:	4053      	eors	r3, r2
 801996e:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8019970:	893b      	ldrh	r3, [r7, #8]
 8019972:	3301      	adds	r3, #1
 8019974:	813b      	strh	r3, [r7, #8]
 8019976:	893b      	ldrh	r3, [r7, #8]
 8019978:	2b07      	cmp	r3, #7
 801997a:	d9ef      	bls.n	801995c <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 801997c:	897b      	ldrh	r3, [r7, #10]
 801997e:	3301      	adds	r3, #1
 8019980:	817b      	strh	r3, [r7, #10]
 8019982:	897a      	ldrh	r2, [r7, #10]
 8019984:	887b      	ldrh	r3, [r7, #2]
 8019986:	429a      	cmp	r2, r3
 8019988:	d3dd      	bcc.n	8019946 <Crc32+0x22>
        }
    }

    return ~crc;
 801998a:	68fb      	ldr	r3, [r7, #12]
 801998c:	43db      	mvns	r3, r3
}
 801998e:	4618      	mov	r0, r3
 8019990:	3714      	adds	r7, #20
 8019992:	46bd      	mov	sp, r7
 8019994:	bc80      	pop	{r7}
 8019996:	4770      	bx	lr
 8019998:	edb88320 	.word	0xedb88320

0801999c <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 801999c:	b580      	push	{r7, lr}
 801999e:	b084      	sub	sp, #16
 80199a0:	af02      	add	r7, sp, #8
 80199a2:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80199a4:	4a24      	ldr	r2, [pc, #144]	; (8019a38 <RadioInit+0x9c>)
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80199aa:	4b24      	ldr	r3, [pc, #144]	; (8019a3c <RadioInit+0xa0>)
 80199ac:	2200      	movs	r2, #0
 80199ae:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80199b0:	4b22      	ldr	r3, [pc, #136]	; (8019a3c <RadioInit+0xa0>)
 80199b2:	2200      	movs	r2, #0
 80199b4:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80199b6:	4b21      	ldr	r3, [pc, #132]	; (8019a3c <RadioInit+0xa0>)
 80199b8:	2200      	movs	r2, #0
 80199ba:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80199bc:	4b1f      	ldr	r3, [pc, #124]	; (8019a3c <RadioInit+0xa0>)
 80199be:	2200      	movs	r2, #0
 80199c0:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 80199c2:	481f      	ldr	r0, [pc, #124]	; (8019a40 <RadioInit+0xa4>)
 80199c4:	f001 ffc2 	bl	801b94c <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80199c8:	4b1c      	ldr	r3, [pc, #112]	; (8019a3c <RadioInit+0xa0>)
 80199ca:	2200      	movs	r2, #0
 80199cc:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 80199ce:	4b1b      	ldr	r3, [pc, #108]	; (8019a3c <RadioInit+0xa0>)
 80199d0:	2200      	movs	r2, #0
 80199d2:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 80199d4:	f002 fa56 	bl	801be84 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80199d8:	2100      	movs	r1, #0
 80199da:	2000      	movs	r0, #0
 80199dc:	f002 fe22 	bl	801c624 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80199e0:	2204      	movs	r2, #4
 80199e2:	2100      	movs	r1, #0
 80199e4:	2001      	movs	r0, #1
 80199e6:	f002 fbdf 	bl	801c1a8 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80199ea:	2300      	movs	r3, #0
 80199ec:	2200      	movs	r2, #0
 80199ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80199f2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80199f6:	f002 fb0f 	bl	801c018 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 80199fa:	f000 fe99 	bl	801a730 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80199fe:	2300      	movs	r3, #0
 8019a00:	9300      	str	r3, [sp, #0]
 8019a02:	4b10      	ldr	r3, [pc, #64]	; (8019a44 <RadioInit+0xa8>)
 8019a04:	2200      	movs	r2, #0
 8019a06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8019a0a:	480f      	ldr	r0, [pc, #60]	; (8019a48 <RadioInit+0xac>)
 8019a0c:	f004 f82c 	bl	801da68 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8019a10:	2300      	movs	r3, #0
 8019a12:	9300      	str	r3, [sp, #0]
 8019a14:	4b0d      	ldr	r3, [pc, #52]	; (8019a4c <RadioInit+0xb0>)
 8019a16:	2200      	movs	r2, #0
 8019a18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8019a1c:	480c      	ldr	r0, [pc, #48]	; (8019a50 <RadioInit+0xb4>)
 8019a1e:	f004 f823 	bl	801da68 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8019a22:	4809      	ldr	r0, [pc, #36]	; (8019a48 <RadioInit+0xac>)
 8019a24:	f004 f8c4 	bl	801dbb0 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8019a28:	4809      	ldr	r0, [pc, #36]	; (8019a50 <RadioInit+0xb4>)
 8019a2a:	f004 f8c1 	bl	801dbb0 <UTIL_TIMER_Stop>
}
 8019a2e:	bf00      	nop
 8019a30:	3708      	adds	r7, #8
 8019a32:	46bd      	mov	sp, r7
 8019a34:	bd80      	pop	{r7, pc}
 8019a36:	bf00      	nop
 8019a38:	20001cec 	.word	0x20001cec
 8019a3c:	20001cf0 	.word	0x20001cf0
 8019a40:	0801ab29 	.word	0x0801ab29
 8019a44:	0801aab1 	.word	0x0801aab1
 8019a48:	20001d4c 	.word	0x20001d4c
 8019a4c:	0801aac5 	.word	0x0801aac5
 8019a50:	20001d64 	.word	0x20001d64

08019a54 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8019a54:	b580      	push	{r7, lr}
 8019a56:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8019a58:	f001 ffc0 	bl	801b9dc <SUBGRF_GetOperatingMode>
 8019a5c:	4603      	mov	r3, r0
 8019a5e:	2b07      	cmp	r3, #7
 8019a60:	d00a      	beq.n	8019a78 <RadioGetStatus+0x24>
 8019a62:	2b07      	cmp	r3, #7
 8019a64:	dc0a      	bgt.n	8019a7c <RadioGetStatus+0x28>
 8019a66:	2b04      	cmp	r3, #4
 8019a68:	d002      	beq.n	8019a70 <RadioGetStatus+0x1c>
 8019a6a:	2b05      	cmp	r3, #5
 8019a6c:	d002      	beq.n	8019a74 <RadioGetStatus+0x20>
 8019a6e:	e005      	b.n	8019a7c <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8019a70:	2302      	movs	r3, #2
 8019a72:	e004      	b.n	8019a7e <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8019a74:	2301      	movs	r3, #1
 8019a76:	e002      	b.n	8019a7e <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8019a78:	2303      	movs	r3, #3
 8019a7a:	e000      	b.n	8019a7e <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8019a7c:	2300      	movs	r3, #0
    }
}
 8019a7e:	4618      	mov	r0, r3
 8019a80:	bd80      	pop	{r7, pc}
	...

08019a84 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8019a84:	b580      	push	{r7, lr}
 8019a86:	b082      	sub	sp, #8
 8019a88:	af00      	add	r7, sp, #0
 8019a8a:	4603      	mov	r3, r0
 8019a8c:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8019a8e:	4a2a      	ldr	r2, [pc, #168]	; (8019b38 <RadioSetModem+0xb4>)
 8019a90:	79fb      	ldrb	r3, [r7, #7]
 8019a92:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8019a94:	79fb      	ldrb	r3, [r7, #7]
 8019a96:	4618      	mov	r0, r3
 8019a98:	f003 f997 	bl	801cdca <RFW_SetRadioModem>
    switch( modem )
 8019a9c:	79fb      	ldrb	r3, [r7, #7]
 8019a9e:	2b05      	cmp	r3, #5
 8019aa0:	d80e      	bhi.n	8019ac0 <RadioSetModem+0x3c>
 8019aa2:	a201      	add	r2, pc, #4	; (adr r2, 8019aa8 <RadioSetModem+0x24>)
 8019aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019aa8:	08019acf 	.word	0x08019acf
 8019aac:	08019add 	.word	0x08019add
 8019ab0:	08019ac1 	.word	0x08019ac1
 8019ab4:	08019b03 	.word	0x08019b03
 8019ab8:	08019b11 	.word	0x08019b11
 8019abc:	08019b1f 	.word	0x08019b1f
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8019ac0:	2003      	movs	r0, #3
 8019ac2:	f002 fb4b 	bl	801c15c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019ac6:	4b1c      	ldr	r3, [pc, #112]	; (8019b38 <RadioSetModem+0xb4>)
 8019ac8:	2200      	movs	r2, #0
 8019aca:	735a      	strb	r2, [r3, #13]
        break;
 8019acc:	e02f      	b.n	8019b2e <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8019ace:	2000      	movs	r0, #0
 8019ad0:	f002 fb44 	bl	801c15c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019ad4:	4b18      	ldr	r3, [pc, #96]	; (8019b38 <RadioSetModem+0xb4>)
 8019ad6:	2200      	movs	r2, #0
 8019ad8:	735a      	strb	r2, [r3, #13]
        break;
 8019ada:	e028      	b.n	8019b2e <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8019adc:	2001      	movs	r0, #1
 8019ade:	f002 fb3d 	bl	801c15c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8019ae2:	4b15      	ldr	r3, [pc, #84]	; (8019b38 <RadioSetModem+0xb4>)
 8019ae4:	7b5a      	ldrb	r2, [r3, #13]
 8019ae6:	4b14      	ldr	r3, [pc, #80]	; (8019b38 <RadioSetModem+0xb4>)
 8019ae8:	7b1b      	ldrb	r3, [r3, #12]
 8019aea:	429a      	cmp	r2, r3
 8019aec:	d01e      	beq.n	8019b2c <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8019aee:	4b12      	ldr	r3, [pc, #72]	; (8019b38 <RadioSetModem+0xb4>)
 8019af0:	7b1a      	ldrb	r2, [r3, #12]
 8019af2:	4b11      	ldr	r3, [pc, #68]	; (8019b38 <RadioSetModem+0xb4>)
 8019af4:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8019af6:	4b10      	ldr	r3, [pc, #64]	; (8019b38 <RadioSetModem+0xb4>)
 8019af8:	7b5b      	ldrb	r3, [r3, #13]
 8019afa:	4618      	mov	r0, r3
 8019afc:	f000 ffa2 	bl	801aa44 <RadioSetPublicNetwork>
        }
        break;
 8019b00:	e014      	b.n	8019b2c <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8019b02:	2002      	movs	r0, #2
 8019b04:	f002 fb2a 	bl	801c15c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019b08:	4b0b      	ldr	r3, [pc, #44]	; (8019b38 <RadioSetModem+0xb4>)
 8019b0a:	2200      	movs	r2, #0
 8019b0c:	735a      	strb	r2, [r3, #13]
        break;
 8019b0e:	e00e      	b.n	8019b2e <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8019b10:	2002      	movs	r0, #2
 8019b12:	f002 fb23 	bl	801c15c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019b16:	4b08      	ldr	r3, [pc, #32]	; (8019b38 <RadioSetModem+0xb4>)
 8019b18:	2200      	movs	r2, #0
 8019b1a:	735a      	strb	r2, [r3, #13]
        break;
 8019b1c:	e007      	b.n	8019b2e <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8019b1e:	2000      	movs	r0, #0
 8019b20:	f002 fb1c 	bl	801c15c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019b24:	4b04      	ldr	r3, [pc, #16]	; (8019b38 <RadioSetModem+0xb4>)
 8019b26:	2200      	movs	r2, #0
 8019b28:	735a      	strb	r2, [r3, #13]
        break;
 8019b2a:	e000      	b.n	8019b2e <RadioSetModem+0xaa>
        break;
 8019b2c:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8019b2e:	bf00      	nop
 8019b30:	3708      	adds	r7, #8
 8019b32:	46bd      	mov	sp, r7
 8019b34:	bd80      	pop	{r7, pc}
 8019b36:	bf00      	nop
 8019b38:	20001cf0 	.word	0x20001cf0

08019b3c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8019b3c:	b580      	push	{r7, lr}
 8019b3e:	b082      	sub	sp, #8
 8019b40:	af00      	add	r7, sp, #0
 8019b42:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8019b44:	6878      	ldr	r0, [r7, #4]
 8019b46:	f002 fac3 	bl	801c0d0 <SUBGRF_SetRfFrequency>
}
 8019b4a:	bf00      	nop
 8019b4c:	3708      	adds	r7, #8
 8019b4e:	46bd      	mov	sp, r7
 8019b50:	bd80      	pop	{r7, pc}

08019b52 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8019b52:	b580      	push	{r7, lr}
 8019b54:	b090      	sub	sp, #64	; 0x40
 8019b56:	af0a      	add	r7, sp, #40	; 0x28
 8019b58:	60f8      	str	r0, [r7, #12]
 8019b5a:	60b9      	str	r1, [r7, #8]
 8019b5c:	603b      	str	r3, [r7, #0]
 8019b5e:	4613      	mov	r3, r2
 8019b60:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8019b62:	2301      	movs	r3, #1
 8019b64:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8019b66:	2300      	movs	r3, #0
 8019b68:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8019b6a:	2300      	movs	r3, #0
 8019b6c:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8019b6e:	f000 fdf2 	bl	801a756 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8019b72:	2000      	movs	r0, #0
 8019b74:	f7ff ff86 	bl	8019a84 <RadioSetModem>

    RadioSetChannel( freq );
 8019b78:	68f8      	ldr	r0, [r7, #12]
 8019b7a:	f7ff ffdf 	bl	8019b3c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8019b7e:	2301      	movs	r3, #1
 8019b80:	9309      	str	r3, [sp, #36]	; 0x24
 8019b82:	2300      	movs	r3, #0
 8019b84:	9308      	str	r3, [sp, #32]
 8019b86:	2300      	movs	r3, #0
 8019b88:	9307      	str	r3, [sp, #28]
 8019b8a:	2300      	movs	r3, #0
 8019b8c:	9306      	str	r3, [sp, #24]
 8019b8e:	2300      	movs	r3, #0
 8019b90:	9305      	str	r3, [sp, #20]
 8019b92:	2300      	movs	r3, #0
 8019b94:	9304      	str	r3, [sp, #16]
 8019b96:	2300      	movs	r3, #0
 8019b98:	9303      	str	r3, [sp, #12]
 8019b9a:	2300      	movs	r3, #0
 8019b9c:	9302      	str	r3, [sp, #8]
 8019b9e:	2303      	movs	r3, #3
 8019ba0:	9301      	str	r3, [sp, #4]
 8019ba2:	68bb      	ldr	r3, [r7, #8]
 8019ba4:	9300      	str	r3, [sp, #0]
 8019ba6:	2300      	movs	r3, #0
 8019ba8:	f44f 7216 	mov.w	r2, #600	; 0x258
 8019bac:	68b9      	ldr	r1, [r7, #8]
 8019bae:	2000      	movs	r0, #0
 8019bb0:	f000 f83c 	bl	8019c2c <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8019bb4:	2000      	movs	r0, #0
 8019bb6:	f000 fdd5 	bl	801a764 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8019bba:	f000 ff71 	bl	801aaa0 <RadioGetWakeupTime>
 8019bbe:	4603      	mov	r3, r0
 8019bc0:	4618      	mov	r0, r3
 8019bc2:	f7e8 fe1b 	bl	80027fc <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8019bc6:	f004 f90d 	bl	801dde4 <UTIL_TIMER_GetCurrentTime>
 8019bca:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8019bcc:	e00d      	b.n	8019bea <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8019bce:	2000      	movs	r0, #0
 8019bd0:	f000 feb6 	bl	801a940 <RadioRssi>
 8019bd4:	4603      	mov	r3, r0
 8019bd6:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8019bd8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8019bdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019be0:	429a      	cmp	r2, r3
 8019be2:	dd02      	ble.n	8019bea <RadioIsChannelFree+0x98>
        {
            status = false;
 8019be4:	2300      	movs	r3, #0
 8019be6:	75fb      	strb	r3, [r7, #23]
            break;
 8019be8:	e006      	b.n	8019bf8 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8019bea:	6938      	ldr	r0, [r7, #16]
 8019bec:	f004 f90c 	bl	801de08 <UTIL_TIMER_GetElapsedTime>
 8019bf0:	4602      	mov	r2, r0
 8019bf2:	683b      	ldr	r3, [r7, #0]
 8019bf4:	4293      	cmp	r3, r2
 8019bf6:	d8ea      	bhi.n	8019bce <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8019bf8:	f000 fdad 	bl	801a756 <RadioStandby>

    return status;
 8019bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8019bfe:	4618      	mov	r0, r3
 8019c00:	3718      	adds	r7, #24
 8019c02:	46bd      	mov	sp, r7
 8019c04:	bd80      	pop	{r7, pc}

08019c06 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8019c06:	b580      	push	{r7, lr}
 8019c08:	b082      	sub	sp, #8
 8019c0a:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8019c0c:	2300      	movs	r3, #0
 8019c0e:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019c10:	2300      	movs	r3, #0
 8019c12:	2200      	movs	r2, #0
 8019c14:	2100      	movs	r1, #0
 8019c16:	2000      	movs	r0, #0
 8019c18:	f002 f9fe 	bl	801c018 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8019c1c:	f001 ffaf 	bl	801bb7e <SUBGRF_GetRandom>
 8019c20:	6078      	str	r0, [r7, #4]

    return rnd;
 8019c22:	687b      	ldr	r3, [r7, #4]
}
 8019c24:	4618      	mov	r0, r3
 8019c26:	3708      	adds	r7, #8
 8019c28:	46bd      	mov	sp, r7
 8019c2a:	bd80      	pop	{r7, pc}

08019c2c <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8019c2c:	b580      	push	{r7, lr}
 8019c2e:	b08a      	sub	sp, #40	; 0x28
 8019c30:	af00      	add	r7, sp, #0
 8019c32:	60b9      	str	r1, [r7, #8]
 8019c34:	607a      	str	r2, [r7, #4]
 8019c36:	461a      	mov	r2, r3
 8019c38:	4603      	mov	r3, r0
 8019c3a:	73fb      	strb	r3, [r7, #15]
 8019c3c:	4613      	mov	r3, r2
 8019c3e:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8019c40:	4ab9      	ldr	r2, [pc, #740]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019c42:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019c46:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8019c48:	f003 f87d 	bl	801cd46 <RFW_DeInit>
    if( rxContinuous == true )
 8019c4c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019c50:	2b00      	cmp	r3, #0
 8019c52:	d001      	beq.n	8019c58 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8019c54:	2300      	movs	r3, #0
 8019c56:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8019c58:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019c5c:	2b00      	cmp	r3, #0
 8019c5e:	d004      	beq.n	8019c6a <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8019c60:	4ab2      	ldr	r2, [pc, #712]	; (8019f2c <RadioSetRxConfig+0x300>)
 8019c62:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8019c66:	7013      	strb	r3, [r2, #0]
 8019c68:	e002      	b.n	8019c70 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8019c6a:	4bb0      	ldr	r3, [pc, #704]	; (8019f2c <RadioSetRxConfig+0x300>)
 8019c6c:	22ff      	movs	r2, #255	; 0xff
 8019c6e:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8019c70:	7bfb      	ldrb	r3, [r7, #15]
 8019c72:	2b05      	cmp	r3, #5
 8019c74:	d009      	beq.n	8019c8a <RadioSetRxConfig+0x5e>
 8019c76:	2b05      	cmp	r3, #5
 8019c78:	f300 81d7 	bgt.w	801a02a <RadioSetRxConfig+0x3fe>
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	f000 80bf 	beq.w	8019e00 <RadioSetRxConfig+0x1d4>
 8019c82:	2b01      	cmp	r3, #1
 8019c84:	f000 8124 	beq.w	8019ed0 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8019c88:	e1cf      	b.n	801a02a <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8019c8a:	2001      	movs	r0, #1
 8019c8c:	f002 f8bc 	bl	801be08 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019c90:	4ba5      	ldr	r3, [pc, #660]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019c92:	2200      	movs	r2, #0
 8019c94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8019c98:	4aa3      	ldr	r2, [pc, #652]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8019c9e:	4ba2      	ldr	r3, [pc, #648]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019ca0:	2209      	movs	r2, #9
 8019ca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8019ca6:	4ba0      	ldr	r3, [pc, #640]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019ca8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8019cac:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019cae:	68b8      	ldr	r0, [r7, #8]
 8019cb0:	f002 ff7c 	bl	801cbac <SUBGRF_GetFskBandwidthRegValue>
 8019cb4:	4603      	mov	r3, r0
 8019cb6:	461a      	mov	r2, r3
 8019cb8:	4b9b      	ldr	r3, [pc, #620]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019cbe:	4b9a      	ldr	r3, [pc, #616]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019cc0:	2200      	movs	r2, #0
 8019cc2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019cc4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019cc6:	00db      	lsls	r3, r3, #3
 8019cc8:	b29a      	uxth	r2, r3
 8019cca:	4b97      	ldr	r3, [pc, #604]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019ccc:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8019cce:	4b96      	ldr	r3, [pc, #600]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019cd0:	2200      	movs	r2, #0
 8019cd2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8019cd4:	4b94      	ldr	r3, [pc, #592]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019cd6:	2210      	movs	r2, #16
 8019cd8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8019cda:	4b93      	ldr	r3, [pc, #588]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019cdc:	2200      	movs	r2, #0
 8019cde:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8019ce0:	4b91      	ldr	r3, [pc, #580]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019ce2:	2200      	movs	r2, #0
 8019ce4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8019ce6:	4b91      	ldr	r3, [pc, #580]	; (8019f2c <RadioSetRxConfig+0x300>)
 8019ce8:	781a      	ldrb	r2, [r3, #0]
 8019cea:	4b8f      	ldr	r3, [pc, #572]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019cec:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8019cee:	4b8e      	ldr	r3, [pc, #568]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019cf0:	2201      	movs	r2, #1
 8019cf2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8019cf4:	4b8c      	ldr	r3, [pc, #560]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019cf6:	2200      	movs	r2, #0
 8019cf8:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8019cfa:	2005      	movs	r0, #5
 8019cfc:	f7ff fec2 	bl	8019a84 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019d00:	488b      	ldr	r0, [pc, #556]	; (8019f30 <RadioSetRxConfig+0x304>)
 8019d02:	f002 fb1f 	bl	801c344 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019d06:	488b      	ldr	r0, [pc, #556]	; (8019f34 <RadioSetRxConfig+0x308>)
 8019d08:	f002 fbee 	bl	801c4e8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019d0c:	4a8a      	ldr	r2, [pc, #552]	; (8019f38 <RadioSetRxConfig+0x30c>)
 8019d0e:	f107 031c 	add.w	r3, r7, #28
 8019d12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019d16:	e883 0003 	stmia.w	r3, {r0, r1}
 8019d1a:	f107 031c 	add.w	r3, r7, #28
 8019d1e:	4618      	mov	r0, r3
 8019d20:	f001 feab 	bl	801ba7a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019d24:	f240 10ff 	movw	r0, #511	; 0x1ff
 8019d28:	f001 fef6 	bl	801bb18 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8019d2c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8019d30:	f000 fe25 	bl	801a97e <RadioRead>
 8019d34:	4603      	mov	r3, r0
 8019d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8019d3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d3e:	f023 0310 	bic.w	r3, r3, #16
 8019d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8019d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d4a:	4619      	mov	r1, r3
 8019d4c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8019d50:	f000 fe03 	bl	801a95a <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8019d54:	2104      	movs	r1, #4
 8019d56:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8019d5a:	f000 fdfe 	bl	801a95a <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8019d5e:	f640 009b 	movw	r0, #2203	; 0x89b
 8019d62:	f000 fe0c 	bl	801a97e <RadioRead>
 8019d66:	4603      	mov	r3, r0
 8019d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8019d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d70:	f023 031c 	bic.w	r3, r3, #28
 8019d74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8019d78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d7c:	f043 0308 	orr.w	r3, r3, #8
 8019d80:	b2db      	uxtb	r3, r3
 8019d82:	4619      	mov	r1, r3
 8019d84:	f640 009b 	movw	r0, #2203	; 0x89b
 8019d88:	f000 fde7 	bl	801a95a <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8019d8c:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8019d90:	f000 fdf5 	bl	801a97e <RadioRead>
 8019d94:	4603      	mov	r3, r0
 8019d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8019d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d9e:	f023 0318 	bic.w	r3, r3, #24
 8019da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8019da6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019daa:	f043 0318 	orr.w	r3, r3, #24
 8019dae:	b2db      	uxtb	r3, r3
 8019db0:	4619      	mov	r1, r3
 8019db2:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8019db6:	f000 fdd0 	bl	801a95a <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8019dba:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8019dbe:	f000 fdde 	bl	801a97e <RadioRead>
 8019dc2:	4603      	mov	r3, r0
 8019dc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8019dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8019dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019dd8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8019ddc:	b2db      	uxtb	r3, r3
 8019dde:	4619      	mov	r1, r3
 8019de0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8019de4:	f000 fdb9 	bl	801a95a <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8019de8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019dea:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8019dee:	fb02 f303 	mul.w	r3, r2, r3
 8019df2:	461a      	mov	r2, r3
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8019dfa:	4a4b      	ldr	r2, [pc, #300]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019dfc:	6093      	str	r3, [r2, #8]
            break;
 8019dfe:	e115      	b.n	801a02c <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8019e00:	2000      	movs	r0, #0
 8019e02:	f002 f801 	bl	801be08 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019e06:	4b48      	ldr	r3, [pc, #288]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019e08:	2200      	movs	r2, #0
 8019e0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8019e0e:	4a46      	ldr	r2, [pc, #280]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8019e14:	4b44      	ldr	r3, [pc, #272]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019e16:	220b      	movs	r2, #11
 8019e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019e1c:	68b8      	ldr	r0, [r7, #8]
 8019e1e:	f002 fec5 	bl	801cbac <SUBGRF_GetFskBandwidthRegValue>
 8019e22:	4603      	mov	r3, r0
 8019e24:	461a      	mov	r2, r3
 8019e26:	4b40      	ldr	r3, [pc, #256]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019e2c:	4b3e      	ldr	r3, [pc, #248]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019e2e:	2200      	movs	r2, #0
 8019e30:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019e32:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019e34:	00db      	lsls	r3, r3, #3
 8019e36:	b29a      	uxth	r2, r3
 8019e38:	4b3b      	ldr	r3, [pc, #236]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019e3a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8019e3c:	4b3a      	ldr	r3, [pc, #232]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019e3e:	2204      	movs	r2, #4
 8019e40:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8019e42:	4b39      	ldr	r3, [pc, #228]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019e44:	2218      	movs	r2, #24
 8019e46:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8019e48:	4b37      	ldr	r3, [pc, #220]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019e4a:	2200      	movs	r2, #0
 8019e4c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8019e4e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019e52:	f083 0301 	eor.w	r3, r3, #1
 8019e56:	b2db      	uxtb	r3, r3
 8019e58:	461a      	mov	r2, r3
 8019e5a:	4b33      	ldr	r3, [pc, #204]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019e5c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8019e5e:	4b33      	ldr	r3, [pc, #204]	; (8019f2c <RadioSetRxConfig+0x300>)
 8019e60:	781a      	ldrb	r2, [r3, #0]
 8019e62:	4b31      	ldr	r3, [pc, #196]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019e64:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8019e66:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	d003      	beq.n	8019e76 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8019e6e:	4b2e      	ldr	r3, [pc, #184]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019e70:	22f2      	movs	r2, #242	; 0xf2
 8019e72:	75da      	strb	r2, [r3, #23]
 8019e74:	e002      	b.n	8019e7c <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8019e76:	4b2c      	ldr	r3, [pc, #176]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019e78:	2201      	movs	r2, #1
 8019e7a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8019e7c:	4b2a      	ldr	r3, [pc, #168]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019e7e:	2201      	movs	r2, #1
 8019e80:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8019e82:	f000 fc68 	bl	801a756 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8019e86:	2000      	movs	r0, #0
 8019e88:	f7ff fdfc 	bl	8019a84 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019e8c:	4828      	ldr	r0, [pc, #160]	; (8019f30 <RadioSetRxConfig+0x304>)
 8019e8e:	f002 fa59 	bl	801c344 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019e92:	4828      	ldr	r0, [pc, #160]	; (8019f34 <RadioSetRxConfig+0x308>)
 8019e94:	f002 fb28 	bl	801c4e8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019e98:	4a28      	ldr	r2, [pc, #160]	; (8019f3c <RadioSetRxConfig+0x310>)
 8019e9a:	f107 0314 	add.w	r3, r7, #20
 8019e9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019ea2:	e883 0003 	stmia.w	r3, {r0, r1}
 8019ea6:	f107 0314 	add.w	r3, r7, #20
 8019eaa:	4618      	mov	r0, r3
 8019eac:	f001 fde5 	bl	801ba7a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019eb0:	f240 10ff 	movw	r0, #511	; 0x1ff
 8019eb4:	f001 fe30 	bl	801bb18 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8019eb8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019eba:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8019ebe:	fb02 f303 	mul.w	r3, r2, r3
 8019ec2:	461a      	mov	r2, r3
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8019eca:	4a17      	ldr	r2, [pc, #92]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019ecc:	6093      	str	r3, [r2, #8]
            break;
 8019ece:	e0ad      	b.n	801a02c <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8019ed0:	2000      	movs	r0, #0
 8019ed2:	f001 ff99 	bl	801be08 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019ed6:	4b14      	ldr	r3, [pc, #80]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019ed8:	2201      	movs	r2, #1
 8019eda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	b2da      	uxtb	r2, r3
 8019ee2:	4b11      	ldr	r3, [pc, #68]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019ee4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8019ee8:	4a15      	ldr	r2, [pc, #84]	; (8019f40 <RadioSetRxConfig+0x314>)
 8019eea:	68bb      	ldr	r3, [r7, #8]
 8019eec:	4413      	add	r3, r2
 8019eee:	781a      	ldrb	r2, [r3, #0]
 8019ef0:	4b0d      	ldr	r3, [pc, #52]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019ef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8019ef6:	4a0c      	ldr	r2, [pc, #48]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019ef8:	7bbb      	ldrb	r3, [r7, #14]
 8019efa:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019efe:	68bb      	ldr	r3, [r7, #8]
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	d105      	bne.n	8019f10 <RadioSetRxConfig+0x2e4>
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	2b0b      	cmp	r3, #11
 8019f08:	d008      	beq.n	8019f1c <RadioSetRxConfig+0x2f0>
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	2b0c      	cmp	r3, #12
 8019f0e:	d005      	beq.n	8019f1c <RadioSetRxConfig+0x2f0>
 8019f10:	68bb      	ldr	r3, [r7, #8]
 8019f12:	2b01      	cmp	r3, #1
 8019f14:	d116      	bne.n	8019f44 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	2b0c      	cmp	r3, #12
 8019f1a:	d113      	bne.n	8019f44 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8019f1c:	4b02      	ldr	r3, [pc, #8]	; (8019f28 <RadioSetRxConfig+0x2fc>)
 8019f1e:	2201      	movs	r2, #1
 8019f20:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8019f24:	e012      	b.n	8019f4c <RadioSetRxConfig+0x320>
 8019f26:	bf00      	nop
 8019f28:	20001cf0 	.word	0x20001cf0
 8019f2c:	20000134 	.word	0x20000134
 8019f30:	20001d28 	.word	0x20001d28
 8019f34:	20001cfe 	.word	0x20001cfe
 8019f38:	0801eec4 	.word	0x0801eec4
 8019f3c:	0801eecc 	.word	0x0801eecc
 8019f40:	0801f580 	.word	0x0801f580
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8019f44:	4b3b      	ldr	r3, [pc, #236]	; (801a034 <RadioSetRxConfig+0x408>)
 8019f46:	2200      	movs	r2, #0
 8019f48:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019f4c:	4b39      	ldr	r3, [pc, #228]	; (801a034 <RadioSetRxConfig+0x408>)
 8019f4e:	2201      	movs	r2, #1
 8019f50:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019f52:	4b38      	ldr	r3, [pc, #224]	; (801a034 <RadioSetRxConfig+0x408>)
 8019f54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8019f58:	2b05      	cmp	r3, #5
 8019f5a:	d004      	beq.n	8019f66 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8019f5c:	4b35      	ldr	r3, [pc, #212]	; (801a034 <RadioSetRxConfig+0x408>)
 8019f5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019f62:	2b06      	cmp	r3, #6
 8019f64:	d10a      	bne.n	8019f7c <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8019f66:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019f68:	2b0b      	cmp	r3, #11
 8019f6a:	d803      	bhi.n	8019f74 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8019f6c:	4b31      	ldr	r3, [pc, #196]	; (801a034 <RadioSetRxConfig+0x408>)
 8019f6e:	220c      	movs	r2, #12
 8019f70:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8019f72:	e006      	b.n	8019f82 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019f74:	4a2f      	ldr	r2, [pc, #188]	; (801a034 <RadioSetRxConfig+0x408>)
 8019f76:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019f78:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8019f7a:	e002      	b.n	8019f82 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019f7c:	4a2d      	ldr	r2, [pc, #180]	; (801a034 <RadioSetRxConfig+0x408>)
 8019f7e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019f80:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8019f82:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8019f86:	4b2b      	ldr	r3, [pc, #172]	; (801a034 <RadioSetRxConfig+0x408>)
 8019f88:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8019f8a:	4b2b      	ldr	r3, [pc, #172]	; (801a038 <RadioSetRxConfig+0x40c>)
 8019f8c:	781a      	ldrb	r2, [r3, #0]
 8019f8e:	4b29      	ldr	r3, [pc, #164]	; (801a034 <RadioSetRxConfig+0x408>)
 8019f90:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8019f92:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8019f96:	4b27      	ldr	r3, [pc, #156]	; (801a034 <RadioSetRxConfig+0x408>)
 8019f98:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8019f9c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8019fa0:	4b24      	ldr	r3, [pc, #144]	; (801a034 <RadioSetRxConfig+0x408>)
 8019fa2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8019fa6:	f000 fbd6 	bl	801a756 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8019faa:	2001      	movs	r0, #1
 8019fac:	f7ff fd6a 	bl	8019a84 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019fb0:	4822      	ldr	r0, [pc, #136]	; (801a03c <RadioSetRxConfig+0x410>)
 8019fb2:	f002 f9c7 	bl	801c344 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019fb6:	4822      	ldr	r0, [pc, #136]	; (801a040 <RadioSetRxConfig+0x414>)
 8019fb8:	f002 fa96 	bl	801c4e8 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8019fbc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019fbe:	b2db      	uxtb	r3, r3
 8019fc0:	4618      	mov	r0, r3
 8019fc2:	f001 ff30 	bl	801be26 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8019fc6:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8019fca:	f002 fbe9 	bl	801c7a0 <SUBGRF_ReadRegister>
 8019fce:	4603      	mov	r3, r0
 8019fd0:	f003 0301 	and.w	r3, r3, #1
 8019fd4:	b2db      	uxtb	r3, r3
 8019fd6:	4619      	mov	r1, r3
 8019fd8:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8019fdc:	f002 fbcc 	bl	801c778 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8019fe0:	4b14      	ldr	r3, [pc, #80]	; (801a034 <RadioSetRxConfig+0x408>)
 8019fe2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8019fe6:	2b01      	cmp	r3, #1
 8019fe8:	d10d      	bne.n	801a006 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8019fea:	f240 7036 	movw	r0, #1846	; 0x736
 8019fee:	f002 fbd7 	bl	801c7a0 <SUBGRF_ReadRegister>
 8019ff2:	4603      	mov	r3, r0
 8019ff4:	f023 0304 	bic.w	r3, r3, #4
 8019ff8:	b2db      	uxtb	r3, r3
 8019ffa:	4619      	mov	r1, r3
 8019ffc:	f240 7036 	movw	r0, #1846	; 0x736
 801a000:	f002 fbba 	bl	801c778 <SUBGRF_WriteRegister>
 801a004:	e00c      	b.n	801a020 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801a006:	f240 7036 	movw	r0, #1846	; 0x736
 801a00a:	f002 fbc9 	bl	801c7a0 <SUBGRF_ReadRegister>
 801a00e:	4603      	mov	r3, r0
 801a010:	f043 0304 	orr.w	r3, r3, #4
 801a014:	b2db      	uxtb	r3, r3
 801a016:	4619      	mov	r1, r3
 801a018:	f240 7036 	movw	r0, #1846	; 0x736
 801a01c:	f002 fbac 	bl	801c778 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801a020:	4b04      	ldr	r3, [pc, #16]	; (801a034 <RadioSetRxConfig+0x408>)
 801a022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a026:	609a      	str	r2, [r3, #8]
            break;
 801a028:	e000      	b.n	801a02c <RadioSetRxConfig+0x400>
            break;
 801a02a:	bf00      	nop
    }
}
 801a02c:	bf00      	nop
 801a02e:	3728      	adds	r7, #40	; 0x28
 801a030:	46bd      	mov	sp, r7
 801a032:	bd80      	pop	{r7, pc}
 801a034:	20001cf0 	.word	0x20001cf0
 801a038:	20000134 	.word	0x20000134
 801a03c:	20001d28 	.word	0x20001d28
 801a040:	20001cfe 	.word	0x20001cfe

0801a044 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801a044:	b580      	push	{r7, lr}
 801a046:	b086      	sub	sp, #24
 801a048:	af00      	add	r7, sp, #0
 801a04a:	60ba      	str	r2, [r7, #8]
 801a04c:	607b      	str	r3, [r7, #4]
 801a04e:	4603      	mov	r3, r0
 801a050:	73fb      	strb	r3, [r7, #15]
 801a052:	460b      	mov	r3, r1
 801a054:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 801a056:	f002 fe76 	bl	801cd46 <RFW_DeInit>
    switch( modem )
 801a05a:	7bfb      	ldrb	r3, [r7, #15]
 801a05c:	2b04      	cmp	r3, #4
 801a05e:	f000 80c7 	beq.w	801a1f0 <RadioSetTxConfig+0x1ac>
 801a062:	2b04      	cmp	r3, #4
 801a064:	f300 80d6 	bgt.w	801a214 <RadioSetTxConfig+0x1d0>
 801a068:	2b00      	cmp	r3, #0
 801a06a:	d002      	beq.n	801a072 <RadioSetTxConfig+0x2e>
 801a06c:	2b01      	cmp	r3, #1
 801a06e:	d059      	beq.n	801a124 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801a070:	e0d0      	b.n	801a214 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a072:	4b77      	ldr	r3, [pc, #476]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a074:	2200      	movs	r2, #0
 801a076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a07a:	4a75      	ldr	r2, [pc, #468]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a07c:	6a3b      	ldr	r3, [r7, #32]
 801a07e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801a080:	4b73      	ldr	r3, [pc, #460]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a082:	220b      	movs	r2, #11
 801a084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a088:	6878      	ldr	r0, [r7, #4]
 801a08a:	f002 fd8f 	bl	801cbac <SUBGRF_GetFskBandwidthRegValue>
 801a08e:	4603      	mov	r3, r0
 801a090:	461a      	mov	r2, r3
 801a092:	4b6f      	ldr	r3, [pc, #444]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801a098:	4a6d      	ldr	r2, [pc, #436]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a09a:	68bb      	ldr	r3, [r7, #8]
 801a09c:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a09e:	4b6c      	ldr	r3, [pc, #432]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a0a0:	2200      	movs	r2, #0
 801a0a2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a0a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a0a6:	00db      	lsls	r3, r3, #3
 801a0a8:	b29a      	uxth	r2, r3
 801a0aa:	4b69      	ldr	r3, [pc, #420]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a0ac:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801a0ae:	4b68      	ldr	r3, [pc, #416]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a0b0:	2204      	movs	r2, #4
 801a0b2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801a0b4:	4b66      	ldr	r3, [pc, #408]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a0b6:	2218      	movs	r2, #24
 801a0b8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a0ba:	4b65      	ldr	r3, [pc, #404]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a0bc:	2200      	movs	r2, #0
 801a0be:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801a0c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a0c4:	f083 0301 	eor.w	r3, r3, #1
 801a0c8:	b2db      	uxtb	r3, r3
 801a0ca:	461a      	mov	r2, r3
 801a0cc:	4b60      	ldr	r3, [pc, #384]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a0ce:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801a0d0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	d003      	beq.n	801a0e0 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801a0d8:	4b5d      	ldr	r3, [pc, #372]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a0da:	22f2      	movs	r2, #242	; 0xf2
 801a0dc:	75da      	strb	r2, [r3, #23]
 801a0de:	e002      	b.n	801a0e6 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a0e0:	4b5b      	ldr	r3, [pc, #364]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a0e2:	2201      	movs	r2, #1
 801a0e4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801a0e6:	4b5a      	ldr	r3, [pc, #360]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a0e8:	2201      	movs	r2, #1
 801a0ea:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801a0ec:	f000 fb33 	bl	801a756 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801a0f0:	2000      	movs	r0, #0
 801a0f2:	f7ff fcc7 	bl	8019a84 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a0f6:	4857      	ldr	r0, [pc, #348]	; (801a254 <RadioSetTxConfig+0x210>)
 801a0f8:	f002 f924 	bl	801c344 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a0fc:	4856      	ldr	r0, [pc, #344]	; (801a258 <RadioSetTxConfig+0x214>)
 801a0fe:	f002 f9f3 	bl	801c4e8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a102:	4a56      	ldr	r2, [pc, #344]	; (801a25c <RadioSetTxConfig+0x218>)
 801a104:	f107 0310 	add.w	r3, r7, #16
 801a108:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a10c:	e883 0003 	stmia.w	r3, {r0, r1}
 801a110:	f107 0310 	add.w	r3, r7, #16
 801a114:	4618      	mov	r0, r3
 801a116:	f001 fcb0 	bl	801ba7a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a11a:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a11e:	f001 fcfb 	bl	801bb18 <SUBGRF_SetWhiteningSeed>
            break;
 801a122:	e078      	b.n	801a216 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a124:	4b4a      	ldr	r3, [pc, #296]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a126:	2201      	movs	r2, #1
 801a128:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801a12c:	6a3b      	ldr	r3, [r7, #32]
 801a12e:	b2da      	uxtb	r2, r3
 801a130:	4b47      	ldr	r3, [pc, #284]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801a136:	4a4a      	ldr	r2, [pc, #296]	; (801a260 <RadioSetTxConfig+0x21c>)
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	4413      	add	r3, r2
 801a13c:	781a      	ldrb	r2, [r3, #0]
 801a13e:	4b44      	ldr	r3, [pc, #272]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a140:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801a144:	4a42      	ldr	r2, [pc, #264]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a146:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a14a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	2b00      	cmp	r3, #0
 801a152:	d105      	bne.n	801a160 <RadioSetTxConfig+0x11c>
 801a154:	6a3b      	ldr	r3, [r7, #32]
 801a156:	2b0b      	cmp	r3, #11
 801a158:	d008      	beq.n	801a16c <RadioSetTxConfig+0x128>
 801a15a:	6a3b      	ldr	r3, [r7, #32]
 801a15c:	2b0c      	cmp	r3, #12
 801a15e:	d005      	beq.n	801a16c <RadioSetTxConfig+0x128>
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	2b01      	cmp	r3, #1
 801a164:	d107      	bne.n	801a176 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a166:	6a3b      	ldr	r3, [r7, #32]
 801a168:	2b0c      	cmp	r3, #12
 801a16a:	d104      	bne.n	801a176 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801a16c:	4b38      	ldr	r3, [pc, #224]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a16e:	2201      	movs	r2, #1
 801a170:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801a174:	e003      	b.n	801a17e <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801a176:	4b36      	ldr	r3, [pc, #216]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a178:	2200      	movs	r2, #0
 801a17a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a17e:	4b34      	ldr	r3, [pc, #208]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a180:	2201      	movs	r2, #1
 801a182:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a184:	4b32      	ldr	r3, [pc, #200]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a186:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801a18a:	2b05      	cmp	r3, #5
 801a18c:	d004      	beq.n	801a198 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801a18e:	4b30      	ldr	r3, [pc, #192]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a190:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a194:	2b06      	cmp	r3, #6
 801a196:	d10a      	bne.n	801a1ae <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801a198:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a19a:	2b0b      	cmp	r3, #11
 801a19c:	d803      	bhi.n	801a1a6 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801a19e:	4b2c      	ldr	r3, [pc, #176]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a1a0:	220c      	movs	r2, #12
 801a1a2:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801a1a4:	e006      	b.n	801a1b4 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a1a6:	4a2a      	ldr	r2, [pc, #168]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a1a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a1aa:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801a1ac:	e002      	b.n	801a1b4 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a1ae:	4a28      	ldr	r2, [pc, #160]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a1b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a1b2:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801a1b4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a1b8:	4b25      	ldr	r3, [pc, #148]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a1ba:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a1bc:	4b29      	ldr	r3, [pc, #164]	; (801a264 <RadioSetTxConfig+0x220>)
 801a1be:	781a      	ldrb	r2, [r3, #0]
 801a1c0:	4b23      	ldr	r3, [pc, #140]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a1c2:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801a1c4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801a1c8:	4b21      	ldr	r3, [pc, #132]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a1ca:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801a1ce:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801a1d2:	4b1f      	ldr	r3, [pc, #124]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a1d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801a1d8:	f000 fabd 	bl	801a756 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801a1dc:	2001      	movs	r0, #1
 801a1de:	f7ff fc51 	bl	8019a84 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a1e2:	481c      	ldr	r0, [pc, #112]	; (801a254 <RadioSetTxConfig+0x210>)
 801a1e4:	f002 f8ae 	bl	801c344 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a1e8:	481b      	ldr	r0, [pc, #108]	; (801a258 <RadioSetTxConfig+0x214>)
 801a1ea:	f002 f97d 	bl	801c4e8 <SUBGRF_SetPacketParams>
            break;
 801a1ee:	e012      	b.n	801a216 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801a1f0:	2004      	movs	r0, #4
 801a1f2:	f7ff fc47 	bl	8019a84 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801a1f6:	4b16      	ldr	r3, [pc, #88]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a1f8:	2202      	movs	r2, #2
 801a1fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801a1fe:	4a14      	ldr	r2, [pc, #80]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a200:	6a3b      	ldr	r3, [r7, #32]
 801a202:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801a204:	4b12      	ldr	r3, [pc, #72]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a206:	2216      	movs	r2, #22
 801a208:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a20c:	4811      	ldr	r0, [pc, #68]	; (801a254 <RadioSetTxConfig+0x210>)
 801a20e:	f002 f899 	bl	801c344 <SUBGRF_SetModulationParams>
            break;
 801a212:	e000      	b.n	801a216 <RadioSetTxConfig+0x1d2>
            break;
 801a214:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801a216:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a21a:	4618      	mov	r0, r3
 801a21c:	f002 fbc8 	bl	801c9b0 <SUBGRF_SetRfTxPower>
 801a220:	4603      	mov	r3, r0
 801a222:	461a      	mov	r2, r3
 801a224:	4b0a      	ldr	r3, [pc, #40]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a226:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801a22a:	210e      	movs	r1, #14
 801a22c:	f640 101f 	movw	r0, #2335	; 0x91f
 801a230:	f002 faa2 	bl	801c778 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801a234:	4b06      	ldr	r3, [pc, #24]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a236:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a23a:	4618      	mov	r0, r3
 801a23c:	f002 fd97 	bl	801cd6e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801a240:	4a03      	ldr	r2, [pc, #12]	; (801a250 <RadioSetTxConfig+0x20c>)
 801a242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a244:	6053      	str	r3, [r2, #4]
}
 801a246:	bf00      	nop
 801a248:	3718      	adds	r7, #24
 801a24a:	46bd      	mov	sp, r7
 801a24c:	bd80      	pop	{r7, pc}
 801a24e:	bf00      	nop
 801a250:	20001cf0 	.word	0x20001cf0
 801a254:	20001d28 	.word	0x20001d28
 801a258:	20001cfe 	.word	0x20001cfe
 801a25c:	0801eecc 	.word	0x0801eecc
 801a260:	0801f580 	.word	0x0801f580
 801a264:	20000134 	.word	0x20000134

0801a268 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801a268:	b480      	push	{r7}
 801a26a:	b083      	sub	sp, #12
 801a26c:	af00      	add	r7, sp, #0
 801a26e:	6078      	str	r0, [r7, #4]
    return true;
 801a270:	2301      	movs	r3, #1
}
 801a272:	4618      	mov	r0, r3
 801a274:	370c      	adds	r7, #12
 801a276:	46bd      	mov	sp, r7
 801a278:	bc80      	pop	{r7}
 801a27a:	4770      	bx	lr

0801a27c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801a27c:	b480      	push	{r7}
 801a27e:	b085      	sub	sp, #20
 801a280:	af00      	add	r7, sp, #0
 801a282:	4603      	mov	r3, r0
 801a284:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801a286:	2300      	movs	r3, #0
 801a288:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801a28a:	79fb      	ldrb	r3, [r7, #7]
 801a28c:	2b0a      	cmp	r3, #10
 801a28e:	d83e      	bhi.n	801a30e <RadioGetLoRaBandwidthInHz+0x92>
 801a290:	a201      	add	r2, pc, #4	; (adr r2, 801a298 <RadioGetLoRaBandwidthInHz+0x1c>)
 801a292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a296:	bf00      	nop
 801a298:	0801a2c5 	.word	0x0801a2c5
 801a29c:	0801a2d5 	.word	0x0801a2d5
 801a2a0:	0801a2e5 	.word	0x0801a2e5
 801a2a4:	0801a2f5 	.word	0x0801a2f5
 801a2a8:	0801a2fd 	.word	0x0801a2fd
 801a2ac:	0801a303 	.word	0x0801a303
 801a2b0:	0801a309 	.word	0x0801a309
 801a2b4:	0801a30f 	.word	0x0801a30f
 801a2b8:	0801a2cd 	.word	0x0801a2cd
 801a2bc:	0801a2dd 	.word	0x0801a2dd
 801a2c0:	0801a2ed 	.word	0x0801a2ed
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801a2c4:	f641 6384 	movw	r3, #7812	; 0x1e84
 801a2c8:	60fb      	str	r3, [r7, #12]
        break;
 801a2ca:	e020      	b.n	801a30e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801a2cc:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801a2d0:	60fb      	str	r3, [r7, #12]
        break;
 801a2d2:	e01c      	b.n	801a30e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801a2d4:	f643 5309 	movw	r3, #15625	; 0x3d09
 801a2d8:	60fb      	str	r3, [r7, #12]
        break;
 801a2da:	e018      	b.n	801a30e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801a2dc:	f245 1361 	movw	r3, #20833	; 0x5161
 801a2e0:	60fb      	str	r3, [r7, #12]
        break;
 801a2e2:	e014      	b.n	801a30e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801a2e4:	f647 2312 	movw	r3, #31250	; 0x7a12
 801a2e8:	60fb      	str	r3, [r7, #12]
        break;
 801a2ea:	e010      	b.n	801a30e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801a2ec:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801a2f0:	60fb      	str	r3, [r7, #12]
        break;
 801a2f2:	e00c      	b.n	801a30e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801a2f4:	f24f 4324 	movw	r3, #62500	; 0xf424
 801a2f8:	60fb      	str	r3, [r7, #12]
        break;
 801a2fa:	e008      	b.n	801a30e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801a2fc:	4b07      	ldr	r3, [pc, #28]	; (801a31c <RadioGetLoRaBandwidthInHz+0xa0>)
 801a2fe:	60fb      	str	r3, [r7, #12]
        break;
 801a300:	e005      	b.n	801a30e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801a302:	4b07      	ldr	r3, [pc, #28]	; (801a320 <RadioGetLoRaBandwidthInHz+0xa4>)
 801a304:	60fb      	str	r3, [r7, #12]
        break;
 801a306:	e002      	b.n	801a30e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801a308:	4b06      	ldr	r3, [pc, #24]	; (801a324 <RadioGetLoRaBandwidthInHz+0xa8>)
 801a30a:	60fb      	str	r3, [r7, #12]
        break;
 801a30c:	bf00      	nop
    }

    return bandwidthInHz;
 801a30e:	68fb      	ldr	r3, [r7, #12]
}
 801a310:	4618      	mov	r0, r3
 801a312:	3714      	adds	r7, #20
 801a314:	46bd      	mov	sp, r7
 801a316:	bc80      	pop	{r7}
 801a318:	4770      	bx	lr
 801a31a:	bf00      	nop
 801a31c:	0001e848 	.word	0x0001e848
 801a320:	0003d090 	.word	0x0003d090
 801a324:	0007a120 	.word	0x0007a120

0801a328 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801a328:	b480      	push	{r7}
 801a32a:	b083      	sub	sp, #12
 801a32c:	af00      	add	r7, sp, #0
 801a32e:	6078      	str	r0, [r7, #4]
 801a330:	4608      	mov	r0, r1
 801a332:	4611      	mov	r1, r2
 801a334:	461a      	mov	r2, r3
 801a336:	4603      	mov	r3, r0
 801a338:	70fb      	strb	r3, [r7, #3]
 801a33a:	460b      	mov	r3, r1
 801a33c:	803b      	strh	r3, [r7, #0]
 801a33e:	4613      	mov	r3, r2
 801a340:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 801a342:	883b      	ldrh	r3, [r7, #0]
 801a344:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a346:	78ba      	ldrb	r2, [r7, #2]
 801a348:	f082 0201 	eor.w	r2, r2, #1
 801a34c:	b2d2      	uxtb	r2, r2
 801a34e:	2a00      	cmp	r2, #0
 801a350:	d001      	beq.n	801a356 <RadioGetGfskTimeOnAirNumerator+0x2e>
 801a352:	2208      	movs	r2, #8
 801a354:	e000      	b.n	801a358 <RadioGetGfskTimeOnAirNumerator+0x30>
 801a356:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801a358:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a35a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801a35e:	7c3b      	ldrb	r3, [r7, #16]
 801a360:	7d39      	ldrb	r1, [r7, #20]
 801a362:	2900      	cmp	r1, #0
 801a364:	d001      	beq.n	801a36a <RadioGetGfskTimeOnAirNumerator+0x42>
 801a366:	2102      	movs	r1, #2
 801a368:	e000      	b.n	801a36c <RadioGetGfskTimeOnAirNumerator+0x44>
 801a36a:	2100      	movs	r1, #0
 801a36c:	440b      	add	r3, r1
 801a36e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a370:	4413      	add	r3, r2
}
 801a372:	4618      	mov	r0, r3
 801a374:	370c      	adds	r7, #12
 801a376:	46bd      	mov	sp, r7
 801a378:	bc80      	pop	{r7}
 801a37a:	4770      	bx	lr

0801a37c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801a37c:	b480      	push	{r7}
 801a37e:	b08b      	sub	sp, #44	; 0x2c
 801a380:	af00      	add	r7, sp, #0
 801a382:	60f8      	str	r0, [r7, #12]
 801a384:	60b9      	str	r1, [r7, #8]
 801a386:	4611      	mov	r1, r2
 801a388:	461a      	mov	r2, r3
 801a38a:	460b      	mov	r3, r1
 801a38c:	71fb      	strb	r3, [r7, #7]
 801a38e:	4613      	mov	r3, r2
 801a390:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801a392:	79fb      	ldrb	r3, [r7, #7]
 801a394:	3304      	adds	r3, #4
 801a396:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801a398:	2300      	movs	r3, #0
 801a39a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801a39e:	68bb      	ldr	r3, [r7, #8]
 801a3a0:	2b05      	cmp	r3, #5
 801a3a2:	d002      	beq.n	801a3aa <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801a3a4:	68bb      	ldr	r3, [r7, #8]
 801a3a6:	2b06      	cmp	r3, #6
 801a3a8:	d104      	bne.n	801a3b4 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801a3aa:	88bb      	ldrh	r3, [r7, #4]
 801a3ac:	2b0b      	cmp	r3, #11
 801a3ae:	d801      	bhi.n	801a3b4 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801a3b0:	230c      	movs	r3, #12
 801a3b2:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a3b4:	68fb      	ldr	r3, [r7, #12]
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	d105      	bne.n	801a3c6 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801a3ba:	68bb      	ldr	r3, [r7, #8]
 801a3bc:	2b0b      	cmp	r3, #11
 801a3be:	d008      	beq.n	801a3d2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801a3c0:	68bb      	ldr	r3, [r7, #8]
 801a3c2:	2b0c      	cmp	r3, #12
 801a3c4:	d005      	beq.n	801a3d2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801a3c6:	68fb      	ldr	r3, [r7, #12]
 801a3c8:	2b01      	cmp	r3, #1
 801a3ca:	d105      	bne.n	801a3d8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a3cc:	68bb      	ldr	r3, [r7, #8]
 801a3ce:	2b0c      	cmp	r3, #12
 801a3d0:	d102      	bne.n	801a3d8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801a3d2:	2301      	movs	r3, #1
 801a3d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a3d8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801a3dc:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801a3de:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801a3e2:	2a00      	cmp	r2, #0
 801a3e4:	d001      	beq.n	801a3ea <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801a3e6:	2210      	movs	r2, #16
 801a3e8:	e000      	b.n	801a3ec <RadioGetLoRaTimeOnAirNumerator+0x70>
 801a3ea:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a3ec:	4413      	add	r3, r2
 801a3ee:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801a3f0:	68bb      	ldr	r3, [r7, #8]
 801a3f2:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801a3f4:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801a3f6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801a3fa:	2a00      	cmp	r2, #0
 801a3fc:	d001      	beq.n	801a402 <RadioGetLoRaTimeOnAirNumerator+0x86>
 801a3fe:	2200      	movs	r2, #0
 801a400:	e000      	b.n	801a404 <RadioGetLoRaTimeOnAirNumerator+0x88>
 801a402:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801a404:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a406:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801a408:	68bb      	ldr	r3, [r7, #8]
 801a40a:	2b06      	cmp	r3, #6
 801a40c:	d803      	bhi.n	801a416 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801a40e:	68bb      	ldr	r3, [r7, #8]
 801a410:	009b      	lsls	r3, r3, #2
 801a412:	623b      	str	r3, [r7, #32]
 801a414:	e00e      	b.n	801a434 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801a416:	69fb      	ldr	r3, [r7, #28]
 801a418:	3308      	adds	r3, #8
 801a41a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801a41c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a420:	2b00      	cmp	r3, #0
 801a422:	d004      	beq.n	801a42e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801a424:	68bb      	ldr	r3, [r7, #8]
 801a426:	3b02      	subs	r3, #2
 801a428:	009b      	lsls	r3, r3, #2
 801a42a:	623b      	str	r3, [r7, #32]
 801a42c:	e002      	b.n	801a434 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801a42e:	68bb      	ldr	r3, [r7, #8]
 801a430:	009b      	lsls	r3, r3, #2
 801a432:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801a434:	69fb      	ldr	r3, [r7, #28]
 801a436:	2b00      	cmp	r3, #0
 801a438:	da01      	bge.n	801a43e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801a43a:	2300      	movs	r3, #0
 801a43c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801a43e:	69fa      	ldr	r2, [r7, #28]
 801a440:	6a3b      	ldr	r3, [r7, #32]
 801a442:	4413      	add	r3, r2
 801a444:	1e5a      	subs	r2, r3, #1
 801a446:	6a3b      	ldr	r3, [r7, #32]
 801a448:	fb92 f3f3 	sdiv	r3, r2, r3
 801a44c:	697a      	ldr	r2, [r7, #20]
 801a44e:	fb03 f202 	mul.w	r2, r3, r2
 801a452:	88bb      	ldrh	r3, [r7, #4]
 801a454:	4413      	add	r3, r2
    int32_t intermediate =
 801a456:	330c      	adds	r3, #12
 801a458:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801a45a:	68bb      	ldr	r3, [r7, #8]
 801a45c:	2b06      	cmp	r3, #6
 801a45e:	d802      	bhi.n	801a466 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801a460:	69bb      	ldr	r3, [r7, #24]
 801a462:	3302      	adds	r3, #2
 801a464:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801a466:	69bb      	ldr	r3, [r7, #24]
 801a468:	009b      	lsls	r3, r3, #2
 801a46a:	1c5a      	adds	r2, r3, #1
 801a46c:	68bb      	ldr	r3, [r7, #8]
 801a46e:	3b02      	subs	r3, #2
 801a470:	fa02 f303 	lsl.w	r3, r2, r3
}
 801a474:	4618      	mov	r0, r3
 801a476:	372c      	adds	r7, #44	; 0x2c
 801a478:	46bd      	mov	sp, r7
 801a47a:	bc80      	pop	{r7}
 801a47c:	4770      	bx	lr
	...

0801a480 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801a480:	b580      	push	{r7, lr}
 801a482:	b08a      	sub	sp, #40	; 0x28
 801a484:	af04      	add	r7, sp, #16
 801a486:	60b9      	str	r1, [r7, #8]
 801a488:	607a      	str	r2, [r7, #4]
 801a48a:	461a      	mov	r2, r3
 801a48c:	4603      	mov	r3, r0
 801a48e:	73fb      	strb	r3, [r7, #15]
 801a490:	4613      	mov	r3, r2
 801a492:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801a494:	2300      	movs	r3, #0
 801a496:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801a498:	2301      	movs	r3, #1
 801a49a:	613b      	str	r3, [r7, #16]

    switch( modem )
 801a49c:	7bfb      	ldrb	r3, [r7, #15]
 801a49e:	2b00      	cmp	r3, #0
 801a4a0:	d002      	beq.n	801a4a8 <RadioTimeOnAir+0x28>
 801a4a2:	2b01      	cmp	r3, #1
 801a4a4:	d017      	beq.n	801a4d6 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801a4a6:	e035      	b.n	801a514 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801a4a8:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801a4ac:	8c3a      	ldrh	r2, [r7, #32]
 801a4ae:	7bb9      	ldrb	r1, [r7, #14]
 801a4b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a4b4:	9301      	str	r3, [sp, #4]
 801a4b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a4ba:	9300      	str	r3, [sp, #0]
 801a4bc:	4603      	mov	r3, r0
 801a4be:	6878      	ldr	r0, [r7, #4]
 801a4c0:	f7ff ff32 	bl	801a328 <RadioGetGfskTimeOnAirNumerator>
 801a4c4:	4603      	mov	r3, r0
 801a4c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a4ca:	fb02 f303 	mul.w	r3, r2, r3
 801a4ce:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	613b      	str	r3, [r7, #16]
        break;
 801a4d4:	e01e      	b.n	801a514 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801a4d6:	8c39      	ldrh	r1, [r7, #32]
 801a4d8:	7bba      	ldrb	r2, [r7, #14]
 801a4da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a4de:	9302      	str	r3, [sp, #8]
 801a4e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a4e4:	9301      	str	r3, [sp, #4]
 801a4e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a4ea:	9300      	str	r3, [sp, #0]
 801a4ec:	460b      	mov	r3, r1
 801a4ee:	6879      	ldr	r1, [r7, #4]
 801a4f0:	68b8      	ldr	r0, [r7, #8]
 801a4f2:	f7ff ff43 	bl	801a37c <RadioGetLoRaTimeOnAirNumerator>
 801a4f6:	4603      	mov	r3, r0
 801a4f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a4fc:	fb02 f303 	mul.w	r3, r2, r3
 801a500:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801a502:	4a0a      	ldr	r2, [pc, #40]	; (801a52c <RadioTimeOnAir+0xac>)
 801a504:	68bb      	ldr	r3, [r7, #8]
 801a506:	4413      	add	r3, r2
 801a508:	781b      	ldrb	r3, [r3, #0]
 801a50a:	4618      	mov	r0, r3
 801a50c:	f7ff feb6 	bl	801a27c <RadioGetLoRaBandwidthInHz>
 801a510:	6138      	str	r0, [r7, #16]
        break;
 801a512:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 801a514:	697a      	ldr	r2, [r7, #20]
 801a516:	693b      	ldr	r3, [r7, #16]
 801a518:	4413      	add	r3, r2
 801a51a:	1e5a      	subs	r2, r3, #1
 801a51c:	693b      	ldr	r3, [r7, #16]
 801a51e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801a522:	4618      	mov	r0, r3
 801a524:	3718      	adds	r7, #24
 801a526:	46bd      	mov	sp, r7
 801a528:	bd80      	pop	{r7, pc}
 801a52a:	bf00      	nop
 801a52c:	0801f580 	.word	0x0801f580

0801a530 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 801a530:	b580      	push	{r7, lr}
 801a532:	b084      	sub	sp, #16
 801a534:	af00      	add	r7, sp, #0
 801a536:	6078      	str	r0, [r7, #4]
 801a538:	460b      	mov	r3, r1
 801a53a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801a53c:	2300      	movs	r3, #0
 801a53e:	2200      	movs	r2, #0
 801a540:	f240 2101 	movw	r1, #513	; 0x201
 801a544:	f240 2001 	movw	r0, #513	; 0x201
 801a548:	f001 fd66 	bl	801c018 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801a54c:	4b73      	ldr	r3, [pc, #460]	; (801a71c <RadioSend+0x1ec>)
 801a54e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a552:	2101      	movs	r1, #1
 801a554:	4618      	mov	r0, r3
 801a556:	f002 fa03 	bl	801c960 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801a55a:	4b70      	ldr	r3, [pc, #448]	; (801a71c <RadioSend+0x1ec>)
 801a55c:	781b      	ldrb	r3, [r3, #0]
 801a55e:	2b01      	cmp	r3, #1
 801a560:	d112      	bne.n	801a588 <RadioSend+0x58>
 801a562:	4b6e      	ldr	r3, [pc, #440]	; (801a71c <RadioSend+0x1ec>)
 801a564:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801a568:	2b06      	cmp	r3, #6
 801a56a:	d10d      	bne.n	801a588 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801a56c:	f640 0089 	movw	r0, #2185	; 0x889
 801a570:	f002 f916 	bl	801c7a0 <SUBGRF_ReadRegister>
 801a574:	4603      	mov	r3, r0
 801a576:	f023 0304 	bic.w	r3, r3, #4
 801a57a:	b2db      	uxtb	r3, r3
 801a57c:	4619      	mov	r1, r3
 801a57e:	f640 0089 	movw	r0, #2185	; 0x889
 801a582:	f002 f8f9 	bl	801c778 <SUBGRF_WriteRegister>
 801a586:	e00c      	b.n	801a5a2 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801a588:	f640 0089 	movw	r0, #2185	; 0x889
 801a58c:	f002 f908 	bl	801c7a0 <SUBGRF_ReadRegister>
 801a590:	4603      	mov	r3, r0
 801a592:	f043 0304 	orr.w	r3, r3, #4
 801a596:	b2db      	uxtb	r3, r3
 801a598:	4619      	mov	r1, r3
 801a59a:	f640 0089 	movw	r0, #2185	; 0x889
 801a59e:	f002 f8eb 	bl	801c778 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 801a5a2:	4b5e      	ldr	r3, [pc, #376]	; (801a71c <RadioSend+0x1ec>)
 801a5a4:	781b      	ldrb	r3, [r3, #0]
 801a5a6:	2b04      	cmp	r3, #4
 801a5a8:	f200 80a8 	bhi.w	801a6fc <RadioSend+0x1cc>
 801a5ac:	a201      	add	r2, pc, #4	; (adr r2, 801a5b4 <RadioSend+0x84>)
 801a5ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a5b2:	bf00      	nop
 801a5b4:	0801a5e3 	.word	0x0801a5e3
 801a5b8:	0801a5c9 	.word	0x0801a5c9
 801a5bc:	0801a5e3 	.word	0x0801a5e3
 801a5c0:	0801a645 	.word	0x0801a645
 801a5c4:	0801a665 	.word	0x0801a665
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801a5c8:	4a54      	ldr	r2, [pc, #336]	; (801a71c <RadioSend+0x1ec>)
 801a5ca:	78fb      	ldrb	r3, [r7, #3]
 801a5cc:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a5ce:	4854      	ldr	r0, [pc, #336]	; (801a720 <RadioSend+0x1f0>)
 801a5d0:	f001 ff8a 	bl	801c4e8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801a5d4:	78fb      	ldrb	r3, [r7, #3]
 801a5d6:	2200      	movs	r2, #0
 801a5d8:	4619      	mov	r1, r3
 801a5da:	6878      	ldr	r0, [r7, #4]
 801a5dc:	f001 fa3a 	bl	801ba54 <SUBGRF_SendPayload>
            break;
 801a5e0:	e08d      	b.n	801a6fe <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801a5e2:	f002 fbb6 	bl	801cd52 <RFW_Is_Init>
 801a5e6:	4603      	mov	r3, r0
 801a5e8:	2b01      	cmp	r3, #1
 801a5ea:	d11e      	bne.n	801a62a <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801a5ec:	f107 020d 	add.w	r2, r7, #13
 801a5f0:	78fb      	ldrb	r3, [r7, #3]
 801a5f2:	4619      	mov	r1, r3
 801a5f4:	6878      	ldr	r0, [r7, #4]
 801a5f6:	f002 fbc4 	bl	801cd82 <RFW_TransmitInit>
 801a5fa:	4603      	mov	r3, r0
 801a5fc:	2b00      	cmp	r3, #0
 801a5fe:	d10c      	bne.n	801a61a <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801a600:	7b7a      	ldrb	r2, [r7, #13]
 801a602:	4b46      	ldr	r3, [pc, #280]	; (801a71c <RadioSend+0x1ec>)
 801a604:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a606:	4846      	ldr	r0, [pc, #280]	; (801a720 <RadioSend+0x1f0>)
 801a608:	f001 ff6e 	bl	801c4e8 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801a60c:	7b7b      	ldrb	r3, [r7, #13]
 801a60e:	2200      	movs	r2, #0
 801a610:	4619      	mov	r1, r3
 801a612:	6878      	ldr	r0, [r7, #4]
 801a614:	f001 fa1e 	bl	801ba54 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801a618:	e071      	b.n	801a6fe <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801a61a:	4b42      	ldr	r3, [pc, #264]	; (801a724 <RadioSend+0x1f4>)
 801a61c:	2201      	movs	r2, #1
 801a61e:	2100      	movs	r1, #0
 801a620:	2002      	movs	r0, #2
 801a622:	f003 fccf 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 801a626:	2303      	movs	r3, #3
 801a628:	e073      	b.n	801a712 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801a62a:	4a3c      	ldr	r2, [pc, #240]	; (801a71c <RadioSend+0x1ec>)
 801a62c:	78fb      	ldrb	r3, [r7, #3]
 801a62e:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a630:	483b      	ldr	r0, [pc, #236]	; (801a720 <RadioSend+0x1f0>)
 801a632:	f001 ff59 	bl	801c4e8 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 801a636:	78fb      	ldrb	r3, [r7, #3]
 801a638:	2200      	movs	r2, #0
 801a63a:	4619      	mov	r1, r3
 801a63c:	6878      	ldr	r0, [r7, #4]
 801a63e:	f001 fa09 	bl	801ba54 <SUBGRF_SendPayload>
            break;
 801a642:	e05c      	b.n	801a6fe <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801a644:	4b35      	ldr	r3, [pc, #212]	; (801a71c <RadioSend+0x1ec>)
 801a646:	2202      	movs	r2, #2
 801a648:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801a64a:	4a34      	ldr	r2, [pc, #208]	; (801a71c <RadioSend+0x1ec>)
 801a64c:	78fb      	ldrb	r3, [r7, #3]
 801a64e:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a650:	4833      	ldr	r0, [pc, #204]	; (801a720 <RadioSend+0x1f0>)
 801a652:	f001 ff49 	bl	801c4e8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801a656:	78fb      	ldrb	r3, [r7, #3]
 801a658:	2200      	movs	r2, #0
 801a65a:	4619      	mov	r1, r3
 801a65c:	6878      	ldr	r0, [r7, #4]
 801a65e:	f001 f9f9 	bl	801ba54 <SUBGRF_SendPayload>
            break;
 801a662:	e04c      	b.n	801a6fe <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801a664:	78fb      	ldrb	r3, [r7, #3]
 801a666:	461a      	mov	r2, r3
 801a668:	6879      	ldr	r1, [r7, #4]
 801a66a:	482f      	ldr	r0, [pc, #188]	; (801a728 <RadioSend+0x1f8>)
 801a66c:	f000 fccc 	bl	801b008 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801a670:	4b2a      	ldr	r3, [pc, #168]	; (801a71c <RadioSend+0x1ec>)
 801a672:	2202      	movs	r2, #2
 801a674:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801a676:	78fb      	ldrb	r3, [r7, #3]
 801a678:	3301      	adds	r3, #1
 801a67a:	b2da      	uxtb	r2, r3
 801a67c:	4b27      	ldr	r3, [pc, #156]	; (801a71c <RadioSend+0x1ec>)
 801a67e:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a680:	4827      	ldr	r0, [pc, #156]	; (801a720 <RadioSend+0x1f0>)
 801a682:	f001 ff31 	bl	801c4e8 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801a686:	2100      	movs	r1, #0
 801a688:	20f1      	movs	r0, #241	; 0xf1
 801a68a:	f000 f966 	bl	801a95a <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801a68e:	2100      	movs	r1, #0
 801a690:	20f0      	movs	r0, #240	; 0xf0
 801a692:	f000 f962 	bl	801a95a <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801a696:	4b21      	ldr	r3, [pc, #132]	; (801a71c <RadioSend+0x1ec>)
 801a698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a69a:	2b64      	cmp	r3, #100	; 0x64
 801a69c:	d108      	bne.n	801a6b0 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801a69e:	2170      	movs	r1, #112	; 0x70
 801a6a0:	20f3      	movs	r0, #243	; 0xf3
 801a6a2:	f000 f95a 	bl	801a95a <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801a6a6:	211d      	movs	r1, #29
 801a6a8:	20f2      	movs	r0, #242	; 0xf2
 801a6aa:	f000 f956 	bl	801a95a <RadioWrite>
 801a6ae:	e007      	b.n	801a6c0 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801a6b0:	21e1      	movs	r1, #225	; 0xe1
 801a6b2:	20f3      	movs	r0, #243	; 0xf3
 801a6b4:	f000 f951 	bl	801a95a <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801a6b8:	2104      	movs	r1, #4
 801a6ba:	20f2      	movs	r0, #242	; 0xf2
 801a6bc:	f000 f94d 	bl	801a95a <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801a6c0:	78fb      	ldrb	r3, [r7, #3]
 801a6c2:	b29b      	uxth	r3, r3
 801a6c4:	00db      	lsls	r3, r3, #3
 801a6c6:	b29b      	uxth	r3, r3
 801a6c8:	3302      	adds	r3, #2
 801a6ca:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801a6cc:	89fb      	ldrh	r3, [r7, #14]
 801a6ce:	0a1b      	lsrs	r3, r3, #8
 801a6d0:	b29b      	uxth	r3, r3
 801a6d2:	b2db      	uxtb	r3, r3
 801a6d4:	4619      	mov	r1, r3
 801a6d6:	20f4      	movs	r0, #244	; 0xf4
 801a6d8:	f000 f93f 	bl	801a95a <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801a6dc:	89fb      	ldrh	r3, [r7, #14]
 801a6de:	b2db      	uxtb	r3, r3
 801a6e0:	4619      	mov	r1, r3
 801a6e2:	20f5      	movs	r0, #245	; 0xf5
 801a6e4:	f000 f939 	bl	801a95a <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801a6e8:	78fb      	ldrb	r3, [r7, #3]
 801a6ea:	3301      	adds	r3, #1
 801a6ec:	b2db      	uxtb	r3, r3
 801a6ee:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801a6f2:	4619      	mov	r1, r3
 801a6f4:	480c      	ldr	r0, [pc, #48]	; (801a728 <RadioSend+0x1f8>)
 801a6f6:	f001 f9ad 	bl	801ba54 <SUBGRF_SendPayload>
            break;
 801a6fa:	e000      	b.n	801a6fe <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801a6fc:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801a6fe:	4b07      	ldr	r3, [pc, #28]	; (801a71c <RadioSend+0x1ec>)
 801a700:	685b      	ldr	r3, [r3, #4]
 801a702:	4619      	mov	r1, r3
 801a704:	4809      	ldr	r0, [pc, #36]	; (801a72c <RadioSend+0x1fc>)
 801a706:	f003 fac3 	bl	801dc90 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801a70a:	4808      	ldr	r0, [pc, #32]	; (801a72c <RadioSend+0x1fc>)
 801a70c:	f003 f9e2 	bl	801dad4 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 801a710:	2300      	movs	r3, #0
}
 801a712:	4618      	mov	r0, r3
 801a714:	3710      	adds	r7, #16
 801a716:	46bd      	mov	sp, r7
 801a718:	bd80      	pop	{r7, pc}
 801a71a:	bf00      	nop
 801a71c:	20001cf0 	.word	0x20001cf0
 801a720:	20001cfe 	.word	0x20001cfe
 801a724:	0801eed4 	.word	0x0801eed4
 801a728:	20001bec 	.word	0x20001bec
 801a72c:	20001d4c 	.word	0x20001d4c

0801a730 <RadioSleep>:

static void RadioSleep( void )
{
 801a730:	b580      	push	{r7, lr}
 801a732:	b082      	sub	sp, #8
 801a734:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801a736:	2300      	movs	r3, #0
 801a738:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801a73a:	793b      	ldrb	r3, [r7, #4]
 801a73c:	f043 0304 	orr.w	r3, r3, #4
 801a740:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801a742:	7938      	ldrb	r0, [r7, #4]
 801a744:	f001 fa62 	bl	801bc0c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801a748:	2002      	movs	r0, #2
 801a74a:	f7e8 f857 	bl	80027fc <HAL_Delay>
}
 801a74e:	bf00      	nop
 801a750:	3708      	adds	r7, #8
 801a752:	46bd      	mov	sp, r7
 801a754:	bd80      	pop	{r7, pc}

0801a756 <RadioStandby>:

static void RadioStandby( void )
{
 801a756:	b580      	push	{r7, lr}
 801a758:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801a75a:	2000      	movs	r0, #0
 801a75c:	f001 fa88 	bl	801bc70 <SUBGRF_SetStandby>
}
 801a760:	bf00      	nop
 801a762:	bd80      	pop	{r7, pc}

0801a764 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801a764:	b580      	push	{r7, lr}
 801a766:	b082      	sub	sp, #8
 801a768:	af00      	add	r7, sp, #0
 801a76a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 801a76c:	f002 faf1 	bl	801cd52 <RFW_Is_Init>
 801a770:	4603      	mov	r3, r0
 801a772:	2b01      	cmp	r3, #1
 801a774:	d102      	bne.n	801a77c <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801a776:	f002 fb14 	bl	801cda2 <RFW_ReceiveInit>
 801a77a:	e007      	b.n	801a78c <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801a77c:	2300      	movs	r3, #0
 801a77e:	2200      	movs	r2, #0
 801a780:	f240 2162 	movw	r1, #610	; 0x262
 801a784:	f240 2062 	movw	r0, #610	; 0x262
 801a788:	f001 fc46 	bl	801c018 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	2b00      	cmp	r3, #0
 801a790:	d006      	beq.n	801a7a0 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801a792:	6879      	ldr	r1, [r7, #4]
 801a794:	4811      	ldr	r0, [pc, #68]	; (801a7dc <RadioRx+0x78>)
 801a796:	f003 fa7b 	bl	801dc90 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801a79a:	4810      	ldr	r0, [pc, #64]	; (801a7dc <RadioRx+0x78>)
 801a79c:	f003 f99a 	bl	801dad4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801a7a0:	4b0f      	ldr	r3, [pc, #60]	; (801a7e0 <RadioRx+0x7c>)
 801a7a2:	2200      	movs	r2, #0
 801a7a4:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a7a6:	4b0e      	ldr	r3, [pc, #56]	; (801a7e0 <RadioRx+0x7c>)
 801a7a8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a7ac:	2100      	movs	r1, #0
 801a7ae:	4618      	mov	r0, r3
 801a7b0:	f002 f8d6 	bl	801c960 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801a7b4:	4b0a      	ldr	r3, [pc, #40]	; (801a7e0 <RadioRx+0x7c>)
 801a7b6:	785b      	ldrb	r3, [r3, #1]
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	d004      	beq.n	801a7c6 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801a7bc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801a7c0:	f001 fa92 	bl	801bce8 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801a7c4:	e005      	b.n	801a7d2 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801a7c6:	4b06      	ldr	r3, [pc, #24]	; (801a7e0 <RadioRx+0x7c>)
 801a7c8:	689b      	ldr	r3, [r3, #8]
 801a7ca:	019b      	lsls	r3, r3, #6
 801a7cc:	4618      	mov	r0, r3
 801a7ce:	f001 fa8b 	bl	801bce8 <SUBGRF_SetRx>
}
 801a7d2:	bf00      	nop
 801a7d4:	3708      	adds	r7, #8
 801a7d6:	46bd      	mov	sp, r7
 801a7d8:	bd80      	pop	{r7, pc}
 801a7da:	bf00      	nop
 801a7dc:	20001d64 	.word	0x20001d64
 801a7e0:	20001cf0 	.word	0x20001cf0

0801a7e4 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801a7e4:	b580      	push	{r7, lr}
 801a7e6:	b082      	sub	sp, #8
 801a7e8:	af00      	add	r7, sp, #0
 801a7ea:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 801a7ec:	f002 fab1 	bl	801cd52 <RFW_Is_Init>
 801a7f0:	4603      	mov	r3, r0
 801a7f2:	2b01      	cmp	r3, #1
 801a7f4:	d102      	bne.n	801a7fc <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801a7f6:	f002 fad4 	bl	801cda2 <RFW_ReceiveInit>
 801a7fa:	e007      	b.n	801a80c <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801a7fc:	2300      	movs	r3, #0
 801a7fe:	2200      	movs	r2, #0
 801a800:	f240 2162 	movw	r1, #610	; 0x262
 801a804:	f240 2062 	movw	r0, #610	; 0x262
 801a808:	f001 fc06 	bl	801c018 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801a80c:	687b      	ldr	r3, [r7, #4]
 801a80e:	2b00      	cmp	r3, #0
 801a810:	d006      	beq.n	801a820 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801a812:	6879      	ldr	r1, [r7, #4]
 801a814:	4811      	ldr	r0, [pc, #68]	; (801a85c <RadioRxBoosted+0x78>)
 801a816:	f003 fa3b 	bl	801dc90 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801a81a:	4810      	ldr	r0, [pc, #64]	; (801a85c <RadioRxBoosted+0x78>)
 801a81c:	f003 f95a 	bl	801dad4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801a820:	4b0f      	ldr	r3, [pc, #60]	; (801a860 <RadioRxBoosted+0x7c>)
 801a822:	2200      	movs	r2, #0
 801a824:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a826:	4b0e      	ldr	r3, [pc, #56]	; (801a860 <RadioRxBoosted+0x7c>)
 801a828:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a82c:	2100      	movs	r1, #0
 801a82e:	4618      	mov	r0, r3
 801a830:	f002 f896 	bl	801c960 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801a834:	4b0a      	ldr	r3, [pc, #40]	; (801a860 <RadioRxBoosted+0x7c>)
 801a836:	785b      	ldrb	r3, [r3, #1]
 801a838:	2b00      	cmp	r3, #0
 801a83a:	d004      	beq.n	801a846 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801a83c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801a840:	f001 fa72 	bl	801bd28 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801a844:	e005      	b.n	801a852 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801a846:	4b06      	ldr	r3, [pc, #24]	; (801a860 <RadioRxBoosted+0x7c>)
 801a848:	689b      	ldr	r3, [r3, #8]
 801a84a:	019b      	lsls	r3, r3, #6
 801a84c:	4618      	mov	r0, r3
 801a84e:	f001 fa6b 	bl	801bd28 <SUBGRF_SetRxBoosted>
}
 801a852:	bf00      	nop
 801a854:	3708      	adds	r7, #8
 801a856:	46bd      	mov	sp, r7
 801a858:	bd80      	pop	{r7, pc}
 801a85a:	bf00      	nop
 801a85c:	20001d64 	.word	0x20001d64
 801a860:	20001cf0 	.word	0x20001cf0

0801a864 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801a864:	b580      	push	{r7, lr}
 801a866:	b082      	sub	sp, #8
 801a868:	af00      	add	r7, sp, #0
 801a86a:	6078      	str	r0, [r7, #4]
 801a86c:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	005a      	lsls	r2, r3, #1
 801a872:	683b      	ldr	r3, [r7, #0]
 801a874:	4413      	add	r3, r2
 801a876:	4a0c      	ldr	r2, [pc, #48]	; (801a8a8 <RadioSetRxDutyCycle+0x44>)
 801a878:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801a87a:	2300      	movs	r3, #0
 801a87c:	2200      	movs	r2, #0
 801a87e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a882:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801a886:	f001 fbc7 	bl	801c018 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a88a:	4b07      	ldr	r3, [pc, #28]	; (801a8a8 <RadioSetRxDutyCycle+0x44>)
 801a88c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a890:	2100      	movs	r1, #0
 801a892:	4618      	mov	r0, r3
 801a894:	f002 f864 	bl	801c960 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801a898:	6839      	ldr	r1, [r7, #0]
 801a89a:	6878      	ldr	r0, [r7, #4]
 801a89c:	f001 fa68 	bl	801bd70 <SUBGRF_SetRxDutyCycle>
}
 801a8a0:	bf00      	nop
 801a8a2:	3708      	adds	r7, #8
 801a8a4:	46bd      	mov	sp, r7
 801a8a6:	bd80      	pop	{r7, pc}
 801a8a8:	20001cf0 	.word	0x20001cf0

0801a8ac <RadioStartCad>:

static void RadioStartCad( void )
{
 801a8ac:	b580      	push	{r7, lr}
 801a8ae:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a8b0:	4b09      	ldr	r3, [pc, #36]	; (801a8d8 <RadioStartCad+0x2c>)
 801a8b2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a8b6:	2100      	movs	r1, #0
 801a8b8:	4618      	mov	r0, r3
 801a8ba:	f002 f851 	bl	801c960 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801a8be:	2300      	movs	r3, #0
 801a8c0:	2200      	movs	r2, #0
 801a8c2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801a8c6:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801a8ca:	f001 fba5 	bl	801c018 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801a8ce:	f001 fa7b 	bl	801bdc8 <SUBGRF_SetCad>
}
 801a8d2:	bf00      	nop
 801a8d4:	bd80      	pop	{r7, pc}
 801a8d6:	bf00      	nop
 801a8d8:	20001cf0 	.word	0x20001cf0

0801a8dc <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801a8dc:	b580      	push	{r7, lr}
 801a8de:	b084      	sub	sp, #16
 801a8e0:	af00      	add	r7, sp, #0
 801a8e2:	6078      	str	r0, [r7, #4]
 801a8e4:	460b      	mov	r3, r1
 801a8e6:	70fb      	strb	r3, [r7, #3]
 801a8e8:	4613      	mov	r3, r2
 801a8ea:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 801a8ec:	883b      	ldrh	r3, [r7, #0]
 801a8ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a8f2:	fb02 f303 	mul.w	r3, r2, r3
 801a8f6:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801a8f8:	6878      	ldr	r0, [r7, #4]
 801a8fa:	f001 fbe9 	bl	801c0d0 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801a8fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a902:	4618      	mov	r0, r3
 801a904:	f002 f854 	bl	801c9b0 <SUBGRF_SetRfTxPower>
 801a908:	4603      	mov	r3, r0
 801a90a:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801a90c:	210e      	movs	r1, #14
 801a90e:	f640 101f 	movw	r0, #2335	; 0x91f
 801a912:	f001 ff31 	bl	801c778 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801a916:	7afb      	ldrb	r3, [r7, #11]
 801a918:	2101      	movs	r1, #1
 801a91a:	4618      	mov	r0, r3
 801a91c:	f002 f820 	bl	801c960 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801a920:	f001 fa60 	bl	801bde4 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801a924:	68f9      	ldr	r1, [r7, #12]
 801a926:	4805      	ldr	r0, [pc, #20]	; (801a93c <RadioSetTxContinuousWave+0x60>)
 801a928:	f003 f9b2 	bl	801dc90 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801a92c:	4803      	ldr	r0, [pc, #12]	; (801a93c <RadioSetTxContinuousWave+0x60>)
 801a92e:	f003 f8d1 	bl	801dad4 <UTIL_TIMER_Start>
}
 801a932:	bf00      	nop
 801a934:	3710      	adds	r7, #16
 801a936:	46bd      	mov	sp, r7
 801a938:	bd80      	pop	{r7, pc}
 801a93a:	bf00      	nop
 801a93c:	20001d4c 	.word	0x20001d4c

0801a940 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801a940:	b580      	push	{r7, lr}
 801a942:	b082      	sub	sp, #8
 801a944:	af00      	add	r7, sp, #0
 801a946:	4603      	mov	r3, r0
 801a948:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801a94a:	f001 fe82 	bl	801c652 <SUBGRF_GetRssiInst>
 801a94e:	4603      	mov	r3, r0
 801a950:	b21b      	sxth	r3, r3
}
 801a952:	4618      	mov	r0, r3
 801a954:	3708      	adds	r7, #8
 801a956:	46bd      	mov	sp, r7
 801a958:	bd80      	pop	{r7, pc}

0801a95a <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801a95a:	b580      	push	{r7, lr}
 801a95c:	b082      	sub	sp, #8
 801a95e:	af00      	add	r7, sp, #0
 801a960:	4603      	mov	r3, r0
 801a962:	460a      	mov	r2, r1
 801a964:	80fb      	strh	r3, [r7, #6]
 801a966:	4613      	mov	r3, r2
 801a968:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801a96a:	797a      	ldrb	r2, [r7, #5]
 801a96c:	88fb      	ldrh	r3, [r7, #6]
 801a96e:	4611      	mov	r1, r2
 801a970:	4618      	mov	r0, r3
 801a972:	f001 ff01 	bl	801c778 <SUBGRF_WriteRegister>
}
 801a976:	bf00      	nop
 801a978:	3708      	adds	r7, #8
 801a97a:	46bd      	mov	sp, r7
 801a97c:	bd80      	pop	{r7, pc}

0801a97e <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801a97e:	b580      	push	{r7, lr}
 801a980:	b082      	sub	sp, #8
 801a982:	af00      	add	r7, sp, #0
 801a984:	4603      	mov	r3, r0
 801a986:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801a988:	88fb      	ldrh	r3, [r7, #6]
 801a98a:	4618      	mov	r0, r3
 801a98c:	f001 ff08 	bl	801c7a0 <SUBGRF_ReadRegister>
 801a990:	4603      	mov	r3, r0
}
 801a992:	4618      	mov	r0, r3
 801a994:	3708      	adds	r7, #8
 801a996:	46bd      	mov	sp, r7
 801a998:	bd80      	pop	{r7, pc}

0801a99a <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801a99a:	b580      	push	{r7, lr}
 801a99c:	b082      	sub	sp, #8
 801a99e:	af00      	add	r7, sp, #0
 801a9a0:	4603      	mov	r3, r0
 801a9a2:	6039      	str	r1, [r7, #0]
 801a9a4:	80fb      	strh	r3, [r7, #6]
 801a9a6:	4613      	mov	r3, r2
 801a9a8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801a9aa:	797b      	ldrb	r3, [r7, #5]
 801a9ac:	b29a      	uxth	r2, r3
 801a9ae:	88fb      	ldrh	r3, [r7, #6]
 801a9b0:	6839      	ldr	r1, [r7, #0]
 801a9b2:	4618      	mov	r0, r3
 801a9b4:	f001 ff08 	bl	801c7c8 <SUBGRF_WriteRegisters>
}
 801a9b8:	bf00      	nop
 801a9ba:	3708      	adds	r7, #8
 801a9bc:	46bd      	mov	sp, r7
 801a9be:	bd80      	pop	{r7, pc}

0801a9c0 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801a9c0:	b580      	push	{r7, lr}
 801a9c2:	b082      	sub	sp, #8
 801a9c4:	af00      	add	r7, sp, #0
 801a9c6:	4603      	mov	r3, r0
 801a9c8:	6039      	str	r1, [r7, #0]
 801a9ca:	80fb      	strh	r3, [r7, #6]
 801a9cc:	4613      	mov	r3, r2
 801a9ce:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801a9d0:	797b      	ldrb	r3, [r7, #5]
 801a9d2:	b29a      	uxth	r2, r3
 801a9d4:	88fb      	ldrh	r3, [r7, #6]
 801a9d6:	6839      	ldr	r1, [r7, #0]
 801a9d8:	4618      	mov	r0, r3
 801a9da:	f001 ff17 	bl	801c80c <SUBGRF_ReadRegisters>
}
 801a9de:	bf00      	nop
 801a9e0:	3708      	adds	r7, #8
 801a9e2:	46bd      	mov	sp, r7
 801a9e4:	bd80      	pop	{r7, pc}
	...

0801a9e8 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801a9e8:	b580      	push	{r7, lr}
 801a9ea:	b082      	sub	sp, #8
 801a9ec:	af00      	add	r7, sp, #0
 801a9ee:	4603      	mov	r3, r0
 801a9f0:	460a      	mov	r2, r1
 801a9f2:	71fb      	strb	r3, [r7, #7]
 801a9f4:	4613      	mov	r3, r2
 801a9f6:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801a9f8:	79fb      	ldrb	r3, [r7, #7]
 801a9fa:	2b01      	cmp	r3, #1
 801a9fc:	d10a      	bne.n	801aa14 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801a9fe:	4a0e      	ldr	r2, [pc, #56]	; (801aa38 <RadioSetMaxPayloadLength+0x50>)
 801aa00:	79bb      	ldrb	r3, [r7, #6]
 801aa02:	7013      	strb	r3, [r2, #0]
 801aa04:	4b0c      	ldr	r3, [pc, #48]	; (801aa38 <RadioSetMaxPayloadLength+0x50>)
 801aa06:	781a      	ldrb	r2, [r3, #0]
 801aa08:	4b0c      	ldr	r3, [pc, #48]	; (801aa3c <RadioSetMaxPayloadLength+0x54>)
 801aa0a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801aa0c:	480c      	ldr	r0, [pc, #48]	; (801aa40 <RadioSetMaxPayloadLength+0x58>)
 801aa0e:	f001 fd6b 	bl	801c4e8 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801aa12:	e00d      	b.n	801aa30 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801aa14:	4b09      	ldr	r3, [pc, #36]	; (801aa3c <RadioSetMaxPayloadLength+0x54>)
 801aa16:	7d5b      	ldrb	r3, [r3, #21]
 801aa18:	2b01      	cmp	r3, #1
 801aa1a:	d109      	bne.n	801aa30 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801aa1c:	4a06      	ldr	r2, [pc, #24]	; (801aa38 <RadioSetMaxPayloadLength+0x50>)
 801aa1e:	79bb      	ldrb	r3, [r7, #6]
 801aa20:	7013      	strb	r3, [r2, #0]
 801aa22:	4b05      	ldr	r3, [pc, #20]	; (801aa38 <RadioSetMaxPayloadLength+0x50>)
 801aa24:	781a      	ldrb	r2, [r3, #0]
 801aa26:	4b05      	ldr	r3, [pc, #20]	; (801aa3c <RadioSetMaxPayloadLength+0x54>)
 801aa28:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801aa2a:	4805      	ldr	r0, [pc, #20]	; (801aa40 <RadioSetMaxPayloadLength+0x58>)
 801aa2c:	f001 fd5c 	bl	801c4e8 <SUBGRF_SetPacketParams>
}
 801aa30:	bf00      	nop
 801aa32:	3708      	adds	r7, #8
 801aa34:	46bd      	mov	sp, r7
 801aa36:	bd80      	pop	{r7, pc}
 801aa38:	20000134 	.word	0x20000134
 801aa3c:	20001cf0 	.word	0x20001cf0
 801aa40:	20001cfe 	.word	0x20001cfe

0801aa44 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801aa44:	b580      	push	{r7, lr}
 801aa46:	b082      	sub	sp, #8
 801aa48:	af00      	add	r7, sp, #0
 801aa4a:	4603      	mov	r3, r0
 801aa4c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801aa4e:	4a13      	ldr	r2, [pc, #76]	; (801aa9c <RadioSetPublicNetwork+0x58>)
 801aa50:	79fb      	ldrb	r3, [r7, #7]
 801aa52:	7313      	strb	r3, [r2, #12]
 801aa54:	4b11      	ldr	r3, [pc, #68]	; (801aa9c <RadioSetPublicNetwork+0x58>)
 801aa56:	7b1a      	ldrb	r2, [r3, #12]
 801aa58:	4b10      	ldr	r3, [pc, #64]	; (801aa9c <RadioSetPublicNetwork+0x58>)
 801aa5a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801aa5c:	2001      	movs	r0, #1
 801aa5e:	f7ff f811 	bl	8019a84 <RadioSetModem>
    if( enable == true )
 801aa62:	79fb      	ldrb	r3, [r7, #7]
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	d00a      	beq.n	801aa7e <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801aa68:	2134      	movs	r1, #52	; 0x34
 801aa6a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801aa6e:	f001 fe83 	bl	801c778 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801aa72:	2144      	movs	r1, #68	; 0x44
 801aa74:	f240 7041 	movw	r0, #1857	; 0x741
 801aa78:	f001 fe7e 	bl	801c778 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801aa7c:	e009      	b.n	801aa92 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801aa7e:	2114      	movs	r1, #20
 801aa80:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801aa84:	f001 fe78 	bl	801c778 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801aa88:	2124      	movs	r1, #36	; 0x24
 801aa8a:	f240 7041 	movw	r0, #1857	; 0x741
 801aa8e:	f001 fe73 	bl	801c778 <SUBGRF_WriteRegister>
}
 801aa92:	bf00      	nop
 801aa94:	3708      	adds	r7, #8
 801aa96:	46bd      	mov	sp, r7
 801aa98:	bd80      	pop	{r7, pc}
 801aa9a:	bf00      	nop
 801aa9c:	20001cf0 	.word	0x20001cf0

0801aaa0 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801aaa0:	b580      	push	{r7, lr}
 801aaa2:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801aaa4:	f001 ffb8 	bl	801ca18 <SUBGRF_GetRadioWakeUpTime>
 801aaa8:	4603      	mov	r3, r0
 801aaaa:	3303      	adds	r3, #3
}
 801aaac:	4618      	mov	r0, r3
 801aaae:	bd80      	pop	{r7, pc}

0801aab0 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801aab0:	b580      	push	{r7, lr}
 801aab2:	b082      	sub	sp, #8
 801aab4:	af00      	add	r7, sp, #0
 801aab6:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801aab8:	f000 f80e 	bl	801aad8 <RadioOnTxTimeoutProcess>
}
 801aabc:	bf00      	nop
 801aabe:	3708      	adds	r7, #8
 801aac0:	46bd      	mov	sp, r7
 801aac2:	bd80      	pop	{r7, pc}

0801aac4 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801aac4:	b580      	push	{r7, lr}
 801aac6:	b082      	sub	sp, #8
 801aac8:	af00      	add	r7, sp, #0
 801aaca:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801aacc:	f000 f818 	bl	801ab00 <RadioOnRxTimeoutProcess>
}
 801aad0:	bf00      	nop
 801aad2:	3708      	adds	r7, #8
 801aad4:	46bd      	mov	sp, r7
 801aad6:	bd80      	pop	{r7, pc}

0801aad8 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801aad8:	b580      	push	{r7, lr}
 801aada:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801aadc:	4b07      	ldr	r3, [pc, #28]	; (801aafc <RadioOnTxTimeoutProcess+0x24>)
 801aade:	681b      	ldr	r3, [r3, #0]
 801aae0:	2b00      	cmp	r3, #0
 801aae2:	d008      	beq.n	801aaf6 <RadioOnTxTimeoutProcess+0x1e>
 801aae4:	4b05      	ldr	r3, [pc, #20]	; (801aafc <RadioOnTxTimeoutProcess+0x24>)
 801aae6:	681b      	ldr	r3, [r3, #0]
 801aae8:	685b      	ldr	r3, [r3, #4]
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	d003      	beq.n	801aaf6 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801aaee:	4b03      	ldr	r3, [pc, #12]	; (801aafc <RadioOnTxTimeoutProcess+0x24>)
 801aaf0:	681b      	ldr	r3, [r3, #0]
 801aaf2:	685b      	ldr	r3, [r3, #4]
 801aaf4:	4798      	blx	r3
    }
}
 801aaf6:	bf00      	nop
 801aaf8:	bd80      	pop	{r7, pc}
 801aafa:	bf00      	nop
 801aafc:	20001cec 	.word	0x20001cec

0801ab00 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801ab00:	b580      	push	{r7, lr}
 801ab02:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801ab04:	4b07      	ldr	r3, [pc, #28]	; (801ab24 <RadioOnRxTimeoutProcess+0x24>)
 801ab06:	681b      	ldr	r3, [r3, #0]
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d008      	beq.n	801ab1e <RadioOnRxTimeoutProcess+0x1e>
 801ab0c:	4b05      	ldr	r3, [pc, #20]	; (801ab24 <RadioOnRxTimeoutProcess+0x24>)
 801ab0e:	681b      	ldr	r3, [r3, #0]
 801ab10:	68db      	ldr	r3, [r3, #12]
 801ab12:	2b00      	cmp	r3, #0
 801ab14:	d003      	beq.n	801ab1e <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801ab16:	4b03      	ldr	r3, [pc, #12]	; (801ab24 <RadioOnRxTimeoutProcess+0x24>)
 801ab18:	681b      	ldr	r3, [r3, #0]
 801ab1a:	68db      	ldr	r3, [r3, #12]
 801ab1c:	4798      	blx	r3
    }
}
 801ab1e:	bf00      	nop
 801ab20:	bd80      	pop	{r7, pc}
 801ab22:	bf00      	nop
 801ab24:	20001cec 	.word	0x20001cec

0801ab28 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801ab28:	b580      	push	{r7, lr}
 801ab2a:	b082      	sub	sp, #8
 801ab2c:	af00      	add	r7, sp, #0
 801ab2e:	4603      	mov	r3, r0
 801ab30:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801ab32:	4a05      	ldr	r2, [pc, #20]	; (801ab48 <RadioOnDioIrq+0x20>)
 801ab34:	88fb      	ldrh	r3, [r7, #6]
 801ab36:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801ab3a:	f000 f807 	bl	801ab4c <RadioIrqProcess>
}
 801ab3e:	bf00      	nop
 801ab40:	3708      	adds	r7, #8
 801ab42:	46bd      	mov	sp, r7
 801ab44:	bd80      	pop	{r7, pc}
 801ab46:	bf00      	nop
 801ab48:	20001cf0 	.word	0x20001cf0

0801ab4c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801ab4c:	b5b0      	push	{r4, r5, r7, lr}
 801ab4e:	b082      	sub	sp, #8
 801ab50:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801ab52:	2300      	movs	r3, #0
 801ab54:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801ab56:	2300      	movs	r3, #0
 801ab58:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801ab5a:	4ba8      	ldr	r3, [pc, #672]	; (801adfc <RadioIrqProcess+0x2b0>)
 801ab5c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801ab60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ab64:	f000 810d 	beq.w	801ad82 <RadioIrqProcess+0x236>
 801ab68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ab6c:	f300 81e8 	bgt.w	801af40 <RadioIrqProcess+0x3f4>
 801ab70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ab74:	f000 80f1 	beq.w	801ad5a <RadioIrqProcess+0x20e>
 801ab78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ab7c:	f300 81e0 	bgt.w	801af40 <RadioIrqProcess+0x3f4>
 801ab80:	2b80      	cmp	r3, #128	; 0x80
 801ab82:	f000 80d6 	beq.w	801ad32 <RadioIrqProcess+0x1e6>
 801ab86:	2b80      	cmp	r3, #128	; 0x80
 801ab88:	f300 81da 	bgt.w	801af40 <RadioIrqProcess+0x3f4>
 801ab8c:	2b20      	cmp	r3, #32
 801ab8e:	dc49      	bgt.n	801ac24 <RadioIrqProcess+0xd8>
 801ab90:	2b00      	cmp	r3, #0
 801ab92:	f340 81d5 	ble.w	801af40 <RadioIrqProcess+0x3f4>
 801ab96:	3b01      	subs	r3, #1
 801ab98:	2b1f      	cmp	r3, #31
 801ab9a:	f200 81d1 	bhi.w	801af40 <RadioIrqProcess+0x3f4>
 801ab9e:	a201      	add	r2, pc, #4	; (adr r2, 801aba4 <RadioIrqProcess+0x58>)
 801aba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aba4:	0801ac2d 	.word	0x0801ac2d
 801aba8:	0801ac67 	.word	0x0801ac67
 801abac:	0801af41 	.word	0x0801af41
 801abb0:	0801ae1d 	.word	0x0801ae1d
 801abb4:	0801af41 	.word	0x0801af41
 801abb8:	0801af41 	.word	0x0801af41
 801abbc:	0801af41 	.word	0x0801af41
 801abc0:	0801ae99 	.word	0x0801ae99
 801abc4:	0801af41 	.word	0x0801af41
 801abc8:	0801af41 	.word	0x0801af41
 801abcc:	0801af41 	.word	0x0801af41
 801abd0:	0801af41 	.word	0x0801af41
 801abd4:	0801af41 	.word	0x0801af41
 801abd8:	0801af41 	.word	0x0801af41
 801abdc:	0801af41 	.word	0x0801af41
 801abe0:	0801aeb5 	.word	0x0801aeb5
 801abe4:	0801af41 	.word	0x0801af41
 801abe8:	0801af41 	.word	0x0801af41
 801abec:	0801af41 	.word	0x0801af41
 801abf0:	0801af41 	.word	0x0801af41
 801abf4:	0801af41 	.word	0x0801af41
 801abf8:	0801af41 	.word	0x0801af41
 801abfc:	0801af41 	.word	0x0801af41
 801ac00:	0801af41 	.word	0x0801af41
 801ac04:	0801af41 	.word	0x0801af41
 801ac08:	0801af41 	.word	0x0801af41
 801ac0c:	0801af41 	.word	0x0801af41
 801ac10:	0801af41 	.word	0x0801af41
 801ac14:	0801af41 	.word	0x0801af41
 801ac18:	0801af41 	.word	0x0801af41
 801ac1c:	0801af41 	.word	0x0801af41
 801ac20:	0801aec3 	.word	0x0801aec3
 801ac24:	2b40      	cmp	r3, #64	; 0x40
 801ac26:	f000 816d 	beq.w	801af04 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 801ac2a:	e189      	b.n	801af40 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801ac2c:	4874      	ldr	r0, [pc, #464]	; (801ae00 <RadioIrqProcess+0x2b4>)
 801ac2e:	f002 ffbf 	bl	801dbb0 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801ac32:	2000      	movs	r0, #0
 801ac34:	f001 f81c 	bl	801bc70 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801ac38:	f002 f892 	bl	801cd60 <RFW_Is_LongPacketModeEnabled>
 801ac3c:	4603      	mov	r3, r0
 801ac3e:	2b01      	cmp	r3, #1
 801ac40:	d101      	bne.n	801ac46 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801ac42:	f002 f8b6 	bl	801cdb2 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801ac46:	4b6f      	ldr	r3, [pc, #444]	; (801ae04 <RadioIrqProcess+0x2b8>)
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	2b00      	cmp	r3, #0
 801ac4c:	f000 817a 	beq.w	801af44 <RadioIrqProcess+0x3f8>
 801ac50:	4b6c      	ldr	r3, [pc, #432]	; (801ae04 <RadioIrqProcess+0x2b8>)
 801ac52:	681b      	ldr	r3, [r3, #0]
 801ac54:	681b      	ldr	r3, [r3, #0]
 801ac56:	2b00      	cmp	r3, #0
 801ac58:	f000 8174 	beq.w	801af44 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801ac5c:	4b69      	ldr	r3, [pc, #420]	; (801ae04 <RadioIrqProcess+0x2b8>)
 801ac5e:	681b      	ldr	r3, [r3, #0]
 801ac60:	681b      	ldr	r3, [r3, #0]
 801ac62:	4798      	blx	r3
        break;
 801ac64:	e16e      	b.n	801af44 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801ac66:	4868      	ldr	r0, [pc, #416]	; (801ae08 <RadioIrqProcess+0x2bc>)
 801ac68:	f002 ffa2 	bl	801dbb0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801ac6c:	4b63      	ldr	r3, [pc, #396]	; (801adfc <RadioIrqProcess+0x2b0>)
 801ac6e:	785b      	ldrb	r3, [r3, #1]
 801ac70:	f083 0301 	eor.w	r3, r3, #1
 801ac74:	b2db      	uxtb	r3, r3
 801ac76:	2b00      	cmp	r3, #0
 801ac78:	d014      	beq.n	801aca4 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801ac7a:	2000      	movs	r0, #0
 801ac7c:	f000 fff8 	bl	801bc70 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801ac80:	2100      	movs	r1, #0
 801ac82:	f640 1002 	movw	r0, #2306	; 0x902
 801ac86:	f001 fd77 	bl	801c778 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801ac8a:	f640 1044 	movw	r0, #2372	; 0x944
 801ac8e:	f001 fd87 	bl	801c7a0 <SUBGRF_ReadRegister>
 801ac92:	4603      	mov	r3, r0
 801ac94:	f043 0302 	orr.w	r3, r3, #2
 801ac98:	b2db      	uxtb	r3, r3
 801ac9a:	4619      	mov	r1, r3
 801ac9c:	f640 1044 	movw	r0, #2372	; 0x944
 801aca0:	f001 fd6a 	bl	801c778 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801aca4:	1dfb      	adds	r3, r7, #7
 801aca6:	22ff      	movs	r2, #255	; 0xff
 801aca8:	4619      	mov	r1, r3
 801acaa:	4858      	ldr	r0, [pc, #352]	; (801ae0c <RadioIrqProcess+0x2c0>)
 801acac:	f000 feb0 	bl	801ba10 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801acb0:	4857      	ldr	r0, [pc, #348]	; (801ae10 <RadioIrqProcess+0x2c4>)
 801acb2:	f001 fd0f 	bl	801c6d4 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801acb6:	4b53      	ldr	r3, [pc, #332]	; (801ae04 <RadioIrqProcess+0x2b8>)
 801acb8:	681b      	ldr	r3, [r3, #0]
 801acba:	2b00      	cmp	r3, #0
 801acbc:	f000 8144 	beq.w	801af48 <RadioIrqProcess+0x3fc>
 801acc0:	4b50      	ldr	r3, [pc, #320]	; (801ae04 <RadioIrqProcess+0x2b8>)
 801acc2:	681b      	ldr	r3, [r3, #0]
 801acc4:	689b      	ldr	r3, [r3, #8]
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	f000 813e 	beq.w	801af48 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801accc:	4b4b      	ldr	r3, [pc, #300]	; (801adfc <RadioIrqProcess+0x2b0>)
 801acce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801acd2:	2b01      	cmp	r3, #1
 801acd4:	d10e      	bne.n	801acf4 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801acd6:	4b4b      	ldr	r3, [pc, #300]	; (801ae04 <RadioIrqProcess+0x2b8>)
 801acd8:	681b      	ldr	r3, [r3, #0]
 801acda:	689c      	ldr	r4, [r3, #8]
 801acdc:	79fb      	ldrb	r3, [r7, #7]
 801acde:	b299      	uxth	r1, r3
 801ace0:	4b46      	ldr	r3, [pc, #280]	; (801adfc <RadioIrqProcess+0x2b0>)
 801ace2:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801ace6:	b21a      	sxth	r2, r3
 801ace8:	4b44      	ldr	r3, [pc, #272]	; (801adfc <RadioIrqProcess+0x2b0>)
 801acea:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801acee:	4847      	ldr	r0, [pc, #284]	; (801ae0c <RadioIrqProcess+0x2c0>)
 801acf0:	47a0      	blx	r4
                break;
 801acf2:	e01d      	b.n	801ad30 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801acf4:	4b41      	ldr	r3, [pc, #260]	; (801adfc <RadioIrqProcess+0x2b0>)
 801acf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801acf8:	463a      	mov	r2, r7
 801acfa:	4611      	mov	r1, r2
 801acfc:	4618      	mov	r0, r3
 801acfe:	f001 ff7d 	bl	801cbfc <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801ad02:	4b40      	ldr	r3, [pc, #256]	; (801ae04 <RadioIrqProcess+0x2b8>)
 801ad04:	681b      	ldr	r3, [r3, #0]
 801ad06:	689c      	ldr	r4, [r3, #8]
 801ad08:	79fb      	ldrb	r3, [r7, #7]
 801ad0a:	b299      	uxth	r1, r3
 801ad0c:	4b3b      	ldr	r3, [pc, #236]	; (801adfc <RadioIrqProcess+0x2b0>)
 801ad0e:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801ad12:	b218      	sxth	r0, r3
 801ad14:	683b      	ldr	r3, [r7, #0]
 801ad16:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801ad1a:	4a3e      	ldr	r2, [pc, #248]	; (801ae14 <RadioIrqProcess+0x2c8>)
 801ad1c:	fb82 5203 	smull	r5, r2, r2, r3
 801ad20:	1192      	asrs	r2, r2, #6
 801ad22:	17db      	asrs	r3, r3, #31
 801ad24:	1ad3      	subs	r3, r2, r3
 801ad26:	b25b      	sxtb	r3, r3
 801ad28:	4602      	mov	r2, r0
 801ad2a:	4838      	ldr	r0, [pc, #224]	; (801ae0c <RadioIrqProcess+0x2c0>)
 801ad2c:	47a0      	blx	r4
                break;
 801ad2e:	bf00      	nop
        break;
 801ad30:	e10a      	b.n	801af48 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801ad32:	2000      	movs	r0, #0
 801ad34:	f000 ff9c 	bl	801bc70 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801ad38:	4b32      	ldr	r3, [pc, #200]	; (801ae04 <RadioIrqProcess+0x2b8>)
 801ad3a:	681b      	ldr	r3, [r3, #0]
 801ad3c:	2b00      	cmp	r3, #0
 801ad3e:	f000 8105 	beq.w	801af4c <RadioIrqProcess+0x400>
 801ad42:	4b30      	ldr	r3, [pc, #192]	; (801ae04 <RadioIrqProcess+0x2b8>)
 801ad44:	681b      	ldr	r3, [r3, #0]
 801ad46:	699b      	ldr	r3, [r3, #24]
 801ad48:	2b00      	cmp	r3, #0
 801ad4a:	f000 80ff 	beq.w	801af4c <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 801ad4e:	4b2d      	ldr	r3, [pc, #180]	; (801ae04 <RadioIrqProcess+0x2b8>)
 801ad50:	681b      	ldr	r3, [r3, #0]
 801ad52:	699b      	ldr	r3, [r3, #24]
 801ad54:	2000      	movs	r0, #0
 801ad56:	4798      	blx	r3
        break;
 801ad58:	e0f8      	b.n	801af4c <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 801ad5a:	2000      	movs	r0, #0
 801ad5c:	f000 ff88 	bl	801bc70 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801ad60:	4b28      	ldr	r3, [pc, #160]	; (801ae04 <RadioIrqProcess+0x2b8>)
 801ad62:	681b      	ldr	r3, [r3, #0]
 801ad64:	2b00      	cmp	r3, #0
 801ad66:	f000 80f3 	beq.w	801af50 <RadioIrqProcess+0x404>
 801ad6a:	4b26      	ldr	r3, [pc, #152]	; (801ae04 <RadioIrqProcess+0x2b8>)
 801ad6c:	681b      	ldr	r3, [r3, #0]
 801ad6e:	699b      	ldr	r3, [r3, #24]
 801ad70:	2b00      	cmp	r3, #0
 801ad72:	f000 80ed 	beq.w	801af50 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801ad76:	4b23      	ldr	r3, [pc, #140]	; (801ae04 <RadioIrqProcess+0x2b8>)
 801ad78:	681b      	ldr	r3, [r3, #0]
 801ad7a:	699b      	ldr	r3, [r3, #24]
 801ad7c:	2001      	movs	r0, #1
 801ad7e:	4798      	blx	r3
        break;
 801ad80:	e0e6      	b.n	801af50 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801ad82:	4b25      	ldr	r3, [pc, #148]	; (801ae18 <RadioIrqProcess+0x2cc>)
 801ad84:	2201      	movs	r2, #1
 801ad86:	2100      	movs	r1, #0
 801ad88:	2002      	movs	r0, #2
 801ad8a:	f003 f91b 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801ad8e:	f000 fe25 	bl	801b9dc <SUBGRF_GetOperatingMode>
 801ad92:	4603      	mov	r3, r0
 801ad94:	2b04      	cmp	r3, #4
 801ad96:	d115      	bne.n	801adc4 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801ad98:	4819      	ldr	r0, [pc, #100]	; (801ae00 <RadioIrqProcess+0x2b4>)
 801ad9a:	f002 ff09 	bl	801dbb0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801ad9e:	2000      	movs	r0, #0
 801ada0:	f000 ff66 	bl	801bc70 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801ada4:	4b17      	ldr	r3, [pc, #92]	; (801ae04 <RadioIrqProcess+0x2b8>)
 801ada6:	681b      	ldr	r3, [r3, #0]
 801ada8:	2b00      	cmp	r3, #0
 801adaa:	f000 80d3 	beq.w	801af54 <RadioIrqProcess+0x408>
 801adae:	4b15      	ldr	r3, [pc, #84]	; (801ae04 <RadioIrqProcess+0x2b8>)
 801adb0:	681b      	ldr	r3, [r3, #0]
 801adb2:	685b      	ldr	r3, [r3, #4]
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	f000 80cd 	beq.w	801af54 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801adba:	4b12      	ldr	r3, [pc, #72]	; (801ae04 <RadioIrqProcess+0x2b8>)
 801adbc:	681b      	ldr	r3, [r3, #0]
 801adbe:	685b      	ldr	r3, [r3, #4]
 801adc0:	4798      	blx	r3
        break;
 801adc2:	e0c7      	b.n	801af54 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801adc4:	f000 fe0a 	bl	801b9dc <SUBGRF_GetOperatingMode>
 801adc8:	4603      	mov	r3, r0
 801adca:	2b05      	cmp	r3, #5
 801adcc:	f040 80c2 	bne.w	801af54 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801add0:	480d      	ldr	r0, [pc, #52]	; (801ae08 <RadioIrqProcess+0x2bc>)
 801add2:	f002 feed 	bl	801dbb0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801add6:	2000      	movs	r0, #0
 801add8:	f000 ff4a 	bl	801bc70 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801addc:	4b09      	ldr	r3, [pc, #36]	; (801ae04 <RadioIrqProcess+0x2b8>)
 801adde:	681b      	ldr	r3, [r3, #0]
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	f000 80b7 	beq.w	801af54 <RadioIrqProcess+0x408>
 801ade6:	4b07      	ldr	r3, [pc, #28]	; (801ae04 <RadioIrqProcess+0x2b8>)
 801ade8:	681b      	ldr	r3, [r3, #0]
 801adea:	68db      	ldr	r3, [r3, #12]
 801adec:	2b00      	cmp	r3, #0
 801adee:	f000 80b1 	beq.w	801af54 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801adf2:	4b04      	ldr	r3, [pc, #16]	; (801ae04 <RadioIrqProcess+0x2b8>)
 801adf4:	681b      	ldr	r3, [r3, #0]
 801adf6:	68db      	ldr	r3, [r3, #12]
 801adf8:	4798      	blx	r3
        break;
 801adfa:	e0ab      	b.n	801af54 <RadioIrqProcess+0x408>
 801adfc:	20001cf0 	.word	0x20001cf0
 801ae00:	20001d4c 	.word	0x20001d4c
 801ae04:	20001cec 	.word	0x20001cec
 801ae08:	20001d64 	.word	0x20001d64
 801ae0c:	20001bec 	.word	0x20001bec
 801ae10:	20001d14 	.word	0x20001d14
 801ae14:	10624dd3 	.word	0x10624dd3
 801ae18:	0801eeec 	.word	0x0801eeec
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801ae1c:	4b54      	ldr	r3, [pc, #336]	; (801af70 <RadioIrqProcess+0x424>)
 801ae1e:	2201      	movs	r2, #1
 801ae20:	2100      	movs	r1, #0
 801ae22:	2002      	movs	r0, #2
 801ae24:	f003 f8ce 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801ae28:	4b52      	ldr	r3, [pc, #328]	; (801af74 <RadioIrqProcess+0x428>)
 801ae2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ae2c:	2b00      	cmp	r3, #0
 801ae2e:	f000 8093 	beq.w	801af58 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801ae32:	4a51      	ldr	r2, [pc, #324]	; (801af78 <RadioIrqProcess+0x42c>)
 801ae34:	4b4f      	ldr	r3, [pc, #316]	; (801af74 <RadioIrqProcess+0x428>)
 801ae36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ae38:	0c1b      	lsrs	r3, r3, #16
 801ae3a:	b2db      	uxtb	r3, r3
 801ae3c:	4619      	mov	r1, r3
 801ae3e:	f640 1003 	movw	r0, #2307	; 0x903
 801ae42:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801ae44:	4a4c      	ldr	r2, [pc, #304]	; (801af78 <RadioIrqProcess+0x42c>)
 801ae46:	4b4b      	ldr	r3, [pc, #300]	; (801af74 <RadioIrqProcess+0x428>)
 801ae48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ae4a:	0a1b      	lsrs	r3, r3, #8
 801ae4c:	b2db      	uxtb	r3, r3
 801ae4e:	4619      	mov	r1, r3
 801ae50:	f640 1004 	movw	r0, #2308	; 0x904
 801ae54:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801ae56:	4a48      	ldr	r2, [pc, #288]	; (801af78 <RadioIrqProcess+0x42c>)
 801ae58:	4b46      	ldr	r3, [pc, #280]	; (801af74 <RadioIrqProcess+0x428>)
 801ae5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ae5c:	b2db      	uxtb	r3, r3
 801ae5e:	4619      	mov	r1, r3
 801ae60:	f640 1005 	movw	r0, #2309	; 0x905
 801ae64:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801ae66:	4c44      	ldr	r4, [pc, #272]	; (801af78 <RadioIrqProcess+0x42c>)
 801ae68:	4b44      	ldr	r3, [pc, #272]	; (801af7c <RadioIrqProcess+0x430>)
 801ae6a:	f640 1002 	movw	r0, #2306	; 0x902
 801ae6e:	4798      	blx	r3
 801ae70:	4603      	mov	r3, r0
 801ae72:	f043 0301 	orr.w	r3, r3, #1
 801ae76:	b2db      	uxtb	r3, r3
 801ae78:	4619      	mov	r1, r3
 801ae7a:	f640 1002 	movw	r0, #2306	; 0x902
 801ae7e:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801ae80:	4b3c      	ldr	r3, [pc, #240]	; (801af74 <RadioIrqProcess+0x428>)
 801ae82:	2200      	movs	r2, #0
 801ae84:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801ae86:	2300      	movs	r3, #0
 801ae88:	2200      	movs	r2, #0
 801ae8a:	f240 2162 	movw	r1, #610	; 0x262
 801ae8e:	f240 2062 	movw	r0, #610	; 0x262
 801ae92:	f001 f8c1 	bl	801c018 <SUBGRF_SetDioIrqParams>
        break;
 801ae96:	e05f      	b.n	801af58 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801ae98:	4b39      	ldr	r3, [pc, #228]	; (801af80 <RadioIrqProcess+0x434>)
 801ae9a:	2201      	movs	r2, #1
 801ae9c:	2100      	movs	r1, #0
 801ae9e:	2002      	movs	r0, #2
 801aea0:	f003 f890 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801aea4:	f001 ff55 	bl	801cd52 <RFW_Is_Init>
 801aea8:	4603      	mov	r3, r0
 801aeaa:	2b01      	cmp	r3, #1
 801aeac:	d156      	bne.n	801af5c <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801aeae:	f001 ff86 	bl	801cdbe <RFW_ReceivePayload>
        break;
 801aeb2:	e053      	b.n	801af5c <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801aeb4:	4b33      	ldr	r3, [pc, #204]	; (801af84 <RadioIrqProcess+0x438>)
 801aeb6:	2201      	movs	r2, #1
 801aeb8:	2100      	movs	r1, #0
 801aeba:	2002      	movs	r0, #2
 801aebc:	f003 f882 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801aec0:	e051      	b.n	801af66 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801aec2:	4831      	ldr	r0, [pc, #196]	; (801af88 <RadioIrqProcess+0x43c>)
 801aec4:	f002 fe74 	bl	801dbb0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801aec8:	4b2a      	ldr	r3, [pc, #168]	; (801af74 <RadioIrqProcess+0x428>)
 801aeca:	785b      	ldrb	r3, [r3, #1]
 801aecc:	f083 0301 	eor.w	r3, r3, #1
 801aed0:	b2db      	uxtb	r3, r3
 801aed2:	2b00      	cmp	r3, #0
 801aed4:	d002      	beq.n	801aedc <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801aed6:	2000      	movs	r0, #0
 801aed8:	f000 feca 	bl	801bc70 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801aedc:	4b2b      	ldr	r3, [pc, #172]	; (801af8c <RadioIrqProcess+0x440>)
 801aede:	681b      	ldr	r3, [r3, #0]
 801aee0:	2b00      	cmp	r3, #0
 801aee2:	d03d      	beq.n	801af60 <RadioIrqProcess+0x414>
 801aee4:	4b29      	ldr	r3, [pc, #164]	; (801af8c <RadioIrqProcess+0x440>)
 801aee6:	681b      	ldr	r3, [r3, #0]
 801aee8:	68db      	ldr	r3, [r3, #12]
 801aeea:	2b00      	cmp	r3, #0
 801aeec:	d038      	beq.n	801af60 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801aeee:	4b27      	ldr	r3, [pc, #156]	; (801af8c <RadioIrqProcess+0x440>)
 801aef0:	681b      	ldr	r3, [r3, #0]
 801aef2:	68db      	ldr	r3, [r3, #12]
 801aef4:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801aef6:	4b26      	ldr	r3, [pc, #152]	; (801af90 <RadioIrqProcess+0x444>)
 801aef8:	2201      	movs	r2, #1
 801aefa:	2100      	movs	r1, #0
 801aefc:	2002      	movs	r0, #2
 801aefe:	f003 f861 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801af02:	e02d      	b.n	801af60 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801af04:	4b23      	ldr	r3, [pc, #140]	; (801af94 <RadioIrqProcess+0x448>)
 801af06:	2201      	movs	r2, #1
 801af08:	2100      	movs	r1, #0
 801af0a:	2002      	movs	r0, #2
 801af0c:	f003 f85a 	bl	801dfc4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801af10:	4b18      	ldr	r3, [pc, #96]	; (801af74 <RadioIrqProcess+0x428>)
 801af12:	785b      	ldrb	r3, [r3, #1]
 801af14:	f083 0301 	eor.w	r3, r3, #1
 801af18:	b2db      	uxtb	r3, r3
 801af1a:	2b00      	cmp	r3, #0
 801af1c:	d002      	beq.n	801af24 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801af1e:	2000      	movs	r0, #0
 801af20:	f000 fea6 	bl	801bc70 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801af24:	4b19      	ldr	r3, [pc, #100]	; (801af8c <RadioIrqProcess+0x440>)
 801af26:	681b      	ldr	r3, [r3, #0]
 801af28:	2b00      	cmp	r3, #0
 801af2a:	d01b      	beq.n	801af64 <RadioIrqProcess+0x418>
 801af2c:	4b17      	ldr	r3, [pc, #92]	; (801af8c <RadioIrqProcess+0x440>)
 801af2e:	681b      	ldr	r3, [r3, #0]
 801af30:	691b      	ldr	r3, [r3, #16]
 801af32:	2b00      	cmp	r3, #0
 801af34:	d016      	beq.n	801af64 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801af36:	4b15      	ldr	r3, [pc, #84]	; (801af8c <RadioIrqProcess+0x440>)
 801af38:	681b      	ldr	r3, [r3, #0]
 801af3a:	691b      	ldr	r3, [r3, #16]
 801af3c:	4798      	blx	r3
        break;
 801af3e:	e011      	b.n	801af64 <RadioIrqProcess+0x418>
        break;
 801af40:	bf00      	nop
 801af42:	e010      	b.n	801af66 <RadioIrqProcess+0x41a>
        break;
 801af44:	bf00      	nop
 801af46:	e00e      	b.n	801af66 <RadioIrqProcess+0x41a>
        break;
 801af48:	bf00      	nop
 801af4a:	e00c      	b.n	801af66 <RadioIrqProcess+0x41a>
        break;
 801af4c:	bf00      	nop
 801af4e:	e00a      	b.n	801af66 <RadioIrqProcess+0x41a>
        break;
 801af50:	bf00      	nop
 801af52:	e008      	b.n	801af66 <RadioIrqProcess+0x41a>
        break;
 801af54:	bf00      	nop
 801af56:	e006      	b.n	801af66 <RadioIrqProcess+0x41a>
        break;
 801af58:	bf00      	nop
 801af5a:	e004      	b.n	801af66 <RadioIrqProcess+0x41a>
        break;
 801af5c:	bf00      	nop
 801af5e:	e002      	b.n	801af66 <RadioIrqProcess+0x41a>
        break;
 801af60:	bf00      	nop
 801af62:	e000      	b.n	801af66 <RadioIrqProcess+0x41a>
        break;
 801af64:	bf00      	nop
    }
}
 801af66:	bf00      	nop
 801af68:	3708      	adds	r7, #8
 801af6a:	46bd      	mov	sp, r7
 801af6c:	bdb0      	pop	{r4, r5, r7, pc}
 801af6e:	bf00      	nop
 801af70:	0801ef00 	.word	0x0801ef00
 801af74:	20001cf0 	.word	0x20001cf0
 801af78:	0801a95b 	.word	0x0801a95b
 801af7c:	0801a97f 	.word	0x0801a97f
 801af80:	0801ef0c 	.word	0x0801ef0c
 801af84:	0801ef18 	.word	0x0801ef18
 801af88:	20001d64 	.word	0x20001d64
 801af8c:	20001cec 	.word	0x20001cec
 801af90:	0801ef24 	.word	0x0801ef24
 801af94:	0801ef30 	.word	0x0801ef30

0801af98 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801af98:	b580      	push	{r7, lr}
 801af9a:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801af9c:	4b09      	ldr	r3, [pc, #36]	; (801afc4 <RadioTxPrbs+0x2c>)
 801af9e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801afa2:	2101      	movs	r1, #1
 801afa4:	4618      	mov	r0, r3
 801afa6:	f001 fcdb 	bl	801c960 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801afaa:	4b07      	ldr	r3, [pc, #28]	; (801afc8 <RadioTxPrbs+0x30>)
 801afac:	212d      	movs	r1, #45	; 0x2d
 801afae:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801afb2:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801afb4:	f000 ff1f 	bl	801bdf6 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801afb8:	4804      	ldr	r0, [pc, #16]	; (801afcc <RadioTxPrbs+0x34>)
 801afba:	f000 fe75 	bl	801bca8 <SUBGRF_SetTx>
}
 801afbe:	bf00      	nop
 801afc0:	bd80      	pop	{r7, pc}
 801afc2:	bf00      	nop
 801afc4:	20001cf0 	.word	0x20001cf0
 801afc8:	0801a95b 	.word	0x0801a95b
 801afcc:	000fffff 	.word	0x000fffff

0801afd0 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801afd0:	b580      	push	{r7, lr}
 801afd2:	b084      	sub	sp, #16
 801afd4:	af00      	add	r7, sp, #0
 801afd6:	4603      	mov	r3, r0
 801afd8:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801afda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801afde:	4618      	mov	r0, r3
 801afe0:	f001 fce6 	bl	801c9b0 <SUBGRF_SetRfTxPower>
 801afe4:	4603      	mov	r3, r0
 801afe6:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801afe8:	210e      	movs	r1, #14
 801afea:	f640 101f 	movw	r0, #2335	; 0x91f
 801afee:	f001 fbc3 	bl	801c778 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801aff2:	7bfb      	ldrb	r3, [r7, #15]
 801aff4:	2101      	movs	r1, #1
 801aff6:	4618      	mov	r0, r3
 801aff8:	f001 fcb2 	bl	801c960 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801affc:	f000 fef2 	bl	801bde4 <SUBGRF_SetTxContinuousWave>
}
 801b000:	bf00      	nop
 801b002:	3710      	adds	r7, #16
 801b004:	46bd      	mov	sp, r7
 801b006:	bd80      	pop	{r7, pc}

0801b008 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801b008:	b480      	push	{r7}
 801b00a:	b089      	sub	sp, #36	; 0x24
 801b00c:	af00      	add	r7, sp, #0
 801b00e:	60f8      	str	r0, [r7, #12]
 801b010:	60b9      	str	r1, [r7, #8]
 801b012:	4613      	mov	r3, r2
 801b014:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801b016:	2300      	movs	r3, #0
 801b018:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801b01a:	2300      	movs	r3, #0
 801b01c:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801b01e:	2300      	movs	r3, #0
 801b020:	61bb      	str	r3, [r7, #24]
 801b022:	e011      	b.n	801b048 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801b024:	69bb      	ldr	r3, [r7, #24]
 801b026:	68ba      	ldr	r2, [r7, #8]
 801b028:	4413      	add	r3, r2
 801b02a:	781a      	ldrb	r2, [r3, #0]
 801b02c:	69bb      	ldr	r3, [r7, #24]
 801b02e:	68b9      	ldr	r1, [r7, #8]
 801b030:	440b      	add	r3, r1
 801b032:	43d2      	mvns	r2, r2
 801b034:	b2d2      	uxtb	r2, r2
 801b036:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801b038:	69bb      	ldr	r3, [r7, #24]
 801b03a:	68fa      	ldr	r2, [r7, #12]
 801b03c:	4413      	add	r3, r2
 801b03e:	2200      	movs	r2, #0
 801b040:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801b042:	69bb      	ldr	r3, [r7, #24]
 801b044:	3301      	adds	r3, #1
 801b046:	61bb      	str	r3, [r7, #24]
 801b048:	79fb      	ldrb	r3, [r7, #7]
 801b04a:	69ba      	ldr	r2, [r7, #24]
 801b04c:	429a      	cmp	r2, r3
 801b04e:	dbe9      	blt.n	801b024 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801b050:	2300      	movs	r3, #0
 801b052:	61bb      	str	r3, [r7, #24]
 801b054:	e049      	b.n	801b0ea <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801b056:	69bb      	ldr	r3, [r7, #24]
 801b058:	425a      	negs	r2, r3
 801b05a:	f003 0307 	and.w	r3, r3, #7
 801b05e:	f002 0207 	and.w	r2, r2, #7
 801b062:	bf58      	it	pl
 801b064:	4253      	negpl	r3, r2
 801b066:	b2db      	uxtb	r3, r3
 801b068:	f1c3 0307 	rsb	r3, r3, #7
 801b06c:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801b06e:	69bb      	ldr	r3, [r7, #24]
 801b070:	2b00      	cmp	r3, #0
 801b072:	da00      	bge.n	801b076 <payload_integration+0x6e>
 801b074:	3307      	adds	r3, #7
 801b076:	10db      	asrs	r3, r3, #3
 801b078:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801b07a:	69bb      	ldr	r3, [r7, #24]
 801b07c:	3301      	adds	r3, #1
 801b07e:	425a      	negs	r2, r3
 801b080:	f003 0307 	and.w	r3, r3, #7
 801b084:	f002 0207 	and.w	r2, r2, #7
 801b088:	bf58      	it	pl
 801b08a:	4253      	negpl	r3, r2
 801b08c:	b2db      	uxtb	r3, r3
 801b08e:	f1c3 0307 	rsb	r3, r3, #7
 801b092:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801b094:	69bb      	ldr	r3, [r7, #24]
 801b096:	3301      	adds	r3, #1
 801b098:	2b00      	cmp	r3, #0
 801b09a:	da00      	bge.n	801b09e <payload_integration+0x96>
 801b09c:	3307      	adds	r3, #7
 801b09e:	10db      	asrs	r3, r3, #3
 801b0a0:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801b0a2:	7dbb      	ldrb	r3, [r7, #22]
 801b0a4:	68ba      	ldr	r2, [r7, #8]
 801b0a6:	4413      	add	r3, r2
 801b0a8:	781b      	ldrb	r3, [r3, #0]
 801b0aa:	461a      	mov	r2, r3
 801b0ac:	7dfb      	ldrb	r3, [r7, #23]
 801b0ae:	fa42 f303 	asr.w	r3, r2, r3
 801b0b2:	b2db      	uxtb	r3, r3
 801b0b4:	f003 0301 	and.w	r3, r3, #1
 801b0b8:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801b0ba:	7ffa      	ldrb	r2, [r7, #31]
 801b0bc:	7cfb      	ldrb	r3, [r7, #19]
 801b0be:	4053      	eors	r3, r2
 801b0c0:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801b0c2:	7d3b      	ldrb	r3, [r7, #20]
 801b0c4:	68fa      	ldr	r2, [r7, #12]
 801b0c6:	4413      	add	r3, r2
 801b0c8:	781b      	ldrb	r3, [r3, #0]
 801b0ca:	b25a      	sxtb	r2, r3
 801b0cc:	7ff9      	ldrb	r1, [r7, #31]
 801b0ce:	7d7b      	ldrb	r3, [r7, #21]
 801b0d0:	fa01 f303 	lsl.w	r3, r1, r3
 801b0d4:	b25b      	sxtb	r3, r3
 801b0d6:	4313      	orrs	r3, r2
 801b0d8:	b259      	sxtb	r1, r3
 801b0da:	7d3b      	ldrb	r3, [r7, #20]
 801b0dc:	68fa      	ldr	r2, [r7, #12]
 801b0de:	4413      	add	r3, r2
 801b0e0:	b2ca      	uxtb	r2, r1
 801b0e2:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801b0e4:	69bb      	ldr	r3, [r7, #24]
 801b0e6:	3301      	adds	r3, #1
 801b0e8:	61bb      	str	r3, [r7, #24]
 801b0ea:	79fb      	ldrb	r3, [r7, #7]
 801b0ec:	00db      	lsls	r3, r3, #3
 801b0ee:	69ba      	ldr	r2, [r7, #24]
 801b0f0:	429a      	cmp	r2, r3
 801b0f2:	dbb0      	blt.n	801b056 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801b0f4:	7ffb      	ldrb	r3, [r7, #31]
 801b0f6:	01db      	lsls	r3, r3, #7
 801b0f8:	b25a      	sxtb	r2, r3
 801b0fa:	7ffb      	ldrb	r3, [r7, #31]
 801b0fc:	019b      	lsls	r3, r3, #6
 801b0fe:	b25b      	sxtb	r3, r3
 801b100:	4313      	orrs	r3, r2
 801b102:	b25b      	sxtb	r3, r3
 801b104:	7ffa      	ldrb	r2, [r7, #31]
 801b106:	2a00      	cmp	r2, #0
 801b108:	d101      	bne.n	801b10e <payload_integration+0x106>
 801b10a:	2220      	movs	r2, #32
 801b10c:	e000      	b.n	801b110 <payload_integration+0x108>
 801b10e:	2200      	movs	r2, #0
 801b110:	4313      	orrs	r3, r2
 801b112:	b259      	sxtb	r1, r3
 801b114:	79fb      	ldrb	r3, [r7, #7]
 801b116:	68fa      	ldr	r2, [r7, #12]
 801b118:	4413      	add	r3, r2
 801b11a:	b2ca      	uxtb	r2, r1
 801b11c:	701a      	strb	r2, [r3, #0]
}
 801b11e:	bf00      	nop
 801b120:	3724      	adds	r7, #36	; 0x24
 801b122:	46bd      	mov	sp, r7
 801b124:	bc80      	pop	{r7}
 801b126:	4770      	bx	lr

0801b128 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801b128:	b580      	push	{r7, lr}
 801b12a:	b08c      	sub	sp, #48	; 0x30
 801b12c:	af00      	add	r7, sp, #0
 801b12e:	60b9      	str	r1, [r7, #8]
 801b130:	607a      	str	r2, [r7, #4]
 801b132:	603b      	str	r3, [r7, #0]
 801b134:	4603      	mov	r3, r0
 801b136:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801b138:	2300      	movs	r3, #0
 801b13a:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801b13c:	2300      	movs	r3, #0
 801b13e:	623b      	str	r3, [r7, #32]
 801b140:	2300      	movs	r3, #0
 801b142:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801b144:	f001 fdff 	bl	801cd46 <RFW_DeInit>

    if( rxContinuous != 0 )
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	2b00      	cmp	r3, #0
 801b14c:	d001      	beq.n	801b152 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801b14e:	2300      	movs	r3, #0
 801b150:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	2b00      	cmp	r3, #0
 801b156:	bf14      	ite	ne
 801b158:	2301      	movne	r3, #1
 801b15a:	2300      	moveq	r3, #0
 801b15c:	b2da      	uxtb	r2, r3
 801b15e:	4ba3      	ldr	r3, [pc, #652]	; (801b3ec <RadioSetRxGenericConfig+0x2c4>)
 801b160:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801b162:	7bfb      	ldrb	r3, [r7, #15]
 801b164:	2b00      	cmp	r3, #0
 801b166:	d003      	beq.n	801b170 <RadioSetRxGenericConfig+0x48>
 801b168:	2b01      	cmp	r3, #1
 801b16a:	f000 80dc 	beq.w	801b326 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801b16e:	e194      	b.n	801b49a <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801b170:	68bb      	ldr	r3, [r7, #8]
 801b172:	689b      	ldr	r3, [r3, #8]
 801b174:	2b00      	cmp	r3, #0
 801b176:	d003      	beq.n	801b180 <RadioSetRxGenericConfig+0x58>
 801b178:	68bb      	ldr	r3, [r7, #8]
 801b17a:	68db      	ldr	r3, [r3, #12]
 801b17c:	2b00      	cmp	r3, #0
 801b17e:	d102      	bne.n	801b186 <RadioSetRxGenericConfig+0x5e>
            return -1;
 801b180:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b184:	e18a      	b.n	801b49c <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801b186:	68bb      	ldr	r3, [r7, #8]
 801b188:	7f9b      	ldrb	r3, [r3, #30]
 801b18a:	2b08      	cmp	r3, #8
 801b18c:	d902      	bls.n	801b194 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801b18e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b192:	e183      	b.n	801b49c <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801b194:	68bb      	ldr	r3, [r7, #8]
 801b196:	6919      	ldr	r1, [r3, #16]
 801b198:	68bb      	ldr	r3, [r7, #8]
 801b19a:	7f9b      	ldrb	r3, [r3, #30]
 801b19c:	b29a      	uxth	r2, r3
 801b19e:	f107 0320 	add.w	r3, r7, #32
 801b1a2:	4618      	mov	r0, r3
 801b1a4:	f001 fec2 	bl	801cf2c <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801b1a8:	68bb      	ldr	r3, [r7, #8]
 801b1aa:	681b      	ldr	r3, [r3, #0]
 801b1ac:	2b00      	cmp	r3, #0
 801b1ae:	bf14      	ite	ne
 801b1b0:	2301      	movne	r3, #1
 801b1b2:	2300      	moveq	r3, #0
 801b1b4:	b2db      	uxtb	r3, r3
 801b1b6:	4618      	mov	r0, r3
 801b1b8:	f000 fe26 	bl	801be08 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b1bc:	4b8b      	ldr	r3, [pc, #556]	; (801b3ec <RadioSetRxGenericConfig+0x2c4>)
 801b1be:	2200      	movs	r2, #0
 801b1c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801b1c4:	68bb      	ldr	r3, [r7, #8]
 801b1c6:	689b      	ldr	r3, [r3, #8]
 801b1c8:	4a88      	ldr	r2, [pc, #544]	; (801b3ec <RadioSetRxGenericConfig+0x2c4>)
 801b1ca:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801b1cc:	68bb      	ldr	r3, [r7, #8]
 801b1ce:	f893 2020 	ldrb.w	r2, [r3, #32]
 801b1d2:	4b86      	ldr	r3, [pc, #536]	; (801b3ec <RadioSetRxGenericConfig+0x2c4>)
 801b1d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801b1d8:	68bb      	ldr	r3, [r7, #8]
 801b1da:	685b      	ldr	r3, [r3, #4]
 801b1dc:	4618      	mov	r0, r3
 801b1de:	f001 fce5 	bl	801cbac <SUBGRF_GetFskBandwidthRegValue>
 801b1e2:	4603      	mov	r3, r0
 801b1e4:	461a      	mov	r2, r3
 801b1e6:	4b81      	ldr	r3, [pc, #516]	; (801b3ec <RadioSetRxGenericConfig+0x2c4>)
 801b1e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b1ec:	4b7f      	ldr	r3, [pc, #508]	; (801b3ec <RadioSetRxGenericConfig+0x2c4>)
 801b1ee:	2200      	movs	r2, #0
 801b1f0:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801b1f2:	68bb      	ldr	r3, [r7, #8]
 801b1f4:	68db      	ldr	r3, [r3, #12]
 801b1f6:	b29b      	uxth	r3, r3
 801b1f8:	00db      	lsls	r3, r3, #3
 801b1fa:	b29a      	uxth	r2, r3
 801b1fc:	4b7b      	ldr	r3, [pc, #492]	; (801b3ec <RadioSetRxGenericConfig+0x2c4>)
 801b1fe:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801b200:	68bb      	ldr	r3, [r7, #8]
 801b202:	7fda      	ldrb	r2, [r3, #31]
 801b204:	4b79      	ldr	r3, [pc, #484]	; (801b3ec <RadioSetRxGenericConfig+0x2c4>)
 801b206:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801b208:	68bb      	ldr	r3, [r7, #8]
 801b20a:	7f9b      	ldrb	r3, [r3, #30]
 801b20c:	00db      	lsls	r3, r3, #3
 801b20e:	b2da      	uxtb	r2, r3
 801b210:	4b76      	ldr	r3, [pc, #472]	; (801b3ec <RadioSetRxGenericConfig+0x2c4>)
 801b212:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801b214:	68bb      	ldr	r3, [r7, #8]
 801b216:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801b21a:	4b74      	ldr	r3, [pc, #464]	; (801b3ec <RadioSetRxGenericConfig+0x2c4>)
 801b21c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801b21e:	68bb      	ldr	r3, [r7, #8]
 801b220:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b224:	2b00      	cmp	r3, #0
 801b226:	d105      	bne.n	801b234 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801b228:	68bb      	ldr	r3, [r7, #8]
 801b22a:	695b      	ldr	r3, [r3, #20]
 801b22c:	b2da      	uxtb	r2, r3
 801b22e:	4b6f      	ldr	r3, [pc, #444]	; (801b3ec <RadioSetRxGenericConfig+0x2c4>)
 801b230:	759a      	strb	r2, [r3, #22]
 801b232:	e00b      	b.n	801b24c <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801b234:	68bb      	ldr	r3, [r7, #8]
 801b236:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b23a:	2b02      	cmp	r3, #2
 801b23c:	d103      	bne.n	801b246 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801b23e:	4b6b      	ldr	r3, [pc, #428]	; (801b3ec <RadioSetRxGenericConfig+0x2c4>)
 801b240:	22ff      	movs	r2, #255	; 0xff
 801b242:	759a      	strb	r2, [r3, #22]
 801b244:	e002      	b.n	801b24c <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801b246:	4b69      	ldr	r3, [pc, #420]	; (801b3ec <RadioSetRxGenericConfig+0x2c4>)
 801b248:	22ff      	movs	r2, #255	; 0xff
 801b24a:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801b24c:	68bb      	ldr	r3, [r7, #8]
 801b24e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b252:	2b02      	cmp	r3, #2
 801b254:	d004      	beq.n	801b260 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801b256:	68bb      	ldr	r3, [r7, #8]
 801b258:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b25c:	2b02      	cmp	r3, #2
 801b25e:	d12d      	bne.n	801b2bc <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801b260:	68bb      	ldr	r3, [r7, #8]
 801b262:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b266:	2bf1      	cmp	r3, #241	; 0xf1
 801b268:	d00c      	beq.n	801b284 <RadioSetRxGenericConfig+0x15c>
 801b26a:	68bb      	ldr	r3, [r7, #8]
 801b26c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b270:	2bf2      	cmp	r3, #242	; 0xf2
 801b272:	d007      	beq.n	801b284 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801b274:	68bb      	ldr	r3, [r7, #8]
 801b276:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b27a:	2b01      	cmp	r3, #1
 801b27c:	d002      	beq.n	801b284 <RadioSetRxGenericConfig+0x15c>
                return -1;
 801b27e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b282:	e10b      	b.n	801b49c <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 801b284:	2300      	movs	r3, #0
 801b286:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801b288:	68bb      	ldr	r3, [r7, #8]
 801b28a:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801b28c:	4b58      	ldr	r3, [pc, #352]	; (801b3f0 <RadioSetRxGenericConfig+0x2c8>)
 801b28e:	6819      	ldr	r1, [r3, #0]
 801b290:	f107 0314 	add.w	r3, r7, #20
 801b294:	4a57      	ldr	r2, [pc, #348]	; (801b3f4 <RadioSetRxGenericConfig+0x2cc>)
 801b296:	4618      	mov	r0, r3
 801b298:	f001 fd48 	bl	801cd2c <RFW_Init>
 801b29c:	4603      	mov	r3, r0
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	d002      	beq.n	801b2a8 <RadioSetRxGenericConfig+0x180>
                return -1;
 801b2a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b2a6:	e0f9      	b.n	801b49c <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801b2a8:	4b50      	ldr	r3, [pc, #320]	; (801b3ec <RadioSetRxGenericConfig+0x2c4>)
 801b2aa:	2200      	movs	r2, #0
 801b2ac:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801b2ae:	4b4f      	ldr	r3, [pc, #316]	; (801b3ec <RadioSetRxGenericConfig+0x2c4>)
 801b2b0:	2201      	movs	r2, #1
 801b2b2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801b2b4:	4b4d      	ldr	r3, [pc, #308]	; (801b3ec <RadioSetRxGenericConfig+0x2c4>)
 801b2b6:	2200      	movs	r2, #0
 801b2b8:	755a      	strb	r2, [r3, #21]
        {
 801b2ba:	e00e      	b.n	801b2da <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801b2bc:	68bb      	ldr	r3, [r7, #8]
 801b2be:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801b2c2:	4b4a      	ldr	r3, [pc, #296]	; (801b3ec <RadioSetRxGenericConfig+0x2c4>)
 801b2c4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801b2c6:	68bb      	ldr	r3, [r7, #8]
 801b2c8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801b2cc:	4b47      	ldr	r3, [pc, #284]	; (801b3ec <RadioSetRxGenericConfig+0x2c4>)
 801b2ce:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801b2d0:	68bb      	ldr	r3, [r7, #8]
 801b2d2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801b2d6:	4b45      	ldr	r3, [pc, #276]	; (801b3ec <RadioSetRxGenericConfig+0x2c4>)
 801b2d8:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801b2da:	f7ff fa3c 	bl	801a756 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801b2de:	2000      	movs	r0, #0
 801b2e0:	f7fe fbd0 	bl	8019a84 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b2e4:	4844      	ldr	r0, [pc, #272]	; (801b3f8 <RadioSetRxGenericConfig+0x2d0>)
 801b2e6:	f001 f82d 	bl	801c344 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b2ea:	4844      	ldr	r0, [pc, #272]	; (801b3fc <RadioSetRxGenericConfig+0x2d4>)
 801b2ec:	f001 f8fc 	bl	801c4e8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801b2f0:	f107 0320 	add.w	r3, r7, #32
 801b2f4:	4618      	mov	r0, r3
 801b2f6:	f000 fbc0 	bl	801ba7a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801b2fa:	68bb      	ldr	r3, [r7, #8]
 801b2fc:	8b9b      	ldrh	r3, [r3, #28]
 801b2fe:	4618      	mov	r0, r3
 801b300:	f000 fc0a 	bl	801bb18 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801b304:	68bb      	ldr	r3, [r7, #8]
 801b306:	8b1b      	ldrh	r3, [r3, #24]
 801b308:	4618      	mov	r0, r3
 801b30a:	f000 fbe5 	bl	801bad8 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801b30e:	683b      	ldr	r3, [r7, #0]
 801b310:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801b314:	fb03 f202 	mul.w	r2, r3, r2
 801b318:	68bb      	ldr	r3, [r7, #8]
 801b31a:	689b      	ldr	r3, [r3, #8]
 801b31c:	fbb2 f3f3 	udiv	r3, r2, r3
 801b320:	4a32      	ldr	r2, [pc, #200]	; (801b3ec <RadioSetRxGenericConfig+0x2c4>)
 801b322:	6093      	str	r3, [r2, #8]
        break;
 801b324:	e0b9      	b.n	801b49a <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801b326:	68bb      	ldr	r3, [r7, #8]
 801b328:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801b32a:	2b00      	cmp	r3, #0
 801b32c:	d102      	bne.n	801b334 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801b32e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b332:	e0b3      	b.n	801b49c <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801b334:	68bb      	ldr	r3, [r7, #8]
 801b336:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801b33a:	2b01      	cmp	r3, #1
 801b33c:	d104      	bne.n	801b348 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801b33e:	68bb      	ldr	r3, [r7, #8]
 801b340:	695b      	ldr	r3, [r3, #20]
 801b342:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801b346:	e002      	b.n	801b34e <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801b348:	23ff      	movs	r3, #255	; 0xff
 801b34a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801b34e:	68bb      	ldr	r3, [r7, #8]
 801b350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b352:	2b00      	cmp	r3, #0
 801b354:	bf14      	ite	ne
 801b356:	2301      	movne	r3, #1
 801b358:	2300      	moveq	r3, #0
 801b35a:	b2db      	uxtb	r3, r3
 801b35c:	4618      	mov	r0, r3
 801b35e:	f000 fd53 	bl	801be08 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801b362:	683b      	ldr	r3, [r7, #0]
 801b364:	b2db      	uxtb	r3, r3
 801b366:	4618      	mov	r0, r3
 801b368:	f000 fd5d 	bl	801be26 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801b36c:	4b1f      	ldr	r3, [pc, #124]	; (801b3ec <RadioSetRxGenericConfig+0x2c4>)
 801b36e:	2201      	movs	r2, #1
 801b370:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801b374:	68bb      	ldr	r3, [r7, #8]
 801b376:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801b37a:	4b1c      	ldr	r3, [pc, #112]	; (801b3ec <RadioSetRxGenericConfig+0x2c4>)
 801b37c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801b380:	68bb      	ldr	r3, [r7, #8]
 801b382:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801b386:	4b19      	ldr	r3, [pc, #100]	; (801b3ec <RadioSetRxGenericConfig+0x2c4>)
 801b388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801b38c:	68bb      	ldr	r3, [r7, #8]
 801b38e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801b392:	4b16      	ldr	r3, [pc, #88]	; (801b3ec <RadioSetRxGenericConfig+0x2c4>)
 801b394:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801b398:	68bb      	ldr	r3, [r7, #8]
 801b39a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801b39e:	2b02      	cmp	r3, #2
 801b3a0:	d010      	beq.n	801b3c4 <RadioSetRxGenericConfig+0x29c>
 801b3a2:	2b02      	cmp	r3, #2
 801b3a4:	dc2c      	bgt.n	801b400 <RadioSetRxGenericConfig+0x2d8>
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	d002      	beq.n	801b3b0 <RadioSetRxGenericConfig+0x288>
 801b3aa:	2b01      	cmp	r3, #1
 801b3ac:	d005      	beq.n	801b3ba <RadioSetRxGenericConfig+0x292>
            break;
 801b3ae:	e027      	b.n	801b400 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b3b0:	4b0e      	ldr	r3, [pc, #56]	; (801b3ec <RadioSetRxGenericConfig+0x2c4>)
 801b3b2:	2200      	movs	r2, #0
 801b3b4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b3b8:	e023      	b.n	801b402 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b3ba:	4b0c      	ldr	r3, [pc, #48]	; (801b3ec <RadioSetRxGenericConfig+0x2c4>)
 801b3bc:	2201      	movs	r2, #1
 801b3be:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b3c2:	e01e      	b.n	801b402 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801b3c4:	68bb      	ldr	r3, [r7, #8]
 801b3c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b3ca:	2b0b      	cmp	r3, #11
 801b3cc:	d004      	beq.n	801b3d8 <RadioSetRxGenericConfig+0x2b0>
 801b3ce:	68bb      	ldr	r3, [r7, #8]
 801b3d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b3d4:	2b0c      	cmp	r3, #12
 801b3d6:	d104      	bne.n	801b3e2 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b3d8:	4b04      	ldr	r3, [pc, #16]	; (801b3ec <RadioSetRxGenericConfig+0x2c4>)
 801b3da:	2201      	movs	r2, #1
 801b3dc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b3e0:	e00f      	b.n	801b402 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b3e2:	4b02      	ldr	r3, [pc, #8]	; (801b3ec <RadioSetRxGenericConfig+0x2c4>)
 801b3e4:	2200      	movs	r2, #0
 801b3e6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b3ea:	e00a      	b.n	801b402 <RadioSetRxGenericConfig+0x2da>
 801b3ec:	20001cf0 	.word	0x20001cf0
 801b3f0:	20001cec 	.word	0x20001cec
 801b3f4:	20001d64 	.word	0x20001d64
 801b3f8:	20001d28 	.word	0x20001d28
 801b3fc:	20001cfe 	.word	0x20001cfe
            break;
 801b400:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801b402:	4b28      	ldr	r3, [pc, #160]	; (801b4a4 <RadioSetRxGenericConfig+0x37c>)
 801b404:	2201      	movs	r2, #1
 801b406:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801b408:	68bb      	ldr	r3, [r7, #8]
 801b40a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801b40c:	4b25      	ldr	r3, [pc, #148]	; (801b4a4 <RadioSetRxGenericConfig+0x37c>)
 801b40e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801b410:	68bb      	ldr	r3, [r7, #8]
 801b412:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801b416:	4b23      	ldr	r3, [pc, #140]	; (801b4a4 <RadioSetRxGenericConfig+0x37c>)
 801b418:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801b41a:	4a22      	ldr	r2, [pc, #136]	; (801b4a4 <RadioSetRxGenericConfig+0x37c>)
 801b41c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b420:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801b422:	68bb      	ldr	r3, [r7, #8]
 801b424:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801b428:	4b1e      	ldr	r3, [pc, #120]	; (801b4a4 <RadioSetRxGenericConfig+0x37c>)
 801b42a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801b42e:	68bb      	ldr	r3, [r7, #8]
 801b430:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801b434:	4b1b      	ldr	r3, [pc, #108]	; (801b4a4 <RadioSetRxGenericConfig+0x37c>)
 801b436:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801b43a:	f7ff f98c 	bl	801a756 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801b43e:	2001      	movs	r0, #1
 801b440:	f7fe fb20 	bl	8019a84 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b444:	4818      	ldr	r0, [pc, #96]	; (801b4a8 <RadioSetRxGenericConfig+0x380>)
 801b446:	f000 ff7d 	bl	801c344 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b44a:	4818      	ldr	r0, [pc, #96]	; (801b4ac <RadioSetRxGenericConfig+0x384>)
 801b44c:	f001 f84c 	bl	801c4e8 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801b450:	4b14      	ldr	r3, [pc, #80]	; (801b4a4 <RadioSetRxGenericConfig+0x37c>)
 801b452:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801b456:	2b01      	cmp	r3, #1
 801b458:	d10d      	bne.n	801b476 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801b45a:	f240 7036 	movw	r0, #1846	; 0x736
 801b45e:	f001 f99f 	bl	801c7a0 <SUBGRF_ReadRegister>
 801b462:	4603      	mov	r3, r0
 801b464:	f023 0304 	bic.w	r3, r3, #4
 801b468:	b2db      	uxtb	r3, r3
 801b46a:	4619      	mov	r1, r3
 801b46c:	f240 7036 	movw	r0, #1846	; 0x736
 801b470:	f001 f982 	bl	801c778 <SUBGRF_WriteRegister>
 801b474:	e00c      	b.n	801b490 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801b476:	f240 7036 	movw	r0, #1846	; 0x736
 801b47a:	f001 f991 	bl	801c7a0 <SUBGRF_ReadRegister>
 801b47e:	4603      	mov	r3, r0
 801b480:	f043 0304 	orr.w	r3, r3, #4
 801b484:	b2db      	uxtb	r3, r3
 801b486:	4619      	mov	r1, r3
 801b488:	f240 7036 	movw	r0, #1846	; 0x736
 801b48c:	f001 f974 	bl	801c778 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801b490:	4b04      	ldr	r3, [pc, #16]	; (801b4a4 <RadioSetRxGenericConfig+0x37c>)
 801b492:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b496:	609a      	str	r2, [r3, #8]
        break;
 801b498:	bf00      	nop
    }
    return status;
 801b49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801b49c:	4618      	mov	r0, r3
 801b49e:	3730      	adds	r7, #48	; 0x30
 801b4a0:	46bd      	mov	sp, r7
 801b4a2:	bd80      	pop	{r7, pc}
 801b4a4:	20001cf0 	.word	0x20001cf0
 801b4a8:	20001d28 	.word	0x20001d28
 801b4ac:	20001cfe 	.word	0x20001cfe

0801b4b0 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801b4b0:	b580      	push	{r7, lr}
 801b4b2:	b08e      	sub	sp, #56	; 0x38
 801b4b4:	af00      	add	r7, sp, #0
 801b4b6:	60b9      	str	r1, [r7, #8]
 801b4b8:	607b      	str	r3, [r7, #4]
 801b4ba:	4603      	mov	r3, r0
 801b4bc:	73fb      	strb	r3, [r7, #15]
 801b4be:	4613      	mov	r3, r2
 801b4c0:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801b4c2:	2300      	movs	r3, #0
 801b4c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b4c6:	2300      	movs	r3, #0
 801b4c8:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801b4ca:	f001 fc3c 	bl	801cd46 <RFW_DeInit>
    switch( modem )
 801b4ce:	7bfb      	ldrb	r3, [r7, #15]
 801b4d0:	2b03      	cmp	r3, #3
 801b4d2:	f200 8204 	bhi.w	801b8de <RadioSetTxGenericConfig+0x42e>
 801b4d6:	a201      	add	r2, pc, #4	; (adr r2, 801b4dc <RadioSetTxGenericConfig+0x2c>)
 801b4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b4dc:	0801b661 	.word	0x0801b661
 801b4e0:	0801b7a9 	.word	0x0801b7a9
 801b4e4:	0801b8a1 	.word	0x0801b8a1
 801b4e8:	0801b4ed 	.word	0x0801b4ed
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801b4ec:	68bb      	ldr	r3, [r7, #8]
 801b4ee:	7c9b      	ldrb	r3, [r3, #18]
 801b4f0:	2b08      	cmp	r3, #8
 801b4f2:	d902      	bls.n	801b4fa <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801b4f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b4f8:	e206      	b.n	801b908 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801b4fa:	68bb      	ldr	r3, [r7, #8]
 801b4fc:	6899      	ldr	r1, [r3, #8]
 801b4fe:	68bb      	ldr	r3, [r7, #8]
 801b500:	7c9b      	ldrb	r3, [r3, #18]
 801b502:	b29a      	uxth	r2, r3
 801b504:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b508:	4618      	mov	r0, r3
 801b50a:	f001 fd0f 	bl	801cf2c <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801b50e:	68bb      	ldr	r3, [r7, #8]
 801b510:	681b      	ldr	r3, [r3, #0]
 801b512:	2b00      	cmp	r3, #0
 801b514:	d102      	bne.n	801b51c <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801b516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b51a:	e1f5      	b.n	801b908 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801b51c:	68bb      	ldr	r3, [r7, #8]
 801b51e:	681b      	ldr	r3, [r3, #0]
 801b520:	f242 7210 	movw	r2, #10000	; 0x2710
 801b524:	4293      	cmp	r3, r2
 801b526:	d813      	bhi.n	801b550 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801b528:	2302      	movs	r3, #2
 801b52a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801b52e:	4b99      	ldr	r3, [pc, #612]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b530:	2203      	movs	r2, #3
 801b532:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801b534:	4b97      	ldr	r3, [pc, #604]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b536:	2203      	movs	r2, #3
 801b538:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801b53c:	68bb      	ldr	r3, [r7, #8]
 801b53e:	681b      	ldr	r3, [r3, #0]
 801b540:	4a94      	ldr	r2, [pc, #592]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b542:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801b544:	68bb      	ldr	r3, [r7, #8]
 801b546:	7cda      	ldrb	r2, [r3, #19]
 801b548:	4b92      	ldr	r3, [pc, #584]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b54a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801b54e:	e017      	b.n	801b580 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801b550:	2300      	movs	r3, #0
 801b552:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b556:	4b8f      	ldr	r3, [pc, #572]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b558:	2200      	movs	r2, #0
 801b55a:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b55c:	4b8d      	ldr	r3, [pc, #564]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b55e:	2200      	movs	r2, #0
 801b560:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801b564:	68bb      	ldr	r3, [r7, #8]
 801b566:	681b      	ldr	r3, [r3, #0]
 801b568:	4a8a      	ldr	r2, [pc, #552]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b56a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801b56c:	68bb      	ldr	r3, [r7, #8]
 801b56e:	7cda      	ldrb	r2, [r3, #19]
 801b570:	4b88      	ldr	r3, [pc, #544]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801b576:	68bb      	ldr	r3, [r7, #8]
 801b578:	681b      	ldr	r3, [r3, #0]
 801b57a:	089b      	lsrs	r3, r3, #2
 801b57c:	4a85      	ldr	r2, [pc, #532]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b57e:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801b580:	68bb      	ldr	r3, [r7, #8]
 801b582:	685b      	ldr	r3, [r3, #4]
 801b584:	b29b      	uxth	r3, r3
 801b586:	00db      	lsls	r3, r3, #3
 801b588:	b29a      	uxth	r2, r3
 801b58a:	4b82      	ldr	r3, [pc, #520]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b58c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801b58e:	4b81      	ldr	r3, [pc, #516]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b590:	2204      	movs	r2, #4
 801b592:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801b594:	68bb      	ldr	r3, [r7, #8]
 801b596:	7c9b      	ldrb	r3, [r3, #18]
 801b598:	00db      	lsls	r3, r3, #3
 801b59a:	b2da      	uxtb	r2, r3
 801b59c:	4b7d      	ldr	r3, [pc, #500]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b59e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801b5a0:	4b7c      	ldr	r3, [pc, #496]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b5a2:	2200      	movs	r2, #0
 801b5a4:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801b5a6:	68bb      	ldr	r3, [r7, #8]
 801b5a8:	7d9b      	ldrb	r3, [r3, #22]
 801b5aa:	2b02      	cmp	r3, #2
 801b5ac:	d003      	beq.n	801b5b6 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801b5ae:	68bb      	ldr	r3, [r7, #8]
 801b5b0:	7d1b      	ldrb	r3, [r3, #20]
 801b5b2:	2b02      	cmp	r3, #2
 801b5b4:	d12b      	bne.n	801b60e <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801b5b6:	68bb      	ldr	r3, [r7, #8]
 801b5b8:	7d5b      	ldrb	r3, [r3, #21]
 801b5ba:	2bf1      	cmp	r3, #241	; 0xf1
 801b5bc:	d00a      	beq.n	801b5d4 <RadioSetTxGenericConfig+0x124>
 801b5be:	68bb      	ldr	r3, [r7, #8]
 801b5c0:	7d5b      	ldrb	r3, [r3, #21]
 801b5c2:	2bf2      	cmp	r3, #242	; 0xf2
 801b5c4:	d006      	beq.n	801b5d4 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801b5c6:	68bb      	ldr	r3, [r7, #8]
 801b5c8:	7d5b      	ldrb	r3, [r3, #21]
 801b5ca:	2b01      	cmp	r3, #1
 801b5cc:	d002      	beq.n	801b5d4 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801b5ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b5d2:	e199      	b.n	801b908 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801b5d4:	68bb      	ldr	r3, [r7, #8]
 801b5d6:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801b5d8:	2301      	movs	r3, #1
 801b5da:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801b5de:	4b6e      	ldr	r3, [pc, #440]	; (801b798 <RadioSetTxGenericConfig+0x2e8>)
 801b5e0:	6819      	ldr	r1, [r3, #0]
 801b5e2:	f107 0320 	add.w	r3, r7, #32
 801b5e6:	4a6d      	ldr	r2, [pc, #436]	; (801b79c <RadioSetTxGenericConfig+0x2ec>)
 801b5e8:	4618      	mov	r0, r3
 801b5ea:	f001 fb9f 	bl	801cd2c <RFW_Init>
 801b5ee:	4603      	mov	r3, r0
 801b5f0:	2b00      	cmp	r3, #0
 801b5f2:	d002      	beq.n	801b5fa <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801b5f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b5f8:	e186      	b.n	801b908 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801b5fa:	4b66      	ldr	r3, [pc, #408]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b5fc:	2200      	movs	r2, #0
 801b5fe:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801b600:	4b64      	ldr	r3, [pc, #400]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b602:	2201      	movs	r2, #1
 801b604:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801b606:	4b63      	ldr	r3, [pc, #396]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b608:	2200      	movs	r2, #0
 801b60a:	755a      	strb	r2, [r3, #21]
        {
 801b60c:	e00b      	b.n	801b626 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801b60e:	68bb      	ldr	r3, [r7, #8]
 801b610:	7d5a      	ldrb	r2, [r3, #21]
 801b612:	4b60      	ldr	r3, [pc, #384]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b614:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801b616:	68bb      	ldr	r3, [r7, #8]
 801b618:	7d9a      	ldrb	r2, [r3, #22]
 801b61a:	4b5e      	ldr	r3, [pc, #376]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b61c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801b61e:	68bb      	ldr	r3, [r7, #8]
 801b620:	7d1a      	ldrb	r2, [r3, #20]
 801b622:	4b5c      	ldr	r3, [pc, #368]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b624:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801b626:	f7ff f896 	bl	801a756 <RadioStandby>
        RadioSetModem( radio_modem );
 801b62a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801b62e:	4618      	mov	r0, r3
 801b630:	f7fe fa28 	bl	8019a84 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b634:	485a      	ldr	r0, [pc, #360]	; (801b7a0 <RadioSetTxGenericConfig+0x2f0>)
 801b636:	f000 fe85 	bl	801c344 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b63a:	485a      	ldr	r0, [pc, #360]	; (801b7a4 <RadioSetTxGenericConfig+0x2f4>)
 801b63c:	f000 ff54 	bl	801c4e8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801b640:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b644:	4618      	mov	r0, r3
 801b646:	f000 fa18 	bl	801ba7a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801b64a:	68bb      	ldr	r3, [r7, #8]
 801b64c:	8a1b      	ldrh	r3, [r3, #16]
 801b64e:	4618      	mov	r0, r3
 801b650:	f000 fa62 	bl	801bb18 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801b654:	68bb      	ldr	r3, [r7, #8]
 801b656:	899b      	ldrh	r3, [r3, #12]
 801b658:	4618      	mov	r0, r3
 801b65a:	f000 fa3d 	bl	801bad8 <SUBGRF_SetCrcPolynomial>
        break;
 801b65e:	e13f      	b.n	801b8e0 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801b660:	68bb      	ldr	r3, [r7, #8]
 801b662:	681b      	ldr	r3, [r3, #0]
 801b664:	2b00      	cmp	r3, #0
 801b666:	d102      	bne.n	801b66e <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801b668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b66c:	e14c      	b.n	801b908 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801b66e:	68bb      	ldr	r3, [r7, #8]
 801b670:	7c9b      	ldrb	r3, [r3, #18]
 801b672:	2b08      	cmp	r3, #8
 801b674:	d902      	bls.n	801b67c <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801b676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b67a:	e145      	b.n	801b908 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801b67c:	68bb      	ldr	r3, [r7, #8]
 801b67e:	6899      	ldr	r1, [r3, #8]
 801b680:	68bb      	ldr	r3, [r7, #8]
 801b682:	7c9b      	ldrb	r3, [r3, #18]
 801b684:	b29a      	uxth	r2, r3
 801b686:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b68a:	4618      	mov	r0, r3
 801b68c:	f001 fc4e 	bl	801cf2c <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b690:	4b40      	ldr	r3, [pc, #256]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b692:	2200      	movs	r2, #0
 801b694:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801b698:	68bb      	ldr	r3, [r7, #8]
 801b69a:	681b      	ldr	r3, [r3, #0]
 801b69c:	4a3d      	ldr	r2, [pc, #244]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b69e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801b6a0:	68bb      	ldr	r3, [r7, #8]
 801b6a2:	7cda      	ldrb	r2, [r3, #19]
 801b6a4:	4b3b      	ldr	r3, [pc, #236]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b6a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801b6aa:	68bb      	ldr	r3, [r7, #8]
 801b6ac:	699b      	ldr	r3, [r3, #24]
 801b6ae:	4a39      	ldr	r2, [pc, #228]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b6b0:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b6b2:	4b38      	ldr	r3, [pc, #224]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b6b4:	2200      	movs	r2, #0
 801b6b6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801b6b8:	68bb      	ldr	r3, [r7, #8]
 801b6ba:	685b      	ldr	r3, [r3, #4]
 801b6bc:	b29b      	uxth	r3, r3
 801b6be:	00db      	lsls	r3, r3, #3
 801b6c0:	b29a      	uxth	r2, r3
 801b6c2:	4b34      	ldr	r3, [pc, #208]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b6c4:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801b6c6:	4b33      	ldr	r3, [pc, #204]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b6c8:	2204      	movs	r2, #4
 801b6ca:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801b6cc:	68bb      	ldr	r3, [r7, #8]
 801b6ce:	7c9b      	ldrb	r3, [r3, #18]
 801b6d0:	00db      	lsls	r3, r3, #3
 801b6d2:	b2da      	uxtb	r2, r3
 801b6d4:	4b2f      	ldr	r3, [pc, #188]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b6d6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801b6d8:	4b2e      	ldr	r3, [pc, #184]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b6da:	2200      	movs	r2, #0
 801b6dc:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801b6de:	68bb      	ldr	r3, [r7, #8]
 801b6e0:	7d9b      	ldrb	r3, [r3, #22]
 801b6e2:	2b02      	cmp	r3, #2
 801b6e4:	d003      	beq.n	801b6ee <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801b6e6:	68bb      	ldr	r3, [r7, #8]
 801b6e8:	7d1b      	ldrb	r3, [r3, #20]
 801b6ea:	2b02      	cmp	r3, #2
 801b6ec:	d12a      	bne.n	801b744 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801b6ee:	68bb      	ldr	r3, [r7, #8]
 801b6f0:	7d5b      	ldrb	r3, [r3, #21]
 801b6f2:	2bf1      	cmp	r3, #241	; 0xf1
 801b6f4:	d00a      	beq.n	801b70c <RadioSetTxGenericConfig+0x25c>
 801b6f6:	68bb      	ldr	r3, [r7, #8]
 801b6f8:	7d5b      	ldrb	r3, [r3, #21]
 801b6fa:	2bf2      	cmp	r3, #242	; 0xf2
 801b6fc:	d006      	beq.n	801b70c <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801b6fe:	68bb      	ldr	r3, [r7, #8]
 801b700:	7d5b      	ldrb	r3, [r3, #21]
 801b702:	2b01      	cmp	r3, #1
 801b704:	d002      	beq.n	801b70c <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801b706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b70a:	e0fd      	b.n	801b908 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801b70c:	2301      	movs	r3, #1
 801b70e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801b710:	68bb      	ldr	r3, [r7, #8]
 801b712:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801b714:	4b20      	ldr	r3, [pc, #128]	; (801b798 <RadioSetTxGenericConfig+0x2e8>)
 801b716:	6819      	ldr	r1, [r3, #0]
 801b718:	f107 0314 	add.w	r3, r7, #20
 801b71c:	4a1f      	ldr	r2, [pc, #124]	; (801b79c <RadioSetTxGenericConfig+0x2ec>)
 801b71e:	4618      	mov	r0, r3
 801b720:	f001 fb04 	bl	801cd2c <RFW_Init>
 801b724:	4603      	mov	r3, r0
 801b726:	2b00      	cmp	r3, #0
 801b728:	d002      	beq.n	801b730 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801b72a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b72e:	e0eb      	b.n	801b908 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801b730:	4b18      	ldr	r3, [pc, #96]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b732:	2200      	movs	r2, #0
 801b734:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801b736:	4b17      	ldr	r3, [pc, #92]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b738:	2201      	movs	r2, #1
 801b73a:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801b73c:	4b15      	ldr	r3, [pc, #84]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b73e:	2200      	movs	r2, #0
 801b740:	755a      	strb	r2, [r3, #21]
        {
 801b742:	e00b      	b.n	801b75c <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801b744:	68bb      	ldr	r3, [r7, #8]
 801b746:	7d5a      	ldrb	r2, [r3, #21]
 801b748:	4b12      	ldr	r3, [pc, #72]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b74a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801b74c:	68bb      	ldr	r3, [r7, #8]
 801b74e:	7d9a      	ldrb	r2, [r3, #22]
 801b750:	4b10      	ldr	r3, [pc, #64]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b752:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801b754:	68bb      	ldr	r3, [r7, #8]
 801b756:	7d1a      	ldrb	r2, [r3, #20]
 801b758:	4b0e      	ldr	r3, [pc, #56]	; (801b794 <RadioSetTxGenericConfig+0x2e4>)
 801b75a:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801b75c:	f7fe fffb 	bl	801a756 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801b760:	2000      	movs	r0, #0
 801b762:	f7fe f98f 	bl	8019a84 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b766:	480e      	ldr	r0, [pc, #56]	; (801b7a0 <RadioSetTxGenericConfig+0x2f0>)
 801b768:	f000 fdec 	bl	801c344 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b76c:	480d      	ldr	r0, [pc, #52]	; (801b7a4 <RadioSetTxGenericConfig+0x2f4>)
 801b76e:	f000 febb 	bl	801c4e8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801b772:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b776:	4618      	mov	r0, r3
 801b778:	f000 f97f 	bl	801ba7a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801b77c:	68bb      	ldr	r3, [r7, #8]
 801b77e:	8a1b      	ldrh	r3, [r3, #16]
 801b780:	4618      	mov	r0, r3
 801b782:	f000 f9c9 	bl	801bb18 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801b786:	68bb      	ldr	r3, [r7, #8]
 801b788:	899b      	ldrh	r3, [r3, #12]
 801b78a:	4618      	mov	r0, r3
 801b78c:	f000 f9a4 	bl	801bad8 <SUBGRF_SetCrcPolynomial>
        break;
 801b790:	e0a6      	b.n	801b8e0 <RadioSetTxGenericConfig+0x430>
 801b792:	bf00      	nop
 801b794:	20001cf0 	.word	0x20001cf0
 801b798:	20001cec 	.word	0x20001cec
 801b79c:	20001d4c 	.word	0x20001d4c
 801b7a0:	20001d28 	.word	0x20001d28
 801b7a4:	20001cfe 	.word	0x20001cfe
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801b7a8:	4b59      	ldr	r3, [pc, #356]	; (801b910 <RadioSetTxGenericConfig+0x460>)
 801b7aa:	2201      	movs	r2, #1
 801b7ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801b7b0:	68bb      	ldr	r3, [r7, #8]
 801b7b2:	781a      	ldrb	r2, [r3, #0]
 801b7b4:	4b56      	ldr	r3, [pc, #344]	; (801b910 <RadioSetTxGenericConfig+0x460>)
 801b7b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801b7ba:	68bb      	ldr	r3, [r7, #8]
 801b7bc:	785a      	ldrb	r2, [r3, #1]
 801b7be:	4b54      	ldr	r3, [pc, #336]	; (801b910 <RadioSetTxGenericConfig+0x460>)
 801b7c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801b7c4:	68bb      	ldr	r3, [r7, #8]
 801b7c6:	789a      	ldrb	r2, [r3, #2]
 801b7c8:	4b51      	ldr	r3, [pc, #324]	; (801b910 <RadioSetTxGenericConfig+0x460>)
 801b7ca:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801b7ce:	68bb      	ldr	r3, [r7, #8]
 801b7d0:	78db      	ldrb	r3, [r3, #3]
 801b7d2:	2b02      	cmp	r3, #2
 801b7d4:	d010      	beq.n	801b7f8 <RadioSetTxGenericConfig+0x348>
 801b7d6:	2b02      	cmp	r3, #2
 801b7d8:	dc20      	bgt.n	801b81c <RadioSetTxGenericConfig+0x36c>
 801b7da:	2b00      	cmp	r3, #0
 801b7dc:	d002      	beq.n	801b7e4 <RadioSetTxGenericConfig+0x334>
 801b7de:	2b01      	cmp	r3, #1
 801b7e0:	d005      	beq.n	801b7ee <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801b7e2:	e01b      	b.n	801b81c <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b7e4:	4b4a      	ldr	r3, [pc, #296]	; (801b910 <RadioSetTxGenericConfig+0x460>)
 801b7e6:	2200      	movs	r2, #0
 801b7e8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b7ec:	e017      	b.n	801b81e <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b7ee:	4b48      	ldr	r3, [pc, #288]	; (801b910 <RadioSetTxGenericConfig+0x460>)
 801b7f0:	2201      	movs	r2, #1
 801b7f2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b7f6:	e012      	b.n	801b81e <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801b7f8:	68bb      	ldr	r3, [r7, #8]
 801b7fa:	781b      	ldrb	r3, [r3, #0]
 801b7fc:	2b0b      	cmp	r3, #11
 801b7fe:	d003      	beq.n	801b808 <RadioSetTxGenericConfig+0x358>
 801b800:	68bb      	ldr	r3, [r7, #8]
 801b802:	781b      	ldrb	r3, [r3, #0]
 801b804:	2b0c      	cmp	r3, #12
 801b806:	d104      	bne.n	801b812 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b808:	4b41      	ldr	r3, [pc, #260]	; (801b910 <RadioSetTxGenericConfig+0x460>)
 801b80a:	2201      	movs	r2, #1
 801b80c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b810:	e005      	b.n	801b81e <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b812:	4b3f      	ldr	r3, [pc, #252]	; (801b910 <RadioSetTxGenericConfig+0x460>)
 801b814:	2200      	movs	r2, #0
 801b816:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b81a:	e000      	b.n	801b81e <RadioSetTxGenericConfig+0x36e>
            break;
 801b81c:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801b81e:	4b3c      	ldr	r3, [pc, #240]	; (801b910 <RadioSetTxGenericConfig+0x460>)
 801b820:	2201      	movs	r2, #1
 801b822:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801b824:	68bb      	ldr	r3, [r7, #8]
 801b826:	889a      	ldrh	r2, [r3, #4]
 801b828:	4b39      	ldr	r3, [pc, #228]	; (801b910 <RadioSetTxGenericConfig+0x460>)
 801b82a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801b82c:	68bb      	ldr	r3, [r7, #8]
 801b82e:	799a      	ldrb	r2, [r3, #6]
 801b830:	4b37      	ldr	r3, [pc, #220]	; (801b910 <RadioSetTxGenericConfig+0x460>)
 801b832:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801b834:	68bb      	ldr	r3, [r7, #8]
 801b836:	79da      	ldrb	r2, [r3, #7]
 801b838:	4b35      	ldr	r3, [pc, #212]	; (801b910 <RadioSetTxGenericConfig+0x460>)
 801b83a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801b83e:	68bb      	ldr	r3, [r7, #8]
 801b840:	7a1a      	ldrb	r2, [r3, #8]
 801b842:	4b33      	ldr	r3, [pc, #204]	; (801b910 <RadioSetTxGenericConfig+0x460>)
 801b844:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801b848:	f7fe ff85 	bl	801a756 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801b84c:	2001      	movs	r0, #1
 801b84e:	f7fe f919 	bl	8019a84 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b852:	4830      	ldr	r0, [pc, #192]	; (801b914 <RadioSetTxGenericConfig+0x464>)
 801b854:	f000 fd76 	bl	801c344 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b858:	482f      	ldr	r0, [pc, #188]	; (801b918 <RadioSetTxGenericConfig+0x468>)
 801b85a:	f000 fe45 	bl	801c4e8 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801b85e:	4b2c      	ldr	r3, [pc, #176]	; (801b910 <RadioSetTxGenericConfig+0x460>)
 801b860:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801b864:	2b06      	cmp	r3, #6
 801b866:	d10d      	bne.n	801b884 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801b868:	f640 0089 	movw	r0, #2185	; 0x889
 801b86c:	f000 ff98 	bl	801c7a0 <SUBGRF_ReadRegister>
 801b870:	4603      	mov	r3, r0
 801b872:	f023 0304 	bic.w	r3, r3, #4
 801b876:	b2db      	uxtb	r3, r3
 801b878:	4619      	mov	r1, r3
 801b87a:	f640 0089 	movw	r0, #2185	; 0x889
 801b87e:	f000 ff7b 	bl	801c778 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801b882:	e02d      	b.n	801b8e0 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801b884:	f640 0089 	movw	r0, #2185	; 0x889
 801b888:	f000 ff8a 	bl	801c7a0 <SUBGRF_ReadRegister>
 801b88c:	4603      	mov	r3, r0
 801b88e:	f043 0304 	orr.w	r3, r3, #4
 801b892:	b2db      	uxtb	r3, r3
 801b894:	4619      	mov	r1, r3
 801b896:	f640 0089 	movw	r0, #2185	; 0x889
 801b89a:	f000 ff6d 	bl	801c778 <SUBGRF_WriteRegister>
        break;
 801b89e:	e01f      	b.n	801b8e0 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801b8a0:	68bb      	ldr	r3, [r7, #8]
 801b8a2:	681b      	ldr	r3, [r3, #0]
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	d004      	beq.n	801b8b2 <RadioSetTxGenericConfig+0x402>
 801b8a8:	68bb      	ldr	r3, [r7, #8]
 801b8aa:	681b      	ldr	r3, [r3, #0]
 801b8ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b8b0:	d902      	bls.n	801b8b8 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801b8b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b8b6:	e027      	b.n	801b908 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801b8b8:	2003      	movs	r0, #3
 801b8ba:	f7fe f8e3 	bl	8019a84 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801b8be:	4b14      	ldr	r3, [pc, #80]	; (801b910 <RadioSetTxGenericConfig+0x460>)
 801b8c0:	2202      	movs	r2, #2
 801b8c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801b8c6:	68bb      	ldr	r3, [r7, #8]
 801b8c8:	681b      	ldr	r3, [r3, #0]
 801b8ca:	4a11      	ldr	r2, [pc, #68]	; (801b910 <RadioSetTxGenericConfig+0x460>)
 801b8cc:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801b8ce:	4b10      	ldr	r3, [pc, #64]	; (801b910 <RadioSetTxGenericConfig+0x460>)
 801b8d0:	2216      	movs	r2, #22
 801b8d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b8d6:	480f      	ldr	r0, [pc, #60]	; (801b914 <RadioSetTxGenericConfig+0x464>)
 801b8d8:	f000 fd34 	bl	801c344 <SUBGRF_SetModulationParams>
        break;
 801b8dc:	e000      	b.n	801b8e0 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801b8de:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801b8e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801b8e4:	4618      	mov	r0, r3
 801b8e6:	f001 f863 	bl	801c9b0 <SUBGRF_SetRfTxPower>
 801b8ea:	4603      	mov	r3, r0
 801b8ec:	461a      	mov	r2, r3
 801b8ee:	4b08      	ldr	r3, [pc, #32]	; (801b910 <RadioSetTxGenericConfig+0x460>)
 801b8f0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801b8f4:	4b06      	ldr	r3, [pc, #24]	; (801b910 <RadioSetTxGenericConfig+0x460>)
 801b8f6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b8fa:	4618      	mov	r0, r3
 801b8fc:	f001 fa37 	bl	801cd6e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801b900:	4a03      	ldr	r2, [pc, #12]	; (801b910 <RadioSetTxGenericConfig+0x460>)
 801b902:	687b      	ldr	r3, [r7, #4]
 801b904:	6053      	str	r3, [r2, #4]
    return 0;
 801b906:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801b908:	4618      	mov	r0, r3
 801b90a:	3738      	adds	r7, #56	; 0x38
 801b90c:	46bd      	mov	sp, r7
 801b90e:	bd80      	pop	{r7, pc}
 801b910:	20001cf0 	.word	0x20001cf0
 801b914:	20001d28 	.word	0x20001d28
 801b918:	20001cfe 	.word	0x20001cfe

0801b91c <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801b91c:	b480      	push	{r7}
 801b91e:	b085      	sub	sp, #20
 801b920:	af00      	add	r7, sp, #0
 801b922:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801b924:	2301      	movs	r3, #1
 801b926:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801b928:	7bfb      	ldrb	r3, [r7, #15]
}
 801b92a:	4618      	mov	r0, r3
 801b92c:	3714      	adds	r7, #20
 801b92e:	46bd      	mov	sp, r7
 801b930:	bc80      	pop	{r7}
 801b932:	4770      	bx	lr

0801b934 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801b934:	b480      	push	{r7}
 801b936:	b083      	sub	sp, #12
 801b938:	af00      	add	r7, sp, #0
 801b93a:	6078      	str	r0, [r7, #4]
 801b93c:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801b93e:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801b940:	4618      	mov	r0, r3
 801b942:	370c      	adds	r7, #12
 801b944:	46bd      	mov	sp, r7
 801b946:	bc80      	pop	{r7}
 801b948:	4770      	bx	lr
	...

0801b94c <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801b94c:	b580      	push	{r7, lr}
 801b94e:	b084      	sub	sp, #16
 801b950:	af00      	add	r7, sp, #0
 801b952:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	2b00      	cmp	r3, #0
 801b958:	d002      	beq.n	801b960 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801b95a:	4a1d      	ldr	r2, [pc, #116]	; (801b9d0 <SUBGRF_Init+0x84>)
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801b960:	f7e6 fd7e 	bl	8002460 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801b964:	2002      	movs	r0, #2
 801b966:	f001 f8ff 	bl	801cb68 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801b96a:	4b1a      	ldr	r3, [pc, #104]	; (801b9d4 <SUBGRF_Init+0x88>)
 801b96c:	2200      	movs	r2, #0
 801b96e:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801b970:	2000      	movs	r0, #0
 801b972:	f000 f97d 	bl	801bc70 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801b976:	f7f1 f9c1 	bl	800ccfc <RBI_IsTCXO>
 801b97a:	4603      	mov	r3, r0
 801b97c:	2b01      	cmp	r3, #1
 801b97e:	d10e      	bne.n	801b99e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801b980:	2140      	movs	r1, #64	; 0x40
 801b982:	2001      	movs	r0, #1
 801b984:	f000 fb82 	bl	801c08c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801b988:	2100      	movs	r1, #0
 801b98a:	f640 1011 	movw	r0, #2321	; 0x911
 801b98e:	f000 fef3 	bl	801c778 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801b992:	237f      	movs	r3, #127	; 0x7f
 801b994:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801b996:	7b38      	ldrb	r0, [r7, #12]
 801b998:	f000 fa8b 	bl	801beb2 <SUBGRF_Calibrate>
 801b99c:	e009      	b.n	801b9b2 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801b99e:	2120      	movs	r1, #32
 801b9a0:	f640 1011 	movw	r0, #2321	; 0x911
 801b9a4:	f000 fee8 	bl	801c778 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801b9a8:	2120      	movs	r1, #32
 801b9aa:	f640 1012 	movw	r0, #2322	; 0x912
 801b9ae:	f000 fee3 	bl	801c778 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801b9b2:	210e      	movs	r1, #14
 801b9b4:	f640 101f 	movw	r0, #2335	; 0x91f
 801b9b8:	f000 fede 	bl	801c778 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801b9bc:	f7f1 f982 	bl	800ccc4 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801b9c0:	4b05      	ldr	r3, [pc, #20]	; (801b9d8 <SUBGRF_Init+0x8c>)
 801b9c2:	2201      	movs	r2, #1
 801b9c4:	701a      	strb	r2, [r3, #0]
}
 801b9c6:	bf00      	nop
 801b9c8:	3710      	adds	r7, #16
 801b9ca:	46bd      	mov	sp, r7
 801b9cc:	bd80      	pop	{r7, pc}
 801b9ce:	bf00      	nop
 801b9d0:	20001d88 	.word	0x20001d88
 801b9d4:	20001d84 	.word	0x20001d84
 801b9d8:	20001d7c 	.word	0x20001d7c

0801b9dc <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801b9dc:	b480      	push	{r7}
 801b9de:	af00      	add	r7, sp, #0
    return OperatingMode;
 801b9e0:	4b02      	ldr	r3, [pc, #8]	; (801b9ec <SUBGRF_GetOperatingMode+0x10>)
 801b9e2:	781b      	ldrb	r3, [r3, #0]
}
 801b9e4:	4618      	mov	r0, r3
 801b9e6:	46bd      	mov	sp, r7
 801b9e8:	bc80      	pop	{r7}
 801b9ea:	4770      	bx	lr
 801b9ec:	20001d7c 	.word	0x20001d7c

0801b9f0 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801b9f0:	b580      	push	{r7, lr}
 801b9f2:	b082      	sub	sp, #8
 801b9f4:	af00      	add	r7, sp, #0
 801b9f6:	6078      	str	r0, [r7, #4]
 801b9f8:	460b      	mov	r3, r1
 801b9fa:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801b9fc:	78fb      	ldrb	r3, [r7, #3]
 801b9fe:	461a      	mov	r2, r3
 801ba00:	6879      	ldr	r1, [r7, #4]
 801ba02:	2000      	movs	r0, #0
 801ba04:	f000 ff24 	bl	801c850 <SUBGRF_WriteBuffer>
}
 801ba08:	bf00      	nop
 801ba0a:	3708      	adds	r7, #8
 801ba0c:	46bd      	mov	sp, r7
 801ba0e:	bd80      	pop	{r7, pc}

0801ba10 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801ba10:	b580      	push	{r7, lr}
 801ba12:	b086      	sub	sp, #24
 801ba14:	af00      	add	r7, sp, #0
 801ba16:	60f8      	str	r0, [r7, #12]
 801ba18:	60b9      	str	r1, [r7, #8]
 801ba1a:	4613      	mov	r3, r2
 801ba1c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801ba1e:	2300      	movs	r3, #0
 801ba20:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801ba22:	f107 0317 	add.w	r3, r7, #23
 801ba26:	4619      	mov	r1, r3
 801ba28:	68b8      	ldr	r0, [r7, #8]
 801ba2a:	f000 fe27 	bl	801c67c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801ba2e:	68bb      	ldr	r3, [r7, #8]
 801ba30:	781b      	ldrb	r3, [r3, #0]
 801ba32:	79fa      	ldrb	r2, [r7, #7]
 801ba34:	429a      	cmp	r2, r3
 801ba36:	d201      	bcs.n	801ba3c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801ba38:	2301      	movs	r3, #1
 801ba3a:	e007      	b.n	801ba4c <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801ba3c:	7df8      	ldrb	r0, [r7, #23]
 801ba3e:	68bb      	ldr	r3, [r7, #8]
 801ba40:	781b      	ldrb	r3, [r3, #0]
 801ba42:	461a      	mov	r2, r3
 801ba44:	68f9      	ldr	r1, [r7, #12]
 801ba46:	f000 ff25 	bl	801c894 <SUBGRF_ReadBuffer>

    return 0;
 801ba4a:	2300      	movs	r3, #0
}
 801ba4c:	4618      	mov	r0, r3
 801ba4e:	3718      	adds	r7, #24
 801ba50:	46bd      	mov	sp, r7
 801ba52:	bd80      	pop	{r7, pc}

0801ba54 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801ba54:	b580      	push	{r7, lr}
 801ba56:	b084      	sub	sp, #16
 801ba58:	af00      	add	r7, sp, #0
 801ba5a:	60f8      	str	r0, [r7, #12]
 801ba5c:	460b      	mov	r3, r1
 801ba5e:	607a      	str	r2, [r7, #4]
 801ba60:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801ba62:	7afb      	ldrb	r3, [r7, #11]
 801ba64:	4619      	mov	r1, r3
 801ba66:	68f8      	ldr	r0, [r7, #12]
 801ba68:	f7ff ffc2 	bl	801b9f0 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801ba6c:	6878      	ldr	r0, [r7, #4]
 801ba6e:	f000 f91b 	bl	801bca8 <SUBGRF_SetTx>
}
 801ba72:	bf00      	nop
 801ba74:	3710      	adds	r7, #16
 801ba76:	46bd      	mov	sp, r7
 801ba78:	bd80      	pop	{r7, pc}

0801ba7a <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801ba7a:	b580      	push	{r7, lr}
 801ba7c:	b082      	sub	sp, #8
 801ba7e:	af00      	add	r7, sp, #0
 801ba80:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801ba82:	2208      	movs	r2, #8
 801ba84:	6879      	ldr	r1, [r7, #4]
 801ba86:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801ba8a:	f000 fe9d 	bl	801c7c8 <SUBGRF_WriteRegisters>
    return 0;
 801ba8e:	2300      	movs	r3, #0
}
 801ba90:	4618      	mov	r0, r3
 801ba92:	3708      	adds	r7, #8
 801ba94:	46bd      	mov	sp, r7
 801ba96:	bd80      	pop	{r7, pc}

0801ba98 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801ba98:	b580      	push	{r7, lr}
 801ba9a:	b084      	sub	sp, #16
 801ba9c:	af00      	add	r7, sp, #0
 801ba9e:	4603      	mov	r3, r0
 801baa0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801baa2:	88fb      	ldrh	r3, [r7, #6]
 801baa4:	0a1b      	lsrs	r3, r3, #8
 801baa6:	b29b      	uxth	r3, r3
 801baa8:	b2db      	uxtb	r3, r3
 801baaa:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801baac:	88fb      	ldrh	r3, [r7, #6]
 801baae:	b2db      	uxtb	r3, r3
 801bab0:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801bab2:	f000 fb6f 	bl	801c194 <SUBGRF_GetPacketType>
 801bab6:	4603      	mov	r3, r0
 801bab8:	2b00      	cmp	r3, #0
 801baba:	d108      	bne.n	801bace <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801babc:	f107 030c 	add.w	r3, r7, #12
 801bac0:	2202      	movs	r2, #2
 801bac2:	4619      	mov	r1, r3
 801bac4:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801bac8:	f000 fe7e 	bl	801c7c8 <SUBGRF_WriteRegisters>
            break;
 801bacc:	e000      	b.n	801bad0 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801bace:	bf00      	nop
    }
}
 801bad0:	bf00      	nop
 801bad2:	3710      	adds	r7, #16
 801bad4:	46bd      	mov	sp, r7
 801bad6:	bd80      	pop	{r7, pc}

0801bad8 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801bad8:	b580      	push	{r7, lr}
 801bada:	b084      	sub	sp, #16
 801badc:	af00      	add	r7, sp, #0
 801bade:	4603      	mov	r3, r0
 801bae0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801bae2:	88fb      	ldrh	r3, [r7, #6]
 801bae4:	0a1b      	lsrs	r3, r3, #8
 801bae6:	b29b      	uxth	r3, r3
 801bae8:	b2db      	uxtb	r3, r3
 801baea:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801baec:	88fb      	ldrh	r3, [r7, #6]
 801baee:	b2db      	uxtb	r3, r3
 801baf0:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801baf2:	f000 fb4f 	bl	801c194 <SUBGRF_GetPacketType>
 801baf6:	4603      	mov	r3, r0
 801baf8:	2b00      	cmp	r3, #0
 801bafa:	d108      	bne.n	801bb0e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801bafc:	f107 030c 	add.w	r3, r7, #12
 801bb00:	2202      	movs	r2, #2
 801bb02:	4619      	mov	r1, r3
 801bb04:	f240 60be 	movw	r0, #1726	; 0x6be
 801bb08:	f000 fe5e 	bl	801c7c8 <SUBGRF_WriteRegisters>
            break;
 801bb0c:	e000      	b.n	801bb10 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801bb0e:	bf00      	nop
    }
}
 801bb10:	bf00      	nop
 801bb12:	3710      	adds	r7, #16
 801bb14:	46bd      	mov	sp, r7
 801bb16:	bd80      	pop	{r7, pc}

0801bb18 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801bb18:	b580      	push	{r7, lr}
 801bb1a:	b084      	sub	sp, #16
 801bb1c:	af00      	add	r7, sp, #0
 801bb1e:	4603      	mov	r3, r0
 801bb20:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801bb22:	2300      	movs	r3, #0
 801bb24:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801bb26:	f000 fb35 	bl	801c194 <SUBGRF_GetPacketType>
 801bb2a:	4603      	mov	r3, r0
 801bb2c:	2b00      	cmp	r3, #0
 801bb2e:	d121      	bne.n	801bb74 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801bb30:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801bb34:	f000 fe34 	bl	801c7a0 <SUBGRF_ReadRegister>
 801bb38:	4603      	mov	r3, r0
 801bb3a:	f023 0301 	bic.w	r3, r3, #1
 801bb3e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801bb40:	88fb      	ldrh	r3, [r7, #6]
 801bb42:	0a1b      	lsrs	r3, r3, #8
 801bb44:	b29b      	uxth	r3, r3
 801bb46:	b25b      	sxtb	r3, r3
 801bb48:	f003 0301 	and.w	r3, r3, #1
 801bb4c:	b25a      	sxtb	r2, r3
 801bb4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bb52:	4313      	orrs	r3, r2
 801bb54:	b25b      	sxtb	r3, r3
 801bb56:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801bb58:	7bfb      	ldrb	r3, [r7, #15]
 801bb5a:	4619      	mov	r1, r3
 801bb5c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801bb60:	f000 fe0a 	bl	801c778 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801bb64:	88fb      	ldrh	r3, [r7, #6]
 801bb66:	b2db      	uxtb	r3, r3
 801bb68:	4619      	mov	r1, r3
 801bb6a:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801bb6e:	f000 fe03 	bl	801c778 <SUBGRF_WriteRegister>
            break;
 801bb72:	e000      	b.n	801bb76 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801bb74:	bf00      	nop
    }
}
 801bb76:	bf00      	nop
 801bb78:	3710      	adds	r7, #16
 801bb7a:	46bd      	mov	sp, r7
 801bb7c:	bd80      	pop	{r7, pc}

0801bb7e <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801bb7e:	b580      	push	{r7, lr}
 801bb80:	b082      	sub	sp, #8
 801bb82:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801bb84:	2300      	movs	r3, #0
 801bb86:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801bb88:	2300      	movs	r3, #0
 801bb8a:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801bb8c:	2300      	movs	r3, #0
 801bb8e:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801bb90:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801bb94:	f000 fe04 	bl	801c7a0 <SUBGRF_ReadRegister>
 801bb98:	4603      	mov	r3, r0
 801bb9a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801bb9c:	79fb      	ldrb	r3, [r7, #7]
 801bb9e:	f023 0301 	bic.w	r3, r3, #1
 801bba2:	b2db      	uxtb	r3, r3
 801bba4:	4619      	mov	r1, r3
 801bba6:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801bbaa:	f000 fde5 	bl	801c778 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801bbae:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801bbb2:	f000 fdf5 	bl	801c7a0 <SUBGRF_ReadRegister>
 801bbb6:	4603      	mov	r3, r0
 801bbb8:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801bbba:	79bb      	ldrb	r3, [r7, #6]
 801bbbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bbc0:	b2db      	uxtb	r3, r3
 801bbc2:	4619      	mov	r1, r3
 801bbc4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801bbc8:	f000 fdd6 	bl	801c778 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801bbcc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801bbd0:	f000 f88a 	bl	801bce8 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801bbd4:	463b      	mov	r3, r7
 801bbd6:	2204      	movs	r2, #4
 801bbd8:	4619      	mov	r1, r3
 801bbda:	f640 0019 	movw	r0, #2073	; 0x819
 801bbde:	f000 fe15 	bl	801c80c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801bbe2:	2000      	movs	r0, #0
 801bbe4:	f000 f844 	bl	801bc70 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801bbe8:	79fb      	ldrb	r3, [r7, #7]
 801bbea:	4619      	mov	r1, r3
 801bbec:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801bbf0:	f000 fdc2 	bl	801c778 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801bbf4:	79bb      	ldrb	r3, [r7, #6]
 801bbf6:	4619      	mov	r1, r3
 801bbf8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801bbfc:	f000 fdbc 	bl	801c778 <SUBGRF_WriteRegister>

    return number;
 801bc00:	683b      	ldr	r3, [r7, #0]
}
 801bc02:	4618      	mov	r0, r3
 801bc04:	3708      	adds	r7, #8
 801bc06:	46bd      	mov	sp, r7
 801bc08:	bd80      	pop	{r7, pc}
	...

0801bc0c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801bc0c:	b580      	push	{r7, lr}
 801bc0e:	b084      	sub	sp, #16
 801bc10:	af00      	add	r7, sp, #0
 801bc12:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801bc14:	2000      	movs	r0, #0
 801bc16:	f7f1 f85c 	bl	800ccd2 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801bc1a:	2002      	movs	r0, #2
 801bc1c:	f000 ffa4 	bl	801cb68 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801bc20:	793b      	ldrb	r3, [r7, #4]
 801bc22:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801bc26:	b2db      	uxtb	r3, r3
 801bc28:	009b      	lsls	r3, r3, #2
 801bc2a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801bc2c:	793b      	ldrb	r3, [r7, #4]
 801bc2e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801bc32:	b2db      	uxtb	r3, r3
 801bc34:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801bc36:	b25b      	sxtb	r3, r3
 801bc38:	4313      	orrs	r3, r2
 801bc3a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801bc3c:	793b      	ldrb	r3, [r7, #4]
 801bc3e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801bc42:	b2db      	uxtb	r3, r3
 801bc44:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801bc46:	4313      	orrs	r3, r2
 801bc48:	b25b      	sxtb	r3, r3
 801bc4a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801bc4c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801bc4e:	f107 030f 	add.w	r3, r7, #15
 801bc52:	2201      	movs	r2, #1
 801bc54:	4619      	mov	r1, r3
 801bc56:	2084      	movs	r0, #132	; 0x84
 801bc58:	f000 fe3e 	bl	801c8d8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801bc5c:	4b03      	ldr	r3, [pc, #12]	; (801bc6c <SUBGRF_SetSleep+0x60>)
 801bc5e:	2200      	movs	r2, #0
 801bc60:	701a      	strb	r2, [r3, #0]
}
 801bc62:	bf00      	nop
 801bc64:	3710      	adds	r7, #16
 801bc66:	46bd      	mov	sp, r7
 801bc68:	bd80      	pop	{r7, pc}
 801bc6a:	bf00      	nop
 801bc6c:	20001d7c 	.word	0x20001d7c

0801bc70 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801bc70:	b580      	push	{r7, lr}
 801bc72:	b082      	sub	sp, #8
 801bc74:	af00      	add	r7, sp, #0
 801bc76:	4603      	mov	r3, r0
 801bc78:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801bc7a:	1dfb      	adds	r3, r7, #7
 801bc7c:	2201      	movs	r2, #1
 801bc7e:	4619      	mov	r1, r3
 801bc80:	2080      	movs	r0, #128	; 0x80
 801bc82:	f000 fe29 	bl	801c8d8 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801bc86:	79fb      	ldrb	r3, [r7, #7]
 801bc88:	2b00      	cmp	r3, #0
 801bc8a:	d103      	bne.n	801bc94 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801bc8c:	4b05      	ldr	r3, [pc, #20]	; (801bca4 <SUBGRF_SetStandby+0x34>)
 801bc8e:	2201      	movs	r2, #1
 801bc90:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801bc92:	e002      	b.n	801bc9a <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801bc94:	4b03      	ldr	r3, [pc, #12]	; (801bca4 <SUBGRF_SetStandby+0x34>)
 801bc96:	2202      	movs	r2, #2
 801bc98:	701a      	strb	r2, [r3, #0]
}
 801bc9a:	bf00      	nop
 801bc9c:	3708      	adds	r7, #8
 801bc9e:	46bd      	mov	sp, r7
 801bca0:	bd80      	pop	{r7, pc}
 801bca2:	bf00      	nop
 801bca4:	20001d7c 	.word	0x20001d7c

0801bca8 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801bca8:	b580      	push	{r7, lr}
 801bcaa:	b084      	sub	sp, #16
 801bcac:	af00      	add	r7, sp, #0
 801bcae:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801bcb0:	4b0c      	ldr	r3, [pc, #48]	; (801bce4 <SUBGRF_SetTx+0x3c>)
 801bcb2:	2204      	movs	r2, #4
 801bcb4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801bcb6:	687b      	ldr	r3, [r7, #4]
 801bcb8:	0c1b      	lsrs	r3, r3, #16
 801bcba:	b2db      	uxtb	r3, r3
 801bcbc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801bcbe:	687b      	ldr	r3, [r7, #4]
 801bcc0:	0a1b      	lsrs	r3, r3, #8
 801bcc2:	b2db      	uxtb	r3, r3
 801bcc4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	b2db      	uxtb	r3, r3
 801bcca:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801bccc:	f107 030c 	add.w	r3, r7, #12
 801bcd0:	2203      	movs	r2, #3
 801bcd2:	4619      	mov	r1, r3
 801bcd4:	2083      	movs	r0, #131	; 0x83
 801bcd6:	f000 fdff 	bl	801c8d8 <SUBGRF_WriteCommand>
}
 801bcda:	bf00      	nop
 801bcdc:	3710      	adds	r7, #16
 801bcde:	46bd      	mov	sp, r7
 801bce0:	bd80      	pop	{r7, pc}
 801bce2:	bf00      	nop
 801bce4:	20001d7c 	.word	0x20001d7c

0801bce8 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801bce8:	b580      	push	{r7, lr}
 801bcea:	b084      	sub	sp, #16
 801bcec:	af00      	add	r7, sp, #0
 801bcee:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801bcf0:	4b0c      	ldr	r3, [pc, #48]	; (801bd24 <SUBGRF_SetRx+0x3c>)
 801bcf2:	2205      	movs	r2, #5
 801bcf4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801bcf6:	687b      	ldr	r3, [r7, #4]
 801bcf8:	0c1b      	lsrs	r3, r3, #16
 801bcfa:	b2db      	uxtb	r3, r3
 801bcfc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801bcfe:	687b      	ldr	r3, [r7, #4]
 801bd00:	0a1b      	lsrs	r3, r3, #8
 801bd02:	b2db      	uxtb	r3, r3
 801bd04:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801bd06:	687b      	ldr	r3, [r7, #4]
 801bd08:	b2db      	uxtb	r3, r3
 801bd0a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801bd0c:	f107 030c 	add.w	r3, r7, #12
 801bd10:	2203      	movs	r2, #3
 801bd12:	4619      	mov	r1, r3
 801bd14:	2082      	movs	r0, #130	; 0x82
 801bd16:	f000 fddf 	bl	801c8d8 <SUBGRF_WriteCommand>
}
 801bd1a:	bf00      	nop
 801bd1c:	3710      	adds	r7, #16
 801bd1e:	46bd      	mov	sp, r7
 801bd20:	bd80      	pop	{r7, pc}
 801bd22:	bf00      	nop
 801bd24:	20001d7c 	.word	0x20001d7c

0801bd28 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801bd28:	b580      	push	{r7, lr}
 801bd2a:	b084      	sub	sp, #16
 801bd2c:	af00      	add	r7, sp, #0
 801bd2e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801bd30:	4b0e      	ldr	r3, [pc, #56]	; (801bd6c <SUBGRF_SetRxBoosted+0x44>)
 801bd32:	2205      	movs	r2, #5
 801bd34:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801bd36:	2197      	movs	r1, #151	; 0x97
 801bd38:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801bd3c:	f000 fd1c 	bl	801c778 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801bd40:	687b      	ldr	r3, [r7, #4]
 801bd42:	0c1b      	lsrs	r3, r3, #16
 801bd44:	b2db      	uxtb	r3, r3
 801bd46:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801bd48:	687b      	ldr	r3, [r7, #4]
 801bd4a:	0a1b      	lsrs	r3, r3, #8
 801bd4c:	b2db      	uxtb	r3, r3
 801bd4e:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801bd50:	687b      	ldr	r3, [r7, #4]
 801bd52:	b2db      	uxtb	r3, r3
 801bd54:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801bd56:	f107 030c 	add.w	r3, r7, #12
 801bd5a:	2203      	movs	r2, #3
 801bd5c:	4619      	mov	r1, r3
 801bd5e:	2082      	movs	r0, #130	; 0x82
 801bd60:	f000 fdba 	bl	801c8d8 <SUBGRF_WriteCommand>
}
 801bd64:	bf00      	nop
 801bd66:	3710      	adds	r7, #16
 801bd68:	46bd      	mov	sp, r7
 801bd6a:	bd80      	pop	{r7, pc}
 801bd6c:	20001d7c 	.word	0x20001d7c

0801bd70 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801bd70:	b580      	push	{r7, lr}
 801bd72:	b084      	sub	sp, #16
 801bd74:	af00      	add	r7, sp, #0
 801bd76:	6078      	str	r0, [r7, #4]
 801bd78:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801bd7a:	687b      	ldr	r3, [r7, #4]
 801bd7c:	0c1b      	lsrs	r3, r3, #16
 801bd7e:	b2db      	uxtb	r3, r3
 801bd80:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801bd82:	687b      	ldr	r3, [r7, #4]
 801bd84:	0a1b      	lsrs	r3, r3, #8
 801bd86:	b2db      	uxtb	r3, r3
 801bd88:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	b2db      	uxtb	r3, r3
 801bd8e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801bd90:	683b      	ldr	r3, [r7, #0]
 801bd92:	0c1b      	lsrs	r3, r3, #16
 801bd94:	b2db      	uxtb	r3, r3
 801bd96:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801bd98:	683b      	ldr	r3, [r7, #0]
 801bd9a:	0a1b      	lsrs	r3, r3, #8
 801bd9c:	b2db      	uxtb	r3, r3
 801bd9e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801bda0:	683b      	ldr	r3, [r7, #0]
 801bda2:	b2db      	uxtb	r3, r3
 801bda4:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801bda6:	f107 0308 	add.w	r3, r7, #8
 801bdaa:	2206      	movs	r2, #6
 801bdac:	4619      	mov	r1, r3
 801bdae:	2094      	movs	r0, #148	; 0x94
 801bdb0:	f000 fd92 	bl	801c8d8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801bdb4:	4b03      	ldr	r3, [pc, #12]	; (801bdc4 <SUBGRF_SetRxDutyCycle+0x54>)
 801bdb6:	2206      	movs	r2, #6
 801bdb8:	701a      	strb	r2, [r3, #0]
}
 801bdba:	bf00      	nop
 801bdbc:	3710      	adds	r7, #16
 801bdbe:	46bd      	mov	sp, r7
 801bdc0:	bd80      	pop	{r7, pc}
 801bdc2:	bf00      	nop
 801bdc4:	20001d7c 	.word	0x20001d7c

0801bdc8 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801bdc8:	b580      	push	{r7, lr}
 801bdca:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801bdcc:	2200      	movs	r2, #0
 801bdce:	2100      	movs	r1, #0
 801bdd0:	20c5      	movs	r0, #197	; 0xc5
 801bdd2:	f000 fd81 	bl	801c8d8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801bdd6:	4b02      	ldr	r3, [pc, #8]	; (801bde0 <SUBGRF_SetCad+0x18>)
 801bdd8:	2207      	movs	r2, #7
 801bdda:	701a      	strb	r2, [r3, #0]
}
 801bddc:	bf00      	nop
 801bdde:	bd80      	pop	{r7, pc}
 801bde0:	20001d7c 	.word	0x20001d7c

0801bde4 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801bde4:	b580      	push	{r7, lr}
 801bde6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801bde8:	2200      	movs	r2, #0
 801bdea:	2100      	movs	r1, #0
 801bdec:	20d1      	movs	r0, #209	; 0xd1
 801bdee:	f000 fd73 	bl	801c8d8 <SUBGRF_WriteCommand>
}
 801bdf2:	bf00      	nop
 801bdf4:	bd80      	pop	{r7, pc}

0801bdf6 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801bdf6:	b580      	push	{r7, lr}
 801bdf8:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801bdfa:	2200      	movs	r2, #0
 801bdfc:	2100      	movs	r1, #0
 801bdfe:	20d2      	movs	r0, #210	; 0xd2
 801be00:	f000 fd6a 	bl	801c8d8 <SUBGRF_WriteCommand>
}
 801be04:	bf00      	nop
 801be06:	bd80      	pop	{r7, pc}

0801be08 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801be08:	b580      	push	{r7, lr}
 801be0a:	b082      	sub	sp, #8
 801be0c:	af00      	add	r7, sp, #0
 801be0e:	4603      	mov	r3, r0
 801be10:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801be12:	1dfb      	adds	r3, r7, #7
 801be14:	2201      	movs	r2, #1
 801be16:	4619      	mov	r1, r3
 801be18:	209f      	movs	r0, #159	; 0x9f
 801be1a:	f000 fd5d 	bl	801c8d8 <SUBGRF_WriteCommand>
}
 801be1e:	bf00      	nop
 801be20:	3708      	adds	r7, #8
 801be22:	46bd      	mov	sp, r7
 801be24:	bd80      	pop	{r7, pc}

0801be26 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801be26:	b580      	push	{r7, lr}
 801be28:	b084      	sub	sp, #16
 801be2a:	af00      	add	r7, sp, #0
 801be2c:	4603      	mov	r3, r0
 801be2e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801be30:	1dfb      	adds	r3, r7, #7
 801be32:	2201      	movs	r2, #1
 801be34:	4619      	mov	r1, r3
 801be36:	20a0      	movs	r0, #160	; 0xa0
 801be38:	f000 fd4e 	bl	801c8d8 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801be3c:	79fb      	ldrb	r3, [r7, #7]
 801be3e:	2b3f      	cmp	r3, #63	; 0x3f
 801be40:	d91c      	bls.n	801be7c <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801be42:	79fb      	ldrb	r3, [r7, #7]
 801be44:	085b      	lsrs	r3, r3, #1
 801be46:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801be48:	2300      	movs	r3, #0
 801be4a:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801be4c:	2300      	movs	r3, #0
 801be4e:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801be50:	e005      	b.n	801be5e <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801be52:	7bfb      	ldrb	r3, [r7, #15]
 801be54:	089b      	lsrs	r3, r3, #2
 801be56:	73fb      	strb	r3, [r7, #15]
            exp++;
 801be58:	7bbb      	ldrb	r3, [r7, #14]
 801be5a:	3301      	adds	r3, #1
 801be5c:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801be5e:	7bfb      	ldrb	r3, [r7, #15]
 801be60:	2b1f      	cmp	r3, #31
 801be62:	d8f6      	bhi.n	801be52 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801be64:	7bfb      	ldrb	r3, [r7, #15]
 801be66:	00db      	lsls	r3, r3, #3
 801be68:	b2da      	uxtb	r2, r3
 801be6a:	7bbb      	ldrb	r3, [r7, #14]
 801be6c:	4413      	add	r3, r2
 801be6e:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801be70:	7b7b      	ldrb	r3, [r7, #13]
 801be72:	4619      	mov	r1, r3
 801be74:	f240 7006 	movw	r0, #1798	; 0x706
 801be78:	f000 fc7e 	bl	801c778 <SUBGRF_WriteRegister>
    }
}
 801be7c:	bf00      	nop
 801be7e:	3710      	adds	r7, #16
 801be80:	46bd      	mov	sp, r7
 801be82:	bd80      	pop	{r7, pc}

0801be84 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801be84:	b580      	push	{r7, lr}
 801be86:	b082      	sub	sp, #8
 801be88:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801be8a:	f7f0 ff3e 	bl	800cd0a <RBI_IsDCDC>
 801be8e:	4603      	mov	r3, r0
 801be90:	2b01      	cmp	r3, #1
 801be92:	d102      	bne.n	801be9a <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801be94:	2301      	movs	r3, #1
 801be96:	71fb      	strb	r3, [r7, #7]
 801be98:	e001      	b.n	801be9e <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801be9a:	2300      	movs	r3, #0
 801be9c:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801be9e:	1dfb      	adds	r3, r7, #7
 801bea0:	2201      	movs	r2, #1
 801bea2:	4619      	mov	r1, r3
 801bea4:	2096      	movs	r0, #150	; 0x96
 801bea6:	f000 fd17 	bl	801c8d8 <SUBGRF_WriteCommand>
}
 801beaa:	bf00      	nop
 801beac:	3708      	adds	r7, #8
 801beae:	46bd      	mov	sp, r7
 801beb0:	bd80      	pop	{r7, pc}

0801beb2 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801beb2:	b580      	push	{r7, lr}
 801beb4:	b084      	sub	sp, #16
 801beb6:	af00      	add	r7, sp, #0
 801beb8:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801beba:	793b      	ldrb	r3, [r7, #4]
 801bebc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801bec0:	b2db      	uxtb	r3, r3
 801bec2:	019b      	lsls	r3, r3, #6
 801bec4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801bec6:	793b      	ldrb	r3, [r7, #4]
 801bec8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801becc:	b2db      	uxtb	r3, r3
 801bece:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801bed0:	b25b      	sxtb	r3, r3
 801bed2:	4313      	orrs	r3, r2
 801bed4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801bed6:	793b      	ldrb	r3, [r7, #4]
 801bed8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801bedc:	b2db      	uxtb	r3, r3
 801bede:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801bee0:	b25b      	sxtb	r3, r3
 801bee2:	4313      	orrs	r3, r2
 801bee4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801bee6:	793b      	ldrb	r3, [r7, #4]
 801bee8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801beec:	b2db      	uxtb	r3, r3
 801beee:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801bef0:	b25b      	sxtb	r3, r3
 801bef2:	4313      	orrs	r3, r2
 801bef4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801bef6:	793b      	ldrb	r3, [r7, #4]
 801bef8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801befc:	b2db      	uxtb	r3, r3
 801befe:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801bf00:	b25b      	sxtb	r3, r3
 801bf02:	4313      	orrs	r3, r2
 801bf04:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801bf06:	793b      	ldrb	r3, [r7, #4]
 801bf08:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801bf0c:	b2db      	uxtb	r3, r3
 801bf0e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801bf10:	b25b      	sxtb	r3, r3
 801bf12:	4313      	orrs	r3, r2
 801bf14:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801bf16:	793b      	ldrb	r3, [r7, #4]
 801bf18:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801bf1c:	b2db      	uxtb	r3, r3
 801bf1e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801bf20:	4313      	orrs	r3, r2
 801bf22:	b25b      	sxtb	r3, r3
 801bf24:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801bf26:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801bf28:	f107 030f 	add.w	r3, r7, #15
 801bf2c:	2201      	movs	r2, #1
 801bf2e:	4619      	mov	r1, r3
 801bf30:	2089      	movs	r0, #137	; 0x89
 801bf32:	f000 fcd1 	bl	801c8d8 <SUBGRF_WriteCommand>
}
 801bf36:	bf00      	nop
 801bf38:	3710      	adds	r7, #16
 801bf3a:	46bd      	mov	sp, r7
 801bf3c:	bd80      	pop	{r7, pc}
	...

0801bf40 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801bf40:	b580      	push	{r7, lr}
 801bf42:	b084      	sub	sp, #16
 801bf44:	af00      	add	r7, sp, #0
 801bf46:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801bf48:	687b      	ldr	r3, [r7, #4]
 801bf4a:	4a1d      	ldr	r2, [pc, #116]	; (801bfc0 <SUBGRF_CalibrateImage+0x80>)
 801bf4c:	4293      	cmp	r3, r2
 801bf4e:	d904      	bls.n	801bf5a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801bf50:	23e1      	movs	r3, #225	; 0xe1
 801bf52:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801bf54:	23e9      	movs	r3, #233	; 0xe9
 801bf56:	737b      	strb	r3, [r7, #13]
 801bf58:	e027      	b.n	801bfaa <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801bf5a:	687b      	ldr	r3, [r7, #4]
 801bf5c:	4a19      	ldr	r2, [pc, #100]	; (801bfc4 <SUBGRF_CalibrateImage+0x84>)
 801bf5e:	4293      	cmp	r3, r2
 801bf60:	d904      	bls.n	801bf6c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801bf62:	23d7      	movs	r3, #215	; 0xd7
 801bf64:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801bf66:	23db      	movs	r3, #219	; 0xdb
 801bf68:	737b      	strb	r3, [r7, #13]
 801bf6a:	e01e      	b.n	801bfaa <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801bf6c:	687b      	ldr	r3, [r7, #4]
 801bf6e:	4a16      	ldr	r2, [pc, #88]	; (801bfc8 <SUBGRF_CalibrateImage+0x88>)
 801bf70:	4293      	cmp	r3, r2
 801bf72:	d904      	bls.n	801bf7e <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801bf74:	23c1      	movs	r3, #193	; 0xc1
 801bf76:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801bf78:	23c5      	movs	r3, #197	; 0xc5
 801bf7a:	737b      	strb	r3, [r7, #13]
 801bf7c:	e015      	b.n	801bfaa <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	4a12      	ldr	r2, [pc, #72]	; (801bfcc <SUBGRF_CalibrateImage+0x8c>)
 801bf82:	4293      	cmp	r3, r2
 801bf84:	d904      	bls.n	801bf90 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801bf86:	2375      	movs	r3, #117	; 0x75
 801bf88:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801bf8a:	2381      	movs	r3, #129	; 0x81
 801bf8c:	737b      	strb	r3, [r7, #13]
 801bf8e:	e00c      	b.n	801bfaa <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801bf90:	687b      	ldr	r3, [r7, #4]
 801bf92:	4a0f      	ldr	r2, [pc, #60]	; (801bfd0 <SUBGRF_CalibrateImage+0x90>)
 801bf94:	4293      	cmp	r3, r2
 801bf96:	d904      	bls.n	801bfa2 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801bf98:	236b      	movs	r3, #107	; 0x6b
 801bf9a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801bf9c:	236f      	movs	r3, #111	; 0x6f
 801bf9e:	737b      	strb	r3, [r7, #13]
 801bfa0:	e003      	b.n	801bfaa <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801bfa2:	2329      	movs	r3, #41	; 0x29
 801bfa4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801bfa6:	232b      	movs	r3, #43	; 0x2b
 801bfa8:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801bfaa:	f107 030c 	add.w	r3, r7, #12
 801bfae:	2202      	movs	r2, #2
 801bfb0:	4619      	mov	r1, r3
 801bfb2:	2098      	movs	r0, #152	; 0x98
 801bfb4:	f000 fc90 	bl	801c8d8 <SUBGRF_WriteCommand>
}
 801bfb8:	bf00      	nop
 801bfba:	3710      	adds	r7, #16
 801bfbc:	46bd      	mov	sp, r7
 801bfbe:	bd80      	pop	{r7, pc}
 801bfc0:	35a4e900 	.word	0x35a4e900
 801bfc4:	32a9f880 	.word	0x32a9f880
 801bfc8:	2de54480 	.word	0x2de54480
 801bfcc:	1b6b0b00 	.word	0x1b6b0b00
 801bfd0:	1954fc40 	.word	0x1954fc40

0801bfd4 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801bfd4:	b590      	push	{r4, r7, lr}
 801bfd6:	b085      	sub	sp, #20
 801bfd8:	af00      	add	r7, sp, #0
 801bfda:	4604      	mov	r4, r0
 801bfdc:	4608      	mov	r0, r1
 801bfde:	4611      	mov	r1, r2
 801bfe0:	461a      	mov	r2, r3
 801bfe2:	4623      	mov	r3, r4
 801bfe4:	71fb      	strb	r3, [r7, #7]
 801bfe6:	4603      	mov	r3, r0
 801bfe8:	71bb      	strb	r3, [r7, #6]
 801bfea:	460b      	mov	r3, r1
 801bfec:	717b      	strb	r3, [r7, #5]
 801bfee:	4613      	mov	r3, r2
 801bff0:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801bff2:	79fb      	ldrb	r3, [r7, #7]
 801bff4:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801bff6:	79bb      	ldrb	r3, [r7, #6]
 801bff8:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801bffa:	797b      	ldrb	r3, [r7, #5]
 801bffc:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801bffe:	793b      	ldrb	r3, [r7, #4]
 801c000:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801c002:	f107 030c 	add.w	r3, r7, #12
 801c006:	2204      	movs	r2, #4
 801c008:	4619      	mov	r1, r3
 801c00a:	2095      	movs	r0, #149	; 0x95
 801c00c:	f000 fc64 	bl	801c8d8 <SUBGRF_WriteCommand>
}
 801c010:	bf00      	nop
 801c012:	3714      	adds	r7, #20
 801c014:	46bd      	mov	sp, r7
 801c016:	bd90      	pop	{r4, r7, pc}

0801c018 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801c018:	b590      	push	{r4, r7, lr}
 801c01a:	b085      	sub	sp, #20
 801c01c:	af00      	add	r7, sp, #0
 801c01e:	4604      	mov	r4, r0
 801c020:	4608      	mov	r0, r1
 801c022:	4611      	mov	r1, r2
 801c024:	461a      	mov	r2, r3
 801c026:	4623      	mov	r3, r4
 801c028:	80fb      	strh	r3, [r7, #6]
 801c02a:	4603      	mov	r3, r0
 801c02c:	80bb      	strh	r3, [r7, #4]
 801c02e:	460b      	mov	r3, r1
 801c030:	807b      	strh	r3, [r7, #2]
 801c032:	4613      	mov	r3, r2
 801c034:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801c036:	88fb      	ldrh	r3, [r7, #6]
 801c038:	0a1b      	lsrs	r3, r3, #8
 801c03a:	b29b      	uxth	r3, r3
 801c03c:	b2db      	uxtb	r3, r3
 801c03e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801c040:	88fb      	ldrh	r3, [r7, #6]
 801c042:	b2db      	uxtb	r3, r3
 801c044:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801c046:	88bb      	ldrh	r3, [r7, #4]
 801c048:	0a1b      	lsrs	r3, r3, #8
 801c04a:	b29b      	uxth	r3, r3
 801c04c:	b2db      	uxtb	r3, r3
 801c04e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801c050:	88bb      	ldrh	r3, [r7, #4]
 801c052:	b2db      	uxtb	r3, r3
 801c054:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801c056:	887b      	ldrh	r3, [r7, #2]
 801c058:	0a1b      	lsrs	r3, r3, #8
 801c05a:	b29b      	uxth	r3, r3
 801c05c:	b2db      	uxtb	r3, r3
 801c05e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801c060:	887b      	ldrh	r3, [r7, #2]
 801c062:	b2db      	uxtb	r3, r3
 801c064:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801c066:	883b      	ldrh	r3, [r7, #0]
 801c068:	0a1b      	lsrs	r3, r3, #8
 801c06a:	b29b      	uxth	r3, r3
 801c06c:	b2db      	uxtb	r3, r3
 801c06e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801c070:	883b      	ldrh	r3, [r7, #0]
 801c072:	b2db      	uxtb	r3, r3
 801c074:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801c076:	f107 0308 	add.w	r3, r7, #8
 801c07a:	2208      	movs	r2, #8
 801c07c:	4619      	mov	r1, r3
 801c07e:	2008      	movs	r0, #8
 801c080:	f000 fc2a 	bl	801c8d8 <SUBGRF_WriteCommand>
}
 801c084:	bf00      	nop
 801c086:	3714      	adds	r7, #20
 801c088:	46bd      	mov	sp, r7
 801c08a:	bd90      	pop	{r4, r7, pc}

0801c08c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801c08c:	b580      	push	{r7, lr}
 801c08e:	b084      	sub	sp, #16
 801c090:	af00      	add	r7, sp, #0
 801c092:	4603      	mov	r3, r0
 801c094:	6039      	str	r1, [r7, #0]
 801c096:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801c098:	79fb      	ldrb	r3, [r7, #7]
 801c09a:	f003 0307 	and.w	r3, r3, #7
 801c09e:	b2db      	uxtb	r3, r3
 801c0a0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c0a2:	683b      	ldr	r3, [r7, #0]
 801c0a4:	0c1b      	lsrs	r3, r3, #16
 801c0a6:	b2db      	uxtb	r3, r3
 801c0a8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c0aa:	683b      	ldr	r3, [r7, #0]
 801c0ac:	0a1b      	lsrs	r3, r3, #8
 801c0ae:	b2db      	uxtb	r3, r3
 801c0b0:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801c0b2:	683b      	ldr	r3, [r7, #0]
 801c0b4:	b2db      	uxtb	r3, r3
 801c0b6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801c0b8:	f107 030c 	add.w	r3, r7, #12
 801c0bc:	2204      	movs	r2, #4
 801c0be:	4619      	mov	r1, r3
 801c0c0:	2097      	movs	r0, #151	; 0x97
 801c0c2:	f000 fc09 	bl	801c8d8 <SUBGRF_WriteCommand>
}
 801c0c6:	bf00      	nop
 801c0c8:	3710      	adds	r7, #16
 801c0ca:	46bd      	mov	sp, r7
 801c0cc:	bd80      	pop	{r7, pc}
	...

0801c0d0 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801c0d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801c0d4:	b084      	sub	sp, #16
 801c0d6:	af00      	add	r7, sp, #0
 801c0d8:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801c0da:	2300      	movs	r3, #0
 801c0dc:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801c0de:	4b1d      	ldr	r3, [pc, #116]	; (801c154 <SUBGRF_SetRfFrequency+0x84>)
 801c0e0:	781b      	ldrb	r3, [r3, #0]
 801c0e2:	f083 0301 	eor.w	r3, r3, #1
 801c0e6:	b2db      	uxtb	r3, r3
 801c0e8:	2b00      	cmp	r3, #0
 801c0ea:	d005      	beq.n	801c0f8 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801c0ec:	6878      	ldr	r0, [r7, #4]
 801c0ee:	f7ff ff27 	bl	801bf40 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801c0f2:	4b18      	ldr	r3, [pc, #96]	; (801c154 <SUBGRF_SetRfFrequency+0x84>)
 801c0f4:	2201      	movs	r2, #1
 801c0f6:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801c0f8:	687b      	ldr	r3, [r7, #4]
 801c0fa:	2200      	movs	r2, #0
 801c0fc:	461c      	mov	r4, r3
 801c0fe:	4615      	mov	r5, r2
 801c100:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801c104:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801c108:	4a13      	ldr	r2, [pc, #76]	; (801c158 <SUBGRF_SetRfFrequency+0x88>)
 801c10a:	f04f 0300 	mov.w	r3, #0
 801c10e:	4640      	mov	r0, r8
 801c110:	4649      	mov	r1, r9
 801c112:	f7e4 ff5b 	bl	8000fcc <__aeabi_uldivmod>
 801c116:	4602      	mov	r2, r0
 801c118:	460b      	mov	r3, r1
 801c11a:	4613      	mov	r3, r2
 801c11c:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801c11e:	68fb      	ldr	r3, [r7, #12]
 801c120:	0e1b      	lsrs	r3, r3, #24
 801c122:	b2db      	uxtb	r3, r3
 801c124:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801c126:	68fb      	ldr	r3, [r7, #12]
 801c128:	0c1b      	lsrs	r3, r3, #16
 801c12a:	b2db      	uxtb	r3, r3
 801c12c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801c12e:	68fb      	ldr	r3, [r7, #12]
 801c130:	0a1b      	lsrs	r3, r3, #8
 801c132:	b2db      	uxtb	r3, r3
 801c134:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801c136:	68fb      	ldr	r3, [r7, #12]
 801c138:	b2db      	uxtb	r3, r3
 801c13a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801c13c:	f107 0308 	add.w	r3, r7, #8
 801c140:	2204      	movs	r2, #4
 801c142:	4619      	mov	r1, r3
 801c144:	2086      	movs	r0, #134	; 0x86
 801c146:	f000 fbc7 	bl	801c8d8 <SUBGRF_WriteCommand>
}
 801c14a:	bf00      	nop
 801c14c:	3710      	adds	r7, #16
 801c14e:	46bd      	mov	sp, r7
 801c150:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801c154:	20001d84 	.word	0x20001d84
 801c158:	01e84800 	.word	0x01e84800

0801c15c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801c15c:	b580      	push	{r7, lr}
 801c15e:	b082      	sub	sp, #8
 801c160:	af00      	add	r7, sp, #0
 801c162:	4603      	mov	r3, r0
 801c164:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801c166:	79fa      	ldrb	r2, [r7, #7]
 801c168:	4b09      	ldr	r3, [pc, #36]	; (801c190 <SUBGRF_SetPacketType+0x34>)
 801c16a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801c16c:	79fb      	ldrb	r3, [r7, #7]
 801c16e:	2b00      	cmp	r3, #0
 801c170:	d104      	bne.n	801c17c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801c172:	2100      	movs	r1, #0
 801c174:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801c178:	f000 fafe 	bl	801c778 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801c17c:	1dfb      	adds	r3, r7, #7
 801c17e:	2201      	movs	r2, #1
 801c180:	4619      	mov	r1, r3
 801c182:	208a      	movs	r0, #138	; 0x8a
 801c184:	f000 fba8 	bl	801c8d8 <SUBGRF_WriteCommand>
}
 801c188:	bf00      	nop
 801c18a:	3708      	adds	r7, #8
 801c18c:	46bd      	mov	sp, r7
 801c18e:	bd80      	pop	{r7, pc}
 801c190:	20001d7d 	.word	0x20001d7d

0801c194 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801c194:	b480      	push	{r7}
 801c196:	af00      	add	r7, sp, #0
    return PacketType;
 801c198:	4b02      	ldr	r3, [pc, #8]	; (801c1a4 <SUBGRF_GetPacketType+0x10>)
 801c19a:	781b      	ldrb	r3, [r3, #0]
}
 801c19c:	4618      	mov	r0, r3
 801c19e:	46bd      	mov	sp, r7
 801c1a0:	bc80      	pop	{r7}
 801c1a2:	4770      	bx	lr
 801c1a4:	20001d7d 	.word	0x20001d7d

0801c1a8 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801c1a8:	b580      	push	{r7, lr}
 801c1aa:	b084      	sub	sp, #16
 801c1ac:	af00      	add	r7, sp, #0
 801c1ae:	4603      	mov	r3, r0
 801c1b0:	71fb      	strb	r3, [r7, #7]
 801c1b2:	460b      	mov	r3, r1
 801c1b4:	71bb      	strb	r3, [r7, #6]
 801c1b6:	4613      	mov	r3, r2
 801c1b8:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801c1ba:	79fb      	ldrb	r3, [r7, #7]
 801c1bc:	2b01      	cmp	r3, #1
 801c1be:	d149      	bne.n	801c254 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801c1c0:	2000      	movs	r0, #0
 801c1c2:	f7f0 fda9 	bl	800cd18 <RBI_GetRFOMaxPowerConfig>
 801c1c6:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801c1c8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c1cc:	68fa      	ldr	r2, [r7, #12]
 801c1ce:	429a      	cmp	r2, r3
 801c1d0:	da01      	bge.n	801c1d6 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801c1d2:	68fb      	ldr	r3, [r7, #12]
 801c1d4:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801c1d6:	68fb      	ldr	r3, [r7, #12]
 801c1d8:	2b0e      	cmp	r3, #14
 801c1da:	d10e      	bne.n	801c1fa <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801c1dc:	2301      	movs	r3, #1
 801c1de:	2201      	movs	r2, #1
 801c1e0:	2100      	movs	r1, #0
 801c1e2:	2004      	movs	r0, #4
 801c1e4:	f7ff fef6 	bl	801bfd4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c1e8:	79ba      	ldrb	r2, [r7, #6]
 801c1ea:	68fb      	ldr	r3, [r7, #12]
 801c1ec:	b2db      	uxtb	r3, r3
 801c1ee:	1ad3      	subs	r3, r2, r3
 801c1f0:	b2db      	uxtb	r3, r3
 801c1f2:	330e      	adds	r3, #14
 801c1f4:	b2db      	uxtb	r3, r3
 801c1f6:	71bb      	strb	r3, [r7, #6]
 801c1f8:	e01f      	b.n	801c23a <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801c1fa:	68fb      	ldr	r3, [r7, #12]
 801c1fc:	2b0a      	cmp	r3, #10
 801c1fe:	d10e      	bne.n	801c21e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801c200:	2301      	movs	r3, #1
 801c202:	2201      	movs	r2, #1
 801c204:	2100      	movs	r1, #0
 801c206:	2001      	movs	r0, #1
 801c208:	f7ff fee4 	bl	801bfd4 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801c20c:	79ba      	ldrb	r2, [r7, #6]
 801c20e:	68fb      	ldr	r3, [r7, #12]
 801c210:	b2db      	uxtb	r3, r3
 801c212:	1ad3      	subs	r3, r2, r3
 801c214:	b2db      	uxtb	r3, r3
 801c216:	330d      	adds	r3, #13
 801c218:	b2db      	uxtb	r3, r3
 801c21a:	71bb      	strb	r3, [r7, #6]
 801c21c:	e00d      	b.n	801c23a <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801c21e:	2301      	movs	r3, #1
 801c220:	2201      	movs	r2, #1
 801c222:	2100      	movs	r1, #0
 801c224:	2007      	movs	r0, #7
 801c226:	f7ff fed5 	bl	801bfd4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c22a:	79ba      	ldrb	r2, [r7, #6]
 801c22c:	68fb      	ldr	r3, [r7, #12]
 801c22e:	b2db      	uxtb	r3, r3
 801c230:	1ad3      	subs	r3, r2, r3
 801c232:	b2db      	uxtb	r3, r3
 801c234:	330e      	adds	r3, #14
 801c236:	b2db      	uxtb	r3, r3
 801c238:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801c23a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c23e:	f113 0f11 	cmn.w	r3, #17
 801c242:	da01      	bge.n	801c248 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801c244:	23ef      	movs	r3, #239	; 0xef
 801c246:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801c248:	2118      	movs	r1, #24
 801c24a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c24e:	f000 fa93 	bl	801c778 <SUBGRF_WriteRegister>
 801c252:	e067      	b.n	801c324 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801c254:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801c258:	f000 faa2 	bl	801c7a0 <SUBGRF_ReadRegister>
 801c25c:	4603      	mov	r3, r0
 801c25e:	f043 031e 	orr.w	r3, r3, #30
 801c262:	b2db      	uxtb	r3, r3
 801c264:	4619      	mov	r1, r3
 801c266:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801c26a:	f000 fa85 	bl	801c778 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801c26e:	2001      	movs	r0, #1
 801c270:	f7f0 fd52 	bl	800cd18 <RBI_GetRFOMaxPowerConfig>
 801c274:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801c276:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c27a:	68fa      	ldr	r2, [r7, #12]
 801c27c:	429a      	cmp	r2, r3
 801c27e:	da01      	bge.n	801c284 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801c280:	68fb      	ldr	r3, [r7, #12]
 801c282:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801c284:	68fb      	ldr	r3, [r7, #12]
 801c286:	2b14      	cmp	r3, #20
 801c288:	d10e      	bne.n	801c2a8 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801c28a:	2301      	movs	r3, #1
 801c28c:	2200      	movs	r2, #0
 801c28e:	2105      	movs	r1, #5
 801c290:	2003      	movs	r0, #3
 801c292:	f7ff fe9f 	bl	801bfd4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c296:	79ba      	ldrb	r2, [r7, #6]
 801c298:	68fb      	ldr	r3, [r7, #12]
 801c29a:	b2db      	uxtb	r3, r3
 801c29c:	1ad3      	subs	r3, r2, r3
 801c29e:	b2db      	uxtb	r3, r3
 801c2a0:	3316      	adds	r3, #22
 801c2a2:	b2db      	uxtb	r3, r3
 801c2a4:	71bb      	strb	r3, [r7, #6]
 801c2a6:	e031      	b.n	801c30c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801c2a8:	68fb      	ldr	r3, [r7, #12]
 801c2aa:	2b11      	cmp	r3, #17
 801c2ac:	d10e      	bne.n	801c2cc <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801c2ae:	2301      	movs	r3, #1
 801c2b0:	2200      	movs	r2, #0
 801c2b2:	2103      	movs	r1, #3
 801c2b4:	2002      	movs	r0, #2
 801c2b6:	f7ff fe8d 	bl	801bfd4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c2ba:	79ba      	ldrb	r2, [r7, #6]
 801c2bc:	68fb      	ldr	r3, [r7, #12]
 801c2be:	b2db      	uxtb	r3, r3
 801c2c0:	1ad3      	subs	r3, r2, r3
 801c2c2:	b2db      	uxtb	r3, r3
 801c2c4:	3316      	adds	r3, #22
 801c2c6:	b2db      	uxtb	r3, r3
 801c2c8:	71bb      	strb	r3, [r7, #6]
 801c2ca:	e01f      	b.n	801c30c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801c2cc:	68fb      	ldr	r3, [r7, #12]
 801c2ce:	2b0e      	cmp	r3, #14
 801c2d0:	d10e      	bne.n	801c2f0 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801c2d2:	2301      	movs	r3, #1
 801c2d4:	2200      	movs	r2, #0
 801c2d6:	2102      	movs	r1, #2
 801c2d8:	2002      	movs	r0, #2
 801c2da:	f7ff fe7b 	bl	801bfd4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c2de:	79ba      	ldrb	r2, [r7, #6]
 801c2e0:	68fb      	ldr	r3, [r7, #12]
 801c2e2:	b2db      	uxtb	r3, r3
 801c2e4:	1ad3      	subs	r3, r2, r3
 801c2e6:	b2db      	uxtb	r3, r3
 801c2e8:	330e      	adds	r3, #14
 801c2ea:	b2db      	uxtb	r3, r3
 801c2ec:	71bb      	strb	r3, [r7, #6]
 801c2ee:	e00d      	b.n	801c30c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801c2f0:	2301      	movs	r3, #1
 801c2f2:	2200      	movs	r2, #0
 801c2f4:	2107      	movs	r1, #7
 801c2f6:	2004      	movs	r0, #4
 801c2f8:	f7ff fe6c 	bl	801bfd4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c2fc:	79ba      	ldrb	r2, [r7, #6]
 801c2fe:	68fb      	ldr	r3, [r7, #12]
 801c300:	b2db      	uxtb	r3, r3
 801c302:	1ad3      	subs	r3, r2, r3
 801c304:	b2db      	uxtb	r3, r3
 801c306:	3316      	adds	r3, #22
 801c308:	b2db      	uxtb	r3, r3
 801c30a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801c30c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c310:	f113 0f09 	cmn.w	r3, #9
 801c314:	da01      	bge.n	801c31a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801c316:	23f7      	movs	r3, #247	; 0xf7
 801c318:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801c31a:	2138      	movs	r1, #56	; 0x38
 801c31c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c320:	f000 fa2a 	bl	801c778 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801c324:	79bb      	ldrb	r3, [r7, #6]
 801c326:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801c328:	797b      	ldrb	r3, [r7, #5]
 801c32a:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801c32c:	f107 0308 	add.w	r3, r7, #8
 801c330:	2202      	movs	r2, #2
 801c332:	4619      	mov	r1, r3
 801c334:	208e      	movs	r0, #142	; 0x8e
 801c336:	f000 facf 	bl	801c8d8 <SUBGRF_WriteCommand>
}
 801c33a:	bf00      	nop
 801c33c:	3710      	adds	r7, #16
 801c33e:	46bd      	mov	sp, r7
 801c340:	bd80      	pop	{r7, pc}
	...

0801c344 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801c344:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801c348:	b086      	sub	sp, #24
 801c34a:	af00      	add	r7, sp, #0
 801c34c:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801c34e:	2300      	movs	r3, #0
 801c350:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801c352:	4a61      	ldr	r2, [pc, #388]	; (801c4d8 <SUBGRF_SetModulationParams+0x194>)
 801c354:	f107 0308 	add.w	r3, r7, #8
 801c358:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c35c:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801c360:	687b      	ldr	r3, [r7, #4]
 801c362:	781a      	ldrb	r2, [r3, #0]
 801c364:	4b5d      	ldr	r3, [pc, #372]	; (801c4dc <SUBGRF_SetModulationParams+0x198>)
 801c366:	781b      	ldrb	r3, [r3, #0]
 801c368:	429a      	cmp	r2, r3
 801c36a:	d004      	beq.n	801c376 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	781b      	ldrb	r3, [r3, #0]
 801c370:	4618      	mov	r0, r3
 801c372:	f7ff fef3 	bl	801c15c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801c376:	687b      	ldr	r3, [r7, #4]
 801c378:	781b      	ldrb	r3, [r3, #0]
 801c37a:	2b03      	cmp	r3, #3
 801c37c:	f200 80a5 	bhi.w	801c4ca <SUBGRF_SetModulationParams+0x186>
 801c380:	a201      	add	r2, pc, #4	; (adr r2, 801c388 <SUBGRF_SetModulationParams+0x44>)
 801c382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c386:	bf00      	nop
 801c388:	0801c399 	.word	0x0801c399
 801c38c:	0801c459 	.word	0x0801c459
 801c390:	0801c41b 	.word	0x0801c41b
 801c394:	0801c487 	.word	0x0801c487
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801c398:	2308      	movs	r3, #8
 801c39a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801c39c:	687b      	ldr	r3, [r7, #4]
 801c39e:	685b      	ldr	r3, [r3, #4]
 801c3a0:	4a4f      	ldr	r2, [pc, #316]	; (801c4e0 <SUBGRF_SetModulationParams+0x19c>)
 801c3a2:	fbb2 f3f3 	udiv	r3, r2, r3
 801c3a6:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c3a8:	697b      	ldr	r3, [r7, #20]
 801c3aa:	0c1b      	lsrs	r3, r3, #16
 801c3ac:	b2db      	uxtb	r3, r3
 801c3ae:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c3b0:	697b      	ldr	r3, [r7, #20]
 801c3b2:	0a1b      	lsrs	r3, r3, #8
 801c3b4:	b2db      	uxtb	r3, r3
 801c3b6:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c3b8:	697b      	ldr	r3, [r7, #20]
 801c3ba:	b2db      	uxtb	r3, r3
 801c3bc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801c3be:	687b      	ldr	r3, [r7, #4]
 801c3c0:	7b1b      	ldrb	r3, [r3, #12]
 801c3c2:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801c3c4:	687b      	ldr	r3, [r7, #4]
 801c3c6:	7b5b      	ldrb	r3, [r3, #13]
 801c3c8:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801c3ca:	687b      	ldr	r3, [r7, #4]
 801c3cc:	689b      	ldr	r3, [r3, #8]
 801c3ce:	2200      	movs	r2, #0
 801c3d0:	461c      	mov	r4, r3
 801c3d2:	4615      	mov	r5, r2
 801c3d4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801c3d8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801c3dc:	4a41      	ldr	r2, [pc, #260]	; (801c4e4 <SUBGRF_SetModulationParams+0x1a0>)
 801c3de:	f04f 0300 	mov.w	r3, #0
 801c3e2:	4640      	mov	r0, r8
 801c3e4:	4649      	mov	r1, r9
 801c3e6:	f7e4 fdf1 	bl	8000fcc <__aeabi_uldivmod>
 801c3ea:	4602      	mov	r2, r0
 801c3ec:	460b      	mov	r3, r1
 801c3ee:	4613      	mov	r3, r2
 801c3f0:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801c3f2:	697b      	ldr	r3, [r7, #20]
 801c3f4:	0c1b      	lsrs	r3, r3, #16
 801c3f6:	b2db      	uxtb	r3, r3
 801c3f8:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801c3fa:	697b      	ldr	r3, [r7, #20]
 801c3fc:	0a1b      	lsrs	r3, r3, #8
 801c3fe:	b2db      	uxtb	r3, r3
 801c400:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801c402:	697b      	ldr	r3, [r7, #20]
 801c404:	b2db      	uxtb	r3, r3
 801c406:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c408:	7cfb      	ldrb	r3, [r7, #19]
 801c40a:	b29a      	uxth	r2, r3
 801c40c:	f107 0308 	add.w	r3, r7, #8
 801c410:	4619      	mov	r1, r3
 801c412:	208b      	movs	r0, #139	; 0x8b
 801c414:	f000 fa60 	bl	801c8d8 <SUBGRF_WriteCommand>
        break;
 801c418:	e058      	b.n	801c4cc <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801c41a:	2304      	movs	r3, #4
 801c41c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801c41e:	687b      	ldr	r3, [r7, #4]
 801c420:	691b      	ldr	r3, [r3, #16]
 801c422:	4a2f      	ldr	r2, [pc, #188]	; (801c4e0 <SUBGRF_SetModulationParams+0x19c>)
 801c424:	fbb2 f3f3 	udiv	r3, r2, r3
 801c428:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c42a:	697b      	ldr	r3, [r7, #20]
 801c42c:	0c1b      	lsrs	r3, r3, #16
 801c42e:	b2db      	uxtb	r3, r3
 801c430:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c432:	697b      	ldr	r3, [r7, #20]
 801c434:	0a1b      	lsrs	r3, r3, #8
 801c436:	b2db      	uxtb	r3, r3
 801c438:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c43a:	697b      	ldr	r3, [r7, #20]
 801c43c:	b2db      	uxtb	r3, r3
 801c43e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801c440:	687b      	ldr	r3, [r7, #4]
 801c442:	7d1b      	ldrb	r3, [r3, #20]
 801c444:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c446:	7cfb      	ldrb	r3, [r7, #19]
 801c448:	b29a      	uxth	r2, r3
 801c44a:	f107 0308 	add.w	r3, r7, #8
 801c44e:	4619      	mov	r1, r3
 801c450:	208b      	movs	r0, #139	; 0x8b
 801c452:	f000 fa41 	bl	801c8d8 <SUBGRF_WriteCommand>
        break;
 801c456:	e039      	b.n	801c4cc <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801c458:	2304      	movs	r3, #4
 801c45a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801c45c:	687b      	ldr	r3, [r7, #4]
 801c45e:	7e1b      	ldrb	r3, [r3, #24]
 801c460:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801c462:	687b      	ldr	r3, [r7, #4]
 801c464:	7e5b      	ldrb	r3, [r3, #25]
 801c466:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801c468:	687b      	ldr	r3, [r7, #4]
 801c46a:	7e9b      	ldrb	r3, [r3, #26]
 801c46c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801c46e:	687b      	ldr	r3, [r7, #4]
 801c470:	7edb      	ldrb	r3, [r3, #27]
 801c472:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c474:	7cfb      	ldrb	r3, [r7, #19]
 801c476:	b29a      	uxth	r2, r3
 801c478:	f107 0308 	add.w	r3, r7, #8
 801c47c:	4619      	mov	r1, r3
 801c47e:	208b      	movs	r0, #139	; 0x8b
 801c480:	f000 fa2a 	bl	801c8d8 <SUBGRF_WriteCommand>

        break;
 801c484:	e022      	b.n	801c4cc <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801c486:	2305      	movs	r3, #5
 801c488:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801c48a:	687b      	ldr	r3, [r7, #4]
 801c48c:	685b      	ldr	r3, [r3, #4]
 801c48e:	4a14      	ldr	r2, [pc, #80]	; (801c4e0 <SUBGRF_SetModulationParams+0x19c>)
 801c490:	fbb2 f3f3 	udiv	r3, r2, r3
 801c494:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c496:	697b      	ldr	r3, [r7, #20]
 801c498:	0c1b      	lsrs	r3, r3, #16
 801c49a:	b2db      	uxtb	r3, r3
 801c49c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c49e:	697b      	ldr	r3, [r7, #20]
 801c4a0:	0a1b      	lsrs	r3, r3, #8
 801c4a2:	b2db      	uxtb	r3, r3
 801c4a4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c4a6:	697b      	ldr	r3, [r7, #20]
 801c4a8:	b2db      	uxtb	r3, r3
 801c4aa:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801c4ac:	687b      	ldr	r3, [r7, #4]
 801c4ae:	7b1b      	ldrb	r3, [r3, #12]
 801c4b0:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801c4b2:	687b      	ldr	r3, [r7, #4]
 801c4b4:	7b5b      	ldrb	r3, [r3, #13]
 801c4b6:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c4b8:	7cfb      	ldrb	r3, [r7, #19]
 801c4ba:	b29a      	uxth	r2, r3
 801c4bc:	f107 0308 	add.w	r3, r7, #8
 801c4c0:	4619      	mov	r1, r3
 801c4c2:	208b      	movs	r0, #139	; 0x8b
 801c4c4:	f000 fa08 	bl	801c8d8 <SUBGRF_WriteCommand>
        break;
 801c4c8:	e000      	b.n	801c4cc <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801c4ca:	bf00      	nop
    }
}
 801c4cc:	bf00      	nop
 801c4ce:	3718      	adds	r7, #24
 801c4d0:	46bd      	mov	sp, r7
 801c4d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801c4d6:	bf00      	nop
 801c4d8:	0801ef40 	.word	0x0801ef40
 801c4dc:	20001d7d 	.word	0x20001d7d
 801c4e0:	3d090000 	.word	0x3d090000
 801c4e4:	01e84800 	.word	0x01e84800

0801c4e8 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801c4e8:	b580      	push	{r7, lr}
 801c4ea:	b086      	sub	sp, #24
 801c4ec:	af00      	add	r7, sp, #0
 801c4ee:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801c4f0:	2300      	movs	r3, #0
 801c4f2:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801c4f4:	4a48      	ldr	r2, [pc, #288]	; (801c618 <SUBGRF_SetPacketParams+0x130>)
 801c4f6:	f107 030c 	add.w	r3, r7, #12
 801c4fa:	ca07      	ldmia	r2, {r0, r1, r2}
 801c4fc:	c303      	stmia	r3!, {r0, r1}
 801c4fe:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	781a      	ldrb	r2, [r3, #0]
 801c504:	4b45      	ldr	r3, [pc, #276]	; (801c61c <SUBGRF_SetPacketParams+0x134>)
 801c506:	781b      	ldrb	r3, [r3, #0]
 801c508:	429a      	cmp	r2, r3
 801c50a:	d004      	beq.n	801c516 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801c50c:	687b      	ldr	r3, [r7, #4]
 801c50e:	781b      	ldrb	r3, [r3, #0]
 801c510:	4618      	mov	r0, r3
 801c512:	f7ff fe23 	bl	801c15c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801c516:	687b      	ldr	r3, [r7, #4]
 801c518:	781b      	ldrb	r3, [r3, #0]
 801c51a:	2b03      	cmp	r3, #3
 801c51c:	d878      	bhi.n	801c610 <SUBGRF_SetPacketParams+0x128>
 801c51e:	a201      	add	r2, pc, #4	; (adr r2, 801c524 <SUBGRF_SetPacketParams+0x3c>)
 801c520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c524:	0801c535 	.word	0x0801c535
 801c528:	0801c5c5 	.word	0x0801c5c5
 801c52c:	0801c5b9 	.word	0x0801c5b9
 801c530:	0801c535 	.word	0x0801c535
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801c534:	687b      	ldr	r3, [r7, #4]
 801c536:	7a5b      	ldrb	r3, [r3, #9]
 801c538:	2bf1      	cmp	r3, #241	; 0xf1
 801c53a:	d10a      	bne.n	801c552 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801c53c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801c540:	f7ff faaa 	bl	801ba98 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801c544:	f248 0005 	movw	r0, #32773	; 0x8005
 801c548:	f7ff fac6 	bl	801bad8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801c54c:	2302      	movs	r3, #2
 801c54e:	75bb      	strb	r3, [r7, #22]
 801c550:	e011      	b.n	801c576 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801c552:	687b      	ldr	r3, [r7, #4]
 801c554:	7a5b      	ldrb	r3, [r3, #9]
 801c556:	2bf2      	cmp	r3, #242	; 0xf2
 801c558:	d10a      	bne.n	801c570 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801c55a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801c55e:	f7ff fa9b 	bl	801ba98 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801c562:	f241 0021 	movw	r0, #4129	; 0x1021
 801c566:	f7ff fab7 	bl	801bad8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801c56a:	2306      	movs	r3, #6
 801c56c:	75bb      	strb	r3, [r7, #22]
 801c56e:	e002      	b.n	801c576 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801c570:	687b      	ldr	r3, [r7, #4]
 801c572:	7a5b      	ldrb	r3, [r3, #9]
 801c574:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801c576:	2309      	movs	r3, #9
 801c578:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801c57a:	687b      	ldr	r3, [r7, #4]
 801c57c:	885b      	ldrh	r3, [r3, #2]
 801c57e:	0a1b      	lsrs	r3, r3, #8
 801c580:	b29b      	uxth	r3, r3
 801c582:	b2db      	uxtb	r3, r3
 801c584:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801c586:	687b      	ldr	r3, [r7, #4]
 801c588:	885b      	ldrh	r3, [r3, #2]
 801c58a:	b2db      	uxtb	r3, r3
 801c58c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801c58e:	687b      	ldr	r3, [r7, #4]
 801c590:	791b      	ldrb	r3, [r3, #4]
 801c592:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801c594:	687b      	ldr	r3, [r7, #4]
 801c596:	795b      	ldrb	r3, [r3, #5]
 801c598:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801c59a:	687b      	ldr	r3, [r7, #4]
 801c59c:	799b      	ldrb	r3, [r3, #6]
 801c59e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801c5a0:	687b      	ldr	r3, [r7, #4]
 801c5a2:	79db      	ldrb	r3, [r3, #7]
 801c5a4:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801c5a6:	687b      	ldr	r3, [r7, #4]
 801c5a8:	7a1b      	ldrb	r3, [r3, #8]
 801c5aa:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801c5ac:	7dbb      	ldrb	r3, [r7, #22]
 801c5ae:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801c5b0:	687b      	ldr	r3, [r7, #4]
 801c5b2:	7a9b      	ldrb	r3, [r3, #10]
 801c5b4:	753b      	strb	r3, [r7, #20]
        break;
 801c5b6:	e022      	b.n	801c5fe <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801c5b8:	2301      	movs	r3, #1
 801c5ba:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	7b1b      	ldrb	r3, [r3, #12]
 801c5c0:	733b      	strb	r3, [r7, #12]
        break;
 801c5c2:	e01c      	b.n	801c5fe <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801c5c4:	2306      	movs	r3, #6
 801c5c6:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801c5c8:	687b      	ldr	r3, [r7, #4]
 801c5ca:	89db      	ldrh	r3, [r3, #14]
 801c5cc:	0a1b      	lsrs	r3, r3, #8
 801c5ce:	b29b      	uxth	r3, r3
 801c5d0:	b2db      	uxtb	r3, r3
 801c5d2:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801c5d4:	687b      	ldr	r3, [r7, #4]
 801c5d6:	89db      	ldrh	r3, [r3, #14]
 801c5d8:	b2db      	uxtb	r3, r3
 801c5da:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801c5dc:	687b      	ldr	r3, [r7, #4]
 801c5de:	7c1a      	ldrb	r2, [r3, #16]
 801c5e0:	4b0f      	ldr	r3, [pc, #60]	; (801c620 <SUBGRF_SetPacketParams+0x138>)
 801c5e2:	4611      	mov	r1, r2
 801c5e4:	7019      	strb	r1, [r3, #0]
 801c5e6:	4613      	mov	r3, r2
 801c5e8:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801c5ea:	687b      	ldr	r3, [r7, #4]
 801c5ec:	7c5b      	ldrb	r3, [r3, #17]
 801c5ee:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801c5f0:	687b      	ldr	r3, [r7, #4]
 801c5f2:	7c9b      	ldrb	r3, [r3, #18]
 801c5f4:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801c5f6:	687b      	ldr	r3, [r7, #4]
 801c5f8:	7cdb      	ldrb	r3, [r3, #19]
 801c5fa:	747b      	strb	r3, [r7, #17]
        break;
 801c5fc:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801c5fe:	7dfb      	ldrb	r3, [r7, #23]
 801c600:	b29a      	uxth	r2, r3
 801c602:	f107 030c 	add.w	r3, r7, #12
 801c606:	4619      	mov	r1, r3
 801c608:	208c      	movs	r0, #140	; 0x8c
 801c60a:	f000 f965 	bl	801c8d8 <SUBGRF_WriteCommand>
 801c60e:	e000      	b.n	801c612 <SUBGRF_SetPacketParams+0x12a>
        return;
 801c610:	bf00      	nop
}
 801c612:	3718      	adds	r7, #24
 801c614:	46bd      	mov	sp, r7
 801c616:	bd80      	pop	{r7, pc}
 801c618:	0801ef48 	.word	0x0801ef48
 801c61c:	20001d7d 	.word	0x20001d7d
 801c620:	20001d7e 	.word	0x20001d7e

0801c624 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801c624:	b580      	push	{r7, lr}
 801c626:	b084      	sub	sp, #16
 801c628:	af00      	add	r7, sp, #0
 801c62a:	4603      	mov	r3, r0
 801c62c:	460a      	mov	r2, r1
 801c62e:	71fb      	strb	r3, [r7, #7]
 801c630:	4613      	mov	r3, r2
 801c632:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801c634:	79fb      	ldrb	r3, [r7, #7]
 801c636:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801c638:	79bb      	ldrb	r3, [r7, #6]
 801c63a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801c63c:	f107 030c 	add.w	r3, r7, #12
 801c640:	2202      	movs	r2, #2
 801c642:	4619      	mov	r1, r3
 801c644:	208f      	movs	r0, #143	; 0x8f
 801c646:	f000 f947 	bl	801c8d8 <SUBGRF_WriteCommand>
}
 801c64a:	bf00      	nop
 801c64c:	3710      	adds	r7, #16
 801c64e:	46bd      	mov	sp, r7
 801c650:	bd80      	pop	{r7, pc}

0801c652 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801c652:	b580      	push	{r7, lr}
 801c654:	b082      	sub	sp, #8
 801c656:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801c658:	2300      	movs	r3, #0
 801c65a:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801c65c:	1d3b      	adds	r3, r7, #4
 801c65e:	2201      	movs	r2, #1
 801c660:	4619      	mov	r1, r3
 801c662:	2015      	movs	r0, #21
 801c664:	f000 f95a 	bl	801c91c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801c668:	793b      	ldrb	r3, [r7, #4]
 801c66a:	425b      	negs	r3, r3
 801c66c:	105b      	asrs	r3, r3, #1
 801c66e:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801c670:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801c674:	4618      	mov	r0, r3
 801c676:	3708      	adds	r7, #8
 801c678:	46bd      	mov	sp, r7
 801c67a:	bd80      	pop	{r7, pc}

0801c67c <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801c67c:	b580      	push	{r7, lr}
 801c67e:	b084      	sub	sp, #16
 801c680:	af00      	add	r7, sp, #0
 801c682:	6078      	str	r0, [r7, #4]
 801c684:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801c686:	f107 030c 	add.w	r3, r7, #12
 801c68a:	2202      	movs	r2, #2
 801c68c:	4619      	mov	r1, r3
 801c68e:	2013      	movs	r0, #19
 801c690:	f000 f944 	bl	801c91c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801c694:	f7ff fd7e 	bl	801c194 <SUBGRF_GetPacketType>
 801c698:	4603      	mov	r3, r0
 801c69a:	2b01      	cmp	r3, #1
 801c69c:	d10d      	bne.n	801c6ba <SUBGRF_GetRxBufferStatus+0x3e>
 801c69e:	4b0c      	ldr	r3, [pc, #48]	; (801c6d0 <SUBGRF_GetRxBufferStatus+0x54>)
 801c6a0:	781b      	ldrb	r3, [r3, #0]
 801c6a2:	b2db      	uxtb	r3, r3
 801c6a4:	2b01      	cmp	r3, #1
 801c6a6:	d108      	bne.n	801c6ba <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801c6a8:	f240 7002 	movw	r0, #1794	; 0x702
 801c6ac:	f000 f878 	bl	801c7a0 <SUBGRF_ReadRegister>
 801c6b0:	4603      	mov	r3, r0
 801c6b2:	461a      	mov	r2, r3
 801c6b4:	687b      	ldr	r3, [r7, #4]
 801c6b6:	701a      	strb	r2, [r3, #0]
 801c6b8:	e002      	b.n	801c6c0 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801c6ba:	7b3a      	ldrb	r2, [r7, #12]
 801c6bc:	687b      	ldr	r3, [r7, #4]
 801c6be:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801c6c0:	7b7a      	ldrb	r2, [r7, #13]
 801c6c2:	683b      	ldr	r3, [r7, #0]
 801c6c4:	701a      	strb	r2, [r3, #0]
}
 801c6c6:	bf00      	nop
 801c6c8:	3710      	adds	r7, #16
 801c6ca:	46bd      	mov	sp, r7
 801c6cc:	bd80      	pop	{r7, pc}
 801c6ce:	bf00      	nop
 801c6d0:	20001d7e 	.word	0x20001d7e

0801c6d4 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801c6d4:	b580      	push	{r7, lr}
 801c6d6:	b084      	sub	sp, #16
 801c6d8:	af00      	add	r7, sp, #0
 801c6da:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801c6dc:	f107 030c 	add.w	r3, r7, #12
 801c6e0:	2203      	movs	r2, #3
 801c6e2:	4619      	mov	r1, r3
 801c6e4:	2014      	movs	r0, #20
 801c6e6:	f000 f919 	bl	801c91c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801c6ea:	f7ff fd53 	bl	801c194 <SUBGRF_GetPacketType>
 801c6ee:	4603      	mov	r3, r0
 801c6f0:	461a      	mov	r2, r3
 801c6f2:	687b      	ldr	r3, [r7, #4]
 801c6f4:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801c6f6:	687b      	ldr	r3, [r7, #4]
 801c6f8:	781b      	ldrb	r3, [r3, #0]
 801c6fa:	2b00      	cmp	r3, #0
 801c6fc:	d002      	beq.n	801c704 <SUBGRF_GetPacketStatus+0x30>
 801c6fe:	2b01      	cmp	r3, #1
 801c700:	d013      	beq.n	801c72a <SUBGRF_GetPacketStatus+0x56>
 801c702:	e02a      	b.n	801c75a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801c704:	7b3a      	ldrb	r2, [r7, #12]
 801c706:	687b      	ldr	r3, [r7, #4]
 801c708:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801c70a:	7b7b      	ldrb	r3, [r7, #13]
 801c70c:	425b      	negs	r3, r3
 801c70e:	105b      	asrs	r3, r3, #1
 801c710:	b25a      	sxtb	r2, r3
 801c712:	687b      	ldr	r3, [r7, #4]
 801c714:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801c716:	7bbb      	ldrb	r3, [r7, #14]
 801c718:	425b      	negs	r3, r3
 801c71a:	105b      	asrs	r3, r3, #1
 801c71c:	b25a      	sxtb	r2, r3
 801c71e:	687b      	ldr	r3, [r7, #4]
 801c720:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801c722:	687b      	ldr	r3, [r7, #4]
 801c724:	2200      	movs	r2, #0
 801c726:	609a      	str	r2, [r3, #8]
            break;
 801c728:	e020      	b.n	801c76c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801c72a:	7b3b      	ldrb	r3, [r7, #12]
 801c72c:	425b      	negs	r3, r3
 801c72e:	105b      	asrs	r3, r3, #1
 801c730:	b25a      	sxtb	r2, r3
 801c732:	687b      	ldr	r3, [r7, #4]
 801c734:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801c736:	7b7b      	ldrb	r3, [r7, #13]
 801c738:	b25b      	sxtb	r3, r3
 801c73a:	3302      	adds	r3, #2
 801c73c:	109b      	asrs	r3, r3, #2
 801c73e:	b25a      	sxtb	r2, r3
 801c740:	687b      	ldr	r3, [r7, #4]
 801c742:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801c744:	7bbb      	ldrb	r3, [r7, #14]
 801c746:	425b      	negs	r3, r3
 801c748:	105b      	asrs	r3, r3, #1
 801c74a:	b25a      	sxtb	r2, r3
 801c74c:	687b      	ldr	r3, [r7, #4]
 801c74e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801c750:	4b08      	ldr	r3, [pc, #32]	; (801c774 <SUBGRF_GetPacketStatus+0xa0>)
 801c752:	681a      	ldr	r2, [r3, #0]
 801c754:	687b      	ldr	r3, [r7, #4]
 801c756:	611a      	str	r2, [r3, #16]
            break;
 801c758:	e008      	b.n	801c76c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801c75a:	2214      	movs	r2, #20
 801c75c:	2100      	movs	r1, #0
 801c75e:	6878      	ldr	r0, [r7, #4]
 801c760:	f000 fc03 	bl	801cf6a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801c764:	687b      	ldr	r3, [r7, #4]
 801c766:	220f      	movs	r2, #15
 801c768:	701a      	strb	r2, [r3, #0]
            break;
 801c76a:	bf00      	nop
    }
}
 801c76c:	bf00      	nop
 801c76e:	3710      	adds	r7, #16
 801c770:	46bd      	mov	sp, r7
 801c772:	bd80      	pop	{r7, pc}
 801c774:	20001d80 	.word	0x20001d80

0801c778 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801c778:	b580      	push	{r7, lr}
 801c77a:	b082      	sub	sp, #8
 801c77c:	af00      	add	r7, sp, #0
 801c77e:	4603      	mov	r3, r0
 801c780:	460a      	mov	r2, r1
 801c782:	80fb      	strh	r3, [r7, #6]
 801c784:	4613      	mov	r3, r2
 801c786:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801c788:	1d7a      	adds	r2, r7, #5
 801c78a:	88f9      	ldrh	r1, [r7, #6]
 801c78c:	2301      	movs	r3, #1
 801c78e:	4803      	ldr	r0, [pc, #12]	; (801c79c <SUBGRF_WriteRegister+0x24>)
 801c790:	f7ec fe46 	bl	8009420 <HAL_SUBGHZ_WriteRegisters>
}
 801c794:	bf00      	nop
 801c796:	3708      	adds	r7, #8
 801c798:	46bd      	mov	sp, r7
 801c79a:	bd80      	pop	{r7, pc}
 801c79c:	200003cc 	.word	0x200003cc

0801c7a0 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801c7a0:	b580      	push	{r7, lr}
 801c7a2:	b084      	sub	sp, #16
 801c7a4:	af00      	add	r7, sp, #0
 801c7a6:	4603      	mov	r3, r0
 801c7a8:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801c7aa:	f107 020f 	add.w	r2, r7, #15
 801c7ae:	88f9      	ldrh	r1, [r7, #6]
 801c7b0:	2301      	movs	r3, #1
 801c7b2:	4804      	ldr	r0, [pc, #16]	; (801c7c4 <SUBGRF_ReadRegister+0x24>)
 801c7b4:	f7ec fe93 	bl	80094de <HAL_SUBGHZ_ReadRegisters>
    return data;
 801c7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 801c7ba:	4618      	mov	r0, r3
 801c7bc:	3710      	adds	r7, #16
 801c7be:	46bd      	mov	sp, r7
 801c7c0:	bd80      	pop	{r7, pc}
 801c7c2:	bf00      	nop
 801c7c4:	200003cc 	.word	0x200003cc

0801c7c8 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801c7c8:	b580      	push	{r7, lr}
 801c7ca:	b086      	sub	sp, #24
 801c7cc:	af00      	add	r7, sp, #0
 801c7ce:	4603      	mov	r3, r0
 801c7d0:	6039      	str	r1, [r7, #0]
 801c7d2:	80fb      	strh	r3, [r7, #6]
 801c7d4:	4613      	mov	r3, r2
 801c7d6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c7d8:	f3ef 8310 	mrs	r3, PRIMASK
 801c7dc:	60fb      	str	r3, [r7, #12]
  return(result);
 801c7de:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c7e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c7e2:	b672      	cpsid	i
}
 801c7e4:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801c7e6:	88bb      	ldrh	r3, [r7, #4]
 801c7e8:	88f9      	ldrh	r1, [r7, #6]
 801c7ea:	683a      	ldr	r2, [r7, #0]
 801c7ec:	4806      	ldr	r0, [pc, #24]	; (801c808 <SUBGRF_WriteRegisters+0x40>)
 801c7ee:	f7ec fe17 	bl	8009420 <HAL_SUBGHZ_WriteRegisters>
 801c7f2:	697b      	ldr	r3, [r7, #20]
 801c7f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c7f6:	693b      	ldr	r3, [r7, #16]
 801c7f8:	f383 8810 	msr	PRIMASK, r3
}
 801c7fc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c7fe:	bf00      	nop
 801c800:	3718      	adds	r7, #24
 801c802:	46bd      	mov	sp, r7
 801c804:	bd80      	pop	{r7, pc}
 801c806:	bf00      	nop
 801c808:	200003cc 	.word	0x200003cc

0801c80c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801c80c:	b580      	push	{r7, lr}
 801c80e:	b086      	sub	sp, #24
 801c810:	af00      	add	r7, sp, #0
 801c812:	4603      	mov	r3, r0
 801c814:	6039      	str	r1, [r7, #0]
 801c816:	80fb      	strh	r3, [r7, #6]
 801c818:	4613      	mov	r3, r2
 801c81a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c81c:	f3ef 8310 	mrs	r3, PRIMASK
 801c820:	60fb      	str	r3, [r7, #12]
  return(result);
 801c822:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c824:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c826:	b672      	cpsid	i
}
 801c828:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801c82a:	88bb      	ldrh	r3, [r7, #4]
 801c82c:	88f9      	ldrh	r1, [r7, #6]
 801c82e:	683a      	ldr	r2, [r7, #0]
 801c830:	4806      	ldr	r0, [pc, #24]	; (801c84c <SUBGRF_ReadRegisters+0x40>)
 801c832:	f7ec fe54 	bl	80094de <HAL_SUBGHZ_ReadRegisters>
 801c836:	697b      	ldr	r3, [r7, #20]
 801c838:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c83a:	693b      	ldr	r3, [r7, #16]
 801c83c:	f383 8810 	msr	PRIMASK, r3
}
 801c840:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c842:	bf00      	nop
 801c844:	3718      	adds	r7, #24
 801c846:	46bd      	mov	sp, r7
 801c848:	bd80      	pop	{r7, pc}
 801c84a:	bf00      	nop
 801c84c:	200003cc 	.word	0x200003cc

0801c850 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801c850:	b580      	push	{r7, lr}
 801c852:	b086      	sub	sp, #24
 801c854:	af00      	add	r7, sp, #0
 801c856:	4603      	mov	r3, r0
 801c858:	6039      	str	r1, [r7, #0]
 801c85a:	71fb      	strb	r3, [r7, #7]
 801c85c:	4613      	mov	r3, r2
 801c85e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c860:	f3ef 8310 	mrs	r3, PRIMASK
 801c864:	60fb      	str	r3, [r7, #12]
  return(result);
 801c866:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c868:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c86a:	b672      	cpsid	i
}
 801c86c:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801c86e:	79bb      	ldrb	r3, [r7, #6]
 801c870:	b29b      	uxth	r3, r3
 801c872:	79f9      	ldrb	r1, [r7, #7]
 801c874:	683a      	ldr	r2, [r7, #0]
 801c876:	4806      	ldr	r0, [pc, #24]	; (801c890 <SUBGRF_WriteBuffer+0x40>)
 801c878:	f7ec ff45 	bl	8009706 <HAL_SUBGHZ_WriteBuffer>
 801c87c:	697b      	ldr	r3, [r7, #20]
 801c87e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c880:	693b      	ldr	r3, [r7, #16]
 801c882:	f383 8810 	msr	PRIMASK, r3
}
 801c886:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c888:	bf00      	nop
 801c88a:	3718      	adds	r7, #24
 801c88c:	46bd      	mov	sp, r7
 801c88e:	bd80      	pop	{r7, pc}
 801c890:	200003cc 	.word	0x200003cc

0801c894 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801c894:	b580      	push	{r7, lr}
 801c896:	b086      	sub	sp, #24
 801c898:	af00      	add	r7, sp, #0
 801c89a:	4603      	mov	r3, r0
 801c89c:	6039      	str	r1, [r7, #0]
 801c89e:	71fb      	strb	r3, [r7, #7]
 801c8a0:	4613      	mov	r3, r2
 801c8a2:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c8a4:	f3ef 8310 	mrs	r3, PRIMASK
 801c8a8:	60fb      	str	r3, [r7, #12]
  return(result);
 801c8aa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c8ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c8ae:	b672      	cpsid	i
}
 801c8b0:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801c8b2:	79bb      	ldrb	r3, [r7, #6]
 801c8b4:	b29b      	uxth	r3, r3
 801c8b6:	79f9      	ldrb	r1, [r7, #7]
 801c8b8:	683a      	ldr	r2, [r7, #0]
 801c8ba:	4806      	ldr	r0, [pc, #24]	; (801c8d4 <SUBGRF_ReadBuffer+0x40>)
 801c8bc:	f7ec ff76 	bl	80097ac <HAL_SUBGHZ_ReadBuffer>
 801c8c0:	697b      	ldr	r3, [r7, #20]
 801c8c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c8c4:	693b      	ldr	r3, [r7, #16]
 801c8c6:	f383 8810 	msr	PRIMASK, r3
}
 801c8ca:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c8cc:	bf00      	nop
 801c8ce:	3718      	adds	r7, #24
 801c8d0:	46bd      	mov	sp, r7
 801c8d2:	bd80      	pop	{r7, pc}
 801c8d4:	200003cc 	.word	0x200003cc

0801c8d8 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801c8d8:	b580      	push	{r7, lr}
 801c8da:	b086      	sub	sp, #24
 801c8dc:	af00      	add	r7, sp, #0
 801c8de:	4603      	mov	r3, r0
 801c8e0:	6039      	str	r1, [r7, #0]
 801c8e2:	71fb      	strb	r3, [r7, #7]
 801c8e4:	4613      	mov	r3, r2
 801c8e6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c8e8:	f3ef 8310 	mrs	r3, PRIMASK
 801c8ec:	60fb      	str	r3, [r7, #12]
  return(result);
 801c8ee:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c8f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c8f2:	b672      	cpsid	i
}
 801c8f4:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801c8f6:	88bb      	ldrh	r3, [r7, #4]
 801c8f8:	79f9      	ldrb	r1, [r7, #7]
 801c8fa:	683a      	ldr	r2, [r7, #0]
 801c8fc:	4806      	ldr	r0, [pc, #24]	; (801c918 <SUBGRF_WriteCommand+0x40>)
 801c8fe:	f7ec fe4f 	bl	80095a0 <HAL_SUBGHZ_ExecSetCmd>
 801c902:	697b      	ldr	r3, [r7, #20]
 801c904:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c906:	693b      	ldr	r3, [r7, #16]
 801c908:	f383 8810 	msr	PRIMASK, r3
}
 801c90c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c90e:	bf00      	nop
 801c910:	3718      	adds	r7, #24
 801c912:	46bd      	mov	sp, r7
 801c914:	bd80      	pop	{r7, pc}
 801c916:	bf00      	nop
 801c918:	200003cc 	.word	0x200003cc

0801c91c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801c91c:	b580      	push	{r7, lr}
 801c91e:	b086      	sub	sp, #24
 801c920:	af00      	add	r7, sp, #0
 801c922:	4603      	mov	r3, r0
 801c924:	6039      	str	r1, [r7, #0]
 801c926:	71fb      	strb	r3, [r7, #7]
 801c928:	4613      	mov	r3, r2
 801c92a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c92c:	f3ef 8310 	mrs	r3, PRIMASK
 801c930:	60fb      	str	r3, [r7, #12]
  return(result);
 801c932:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c934:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c936:	b672      	cpsid	i
}
 801c938:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801c93a:	88bb      	ldrh	r3, [r7, #4]
 801c93c:	79f9      	ldrb	r1, [r7, #7]
 801c93e:	683a      	ldr	r2, [r7, #0]
 801c940:	4806      	ldr	r0, [pc, #24]	; (801c95c <SUBGRF_ReadCommand+0x40>)
 801c942:	f7ec fe8c 	bl	800965e <HAL_SUBGHZ_ExecGetCmd>
 801c946:	697b      	ldr	r3, [r7, #20]
 801c948:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c94a:	693b      	ldr	r3, [r7, #16]
 801c94c:	f383 8810 	msr	PRIMASK, r3
}
 801c950:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c952:	bf00      	nop
 801c954:	3718      	adds	r7, #24
 801c956:	46bd      	mov	sp, r7
 801c958:	bd80      	pop	{r7, pc}
 801c95a:	bf00      	nop
 801c95c:	200003cc 	.word	0x200003cc

0801c960 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801c960:	b580      	push	{r7, lr}
 801c962:	b084      	sub	sp, #16
 801c964:	af00      	add	r7, sp, #0
 801c966:	4603      	mov	r3, r0
 801c968:	460a      	mov	r2, r1
 801c96a:	71fb      	strb	r3, [r7, #7]
 801c96c:	4613      	mov	r3, r2
 801c96e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801c970:	2301      	movs	r3, #1
 801c972:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801c974:	79bb      	ldrb	r3, [r7, #6]
 801c976:	2b01      	cmp	r3, #1
 801c978:	d10d      	bne.n	801c996 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801c97a:	79fb      	ldrb	r3, [r7, #7]
 801c97c:	2b01      	cmp	r3, #1
 801c97e:	d104      	bne.n	801c98a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801c980:	2302      	movs	r3, #2
 801c982:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801c984:	2004      	movs	r0, #4
 801c986:	f000 f8ef 	bl	801cb68 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801c98a:	79fb      	ldrb	r3, [r7, #7]
 801c98c:	2b02      	cmp	r3, #2
 801c98e:	d107      	bne.n	801c9a0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801c990:	2303      	movs	r3, #3
 801c992:	73fb      	strb	r3, [r7, #15]
 801c994:	e004      	b.n	801c9a0 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801c996:	79bb      	ldrb	r3, [r7, #6]
 801c998:	2b00      	cmp	r3, #0
 801c99a:	d101      	bne.n	801c9a0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801c99c:	2301      	movs	r3, #1
 801c99e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801c9a0:	7bfb      	ldrb	r3, [r7, #15]
 801c9a2:	4618      	mov	r0, r3
 801c9a4:	f7f0 f995 	bl	800ccd2 <RBI_ConfigRFSwitch>
}
 801c9a8:	bf00      	nop
 801c9aa:	3710      	adds	r7, #16
 801c9ac:	46bd      	mov	sp, r7
 801c9ae:	bd80      	pop	{r7, pc}

0801c9b0 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801c9b0:	b580      	push	{r7, lr}
 801c9b2:	b084      	sub	sp, #16
 801c9b4:	af00      	add	r7, sp, #0
 801c9b6:	4603      	mov	r3, r0
 801c9b8:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801c9ba:	2301      	movs	r3, #1
 801c9bc:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801c9be:	f7f0 f996 	bl	800ccee <RBI_GetTxConfig>
 801c9c2:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801c9c4:	68bb      	ldr	r3, [r7, #8]
 801c9c6:	2b02      	cmp	r3, #2
 801c9c8:	d016      	beq.n	801c9f8 <SUBGRF_SetRfTxPower+0x48>
 801c9ca:	68bb      	ldr	r3, [r7, #8]
 801c9cc:	2b02      	cmp	r3, #2
 801c9ce:	dc16      	bgt.n	801c9fe <SUBGRF_SetRfTxPower+0x4e>
 801c9d0:	68bb      	ldr	r3, [r7, #8]
 801c9d2:	2b00      	cmp	r3, #0
 801c9d4:	d003      	beq.n	801c9de <SUBGRF_SetRfTxPower+0x2e>
 801c9d6:	68bb      	ldr	r3, [r7, #8]
 801c9d8:	2b01      	cmp	r3, #1
 801c9da:	d00a      	beq.n	801c9f2 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801c9dc:	e00f      	b.n	801c9fe <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801c9de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c9e2:	2b0f      	cmp	r3, #15
 801c9e4:	dd02      	ble.n	801c9ec <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801c9e6:	2302      	movs	r3, #2
 801c9e8:	73fb      	strb	r3, [r7, #15]
            break;
 801c9ea:	e009      	b.n	801ca00 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801c9ec:	2301      	movs	r3, #1
 801c9ee:	73fb      	strb	r3, [r7, #15]
            break;
 801c9f0:	e006      	b.n	801ca00 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801c9f2:	2301      	movs	r3, #1
 801c9f4:	73fb      	strb	r3, [r7, #15]
            break;
 801c9f6:	e003      	b.n	801ca00 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801c9f8:	2302      	movs	r3, #2
 801c9fa:	73fb      	strb	r3, [r7, #15]
            break;
 801c9fc:	e000      	b.n	801ca00 <SUBGRF_SetRfTxPower+0x50>
            break;
 801c9fe:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801ca00:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801ca04:	7bfb      	ldrb	r3, [r7, #15]
 801ca06:	2202      	movs	r2, #2
 801ca08:	4618      	mov	r0, r3
 801ca0a:	f7ff fbcd 	bl	801c1a8 <SUBGRF_SetTxParams>

    return paSelect;
 801ca0e:	7bfb      	ldrb	r3, [r7, #15]
}
 801ca10:	4618      	mov	r0, r3
 801ca12:	3710      	adds	r7, #16
 801ca14:	46bd      	mov	sp, r7
 801ca16:	bd80      	pop	{r7, pc}

0801ca18 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801ca18:	b480      	push	{r7}
 801ca1a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801ca1c:	2301      	movs	r3, #1
}
 801ca1e:	4618      	mov	r0, r3
 801ca20:	46bd      	mov	sp, r7
 801ca22:	bc80      	pop	{r7}
 801ca24:	4770      	bx	lr
	...

0801ca28 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ca28:	b580      	push	{r7, lr}
 801ca2a:	b082      	sub	sp, #8
 801ca2c:	af00      	add	r7, sp, #0
 801ca2e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801ca30:	4b03      	ldr	r3, [pc, #12]	; (801ca40 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801ca32:	681b      	ldr	r3, [r3, #0]
 801ca34:	2001      	movs	r0, #1
 801ca36:	4798      	blx	r3
}
 801ca38:	bf00      	nop
 801ca3a:	3708      	adds	r7, #8
 801ca3c:	46bd      	mov	sp, r7
 801ca3e:	bd80      	pop	{r7, pc}
 801ca40:	20001d88 	.word	0x20001d88

0801ca44 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ca44:	b580      	push	{r7, lr}
 801ca46:	b082      	sub	sp, #8
 801ca48:	af00      	add	r7, sp, #0
 801ca4a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801ca4c:	4b03      	ldr	r3, [pc, #12]	; (801ca5c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801ca4e:	681b      	ldr	r3, [r3, #0]
 801ca50:	2002      	movs	r0, #2
 801ca52:	4798      	blx	r3
}
 801ca54:	bf00      	nop
 801ca56:	3708      	adds	r7, #8
 801ca58:	46bd      	mov	sp, r7
 801ca5a:	bd80      	pop	{r7, pc}
 801ca5c:	20001d88 	.word	0x20001d88

0801ca60 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801ca60:	b580      	push	{r7, lr}
 801ca62:	b082      	sub	sp, #8
 801ca64:	af00      	add	r7, sp, #0
 801ca66:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801ca68:	4b03      	ldr	r3, [pc, #12]	; (801ca78 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801ca6a:	681b      	ldr	r3, [r3, #0]
 801ca6c:	2040      	movs	r0, #64	; 0x40
 801ca6e:	4798      	blx	r3
}
 801ca70:	bf00      	nop
 801ca72:	3708      	adds	r7, #8
 801ca74:	46bd      	mov	sp, r7
 801ca76:	bd80      	pop	{r7, pc}
 801ca78:	20001d88 	.word	0x20001d88

0801ca7c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801ca7c:	b580      	push	{r7, lr}
 801ca7e:	b082      	sub	sp, #8
 801ca80:	af00      	add	r7, sp, #0
 801ca82:	6078      	str	r0, [r7, #4]
 801ca84:	460b      	mov	r3, r1
 801ca86:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801ca88:	78fb      	ldrb	r3, [r7, #3]
 801ca8a:	2b00      	cmp	r3, #0
 801ca8c:	d002      	beq.n	801ca94 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801ca8e:	2b01      	cmp	r3, #1
 801ca90:	d005      	beq.n	801ca9e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801ca92:	e00a      	b.n	801caaa <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801ca94:	4b07      	ldr	r3, [pc, #28]	; (801cab4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801ca96:	681b      	ldr	r3, [r3, #0]
 801ca98:	2080      	movs	r0, #128	; 0x80
 801ca9a:	4798      	blx	r3
            break;
 801ca9c:	e005      	b.n	801caaa <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801ca9e:	4b05      	ldr	r3, [pc, #20]	; (801cab4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801caa0:	681b      	ldr	r3, [r3, #0]
 801caa2:	f44f 7080 	mov.w	r0, #256	; 0x100
 801caa6:	4798      	blx	r3
            break;
 801caa8:	bf00      	nop
    }
}
 801caaa:	bf00      	nop
 801caac:	3708      	adds	r7, #8
 801caae:	46bd      	mov	sp, r7
 801cab0:	bd80      	pop	{r7, pc}
 801cab2:	bf00      	nop
 801cab4:	20001d88 	.word	0x20001d88

0801cab8 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cab8:	b580      	push	{r7, lr}
 801caba:	b082      	sub	sp, #8
 801cabc:	af00      	add	r7, sp, #0
 801cabe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801cac0:	4b04      	ldr	r3, [pc, #16]	; (801cad4 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801cac2:	681b      	ldr	r3, [r3, #0]
 801cac4:	f44f 7000 	mov.w	r0, #512	; 0x200
 801cac8:	4798      	blx	r3
}
 801caca:	bf00      	nop
 801cacc:	3708      	adds	r7, #8
 801cace:	46bd      	mov	sp, r7
 801cad0:	bd80      	pop	{r7, pc}
 801cad2:	bf00      	nop
 801cad4:	20001d88 	.word	0x20001d88

0801cad8 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cad8:	b580      	push	{r7, lr}
 801cada:	b082      	sub	sp, #8
 801cadc:	af00      	add	r7, sp, #0
 801cade:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801cae0:	4b03      	ldr	r3, [pc, #12]	; (801caf0 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801cae2:	681b      	ldr	r3, [r3, #0]
 801cae4:	2020      	movs	r0, #32
 801cae6:	4798      	blx	r3
}
 801cae8:	bf00      	nop
 801caea:	3708      	adds	r7, #8
 801caec:	46bd      	mov	sp, r7
 801caee:	bd80      	pop	{r7, pc}
 801caf0:	20001d88 	.word	0x20001d88

0801caf4 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801caf4:	b580      	push	{r7, lr}
 801caf6:	b082      	sub	sp, #8
 801caf8:	af00      	add	r7, sp, #0
 801cafa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801cafc:	4b03      	ldr	r3, [pc, #12]	; (801cb0c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801cafe:	681b      	ldr	r3, [r3, #0]
 801cb00:	2004      	movs	r0, #4
 801cb02:	4798      	blx	r3
}
 801cb04:	bf00      	nop
 801cb06:	3708      	adds	r7, #8
 801cb08:	46bd      	mov	sp, r7
 801cb0a:	bd80      	pop	{r7, pc}
 801cb0c:	20001d88 	.word	0x20001d88

0801cb10 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cb10:	b580      	push	{r7, lr}
 801cb12:	b082      	sub	sp, #8
 801cb14:	af00      	add	r7, sp, #0
 801cb16:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801cb18:	4b03      	ldr	r3, [pc, #12]	; (801cb28 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801cb1a:	681b      	ldr	r3, [r3, #0]
 801cb1c:	2008      	movs	r0, #8
 801cb1e:	4798      	blx	r3
}
 801cb20:	bf00      	nop
 801cb22:	3708      	adds	r7, #8
 801cb24:	46bd      	mov	sp, r7
 801cb26:	bd80      	pop	{r7, pc}
 801cb28:	20001d88 	.word	0x20001d88

0801cb2c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cb2c:	b580      	push	{r7, lr}
 801cb2e:	b082      	sub	sp, #8
 801cb30:	af00      	add	r7, sp, #0
 801cb32:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801cb34:	4b03      	ldr	r3, [pc, #12]	; (801cb44 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801cb36:	681b      	ldr	r3, [r3, #0]
 801cb38:	2010      	movs	r0, #16
 801cb3a:	4798      	blx	r3
}
 801cb3c:	bf00      	nop
 801cb3e:	3708      	adds	r7, #8
 801cb40:	46bd      	mov	sp, r7
 801cb42:	bd80      	pop	{r7, pc}
 801cb44:	20001d88 	.word	0x20001d88

0801cb48 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cb48:	b580      	push	{r7, lr}
 801cb4a:	b082      	sub	sp, #8
 801cb4c:	af00      	add	r7, sp, #0
 801cb4e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801cb50:	4b04      	ldr	r3, [pc, #16]	; (801cb64 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801cb52:	681b      	ldr	r3, [r3, #0]
 801cb54:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801cb58:	4798      	blx	r3
}
 801cb5a:	bf00      	nop
 801cb5c:	3708      	adds	r7, #8
 801cb5e:	46bd      	mov	sp, r7
 801cb60:	bd80      	pop	{r7, pc}
 801cb62:	bf00      	nop
 801cb64:	20001d88 	.word	0x20001d88

0801cb68 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801cb68:	b580      	push	{r7, lr}
 801cb6a:	b084      	sub	sp, #16
 801cb6c:	af00      	add	r7, sp, #0
 801cb6e:	4603      	mov	r3, r0
 801cb70:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801cb72:	f7f0 f8ca 	bl	800cd0a <RBI_IsDCDC>
 801cb76:	4603      	mov	r3, r0
 801cb78:	2b01      	cmp	r3, #1
 801cb7a:	d112      	bne.n	801cba2 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801cb7c:	f640 1023 	movw	r0, #2339	; 0x923
 801cb80:	f7ff fe0e 	bl	801c7a0 <SUBGRF_ReadRegister>
 801cb84:	4603      	mov	r3, r0
 801cb86:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801cb88:	7bfb      	ldrb	r3, [r7, #15]
 801cb8a:	f023 0306 	bic.w	r3, r3, #6
 801cb8e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801cb90:	7bfa      	ldrb	r2, [r7, #15]
 801cb92:	79fb      	ldrb	r3, [r7, #7]
 801cb94:	4313      	orrs	r3, r2
 801cb96:	b2db      	uxtb	r3, r3
 801cb98:	4619      	mov	r1, r3
 801cb9a:	f640 1023 	movw	r0, #2339	; 0x923
 801cb9e:	f7ff fdeb 	bl	801c778 <SUBGRF_WriteRegister>
  }
}
 801cba2:	bf00      	nop
 801cba4:	3710      	adds	r7, #16
 801cba6:	46bd      	mov	sp, r7
 801cba8:	bd80      	pop	{r7, pc}
	...

0801cbac <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801cbac:	b480      	push	{r7}
 801cbae:	b085      	sub	sp, #20
 801cbb0:	af00      	add	r7, sp, #0
 801cbb2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801cbb4:	687b      	ldr	r3, [r7, #4]
 801cbb6:	2b00      	cmp	r3, #0
 801cbb8:	d101      	bne.n	801cbbe <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801cbba:	231f      	movs	r3, #31
 801cbbc:	e016      	b.n	801cbec <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801cbbe:	2300      	movs	r3, #0
 801cbc0:	73fb      	strb	r3, [r7, #15]
 801cbc2:	e00f      	b.n	801cbe4 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801cbc4:	7bfb      	ldrb	r3, [r7, #15]
 801cbc6:	4a0c      	ldr	r2, [pc, #48]	; (801cbf8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801cbc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801cbcc:	687a      	ldr	r2, [r7, #4]
 801cbce:	429a      	cmp	r2, r3
 801cbd0:	d205      	bcs.n	801cbde <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801cbd2:	7bfb      	ldrb	r3, [r7, #15]
 801cbd4:	4a08      	ldr	r2, [pc, #32]	; (801cbf8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801cbd6:	00db      	lsls	r3, r3, #3
 801cbd8:	4413      	add	r3, r2
 801cbda:	791b      	ldrb	r3, [r3, #4]
 801cbdc:	e006      	b.n	801cbec <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801cbde:	7bfb      	ldrb	r3, [r7, #15]
 801cbe0:	3301      	adds	r3, #1
 801cbe2:	73fb      	strb	r3, [r7, #15]
 801cbe4:	7bfb      	ldrb	r3, [r7, #15]
 801cbe6:	2b15      	cmp	r3, #21
 801cbe8:	d9ec      	bls.n	801cbc4 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801cbea:	e7fe      	b.n	801cbea <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801cbec:	4618      	mov	r0, r3
 801cbee:	3714      	adds	r7, #20
 801cbf0:	46bd      	mov	sp, r7
 801cbf2:	bc80      	pop	{r7}
 801cbf4:	4770      	bx	lr
 801cbf6:	bf00      	nop
 801cbf8:	0801f584 	.word	0x0801f584

0801cbfc <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801cbfc:	b580      	push	{r7, lr}
 801cbfe:	b08a      	sub	sp, #40	; 0x28
 801cc00:	af00      	add	r7, sp, #0
 801cc02:	6078      	str	r0, [r7, #4]
 801cc04:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801cc06:	4b35      	ldr	r3, [pc, #212]	; (801ccdc <SUBGRF_GetCFO+0xe0>)
 801cc08:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801cc0a:	f640 0007 	movw	r0, #2055	; 0x807
 801cc0e:	f7ff fdc7 	bl	801c7a0 <SUBGRF_ReadRegister>
 801cc12:	4603      	mov	r3, r0
 801cc14:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801cc16:	7ffb      	ldrb	r3, [r7, #31]
 801cc18:	08db      	lsrs	r3, r3, #3
 801cc1a:	b2db      	uxtb	r3, r3
 801cc1c:	f003 0303 	and.w	r3, r3, #3
 801cc20:	3328      	adds	r3, #40	; 0x28
 801cc22:	443b      	add	r3, r7
 801cc24:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801cc28:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801cc2a:	7ffb      	ldrb	r3, [r7, #31]
 801cc2c:	f003 0307 	and.w	r3, r3, #7
 801cc30:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801cc32:	7fba      	ldrb	r2, [r7, #30]
 801cc34:	7f7b      	ldrb	r3, [r7, #29]
 801cc36:	3301      	adds	r3, #1
 801cc38:	fa02 f303 	lsl.w	r3, r2, r3
 801cc3c:	461a      	mov	r2, r3
 801cc3e:	4b28      	ldr	r3, [pc, #160]	; (801cce0 <SUBGRF_GetCFO+0xe4>)
 801cc40:	fbb3 f3f2 	udiv	r3, r3, r2
 801cc44:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801cc46:	69ba      	ldr	r2, [r7, #24]
 801cc48:	687b      	ldr	r3, [r7, #4]
 801cc4a:	fbb2 f3f3 	udiv	r3, r2, r3
 801cc4e:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801cc50:	2301      	movs	r3, #1
 801cc52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801cc56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cc5a:	697a      	ldr	r2, [r7, #20]
 801cc5c:	fb02 f303 	mul.w	r3, r2, r3
 801cc60:	2b07      	cmp	r3, #7
 801cc62:	d802      	bhi.n	801cc6a <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801cc64:	2302      	movs	r3, #2
 801cc66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801cc6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cc6e:	697a      	ldr	r2, [r7, #20]
 801cc70:	fb02 f303 	mul.w	r3, r2, r3
 801cc74:	2b03      	cmp	r3, #3
 801cc76:	d802      	bhi.n	801cc7e <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801cc78:	2304      	movs	r3, #4
 801cc7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801cc7e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801cc82:	69bb      	ldr	r3, [r7, #24]
 801cc84:	fb02 f303 	mul.w	r3, r2, r3
 801cc88:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801cc8a:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801cc8e:	f7ff fd87 	bl	801c7a0 <SUBGRF_ReadRegister>
 801cc92:	4603      	mov	r3, r0
 801cc94:	021b      	lsls	r3, r3, #8
 801cc96:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801cc9a:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801cc9c:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801cca0:	f7ff fd7e 	bl	801c7a0 <SUBGRF_ReadRegister>
 801cca4:	4603      	mov	r3, r0
 801cca6:	461a      	mov	r2, r3
 801cca8:	6a3b      	ldr	r3, [r7, #32]
 801ccaa:	4313      	orrs	r3, r2
 801ccac:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801ccae:	6a3b      	ldr	r3, [r7, #32]
 801ccb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ccb4:	2b00      	cmp	r3, #0
 801ccb6:	d005      	beq.n	801ccc4 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801ccb8:	6a3b      	ldr	r3, [r7, #32]
 801ccba:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801ccbe:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801ccc2:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801ccc4:	693b      	ldr	r3, [r7, #16]
 801ccc6:	095b      	lsrs	r3, r3, #5
 801ccc8:	6a3a      	ldr	r2, [r7, #32]
 801ccca:	fb02 f303 	mul.w	r3, r2, r3
 801ccce:	11da      	asrs	r2, r3, #7
 801ccd0:	683b      	ldr	r3, [r7, #0]
 801ccd2:	601a      	str	r2, [r3, #0]
}
 801ccd4:	bf00      	nop
 801ccd6:	3728      	adds	r7, #40	; 0x28
 801ccd8:	46bd      	mov	sp, r7
 801ccda:	bd80      	pop	{r7, pc}
 801ccdc:	0c0a0804 	.word	0x0c0a0804
 801cce0:	01e84800 	.word	0x01e84800

0801cce4 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801cce4:	b480      	push	{r7}
 801cce6:	b087      	sub	sp, #28
 801cce8:	af00      	add	r7, sp, #0
 801ccea:	4603      	mov	r3, r0
 801ccec:	60b9      	str	r1, [r7, #8]
 801ccee:	607a      	str	r2, [r7, #4]
 801ccf0:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801ccf2:	2300      	movs	r3, #0
 801ccf4:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801ccf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ccfa:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801ccfc:	697b      	ldr	r3, [r7, #20]
}
 801ccfe:	4618      	mov	r0, r3
 801cd00:	371c      	adds	r7, #28
 801cd02:	46bd      	mov	sp, r7
 801cd04:	bc80      	pop	{r7}
 801cd06:	4770      	bx	lr

0801cd08 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801cd08:	b480      	push	{r7}
 801cd0a:	b087      	sub	sp, #28
 801cd0c:	af00      	add	r7, sp, #0
 801cd0e:	4603      	mov	r3, r0
 801cd10:	60b9      	str	r1, [r7, #8]
 801cd12:	607a      	str	r2, [r7, #4]
 801cd14:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801cd16:	2300      	movs	r3, #0
 801cd18:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801cd1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cd1e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801cd20:	697b      	ldr	r3, [r7, #20]
}
 801cd22:	4618      	mov	r0, r3
 801cd24:	371c      	adds	r7, #28
 801cd26:	46bd      	mov	sp, r7
 801cd28:	bc80      	pop	{r7}
 801cd2a:	4770      	bx	lr

0801cd2c <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801cd2c:	b480      	push	{r7}
 801cd2e:	b085      	sub	sp, #20
 801cd30:	af00      	add	r7, sp, #0
 801cd32:	60f8      	str	r0, [r7, #12]
 801cd34:	60b9      	str	r1, [r7, #8]
 801cd36:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801cd38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 801cd3c:	4618      	mov	r0, r3
 801cd3e:	3714      	adds	r7, #20
 801cd40:	46bd      	mov	sp, r7
 801cd42:	bc80      	pop	{r7}
 801cd44:	4770      	bx	lr

0801cd46 <RFW_DeInit>:

void RFW_DeInit( void )
{
 801cd46:	b480      	push	{r7}
 801cd48:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801cd4a:	bf00      	nop
 801cd4c:	46bd      	mov	sp, r7
 801cd4e:	bc80      	pop	{r7}
 801cd50:	4770      	bx	lr

0801cd52 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801cd52:	b480      	push	{r7}
 801cd54:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801cd56:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801cd58:	4618      	mov	r0, r3
 801cd5a:	46bd      	mov	sp, r7
 801cd5c:	bc80      	pop	{r7}
 801cd5e:	4770      	bx	lr

0801cd60 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801cd60:	b480      	push	{r7}
 801cd62:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801cd64:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801cd66:	4618      	mov	r0, r3
 801cd68:	46bd      	mov	sp, r7
 801cd6a:	bc80      	pop	{r7}
 801cd6c:	4770      	bx	lr

0801cd6e <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801cd6e:	b480      	push	{r7}
 801cd70:	b083      	sub	sp, #12
 801cd72:	af00      	add	r7, sp, #0
 801cd74:	4603      	mov	r3, r0
 801cd76:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801cd78:	bf00      	nop
 801cd7a:	370c      	adds	r7, #12
 801cd7c:	46bd      	mov	sp, r7
 801cd7e:	bc80      	pop	{r7}
 801cd80:	4770      	bx	lr

0801cd82 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801cd82:	b480      	push	{r7}
 801cd84:	b087      	sub	sp, #28
 801cd86:	af00      	add	r7, sp, #0
 801cd88:	60f8      	str	r0, [r7, #12]
 801cd8a:	460b      	mov	r3, r1
 801cd8c:	607a      	str	r2, [r7, #4]
 801cd8e:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801cd90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cd94:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801cd96:	697b      	ldr	r3, [r7, #20]
}
 801cd98:	4618      	mov	r0, r3
 801cd9a:	371c      	adds	r7, #28
 801cd9c:	46bd      	mov	sp, r7
 801cd9e:	bc80      	pop	{r7}
 801cda0:	4770      	bx	lr

0801cda2 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801cda2:	b480      	push	{r7}
 801cda4:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801cda6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 801cdaa:	4618      	mov	r0, r3
 801cdac:	46bd      	mov	sp, r7
 801cdae:	bc80      	pop	{r7}
 801cdb0:	4770      	bx	lr

0801cdb2 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801cdb2:	b480      	push	{r7}
 801cdb4:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801cdb6:	bf00      	nop
 801cdb8:	46bd      	mov	sp, r7
 801cdba:	bc80      	pop	{r7}
 801cdbc:	4770      	bx	lr

0801cdbe <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801cdbe:	b480      	push	{r7}
 801cdc0:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801cdc2:	bf00      	nop
 801cdc4:	46bd      	mov	sp, r7
 801cdc6:	bc80      	pop	{r7}
 801cdc8:	4770      	bx	lr

0801cdca <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801cdca:	b480      	push	{r7}
 801cdcc:	b083      	sub	sp, #12
 801cdce:	af00      	add	r7, sp, #0
 801cdd0:	4603      	mov	r3, r0
 801cdd2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801cdd4:	bf00      	nop
 801cdd6:	370c      	adds	r7, #12
 801cdd8:	46bd      	mov	sp, r7
 801cdda:	bc80      	pop	{r7}
 801cddc:	4770      	bx	lr
	...

0801cde0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801cde0:	b480      	push	{r7}
 801cde2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801cde4:	4b04      	ldr	r3, [pc, #16]	; (801cdf8 <UTIL_LPM_Init+0x18>)
 801cde6:	2200      	movs	r2, #0
 801cde8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801cdea:	4b04      	ldr	r3, [pc, #16]	; (801cdfc <UTIL_LPM_Init+0x1c>)
 801cdec:	2200      	movs	r2, #0
 801cdee:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801cdf0:	bf00      	nop
 801cdf2:	46bd      	mov	sp, r7
 801cdf4:	bc80      	pop	{r7}
 801cdf6:	4770      	bx	lr
 801cdf8:	20001d8c 	.word	0x20001d8c
 801cdfc:	20001d90 	.word	0x20001d90

0801ce00 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ce00:	b480      	push	{r7}
 801ce02:	b087      	sub	sp, #28
 801ce04:	af00      	add	r7, sp, #0
 801ce06:	6078      	str	r0, [r7, #4]
 801ce08:	460b      	mov	r3, r1
 801ce0a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce0c:	f3ef 8310 	mrs	r3, PRIMASK
 801ce10:	613b      	str	r3, [r7, #16]
  return(result);
 801ce12:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801ce14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce16:	b672      	cpsid	i
}
 801ce18:	bf00      	nop
  
  switch( state )
 801ce1a:	78fb      	ldrb	r3, [r7, #3]
 801ce1c:	2b00      	cmp	r3, #0
 801ce1e:	d008      	beq.n	801ce32 <UTIL_LPM_SetStopMode+0x32>
 801ce20:	2b01      	cmp	r3, #1
 801ce22:	d10e      	bne.n	801ce42 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801ce24:	4b0d      	ldr	r3, [pc, #52]	; (801ce5c <UTIL_LPM_SetStopMode+0x5c>)
 801ce26:	681a      	ldr	r2, [r3, #0]
 801ce28:	687b      	ldr	r3, [r7, #4]
 801ce2a:	4313      	orrs	r3, r2
 801ce2c:	4a0b      	ldr	r2, [pc, #44]	; (801ce5c <UTIL_LPM_SetStopMode+0x5c>)
 801ce2e:	6013      	str	r3, [r2, #0]
      break;
 801ce30:	e008      	b.n	801ce44 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801ce32:	687b      	ldr	r3, [r7, #4]
 801ce34:	43da      	mvns	r2, r3
 801ce36:	4b09      	ldr	r3, [pc, #36]	; (801ce5c <UTIL_LPM_SetStopMode+0x5c>)
 801ce38:	681b      	ldr	r3, [r3, #0]
 801ce3a:	4013      	ands	r3, r2
 801ce3c:	4a07      	ldr	r2, [pc, #28]	; (801ce5c <UTIL_LPM_SetStopMode+0x5c>)
 801ce3e:	6013      	str	r3, [r2, #0]
      break;
 801ce40:	e000      	b.n	801ce44 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801ce42:	bf00      	nop
 801ce44:	697b      	ldr	r3, [r7, #20]
 801ce46:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce48:	68fb      	ldr	r3, [r7, #12]
 801ce4a:	f383 8810 	msr	PRIMASK, r3
}
 801ce4e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801ce50:	bf00      	nop
 801ce52:	371c      	adds	r7, #28
 801ce54:	46bd      	mov	sp, r7
 801ce56:	bc80      	pop	{r7}
 801ce58:	4770      	bx	lr
 801ce5a:	bf00      	nop
 801ce5c:	20001d8c 	.word	0x20001d8c

0801ce60 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ce60:	b480      	push	{r7}
 801ce62:	b087      	sub	sp, #28
 801ce64:	af00      	add	r7, sp, #0
 801ce66:	6078      	str	r0, [r7, #4]
 801ce68:	460b      	mov	r3, r1
 801ce6a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce6c:	f3ef 8310 	mrs	r3, PRIMASK
 801ce70:	613b      	str	r3, [r7, #16]
  return(result);
 801ce72:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801ce74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce76:	b672      	cpsid	i
}
 801ce78:	bf00      	nop
  
  switch(state)
 801ce7a:	78fb      	ldrb	r3, [r7, #3]
 801ce7c:	2b00      	cmp	r3, #0
 801ce7e:	d008      	beq.n	801ce92 <UTIL_LPM_SetOffMode+0x32>
 801ce80:	2b01      	cmp	r3, #1
 801ce82:	d10e      	bne.n	801cea2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801ce84:	4b0d      	ldr	r3, [pc, #52]	; (801cebc <UTIL_LPM_SetOffMode+0x5c>)
 801ce86:	681a      	ldr	r2, [r3, #0]
 801ce88:	687b      	ldr	r3, [r7, #4]
 801ce8a:	4313      	orrs	r3, r2
 801ce8c:	4a0b      	ldr	r2, [pc, #44]	; (801cebc <UTIL_LPM_SetOffMode+0x5c>)
 801ce8e:	6013      	str	r3, [r2, #0]
      break;
 801ce90:	e008      	b.n	801cea4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801ce92:	687b      	ldr	r3, [r7, #4]
 801ce94:	43da      	mvns	r2, r3
 801ce96:	4b09      	ldr	r3, [pc, #36]	; (801cebc <UTIL_LPM_SetOffMode+0x5c>)
 801ce98:	681b      	ldr	r3, [r3, #0]
 801ce9a:	4013      	ands	r3, r2
 801ce9c:	4a07      	ldr	r2, [pc, #28]	; (801cebc <UTIL_LPM_SetOffMode+0x5c>)
 801ce9e:	6013      	str	r3, [r2, #0]
      break;
 801cea0:	e000      	b.n	801cea4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801cea2:	bf00      	nop
 801cea4:	697b      	ldr	r3, [r7, #20]
 801cea6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cea8:	68fb      	ldr	r3, [r7, #12]
 801ceaa:	f383 8810 	msr	PRIMASK, r3
}
 801ceae:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801ceb0:	bf00      	nop
 801ceb2:	371c      	adds	r7, #28
 801ceb4:	46bd      	mov	sp, r7
 801ceb6:	bc80      	pop	{r7}
 801ceb8:	4770      	bx	lr
 801ceba:	bf00      	nop
 801cebc:	20001d90 	.word	0x20001d90

0801cec0 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801cec0:	b580      	push	{r7, lr}
 801cec2:	b084      	sub	sp, #16
 801cec4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cec6:	f3ef 8310 	mrs	r3, PRIMASK
 801ceca:	60bb      	str	r3, [r7, #8]
  return(result);
 801cecc:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801cece:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ced0:	b672      	cpsid	i
}
 801ced2:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801ced4:	4b12      	ldr	r3, [pc, #72]	; (801cf20 <UTIL_LPM_EnterLowPower+0x60>)
 801ced6:	681b      	ldr	r3, [r3, #0]
 801ced8:	2b00      	cmp	r3, #0
 801ceda:	d006      	beq.n	801ceea <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801cedc:	4b11      	ldr	r3, [pc, #68]	; (801cf24 <UTIL_LPM_EnterLowPower+0x64>)
 801cede:	681b      	ldr	r3, [r3, #0]
 801cee0:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801cee2:	4b10      	ldr	r3, [pc, #64]	; (801cf24 <UTIL_LPM_EnterLowPower+0x64>)
 801cee4:	685b      	ldr	r3, [r3, #4]
 801cee6:	4798      	blx	r3
 801cee8:	e010      	b.n	801cf0c <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801ceea:	4b0f      	ldr	r3, [pc, #60]	; (801cf28 <UTIL_LPM_EnterLowPower+0x68>)
 801ceec:	681b      	ldr	r3, [r3, #0]
 801ceee:	2b00      	cmp	r3, #0
 801cef0:	d006      	beq.n	801cf00 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801cef2:	4b0c      	ldr	r3, [pc, #48]	; (801cf24 <UTIL_LPM_EnterLowPower+0x64>)
 801cef4:	689b      	ldr	r3, [r3, #8]
 801cef6:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801cef8:	4b0a      	ldr	r3, [pc, #40]	; (801cf24 <UTIL_LPM_EnterLowPower+0x64>)
 801cefa:	68db      	ldr	r3, [r3, #12]
 801cefc:	4798      	blx	r3
 801cefe:	e005      	b.n	801cf0c <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801cf00:	4b08      	ldr	r3, [pc, #32]	; (801cf24 <UTIL_LPM_EnterLowPower+0x64>)
 801cf02:	691b      	ldr	r3, [r3, #16]
 801cf04:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801cf06:	4b07      	ldr	r3, [pc, #28]	; (801cf24 <UTIL_LPM_EnterLowPower+0x64>)
 801cf08:	695b      	ldr	r3, [r3, #20]
 801cf0a:	4798      	blx	r3
 801cf0c:	68fb      	ldr	r3, [r7, #12]
 801cf0e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf10:	687b      	ldr	r3, [r7, #4]
 801cf12:	f383 8810 	msr	PRIMASK, r3
}
 801cf16:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801cf18:	bf00      	nop
 801cf1a:	3710      	adds	r7, #16
 801cf1c:	46bd      	mov	sp, r7
 801cf1e:	bd80      	pop	{r7, pc}
 801cf20:	20001d8c 	.word	0x20001d8c
 801cf24:	0801efac 	.word	0x0801efac
 801cf28:	20001d90 	.word	0x20001d90

0801cf2c <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801cf2c:	b480      	push	{r7}
 801cf2e:	b087      	sub	sp, #28
 801cf30:	af00      	add	r7, sp, #0
 801cf32:	60f8      	str	r0, [r7, #12]
 801cf34:	60b9      	str	r1, [r7, #8]
 801cf36:	4613      	mov	r3, r2
 801cf38:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801cf3a:	68fb      	ldr	r3, [r7, #12]
 801cf3c:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801cf3e:	68bb      	ldr	r3, [r7, #8]
 801cf40:	613b      	str	r3, [r7, #16]

  while( size-- )
 801cf42:	e007      	b.n	801cf54 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801cf44:	693a      	ldr	r2, [r7, #16]
 801cf46:	1c53      	adds	r3, r2, #1
 801cf48:	613b      	str	r3, [r7, #16]
 801cf4a:	697b      	ldr	r3, [r7, #20]
 801cf4c:	1c59      	adds	r1, r3, #1
 801cf4e:	6179      	str	r1, [r7, #20]
 801cf50:	7812      	ldrb	r2, [r2, #0]
 801cf52:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801cf54:	88fb      	ldrh	r3, [r7, #6]
 801cf56:	1e5a      	subs	r2, r3, #1
 801cf58:	80fa      	strh	r2, [r7, #6]
 801cf5a:	2b00      	cmp	r3, #0
 801cf5c:	d1f2      	bne.n	801cf44 <UTIL_MEM_cpy_8+0x18>
    }
}
 801cf5e:	bf00      	nop
 801cf60:	bf00      	nop
 801cf62:	371c      	adds	r7, #28
 801cf64:	46bd      	mov	sp, r7
 801cf66:	bc80      	pop	{r7}
 801cf68:	4770      	bx	lr

0801cf6a <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801cf6a:	b480      	push	{r7}
 801cf6c:	b085      	sub	sp, #20
 801cf6e:	af00      	add	r7, sp, #0
 801cf70:	6078      	str	r0, [r7, #4]
 801cf72:	460b      	mov	r3, r1
 801cf74:	70fb      	strb	r3, [r7, #3]
 801cf76:	4613      	mov	r3, r2
 801cf78:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801cf7a:	687b      	ldr	r3, [r7, #4]
 801cf7c:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801cf7e:	e004      	b.n	801cf8a <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801cf80:	68fb      	ldr	r3, [r7, #12]
 801cf82:	1c5a      	adds	r2, r3, #1
 801cf84:	60fa      	str	r2, [r7, #12]
 801cf86:	78fa      	ldrb	r2, [r7, #3]
 801cf88:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801cf8a:	883b      	ldrh	r3, [r7, #0]
 801cf8c:	1e5a      	subs	r2, r3, #1
 801cf8e:	803a      	strh	r2, [r7, #0]
 801cf90:	2b00      	cmp	r3, #0
 801cf92:	d1f5      	bne.n	801cf80 <UTIL_MEM_set_8+0x16>
  }
}
 801cf94:	bf00      	nop
 801cf96:	bf00      	nop
 801cf98:	3714      	adds	r7, #20
 801cf9a:	46bd      	mov	sp, r7
 801cf9c:	bc80      	pop	{r7}
 801cf9e:	4770      	bx	lr

0801cfa0 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801cfa0:	b082      	sub	sp, #8
 801cfa2:	b480      	push	{r7}
 801cfa4:	b087      	sub	sp, #28
 801cfa6:	af00      	add	r7, sp, #0
 801cfa8:	60f8      	str	r0, [r7, #12]
 801cfaa:	1d38      	adds	r0, r7, #4
 801cfac:	e880 0006 	stmia.w	r0, {r1, r2}
 801cfb0:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801cfb2:	2300      	movs	r3, #0
 801cfb4:	613b      	str	r3, [r7, #16]
 801cfb6:	2300      	movs	r3, #0
 801cfb8:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801cfba:	687a      	ldr	r2, [r7, #4]
 801cfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cfbe:	4413      	add	r3, r2
 801cfc0:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801cfc2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801cfc6:	b29a      	uxth	r2, r3
 801cfc8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801cfcc:	b29b      	uxth	r3, r3
 801cfce:	4413      	add	r3, r2
 801cfd0:	b29b      	uxth	r3, r3
 801cfd2:	b21b      	sxth	r3, r3
 801cfd4:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801cfd6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801cfda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801cfde:	db0a      	blt.n	801cff6 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801cfe0:	693b      	ldr	r3, [r7, #16]
 801cfe2:	3301      	adds	r3, #1
 801cfe4:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801cfe6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801cfea:	b29b      	uxth	r3, r3
 801cfec:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801cff0:	b29b      	uxth	r3, r3
 801cff2:	b21b      	sxth	r3, r3
 801cff4:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801cff6:	68fb      	ldr	r3, [r7, #12]
 801cff8:	461a      	mov	r2, r3
 801cffa:	f107 0310 	add.w	r3, r7, #16
 801cffe:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d002:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d006:	68f8      	ldr	r0, [r7, #12]
 801d008:	371c      	adds	r7, #28
 801d00a:	46bd      	mov	sp, r7
 801d00c:	bc80      	pop	{r7}
 801d00e:	b002      	add	sp, #8
 801d010:	4770      	bx	lr

0801d012 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801d012:	b082      	sub	sp, #8
 801d014:	b480      	push	{r7}
 801d016:	b087      	sub	sp, #28
 801d018:	af00      	add	r7, sp, #0
 801d01a:	60f8      	str	r0, [r7, #12]
 801d01c:	1d38      	adds	r0, r7, #4
 801d01e:	e880 0006 	stmia.w	r0, {r1, r2}
 801d022:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801d024:	2300      	movs	r3, #0
 801d026:	613b      	str	r3, [r7, #16]
 801d028:	2300      	movs	r3, #0
 801d02a:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801d02c:	687a      	ldr	r2, [r7, #4]
 801d02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d030:	1ad3      	subs	r3, r2, r3
 801d032:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801d034:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d038:	b29a      	uxth	r2, r3
 801d03a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801d03e:	b29b      	uxth	r3, r3
 801d040:	1ad3      	subs	r3, r2, r3
 801d042:	b29b      	uxth	r3, r3
 801d044:	b21b      	sxth	r3, r3
 801d046:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801d048:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d04c:	2b00      	cmp	r3, #0
 801d04e:	da0a      	bge.n	801d066 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801d050:	693b      	ldr	r3, [r7, #16]
 801d052:	3b01      	subs	r3, #1
 801d054:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801d056:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d05a:	b29b      	uxth	r3, r3
 801d05c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801d060:	b29b      	uxth	r3, r3
 801d062:	b21b      	sxth	r3, r3
 801d064:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801d066:	68fb      	ldr	r3, [r7, #12]
 801d068:	461a      	mov	r2, r3
 801d06a:	f107 0310 	add.w	r3, r7, #16
 801d06e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d072:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d076:	68f8      	ldr	r0, [r7, #12]
 801d078:	371c      	adds	r7, #28
 801d07a:	46bd      	mov	sp, r7
 801d07c:	bc80      	pop	{r7}
 801d07e:	b002      	add	sp, #8
 801d080:	4770      	bx	lr
	...

0801d084 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801d084:	b580      	push	{r7, lr}
 801d086:	b088      	sub	sp, #32
 801d088:	af02      	add	r7, sp, #8
 801d08a:	463b      	mov	r3, r7
 801d08c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d090:	2300      	movs	r3, #0
 801d092:	60bb      	str	r3, [r7, #8]
 801d094:	2300      	movs	r3, #0
 801d096:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d098:	4b10      	ldr	r3, [pc, #64]	; (801d0dc <SysTimeSet+0x58>)
 801d09a:	691b      	ldr	r3, [r3, #16]
 801d09c:	f107 0208 	add.w	r2, r7, #8
 801d0a0:	3204      	adds	r2, #4
 801d0a2:	4610      	mov	r0, r2
 801d0a4:	4798      	blx	r3
 801d0a6:	4603      	mov	r3, r0
 801d0a8:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801d0aa:	f107 0010 	add.w	r0, r7, #16
 801d0ae:	68fb      	ldr	r3, [r7, #12]
 801d0b0:	9300      	str	r3, [sp, #0]
 801d0b2:	68bb      	ldr	r3, [r7, #8]
 801d0b4:	463a      	mov	r2, r7
 801d0b6:	ca06      	ldmia	r2, {r1, r2}
 801d0b8:	f7ff ffab 	bl	801d012 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801d0bc:	4b07      	ldr	r3, [pc, #28]	; (801d0dc <SysTimeSet+0x58>)
 801d0be:	681b      	ldr	r3, [r3, #0]
 801d0c0:	693a      	ldr	r2, [r7, #16]
 801d0c2:	4610      	mov	r0, r2
 801d0c4:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801d0c6:	4b05      	ldr	r3, [pc, #20]	; (801d0dc <SysTimeSet+0x58>)
 801d0c8:	689b      	ldr	r3, [r3, #8]
 801d0ca:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801d0ce:	4610      	mov	r0, r2
 801d0d0:	4798      	blx	r3
}
 801d0d2:	bf00      	nop
 801d0d4:	3718      	adds	r7, #24
 801d0d6:	46bd      	mov	sp, r7
 801d0d8:	bd80      	pop	{r7, pc}
 801d0da:	bf00      	nop
 801d0dc:	0801f090 	.word	0x0801f090

0801d0e0 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801d0e0:	b580      	push	{r7, lr}
 801d0e2:	b08a      	sub	sp, #40	; 0x28
 801d0e4:	af02      	add	r7, sp, #8
 801d0e6:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d0e8:	2300      	movs	r3, #0
 801d0ea:	61bb      	str	r3, [r7, #24]
 801d0ec:	2300      	movs	r3, #0
 801d0ee:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801d0f0:	2300      	movs	r3, #0
 801d0f2:	613b      	str	r3, [r7, #16]
 801d0f4:	2300      	movs	r3, #0
 801d0f6:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d0f8:	4b14      	ldr	r3, [pc, #80]	; (801d14c <SysTimeGet+0x6c>)
 801d0fa:	691b      	ldr	r3, [r3, #16]
 801d0fc:	f107 0218 	add.w	r2, r7, #24
 801d100:	3204      	adds	r2, #4
 801d102:	4610      	mov	r0, r2
 801d104:	4798      	blx	r3
 801d106:	4603      	mov	r3, r0
 801d108:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d10a:	4b10      	ldr	r3, [pc, #64]	; (801d14c <SysTimeGet+0x6c>)
 801d10c:	68db      	ldr	r3, [r3, #12]
 801d10e:	4798      	blx	r3
 801d110:	4603      	mov	r3, r0
 801d112:	b21b      	sxth	r3, r3
 801d114:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d116:	4b0d      	ldr	r3, [pc, #52]	; (801d14c <SysTimeGet+0x6c>)
 801d118:	685b      	ldr	r3, [r3, #4]
 801d11a:	4798      	blx	r3
 801d11c:	4603      	mov	r3, r0
 801d11e:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801d120:	f107 0010 	add.w	r0, r7, #16
 801d124:	69fb      	ldr	r3, [r7, #28]
 801d126:	9300      	str	r3, [sp, #0]
 801d128:	69bb      	ldr	r3, [r7, #24]
 801d12a:	f107 0208 	add.w	r2, r7, #8
 801d12e:	ca06      	ldmia	r2, {r1, r2}
 801d130:	f7ff ff36 	bl	801cfa0 <SysTimeAdd>

  return sysTime;
 801d134:	687b      	ldr	r3, [r7, #4]
 801d136:	461a      	mov	r2, r3
 801d138:	f107 0310 	add.w	r3, r7, #16
 801d13c:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d140:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d144:	6878      	ldr	r0, [r7, #4]
 801d146:	3720      	adds	r7, #32
 801d148:	46bd      	mov	sp, r7
 801d14a:	bd80      	pop	{r7, pc}
 801d14c:	0801f090 	.word	0x0801f090

0801d150 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801d150:	b580      	push	{r7, lr}
 801d152:	b084      	sub	sp, #16
 801d154:	af00      	add	r7, sp, #0
 801d156:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d158:	2300      	movs	r3, #0
 801d15a:	60bb      	str	r3, [r7, #8]
 801d15c:	2300      	movs	r3, #0
 801d15e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d160:	4b0a      	ldr	r3, [pc, #40]	; (801d18c <SysTimeGetMcuTime+0x3c>)
 801d162:	691b      	ldr	r3, [r3, #16]
 801d164:	f107 0208 	add.w	r2, r7, #8
 801d168:	3204      	adds	r2, #4
 801d16a:	4610      	mov	r0, r2
 801d16c:	4798      	blx	r3
 801d16e:	4603      	mov	r3, r0
 801d170:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801d172:	687b      	ldr	r3, [r7, #4]
 801d174:	461a      	mov	r2, r3
 801d176:	f107 0308 	add.w	r3, r7, #8
 801d17a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d17e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d182:	6878      	ldr	r0, [r7, #4]
 801d184:	3710      	adds	r7, #16
 801d186:	46bd      	mov	sp, r7
 801d188:	bd80      	pop	{r7, pc}
 801d18a:	bf00      	nop
 801d18c:	0801f090 	.word	0x0801f090

0801d190 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801d190:	b580      	push	{r7, lr}
 801d192:	b088      	sub	sp, #32
 801d194:	af02      	add	r7, sp, #8
 801d196:	463b      	mov	r3, r7
 801d198:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d19c:	4b0f      	ldr	r3, [pc, #60]	; (801d1dc <SysTimeToMs+0x4c>)
 801d19e:	68db      	ldr	r3, [r3, #12]
 801d1a0:	4798      	blx	r3
 801d1a2:	4603      	mov	r3, r0
 801d1a4:	b21b      	sxth	r3, r3
 801d1a6:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d1a8:	4b0c      	ldr	r3, [pc, #48]	; (801d1dc <SysTimeToMs+0x4c>)
 801d1aa:	685b      	ldr	r3, [r3, #4]
 801d1ac:	4798      	blx	r3
 801d1ae:	4603      	mov	r3, r0
 801d1b0:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801d1b2:	f107 0008 	add.w	r0, r7, #8
 801d1b6:	697b      	ldr	r3, [r7, #20]
 801d1b8:	9300      	str	r3, [sp, #0]
 801d1ba:	693b      	ldr	r3, [r7, #16]
 801d1bc:	463a      	mov	r2, r7
 801d1be:	ca06      	ldmia	r2, {r1, r2}
 801d1c0:	f7ff ff27 	bl	801d012 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801d1c4:	68bb      	ldr	r3, [r7, #8]
 801d1c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d1ca:	fb02 f303 	mul.w	r3, r2, r3
 801d1ce:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801d1d2:	4413      	add	r3, r2
}
 801d1d4:	4618      	mov	r0, r3
 801d1d6:	3718      	adds	r7, #24
 801d1d8:	46bd      	mov	sp, r7
 801d1da:	bd80      	pop	{r7, pc}
 801d1dc:	0801f090 	.word	0x0801f090

0801d1e0 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801d1e0:	b580      	push	{r7, lr}
 801d1e2:	b08a      	sub	sp, #40	; 0x28
 801d1e4:	af02      	add	r7, sp, #8
 801d1e6:	6078      	str	r0, [r7, #4]
 801d1e8:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801d1ea:	683b      	ldr	r3, [r7, #0]
 801d1ec:	4a19      	ldr	r2, [pc, #100]	; (801d254 <SysTimeFromMs+0x74>)
 801d1ee:	fba2 2303 	umull	r2, r3, r2, r3
 801d1f2:	099b      	lsrs	r3, r3, #6
 801d1f4:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801d1f6:	69fb      	ldr	r3, [r7, #28]
 801d1f8:	617b      	str	r3, [r7, #20]
 801d1fa:	683b      	ldr	r3, [r7, #0]
 801d1fc:	b29a      	uxth	r2, r3
 801d1fe:	69fb      	ldr	r3, [r7, #28]
 801d200:	b29b      	uxth	r3, r3
 801d202:	4619      	mov	r1, r3
 801d204:	0149      	lsls	r1, r1, #5
 801d206:	1ac9      	subs	r1, r1, r3
 801d208:	0089      	lsls	r1, r1, #2
 801d20a:	440b      	add	r3, r1
 801d20c:	00db      	lsls	r3, r3, #3
 801d20e:	b29b      	uxth	r3, r3
 801d210:	1ad3      	subs	r3, r2, r3
 801d212:	b29b      	uxth	r3, r3
 801d214:	b21b      	sxth	r3, r3
 801d216:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801d218:	f107 030c 	add.w	r3, r7, #12
 801d21c:	2200      	movs	r2, #0
 801d21e:	601a      	str	r2, [r3, #0]
 801d220:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d222:	4b0d      	ldr	r3, [pc, #52]	; (801d258 <SysTimeFromMs+0x78>)
 801d224:	68db      	ldr	r3, [r3, #12]
 801d226:	4798      	blx	r3
 801d228:	4603      	mov	r3, r0
 801d22a:	b21b      	sxth	r3, r3
 801d22c:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d22e:	4b0a      	ldr	r3, [pc, #40]	; (801d258 <SysTimeFromMs+0x78>)
 801d230:	685b      	ldr	r3, [r3, #4]
 801d232:	4798      	blx	r3
 801d234:	4603      	mov	r3, r0
 801d236:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801d238:	6878      	ldr	r0, [r7, #4]
 801d23a:	693b      	ldr	r3, [r7, #16]
 801d23c:	9300      	str	r3, [sp, #0]
 801d23e:	68fb      	ldr	r3, [r7, #12]
 801d240:	f107 0214 	add.w	r2, r7, #20
 801d244:	ca06      	ldmia	r2, {r1, r2}
 801d246:	f7ff feab 	bl	801cfa0 <SysTimeAdd>
}
 801d24a:	6878      	ldr	r0, [r7, #4]
 801d24c:	3720      	adds	r7, #32
 801d24e:	46bd      	mov	sp, r7
 801d250:	bd80      	pop	{r7, pc}
 801d252:	bf00      	nop
 801d254:	10624dd3 	.word	0x10624dd3
 801d258:	0801f090 	.word	0x0801f090

0801d25c <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801d25c:	b480      	push	{r7}
 801d25e:	b085      	sub	sp, #20
 801d260:	af00      	add	r7, sp, #0
 801d262:	6078      	str	r0, [r7, #4]
  int i = 0;
 801d264:	2300      	movs	r3, #0
 801d266:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801d268:	e00e      	b.n	801d288 <ee_skip_atoi+0x2c>
 801d26a:	68fa      	ldr	r2, [r7, #12]
 801d26c:	4613      	mov	r3, r2
 801d26e:	009b      	lsls	r3, r3, #2
 801d270:	4413      	add	r3, r2
 801d272:	005b      	lsls	r3, r3, #1
 801d274:	4618      	mov	r0, r3
 801d276:	687b      	ldr	r3, [r7, #4]
 801d278:	681b      	ldr	r3, [r3, #0]
 801d27a:	1c59      	adds	r1, r3, #1
 801d27c:	687a      	ldr	r2, [r7, #4]
 801d27e:	6011      	str	r1, [r2, #0]
 801d280:	781b      	ldrb	r3, [r3, #0]
 801d282:	4403      	add	r3, r0
 801d284:	3b30      	subs	r3, #48	; 0x30
 801d286:	60fb      	str	r3, [r7, #12]
 801d288:	687b      	ldr	r3, [r7, #4]
 801d28a:	681b      	ldr	r3, [r3, #0]
 801d28c:	781b      	ldrb	r3, [r3, #0]
 801d28e:	2b2f      	cmp	r3, #47	; 0x2f
 801d290:	d904      	bls.n	801d29c <ee_skip_atoi+0x40>
 801d292:	687b      	ldr	r3, [r7, #4]
 801d294:	681b      	ldr	r3, [r3, #0]
 801d296:	781b      	ldrb	r3, [r3, #0]
 801d298:	2b39      	cmp	r3, #57	; 0x39
 801d29a:	d9e6      	bls.n	801d26a <ee_skip_atoi+0xe>
  return i;
 801d29c:	68fb      	ldr	r3, [r7, #12]
}
 801d29e:	4618      	mov	r0, r3
 801d2a0:	3714      	adds	r7, #20
 801d2a2:	46bd      	mov	sp, r7
 801d2a4:	bc80      	pop	{r7}
 801d2a6:	4770      	bx	lr

0801d2a8 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801d2a8:	b480      	push	{r7}
 801d2aa:	b099      	sub	sp, #100	; 0x64
 801d2ac:	af00      	add	r7, sp, #0
 801d2ae:	60f8      	str	r0, [r7, #12]
 801d2b0:	60b9      	str	r1, [r7, #8]
 801d2b2:	607a      	str	r2, [r7, #4]
 801d2b4:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801d2b6:	4b71      	ldr	r3, [pc, #452]	; (801d47c <ee_number+0x1d4>)
 801d2b8:	681b      	ldr	r3, [r3, #0]
 801d2ba:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801d2bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d2be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d2c2:	2b00      	cmp	r3, #0
 801d2c4:	d002      	beq.n	801d2cc <ee_number+0x24>
 801d2c6:	4b6e      	ldr	r3, [pc, #440]	; (801d480 <ee_number+0x1d8>)
 801d2c8:	681b      	ldr	r3, [r3, #0]
 801d2ca:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801d2cc:	683b      	ldr	r3, [r7, #0]
 801d2ce:	2b01      	cmp	r3, #1
 801d2d0:	dd02      	ble.n	801d2d8 <ee_number+0x30>
 801d2d2:	683b      	ldr	r3, [r7, #0]
 801d2d4:	2b24      	cmp	r3, #36	; 0x24
 801d2d6:	dd01      	ble.n	801d2dc <ee_number+0x34>
 801d2d8:	2300      	movs	r3, #0
 801d2da:	e0ca      	b.n	801d472 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801d2dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d2de:	f003 0301 	and.w	r3, r3, #1
 801d2e2:	2b00      	cmp	r3, #0
 801d2e4:	d001      	beq.n	801d2ea <ee_number+0x42>
 801d2e6:	2330      	movs	r3, #48	; 0x30
 801d2e8:	e000      	b.n	801d2ec <ee_number+0x44>
 801d2ea:	2320      	movs	r3, #32
 801d2ec:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801d2f0:	2300      	movs	r3, #0
 801d2f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801d2f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d2f8:	f003 0302 	and.w	r3, r3, #2
 801d2fc:	2b00      	cmp	r3, #0
 801d2fe:	d00b      	beq.n	801d318 <ee_number+0x70>
  {
    if (num < 0)
 801d300:	687b      	ldr	r3, [r7, #4]
 801d302:	2b00      	cmp	r3, #0
 801d304:	da08      	bge.n	801d318 <ee_number+0x70>
    {
      sign = '-';
 801d306:	232d      	movs	r3, #45	; 0x2d
 801d308:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801d30c:	687b      	ldr	r3, [r7, #4]
 801d30e:	425b      	negs	r3, r3
 801d310:	607b      	str	r3, [r7, #4]
      size--;
 801d312:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d314:	3b01      	subs	r3, #1
 801d316:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801d318:	2300      	movs	r3, #0
 801d31a:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801d31c:	687b      	ldr	r3, [r7, #4]
 801d31e:	2b00      	cmp	r3, #0
 801d320:	d11e      	bne.n	801d360 <ee_number+0xb8>
    tmp[i++] = '0';
 801d322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d324:	1c5a      	adds	r2, r3, #1
 801d326:	657a      	str	r2, [r7, #84]	; 0x54
 801d328:	3360      	adds	r3, #96	; 0x60
 801d32a:	443b      	add	r3, r7
 801d32c:	2230      	movs	r2, #48	; 0x30
 801d32e:	f803 2c50 	strb.w	r2, [r3, #-80]
 801d332:	e018      	b.n	801d366 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801d334:	687b      	ldr	r3, [r7, #4]
 801d336:	683a      	ldr	r2, [r7, #0]
 801d338:	fbb3 f1f2 	udiv	r1, r3, r2
 801d33c:	fb01 f202 	mul.w	r2, r1, r2
 801d340:	1a9b      	subs	r3, r3, r2
 801d342:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d344:	441a      	add	r2, r3
 801d346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d348:	1c59      	adds	r1, r3, #1
 801d34a:	6579      	str	r1, [r7, #84]	; 0x54
 801d34c:	7812      	ldrb	r2, [r2, #0]
 801d34e:	3360      	adds	r3, #96	; 0x60
 801d350:	443b      	add	r3, r7
 801d352:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801d356:	687a      	ldr	r2, [r7, #4]
 801d358:	683b      	ldr	r3, [r7, #0]
 801d35a:	fbb2 f3f3 	udiv	r3, r2, r3
 801d35e:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801d360:	687b      	ldr	r3, [r7, #4]
 801d362:	2b00      	cmp	r3, #0
 801d364:	d1e6      	bne.n	801d334 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801d366:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d36a:	429a      	cmp	r2, r3
 801d36c:	dd01      	ble.n	801d372 <ee_number+0xca>
 801d36e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d370:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801d372:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d376:	1ad3      	subs	r3, r2, r3
 801d378:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801d37a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d37c:	f003 0301 	and.w	r3, r3, #1
 801d380:	2b00      	cmp	r3, #0
 801d382:	d112      	bne.n	801d3aa <ee_number+0x102>
 801d384:	e00c      	b.n	801d3a0 <ee_number+0xf8>
 801d386:	68fb      	ldr	r3, [r7, #12]
 801d388:	1c5a      	adds	r2, r3, #1
 801d38a:	60fa      	str	r2, [r7, #12]
 801d38c:	2220      	movs	r2, #32
 801d38e:	701a      	strb	r2, [r3, #0]
 801d390:	68bb      	ldr	r3, [r7, #8]
 801d392:	3b01      	subs	r3, #1
 801d394:	60bb      	str	r3, [r7, #8]
 801d396:	68bb      	ldr	r3, [r7, #8]
 801d398:	2b00      	cmp	r3, #0
 801d39a:	d101      	bne.n	801d3a0 <ee_number+0xf8>
 801d39c:	68fb      	ldr	r3, [r7, #12]
 801d39e:	e068      	b.n	801d472 <ee_number+0x1ca>
 801d3a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d3a2:	1e5a      	subs	r2, r3, #1
 801d3a4:	66ba      	str	r2, [r7, #104]	; 0x68
 801d3a6:	2b00      	cmp	r3, #0
 801d3a8:	dced      	bgt.n	801d386 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801d3aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d3ae:	2b00      	cmp	r3, #0
 801d3b0:	d01b      	beq.n	801d3ea <ee_number+0x142>
 801d3b2:	68fb      	ldr	r3, [r7, #12]
 801d3b4:	1c5a      	adds	r2, r3, #1
 801d3b6:	60fa      	str	r2, [r7, #12]
 801d3b8:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801d3bc:	701a      	strb	r2, [r3, #0]
 801d3be:	68bb      	ldr	r3, [r7, #8]
 801d3c0:	3b01      	subs	r3, #1
 801d3c2:	60bb      	str	r3, [r7, #8]
 801d3c4:	68bb      	ldr	r3, [r7, #8]
 801d3c6:	2b00      	cmp	r3, #0
 801d3c8:	d10f      	bne.n	801d3ea <ee_number+0x142>
 801d3ca:	68fb      	ldr	r3, [r7, #12]
 801d3cc:	e051      	b.n	801d472 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801d3ce:	68fb      	ldr	r3, [r7, #12]
 801d3d0:	1c5a      	adds	r2, r3, #1
 801d3d2:	60fa      	str	r2, [r7, #12]
 801d3d4:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801d3d8:	701a      	strb	r2, [r3, #0]
 801d3da:	68bb      	ldr	r3, [r7, #8]
 801d3dc:	3b01      	subs	r3, #1
 801d3de:	60bb      	str	r3, [r7, #8]
 801d3e0:	68bb      	ldr	r3, [r7, #8]
 801d3e2:	2b00      	cmp	r3, #0
 801d3e4:	d101      	bne.n	801d3ea <ee_number+0x142>
 801d3e6:	68fb      	ldr	r3, [r7, #12]
 801d3e8:	e043      	b.n	801d472 <ee_number+0x1ca>
 801d3ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d3ec:	1e5a      	subs	r2, r3, #1
 801d3ee:	66ba      	str	r2, [r7, #104]	; 0x68
 801d3f0:	2b00      	cmp	r3, #0
 801d3f2:	dcec      	bgt.n	801d3ce <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801d3f4:	e00c      	b.n	801d410 <ee_number+0x168>
 801d3f6:	68fb      	ldr	r3, [r7, #12]
 801d3f8:	1c5a      	adds	r2, r3, #1
 801d3fa:	60fa      	str	r2, [r7, #12]
 801d3fc:	2230      	movs	r2, #48	; 0x30
 801d3fe:	701a      	strb	r2, [r3, #0]
 801d400:	68bb      	ldr	r3, [r7, #8]
 801d402:	3b01      	subs	r3, #1
 801d404:	60bb      	str	r3, [r7, #8]
 801d406:	68bb      	ldr	r3, [r7, #8]
 801d408:	2b00      	cmp	r3, #0
 801d40a:	d101      	bne.n	801d410 <ee_number+0x168>
 801d40c:	68fb      	ldr	r3, [r7, #12]
 801d40e:	e030      	b.n	801d472 <ee_number+0x1ca>
 801d410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d412:	1e5a      	subs	r2, r3, #1
 801d414:	66fa      	str	r2, [r7, #108]	; 0x6c
 801d416:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d418:	429a      	cmp	r2, r3
 801d41a:	dbec      	blt.n	801d3f6 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801d41c:	e010      	b.n	801d440 <ee_number+0x198>
 801d41e:	68fb      	ldr	r3, [r7, #12]
 801d420:	1c5a      	adds	r2, r3, #1
 801d422:	60fa      	str	r2, [r7, #12]
 801d424:	f107 0110 	add.w	r1, r7, #16
 801d428:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d42a:	440a      	add	r2, r1
 801d42c:	7812      	ldrb	r2, [r2, #0]
 801d42e:	701a      	strb	r2, [r3, #0]
 801d430:	68bb      	ldr	r3, [r7, #8]
 801d432:	3b01      	subs	r3, #1
 801d434:	60bb      	str	r3, [r7, #8]
 801d436:	68bb      	ldr	r3, [r7, #8]
 801d438:	2b00      	cmp	r3, #0
 801d43a:	d101      	bne.n	801d440 <ee_number+0x198>
 801d43c:	68fb      	ldr	r3, [r7, #12]
 801d43e:	e018      	b.n	801d472 <ee_number+0x1ca>
 801d440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d442:	1e5a      	subs	r2, r3, #1
 801d444:	657a      	str	r2, [r7, #84]	; 0x54
 801d446:	2b00      	cmp	r3, #0
 801d448:	dce9      	bgt.n	801d41e <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801d44a:	e00c      	b.n	801d466 <ee_number+0x1be>
 801d44c:	68fb      	ldr	r3, [r7, #12]
 801d44e:	1c5a      	adds	r2, r3, #1
 801d450:	60fa      	str	r2, [r7, #12]
 801d452:	2220      	movs	r2, #32
 801d454:	701a      	strb	r2, [r3, #0]
 801d456:	68bb      	ldr	r3, [r7, #8]
 801d458:	3b01      	subs	r3, #1
 801d45a:	60bb      	str	r3, [r7, #8]
 801d45c:	68bb      	ldr	r3, [r7, #8]
 801d45e:	2b00      	cmp	r3, #0
 801d460:	d101      	bne.n	801d466 <ee_number+0x1be>
 801d462:	68fb      	ldr	r3, [r7, #12]
 801d464:	e005      	b.n	801d472 <ee_number+0x1ca>
 801d466:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d468:	1e5a      	subs	r2, r3, #1
 801d46a:	66ba      	str	r2, [r7, #104]	; 0x68
 801d46c:	2b00      	cmp	r3, #0
 801d46e:	dced      	bgt.n	801d44c <ee_number+0x1a4>

  return str;
 801d470:	68fb      	ldr	r3, [r7, #12]
}
 801d472:	4618      	mov	r0, r3
 801d474:	3764      	adds	r7, #100	; 0x64
 801d476:	46bd      	mov	sp, r7
 801d478:	bc80      	pop	{r7}
 801d47a:	4770      	bx	lr
 801d47c:	20000138 	.word	0x20000138
 801d480:	2000013c 	.word	0x2000013c

0801d484 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801d484:	b580      	push	{r7, lr}
 801d486:	b092      	sub	sp, #72	; 0x48
 801d488:	af04      	add	r7, sp, #16
 801d48a:	60f8      	str	r0, [r7, #12]
 801d48c:	60b9      	str	r1, [r7, #8]
 801d48e:	607a      	str	r2, [r7, #4]
 801d490:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801d492:	68bb      	ldr	r3, [r7, #8]
 801d494:	2b00      	cmp	r3, #0
 801d496:	dc01      	bgt.n	801d49c <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801d498:	2300      	movs	r3, #0
 801d49a:	e13e      	b.n	801d71a <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d49c:	68fb      	ldr	r3, [r7, #12]
 801d49e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d4a0:	e128      	b.n	801d6f4 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801d4a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d4a4:	68fb      	ldr	r3, [r7, #12]
 801d4a6:	1ad2      	subs	r2, r2, r3
 801d4a8:	68bb      	ldr	r3, [r7, #8]
 801d4aa:	3b01      	subs	r3, #1
 801d4ac:	429a      	cmp	r2, r3
 801d4ae:	f280 812e 	bge.w	801d70e <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801d4b2:	687b      	ldr	r3, [r7, #4]
 801d4b4:	781b      	ldrb	r3, [r3, #0]
 801d4b6:	2b25      	cmp	r3, #37	; 0x25
 801d4b8:	d006      	beq.n	801d4c8 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801d4ba:	687a      	ldr	r2, [r7, #4]
 801d4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d4be:	1c59      	adds	r1, r3, #1
 801d4c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d4c2:	7812      	ldrb	r2, [r2, #0]
 801d4c4:	701a      	strb	r2, [r3, #0]
      continue;
 801d4c6:	e112      	b.n	801d6ee <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801d4c8:	2300      	movs	r3, #0
 801d4ca:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801d4cc:	687b      	ldr	r3, [r7, #4]
 801d4ce:	3301      	adds	r3, #1
 801d4d0:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801d4d2:	687b      	ldr	r3, [r7, #4]
 801d4d4:	781b      	ldrb	r3, [r3, #0]
 801d4d6:	2b30      	cmp	r3, #48	; 0x30
 801d4d8:	d103      	bne.n	801d4e2 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801d4da:	6a3b      	ldr	r3, [r7, #32]
 801d4dc:	f043 0301 	orr.w	r3, r3, #1
 801d4e0:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801d4e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d4e6:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801d4e8:	687b      	ldr	r3, [r7, #4]
 801d4ea:	781b      	ldrb	r3, [r3, #0]
 801d4ec:	2b2f      	cmp	r3, #47	; 0x2f
 801d4ee:	d908      	bls.n	801d502 <tiny_vsnprintf_like+0x7e>
 801d4f0:	687b      	ldr	r3, [r7, #4]
 801d4f2:	781b      	ldrb	r3, [r3, #0]
 801d4f4:	2b39      	cmp	r3, #57	; 0x39
 801d4f6:	d804      	bhi.n	801d502 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801d4f8:	1d3b      	adds	r3, r7, #4
 801d4fa:	4618      	mov	r0, r3
 801d4fc:	f7ff feae 	bl	801d25c <ee_skip_atoi>
 801d500:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801d502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d506:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801d508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d50c:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801d50e:	230a      	movs	r3, #10
 801d510:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801d512:	687b      	ldr	r3, [r7, #4]
 801d514:	781b      	ldrb	r3, [r3, #0]
 801d516:	3b58      	subs	r3, #88	; 0x58
 801d518:	2b20      	cmp	r3, #32
 801d51a:	f200 8094 	bhi.w	801d646 <tiny_vsnprintf_like+0x1c2>
 801d51e:	a201      	add	r2, pc, #4	; (adr r2, 801d524 <tiny_vsnprintf_like+0xa0>)
 801d520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d524:	0801d62f 	.word	0x0801d62f
 801d528:	0801d647 	.word	0x0801d647
 801d52c:	0801d647 	.word	0x0801d647
 801d530:	0801d647 	.word	0x0801d647
 801d534:	0801d647 	.word	0x0801d647
 801d538:	0801d647 	.word	0x0801d647
 801d53c:	0801d647 	.word	0x0801d647
 801d540:	0801d647 	.word	0x0801d647
 801d544:	0801d647 	.word	0x0801d647
 801d548:	0801d647 	.word	0x0801d647
 801d54c:	0801d647 	.word	0x0801d647
 801d550:	0801d5b3 	.word	0x0801d5b3
 801d554:	0801d63d 	.word	0x0801d63d
 801d558:	0801d647 	.word	0x0801d647
 801d55c:	0801d647 	.word	0x0801d647
 801d560:	0801d647 	.word	0x0801d647
 801d564:	0801d647 	.word	0x0801d647
 801d568:	0801d63d 	.word	0x0801d63d
 801d56c:	0801d647 	.word	0x0801d647
 801d570:	0801d647 	.word	0x0801d647
 801d574:	0801d647 	.word	0x0801d647
 801d578:	0801d647 	.word	0x0801d647
 801d57c:	0801d647 	.word	0x0801d647
 801d580:	0801d647 	.word	0x0801d647
 801d584:	0801d647 	.word	0x0801d647
 801d588:	0801d647 	.word	0x0801d647
 801d58c:	0801d647 	.word	0x0801d647
 801d590:	0801d5d3 	.word	0x0801d5d3
 801d594:	0801d647 	.word	0x0801d647
 801d598:	0801d693 	.word	0x0801d693
 801d59c:	0801d647 	.word	0x0801d647
 801d5a0:	0801d647 	.word	0x0801d647
 801d5a4:	0801d637 	.word	0x0801d637
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801d5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d5aa:	1c5a      	adds	r2, r3, #1
 801d5ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d5ae:	2220      	movs	r2, #32
 801d5b0:	701a      	strb	r2, [r3, #0]
 801d5b2:	69fb      	ldr	r3, [r7, #28]
 801d5b4:	3b01      	subs	r3, #1
 801d5b6:	61fb      	str	r3, [r7, #28]
 801d5b8:	69fb      	ldr	r3, [r7, #28]
 801d5ba:	2b00      	cmp	r3, #0
 801d5bc:	dcf4      	bgt.n	801d5a8 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801d5be:	683b      	ldr	r3, [r7, #0]
 801d5c0:	1d1a      	adds	r2, r3, #4
 801d5c2:	603a      	str	r2, [r7, #0]
 801d5c4:	6819      	ldr	r1, [r3, #0]
 801d5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d5c8:	1c5a      	adds	r2, r3, #1
 801d5ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d5cc:	b2ca      	uxtb	r2, r1
 801d5ce:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801d5d0:	e08d      	b.n	801d6ee <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801d5d2:	683b      	ldr	r3, [r7, #0]
 801d5d4:	1d1a      	adds	r2, r3, #4
 801d5d6:	603a      	str	r2, [r7, #0]
 801d5d8:	681b      	ldr	r3, [r3, #0]
 801d5da:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801d5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5de:	2b00      	cmp	r3, #0
 801d5e0:	d101      	bne.n	801d5e6 <tiny_vsnprintf_like+0x162>
 801d5e2:	4b50      	ldr	r3, [pc, #320]	; (801d724 <tiny_vsnprintf_like+0x2a0>)
 801d5e4:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801d5e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d5e8:	f7e2 fdc6 	bl	8000178 <strlen>
 801d5ec:	4603      	mov	r3, r0
 801d5ee:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801d5f0:	e004      	b.n	801d5fc <tiny_vsnprintf_like+0x178>
 801d5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d5f4:	1c5a      	adds	r2, r3, #1
 801d5f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d5f8:	2220      	movs	r2, #32
 801d5fa:	701a      	strb	r2, [r3, #0]
 801d5fc:	69fb      	ldr	r3, [r7, #28]
 801d5fe:	1e5a      	subs	r2, r3, #1
 801d600:	61fa      	str	r2, [r7, #28]
 801d602:	693a      	ldr	r2, [r7, #16]
 801d604:	429a      	cmp	r2, r3
 801d606:	dbf4      	blt.n	801d5f2 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801d608:	2300      	movs	r3, #0
 801d60a:	62bb      	str	r3, [r7, #40]	; 0x28
 801d60c:	e00a      	b.n	801d624 <tiny_vsnprintf_like+0x1a0>
 801d60e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d610:	1c53      	adds	r3, r2, #1
 801d612:	627b      	str	r3, [r7, #36]	; 0x24
 801d614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d616:	1c59      	adds	r1, r3, #1
 801d618:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d61a:	7812      	ldrb	r2, [r2, #0]
 801d61c:	701a      	strb	r2, [r3, #0]
 801d61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d620:	3301      	adds	r3, #1
 801d622:	62bb      	str	r3, [r7, #40]	; 0x28
 801d624:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d626:	693b      	ldr	r3, [r7, #16]
 801d628:	429a      	cmp	r2, r3
 801d62a:	dbf0      	blt.n	801d60e <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801d62c:	e05f      	b.n	801d6ee <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801d62e:	6a3b      	ldr	r3, [r7, #32]
 801d630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d634:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801d636:	2310      	movs	r3, #16
 801d638:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801d63a:	e02b      	b.n	801d694 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801d63c:	6a3b      	ldr	r3, [r7, #32]
 801d63e:	f043 0302 	orr.w	r3, r3, #2
 801d642:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801d644:	e025      	b.n	801d692 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801d646:	687b      	ldr	r3, [r7, #4]
 801d648:	781b      	ldrb	r3, [r3, #0]
 801d64a:	2b25      	cmp	r3, #37	; 0x25
 801d64c:	d004      	beq.n	801d658 <tiny_vsnprintf_like+0x1d4>
 801d64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d650:	1c5a      	adds	r2, r3, #1
 801d652:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d654:	2225      	movs	r2, #37	; 0x25
 801d656:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801d658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d65a:	68fb      	ldr	r3, [r7, #12]
 801d65c:	1ad2      	subs	r2, r2, r3
 801d65e:	68bb      	ldr	r3, [r7, #8]
 801d660:	3b01      	subs	r3, #1
 801d662:	429a      	cmp	r2, r3
 801d664:	da16      	bge.n	801d694 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801d666:	687b      	ldr	r3, [r7, #4]
 801d668:	781b      	ldrb	r3, [r3, #0]
 801d66a:	2b00      	cmp	r3, #0
 801d66c:	d006      	beq.n	801d67c <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801d66e:	687a      	ldr	r2, [r7, #4]
 801d670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d672:	1c59      	adds	r1, r3, #1
 801d674:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d676:	7812      	ldrb	r2, [r2, #0]
 801d678:	701a      	strb	r2, [r3, #0]
 801d67a:	e002      	b.n	801d682 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801d67c:	687b      	ldr	r3, [r7, #4]
 801d67e:	3b01      	subs	r3, #1
 801d680:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801d682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d684:	68fb      	ldr	r3, [r7, #12]
 801d686:	1ad2      	subs	r2, r2, r3
 801d688:	68bb      	ldr	r3, [r7, #8]
 801d68a:	3b01      	subs	r3, #1
 801d68c:	429a      	cmp	r2, r3
 801d68e:	db2d      	blt.n	801d6ec <tiny_vsnprintf_like+0x268>
 801d690:	e000      	b.n	801d694 <tiny_vsnprintf_like+0x210>
        break;
 801d692:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801d694:	697b      	ldr	r3, [r7, #20]
 801d696:	2b6c      	cmp	r3, #108	; 0x6c
 801d698:	d105      	bne.n	801d6a6 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801d69a:	683b      	ldr	r3, [r7, #0]
 801d69c:	1d1a      	adds	r2, r3, #4
 801d69e:	603a      	str	r2, [r7, #0]
 801d6a0:	681b      	ldr	r3, [r3, #0]
 801d6a2:	637b      	str	r3, [r7, #52]	; 0x34
 801d6a4:	e00f      	b.n	801d6c6 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801d6a6:	6a3b      	ldr	r3, [r7, #32]
 801d6a8:	f003 0302 	and.w	r3, r3, #2
 801d6ac:	2b00      	cmp	r3, #0
 801d6ae:	d005      	beq.n	801d6bc <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801d6b0:	683b      	ldr	r3, [r7, #0]
 801d6b2:	1d1a      	adds	r2, r3, #4
 801d6b4:	603a      	str	r2, [r7, #0]
 801d6b6:	681b      	ldr	r3, [r3, #0]
 801d6b8:	637b      	str	r3, [r7, #52]	; 0x34
 801d6ba:	e004      	b.n	801d6c6 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801d6bc:	683b      	ldr	r3, [r7, #0]
 801d6be:	1d1a      	adds	r2, r3, #4
 801d6c0:	603a      	str	r2, [r7, #0]
 801d6c2:	681b      	ldr	r3, [r3, #0]
 801d6c4:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801d6c6:	68bb      	ldr	r3, [r7, #8]
 801d6c8:	1e5a      	subs	r2, r3, #1
 801d6ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d6cc:	68fb      	ldr	r3, [r7, #12]
 801d6ce:	1acb      	subs	r3, r1, r3
 801d6d0:	1ad1      	subs	r1, r2, r3
 801d6d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d6d4:	6a3b      	ldr	r3, [r7, #32]
 801d6d6:	9302      	str	r3, [sp, #8]
 801d6d8:	69bb      	ldr	r3, [r7, #24]
 801d6da:	9301      	str	r3, [sp, #4]
 801d6dc:	69fb      	ldr	r3, [r7, #28]
 801d6de:	9300      	str	r3, [sp, #0]
 801d6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d6e4:	f7ff fde0 	bl	801d2a8 <ee_number>
 801d6e8:	62f8      	str	r0, [r7, #44]	; 0x2c
 801d6ea:	e000      	b.n	801d6ee <tiny_vsnprintf_like+0x26a>
        continue;
 801d6ec:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d6ee:	687b      	ldr	r3, [r7, #4]
 801d6f0:	3301      	adds	r3, #1
 801d6f2:	607b      	str	r3, [r7, #4]
 801d6f4:	687b      	ldr	r3, [r7, #4]
 801d6f6:	781b      	ldrb	r3, [r3, #0]
 801d6f8:	2b00      	cmp	r3, #0
 801d6fa:	f47f aed2 	bne.w	801d4a2 <tiny_vsnprintf_like+0x1e>
 801d6fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d700:	68fb      	ldr	r3, [r7, #12]
 801d702:	1ad2      	subs	r2, r2, r3
 801d704:	68bb      	ldr	r3, [r7, #8]
 801d706:	3b01      	subs	r3, #1
 801d708:	429a      	cmp	r2, r3
 801d70a:	f6bf aeca 	bge.w	801d4a2 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801d70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d710:	2200      	movs	r2, #0
 801d712:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801d714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d716:	68fb      	ldr	r3, [r7, #12]
 801d718:	1ad3      	subs	r3, r2, r3
}
 801d71a:	4618      	mov	r0, r3
 801d71c:	3738      	adds	r7, #56	; 0x38
 801d71e:	46bd      	mov	sp, r7
 801d720:	bd80      	pop	{r7, pc}
 801d722:	bf00      	nop
 801d724:	0801efa4 	.word	0x0801efa4

0801d728 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801d728:	b580      	push	{r7, lr}
 801d72a:	b090      	sub	sp, #64	; 0x40
 801d72c:	af00      	add	r7, sp, #0
 801d72e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801d730:	4b73      	ldr	r3, [pc, #460]	; (801d900 <UTIL_SEQ_Run+0x1d8>)
 801d732:	681b      	ldr	r3, [r3, #0]
 801d734:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801d736:	4b72      	ldr	r3, [pc, #456]	; (801d900 <UTIL_SEQ_Run+0x1d8>)
 801d738:	681a      	ldr	r2, [r3, #0]
 801d73a:	687b      	ldr	r3, [r7, #4]
 801d73c:	4013      	ands	r3, r2
 801d73e:	4a70      	ldr	r2, [pc, #448]	; (801d900 <UTIL_SEQ_Run+0x1d8>)
 801d740:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801d742:	4b70      	ldr	r3, [pc, #448]	; (801d904 <UTIL_SEQ_Run+0x1dc>)
 801d744:	681b      	ldr	r3, [r3, #0]
 801d746:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801d748:	4b6f      	ldr	r3, [pc, #444]	; (801d908 <UTIL_SEQ_Run+0x1e0>)
 801d74a:	681b      	ldr	r3, [r3, #0]
 801d74c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801d74e:	4b6f      	ldr	r3, [pc, #444]	; (801d90c <UTIL_SEQ_Run+0x1e4>)
 801d750:	681b      	ldr	r3, [r3, #0]
 801d752:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801d754:	4b6e      	ldr	r3, [pc, #440]	; (801d910 <UTIL_SEQ_Run+0x1e8>)
 801d756:	681b      	ldr	r3, [r3, #0]
 801d758:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801d75a:	e08d      	b.n	801d878 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801d75c:	2300      	movs	r3, #0
 801d75e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801d760:	e002      	b.n	801d768 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801d762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d764:	3301      	adds	r3, #1
 801d766:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801d768:	4a6a      	ldr	r2, [pc, #424]	; (801d914 <UTIL_SEQ_Run+0x1ec>)
 801d76a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d76c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801d770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d772:	401a      	ands	r2, r3
 801d774:	4b62      	ldr	r3, [pc, #392]	; (801d900 <UTIL_SEQ_Run+0x1d8>)
 801d776:	681b      	ldr	r3, [r3, #0]
 801d778:	4013      	ands	r3, r2
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	d0f1      	beq.n	801d762 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801d77e:	4a65      	ldr	r2, [pc, #404]	; (801d914 <UTIL_SEQ_Run+0x1ec>)
 801d780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d782:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801d786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d788:	401a      	ands	r2, r3
 801d78a:	4b5d      	ldr	r3, [pc, #372]	; (801d900 <UTIL_SEQ_Run+0x1d8>)
 801d78c:	681b      	ldr	r3, [r3, #0]
 801d78e:	4013      	ands	r3, r2
 801d790:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801d792:	4a60      	ldr	r2, [pc, #384]	; (801d914 <UTIL_SEQ_Run+0x1ec>)
 801d794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d796:	00db      	lsls	r3, r3, #3
 801d798:	4413      	add	r3, r2
 801d79a:	685a      	ldr	r2, [r3, #4]
 801d79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d79e:	4013      	ands	r3, r2
 801d7a0:	2b00      	cmp	r3, #0
 801d7a2:	d106      	bne.n	801d7b2 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801d7a4:	4a5b      	ldr	r2, [pc, #364]	; (801d914 <UTIL_SEQ_Run+0x1ec>)
 801d7a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d7a8:	00db      	lsls	r3, r3, #3
 801d7aa:	4413      	add	r3, r2
 801d7ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d7b0:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801d7b2:	4a58      	ldr	r2, [pc, #352]	; (801d914 <UTIL_SEQ_Run+0x1ec>)
 801d7b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d7b6:	00db      	lsls	r3, r3, #3
 801d7b8:	4413      	add	r3, r2
 801d7ba:	685a      	ldr	r2, [r3, #4]
 801d7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d7be:	4013      	ands	r3, r2
 801d7c0:	4618      	mov	r0, r3
 801d7c2:	f000 f907 	bl	801d9d4 <SEQ_BitPosition>
 801d7c6:	4603      	mov	r3, r0
 801d7c8:	461a      	mov	r2, r3
 801d7ca:	4b53      	ldr	r3, [pc, #332]	; (801d918 <UTIL_SEQ_Run+0x1f0>)
 801d7cc:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801d7ce:	4a51      	ldr	r2, [pc, #324]	; (801d914 <UTIL_SEQ_Run+0x1ec>)
 801d7d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d7d2:	00db      	lsls	r3, r3, #3
 801d7d4:	4413      	add	r3, r2
 801d7d6:	685a      	ldr	r2, [r3, #4]
 801d7d8:	4b4f      	ldr	r3, [pc, #316]	; (801d918 <UTIL_SEQ_Run+0x1f0>)
 801d7da:	681b      	ldr	r3, [r3, #0]
 801d7dc:	2101      	movs	r1, #1
 801d7de:	fa01 f303 	lsl.w	r3, r1, r3
 801d7e2:	43db      	mvns	r3, r3
 801d7e4:	401a      	ands	r2, r3
 801d7e6:	494b      	ldr	r1, [pc, #300]	; (801d914 <UTIL_SEQ_Run+0x1ec>)
 801d7e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d7ea:	00db      	lsls	r3, r3, #3
 801d7ec:	440b      	add	r3, r1
 801d7ee:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d7f0:	f3ef 8310 	mrs	r3, PRIMASK
 801d7f4:	61bb      	str	r3, [r7, #24]
  return(result);
 801d7f6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801d7f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801d7fa:	b672      	cpsid	i
}
 801d7fc:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801d7fe:	4b46      	ldr	r3, [pc, #280]	; (801d918 <UTIL_SEQ_Run+0x1f0>)
 801d800:	681b      	ldr	r3, [r3, #0]
 801d802:	2201      	movs	r2, #1
 801d804:	fa02 f303 	lsl.w	r3, r2, r3
 801d808:	43da      	mvns	r2, r3
 801d80a:	4b3e      	ldr	r3, [pc, #248]	; (801d904 <UTIL_SEQ_Run+0x1dc>)
 801d80c:	681b      	ldr	r3, [r3, #0]
 801d80e:	4013      	ands	r3, r2
 801d810:	4a3c      	ldr	r2, [pc, #240]	; (801d904 <UTIL_SEQ_Run+0x1dc>)
 801d812:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801d814:	2301      	movs	r3, #1
 801d816:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d818:	e013      	b.n	801d842 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801d81a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d81c:	3b01      	subs	r3, #1
 801d81e:	4a3d      	ldr	r2, [pc, #244]	; (801d914 <UTIL_SEQ_Run+0x1ec>)
 801d820:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801d824:	4b3c      	ldr	r3, [pc, #240]	; (801d918 <UTIL_SEQ_Run+0x1f0>)
 801d826:	681b      	ldr	r3, [r3, #0]
 801d828:	2201      	movs	r2, #1
 801d82a:	fa02 f303 	lsl.w	r3, r2, r3
 801d82e:	43da      	mvns	r2, r3
 801d830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d832:	3b01      	subs	r3, #1
 801d834:	400a      	ands	r2, r1
 801d836:	4937      	ldr	r1, [pc, #220]	; (801d914 <UTIL_SEQ_Run+0x1ec>)
 801d838:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801d83c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d83e:	3b01      	subs	r3, #1
 801d840:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d844:	2b00      	cmp	r3, #0
 801d846:	d1e8      	bne.n	801d81a <UTIL_SEQ_Run+0xf2>
 801d848:	6a3b      	ldr	r3, [r7, #32]
 801d84a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d84c:	697b      	ldr	r3, [r7, #20]
 801d84e:	f383 8810 	msr	PRIMASK, r3
}
 801d852:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801d854:	4b30      	ldr	r3, [pc, #192]	; (801d918 <UTIL_SEQ_Run+0x1f0>)
 801d856:	681b      	ldr	r3, [r3, #0]
 801d858:	4a30      	ldr	r2, [pc, #192]	; (801d91c <UTIL_SEQ_Run+0x1f4>)
 801d85a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d85e:	4798      	blx	r3

    local_taskset = TaskSet;
 801d860:	4b28      	ldr	r3, [pc, #160]	; (801d904 <UTIL_SEQ_Run+0x1dc>)
 801d862:	681b      	ldr	r3, [r3, #0]
 801d864:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801d866:	4b28      	ldr	r3, [pc, #160]	; (801d908 <UTIL_SEQ_Run+0x1e0>)
 801d868:	681b      	ldr	r3, [r3, #0]
 801d86a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801d86c:	4b27      	ldr	r3, [pc, #156]	; (801d90c <UTIL_SEQ_Run+0x1e4>)
 801d86e:	681b      	ldr	r3, [r3, #0]
 801d870:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801d872:	4b27      	ldr	r3, [pc, #156]	; (801d910 <UTIL_SEQ_Run+0x1e8>)
 801d874:	681b      	ldr	r3, [r3, #0]
 801d876:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801d878:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d87c:	401a      	ands	r2, r3
 801d87e:	4b20      	ldr	r3, [pc, #128]	; (801d900 <UTIL_SEQ_Run+0x1d8>)
 801d880:	681b      	ldr	r3, [r3, #0]
 801d882:	4013      	ands	r3, r2
 801d884:	2b00      	cmp	r3, #0
 801d886:	d005      	beq.n	801d894 <UTIL_SEQ_Run+0x16c>
 801d888:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d88c:	4013      	ands	r3, r2
 801d88e:	2b00      	cmp	r3, #0
 801d890:	f43f af64 	beq.w	801d75c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801d894:	4b20      	ldr	r3, [pc, #128]	; (801d918 <UTIL_SEQ_Run+0x1f0>)
 801d896:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d89a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801d89c:	f000 f88e 	bl	801d9bc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d8a0:	f3ef 8310 	mrs	r3, PRIMASK
 801d8a4:	613b      	str	r3, [r7, #16]
  return(result);
 801d8a6:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801d8a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801d8aa:	b672      	cpsid	i
}
 801d8ac:	bf00      	nop
  local_taskset = TaskSet;
 801d8ae:	4b15      	ldr	r3, [pc, #84]	; (801d904 <UTIL_SEQ_Run+0x1dc>)
 801d8b0:	681b      	ldr	r3, [r3, #0]
 801d8b2:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801d8b4:	4b14      	ldr	r3, [pc, #80]	; (801d908 <UTIL_SEQ_Run+0x1e0>)
 801d8b6:	681b      	ldr	r3, [r3, #0]
 801d8b8:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801d8ba:	4b14      	ldr	r3, [pc, #80]	; (801d90c <UTIL_SEQ_Run+0x1e4>)
 801d8bc:	681b      	ldr	r3, [r3, #0]
 801d8be:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801d8c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8c4:	401a      	ands	r2, r3
 801d8c6:	4b0e      	ldr	r3, [pc, #56]	; (801d900 <UTIL_SEQ_Run+0x1d8>)
 801d8c8:	681b      	ldr	r3, [r3, #0]
 801d8ca:	4013      	ands	r3, r2
 801d8cc:	2b00      	cmp	r3, #0
 801d8ce:	d107      	bne.n	801d8e0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801d8d0:	4b0f      	ldr	r3, [pc, #60]	; (801d910 <UTIL_SEQ_Run+0x1e8>)
 801d8d2:	681a      	ldr	r2, [r3, #0]
 801d8d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d8d6:	4013      	ands	r3, r2
 801d8d8:	2b00      	cmp	r3, #0
 801d8da:	d101      	bne.n	801d8e0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801d8dc:	f7e4 fe44 	bl	8002568 <UTIL_SEQ_Idle>
 801d8e0:	69fb      	ldr	r3, [r7, #28]
 801d8e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d8e4:	68fb      	ldr	r3, [r7, #12]
 801d8e6:	f383 8810 	msr	PRIMASK, r3
}
 801d8ea:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801d8ec:	f000 f86c 	bl	801d9c8 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801d8f0:	4a03      	ldr	r2, [pc, #12]	; (801d900 <UTIL_SEQ_Run+0x1d8>)
 801d8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d8f4:	6013      	str	r3, [r2, #0]

  return;
 801d8f6:	bf00      	nop
}
 801d8f8:	3740      	adds	r7, #64	; 0x40
 801d8fa:	46bd      	mov	sp, r7
 801d8fc:	bd80      	pop	{r7, pc}
 801d8fe:	bf00      	nop
 801d900:	20000144 	.word	0x20000144
 801d904:	20001d94 	.word	0x20001d94
 801d908:	20001d98 	.word	0x20001d98
 801d90c:	20000140 	.word	0x20000140
 801d910:	20001d9c 	.word	0x20001d9c
 801d914:	20001db4 	.word	0x20001db4
 801d918:	20001da0 	.word	0x20001da0
 801d91c:	20001da4 	.word	0x20001da4

0801d920 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801d920:	b580      	push	{r7, lr}
 801d922:	b088      	sub	sp, #32
 801d924:	af00      	add	r7, sp, #0
 801d926:	60f8      	str	r0, [r7, #12]
 801d928:	60b9      	str	r1, [r7, #8]
 801d92a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d92c:	f3ef 8310 	mrs	r3, PRIMASK
 801d930:	617b      	str	r3, [r7, #20]
  return(result);
 801d932:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801d934:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801d936:	b672      	cpsid	i
}
 801d938:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801d93a:	68f8      	ldr	r0, [r7, #12]
 801d93c:	f000 f84a 	bl	801d9d4 <SEQ_BitPosition>
 801d940:	4603      	mov	r3, r0
 801d942:	4619      	mov	r1, r3
 801d944:	4a06      	ldr	r2, [pc, #24]	; (801d960 <UTIL_SEQ_RegTask+0x40>)
 801d946:	687b      	ldr	r3, [r7, #4]
 801d948:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801d94c:	69fb      	ldr	r3, [r7, #28]
 801d94e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d950:	69bb      	ldr	r3, [r7, #24]
 801d952:	f383 8810 	msr	PRIMASK, r3
}
 801d956:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801d958:	bf00      	nop
}
 801d95a:	3720      	adds	r7, #32
 801d95c:	46bd      	mov	sp, r7
 801d95e:	bd80      	pop	{r7, pc}
 801d960:	20001da4 	.word	0x20001da4

0801d964 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801d964:	b480      	push	{r7}
 801d966:	b087      	sub	sp, #28
 801d968:	af00      	add	r7, sp, #0
 801d96a:	6078      	str	r0, [r7, #4]
 801d96c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d96e:	f3ef 8310 	mrs	r3, PRIMASK
 801d972:	60fb      	str	r3, [r7, #12]
  return(result);
 801d974:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801d976:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d978:	b672      	cpsid	i
}
 801d97a:	bf00      	nop

  TaskSet |= TaskId_bm;
 801d97c:	4b0d      	ldr	r3, [pc, #52]	; (801d9b4 <UTIL_SEQ_SetTask+0x50>)
 801d97e:	681a      	ldr	r2, [r3, #0]
 801d980:	687b      	ldr	r3, [r7, #4]
 801d982:	4313      	orrs	r3, r2
 801d984:	4a0b      	ldr	r2, [pc, #44]	; (801d9b4 <UTIL_SEQ_SetTask+0x50>)
 801d986:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801d988:	4a0b      	ldr	r2, [pc, #44]	; (801d9b8 <UTIL_SEQ_SetTask+0x54>)
 801d98a:	683b      	ldr	r3, [r7, #0]
 801d98c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801d990:	687b      	ldr	r3, [r7, #4]
 801d992:	431a      	orrs	r2, r3
 801d994:	4908      	ldr	r1, [pc, #32]	; (801d9b8 <UTIL_SEQ_SetTask+0x54>)
 801d996:	683b      	ldr	r3, [r7, #0]
 801d998:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801d99c:	697b      	ldr	r3, [r7, #20]
 801d99e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d9a0:	693b      	ldr	r3, [r7, #16]
 801d9a2:	f383 8810 	msr	PRIMASK, r3
}
 801d9a6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801d9a8:	bf00      	nop
}
 801d9aa:	371c      	adds	r7, #28
 801d9ac:	46bd      	mov	sp, r7
 801d9ae:	bc80      	pop	{r7}
 801d9b0:	4770      	bx	lr
 801d9b2:	bf00      	nop
 801d9b4:	20001d94 	.word	0x20001d94
 801d9b8:	20001db4 	.word	0x20001db4

0801d9bc <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801d9bc:	b480      	push	{r7}
 801d9be:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801d9c0:	bf00      	nop
}
 801d9c2:	46bd      	mov	sp, r7
 801d9c4:	bc80      	pop	{r7}
 801d9c6:	4770      	bx	lr

0801d9c8 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801d9c8:	b480      	push	{r7}
 801d9ca:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801d9cc:	bf00      	nop
}
 801d9ce:	46bd      	mov	sp, r7
 801d9d0:	bc80      	pop	{r7}
 801d9d2:	4770      	bx	lr

0801d9d4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801d9d4:	b480      	push	{r7}
 801d9d6:	b085      	sub	sp, #20
 801d9d8:	af00      	add	r7, sp, #0
 801d9da:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801d9dc:	2300      	movs	r3, #0
 801d9de:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801d9e0:	687b      	ldr	r3, [r7, #4]
 801d9e2:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801d9e4:	68bb      	ldr	r3, [r7, #8]
 801d9e6:	0c1b      	lsrs	r3, r3, #16
 801d9e8:	041b      	lsls	r3, r3, #16
 801d9ea:	2b00      	cmp	r3, #0
 801d9ec:	d104      	bne.n	801d9f8 <SEQ_BitPosition+0x24>
 801d9ee:	2310      	movs	r3, #16
 801d9f0:	73fb      	strb	r3, [r7, #15]
 801d9f2:	68bb      	ldr	r3, [r7, #8]
 801d9f4:	041b      	lsls	r3, r3, #16
 801d9f6:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801d9f8:	68bb      	ldr	r3, [r7, #8]
 801d9fa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801d9fe:	2b00      	cmp	r3, #0
 801da00:	d105      	bne.n	801da0e <SEQ_BitPosition+0x3a>
 801da02:	7bfb      	ldrb	r3, [r7, #15]
 801da04:	3308      	adds	r3, #8
 801da06:	73fb      	strb	r3, [r7, #15]
 801da08:	68bb      	ldr	r3, [r7, #8]
 801da0a:	021b      	lsls	r3, r3, #8
 801da0c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801da0e:	68bb      	ldr	r3, [r7, #8]
 801da10:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801da14:	2b00      	cmp	r3, #0
 801da16:	d105      	bne.n	801da24 <SEQ_BitPosition+0x50>
 801da18:	7bfb      	ldrb	r3, [r7, #15]
 801da1a:	3304      	adds	r3, #4
 801da1c:	73fb      	strb	r3, [r7, #15]
 801da1e:	68bb      	ldr	r3, [r7, #8]
 801da20:	011b      	lsls	r3, r3, #4
 801da22:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801da24:	68bb      	ldr	r3, [r7, #8]
 801da26:	0f1b      	lsrs	r3, r3, #28
 801da28:	4a06      	ldr	r2, [pc, #24]	; (801da44 <SEQ_BitPosition+0x70>)
 801da2a:	5cd2      	ldrb	r2, [r2, r3]
 801da2c:	7bfb      	ldrb	r3, [r7, #15]
 801da2e:	4413      	add	r3, r2
 801da30:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801da32:	7bfb      	ldrb	r3, [r7, #15]
 801da34:	f1c3 031f 	rsb	r3, r3, #31
 801da38:	b2db      	uxtb	r3, r3
}
 801da3a:	4618      	mov	r0, r3
 801da3c:	3714      	adds	r7, #20
 801da3e:	46bd      	mov	sp, r7
 801da40:	bc80      	pop	{r7}
 801da42:	4770      	bx	lr
 801da44:	0801f634 	.word	0x0801f634

0801da48 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801da48:	b580      	push	{r7, lr}
 801da4a:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801da4c:	4b04      	ldr	r3, [pc, #16]	; (801da60 <UTIL_TIMER_Init+0x18>)
 801da4e:	2200      	movs	r2, #0
 801da50:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801da52:	4b04      	ldr	r3, [pc, #16]	; (801da64 <UTIL_TIMER_Init+0x1c>)
 801da54:	681b      	ldr	r3, [r3, #0]
 801da56:	4798      	blx	r3
 801da58:	4603      	mov	r3, r0
}
 801da5a:	4618      	mov	r0, r3
 801da5c:	bd80      	pop	{r7, pc}
 801da5e:	bf00      	nop
 801da60:	20001dbc 	.word	0x20001dbc
 801da64:	0801f064 	.word	0x0801f064

0801da68 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801da68:	b580      	push	{r7, lr}
 801da6a:	b084      	sub	sp, #16
 801da6c:	af00      	add	r7, sp, #0
 801da6e:	60f8      	str	r0, [r7, #12]
 801da70:	60b9      	str	r1, [r7, #8]
 801da72:	603b      	str	r3, [r7, #0]
 801da74:	4613      	mov	r3, r2
 801da76:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801da78:	68fb      	ldr	r3, [r7, #12]
 801da7a:	2b00      	cmp	r3, #0
 801da7c:	d023      	beq.n	801dac6 <UTIL_TIMER_Create+0x5e>
 801da7e:	683b      	ldr	r3, [r7, #0]
 801da80:	2b00      	cmp	r3, #0
 801da82:	d020      	beq.n	801dac6 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801da84:	68fb      	ldr	r3, [r7, #12]
 801da86:	2200      	movs	r2, #0
 801da88:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801da8a:	4b11      	ldr	r3, [pc, #68]	; (801dad0 <UTIL_TIMER_Create+0x68>)
 801da8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801da8e:	68b8      	ldr	r0, [r7, #8]
 801da90:	4798      	blx	r3
 801da92:	4602      	mov	r2, r0
 801da94:	68fb      	ldr	r3, [r7, #12]
 801da96:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801da98:	68fb      	ldr	r3, [r7, #12]
 801da9a:	2200      	movs	r2, #0
 801da9c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801da9e:	68fb      	ldr	r3, [r7, #12]
 801daa0:	2200      	movs	r2, #0
 801daa2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801daa4:	68fb      	ldr	r3, [r7, #12]
 801daa6:	2200      	movs	r2, #0
 801daa8:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801daaa:	68fb      	ldr	r3, [r7, #12]
 801daac:	683a      	ldr	r2, [r7, #0]
 801daae:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801dab0:	68fb      	ldr	r3, [r7, #12]
 801dab2:	69ba      	ldr	r2, [r7, #24]
 801dab4:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801dab6:	68fb      	ldr	r3, [r7, #12]
 801dab8:	79fa      	ldrb	r2, [r7, #7]
 801daba:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801dabc:	68fb      	ldr	r3, [r7, #12]
 801dabe:	2200      	movs	r2, #0
 801dac0:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801dac2:	2300      	movs	r3, #0
 801dac4:	e000      	b.n	801dac8 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801dac6:	2301      	movs	r3, #1
  }
}
 801dac8:	4618      	mov	r0, r3
 801daca:	3710      	adds	r7, #16
 801dacc:	46bd      	mov	sp, r7
 801dace:	bd80      	pop	{r7, pc}
 801dad0:	0801f064 	.word	0x0801f064

0801dad4 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801dad4:	b580      	push	{r7, lr}
 801dad6:	b08a      	sub	sp, #40	; 0x28
 801dad8:	af00      	add	r7, sp, #0
 801dada:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801dadc:	2300      	movs	r3, #0
 801dade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801dae2:	687b      	ldr	r3, [r7, #4]
 801dae4:	2b00      	cmp	r3, #0
 801dae6:	d056      	beq.n	801db96 <UTIL_TIMER_Start+0xc2>
 801dae8:	6878      	ldr	r0, [r7, #4]
 801daea:	f000 f9a9 	bl	801de40 <TimerExists>
 801daee:	4603      	mov	r3, r0
 801daf0:	f083 0301 	eor.w	r3, r3, #1
 801daf4:	b2db      	uxtb	r3, r3
 801daf6:	2b00      	cmp	r3, #0
 801daf8:	d04d      	beq.n	801db96 <UTIL_TIMER_Start+0xc2>
 801dafa:	687b      	ldr	r3, [r7, #4]
 801dafc:	7a5b      	ldrb	r3, [r3, #9]
 801dafe:	2b00      	cmp	r3, #0
 801db00:	d149      	bne.n	801db96 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801db02:	f3ef 8310 	mrs	r3, PRIMASK
 801db06:	613b      	str	r3, [r7, #16]
  return(result);
 801db08:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801db0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801db0c:	b672      	cpsid	i
}
 801db0e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801db10:	687b      	ldr	r3, [r7, #4]
 801db12:	685b      	ldr	r3, [r3, #4]
 801db14:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801db16:	4b24      	ldr	r3, [pc, #144]	; (801dba8 <UTIL_TIMER_Start+0xd4>)
 801db18:	6a1b      	ldr	r3, [r3, #32]
 801db1a:	4798      	blx	r3
 801db1c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801db1e:	6a3a      	ldr	r2, [r7, #32]
 801db20:	69bb      	ldr	r3, [r7, #24]
 801db22:	429a      	cmp	r2, r3
 801db24:	d201      	bcs.n	801db2a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801db26:	69bb      	ldr	r3, [r7, #24]
 801db28:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801db2a:	687b      	ldr	r3, [r7, #4]
 801db2c:	6a3a      	ldr	r2, [r7, #32]
 801db2e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801db30:	687b      	ldr	r3, [r7, #4]
 801db32:	2200      	movs	r2, #0
 801db34:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801db36:	687b      	ldr	r3, [r7, #4]
 801db38:	2201      	movs	r2, #1
 801db3a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801db3c:	687b      	ldr	r3, [r7, #4]
 801db3e:	2200      	movs	r2, #0
 801db40:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801db42:	4b1a      	ldr	r3, [pc, #104]	; (801dbac <UTIL_TIMER_Start+0xd8>)
 801db44:	681b      	ldr	r3, [r3, #0]
 801db46:	2b00      	cmp	r3, #0
 801db48:	d106      	bne.n	801db58 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801db4a:	4b17      	ldr	r3, [pc, #92]	; (801dba8 <UTIL_TIMER_Start+0xd4>)
 801db4c:	691b      	ldr	r3, [r3, #16]
 801db4e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801db50:	6878      	ldr	r0, [r7, #4]
 801db52:	f000 f9eb 	bl	801df2c <TimerInsertNewHeadTimer>
 801db56:	e017      	b.n	801db88 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801db58:	4b13      	ldr	r3, [pc, #76]	; (801dba8 <UTIL_TIMER_Start+0xd4>)
 801db5a:	699b      	ldr	r3, [r3, #24]
 801db5c:	4798      	blx	r3
 801db5e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801db60:	687b      	ldr	r3, [r7, #4]
 801db62:	681a      	ldr	r2, [r3, #0]
 801db64:	697b      	ldr	r3, [r7, #20]
 801db66:	441a      	add	r2, r3
 801db68:	687b      	ldr	r3, [r7, #4]
 801db6a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801db6c:	687b      	ldr	r3, [r7, #4]
 801db6e:	681a      	ldr	r2, [r3, #0]
 801db70:	4b0e      	ldr	r3, [pc, #56]	; (801dbac <UTIL_TIMER_Start+0xd8>)
 801db72:	681b      	ldr	r3, [r3, #0]
 801db74:	681b      	ldr	r3, [r3, #0]
 801db76:	429a      	cmp	r2, r3
 801db78:	d203      	bcs.n	801db82 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801db7a:	6878      	ldr	r0, [r7, #4]
 801db7c:	f000 f9d6 	bl	801df2c <TimerInsertNewHeadTimer>
 801db80:	e002      	b.n	801db88 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801db82:	6878      	ldr	r0, [r7, #4]
 801db84:	f000 f9a2 	bl	801decc <TimerInsertTimer>
 801db88:	69fb      	ldr	r3, [r7, #28]
 801db8a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db8c:	68fb      	ldr	r3, [r7, #12]
 801db8e:	f383 8810 	msr	PRIMASK, r3
}
 801db92:	bf00      	nop
  {
 801db94:	e002      	b.n	801db9c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801db96:	2301      	movs	r3, #1
 801db98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801db9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801dba0:	4618      	mov	r0, r3
 801dba2:	3728      	adds	r7, #40	; 0x28
 801dba4:	46bd      	mov	sp, r7
 801dba6:	bd80      	pop	{r7, pc}
 801dba8:	0801f064 	.word	0x0801f064
 801dbac:	20001dbc 	.word	0x20001dbc

0801dbb0 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801dbb0:	b580      	push	{r7, lr}
 801dbb2:	b088      	sub	sp, #32
 801dbb4:	af00      	add	r7, sp, #0
 801dbb6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801dbb8:	2300      	movs	r3, #0
 801dbba:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801dbbc:	687b      	ldr	r3, [r7, #4]
 801dbbe:	2b00      	cmp	r3, #0
 801dbc0:	d05b      	beq.n	801dc7a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dbc2:	f3ef 8310 	mrs	r3, PRIMASK
 801dbc6:	60fb      	str	r3, [r7, #12]
  return(result);
 801dbc8:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801dbca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801dbcc:	b672      	cpsid	i
}
 801dbce:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801dbd0:	4b2d      	ldr	r3, [pc, #180]	; (801dc88 <UTIL_TIMER_Stop+0xd8>)
 801dbd2:	681b      	ldr	r3, [r3, #0]
 801dbd4:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801dbd6:	4b2c      	ldr	r3, [pc, #176]	; (801dc88 <UTIL_TIMER_Stop+0xd8>)
 801dbd8:	681b      	ldr	r3, [r3, #0]
 801dbda:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801dbdc:	687b      	ldr	r3, [r7, #4]
 801dbde:	2201      	movs	r2, #1
 801dbe0:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801dbe2:	4b29      	ldr	r3, [pc, #164]	; (801dc88 <UTIL_TIMER_Stop+0xd8>)
 801dbe4:	681b      	ldr	r3, [r3, #0]
 801dbe6:	2b00      	cmp	r3, #0
 801dbe8:	d041      	beq.n	801dc6e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801dbea:	687b      	ldr	r3, [r7, #4]
 801dbec:	2200      	movs	r2, #0
 801dbee:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801dbf0:	4b25      	ldr	r3, [pc, #148]	; (801dc88 <UTIL_TIMER_Stop+0xd8>)
 801dbf2:	681b      	ldr	r3, [r3, #0]
 801dbf4:	687a      	ldr	r2, [r7, #4]
 801dbf6:	429a      	cmp	r2, r3
 801dbf8:	d134      	bne.n	801dc64 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801dbfa:	4b23      	ldr	r3, [pc, #140]	; (801dc88 <UTIL_TIMER_Stop+0xd8>)
 801dbfc:	681b      	ldr	r3, [r3, #0]
 801dbfe:	2200      	movs	r2, #0
 801dc00:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801dc02:	4b21      	ldr	r3, [pc, #132]	; (801dc88 <UTIL_TIMER_Stop+0xd8>)
 801dc04:	681b      	ldr	r3, [r3, #0]
 801dc06:	695b      	ldr	r3, [r3, #20]
 801dc08:	2b00      	cmp	r3, #0
 801dc0a:	d00a      	beq.n	801dc22 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801dc0c:	4b1e      	ldr	r3, [pc, #120]	; (801dc88 <UTIL_TIMER_Stop+0xd8>)
 801dc0e:	681b      	ldr	r3, [r3, #0]
 801dc10:	695b      	ldr	r3, [r3, #20]
 801dc12:	4a1d      	ldr	r2, [pc, #116]	; (801dc88 <UTIL_TIMER_Stop+0xd8>)
 801dc14:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801dc16:	4b1c      	ldr	r3, [pc, #112]	; (801dc88 <UTIL_TIMER_Stop+0xd8>)
 801dc18:	681b      	ldr	r3, [r3, #0]
 801dc1a:	4618      	mov	r0, r3
 801dc1c:	f000 f92c 	bl	801de78 <TimerSetTimeout>
 801dc20:	e023      	b.n	801dc6a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801dc22:	4b1a      	ldr	r3, [pc, #104]	; (801dc8c <UTIL_TIMER_Stop+0xdc>)
 801dc24:	68db      	ldr	r3, [r3, #12]
 801dc26:	4798      	blx	r3
            TimerListHead = NULL;
 801dc28:	4b17      	ldr	r3, [pc, #92]	; (801dc88 <UTIL_TIMER_Stop+0xd8>)
 801dc2a:	2200      	movs	r2, #0
 801dc2c:	601a      	str	r2, [r3, #0]
 801dc2e:	e01c      	b.n	801dc6a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801dc30:	697a      	ldr	r2, [r7, #20]
 801dc32:	687b      	ldr	r3, [r7, #4]
 801dc34:	429a      	cmp	r2, r3
 801dc36:	d110      	bne.n	801dc5a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801dc38:	697b      	ldr	r3, [r7, #20]
 801dc3a:	695b      	ldr	r3, [r3, #20]
 801dc3c:	2b00      	cmp	r3, #0
 801dc3e:	d006      	beq.n	801dc4e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801dc40:	697b      	ldr	r3, [r7, #20]
 801dc42:	695b      	ldr	r3, [r3, #20]
 801dc44:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801dc46:	69bb      	ldr	r3, [r7, #24]
 801dc48:	697a      	ldr	r2, [r7, #20]
 801dc4a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801dc4c:	e00d      	b.n	801dc6a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801dc4e:	2300      	movs	r3, #0
 801dc50:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801dc52:	69bb      	ldr	r3, [r7, #24]
 801dc54:	697a      	ldr	r2, [r7, #20]
 801dc56:	615a      	str	r2, [r3, #20]
            break;
 801dc58:	e007      	b.n	801dc6a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801dc5a:	697b      	ldr	r3, [r7, #20]
 801dc5c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801dc5e:	697b      	ldr	r3, [r7, #20]
 801dc60:	695b      	ldr	r3, [r3, #20]
 801dc62:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801dc64:	697b      	ldr	r3, [r7, #20]
 801dc66:	2b00      	cmp	r3, #0
 801dc68:	d1e2      	bne.n	801dc30 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801dc6a:	2300      	movs	r3, #0
 801dc6c:	77fb      	strb	r3, [r7, #31]
 801dc6e:	693b      	ldr	r3, [r7, #16]
 801dc70:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc72:	68bb      	ldr	r3, [r7, #8]
 801dc74:	f383 8810 	msr	PRIMASK, r3
}
 801dc78:	e001      	b.n	801dc7e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801dc7a:	2301      	movs	r3, #1
 801dc7c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801dc7e:	7ffb      	ldrb	r3, [r7, #31]
}
 801dc80:	4618      	mov	r0, r3
 801dc82:	3720      	adds	r7, #32
 801dc84:	46bd      	mov	sp, r7
 801dc86:	bd80      	pop	{r7, pc}
 801dc88:	20001dbc 	.word	0x20001dbc
 801dc8c:	0801f064 	.word	0x0801f064

0801dc90 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801dc90:	b580      	push	{r7, lr}
 801dc92:	b084      	sub	sp, #16
 801dc94:	af00      	add	r7, sp, #0
 801dc96:	6078      	str	r0, [r7, #4]
 801dc98:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801dc9a:	2300      	movs	r3, #0
 801dc9c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801dc9e:	687b      	ldr	r3, [r7, #4]
 801dca0:	2b00      	cmp	r3, #0
 801dca2:	d102      	bne.n	801dcaa <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801dca4:	2301      	movs	r3, #1
 801dca6:	73fb      	strb	r3, [r7, #15]
 801dca8:	e014      	b.n	801dcd4 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801dcaa:	4b0d      	ldr	r3, [pc, #52]	; (801dce0 <UTIL_TIMER_SetPeriod+0x50>)
 801dcac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dcae:	6838      	ldr	r0, [r7, #0]
 801dcb0:	4798      	blx	r3
 801dcb2:	4602      	mov	r2, r0
 801dcb4:	687b      	ldr	r3, [r7, #4]
 801dcb6:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801dcb8:	6878      	ldr	r0, [r7, #4]
 801dcba:	f000 f8c1 	bl	801de40 <TimerExists>
 801dcbe:	4603      	mov	r3, r0
 801dcc0:	2b00      	cmp	r3, #0
 801dcc2:	d007      	beq.n	801dcd4 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801dcc4:	6878      	ldr	r0, [r7, #4]
 801dcc6:	f7ff ff73 	bl	801dbb0 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801dcca:	6878      	ldr	r0, [r7, #4]
 801dccc:	f7ff ff02 	bl	801dad4 <UTIL_TIMER_Start>
 801dcd0:	4603      	mov	r3, r0
 801dcd2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801dcd4:	7bfb      	ldrb	r3, [r7, #15]
}
 801dcd6:	4618      	mov	r0, r3
 801dcd8:	3710      	adds	r7, #16
 801dcda:	46bd      	mov	sp, r7
 801dcdc:	bd80      	pop	{r7, pc}
 801dcde:	bf00      	nop
 801dce0:	0801f064 	.word	0x0801f064

0801dce4 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801dce4:	b590      	push	{r4, r7, lr}
 801dce6:	b089      	sub	sp, #36	; 0x24
 801dce8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dcea:	f3ef 8310 	mrs	r3, PRIMASK
 801dcee:	60bb      	str	r3, [r7, #8]
  return(result);
 801dcf0:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801dcf2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801dcf4:	b672      	cpsid	i
}
 801dcf6:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801dcf8:	4b38      	ldr	r3, [pc, #224]	; (801dddc <UTIL_TIMER_IRQ_Handler+0xf8>)
 801dcfa:	695b      	ldr	r3, [r3, #20]
 801dcfc:	4798      	blx	r3
 801dcfe:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801dd00:	4b36      	ldr	r3, [pc, #216]	; (801dddc <UTIL_TIMER_IRQ_Handler+0xf8>)
 801dd02:	691b      	ldr	r3, [r3, #16]
 801dd04:	4798      	blx	r3
 801dd06:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801dd08:	693a      	ldr	r2, [r7, #16]
 801dd0a:	697b      	ldr	r3, [r7, #20]
 801dd0c:	1ad3      	subs	r3, r2, r3
 801dd0e:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801dd10:	4b33      	ldr	r3, [pc, #204]	; (801dde0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dd12:	681b      	ldr	r3, [r3, #0]
 801dd14:	2b00      	cmp	r3, #0
 801dd16:	d037      	beq.n	801dd88 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801dd18:	4b31      	ldr	r3, [pc, #196]	; (801dde0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dd1a:	681b      	ldr	r3, [r3, #0]
 801dd1c:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801dd1e:	69fb      	ldr	r3, [r7, #28]
 801dd20:	681b      	ldr	r3, [r3, #0]
 801dd22:	68fa      	ldr	r2, [r7, #12]
 801dd24:	429a      	cmp	r2, r3
 801dd26:	d206      	bcs.n	801dd36 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801dd28:	69fb      	ldr	r3, [r7, #28]
 801dd2a:	681a      	ldr	r2, [r3, #0]
 801dd2c:	68fb      	ldr	r3, [r7, #12]
 801dd2e:	1ad2      	subs	r2, r2, r3
 801dd30:	69fb      	ldr	r3, [r7, #28]
 801dd32:	601a      	str	r2, [r3, #0]
 801dd34:	e002      	b.n	801dd3c <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801dd36:	69fb      	ldr	r3, [r7, #28]
 801dd38:	2200      	movs	r2, #0
 801dd3a:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801dd3c:	69fb      	ldr	r3, [r7, #28]
 801dd3e:	695b      	ldr	r3, [r3, #20]
 801dd40:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801dd42:	69fb      	ldr	r3, [r7, #28]
 801dd44:	2b00      	cmp	r3, #0
 801dd46:	d1ea      	bne.n	801dd1e <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801dd48:	e01e      	b.n	801dd88 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801dd4a:	4b25      	ldr	r3, [pc, #148]	; (801dde0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dd4c:	681b      	ldr	r3, [r3, #0]
 801dd4e:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801dd50:	4b23      	ldr	r3, [pc, #140]	; (801dde0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dd52:	681b      	ldr	r3, [r3, #0]
 801dd54:	695b      	ldr	r3, [r3, #20]
 801dd56:	4a22      	ldr	r2, [pc, #136]	; (801dde0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dd58:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801dd5a:	69fb      	ldr	r3, [r7, #28]
 801dd5c:	2200      	movs	r2, #0
 801dd5e:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801dd60:	69fb      	ldr	r3, [r7, #28]
 801dd62:	2200      	movs	r2, #0
 801dd64:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801dd66:	69fb      	ldr	r3, [r7, #28]
 801dd68:	68db      	ldr	r3, [r3, #12]
 801dd6a:	69fa      	ldr	r2, [r7, #28]
 801dd6c:	6912      	ldr	r2, [r2, #16]
 801dd6e:	4610      	mov	r0, r2
 801dd70:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801dd72:	69fb      	ldr	r3, [r7, #28]
 801dd74:	7adb      	ldrb	r3, [r3, #11]
 801dd76:	2b01      	cmp	r3, #1
 801dd78:	d106      	bne.n	801dd88 <UTIL_TIMER_IRQ_Handler+0xa4>
 801dd7a:	69fb      	ldr	r3, [r7, #28]
 801dd7c:	7a9b      	ldrb	r3, [r3, #10]
 801dd7e:	2b00      	cmp	r3, #0
 801dd80:	d102      	bne.n	801dd88 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801dd82:	69f8      	ldr	r0, [r7, #28]
 801dd84:	f7ff fea6 	bl	801dad4 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801dd88:	4b15      	ldr	r3, [pc, #84]	; (801dde0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dd8a:	681b      	ldr	r3, [r3, #0]
 801dd8c:	2b00      	cmp	r3, #0
 801dd8e:	d00d      	beq.n	801ddac <UTIL_TIMER_IRQ_Handler+0xc8>
 801dd90:	4b13      	ldr	r3, [pc, #76]	; (801dde0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dd92:	681b      	ldr	r3, [r3, #0]
 801dd94:	681b      	ldr	r3, [r3, #0]
 801dd96:	2b00      	cmp	r3, #0
 801dd98:	d0d7      	beq.n	801dd4a <UTIL_TIMER_IRQ_Handler+0x66>
 801dd9a:	4b11      	ldr	r3, [pc, #68]	; (801dde0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dd9c:	681b      	ldr	r3, [r3, #0]
 801dd9e:	681c      	ldr	r4, [r3, #0]
 801dda0:	4b0e      	ldr	r3, [pc, #56]	; (801dddc <UTIL_TIMER_IRQ_Handler+0xf8>)
 801dda2:	699b      	ldr	r3, [r3, #24]
 801dda4:	4798      	blx	r3
 801dda6:	4603      	mov	r3, r0
 801dda8:	429c      	cmp	r4, r3
 801ddaa:	d3ce      	bcc.n	801dd4a <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801ddac:	4b0c      	ldr	r3, [pc, #48]	; (801dde0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ddae:	681b      	ldr	r3, [r3, #0]
 801ddb0:	2b00      	cmp	r3, #0
 801ddb2:	d009      	beq.n	801ddc8 <UTIL_TIMER_IRQ_Handler+0xe4>
 801ddb4:	4b0a      	ldr	r3, [pc, #40]	; (801dde0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ddb6:	681b      	ldr	r3, [r3, #0]
 801ddb8:	7a1b      	ldrb	r3, [r3, #8]
 801ddba:	2b00      	cmp	r3, #0
 801ddbc:	d104      	bne.n	801ddc8 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801ddbe:	4b08      	ldr	r3, [pc, #32]	; (801dde0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ddc0:	681b      	ldr	r3, [r3, #0]
 801ddc2:	4618      	mov	r0, r3
 801ddc4:	f000 f858 	bl	801de78 <TimerSetTimeout>
 801ddc8:	69bb      	ldr	r3, [r7, #24]
 801ddca:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ddcc:	687b      	ldr	r3, [r7, #4]
 801ddce:	f383 8810 	msr	PRIMASK, r3
}
 801ddd2:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801ddd4:	bf00      	nop
 801ddd6:	3724      	adds	r7, #36	; 0x24
 801ddd8:	46bd      	mov	sp, r7
 801ddda:	bd90      	pop	{r4, r7, pc}
 801dddc:	0801f064 	.word	0x0801f064
 801dde0:	20001dbc 	.word	0x20001dbc

0801dde4 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801dde4:	b580      	push	{r7, lr}
 801dde6:	b082      	sub	sp, #8
 801dde8:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801ddea:	4b06      	ldr	r3, [pc, #24]	; (801de04 <UTIL_TIMER_GetCurrentTime+0x20>)
 801ddec:	69db      	ldr	r3, [r3, #28]
 801ddee:	4798      	blx	r3
 801ddf0:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801ddf2:	4b04      	ldr	r3, [pc, #16]	; (801de04 <UTIL_TIMER_GetCurrentTime+0x20>)
 801ddf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ddf6:	6878      	ldr	r0, [r7, #4]
 801ddf8:	4798      	blx	r3
 801ddfa:	4603      	mov	r3, r0
}
 801ddfc:	4618      	mov	r0, r3
 801ddfe:	3708      	adds	r7, #8
 801de00:	46bd      	mov	sp, r7
 801de02:	bd80      	pop	{r7, pc}
 801de04:	0801f064 	.word	0x0801f064

0801de08 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801de08:	b580      	push	{r7, lr}
 801de0a:	b084      	sub	sp, #16
 801de0c:	af00      	add	r7, sp, #0
 801de0e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801de10:	4b0a      	ldr	r3, [pc, #40]	; (801de3c <UTIL_TIMER_GetElapsedTime+0x34>)
 801de12:	69db      	ldr	r3, [r3, #28]
 801de14:	4798      	blx	r3
 801de16:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801de18:	4b08      	ldr	r3, [pc, #32]	; (801de3c <UTIL_TIMER_GetElapsedTime+0x34>)
 801de1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801de1c:	6878      	ldr	r0, [r7, #4]
 801de1e:	4798      	blx	r3
 801de20:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801de22:	4b06      	ldr	r3, [pc, #24]	; (801de3c <UTIL_TIMER_GetElapsedTime+0x34>)
 801de24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801de26:	68f9      	ldr	r1, [r7, #12]
 801de28:	68ba      	ldr	r2, [r7, #8]
 801de2a:	1a8a      	subs	r2, r1, r2
 801de2c:	4610      	mov	r0, r2
 801de2e:	4798      	blx	r3
 801de30:	4603      	mov	r3, r0
}
 801de32:	4618      	mov	r0, r3
 801de34:	3710      	adds	r7, #16
 801de36:	46bd      	mov	sp, r7
 801de38:	bd80      	pop	{r7, pc}
 801de3a:	bf00      	nop
 801de3c:	0801f064 	.word	0x0801f064

0801de40 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801de40:	b480      	push	{r7}
 801de42:	b085      	sub	sp, #20
 801de44:	af00      	add	r7, sp, #0
 801de46:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801de48:	4b0a      	ldr	r3, [pc, #40]	; (801de74 <TimerExists+0x34>)
 801de4a:	681b      	ldr	r3, [r3, #0]
 801de4c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801de4e:	e008      	b.n	801de62 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801de50:	68fa      	ldr	r2, [r7, #12]
 801de52:	687b      	ldr	r3, [r7, #4]
 801de54:	429a      	cmp	r2, r3
 801de56:	d101      	bne.n	801de5c <TimerExists+0x1c>
    {
      return true;
 801de58:	2301      	movs	r3, #1
 801de5a:	e006      	b.n	801de6a <TimerExists+0x2a>
    }
    cur = cur->Next;
 801de5c:	68fb      	ldr	r3, [r7, #12]
 801de5e:	695b      	ldr	r3, [r3, #20]
 801de60:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801de62:	68fb      	ldr	r3, [r7, #12]
 801de64:	2b00      	cmp	r3, #0
 801de66:	d1f3      	bne.n	801de50 <TimerExists+0x10>
  }
  return false;
 801de68:	2300      	movs	r3, #0
}
 801de6a:	4618      	mov	r0, r3
 801de6c:	3714      	adds	r7, #20
 801de6e:	46bd      	mov	sp, r7
 801de70:	bc80      	pop	{r7}
 801de72:	4770      	bx	lr
 801de74:	20001dbc 	.word	0x20001dbc

0801de78 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801de78:	b590      	push	{r4, r7, lr}
 801de7a:	b085      	sub	sp, #20
 801de7c:	af00      	add	r7, sp, #0
 801de7e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801de80:	4b11      	ldr	r3, [pc, #68]	; (801dec8 <TimerSetTimeout+0x50>)
 801de82:	6a1b      	ldr	r3, [r3, #32]
 801de84:	4798      	blx	r3
 801de86:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801de88:	687b      	ldr	r3, [r7, #4]
 801de8a:	2201      	movs	r2, #1
 801de8c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801de8e:	687b      	ldr	r3, [r7, #4]
 801de90:	681c      	ldr	r4, [r3, #0]
 801de92:	4b0d      	ldr	r3, [pc, #52]	; (801dec8 <TimerSetTimeout+0x50>)
 801de94:	699b      	ldr	r3, [r3, #24]
 801de96:	4798      	blx	r3
 801de98:	4602      	mov	r2, r0
 801de9a:	68fb      	ldr	r3, [r7, #12]
 801de9c:	4413      	add	r3, r2
 801de9e:	429c      	cmp	r4, r3
 801dea0:	d207      	bcs.n	801deb2 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801dea2:	4b09      	ldr	r3, [pc, #36]	; (801dec8 <TimerSetTimeout+0x50>)
 801dea4:	699b      	ldr	r3, [r3, #24]
 801dea6:	4798      	blx	r3
 801dea8:	4602      	mov	r2, r0
 801deaa:	68fb      	ldr	r3, [r7, #12]
 801deac:	441a      	add	r2, r3
 801deae:	687b      	ldr	r3, [r7, #4]
 801deb0:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801deb2:	4b05      	ldr	r3, [pc, #20]	; (801dec8 <TimerSetTimeout+0x50>)
 801deb4:	689b      	ldr	r3, [r3, #8]
 801deb6:	687a      	ldr	r2, [r7, #4]
 801deb8:	6812      	ldr	r2, [r2, #0]
 801deba:	4610      	mov	r0, r2
 801debc:	4798      	blx	r3
}
 801debe:	bf00      	nop
 801dec0:	3714      	adds	r7, #20
 801dec2:	46bd      	mov	sp, r7
 801dec4:	bd90      	pop	{r4, r7, pc}
 801dec6:	bf00      	nop
 801dec8:	0801f064 	.word	0x0801f064

0801decc <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801decc:	b480      	push	{r7}
 801dece:	b085      	sub	sp, #20
 801ded0:	af00      	add	r7, sp, #0
 801ded2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801ded4:	4b14      	ldr	r3, [pc, #80]	; (801df28 <TimerInsertTimer+0x5c>)
 801ded6:	681b      	ldr	r3, [r3, #0]
 801ded8:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801deda:	4b13      	ldr	r3, [pc, #76]	; (801df28 <TimerInsertTimer+0x5c>)
 801dedc:	681b      	ldr	r3, [r3, #0]
 801dede:	695b      	ldr	r3, [r3, #20]
 801dee0:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801dee2:	e012      	b.n	801df0a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801dee4:	687b      	ldr	r3, [r7, #4]
 801dee6:	681a      	ldr	r2, [r3, #0]
 801dee8:	68bb      	ldr	r3, [r7, #8]
 801deea:	681b      	ldr	r3, [r3, #0]
 801deec:	429a      	cmp	r2, r3
 801deee:	d905      	bls.n	801defc <TimerInsertTimer+0x30>
    {
        cur = next;
 801def0:	68bb      	ldr	r3, [r7, #8]
 801def2:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801def4:	68bb      	ldr	r3, [r7, #8]
 801def6:	695b      	ldr	r3, [r3, #20]
 801def8:	60bb      	str	r3, [r7, #8]
 801defa:	e006      	b.n	801df0a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801defc:	68fb      	ldr	r3, [r7, #12]
 801defe:	687a      	ldr	r2, [r7, #4]
 801df00:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801df02:	687b      	ldr	r3, [r7, #4]
 801df04:	68ba      	ldr	r2, [r7, #8]
 801df06:	615a      	str	r2, [r3, #20]
        return;
 801df08:	e009      	b.n	801df1e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801df0a:	68fb      	ldr	r3, [r7, #12]
 801df0c:	695b      	ldr	r3, [r3, #20]
 801df0e:	2b00      	cmp	r3, #0
 801df10:	d1e8      	bne.n	801dee4 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801df12:	68fb      	ldr	r3, [r7, #12]
 801df14:	687a      	ldr	r2, [r7, #4]
 801df16:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801df18:	687b      	ldr	r3, [r7, #4]
 801df1a:	2200      	movs	r2, #0
 801df1c:	615a      	str	r2, [r3, #20]
}
 801df1e:	3714      	adds	r7, #20
 801df20:	46bd      	mov	sp, r7
 801df22:	bc80      	pop	{r7}
 801df24:	4770      	bx	lr
 801df26:	bf00      	nop
 801df28:	20001dbc 	.word	0x20001dbc

0801df2c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801df2c:	b580      	push	{r7, lr}
 801df2e:	b084      	sub	sp, #16
 801df30:	af00      	add	r7, sp, #0
 801df32:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801df34:	4b0b      	ldr	r3, [pc, #44]	; (801df64 <TimerInsertNewHeadTimer+0x38>)
 801df36:	681b      	ldr	r3, [r3, #0]
 801df38:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801df3a:	68fb      	ldr	r3, [r7, #12]
 801df3c:	2b00      	cmp	r3, #0
 801df3e:	d002      	beq.n	801df46 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801df40:	68fb      	ldr	r3, [r7, #12]
 801df42:	2200      	movs	r2, #0
 801df44:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801df46:	687b      	ldr	r3, [r7, #4]
 801df48:	68fa      	ldr	r2, [r7, #12]
 801df4a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801df4c:	4a05      	ldr	r2, [pc, #20]	; (801df64 <TimerInsertNewHeadTimer+0x38>)
 801df4e:	687b      	ldr	r3, [r7, #4]
 801df50:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801df52:	4b04      	ldr	r3, [pc, #16]	; (801df64 <TimerInsertNewHeadTimer+0x38>)
 801df54:	681b      	ldr	r3, [r3, #0]
 801df56:	4618      	mov	r0, r3
 801df58:	f7ff ff8e 	bl	801de78 <TimerSetTimeout>
}
 801df5c:	bf00      	nop
 801df5e:	3710      	adds	r7, #16
 801df60:	46bd      	mov	sp, r7
 801df62:	bd80      	pop	{r7, pc}
 801df64:	20001dbc 	.word	0x20001dbc

0801df68 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801df68:	b580      	push	{r7, lr}
 801df6a:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801df6c:	2218      	movs	r2, #24
 801df6e:	2100      	movs	r1, #0
 801df70:	4807      	ldr	r0, [pc, #28]	; (801df90 <UTIL_ADV_TRACE_Init+0x28>)
 801df72:	f7fe fffa 	bl	801cf6a <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801df76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801df7a:	2100      	movs	r1, #0
 801df7c:	4805      	ldr	r0, [pc, #20]	; (801df94 <UTIL_ADV_TRACE_Init+0x2c>)
 801df7e:	f7fe fff4 	bl	801cf6a <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801df82:	4b05      	ldr	r3, [pc, #20]	; (801df98 <UTIL_ADV_TRACE_Init+0x30>)
 801df84:	681b      	ldr	r3, [r3, #0]
 801df86:	4805      	ldr	r0, [pc, #20]	; (801df9c <UTIL_ADV_TRACE_Init+0x34>)
 801df88:	4798      	blx	r3
 801df8a:	4603      	mov	r3, r0
}
 801df8c:	4618      	mov	r0, r3
 801df8e:	bd80      	pop	{r7, pc}
 801df90:	20001dc0 	.word	0x20001dc0
 801df94:	20001dd8 	.word	0x20001dd8
 801df98:	0801f0a4 	.word	0x0801f0a4
 801df9c:	0801e209 	.word	0x0801e209

0801dfa0 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801dfa0:	b480      	push	{r7}
 801dfa2:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801dfa4:	4b06      	ldr	r3, [pc, #24]	; (801dfc0 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801dfa6:	8a5a      	ldrh	r2, [r3, #18]
 801dfa8:	4b05      	ldr	r3, [pc, #20]	; (801dfc0 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801dfaa:	8a1b      	ldrh	r3, [r3, #16]
 801dfac:	429a      	cmp	r2, r3
 801dfae:	d101      	bne.n	801dfb4 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801dfb0:	2301      	movs	r3, #1
 801dfb2:	e000      	b.n	801dfb6 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801dfb4:	2300      	movs	r3, #0
}
 801dfb6:	4618      	mov	r0, r3
 801dfb8:	46bd      	mov	sp, r7
 801dfba:	bc80      	pop	{r7}
 801dfbc:	4770      	bx	lr
 801dfbe:	bf00      	nop
 801dfc0:	20001dc0 	.word	0x20001dc0

0801dfc4 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801dfc4:	b408      	push	{r3}
 801dfc6:	b580      	push	{r7, lr}
 801dfc8:	b08d      	sub	sp, #52	; 0x34
 801dfca:	af00      	add	r7, sp, #0
 801dfcc:	60f8      	str	r0, [r7, #12]
 801dfce:	60b9      	str	r1, [r7, #8]
 801dfd0:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801dfd2:	2300      	movs	r3, #0
 801dfd4:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801dfd6:	2300      	movs	r3, #0
 801dfd8:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801dfda:	4b37      	ldr	r3, [pc, #220]	; (801e0b8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801dfdc:	7a1b      	ldrb	r3, [r3, #8]
 801dfde:	461a      	mov	r2, r3
 801dfe0:	68fb      	ldr	r3, [r7, #12]
 801dfe2:	4293      	cmp	r3, r2
 801dfe4:	d902      	bls.n	801dfec <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801dfe6:	f06f 0304 	mvn.w	r3, #4
 801dfea:	e05e      	b.n	801e0aa <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801dfec:	4b32      	ldr	r3, [pc, #200]	; (801e0b8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801dfee:	68da      	ldr	r2, [r3, #12]
 801dff0:	68bb      	ldr	r3, [r7, #8]
 801dff2:	4013      	ands	r3, r2
 801dff4:	68ba      	ldr	r2, [r7, #8]
 801dff6:	429a      	cmp	r2, r3
 801dff8:	d002      	beq.n	801e000 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801dffa:	f06f 0305 	mvn.w	r3, #5
 801dffe:	e054      	b.n	801e0aa <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801e000:	4b2d      	ldr	r3, [pc, #180]	; (801e0b8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e002:	685b      	ldr	r3, [r3, #4]
 801e004:	2b00      	cmp	r3, #0
 801e006:	d00a      	beq.n	801e01e <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801e008:	687b      	ldr	r3, [r7, #4]
 801e00a:	2b00      	cmp	r3, #0
 801e00c:	d007      	beq.n	801e01e <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801e00e:	4b2a      	ldr	r3, [pc, #168]	; (801e0b8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e010:	685b      	ldr	r3, [r3, #4]
 801e012:	f107 0116 	add.w	r1, r7, #22
 801e016:	f107 0218 	add.w	r2, r7, #24
 801e01a:	4610      	mov	r0, r2
 801e01c:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801e01e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e022:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801e024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e026:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e028:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e02c:	4823      	ldr	r0, [pc, #140]	; (801e0bc <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801e02e:	f7ff fa29 	bl	801d484 <tiny_vsnprintf_like>
 801e032:	4603      	mov	r3, r0
 801e034:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801e036:	f000 f9f1 	bl	801e41c <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801e03a:	8afa      	ldrh	r2, [r7, #22]
 801e03c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e03e:	4413      	add	r3, r2
 801e040:	b29b      	uxth	r3, r3
 801e042:	f107 0214 	add.w	r2, r7, #20
 801e046:	4611      	mov	r1, r2
 801e048:	4618      	mov	r0, r3
 801e04a:	f000 f969 	bl	801e320 <TRACE_AllocateBufer>
 801e04e:	4603      	mov	r3, r0
 801e050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e054:	d025      	beq.n	801e0a2 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801e056:	2300      	movs	r3, #0
 801e058:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801e05a:	e00e      	b.n	801e07a <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801e05c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e05e:	8aba      	ldrh	r2, [r7, #20]
 801e060:	3330      	adds	r3, #48	; 0x30
 801e062:	443b      	add	r3, r7
 801e064:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801e068:	4b15      	ldr	r3, [pc, #84]	; (801e0c0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801e06a:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801e06c:	8abb      	ldrh	r3, [r7, #20]
 801e06e:	3301      	adds	r3, #1
 801e070:	b29b      	uxth	r3, r3
 801e072:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801e074:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e076:	3301      	adds	r3, #1
 801e078:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801e07a:	8afb      	ldrh	r3, [r7, #22]
 801e07c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801e07e:	429a      	cmp	r2, r3
 801e080:	d3ec      	bcc.n	801e05c <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801e082:	8abb      	ldrh	r3, [r7, #20]
 801e084:	461a      	mov	r2, r3
 801e086:	4b0e      	ldr	r3, [pc, #56]	; (801e0c0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801e088:	18d0      	adds	r0, r2, r3
 801e08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e08c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e08e:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e092:	f7ff f9f7 	bl	801d484 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801e096:	f000 f9df 	bl	801e458 <TRACE_UnLock>

    return TRACE_Send();
 801e09a:	f000 f831 	bl	801e100 <TRACE_Send>
 801e09e:	4603      	mov	r3, r0
 801e0a0:	e003      	b.n	801e0aa <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801e0a2:	f000 f9d9 	bl	801e458 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801e0a6:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801e0aa:	4618      	mov	r0, r3
 801e0ac:	3734      	adds	r7, #52	; 0x34
 801e0ae:	46bd      	mov	sp, r7
 801e0b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801e0b4:	b001      	add	sp, #4
 801e0b6:	4770      	bx	lr
 801e0b8:	20001dc0 	.word	0x20001dc0
 801e0bc:	200021d8 	.word	0x200021d8
 801e0c0:	20001dd8 	.word	0x20001dd8

0801e0c4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801e0c4:	b480      	push	{r7}
 801e0c6:	b083      	sub	sp, #12
 801e0c8:	af00      	add	r7, sp, #0
 801e0ca:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801e0cc:	4a03      	ldr	r2, [pc, #12]	; (801e0dc <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801e0ce:	687b      	ldr	r3, [r7, #4]
 801e0d0:	6053      	str	r3, [r2, #4]
}
 801e0d2:	bf00      	nop
 801e0d4:	370c      	adds	r7, #12
 801e0d6:	46bd      	mov	sp, r7
 801e0d8:	bc80      	pop	{r7}
 801e0da:	4770      	bx	lr
 801e0dc:	20001dc0 	.word	0x20001dc0

0801e0e0 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801e0e0:	b480      	push	{r7}
 801e0e2:	b083      	sub	sp, #12
 801e0e4:	af00      	add	r7, sp, #0
 801e0e6:	4603      	mov	r3, r0
 801e0e8:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801e0ea:	4a04      	ldr	r2, [pc, #16]	; (801e0fc <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801e0ec:	79fb      	ldrb	r3, [r7, #7]
 801e0ee:	7213      	strb	r3, [r2, #8]
}
 801e0f0:	bf00      	nop
 801e0f2:	370c      	adds	r7, #12
 801e0f4:	46bd      	mov	sp, r7
 801e0f6:	bc80      	pop	{r7}
 801e0f8:	4770      	bx	lr
 801e0fa:	bf00      	nop
 801e0fc:	20001dc0 	.word	0x20001dc0

0801e100 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801e100:	b580      	push	{r7, lr}
 801e102:	b088      	sub	sp, #32
 801e104:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801e106:	2300      	movs	r3, #0
 801e108:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801e10a:	2300      	movs	r3, #0
 801e10c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e10e:	f3ef 8310 	mrs	r3, PRIMASK
 801e112:	613b      	str	r3, [r7, #16]
  return(result);
 801e114:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e116:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e118:	b672      	cpsid	i
}
 801e11a:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801e11c:	f000 f9ba 	bl	801e494 <TRACE_IsLocked>
 801e120:	4603      	mov	r3, r0
 801e122:	2b00      	cmp	r3, #0
 801e124:	d15d      	bne.n	801e1e2 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801e126:	f000 f979 	bl	801e41c <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801e12a:	4b34      	ldr	r3, [pc, #208]	; (801e1fc <TRACE_Send+0xfc>)
 801e12c:	8a1a      	ldrh	r2, [r3, #16]
 801e12e:	4b33      	ldr	r3, [pc, #204]	; (801e1fc <TRACE_Send+0xfc>)
 801e130:	8a5b      	ldrh	r3, [r3, #18]
 801e132:	429a      	cmp	r2, r3
 801e134:	d04d      	beq.n	801e1d2 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801e136:	4b31      	ldr	r3, [pc, #196]	; (801e1fc <TRACE_Send+0xfc>)
 801e138:	789b      	ldrb	r3, [r3, #2]
 801e13a:	2b01      	cmp	r3, #1
 801e13c:	d117      	bne.n	801e16e <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801e13e:	4b2f      	ldr	r3, [pc, #188]	; (801e1fc <TRACE_Send+0xfc>)
 801e140:	881a      	ldrh	r2, [r3, #0]
 801e142:	4b2e      	ldr	r3, [pc, #184]	; (801e1fc <TRACE_Send+0xfc>)
 801e144:	8a1b      	ldrh	r3, [r3, #16]
 801e146:	1ad3      	subs	r3, r2, r3
 801e148:	b29a      	uxth	r2, r3
 801e14a:	4b2c      	ldr	r3, [pc, #176]	; (801e1fc <TRACE_Send+0xfc>)
 801e14c:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801e14e:	4b2b      	ldr	r3, [pc, #172]	; (801e1fc <TRACE_Send+0xfc>)
 801e150:	2202      	movs	r2, #2
 801e152:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801e154:	4b29      	ldr	r3, [pc, #164]	; (801e1fc <TRACE_Send+0xfc>)
 801e156:	2200      	movs	r2, #0
 801e158:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801e15a:	4b28      	ldr	r3, [pc, #160]	; (801e1fc <TRACE_Send+0xfc>)
 801e15c:	8a9b      	ldrh	r3, [r3, #20]
 801e15e:	2b00      	cmp	r3, #0
 801e160:	d105      	bne.n	801e16e <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e162:	4b26      	ldr	r3, [pc, #152]	; (801e1fc <TRACE_Send+0xfc>)
 801e164:	2200      	movs	r2, #0
 801e166:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e168:	4b24      	ldr	r3, [pc, #144]	; (801e1fc <TRACE_Send+0xfc>)
 801e16a:	2200      	movs	r2, #0
 801e16c:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801e16e:	4b23      	ldr	r3, [pc, #140]	; (801e1fc <TRACE_Send+0xfc>)
 801e170:	789b      	ldrb	r3, [r3, #2]
 801e172:	2b00      	cmp	r3, #0
 801e174:	d115      	bne.n	801e1a2 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e176:	4b21      	ldr	r3, [pc, #132]	; (801e1fc <TRACE_Send+0xfc>)
 801e178:	8a5a      	ldrh	r2, [r3, #18]
 801e17a:	4b20      	ldr	r3, [pc, #128]	; (801e1fc <TRACE_Send+0xfc>)
 801e17c:	8a1b      	ldrh	r3, [r3, #16]
 801e17e:	429a      	cmp	r2, r3
 801e180:	d908      	bls.n	801e194 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801e182:	4b1e      	ldr	r3, [pc, #120]	; (801e1fc <TRACE_Send+0xfc>)
 801e184:	8a5a      	ldrh	r2, [r3, #18]
 801e186:	4b1d      	ldr	r3, [pc, #116]	; (801e1fc <TRACE_Send+0xfc>)
 801e188:	8a1b      	ldrh	r3, [r3, #16]
 801e18a:	1ad3      	subs	r3, r2, r3
 801e18c:	b29a      	uxth	r2, r3
 801e18e:	4b1b      	ldr	r3, [pc, #108]	; (801e1fc <TRACE_Send+0xfc>)
 801e190:	829a      	strh	r2, [r3, #20]
 801e192:	e006      	b.n	801e1a2 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801e194:	4b19      	ldr	r3, [pc, #100]	; (801e1fc <TRACE_Send+0xfc>)
 801e196:	8a1b      	ldrh	r3, [r3, #16]
 801e198:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e19c:	b29a      	uxth	r2, r3
 801e19e:	4b17      	ldr	r3, [pc, #92]	; (801e1fc <TRACE_Send+0xfc>)
 801e1a0:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801e1a2:	4b16      	ldr	r3, [pc, #88]	; (801e1fc <TRACE_Send+0xfc>)
 801e1a4:	8a1b      	ldrh	r3, [r3, #16]
 801e1a6:	461a      	mov	r2, r3
 801e1a8:	4b15      	ldr	r3, [pc, #84]	; (801e200 <TRACE_Send+0x100>)
 801e1aa:	4413      	add	r3, r2
 801e1ac:	61bb      	str	r3, [r7, #24]
 801e1ae:	697b      	ldr	r3, [r7, #20]
 801e1b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e1b2:	68fb      	ldr	r3, [r7, #12]
 801e1b4:	f383 8810 	msr	PRIMASK, r3
}
 801e1b8:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801e1ba:	f7e4 fadb 	bl	8002774 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801e1be:	4b11      	ldr	r3, [pc, #68]	; (801e204 <TRACE_Send+0x104>)
 801e1c0:	68db      	ldr	r3, [r3, #12]
 801e1c2:	4a0e      	ldr	r2, [pc, #56]	; (801e1fc <TRACE_Send+0xfc>)
 801e1c4:	8a92      	ldrh	r2, [r2, #20]
 801e1c6:	4611      	mov	r1, r2
 801e1c8:	69b8      	ldr	r0, [r7, #24]
 801e1ca:	4798      	blx	r3
 801e1cc:	4603      	mov	r3, r0
 801e1ce:	77fb      	strb	r3, [r7, #31]
 801e1d0:	e00d      	b.n	801e1ee <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801e1d2:	f000 f941 	bl	801e458 <TRACE_UnLock>
 801e1d6:	697b      	ldr	r3, [r7, #20]
 801e1d8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e1da:	68bb      	ldr	r3, [r7, #8]
 801e1dc:	f383 8810 	msr	PRIMASK, r3
}
 801e1e0:	e005      	b.n	801e1ee <TRACE_Send+0xee>
 801e1e2:	697b      	ldr	r3, [r7, #20]
 801e1e4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e1e6:	687b      	ldr	r3, [r7, #4]
 801e1e8:	f383 8810 	msr	PRIMASK, r3
}
 801e1ec:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801e1ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801e1f2:	4618      	mov	r0, r3
 801e1f4:	3720      	adds	r7, #32
 801e1f6:	46bd      	mov	sp, r7
 801e1f8:	bd80      	pop	{r7, pc}
 801e1fa:	bf00      	nop
 801e1fc:	20001dc0 	.word	0x20001dc0
 801e200:	20001dd8 	.word	0x20001dd8
 801e204:	0801f0a4 	.word	0x0801f0a4

0801e208 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801e208:	b580      	push	{r7, lr}
 801e20a:	b088      	sub	sp, #32
 801e20c:	af00      	add	r7, sp, #0
 801e20e:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801e210:	2300      	movs	r3, #0
 801e212:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e214:	f3ef 8310 	mrs	r3, PRIMASK
 801e218:	617b      	str	r3, [r7, #20]
  return(result);
 801e21a:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e21c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801e21e:	b672      	cpsid	i
}
 801e220:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801e222:	4b3c      	ldr	r3, [pc, #240]	; (801e314 <TRACE_TxCpltCallback+0x10c>)
 801e224:	789b      	ldrb	r3, [r3, #2]
 801e226:	2b02      	cmp	r3, #2
 801e228:	d106      	bne.n	801e238 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e22a:	4b3a      	ldr	r3, [pc, #232]	; (801e314 <TRACE_TxCpltCallback+0x10c>)
 801e22c:	2200      	movs	r2, #0
 801e22e:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e230:	4b38      	ldr	r3, [pc, #224]	; (801e314 <TRACE_TxCpltCallback+0x10c>)
 801e232:	2200      	movs	r2, #0
 801e234:	821a      	strh	r2, [r3, #16]
 801e236:	e00a      	b.n	801e24e <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801e238:	4b36      	ldr	r3, [pc, #216]	; (801e314 <TRACE_TxCpltCallback+0x10c>)
 801e23a:	8a1a      	ldrh	r2, [r3, #16]
 801e23c:	4b35      	ldr	r3, [pc, #212]	; (801e314 <TRACE_TxCpltCallback+0x10c>)
 801e23e:	8a9b      	ldrh	r3, [r3, #20]
 801e240:	4413      	add	r3, r2
 801e242:	b29b      	uxth	r3, r3
 801e244:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801e248:	b29a      	uxth	r2, r3
 801e24a:	4b32      	ldr	r3, [pc, #200]	; (801e314 <TRACE_TxCpltCallback+0x10c>)
 801e24c:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801e24e:	4b31      	ldr	r3, [pc, #196]	; (801e314 <TRACE_TxCpltCallback+0x10c>)
 801e250:	8a1a      	ldrh	r2, [r3, #16]
 801e252:	4b30      	ldr	r3, [pc, #192]	; (801e314 <TRACE_TxCpltCallback+0x10c>)
 801e254:	8a5b      	ldrh	r3, [r3, #18]
 801e256:	429a      	cmp	r2, r3
 801e258:	d04d      	beq.n	801e2f6 <TRACE_TxCpltCallback+0xee>
 801e25a:	4b2e      	ldr	r3, [pc, #184]	; (801e314 <TRACE_TxCpltCallback+0x10c>)
 801e25c:	8adb      	ldrh	r3, [r3, #22]
 801e25e:	2b01      	cmp	r3, #1
 801e260:	d149      	bne.n	801e2f6 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801e262:	4b2c      	ldr	r3, [pc, #176]	; (801e314 <TRACE_TxCpltCallback+0x10c>)
 801e264:	789b      	ldrb	r3, [r3, #2]
 801e266:	2b01      	cmp	r3, #1
 801e268:	d117      	bne.n	801e29a <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801e26a:	4b2a      	ldr	r3, [pc, #168]	; (801e314 <TRACE_TxCpltCallback+0x10c>)
 801e26c:	881a      	ldrh	r2, [r3, #0]
 801e26e:	4b29      	ldr	r3, [pc, #164]	; (801e314 <TRACE_TxCpltCallback+0x10c>)
 801e270:	8a1b      	ldrh	r3, [r3, #16]
 801e272:	1ad3      	subs	r3, r2, r3
 801e274:	b29a      	uxth	r2, r3
 801e276:	4b27      	ldr	r3, [pc, #156]	; (801e314 <TRACE_TxCpltCallback+0x10c>)
 801e278:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801e27a:	4b26      	ldr	r3, [pc, #152]	; (801e314 <TRACE_TxCpltCallback+0x10c>)
 801e27c:	2202      	movs	r2, #2
 801e27e:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801e280:	4b24      	ldr	r3, [pc, #144]	; (801e314 <TRACE_TxCpltCallback+0x10c>)
 801e282:	2200      	movs	r2, #0
 801e284:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801e286:	4b23      	ldr	r3, [pc, #140]	; (801e314 <TRACE_TxCpltCallback+0x10c>)
 801e288:	8a9b      	ldrh	r3, [r3, #20]
 801e28a:	2b00      	cmp	r3, #0
 801e28c:	d105      	bne.n	801e29a <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e28e:	4b21      	ldr	r3, [pc, #132]	; (801e314 <TRACE_TxCpltCallback+0x10c>)
 801e290:	2200      	movs	r2, #0
 801e292:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e294:	4b1f      	ldr	r3, [pc, #124]	; (801e314 <TRACE_TxCpltCallback+0x10c>)
 801e296:	2200      	movs	r2, #0
 801e298:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801e29a:	4b1e      	ldr	r3, [pc, #120]	; (801e314 <TRACE_TxCpltCallback+0x10c>)
 801e29c:	789b      	ldrb	r3, [r3, #2]
 801e29e:	2b00      	cmp	r3, #0
 801e2a0:	d115      	bne.n	801e2ce <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e2a2:	4b1c      	ldr	r3, [pc, #112]	; (801e314 <TRACE_TxCpltCallback+0x10c>)
 801e2a4:	8a5a      	ldrh	r2, [r3, #18]
 801e2a6:	4b1b      	ldr	r3, [pc, #108]	; (801e314 <TRACE_TxCpltCallback+0x10c>)
 801e2a8:	8a1b      	ldrh	r3, [r3, #16]
 801e2aa:	429a      	cmp	r2, r3
 801e2ac:	d908      	bls.n	801e2c0 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801e2ae:	4b19      	ldr	r3, [pc, #100]	; (801e314 <TRACE_TxCpltCallback+0x10c>)
 801e2b0:	8a5a      	ldrh	r2, [r3, #18]
 801e2b2:	4b18      	ldr	r3, [pc, #96]	; (801e314 <TRACE_TxCpltCallback+0x10c>)
 801e2b4:	8a1b      	ldrh	r3, [r3, #16]
 801e2b6:	1ad3      	subs	r3, r2, r3
 801e2b8:	b29a      	uxth	r2, r3
 801e2ba:	4b16      	ldr	r3, [pc, #88]	; (801e314 <TRACE_TxCpltCallback+0x10c>)
 801e2bc:	829a      	strh	r2, [r3, #20]
 801e2be:	e006      	b.n	801e2ce <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801e2c0:	4b14      	ldr	r3, [pc, #80]	; (801e314 <TRACE_TxCpltCallback+0x10c>)
 801e2c2:	8a1b      	ldrh	r3, [r3, #16]
 801e2c4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e2c8:	b29a      	uxth	r2, r3
 801e2ca:	4b12      	ldr	r3, [pc, #72]	; (801e314 <TRACE_TxCpltCallback+0x10c>)
 801e2cc:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801e2ce:	4b11      	ldr	r3, [pc, #68]	; (801e314 <TRACE_TxCpltCallback+0x10c>)
 801e2d0:	8a1b      	ldrh	r3, [r3, #16]
 801e2d2:	461a      	mov	r2, r3
 801e2d4:	4b10      	ldr	r3, [pc, #64]	; (801e318 <TRACE_TxCpltCallback+0x110>)
 801e2d6:	4413      	add	r3, r2
 801e2d8:	61fb      	str	r3, [r7, #28]
 801e2da:	69bb      	ldr	r3, [r7, #24]
 801e2dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e2de:	693b      	ldr	r3, [r7, #16]
 801e2e0:	f383 8810 	msr	PRIMASK, r3
}
 801e2e4:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801e2e6:	4b0d      	ldr	r3, [pc, #52]	; (801e31c <TRACE_TxCpltCallback+0x114>)
 801e2e8:	68db      	ldr	r3, [r3, #12]
 801e2ea:	4a0a      	ldr	r2, [pc, #40]	; (801e314 <TRACE_TxCpltCallback+0x10c>)
 801e2ec:	8a92      	ldrh	r2, [r2, #20]
 801e2ee:	4611      	mov	r1, r2
 801e2f0:	69f8      	ldr	r0, [r7, #28]
 801e2f2:	4798      	blx	r3
 801e2f4:	e00a      	b.n	801e30c <TRACE_TxCpltCallback+0x104>
 801e2f6:	69bb      	ldr	r3, [r7, #24]
 801e2f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e2fa:	68fb      	ldr	r3, [r7, #12]
 801e2fc:	f383 8810 	msr	PRIMASK, r3
}
 801e300:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801e302:	f7e4 fa3f 	bl	8002784 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801e306:	f000 f8a7 	bl	801e458 <TRACE_UnLock>
  }
}
 801e30a:	bf00      	nop
 801e30c:	bf00      	nop
 801e30e:	3720      	adds	r7, #32
 801e310:	46bd      	mov	sp, r7
 801e312:	bd80      	pop	{r7, pc}
 801e314:	20001dc0 	.word	0x20001dc0
 801e318:	20001dd8 	.word	0x20001dd8
 801e31c:	0801f0a4 	.word	0x0801f0a4

0801e320 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801e320:	b480      	push	{r7}
 801e322:	b087      	sub	sp, #28
 801e324:	af00      	add	r7, sp, #0
 801e326:	4603      	mov	r3, r0
 801e328:	6039      	str	r1, [r7, #0]
 801e32a:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801e32c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e330:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e332:	f3ef 8310 	mrs	r3, PRIMASK
 801e336:	60fb      	str	r3, [r7, #12]
  return(result);
 801e338:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e33a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801e33c:	b672      	cpsid	i
}
 801e33e:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801e340:	4b35      	ldr	r3, [pc, #212]	; (801e418 <TRACE_AllocateBufer+0xf8>)
 801e342:	8a5a      	ldrh	r2, [r3, #18]
 801e344:	4b34      	ldr	r3, [pc, #208]	; (801e418 <TRACE_AllocateBufer+0xf8>)
 801e346:	8a1b      	ldrh	r3, [r3, #16]
 801e348:	429a      	cmp	r2, r3
 801e34a:	d11b      	bne.n	801e384 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801e34c:	4b32      	ldr	r3, [pc, #200]	; (801e418 <TRACE_AllocateBufer+0xf8>)
 801e34e:	8a5b      	ldrh	r3, [r3, #18]
 801e350:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e354:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801e356:	88fa      	ldrh	r2, [r7, #6]
 801e358:	8afb      	ldrh	r3, [r7, #22]
 801e35a:	429a      	cmp	r2, r3
 801e35c:	d33a      	bcc.n	801e3d4 <TRACE_AllocateBufer+0xb4>
 801e35e:	4b2e      	ldr	r3, [pc, #184]	; (801e418 <TRACE_AllocateBufer+0xf8>)
 801e360:	8a1b      	ldrh	r3, [r3, #16]
 801e362:	88fa      	ldrh	r2, [r7, #6]
 801e364:	429a      	cmp	r2, r3
 801e366:	d235      	bcs.n	801e3d4 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801e368:	4b2b      	ldr	r3, [pc, #172]	; (801e418 <TRACE_AllocateBufer+0xf8>)
 801e36a:	2201      	movs	r2, #1
 801e36c:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801e36e:	4b2a      	ldr	r3, [pc, #168]	; (801e418 <TRACE_AllocateBufer+0xf8>)
 801e370:	8a5a      	ldrh	r2, [r3, #18]
 801e372:	4b29      	ldr	r3, [pc, #164]	; (801e418 <TRACE_AllocateBufer+0xf8>)
 801e374:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801e376:	4b28      	ldr	r3, [pc, #160]	; (801e418 <TRACE_AllocateBufer+0xf8>)
 801e378:	8a1b      	ldrh	r3, [r3, #16]
 801e37a:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801e37c:	4b26      	ldr	r3, [pc, #152]	; (801e418 <TRACE_AllocateBufer+0xf8>)
 801e37e:	2200      	movs	r2, #0
 801e380:	825a      	strh	r2, [r3, #18]
 801e382:	e027      	b.n	801e3d4 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e384:	4b24      	ldr	r3, [pc, #144]	; (801e418 <TRACE_AllocateBufer+0xf8>)
 801e386:	8a5a      	ldrh	r2, [r3, #18]
 801e388:	4b23      	ldr	r3, [pc, #140]	; (801e418 <TRACE_AllocateBufer+0xf8>)
 801e38a:	8a1b      	ldrh	r3, [r3, #16]
 801e38c:	429a      	cmp	r2, r3
 801e38e:	d91b      	bls.n	801e3c8 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801e390:	4b21      	ldr	r3, [pc, #132]	; (801e418 <TRACE_AllocateBufer+0xf8>)
 801e392:	8a5b      	ldrh	r3, [r3, #18]
 801e394:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e398:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801e39a:	88fa      	ldrh	r2, [r7, #6]
 801e39c:	8afb      	ldrh	r3, [r7, #22]
 801e39e:	429a      	cmp	r2, r3
 801e3a0:	d318      	bcc.n	801e3d4 <TRACE_AllocateBufer+0xb4>
 801e3a2:	4b1d      	ldr	r3, [pc, #116]	; (801e418 <TRACE_AllocateBufer+0xf8>)
 801e3a4:	8a1b      	ldrh	r3, [r3, #16]
 801e3a6:	88fa      	ldrh	r2, [r7, #6]
 801e3a8:	429a      	cmp	r2, r3
 801e3aa:	d213      	bcs.n	801e3d4 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801e3ac:	4b1a      	ldr	r3, [pc, #104]	; (801e418 <TRACE_AllocateBufer+0xf8>)
 801e3ae:	2201      	movs	r2, #1
 801e3b0:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801e3b2:	4b19      	ldr	r3, [pc, #100]	; (801e418 <TRACE_AllocateBufer+0xf8>)
 801e3b4:	8a5a      	ldrh	r2, [r3, #18]
 801e3b6:	4b18      	ldr	r3, [pc, #96]	; (801e418 <TRACE_AllocateBufer+0xf8>)
 801e3b8:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801e3ba:	4b17      	ldr	r3, [pc, #92]	; (801e418 <TRACE_AllocateBufer+0xf8>)
 801e3bc:	8a1b      	ldrh	r3, [r3, #16]
 801e3be:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801e3c0:	4b15      	ldr	r3, [pc, #84]	; (801e418 <TRACE_AllocateBufer+0xf8>)
 801e3c2:	2200      	movs	r2, #0
 801e3c4:	825a      	strh	r2, [r3, #18]
 801e3c6:	e005      	b.n	801e3d4 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801e3c8:	4b13      	ldr	r3, [pc, #76]	; (801e418 <TRACE_AllocateBufer+0xf8>)
 801e3ca:	8a1a      	ldrh	r2, [r3, #16]
 801e3cc:	4b12      	ldr	r3, [pc, #72]	; (801e418 <TRACE_AllocateBufer+0xf8>)
 801e3ce:	8a5b      	ldrh	r3, [r3, #18]
 801e3d0:	1ad3      	subs	r3, r2, r3
 801e3d2:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801e3d4:	8afa      	ldrh	r2, [r7, #22]
 801e3d6:	88fb      	ldrh	r3, [r7, #6]
 801e3d8:	429a      	cmp	r2, r3
 801e3da:	d90f      	bls.n	801e3fc <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801e3dc:	4b0e      	ldr	r3, [pc, #56]	; (801e418 <TRACE_AllocateBufer+0xf8>)
 801e3de:	8a5a      	ldrh	r2, [r3, #18]
 801e3e0:	683b      	ldr	r3, [r7, #0]
 801e3e2:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801e3e4:	4b0c      	ldr	r3, [pc, #48]	; (801e418 <TRACE_AllocateBufer+0xf8>)
 801e3e6:	8a5a      	ldrh	r2, [r3, #18]
 801e3e8:	88fb      	ldrh	r3, [r7, #6]
 801e3ea:	4413      	add	r3, r2
 801e3ec:	b29b      	uxth	r3, r3
 801e3ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801e3f2:	b29a      	uxth	r2, r3
 801e3f4:	4b08      	ldr	r3, [pc, #32]	; (801e418 <TRACE_AllocateBufer+0xf8>)
 801e3f6:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801e3f8:	2300      	movs	r3, #0
 801e3fa:	82bb      	strh	r3, [r7, #20]
 801e3fc:	693b      	ldr	r3, [r7, #16]
 801e3fe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e400:	68bb      	ldr	r3, [r7, #8]
 801e402:	f383 8810 	msr	PRIMASK, r3
}
 801e406:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801e408:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801e40c:	4618      	mov	r0, r3
 801e40e:	371c      	adds	r7, #28
 801e410:	46bd      	mov	sp, r7
 801e412:	bc80      	pop	{r7}
 801e414:	4770      	bx	lr
 801e416:	bf00      	nop
 801e418:	20001dc0 	.word	0x20001dc0

0801e41c <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801e41c:	b480      	push	{r7}
 801e41e:	b085      	sub	sp, #20
 801e420:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e422:	f3ef 8310 	mrs	r3, PRIMASK
 801e426:	607b      	str	r3, [r7, #4]
  return(result);
 801e428:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e42a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801e42c:	b672      	cpsid	i
}
 801e42e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801e430:	4b08      	ldr	r3, [pc, #32]	; (801e454 <TRACE_Lock+0x38>)
 801e432:	8adb      	ldrh	r3, [r3, #22]
 801e434:	3301      	adds	r3, #1
 801e436:	b29a      	uxth	r2, r3
 801e438:	4b06      	ldr	r3, [pc, #24]	; (801e454 <TRACE_Lock+0x38>)
 801e43a:	82da      	strh	r2, [r3, #22]
 801e43c:	68fb      	ldr	r3, [r7, #12]
 801e43e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e440:	68bb      	ldr	r3, [r7, #8]
 801e442:	f383 8810 	msr	PRIMASK, r3
}
 801e446:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801e448:	bf00      	nop
 801e44a:	3714      	adds	r7, #20
 801e44c:	46bd      	mov	sp, r7
 801e44e:	bc80      	pop	{r7}
 801e450:	4770      	bx	lr
 801e452:	bf00      	nop
 801e454:	20001dc0 	.word	0x20001dc0

0801e458 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801e458:	b480      	push	{r7}
 801e45a:	b085      	sub	sp, #20
 801e45c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e45e:	f3ef 8310 	mrs	r3, PRIMASK
 801e462:	607b      	str	r3, [r7, #4]
  return(result);
 801e464:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e466:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801e468:	b672      	cpsid	i
}
 801e46a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801e46c:	4b08      	ldr	r3, [pc, #32]	; (801e490 <TRACE_UnLock+0x38>)
 801e46e:	8adb      	ldrh	r3, [r3, #22]
 801e470:	3b01      	subs	r3, #1
 801e472:	b29a      	uxth	r2, r3
 801e474:	4b06      	ldr	r3, [pc, #24]	; (801e490 <TRACE_UnLock+0x38>)
 801e476:	82da      	strh	r2, [r3, #22]
 801e478:	68fb      	ldr	r3, [r7, #12]
 801e47a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e47c:	68bb      	ldr	r3, [r7, #8]
 801e47e:	f383 8810 	msr	PRIMASK, r3
}
 801e482:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801e484:	bf00      	nop
 801e486:	3714      	adds	r7, #20
 801e488:	46bd      	mov	sp, r7
 801e48a:	bc80      	pop	{r7}
 801e48c:	4770      	bx	lr
 801e48e:	bf00      	nop
 801e490:	20001dc0 	.word	0x20001dc0

0801e494 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801e494:	b480      	push	{r7}
 801e496:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801e498:	4b05      	ldr	r3, [pc, #20]	; (801e4b0 <TRACE_IsLocked+0x1c>)
 801e49a:	8adb      	ldrh	r3, [r3, #22]
 801e49c:	2b00      	cmp	r3, #0
 801e49e:	bf14      	ite	ne
 801e4a0:	2301      	movne	r3, #1
 801e4a2:	2300      	moveq	r3, #0
 801e4a4:	b2db      	uxtb	r3, r3
}
 801e4a6:	4618      	mov	r0, r3
 801e4a8:	46bd      	mov	sp, r7
 801e4aa:	bc80      	pop	{r7}
 801e4ac:	4770      	bx	lr
 801e4ae:	bf00      	nop
 801e4b0:	20001dc0 	.word	0x20001dc0
 801e4b4:	00000000 	.word	0x00000000

0801e4b8 <floor>:
 801e4b8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801e4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e4c0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801e4c4:	2e13      	cmp	r6, #19
 801e4c6:	460b      	mov	r3, r1
 801e4c8:	4607      	mov	r7, r0
 801e4ca:	460c      	mov	r4, r1
 801e4cc:	4605      	mov	r5, r0
 801e4ce:	dc32      	bgt.n	801e536 <floor+0x7e>
 801e4d0:	2e00      	cmp	r6, #0
 801e4d2:	da14      	bge.n	801e4fe <floor+0x46>
 801e4d4:	a334      	add	r3, pc, #208	; (adr r3, 801e5a8 <floor+0xf0>)
 801e4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4da:	f7e1 fe5b 	bl	8000194 <__adddf3>
 801e4de:	2200      	movs	r2, #0
 801e4e0:	2300      	movs	r3, #0
 801e4e2:	f7e2 fa9d 	bl	8000a20 <__aeabi_dcmpgt>
 801e4e6:	b138      	cbz	r0, 801e4f8 <floor+0x40>
 801e4e8:	2c00      	cmp	r4, #0
 801e4ea:	da56      	bge.n	801e59a <floor+0xe2>
 801e4ec:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801e4f0:	4325      	orrs	r5, r4
 801e4f2:	d055      	beq.n	801e5a0 <floor+0xe8>
 801e4f4:	4c2e      	ldr	r4, [pc, #184]	; (801e5b0 <floor+0xf8>)
 801e4f6:	2500      	movs	r5, #0
 801e4f8:	4623      	mov	r3, r4
 801e4fa:	462f      	mov	r7, r5
 801e4fc:	e025      	b.n	801e54a <floor+0x92>
 801e4fe:	4a2d      	ldr	r2, [pc, #180]	; (801e5b4 <floor+0xfc>)
 801e500:	fa42 f806 	asr.w	r8, r2, r6
 801e504:	ea01 0208 	and.w	r2, r1, r8
 801e508:	4302      	orrs	r2, r0
 801e50a:	d01e      	beq.n	801e54a <floor+0x92>
 801e50c:	a326      	add	r3, pc, #152	; (adr r3, 801e5a8 <floor+0xf0>)
 801e50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e512:	f7e1 fe3f 	bl	8000194 <__adddf3>
 801e516:	2200      	movs	r2, #0
 801e518:	2300      	movs	r3, #0
 801e51a:	f7e2 fa81 	bl	8000a20 <__aeabi_dcmpgt>
 801e51e:	2800      	cmp	r0, #0
 801e520:	d0ea      	beq.n	801e4f8 <floor+0x40>
 801e522:	2c00      	cmp	r4, #0
 801e524:	bfbe      	ittt	lt
 801e526:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801e52a:	4133      	asrlt	r3, r6
 801e52c:	18e4      	addlt	r4, r4, r3
 801e52e:	ea24 0408 	bic.w	r4, r4, r8
 801e532:	2500      	movs	r5, #0
 801e534:	e7e0      	b.n	801e4f8 <floor+0x40>
 801e536:	2e33      	cmp	r6, #51	; 0x33
 801e538:	dd0b      	ble.n	801e552 <floor+0x9a>
 801e53a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801e53e:	d104      	bne.n	801e54a <floor+0x92>
 801e540:	4602      	mov	r2, r0
 801e542:	f7e1 fe27 	bl	8000194 <__adddf3>
 801e546:	4607      	mov	r7, r0
 801e548:	460b      	mov	r3, r1
 801e54a:	4638      	mov	r0, r7
 801e54c:	4619      	mov	r1, r3
 801e54e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e552:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801e556:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801e55a:	fa28 f802 	lsr.w	r8, r8, r2
 801e55e:	ea10 0f08 	tst.w	r0, r8
 801e562:	d0f2      	beq.n	801e54a <floor+0x92>
 801e564:	a310      	add	r3, pc, #64	; (adr r3, 801e5a8 <floor+0xf0>)
 801e566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e56a:	f7e1 fe13 	bl	8000194 <__adddf3>
 801e56e:	2200      	movs	r2, #0
 801e570:	2300      	movs	r3, #0
 801e572:	f7e2 fa55 	bl	8000a20 <__aeabi_dcmpgt>
 801e576:	2800      	cmp	r0, #0
 801e578:	d0be      	beq.n	801e4f8 <floor+0x40>
 801e57a:	2c00      	cmp	r4, #0
 801e57c:	da0a      	bge.n	801e594 <floor+0xdc>
 801e57e:	2e14      	cmp	r6, #20
 801e580:	d101      	bne.n	801e586 <floor+0xce>
 801e582:	3401      	adds	r4, #1
 801e584:	e006      	b.n	801e594 <floor+0xdc>
 801e586:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801e58a:	2301      	movs	r3, #1
 801e58c:	40b3      	lsls	r3, r6
 801e58e:	441d      	add	r5, r3
 801e590:	42af      	cmp	r7, r5
 801e592:	d8f6      	bhi.n	801e582 <floor+0xca>
 801e594:	ea25 0508 	bic.w	r5, r5, r8
 801e598:	e7ae      	b.n	801e4f8 <floor+0x40>
 801e59a:	2500      	movs	r5, #0
 801e59c:	462c      	mov	r4, r5
 801e59e:	e7ab      	b.n	801e4f8 <floor+0x40>
 801e5a0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801e5a4:	e7a8      	b.n	801e4f8 <floor+0x40>
 801e5a6:	bf00      	nop
 801e5a8:	8800759c 	.word	0x8800759c
 801e5ac:	7e37e43c 	.word	0x7e37e43c
 801e5b0:	bff00000 	.word	0xbff00000
 801e5b4:	000fffff 	.word	0x000fffff

0801e5b8 <memset>:
 801e5b8:	4402      	add	r2, r0
 801e5ba:	4603      	mov	r3, r0
 801e5bc:	4293      	cmp	r3, r2
 801e5be:	d100      	bne.n	801e5c2 <memset+0xa>
 801e5c0:	4770      	bx	lr
 801e5c2:	f803 1b01 	strb.w	r1, [r3], #1
 801e5c6:	e7f9      	b.n	801e5bc <memset+0x4>

0801e5c8 <__libc_init_array>:
 801e5c8:	b570      	push	{r4, r5, r6, lr}
 801e5ca:	4d0d      	ldr	r5, [pc, #52]	; (801e600 <__libc_init_array+0x38>)
 801e5cc:	4c0d      	ldr	r4, [pc, #52]	; (801e604 <__libc_init_array+0x3c>)
 801e5ce:	1b64      	subs	r4, r4, r5
 801e5d0:	10a4      	asrs	r4, r4, #2
 801e5d2:	2600      	movs	r6, #0
 801e5d4:	42a6      	cmp	r6, r4
 801e5d6:	d109      	bne.n	801e5ec <__libc_init_array+0x24>
 801e5d8:	4d0b      	ldr	r5, [pc, #44]	; (801e608 <__libc_init_array+0x40>)
 801e5da:	4c0c      	ldr	r4, [pc, #48]	; (801e60c <__libc_init_array+0x44>)
 801e5dc:	f000 f818 	bl	801e610 <_init>
 801e5e0:	1b64      	subs	r4, r4, r5
 801e5e2:	10a4      	asrs	r4, r4, #2
 801e5e4:	2600      	movs	r6, #0
 801e5e6:	42a6      	cmp	r6, r4
 801e5e8:	d105      	bne.n	801e5f6 <__libc_init_array+0x2e>
 801e5ea:	bd70      	pop	{r4, r5, r6, pc}
 801e5ec:	f855 3b04 	ldr.w	r3, [r5], #4
 801e5f0:	4798      	blx	r3
 801e5f2:	3601      	adds	r6, #1
 801e5f4:	e7ee      	b.n	801e5d4 <__libc_init_array+0xc>
 801e5f6:	f855 3b04 	ldr.w	r3, [r5], #4
 801e5fa:	4798      	blx	r3
 801e5fc:	3601      	adds	r6, #1
 801e5fe:	e7f2      	b.n	801e5e6 <__libc_init_array+0x1e>
 801e600:	0801f724 	.word	0x0801f724
 801e604:	0801f724 	.word	0x0801f724
 801e608:	0801f724 	.word	0x0801f724
 801e60c:	0801f72c 	.word	0x0801f72c

0801e610 <_init>:
 801e610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e612:	bf00      	nop
 801e614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e616:	bc08      	pop	{r3}
 801e618:	469e      	mov	lr, r3
 801e61a:	4770      	bx	lr

0801e61c <_fini>:
 801e61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e61e:	bf00      	nop
 801e620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e622:	bc08      	pop	{r3}
 801e624:	469e      	mov	lr, r3
 801e626:	4770      	bx	lr
