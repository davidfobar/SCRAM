
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020dac  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001094  08020eec  08020eec  00030eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  08021f80  08021f80  00031f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08022058  08022058  00040198  2**0
                  CONTENTS
  5 .ARM          00000008  08022058  08022058  00032058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08022060  08022060  00040198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  08022060  08022060  00032060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08022068  08022068  00032068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000198  20000000  0802206c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002434  20000198  08022204  00040198  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200025cc  08022204  000425cc  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00040198  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000401c2  2**0
                  CONTENTS, READONLY
 14 .debug_info   000514fd  00000000  00000000  00040205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000c41f  00000000  00000000  00091702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003c60  00000000  00000000  0009db28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002df6  00000000  00000000  000a1788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002f3e9  00000000  00000000  000a457e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004a7b1  00000000  00000000  000d3967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d77d7  00000000  00000000  0011e118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000ff18  00000000  00000000  001f58f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  00205808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000198 	.word	0x20000198
 800015c:	00000000 	.word	0x00000000
 8000160:	08020ed4 	.word	0x08020ed4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000019c 	.word	0x2000019c
 800017c:	08020ed4 	.word	0x08020ed4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_d2iz>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae4:	d215      	bcs.n	8000b12 <__aeabi_d2iz+0x36>
 8000ae6:	d511      	bpl.n	8000b0c <__aeabi_d2iz+0x30>
 8000ae8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af0:	d912      	bls.n	8000b18 <__aeabi_d2iz+0x3c>
 8000af2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b02:	fa23 f002 	lsr.w	r0, r3, r2
 8000b06:	bf18      	it	ne
 8000b08:	4240      	negne	r0, r0
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b16:	d105      	bne.n	8000b24 <__aeabi_d2iz+0x48>
 8000b18:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	bf08      	it	eq
 8000b1e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b22:	4770      	bx	lr
 8000b24:	f04f 0000 	mov.w	r0, #0
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2f>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b34:	bf24      	itt	cs
 8000b36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b3e:	d90d      	bls.n	8000b5c <__aeabi_d2f+0x30>
 8000b40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b54:	bf08      	it	eq
 8000b56:	f020 0001 	biceq.w	r0, r0, #1
 8000b5a:	4770      	bx	lr
 8000b5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b60:	d121      	bne.n	8000ba6 <__aeabi_d2f+0x7a>
 8000b62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b66:	bfbc      	itt	lt
 8000b68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	4770      	bxlt	lr
 8000b6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b76:	f1c2 0218 	rsb	r2, r2, #24
 8000b7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b82:	fa20 f002 	lsr.w	r0, r0, r2
 8000b86:	bf18      	it	ne
 8000b88:	f040 0001 	orrne.w	r0, r0, #1
 8000b8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b98:	ea40 000c 	orr.w	r0, r0, ip
 8000b9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba4:	e7cc      	b.n	8000b40 <__aeabi_d2f+0x14>
 8000ba6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000baa:	d107      	bne.n	8000bbc <__aeabi_d2f+0x90>
 8000bac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bb6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bba:	4770      	bxne	lr
 8000bbc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_frsub>:
 8000bcc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bd0:	e002      	b.n	8000bd8 <__addsf3>
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_fsub>:
 8000bd4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bd8 <__addsf3>:
 8000bd8:	0042      	lsls	r2, r0, #1
 8000bda:	bf1f      	itttt	ne
 8000bdc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be0:	ea92 0f03 	teqne	r2, r3
 8000be4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bec:	d06a      	beq.n	8000cc4 <__addsf3+0xec>
 8000bee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bf6:	bfc1      	itttt	gt
 8000bf8:	18d2      	addgt	r2, r2, r3
 8000bfa:	4041      	eorgt	r1, r0
 8000bfc:	4048      	eorgt	r0, r1
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	bfb8      	it	lt
 8000c02:	425b      	neglt	r3, r3
 8000c04:	2b19      	cmp	r3, #25
 8000c06:	bf88      	it	hi
 8000c08:	4770      	bxhi	lr
 8000c0a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c16:	bf18      	it	ne
 8000c18:	4240      	negne	r0, r0
 8000c1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c1e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c26:	bf18      	it	ne
 8000c28:	4249      	negne	r1, r1
 8000c2a:	ea92 0f03 	teq	r2, r3
 8000c2e:	d03f      	beq.n	8000cb0 <__addsf3+0xd8>
 8000c30:	f1a2 0201 	sub.w	r2, r2, #1
 8000c34:	fa41 fc03 	asr.w	ip, r1, r3
 8000c38:	eb10 000c 	adds.w	r0, r0, ip
 8000c3c:	f1c3 0320 	rsb	r3, r3, #32
 8000c40:	fa01 f103 	lsl.w	r1, r1, r3
 8000c44:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__addsf3+0x78>
 8000c4a:	4249      	negs	r1, r1
 8000c4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c50:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c54:	d313      	bcc.n	8000c7e <__addsf3+0xa6>
 8000c56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c5a:	d306      	bcc.n	8000c6a <__addsf3+0x92>
 8000c5c:	0840      	lsrs	r0, r0, #1
 8000c5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c62:	f102 0201 	add.w	r2, r2, #1
 8000c66:	2afe      	cmp	r2, #254	; 0xfe
 8000c68:	d251      	bcs.n	8000d0e <__addsf3+0x136>
 8000c6a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c72:	bf08      	it	eq
 8000c74:	f020 0001 	biceq.w	r0, r0, #1
 8000c78:	ea40 0003 	orr.w	r0, r0, r3
 8000c7c:	4770      	bx	lr
 8000c7e:	0049      	lsls	r1, r1, #1
 8000c80:	eb40 0000 	adc.w	r0, r0, r0
 8000c84:	3a01      	subs	r2, #1
 8000c86:	bf28      	it	cs
 8000c88:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c8c:	d2ed      	bcs.n	8000c6a <__addsf3+0x92>
 8000c8e:	fab0 fc80 	clz	ip, r0
 8000c92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c96:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c9e:	bfaa      	itet	ge
 8000ca0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca4:	4252      	neglt	r2, r2
 8000ca6:	4318      	orrge	r0, r3
 8000ca8:	bfbc      	itt	lt
 8000caa:	40d0      	lsrlt	r0, r2
 8000cac:	4318      	orrlt	r0, r3
 8000cae:	4770      	bx	lr
 8000cb0:	f092 0f00 	teq	r2, #0
 8000cb4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cb8:	bf06      	itte	eq
 8000cba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cbe:	3201      	addeq	r2, #1
 8000cc0:	3b01      	subne	r3, #1
 8000cc2:	e7b5      	b.n	8000c30 <__addsf3+0x58>
 8000cc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ccc:	bf18      	it	ne
 8000cce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd2:	d021      	beq.n	8000d18 <__addsf3+0x140>
 8000cd4:	ea92 0f03 	teq	r2, r3
 8000cd8:	d004      	beq.n	8000ce4 <__addsf3+0x10c>
 8000cda:	f092 0f00 	teq	r2, #0
 8000cde:	bf08      	it	eq
 8000ce0:	4608      	moveq	r0, r1
 8000ce2:	4770      	bx	lr
 8000ce4:	ea90 0f01 	teq	r0, r1
 8000ce8:	bf1c      	itt	ne
 8000cea:	2000      	movne	r0, #0
 8000cec:	4770      	bxne	lr
 8000cee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cf2:	d104      	bne.n	8000cfe <__addsf3+0x126>
 8000cf4:	0040      	lsls	r0, r0, #1
 8000cf6:	bf28      	it	cs
 8000cf8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	4770      	bx	lr
 8000cfe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d02:	bf3c      	itt	cc
 8000d04:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d08:	4770      	bxcc	lr
 8000d0a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d0e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d16:	4770      	bx	lr
 8000d18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d1c:	bf16      	itet	ne
 8000d1e:	4608      	movne	r0, r1
 8000d20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d24:	4601      	movne	r1, r0
 8000d26:	0242      	lsls	r2, r0, #9
 8000d28:	bf06      	itte	eq
 8000d2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d2e:	ea90 0f01 	teqeq	r0, r1
 8000d32:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_ui2f>:
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e004      	b.n	8000d48 <__aeabi_i2f+0x8>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_i2f>:
 8000d40:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d44:	bf48      	it	mi
 8000d46:	4240      	negmi	r0, r0
 8000d48:	ea5f 0c00 	movs.w	ip, r0
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d54:	4601      	mov	r1, r0
 8000d56:	f04f 0000 	mov.w	r0, #0
 8000d5a:	e01c      	b.n	8000d96 <__aeabi_l2f+0x2a>

08000d5c <__aeabi_ul2f>:
 8000d5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d60:	bf08      	it	eq
 8000d62:	4770      	bxeq	lr
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e00a      	b.n	8000d80 <__aeabi_l2f+0x14>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_l2f>:
 8000d6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d78:	d502      	bpl.n	8000d80 <__aeabi_l2f+0x14>
 8000d7a:	4240      	negs	r0, r0
 8000d7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d80:	ea5f 0c01 	movs.w	ip, r1
 8000d84:	bf02      	ittt	eq
 8000d86:	4684      	moveq	ip, r0
 8000d88:	4601      	moveq	r1, r0
 8000d8a:	2000      	moveq	r0, #0
 8000d8c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d90:	bf08      	it	eq
 8000d92:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d96:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d9a:	fabc f28c 	clz	r2, ip
 8000d9e:	3a08      	subs	r2, #8
 8000da0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da4:	db10      	blt.n	8000dc8 <__aeabi_l2f+0x5c>
 8000da6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000daa:	4463      	add	r3, ip
 8000dac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db0:	f1c2 0220 	rsb	r2, r2, #32
 8000db4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000db8:	fa20 f202 	lsr.w	r2, r0, r2
 8000dbc:	eb43 0002 	adc.w	r0, r3, r2
 8000dc0:	bf08      	it	eq
 8000dc2:	f020 0001 	biceq.w	r0, r0, #1
 8000dc6:	4770      	bx	lr
 8000dc8:	f102 0220 	add.w	r2, r2, #32
 8000dcc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd0:	f1c2 0220 	rsb	r2, r2, #32
 8000dd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000ddc:	eb43 0002 	adc.w	r0, r3, r2
 8000de0:	bf08      	it	eq
 8000de2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de6:	4770      	bx	lr

08000de8 <__aeabi_fmul>:
 8000de8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df0:	bf1e      	ittt	ne
 8000df2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000df6:	ea92 0f0c 	teqne	r2, ip
 8000dfa:	ea93 0f0c 	teqne	r3, ip
 8000dfe:	d06f      	beq.n	8000ee0 <__aeabi_fmul+0xf8>
 8000e00:	441a      	add	r2, r3
 8000e02:	ea80 0c01 	eor.w	ip, r0, r1
 8000e06:	0240      	lsls	r0, r0, #9
 8000e08:	bf18      	it	ne
 8000e0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e0e:	d01e      	beq.n	8000e4e <__aeabi_fmul+0x66>
 8000e10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000e20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e28:	bf3e      	ittt	cc
 8000e2a:	0049      	lslcc	r1, r1, #1
 8000e2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e30:	005b      	lslcc	r3, r3, #1
 8000e32:	ea40 0001 	orr.w	r0, r0, r1
 8000e36:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e3a:	2afd      	cmp	r2, #253	; 0xfd
 8000e3c:	d81d      	bhi.n	8000e7a <__aeabi_fmul+0x92>
 8000e3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e46:	bf08      	it	eq
 8000e48:	f020 0001 	biceq.w	r0, r0, #1
 8000e4c:	4770      	bx	lr
 8000e4e:	f090 0f00 	teq	r0, #0
 8000e52:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e56:	bf08      	it	eq
 8000e58:	0249      	lsleq	r1, r1, #9
 8000e5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e62:	3a7f      	subs	r2, #127	; 0x7f
 8000e64:	bfc2      	ittt	gt
 8000e66:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e6e:	4770      	bxgt	lr
 8000e70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e74:	f04f 0300 	mov.w	r3, #0
 8000e78:	3a01      	subs	r2, #1
 8000e7a:	dc5d      	bgt.n	8000f38 <__aeabi_fmul+0x150>
 8000e7c:	f112 0f19 	cmn.w	r2, #25
 8000e80:	bfdc      	itt	le
 8000e82:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e86:	4770      	bxle	lr
 8000e88:	f1c2 0200 	rsb	r2, r2, #0
 8000e8c:	0041      	lsls	r1, r0, #1
 8000e8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e92:	f1c2 0220 	rsb	r2, r2, #32
 8000e96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e9e:	f140 0000 	adc.w	r0, r0, #0
 8000ea2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ea6:	bf08      	it	eq
 8000ea8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eac:	4770      	bx	lr
 8000eae:	f092 0f00 	teq	r2, #0
 8000eb2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eb6:	bf02      	ittt	eq
 8000eb8:	0040      	lsleq	r0, r0, #1
 8000eba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ebe:	3a01      	subeq	r2, #1
 8000ec0:	d0f9      	beq.n	8000eb6 <__aeabi_fmul+0xce>
 8000ec2:	ea40 000c 	orr.w	r0, r0, ip
 8000ec6:	f093 0f00 	teq	r3, #0
 8000eca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0049      	lsleq	r1, r1, #1
 8000ed2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ed6:	3b01      	subeq	r3, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fmul+0xe6>
 8000eda:	ea41 010c 	orr.w	r1, r1, ip
 8000ede:	e78f      	b.n	8000e00 <__aeabi_fmul+0x18>
 8000ee0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ee4:	ea92 0f0c 	teq	r2, ip
 8000ee8:	bf18      	it	ne
 8000eea:	ea93 0f0c 	teqne	r3, ip
 8000eee:	d00a      	beq.n	8000f06 <__aeabi_fmul+0x11e>
 8000ef0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ef4:	bf18      	it	ne
 8000ef6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	d1d8      	bne.n	8000eae <__aeabi_fmul+0xc6>
 8000efc:	ea80 0001 	eor.w	r0, r0, r1
 8000f00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f04:	4770      	bx	lr
 8000f06:	f090 0f00 	teq	r0, #0
 8000f0a:	bf17      	itett	ne
 8000f0c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f10:	4608      	moveq	r0, r1
 8000f12:	f091 0f00 	teqne	r1, #0
 8000f16:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f1a:	d014      	beq.n	8000f46 <__aeabi_fmul+0x15e>
 8000f1c:	ea92 0f0c 	teq	r2, ip
 8000f20:	d101      	bne.n	8000f26 <__aeabi_fmul+0x13e>
 8000f22:	0242      	lsls	r2, r0, #9
 8000f24:	d10f      	bne.n	8000f46 <__aeabi_fmul+0x15e>
 8000f26:	ea93 0f0c 	teq	r3, ip
 8000f2a:	d103      	bne.n	8000f34 <__aeabi_fmul+0x14c>
 8000f2c:	024b      	lsls	r3, r1, #9
 8000f2e:	bf18      	it	ne
 8000f30:	4608      	movne	r0, r1
 8000f32:	d108      	bne.n	8000f46 <__aeabi_fmul+0x15e>
 8000f34:	ea80 0001 	eor.w	r0, r0, r1
 8000f38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f44:	4770      	bx	lr
 8000f46:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f4a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f4e:	4770      	bx	lr

08000f50 <__aeabi_fdiv>:
 8000f50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f58:	bf1e      	ittt	ne
 8000f5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f5e:	ea92 0f0c 	teqne	r2, ip
 8000f62:	ea93 0f0c 	teqne	r3, ip
 8000f66:	d069      	beq.n	800103c <__aeabi_fdiv+0xec>
 8000f68:	eba2 0203 	sub.w	r2, r2, r3
 8000f6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f70:	0249      	lsls	r1, r1, #9
 8000f72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f76:	d037      	beq.n	8000fe8 <__aeabi_fdiv+0x98>
 8000f78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f88:	428b      	cmp	r3, r1
 8000f8a:	bf38      	it	cc
 8000f8c:	005b      	lslcc	r3, r3, #1
 8000f8e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f92:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f96:	428b      	cmp	r3, r1
 8000f98:	bf24      	itt	cs
 8000f9a:	1a5b      	subcs	r3, r3, r1
 8000f9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fa0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fa4:	bf24      	itt	cs
 8000fa6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000faa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fb2:	bf24      	itt	cs
 8000fb4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fb8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fc0:	bf24      	itt	cs
 8000fc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fca:	011b      	lsls	r3, r3, #4
 8000fcc:	bf18      	it	ne
 8000fce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fd2:	d1e0      	bne.n	8000f96 <__aeabi_fdiv+0x46>
 8000fd4:	2afd      	cmp	r2, #253	; 0xfd
 8000fd6:	f63f af50 	bhi.w	8000e7a <__aeabi_fmul+0x92>
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fe0:	bf08      	it	eq
 8000fe2:	f020 0001 	biceq.w	r0, r0, #1
 8000fe6:	4770      	bx	lr
 8000fe8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ff0:	327f      	adds	r2, #127	; 0x7f
 8000ff2:	bfc2      	ittt	gt
 8000ff4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ff8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ffc:	4770      	bxgt	lr
 8000ffe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001002:	f04f 0300 	mov.w	r3, #0
 8001006:	3a01      	subs	r2, #1
 8001008:	e737      	b.n	8000e7a <__aeabi_fmul+0x92>
 800100a:	f092 0f00 	teq	r2, #0
 800100e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001012:	bf02      	ittt	eq
 8001014:	0040      	lsleq	r0, r0, #1
 8001016:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800101a:	3a01      	subeq	r2, #1
 800101c:	d0f9      	beq.n	8001012 <__aeabi_fdiv+0xc2>
 800101e:	ea40 000c 	orr.w	r0, r0, ip
 8001022:	f093 0f00 	teq	r3, #0
 8001026:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800102a:	bf02      	ittt	eq
 800102c:	0049      	lsleq	r1, r1, #1
 800102e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001032:	3b01      	subeq	r3, #1
 8001034:	d0f9      	beq.n	800102a <__aeabi_fdiv+0xda>
 8001036:	ea41 010c 	orr.w	r1, r1, ip
 800103a:	e795      	b.n	8000f68 <__aeabi_fdiv+0x18>
 800103c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001040:	ea92 0f0c 	teq	r2, ip
 8001044:	d108      	bne.n	8001058 <__aeabi_fdiv+0x108>
 8001046:	0242      	lsls	r2, r0, #9
 8001048:	f47f af7d 	bne.w	8000f46 <__aeabi_fmul+0x15e>
 800104c:	ea93 0f0c 	teq	r3, ip
 8001050:	f47f af70 	bne.w	8000f34 <__aeabi_fmul+0x14c>
 8001054:	4608      	mov	r0, r1
 8001056:	e776      	b.n	8000f46 <__aeabi_fmul+0x15e>
 8001058:	ea93 0f0c 	teq	r3, ip
 800105c:	d104      	bne.n	8001068 <__aeabi_fdiv+0x118>
 800105e:	024b      	lsls	r3, r1, #9
 8001060:	f43f af4c 	beq.w	8000efc <__aeabi_fmul+0x114>
 8001064:	4608      	mov	r0, r1
 8001066:	e76e      	b.n	8000f46 <__aeabi_fmul+0x15e>
 8001068:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800106c:	bf18      	it	ne
 800106e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001072:	d1ca      	bne.n	800100a <__aeabi_fdiv+0xba>
 8001074:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001078:	f47f af5c 	bne.w	8000f34 <__aeabi_fmul+0x14c>
 800107c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001080:	f47f af3c 	bne.w	8000efc <__aeabi_fmul+0x114>
 8001084:	e75f      	b.n	8000f46 <__aeabi_fmul+0x15e>
 8001086:	bf00      	nop

08001088 <__aeabi_f2iz>:
 8001088:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800108c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001090:	d30f      	bcc.n	80010b2 <__aeabi_f2iz+0x2a>
 8001092:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001096:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800109a:	d90d      	bls.n	80010b8 <__aeabi_f2iz+0x30>
 800109c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010a4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010a8:	fa23 f002 	lsr.w	r0, r3, r2
 80010ac:	bf18      	it	ne
 80010ae:	4240      	negne	r0, r0
 80010b0:	4770      	bx	lr
 80010b2:	f04f 0000 	mov.w	r0, #0
 80010b6:	4770      	bx	lr
 80010b8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010bc:	d101      	bne.n	80010c2 <__aeabi_f2iz+0x3a>
 80010be:	0242      	lsls	r2, r0, #9
 80010c0:	d105      	bne.n	80010ce <__aeabi_f2iz+0x46>
 80010c2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010c6:	bf08      	it	eq
 80010c8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010cc:	4770      	bx	lr
 80010ce:	f04f 0000 	mov.w	r0, #0
 80010d2:	4770      	bx	lr

080010d4 <__aeabi_f2uiz>:
 80010d4:	0042      	lsls	r2, r0, #1
 80010d6:	d20e      	bcs.n	80010f6 <__aeabi_f2uiz+0x22>
 80010d8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010dc:	d30b      	bcc.n	80010f6 <__aeabi_f2uiz+0x22>
 80010de:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010e2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e6:	d409      	bmi.n	80010fc <__aeabi_f2uiz+0x28>
 80010e8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0000 	mov.w	r0, #0
 80010fa:	4770      	bx	lr
 80010fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001100:	d101      	bne.n	8001106 <__aeabi_f2uiz+0x32>
 8001102:	0242      	lsls	r2, r0, #9
 8001104:	d102      	bne.n	800110c <__aeabi_f2uiz+0x38>
 8001106:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800110a:	4770      	bx	lr
 800110c:	f04f 0000 	mov.w	r0, #0
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop

08001114 <__aeabi_uldivmod>:
 8001114:	b953      	cbnz	r3, 800112c <__aeabi_uldivmod+0x18>
 8001116:	b94a      	cbnz	r2, 800112c <__aeabi_uldivmod+0x18>
 8001118:	2900      	cmp	r1, #0
 800111a:	bf08      	it	eq
 800111c:	2800      	cmpeq	r0, #0
 800111e:	bf1c      	itt	ne
 8001120:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8001124:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001128:	f000 b970 	b.w	800140c <__aeabi_idiv0>
 800112c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001130:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001134:	f000 f806 	bl	8001144 <__udivmoddi4>
 8001138:	f8dd e004 	ldr.w	lr, [sp, #4]
 800113c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001140:	b004      	add	sp, #16
 8001142:	4770      	bx	lr

08001144 <__udivmoddi4>:
 8001144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001148:	9e08      	ldr	r6, [sp, #32]
 800114a:	460d      	mov	r5, r1
 800114c:	4604      	mov	r4, r0
 800114e:	460f      	mov	r7, r1
 8001150:	2b00      	cmp	r3, #0
 8001152:	d14a      	bne.n	80011ea <__udivmoddi4+0xa6>
 8001154:	428a      	cmp	r2, r1
 8001156:	4694      	mov	ip, r2
 8001158:	d965      	bls.n	8001226 <__udivmoddi4+0xe2>
 800115a:	fab2 f382 	clz	r3, r2
 800115e:	b143      	cbz	r3, 8001172 <__udivmoddi4+0x2e>
 8001160:	fa02 fc03 	lsl.w	ip, r2, r3
 8001164:	f1c3 0220 	rsb	r2, r3, #32
 8001168:	409f      	lsls	r7, r3
 800116a:	fa20 f202 	lsr.w	r2, r0, r2
 800116e:	4317      	orrs	r7, r2
 8001170:	409c      	lsls	r4, r3
 8001172:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001176:	fa1f f58c 	uxth.w	r5, ip
 800117a:	fbb7 f1fe 	udiv	r1, r7, lr
 800117e:	0c22      	lsrs	r2, r4, #16
 8001180:	fb0e 7711 	mls	r7, lr, r1, r7
 8001184:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001188:	fb01 f005 	mul.w	r0, r1, r5
 800118c:	4290      	cmp	r0, r2
 800118e:	d90a      	bls.n	80011a6 <__udivmoddi4+0x62>
 8001190:	eb1c 0202 	adds.w	r2, ip, r2
 8001194:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8001198:	f080 811b 	bcs.w	80013d2 <__udivmoddi4+0x28e>
 800119c:	4290      	cmp	r0, r2
 800119e:	f240 8118 	bls.w	80013d2 <__udivmoddi4+0x28e>
 80011a2:	3902      	subs	r1, #2
 80011a4:	4462      	add	r2, ip
 80011a6:	1a12      	subs	r2, r2, r0
 80011a8:	b2a4      	uxth	r4, r4
 80011aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80011ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80011b2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011b6:	fb00 f505 	mul.w	r5, r0, r5
 80011ba:	42a5      	cmp	r5, r4
 80011bc:	d90a      	bls.n	80011d4 <__udivmoddi4+0x90>
 80011be:	eb1c 0404 	adds.w	r4, ip, r4
 80011c2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80011c6:	f080 8106 	bcs.w	80013d6 <__udivmoddi4+0x292>
 80011ca:	42a5      	cmp	r5, r4
 80011cc:	f240 8103 	bls.w	80013d6 <__udivmoddi4+0x292>
 80011d0:	4464      	add	r4, ip
 80011d2:	3802      	subs	r0, #2
 80011d4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80011d8:	1b64      	subs	r4, r4, r5
 80011da:	2100      	movs	r1, #0
 80011dc:	b11e      	cbz	r6, 80011e6 <__udivmoddi4+0xa2>
 80011de:	40dc      	lsrs	r4, r3
 80011e0:	2300      	movs	r3, #0
 80011e2:	e9c6 4300 	strd	r4, r3, [r6]
 80011e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ea:	428b      	cmp	r3, r1
 80011ec:	d908      	bls.n	8001200 <__udivmoddi4+0xbc>
 80011ee:	2e00      	cmp	r6, #0
 80011f0:	f000 80ec 	beq.w	80013cc <__udivmoddi4+0x288>
 80011f4:	2100      	movs	r1, #0
 80011f6:	e9c6 0500 	strd	r0, r5, [r6]
 80011fa:	4608      	mov	r0, r1
 80011fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001200:	fab3 f183 	clz	r1, r3
 8001204:	2900      	cmp	r1, #0
 8001206:	d149      	bne.n	800129c <__udivmoddi4+0x158>
 8001208:	42ab      	cmp	r3, r5
 800120a:	d302      	bcc.n	8001212 <__udivmoddi4+0xce>
 800120c:	4282      	cmp	r2, r0
 800120e:	f200 80f7 	bhi.w	8001400 <__udivmoddi4+0x2bc>
 8001212:	1a84      	subs	r4, r0, r2
 8001214:	eb65 0203 	sbc.w	r2, r5, r3
 8001218:	2001      	movs	r0, #1
 800121a:	4617      	mov	r7, r2
 800121c:	2e00      	cmp	r6, #0
 800121e:	d0e2      	beq.n	80011e6 <__udivmoddi4+0xa2>
 8001220:	e9c6 4700 	strd	r4, r7, [r6]
 8001224:	e7df      	b.n	80011e6 <__udivmoddi4+0xa2>
 8001226:	b902      	cbnz	r2, 800122a <__udivmoddi4+0xe6>
 8001228:	deff      	udf	#255	; 0xff
 800122a:	fab2 f382 	clz	r3, r2
 800122e:	2b00      	cmp	r3, #0
 8001230:	f040 808f 	bne.w	8001352 <__udivmoddi4+0x20e>
 8001234:	1a8a      	subs	r2, r1, r2
 8001236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800123a:	fa1f fe8c 	uxth.w	lr, ip
 800123e:	2101      	movs	r1, #1
 8001240:	fbb2 f5f7 	udiv	r5, r2, r7
 8001244:	fb07 2015 	mls	r0, r7, r5, r2
 8001248:	0c22      	lsrs	r2, r4, #16
 800124a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800124e:	fb0e f005 	mul.w	r0, lr, r5
 8001252:	4290      	cmp	r0, r2
 8001254:	d908      	bls.n	8001268 <__udivmoddi4+0x124>
 8001256:	eb1c 0202 	adds.w	r2, ip, r2
 800125a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800125e:	d202      	bcs.n	8001266 <__udivmoddi4+0x122>
 8001260:	4290      	cmp	r0, r2
 8001262:	f200 80ca 	bhi.w	80013fa <__udivmoddi4+0x2b6>
 8001266:	4645      	mov	r5, r8
 8001268:	1a12      	subs	r2, r2, r0
 800126a:	b2a4      	uxth	r4, r4
 800126c:	fbb2 f0f7 	udiv	r0, r2, r7
 8001270:	fb07 2210 	mls	r2, r7, r0, r2
 8001274:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001278:	fb0e fe00 	mul.w	lr, lr, r0
 800127c:	45a6      	cmp	lr, r4
 800127e:	d908      	bls.n	8001292 <__udivmoddi4+0x14e>
 8001280:	eb1c 0404 	adds.w	r4, ip, r4
 8001284:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001288:	d202      	bcs.n	8001290 <__udivmoddi4+0x14c>
 800128a:	45a6      	cmp	lr, r4
 800128c:	f200 80ba 	bhi.w	8001404 <__udivmoddi4+0x2c0>
 8001290:	4610      	mov	r0, r2
 8001292:	eba4 040e 	sub.w	r4, r4, lr
 8001296:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800129a:	e79f      	b.n	80011dc <__udivmoddi4+0x98>
 800129c:	f1c1 0720 	rsb	r7, r1, #32
 80012a0:	408b      	lsls	r3, r1
 80012a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80012a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80012aa:	fa05 f401 	lsl.w	r4, r5, r1
 80012ae:	fa20 f307 	lsr.w	r3, r0, r7
 80012b2:	40fd      	lsrs	r5, r7
 80012b4:	4323      	orrs	r3, r4
 80012b6:	fa00 f901 	lsl.w	r9, r0, r1
 80012ba:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80012be:	fa1f fe8c 	uxth.w	lr, ip
 80012c2:	fbb5 f8f0 	udiv	r8, r5, r0
 80012c6:	0c1c      	lsrs	r4, r3, #16
 80012c8:	fb00 5518 	mls	r5, r0, r8, r5
 80012cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012d0:	fb08 f50e 	mul.w	r5, r8, lr
 80012d4:	42a5      	cmp	r5, r4
 80012d6:	fa02 f201 	lsl.w	r2, r2, r1
 80012da:	d90b      	bls.n	80012f4 <__udivmoddi4+0x1b0>
 80012dc:	eb1c 0404 	adds.w	r4, ip, r4
 80012e0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80012e4:	f080 8087 	bcs.w	80013f6 <__udivmoddi4+0x2b2>
 80012e8:	42a5      	cmp	r5, r4
 80012ea:	f240 8084 	bls.w	80013f6 <__udivmoddi4+0x2b2>
 80012ee:	f1a8 0802 	sub.w	r8, r8, #2
 80012f2:	4464      	add	r4, ip
 80012f4:	1b64      	subs	r4, r4, r5
 80012f6:	b29d      	uxth	r5, r3
 80012f8:	fbb4 f3f0 	udiv	r3, r4, r0
 80012fc:	fb00 4413 	mls	r4, r0, r3, r4
 8001300:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001304:	fb03 fe0e 	mul.w	lr, r3, lr
 8001308:	45a6      	cmp	lr, r4
 800130a:	d908      	bls.n	800131e <__udivmoddi4+0x1da>
 800130c:	eb1c 0404 	adds.w	r4, ip, r4
 8001310:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8001314:	d26b      	bcs.n	80013ee <__udivmoddi4+0x2aa>
 8001316:	45a6      	cmp	lr, r4
 8001318:	d969      	bls.n	80013ee <__udivmoddi4+0x2aa>
 800131a:	3b02      	subs	r3, #2
 800131c:	4464      	add	r4, ip
 800131e:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001322:	fba0 8302 	umull	r8, r3, r0, r2
 8001326:	eba4 040e 	sub.w	r4, r4, lr
 800132a:	429c      	cmp	r4, r3
 800132c:	46c6      	mov	lr, r8
 800132e:	461d      	mov	r5, r3
 8001330:	d355      	bcc.n	80013de <__udivmoddi4+0x29a>
 8001332:	d052      	beq.n	80013da <__udivmoddi4+0x296>
 8001334:	b156      	cbz	r6, 800134c <__udivmoddi4+0x208>
 8001336:	ebb9 030e 	subs.w	r3, r9, lr
 800133a:	eb64 0405 	sbc.w	r4, r4, r5
 800133e:	fa04 f707 	lsl.w	r7, r4, r7
 8001342:	40cb      	lsrs	r3, r1
 8001344:	40cc      	lsrs	r4, r1
 8001346:	431f      	orrs	r7, r3
 8001348:	e9c6 7400 	strd	r7, r4, [r6]
 800134c:	2100      	movs	r1, #0
 800134e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001352:	f1c3 0120 	rsb	r1, r3, #32
 8001356:	fa02 fc03 	lsl.w	ip, r2, r3
 800135a:	fa20 f201 	lsr.w	r2, r0, r1
 800135e:	fa25 f101 	lsr.w	r1, r5, r1
 8001362:	409d      	lsls	r5, r3
 8001364:	432a      	orrs	r2, r5
 8001366:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800136a:	fa1f fe8c 	uxth.w	lr, ip
 800136e:	fbb1 f0f7 	udiv	r0, r1, r7
 8001372:	fb07 1510 	mls	r5, r7, r0, r1
 8001376:	0c11      	lsrs	r1, r2, #16
 8001378:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800137c:	fb00 f50e 	mul.w	r5, r0, lr
 8001380:	428d      	cmp	r5, r1
 8001382:	fa04 f403 	lsl.w	r4, r4, r3
 8001386:	d908      	bls.n	800139a <__udivmoddi4+0x256>
 8001388:	eb1c 0101 	adds.w	r1, ip, r1
 800138c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8001390:	d22f      	bcs.n	80013f2 <__udivmoddi4+0x2ae>
 8001392:	428d      	cmp	r5, r1
 8001394:	d92d      	bls.n	80013f2 <__udivmoddi4+0x2ae>
 8001396:	3802      	subs	r0, #2
 8001398:	4461      	add	r1, ip
 800139a:	1b49      	subs	r1, r1, r5
 800139c:	b292      	uxth	r2, r2
 800139e:	fbb1 f5f7 	udiv	r5, r1, r7
 80013a2:	fb07 1115 	mls	r1, r7, r5, r1
 80013a6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80013aa:	fb05 f10e 	mul.w	r1, r5, lr
 80013ae:	4291      	cmp	r1, r2
 80013b0:	d908      	bls.n	80013c4 <__udivmoddi4+0x280>
 80013b2:	eb1c 0202 	adds.w	r2, ip, r2
 80013b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80013ba:	d216      	bcs.n	80013ea <__udivmoddi4+0x2a6>
 80013bc:	4291      	cmp	r1, r2
 80013be:	d914      	bls.n	80013ea <__udivmoddi4+0x2a6>
 80013c0:	3d02      	subs	r5, #2
 80013c2:	4462      	add	r2, ip
 80013c4:	1a52      	subs	r2, r2, r1
 80013c6:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80013ca:	e739      	b.n	8001240 <__udivmoddi4+0xfc>
 80013cc:	4631      	mov	r1, r6
 80013ce:	4630      	mov	r0, r6
 80013d0:	e709      	b.n	80011e6 <__udivmoddi4+0xa2>
 80013d2:	4639      	mov	r1, r7
 80013d4:	e6e7      	b.n	80011a6 <__udivmoddi4+0x62>
 80013d6:	4610      	mov	r0, r2
 80013d8:	e6fc      	b.n	80011d4 <__udivmoddi4+0x90>
 80013da:	45c1      	cmp	r9, r8
 80013dc:	d2aa      	bcs.n	8001334 <__udivmoddi4+0x1f0>
 80013de:	ebb8 0e02 	subs.w	lr, r8, r2
 80013e2:	eb63 050c 	sbc.w	r5, r3, ip
 80013e6:	3801      	subs	r0, #1
 80013e8:	e7a4      	b.n	8001334 <__udivmoddi4+0x1f0>
 80013ea:	4645      	mov	r5, r8
 80013ec:	e7ea      	b.n	80013c4 <__udivmoddi4+0x280>
 80013ee:	4603      	mov	r3, r0
 80013f0:	e795      	b.n	800131e <__udivmoddi4+0x1da>
 80013f2:	4640      	mov	r0, r8
 80013f4:	e7d1      	b.n	800139a <__udivmoddi4+0x256>
 80013f6:	46d0      	mov	r8, sl
 80013f8:	e77c      	b.n	80012f4 <__udivmoddi4+0x1b0>
 80013fa:	3d02      	subs	r5, #2
 80013fc:	4462      	add	r2, ip
 80013fe:	e733      	b.n	8001268 <__udivmoddi4+0x124>
 8001400:	4608      	mov	r0, r1
 8001402:	e70b      	b.n	800121c <__udivmoddi4+0xd8>
 8001404:	4464      	add	r4, ip
 8001406:	3802      	subs	r0, #2
 8001408:	e743      	b.n	8001292 <__udivmoddi4+0x14e>
 800140a:	bf00      	nop

0800140c <__aeabi_idiv0>:
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop

08001410 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800141e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4313      	orrs	r3, r2
 8001426:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800142c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4013      	ands	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001434:	68fb      	ldr	r3, [r7, #12]
}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800144c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800144e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4313      	orrs	r3, r2
 8001456:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800145c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4013      	ands	r3, r2
 8001462:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001464:	68fb      	ldr	r3, [r7, #12]
}
 8001466:	bf00      	nop
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800147c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	43db      	mvns	r3, r3
 8001482:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001486:	4013      	ands	r3, r2
 8001488:	660b      	str	r3, [r1, #96]	; 0x60
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001498:	4b23      	ldr	r3, [pc, #140]	; (8001528 <MX_ADC_Init+0x94>)
 800149a:	4a24      	ldr	r2, [pc, #144]	; (800152c <MX_ADC_Init+0x98>)
 800149c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800149e:	4b22      	ldr	r3, [pc, #136]	; (8001528 <MX_ADC_Init+0x94>)
 80014a0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80014a4:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80014a6:	4b20      	ldr	r3, [pc, #128]	; (8001528 <MX_ADC_Init+0x94>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ac:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <MX_ADC_Init+0x94>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014b2:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <MX_ADC_Init+0x94>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <MX_ADC_Init+0x94>)
 80014ba:	2204      	movs	r2, #4
 80014bc:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80014be:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <MX_ADC_Init+0x94>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80014c4:	4b18      	ldr	r3, [pc, #96]	; (8001528 <MX_ADC_Init+0x94>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <MX_ADC_Init+0x94>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <MX_ADC_Init+0x94>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80014d6:	4b14      	ldr	r3, [pc, #80]	; (8001528 <MX_ADC_Init+0x94>)
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <MX_ADC_Init+0x94>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <MX_ADC_Init+0x94>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80014ea:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <MX_ADC_Init+0x94>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <MX_ADC_Init+0x94>)
 80014f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014f8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <MX_ADC_Init+0x94>)
 80014fc:	2207      	movs	r2, #7
 80014fe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_ADC_Init+0x94>)
 8001502:	2207      	movs	r2, #7
 8001504:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <MX_ADC_Init+0x94>)
 8001508:	2200      	movs	r2, #0
 800150a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_ADC_Init+0x94>)
 8001510:	2200      	movs	r2, #0
 8001512:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001514:	4804      	ldr	r0, [pc, #16]	; (8001528 <MX_ADC_Init+0x94>)
 8001516:	f004 fbaf 	bl	8005c78 <HAL_ADC_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001520:	f000 fd72 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200001b4 	.word	0x200001b4
 800152c:	40012400 	.word	0x40012400

08001530 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0d      	ldr	r2, [pc, #52]	; (8001584 <HAL_ADC_MspInit+0x54>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d113      	bne.n	800157a <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001552:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001556:	f7ff ff73 	bl	8001440 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	2002      	movs	r0, #2
 800155c:	f7ff ff58 	bl	8001410 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB13     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = SiPM_Temp_Pin|SiPM_Signal_Pin|Battery_Monitor_Pin;
 8001560:	f242 0318 	movw	r3, #8216	; 0x2018
 8001564:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001566:	2303      	movs	r3, #3
 8001568:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156e:	f107 030c 	add.w	r3, r7, #12
 8001572:	4619      	mov	r1, r3
 8001574:	4804      	ldr	r0, [pc, #16]	; (8001588 <HAL_ADC_MspInit+0x58>)
 8001576:	f006 f97f 	bl	8007878 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800157a:	bf00      	nop
 800157c:	3720      	adds	r7, #32
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40012400 	.word	0x40012400
 8001588:	48000400 	.word	0x48000400

0800158c <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a07      	ldr	r2, [pc, #28]	; (80015b8 <HAL_ADC_MspDeInit+0x2c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d108      	bne.n	80015b0 <HAL_ADC_MspDeInit+0x24>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 800159e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015a2:	f7ff ff65 	bl	8001470 <LL_APB2_GRP1_DisableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    PB4     ------> ADC_IN3
    PB13     ------> ADC_IN0
    */
    HAL_GPIO_DeInit(GPIOB, SiPM_Temp_Pin|SiPM_Signal_Pin|Battery_Monitor_Pin);
 80015a6:	f242 0118 	movw	r1, #8216	; 0x2018
 80015aa:	4804      	ldr	r0, [pc, #16]	; (80015bc <HAL_ADC_MspDeInit+0x30>)
 80015ac:	f006 fac4 	bl	8007b38 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40012400 	.word	0x40012400
 80015bc:	48000400 	.word	0x48000400

080015c0 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <SYS_InitMeasurement+0x14>)
 80015c6:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <SYS_InitMeasurement+0x18>)
 80015c8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	200001b4 	.word	0x200001b4
 80015d8:	40012400 	.word	0x40012400

080015dc <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80015ea:	4813      	ldr	r0, [pc, #76]	; (8001638 <SYS_GetBatteryLevel+0x5c>)
 80015ec:	f000 f82a 	bl	8001644 <ADC_ReadChannels>
 80015f0:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d102      	bne.n	80015fe <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	80fb      	strh	r3, [r7, #6]
 80015fc:	e016      	b.n	800162c <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <SYS_GetBatteryLevel+0x60>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001606:	4293      	cmp	r3, r2
 8001608:	d00b      	beq.n	8001622 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <SYS_GetBatteryLevel+0x60>)
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	f640 43e4 	movw	r3, #3300	; 0xce4
 8001614:	fb03 f202 	mul.w	r2, r3, r2
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	fbb2 f3f3 	udiv	r3, r2, r3
 800161e:	80fb      	strh	r3, [r7, #6]
 8001620:	e004      	b.n	800162c <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001622:	4a07      	ldr	r2, [pc, #28]	; (8001640 <SYS_GetBatteryLevel+0x64>)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	fbb2 f3f3 	udiv	r3, r2, r3
 800162a:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 800162c:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	b4002000 	.word	0xb4002000
 800163c:	1fff75aa 	.word	0x1fff75aa
 8001640:	004c08d8 	.word	0x004c08d8

08001644 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 800165c:	f7ff ff1a 	bl	8001494 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001660:	481a      	ldr	r0, [pc, #104]	; (80016cc <ADC_ReadChannels+0x88>)
 8001662:	f005 f928 	bl	80068b6 <HAL_ADCEx_Calibration_Start>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 800166c:	f000 fccc 	bl	8002008 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001678:	2300      	movs	r3, #0
 800167a:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800167c:	f107 0308 	add.w	r3, r7, #8
 8001680:	4619      	mov	r1, r3
 8001682:	4812      	ldr	r0, [pc, #72]	; (80016cc <ADC_ReadChannels+0x88>)
 8001684:	f004 fe34 	bl	80062f0 <HAL_ADC_ConfigChannel>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 800168e:	f000 fcbb 	bl	8002008 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001692:	480e      	ldr	r0, [pc, #56]	; (80016cc <ADC_ReadChannels+0x88>)
 8001694:	f004 fd10 	bl	80060b8 <HAL_ADC_Start>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 800169e:	f000 fcb3 	bl	8002008 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80016a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016a6:	4809      	ldr	r0, [pc, #36]	; (80016cc <ADC_ReadChannels+0x88>)
 80016a8:	f004 fd7e 	bl	80061a8 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80016ac:	4807      	ldr	r0, [pc, #28]	; (80016cc <ADC_ReadChannels+0x88>)
 80016ae:	f004 fd49 	bl	8006144 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80016b2:	4806      	ldr	r0, [pc, #24]	; (80016cc <ADC_ReadChannels+0x88>)
 80016b4:	f004 fe0f 	bl	80062d6 <HAL_ADC_GetValue>
 80016b8:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80016ba:	4804      	ldr	r0, [pc, #16]	; (80016cc <ADC_ReadChannels+0x88>)
 80016bc:	f004 fc70 	bl	8005fa0 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80016c0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200001b4 	.word	0x200001b4

080016d0 <LL_AHB1_GRP1_EnableClock>:
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80016e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4013      	ands	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016f4:	68fb      	ldr	r3, [r7, #12]
}
 80016f6:	bf00      	nop
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001704:	2004      	movs	r0, #4
 8001706:	f7ff ffe3 	bl	80016d0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800170a:	2001      	movs	r0, #1
 800170c:	f7ff ffe0 	bl	80016d0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	2102      	movs	r1, #2
 8001714:	200b      	movs	r0, #11
 8001716:	f005 fa74 	bl	8006c02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800171a:	200b      	movs	r0, #11
 800171c:	f005 fa8b 	bl	8006c36 <HAL_NVIC_EnableIRQ>

}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}

08001724 <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001730:	23ff      	movs	r3, #255	; 0xff
 8001732:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800173a:	d311      	bcc.n	8001760 <FLASH_IF_Write+0x3c>
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <FLASH_IF_Write+0x48>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	029a      	lsls	r2, r3, #10
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <FLASH_IF_Write+0x4c>)
 8001744:	4013      	ands	r3, r2
 8001746:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800174a:	3b01      	subs	r3, #1
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	4293      	cmp	r3, r2
 8001750:	d306      	bcc.n	8001760 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f000 f85a 	bl	8001810 <FLASH_IF_INT_Write>
 800175c:	4603      	mov	r3, r0
 800175e:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8001760:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	1fff75e0 	.word	0x1fff75e0
 8001770:	03fffc00 	.word	0x03fffc00

08001774 <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001780:	23ff      	movs	r3, #255	; 0xff
 8001782:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800178a:	d311      	bcc.n	80017b0 <FLASH_IF_Read+0x3c>
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <FLASH_IF_Read+0x48>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	029a      	lsls	r2, r3, #10
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <FLASH_IF_Read+0x4c>)
 8001794:	4013      	ands	r3, r2
 8001796:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800179a:	3b01      	subs	r3, #1
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	4293      	cmp	r3, r2
 80017a0:	d306      	bcc.n	80017b0 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f000 f93a 	bl	8001a20 <FLASH_IF_INT_Read>
 80017ac:	4603      	mov	r3, r0
 80017ae:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 80017b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	1fff75e0 	.word	0x1fff75e0
 80017c0:	03fffc00 	.word	0x03fffc00

080017c4 <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80017ce:	23ff      	movs	r3, #255	; 0xff
 80017d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80017d8:	d310      	bcc.n	80017fc <FLASH_IF_Erase+0x38>
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <FLASH_IF_Erase+0x44>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	029a      	lsls	r2, r3, #10
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <FLASH_IF_Erase+0x48>)
 80017e2:	4013      	ands	r3, r2
 80017e4:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80017e8:	3b01      	subs	r3, #1
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d305      	bcc.n	80017fc <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 80017f0:	6839      	ldr	r1, [r7, #0]
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f932 	bl	8001a5c <FLASH_IF_INT_Erase>
 80017f8:	4603      	mov	r3, r0
 80017fa:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 80017fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	1fff75e0 	.word	0x1fff75e0
 800180c:	03fffc00 	.word	0x03fffc00

08001810 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b090      	sub	sp, #64	; 0x40
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t uSource = (uint32_t)pSource;
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t length = uLength;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00c      	beq.n	800184e <FLASH_IF_INT_Write+0x3e>
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d009      	beq.n	800184e <FLASH_IF_INT_Write+0x3e>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	2b00      	cmp	r3, #0
 8001842:	d104      	bne.n	800184e <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	2b00      	cmp	r3, #0
 800184c:	d002      	beq.n	8001854 <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 800184e:	f06f 0305 	mvn.w	r3, #5
 8001852:	e0da      	b.n	8001a0a <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001854:	f000 f992 	bl	8001b7c <FLASH_IF_INT_Clear_Error>
 8001858:	4603      	mov	r3, r0
 800185a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (ret_status == FLASH_IF_OK)
 800185e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001862:	2b00      	cmp	r3, #0
 8001864:	f040 80cf 	bne.w	8001a06 <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001868:	f005 fe30 	bl	80074cc <HAL_FLASH_Unlock>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	f040 80c6 	bne.w	8001a00 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 8001874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001876:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 800187a:	4b66      	ldr	r3, [pc, #408]	; (8001a14 <FLASH_IF_INT_Write+0x204>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	0299      	lsls	r1, r3, #10
 8001880:	4b65      	ldr	r3, [pc, #404]	; (8001a18 <FLASH_IF_INT_Write+0x208>)
 8001882:	400b      	ands	r3, r1
 8001884:	fbb2 f1f3 	udiv	r1, r2, r3
 8001888:	fb01 f303 	mul.w	r3, r1, r3
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	0adb      	lsrs	r3, r3, #11
 8001890:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 8001892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4413      	add	r3, r2
 8001898:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800189c:	3b01      	subs	r3, #1
 800189e:	4a5d      	ldr	r2, [pc, #372]	; (8001a14 <FLASH_IF_INT_Write+0x204>)
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	0291      	lsls	r1, r2, #10
 80018a4:	4a5c      	ldr	r2, [pc, #368]	; (8001a18 <FLASH_IF_INT_Write+0x208>)
 80018a6:	400a      	ands	r2, r1
 80018a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80018ac:	fb01 f202 	mul.w	r2, r1, r2
 80018b0:	1a9b      	subs	r3, r3, r2
 80018b2:	0ada      	lsrs	r2, r3, #11
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	3301      	adds	r3, #1
 80018ba:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d905      	bls.n	80018ce <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 80018c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018c8:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d2:	e089      	b.n	80019e8 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 80018d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80018da:	02db      	lsls	r3, r3, #11
 80018dc:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 80018de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f000 f925 	bl	8001b30 <FLASH_IF_INT_IsEmpty>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d031      	beq.n	8001950 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 80018ec:	4b4b      	ldr	r3, [pc, #300]	; (8001a1c <FLASH_IF_INT_Write+0x20c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d103      	bne.n	80018fc <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 80018f4:	23fa      	movs	r3, #250	; 0xfa
 80018f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 80018fa:	e07e      	b.n	80019fa <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 80018fc:	4b47      	ldr	r3, [pc, #284]	; (8001a1c <FLASH_IF_INT_Write+0x20c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6939      	ldr	r1, [r7, #16]
 8001902:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f88a 	bl	8001a20 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 800190c:	4b43      	ldr	r3, [pc, #268]	; (8001a1c <FLASH_IF_INT_Write+0x20c>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001912:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001916:	4413      	add	r3, r2
 8001918:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800191a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800191c:	b292      	uxth	r2, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f01d fad2 	bl	801eec8 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f896 	bl	8001a5c <FLASH_IF_INT_Erase>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 8001936:	23fe      	movs	r3, #254	; 0xfe
 8001938:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 800193c:	e05d      	b.n	80019fa <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 8001942:	4b36      	ldr	r3, [pc, #216]	; (8001a1c <FLASH_IF_INT_Write+0x20c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 8001948:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800194c:	61fb      	str	r3, [r7, #28]
 800194e:	e005      	b.n	800195c <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 8001950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = uSource;
 8001954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001956:	623b      	str	r3, [r7, #32]
          current_length = length;
 8001958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800195a:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 800195c:	2300      	movs	r3, #0
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001960:	e026      	b.n	80019b0 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 8001962:	6a3a      	ldr	r2, [r7, #32]
 8001964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001966:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800196e:	2001      	movs	r0, #1
 8001970:	f005 fd68 	bl	8007444 <HAL_FLASH_Program>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d113      	bne.n	80019a2 <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001980:	6a3a      	ldr	r2, [r7, #32]
 8001982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001984:	4413      	add	r3, r2
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	4299      	cmp	r1, r3
 800198c:	bf08      	it	eq
 800198e:	4290      	cmpeq	r0, r2
 8001990:	d003      	beq.n	800199a <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 8001992:	23fc      	movs	r3, #252	; 0xfc
 8001994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 8001998:	e00e      	b.n	80019b8 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	3308      	adds	r3, #8
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
 80019a0:	e003      	b.n	80019aa <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 80019a2:	23fc      	movs	r3, #252	; 0xfc
 80019a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 80019a8:	e006      	b.n	80019b8 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80019aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ac:	3308      	adds	r3, #8
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80019b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d3d4      	bcc.n	8001962 <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 80019b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d11b      	bne.n	80019f8 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 80019c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c4:	4413      	add	r3, r2
 80019c6:	63bb      	str	r3, [r7, #56]	; 0x38
        uSource += length;
 80019c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019cc:	4413      	add	r3, r2
 80019ce:	637b      	str	r3, [r7, #52]	; 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019da:	bf28      	it	cs
 80019dc:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 80019e0:	633b      	str	r3, [r7, #48]	; 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80019e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e4:	3301      	adds	r3, #1
 80019e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	4413      	add	r3, r2
 80019ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019f0:	429a      	cmp	r2, r3
 80019f2:	f4ff af6f 	bcc.w	80018d4 <FLASH_IF_INT_Write+0xc4>
 80019f6:	e000      	b.n	80019fa <FLASH_IF_INT_Write+0x1ea>
          break;
 80019f8:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 80019fa:	f005 fd89 	bl	8007510 <HAL_FLASH_Lock>
 80019fe:	e002      	b.n	8001a06 <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001a00:	23fb      	movs	r3, #251	; 0xfb
 8001a02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 8001a06:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3740      	adds	r7, #64	; 0x40
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	1fff75e0 	.word	0x1fff75e0
 8001a18:	03fffc00 	.word	0x03fffc00
 8001a1c:	20000218 	.word	0x20000218

08001a20 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d002      	beq.n	8001a3c <FLASH_IF_INT_Read+0x1c>
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d102      	bne.n	8001a42 <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8001a3c:	f06f 0305 	mvn.w	r3, #5
 8001a40:	e008      	b.n	8001a54 <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	461a      	mov	r2, r3
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f01d fa3c 	bl	801eec8 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001a50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d102      	bne.n	8001a82 <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001a7c:	f06f 0305 	mvn.w	r3, #5
 8001a80:	e04e      	b.n	8001b20 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001a82:	f000 f87b 	bl	8001b7c <FLASH_IF_INT_Clear_Error>
 8001a86:	4603      	mov	r3, r0
 8001a88:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 8001a8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d144      	bne.n	8001b1c <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001a92:	f005 fd1b 	bl	80074cc <HAL_FLASH_Unlock>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d13d      	bne.n	8001b18 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001aa6:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <FLASH_IF_INT_Erase+0xcc>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	0299      	lsls	r1, r3, #10
 8001aac:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <FLASH_IF_INT_Erase+0xd0>)
 8001aae:	400b      	ands	r3, r1
 8001ab0:	fbb2 f1f3 	udiv	r1, r2, r3
 8001ab4:	fb01 f303 	mul.w	r3, r1, r3
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	0adb      	lsrs	r3, r3, #11
 8001abc:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	4a17      	ldr	r2, [pc, #92]	; (8001b28 <FLASH_IF_INT_Erase+0xcc>)
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	0291      	lsls	r1, r2, #10
 8001ad0:	4a16      	ldr	r2, [pc, #88]	; (8001b2c <FLASH_IF_INT_Erase+0xd0>)
 8001ad2:	400a      	ands	r2, r1
 8001ad4:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ad8:	fb01 f202 	mul.w	r2, r1, r2
 8001adc:	1a9b      	subs	r3, r3, r2
 8001ade:	0ada      	lsrs	r2, r3, #11
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001ae8:	f107 0214 	add.w	r2, r7, #20
 8001aec:	f107 0308 	add.w	r3, r7, #8
 8001af0:	4611      	mov	r1, r2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f005 fdec 	bl	80076d0 <HAL_FLASHEx_Erase>
 8001af8:	4603      	mov	r3, r0
 8001afa:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001afc:	7fbb      	ldrb	r3, [r7, #30]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d007      	beq.n	8001b12 <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001b02:	7fbb      	ldrb	r3, [r7, #30]
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d101      	bne.n	8001b0c <FLASH_IF_INT_Erase+0xb0>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e001      	b.n	8001b10 <FLASH_IF_INT_Erase+0xb4>
 8001b0c:	f06f 0301 	mvn.w	r3, #1
 8001b10:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001b12:	f005 fcfd 	bl	8007510 <HAL_FLASH_Lock>
 8001b16:	e001      	b.n	8001b1c <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001b18:	23fb      	movs	r3, #251	; 0xfb
 8001b1a:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001b1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3720      	adds	r7, #32
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	1fff75e0 	.word	0x1fff75e0
 8001b2c:	03fffc00 	.word	0x03fffc00

08001b30 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	e011      	b.n	8001b68 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b4e:	bf08      	it	eq
 8001b50:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8001b54:	d002      	beq.n	8001b5c <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001b56:	2301      	movs	r3, #1
 8001b58:	60fb      	str	r3, [r7, #12]
      break;
 8001b5a:	e009      	b.n	8001b70 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3308      	adds	r3, #8
 8001b60:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	3308      	adds	r3, #8
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d3e9      	bcc.n	8001b44 <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001b70:	68fb      	ldr	r3, [r7, #12]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001b82:	23fb      	movs	r3, #251	; 0xfb
 8001b84:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001b86:	f005 fca1 	bl	80074cc <HAL_FLASH_Unlock>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d110      	bne.n	8001bb2 <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <FLASH_IF_INT_Clear_Error+0x44>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <FLASH_IF_INT_Clear_Error+0x44>)
 8001b96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001b9a:	6193      	str	r3, [r2, #24]
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <FLASH_IF_INT_Clear_Error+0x44>)
 8001b9e:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001ba2:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001ba4:	f005 fcb4 	bl	8007510 <HAL_FLASH_Lock>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	58004000 	.word	0x58004000

08001bc4 <LL_AHB2_GRP1_EnableClock>:
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4013      	ands	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001be8:	68fb      	ldr	r3, [r7, #12]
}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfa:	1d3b      	adds	r3, r7, #4
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f7ff ffdb 	bl	8001bc4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0e:	2002      	movs	r0, #2
 8001c10:	f7ff ffd8 	bl	8001bc4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c14:	2004      	movs	r0, #4
 8001c16:	f7ff ffd5 	bl	8001bc4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Stim_Enable_Pin|Bias_CS_Pin, GPIO_PIN_RESET);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001c20:	4831      	ldr	r0, [pc, #196]	; (8001ce8 <MX_GPIO_Init+0xf4>)
 8001c22:	f006 f86e 	bl	8007d02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Anneal_Enable_Pin|Env_Sens_Enable_Pin|Memory_CS_Pin|RF_CTRL1_Pin
 8001c26:	2200      	movs	r2, #0
 8001c28:	f240 4135 	movw	r1, #1077	; 0x435
 8001c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c30:	f006 f867 	bl	8007d02 <HAL_GPIO_WritePin>
                          |RF_CTRL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001c34:	2201      	movs	r2, #1
 8001c36:	2120      	movs	r1, #32
 8001c38:	482b      	ldr	r0, [pc, #172]	; (8001ce8 <MX_GPIO_Init+0xf4>)
 8001c3a:	f006 f862 	bl	8007d02 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Stim_Enable_Pin|Bias_CS_Pin;
 8001c3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c44:	2301      	movs	r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	4619      	mov	r1, r3
 8001c54:	4824      	ldr	r0, [pc, #144]	; (8001ce8 <MX_GPIO_Init+0xf4>)
 8001c56:	f005 fe0f 	bl	8007878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Anneal_Enable_Pin|Env_Sens_Enable_Pin|Memory_CS_Pin;
 8001c5a:	f240 4305 	movw	r3, #1029	; 0x405
 8001c5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c60:	2301      	movs	r3, #1
 8001c62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c74:	f005 fe00 	bl	8007878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001c78:	2320      	movs	r3, #32
 8001c7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c84:	2303      	movs	r3, #3
 8001c86:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4816      	ldr	r0, [pc, #88]	; (8001ce8 <MX_GPIO_Init+0xf4>)
 8001c8e:	f005 fdf3 	bl	8007878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Accel_Int_Pin;
 8001c92:	2301      	movs	r3, #1
 8001c94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c96:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Accel_Int_GPIO_Port, &GPIO_InitStruct);
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4811      	ldr	r0, [pc, #68]	; (8001cec <MX_GPIO_Init+0xf8>)
 8001ca6:	f005 fde7 	bl	8007878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Boot_Mode_Pin;
 8001caa:	2308      	movs	r3, #8
 8001cac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Boot_Mode_GPIO_Port, &GPIO_InitStruct);
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cbe:	f005 fddb 	bl	8007878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001cc2:	2330      	movs	r3, #48	; 0x30
 8001cc4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cda:	f005 fdcd 	bl	8007878 <HAL_GPIO_Init>

}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	48000400 	.word	0x48000400
 8001cec:	48000800 	.word	0x48000800

08001cf0 <LL_AHB2_GRP1_EnableClock>:
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4013      	ands	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d14:	68fb      	ldr	r3, [r7, #12]
}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <LL_APB1_GRP1_EnableClock>:
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4013      	ands	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d44:	68fb      	ldr	r3, [r7, #12]
}
 8001d46:	bf00      	nop
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d54:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <MX_I2C2_Init+0x74>)
 8001d56:	4a1c      	ldr	r2, [pc, #112]	; (8001dc8 <MX_I2C2_Init+0x78>)
 8001d58:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <MX_I2C2_Init+0x74>)
 8001d5c:	4a1b      	ldr	r2, [pc, #108]	; (8001dcc <MX_I2C2_Init+0x7c>)
 8001d5e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001d60:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <MX_I2C2_Init+0x74>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d66:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <MX_I2C2_Init+0x74>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d6c:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <MX_I2C2_Init+0x74>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001d72:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <MX_I2C2_Init+0x74>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <MX_I2C2_Init+0x74>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <MX_I2C2_Init+0x74>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d84:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <MX_I2C2_Init+0x74>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d8a:	480e      	ldr	r0, [pc, #56]	; (8001dc4 <MX_I2C2_Init+0x74>)
 8001d8c:	f005 ffd0 	bl	8007d30 <HAL_I2C_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001d96:	f000 f937 	bl	8002008 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4809      	ldr	r0, [pc, #36]	; (8001dc4 <MX_I2C2_Init+0x74>)
 8001d9e:	f006 fd1d 	bl	80087dc <HAL_I2CEx_ConfigAnalogFilter>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001da8:	f000 f92e 	bl	8002008 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001dac:	2100      	movs	r1, #0
 8001dae:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <MX_I2C2_Init+0x74>)
 8001db0:	f006 fd5e 	bl	8008870 <HAL_I2CEx_ConfigDigitalFilter>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001dba:	f000 f925 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	2000021c 	.word	0x2000021c
 8001dc8:	40005800 	.word	0x40005800
 8001dcc:	20303e5d 	.word	0x20303e5d

08001dd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b096      	sub	sp, #88	; 0x58
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001de8:	f107 030c 	add.w	r3, r7, #12
 8001dec:	2238      	movs	r2, #56	; 0x38
 8001dee:	2100      	movs	r1, #0
 8001df0:	4618      	mov	r0, r3
 8001df2:	f01e fbed 	bl	80205d0 <memset>
  if(i2cHandle->Instance==I2C2)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a21      	ldr	r2, [pc, #132]	; (8001e80 <HAL_I2C_MspInit+0xb0>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d13b      	bne.n	8001e78 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e00:	2380      	movs	r3, #128	; 0x80
 8001e02:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e04:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e0a:	f107 030c 	add.w	r3, r7, #12
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f007 ffea 	bl	8009de8 <HAL_RCCEx_PeriphCLKConfig>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e1a:	f000 f8f5 	bl	8002008 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1e:	2001      	movs	r0, #1
 8001e20:	f7ff ff66 	bl	8001cf0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e24:	2002      	movs	r0, #2
 8001e26:	f7ff ff63 	bl	8001cf0 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e2e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e30:	2312      	movs	r3, #18
 8001e32:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e3c:	2304      	movs	r3, #4
 8001e3e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e40:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e44:	4619      	mov	r1, r3
 8001e46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e4a:	f005 fd15 	bl	8007878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e52:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e54:	2312      	movs	r3, #18
 8001e56:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e60:	2304      	movs	r3, #4
 8001e62:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e64:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4806      	ldr	r0, [pc, #24]	; (8001e84 <HAL_I2C_MspInit+0xb4>)
 8001e6c:	f005 fd04 	bl	8007878 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e70:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001e74:	f7ff ff54 	bl	8001d20 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001e78:	bf00      	nop
 8001e7a:	3758      	adds	r7, #88	; 0x58
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40005800 	.word	0x40005800
 8001e84:	48000400 	.word	0x48000400

08001e88 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e98:	f023 0218 	bic.w	r2, r3, #24
 8001e9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
	...

08001eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eba:	f003 fcef 	bl	800589c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ebe:	f000 f83b 	bl	8001f38 <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */

  // initialize the GPIOs this is to allow the probing of the Boot Mode pin to determine
  // if the user button was pressed during reset
  MX_GPIO_Init();
 8001ec2:	f7ff fe97 	bl	8001bf4 <MX_GPIO_Init>

  // check to see if the boot mode pin is drawn low (button pressed)
  int boot_mode = HAL_GPIO_ReadPin(Boot_Mode_GPIO_Port, Boot_Mode_Pin);
 8001ec6:	2108      	movs	r1, #8
 8001ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ecc:	f005 ff02 	bl	8007cd4 <HAL_GPIO_ReadPin>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	603b      	str	r3, [r7, #0]

  //enable LoRaWAN or experiment mode as required
  bool experimentMode = false;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	71fb      	strb	r3, [r7, #7]
  //if (DEFAULT_DISBALE_LORA && boot_mode == 0) MX_LoRaWAN_Init();
  if (DEFAULT_DISBALE_LORA && boot_mode == 1) experimentMode = true;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d101      	bne.n	8001ee2 <main+0x2e>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	71fb      	strb	r3, [r7, #7]
  if (!DEFAULT_DISBALE_LORA && boot_mode == 0) experimentMode = true;
  //if (!DEFAULT_DISBALE_LORA && boot_mode == 1) MX_LoRaWAN_Init();
  MX_LoRaWAN_Init();
 8001ee2:	f00c f82b 	bl	800df3c <MX_LoRaWAN_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_I2C2_Init();
 8001ee6:	f7ff ff33 	bl	8001d50 <MX_I2C2_Init>
  MX_SPI2_Init();
 8001eea:	f000 f9a5 	bl	8002238 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  bsp_env_sensors.init(&hi2c2);
 8001eee:	490e      	ldr	r1, [pc, #56]	; (8001f28 <main+0x74>)
 8001ef0:	480e      	ldr	r0, [pc, #56]	; (8001f2c <main+0x78>)
 8001ef2:	f003 fa59 	bl	80053a8 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef>
  detector.init();
 8001ef6:	480e      	ldr	r0, [pc, #56]	; (8001f30 <main+0x7c>)
 8001ef8:	f001 fa22 	bl	8003340 <_ZN8Detector4initEv>
  MX_ADC_Init();
 8001efc:	f7ff faca 	bl	8001494 <MX_ADC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(Memory_CS_GPIO_Port, Memory_CS_Pin, GPIO_PIN_SET);
 8001f00:	2201      	movs	r2, #1
 8001f02:	2104      	movs	r1, #4
 8001f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f08:	f005 fefb 	bl	8007d02 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Bias_CS_GPIO_Port, Bias_CS_Pin, GPIO_PIN_SET);
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f12:	4808      	ldr	r0, [pc, #32]	; (8001f34 <main+0x80>)
 8001f14:	f005 fef5 	bl	8007d02 <HAL_GPIO_WritePin>
  if (experimentMode) enterExperimentMode();
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <main+0x6e>
 8001f1e:	f003 fbc5 	bl	80056ac <_Z19enterExperimentModev>

  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001f22:	f00c f813 	bl	800df4c <MX_LoRaWAN_Process>
 8001f26:	e7fc      	b.n	8001f22 <main+0x6e>
 8001f28:	2000021c 	.word	0x2000021c
 8001f2c:	20000270 	.word	0x20000270
 8001f30:	20000380 	.word	0x20000380
 8001f34:	48000400 	.word	0x48000400

08001f38 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b09a      	sub	sp, #104	; 0x68
 8001f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f3e:	f107 0320 	add.w	r3, r7, #32
 8001f42:	2248      	movs	r2, #72	; 0x48
 8001f44:	2100      	movs	r1, #0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f01e fb42 	bl	80205d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f4c:	f107 0308 	add.w	r3, r7, #8
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
 8001f5c:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f5e:	f006 fcd3 	bl	8008908 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001f62:	2000      	movs	r0, #0
 8001f64:	f7ff ff90 	bl	8001e88 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f68:	4b26      	ldr	r3, [pc, #152]	; (8002004 <_Z18SystemClock_Configv+0xcc>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f70:	4a24      	ldr	r2, [pc, #144]	; (8002004 <_Z18SystemClock_Configv+0xcc>)
 8001f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	4b22      	ldr	r3, [pc, #136]	; (8002004 <_Z18SystemClock_Configv+0xcc>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8001f84:	2326      	movs	r3, #38	; 0x26
 8001f86:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f88:	2381      	movs	r3, #129	; 0x81
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f90:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001f92:	2301      	movs	r3, #1
 8001f94:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f96:	2340      	movs	r3, #64	; 0x40
 8001f98:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001f9e:	23b0      	movs	r3, #176	; 0xb0
 8001fa0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fa6:	f107 0320 	add.w	r3, r7, #32
 8001faa:	4618      	mov	r0, r3
 8001fac:	f006 fff8 	bl	8008fa0 <HAL_RCC_OscConfig>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	bf14      	ite	ne
 8001fb6:	2301      	movne	r3, #1
 8001fb8:	2300      	moveq	r3, #0
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8001fc0:	f000 f822 	bl	8002008 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001fc4:	234f      	movs	r3, #79	; 0x4f
 8001fc6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fdc:	f107 0308 	add.w	r3, r7, #8
 8001fe0:	2102      	movs	r1, #2
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f007 fb5e 	bl	80096a4 <HAL_RCC_ClockConfig>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	bf14      	ite	ne
 8001fee:	2301      	movne	r3, #1
 8001ff0:	2300      	moveq	r3, #0
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8001ff8:	f000 f806 	bl	8002008 <Error_Handler>
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	3768      	adds	r7, #104	; 0x68
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	58000400 	.word	0x58000400

08002008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800200c:	b672      	cpsid	i
}
 800200e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  	APP_LOG(TS_ON, VLEVEL_M, "HAL error");
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <Error_Handler+0x18>)
 8002012:	2201      	movs	r2, #1
 8002014:	2100      	movs	r1, #0
 8002016:	2002      	movs	r0, #2
 8002018:	f01d ffc2 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
 800201c:	e7f8      	b.n	8002010 <Error_Handler+0x8>
 800201e:	bf00      	nop
 8002020:	08020eec 	.word	0x08020eec

08002024 <_Z41__static_initialization_and_destruction_0ii>:
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d10a      	bne.n	800204a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800203a:	4293      	cmp	r3, r2
 800203c:	d105      	bne.n	800204a <_Z41__static_initialization_and_destruction_0ii+0x26>
EnvionmentSensors bsp_env_sensors;
 800203e:	4805      	ldr	r0, [pc, #20]	; (8002054 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8002040:	f003 f99f 	bl	8005382 <_ZN17EnvionmentSensorsC1Ev>
Detector detector;
 8002044:	4804      	ldr	r0, [pc, #16]	; (8002058 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002046:	f001 f966 	bl	8003316 <_ZN8DetectorC1Ev>
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000270 	.word	0x20000270
 8002058:	20000380 	.word	0x20000380

0800205c <_GLOBAL__sub_I_bsp_env_sensors>:
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
 8002060:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002064:	2001      	movs	r0, #1
 8002066:	f7ff ffdd 	bl	8002024 <_Z41__static_initialization_and_destruction_0ii>
 800206a:	bd80      	pop	{r7, pc}

0800206c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002078:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800207c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr

0800208c <LL_APB1_GRP1_EnableClock>:
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002098:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800209a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80020a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4013      	ands	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020b0:	68fb      	ldr	r3, [r7, #12]
}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08c      	sub	sp, #48	; 0x30
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	222c      	movs	r2, #44	; 0x2c
 80020c6:	2100      	movs	r1, #0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f01e fa81 	bl	80205d0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80020ce:	4b22      	ldr	r3, [pc, #136]	; (8002158 <MX_RTC_Init+0x9c>)
 80020d0:	4a22      	ldr	r2, [pc, #136]	; (800215c <MX_RTC_Init+0xa0>)
 80020d2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80020d4:	4b20      	ldr	r3, [pc, #128]	; (8002158 <MX_RTC_Init+0x9c>)
 80020d6:	221f      	movs	r2, #31
 80020d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80020da:	4b1f      	ldr	r3, [pc, #124]	; (8002158 <MX_RTC_Init+0x9c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80020e0:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <MX_RTC_Init+0x9c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80020e6:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <MX_RTC_Init+0x9c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80020ec:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <MX_RTC_Init+0x9c>)
 80020ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020f2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80020f4:	4b18      	ldr	r3, [pc, #96]	; (8002158 <MX_RTC_Init+0x9c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80020fa:	4b17      	ldr	r3, [pc, #92]	; (8002158 <MX_RTC_Init+0x9c>)
 80020fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002100:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002102:	4815      	ldr	r0, [pc, #84]	; (8002158 <MX_RTC_Init+0x9c>)
 8002104:	f007 ff8a 	bl	800a01c <HAL_RTC_Init>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800210e:	f7ff ff7b 	bl	8002008 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8002112:	4811      	ldr	r0, [pc, #68]	; (8002158 <MX_RTC_Init+0x9c>)
 8002114:	f008 fa80 	bl	800a618 <HAL_RTCEx_SetSSRU_IT>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800211e:	f7ff ff73 	bl	8002008 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002122:	2300      	movs	r3, #0
 8002124:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002126:	2300      	movs	r3, #0
 8002128:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800212e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002132:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8002134:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002138:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	2200      	movs	r2, #0
 800213e:	4619      	mov	r1, r3
 8002140:	4805      	ldr	r0, [pc, #20]	; (8002158 <MX_RTC_Init+0x9c>)
 8002142:	f007 ffed 	bl	800a120 <HAL_RTC_SetAlarm_IT>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 800214c:	f7ff ff5c 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002150:	bf00      	nop
 8002152:	3730      	adds	r7, #48	; 0x30
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	200003cc 	.word	0x200003cc
 800215c:	40002800 	.word	0x40002800

08002160 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b090      	sub	sp, #64	; 0x40
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002168:	f107 0308 	add.w	r3, r7, #8
 800216c:	2238      	movs	r2, #56	; 0x38
 800216e:	2100      	movs	r1, #0
 8002170:	4618      	mov	r0, r3
 8002172:	f01e fa2d 	bl	80205d0 <memset>
  if(rtcHandle->Instance==RTC)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a16      	ldr	r2, [pc, #88]	; (80021d4 <HAL_RTC_MspInit+0x74>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d125      	bne.n	80021cc <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002180:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002184:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002186:	f44f 7380 	mov.w	r3, #256	; 0x100
 800218a:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800218c:	f107 0308 	add.w	r3, r7, #8
 8002190:	4618      	mov	r0, r3
 8002192:	f007 fe29 	bl	8009de8 <HAL_RCCEx_PeriphCLKConfig>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800219c:	f7ff ff34 	bl	8002008 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021a0:	f7ff ff64 	bl	800206c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80021a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021a8:	f7ff ff70 	bl	800208c <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80021ac:	2200      	movs	r2, #0
 80021ae:	2100      	movs	r1, #0
 80021b0:	2002      	movs	r0, #2
 80021b2:	f004 fd26 	bl	8006c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80021b6:	2002      	movs	r0, #2
 80021b8:	f004 fd3d 	bl	8006c36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80021bc:	2200      	movs	r2, #0
 80021be:	2100      	movs	r1, #0
 80021c0:	202a      	movs	r0, #42	; 0x2a
 80021c2:	f004 fd1e 	bl	8006c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80021c6:	202a      	movs	r0, #42	; 0x2a
 80021c8:	f004 fd35 	bl	8006c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80021cc:	bf00      	nop
 80021ce:	3740      	adds	r7, #64	; 0x40
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40002800 	.word	0x40002800

080021d8 <LL_AHB2_GRP1_EnableClock>:
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80021e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80021f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4013      	ands	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021fc:	68fb      	ldr	r3, [r7, #12]
}
 80021fe:	bf00      	nop
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr

08002208 <LL_APB1_GRP1_EnableClock>:
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002214:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002216:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4313      	orrs	r3, r2
 800221e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002224:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4013      	ands	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800222c:	68fb      	ldr	r3, [r7, #12]
}
 800222e:	bf00      	nop
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800223c:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <MX_SPI2_Init+0x74>)
 800223e:	4a1c      	ldr	r2, [pc, #112]	; (80022b0 <MX_SPI2_Init+0x78>)
 8002240:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002242:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <MX_SPI2_Init+0x74>)
 8002244:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002248:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800224a:	4b18      	ldr	r3, [pc, #96]	; (80022ac <MX_SPI2_Init+0x74>)
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002250:	4b16      	ldr	r3, [pc, #88]	; (80022ac <MX_SPI2_Init+0x74>)
 8002252:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002256:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002258:	4b14      	ldr	r3, [pc, #80]	; (80022ac <MX_SPI2_Init+0x74>)
 800225a:	2200      	movs	r2, #0
 800225c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800225e:	4b13      	ldr	r3, [pc, #76]	; (80022ac <MX_SPI2_Init+0x74>)
 8002260:	2200      	movs	r2, #0
 8002262:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002264:	4b11      	ldr	r3, [pc, #68]	; (80022ac <MX_SPI2_Init+0x74>)
 8002266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800226a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800226c:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <MX_SPI2_Init+0x74>)
 800226e:	2218      	movs	r2, #24
 8002270:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002272:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <MX_SPI2_Init+0x74>)
 8002274:	2200      	movs	r2, #0
 8002276:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <MX_SPI2_Init+0x74>)
 800227a:	2200      	movs	r2, #0
 800227c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800227e:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <MX_SPI2_Init+0x74>)
 8002280:	2200      	movs	r2, #0
 8002282:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002284:	4b09      	ldr	r3, [pc, #36]	; (80022ac <MX_SPI2_Init+0x74>)
 8002286:	2207      	movs	r2, #7
 8002288:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800228a:	4b08      	ldr	r3, [pc, #32]	; (80022ac <MX_SPI2_Init+0x74>)
 800228c:	2200      	movs	r2, #0
 800228e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <MX_SPI2_Init+0x74>)
 8002292:	2200      	movs	r2, #0
 8002294:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002296:	4805      	ldr	r0, [pc, #20]	; (80022ac <MX_SPI2_Init+0x74>)
 8002298:	f008 fa4c 	bl	800a734 <HAL_SPI_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80022a2:	f7ff feb1 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000404 	.word	0x20000404
 80022b0:	40003800 	.word	0x40003800

080022b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b096      	sub	sp, #88	; 0x58
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022cc:	f107 030c 	add.w	r3, r7, #12
 80022d0:	2238      	movs	r2, #56	; 0x38
 80022d2:	2100      	movs	r1, #0
 80022d4:	4618      	mov	r0, r3
 80022d6:	f01e f97b 	bl	80205d0 <memset>
  if(spiHandle->Instance==SPI2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a2b      	ldr	r2, [pc, #172]	; (800238c <HAL_SPI_MspInit+0xd8>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d14e      	bne.n	8002382 <HAL_SPI_MspInit+0xce>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 80022e4:	2310      	movs	r3, #16
 80022e6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 80022e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022ec:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ee:	f107 030c 	add.w	r3, r7, #12
 80022f2:	4618      	mov	r0, r3
 80022f4:	f007 fd78 	bl	8009de8 <HAL_RCCEx_PeriphCLKConfig>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80022fe:	f7ff fe83 	bl	8002008 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002302:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002306:	f7ff ff7f 	bl	8002208 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800230a:	2002      	movs	r0, #2
 800230c:	f7ff ff64 	bl	80021d8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002310:	2001      	movs	r0, #1
 8002312:	f7ff ff61 	bl	80021d8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002316:	2004      	movs	r0, #4
 8002318:	f7ff ff5e 	bl	80021d8 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA9     ------> SPI2_SCK
    PC1     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800231c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002320:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232a:	2300      	movs	r3, #0
 800232c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800232e:	2305      	movs	r3, #5
 8002330:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002332:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002336:	4619      	mov	r1, r3
 8002338:	4815      	ldr	r0, [pc, #84]	; (8002390 <HAL_SPI_MspInit+0xdc>)
 800233a:	f005 fa9d 	bl	8007878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800233e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002342:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	2300      	movs	r3, #0
 800234e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002350:	2305      	movs	r3, #5
 8002352:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002354:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002358:	4619      	mov	r1, r3
 800235a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800235e:	f005 fa8b 	bl	8007878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002362:	2302      	movs	r3, #2
 8002364:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	2302      	movs	r3, #2
 8002368:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236e:	2300      	movs	r3, #0
 8002370:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8002372:	2303      	movs	r3, #3
 8002374:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002376:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800237a:	4619      	mov	r1, r3
 800237c:	4805      	ldr	r0, [pc, #20]	; (8002394 <HAL_SPI_MspInit+0xe0>)
 800237e:	f005 fa7b 	bl	8007878 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002382:	bf00      	nop
 8002384:	3758      	adds	r7, #88	; 0x58
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40003800 	.word	0x40003800
 8002390:	48000400 	.word	0x48000400
 8002394:	48000800 	.word	0x48000800

08002398 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 800239c:	4b03      	ldr	r3, [pc, #12]	; (80023ac <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 800239e:	2201      	movs	r2, #1
 80023a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	58000400 	.word	0x58000400

080023b0 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr

080023c8 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80023cc:	f003 fa86 	bl	80058dc <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 80023d0:	f7ff ffe2 	bl	8002398 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80023d4:	2001      	movs	r0, #1
 80023d6:	f006 fb29 	bl	8008a2c <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}

080023de <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 80023e2:	f003 fa89 	bl	80058f8 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 80023e6:	f000 ff17 	bl	8003218 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */
  
  /* USER CODE END ExitStopMode_2 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}

080023ee <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 80023f2:	f003 fa73 	bl	80058dc <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80023f6:	2101      	movs	r1, #1
 80023f8:	2000      	movs	r0, #0
 80023fa:	f006 fa93 	bl	8008924 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}

08002402 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8002406:	f003 fa77 	bl	80058f8 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002412:	bf00      	nop
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr

0800241a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800241e:	e7fe      	b.n	800241e <NMI_Handler+0x4>

08002420 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002424:	e7fe      	b.n	8002424 <HardFault_Handler+0x4>

08002426 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800242a:	e7fe      	b.n	800242a <MemManage_Handler+0x4>

0800242c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002430:	e7fe      	b.n	8002430 <BusFault_Handler+0x4>

08002432 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002436:	e7fe      	b.n	8002436 <UsageFault_Handler+0x4>

08002438 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr

08002444 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr

08002450 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 800246e:	f008 f90f 	bl	800a690 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200003cc 	.word	0x200003cc

0800247c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <DMA1_Channel1_IRQHandler+0x10>)
 8002482:	f004 fe6f 	bl	8007164 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000518 	.word	0x20000518

08002490 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <USART1_IRQHandler+0x10>)
 8002496:	f009 fc57 	bl	800bd48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000484 	.word	0x20000484

080024a4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80024a8:	4802      	ldr	r0, [pc, #8]	; (80024b4 <RTC_Alarm_IRQHandler+0x10>)
 80024aa:	f007 ffa1 	bl	800a3f0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	200003cc 	.word	0x200003cc

080024b8 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <SUBGHZ_Radio_IRQHandler+0x10>)
 80024be:	f009 f81d 	bl	800b4fc <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000468 	.word	0x20000468

080024cc <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80024d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80024e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4013      	ands	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024f0:	68fb      	ldr	r3, [r7, #12]
}
 80024f2:	bf00      	nop
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr

080024fc <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <MX_SUBGHZ_Init+0x20>)
 8002502:	2208      	movs	r2, #8
 8002504:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8002506:	4805      	ldr	r0, [pc, #20]	; (800251c <MX_SUBGHZ_Init+0x20>)
 8002508:	f008 fd76 	bl	800aff8 <HAL_SUBGHZ_Init>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8002512:	f7ff fd79 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000468 	.word	0x20000468

08002520 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002528:	2001      	movs	r0, #1
 800252a:	f7ff ffcf 	bl	80024cc <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800252e:	2200      	movs	r2, #0
 8002530:	2100      	movs	r1, #0
 8002532:	2032      	movs	r0, #50	; 0x32
 8002534:	f004 fb65 	bl	8006c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002538:	2032      	movs	r0, #50	; 0x32
 800253a:	f004 fb7c 	bl	8006c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800254e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002558:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4313      	orrs	r3, r2
 8002560:	608b      	str	r3, [r1, #8]
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr

0800256c <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8002570:	4b02      	ldr	r3, [pc, #8]	; (800257c <LL_FLASH_GetUDN+0x10>)
 8002572:	681b      	ldr	r3, [r3, #0]
}
 8002574:	4618      	mov	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr
 800257c:	1fff7580 	.word	0x1fff7580

08002580 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002584:	4b03      	ldr	r3, [pc, #12]	; (8002594 <LL_FLASH_GetDeviceID+0x14>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	b2db      	uxtb	r3, r3
}
 800258a:	4618      	mov	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	1fff7584 	.word	0x1fff7584

08002598 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800259c:	4b03      	ldr	r3, [pc, #12]	; (80025ac <LL_FLASH_GetSTCompanyID+0x14>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	0a1b      	lsrs	r3, r3, #8
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	1fff7584 	.word	0x1fff7584

080025b0 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 80025b4:	2000      	movs	r0, #0
 80025b6:	f7ff ffc6 	bl	8002546 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 80025ba:	f01d fa33 	bl	801fa24 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <SystemApp_Init+0x48>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 80025c4:	f000 f988 	bl	80028d8 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 80025c8:	f01d fcbc 	bl	801ff44 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80025cc:	480b      	ldr	r0, [pc, #44]	; (80025fc <SystemApp_Init+0x4c>)
 80025ce:	f01d fd67 	bl	80200a0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80025d2:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <SystemApp_Init+0x50>)
 80025d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80025d8:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80025da:	2003      	movs	r0, #3
 80025dc:	f01d fd6e 	bl	80200bc <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 80025e0:	f7fe ffee 	bl	80015c0 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 80025e4:	f000 f9b0 	bl	8002948 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 80025e8:	f01c fbc8 	bl	801ed7c <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80025ec:	2101      	movs	r1, #1
 80025ee:	2001      	movs	r0, #1
 80025f0:	f01c fc04 	bl	801edfc <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 80025f4:	bf00      	nop
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20000474 	.word	0x20000474
 80025fc:	080027d1 	.word	0x080027d1
 8002600:	58004000 	.word	0x58004000

08002604 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8002608:	f01c fc28 	bl	801ee5c <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 800260c:	bf00      	nop
 800260e:	bd80      	pop	{r7, pc}

08002610 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 800261a:	f7fe ffdf 	bl	80015dc <SYS_GetBatteryLevel>
 800261e:	4603      	mov	r3, r0
 8002620:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8002622:	88bb      	ldrh	r3, [r7, #4]
 8002624:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002628:	4293      	cmp	r3, r2
 800262a:	d902      	bls.n	8002632 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 800262c:	23fe      	movs	r3, #254	; 0xfe
 800262e:	71fb      	strb	r3, [r7, #7]
 8002630:	e014      	b.n	800265c <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8002632:	88bb      	ldrh	r3, [r7, #4]
 8002634:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8002638:	d202      	bcs.n	8002640 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	71fb      	strb	r3, [r7, #7]
 800263e:	e00d      	b.n	800265c <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8002640:	88bb      	ldrh	r3, [r7, #4]
 8002642:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8002646:	461a      	mov	r2, r3
 8002648:	4613      	mov	r3, r2
 800264a:	01db      	lsls	r3, r3, #7
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	461a      	mov	r2, r3
 8002652:	4b05      	ldr	r3, [pc, #20]	; (8002668 <GetBatteryLevel+0x58>)
 8002654:	fba3 2302 	umull	r2, r3, r3, r2
 8002658:	09db      	lsrs	r3, r3, #7
 800265a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 800265c:	79fb      	ldrb	r3, [r7, #7]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	1b4e81b5 	.word	0x1b4e81b5

0800266c <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b088      	sub	sp, #32
 8002670:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8002676:	1d3b      	adds	r3, r7, #4
 8002678:	4618      	mov	r0, r3
 800267a:	f000 f93b 	bl	80028f4 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	4618      	mov	r0, r3
 8002682:	f7fe fd01 	bl	8001088 <__aeabi_f2iz>
 8002686:	4603      	mov	r3, r0
 8002688:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 800268a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3720      	adds	r7, #32
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8002696:	b590      	push	{r4, r7, lr}
 8002698:	b087      	sub	sp, #28
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 80026a2:	f7ff ff63 	bl	800256c <LL_FLASH_GetUDN>
 80026a6:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026ae:	d138      	bne.n	8002722 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 80026b0:	f003 f930 	bl	8005914 <HAL_GetUIDw0>
 80026b4:	4604      	mov	r4, r0
 80026b6:	f003 f941 	bl	800593c <HAL_GetUIDw2>
 80026ba:	4603      	mov	r3, r0
 80026bc:	4423      	add	r3, r4
 80026be:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 80026c0:	f003 f932 	bl	8005928 <HAL_GetUIDw1>
 80026c4:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	0e1a      	lsrs	r2, r3, #24
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3307      	adds	r3, #7
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	0c1a      	lsrs	r2, r3, #16
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3306      	adds	r3, #6
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	0a1a      	lsrs	r2, r3, #8
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3305      	adds	r3, #5
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3304      	adds	r3, #4
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	0e1a      	lsrs	r2, r3, #24
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3303      	adds	r3, #3
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	0c1a      	lsrs	r2, r3, #16
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3302      	adds	r3, #2
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	0a1a      	lsrs	r2, r3, #8
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3301      	adds	r3, #1
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	b2da      	uxtb	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002720:	e031      	b.n	8002786 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3307      	adds	r3, #7
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	0a1a      	lsrs	r2, r3, #8
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3306      	adds	r3, #6
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	0c1a      	lsrs	r2, r3, #16
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3305      	adds	r3, #5
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	0e1a      	lsrs	r2, r3, #24
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3304      	adds	r3, #4
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002750:	f7ff ff16 	bl	8002580 <LL_FLASH_GetDeviceID>
 8002754:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3303      	adds	r3, #3
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8002760:	f7ff ff1a 	bl	8002598 <LL_FLASH_GetSTCompanyID>
 8002764:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3302      	adds	r3, #2
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	0a1a      	lsrs	r2, r3, #8
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3301      	adds	r3, #1
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	0c1b      	lsrs	r3, r3, #16
 8002780:	b2da      	uxtb	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	701a      	strb	r2, [r3, #0]
}
 8002786:	bf00      	nop
 8002788:	371c      	adds	r7, #28
 800278a:	46bd      	mov	sp, r7
 800278c:	bd90      	pop	{r4, r7, pc}

0800278e <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 800278e:	b590      	push	{r4, r7, lr}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 8002796:	f7ff fee9 	bl	800256c <LL_FLASH_GetUDN>
 800279a:	4602      	mov	r2, r0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027a8:	d10d      	bne.n	80027c6 <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80027aa:	f003 f8b3 	bl	8005914 <HAL_GetUIDw0>
 80027ae:	4604      	mov	r4, r0
 80027b0:	f003 f8ba 	bl	8005928 <HAL_GetUIDw1>
 80027b4:	4603      	mov	r3, r0
 80027b6:	405c      	eors	r4, r3
 80027b8:	f003 f8c0 	bl	800593c <HAL_GetUIDw2>
 80027bc:	4603      	mov	r3, r0
 80027be:	ea84 0203 	eor.w	r2, r4, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd90      	pop	{r4, r7, pc}
	...

080027d0 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 80027da:	f107 0308 	add.w	r3, r7, #8
 80027de:	4618      	mov	r0, r3
 80027e0:	f01c fc4c 	bl	801f07c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80027ea:	9200      	str	r2, [sp, #0]
 80027ec:	4a07      	ldr	r2, [pc, #28]	; (800280c <TimestampNow+0x3c>)
 80027ee:	2110      	movs	r1, #16
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f81d 	bl	8002830 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7fd fcc2 	bl	8000180 <strlen>
 80027fc:	4603      	mov	r3, r0
 80027fe:	b29a      	uxth	r2, r3
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002804:	bf00      	nop
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	08020ef8 	.word	0x08020ef8

08002810 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002814:	2101      	movs	r1, #1
 8002816:	2002      	movs	r0, #2
 8002818:	f01c fac0 	bl	801ed9c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 800281c:	bf00      	nop
 800281e:	bd80      	pop	{r7, pc}

08002820 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002824:	2100      	movs	r1, #0
 8002826:	2002      	movs	r0, #2
 8002828:	f01c fab8 	bl	801ed9c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}

08002830 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002830:	b40c      	push	{r2, r3}
 8002832:	b580      	push	{r7, lr}
 8002834:	b084      	sub	sp, #16
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
 800283a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 800283c:	f107 031c 	add.w	r3, r7, #28
 8002840:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002842:	6839      	ldr	r1, [r7, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f01c fde9 	bl	801f420 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 800284e:	bf00      	nop
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002858:	b002      	add	sp, #8
 800285a:	4770      	bx	lr

0800285c <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8002864:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800287a:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_GetTick+0x24>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d002      	beq.n	8002888 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002882:	f000 f965 	bl	8002b50 <TIMER_IF_GetTimerValue>
 8002886:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002888:	687b      	ldr	r3, [r7, #4]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000474 	.word	0x20000474

08002898 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 f9db 	bl	8002c5e <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80028a8:	bf00      	nop
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <LL_EXTI_EnableIT_32_63+0x24>)
 80028ba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80028be:	4905      	ldr	r1, [pc, #20]	; (80028d4 <LL_EXTI_EnableIT_32_63+0x24>)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	58000800 	.word	0x58000800

080028d8 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 80028dc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80028e0:	f7ff ffe6 	bl	80028b0 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 80028e4:	f003 f834 	bl	8005950 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80028e8:	f003 f838 	bl	800595c <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 80028ec:	f003 f83c 	bl	8005968 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80028f0:	bf00      	nop
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 80028fc:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <EnvSensors_Read+0x44>)
 80028fe:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = bsp_env_sensors.getTemperature();
 8002900:	480e      	ldr	r0, [pc, #56]	; (800293c <EnvSensors_Read+0x48>)
 8002902:	f002 fdc1 	bl	8005488 <_ZN17EnvionmentSensors14getTemperatureEv>
 8002906:	6138      	str	r0, [r7, #16]
  float PRESSURE_Value = bsp_env_sensors.getPressure();
 8002908:	480c      	ldr	r0, [pc, #48]	; (800293c <EnvSensors_Read+0x48>)
 800290a:	f002 fdaf 	bl	800546c <_ZN17EnvionmentSensors11getPressureEv>
 800290e:	60f8      	str	r0, [r7, #12]

  sensor_data->humidity    = HUMIDITY_Value;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a06      	ldr	r2, [pc, #24]	; (8002940 <EnvSensors_Read+0x4c>)
 8002926:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a06      	ldr	r2, [pc, #24]	; (8002944 <EnvSensors_Read+0x50>)
 800292c:	611a      	str	r2, [r3, #16]

  return 0;
 800292e:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	42480000 	.word	0x42480000
 800293c:	20000270 	.word	0x20000270
 8002940:	003e090d 	.word	0x003e090d
 8002944:	000503ab 	.word	0x000503ab

08002948 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 800294e:	2300      	movs	r3, #0
 8002950:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Init */

  /* USER CODE END EnvSensors_Init */
  return ret;
 8002952:	687b      	ldr	r3, [r7, #4]
}
 8002954:	4618      	mov	r0, r3
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr
	...

08002960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002968:	4a14      	ldr	r2, [pc, #80]	; (80029bc <_sbrk+0x5c>)
 800296a:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <_sbrk+0x60>)
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002974:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <_sbrk+0x64>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d102      	bne.n	8002982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800297c:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <_sbrk+0x64>)
 800297e:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <_sbrk+0x68>)
 8002980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002982:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <_sbrk+0x64>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	429a      	cmp	r2, r3
 800298e:	d207      	bcs.n	80029a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002990:	f01d fe26 	bl	80205e0 <__errno>
 8002994:	4603      	mov	r3, r0
 8002996:	220c      	movs	r2, #12
 8002998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800299a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800299e:	e009      	b.n	80029b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029a0:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <_sbrk+0x64>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029a6:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <_sbrk+0x64>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	4a05      	ldr	r2, [pc, #20]	; (80029c4 <_sbrk+0x64>)
 80029b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029b2:	68fb      	ldr	r3, [r7, #12]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20010000 	.word	0x20010000
 80029c0:	00000400 	.word	0x00000400
 80029c4:	20000478 	.word	0x20000478
 80029c8:	200025d0 	.word	0x200025d0

080029cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr
	...

080029f0 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 80029fa:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <TIMER_IF_Init+0x5c>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	f083 0301 	eor.w	r3, r3, #1
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01b      	beq.n	8002a40 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002a08:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <TIMER_IF_Init+0x60>)
 8002a0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a0e:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002a10:	f7ff fb54 	bl	80020bc <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002a14:	f000 f856 	bl	8002ac4 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002a18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a1c:	480c      	ldr	r0, [pc, #48]	; (8002a50 <TIMER_IF_Init+0x60>)
 8002a1e:	f007 fc8b 	bl	800a338 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002a22:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <TIMER_IF_Init+0x60>)
 8002a24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002a2a:	4809      	ldr	r0, [pc, #36]	; (8002a50 <TIMER_IF_Init+0x60>)
 8002a2c:	f007 fdc2 	bl	800a5b4 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002a30:	2000      	movs	r0, #0
 8002a32:	f000 f9d3 	bl	8002ddc <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002a36:	f000 f85f 	bl	8002af8 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002a3a:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <TIMER_IF_Init+0x5c>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002a40:	79fb      	ldrb	r3, [r7, #7]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	2000047c 	.word	0x2000047c
 8002a50:	200003cc 	.word	0x200003cc

08002a54 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08e      	sub	sp, #56	; 0x38
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002a62:	f107 0308 	add.w	r3, r7, #8
 8002a66:	222c      	movs	r2, #44	; 0x2c
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f01d fdb0 	bl	80205d0 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002a70:	f000 f828 	bl	8002ac4 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002a74:	4b11      	ldr	r3, [pc, #68]	; (8002abc <TIMER_IF_StartTimer+0x68>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	43db      	mvns	r3, r3
 8002a86:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002a8c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002a90:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002a92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a96:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002a98:	f107 0308 	add.w	r3, r7, #8
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4807      	ldr	r0, [pc, #28]	; (8002ac0 <TIMER_IF_StartTimer+0x6c>)
 8002aa2:	f007 fb3d 	bl	800a120 <HAL_RTC_SetAlarm_IT>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002aac:	f7ff faac 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002ab0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3738      	adds	r7, #56	; 0x38
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20000480 	.word	0x20000480
 8002ac0:	200003cc 	.word	0x200003cc

08002ac4 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002ace:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <TIMER_IF_StopTimer+0x2c>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002ad4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ad8:	4806      	ldr	r0, [pc, #24]	; (8002af4 <TIMER_IF_StopTimer+0x30>)
 8002ada:	f007 fc2d 	bl	800a338 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002ade:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <TIMER_IF_StopTimer+0x30>)
 8002ae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ae4:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40002800 	.word	0x40002800
 8002af4:	200003cc 	.word	0x200003cc

08002af8 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002afc:	f000 f98e 	bl	8002e1c <GetTimerTicks>
 8002b00:	4603      	mov	r3, r0
 8002b02:	4a03      	ldr	r2, [pc, #12]	; (8002b10 <TIMER_IF_SetTimerContext+0x18>)
 8002b04:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002b06:	4b02      	ldr	r3, [pc, #8]	; (8002b10 <TIMER_IF_SetTimerContext+0x18>)
 8002b08:	681b      	ldr	r3, [r3, #0]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000480 	.word	0x20000480

08002b14 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002b18:	4b02      	ldr	r3, [pc, #8]	; (8002b24 <TIMER_IF_GetTimerContext+0x10>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	20000480 	.word	0x20000480

08002b28 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002b32:	f000 f973 	bl	8002e1c <GetTimerTicks>
 8002b36:	4602      	mov	r2, r0
 8002b38:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002b40:	687b      	ldr	r3, [r7, #4]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000480 	.word	0x20000480

08002b50 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <TIMER_IF_GetTimerValue+0x24>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002b62:	f000 f95b 	bl	8002e1c <GetTimerTicks>
 8002b66:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002b68:	687b      	ldr	r3, [r7, #4]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	2000047c 	.word	0x2000047c

08002b78 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002b82:	2303      	movs	r3, #3
 8002b84:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002b86:	687b      	ldr	r3, [r7, #4]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr

08002b92 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002b92:	b5b0      	push	{r4, r5, r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	460a      	mov	r2, r1
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	0d95      	lsrs	r5, r2, #22
 8002ba8:	0294      	lsls	r4, r2, #10
 8002baa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	4620      	mov	r0, r4
 8002bb4:	4629      	mov	r1, r5
 8002bb6:	f7fe faad 	bl	8001114 <__aeabi_uldivmod>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bdb0      	pop	{r4, r5, r7, pc}

08002bcc <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002bcc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002bd0:	b085      	sub	sp, #20
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	2000      	movs	r0, #0
 8002bde:	460c      	mov	r4, r1
 8002be0:	4605      	mov	r5, r0
 8002be2:	4620      	mov	r0, r4
 8002be4:	4629      	mov	r1, r5
 8002be6:	f04f 0a00 	mov.w	sl, #0
 8002bea:	f04f 0b00 	mov.w	fp, #0
 8002bee:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002bf2:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002bf6:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002bfa:	4650      	mov	r0, sl
 8002bfc:	4659      	mov	r1, fp
 8002bfe:	1b02      	subs	r2, r0, r4
 8002c00:	eb61 0305 	sbc.w	r3, r1, r5
 8002c04:	f04f 0000 	mov.w	r0, #0
 8002c08:	f04f 0100 	mov.w	r1, #0
 8002c0c:	0099      	lsls	r1, r3, #2
 8002c0e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002c12:	0090      	lsls	r0, r2, #2
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	eb12 0804 	adds.w	r8, r2, r4
 8002c1c:	eb43 0905 	adc.w	r9, r3, r5
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c2c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c30:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c34:	4690      	mov	r8, r2
 8002c36:	4699      	mov	r9, r3
 8002c38:	4640      	mov	r0, r8
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	0a82      	lsrs	r2, r0, #10
 8002c46:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002c4a:	0a8b      	lsrs	r3, r1, #10
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002c50:	68fb      	ldr	r3, [r7, #12]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002c5c:	4770      	bx	lr

08002c5e <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b084      	sub	sp, #16
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7ff ff93 	bl	8002b92 <TIMER_IF_Convert_ms2Tick>
 8002c6c:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002c6e:	f000 f8d5 	bl	8002e1c <GetTimerTicks>
 8002c72:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002c74:	e000      	b.n	8002c78 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002c76:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002c78:	f000 f8d0 	bl	8002e1c <GetTimerTicks>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d8f6      	bhi.n	8002c76 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002c88:	bf00      	nop
 8002c8a:	bf00      	nop
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002c9a:	f01d f811 	bl	801fcc0 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002cae:	f000 f8a5 	bl	8002dfc <TIMER_IF_BkUp_Read_MSBticks>
 8002cb2:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 f88f 	bl	8002ddc <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002cbe:	bf00      	nop
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002cc6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cca:	b08c      	sub	sp, #48	; 0x30
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002cd4:	f000 f8a2 	bl	8002e1c <GetTimerTicks>
 8002cd8:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002cda:	f000 f88f 	bl	8002dfc <TIMER_IF_BkUp_Read_MSBticks>
 8002cde:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	60fa      	str	r2, [r7, #12]
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	000b      	movs	r3, r1
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	460c      	mov	r4, r1
 8002cfc:	4605      	mov	r5, r0
 8002cfe:	eb12 0804 	adds.w	r8, r2, r4
 8002d02:	eb43 0905 	adc.w	r9, r3, r5
 8002d06:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002d0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	0a82      	lsrs	r2, r0, #10
 8002d18:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002d1c:	0a8b      	lsrs	r3, r1, #10
 8002d1e:	4613      	mov	r3, r2
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	2200      	movs	r2, #0
 8002d26:	603b      	str	r3, [r7, #0]
 8002d28:	607a      	str	r2, [r7, #4]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002d30:	f04f 0b00 	mov.w	fp, #0
 8002d34:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff ff46 	bl	8002bcc <TIMER_IF_Convert_Tick2ms>
 8002d40:	4603      	mov	r3, r0
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3730      	adds	r7, #48	; 0x30
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002d54 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	2100      	movs	r1, #0
 8002d60:	4803      	ldr	r0, [pc, #12]	; (8002d70 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002d62:	f007 fcb9 	bl	800a6d8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	200003cc 	.word	0x200003cc

08002d74 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	2101      	movs	r1, #1
 8002d80:	4803      	ldr	r0, [pc, #12]	; (8002d90 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002d82:	f007 fca9 	bl	800a6d8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002d86:	bf00      	nop
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	200003cc 	.word	0x200003cc

08002d94 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4804      	ldr	r0, [pc, #16]	; (8002db4 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002da2:	f007 fcb1 	bl	800a708 <HAL_RTCEx_BKUPRead>
 8002da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002da8:	687b      	ldr	r3, [r7, #4]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	200003cc 	.word	0x200003cc

08002db8 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	4804      	ldr	r0, [pc, #16]	; (8002dd8 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002dc6:	f007 fc9f 	bl	800a708 <HAL_RTCEx_BKUPRead>
 8002dca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002dcc:	687b      	ldr	r3, [r7, #4]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	200003cc 	.word	0x200003cc

08002ddc <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	2102      	movs	r1, #2
 8002de8:	4803      	ldr	r0, [pc, #12]	; (8002df8 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002dea:	f007 fc75 	bl	800a6d8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	200003cc 	.word	0x200003cc

08002dfc <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002e02:	2102      	movs	r1, #2
 8002e04:	4804      	ldr	r0, [pc, #16]	; (8002e18 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002e06:	f007 fc7f 	bl	800a708 <HAL_RTCEx_BKUPRead>
 8002e0a:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002e0c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	200003cc 	.word	0x200003cc

08002e1c <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002e22:	480b      	ldr	r0, [pc, #44]	; (8002e50 <GetTimerTicks+0x34>)
 8002e24:	f7ff fdd8 	bl	80029d8 <LL_RTC_TIME_GetSubSecond>
 8002e28:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002e2a:	e003      	b.n	8002e34 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002e2c:	4808      	ldr	r0, [pc, #32]	; (8002e50 <GetTimerTicks+0x34>)
 8002e2e:	f7ff fdd3 	bl	80029d8 <LL_RTC_TIME_GetSubSecond>
 8002e32:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002e34:	4806      	ldr	r0, [pc, #24]	; (8002e50 <GetTimerTicks+0x34>)
 8002e36:	f7ff fdcf 	bl	80029d8 <LL_RTC_TIME_GetSubSecond>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d1f4      	bne.n	8002e2c <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40002800 	.word	0x40002800

08002e54 <LL_AHB2_GRP1_EnableClock>:
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4013      	ands	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e78:	68fb      	ldr	r3, [r7, #12]
}
 8002e7a:	bf00      	nop
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <LL_APB2_GRP1_EnableClock>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
}
 8002eaa:	bf00      	nop
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr

08002eb4 <LL_APB2_GRP1_DisableClock>:
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eca:	4013      	ands	r3, r2
 8002ecc:	660b      	str	r3, [r1, #96]	; 0x60
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002edc:	4b22      	ldr	r3, [pc, #136]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002ede:	4a23      	ldr	r2, [pc, #140]	; (8002f6c <MX_USART1_UART_Init+0x94>)
 8002ee0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ee2:	4b21      	ldr	r3, [pc, #132]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002ee4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ee8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002eea:	4b1f      	ldr	r3, [pc, #124]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ef0:	4b1d      	ldr	r3, [pc, #116]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ef6:	4b1c      	ldr	r3, [pc, #112]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002efc:	4b1a      	ldr	r3, [pc, #104]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002efe:	220c      	movs	r2, #12
 8002f00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f02:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f08:	4b17      	ldr	r3, [pc, #92]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f0e:	4b16      	ldr	r3, [pc, #88]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f14:	4b14      	ldr	r3, [pc, #80]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f1a:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f20:	4811      	ldr	r0, [pc, #68]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002f22:	f008 fcaa 	bl	800b87a <HAL_UART_Init>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002f2c:	f7ff f86c 	bl	8002008 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f30:	2100      	movs	r1, #0
 8002f32:	480d      	ldr	r0, [pc, #52]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002f34:	f00a ff17 	bl	800dd66 <HAL_UARTEx_SetTxFifoThreshold>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002f3e:	f7ff f863 	bl	8002008 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f42:	2100      	movs	r1, #0
 8002f44:	4808      	ldr	r0, [pc, #32]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002f46:	f00a ff4c 	bl	800dde2 <HAL_UARTEx_SetRxFifoThreshold>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002f50:	f7ff f85a 	bl	8002008 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002f54:	4804      	ldr	r0, [pc, #16]	; (8002f68 <MX_USART1_UART_Init+0x90>)
 8002f56:	f00a fecb 	bl	800dcf0 <HAL_UARTEx_EnableFifoMode>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002f60:	f7ff f852 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f64:	bf00      	nop
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20000484 	.word	0x20000484
 8002f6c:	40013800 	.word	0x40013800

08002f70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b096      	sub	sp, #88	; 0x58
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f78:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f88:	f107 030c 	add.w	r3, r7, #12
 8002f8c:	2238      	movs	r2, #56	; 0x38
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4618      	mov	r0, r3
 8002f92:	f01d fb1d 	bl	80205d0 <memset>
  if(uartHandle->Instance==USART1)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a2f      	ldr	r2, [pc, #188]	; (8003058 <HAL_UART_MspInit+0xe8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d156      	bne.n	800304e <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002fa4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002fa8:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002faa:	f107 030c 	add.w	r3, r7, #12
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f006 ff1a 	bl	8009de8 <HAL_RCCEx_PeriphCLKConfig>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002fba:	f7ff f825 	bl	8002008 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fbe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002fc2:	f7ff ff5f 	bl	8002e84 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc6:	2002      	movs	r0, #2
 8002fc8:	f7ff ff44 	bl	8002e54 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002fcc:	23c0      	movs	r3, #192	; 0xc0
 8002fce:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fdc:	2307      	movs	r3, #7
 8002fde:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	481d      	ldr	r0, [pc, #116]	; (800305c <HAL_UART_MspInit+0xec>)
 8002fe8:	f004 fc46 	bl	8007878 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002fec:	4b1c      	ldr	r3, [pc, #112]	; (8003060 <HAL_UART_MspInit+0xf0>)
 8002fee:	4a1d      	ldr	r2, [pc, #116]	; (8003064 <HAL_UART_MspInit+0xf4>)
 8002ff0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002ff2:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <HAL_UART_MspInit+0xf0>)
 8002ff4:	2212      	movs	r2, #18
 8002ff6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ff8:	4b19      	ldr	r3, [pc, #100]	; (8003060 <HAL_UART_MspInit+0xf0>)
 8002ffa:	2210      	movs	r2, #16
 8002ffc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ffe:	4b18      	ldr	r3, [pc, #96]	; (8003060 <HAL_UART_MspInit+0xf0>)
 8003000:	2200      	movs	r2, #0
 8003002:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003004:	4b16      	ldr	r3, [pc, #88]	; (8003060 <HAL_UART_MspInit+0xf0>)
 8003006:	2280      	movs	r2, #128	; 0x80
 8003008:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800300a:	4b15      	ldr	r3, [pc, #84]	; (8003060 <HAL_UART_MspInit+0xf0>)
 800300c:	2200      	movs	r2, #0
 800300e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003010:	4b13      	ldr	r3, [pc, #76]	; (8003060 <HAL_UART_MspInit+0xf0>)
 8003012:	2200      	movs	r2, #0
 8003014:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003016:	4b12      	ldr	r3, [pc, #72]	; (8003060 <HAL_UART_MspInit+0xf0>)
 8003018:	2200      	movs	r2, #0
 800301a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800301c:	4b10      	ldr	r3, [pc, #64]	; (8003060 <HAL_UART_MspInit+0xf0>)
 800301e:	2200      	movs	r2, #0
 8003020:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003022:	480f      	ldr	r0, [pc, #60]	; (8003060 <HAL_UART_MspInit+0xf0>)
 8003024:	f003 fe24 	bl	8006c70 <HAL_DMA_Init>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 800302e:	f7fe ffeb 	bl	8002008 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a0a      	ldr	r2, [pc, #40]	; (8003060 <HAL_UART_MspInit+0xf0>)
 8003036:	67da      	str	r2, [r3, #124]	; 0x7c
 8003038:	4a09      	ldr	r2, [pc, #36]	; (8003060 <HAL_UART_MspInit+0xf0>)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800303e:	2200      	movs	r2, #0
 8003040:	2102      	movs	r1, #2
 8003042:	2024      	movs	r0, #36	; 0x24
 8003044:	f003 fddd 	bl	8006c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003048:	2024      	movs	r0, #36	; 0x24
 800304a:	f003 fdf4 	bl	8006c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800304e:	bf00      	nop
 8003050:	3758      	adds	r7, #88	; 0x58
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40013800 	.word	0x40013800
 800305c:	48000400 	.word	0x48000400
 8003060:	20000518 	.word	0x20000518
 8003064:	40020008 	.word	0x40020008

08003068 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a0b      	ldr	r2, [pc, #44]	; (80030a4 <HAL_UART_MspDeInit+0x3c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d10f      	bne.n	800309a <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800307a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800307e:	f7ff ff19 	bl	8002eb4 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8003082:	21c0      	movs	r1, #192	; 0xc0
 8003084:	4808      	ldr	r0, [pc, #32]	; (80030a8 <HAL_UART_MspDeInit+0x40>)
 8003086:	f004 fd57 	bl	8007b38 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800308e:	4618      	mov	r0, r3
 8003090:	f003 fe96 	bl	8006dc0 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003094:	2024      	movs	r0, #36	; 0x24
 8003096:	f003 fddc 	bl	8006c52 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40013800 	.word	0x40013800
 80030a8:	48000400 	.word	0x48000400

080030ac <LL_APB2_GRP1_ForceReset>:
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80030b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	640b      	str	r3, [r1, #64]	; 0x40
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr

080030ce <LL_APB2_GRP1_ReleaseReset>:
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80030d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	43db      	mvns	r3, r3
 80030e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030e4:	4013      	ands	r3, r2
 80030e6:	640b      	str	r3, [r1, #64]	; 0x40
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr
	...

080030f4 <LL_EXTI_EnableIT_0_31>:
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80030fc:	4b06      	ldr	r3, [pc, #24]	; (8003118 <LL_EXTI_EnableIT_0_31+0x24>)
 80030fe:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003102:	4905      	ldr	r1, [pc, #20]	; (8003118 <LL_EXTI_EnableIT_0_31+0x24>)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	58000800 	.word	0x58000800

0800311c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8003124:	4a07      	ldr	r2, [pc, #28]	; (8003144 <vcom_Init+0x28>)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 800312a:	f7fe fae9 	bl	8001700 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800312e:	f7ff fed3 	bl	8002ed8 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8003132:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003136:	f7ff ffdd 	bl	80030f4 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800313a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 800313c:	4618      	mov	r0, r3
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	2000057c 	.word	0x2000057c

08003148 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 800314c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003150:	f7ff ffac 	bl	80030ac <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8003154:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003158:	f7ff ffb9 	bl	80030ce <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 800315c:	4804      	ldr	r0, [pc, #16]	; (8003170 <vcom_DeInit+0x28>)
 800315e:	f7ff ff83 	bl	8003068 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8003162:	200f      	movs	r0, #15
 8003164:	f003 fd75 	bl	8006c52 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8003168:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800316a:	4618      	mov	r0, r3
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20000484 	.word	0x20000484

08003174 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003180:	887b      	ldrh	r3, [r7, #2]
 8003182:	461a      	mov	r2, r3
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	4804      	ldr	r0, [pc, #16]	; (8003198 <vcom_Trace_DMA+0x24>)
 8003188:	f008 fd5e 	bl	800bc48 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 800318c:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20000484 	.word	0x20000484

0800319c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80031a4:	4a19      	ldr	r2, [pc, #100]	; (800320c <vcom_ReceiveInit+0x70>)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80031aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80031ae:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 80031b0:	f107 0308 	add.w	r3, r7, #8
 80031b4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80031b8:	4815      	ldr	r0, [pc, #84]	; (8003210 <vcom_ReceiveInit+0x74>)
 80031ba:	f00a fd0c 	bl	800dbd6 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80031be:	bf00      	nop
 80031c0:	4b13      	ldr	r3, [pc, #76]	; (8003210 <vcom_ReceiveInit+0x74>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ce:	d0f7      	beq.n	80031c0 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80031d0:	bf00      	nop
 80031d2:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <vcom_ReceiveInit+0x74>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031e0:	d1f7      	bne.n	80031d2 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <vcom_ReceiveInit+0x74>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	4b09      	ldr	r3, [pc, #36]	; (8003210 <vcom_ReceiveInit+0x74>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80031f0:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 80031f2:	4807      	ldr	r0, [pc, #28]	; (8003210 <vcom_ReceiveInit+0x74>)
 80031f4:	f00a fd4a 	bl	800dc8c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 80031f8:	2201      	movs	r2, #1
 80031fa:	4906      	ldr	r1, [pc, #24]	; (8003214 <vcom_ReceiveInit+0x78>)
 80031fc:	4804      	ldr	r0, [pc, #16]	; (8003210 <vcom_ReceiveInit+0x74>)
 80031fe:	f008 fcd7 	bl	800bbb0 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8003202:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	20000580 	.word	0x20000580
 8003210:	20000484 	.word	0x20000484
 8003214:	20000578 	.word	0x20000578

08003218 <vcom_Resume>:

void vcom_Resume(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800321c:	4808      	ldr	r0, [pc, #32]	; (8003240 <vcom_Resume+0x28>)
 800321e:	f008 fb2c 	bl	800b87a <HAL_UART_Init>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <vcom_Resume+0x14>
  {
    Error_Handler();
 8003228:	f7fe feee 	bl	8002008 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800322c:	4805      	ldr	r0, [pc, #20]	; (8003244 <vcom_Resume+0x2c>)
 800322e:	f003 fd1f 	bl	8006c70 <HAL_DMA_Init>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <vcom_Resume+0x24>
  {
    Error_Handler();
 8003238:	f7fe fee6 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 800323c:	bf00      	nop
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20000484 	.word	0x20000484
 8003244:	20000518 	.word	0x20000518

08003248 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a05      	ldr	r2, [pc, #20]	; (800326c <HAL_UART_TxCpltCallback+0x24>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d103      	bne.n	8003262 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 800325a:	4b05      	ldr	r3, [pc, #20]	; (8003270 <HAL_UART_TxCpltCallback+0x28>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2000      	movs	r0, #0
 8003260:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40013800 	.word	0x40013800
 8003270:	2000057c 	.word	0x2000057c

08003274 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a0d      	ldr	r2, [pc, #52]	; (80032b8 <HAL_UART_RxCpltCallback+0x44>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d113      	bne.n	80032ae <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8003286:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <HAL_UART_RxCpltCallback+0x48>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <HAL_UART_RxCpltCallback+0x30>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003294:	2b00      	cmp	r3, #0
 8003296:	d105      	bne.n	80032a4 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8003298:	4b08      	ldr	r3, [pc, #32]	; (80032bc <HAL_UART_RxCpltCallback+0x48>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2200      	movs	r2, #0
 800329e:	2101      	movs	r1, #1
 80032a0:	4807      	ldr	r0, [pc, #28]	; (80032c0 <HAL_UART_RxCpltCallback+0x4c>)
 80032a2:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80032a4:	2201      	movs	r2, #1
 80032a6:	4906      	ldr	r1, [pc, #24]	; (80032c0 <HAL_UART_RxCpltCallback+0x4c>)
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f008 fc81 	bl	800bbb0 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80032ae:	bf00      	nop
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40013800 	.word	0x40013800
 80032bc:	20000580 	.word	0x20000580
 80032c0:	20000578 	.word	0x20000578

080032c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80032c4:	480d      	ldr	r0, [pc, #52]	; (80032fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80032c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80032c8:	f7ff fb80 	bl	80029cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032cc:	480c      	ldr	r0, [pc, #48]	; (8003300 <LoopForever+0x6>)
  ldr r1, =_edata
 80032ce:	490d      	ldr	r1, [pc, #52]	; (8003304 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032d0:	4a0d      	ldr	r2, [pc, #52]	; (8003308 <LoopForever+0xe>)
  movs r3, #0
 80032d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032d4:	e002      	b.n	80032dc <LoopCopyDataInit>

080032d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032da:	3304      	adds	r3, #4

080032dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032e0:	d3f9      	bcc.n	80032d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032e2:	4a0a      	ldr	r2, [pc, #40]	; (800330c <LoopForever+0x12>)
  ldr r4, =_ebss
 80032e4:	4c0a      	ldr	r4, [pc, #40]	; (8003310 <LoopForever+0x16>)
  movs r3, #0
 80032e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032e8:	e001      	b.n	80032ee <LoopFillZerobss>

080032ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032ec:	3204      	adds	r2, #4

080032ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032f0:	d3fb      	bcc.n	80032ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80032f2:	f01d f97b 	bl	80205ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032f6:	f7fe fddd 	bl	8001eb4 <main>

080032fa <LoopForever>:

LoopForever:
    b LoopForever
 80032fa:	e7fe      	b.n	80032fa <LoopForever>
  ldr   r0, =_estack
 80032fc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003304:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8003308:	0802206c 	.word	0x0802206c
  ldr r2, =_sbss
 800330c:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8003310:	200025cc 	.word	0x200025cc

08003314 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003314:	e7fe      	b.n	8003314 <ADC_IRQHandler>

08003316 <_ZN8DetectorC1Ev>:
#include "detector.h"

Detector::Detector() {
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  lastClearingTime      = 0;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
  integratedDoseTime_ms = 0;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	605a      	str	r2, [r3, #4]
  measuredDose          = 0;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	609a      	str	r2, [r3, #8]
}
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4618      	mov	r0, r3
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr
	...

08003340 <_ZN8Detector4initEv>:

void Detector::init() {
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  clearPhosphor();
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f865 	bl	8003418 <_ZN8Detector13clearPhosphorEv>
  HAL_GPIO_WritePin(Bias_CS_GPIO_Port, Bias_CS_Pin, GPIO_PIN_SET);
 800334e:	2201      	movs	r2, #1
 8003350:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003354:	4803      	ldr	r0, [pc, #12]	; (8003364 <_ZN8Detector4initEv+0x24>)
 8003356:	f004 fcd4 	bl	8007d02 <HAL_GPIO_WritePin>
}
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	48000400 	.word	0x48000400

08003368 <_ZL19avgSipmSignalToDosef>:

static float avgSipmSignalToDose(float signal) {
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]

  //TODO: calculate the dose from the signal

  return signal;
 8003370:	687b      	ldr	r3, [r7, #4]
}
 8003372:	4618      	mov	r0, r3
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr

0800337c <_ZL3avgPtt>:

static float avg(uint16_t *arr, uint16_t len) {
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	807b      	strh	r3, [r7, #2]
    float result = 0;
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0; i < len; i++) {
 800338e:	2300      	movs	r3, #0
 8003390:	817b      	strh	r3, [r7, #10]
 8003392:	e011      	b.n	80033b8 <_ZL3avgPtt+0x3c>
        result += arr[i];
 8003394:	897b      	ldrh	r3, [r7, #10]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	4413      	add	r3, r2
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd fcce 	bl	8000d40 <__aeabi_i2f>
 80033a4:	4603      	mov	r3, r0
 80033a6:	4619      	mov	r1, r3
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f7fd fc15 	bl	8000bd8 <__addsf3>
 80033ae:	4603      	mov	r3, r0
 80033b0:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = 0; i < len; i++) {
 80033b2:	897b      	ldrh	r3, [r7, #10]
 80033b4:	3301      	adds	r3, #1
 80033b6:	817b      	strh	r3, [r7, #10]
 80033b8:	897a      	ldrh	r2, [r7, #10]
 80033ba:	887b      	ldrh	r3, [r7, #2]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d3e9      	bcc.n	8003394 <_ZL3avgPtt+0x18>
    }
    return result / len;
 80033c0:	887b      	ldrh	r3, [r7, #2]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd fcbc 	bl	8000d40 <__aeabi_i2f>
 80033c8:	4603      	mov	r3, r0
 80033ca:	4619      	mov	r1, r3
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f7fd fdbf 	bl	8000f50 <__aeabi_fdiv>
 80033d2:	4603      	mov	r3, r0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <_ZN8Detector11getSiPMtempEb>:

float Detector::getSiPMtemp(bool newSample){
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	70fb      	strb	r3, [r7, #3]
	if (newSample) sampleSiPM_temp();
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <_ZN8Detector11getSiPMtempEb+0x18>
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f8a8 	bl	8003544 <_ZN8Detector15sampleSiPM_tempEv>
	return avg(SiPM_temp_measurements, NUM_TEMP_SAMPLES);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	330c      	adds	r3, #12
 80033f8:	2110      	movs	r1, #16
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff ffbe 	bl	800337c <_ZL3avgPtt>
 8003400:	4603      	mov	r3, r0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <_ZL3nowv>:
  //TODO: calculate the dacValue from the temperature

  return setSiPM_Bias(dacValue);
}*/

static uint32_t now() {
 800340a:	b580      	push	{r7, lr}
 800340c:	af00      	add	r7, sp, #0
  //use the HAL to get the current time in milliseconds
  return HAL_GetTick();
 800340e:	f7ff fa2f 	bl	8002870 <HAL_GetTick>
 8003412:	4603      	mov	r3, r0
}
 8003414:	4618      	mov	r0, r3
 8003416:	bd80      	pop	{r7, pc}

08003418 <_ZN8Detector13clearPhosphorEv>:

void Detector::clearPhosphor() {
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  clearLED_On();
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f871 	bl	8003508 <_ZN8Detector11clearLED_OnEv>
  HAL_Delay(CLEARING_TIME_ms);
 8003426:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800342a:	f7ff fa35 	bl	8002898 <HAL_Delay>
  clearLED_Off();
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f879 	bl	8003526 <_ZN8Detector12clearLED_OffEv>

  lastClearingTime = now();
 8003434:	f7ff ffe9 	bl	800340a <_ZL3nowv>
 8003438:	4602      	mov	r2, r0
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	601a      	str	r2, [r3, #0]
}
 800343e:	bf00      	nop
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <_ZN8Detector19readAccumulatedDoseEv>:

float Detector::readAccumulatedDose() {
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  sampleSiPM_temp();
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f878 	bl	8003544 <_ZN8Detector15sampleSiPM_tempEv>
  float temperature = avg(SiPM_temp_measurements, NUM_TEMP_SAMPLES);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	330c      	adds	r3, #12
 8003458:	2110      	movs	r1, #16
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff ff8e 	bl	800337c <_ZL3avgPtt>
 8003460:	60f8      	str	r0, [r7, #12]
  setSiPM_Bias(0x0F);
 8003462:	210f      	movs	r1, #15
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f915 	bl	8003694 <_ZN8Detector12setSiPM_BiasEh>
  stimLED_On();
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f82c 	bl	80034c8 <_ZN8Detector10stimLED_OnEv>
  HAL_Delay(STABLE_MEASUREMENT_WINDOW_ms);
 8003470:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003474:	f7ff fa10 	bl	8002898 <HAL_Delay>
  sampleSiPM_signal();
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f8af 	bl	80035dc <_ZN8Detector17sampleSiPM_signalEv>
  stimLED_Off();
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f832 	bl	80034e8 <_ZN8Detector11stimLED_OffEv>
  sipmBias_Off();
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f8f5 	bl	8003674 <_ZN8Detector12sipmBias_OffEv>
  float avgSipmSignal = avg(SiPM_signal_measurements, NUM_SiPM_SAMPLES);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	332c      	adds	r3, #44	; 0x2c
 800348e:	2110      	movs	r1, #16
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff73 	bl	800337c <_ZL3avgPtt>
 8003496:	60b8      	str	r0, [r7, #8]
  measuredDose = avgSipmSignalToDose(avgSipmSignal);
 8003498:	68b8      	ldr	r0, [r7, #8]
 800349a:	f7ff ff65 	bl	8003368 <_ZL19avgSipmSignalToDosef>
 800349e:	4602      	mov	r2, r0
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	609a      	str	r2, [r3, #8]
  integratedDoseTime_ms = now() - lastClearingTime;
 80034a4:	f7ff ffb1 	bl	800340a <_ZL3nowv>
 80034a8:	4602      	mov	r2, r0
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	1ad2      	subs	r2, r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	605a      	str	r2, [r3, #4]
  clearPhosphor();
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff ffaf 	bl	8003418 <_ZN8Detector13clearPhosphorEv>

  return measuredDose;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <_ZN8Detector10stimLED_OnEv>:

float Detector::calcDoseRate() {
  return measuredDose / (integratedDoseTime_ms / 1000.0);
}

void Detector::stimLED_On() {
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  //use the HAL to turn on the LED
  HAL_GPIO_WritePin(Stim_Enable_GPIO_Port, Stim_Enable_Pin, GPIO_PIN_SET);
 80034d0:	2201      	movs	r2, #1
 80034d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034d6:	4803      	ldr	r0, [pc, #12]	; (80034e4 <_ZN8Detector10stimLED_OnEv+0x1c>)
 80034d8:	f004 fc13 	bl	8007d02 <HAL_GPIO_WritePin>
}
 80034dc:	bf00      	nop
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	48000400 	.word	0x48000400

080034e8 <_ZN8Detector11stimLED_OffEv>:

void Detector::stimLED_Off() {
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  //use the HAL to turn off the LED
  HAL_GPIO_WritePin(Stim_Enable_GPIO_Port, Stim_Enable_Pin, GPIO_PIN_RESET);
 80034f0:	2200      	movs	r2, #0
 80034f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034f6:	4803      	ldr	r0, [pc, #12]	; (8003504 <_ZN8Detector11stimLED_OffEv+0x1c>)
 80034f8:	f004 fc03 	bl	8007d02 <HAL_GPIO_WritePin>
}
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	48000400 	.word	0x48000400

08003508 <_ZN8Detector11clearLED_OnEv>:

void Detector::clearLED_On() {
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  //use the HAL to turn on the LED
  HAL_GPIO_WritePin(Anneal_Enable_GPIO_Port, Anneal_Enable_Pin, GPIO_PIN_SET);
 8003510:	2201      	movs	r2, #1
 8003512:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800351a:	f004 fbf2 	bl	8007d02 <HAL_GPIO_WritePin>
}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <_ZN8Detector12clearLED_OffEv>:

void Detector::clearLED_Off() {
 8003526:	b580      	push	{r7, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  //use the HAL to turn off the LED
  HAL_GPIO_WritePin(Anneal_Enable_GPIO_Port, Anneal_Enable_Pin, GPIO_PIN_RESET);
 800352e:	2200      	movs	r2, #0
 8003530:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003538:	f004 fbe3 	bl	8007d02 <HAL_GPIO_WritePin>
}
 800353c:	bf00      	nop
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <_ZN8Detector15sampleSiPM_tempEv>:

void Detector::sampleSiPM_temp() {
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  //reset the temperature array to 0
  for (uint16_t i = 0; i < NUM_TEMP_SAMPLES; i++) {
 800354c:	2300      	movs	r3, #0
 800354e:	82fb      	strh	r3, [r7, #22]
 8003550:	e009      	b.n	8003566 <_ZN8Detector15sampleSiPM_tempEv+0x22>
    SiPM_temp_measurements[i] = 0;
 8003552:	8afb      	ldrh	r3, [r7, #22]
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	3304      	adds	r3, #4
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	4413      	add	r3, r2
 800355c:	2200      	movs	r2, #0
 800355e:	809a      	strh	r2, [r3, #4]
  for (uint16_t i = 0; i < NUM_TEMP_SAMPLES; i++) {
 8003560:	8afb      	ldrh	r3, [r7, #22]
 8003562:	3301      	adds	r3, #1
 8003564:	82fb      	strh	r3, [r7, #22]
 8003566:	8afb      	ldrh	r3, [r7, #22]
 8003568:	2b0f      	cmp	r3, #15
 800356a:	d9f2      	bls.n	8003552 <_ZN8Detector15sampleSiPM_tempEv+0xe>
  }

  //set the adc to read from the SiPM temperature pin
  ADC_ChannelConfTypeDef sConfig = {0};
 800356c:	f107 0308 	add.w	r3, r7, #8
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	609a      	str	r2, [r3, #8]
  sConfig.Channel = SiPM_TEMP_ADC_CHANNEL;
 8003578:	4b16      	ldr	r3, [pc, #88]	; (80035d4 <_ZN8Detector15sampleSiPM_tempEv+0x90>)
 800357a:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800357c:	2300      	movs	r3, #0
 800357e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003580:	2300      	movs	r3, #0
 8003582:	613b      	str	r3, [r7, #16]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8003584:	f107 0308 	add.w	r3, r7, #8
 8003588:	4619      	mov	r1, r3
 800358a:	4813      	ldr	r0, [pc, #76]	; (80035d8 <_ZN8Detector15sampleSiPM_tempEv+0x94>)
 800358c:	f002 feb0 	bl	80062f0 <HAL_ADC_ConfigChannel>
  
  //take NUM_TEMP_SAMPLES measurements
  for (uint16_t i = 0; i < NUM_TEMP_SAMPLES; i++) {
 8003590:	2300      	movs	r3, #0
 8003592:	82bb      	strh	r3, [r7, #20]
 8003594:	e015      	b.n	80035c2 <_ZN8Detector15sampleSiPM_tempEv+0x7e>
    //start the ADC conversion
    HAL_ADC_Start(&hadc);
 8003596:	4810      	ldr	r0, [pc, #64]	; (80035d8 <_ZN8Detector15sampleSiPM_tempEv+0x94>)
 8003598:	f002 fd8e 	bl	80060b8 <HAL_ADC_Start>
    //wait for the conversion to complete
    HAL_ADC_PollForConversion(&hadc, 100);
 800359c:	2164      	movs	r1, #100	; 0x64
 800359e:	480e      	ldr	r0, [pc, #56]	; (80035d8 <_ZN8Detector15sampleSiPM_tempEv+0x94>)
 80035a0:	f002 fe02 	bl	80061a8 <HAL_ADC_PollForConversion>
    //read the ADC value
    SiPM_temp_measurements[i] = HAL_ADC_GetValue(&hadc);
 80035a4:	480c      	ldr	r0, [pc, #48]	; (80035d8 <_ZN8Detector15sampleSiPM_tempEv+0x94>)
 80035a6:	f002 fe96 	bl	80062d6 <HAL_ADC_GetValue>
 80035aa:	4602      	mov	r2, r0
 80035ac:	8abb      	ldrh	r3, [r7, #20]
 80035ae:	b291      	uxth	r1, r2
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	3304      	adds	r3, #4
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	4413      	add	r3, r2
 80035b8:	460a      	mov	r2, r1
 80035ba:	809a      	strh	r2, [r3, #4]
  for (uint16_t i = 0; i < NUM_TEMP_SAMPLES; i++) {
 80035bc:	8abb      	ldrh	r3, [r7, #20]
 80035be:	3301      	adds	r3, #1
 80035c0:	82bb      	strh	r3, [r7, #20]
 80035c2:	8abb      	ldrh	r3, [r7, #20]
 80035c4:	2b0f      	cmp	r3, #15
 80035c6:	d9e6      	bls.n	8003596 <_ZN8Detector15sampleSiPM_tempEv+0x52>
  }
}
 80035c8:	bf00      	nop
 80035ca:	bf00      	nop
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	08000004 	.word	0x08000004
 80035d8:	200001b4 	.word	0x200001b4

080035dc <_ZN8Detector17sampleSiPM_signalEv>:

void Detector::sampleSiPM_signal() {
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  //reset the signal array to 0
  for (uint16_t i = 0; i < NUM_SiPM_SAMPLES; i++) {
 80035e4:	2300      	movs	r3, #0
 80035e6:	82fb      	strh	r3, [r7, #22]
 80035e8:	e009      	b.n	80035fe <_ZN8Detector17sampleSiPM_signalEv+0x22>
    SiPM_signal_measurements[i] = 0;
 80035ea:	8afb      	ldrh	r3, [r7, #22]
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	3314      	adds	r3, #20
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	4413      	add	r3, r2
 80035f4:	2200      	movs	r2, #0
 80035f6:	809a      	strh	r2, [r3, #4]
  for (uint16_t i = 0; i < NUM_SiPM_SAMPLES; i++) {
 80035f8:	8afb      	ldrh	r3, [r7, #22]
 80035fa:	3301      	adds	r3, #1
 80035fc:	82fb      	strh	r3, [r7, #22]
 80035fe:	8afb      	ldrh	r3, [r7, #22]
 8003600:	2b0f      	cmp	r3, #15
 8003602:	d9f2      	bls.n	80035ea <_ZN8Detector17sampleSiPM_signalEv+0xe>
  }

  //set the adc to read from the SiPM signal pin
  ADC_ChannelConfTypeDef sConfig = {0};
 8003604:	f107 0308 	add.w	r3, r7, #8
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	609a      	str	r2, [r3, #8]
  sConfig.Channel = SiPM_SIGNAL_ADC_CHANNEL;
 8003610:	4b16      	ldr	r3, [pc, #88]	; (800366c <_ZN8Detector17sampleSiPM_signalEv+0x90>)
 8003612:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8003618:	2307      	movs	r3, #7
 800361a:	613b      	str	r3, [r7, #16]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 800361c:	f107 0308 	add.w	r3, r7, #8
 8003620:	4619      	mov	r1, r3
 8003622:	4813      	ldr	r0, [pc, #76]	; (8003670 <_ZN8Detector17sampleSiPM_signalEv+0x94>)
 8003624:	f002 fe64 	bl	80062f0 <HAL_ADC_ConfigChannel>
  
  //take NUM_SiPM_SAMPLES measurements
  for (uint16_t i = 0; i < NUM_SiPM_SAMPLES; i++) {
 8003628:	2300      	movs	r3, #0
 800362a:	82bb      	strh	r3, [r7, #20]
 800362c:	e015      	b.n	800365a <_ZN8Detector17sampleSiPM_signalEv+0x7e>
    //start the ADC conversion
    HAL_ADC_Start(&hadc);
 800362e:	4810      	ldr	r0, [pc, #64]	; (8003670 <_ZN8Detector17sampleSiPM_signalEv+0x94>)
 8003630:	f002 fd42 	bl	80060b8 <HAL_ADC_Start>
    //wait for the conversion to complete
    HAL_ADC_PollForConversion(&hadc, 100);
 8003634:	2164      	movs	r1, #100	; 0x64
 8003636:	480e      	ldr	r0, [pc, #56]	; (8003670 <_ZN8Detector17sampleSiPM_signalEv+0x94>)
 8003638:	f002 fdb6 	bl	80061a8 <HAL_ADC_PollForConversion>
    //read the ADC value
    SiPM_signal_measurements[i] = HAL_ADC_GetValue(&hadc);
 800363c:	480c      	ldr	r0, [pc, #48]	; (8003670 <_ZN8Detector17sampleSiPM_signalEv+0x94>)
 800363e:	f002 fe4a 	bl	80062d6 <HAL_ADC_GetValue>
 8003642:	4602      	mov	r2, r0
 8003644:	8abb      	ldrh	r3, [r7, #20]
 8003646:	b291      	uxth	r1, r2
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	3314      	adds	r3, #20
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	4413      	add	r3, r2
 8003650:	460a      	mov	r2, r1
 8003652:	809a      	strh	r2, [r3, #4]
  for (uint16_t i = 0; i < NUM_SiPM_SAMPLES; i++) {
 8003654:	8abb      	ldrh	r3, [r7, #20]
 8003656:	3301      	adds	r3, #1
 8003658:	82bb      	strh	r3, [r7, #20]
 800365a:	8abb      	ldrh	r3, [r7, #20]
 800365c:	2b0f      	cmp	r3, #15
 800365e:	d9e6      	bls.n	800362e <_ZN8Detector17sampleSiPM_signalEv+0x52>
  }
}
 8003660:	bf00      	nop
 8003662:	bf00      	nop
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	0c000008 	.word	0x0c000008
 8003670:	200001b4 	.word	0x200001b4

08003674 <_ZN8Detector12sipmBias_OffEv>:

bool Detector::sipmBias_Off() {
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint8_t dacValue = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	73fb      	strb	r3, [r7, #15]
  return setSiPM_Bias(dacValue);
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	4619      	mov	r1, r3
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f805 	bl	8003694 <_ZN8Detector12setSiPM_BiasEh>
 800368a:	4603      	mov	r3, r0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <_ZN8Detector12setSiPM_BiasEh>:

bool Detector::setSiPM_Bias(uint8_t dacValue) {
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	70fb      	strb	r3, [r7, #3]
  //use the HAL SPI to send the dacValue to the SiPM bias DAC
  
  //set the CS pin low
  HAL_GPIO_WritePin(Bias_CS_GPIO_Port, Bias_CS_Pin, GPIO_PIN_RESET);
 80036a0:	2200      	movs	r2, #0
 80036a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036a6:	480d      	ldr	r0, [pc, #52]	; (80036dc <_ZN8Detector12setSiPM_BiasEh+0x48>)
 80036a8:	f004 fb2b 	bl	8007d02 <HAL_GPIO_WritePin>
  //send the dacValue
  HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, &dacValue, 1, 100);
 80036ac:	1cf9      	adds	r1, r7, #3
 80036ae:	2364      	movs	r3, #100	; 0x64
 80036b0:	2201      	movs	r2, #1
 80036b2:	480b      	ldr	r0, [pc, #44]	; (80036e0 <_ZN8Detector12setSiPM_BiasEh+0x4c>)
 80036b4:	f007 f912 	bl	800a8dc <HAL_SPI_Transmit>
 80036b8:	4603      	mov	r3, r0
 80036ba:	73fb      	strb	r3, [r7, #15]
  //set the CS pin high
  HAL_GPIO_WritePin(Bias_CS_GPIO_Port, Bias_CS_Pin, GPIO_PIN_SET);
 80036bc:	2201      	movs	r2, #1
 80036be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036c2:	4806      	ldr	r0, [pc, #24]	; (80036dc <_ZN8Detector12setSiPM_BiasEh+0x48>)
 80036c4:	f004 fb1d 	bl	8007d02 <HAL_GPIO_WritePin>
  //check the status
  if (status != HAL_OK) {
 80036c8:	7bfb      	ldrb	r3, [r7, #15]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <_ZN8Detector12setSiPM_BiasEh+0x3e>
    return false;
 80036ce:	2300      	movs	r3, #0
 80036d0:	e000      	b.n	80036d4 <_ZN8Detector12setSiPM_BiasEh+0x40>
  }
  return true;
 80036d2:	2301      	movs	r3, #1
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	48000400 	.word	0x48000400
 80036e0:	20000404 	.word	0x20000404

080036e4 <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f001 fae3 	bl	8004cbc <null_ptr_check>
 80036f6:	4603      	mov	r3, r0
 80036f8:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 80036fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d131      	bne.n	8003766 <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	7a1b      	ldrb	r3, [r3, #8]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d003      	beq.n	8003712 <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	729a      	strb	r2, [r3, #10]
 8003710:	e002      	b.n	8003718 <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	729a      	strb	r2, [r3, #10]
        }

        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 8003718:	f107 010e 	add.w	r1, r7, #14
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	2000      	movs	r0, #0
 8003722:	f000 f826 	bl	8003772 <bmp3_get_regs>
 8003726:	4603      	mov	r3, r0
 8003728:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 800372a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d119      	bne.n	8003766 <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 8003732:	7bbb      	ldrb	r3, [r7, #14]
 8003734:	2b50      	cmp	r3, #80	; 0x50
 8003736:	d002      	beq.n	800373e <bmp3_init+0x5a>
 8003738:	7bbb      	ldrb	r3, [r7, #14]
 800373a:	2b60      	cmp	r3, #96	; 0x60
 800373c:	d111      	bne.n	8003762 <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 800373e:	7bba      	ldrb	r2, [r7, #14]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f98f 	bl	8003a68 <bmp3_soft_reset>
 800374a:	4603      	mov	r3, r0
 800374c:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 800374e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d107      	bne.n	8003766 <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fb37 	bl	8003dca <get_calib_data>
 800375c:	4603      	mov	r3, r0
 800375e:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8003760:	e001      	b.n	8003766 <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 8003762:	23fe      	movs	r3, #254	; 0xfe
 8003764:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8003766:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8003772:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003776:	b08b      	sub	sp, #44	; 0x2c
 8003778:	af00      	add	r7, sp, #0
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	603b      	str	r3, [r7, #0]
 8003780:	4603      	mov	r3, r0
 8003782:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003784:	6838      	ldr	r0, [r7, #0]
 8003786:	f001 fa99 	bl	8004cbc <null_ptr_check>
 800378a:	4603      	mov	r3, r0
 800378c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 8003790:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003794:	2b00      	cmp	r3, #0
 8003796:	d172      	bne.n	800387e <bmp3_get_regs+0x10c>
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d06f      	beq.n	800387e <bmp3_get_regs+0x10c>
    {
 800379e:	466b      	mov	r3, sp
 80037a0:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	7a9b      	ldrb	r3, [r3, #10]
 80037a6:	461a      	mov	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4413      	add	r3, r2
 80037ac:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	7a9b      	ldrb	r3, [r3, #10]
 80037b2:	461a      	mov	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	18d1      	adds	r1, r2, r3
 80037b8:	460b      	mov	r3, r1
 80037ba:	3b01      	subs	r3, #1
 80037bc:	61bb      	str	r3, [r7, #24]
 80037be:	2300      	movs	r3, #0
 80037c0:	4688      	mov	r8, r1
 80037c2:	4699      	mov	r9, r3
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037d8:	2300      	movs	r3, #0
 80037da:	460c      	mov	r4, r1
 80037dc:	461d      	mov	r5, r3
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	f04f 0300 	mov.w	r3, #0
 80037e6:	00eb      	lsls	r3, r5, #3
 80037e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037ec:	00e2      	lsls	r2, r4, #3
 80037ee:	1dcb      	adds	r3, r1, #7
 80037f0:	08db      	lsrs	r3, r3, #3
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	ebad 0d03 	sub.w	sp, sp, r3
 80037f8:	466b      	mov	r3, sp
 80037fa:	3300      	adds	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	7a1b      	ldrb	r3, [r3, #8]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d025      	beq.n	8003852 <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 8003806:	7bfb      	ldrb	r3, [r7, #15]
 8003808:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800380c:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	68dc      	ldr	r4, [r3, #12]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	7bf8      	ldrb	r0, [r7, #15]
 8003818:	69fa      	ldr	r2, [r7, #28]
 800381a:	6979      	ldr	r1, [r7, #20]
 800381c:	47a0      	blx	r4
 800381e:	4603      	mov	r3, r0
 8003820:	461a      	mov	r2, r3
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 8003826:	2300      	movs	r3, #0
 8003828:	623b      	str	r3, [r7, #32]
 800382a:	e00d      	b.n	8003848 <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	7a9b      	ldrb	r3, [r3, #10]
 8003830:	461a      	mov	r2, r3
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	441a      	add	r2, r3
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	440b      	add	r3, r1
 800383c:	6979      	ldr	r1, [r7, #20]
 800383e:	5c8a      	ldrb	r2, [r1, r2]
 8003840:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	3301      	adds	r3, #1
 8003846:	623b      	str	r3, [r7, #32]
 8003848:	6a3a      	ldr	r2, [r7, #32]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	429a      	cmp	r2, r3
 800384e:	d3ed      	bcc.n	800382c <bmp3_get_regs+0xba>
 8003850:	e00b      	b.n	800386a <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68dc      	ldr	r4, [r3, #12]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	7bf8      	ldrb	r0, [r7, #15]
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	68b9      	ldr	r1, [r7, #8]
 8003860:	47a0      	blx	r4
 8003862:	4603      	mov	r3, r0
 8003864:	461a      	mov	r2, r3
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 8003874:	23f9      	movs	r3, #249	; 0xf9
 8003876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800387a:	46b5      	mov	sp, r6
    {
 800387c:	e002      	b.n	8003884 <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800387e:	23ff      	movs	r3, #255	; 0xff
 8003880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 8003884:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003888:	4618      	mov	r0, r3
 800388a:	372c      	adds	r7, #44	; 0x2c
 800388c:	46bd      	mov	sp, r7
 800388e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003892 <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8003892:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003896:	b08b      	sub	sp, #44	; 0x2c
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	603b      	str	r3, [r7, #0]
 80038a2:	466b      	mov	r3, sp
 80038a4:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	0059      	lsls	r1, r3, #1
 80038aa:	460b      	mov	r3, r1
 80038ac:	3b01      	subs	r3, #1
 80038ae:	61bb      	str	r3, [r7, #24]
 80038b0:	2300      	movs	r3, #0
 80038b2:	4688      	mov	r8, r1
 80038b4:	4699      	mov	r9, r3
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038ca:	2300      	movs	r3, #0
 80038cc:	460c      	mov	r4, r1
 80038ce:	461d      	mov	r5, r3
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	00eb      	lsls	r3, r5, #3
 80038da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038de:	00e2      	lsls	r2, r4, #3
 80038e0:	1dcb      	adds	r3, r1, #7
 80038e2:	08db      	lsrs	r3, r3, #3
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	ebad 0d03 	sub.w	sp, sp, r3
 80038ea:	466b      	mov	r3, sp
 80038ec:	3300      	adds	r3, #0
 80038ee:	617b      	str	r3, [r7, #20]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80038f0:	6838      	ldr	r0, [r7, #0]
 80038f2:	f001 f9e3 	bl	8004cbc <null_ptr_check>
 80038f6:	4603      	mov	r3, r0
 80038f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 80038fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003900:	2b00      	cmp	r3, #0
 8003902:	d14e      	bne.n	80039a2 <bmp3_set_regs+0x110>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d04b      	beq.n	80039a2 <bmp3_set_regs+0x110>
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d048      	beq.n	80039a2 <bmp3_set_regs+0x110>
    {
        if (len != 0)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d041      	beq.n	800399a <bmp3_set_regs+0x108>
        {
            temp_buff[0] = reg_data[0];
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	781a      	ldrb	r2, [r3, #0]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	7a1b      	ldrb	r3, [r3, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d114      	bne.n	8003950 <bmp3_set_regs+0xbe>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003926:	2300      	movs	r3, #0
 8003928:	77fb      	strb	r3, [r7, #31]
 800392a:	e00d      	b.n	8003948 <bmp3_set_regs+0xb6>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800392c:	7ffb      	ldrb	r3, [r7, #31]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4413      	add	r3, r2
 8003932:	781a      	ldrb	r2, [r3, #0]
 8003934:	7ffb      	ldrb	r3, [r7, #31]
 8003936:	68f9      	ldr	r1, [r7, #12]
 8003938:	440b      	add	r3, r1
 800393a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003942:	7ffb      	ldrb	r3, [r7, #31]
 8003944:	3301      	adds	r3, #1
 8003946:	77fb      	strb	r3, [r7, #31]
 8003948:	7ffb      	ldrb	r3, [r7, #31]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	429a      	cmp	r2, r3
 800394e:	d8ed      	bhi.n	800392c <bmp3_set_regs+0x9a>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d909      	bls.n	800396a <bmp3_set_regs+0xd8>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	6979      	ldr	r1, [r7, #20]
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 fa59 	bl	8003e14 <interleave_reg_addr>
                temp_len = len * 2;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	623b      	str	r3, [r7, #32]
 8003968:	e001      	b.n	800396e <bmp3_set_regs+0xdc>
            }
            else
            {
                temp_len = len;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	691c      	ldr	r4, [r3, #16]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	7818      	ldrb	r0, [r3, #0]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	6a3a      	ldr	r2, [r7, #32]
 800397c:	6979      	ldr	r1, [r7, #20]
 800397e:	47a0      	blx	r4
 8003980:	4603      	mov	r3, r0
 8003982:	461a      	mov	r2, r3
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00b      	beq.n	80039aa <bmp3_set_regs+0x118>
            {
                rslt = BMP3_E_COMM_FAIL;
 8003992:	23f9      	movs	r3, #249	; 0xf9
 8003994:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len != 0)
 8003998:	e007      	b.n	80039aa <bmp3_set_regs+0x118>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 800399a:	23fa      	movs	r3, #250	; 0xfa
 800399c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len != 0)
 80039a0:	e003      	b.n	80039aa <bmp3_set_regs+0x118>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80039a2:	23ff      	movs	r3, #255	; 0xff
 80039a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80039a8:	e000      	b.n	80039ac <bmp3_set_regs+0x11a>
        if (len != 0)
 80039aa:	bf00      	nop
    }

    return rslt;
 80039ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80039b0:	46b5      	mov	sp, r6
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	372c      	adds	r7, #44	; 0x2c
 80039b6:	46bd      	mov	sp, r7
 80039b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080039bc <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80039c6:	6838      	ldr	r0, [r7, #0]
 80039c8:	f001 f978 	bl	8004cbc <null_ptr_check>
 80039cc:	4603      	mov	r3, r0
 80039ce:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 80039d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d141      	bne.n	8003a5c <bmp3_set_sensor_settings+0xa0>
    {
        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	2006      	movs	r0, #6
 80039dc:	f001 f957 	bl	8004c8e <are_settings_changed>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <bmp3_set_sensor_settings+0x36>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, dev);
 80039e6:	6839      	ldr	r1, [r7, #0]
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 fa77 	bl	8003edc <set_pwr_ctrl_settings>
 80039ee:	4603      	mov	r3, r0
 80039f0:	73fb      	strb	r3, [r7, #15]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings) && (!rslt))
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	20f0      	movs	r0, #240	; 0xf0
 80039f6:	f001 f94a 	bl	8004c8e <are_settings_changed>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d009      	beq.n	8003a14 <bmp3_set_sensor_settings+0x58>
 8003a00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d105      	bne.n	8003a14 <bmp3_set_sensor_settings+0x58>
        {
            /* Set the over sampling, ODR and filter settings*/
            rslt = set_odr_filter_settings(desired_settings, dev);
 8003a08:	6839      	ldr	r1, [r7, #0]
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fab6 	bl	8003f7c <set_odr_filter_settings>
 8003a10:	4603      	mov	r3, r0
 8003a12:	73fb      	strb	r3, [r7, #15]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings) && (!rslt))
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8003a1a:	f001 f938 	bl	8004c8e <are_settings_changed>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d009      	beq.n	8003a38 <bmp3_set_sensor_settings+0x7c>
 8003a24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d105      	bne.n	8003a38 <bmp3_set_sensor_settings+0x7c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, dev);
 8003a2c:	6839      	ldr	r1, [r7, #0]
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fb12 	bl	8004058 <set_int_ctrl_settings>
 8003a34:	4603      	mov	r3, r0
 8003a36:	73fb      	strb	r3, [r7, #15]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings) && (!rslt))
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003a3e:	f001 f926 	bl	8004c8e <are_settings_changed>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d009      	beq.n	8003a5c <bmp3_set_sensor_settings+0xa0>
 8003a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d105      	bne.n	8003a5c <bmp3_set_sensor_settings+0xa0>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, dev);
 8003a50:	6839      	ldr	r1, [r7, #0]
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fb79 	bl	800414a <set_advance_settings>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8003a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 8003a70:	237e      	movs	r3, #126	; 0x7e
 8003a72:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 8003a74:	23b6      	movs	r3, #182	; 0xb6
 8003a76:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f001 f91f 	bl	8004cbc <null_ptr_check>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8003a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d140      	bne.n	8003b0c <bmp3_soft_reset+0xa4>
    {
        /* Check for command ready status */
        rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 8003a8a:	f107 010c 	add.w	r1, r7, #12
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	2003      	movs	r0, #3
 8003a94:	f7ff fe6d 	bl	8003772 <bmp3_get_regs>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	73fb      	strb	r3, [r7, #15]

        /* Device is ready to accept new command */
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 8003a9c:	7b3b      	ldrb	r3, [r7, #12]
 8003a9e:	f003 0310 	and.w	r3, r3, #16
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d02e      	beq.n	8003b04 <bmp3_soft_reset+0x9c>
 8003aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d12a      	bne.n	8003b04 <bmp3_soft_reset+0x9c>
        {
            /* Write the soft reset command in the sensor */
            rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8003aae:	f107 010d 	add.w	r1, r7, #13
 8003ab2:	f107 000e 	add.w	r0, r7, #14
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f7ff feea 	bl	8003892 <bmp3_set_regs>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	73fb      	strb	r3, [r7, #15]

            /* Proceed if everything is fine until now */
            if (rslt == BMP3_OK)
 8003ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d11f      	bne.n	8003b0a <bmp3_soft_reset+0xa2>
            {
                /* Wait for 2 ms */
                dev->delay_us(2000, dev->intf_ptr);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6852      	ldr	r2, [r2, #4]
 8003ad2:	4611      	mov	r1, r2
 8003ad4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003ad8:	4798      	blx	r3

                /* Read for command error status */
                rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 8003ada:	f107 010b 	add.w	r1, r7, #11
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	2002      	movs	r0, #2
 8003ae4:	f7ff fe45 	bl	8003772 <bmp3_get_regs>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	73fb      	strb	r3, [r7, #15]

                /* check for command error status */
                if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 8003aec:	7afb      	ldrb	r3, [r7, #11]
 8003aee:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d103      	bne.n	8003afe <bmp3_soft_reset+0x96>
 8003af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <bmp3_soft_reset+0xa2>
                {
                    /* Command not written hence return
                     * error */
                    rslt = BMP3_E_CMD_EXEC_FAILED;
 8003afe:	23fc      	movs	r3, #252	; 0xfc
 8003b00:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMP3_OK)
 8003b02:	e002      	b.n	8003b0a <bmp3_soft_reset+0xa2>
                }
            }
        }
        else
        {
            rslt = BMP3_E_CMD_EXEC_FAILED;
 8003b04:	23fc      	movs	r3, #252	; 0xfc
 8003b06:	73fb      	strb	r3, [r7, #15]
 8003b08:	e000      	b.n	8003b0c <bmp3_soft_reset+0xa4>
            if (rslt == BMP3_OK)
 8003b0a:	bf00      	nop
        }
    }

    return rslt;
 8003b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_dev *dev)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f001 f8cb 	bl	8004cbc <null_ptr_check>
 8003b26:	4603      	mov	r3, r0
 8003b28:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8003b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d130      	bne.n	8003b94 <bmp3_set_op_mode+0x7c>
    {
        uint8_t curr_mode = dev->settings.op_mode;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003b38:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 8003b3a:	f107 030d 	add.w	r3, r7, #13
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 f82d 	bl	8003ba0 <bmp3_get_op_mode>
 8003b46:	4603      	mov	r3, r0
 8003b48:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if (last_set_mode != BMP3_MODE_SLEEP)
 8003b4a:	7b7b      	ldrb	r3, [r7, #13]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00c      	beq.n	8003b6a <bmp3_set_op_mode+0x52>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f8fa 	bl	8003d4a <put_device_to_sleep>
 8003b56:	4603      	mov	r3, r0
 8003b58:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6852      	ldr	r2, [r2, #4]
 8003b62:	4611      	mov	r1, r2
 8003b64:	f241 3088 	movw	r0, #5000	; 0x1388
 8003b68:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 8003b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d110      	bne.n	8003b94 <bmp3_set_op_mode+0x7c>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 8003b72:	7bbb      	ldrb	r3, [r7, #14]
 8003b74:	2b03      	cmp	r3, #3
 8003b76:	d105      	bne.n	8003b84 <bmp3_set_op_mode+0x6c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(dev);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f880 	bl	8003c7e <set_normal_mode>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	73fb      	strb	r3, [r7, #15]
 8003b82:	e007      	b.n	8003b94 <bmp3_set_op_mode+0x7c>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 8003b84:	7bbb      	ldrb	r3, [r7, #14]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d104      	bne.n	8003b94 <bmp3_set_op_mode+0x7c>
            {
                /* Set forced mode */
                rslt = write_power_mode(dev);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f8a7 	bl	8003cde <write_power_mode>
 8003b90:	4603      	mov	r3, r0
 8003b92:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8003b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003baa:	6838      	ldr	r0, [r7, #0]
 8003bac:	f001 f886 	bl	8004cbc <null_ptr_check>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (op_mode != NULL))
 8003bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d114      	bne.n	8003be6 <bmp3_get_op_mode+0x46>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d011      	beq.n	8003be6 <bmp3_get_op_mode+0x46>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	201b      	movs	r0, #27
 8003bca:	f7ff fdd2 	bl	8003772 <bmp3_get_regs>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	111b      	asrs	r3, r3, #4
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	701a      	strb	r2, [r3, #0]
 8003be4:	e001      	b.n	8003bea <bmp3_get_op_mode+0x4a>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8003be6:	23ff      	movs	r3, #255	; 0xff
 8003be8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b088      	sub	sp, #32
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	607a      	str	r2, [r7, #4]
 8003c02:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 8003c04:	2300      	movs	r3, #0
 8003c06:	61bb      	str	r3, [r7, #24]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	83bb      	strh	r3, [r7, #28]
    struct bmp3_uncomp_data uncomp_data = { 0 };
 8003c0c:	f107 0310 	add.w	r3, r7, #16
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	605a      	str	r2, [r3, #4]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f001 f850 	bl	8004cbc <null_ptr_check>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	77fb      	strb	r3, [r7, #31]

    if ((rslt == BMP3_OK) && (comp_data != NULL))
 8003c20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d122      	bne.n	8003c6e <bmp3_get_sensor_data+0x78>
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d01f      	beq.n	8003c6e <bmp3_get_sensor_data+0x78>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 8003c2e:	f107 0118 	add.w	r1, r7, #24
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2206      	movs	r2, #6
 8003c36:	2004      	movs	r0, #4
 8003c38:	f7ff fd9b 	bl	8003772 <bmp3_get_regs>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMP3_OK)
 8003c40:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d114      	bne.n	8003c72 <bmp3_get_sensor_data+0x7c>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 8003c48:	f107 0210 	add.w	r2, r7, #16
 8003c4c:	f107 0318 	add.w	r3, r7, #24
 8003c50:	4611      	mov	r1, r2
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fc67 	bl	8004526 <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3318      	adds	r3, #24
 8003c5c:	f107 0110 	add.w	r1, r7, #16
 8003c60:	7bf8      	ldrb	r0, [r7, #15]
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	f000 fc92 	bl	800458c <compensate_data>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMP3_OK)
 8003c6c:	e001      	b.n	8003c72 <bmp3_get_sensor_data+0x7c>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8003c6e:	23ff      	movs	r3, #255	; 0xff
 8003c70:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8003c72:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3720      	adds	r7, #32
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_dev *dev)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(dev);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f887 	bl	8003d9a <validate_normal_mode_settings>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 8003c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d11c      	bne.n	8003cd2 <set_normal_mode+0x54>
    {
        rslt = write_power_mode(dev);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f820 	bl	8003cde <write_power_mode>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 8003ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d113      	bne.n	8003cd2 <set_normal_mode+0x54>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 8003caa:	f107 010e 	add.w	r1, r7, #14
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	2002      	movs	r0, #2
 8003cb4:	f7ff fd5d 	bl	8003772 <bmp3_get_regs>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 8003cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d106      	bne.n	8003cd2 <set_normal_mode+0x54>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 8003cc4:	7bbb      	ldrb	r3, [r7, #14]
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <set_normal_mode+0x54>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 8003cce:	23fb      	movs	r3, #251	; 0xfb
 8003cd0:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8003cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(struct bmp3_dev *dev)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8003ce6:	231b      	movs	r3, #27
 8003ce8:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = dev->settings.op_mode;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003cf0:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 8003cf2:	7b78      	ldrb	r0, [r7, #13]
 8003cf4:	f107 010c 	add.w	r1, r7, #12
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f7ff fd39 	bl	8003772 <bmp3_get_regs>
 8003d00:	4603      	mov	r3, r0
 8003d02:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 8003d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d118      	bne.n	8003d3e <write_power_mode+0x60>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 8003d0c:	7b3b      	ldrb	r3, [r7, #12]
 8003d0e:	b25b      	sxtb	r3, r3
 8003d10:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003d14:	b25a      	sxtb	r2, r3
 8003d16:	7bbb      	ldrb	r3, [r7, #14]
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	b25b      	sxtb	r3, r3
 8003d1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d20:	b25b      	sxtb	r3, r3
 8003d22:	4313      	orrs	r3, r2
 8003d24:	b25b      	sxtb	r3, r3
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 8003d2a:	f107 010c 	add.w	r1, r7, #12
 8003d2e:	f107 000d 	add.w	r0, r7, #13
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f7ff fdac 	bl	8003892 <bmp3_set_regs>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b084      	sub	sp, #16
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8003d52:	231b      	movs	r3, #27
 8003d54:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 8003d56:	f107 010d 	add.w	r1, r7, #13
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	201b      	movs	r0, #27
 8003d60:	f7ff fd07 	bl	8003772 <bmp3_get_regs>
 8003d64:	4603      	mov	r3, r0
 8003d66:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8003d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10e      	bne.n	8003d8e <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 8003d70:	7b7b      	ldrb	r3, [r7, #13]
 8003d72:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 8003d7a:	f107 010d 	add.w	r1, r7, #13
 8003d7e:	f107 000e 	add.w	r0, r7, #14
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f7ff fd84 	bl	8003892 <bmp3_set_regs>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_dev *dev)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b084      	sub	sp, #16
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = get_odr_filter_settings(dev);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 fa23 	bl	80041ee <get_odr_filter_settings>
 8003da8:	4603      	mov	r3, r0
 8003daa:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8003dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d104      	bne.n	8003dbe <validate_normal_mode_settings+0x24>
    {
        rslt = validate_osr_and_odr_settings(dev);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 fa37 	bl	8004228 <validate_osr_and_odr_settings>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b088      	sub	sp, #32
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 8003dd2:	2331      	movs	r3, #49	; 0x31
 8003dd4:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60bb      	str	r3, [r7, #8]
 8003dda:	f107 030c 	add.w	r3, r7, #12
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	605a      	str	r2, [r3, #4]
 8003de4:	609a      	str	r2, [r3, #8]
 8003de6:	60da      	str	r2, [r3, #12]
 8003de8:	741a      	strb	r2, [r3, #16]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 8003dea:	f107 0108 	add.w	r1, r7, #8
 8003dee:	7ff8      	ldrb	r0, [r7, #31]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2215      	movs	r2, #21
 8003df4:	f7ff fcbd 	bl	8003772 <bmp3_get_regs>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 8003dfc:	f107 0308 	add.w	r3, r7, #8
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fbfa 	bl	80045fc <parse_calib_data>

    return rslt;
 8003e08:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3720      	adds	r7, #32
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
 8003e20:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8003e22:	2301      	movs	r3, #1
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	e015      	b.n	8003e54 <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	441a      	add	r2, r3
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	3b01      	subs	r3, #1
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	440b      	add	r3, r1
 8003e38:	7812      	ldrb	r2, [r2, #0]
 8003e3a:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	441a      	add	r2, r3
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	68b9      	ldr	r1, [r7, #8]
 8003e48:	440b      	add	r3, r1
 8003e4a:	7812      	ldrb	r2, [r2, #0]
 8003e4c:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	3301      	adds	r3, #1
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d3e5      	bcc.n	8003e28 <interleave_reg_addr+0x14>
    }
}
 8003e5c:	bf00      	nop
 8003e5e:	bf00      	nop
 8003e60:	371c      	adds	r7, #28
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr

08003e68 <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 8003e72:	2300      	movs	r3, #0
 8003e74:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	10db      	asrs	r3, r3, #3
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	f003 031f 	and.w	r3, r3, #31
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
 8003eb8:	3302      	adds	r3, #2
 8003eba:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	105b      	asrs	r3, r3, #1
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	709a      	strb	r2, [r3, #2]
}
 8003ed2:	bf00      	nop
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr

08003edc <set_pwr_ctrl_settings>:
/*!
 * @brief This API sets the pressure enable and temperature enable
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8003ee6:	231b      	movs	r3, #27
 8003ee8:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8003eea:	7bb8      	ldrb	r0, [r7, #14]
 8003eec:	f107 010d 	add.w	r1, r7, #13
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f7ff fc3d 	bl	8003772 <bmp3_get_regs>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8003efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d134      	bne.n	8003f6e <set_pwr_ctrl_settings+0x92>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00f      	beq.n	8003f2e <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, dev->settings.press_en);
 8003f0e:	7b7b      	ldrb	r3, [r7, #13]
 8003f10:	b25b      	sxtb	r3, r3
 8003f12:	f023 0301 	bic.w	r3, r3, #1
 8003f16:	b25a      	sxtb	r2, r3
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003f1e:	b25b      	sxtb	r3, r3
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	b25b      	sxtb	r3, r3
 8003f26:	4313      	orrs	r3, r2
 8003f28:	b25b      	sxtb	r3, r3
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	737b      	strb	r3, [r7, #13]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d010      	beq.n	8003f5a <set_pwr_ctrl_settings+0x7e>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, dev->settings.temp_en);
 8003f38:	7b7b      	ldrb	r3, [r7, #13]
 8003f3a:	b25b      	sxtb	r3, r3
 8003f3c:	f023 0302 	bic.w	r3, r3, #2
 8003f40:	b25a      	sxtb	r2, r3
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	b25b      	sxtb	r3, r3
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	b25b      	sxtb	r3, r3
 8003f52:	4313      	orrs	r3, r2
 8003f54:	b25b      	sxtb	r3, r3
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	737b      	strb	r3, [r7, #13]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8003f5a:	f107 010d 	add.w	r1, r7, #13
 8003f5e:	f107 000e 	add.w	r0, r7, #14
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f7ff fc94 	bl	8003892 <bmp3_set_regs>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b088      	sub	sp, #32
 8003f80:	af02      	add	r7, sp, #8
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 8003f86:	4b33      	ldr	r3, [pc, #204]	; (8004054 <set_odr_filter_settings+0xd8>)
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	82bb      	strh	r3, [r7, #20]
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	75bb      	strb	r3, [r7, #22]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 8003f90:	2300      	movs	r3, #0
 8003f92:	73fb      	strb	r3, [r7, #15]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8003f94:	f107 0110 	add.w	r1, r7, #16
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	2204      	movs	r2, #4
 8003f9c:	201c      	movs	r0, #28
 8003f9e:	f7ff fbe8 	bl	8003772 <bmp3_get_regs>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8003fa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d14b      	bne.n	8004046 <set_odr_filter_settings+0xca>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	2030      	movs	r0, #48	; 0x30
 8003fb2:	f000 fe6c 	bl	8004c8e <are_settings_changed>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00b      	beq.n	8003fd4 <set_odr_filter_settings+0x58>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, dev);
 8003fbc:	f107 000f 	add.w	r0, r7, #15
 8003fc0:	f107 0210 	add.w	r2, r7, #16
 8003fc4:	f107 0114 	add.w	r1, r7, #20
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	4603      	mov	r3, r0
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f9e4 	bl	800439c <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 8003fd4:	6879      	ldr	r1, [r7, #4]
 8003fd6:	2080      	movs	r0, #128	; 0x80
 8003fd8:	f000 fe59 	bl	8004c8e <are_settings_changed>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d008      	beq.n	8003ff4 <set_odr_filter_settings+0x78>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, dev);
 8003fe2:	f107 020f 	add.w	r2, r7, #15
 8003fe6:	f107 0110 	add.w	r1, r7, #16
 8003fea:	f107 0014 	add.w	r0, r7, #20
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	f000 fa2b 	bl	800444a <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	2040      	movs	r0, #64	; 0x40
 8003ff8:	f000 fe49 	bl	8004c8e <are_settings_changed>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d008      	beq.n	8004014 <set_odr_filter_settings+0x98>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, dev);
 8004002:	f107 020f 	add.w	r2, r7, #15
 8004006:	f107 0110 	add.w	r1, r7, #16
 800400a:	f107 0014 	add.w	r0, r7, #20
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	f000 fa54 	bl	80044bc <fill_filter_data>
        }

        if (dev->settings.op_mode == BMP3_MODE_NORMAL)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800401a:	2b03      	cmp	r3, #3
 800401c:	d104      	bne.n	8004028 <set_odr_filter_settings+0xac>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(dev);
 800401e:	6838      	ldr	r0, [r7, #0]
 8004020:	f000 f902 	bl	8004228 <validate_osr_and_odr_settings>
 8004024:	4603      	mov	r3, r0
 8004026:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMP3_OK)
 8004028:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10a      	bne.n	8004046 <set_odr_filter_settings+0xca>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 8004030:	7bfb      	ldrb	r3, [r7, #15]
 8004032:	461a      	mov	r2, r3
 8004034:	f107 0110 	add.w	r1, r7, #16
 8004038:	f107 0014 	add.w	r0, r7, #20
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	f7ff fc28 	bl	8003892 <bmp3_set_regs>
 8004042:	4603      	mov	r3, r0
 8004044:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8004046:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	08020f04 	.word	0x08020f04

08004058 <set_int_ctrl_settings>:
 * @brief This internal API sets the interrupt control (output mode, level,
 * latch and data ready) settings of the sensor based on the settings
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 8004062:	2319      	movs	r3, #25
 8004064:	737b      	strb	r3, [r7, #13]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8004066:	7b78      	ldrb	r0, [r7, #13]
 8004068:	f107 010e 	add.w	r1, r7, #14
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2201      	movs	r2, #1
 8004070:	f7ff fb7f 	bl	8003772 <bmp3_get_regs>
 8004074:	4603      	mov	r3, r0
 8004076:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8004078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d15e      	bne.n	800413e <set_int_ctrl_settings+0xe6>
    {
        int_settings = dev->settings.int_settings;
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	f107 0308 	add.w	r3, r7, #8
 8004086:	32b7      	adds	r2, #183	; 0xb7
 8004088:	6810      	ldr	r0, [r2, #0]
 800408a:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00d      	beq.n	80040b2 <set_int_ctrl_settings+0x5a>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 8004096:	7bbb      	ldrb	r3, [r7, #14]
 8004098:	b25b      	sxtb	r3, r3
 800409a:	f023 0301 	bic.w	r3, r3, #1
 800409e:	b25a      	sxtb	r2, r3
 80040a0:	7a3b      	ldrb	r3, [r7, #8]
 80040a2:	b25b      	sxtb	r3, r3
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	b25b      	sxtb	r3, r3
 80040aa:	4313      	orrs	r3, r2
 80040ac:	b25b      	sxtb	r3, r3
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	73bb      	strb	r3, [r7, #14]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00e      	beq.n	80040da <set_int_ctrl_settings+0x82>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 80040bc:	7bbb      	ldrb	r3, [r7, #14]
 80040be:	b25b      	sxtb	r3, r3
 80040c0:	f023 0302 	bic.w	r3, r3, #2
 80040c4:	b25a      	sxtb	r2, r3
 80040c6:	7a7b      	ldrb	r3, [r7, #9]
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	b25b      	sxtb	r3, r3
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	b25b      	sxtb	r3, r3
 80040d2:	4313      	orrs	r3, r2
 80040d4:	b25b      	sxtb	r3, r3
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	73bb      	strb	r3, [r7, #14]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00e      	beq.n	8004102 <set_int_ctrl_settings+0xaa>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 80040e4:	7bbb      	ldrb	r3, [r7, #14]
 80040e6:	b25b      	sxtb	r3, r3
 80040e8:	f023 0304 	bic.w	r3, r3, #4
 80040ec:	b25a      	sxtb	r2, r3
 80040ee:	7abb      	ldrb	r3, [r7, #10]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	b25b      	sxtb	r3, r3
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	b25b      	sxtb	r3, r3
 80040fa:	4313      	orrs	r3, r2
 80040fc:	b25b      	sxtb	r3, r3
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	73bb      	strb	r3, [r7, #14]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00e      	beq.n	800412a <set_int_ctrl_settings+0xd2>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 800410c:	7bbb      	ldrb	r3, [r7, #14]
 800410e:	b25b      	sxtb	r3, r3
 8004110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004114:	b25a      	sxtb	r2, r3
 8004116:	7afb      	ldrb	r3, [r7, #11]
 8004118:	019b      	lsls	r3, r3, #6
 800411a:	b25b      	sxtb	r3, r3
 800411c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004120:	b25b      	sxtb	r3, r3
 8004122:	4313      	orrs	r3, r2
 8004124:	b25b      	sxtb	r3, r3
 8004126:	b2db      	uxtb	r3, r3
 8004128:	73bb      	strb	r3, [r7, #14]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 800412a:	f107 010e 	add.w	r1, r7, #14
 800412e:	f107 000d 	add.w	r0, r7, #13
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2201      	movs	r2, #1
 8004136:	f7ff fbac 	bl	8003892 <bmp3_set_regs>
 800413a:	4603      	mov	r3, r0
 800413c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800413e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <set_advance_settings>:
/*!
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b084      	sub	sp, #16
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = dev->settings.adv_settings;
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	f107 0308 	add.w	r3, r7, #8
 800415a:	32bb      	adds	r2, #187	; 0xbb
 800415c:	8812      	ldrh	r2, [r2, #0]
 800415e:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 8004160:	231a      	movs	r3, #26
 8004162:	73bb      	strb	r3, [r7, #14]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8004164:	7bb8      	ldrb	r0, [r7, #14]
 8004166:	f107 010d 	add.w	r1, r7, #13
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2201      	movs	r2, #1
 800416e:	f7ff fb00 	bl	8003772 <bmp3_get_regs>
 8004172:	4603      	mov	r3, r0
 8004174:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8004176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d131      	bne.n	80041e2 <set_advance_settings+0x98>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00e      	beq.n	80041a6 <set_advance_settings+0x5c>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 8004188:	7b7b      	ldrb	r3, [r7, #13]
 800418a:	b25b      	sxtb	r3, r3
 800418c:	f023 0302 	bic.w	r3, r3, #2
 8004190:	b25a      	sxtb	r2, r3
 8004192:	7a3b      	ldrb	r3, [r7, #8]
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	b25b      	sxtb	r3, r3
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	b25b      	sxtb	r3, r3
 800419e:	4313      	orrs	r3, r2
 80041a0:	b25b      	sxtb	r3, r3
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	737b      	strb	r3, [r7, #13]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00e      	beq.n	80041ce <set_advance_settings+0x84>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 80041b0:	7b7b      	ldrb	r3, [r7, #13]
 80041b2:	b25b      	sxtb	r3, r3
 80041b4:	f023 0304 	bic.w	r3, r3, #4
 80041b8:	b25a      	sxtb	r2, r3
 80041ba:	7a7b      	ldrb	r3, [r7, #9]
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	b25b      	sxtb	r3, r3
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	b25b      	sxtb	r3, r3
 80041c6:	4313      	orrs	r3, r2
 80041c8:	b25b      	sxtb	r3, r3
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	737b      	strb	r3, [r7, #13]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 80041ce:	f107 010d 	add.w	r1, r7, #13
 80041d2:	f107 000e 	add.w	r0, r7, #14
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2201      	movs	r2, #1
 80041da:	f7ff fb5a 	bl	8003892 <bmp3_set_regs>
 80041de:	4603      	mov	r3, r0
 80041e0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80041e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_dev *dev)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b084      	sub	sp, #16
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 80041f6:	f107 0108 	add.w	r1, r7, #8
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2204      	movs	r2, #4
 80041fe:	201c      	movs	r0, #28
 8004200:	f7ff fab7 	bl	8003772 <bmp3_get_regs>
 8004204:	4603      	mov	r3, r0
 8004206:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &dev->settings.odr_filter);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f103 02b3 	add.w	r2, r3, #179	; 0xb3
 800420e:	f107 0308 	add.w	r3, r7, #8
 8004212:	4611      	mov	r1, r2
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff fe27 	bl	8003e68 <parse_odr_filter_settings>

    return rslt;
 800421a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
	...

08004228 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_dev *dev)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b098      	sub	sp, #96	; 0x60
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 8004230:	23ea      	movs	r3, #234	; 0xea
 8004232:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t meas_t_p = 0;
 8004234:	2300      	movs	r3, #0
 8004236:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 8004238:	4a1c      	ldr	r2, [pc, #112]	; (80042ac <validate_osr_and_odr_settings+0x84>)
 800423a:	f107 030c 	add.w	r3, r7, #12
 800423e:	4611      	mov	r1, r2
 8004240:	2248      	movs	r2, #72	; 0x48
 8004242:	4618      	mov	r0, r3
 8004244:	f01c f9f8 	bl	8020638 <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (dev->settings.press_en)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d006      	beq.n	8004260 <validate_osr_and_odr_settings+0x38>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(dev);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f842 	bl	80042dc <calculate_press_meas_time>
 8004258:	4602      	mov	r2, r0
 800425a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800425c:	4413      	add	r3, r2
 800425e:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if (dev->settings.temp_en)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d006      	beq.n	8004278 <validate_osr_and_odr_settings+0x50>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(dev);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f866 	bl	800433c <calculate_temp_meas_time>
 8004270:	4602      	mov	r2, r0
 8004272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004274:	4413      	add	r3, r2
 8004276:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 8004278:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800427a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800427c:	4413      	add	r3, r2
 800427e:	65bb      	str	r3, [r7, #88]	; 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[dev->settings.odr_filter.odr]);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	3360      	adds	r3, #96	; 0x60
 800428a:	443b      	add	r3, r7
 800428c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004290:	4619      	mov	r1, r3
 8004292:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004294:	f000 f80c 	bl	80042b0 <verify_meas_time_and_odr_duration>
 8004298:	4603      	mov	r3, r0
 800429a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    return rslt;
 800429e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3760      	adds	r7, #96	; 0x60
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	08020f08 	.word	0x08020f08

080042b0 <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d202      	bcs.n	80042c8 <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	73fb      	strb	r3, [r7, #15]
 80042c6:	e001      	b.n	80042cc <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 80042c8:	23fd      	movs	r3, #253	; 0xfd
 80042ca:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80042cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bc80      	pop	{r7}
 80042d8:	4770      	bx	lr
	...

080042dc <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_dev *dev)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = dev->settings.odr_filter;
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	f107 030c 	add.w	r3, r7, #12
 80042ea:	32b3      	adds	r2, #179	; 0xb3
 80042ec:	6810      	ldr	r0, [r2, #0]
 80042ee:	6018      	str	r0, [r3, #0]

#ifdef BMP3_DOUBLE_PRECISION_COMPENSATION
    double base = 2.0;
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80042f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_DOUBLE_PRECISION_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 80042fc:	7b3b      	ldrb	r3, [r7, #12]
 80042fe:	461a      	mov	r2, r3
 8004300:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004304:	f000 fca2 	bl	8004c4c <pow_bmp3>
 8004308:	6178      	str	r0, [r7, #20]
    press_meas_t = (BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 800430a:	490a      	ldr	r1, [pc, #40]	; (8004334 <calculate_press_meas_time+0x58>)
 800430c:	6978      	ldr	r0, [r7, #20]
 800430e:	f7fc fd6b 	bl	8000de8 <__aeabi_fmul>
 8004312:	4603      	mov	r3, r0
 8004314:	4908      	ldr	r1, [pc, #32]	; (8004338 <calculate_press_meas_time+0x5c>)
 8004316:	4618      	mov	r0, r3
 8004318:	f7fc fc5e 	bl	8000bd8 <__addsf3>
 800431c:	4603      	mov	r3, r0
 800431e:	4618      	mov	r0, r3
 8004320:	f7fc fed8 	bl	80010d4 <__aeabi_f2uiz>
 8004324:	4603      	mov	r3, r0
 8004326:	613b      	str	r3, [r7, #16]

    /* Output in microseconds */
    return press_meas_t;
 8004328:	693b      	ldr	r3, [r7, #16]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3720      	adds	r7, #32
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	44fa0000 	.word	0x44fa0000
 8004338:	43c40000 	.word	0x43c40000

0800433c <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_dev *dev)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b088      	sub	sp, #32
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = dev->settings.odr_filter;
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	f107 030c 	add.w	r3, r7, #12
 800434a:	32b3      	adds	r2, #179	; 0xb3
 800434c:	6810      	ldr	r0, [r2, #0]
 800434e:	6018      	str	r0, [r3, #0]

#ifdef BMP3_DOUBLE_PRECISION_COMPENSATION
    double base = 2.0;
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004358:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_DOUBLE_PRECISION_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 800435c:	7b7b      	ldrb	r3, [r7, #13]
 800435e:	461a      	mov	r2, r3
 8004360:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004364:	f000 fc72 	bl	8004c4c <pow_bmp3>
 8004368:	6178      	str	r0, [r7, #20]
    temp_meas_t = (BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 800436a:	490a      	ldr	r1, [pc, #40]	; (8004394 <calculate_temp_meas_time+0x58>)
 800436c:	6978      	ldr	r0, [r7, #20]
 800436e:	f7fc fd3b 	bl	8000de8 <__aeabi_fmul>
 8004372:	4603      	mov	r3, r0
 8004374:	4908      	ldr	r1, [pc, #32]	; (8004398 <calculate_temp_meas_time+0x5c>)
 8004376:	4618      	mov	r0, r3
 8004378:	f7fc fc2e 	bl	8000bd8 <__addsf3>
 800437c:	4603      	mov	r3, r0
 800437e:	4618      	mov	r0, r3
 8004380:	f7fc fea8 	bl	80010d4 <__aeabi_f2uiz>
 8004384:	4603      	mov	r3, r0
 8004386:	613b      	str	r3, [r7, #16]

    /* Output in uint32_t */
    return temp_meas_t;
 8004388:	693b      	ldr	r3, [r7, #16]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3720      	adds	r7, #32
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	44fa0000 	.word	0x44fa0000
 8004398:	439c8000 	.word	0x439c8000

0800439c <fill_osr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the over sampling settings for burst write operation.
 */
static void fill_osr_data(uint32_t settings, uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_dev *dev)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = dev->settings.odr_filter;
 80043aa:	6a3a      	ldr	r2, [r7, #32]
 80043ac:	f107 0314 	add.w	r3, r7, #20
 80043b0:	32b3      	adds	r2, #179	; 0xb3
 80043b2:	6810      	ldr	r0, [r2, #0]
 80043b4:	6018      	str	r0, [r3, #0]

    if (settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d03f      	beq.n	8004440 <fill_osr_data+0xa4>
    {
        /* Pressure over sampling settings check */
        if (settings & BMP3_SEL_PRESS_OS)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f003 0310 	and.w	r3, r3, #16
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d013      	beq.n	80043f2 <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	b25b      	sxtb	r3, r3
 80043d0:	f023 0307 	bic.w	r3, r3, #7
 80043d4:	b25a      	sxtb	r2, r3
 80043d6:	7d3b      	ldrb	r3, [r7, #20]
 80043d8:	b25b      	sxtb	r3, r3
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	b25b      	sxtb	r3, r3
 80043e0:	4313      	orrs	r3, r2
 80043e2:	b25a      	sxtb	r2, r3
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	4619      	mov	r1, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	440b      	add	r3, r1
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (settings & BMP3_SEL_TEMP_OS)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f003 0320 	and.w	r3, r3, #32
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d014      	beq.n	8004426 <fill_osr_data+0x8a>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	b25b      	sxtb	r3, r3
 8004402:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004406:	b25a      	sxtb	r2, r3
 8004408:	7d7b      	ldrb	r3, [r7, #21]
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	b25b      	sxtb	r3, r3
 800440e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004412:	b25b      	sxtb	r3, r3
 8004414:	4313      	orrs	r3, r2
 8004416:	b25a      	sxtb	r2, r3
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	4619      	mov	r1, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	440b      	add	r3, r1
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	461a      	mov	r2, r3
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4413      	add	r3, r2
 8004430:	221c      	movs	r2, #28
 8004432:	701a      	strb	r2, [r3, #0]
        (*len)++;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	3301      	adds	r3, #1
 800443a:	b2da      	uxtb	r2, r3
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	701a      	strb	r2, [r3, #0]
    }
}
 8004440:	bf00      	nop
 8004442:	371c      	adds	r7, #28
 8004444:	46bd      	mov	sp, r7
 8004446:	bc80      	pop	{r7}
 8004448:	4770      	bx	lr

0800444a <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_dev *dev)
{
 800444a:	b480      	push	{r7}
 800444c:	b087      	sub	sp, #28
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	607a      	str	r2, [r7, #4]
 8004456:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &dev->settings.odr_filter;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	33b3      	adds	r3, #179	; 0xb3
 800445c:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	78db      	ldrb	r3, [r3, #3]
 8004462:	2b11      	cmp	r3, #17
 8004464:	d902      	bls.n	800446c <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	2211      	movs	r2, #17
 800446a:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	3301      	adds	r3, #1
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	b25b      	sxtb	r3, r3
 8004474:	f023 031f 	bic.w	r3, r3, #31
 8004478:	b25a      	sxtb	r2, r3
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	78db      	ldrb	r3, [r3, #3]
 800447e:	b25b      	sxtb	r3, r3
 8004480:	f003 031f 	and.w	r3, r3, #31
 8004484:	b25b      	sxtb	r3, r3
 8004486:	4313      	orrs	r3, r2
 8004488:	b25a      	sxtb	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	4619      	mov	r1, r3
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	440b      	add	r3, r1
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	461a      	mov	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4413      	add	r3, r2
 80044a2:	221d      	movs	r2, #29
 80044a4:	701a      	strb	r2, [r3, #0]
    (*len)++;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	3301      	adds	r3, #1
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	701a      	strb	r2, [r3, #0]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_dev *dev)
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = dev->settings.odr_filter;
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	f107 0314 	add.w	r3, r7, #20
 80044d0:	32b3      	adds	r2, #179	; 0xb3
 80044d2:	6810      	ldr	r0, [r2, #0]
 80044d4:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	3303      	adds	r3, #3
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	b25b      	sxtb	r3, r3
 80044de:	f023 030e 	bic.w	r3, r3, #14
 80044e2:	b25a      	sxtb	r2, r3
 80044e4:	7dbb      	ldrb	r3, [r7, #22]
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	b25b      	sxtb	r3, r3
 80044ea:	f003 030e 	and.w	r3, r3, #14
 80044ee:	b25b      	sxtb	r3, r3
 80044f0:	4313      	orrs	r3, r2
 80044f2:	b25a      	sxtb	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	4619      	mov	r1, r3
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	440b      	add	r3, r1
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	461a      	mov	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4413      	add	r3, r2
 800450c:	221f      	movs	r2, #31
 800450e:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	3301      	adds	r3, #1
 8004516:	b2da      	uxtb	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	701a      	strb	r2, [r3, #0]
}
 800451c:	bf00      	nop
 800451e:	371c      	adds	r7, #28
 8004520:	46bd      	mov	sp, r7
 8004522:	bc80      	pop	{r7}
 8004524:	4770      	bx	lr

08004526 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 8004526:	b480      	push	{r7}
 8004528:	b087      	sub	sp, #28
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3301      	adds	r3, #1
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	021b      	lsls	r3, r3, #8
 800453e:	613b      	str	r3, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3302      	adds	r3, #2
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	041b      	lsls	r3, r3, #16
 8004548:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	431a      	orrs	r2, r3
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	431a      	orrs	r2, r3
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3303      	adds	r3, #3
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3304      	adds	r3, #4
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	021b      	lsls	r3, r3, #8
 8004568:	613b      	str	r3, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3305      	adds	r3, #5
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	041b      	lsls	r3, r3, #16
 8004572:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	431a      	orrs	r2, r3
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	431a      	orrs	r2, r3
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	605a      	str	r2, [r3, #4]
}
 8004582:	bf00      	nop
 8004584:	371c      	adds	r7, #28
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr

0800458c <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	60b9      	str	r1, [r7, #8]
 8004594:	607a      	str	r2, [r7, #4]
 8004596:	603b      	str	r3, [r7, #0]
 8004598:	4603      	mov	r3, r0
 800459a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 800459c:	2300      	movs	r3, #0
 800459e:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d022      	beq.n	80045ec <compensate_data+0x60>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d01f      	beq.n	80045ec <compensate_data+0x60>
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d01c      	beq.n	80045ec <compensate_data+0x60>
    {
        /* If pressure or temperature component is selected */
        if (sensor_comp & (BMP3_PRESS | BMP3_TEMP))
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	f003 0303 	and.w	r3, r3, #3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <compensate_data+0x42>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80045bc:	6839      	ldr	r1, [r7, #0]
 80045be:	68b8      	ldr	r0, [r7, #8]
 80045c0:	f000 f9e4 	bl	800498c <compensate_temperature>
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	e9c1 2300 	strd	r2, r3, [r1]
        }

        if (sensor_comp & BMP3_PRESS)
 80045ce:	7bfb      	ldrb	r3, [r7, #15]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00b      	beq.n	80045f0 <compensate_data+0x64>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80045d8:	6839      	ldr	r1, [r7, #0]
 80045da:	68b8      	ldr	r0, [r7, #8]
 80045dc:	f000 fa19 	bl	8004a12 <compensate_pressure>
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	6879      	ldr	r1, [r7, #4]
 80045e6:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp & BMP3_PRESS)
 80045ea:	e001      	b.n	80045f0 <compensate_data+0x64>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80045ec:	23ff      	movs	r3, #255	; 0xff
 80045ee:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80045f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	3390      	adds	r3, #144	; 0x90
 800460a:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	3318      	adds	r3, #24
 8004610:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	4ba4      	ldr	r3, [pc, #656]	; (80048a8 <parse_calib_data+0x2ac>)
 8004618:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3301      	adds	r3, #1
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	021b      	lsls	r3, r3, #8
 8004624:	b21a      	sxth	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	b21b      	sxth	r3, r3
 800462c:	4313      	orrs	r3, r2
 800462e:	b21b      	sxth	r3, r3
 8004630:	b29a      	uxth	r2, r3
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7fb ff3a 	bl	80004b4 <__aeabi_ui2d>
 8004640:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004644:	f7fc f8da 	bl	80007fc <__aeabi_ddiv>
 8004648:	4602      	mov	r2, r0
 800464a:	460b      	mov	r3, r1
 800464c:	6939      	ldr	r1, [r7, #16]
 800464e:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	3303      	adds	r3, #3
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	021b      	lsls	r3, r3, #8
 800465a:	b21a      	sxth	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3302      	adds	r3, #2
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	b21b      	sxth	r3, r3
 8004664:	4313      	orrs	r3, r2
 8004666:	b21b      	sxth	r3, r3
 8004668:	b29a      	uxth	r2, r3
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 800466e:	f04f 0200 	mov.w	r2, #0
 8004672:	4b8e      	ldr	r3, [pc, #568]	; (80048ac <parse_calib_data+0x2b0>)
 8004674:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	885b      	ldrh	r3, [r3, #2]
 800467c:	4618      	mov	r0, r3
 800467e:	f7fb ff19 	bl	80004b4 <__aeabi_ui2d>
 8004682:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004686:	f7fc f8b9 	bl	80007fc <__aeabi_ddiv>
 800468a:	4602      	mov	r2, r0
 800468c:	460b      	mov	r3, r1
 800468e:	6939      	ldr	r1, [r7, #16]
 8004690:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3304      	adds	r3, #4
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	b25a      	sxtb	r2, r3
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	4b82      	ldr	r3, [pc, #520]	; (80048b0 <parse_calib_data+0x2b4>)
 80046a6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fb ff0f 	bl	80004d4 <__aeabi_i2d>
 80046b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046ba:	f7fc f89f 	bl	80007fc <__aeabi_ddiv>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	6939      	ldr	r1, [r7, #16]
 80046c4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3306      	adds	r3, #6
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	021b      	lsls	r3, r3, #8
 80046d0:	b21a      	sxth	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3305      	adds	r3, #5
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	b21b      	sxth	r3, r3
 80046da:	4313      	orrs	r3, r2
 80046dc:	b21a      	sxth	r2, r3
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	4b73      	ldr	r3, [pc, #460]	; (80048b4 <parse_calib_data+0x2b8>)
 80046e8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80046f2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fb feec 	bl	80004d4 <__aeabi_i2d>
 80046fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004700:	f7fc f87c 	bl	80007fc <__aeabi_ddiv>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	6939      	ldr	r1, [r7, #16]
 800470a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	3308      	adds	r3, #8
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	021b      	lsls	r3, r3, #8
 8004716:	b21a      	sxth	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3307      	adds	r3, #7
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	b21b      	sxth	r3, r3
 8004720:	4313      	orrs	r3, r2
 8004722:	b21a      	sxth	r2, r3
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	4b62      	ldr	r3, [pc, #392]	; (80048b8 <parse_calib_data+0x2bc>)
 800472e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004738:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800473c:	4618      	mov	r0, r3
 800473e:	f7fb fec9 	bl	80004d4 <__aeabi_i2d>
 8004742:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004746:	f7fc f859 	bl	80007fc <__aeabi_ddiv>
 800474a:	4602      	mov	r2, r0
 800474c:	460b      	mov	r3, r1
 800474e:	6939      	ldr	r1, [r7, #16]
 8004750:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3309      	adds	r3, #9
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	b25a      	sxtb	r2, r3
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	4b55      	ldr	r3, [pc, #340]	; (80048bc <parse_calib_data+0x2c0>)
 8004766:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004770:	4618      	mov	r0, r3
 8004772:	f7fb feaf 	bl	80004d4 <__aeabi_i2d>
 8004776:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800477a:	f7fc f83f 	bl	80007fc <__aeabi_ddiv>
 800477e:	4602      	mov	r2, r0
 8004780:	460b      	mov	r3, r1
 8004782:	6939      	ldr	r1, [r7, #16]
 8004784:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	330a      	adds	r3, #10
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	b25a      	sxtb	r2, r3
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 8004794:	f04f 0200 	mov.w	r2, #0
 8004798:	4b49      	ldr	r3, [pc, #292]	; (80048c0 <parse_calib_data+0x2c4>)
 800479a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fb fe95 	bl	80004d4 <__aeabi_i2d>
 80047aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047ae:	f7fc f825 	bl	80007fc <__aeabi_ddiv>
 80047b2:	4602      	mov	r2, r0
 80047b4:	460b      	mov	r3, r1
 80047b6:	6939      	ldr	r1, [r7, #16]
 80047b8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	330c      	adds	r3, #12
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	021b      	lsls	r3, r3, #8
 80047c4:	b21a      	sxth	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	330b      	adds	r3, #11
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	b21b      	sxth	r3, r3
 80047ce:	4313      	orrs	r3, r2
 80047d0:	b21b      	sxth	r3, r3
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80047e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	899b      	ldrh	r3, [r3, #12]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fb fe63 	bl	80004b4 <__aeabi_ui2d>
 80047ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047f2:	f7fc f803 	bl	80007fc <__aeabi_ddiv>
 80047f6:	4602      	mov	r2, r0
 80047f8:	460b      	mov	r3, r1
 80047fa:	6939      	ldr	r1, [r7, #16]
 80047fc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	330e      	adds	r3, #14
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	021b      	lsls	r3, r3, #8
 8004808:	b21a      	sxth	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	330d      	adds	r3, #13
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	b21b      	sxth	r3, r3
 8004812:	4313      	orrs	r3, r2
 8004814:	b21b      	sxth	r3, r3
 8004816:	b29a      	uxth	r2, r3
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 800481c:	f04f 0200 	mov.w	r2, #0
 8004820:	4b28      	ldr	r3, [pc, #160]	; (80048c4 <parse_calib_data+0x2c8>)
 8004822:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	89db      	ldrh	r3, [r3, #14]
 800482a:	4618      	mov	r0, r3
 800482c:	f7fb fe42 	bl	80004b4 <__aeabi_ui2d>
 8004830:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004834:	f7fb ffe2 	bl	80007fc <__aeabi_ddiv>
 8004838:	4602      	mov	r2, r0
 800483a:	460b      	mov	r3, r1
 800483c:	6939      	ldr	r1, [r7, #16]
 800483e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	330f      	adds	r3, #15
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	b25a      	sxtb	r2, r3
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	4b1d      	ldr	r3, [pc, #116]	; (80048c8 <parse_calib_data+0x2cc>)
 8004854:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800485e:	4618      	mov	r0, r3
 8004860:	f7fb fe38 	bl	80004d4 <__aeabi_i2d>
 8004864:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004868:	f7fb ffc8 	bl	80007fc <__aeabi_ddiv>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	6939      	ldr	r1, [r7, #16]
 8004872:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	3310      	adds	r3, #16
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	b25a      	sxtb	r2, r3
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 8004882:	f04f 0200 	mov.w	r2, #0
 8004886:	4b11      	ldr	r3, [pc, #68]	; (80048cc <parse_calib_data+0x2d0>)
 8004888:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8004892:	4618      	mov	r0, r3
 8004894:	f7fb fe1e 	bl	80004d4 <__aeabi_i2d>
 8004898:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800489c:	f7fb ffae 	bl	80007fc <__aeabi_ddiv>
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	6939      	ldr	r1, [r7, #16]
 80048a6:	e013      	b.n	80048d0 <parse_calib_data+0x2d4>
 80048a8:	3f700000 	.word	0x3f700000
 80048ac:	41d00000 	.word	0x41d00000
 80048b0:	42f00000 	.word	0x42f00000
 80048b4:	41300000 	.word	0x41300000
 80048b8:	41c00000 	.word	0x41c00000
 80048bc:	41f00000 	.word	0x41f00000
 80048c0:	42400000 	.word	0x42400000
 80048c4:	40500000 	.word	0x40500000
 80048c8:	40700000 	.word	0x40700000
 80048cc:	40e00000 	.word	0x40e00000
 80048d0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	3312      	adds	r3, #18
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	021b      	lsls	r3, r3, #8
 80048dc:	b21a      	sxth	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3311      	adds	r3, #17
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	b21b      	sxth	r3, r3
 80048e6:	4313      	orrs	r3, r2
 80048e8:	b21a      	sxth	r2, r3
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	4b25      	ldr	r3, [pc, #148]	; (8004988 <parse_calib_data+0x38c>)
 80048f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fb fde8 	bl	80004d4 <__aeabi_i2d>
 8004904:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004908:	f7fb ff78 	bl	80007fc <__aeabi_ddiv>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	6939      	ldr	r1, [r7, #16]
 8004912:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3313      	adds	r3, #19
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	b25a      	sxtb	r2, r3
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 8004922:	f04f 0200 	mov.w	r2, #0
 8004926:	4b18      	ldr	r3, [pc, #96]	; (8004988 <parse_calib_data+0x38c>)
 8004928:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8004932:	4618      	mov	r0, r3
 8004934:	f7fb fdce 	bl	80004d4 <__aeabi_i2d>
 8004938:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800493c:	f7fb ff5e 	bl	80007fc <__aeabi_ddiv>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	6939      	ldr	r1, [r7, #16]
 8004946:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3314      	adds	r3, #20
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	b25a      	sxtb	r2, r3
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 800495e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8004968:	4618      	mov	r0, r3
 800496a:	f7fb fdb3 	bl	80004d4 <__aeabi_i2d>
 800496e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004972:	f7fb ff43 	bl	80007fc <__aeabi_ddiv>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	6939      	ldr	r1, [r7, #16]
 800497c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 8004980:	bf00      	nop
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	42f00000 	.word	0x42f00000

0800498c <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 * for e.g. returns temperature 24.26 deg Celsius
 */
static double compensate_temperature(const struct bmp3_uncomp_data *uncomp_data, struct bmp3_calib_data *calib_data)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b088      	sub	sp, #32
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
    uint32_t uncomp_temp = uncomp_data->temperature;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	61fb      	str	r3, [r7, #28]
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 800499c:	69f8      	ldr	r0, [r7, #28]
 800499e:	f7fb fd89 	bl	80004b4 <__aeabi_ui2d>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a8:	f7fb fc46 	bl	8000238 <__aeabi_dsub>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80049ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80049be:	f7fb fdf3 	bl	80005a8 <__aeabi_dmul>
 80049c2:	4602      	mov	r2, r0
 80049c4:	460b      	mov	r3, r1
 80049c6:	e9c7 2302 	strd	r2, r3, [r7, #8]

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 80049ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80049ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80049d2:	f7fb fde9 	bl	80005a8 <__aeabi_dmul>
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	4610      	mov	r0, r2
 80049dc:	4619      	mov	r1, r3
                                             calib_data->quantized_calib_data.par_t3;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 80049e4:	f7fb fde0 	bl	80005a8 <__aeabi_dmul>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4610      	mov	r0, r2
 80049ee:	4619      	mov	r1, r3
 80049f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049f4:	f7fb fc22 	bl	800023c <__adddf3>
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	6839      	ldr	r1, [r7, #0]
 80049fe:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

    /* Returns compensated temperature */
    return calib_data->quantized_calib_data.t_lin;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
}
 8004a08:	4610      	mov	r0, r2
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	3720      	adds	r7, #32
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 * For e.g. returns pressure in Pascal p = 95305.295 which is 953.05295 hecto pascal
 */
static double compensate_pressure(const struct bmp3_uncomp_data *uncomp_data, const struct bmp3_calib_data *calib_data)
{
 8004a12:	b5b0      	push	{r4, r5, r7, lr}
 8004a14:	b092      	sub	sp, #72	; 0x48
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	6039      	str	r1, [r7, #0]
    const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	647b      	str	r3, [r7, #68]	; 0x44
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 8004a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a22:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8004a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a28:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004a2c:	f7fb fdbc 	bl	80005a8 <__aeabi_dmul>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 8004a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a3a:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8004a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a40:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8004a44:	2202      	movs	r2, #2
 8004a46:	f000 f901 	bl	8004c4c <pow_bmp3>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fb fd53 	bl	80004f8 <__aeabi_f2d>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4620      	mov	r0, r4
 8004a58:	4629      	mov	r1, r5
 8004a5a:	f7fb fda5 	bl	80005a8 <__aeabi_dmul>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	460b      	mov	r3, r1
 8004a62:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 8004a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a68:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8004a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a6e:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8004a72:	2203      	movs	r2, #3
 8004a74:	f000 f8ea 	bl	8004c4c <pow_bmp3>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fb fd3c 	bl	80004f8 <__aeabi_f2d>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4620      	mov	r0, r4
 8004a86:	4629      	mov	r1, r5
 8004a88:	f7fb fd8e 	bl	80005a8 <__aeabi_dmul>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 8004a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a96:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004a9a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a9e:	f7fb fbcd 	bl	800023c <__adddf3>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	4610      	mov	r0, r2
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004aae:	f7fb fbc5 	bl	800023c <__adddf3>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004aba:	f7fb fbbf 	bl	800023c <__adddf3>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 8004ac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ac8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ace:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004ad2:	f7fb fd69 	bl	80005a8 <__aeabi_dmul>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 8004ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ae0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8004ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ae6:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8004aea:	2202      	movs	r2, #2
 8004aec:	f000 f8ae 	bl	8004c4c <pow_bmp3>
 8004af0:	4603      	mov	r3, r0
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fb fd00 	bl	80004f8 <__aeabi_f2d>
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	4620      	mov	r0, r4
 8004afe:	4629      	mov	r1, r5
 8004b00:	f7fb fd52 	bl	80005a8 <__aeabi_dmul>
 8004b04:	4602      	mov	r2, r0
 8004b06:	460b      	mov	r3, r1
 8004b08:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 8004b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b0e:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8004b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b14:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8004b18:	2203      	movs	r2, #3
 8004b1a:	f000 f897 	bl	8004c4c <pow_bmp3>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7fb fce9 	bl	80004f8 <__aeabi_f2d>
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	4629      	mov	r1, r5
 8004b2e:	f7fb fd3b 	bl	80005a8 <__aeabi_dmul>
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out2 = uncomp_data->pressure *
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fb fcb8 	bl	80004b4 <__aeabi_ui2d>
 8004b44:	4604      	mov	r4, r0
 8004b46:	460d      	mov	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 8004b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b4a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004b4e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b52:	f7fb fb73 	bl	800023c <__adddf3>
 8004b56:	4602      	mov	r2, r0
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4610      	mov	r0, r2
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b62:	f7fb fb6b 	bl	800023c <__adddf3>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b72:	f7fb fb63 	bl	800023c <__adddf3>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
    partial_out2 = uncomp_data->pressure *
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	4629      	mov	r1, r5
 8004b7e:	f7fb fd13 	bl	80005a8 <__aeabi_dmul>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fb fc90 	bl	80004b4 <__aeabi_ui2d>
 8004b94:	2202      	movs	r2, #2
 8004b96:	f000 f859 	bl	8004c4c <pow_bmp3>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fb fcab 	bl	80004f8 <__aeabi_f2d>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 8004baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bac:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8004bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bb2:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8004bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bb8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004bbc:	f7fb fcf4 	bl	80005a8 <__aeabi_dmul>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	f7fb fb38 	bl	800023c <__adddf3>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = partial_data1 * partial_data2;
 8004bd4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004bd8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004bdc:	f7fb fce4 	bl	80005a8 <__aeabi_dmul>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fb fc61 	bl	80004b4 <__aeabi_ui2d>
 8004bf2:	2203      	movs	r2, #3
 8004bf4:	f000 f82a 	bl	8004c4c <pow_bmp3>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fb fc7c 	bl	80004f8 <__aeabi_f2d>
 8004c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c02:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004c06:	f7fb fccf 	bl	80005a8 <__aeabi_dmul>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004c12:	f7fb fb13 	bl	800023c <__adddf3>
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    comp_press = partial_out1 + partial_out2 + partial_data4;
 8004c1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c22:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004c26:	f7fb fb09 	bl	800023c <__adddf3>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004c32:	f7fb fb03 	bl	800023c <__adddf3>
 8004c36:	4602      	mov	r2, r0
 8004c38:	460b      	mov	r3, r1
 8004c3a:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return comp_press;
 8004c3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8004c42:	4610      	mov	r0, r2
 8004c44:	4619      	mov	r1, r3
 8004c46:	3748      	adds	r7, #72	; 0x48
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bdb0      	pop	{r4, r5, r7, pc}

08004c4c <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004c56:	4613      	mov	r3, r2
 8004c58:	71fb      	strb	r3, [r7, #7]
    float pow_output = 1;
 8004c5a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004c5e:	617b      	str	r3, [r7, #20]

    while (power != 0)
 8004c60:	e00d      	b.n	8004c7e <pow_bmp3+0x32>
    {
        pow_output = (float) base * pow_output;
 8004c62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c66:	f7fb ff61 	bl	8000b2c <__aeabi_d2f>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	6978      	ldr	r0, [r7, #20]
 8004c70:	f7fc f8ba 	bl	8000de8 <__aeabi_fmul>
 8004c74:	4603      	mov	r3, r0
 8004c76:	617b      	str	r3, [r7, #20]
        power--;
 8004c78:	79fb      	ldrb	r3, [r7, #7]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	71fb      	strb	r3, [r7, #7]
    while (power != 0)
 8004c7e:	79fb      	ldrb	r3, [r7, #7]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1ee      	bne.n	8004c62 <pow_bmp3+0x16>
    }

    return pow_output;
 8004c84:	697b      	ldr	r3, [r7, #20]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b085      	sub	sp, #20
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	73fb      	strb	r3, [r7, #15]
 8004caa:	e001      	b.n	8004cb0 <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8004cac:	2300      	movs	r3, #0
 8004cae:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr

08004cbc <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00f      	beq.n	8004cea <null_ptr_check+0x2e>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00b      	beq.n	8004cea <null_ptr_check+0x2e>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d007      	beq.n	8004cea <null_ptr_check+0x2e>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d102      	bne.n	8004cf0 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 8004cea:	23ff      	movs	r3, #255	; 0xff
 8004cec:	73fb      	strb	r3, [r7, #15]
 8004cee:	e001      	b.n	8004cf4 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bc80      	pop	{r7}
 8004d00:	4770      	bx	lr
 8004d02:	0000      	movs	r0, r0
 8004d04:	0000      	movs	r0, r0
	...

08004d08 <_ZN6BMP390C1Ev>:
static int8_t bmp390_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr);
static int8_t bmp390_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr);
static int8_t validate_trimming_param(struct bmp3_dev *dev);
static int8_t cal_crc(uint8_t seed, uint8_t data);

BMP390::BMP390() {
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  _meas_end = 0;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  _filterEnabled = _tempOSEnabled = _presOSEnabled = false;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 20e2 	ldrb.w	r2, [r3, #226]	; 0xe2
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
  temperature = -999;
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	a313      	add	r3, pc, #76	; (adr r3, 8004d88 <_ZN6BMP390C1Ev+0x80>)
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	e9c1 2300 	strd	r2, r3, [r1]
  pressure = -999;
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	a310      	add	r3, pc, #64	; (adr r3, 8004d88 <_ZN6BMP390C1Ev+0x80>)
 8004d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4c:	e9c1 2302 	strd	r2, r3, [r1, #8]

  the_sensor.chip_id = BMP390_I2C_ADDRESS;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	22ee      	movs	r2, #238	; 0xee
 8004d54:	741a      	strb	r2, [r3, #16]
  the_sensor.intf = BMP3_I2C_INTF;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	761a      	strb	r2, [r3, #24]
  the_sensor.read = &bmp390_i2c_read;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a0c      	ldr	r2, [pc, #48]	; (8004d90 <_ZN6BMP390C1Ev+0x88>)
 8004d60:	61da      	str	r2, [r3, #28]
  the_sensor.write = &bmp390_i2c_write;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a0b      	ldr	r2, [pc, #44]	; (8004d94 <_ZN6BMP390C1Ev+0x8c>)
 8004d66:	621a      	str	r2, [r3, #32]
  the_sensor.intf_ptr = (void *)NULL;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	615a      	str	r2, [r3, #20]
  the_sensor.dummy_byte = 0;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	769a      	strb	r2, [r3, #26]
  the_sensor.delay_us = &delay_usec;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a08      	ldr	r2, [pc, #32]	; (8004d98 <_ZN6BMP390C1Ev+0x90>)
 8004d78:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bc80      	pop	{r7}
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	00000000 	.word	0x00000000
 8004d8c:	c08f3800 	.word	0xc08f3800
 8004d90:	080050ef 	.word	0x080050ef
 8004d94:	0800509d 	.word	0x0800509d
 8004d98:	08004f79 	.word	0x08004f79

08004d9c <_ZN6BMP3904initEP19__I2C_HandleTypeDef>:

bool BMP390::init(I2C_HandleTypeDef *pntr_hi2c){
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
	the_sensor.intf_ptr = (void *)pntr_hi2c;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	615a      	str	r2, [r3, #20]

	int8_t rslt = BMP3_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	73fb      	strb	r3, [r7, #15]
	/* Reset the sensor */
	rslt = bmp3_soft_reset(&the_sensor);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	3310      	adds	r3, #16
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7fe fe57 	bl	8003a68 <bmp3_soft_reset>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMP3_OK) { return false; }
 8004dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <_ZN6BMP3904initEP19__I2C_HandleTypeDef+0x2e>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	e028      	b.n	8004e1c <_ZN6BMP3904initEP19__I2C_HandleTypeDef+0x80>

	rslt = bmp3_init(&the_sensor);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	3310      	adds	r3, #16
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fe fc88 	bl	80036e4 <bmp3_init>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	73fb      	strb	r3, [r7, #15]
	rslt = validate_trimming_param(&the_sensor);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3310      	adds	r3, #16
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 f9af 	bl	8005140 <_ZL23validate_trimming_paramP8bmp3_dev>
 8004de2:	4603      	mov	r3, r0
 8004de4:	73fb      	strb	r3, [r7, #15]

	if (rslt != BMP3_OK) { return false; }
 8004de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <_ZN6BMP3904initEP19__I2C_HandleTypeDef+0x56>
 8004dee:	2300      	movs	r3, #0
 8004df0:	e014      	b.n	8004e1c <_ZN6BMP3904initEP19__I2C_HandleTypeDef+0x80>

	setTemperatureOversampling(BMP3_NO_OVERSAMPLING);
 8004df2:	2100      	movs	r1, #0
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f8d5 	bl	8004fa4 <_ZN6BMP39026setTemperatureOversamplingEh>
	setPressureOversampling(BMP3_NO_OVERSAMPLING);
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f8f2 	bl	8004fe6 <_ZN6BMP39023setPressureOversamplingEh>
	setIIRFilterCoeff(BMP3_IIR_FILTER_DISABLE);
 8004e02:	2100      	movs	r1, #0
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f90f 	bl	8005028 <_ZN6BMP39017setIIRFilterCoeffEh>
	setOutputDataRate(BMP3_ODR_25_HZ);
 8004e0a:	2103      	movs	r1, #3
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f92c 	bl	800506a <_ZN6BMP39017setOutputDataRateEh>

	// don't do anything till we request a reading
	the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

	return true;
 8004e1a:	2301      	movs	r3, #1
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3710      	adds	r7, #16
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <_ZN6BMP39015readTemperatureEv>:

float BMP390::readTemperature(void) {
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  performReading();
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f81f 	bl	8004e70 <_ZN6BMP39014performReadingEv>
  return temperature;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e38:	4610      	mov	r0, r2
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	f7fb fe76 	bl	8000b2c <__aeabi_d2f>
 8004e40:	4603      	mov	r3, r0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <_ZN6BMP39012readPressureEv>:

float BMP390::readPressure(void) {
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b082      	sub	sp, #8
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  performReading();
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f80c 	bl	8004e70 <_ZN6BMP39014performReadingEv>
  return pressure;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004e5e:	4610      	mov	r0, r2
 8004e60:	4619      	mov	r1, r3
 8004e62:	f7fb fe63 	bl	8000b2c <__aeabi_d2f>
 8004e66:	4603      	mov	r3, r0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <_ZN6BMP39014performReadingEv>:

  float atmospheric = readPressure() / 100.0F; //convert to units of hPa
  return 44330.0 * (1.0 - std::pow(atmospheric / seaLevel, 0.1903));
}

bool BMP390::performReading(void) {
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  /* Used to select the settings user needs to change */
  uint16_t settings_sel = 0;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	83fb      	strh	r3, [r7, #30]
  /* Variable used to select the sensor component */
  uint8_t sensor_comp = 0;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	777b      	strb	r3, [r7, #29]

  /* Select the pressure and temperature sensor to be enabled */
  the_sensor.settings.temp_en = BMP3_ENABLE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
  settings_sel |= BMP3_SEL_TEMP_EN;
 8004e88:	8bfb      	ldrh	r3, [r7, #30]
 8004e8a:	f043 0304 	orr.w	r3, r3, #4
 8004e8e:	83fb      	strh	r3, [r7, #30]
  sensor_comp |= BMP3_TEMP;
 8004e90:	7f7b      	ldrb	r3, [r7, #29]
 8004e92:	f043 0302 	orr.w	r3, r3, #2
 8004e96:	777b      	strb	r3, [r7, #29]
  if (_tempOSEnabled) {
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <_ZN6BMP39014performReadingEv+0x3a>
    settings_sel |= BMP3_SEL_TEMP_OS;
 8004ea2:	8bfb      	ldrh	r3, [r7, #30]
 8004ea4:	f043 0320 	orr.w	r3, r3, #32
 8004ea8:	83fb      	strh	r3, [r7, #30]
  }

  the_sensor.settings.press_en = BMP3_ENABLE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
  settings_sel |= BMP3_SEL_PRESS_EN;
 8004eb2:	8bfb      	ldrh	r3, [r7, #30]
 8004eb4:	f043 0302 	orr.w	r3, r3, #2
 8004eb8:	83fb      	strh	r3, [r7, #30]
  sensor_comp |= BMP3_PRESS;
 8004eba:	7f7b      	ldrb	r3, [r7, #29]
 8004ebc:	f043 0301 	orr.w	r3, r3, #1
 8004ec0:	777b      	strb	r3, [r7, #29]
  if (_presOSEnabled) {
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <_ZN6BMP39014performReadingEv+0x64>
    settings_sel |= BMP3_SEL_PRESS_OS;
 8004ecc:	8bfb      	ldrh	r3, [r7, #30]
 8004ece:	f043 0310 	orr.w	r3, r3, #16
 8004ed2:	83fb      	strh	r3, [r7, #30]
  }

  if (_filterEnabled) {
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <_ZN6BMP39014performReadingEv+0x76>
    settings_sel |= BMP3_SEL_IIR_FILTER;
 8004ede:	8bfb      	ldrh	r3, [r7, #30]
 8004ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ee4:	83fb      	strh	r3, [r7, #30]
  }

  if (_ODREnabled) {
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d003      	beq.n	8004ef8 <_ZN6BMP39014performReadingEv+0x88>
    settings_sel |= BMP3_SEL_ODR;
 8004ef0:	8bfb      	ldrh	r3, [r7, #30]
 8004ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ef6:	83fb      	strh	r3, [r7, #30]

  // set interrupt to data ready
  // settings_sel |= BMP3_DRDY_EN_SEL | BMP3_LEVEL_SEL | BMP3_LATCH_SEL;

  /* Set the desired sensor configuration */
  rslt = bmp3_set_sensor_settings(settings_sel, &the_sensor);
 8004ef8:	8bfa      	ldrh	r2, [r7, #30]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	3310      	adds	r3, #16
 8004efe:	4619      	mov	r1, r3
 8004f00:	4610      	mov	r0, r2
 8004f02:	f7fe fd5b 	bl	80039bc <bmp3_set_sensor_settings>
 8004f06:	4603      	mov	r3, r0
 8004f08:	773b      	strb	r3, [r7, #28]

  if (rslt != BMP3_OK)
 8004f0a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <_ZN6BMP39014performReadingEv+0xa6>
    return false;
 8004f12:	2300      	movs	r3, #0
 8004f14:	e02c      	b.n	8004f70 <_ZN6BMP39014performReadingEv+0x100>

  /* Set the power mode */
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
  rslt = bmp3_set_op_mode(&the_sensor);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3310      	adds	r3, #16
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fe fdf8 	bl	8003b18 <bmp3_set_op_mode>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	773b      	strb	r3, [r7, #28]
  if (rslt != BMP3_OK)
 8004f2c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <_ZN6BMP39014performReadingEv+0xc8>
    return false;
 8004f34:	2300      	movs	r3, #0
 8004f36:	e01b      	b.n	8004f70 <_ZN6BMP39014performReadingEv+0x100>

  /* Variable used to store the compensated data */
  struct bmp3_data data;

  /* Temperature and Pressure data are read and stored in the bmp3_data instance */
  rslt = bmp3_get_sensor_data(sensor_comp, &data, &the_sensor);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f103 0210 	add.w	r2, r3, #16
 8004f3e:	f107 0108 	add.w	r1, r7, #8
 8004f42:	7f7b      	ldrb	r3, [r7, #29]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7fe fe56 	bl	8003bf6 <bmp3_get_sensor_data>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	773b      	strb	r3, [r7, #28]
  if (rslt != BMP3_OK)
 8004f4e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <_ZN6BMP39014performReadingEv+0xea>
    return false;
 8004f56:	2300      	movs	r3, #0
 8004f58:	e00a      	b.n	8004f70 <_ZN6BMP39014performReadingEv+0x100>


  /* Save the temperature and pressure data */
  temperature = data.temperature;
 8004f5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f5e:	6879      	ldr	r1, [r7, #4]
 8004f60:	e9c1 2300 	strd	r2, r3, [r1]
  pressure = data.pressure;
 8004f64:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	e9c1 2302 	strd	r2, r3, [r1, #8]

  return true;
 8004f6e:	2301      	movs	r3, #1
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3720      	adds	r7, #32
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <_ZL10delay_usecmPv>:

// Our hardware interface functions
static void delay_usec(uint32_t us, void *intf_ptr){
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
	uint8_t ms = us/1000;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a06      	ldr	r2, [pc, #24]	; (8004fa0 <_ZL10delay_usecmPv+0x28>)
 8004f86:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8a:	099b      	lsrs	r3, r3, #6
 8004f8c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(ms);
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7fd fc81 	bl	8002898 <HAL_Delay>
}
 8004f96:	bf00      	nop
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	10624dd3 	.word	0x10624dd3

08004fa4 <_ZN6BMP39026setTemperatureOversamplingEh>:

bool BMP390::setTemperatureOversampling(uint8_t oversample) {
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	70fb      	strb	r3, [r7, #3]
  if (oversample > BMP3_OVERSAMPLING_32X)
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	2b05      	cmp	r3, #5
 8004fb4:	d901      	bls.n	8004fba <_ZN6BMP39026setTemperatureOversamplingEh+0x16>
    return false;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	e010      	b.n	8004fdc <_ZN6BMP39026setTemperatureOversamplingEh+0x38>

  the_sensor.settings.odr_filter.temp_os = oversample;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	78fa      	ldrb	r2, [r7, #3]
 8004fbe:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

  if (oversample == BMP3_NO_OVERSAMPLING)
 8004fc2:	78fb      	ldrb	r3, [r7, #3]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d104      	bne.n	8004fd2 <_ZN6BMP39026setTemperatureOversamplingEh+0x2e>
    _tempOSEnabled = false;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8004fd0:	e003      	b.n	8004fda <_ZN6BMP39026setTemperatureOversamplingEh+0x36>
  else
    _tempOSEnabled = true;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1

  return true;
 8004fda:	2301      	movs	r3, #1
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bc80      	pop	{r7}
 8004fe4:	4770      	bx	lr

08004fe6 <_ZN6BMP39023setPressureOversamplingEh>:
   BMP3_OVERSAMPLING_2X, BMP3_OVERSAMPLING_4X, BMP3_OVERSAMPLING_8X,
   BMP3_OVERSAMPLING_16X, BMP3_OVERSAMPLING_32X
    @return True on success, False on failure
*/
/**************************************************************************/
bool BMP390::setPressureOversampling(uint8_t oversample) {
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	460b      	mov	r3, r1
 8004ff0:	70fb      	strb	r3, [r7, #3]
  if (oversample > BMP3_OVERSAMPLING_32X)
 8004ff2:	78fb      	ldrb	r3, [r7, #3]
 8004ff4:	2b05      	cmp	r3, #5
 8004ff6:	d901      	bls.n	8004ffc <_ZN6BMP39023setPressureOversamplingEh+0x16>
    return false;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	e010      	b.n	800501e <_ZN6BMP39023setPressureOversamplingEh+0x38>

  the_sensor.settings.odr_filter.press_os = oversample;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	78fa      	ldrb	r2, [r7, #3]
 8005000:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

  if (oversample == BMP3_NO_OVERSAMPLING)
 8005004:	78fb      	ldrb	r3, [r7, #3]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d104      	bne.n	8005014 <_ZN6BMP39023setPressureOversamplingEh+0x2e>
    _presOSEnabled = false;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8005012:	e003      	b.n	800501c <_ZN6BMP39023setPressureOversamplingEh+0x36>
  else
    _presOSEnabled = true;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2

  return true;
 800501c:	2301      	movs	r3, #1
}
 800501e:	4618      	mov	r0, r3
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	bc80      	pop	{r7}
 8005026:	4770      	bx	lr

08005028 <_ZN6BMP39017setIIRFilterCoeffEh>:
   BMP3_IIR_FILTER_COEFF_31, BMP3_IIR_FILTER_COEFF_63, BMP3_IIR_FILTER_COEFF_127
    @return True on success, False on failure

*/
/**************************************************************************/
bool BMP390::setIIRFilterCoeff(uint8_t filtercoeff) {
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	460b      	mov	r3, r1
 8005032:	70fb      	strb	r3, [r7, #3]
  if (filtercoeff > BMP3_IIR_FILTER_COEFF_127)
 8005034:	78fb      	ldrb	r3, [r7, #3]
 8005036:	2b07      	cmp	r3, #7
 8005038:	d901      	bls.n	800503e <_ZN6BMP39017setIIRFilterCoeffEh+0x16>
    return false;
 800503a:	2300      	movs	r3, #0
 800503c:	e010      	b.n	8005060 <_ZN6BMP39017setIIRFilterCoeffEh+0x38>

  the_sensor.settings.odr_filter.iir_filter = filtercoeff;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	78fa      	ldrb	r2, [r7, #3]
 8005042:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

  if (filtercoeff == BMP3_IIR_FILTER_DISABLE)
 8005046:	78fb      	ldrb	r3, [r7, #3]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d104      	bne.n	8005056 <_ZN6BMP39017setIIRFilterCoeffEh+0x2e>
    _filterEnabled = false;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 8005054:	e003      	b.n	800505e <_ZN6BMP39017setIIRFilterCoeffEh+0x36>
  else
    _filterEnabled = true;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0

  return true;
 800505e:	2301      	movs	r3, #1
}
 8005060:	4618      	mov	r0, r3
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	bc80      	pop	{r7}
 8005068:	4770      	bx	lr

0800506a <_ZN6BMP39017setOutputDataRateEh>:
   BMP3_ODR_0_01_HZ, BMP3_ODR_0_006_HZ, BMP3_ODR_0_003_HZ, or BMP3_ODR_0_001_HZ
    @return True on success, False on failure

*/
/**************************************************************************/
bool BMP390::setOutputDataRate(uint8_t odr) {
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	460b      	mov	r3, r1
 8005074:	70fb      	strb	r3, [r7, #3]
  if (odr > BMP3_ODR_0_001_HZ)
 8005076:	78fb      	ldrb	r3, [r7, #3]
 8005078:	2b11      	cmp	r3, #17
 800507a:	d901      	bls.n	8005080 <_ZN6BMP39017setOutputDataRateEh+0x16>
    return false;
 800507c:	2300      	movs	r3, #0
 800507e:	e008      	b.n	8005092 <_ZN6BMP39017setOutputDataRateEh+0x28>

  the_sensor.settings.odr_filter.odr = odr;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	78fa      	ldrb	r2, [r7, #3]
 8005084:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6

  _ODREnabled = true;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3

  return true;
 8005090:	2301      	movs	r3, #1
}
 8005092:	4618      	mov	r0, r3
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	bc80      	pop	{r7}
 800509a:	4770      	bx	lr

0800509c <_ZL16bmp390_i2c_writehPKhmPv>:

static int8_t bmp390_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr){
 800509c:	b580      	push	{r7, lr}
 800509e:	b08a      	sub	sp, #40	; 0x28
 80050a0:	af04      	add	r7, sp, #16
 80050a2:	60b9      	str	r1, [r7, #8]
 80050a4:	607a      	str	r2, [r7, #4]
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	4603      	mov	r3, r0
 80050aa:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	617b      	str	r3, [r7, #20]
	if (HAL_I2C_Mem_Write(hi2c, BMP390_I2C_ADDRESS, reg_addr, I2C_MEMADD_SIZE_8BIT, (uint8_t *)reg_data, len, HAL_MAX_DELAY) != HAL_OK) {
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80050bc:	9102      	str	r1, [sp, #8]
 80050be:	9301      	str	r3, [sp, #4]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	2301      	movs	r3, #1
 80050c6:	21ee      	movs	r1, #238	; 0xee
 80050c8:	6978      	ldr	r0, [r7, #20]
 80050ca:	f002 fec1 	bl	8007e50 <HAL_I2C_Mem_Write>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	bf14      	ite	ne
 80050d4:	2301      	movne	r3, #1
 80050d6:	2300      	moveq	r3, #0
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d002      	beq.n	80050e4 <_ZL16bmp390_i2c_writehPKhmPv+0x48>
		// Error handling: You can handle write errors here
		return -1;
 80050de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050e2:	e000      	b.n	80050e6 <_ZL16bmp390_i2c_writehPKhmPv+0x4a>
	}
	return 0;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <_ZL15bmp390_i2c_readhPhmPv>:

static int8_t bmp390_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr){
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b08a      	sub	sp, #40	; 0x28
 80050f2:	af04      	add	r7, sp, #16
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	603b      	str	r3, [r7, #0]
 80050fa:	4603      	mov	r3, r0
 80050fc:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	617b      	str	r3, [r7, #20]
	if (HAL_I2C_Mem_Read(hi2c, BMP390_I2C_ADDRESS, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, len, HAL_MAX_DELAY) != HAL_OK) {
 8005102:	7bfb      	ldrb	r3, [r7, #15]
 8005104:	b29a      	uxth	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	b29b      	uxth	r3, r3
 800510a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800510e:	9102      	str	r1, [sp, #8]
 8005110:	9301      	str	r3, [sp, #4]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	2301      	movs	r3, #1
 8005118:	21ee      	movs	r1, #238	; 0xee
 800511a:	6978      	ldr	r0, [r7, #20]
 800511c:	f002 ffac 	bl	8008078 <HAL_I2C_Mem_Read>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	bf14      	ite	ne
 8005126:	2301      	movne	r3, #1
 8005128:	2300      	moveq	r3, #0
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <_ZL15bmp390_i2c_readhPhmPv+0x48>
		// Error handling: You can handle write errors here
		return -1;
 8005130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005134:	e000      	b.n	8005138 <_ZL15bmp390_i2c_readhPhmPv+0x4a>
	}
	return 0;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3718      	adds	r7, #24
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <_ZL23validate_trimming_paramP8bmp3_dev>:

static int8_t validate_trimming_param(struct bmp3_dev *dev) {
 8005140:	b580      	push	{r7, lr}
 8005142:	b08a      	sub	sp, #40	; 0x28
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint8_t crc = 0xFF;
 8005148:	23ff      	movs	r3, #255	; 0xff
 800514a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t stored_crc;
  uint8_t trim_param[21];
  uint8_t i;

  rslt = bmp3_get_regs(BMP3_REG_CALIB_DATA, trim_param, 21, dev);
 800514e:	f107 010c 	add.w	r1, r7, #12
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2215      	movs	r2, #21
 8005156:	2031      	movs	r0, #49	; 0x31
 8005158:	f7fe fb0b 	bl	8003772 <bmp3_get_regs>
 800515c:	4603      	mov	r3, r0
 800515e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (rslt == BMP3_OK) {
 8005162:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005166:	2b00      	cmp	r3, #0
 8005168:	d133      	bne.n	80051d2 <_ZL23validate_trimming_paramP8bmp3_dev+0x92>
    for (i = 0; i < 21; i++) {
 800516a:	2300      	movs	r3, #0
 800516c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8005170:	e013      	b.n	800519a <_ZL23validate_trimming_paramP8bmp3_dev+0x5a>
      crc = (uint8_t)cal_crc(crc, trim_param[i]);
 8005172:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005176:	3328      	adds	r3, #40	; 0x28
 8005178:	443b      	add	r3, r7
 800517a:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 800517e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005182:	4611      	mov	r1, r2
 8005184:	4618      	mov	r0, r3
 8005186:	f000 f82a 	bl	80051de <_ZL7cal_crchh>
 800518a:	4603      	mov	r3, r0
 800518c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (i = 0; i < 21; i++) {
 8005190:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005194:	3301      	adds	r3, #1
 8005196:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800519a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800519e:	2b14      	cmp	r3, #20
 80051a0:	d9e7      	bls.n	8005172 <_ZL23validate_trimming_paramP8bmp3_dev+0x32>
    }

    crc = (crc ^ 0xFF);
 80051a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80051a6:	43db      	mvns	r3, r3
 80051a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    rslt = bmp3_get_regs(0x30, &stored_crc, 1, dev);
 80051ac:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	2030      	movs	r0, #48	; 0x30
 80051b6:	f7fe fadc 	bl	8003772 <bmp3_get_regs>
 80051ba:	4603      	mov	r3, r0
 80051bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (stored_crc != crc) {
 80051c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80051c4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d002      	beq.n	80051d2 <_ZL23validate_trimming_paramP8bmp3_dev+0x92>
      rslt = -1;
 80051cc:	23ff      	movs	r3, #255	; 0xff
 80051ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  return rslt;
 80051d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3728      	adds	r7, #40	; 0x28
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <_ZL7cal_crchh>:

/*
 * @brief function to calculate CRC for the trimming parameters
 * */
static int8_t cal_crc(uint8_t seed, uint8_t data) {
 80051de:	b480      	push	{r7}
 80051e0:	b085      	sub	sp, #20
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	4603      	mov	r3, r0
 80051e6:	460a      	mov	r2, r1
 80051e8:	71fb      	strb	r3, [r7, #7]
 80051ea:	4613      	mov	r3, r2
 80051ec:	71bb      	strb	r3, [r7, #6]
  int8_t poly = 0x1D;
 80051ee:	231d      	movs	r3, #29
 80051f0:	737b      	strb	r3, [r7, #13]
  int8_t var2;
  uint8_t i;

  for (i = 0; i < 8; i++) {
 80051f2:	2300      	movs	r3, #0
 80051f4:	73bb      	strb	r3, [r7, #14]
 80051f6:	e01c      	b.n	8005232 <_ZL7cal_crchh+0x54>
    if ((seed & 0x80) ^ (data & 0x80)) {
 80051f8:	79fa      	ldrb	r2, [r7, #7]
 80051fa:	79bb      	ldrb	r3, [r7, #6]
 80051fc:	4053      	eors	r3, r2
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	b25b      	sxtb	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	da02      	bge.n	800520c <_ZL7cal_crchh+0x2e>
      var2 = 1;
 8005206:	2301      	movs	r3, #1
 8005208:	73fb      	strb	r3, [r7, #15]
 800520a:	e001      	b.n	8005210 <_ZL7cal_crchh+0x32>
    } else {
      var2 = 0;
 800520c:	2300      	movs	r3, #0
 800520e:	73fb      	strb	r3, [r7, #15]
    }

    seed = (seed & 0x7F) << 1;
 8005210:	79fb      	ldrb	r3, [r7, #7]
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	71fb      	strb	r3, [r7, #7]
    data = (data & 0x7F) << 1;
 8005216:	79bb      	ldrb	r3, [r7, #6]
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	71bb      	strb	r3, [r7, #6]
    seed = seed ^ (uint8_t)(poly * var2);
 800521c:	7b7a      	ldrb	r2, [r7, #13]
 800521e:	7bfb      	ldrb	r3, [r7, #15]
 8005220:	fb12 f303 	smulbb	r3, r2, r3
 8005224:	b2da      	uxtb	r2, r3
 8005226:	79fb      	ldrb	r3, [r7, #7]
 8005228:	4053      	eors	r3, r2
 800522a:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 800522c:	7bbb      	ldrb	r3, [r7, #14]
 800522e:	3301      	adds	r3, #1
 8005230:	73bb      	strb	r3, [r7, #14]
 8005232:	7bbb      	ldrb	r3, [r7, #14]
 8005234:	2b07      	cmp	r3, #7
 8005236:	d9df      	bls.n	80051f8 <_ZL7cal_crchh+0x1a>
  }

  return (int8_t)seed;
 8005238:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	bc80      	pop	{r7}
 8005244:	4770      	bx	lr

08005246 <_ZN12LSM303_AccelC1Ev>:
#include <lsm303_accel.hpp>

LSM303_Accel::LSM303_Accel() {
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  pntr_hi2c = NULL;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]

  // Initialize the raw accel data
  data.x = 0;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	609a      	str	r2, [r3, #8]
  data.y = 0;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f04f 0200 	mov.w	r2, #0
 8005262:	60da      	str	r2, [r3, #12]
  data.z = 0;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f04f 0200 	mov.w	r2, #0
 800526a:	611a      	str	r2, [r3, #16]
}
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4618      	mov	r0, r3
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	bc80      	pop	{r7}
 8005276:	4770      	bx	lr

08005278 <_ZN12LSM303_Accel5writeEhPKhh>:

bool LSM303_Accel::write(const uint8_t reg_location, const uint8_t *data, const uint8_t len){
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af04      	add	r7, sp, #16
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	607a      	str	r2, [r7, #4]
 8005282:	461a      	mov	r2, r3
 8005284:	460b      	mov	r3, r1
 8005286:	72fb      	strb	r3, [r7, #11]
 8005288:	4613      	mov	r3, r2
 800528a:	72bb      	strb	r3, [r7, #10]
  if (HAL_I2C_Mem_Write((I2C_HandleTypeDef *) pntr_hi2c, LSM303_ADDRESS_ACCEL, reg_location, I2C_MEMADD_SIZE_8BIT, (uint8_t *)data, len, HAL_MAX_DELAY) != HAL_OK) {
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6818      	ldr	r0, [r3, #0]
 8005290:	7afb      	ldrb	r3, [r7, #11]
 8005292:	b29a      	uxth	r2, r3
 8005294:	7abb      	ldrb	r3, [r7, #10]
 8005296:	b29b      	uxth	r3, r3
 8005298:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800529c:	9102      	str	r1, [sp, #8]
 800529e:	9301      	str	r3, [sp, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	2301      	movs	r3, #1
 80052a6:	2132      	movs	r1, #50	; 0x32
 80052a8:	f002 fdd2 	bl	8007e50 <HAL_I2C_Mem_Write>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	bf14      	ite	ne
 80052b2:	2301      	movne	r3, #1
 80052b4:	2300      	moveq	r3, #0
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d007      	beq.n	80052cc <_ZN12LSM303_Accel5writeEhPKhh+0x54>
    // Error handling: You can handle write errors here
  	APP_LOG(TS_ON, VLEVEL_M,"Error writing \r\n");
 80052bc:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <_ZN12LSM303_Accel5writeEhPKhh+0x60>)
 80052be:	2201      	movs	r2, #1
 80052c0:	2100      	movs	r1, #0
 80052c2:	2002      	movs	r0, #2
 80052c4:	f01a fe6c 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
    return false;
 80052c8:	2300      	movs	r3, #0
 80052ca:	e000      	b.n	80052ce <_ZN12LSM303_Accel5writeEhPKhh+0x56>
  }
  return true;
 80052cc:	2301      	movs	r3, #1
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	08020f50 	.word	0x08020f50

080052dc <_ZN12LSM303_Accel4readEhPhh>:

bool LSM303_Accel::read(const uint8_t reg_location, uint8_t *data, const uint8_t len){
 80052dc:	b580      	push	{r7, lr}
 80052de:	b088      	sub	sp, #32
 80052e0:	af04      	add	r7, sp, #16
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	607a      	str	r2, [r7, #4]
 80052e6:	461a      	mov	r2, r3
 80052e8:	460b      	mov	r3, r1
 80052ea:	72fb      	strb	r3, [r7, #11]
 80052ec:	4613      	mov	r3, r2
 80052ee:	72bb      	strb	r3, [r7, #10]
  if (HAL_I2C_Mem_Read((I2C_HandleTypeDef *) pntr_hi2c, LSM303_ADDRESS_ACCEL, reg_location, I2C_MEMADD_SIZE_8BIT, (uint8_t *)data, len, HAL_MAX_DELAY) != HAL_OK) {
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6818      	ldr	r0, [r3, #0]
 80052f4:	7afb      	ldrb	r3, [r7, #11]
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	7abb      	ldrb	r3, [r7, #10]
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005300:	9102      	str	r1, [sp, #8]
 8005302:	9301      	str	r3, [sp, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	9300      	str	r3, [sp, #0]
 8005308:	2301      	movs	r3, #1
 800530a:	2132      	movs	r1, #50	; 0x32
 800530c:	f002 feb4 	bl	8008078 <HAL_I2C_Mem_Read>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	bf14      	ite	ne
 8005316:	2301      	movne	r3, #1
 8005318:	2300      	moveq	r3, #0
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <_ZN12LSM303_Accel4readEhPhh+0x48>
    // Error handling: You can handle write errors here
    return false;
 8005320:	2300      	movs	r3, #0
 8005322:	e000      	b.n	8005326 <_ZN12LSM303_Accel4readEhPhh+0x4a>
  }
  return true;
 8005324:	2301      	movs	r3, #1
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef>:

bool LSM303_Accel::init(I2C_HandleTypeDef *_pntr_hi2c) {
 800532e:	b580      	push	{r7, lr}
 8005330:	b084      	sub	sp, #16
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
 8005336:	6039      	str	r1, [r7, #0]
	pntr_hi2c = _pntr_hi2c;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	601a      	str	r2, [r3, #0]
  uint8_t len = 1;
 800533e:	2301      	movs	r3, #1
 8005340:	73fb      	strb	r3, [r7, #15]

  uint8_t reg_data = 0x57; // Enable the accelerometer (100Hz)
 8005342:	2357      	movs	r3, #87	; 0x57
 8005344:	73bb      	strb	r3, [r7, #14]
  if ( write(LSM303_REGISTER_ACCEL_CTRL_REG1_A, &reg_data, len) ){
 8005346:	7bfb      	ldrb	r3, [r7, #15]
 8005348:	f107 020e 	add.w	r2, r7, #14
 800534c:	2120      	movs	r1, #32
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7ff ff92 	bl	8005278 <_ZN12LSM303_Accel5writeEhPKhh>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00e      	beq.n	8005378 <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef+0x4a>
    if ( read(LSM303_REGISTER_ACCEL_WHO_AM_I, &reg_data, len) ) {
 800535a:	7bfb      	ldrb	r3, [r7, #15]
 800535c:	f107 020e 	add.w	r2, r7, #14
 8005360:	210f      	movs	r1, #15
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7ff ffba 	bl	80052dc <_ZN12LSM303_Accel4readEhPhh>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d004      	beq.n	8005378 <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef+0x4a>
      if (reg_data == 0x33) return true; //confirm that we are talking
 800536e:	7bbb      	ldrb	r3, [r7, #14]
 8005370:	2b33      	cmp	r3, #51	; 0x33
 8005372:	d101      	bne.n	8005378 <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef+0x4a>
 8005374:	2301      	movs	r3, #1
 8005376:	e000      	b.n	800537a <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef+0x4c>
    }
  }
  return false; //something went wrong
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <_ZN17EnvionmentSensorsC1Ev>:
#include <env_sensors.hpp>


//#define IGNORE_ENV_SENSORS

EnvionmentSensors::EnvionmentSensors(){ }
 8005382:	b580      	push	{r7, lr}
 8005384:	b082      	sub	sp, #8
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4618      	mov	r0, r3
 800538e:	f7ff ff5a 	bl	8005246 <_ZN12LSM303_AccelC1Ev>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	3318      	adds	r3, #24
 8005396:	4618      	mov	r0, r3
 8005398:	f7ff fcb6 	bl	8004d08 <_ZN6BMP390C1Ev>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4618      	mov	r0, r3
 80053a0:	3708      	adds	r7, #8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
	...

080053a8 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef>:

bool EnvionmentSensors::init(I2C_HandleTypeDef *pntr_hi2c){
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af02      	add	r7, sp, #8
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
	APP_LOG(TS_ON, VLEVEL_M, "env sensors i2c interface: %d \r\n", pntr_hi2c);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	4b28      	ldr	r3, [pc, #160]	; (8005458 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xb0>)
 80053b8:	2201      	movs	r2, #1
 80053ba:	2100      	movs	r1, #0
 80053bc:	2002      	movs	r0, #2
 80053be:	f01a fdef 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
	if( lsm_accel.init(pntr_hi2c) ){
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6839      	ldr	r1, [r7, #0]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff ffb1 	bl	800532e <_ZN12LSM303_Accel4initEP19__I2C_HandleTypeDef>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00f      	beq.n	80053f2 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0x4a>
		APP_LOG(TS_ON, VLEVEL_M, "lsm303 setup valid \r\n");
 80053d2:	4b22      	ldr	r3, [pc, #136]	; (800545c <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xb4>)
 80053d4:	2201      	movs	r2, #1
 80053d6:	2100      	movs	r1, #0
 80053d8:	2002      	movs	r0, #2
 80053da:	f01a fde1 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
	} else {
		APP_LOG(TS_ON, VLEVEL_M, "lsm303 setup failed \r\n");
		return false;
	}

	if( bmp.init(pntr_hi2c) ){
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	3318      	adds	r3, #24
 80053e2:	6839      	ldr	r1, [r7, #0]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7ff fcd9 	bl	8004d9c <_ZN6BMP3904initEP19__I2C_HandleTypeDef>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d028      	beq.n	8005442 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0x9a>
 80053f0:	e007      	b.n	8005402 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0x5a>
		APP_LOG(TS_ON, VLEVEL_M, "lsm303 setup failed \r\n");
 80053f2:	4b1b      	ldr	r3, [pc, #108]	; (8005460 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xb8>)
 80053f4:	2201      	movs	r2, #1
 80053f6:	2100      	movs	r1, #0
 80053f8:	2002      	movs	r0, #2
 80053fa:	f01a fdd1 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
		return false;
 80053fe:	2300      	movs	r3, #0
 8005400:	e026      	b.n	8005450 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xa8>
		APP_LOG(TS_ON, VLEVEL_M, "bmp390 setup valid \r\n");
 8005402:	4b18      	ldr	r3, [pc, #96]	; (8005464 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xbc>)
 8005404:	2201      	movs	r2, #1
 8005406:	2100      	movs	r1, #0
 8005408:	2002      	movs	r0, #2
 800540a:	f01a fdc9 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
	} else {
		APP_LOG(TS_ON, VLEVEL_M, "bmp390 setup failed \r\n");
		return false;
	}
	bmp.setTemperatureOversampling(BMP3_OVERSAMPLING_8X);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	3318      	adds	r3, #24
 8005412:	2103      	movs	r1, #3
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff fdc5 	bl	8004fa4 <_ZN6BMP39026setTemperatureOversamplingEh>
	bmp.setPressureOversampling(BMP3_OVERSAMPLING_4X);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	3318      	adds	r3, #24
 800541e:	2102      	movs	r1, #2
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff fde0 	bl	8004fe6 <_ZN6BMP39023setPressureOversamplingEh>
	bmp.setIIRFilterCoeff(BMP3_IIR_FILTER_COEFF_3);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	3318      	adds	r3, #24
 800542a:	2102      	movs	r1, #2
 800542c:	4618      	mov	r0, r3
 800542e:	f7ff fdfb 	bl	8005028 <_ZN6BMP39017setIIRFilterCoeffEh>
	bmp.setOutputDataRate(BMP3_ODR_50_HZ);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3318      	adds	r3, #24
 8005436:	2102      	movs	r1, #2
 8005438:	4618      	mov	r0, r3
 800543a:	f7ff fe16 	bl	800506a <_ZN6BMP39017setOutputDataRateEh>

	return true;
 800543e:	2301      	movs	r3, #1
 8005440:	e006      	b.n	8005450 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xa8>
		APP_LOG(TS_ON, VLEVEL_M, "bmp390 setup failed \r\n");
 8005442:	4b09      	ldr	r3, [pc, #36]	; (8005468 <_ZN17EnvionmentSensors4initEP19__I2C_HandleTypeDef+0xc0>)
 8005444:	2201      	movs	r2, #1
 8005446:	2100      	movs	r1, #0
 8005448:	2002      	movs	r0, #2
 800544a:	f01a fda9 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
		return false;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	08020f64 	.word	0x08020f64
 800545c:	08020f88 	.word	0x08020f88
 8005460:	08020fa0 	.word	0x08020fa0
 8005464:	08020fb8 	.word	0x08020fb8
 8005468:	08020fd0 	.word	0x08020fd0

0800546c <_ZN17EnvionmentSensors11getPressureEv>:

float EnvionmentSensors::getPressure(){
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
	return bmp.readPressure();
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3318      	adds	r3, #24
 8005478:	4618      	mov	r0, r3
 800547a:	f7ff fce6 	bl	8004e4a <_ZN6BMP39012readPressureEv>
 800547e:	4603      	mov	r3, r0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <_ZN17EnvionmentSensors14getTemperatureEv>:

float EnvionmentSensors::getTemperature(){
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
	return bmp.readTemperature();
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3318      	adds	r3, #24
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff fcc5 	bl	8004e24 <_ZN6BMP39015readTemperatureEv>
 800549a:	4603      	mov	r3, r0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80054aa:	1d3b      	adds	r3, r7, #4
 80054ac:	2200      	movs	r2, #0
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	605a      	str	r2, [r3, #4]
 80054b2:	609a      	str	r2, [r3, #8]
 80054b4:	60da      	str	r2, [r3, #12]
 80054b6:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80054b8:	2310      	movs	r3, #16
 80054ba:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80054bc:	2301      	movs	r3, #1
 80054be:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80054c0:	2300      	movs	r3, #0
 80054c2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054c4:	2303      	movs	r3, #3
 80054c6:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80054c8:	1d3b      	adds	r3, r7, #4
 80054ca:	4619      	mov	r1, r3
 80054cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054d0:	f002 f9d2 	bl	8007878 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80054d4:	2320      	movs	r3, #32
 80054d6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80054d8:	1d3b      	adds	r3, r7, #4
 80054da:	4619      	mov	r1, r3
 80054dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054e0:	f002 f9ca 	bl	8007878 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80054e4:	2200      	movs	r2, #0
 80054e6:	2120      	movs	r1, #32
 80054e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054ec:	f002 fc09 	bl	8007d02 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80054f0:	2200      	movs	r2, #0
 80054f2:	2110      	movs	r1, #16
 80054f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054f8:	f002 fc03 	bl	8007d02 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
	...

08005508 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	4603      	mov	r3, r0
 8005510:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8005512:	79fb      	ldrb	r3, [r7, #7]
 8005514:	2b03      	cmp	r3, #3
 8005516:	d83f      	bhi.n	8005598 <BSP_RADIO_ConfigRFSwitch+0x90>
 8005518:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800551a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551e:	bf00      	nop
 8005520:	08005531 	.word	0x08005531
 8005524:	0800554b 	.word	0x0800554b
 8005528:	08005565 	.word	0x08005565
 800552c:	0800557f 	.word	0x0800557f
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8005530:	2200      	movs	r2, #0
 8005532:	2110      	movs	r1, #16
 8005534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005538:	f002 fbe3 	bl	8007d02 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800553c:	2200      	movs	r2, #0
 800553e:	2120      	movs	r1, #32
 8005540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005544:	f002 fbdd 	bl	8007d02 <HAL_GPIO_WritePin>
      break;      
 8005548:	e027      	b.n	800559a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800554a:	2201      	movs	r2, #1
 800554c:	2110      	movs	r1, #16
 800554e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005552:	f002 fbd6 	bl	8007d02 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8005556:	2200      	movs	r2, #0
 8005558:	2120      	movs	r1, #32
 800555a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800555e:	f002 fbd0 	bl	8007d02 <HAL_GPIO_WritePin>
      break;
 8005562:	e01a      	b.n	800559a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8005564:	2201      	movs	r2, #1
 8005566:	2110      	movs	r1, #16
 8005568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800556c:	f002 fbc9 	bl	8007d02 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8005570:	2201      	movs	r2, #1
 8005572:	2120      	movs	r1, #32
 8005574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005578:	f002 fbc3 	bl	8007d02 <HAL_GPIO_WritePin>
      break;
 800557c:	e00d      	b.n	800559a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800557e:	2200      	movs	r2, #0
 8005580:	2110      	movs	r1, #16
 8005582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005586:	f002 fbbc 	bl	8007d02 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800558a:	2201      	movs	r2, #1
 800558c:	2120      	movs	r1, #32
 800558e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005592:	f002 fbb6 	bl	8007d02 <HAL_GPIO_WritePin>
      break;
 8005596:	e000      	b.n	800559a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8005598:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80055a4:	b480      	push	{r7}
 80055a6:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 80055a8:	2302      	movs	r3, #2
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bc80      	pop	{r7}
 80055b0:	4770      	bx	lr

080055b2 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80055b2:	b480      	push	{r7}
 80055b4:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80055b6:	2301      	movs	r3, #1
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bc80      	pop	{r7}
 80055be:	4770      	bx	lr

080055c0 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80055c0:	b480      	push	{r7}
 80055c2:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80055c4:	2301      	movs	r3, #1
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bc80      	pop	{r7}
 80055cc:	4770      	bx	lr

080055ce <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b085      	sub	sp, #20
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	4603      	mov	r3, r0
 80055d6:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80055d8:	79fb      	ldrb	r3, [r7, #7]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d102      	bne.n	80055e4 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80055de:	230f      	movs	r3, #15
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	e001      	b.n	80055e8 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80055e4:	2316      	movs	r3, #22
 80055e6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80055e8:	68fb      	ldr	r3, [r7, #12]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bc80      	pop	{r7}
 80055f2:	4770      	bx	lr

080055f4 <_Z11packExpDataPK7ExpDataPh>:
	SET_BIAS = 0x04
};

const int expDataLen = 8;

void packExpData(const ExpData *data, uint8_t *buf){
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
	int32_t SiPM_Temp = (int32_t)(data->SiPM_Temp * 100.0);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f7fa ff78 	bl	80004f8 <__aeabi_f2d>
 8005608:	f04f 0200 	mov.w	r2, #0
 800560c:	4b26      	ldr	r3, [pc, #152]	; (80056a8 <_Z11packExpDataPK7ExpDataPh+0xb4>)
 800560e:	f7fa ffcb 	bl	80005a8 <__aeabi_dmul>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	4610      	mov	r0, r2
 8005618:	4619      	mov	r1, r3
 800561a:	f7fb fa5f 	bl	8000adc <__aeabi_d2iz>
 800561e:	4603      	mov	r3, r0
 8005620:	60fb      	str	r3, [r7, #12]
	int32_t SiPM_Signal = (int32_t)(data->SiPM_Signal * 100.0);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	4618      	mov	r0, r3
 8005628:	f7fa ff66 	bl	80004f8 <__aeabi_f2d>
 800562c:	f04f 0200 	mov.w	r2, #0
 8005630:	4b1d      	ldr	r3, [pc, #116]	; (80056a8 <_Z11packExpDataPK7ExpDataPh+0xb4>)
 8005632:	f7fa ffb9 	bl	80005a8 <__aeabi_dmul>
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	4610      	mov	r0, r2
 800563c:	4619      	mov	r1, r3
 800563e:	f7fb fa4d 	bl	8000adc <__aeabi_d2iz>
 8005642:	4603      	mov	r3, r0
 8005644:	60bb      	str	r3, [r7, #8]

	buf[0] = (uint8_t)(SiPM_Temp >> 24);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	161b      	asrs	r3, r3, #24
 800564a:	b2da      	uxtb	r2, r3
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	701a      	strb	r2, [r3, #0]
	buf[1] = (uint8_t)(SiPM_Temp >> 16);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	141a      	asrs	r2, r3, #16
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	3301      	adds	r3, #1
 8005658:	b2d2      	uxtb	r2, r2
 800565a:	701a      	strb	r2, [r3, #0]
	buf[2] = (uint8_t)(SiPM_Temp >> 8);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	121a      	asrs	r2, r3, #8
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	3302      	adds	r3, #2
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	701a      	strb	r2, [r3, #0]
	buf[3] = (uint8_t)(SiPM_Temp >> 0);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	3303      	adds	r3, #3
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	b2d2      	uxtb	r2, r2
 8005670:	701a      	strb	r2, [r3, #0]

	buf[4] = (uint8_t)(SiPM_Signal >> 24);
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	161a      	asrs	r2, r3, #24
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	3304      	adds	r3, #4
 800567a:	b2d2      	uxtb	r2, r2
 800567c:	701a      	strb	r2, [r3, #0]
	buf[5] = (uint8_t)(SiPM_Signal >> 16);
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	141a      	asrs	r2, r3, #16
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	3305      	adds	r3, #5
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	701a      	strb	r2, [r3, #0]
	buf[6] = (uint8_t)(SiPM_Signal >> 8);
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	121a      	asrs	r2, r3, #8
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	3306      	adds	r3, #6
 8005692:	b2d2      	uxtb	r2, r2
 8005694:	701a      	strb	r2, [r3, #0]
	buf[7] = (uint8_t)(SiPM_Signal >> 0);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	3307      	adds	r3, #7
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	701a      	strb	r2, [r3, #0]
}
 80056a0:	bf00      	nop
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	40590000 	.word	0x40590000

080056ac <_Z19enterExperimentModev>:

void enterExperimentMode(void){
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
	disableLoRaWAN();
 80056b2:	f008 fc69 	bl	800df88 <disableLoRaWAN>
	MX_USART1_UART_Init();
 80056b6:	f7fd fc0f 	bl	8002ed8 <MX_USART1_UART_Init>

	char msg[8];
	sprintf(msg, "hello\r\n");
 80056ba:	f107 030c 	add.w	r3, r7, #12
 80056be:	495b      	ldr	r1, [pc, #364]	; (800582c <_Z19enterExperimentModev+0x180>)
 80056c0:	4618      	mov	r0, r3
 80056c2:	f01a ff65 	bl	8020590 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)&msg, strlen(msg), 1000);
 80056c6:	f107 030c 	add.w	r3, r7, #12
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fa fd58 	bl	8000180 <strlen>
 80056d0:	4603      	mov	r3, r0
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	f107 010c 	add.w	r1, r7, #12
 80056d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056dc:	4854      	ldr	r0, [pc, #336]	; (8005830 <_Z19enterExperimentModev+0x184>)
 80056de:	f006 f91c 	bl	800b91a <HAL_UART_Transmit>
	uint8_t expDataBuf[8];
	uint8_t biasGain;

	while(1){
		// Wait for the command to be received
		if (HAL_UART_Receive(&huart1, rxCmdBuffer, 2, HAL_MAX_DELAY) == HAL_OK) {
 80056e2:	f107 0108 	add.w	r1, r7, #8
 80056e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056ea:	2202      	movs	r2, #2
 80056ec:	4850      	ldr	r0, [pc, #320]	; (8005830 <_Z19enterExperimentModev+0x184>)
 80056ee:	f006 f99a 	bl	800ba26 <HAL_UART_Receive>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	bf0c      	ite	eq
 80056f8:	2301      	moveq	r3, #1
 80056fa:	2300      	movne	r3, #0
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0ef      	beq.n	80056e2 <_Z19enterExperimentModev+0x36>
			// Extract the command from the buffer
			command = rxCmdBuffer[0];
 8005702:	7a3b      	ldrb	r3, [r7, #8]
 8005704:	75fb      	strb	r3, [r7, #23]

			switch(command) {
 8005706:	7dfb      	ldrb	r3, [r7, #23]
 8005708:	3b01      	subs	r3, #1
 800570a:	2b03      	cmp	r3, #3
 800570c:	d877      	bhi.n	80057fe <_Z19enterExperimentModev+0x152>
 800570e:	a201      	add	r2, pc, #4	; (adr r2, 8005714 <_Z19enterExperimentModev+0x68>)
 8005710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005714:	08005725 	.word	0x08005725
 8005718:	08005755 	.word	0x08005755
 800571c:	08005789 	.word	0x08005789
 8005720:	080057b3 	.word	0x080057b3
				case RETURN_TEMP:
					expData.SiPM_Temp = detector.getSiPMtemp(true);
 8005724:	2101      	movs	r1, #1
 8005726:	4843      	ldr	r0, [pc, #268]	; (8005834 <_Z19enterExperimentModev+0x188>)
 8005728:	f7fd fe58 	bl	80033dc <_ZN8Detector11getSiPMtempEb>
 800572c:	4603      	mov	r3, r0
 800572e:	4a42      	ldr	r2, [pc, #264]	; (8005838 <_Z19enterExperimentModev+0x18c>)
 8005730:	6013      	str	r3, [r2, #0]
					expData.SiPM_Signal = 0;
 8005732:	4b41      	ldr	r3, [pc, #260]	; (8005838 <_Z19enterExperimentModev+0x18c>)
 8005734:	f04f 0200 	mov.w	r2, #0
 8005738:	605a      	str	r2, [r3, #4]
					packExpData(&expData, expDataBuf);
 800573a:	463b      	mov	r3, r7
 800573c:	4619      	mov	r1, r3
 800573e:	483e      	ldr	r0, [pc, #248]	; (8005838 <_Z19enterExperimentModev+0x18c>)
 8005740:	f7ff ff58 	bl	80055f4 <_Z11packExpDataPK7ExpDataPh>
					HAL_UART_Transmit(&huart1, expDataBuf, expDataLen, 1000);
 8005744:	4639      	mov	r1, r7
 8005746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800574a:	2208      	movs	r2, #8
 800574c:	4838      	ldr	r0, [pc, #224]	; (8005830 <_Z19enterExperimentModev+0x184>)
 800574e:	f006 f8e4 	bl	800b91a <HAL_UART_Transmit>
					break;
 8005752:	e069      	b.n	8005828 <_Z19enterExperimentModev+0x17c>
				case RETURN_SAMPLE:
					//read the dose first, otherwise the temperature will not be valid
					expData.SiPM_Signal = detector.readAccumulatedDose();
 8005754:	4837      	ldr	r0, [pc, #220]	; (8005834 <_Z19enterExperimentModev+0x188>)
 8005756:	f7fd fe76 	bl	8003446 <_ZN8Detector19readAccumulatedDoseEv>
 800575a:	4603      	mov	r3, r0
 800575c:	4a36      	ldr	r2, [pc, #216]	; (8005838 <_Z19enterExperimentModev+0x18c>)
 800575e:	6053      	str	r3, [r2, #4]
					expData.SiPM_Temp = detector.getSiPMtemp(false);
 8005760:	2100      	movs	r1, #0
 8005762:	4834      	ldr	r0, [pc, #208]	; (8005834 <_Z19enterExperimentModev+0x188>)
 8005764:	f7fd fe3a 	bl	80033dc <_ZN8Detector11getSiPMtempEb>
 8005768:	4603      	mov	r3, r0
 800576a:	4a33      	ldr	r2, [pc, #204]	; (8005838 <_Z19enterExperimentModev+0x18c>)
 800576c:	6013      	str	r3, [r2, #0]

					packExpData(&expData, expDataBuf);
 800576e:	463b      	mov	r3, r7
 8005770:	4619      	mov	r1, r3
 8005772:	4831      	ldr	r0, [pc, #196]	; (8005838 <_Z19enterExperimentModev+0x18c>)
 8005774:	f7ff ff3e 	bl	80055f4 <_Z11packExpDataPK7ExpDataPh>
					HAL_UART_Transmit(&huart1, expDataBuf, expDataLen, 1000);
 8005778:	4639      	mov	r1, r7
 800577a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800577e:	2208      	movs	r2, #8
 8005780:	482b      	ldr	r0, [pc, #172]	; (8005830 <_Z19enterExperimentModev+0x184>)
 8005782:	f006 f8ca 	bl	800b91a <HAL_UART_Transmit>
					break;
 8005786:	e04f      	b.n	8005828 <_Z19enterExperimentModev+0x17c>
				case RETURN_HELLO:
					sprintf(msg, "hi\r\n");
 8005788:	f107 030c 	add.w	r3, r7, #12
 800578c:	492b      	ldr	r1, [pc, #172]	; (800583c <_Z19enterExperimentModev+0x190>)
 800578e:	4618      	mov	r0, r3
 8005790:	f01a fefe 	bl	8020590 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t *)&msg, strlen(msg), 1000);
 8005794:	f107 030c 	add.w	r3, r7, #12
 8005798:	4618      	mov	r0, r3
 800579a:	f7fa fcf1 	bl	8000180 <strlen>
 800579e:	4603      	mov	r3, r0
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	f107 010c 	add.w	r1, r7, #12
 80057a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057aa:	4821      	ldr	r0, [pc, #132]	; (8005830 <_Z19enterExperimentModev+0x184>)
 80057ac:	f006 f8b5 	bl	800b91a <HAL_UART_Transmit>
					break;
 80057b0:	e03a      	b.n	8005828 <_Z19enterExperimentModev+0x17c>
				case SET_BIAS:
					biasGain = rxCmdBuffer[1];
 80057b2:	7a7b      	ldrb	r3, [r7, #9]
 80057b4:	75bb      	strb	r3, [r7, #22]
					if (detector.setSiPM_Bias(biasGain)){
 80057b6:	7dbb      	ldrb	r3, [r7, #22]
 80057b8:	4619      	mov	r1, r3
 80057ba:	481e      	ldr	r0, [pc, #120]	; (8005834 <_Z19enterExperimentModev+0x188>)
 80057bc:	f7fd ff6a 	bl	8003694 <_ZN8Detector12setSiPM_BiasEh>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d006      	beq.n	80057d4 <_Z19enterExperimentModev+0x128>
						sprintf(msg, "_OK\r\n");
 80057c6:	f107 030c 	add.w	r3, r7, #12
 80057ca:	491d      	ldr	r1, [pc, #116]	; (8005840 <_Z19enterExperimentModev+0x194>)
 80057cc:	4618      	mov	r0, r3
 80057ce:	f01a fedf 	bl	8020590 <siprintf>
 80057d2:	e005      	b.n	80057e0 <_Z19enterExperimentModev+0x134>
					} else {
						sprintf(msg, "bad\r\n");
 80057d4:	f107 030c 	add.w	r3, r7, #12
 80057d8:	491a      	ldr	r1, [pc, #104]	; (8005844 <_Z19enterExperimentModev+0x198>)
 80057da:	4618      	mov	r0, r3
 80057dc:	f01a fed8 	bl	8020590 <siprintf>
					}
					HAL_UART_Transmit(&huart1, (uint8_t *)&msg, strlen(msg), 1000);
 80057e0:	f107 030c 	add.w	r3, r7, #12
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fa fccb 	bl	8000180 <strlen>
 80057ea:	4603      	mov	r3, r0
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	f107 010c 	add.w	r1, r7, #12
 80057f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057f6:	480e      	ldr	r0, [pc, #56]	; (8005830 <_Z19enterExperimentModev+0x184>)
 80057f8:	f006 f88f 	bl	800b91a <HAL_UART_Transmit>
					break;
 80057fc:	e014      	b.n	8005828 <_Z19enterExperimentModev+0x17c>
				default:
					expData.SiPM_Temp = 0;
 80057fe:	4b0e      	ldr	r3, [pc, #56]	; (8005838 <_Z19enterExperimentModev+0x18c>)
 8005800:	f04f 0200 	mov.w	r2, #0
 8005804:	601a      	str	r2, [r3, #0]
					expData.SiPM_Signal = 0;
 8005806:	4b0c      	ldr	r3, [pc, #48]	; (8005838 <_Z19enterExperimentModev+0x18c>)
 8005808:	f04f 0200 	mov.w	r2, #0
 800580c:	605a      	str	r2, [r3, #4]
					packExpData(&expData, expDataBuf);
 800580e:	463b      	mov	r3, r7
 8005810:	4619      	mov	r1, r3
 8005812:	4809      	ldr	r0, [pc, #36]	; (8005838 <_Z19enterExperimentModev+0x18c>)
 8005814:	f7ff feee 	bl	80055f4 <_Z11packExpDataPK7ExpDataPh>
					HAL_UART_Transmit(&huart1, expDataBuf, expDataLen, 1000);
 8005818:	4639      	mov	r1, r7
 800581a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800581e:	2208      	movs	r2, #8
 8005820:	4803      	ldr	r0, [pc, #12]	; (8005830 <_Z19enterExperimentModev+0x184>)
 8005822:	f006 f87a 	bl	800b91a <HAL_UART_Transmit>
					break;
 8005826:	bf00      	nop
		if (HAL_UART_Receive(&huart1, rxCmdBuffer, 2, HAL_MAX_DELAY) == HAL_OK) {
 8005828:	e75b      	b.n	80056e2 <_Z19enterExperimentModev+0x36>
 800582a:	bf00      	nop
 800582c:	08020fe8 	.word	0x08020fe8
 8005830:	20000484 	.word	0x20000484
 8005834:	20000380 	.word	0x20000380
 8005838:	20000584 	.word	0x20000584
 800583c:	08020ff0 	.word	0x08020ff0
 8005840:	08020ff8 	.word	0x08020ff8
 8005844:	08021000 	.word	0x08021000

08005848 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800584c:	4b04      	ldr	r3, [pc, #16]	; (8005860 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	4a03      	ldr	r2, [pc, #12]	; (8005860 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8005852:	f043 0301 	orr.w	r3, r3, #1
 8005856:	6053      	str	r3, [r2, #4]
}
 8005858:	bf00      	nop
 800585a:	46bd      	mov	sp, r7
 800585c:	bc80      	pop	{r7}
 800585e:	4770      	bx	lr
 8005860:	e0042000 	.word	0xe0042000

08005864 <LL_DBGMCU_EnableDBGStopMode>:
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8005868:	4b04      	ldr	r3, [pc, #16]	; (800587c <LL_DBGMCU_EnableDBGStopMode+0x18>)
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	4a03      	ldr	r2, [pc, #12]	; (800587c <LL_DBGMCU_EnableDBGStopMode+0x18>)
 800586e:	f043 0302 	orr.w	r3, r3, #2
 8005872:	6053      	str	r3, [r2, #4]
}
 8005874:	bf00      	nop
 8005876:	46bd      	mov	sp, r7
 8005878:	bc80      	pop	{r7}
 800587a:	4770      	bx	lr
 800587c:	e0042000 	.word	0xe0042000

08005880 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8005880:	b480      	push	{r7}
 8005882:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8005884:	4b04      	ldr	r3, [pc, #16]	; (8005898 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	4a03      	ldr	r2, [pc, #12]	; (8005898 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800588a:	f043 0304 	orr.w	r3, r3, #4
 800588e:	6053      	str	r3, [r2, #4]
}
 8005890:	bf00      	nop
 8005892:	46bd      	mov	sp, r7
 8005894:	bc80      	pop	{r7}
 8005896:	4770      	bx	lr
 8005898:	e0042000 	.word	0xe0042000

0800589c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80058a2:	2300      	movs	r3, #0
 80058a4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058a6:	2003      	movs	r0, #3
 80058a8:	f001 f9a0 	bl	8006bec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80058ac:	f004 f8be 	bl	8009a2c <HAL_RCC_GetHCLKFreq>
 80058b0:	4603      	mov	r3, r0
 80058b2:	4a09      	ldr	r2, [pc, #36]	; (80058d8 <HAL_Init+0x3c>)
 80058b4:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80058b6:	200f      	movs	r0, #15
 80058b8:	f7fc ffd0 	bl	800285c <HAL_InitTick>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	71fb      	strb	r3, [r7, #7]
 80058c6:	e001      	b.n	80058cc <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80058c8:	f7fc fda1 	bl	800240e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80058cc:	79fb      	ldrb	r3, [r7, #7]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	20000000 	.word	0x20000000

080058dc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80058e0:	4b04      	ldr	r3, [pc, #16]	; (80058f4 <HAL_SuspendTick+0x18>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a03      	ldr	r2, [pc, #12]	; (80058f4 <HAL_SuspendTick+0x18>)
 80058e6:	f023 0302 	bic.w	r3, r3, #2
 80058ea:	6013      	str	r3, [r2, #0]
}
 80058ec:	bf00      	nop
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bc80      	pop	{r7}
 80058f2:	4770      	bx	lr
 80058f4:	e000e010 	.word	0xe000e010

080058f8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80058f8:	b480      	push	{r7}
 80058fa:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80058fc:	4b04      	ldr	r3, [pc, #16]	; (8005910 <HAL_ResumeTick+0x18>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a03      	ldr	r2, [pc, #12]	; (8005910 <HAL_ResumeTick+0x18>)
 8005902:	f043 0302 	orr.w	r3, r3, #2
 8005906:	6013      	str	r3, [r2, #0]
}
 8005908:	bf00      	nop
 800590a:	46bd      	mov	sp, r7
 800590c:	bc80      	pop	{r7}
 800590e:	4770      	bx	lr
 8005910:	e000e010 	.word	0xe000e010

08005914 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8005914:	b480      	push	{r7}
 8005916:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8005918:	4b02      	ldr	r3, [pc, #8]	; (8005924 <HAL_GetUIDw0+0x10>)
 800591a:	681b      	ldr	r3, [r3, #0]
}
 800591c:	4618      	mov	r0, r3
 800591e:	46bd      	mov	sp, r7
 8005920:	bc80      	pop	{r7}
 8005922:	4770      	bx	lr
 8005924:	1fff7590 	.word	0x1fff7590

08005928 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8005928:	b480      	push	{r7}
 800592a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800592c:	4b02      	ldr	r3, [pc, #8]	; (8005938 <HAL_GetUIDw1+0x10>)
 800592e:	681b      	ldr	r3, [r3, #0]
}
 8005930:	4618      	mov	r0, r3
 8005932:	46bd      	mov	sp, r7
 8005934:	bc80      	pop	{r7}
 8005936:	4770      	bx	lr
 8005938:	1fff7594 	.word	0x1fff7594

0800593c <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8005940:	4b02      	ldr	r3, [pc, #8]	; (800594c <HAL_GetUIDw2+0x10>)
 8005942:	681b      	ldr	r3, [r3, #0]
}
 8005944:	4618      	mov	r0, r3
 8005946:	46bd      	mov	sp, r7
 8005948:	bc80      	pop	{r7}
 800594a:	4770      	bx	lr
 800594c:	1fff7598 	.word	0x1fff7598

08005950 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8005954:	f7ff ff78 	bl	8005848 <LL_DBGMCU_EnableDBGSleepMode>
}
 8005958:	bf00      	nop
 800595a:	bd80      	pop	{r7, pc}

0800595c <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8005960:	f7ff ff80 	bl	8005864 <LL_DBGMCU_EnableDBGStopMode>
}
 8005964:	bf00      	nop
 8005966:	bd80      	pop	{r7, pc}

08005968 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 800596c:	f7ff ff88 	bl	8005880 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8005970:	bf00      	nop
 8005972:	bd80      	pop	{r7, pc}

08005974 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	431a      	orrs	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	601a      	str	r2, [r3, #0]
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	bc80      	pop	{r7}
 8005996:	4770      	bx	lr

08005998 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bc80      	pop	{r7}
 80059b0:	4770      	bx	lr

080059b2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b085      	sub	sp, #20
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	60f8      	str	r0, [r7, #12]
 80059ba:	60b9      	str	r1, [r7, #8]
 80059bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	695a      	ldr	r2, [r3, #20]
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2107      	movs	r1, #7
 80059ca:	fa01 f303 	lsl.w	r3, r1, r3
 80059ce:	43db      	mvns	r3, r3
 80059d0:	401a      	ands	r2, r3
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	6879      	ldr	r1, [r7, #4]
 80059da:	fa01 f303 	lsl.w	r3, r1, r3
 80059de:	431a      	orrs	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80059e4:	bf00      	nop
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bc80      	pop	{r7}
 80059ec:	4770      	bx	lr

080059ee <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b083      	sub	sp, #12
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
 80059f6:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	695a      	ldr	r2, [r3, #20]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	f003 0304 	and.w	r3, r3, #4
 8005a02:	2107      	movs	r1, #7
 8005a04:	fa01 f303 	lsl.w	r3, r1, r3
 8005a08:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bc80      	pop	{r7}
 8005a1c:	4770      	bx	lr

08005a1e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b083      	sub	sp, #12
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005a32:	2301      	movs	r3, #1
 8005a34:	e000      	b.n	8005a38 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bc80      	pop	{r7}
 8005a40:	4770      	bx	lr

08005a42 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b085      	sub	sp, #20
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	60f8      	str	r0, [r7, #12]
 8005a4a:	60b9      	str	r1, [r7, #8]
 8005a4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	f003 031f 	and.w	r3, r3, #31
 8005a58:	210f      	movs	r1, #15
 8005a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a5e:	43db      	mvns	r3, r3
 8005a60:	401a      	ands	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	0e9b      	lsrs	r3, r3, #26
 8005a66:	f003 010f 	and.w	r1, r3, #15
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	f003 031f 	and.w	r3, r3, #31
 8005a70:	fa01 f303 	lsl.w	r3, r1, r3
 8005a74:	431a      	orrs	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005a7a:	bf00      	nop
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bc80      	pop	{r7}
 8005a82:	4770      	bx	lr

08005a84 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bc80      	pop	{r7}
 8005aa6:	4770      	bx	lr

08005aa8 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8005abc:	43db      	mvns	r3, r3
 8005abe:	401a      	ands	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bc80      	pop	{r7}
 8005acc:	4770      	bx	lr

08005ace <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b085      	sub	sp, #20
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	60f8      	str	r0, [r7, #12]
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	695a      	ldr	r2, [r3, #20]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	021b      	lsls	r3, r3, #8
 8005ae2:	43db      	mvns	r3, r3
 8005ae4:	401a      	ands	r2, r3
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	0219      	lsls	r1, r3, #8
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	400b      	ands	r3, r1
 8005aee:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8005af2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005af6:	431a      	orrs	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8005afc:	bf00      	nop
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bc80      	pop	{r7}
 8005b04:	4770      	bx	lr

08005b06 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b083      	sub	sp, #12
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005b16:	f023 0317 	bic.w	r3, r3, #23
 8005b1a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005b22:	bf00      	nop
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bc80      	pop	{r7}
 8005b2a:	4770      	bx	lr

08005b2c <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005b3c:	f023 0317 	bic.w	r3, r3, #23
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	6093      	str	r3, [r2, #8]
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bc80      	pop	{r7}
 8005b4c:	4770      	bx	lr

08005b4e <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b62:	d101      	bne.n	8005b68 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005b64:	2301      	movs	r3, #1
 8005b66:	e000      	b.n	8005b6a <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bc80      	pop	{r7}
 8005b72:	4770      	bx	lr

08005b74 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b84:	f023 0317 	bic.w	r3, r3, #23
 8005b88:	f043 0201 	orr.w	r2, r3, #1
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bc80      	pop	{r7}
 8005b98:	4770      	bx	lr

08005b9a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b083      	sub	sp, #12
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005baa:	f023 0317 	bic.w	r3, r3, #23
 8005bae:	f043 0202 	orr.w	r2, r3, #2
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bc80      	pop	{r7}
 8005bbe:	4770      	bx	lr

08005bc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d101      	bne.n	8005bd8 <LL_ADC_IsEnabled+0x18>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e000      	b.n	8005bda <LL_ADC_IsEnabled+0x1a>
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bc80      	pop	{r7}
 8005be2:	4770      	bx	lr

08005be4 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d101      	bne.n	8005bfc <LL_ADC_IsDisableOngoing+0x18>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e000      	b.n	8005bfe <LL_ADC_IsDisableOngoing+0x1a>
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bc80      	pop	{r7}
 8005c06:	4770      	bx	lr

08005c08 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c18:	f023 0317 	bic.w	r3, r3, #23
 8005c1c:	f043 0204 	orr.w	r2, r3, #4
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bc80      	pop	{r7}
 8005c2c:	4770      	bx	lr

08005c2e <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c3e:	f023 0317 	bic.w	r3, r3, #23
 8005c42:	f043 0210 	orr.w	r2, r3, #16
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005c4a:	bf00      	nop
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bc80      	pop	{r7}
 8005c52:	4770      	bx	lr

08005c54 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b04      	cmp	r3, #4
 8005c66:	d101      	bne.n	8005c6c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e000      	b.n	8005c6e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bc80      	pop	{r7}
 8005c76:	4770      	bx	lr

08005c78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b088      	sub	sp, #32
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c80:	2300      	movs	r3, #0
 8005c82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8005c84:	2300      	movs	r3, #0
 8005c86:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e17e      	b.n	8005f98 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d109      	bne.n	8005cbc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7fb fc41 	bl	8001530 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7ff ff44 	bl	8005b4e <LL_ADC_IsInternalRegulatorEnabled>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d115      	bne.n	8005cf8 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff ff18 	bl	8005b06 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005cd6:	4b9e      	ldr	r3, [pc, #632]	; (8005f50 <HAL_ADC_Init+0x2d8>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	099b      	lsrs	r3, r3, #6
 8005cdc:	4a9d      	ldr	r2, [pc, #628]	; (8005f54 <HAL_ADC_Init+0x2dc>)
 8005cde:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce2:	099b      	lsrs	r3, r3, #6
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005cea:	e002      	b.n	8005cf2 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1f9      	bne.n	8005cec <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7ff ff26 	bl	8005b4e <LL_ADC_IsInternalRegulatorEnabled>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10d      	bne.n	8005d24 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d0c:	f043 0210 	orr.w	r2, r3, #16
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d18:	f043 0201 	orr.w	r2, r3, #1
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7ff ff93 	bl	8005c54 <LL_ADC_REG_IsConversionOngoing>
 8005d2e:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d34:	f003 0310 	and.w	r3, r3, #16
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f040 8124 	bne.w	8005f86 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f040 8120 	bne.w	8005f86 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005d4e:	f043 0202 	orr.w	r2, r3, #2
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7ff ff30 	bl	8005bc0 <LL_ADC_IsEnabled>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f040 80a7 	bne.w	8005eb6 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	7e1b      	ldrb	r3, [r3, #24]
 8005d70:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005d72:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	7e5b      	ldrb	r3, [r3, #25]
 8005d78:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005d7a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	7e9b      	ldrb	r3, [r3, #26]
 8005d80:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005d82:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005d88:	2a00      	cmp	r2, #0
 8005d8a:	d002      	beq.n	8005d92 <HAL_ADC_Init+0x11a>
 8005d8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d90:	e000      	b.n	8005d94 <HAL_ADC_Init+0x11c>
 8005d92:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005d94:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005d9a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	da04      	bge.n	8005dae <HAL_ADC_Init+0x136>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005dac:	e001      	b.n	8005db2 <HAL_ADC_Init+0x13a>
 8005dae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8005db2:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005dba:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005dbc:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d114      	bne.n	8005df8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	7e9b      	ldrb	r3, [r3, #26]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d104      	bne.n	8005de0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ddc:	61bb      	str	r3, [r7, #24]
 8005dde:	e00b      	b.n	8005df8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de4:	f043 0220 	orr.w	r2, r3, #32
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df0:	f043 0201 	orr.w	r2, r3, #1
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d009      	beq.n	8005e14 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8005e1e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	6812      	ldr	r2, [r2, #0]
 8005e26:	69b9      	ldr	r1, [r7, #24]
 8005e28:	430b      	orrs	r3, r1
 8005e2a:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d111      	bne.n	8005e6e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005e56:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8005e5c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8005e62:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	f043 0301 	orr.w	r3, r3, #1
 8005e6c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	691a      	ldr	r2, [r3, #16]
 8005e74:	4b38      	ldr	r3, [pc, #224]	; (8005f58 <HAL_ADC_Init+0x2e0>)
 8005e76:	4013      	ands	r3, r2
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6812      	ldr	r2, [r2, #0]
 8005e7c:	6979      	ldr	r1, [r7, #20]
 8005e7e:	430b      	orrs	r3, r1
 8005e80:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005e8a:	d014      	beq.n	8005eb6 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e94:	d00f      	beq.n	8005eb6 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005e9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e9e:	d00a      	beq.n	8005eb6 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8005ea0:	4b2e      	ldr	r3, [pc, #184]	; (8005f5c <HAL_ADC_Init+0x2e4>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005eb0:	492a      	ldr	r1, [pc, #168]	; (8005f5c <HAL_ADC_Init+0x2e4>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6818      	ldr	r0, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	f7ff fd76 	bl	80059b2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6818      	ldr	r0, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ece:	461a      	mov	r2, r3
 8005ed0:	4923      	ldr	r1, [pc, #140]	; (8005f60 <HAL_ADC_Init+0x2e8>)
 8005ed2:	f7ff fd6e 	bl	80059b2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d108      	bne.n	8005ef0 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f062 020f 	orn	r2, r2, #15
 8005eec:	629a      	str	r2, [r3, #40]	; 0x28
 8005eee:	e017      	b.n	8005f20 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ef8:	d112      	bne.n	8005f20 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	69db      	ldr	r3, [r3, #28]
 8005f04:	3b01      	subs	r3, #1
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	f003 031c 	and.w	r3, r3, #28
 8005f0c:	f06f 020f 	mvn.w	r2, #15
 8005f10:	fa02 f103 	lsl.w	r1, r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2100      	movs	r1, #0
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7ff fd61 	bl	80059ee <LL_ADC_GetSamplingTimeCommonChannels>
 8005f2c:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d116      	bne.n	8005f64 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f40:	f023 0303 	bic.w	r3, r3, #3
 8005f44:	f043 0201 	orr.w	r2, r3, #1
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005f4c:	e023      	b.n	8005f96 <HAL_ADC_Init+0x31e>
 8005f4e:	bf00      	nop
 8005f50:	20000000 	.word	0x20000000
 8005f54:	053e2d63 	.word	0x053e2d63
 8005f58:	1ffffc02 	.word	0x1ffffc02
 8005f5c:	40012708 	.word	0x40012708
 8005f60:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f68:	f023 0312 	bic.w	r3, r3, #18
 8005f6c:	f043 0210 	orr.w	r2, r3, #16
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f78:	f043 0201 	orr.w	r2, r3, #1
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005f84:	e007      	b.n	8005f96 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f8a:	f043 0210 	orr.w	r2, r3, #16
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8005f96:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3720      	adds	r7, #32
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e07a      	b.n	80060a8 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb6:	f043 0202 	orr.w	r2, r3, #2
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 face 	bl	8006560 <ADC_ConversionStop>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10f      	bne.n	8005fee <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fb92 	bl	80066f8 <ADC_Disable>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d102      	bne.n	8005fe4 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7ff fd9f 	bl	8005b2c <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	6812      	ldr	r2, [r2, #0]
 8005ff8:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8005ffc:	f023 0303 	bic.w	r3, r3, #3
 8006000:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f240 329f 	movw	r2, #927	; 0x39f
 800600a:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68d9      	ldr	r1, [r3, #12]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	4b26      	ldr	r3, [pc, #152]	; (80060b0 <HAL_ADC_DeInit+0x110>)
 8006018:	400b      	ands	r3, r1
 800601a:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	691a      	ldr	r2, [r3, #16]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800602a:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	695a      	ldr	r2, [r3, #20]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0207 	bic.w	r2, r2, #7
 800603a:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6a1a      	ldr	r2, [r3, #32]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800604a:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800605a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800606a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2200      	movs	r2, #0
 8006078:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800607a:	4b0e      	ldr	r3, [pc, #56]	; (80060b4 <HAL_ADC_DeInit+0x114>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a0d      	ldr	r2, [pc, #52]	; (80060b4 <HAL_ADC_DeInit+0x114>)
 8006080:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8006084:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7fb fa80 	bl	800158c <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80060a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	833e0200 	.word	0x833e0200
 80060b4:	40012708 	.word	0x40012708

080060b8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7ff fdc5 	bl	8005c54 <LL_ADC_REG_IsConversionOngoing>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d132      	bne.n	8006136 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d101      	bne.n	80060de <HAL_ADC_Start+0x26>
 80060da:	2302      	movs	r3, #2
 80060dc:	e02e      	b.n	800613c <HAL_ADC_Start+0x84>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fa80 	bl	80065ec <ADC_Enable>
 80060ec:	4603      	mov	r3, r0
 80060ee:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d11a      	bne.n	800612c <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80060fe:	f023 0301 	bic.w	r3, r3, #1
 8006102:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	221c      	movs	r2, #28
 8006116:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4618      	mov	r0, r3
 8006126:	f7ff fd6f 	bl	8005c08 <LL_ADC_REG_StartConversion>
 800612a:	e006      	b.n	800613a <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8006134:	e001      	b.n	800613a <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006136:	2302      	movs	r3, #2
 8006138:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800613a:	7bfb      	ldrb	r3, [r7, #15]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006152:	2b01      	cmp	r3, #1
 8006154:	d101      	bne.n	800615a <HAL_ADC_Stop+0x16>
 8006156:	2302      	movs	r3, #2
 8006158:	e022      	b.n	80061a0 <HAL_ADC_Stop+0x5c>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f9fc 	bl	8006560 <ADC_ConversionStop>
 8006168:	4603      	mov	r3, r0
 800616a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800616c:	7bfb      	ldrb	r3, [r7, #15]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d111      	bne.n	8006196 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fac0 	bl	80066f8 <ADC_Disable>
 8006178:	4603      	mov	r3, r0
 800617a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800617c:	7bfb      	ldrb	r3, [r7, #15]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d109      	bne.n	8006196 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006186:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800618a:	f023 0301 	bic.w	r3, r3, #1
 800618e:	f043 0201 	orr.w	r2, r3, #1
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800619e:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	2b08      	cmp	r3, #8
 80061b8:	d102      	bne.n	80061c0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80061ba:	2308      	movs	r3, #8
 80061bc:	60fb      	str	r3, [r7, #12]
 80061be:	e010      	b.n	80061e2 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d007      	beq.n	80061de <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061d2:	f043 0220 	orr.w	r2, r3, #32
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e077      	b.n	80062ce <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80061de:	2304      	movs	r3, #4
 80061e0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80061e2:	f7fc fb45 	bl	8002870 <HAL_GetTick>
 80061e6:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80061e8:	e021      	b.n	800622e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061f0:	d01d      	beq.n	800622e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80061f2:	f7fc fb3d 	bl	8002870 <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d302      	bcc.n	8006208 <HAL_ADC_PollForConversion+0x60>
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d112      	bne.n	800622e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	4013      	ands	r3, r2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10b      	bne.n	800622e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800621a:	f043 0204 	orr.w	r2, r3, #4
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e04f      	b.n	80062ce <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	4013      	ands	r3, r2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d0d6      	beq.n	80061ea <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006240:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4618      	mov	r0, r3
 800624e:	f7ff fbe6 	bl	8005a1e <LL_ADC_REG_IsTriggerSourceSWStart>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d031      	beq.n	80062bc <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	7e9b      	ldrb	r3, [r3, #26]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d12d      	bne.n	80062bc <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0308 	and.w	r3, r3, #8
 800626a:	2b08      	cmp	r3, #8
 800626c:	d126      	bne.n	80062bc <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4618      	mov	r0, r3
 8006274:	f7ff fcee 	bl	8005c54 <LL_ADC_REG_IsConversionOngoing>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d112      	bne.n	80062a4 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 020c 	bic.w	r2, r2, #12
 800628c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006292:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006296:	f023 0301 	bic.w	r3, r3, #1
 800629a:	f043 0201 	orr.w	r2, r3, #1
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	659a      	str	r2, [r3, #88]	; 0x58
 80062a2:	e00b      	b.n	80062bc <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a8:	f043 0220 	orr.w	r2, r3, #32
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062b4:	f043 0201 	orr.w	r2, r3, #1
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	7e1b      	ldrb	r3, [r3, #24]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d103      	bne.n	80062cc <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	220c      	movs	r2, #12
 80062ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bc80      	pop	{r7}
 80062ec:	4770      	bx	lr
	...

080062f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b088      	sub	sp, #32
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80062fe:	2300      	movs	r3, #0
 8006300:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006310:	2b01      	cmp	r3, #1
 8006312:	d101      	bne.n	8006318 <HAL_ADC_ConfigChannel+0x28>
 8006314:	2302      	movs	r3, #2
 8006316:	e110      	b.n	800653a <HAL_ADC_ConfigChannel+0x24a>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4618      	mov	r0, r3
 8006326:	f7ff fc95 	bl	8005c54 <LL_ADC_REG_IsConversionOngoing>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	f040 80f7 	bne.w	8006520 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2b02      	cmp	r3, #2
 8006338:	f000 80b1 	beq.w	800649e <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006344:	d004      	beq.n	8006350 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800634a:	4a7e      	ldr	r2, [pc, #504]	; (8006544 <HAL_ADC_ConfigChannel+0x254>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d108      	bne.n	8006362 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4619      	mov	r1, r3
 800635a:	4610      	mov	r0, r2
 800635c:	f7ff fb92 	bl	8005a84 <LL_ADC_REG_SetSequencerChAdd>
 8006360:	e041      	b.n	80063e6 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f003 031f 	and.w	r3, r3, #31
 800636e:	210f      	movs	r1, #15
 8006370:	fa01 f303 	lsl.w	r3, r1, r3
 8006374:	43db      	mvns	r3, r3
 8006376:	401a      	ands	r2, r3
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8006380:	2b00      	cmp	r3, #0
 8006382:	d105      	bne.n	8006390 <HAL_ADC_ConfigChannel+0xa0>
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	0e9b      	lsrs	r3, r3, #26
 800638a:	f003 031f 	and.w	r3, r3, #31
 800638e:	e011      	b.n	80063b4 <HAL_ADC_ConfigChannel+0xc4>
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	fa93 f3a3 	rbit	r3, r3
 800639c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80063a8:	2320      	movs	r3, #32
 80063aa:	e003      	b.n	80063b4 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	fab3 f383 	clz	r3, r3
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	6839      	ldr	r1, [r7, #0]
 80063b6:	6849      	ldr	r1, [r1, #4]
 80063b8:	f001 011f 	and.w	r1, r1, #31
 80063bc:	408b      	lsls	r3, r1
 80063be:	431a      	orrs	r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	089b      	lsrs	r3, r3, #2
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	69db      	ldr	r3, [r3, #28]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d808      	bhi.n	80063e6 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6818      	ldr	r0, [r3, #0]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	6859      	ldr	r1, [r3, #4]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	461a      	mov	r2, r3
 80063e2:	f7ff fb2e 	bl	8005a42 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6818      	ldr	r0, [r3, #0]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	6819      	ldr	r1, [r3, #0]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	461a      	mov	r2, r3
 80063f4:	f7ff fb6b 	bl	8005ace <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f280 8097 	bge.w	8006530 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006402:	4851      	ldr	r0, [pc, #324]	; (8006548 <HAL_ADC_ConfigChannel+0x258>)
 8006404:	f7ff fac8 	bl	8005998 <LL_ADC_GetCommonPathInternalCh>
 8006408:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a4f      	ldr	r2, [pc, #316]	; (800654c <HAL_ADC_ConfigChannel+0x25c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d120      	bne.n	8006456 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800641a:	2b00      	cmp	r3, #0
 800641c:	d11b      	bne.n	8006456 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006424:	4619      	mov	r1, r3
 8006426:	4848      	ldr	r0, [pc, #288]	; (8006548 <HAL_ADC_ConfigChannel+0x258>)
 8006428:	f7ff faa4 	bl	8005974 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800642c:	4b48      	ldr	r3, [pc, #288]	; (8006550 <HAL_ADC_ConfigChannel+0x260>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	099b      	lsrs	r3, r3, #6
 8006432:	4a48      	ldr	r2, [pc, #288]	; (8006554 <HAL_ADC_ConfigChannel+0x264>)
 8006434:	fba2 2303 	umull	r2, r3, r2, r3
 8006438:	099b      	lsrs	r3, r3, #6
 800643a:	1c5a      	adds	r2, r3, #1
 800643c:	4613      	mov	r3, r2
 800643e:	005b      	lsls	r3, r3, #1
 8006440:	4413      	add	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006446:	e002      	b.n	800644e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	3b01      	subs	r3, #1
 800644c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1f9      	bne.n	8006448 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006454:	e06c      	b.n	8006530 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a3f      	ldr	r2, [pc, #252]	; (8006558 <HAL_ADC_ConfigChannel+0x268>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d10c      	bne.n	800647a <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d107      	bne.n	800647a <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006470:	4619      	mov	r1, r3
 8006472:	4835      	ldr	r0, [pc, #212]	; (8006548 <HAL_ADC_ConfigChannel+0x258>)
 8006474:	f7ff fa7e 	bl	8005974 <LL_ADC_SetCommonPathInternalCh>
 8006478:	e05a      	b.n	8006530 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a37      	ldr	r2, [pc, #220]	; (800655c <HAL_ADC_ConfigChannel+0x26c>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d155      	bne.n	8006530 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800648a:	2b00      	cmp	r3, #0
 800648c:	d150      	bne.n	8006530 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006494:	4619      	mov	r1, r3
 8006496:	482c      	ldr	r0, [pc, #176]	; (8006548 <HAL_ADC_ConfigChannel+0x258>)
 8006498:	f7ff fa6c 	bl	8005974 <LL_ADC_SetCommonPathInternalCh>
 800649c:	e048      	b.n	8006530 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064a6:	d004      	beq.n	80064b2 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80064ac:	4a25      	ldr	r2, [pc, #148]	; (8006544 <HAL_ADC_ConfigChannel+0x254>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d107      	bne.n	80064c2 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4619      	mov	r1, r3
 80064bc:	4610      	mov	r0, r2
 80064be:	f7ff faf3 	bl	8005aa8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	da32      	bge.n	8006530 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80064ca:	481f      	ldr	r0, [pc, #124]	; (8006548 <HAL_ADC_ConfigChannel+0x258>)
 80064cc:	f7ff fa64 	bl	8005998 <LL_ADC_GetCommonPathInternalCh>
 80064d0:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a1d      	ldr	r2, [pc, #116]	; (800654c <HAL_ADC_ConfigChannel+0x25c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d107      	bne.n	80064ec <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80064e2:	4619      	mov	r1, r3
 80064e4:	4818      	ldr	r0, [pc, #96]	; (8006548 <HAL_ADC_ConfigChannel+0x258>)
 80064e6:	f7ff fa45 	bl	8005974 <LL_ADC_SetCommonPathInternalCh>
 80064ea:	e021      	b.n	8006530 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a19      	ldr	r2, [pc, #100]	; (8006558 <HAL_ADC_ConfigChannel+0x268>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d107      	bne.n	8006506 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064fc:	4619      	mov	r1, r3
 80064fe:	4812      	ldr	r0, [pc, #72]	; (8006548 <HAL_ADC_ConfigChannel+0x258>)
 8006500:	f7ff fa38 	bl	8005974 <LL_ADC_SetCommonPathInternalCh>
 8006504:	e014      	b.n	8006530 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a14      	ldr	r2, [pc, #80]	; (800655c <HAL_ADC_ConfigChannel+0x26c>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d10f      	bne.n	8006530 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006516:	4619      	mov	r1, r3
 8006518:	480b      	ldr	r0, [pc, #44]	; (8006548 <HAL_ADC_ConfigChannel+0x258>)
 800651a:	f7ff fa2b 	bl	8005974 <LL_ADC_SetCommonPathInternalCh>
 800651e:	e007      	b.n	8006530 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006524:	f043 0220 	orr.w	r2, r3, #32
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8006538:	7ffb      	ldrb	r3, [r7, #31]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3720      	adds	r7, #32
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	80000004 	.word	0x80000004
 8006548:	40012708 	.word	0x40012708
 800654c:	b0001000 	.word	0xb0001000
 8006550:	20000000 	.word	0x20000000
 8006554:	053e2d63 	.word	0x053e2d63
 8006558:	b8004000 	.word	0xb8004000
 800655c:	b4002000 	.word	0xb4002000

08006560 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff fb71 	bl	8005c54 <LL_ADC_REG_IsConversionOngoing>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d033      	beq.n	80065e0 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4618      	mov	r0, r3
 800657e:	f7ff fb31 	bl	8005be4 <LL_ADC_IsDisableOngoing>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d104      	bne.n	8006592 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4618      	mov	r0, r3
 800658e:	f7ff fb4e 	bl	8005c2e <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006592:	f7fc f96d 	bl	8002870 <HAL_GetTick>
 8006596:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8006598:	e01b      	b.n	80065d2 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800659a:	f7fc f969 	bl	8002870 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d914      	bls.n	80065d2 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f003 0304 	and.w	r3, r3, #4
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00d      	beq.n	80065d2 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ba:	f043 0210 	orr.w	r2, r3, #16
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c6:	f043 0201 	orr.w	r2, r3, #1
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e007      	b.n	80065e2 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1dc      	bne.n	800659a <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
	...

080065ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80065f4:	2300      	movs	r3, #0
 80065f6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7ff fadf 	bl	8005bc0 <LL_ADC_IsEnabled>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d169      	bne.n	80066dc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689a      	ldr	r2, [r3, #8]
 800660e:	4b36      	ldr	r3, [pc, #216]	; (80066e8 <ADC_Enable+0xfc>)
 8006610:	4013      	ands	r3, r2
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00d      	beq.n	8006632 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800661a:	f043 0210 	orr.w	r2, r3, #16
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006626:	f043 0201 	orr.w	r2, r3, #1
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e055      	b.n	80066de <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4618      	mov	r0, r3
 8006638:	f7ff fa9c 	bl	8005b74 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800663c:	482b      	ldr	r0, [pc, #172]	; (80066ec <ADC_Enable+0x100>)
 800663e:	f7ff f9ab 	bl	8005998 <LL_ADC_GetCommonPathInternalCh>
 8006642:	4603      	mov	r3, r0
 8006644:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00f      	beq.n	800666c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800664c:	4b28      	ldr	r3, [pc, #160]	; (80066f0 <ADC_Enable+0x104>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	099b      	lsrs	r3, r3, #6
 8006652:	4a28      	ldr	r2, [pc, #160]	; (80066f4 <ADC_Enable+0x108>)
 8006654:	fba2 2303 	umull	r2, r3, r2, r3
 8006658:	099b      	lsrs	r3, r3, #6
 800665a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 800665c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800665e:	e002      	b.n	8006666 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	3b01      	subs	r3, #1
 8006664:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1f9      	bne.n	8006660 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	7e5b      	ldrb	r3, [r3, #25]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d033      	beq.n	80066dc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8006674:	f7fc f8fc 	bl	8002870 <HAL_GetTick>
 8006678:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800667a:	e028      	b.n	80066ce <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4618      	mov	r0, r3
 8006682:	f7ff fa9d 	bl	8005bc0 <LL_ADC_IsEnabled>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d104      	bne.n	8006696 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4618      	mov	r0, r3
 8006692:	f7ff fa6f 	bl	8005b74 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006696:	f7fc f8eb 	bl	8002870 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d914      	bls.n	80066ce <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d00d      	beq.n	80066ce <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b6:	f043 0210 	orr.w	r2, r3, #16
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066c2:	f043 0201 	orr.w	r2, r3, #1
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e007      	b.n	80066de <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d1cf      	bne.n	800667c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	80000017 	.word	0x80000017
 80066ec:	40012708 	.word	0x40012708
 80066f0:	20000000 	.word	0x20000000
 80066f4:	053e2d63 	.word	0x053e2d63

080066f8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4618      	mov	r0, r3
 8006706:	f7ff fa6d 	bl	8005be4 <LL_ADC_IsDisableOngoing>
 800670a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4618      	mov	r0, r3
 8006712:	f7ff fa55 	bl	8005bc0 <LL_ADC_IsEnabled>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d047      	beq.n	80067ac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d144      	bne.n	80067ac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f003 0305 	and.w	r3, r3, #5
 800672c:	2b01      	cmp	r3, #1
 800672e:	d10c      	bne.n	800674a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4618      	mov	r0, r3
 8006736:	f7ff fa30 	bl	8005b9a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2203      	movs	r2, #3
 8006740:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006742:	f7fc f895 	bl	8002870 <HAL_GetTick>
 8006746:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006748:	e029      	b.n	800679e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800674e:	f043 0210 	orr.w	r2, r3, #16
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800675a:	f043 0201 	orr.w	r2, r3, #1
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e023      	b.n	80067ae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006766:	f7fc f883 	bl	8002870 <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	2b02      	cmp	r3, #2
 8006772:	d914      	bls.n	800679e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00d      	beq.n	800679e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006786:	f043 0210 	orr.w	r2, r3, #16
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006792:	f043 0201 	orr.w	r2, r3, #1
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e007      	b.n	80067ae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1dc      	bne.n	8006766 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <LL_ADC_SetCalibrationFactor>:
{
 80067b6:	b480      	push	{r7}
 80067b8:	b083      	sub	sp, #12
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80067c6:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	431a      	orrs	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	bc80      	pop	{r7}
 80067dc:	4770      	bx	lr

080067de <LL_ADC_GetCalibrationFactor>:
{
 80067de:	b480      	push	{r7}
 80067e0:	b083      	sub	sp, #12
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80067ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bc80      	pop	{r7}
 80067f8:	4770      	bx	lr

080067fa <LL_ADC_Enable>:
{
 80067fa:	b480      	push	{r7}
 80067fc:	b083      	sub	sp, #12
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800680a:	f023 0317 	bic.w	r3, r3, #23
 800680e:	f043 0201 	orr.w	r2, r3, #1
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	609a      	str	r2, [r3, #8]
}
 8006816:	bf00      	nop
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	bc80      	pop	{r7}
 800681e:	4770      	bx	lr

08006820 <LL_ADC_Disable>:
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006830:	f023 0317 	bic.w	r3, r3, #23
 8006834:	f043 0202 	orr.w	r2, r3, #2
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	609a      	str	r2, [r3, #8]
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	bc80      	pop	{r7}
 8006844:	4770      	bx	lr

08006846 <LL_ADC_IsEnabled>:
{
 8006846:	b480      	push	{r7}
 8006848:	b083      	sub	sp, #12
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	2b01      	cmp	r3, #1
 8006858:	d101      	bne.n	800685e <LL_ADC_IsEnabled+0x18>
 800685a:	2301      	movs	r3, #1
 800685c:	e000      	b.n	8006860 <LL_ADC_IsEnabled+0x1a>
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	bc80      	pop	{r7}
 8006868:	4770      	bx	lr

0800686a <LL_ADC_StartCalibration>:
{
 800686a:	b480      	push	{r7}
 800686c:	b083      	sub	sp, #12
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800687a:	f023 0317 	bic.w	r3, r3, #23
 800687e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	609a      	str	r2, [r3, #8]
}
 8006886:	bf00      	nop
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	bc80      	pop	{r7}
 800688e:	4770      	bx	lr

08006890 <LL_ADC_IsCalibrationOnGoing>:
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068a4:	d101      	bne.n	80068aa <LL_ADC_IsCalibrationOnGoing+0x1a>
 80068a6:	2301      	movs	r3, #1
 80068a8:	e000      	b.n	80068ac <LL_ADC_IsCalibrationOnGoing+0x1c>
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bc80      	pop	{r7}
 80068b4:	4770      	bx	lr

080068b6 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b088      	sub	sp, #32
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80068be:	2300      	movs	r3, #0
 80068c0:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80068c2:	2300      	movs	r3, #0
 80068c4:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d101      	bne.n	80068d4 <HAL_ADCEx_Calibration_Start+0x1e>
 80068d0:	2302      	movs	r3, #2
 80068d2:	e0b9      	b.n	8006a48 <HAL_ADCEx_Calibration_Start+0x192>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f7ff ff0b 	bl	80066f8 <ADC_Disable>
 80068e2:	4603      	mov	r3, r0
 80068e4:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7ff ffab 	bl	8006846 <LL_ADC_IsEnabled>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f040 809d 	bne.w	8006a32 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006900:	f043 0202 	orr.w	r2, r3, #2
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68da      	ldr	r2, [r3, #12]
 800690e:	f248 0303 	movw	r3, #32771	; 0x8003
 8006912:	4013      	ands	r3, r2
 8006914:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	6812      	ldr	r2, [r2, #0]
 8006920:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006924:	f023 0303 	bic.w	r3, r3, #3
 8006928:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800692a:	2300      	movs	r3, #0
 800692c:	61fb      	str	r3, [r7, #28]
 800692e:	e02e      	b.n	800698e <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4618      	mov	r0, r3
 8006936:	f7ff ff98 	bl	800686a <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800693a:	e014      	b.n	8006966 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	3301      	adds	r3, #1
 8006940:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8006948:	d30d      	bcc.n	8006966 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800694e:	f023 0312 	bic.w	r3, r3, #18
 8006952:	f043 0210 	orr.w	r2, r3, #16
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e070      	b.n	8006a48 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4618      	mov	r0, r3
 800696c:	f7ff ff90 	bl	8006890 <LL_ADC_IsCalibrationOnGoing>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1e2      	bne.n	800693c <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4618      	mov	r0, r3
 800697c:	f7ff ff2f 	bl	80067de <LL_ADC_GetCalibrationFactor>
 8006980:	4602      	mov	r2, r0
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	4413      	add	r3, r2
 8006986:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	3301      	adds	r3, #1
 800698c:	61fb      	str	r3, [r7, #28]
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	2b07      	cmp	r3, #7
 8006992:	d9cd      	bls.n	8006930 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8006994:	69ba      	ldr	r2, [r7, #24]
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	fbb2 f3f3 	udiv	r3, r2, r3
 800699c:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7ff ff29 	bl	80067fa <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	69b9      	ldr	r1, [r7, #24]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7ff ff01 	bl	80067b6 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7ff ff31 	bl	8006820 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80069be:	f7fb ff57 	bl	8002870 <HAL_GetTick>
 80069c2:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80069c4:	e01c      	b.n	8006a00 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80069c6:	f7fb ff53 	bl	8002870 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d915      	bls.n	8006a00 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4618      	mov	r0, r3
 80069da:	f7ff ff34 	bl	8006846 <LL_ADC_IsEnabled>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00d      	beq.n	8006a00 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e8:	f043 0210 	orr.w	r2, r3, #16
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069f4:	f043 0201 	orr.w	r2, r3, #1
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e023      	b.n	8006a48 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7ff ff1e 	bl	8006846 <LL_ADC_IsEnabled>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1da      	bne.n	80069c6 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68d9      	ldr	r1, [r3, #12]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	693a      	ldr	r2, [r7, #16]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a24:	f023 0303 	bic.w	r3, r3, #3
 8006a28:	f043 0201 	orr.w	r2, r3, #1
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	659a      	str	r2, [r3, #88]	; 0x58
 8006a30:	e005      	b.n	8006a3e <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a36:	f043 0210 	orr.w	r2, r3, #16
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8006a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3720      	adds	r7, #32
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f003 0307 	and.w	r3, r3, #7
 8006a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a60:	4b0c      	ldr	r3, [pc, #48]	; (8006a94 <__NVIC_SetPriorityGrouping+0x44>)
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a82:	4a04      	ldr	r2, [pc, #16]	; (8006a94 <__NVIC_SetPriorityGrouping+0x44>)
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	60d3      	str	r3, [r2, #12]
}
 8006a88:	bf00      	nop
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bc80      	pop	{r7}
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	e000ed00 	.word	0xe000ed00

08006a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a9c:	4b04      	ldr	r3, [pc, #16]	; (8006ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	0a1b      	lsrs	r3, r3, #8
 8006aa2:	f003 0307 	and.w	r3, r3, #7
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bc80      	pop	{r7}
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	e000ed00 	.word	0xe000ed00

08006ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	4603      	mov	r3, r0
 8006abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	db0b      	blt.n	8006ade <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ac6:	79fb      	ldrb	r3, [r7, #7]
 8006ac8:	f003 021f 	and.w	r2, r3, #31
 8006acc:	4906      	ldr	r1, [pc, #24]	; (8006ae8 <__NVIC_EnableIRQ+0x34>)
 8006ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ad2:	095b      	lsrs	r3, r3, #5
 8006ad4:	2001      	movs	r0, #1
 8006ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8006ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006ade:	bf00      	nop
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bc80      	pop	{r7}
 8006ae6:	4770      	bx	lr
 8006ae8:	e000e100 	.word	0xe000e100

08006aec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	4603      	mov	r3, r0
 8006af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	db12      	blt.n	8006b24 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006afe:	79fb      	ldrb	r3, [r7, #7]
 8006b00:	f003 021f 	and.w	r2, r3, #31
 8006b04:	490a      	ldr	r1, [pc, #40]	; (8006b30 <__NVIC_DisableIRQ+0x44>)
 8006b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b0a:	095b      	lsrs	r3, r3, #5
 8006b0c:	2001      	movs	r0, #1
 8006b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8006b12:	3320      	adds	r3, #32
 8006b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006b18:	f3bf 8f4f 	dsb	sy
}
 8006b1c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006b1e:	f3bf 8f6f 	isb	sy
}
 8006b22:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bc80      	pop	{r7}
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	e000e100 	.word	0xe000e100

08006b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	6039      	str	r1, [r7, #0]
 8006b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	db0a      	blt.n	8006b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	490c      	ldr	r1, [pc, #48]	; (8006b80 <__NVIC_SetPriority+0x4c>)
 8006b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b52:	0112      	lsls	r2, r2, #4
 8006b54:	b2d2      	uxtb	r2, r2
 8006b56:	440b      	add	r3, r1
 8006b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006b5c:	e00a      	b.n	8006b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	4908      	ldr	r1, [pc, #32]	; (8006b84 <__NVIC_SetPriority+0x50>)
 8006b64:	79fb      	ldrb	r3, [r7, #7]
 8006b66:	f003 030f 	and.w	r3, r3, #15
 8006b6a:	3b04      	subs	r3, #4
 8006b6c:	0112      	lsls	r2, r2, #4
 8006b6e:	b2d2      	uxtb	r2, r2
 8006b70:	440b      	add	r3, r1
 8006b72:	761a      	strb	r2, [r3, #24]
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bc80      	pop	{r7}
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	e000e100 	.word	0xe000e100
 8006b84:	e000ed00 	.word	0xe000ed00

08006b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b089      	sub	sp, #36	; 0x24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f003 0307 	and.w	r3, r3, #7
 8006b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	f1c3 0307 	rsb	r3, r3, #7
 8006ba2:	2b04      	cmp	r3, #4
 8006ba4:	bf28      	it	cs
 8006ba6:	2304      	movcs	r3, #4
 8006ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	3304      	adds	r3, #4
 8006bae:	2b06      	cmp	r3, #6
 8006bb0:	d902      	bls.n	8006bb8 <NVIC_EncodePriority+0x30>
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	3b03      	subs	r3, #3
 8006bb6:	e000      	b.n	8006bba <NVIC_EncodePriority+0x32>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc6:	43da      	mvns	r2, r3
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	401a      	ands	r2, r3
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006bd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8006bda:	43d9      	mvns	r1, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006be0:	4313      	orrs	r3, r2
         );
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3724      	adds	r7, #36	; 0x24
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bc80      	pop	{r7}
 8006bea:	4770      	bx	lr

08006bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f7ff ff2b 	bl	8006a50 <__NVIC_SetPriorityGrouping>
}
 8006bfa:	bf00      	nop
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b086      	sub	sp, #24
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	4603      	mov	r3, r0
 8006c0a:	60b9      	str	r1, [r7, #8]
 8006c0c:	607a      	str	r2, [r7, #4]
 8006c0e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006c10:	f7ff ff42 	bl	8006a98 <__NVIC_GetPriorityGrouping>
 8006c14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	68b9      	ldr	r1, [r7, #8]
 8006c1a:	6978      	ldr	r0, [r7, #20]
 8006c1c:	f7ff ffb4 	bl	8006b88 <NVIC_EncodePriority>
 8006c20:	4602      	mov	r2, r0
 8006c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c26:	4611      	mov	r1, r2
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7ff ff83 	bl	8006b34 <__NVIC_SetPriority>
}
 8006c2e:	bf00      	nop
 8006c30:	3718      	adds	r7, #24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b082      	sub	sp, #8
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7ff ff35 	bl	8006ab4 <__NVIC_EnableIRQ>
}
 8006c4a:	bf00      	nop
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b082      	sub	sp, #8
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	4603      	mov	r3, r0
 8006c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7ff ff43 	bl	8006aec <__NVIC_DisableIRQ>
}
 8006c66:	bf00      	nop
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
	...

08006c70 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e08e      	b.n	8006da0 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	461a      	mov	r2, r3
 8006c88:	4b47      	ldr	r3, [pc, #284]	; (8006da8 <HAL_DMA_Init+0x138>)
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d80f      	bhi.n	8006cae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	461a      	mov	r2, r3
 8006c94:	4b45      	ldr	r3, [pc, #276]	; (8006dac <HAL_DMA_Init+0x13c>)
 8006c96:	4413      	add	r3, r2
 8006c98:	4a45      	ldr	r2, [pc, #276]	; (8006db0 <HAL_DMA_Init+0x140>)
 8006c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c9e:	091b      	lsrs	r3, r3, #4
 8006ca0:	009a      	lsls	r2, r3, #2
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a42      	ldr	r2, [pc, #264]	; (8006db4 <HAL_DMA_Init+0x144>)
 8006caa:	641a      	str	r2, [r3, #64]	; 0x40
 8006cac:	e00e      	b.n	8006ccc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	4b40      	ldr	r3, [pc, #256]	; (8006db8 <HAL_DMA_Init+0x148>)
 8006cb6:	4413      	add	r3, r2
 8006cb8:	4a3d      	ldr	r2, [pc, #244]	; (8006db0 <HAL_DMA_Init+0x140>)
 8006cba:	fba2 2303 	umull	r2, r3, r2, r3
 8006cbe:	091b      	lsrs	r3, r3, #4
 8006cc0:	009a      	lsls	r2, r3, #2
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a3c      	ldr	r2, [pc, #240]	; (8006dbc <HAL_DMA_Init+0x14c>)
 8006cca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	6812      	ldr	r2, [r2, #0]
 8006cde:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce6:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6819      	ldr	r1, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	689a      	ldr	r2, [r3, #8]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	431a      	orrs	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	431a      	orrs	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	431a      	orrs	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	431a      	orrs	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fb24 	bl	800736c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d2c:	d102      	bne.n	8006d34 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006d40:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006d4a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d010      	beq.n	8006d76 <HAL_DMA_Init+0x106>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	2b04      	cmp	r3, #4
 8006d5a:	d80c      	bhi.n	8006d76 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fb4d 	bl	80073fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d66:	2200      	movs	r2, #0
 8006d68:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006d72:	605a      	str	r2, [r3, #4]
 8006d74:	e008      	b.n	8006d88 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	40020407 	.word	0x40020407
 8006dac:	bffdfff8 	.word	0xbffdfff8
 8006db0:	cccccccd 	.word	0xcccccccd
 8006db4:	40020000 	.word	0x40020000
 8006db8:	bffdfbf8 	.word	0xbffdfbf8
 8006dbc:	40020400 	.word	0x40020400

08006dc0 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e07b      	b.n	8006eca <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f022 0201 	bic.w	r2, r2, #1
 8006de0:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	461a      	mov	r2, r3
 8006de8:	4b3a      	ldr	r3, [pc, #232]	; (8006ed4 <HAL_DMA_DeInit+0x114>)
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d80f      	bhi.n	8006e0e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	461a      	mov	r2, r3
 8006df4:	4b38      	ldr	r3, [pc, #224]	; (8006ed8 <HAL_DMA_DeInit+0x118>)
 8006df6:	4413      	add	r3, r2
 8006df8:	4a38      	ldr	r2, [pc, #224]	; (8006edc <HAL_DMA_DeInit+0x11c>)
 8006dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8006dfe:	091b      	lsrs	r3, r3, #4
 8006e00:	009a      	lsls	r2, r3, #2
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a35      	ldr	r2, [pc, #212]	; (8006ee0 <HAL_DMA_DeInit+0x120>)
 8006e0a:	641a      	str	r2, [r3, #64]	; 0x40
 8006e0c:	e00e      	b.n	8006e2c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	461a      	mov	r2, r3
 8006e14:	4b33      	ldr	r3, [pc, #204]	; (8006ee4 <HAL_DMA_DeInit+0x124>)
 8006e16:	4413      	add	r3, r2
 8006e18:	4a30      	ldr	r2, [pc, #192]	; (8006edc <HAL_DMA_DeInit+0x11c>)
 8006e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e1e:	091b      	lsrs	r3, r3, #4
 8006e20:	009a      	lsls	r2, r3, #2
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a2f      	ldr	r2, [pc, #188]	; (8006ee8 <HAL_DMA_DeInit+0x128>)
 8006e2a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2200      	movs	r2, #0
 8006e32:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e38:	f003 021c 	and.w	r2, r3, #28
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e40:	2101      	movs	r1, #1
 8006e42:	fa01 f202 	lsl.w	r2, r1, r2
 8006e46:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fa8f 	bl	800736c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e52:	2200      	movs	r2, #0
 8006e54:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006e5e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00f      	beq.n	8006e88 <HAL_DMA_DeInit+0xc8>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	2b04      	cmp	r3, #4
 8006e6e:	d80b      	bhi.n	8006e88 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fac3 	bl	80073fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006e86:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3708      	adds	r7, #8
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	40020407 	.word	0x40020407
 8006ed8:	bffdfff8 	.word	0xbffdfff8
 8006edc:	cccccccd 	.word	0xcccccccd
 8006ee0:	40020000 	.word	0x40020000
 8006ee4:	bffdfbf8 	.word	0xbffdfbf8
 8006ee8:	40020400 	.word	0x40020400

08006eec <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
 8006ef8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d101      	bne.n	8006f0c <HAL_DMA_Start_IT+0x20>
 8006f08:	2302      	movs	r3, #2
 8006f0a:	e069      	b.n	8006fe0 <HAL_DMA_Start_IT+0xf4>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d155      	bne.n	8006fcc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f022 0201 	bic.w	r2, r2, #1
 8006f3c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	68b9      	ldr	r1, [r7, #8]
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 f9d3 	bl	80072f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d008      	beq.n	8006f64 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f042 020e 	orr.w	r2, r2, #14
 8006f60:	601a      	str	r2, [r3, #0]
 8006f62:	e00f      	b.n	8006f84 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f022 0204 	bic.w	r2, r2, #4
 8006f72:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f042 020a 	orr.w	r2, r2, #10
 8006f82:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d007      	beq.n	8006fa2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fa0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d007      	beq.n	8006fba <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fb8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f042 0201 	orr.w	r2, r2, #1
 8006fc8:	601a      	str	r2, [r3, #0]
 8006fca:	e008      	b.n	8006fde <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2280      	movs	r2, #128	; 0x80
 8006fd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3718      	adds	r7, #24
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e04f      	b.n	800709a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b02      	cmp	r3, #2
 8007004:	d008      	beq.n	8007018 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2204      	movs	r2, #4
 800700a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e040      	b.n	800709a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 020e 	bic.w	r2, r2, #14
 8007026:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007032:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007036:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f022 0201 	bic.w	r2, r2, #1
 8007046:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800704c:	f003 021c 	and.w	r2, r3, #28
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007054:	2101      	movs	r1, #1
 8007056:	fa01 f202 	lsl.w	r2, r1, r2
 800705a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007064:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00c      	beq.n	8007088 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007078:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800707c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007086:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	bc80      	pop	{r7}
 80070a2:	4770      	bx	lr

080070a4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070ac:	2300      	movs	r3, #0
 80070ae:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d005      	beq.n	80070c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2204      	movs	r2, #4
 80070c0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	73fb      	strb	r3, [r7, #15]
 80070c6:	e047      	b.n	8007158 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f022 020e 	bic.w	r2, r2, #14
 80070d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f022 0201 	bic.w	r2, r2, #1
 80070e6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070fc:	f003 021c 	and.w	r2, r3, #28
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007104:	2101      	movs	r1, #1
 8007106:	fa01 f202 	lsl.w	r2, r1, r2
 800710a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007114:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00c      	beq.n	8007138 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007128:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800712c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007136:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714c:	2b00      	cmp	r3, #0
 800714e:	d003      	beq.n	8007158 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	4798      	blx	r3
    }
  }
  return status;
 8007158:	7bfb      	ldrb	r3, [r7, #15]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
	...

08007164 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007180:	f003 031c 	and.w	r3, r3, #28
 8007184:	2204      	movs	r2, #4
 8007186:	409a      	lsls	r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	4013      	ands	r3, r2
 800718c:	2b00      	cmp	r3, #0
 800718e:	d027      	beq.n	80071e0 <HAL_DMA_IRQHandler+0x7c>
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	f003 0304 	and.w	r3, r3, #4
 8007196:	2b00      	cmp	r3, #0
 8007198:	d022      	beq.n	80071e0 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0320 	and.w	r3, r3, #32
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d107      	bne.n	80071b8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f022 0204 	bic.w	r2, r2, #4
 80071b6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071bc:	f003 021c 	and.w	r2, r3, #28
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c4:	2104      	movs	r1, #4
 80071c6:	fa01 f202 	lsl.w	r2, r1, r2
 80071ca:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 8081 	beq.w	80072d8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80071de:	e07b      	b.n	80072d8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e4:	f003 031c 	and.w	r3, r3, #28
 80071e8:	2202      	movs	r2, #2
 80071ea:	409a      	lsls	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	4013      	ands	r3, r2
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d03d      	beq.n	8007270 <HAL_DMA_IRQHandler+0x10c>
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	f003 0302 	and.w	r3, r3, #2
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d038      	beq.n	8007270 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 0320 	and.w	r3, r3, #32
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10b      	bne.n	8007224 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 020a 	bic.w	r2, r2, #10
 800721a:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	461a      	mov	r2, r3
 800722a:	4b2e      	ldr	r3, [pc, #184]	; (80072e4 <HAL_DMA_IRQHandler+0x180>)
 800722c:	429a      	cmp	r2, r3
 800722e:	d909      	bls.n	8007244 <HAL_DMA_IRQHandler+0xe0>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007234:	f003 031c 	and.w	r3, r3, #28
 8007238:	4a2b      	ldr	r2, [pc, #172]	; (80072e8 <HAL_DMA_IRQHandler+0x184>)
 800723a:	2102      	movs	r1, #2
 800723c:	fa01 f303 	lsl.w	r3, r1, r3
 8007240:	6053      	str	r3, [r2, #4]
 8007242:	e008      	b.n	8007256 <HAL_DMA_IRQHandler+0xf2>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007248:	f003 031c 	and.w	r3, r3, #28
 800724c:	4a27      	ldr	r2, [pc, #156]	; (80072ec <HAL_DMA_IRQHandler+0x188>)
 800724e:	2102      	movs	r1, #2
 8007250:	fa01 f303 	lsl.w	r3, r1, r3
 8007254:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007262:	2b00      	cmp	r3, #0
 8007264:	d038      	beq.n	80072d8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800726e:	e033      	b.n	80072d8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007274:	f003 031c 	and.w	r3, r3, #28
 8007278:	2208      	movs	r2, #8
 800727a:	409a      	lsls	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4013      	ands	r3, r2
 8007280:	2b00      	cmp	r3, #0
 8007282:	d02a      	beq.n	80072da <HAL_DMA_IRQHandler+0x176>
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	f003 0308 	and.w	r3, r3, #8
 800728a:	2b00      	cmp	r3, #0
 800728c:	d025      	beq.n	80072da <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f022 020e 	bic.w	r2, r2, #14
 800729c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072a2:	f003 021c 	and.w	r2, r3, #28
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072aa:	2101      	movs	r1, #1
 80072ac:	fa01 f202 	lsl.w	r2, r1, r2
 80072b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d004      	beq.n	80072da <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80072d8:	bf00      	nop
 80072da:	bf00      	nop
}
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	40020080 	.word	0x40020080
 80072e8:	40020400 	.word	0x40020400
 80072ec:	40020000 	.word	0x40020000

080072f0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
 80072fc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007306:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800730c:	2b00      	cmp	r3, #0
 800730e:	d004      	beq.n	800731a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007318:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731e:	f003 021c 	and.w	r2, r3, #28
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007326:	2101      	movs	r1, #1
 8007328:	fa01 f202 	lsl.w	r2, r1, r2
 800732c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	683a      	ldr	r2, [r7, #0]
 8007334:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	2b10      	cmp	r3, #16
 800733c:	d108      	bne.n	8007350 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800734e:	e007      	b.n	8007360 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	60da      	str	r2, [r3, #12]
}
 8007360:	bf00      	nop
 8007362:	3714      	adds	r7, #20
 8007364:	46bd      	mov	sp, r7
 8007366:	bc80      	pop	{r7}
 8007368:	4770      	bx	lr
	...

0800736c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	461a      	mov	r2, r3
 800737a:	4b1c      	ldr	r3, [pc, #112]	; (80073ec <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 800737c:	429a      	cmp	r2, r3
 800737e:	d813      	bhi.n	80073a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007384:	089b      	lsrs	r3, r3, #2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800738c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	b2db      	uxtb	r3, r3
 800739a:	3b08      	subs	r3, #8
 800739c:	4a14      	ldr	r2, [pc, #80]	; (80073f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800739e:	fba2 2303 	umull	r2, r3, r2, r3
 80073a2:	091b      	lsrs	r3, r3, #4
 80073a4:	60fb      	str	r3, [r7, #12]
 80073a6:	e011      	b.n	80073cc <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ac:	089b      	lsrs	r3, r3, #2
 80073ae:	009a      	lsls	r2, r3, #2
 80073b0:	4b10      	ldr	r3, [pc, #64]	; (80073f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80073b2:	4413      	add	r3, r2
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	3b08      	subs	r3, #8
 80073c0:	4a0b      	ldr	r2, [pc, #44]	; (80073f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80073c2:	fba2 2303 	umull	r2, r3, r2, r3
 80073c6:	091b      	lsrs	r3, r3, #4
 80073c8:	3307      	adds	r3, #7
 80073ca:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a0a      	ldr	r2, [pc, #40]	; (80073f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80073d0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f003 031f 	and.w	r3, r3, #31
 80073d8:	2201      	movs	r2, #1
 80073da:	409a      	lsls	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	651a      	str	r2, [r3, #80]	; 0x50
}
 80073e0:	bf00      	nop
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bc80      	pop	{r7}
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	40020407 	.word	0x40020407
 80073f0:	cccccccd 	.word	0xcccccccd
 80073f4:	4002081c 	.word	0x4002081c
 80073f8:	40020880 	.word	0x40020880

080073fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800740c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	4b0a      	ldr	r3, [pc, #40]	; (800743c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007412:	4413      	add	r3, r2
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	461a      	mov	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a08      	ldr	r2, [pc, #32]	; (8007440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007420:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	3b01      	subs	r3, #1
 8007426:	f003 0303 	and.w	r3, r3, #3
 800742a:	2201      	movs	r2, #1
 800742c:	409a      	lsls	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007432:	bf00      	nop
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	bc80      	pop	{r7}
 800743a:	4770      	bx	lr
 800743c:	1000823f 	.word	0x1000823f
 8007440:	40020940 	.word	0x40020940

08007444 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007452:	4b1c      	ldr	r3, [pc, #112]	; (80074c4 <HAL_FLASH_Program+0x80>)
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d101      	bne.n	800745e <HAL_FLASH_Program+0x1a>
 800745a:	2302      	movs	r3, #2
 800745c:	e02d      	b.n	80074ba <HAL_FLASH_Program+0x76>
 800745e:	4b19      	ldr	r3, [pc, #100]	; (80074c4 <HAL_FLASH_Program+0x80>)
 8007460:	2201      	movs	r2, #1
 8007462:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007464:	4b17      	ldr	r3, [pc, #92]	; (80074c4 <HAL_FLASH_Program+0x80>)
 8007466:	2200      	movs	r2, #0
 8007468:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800746a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800746e:	f000 f869 	bl	8007544 <FLASH_WaitForLastOperation>
 8007472:	4603      	mov	r3, r0
 8007474:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8007476:	7dfb      	ldrb	r3, [r7, #23]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d11a      	bne.n	80074b2 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d105      	bne.n	800748e <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8007482:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007486:	68b8      	ldr	r0, [r7, #8]
 8007488:	f000 f8be 	bl	8007608 <FLASH_Program_DoubleWord>
 800748c:	e004      	b.n	8007498 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	4619      	mov	r1, r3
 8007492:	68b8      	ldr	r0, [r7, #8]
 8007494:	f000 f8de 	bl	8007654 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007498:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800749c:	f000 f852 	bl	8007544 <FLASH_WaitForLastOperation>
 80074a0:	4603      	mov	r3, r0
 80074a2:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80074a4:	4b08      	ldr	r3, [pc, #32]	; (80074c8 <HAL_FLASH_Program+0x84>)
 80074a6:	695a      	ldr	r2, [r3, #20]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	43db      	mvns	r3, r3
 80074ac:	4906      	ldr	r1, [pc, #24]	; (80074c8 <HAL_FLASH_Program+0x84>)
 80074ae:	4013      	ands	r3, r2
 80074b0:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80074b2:	4b04      	ldr	r3, [pc, #16]	; (80074c4 <HAL_FLASH_Program+0x80>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80074b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3718      	adds	r7, #24
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	2000058c 	.word	0x2000058c
 80074c8:	58004000 	.word	0x58004000

080074cc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80074d6:	4b0b      	ldr	r3, [pc, #44]	; (8007504 <HAL_FLASH_Unlock+0x38>)
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	da0b      	bge.n	80074f6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80074de:	4b09      	ldr	r3, [pc, #36]	; (8007504 <HAL_FLASH_Unlock+0x38>)
 80074e0:	4a09      	ldr	r2, [pc, #36]	; (8007508 <HAL_FLASH_Unlock+0x3c>)
 80074e2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80074e4:	4b07      	ldr	r3, [pc, #28]	; (8007504 <HAL_FLASH_Unlock+0x38>)
 80074e6:	4a09      	ldr	r2, [pc, #36]	; (800750c <HAL_FLASH_Unlock+0x40>)
 80074e8:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80074ea:	4b06      	ldr	r3, [pc, #24]	; (8007504 <HAL_FLASH_Unlock+0x38>)
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	da01      	bge.n	80074f6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80074f6:	79fb      	ldrb	r3, [r7, #7]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bc80      	pop	{r7}
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	58004000 	.word	0x58004000
 8007508:	45670123 	.word	0x45670123
 800750c:	cdef89ab 	.word	0xcdef89ab

08007510 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800751a:	4b09      	ldr	r3, [pc, #36]	; (8007540 <HAL_FLASH_Lock+0x30>)
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	4a08      	ldr	r2, [pc, #32]	; (8007540 <HAL_FLASH_Lock+0x30>)
 8007520:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007524:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8007526:	4b06      	ldr	r3, [pc, #24]	; (8007540 <HAL_FLASH_Lock+0x30>)
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	2b00      	cmp	r3, #0
 800752c:	db01      	blt.n	8007532 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007532:	79fb      	ldrb	r3, [r7, #7]
}
 8007534:	4618      	mov	r0, r3
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	bc80      	pop	{r7}
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	58004000 	.word	0x58004000

08007544 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800754c:	f7fb f990 	bl	8002870 <HAL_GetTick>
 8007550:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007552:	e009      	b.n	8007568 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8007554:	f7fb f98c 	bl	8002870 <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	429a      	cmp	r2, r3
 8007562:	d801      	bhi.n	8007568 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8007564:	2303      	movs	r3, #3
 8007566:	e047      	b.n	80075f8 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007568:	4b25      	ldr	r3, [pc, #148]	; (8007600 <FLASH_WaitForLastOperation+0xbc>)
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007574:	d0ee      	beq.n	8007554 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8007576:	4b22      	ldr	r3, [pc, #136]	; (8007600 <FLASH_WaitForLastOperation+0xbc>)
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	2b00      	cmp	r3, #0
 8007584:	d002      	beq.n	800758c <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007586:	4b1e      	ldr	r3, [pc, #120]	; (8007600 <FLASH_WaitForLastOperation+0xbc>)
 8007588:	2201      	movs	r2, #1
 800758a:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8007592:	4013      	ands	r3, r2
 8007594:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d007      	beq.n	80075b0 <FLASH_WaitForLastOperation+0x6c>
 80075a0:	4b17      	ldr	r3, [pc, #92]	; (8007600 <FLASH_WaitForLastOperation+0xbc>)
 80075a2:	699a      	ldr	r2, [r3, #24]
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80075aa:	4915      	ldr	r1, [pc, #84]	; (8007600 <FLASH_WaitForLastOperation+0xbc>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	618b      	str	r3, [r1, #24]
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d004      	beq.n	80075c4 <FLASH_WaitForLastOperation+0x80>
 80075ba:	4a11      	ldr	r2, [pc, #68]	; (8007600 <FLASH_WaitForLastOperation+0xbc>)
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80075c2:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00e      	beq.n	80075e8 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80075ca:	4a0e      	ldr	r2, [pc, #56]	; (8007604 <FLASH_WaitForLastOperation+0xc0>)
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e011      	b.n	80075f8 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80075d4:	f7fb f94c 	bl	8002870 <HAL_GetTick>
 80075d8:	4602      	mov	r2, r0
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d801      	bhi.n	80075e8 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e007      	b.n	80075f8 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80075e8:	4b05      	ldr	r3, [pc, #20]	; (8007600 <FLASH_WaitForLastOperation+0xbc>)
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80075f4:	d0ee      	beq.n	80075d4 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	58004000 	.word	0x58004000
 8007604:	2000058c 	.word	0x2000058c

08007608 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007614:	4b0e      	ldr	r3, [pc, #56]	; (8007650 <FLASH_Program_DoubleWord+0x48>)
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	4a0d      	ldr	r2, [pc, #52]	; (8007650 <FLASH_Program_DoubleWord+0x48>)
 800761a:	f043 0301 	orr.w	r3, r3, #1
 800761e:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007626:	f3bf 8f6f 	isb	sy
}
 800762a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800762c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007630:	f04f 0200 	mov.w	r2, #0
 8007634:	f04f 0300 	mov.w	r3, #0
 8007638:	000a      	movs	r2, r1
 800763a:	2300      	movs	r3, #0
 800763c:	68f9      	ldr	r1, [r7, #12]
 800763e:	3104      	adds	r1, #4
 8007640:	4613      	mov	r3, r2
 8007642:	600b      	str	r3, [r1, #0]
}
 8007644:	bf00      	nop
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	bc80      	pop	{r7}
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	58004000 	.word	0x58004000

08007654 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8007654:	b480      	push	{r7}
 8007656:	b089      	sub	sp, #36	; 0x24
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800765e:	2340      	movs	r3, #64	; 0x40
 8007660:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800766a:	4b18      	ldr	r3, [pc, #96]	; (80076cc <FLASH_Program_Fast+0x78>)
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	4a17      	ldr	r2, [pc, #92]	; (80076cc <FLASH_Program_Fast+0x78>)
 8007670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007674:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007676:	f3ef 8310 	mrs	r3, PRIMASK
 800767a:	60fb      	str	r3, [r7, #12]
  return(result);
 800767c:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 800767e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007680:	b672      	cpsid	i
}
 8007682:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	3304      	adds	r3, #4
 8007690:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	3304      	adds	r3, #4
 8007696:	617b      	str	r3, [r7, #20]
    row_index--;
 8007698:	7ffb      	ldrb	r3, [r7, #31]
 800769a:	3b01      	subs	r3, #1
 800769c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800769e:	7ffb      	ldrb	r3, [r7, #31]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1ef      	bne.n	8007684 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 80076a4:	bf00      	nop
 80076a6:	4b09      	ldr	r3, [pc, #36]	; (80076cc <FLASH_Program_Fast+0x78>)
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076b2:	d0f8      	beq.n	80076a6 <FLASH_Program_Fast+0x52>
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	f383 8810 	msr	PRIMASK, r3
}
 80076be:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80076c0:	bf00      	nop
 80076c2:	3724      	adds	r7, #36	; 0x24
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bc80      	pop	{r7}
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	58004000 	.word	0x58004000

080076d0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80076da:	4b28      	ldr	r3, [pc, #160]	; (800777c <HAL_FLASHEx_Erase+0xac>)
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d101      	bne.n	80076e6 <HAL_FLASHEx_Erase+0x16>
 80076e2:	2302      	movs	r3, #2
 80076e4:	e046      	b.n	8007774 <HAL_FLASHEx_Erase+0xa4>
 80076e6:	4b25      	ldr	r3, [pc, #148]	; (800777c <HAL_FLASHEx_Erase+0xac>)
 80076e8:	2201      	movs	r2, #1
 80076ea:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80076ec:	4b23      	ldr	r3, [pc, #140]	; (800777c <HAL_FLASHEx_Erase+0xac>)
 80076ee:	2200      	movs	r2, #0
 80076f0:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80076f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80076f6:	f7ff ff25 	bl	8007544 <FLASH_WaitForLastOperation>
 80076fa:	4603      	mov	r3, r0
 80076fc:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d133      	bne.n	800776c <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2b04      	cmp	r3, #4
 800770a:	d108      	bne.n	800771e <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 800770c:	f000 f838 	bl	8007780 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007710:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007714:	f7ff ff16 	bl	8007544 <FLASH_WaitForLastOperation>
 8007718:	4603      	mov	r3, r0
 800771a:	73fb      	strb	r3, [r7, #15]
 800771c:	e024      	b.n	8007768 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007724:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	60bb      	str	r3, [r7, #8]
 800772c:	e012      	b.n	8007754 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800772e:	68b8      	ldr	r0, [r7, #8]
 8007730:	f000 f836 	bl	80077a0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007734:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007738:	f7ff ff04 	bl	8007544 <FLASH_WaitForLastOperation>
 800773c:	4603      	mov	r3, r0
 800773e:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8007740:	7bfb      	ldrb	r3, [r7, #15]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d003      	beq.n	800774e <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	601a      	str	r2, [r3, #0]
          break;
 800774c:	e00a      	b.n	8007764 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	3301      	adds	r3, #1
 8007752:	60bb      	str	r3, [r7, #8]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685a      	ldr	r2, [r3, #4]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	4413      	add	r3, r2
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	429a      	cmp	r2, r3
 8007762:	d3e4      	bcc.n	800772e <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8007764:	f000 f878 	bl	8007858 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007768:	f000 f832 	bl	80077d0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800776c:	4b03      	ldr	r3, [pc, #12]	; (800777c <HAL_FLASHEx_Erase+0xac>)
 800776e:	2200      	movs	r2, #0
 8007770:	701a      	strb	r2, [r3, #0]

  return status;
 8007772:	7bfb      	ldrb	r3, [r7, #15]
}
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	2000058c 	.word	0x2000058c

08007780 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8007780:	b480      	push	{r7}
 8007782:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8007784:	4b05      	ldr	r3, [pc, #20]	; (800779c <FLASH_MassErase+0x1c>)
 8007786:	695b      	ldr	r3, [r3, #20]
 8007788:	4a04      	ldr	r2, [pc, #16]	; (800779c <FLASH_MassErase+0x1c>)
 800778a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800778e:	f043 0304 	orr.w	r3, r3, #4
 8007792:	6153      	str	r3, [r2, #20]
#endif
}
 8007794:	bf00      	nop
 8007796:	46bd      	mov	sp, r7
 8007798:	bc80      	pop	{r7}
 800779a:	4770      	bx	lr
 800779c:	58004000 	.word	0x58004000

080077a0 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80077a8:	4b08      	ldr	r3, [pc, #32]	; (80077cc <FLASH_PageErase+0x2c>)
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	00db      	lsls	r3, r3, #3
 80077b4:	4313      	orrs	r3, r2
 80077b6:	4a05      	ldr	r2, [pc, #20]	; (80077cc <FLASH_PageErase+0x2c>)
 80077b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077bc:	f043 0302 	orr.w	r3, r3, #2
 80077c0:	6153      	str	r3, [r2, #20]
#endif
}
 80077c2:	bf00      	nop
 80077c4:	370c      	adds	r7, #12
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bc80      	pop	{r7}
 80077ca:	4770      	bx	lr
 80077cc:	58004000 	.word	0x58004000

080077d0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80077d0:	b480      	push	{r7}
 80077d2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 80077d4:	4b1f      	ldr	r3, [pc, #124]	; (8007854 <FLASH_FlushCaches+0x84>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d117      	bne.n	8007810 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80077e0:	4b1c      	ldr	r3, [pc, #112]	; (8007854 <FLASH_FlushCaches+0x84>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a1b      	ldr	r2, [pc, #108]	; (8007854 <FLASH_FlushCaches+0x84>)
 80077e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077ea:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80077ec:	4b19      	ldr	r3, [pc, #100]	; (8007854 <FLASH_FlushCaches+0x84>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a18      	ldr	r2, [pc, #96]	; (8007854 <FLASH_FlushCaches+0x84>)
 80077f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80077f6:	6013      	str	r3, [r2, #0]
 80077f8:	4b16      	ldr	r3, [pc, #88]	; (8007854 <FLASH_FlushCaches+0x84>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a15      	ldr	r2, [pc, #84]	; (8007854 <FLASH_FlushCaches+0x84>)
 80077fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007802:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007804:	4b13      	ldr	r3, [pc, #76]	; (8007854 <FLASH_FlushCaches+0x84>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a12      	ldr	r2, [pc, #72]	; (8007854 <FLASH_FlushCaches+0x84>)
 800780a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800780e:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8007810:	4b10      	ldr	r3, [pc, #64]	; (8007854 <FLASH_FlushCaches+0x84>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007818:	2b01      	cmp	r3, #1
 800781a:	d117      	bne.n	800784c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800781c:	4b0d      	ldr	r3, [pc, #52]	; (8007854 <FLASH_FlushCaches+0x84>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a0c      	ldr	r2, [pc, #48]	; (8007854 <FLASH_FlushCaches+0x84>)
 8007822:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007826:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007828:	4b0a      	ldr	r3, [pc, #40]	; (8007854 <FLASH_FlushCaches+0x84>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a09      	ldr	r2, [pc, #36]	; (8007854 <FLASH_FlushCaches+0x84>)
 800782e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007832:	6013      	str	r3, [r2, #0]
 8007834:	4b07      	ldr	r3, [pc, #28]	; (8007854 <FLASH_FlushCaches+0x84>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a06      	ldr	r2, [pc, #24]	; (8007854 <FLASH_FlushCaches+0x84>)
 800783a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800783e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007840:	4b04      	ldr	r3, [pc, #16]	; (8007854 <FLASH_FlushCaches+0x84>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a03      	ldr	r2, [pc, #12]	; (8007854 <FLASH_FlushCaches+0x84>)
 8007846:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800784a:	6013      	str	r3, [r2, #0]
  }
#endif
}
 800784c:	bf00      	nop
 800784e:	46bd      	mov	sp, r7
 8007850:	bc80      	pop	{r7}
 8007852:	4770      	bx	lr
 8007854:	58004000 	.word	0x58004000

08007858 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8007858:	b480      	push	{r7}
 800785a:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800785c:	4b05      	ldr	r3, [pc, #20]	; (8007874 <FLASH_AcknowledgePageErase+0x1c>)
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	4a04      	ldr	r2, [pc, #16]	; (8007874 <FLASH_AcknowledgePageErase+0x1c>)
 8007862:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8007866:	f023 0302 	bic.w	r3, r3, #2
 800786a:	6153      	str	r3, [r2, #20]
#endif
}
 800786c:	bf00      	nop
 800786e:	46bd      	mov	sp, r7
 8007870:	bc80      	pop	{r7}
 8007872:	4770      	bx	lr
 8007874:	58004000 	.word	0x58004000

08007878 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007882:	2300      	movs	r3, #0
 8007884:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007886:	e140      	b.n	8007b0a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	2101      	movs	r1, #1
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	fa01 f303 	lsl.w	r3, r1, r3
 8007894:	4013      	ands	r3, r2
 8007896:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2b00      	cmp	r3, #0
 800789c:	f000 8132 	beq.w	8007b04 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	f003 0303 	and.w	r3, r3, #3
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d005      	beq.n	80078b8 <HAL_GPIO_Init+0x40>
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f003 0303 	and.w	r3, r3, #3
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d130      	bne.n	800791a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	005b      	lsls	r3, r3, #1
 80078c2:	2203      	movs	r2, #3
 80078c4:	fa02 f303 	lsl.w	r3, r2, r3
 80078c8:	43db      	mvns	r3, r3
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	4013      	ands	r3, r2
 80078ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	68da      	ldr	r2, [r3, #12]
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	005b      	lsls	r3, r3, #1
 80078d8:	fa02 f303 	lsl.w	r3, r2, r3
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	4313      	orrs	r3, r2
 80078e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80078ee:	2201      	movs	r2, #1
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	fa02 f303 	lsl.w	r3, r2, r3
 80078f6:	43db      	mvns	r3, r3
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	4013      	ands	r3, r2
 80078fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	091b      	lsrs	r3, r3, #4
 8007904:	f003 0201 	and.w	r2, r3, #1
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	fa02 f303 	lsl.w	r3, r2, r3
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	4313      	orrs	r3, r2
 8007912:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	693a      	ldr	r2, [r7, #16]
 8007918:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f003 0303 	and.w	r3, r3, #3
 8007922:	2b03      	cmp	r3, #3
 8007924:	d017      	beq.n	8007956 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	005b      	lsls	r3, r3, #1
 8007930:	2203      	movs	r2, #3
 8007932:	fa02 f303 	lsl.w	r3, r2, r3
 8007936:	43db      	mvns	r3, r3
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	4013      	ands	r3, r2
 800793c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	689a      	ldr	r2, [r3, #8]
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	005b      	lsls	r3, r3, #1
 8007946:	fa02 f303 	lsl.w	r3, r2, r3
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	4313      	orrs	r3, r2
 800794e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	693a      	ldr	r2, [r7, #16]
 8007954:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	f003 0303 	and.w	r3, r3, #3
 800795e:	2b02      	cmp	r3, #2
 8007960:	d123      	bne.n	80079aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	08da      	lsrs	r2, r3, #3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	3208      	adds	r2, #8
 800796a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800796e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	f003 0307 	and.w	r3, r3, #7
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	220f      	movs	r2, #15
 800797a:	fa02 f303 	lsl.w	r3, r2, r3
 800797e:	43db      	mvns	r3, r3
 8007980:	693a      	ldr	r2, [r7, #16]
 8007982:	4013      	ands	r3, r2
 8007984:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	691a      	ldr	r2, [r3, #16]
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	f003 0307 	and.w	r3, r3, #7
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	fa02 f303 	lsl.w	r3, r2, r3
 8007996:	693a      	ldr	r2, [r7, #16]
 8007998:	4313      	orrs	r3, r2
 800799a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	08da      	lsrs	r2, r3, #3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	3208      	adds	r2, #8
 80079a4:	6939      	ldr	r1, [r7, #16]
 80079a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	005b      	lsls	r3, r3, #1
 80079b4:	2203      	movs	r2, #3
 80079b6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ba:	43db      	mvns	r3, r3
 80079bc:	693a      	ldr	r2, [r7, #16]
 80079be:	4013      	ands	r3, r2
 80079c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f003 0203 	and.w	r2, r3, #3
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	005b      	lsls	r3, r3, #1
 80079ce:	fa02 f303 	lsl.w	r3, r2, r3
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f000 808c 	beq.w	8007b04 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80079ec:	4a4e      	ldr	r2, [pc, #312]	; (8007b28 <HAL_GPIO_Init+0x2b0>)
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	089b      	lsrs	r3, r3, #2
 80079f2:	3302      	adds	r3, #2
 80079f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f003 0303 	and.w	r3, r3, #3
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	2207      	movs	r2, #7
 8007a04:	fa02 f303 	lsl.w	r3, r2, r3
 8007a08:	43db      	mvns	r3, r3
 8007a0a:	693a      	ldr	r2, [r7, #16]
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007a16:	d00d      	beq.n	8007a34 <HAL_GPIO_Init+0x1bc>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a44      	ldr	r2, [pc, #272]	; (8007b2c <HAL_GPIO_Init+0x2b4>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d007      	beq.n	8007a30 <HAL_GPIO_Init+0x1b8>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a43      	ldr	r2, [pc, #268]	; (8007b30 <HAL_GPIO_Init+0x2b8>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d101      	bne.n	8007a2c <HAL_GPIO_Init+0x1b4>
 8007a28:	2302      	movs	r3, #2
 8007a2a:	e004      	b.n	8007a36 <HAL_GPIO_Init+0x1be>
 8007a2c:	2307      	movs	r3, #7
 8007a2e:	e002      	b.n	8007a36 <HAL_GPIO_Init+0x1be>
 8007a30:	2301      	movs	r3, #1
 8007a32:	e000      	b.n	8007a36 <HAL_GPIO_Init+0x1be>
 8007a34:	2300      	movs	r3, #0
 8007a36:	697a      	ldr	r2, [r7, #20]
 8007a38:	f002 0203 	and.w	r2, r2, #3
 8007a3c:	0092      	lsls	r2, r2, #2
 8007a3e:	4093      	lsls	r3, r2
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007a46:	4938      	ldr	r1, [pc, #224]	; (8007b28 <HAL_GPIO_Init+0x2b0>)
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	089b      	lsrs	r3, r3, #2
 8007a4c:	3302      	adds	r3, #2
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007a54:	4b37      	ldr	r3, [pc, #220]	; (8007b34 <HAL_GPIO_Init+0x2bc>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	43db      	mvns	r3, r3
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	4013      	ands	r3, r2
 8007a62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d003      	beq.n	8007a78 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8007a70:	693a      	ldr	r2, [r7, #16]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007a78:	4a2e      	ldr	r2, [pc, #184]	; (8007b34 <HAL_GPIO_Init+0x2bc>)
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007a7e:	4b2d      	ldr	r3, [pc, #180]	; (8007b34 <HAL_GPIO_Init+0x2bc>)
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	43db      	mvns	r3, r3
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d003      	beq.n	8007aa2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007aa2:	4a24      	ldr	r2, [pc, #144]	; (8007b34 <HAL_GPIO_Init+0x2bc>)
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8007aa8:	4b22      	ldr	r3, [pc, #136]	; (8007b34 <HAL_GPIO_Init+0x2bc>)
 8007aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007aae:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	43db      	mvns	r3, r3
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d003      	beq.n	8007ace <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8007ac6:	693a      	ldr	r2, [r7, #16]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8007ace:	4a19      	ldr	r2, [pc, #100]	; (8007b34 <HAL_GPIO_Init+0x2bc>)
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8007ad6:	4b17      	ldr	r3, [pc, #92]	; (8007b34 <HAL_GPIO_Init+0x2bc>)
 8007ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007adc:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	43db      	mvns	r3, r3
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d003      	beq.n	8007afc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8007afc:	4a0d      	ldr	r2, [pc, #52]	; (8007b34 <HAL_GPIO_Init+0x2bc>)
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	3301      	adds	r3, #1
 8007b08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	fa22 f303 	lsr.w	r3, r2, r3
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f47f aeb7 	bne.w	8007888 <HAL_GPIO_Init+0x10>
  }
}
 8007b1a:	bf00      	nop
 8007b1c:	bf00      	nop
 8007b1e:	371c      	adds	r7, #28
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bc80      	pop	{r7}
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	40010000 	.word	0x40010000
 8007b2c:	48000400 	.word	0x48000400
 8007b30:	48000800 	.word	0x48000800
 8007b34:	58000800 	.word	0x58000800

08007b38 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007b42:	2300      	movs	r3, #0
 8007b44:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8007b46:	e0af      	b.n	8007ca8 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007b48:	2201      	movs	r2, #1
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	4013      	ands	r3, r2
 8007b54:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 80a2 	beq.w	8007ca2 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8007b5e:	4a59      	ldr	r2, [pc, #356]	; (8007cc4 <HAL_GPIO_DeInit+0x18c>)
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	089b      	lsrs	r3, r3, #2
 8007b64:	3302      	adds	r3, #2
 8007b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b6a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	f003 0303 	and.w	r3, r3, #3
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	2207      	movs	r2, #7
 8007b76:	fa02 f303 	lsl.w	r3, r2, r3
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007b86:	d00d      	beq.n	8007ba4 <HAL_GPIO_DeInit+0x6c>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a4f      	ldr	r2, [pc, #316]	; (8007cc8 <HAL_GPIO_DeInit+0x190>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d007      	beq.n	8007ba0 <HAL_GPIO_DeInit+0x68>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a4e      	ldr	r2, [pc, #312]	; (8007ccc <HAL_GPIO_DeInit+0x194>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d101      	bne.n	8007b9c <HAL_GPIO_DeInit+0x64>
 8007b98:	2302      	movs	r3, #2
 8007b9a:	e004      	b.n	8007ba6 <HAL_GPIO_DeInit+0x6e>
 8007b9c:	2307      	movs	r3, #7
 8007b9e:	e002      	b.n	8007ba6 <HAL_GPIO_DeInit+0x6e>
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e000      	b.n	8007ba6 <HAL_GPIO_DeInit+0x6e>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	f002 0203 	and.w	r2, r2, #3
 8007bac:	0092      	lsls	r2, r2, #2
 8007bae:	4093      	lsls	r3, r2
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d136      	bne.n	8007c24 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8007bb6:	4b46      	ldr	r3, [pc, #280]	; (8007cd0 <HAL_GPIO_DeInit+0x198>)
 8007bb8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	43db      	mvns	r3, r3
 8007bc0:	4943      	ldr	r1, [pc, #268]	; (8007cd0 <HAL_GPIO_DeInit+0x198>)
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8007bc8:	4b41      	ldr	r3, [pc, #260]	; (8007cd0 <HAL_GPIO_DeInit+0x198>)
 8007bca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	43db      	mvns	r3, r3
 8007bd2:	493f      	ldr	r1, [pc, #252]	; (8007cd0 <HAL_GPIO_DeInit+0x198>)
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8007bda:	4b3d      	ldr	r3, [pc, #244]	; (8007cd0 <HAL_GPIO_DeInit+0x198>)
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	43db      	mvns	r3, r3
 8007be2:	493b      	ldr	r1, [pc, #236]	; (8007cd0 <HAL_GPIO_DeInit+0x198>)
 8007be4:	4013      	ands	r3, r2
 8007be6:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8007be8:	4b39      	ldr	r3, [pc, #228]	; (8007cd0 <HAL_GPIO_DeInit+0x198>)
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	43db      	mvns	r3, r3
 8007bf0:	4937      	ldr	r1, [pc, #220]	; (8007cd0 <HAL_GPIO_DeInit+0x198>)
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	f003 0303 	and.w	r3, r3, #3
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	2207      	movs	r2, #7
 8007c00:	fa02 f303 	lsl.w	r3, r2, r3
 8007c04:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8007c06:	4a2f      	ldr	r2, [pc, #188]	; (8007cc4 <HAL_GPIO_DeInit+0x18c>)
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	089b      	lsrs	r3, r3, #2
 8007c0c:	3302      	adds	r3, #2
 8007c0e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	43da      	mvns	r2, r3
 8007c16:	482b      	ldr	r0, [pc, #172]	; (8007cc4 <HAL_GPIO_DeInit+0x18c>)
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	089b      	lsrs	r3, r3, #2
 8007c1c:	400a      	ands	r2, r1
 8007c1e:	3302      	adds	r3, #2
 8007c20:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	005b      	lsls	r3, r3, #1
 8007c2c:	2103      	movs	r1, #3
 8007c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c32:	431a      	orrs	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	08da      	lsrs	r2, r3, #3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	3208      	adds	r2, #8
 8007c40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	f003 0307 	and.w	r3, r3, #7
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	220f      	movs	r2, #15
 8007c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c52:	43db      	mvns	r3, r3
 8007c54:	697a      	ldr	r2, [r7, #20]
 8007c56:	08d2      	lsrs	r2, r2, #3
 8007c58:	4019      	ands	r1, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	3208      	adds	r2, #8
 8007c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	689a      	ldr	r2, [r3, #8]
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	005b      	lsls	r3, r3, #1
 8007c6a:	2103      	movs	r1, #3
 8007c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c70:	43db      	mvns	r3, r3
 8007c72:	401a      	ands	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685a      	ldr	r2, [r3, #4]
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	fa01 f303 	lsl.w	r3, r1, r3
 8007c84:	43db      	mvns	r3, r3
 8007c86:	401a      	ands	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	68da      	ldr	r2, [r3, #12]
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	005b      	lsls	r3, r3, #1
 8007c94:	2103      	movs	r1, #3
 8007c96:	fa01 f303 	lsl.w	r3, r1, r3
 8007c9a:	43db      	mvns	r3, r3
 8007c9c:	401a      	ands	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	60da      	str	r2, [r3, #12]
    }

    position++;
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007ca8:	683a      	ldr	r2, [r7, #0]
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	fa22 f303 	lsr.w	r3, r2, r3
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f47f af49 	bne.w	8007b48 <HAL_GPIO_DeInit+0x10>
  }
}
 8007cb6:	bf00      	nop
 8007cb8:	bf00      	nop
 8007cba:	371c      	adds	r7, #28
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bc80      	pop	{r7}
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	40010000 	.word	0x40010000
 8007cc8:	48000400 	.word	0x48000400
 8007ccc:	48000800 	.word	0x48000800
 8007cd0:	58000800 	.word	0x58000800

08007cd4 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	691a      	ldr	r2, [r3, #16]
 8007ce4:	887b      	ldrh	r3, [r7, #2]
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d002      	beq.n	8007cf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007cec:	2301      	movs	r3, #1
 8007cee:	73fb      	strb	r3, [r7, #15]
 8007cf0:	e001      	b.n	8007cf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bc80      	pop	{r7}
 8007d00:	4770      	bx	lr

08007d02 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b083      	sub	sp, #12
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	807b      	strh	r3, [r7, #2]
 8007d0e:	4613      	mov	r3, r2
 8007d10:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007d12:	787b      	ldrb	r3, [r7, #1]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d003      	beq.n	8007d20 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007d18:	887a      	ldrh	r2, [r7, #2]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007d1e:	e002      	b.n	8007d26 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007d20:	887a      	ldrh	r2, [r7, #2]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007d26:	bf00      	nop
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bc80      	pop	{r7}
 8007d2e:	4770      	bx	lr

08007d30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d101      	bne.n	8007d42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e081      	b.n	8007e46 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d106      	bne.n	8007d5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f7fa f83a 	bl	8001dd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2224      	movs	r2, #36	; 0x24
 8007d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f022 0201 	bic.w	r2, r2, #1
 8007d72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685a      	ldr	r2, [r3, #4]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007d80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	689a      	ldr	r2, [r3, #8]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d107      	bne.n	8007daa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	689a      	ldr	r2, [r3, #8]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007da6:	609a      	str	r2, [r3, #8]
 8007da8:	e006      	b.n	8007db8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	689a      	ldr	r2, [r3, #8]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007db6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d104      	bne.n	8007dca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	6812      	ldr	r2, [r2, #0]
 8007dd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ddc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68da      	ldr	r2, [r3, #12]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007dec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	691a      	ldr	r2, [r3, #16]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	430a      	orrs	r2, r1
 8007e06:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	69d9      	ldr	r1, [r3, #28]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a1a      	ldr	r2, [r3, #32]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	430a      	orrs	r2, r1
 8007e16:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f042 0201 	orr.w	r2, r2, #1
 8007e26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2220      	movs	r2, #32
 8007e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
	...

08007e50 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b088      	sub	sp, #32
 8007e54:	af02      	add	r7, sp, #8
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	4608      	mov	r0, r1
 8007e5a:	4611      	mov	r1, r2
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	4603      	mov	r3, r0
 8007e60:	817b      	strh	r3, [r7, #10]
 8007e62:	460b      	mov	r3, r1
 8007e64:	813b      	strh	r3, [r7, #8]
 8007e66:	4613      	mov	r3, r2
 8007e68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	2b20      	cmp	r3, #32
 8007e74:	f040 80f9 	bne.w	800806a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e78:	6a3b      	ldr	r3, [r7, #32]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d002      	beq.n	8007e84 <HAL_I2C_Mem_Write+0x34>
 8007e7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d105      	bne.n	8007e90 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e8a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e0ed      	b.n	800806c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d101      	bne.n	8007e9e <HAL_I2C_Mem_Write+0x4e>
 8007e9a:	2302      	movs	r3, #2
 8007e9c:	e0e6      	b.n	800806c <HAL_I2C_Mem_Write+0x21c>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007ea6:	f7fa fce3 	bl	8002870 <HAL_GetTick>
 8007eaa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	2319      	movs	r3, #25
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f000 fac2 	bl	8008442 <I2C_WaitOnFlagUntilTimeout>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d001      	beq.n	8007ec8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e0d1      	b.n	800806c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2221      	movs	r2, #33	; 0x21
 8007ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2240      	movs	r2, #64	; 0x40
 8007ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6a3a      	ldr	r2, [r7, #32]
 8007ee2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ef0:	88f8      	ldrh	r0, [r7, #6]
 8007ef2:	893a      	ldrh	r2, [r7, #8]
 8007ef4:	8979      	ldrh	r1, [r7, #10]
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	9301      	str	r3, [sp, #4]
 8007efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	4603      	mov	r3, r0
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f000 f9d3 	bl	80082ac <I2C_RequestMemoryWrite>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d005      	beq.n	8007f18 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	e0a9      	b.n	800806c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	2bff      	cmp	r3, #255	; 0xff
 8007f20:	d90e      	bls.n	8007f40 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	22ff      	movs	r2, #255	; 0xff
 8007f26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	8979      	ldrh	r1, [r7, #10]
 8007f30:	2300      	movs	r3, #0
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f000 fc1f 	bl	800877c <I2C_TransferConfig>
 8007f3e:	e00f      	b.n	8007f60 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	8979      	ldrh	r1, [r7, #10]
 8007f52:	2300      	movs	r3, #0
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f000 fc0e 	bl	800877c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f000 faac 	bl	80084c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d001      	beq.n	8007f74 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e07b      	b.n	800806c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f78:	781a      	ldrb	r2, [r3, #0]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f84:	1c5a      	adds	r2, r3, #1
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	3b01      	subs	r3, #1
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d034      	beq.n	8008018 <HAL_I2C_Mem_Write+0x1c8>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d130      	bne.n	8008018 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	2180      	movs	r1, #128	; 0x80
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 fa3e 	bl	8008442 <I2C_WaitOnFlagUntilTimeout>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e04d      	b.n	800806c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	2bff      	cmp	r3, #255	; 0xff
 8007fd8:	d90e      	bls.n	8007ff8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	22ff      	movs	r2, #255	; 0xff
 8007fde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	8979      	ldrh	r1, [r7, #10]
 8007fe8:	2300      	movs	r3, #0
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f000 fbc3 	bl	800877c <I2C_TransferConfig>
 8007ff6:	e00f      	b.n	8008018 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008006:	b2da      	uxtb	r2, r3
 8008008:	8979      	ldrh	r1, [r7, #10]
 800800a:	2300      	movs	r3, #0
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f000 fbb2 	bl	800877c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800801c:	b29b      	uxth	r3, r3
 800801e:	2b00      	cmp	r3, #0
 8008020:	d19e      	bne.n	8007f60 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f000 fa8b 	bl	8008542 <I2C_WaitOnSTOPFlagUntilTimeout>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d001      	beq.n	8008036 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e01a      	b.n	800806c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2220      	movs	r2, #32
 800803c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	6859      	ldr	r1, [r3, #4]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	4b0a      	ldr	r3, [pc, #40]	; (8008074 <HAL_I2C_Mem_Write+0x224>)
 800804a:	400b      	ands	r3, r1
 800804c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2220      	movs	r2, #32
 8008052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008066:	2300      	movs	r3, #0
 8008068:	e000      	b.n	800806c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800806a:	2302      	movs	r3, #2
  }
}
 800806c:	4618      	mov	r0, r3
 800806e:	3718      	adds	r7, #24
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	fe00e800 	.word	0xfe00e800

08008078 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b088      	sub	sp, #32
 800807c:	af02      	add	r7, sp, #8
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	4608      	mov	r0, r1
 8008082:	4611      	mov	r1, r2
 8008084:	461a      	mov	r2, r3
 8008086:	4603      	mov	r3, r0
 8008088:	817b      	strh	r3, [r7, #10]
 800808a:	460b      	mov	r3, r1
 800808c:	813b      	strh	r3, [r7, #8]
 800808e:	4613      	mov	r3, r2
 8008090:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b20      	cmp	r3, #32
 800809c:	f040 80fd 	bne.w	800829a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80080a0:	6a3b      	ldr	r3, [r7, #32]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d002      	beq.n	80080ac <HAL_I2C_Mem_Read+0x34>
 80080a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d105      	bne.n	80080b8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	e0f1      	b.n	800829c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d101      	bne.n	80080c6 <HAL_I2C_Mem_Read+0x4e>
 80080c2:	2302      	movs	r3, #2
 80080c4:	e0ea      	b.n	800829c <HAL_I2C_Mem_Read+0x224>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2201      	movs	r2, #1
 80080ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80080ce:	f7fa fbcf 	bl	8002870 <HAL_GetTick>
 80080d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	2319      	movs	r3, #25
 80080da:	2201      	movs	r2, #1
 80080dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f000 f9ae 	bl	8008442 <I2C_WaitOnFlagUntilTimeout>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d001      	beq.n	80080f0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	e0d5      	b.n	800829c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2222      	movs	r2, #34	; 0x22
 80080f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2240      	movs	r2, #64	; 0x40
 80080fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6a3a      	ldr	r2, [r7, #32]
 800810a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008110:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008118:	88f8      	ldrh	r0, [r7, #6]
 800811a:	893a      	ldrh	r2, [r7, #8]
 800811c:	8979      	ldrh	r1, [r7, #10]
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	9301      	str	r3, [sp, #4]
 8008122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	4603      	mov	r3, r0
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f000 f913 	bl	8008354 <I2C_RequestMemoryRead>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d005      	beq.n	8008140 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	e0ad      	b.n	800829c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008144:	b29b      	uxth	r3, r3
 8008146:	2bff      	cmp	r3, #255	; 0xff
 8008148:	d90e      	bls.n	8008168 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	22ff      	movs	r2, #255	; 0xff
 800814e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008154:	b2da      	uxtb	r2, r3
 8008156:	8979      	ldrh	r1, [r7, #10]
 8008158:	4b52      	ldr	r3, [pc, #328]	; (80082a4 <HAL_I2C_Mem_Read+0x22c>)
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f000 fb0b 	bl	800877c <I2C_TransferConfig>
 8008166:	e00f      	b.n	8008188 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800816c:	b29a      	uxth	r2, r3
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008176:	b2da      	uxtb	r2, r3
 8008178:	8979      	ldrh	r1, [r7, #10]
 800817a:	4b4a      	ldr	r3, [pc, #296]	; (80082a4 <HAL_I2C_Mem_Read+0x22c>)
 800817c:	9300      	str	r3, [sp, #0]
 800817e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f000 fafa 	bl	800877c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818e:	2200      	movs	r2, #0
 8008190:	2104      	movs	r1, #4
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f000 f955 	bl	8008442 <I2C_WaitOnFlagUntilTimeout>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d001      	beq.n	80081a2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e07c      	b.n	800829c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ac:	b2d2      	uxtb	r2, r2
 80081ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b4:	1c5a      	adds	r2, r3, #1
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081be:	3b01      	subs	r3, #1
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	3b01      	subs	r3, #1
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081d8:	b29b      	uxth	r3, r3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d034      	beq.n	8008248 <HAL_I2C_Mem_Read+0x1d0>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d130      	bne.n	8008248 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	9300      	str	r3, [sp, #0]
 80081ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ec:	2200      	movs	r2, #0
 80081ee:	2180      	movs	r1, #128	; 0x80
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	f000 f926 	bl	8008442 <I2C_WaitOnFlagUntilTimeout>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e04d      	b.n	800829c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008204:	b29b      	uxth	r3, r3
 8008206:	2bff      	cmp	r3, #255	; 0xff
 8008208:	d90e      	bls.n	8008228 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	22ff      	movs	r2, #255	; 0xff
 800820e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008214:	b2da      	uxtb	r2, r3
 8008216:	8979      	ldrh	r1, [r7, #10]
 8008218:	2300      	movs	r3, #0
 800821a:	9300      	str	r3, [sp, #0]
 800821c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f000 faab 	bl	800877c <I2C_TransferConfig>
 8008226:	e00f      	b.n	8008248 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800822c:	b29a      	uxth	r2, r3
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008236:	b2da      	uxtb	r2, r3
 8008238:	8979      	ldrh	r1, [r7, #10]
 800823a:	2300      	movs	r3, #0
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f000 fa9a 	bl	800877c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800824c:	b29b      	uxth	r3, r3
 800824e:	2b00      	cmp	r3, #0
 8008250:	d19a      	bne.n	8008188 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008252:	697a      	ldr	r2, [r7, #20]
 8008254:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f000 f973 	bl	8008542 <I2C_WaitOnSTOPFlagUntilTimeout>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d001      	beq.n	8008266 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e01a      	b.n	800829c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2220      	movs	r2, #32
 800826c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	6859      	ldr	r1, [r3, #4]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	4b0b      	ldr	r3, [pc, #44]	; (80082a8 <HAL_I2C_Mem_Read+0x230>)
 800827a:	400b      	ands	r3, r1
 800827c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2220      	movs	r2, #32
 8008282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	e000      	b.n	800829c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800829a:	2302      	movs	r3, #2
  }
}
 800829c:	4618      	mov	r0, r3
 800829e:	3718      	adds	r7, #24
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	80002400 	.word	0x80002400
 80082a8:	fe00e800 	.word	0xfe00e800

080082ac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b086      	sub	sp, #24
 80082b0:	af02      	add	r7, sp, #8
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	4608      	mov	r0, r1
 80082b6:	4611      	mov	r1, r2
 80082b8:	461a      	mov	r2, r3
 80082ba:	4603      	mov	r3, r0
 80082bc:	817b      	strh	r3, [r7, #10]
 80082be:	460b      	mov	r3, r1
 80082c0:	813b      	strh	r3, [r7, #8]
 80082c2:	4613      	mov	r3, r2
 80082c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80082c6:	88fb      	ldrh	r3, [r7, #6]
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	8979      	ldrh	r1, [r7, #10]
 80082cc:	4b20      	ldr	r3, [pc, #128]	; (8008350 <I2C_RequestMemoryWrite+0xa4>)
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f000 fa51 	bl	800877c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082da:	69fa      	ldr	r2, [r7, #28]
 80082dc:	69b9      	ldr	r1, [r7, #24]
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f000 f8ef 	bl	80084c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e02c      	b.n	8008348 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80082ee:	88fb      	ldrh	r3, [r7, #6]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d105      	bne.n	8008300 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80082f4:	893b      	ldrh	r3, [r7, #8]
 80082f6:	b2da      	uxtb	r2, r3
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	629a      	str	r2, [r3, #40]	; 0x28
 80082fe:	e015      	b.n	800832c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008300:	893b      	ldrh	r3, [r7, #8]
 8008302:	0a1b      	lsrs	r3, r3, #8
 8008304:	b29b      	uxth	r3, r3
 8008306:	b2da      	uxtb	r2, r3
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800830e:	69fa      	ldr	r2, [r7, #28]
 8008310:	69b9      	ldr	r1, [r7, #24]
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f000 f8d5 	bl	80084c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d001      	beq.n	8008322 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e012      	b.n	8008348 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008322:	893b      	ldrh	r3, [r7, #8]
 8008324:	b2da      	uxtb	r2, r3
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	2200      	movs	r2, #0
 8008334:	2180      	movs	r1, #128	; 0x80
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f000 f883 	bl	8008442 <I2C_WaitOnFlagUntilTimeout>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d001      	beq.n	8008346 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	e000      	b.n	8008348 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	80002000 	.word	0x80002000

08008354 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af02      	add	r7, sp, #8
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	4608      	mov	r0, r1
 800835e:	4611      	mov	r1, r2
 8008360:	461a      	mov	r2, r3
 8008362:	4603      	mov	r3, r0
 8008364:	817b      	strh	r3, [r7, #10]
 8008366:	460b      	mov	r3, r1
 8008368:	813b      	strh	r3, [r7, #8]
 800836a:	4613      	mov	r3, r2
 800836c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800836e:	88fb      	ldrh	r3, [r7, #6]
 8008370:	b2da      	uxtb	r2, r3
 8008372:	8979      	ldrh	r1, [r7, #10]
 8008374:	4b20      	ldr	r3, [pc, #128]	; (80083f8 <I2C_RequestMemoryRead+0xa4>)
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	2300      	movs	r3, #0
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f000 f9fe 	bl	800877c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008380:	69fa      	ldr	r2, [r7, #28]
 8008382:	69b9      	ldr	r1, [r7, #24]
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f000 f89c 	bl	80084c2 <I2C_WaitOnTXISFlagUntilTimeout>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d001      	beq.n	8008394 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e02c      	b.n	80083ee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008394:	88fb      	ldrh	r3, [r7, #6]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d105      	bne.n	80083a6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800839a:	893b      	ldrh	r3, [r7, #8]
 800839c:	b2da      	uxtb	r2, r3
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	629a      	str	r2, [r3, #40]	; 0x28
 80083a4:	e015      	b.n	80083d2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80083a6:	893b      	ldrh	r3, [r7, #8]
 80083a8:	0a1b      	lsrs	r3, r3, #8
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	b2da      	uxtb	r2, r3
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083b4:	69fa      	ldr	r2, [r7, #28]
 80083b6:	69b9      	ldr	r1, [r7, #24]
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	f000 f882 	bl	80084c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d001      	beq.n	80083c8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	e012      	b.n	80083ee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80083c8:	893b      	ldrh	r3, [r7, #8]
 80083ca:	b2da      	uxtb	r2, r3
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	9300      	str	r3, [sp, #0]
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	2200      	movs	r2, #0
 80083da:	2140      	movs	r1, #64	; 0x40
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f000 f830 	bl	8008442 <I2C_WaitOnFlagUntilTimeout>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d001      	beq.n	80083ec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e000      	b.n	80083ee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	80002000 	.word	0x80002000

080083fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	699b      	ldr	r3, [r3, #24]
 800840a:	f003 0302 	and.w	r3, r3, #2
 800840e:	2b02      	cmp	r3, #2
 8008410:	d103      	bne.n	800841a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2200      	movs	r2, #0
 8008418:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	f003 0301 	and.w	r3, r3, #1
 8008424:	2b01      	cmp	r3, #1
 8008426:	d007      	beq.n	8008438 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	699a      	ldr	r2, [r3, #24]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f042 0201 	orr.w	r2, r2, #1
 8008436:	619a      	str	r2, [r3, #24]
  }
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	bc80      	pop	{r7}
 8008440:	4770      	bx	lr

08008442 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b084      	sub	sp, #16
 8008446:	af00      	add	r7, sp, #0
 8008448:	60f8      	str	r0, [r7, #12]
 800844a:	60b9      	str	r1, [r7, #8]
 800844c:	603b      	str	r3, [r7, #0]
 800844e:	4613      	mov	r3, r2
 8008450:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008452:	e022      	b.n	800849a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800845a:	d01e      	beq.n	800849a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800845c:	f7fa fa08 	bl	8002870 <HAL_GetTick>
 8008460:	4602      	mov	r2, r0
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	429a      	cmp	r2, r3
 800846a:	d302      	bcc.n	8008472 <I2C_WaitOnFlagUntilTimeout+0x30>
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d113      	bne.n	800849a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008476:	f043 0220 	orr.w	r2, r3, #32
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2220      	movs	r2, #32
 8008482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e00f      	b.n	80084ba <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	699a      	ldr	r2, [r3, #24]
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	4013      	ands	r3, r2
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	bf0c      	ite	eq
 80084aa:	2301      	moveq	r3, #1
 80084ac:	2300      	movne	r3, #0
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	461a      	mov	r2, r3
 80084b2:	79fb      	ldrb	r3, [r7, #7]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d0cd      	beq.n	8008454 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}

080084c2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b084      	sub	sp, #16
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	60f8      	str	r0, [r7, #12]
 80084ca:	60b9      	str	r1, [r7, #8]
 80084cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80084ce:	e02c      	b.n	800852a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	68b9      	ldr	r1, [r7, #8]
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f000 f871 	bl	80085bc <I2C_IsErrorOccurred>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d001      	beq.n	80084e4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e02a      	b.n	800853a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084ea:	d01e      	beq.n	800852a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084ec:	f7fa f9c0 	bl	8002870 <HAL_GetTick>
 80084f0:	4602      	mov	r2, r0
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d302      	bcc.n	8008502 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d113      	bne.n	800852a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008506:	f043 0220 	orr.w	r2, r3, #32
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2220      	movs	r2, #32
 8008512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e007      	b.n	800853a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	699b      	ldr	r3, [r3, #24]
 8008530:	f003 0302 	and.w	r3, r3, #2
 8008534:	2b02      	cmp	r3, #2
 8008536:	d1cb      	bne.n	80084d0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b084      	sub	sp, #16
 8008546:	af00      	add	r7, sp, #0
 8008548:	60f8      	str	r0, [r7, #12]
 800854a:	60b9      	str	r1, [r7, #8]
 800854c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800854e:	e028      	b.n	80085a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	68b9      	ldr	r1, [r7, #8]
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f000 f831 	bl	80085bc <I2C_IsErrorOccurred>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d001      	beq.n	8008564 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e026      	b.n	80085b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008564:	f7fa f984 	bl	8002870 <HAL_GetTick>
 8008568:	4602      	mov	r2, r0
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	68ba      	ldr	r2, [r7, #8]
 8008570:	429a      	cmp	r2, r3
 8008572:	d302      	bcc.n	800857a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d113      	bne.n	80085a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800857e:	f043 0220 	orr.w	r2, r3, #32
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2220      	movs	r2, #32
 800858a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	e007      	b.n	80085b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	f003 0320 	and.w	r3, r3, #32
 80085ac:	2b20      	cmp	r3, #32
 80085ae:	d1cf      	bne.n	8008550 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
	...

080085bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b08a      	sub	sp, #40	; 0x28
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085c8:	2300      	movs	r3, #0
 80085ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	699b      	ldr	r3, [r3, #24]
 80085d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80085d6:	2300      	movs	r3, #0
 80085d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	f003 0310 	and.w	r3, r3, #16
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d068      	beq.n	80086ba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2210      	movs	r2, #16
 80085ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80085f0:	e049      	b.n	8008686 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085f8:	d045      	beq.n	8008686 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80085fa:	f7fa f939 	bl	8002870 <HAL_GetTick>
 80085fe:	4602      	mov	r2, r0
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	1ad3      	subs	r3, r2, r3
 8008604:	68ba      	ldr	r2, [r7, #8]
 8008606:	429a      	cmp	r2, r3
 8008608:	d302      	bcc.n	8008610 <I2C_IsErrorOccurred+0x54>
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d13a      	bne.n	8008686 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800861a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008622:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800862e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008632:	d121      	bne.n	8008678 <I2C_IsErrorOccurred+0xbc>
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800863a:	d01d      	beq.n	8008678 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800863c:	7cfb      	ldrb	r3, [r7, #19]
 800863e:	2b20      	cmp	r3, #32
 8008640:	d01a      	beq.n	8008678 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	685a      	ldr	r2, [r3, #4]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008650:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008652:	f7fa f90d 	bl	8002870 <HAL_GetTick>
 8008656:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008658:	e00e      	b.n	8008678 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800865a:	f7fa f909 	bl	8002870 <HAL_GetTick>
 800865e:	4602      	mov	r2, r0
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	2b19      	cmp	r3, #25
 8008666:	d907      	bls.n	8008678 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8008668:	6a3b      	ldr	r3, [r7, #32]
 800866a:	f043 0320 	orr.w	r3, r3, #32
 800866e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008676:	e006      	b.n	8008686 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	f003 0320 	and.w	r3, r3, #32
 8008682:	2b20      	cmp	r3, #32
 8008684:	d1e9      	bne.n	800865a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	699b      	ldr	r3, [r3, #24]
 800868c:	f003 0320 	and.w	r3, r3, #32
 8008690:	2b20      	cmp	r3, #32
 8008692:	d003      	beq.n	800869c <I2C_IsErrorOccurred+0xe0>
 8008694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008698:	2b00      	cmp	r3, #0
 800869a:	d0aa      	beq.n	80085f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800869c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d103      	bne.n	80086ac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2220      	movs	r2, #32
 80086aa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80086ac:	6a3b      	ldr	r3, [r7, #32]
 80086ae:	f043 0304 	orr.w	r3, r3, #4
 80086b2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	699b      	ldr	r3, [r3, #24]
 80086c0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00b      	beq.n	80086e4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80086cc:	6a3b      	ldr	r3, [r7, #32]
 80086ce:	f043 0301 	orr.w	r3, r3, #1
 80086d2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00b      	beq.n	8008706 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80086ee:	6a3b      	ldr	r3, [r7, #32]
 80086f0:	f043 0308 	orr.w	r3, r3, #8
 80086f4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80086fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00b      	beq.n	8008728 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008710:	6a3b      	ldr	r3, [r7, #32]
 8008712:	f043 0302 	orr.w	r3, r3, #2
 8008716:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008720:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800872c:	2b00      	cmp	r3, #0
 800872e:	d01c      	beq.n	800876a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f7ff fe63 	bl	80083fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	6859      	ldr	r1, [r3, #4]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	4b0d      	ldr	r3, [pc, #52]	; (8008778 <I2C_IsErrorOccurred+0x1bc>)
 8008742:	400b      	ands	r3, r1
 8008744:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800874a:	6a3b      	ldr	r3, [r7, #32]
 800874c:	431a      	orrs	r2, r3
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2220      	movs	r2, #32
 8008756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2200      	movs	r2, #0
 8008766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800876a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800876e:	4618      	mov	r0, r3
 8008770:	3728      	adds	r7, #40	; 0x28
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	fe00e800 	.word	0xfe00e800

0800877c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800877c:	b480      	push	{r7}
 800877e:	b087      	sub	sp, #28
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	607b      	str	r3, [r7, #4]
 8008786:	460b      	mov	r3, r1
 8008788:	817b      	strh	r3, [r7, #10]
 800878a:	4613      	mov	r3, r2
 800878c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800878e:	897b      	ldrh	r3, [r7, #10]
 8008790:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008794:	7a7b      	ldrb	r3, [r7, #9]
 8008796:	041b      	lsls	r3, r3, #16
 8008798:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800879c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80087a2:	6a3b      	ldr	r3, [r7, #32]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087aa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	685a      	ldr	r2, [r3, #4]
 80087b2:	6a3b      	ldr	r3, [r7, #32]
 80087b4:	0d5b      	lsrs	r3, r3, #21
 80087b6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80087ba:	4b07      	ldr	r3, [pc, #28]	; (80087d8 <I2C_TransferConfig+0x5c>)
 80087bc:	430b      	orrs	r3, r1
 80087be:	43db      	mvns	r3, r3
 80087c0:	ea02 0103 	and.w	r1, r2, r3
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	430a      	orrs	r2, r1
 80087cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80087ce:	bf00      	nop
 80087d0:	371c      	adds	r7, #28
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bc80      	pop	{r7}
 80087d6:	4770      	bx	lr
 80087d8:	03ff63ff 	.word	0x03ff63ff

080087dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b20      	cmp	r3, #32
 80087f0:	d138      	bne.n	8008864 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d101      	bne.n	8008800 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80087fc:	2302      	movs	r3, #2
 80087fe:	e032      	b.n	8008866 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2224      	movs	r2, #36	; 0x24
 800880c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f022 0201 	bic.w	r2, r2, #1
 800881e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800882e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	6819      	ldr	r1, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	430a      	orrs	r2, r1
 800883e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f042 0201 	orr.w	r2, r2, #1
 800884e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2220      	movs	r2, #32
 8008854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008860:	2300      	movs	r3, #0
 8008862:	e000      	b.n	8008866 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008864:	2302      	movs	r3, #2
  }
}
 8008866:	4618      	mov	r0, r3
 8008868:	370c      	adds	r7, #12
 800886a:	46bd      	mov	sp, r7
 800886c:	bc80      	pop	{r7}
 800886e:	4770      	bx	lr

08008870 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008880:	b2db      	uxtb	r3, r3
 8008882:	2b20      	cmp	r3, #32
 8008884:	d139      	bne.n	80088fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800888c:	2b01      	cmp	r3, #1
 800888e:	d101      	bne.n	8008894 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008890:	2302      	movs	r3, #2
 8008892:	e033      	b.n	80088fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2224      	movs	r2, #36	; 0x24
 80088a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f022 0201 	bic.w	r2, r2, #1
 80088b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80088c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	021b      	lsls	r3, r3, #8
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f042 0201 	orr.w	r2, r2, #1
 80088e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2220      	movs	r2, #32
 80088ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	e000      	b.n	80088fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80088fa:	2302      	movs	r3, #2
  }
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3714      	adds	r7, #20
 8008900:	46bd      	mov	sp, r7
 8008902:	bc80      	pop	{r7}
 8008904:	4770      	bx	lr
	...

08008908 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008908:	b480      	push	{r7}
 800890a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800890c:	4b04      	ldr	r3, [pc, #16]	; (8008920 <HAL_PWR_EnableBkUpAccess+0x18>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a03      	ldr	r2, [pc, #12]	; (8008920 <HAL_PWR_EnableBkUpAccess+0x18>)
 8008912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008916:	6013      	str	r3, [r2, #0]
}
 8008918:	bf00      	nop
 800891a:	46bd      	mov	sp, r7
 800891c:	bc80      	pop	{r7}
 800891e:	4770      	bx	lr
 8008920:	58000400 	.word	0x58000400

08008924 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	460b      	mov	r3, r1
 800892e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d10c      	bne.n	8008950 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8008936:	4b13      	ldr	r3, [pc, #76]	; (8008984 <HAL_PWR_EnterSLEEPMode+0x60>)
 8008938:	695b      	ldr	r3, [r3, #20]
 800893a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800893e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008942:	d10d      	bne.n	8008960 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8008944:	f000 f83c 	bl	80089c0 <HAL_PWREx_DisableLowPowerRunMode>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d008      	beq.n	8008960 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 800894e:	e015      	b.n	800897c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8008950:	4b0c      	ldr	r3, [pc, #48]	; (8008984 <HAL_PWR_EnterSLEEPMode+0x60>)
 8008952:	695b      	ldr	r3, [r3, #20]
 8008954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008958:	2b00      	cmp	r3, #0
 800895a:	d101      	bne.n	8008960 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800895c:	f000 f822 	bl	80089a4 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008960:	4b09      	ldr	r3, [pc, #36]	; (8008988 <HAL_PWR_EnterSLEEPMode+0x64>)
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	4a08      	ldr	r2, [pc, #32]	; (8008988 <HAL_PWR_EnterSLEEPMode+0x64>)
 8008966:	f023 0304 	bic.w	r3, r3, #4
 800896a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800896c:	78fb      	ldrb	r3, [r7, #3]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d101      	bne.n	8008976 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008972:	bf30      	wfi
 8008974:	e002      	b.n	800897c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008976:	bf40      	sev
    __WFE();
 8008978:	bf20      	wfe
    __WFE();
 800897a:	bf20      	wfe
  }
}
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	58000400 	.word	0x58000400
 8008988:	e000ed00 	.word	0xe000ed00

0800898c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800898c:	b480      	push	{r7}
 800898e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8008990:	4b03      	ldr	r3, [pc, #12]	; (80089a0 <HAL_PWREx_GetVoltageRange+0x14>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8008998:	4618      	mov	r0, r3
 800899a:	46bd      	mov	sp, r7
 800899c:	bc80      	pop	{r7}
 800899e:	4770      	bx	lr
 80089a0:	58000400 	.word	0x58000400

080089a4 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80089a4:	b480      	push	{r7}
 80089a6:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80089a8:	4b04      	ldr	r3, [pc, #16]	; (80089bc <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a03      	ldr	r2, [pc, #12]	; (80089bc <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80089ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089b2:	6013      	str	r3, [r2, #0]
}
 80089b4:	bf00      	nop
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bc80      	pop	{r7}
 80089ba:	4770      	bx	lr
 80089bc:	58000400 	.word	0x58000400

080089c0 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80089c6:	4b16      	ldr	r3, [pc, #88]	; (8008a20 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a15      	ldr	r2, [pc, #84]	; (8008a20 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80089cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089d0:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80089d2:	4b14      	ldr	r3, [pc, #80]	; (8008a24 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	2232      	movs	r2, #50	; 0x32
 80089d8:	fb02 f303 	mul.w	r3, r2, r3
 80089dc:	4a12      	ldr	r2, [pc, #72]	; (8008a28 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80089de:	fba2 2303 	umull	r2, r3, r2, r3
 80089e2:	0c9b      	lsrs	r3, r3, #18
 80089e4:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80089e6:	e002      	b.n	80089ee <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	3b01      	subs	r3, #1
 80089ec:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80089ee:	4b0c      	ldr	r3, [pc, #48]	; (8008a20 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089fa:	d102      	bne.n	8008a02 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1f2      	bne.n	80089e8 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8008a02:	4b07      	ldr	r3, [pc, #28]	; (8008a20 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a0e:	d101      	bne.n	8008a14 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8008a10:	2303      	movs	r3, #3
 8008a12:	e000      	b.n	8008a16 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	370c      	adds	r7, #12
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bc80      	pop	{r7}
 8008a1e:	4770      	bx	lr
 8008a20:	58000400 	.word	0x58000400
 8008a24:	20000000 	.word	0x20000000
 8008a28:	431bde83 	.word	0x431bde83

08008a2c <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	4603      	mov	r3, r0
 8008a34:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8008a36:	4b10      	ldr	r3, [pc, #64]	; (8008a78 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f023 0307 	bic.w	r3, r3, #7
 8008a3e:	4a0e      	ldr	r2, [pc, #56]	; (8008a78 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8008a40:	f043 0302 	orr.w	r3, r3, #2
 8008a44:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008a46:	4b0d      	ldr	r3, [pc, #52]	; (8008a7c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	4a0c      	ldr	r2, [pc, #48]	; (8008a7c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8008a4c:	f043 0304 	orr.w	r3, r3, #4
 8008a50:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8008a52:	79fb      	ldrb	r3, [r7, #7]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d101      	bne.n	8008a5c <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008a58:	bf30      	wfi
 8008a5a:	e002      	b.n	8008a62 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008a5c:	bf40      	sev
    __WFE();
 8008a5e:	bf20      	wfe
    __WFE();
 8008a60:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008a62:	4b06      	ldr	r3, [pc, #24]	; (8008a7c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	4a05      	ldr	r2, [pc, #20]	; (8008a7c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8008a68:	f023 0304 	bic.w	r3, r3, #4
 8008a6c:	6113      	str	r3, [r2, #16]
}
 8008a6e:	bf00      	nop
 8008a70:	370c      	adds	r7, #12
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bc80      	pop	{r7}
 8008a76:	4770      	bx	lr
 8008a78:	58000400 	.word	0x58000400
 8008a7c:	e000ed00 	.word	0xe000ed00

08008a80 <LL_PWR_IsEnabledBkUpAccess>:
{
 8008a80:	b480      	push	{r7}
 8008a82:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8008a84:	4b06      	ldr	r3, [pc, #24]	; (8008aa0 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a90:	d101      	bne.n	8008a96 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8008a92:	2301      	movs	r3, #1
 8008a94:	e000      	b.n	8008a98 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bc80      	pop	{r7}
 8008a9e:	4770      	bx	lr
 8008aa0:	58000400 	.word	0x58000400

08008aa4 <LL_RCC_HSE_EnableTcxo>:
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8008aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ab2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ab6:	6013      	str	r3, [r2, #0]
}
 8008ab8:	bf00      	nop
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bc80      	pop	{r7}
 8008abe:	4770      	bx	lr

08008ac0 <LL_RCC_HSE_DisableTcxo>:
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8008ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ace:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ad2:	6013      	str	r3, [r2, #0]
}
 8008ad4:	bf00      	nop
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bc80      	pop	{r7}
 8008ada:	4770      	bx	lr

08008adc <LL_RCC_HSE_IsEnabledDiv2>:
{
 8008adc:	b480      	push	{r7}
 8008ade:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8008ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008aea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008aee:	d101      	bne.n	8008af4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8008af0:	2301      	movs	r3, #1
 8008af2:	e000      	b.n	8008af6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bc80      	pop	{r7}
 8008afc:	4770      	bx	lr

08008afe <LL_RCC_HSE_Enable>:
{
 8008afe:	b480      	push	{r7}
 8008b00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8008b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b10:	6013      	str	r3, [r2, #0]
}
 8008b12:	bf00      	nop
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bc80      	pop	{r7}
 8008b18:	4770      	bx	lr

08008b1a <LL_RCC_HSE_Disable>:
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8008b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b2c:	6013      	str	r3, [r2, #0]
}
 8008b2e:	bf00      	nop
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bc80      	pop	{r7}
 8008b34:	4770      	bx	lr

08008b36 <LL_RCC_HSE_IsReady>:
{
 8008b36:	b480      	push	{r7}
 8008b38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8008b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b48:	d101      	bne.n	8008b4e <LL_RCC_HSE_IsReady+0x18>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e000      	b.n	8008b50 <LL_RCC_HSE_IsReady+0x1a>
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bc80      	pop	{r7}
 8008b56:	4770      	bx	lr

08008b58 <LL_RCC_HSI_Enable>:
{
 8008b58:	b480      	push	{r7}
 8008b5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b6a:	6013      	str	r3, [r2, #0]
}
 8008b6c:	bf00      	nop
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bc80      	pop	{r7}
 8008b72:	4770      	bx	lr

08008b74 <LL_RCC_HSI_Disable>:
{
 8008b74:	b480      	push	{r7}
 8008b76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8008b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b86:	6013      	str	r3, [r2, #0]
}
 8008b88:	bf00      	nop
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bc80      	pop	{r7}
 8008b8e:	4770      	bx	lr

08008b90 <LL_RCC_HSI_IsReady>:
{
 8008b90:	b480      	push	{r7}
 8008b92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ba2:	d101      	bne.n	8008ba8 <LL_RCC_HSI_IsReady+0x18>
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e000      	b.n	8008baa <LL_RCC_HSI_IsReady+0x1a>
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bc80      	pop	{r7}
 8008bb0:	4770      	bx	lr

08008bb2 <LL_RCC_HSI_SetCalibTrimming>:
{
 8008bb2:	b480      	push	{r7}
 8008bb4:	b083      	sub	sp, #12
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8008bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	061b      	lsls	r3, r3, #24
 8008bc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	604b      	str	r3, [r1, #4]
}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bc80      	pop	{r7}
 8008bd8:	4770      	bx	lr

08008bda <LL_RCC_LSE_IsReady>:
{
 8008bda:	b480      	push	{r7}
 8008bdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008be6:	f003 0302 	and.w	r3, r3, #2
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d101      	bne.n	8008bf2 <LL_RCC_LSE_IsReady+0x18>
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e000      	b.n	8008bf4 <LL_RCC_LSE_IsReady+0x1a>
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bc80      	pop	{r7}
 8008bfa:	4770      	bx	lr

08008bfc <LL_RCC_LSI_Enable>:
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8008c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c0c:	f043 0301 	orr.w	r3, r3, #1
 8008c10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008c14:	bf00      	nop
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bc80      	pop	{r7}
 8008c1a:	4770      	bx	lr

08008c1c <LL_RCC_LSI_Disable>:
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8008c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c2c:	f023 0301 	bic.w	r3, r3, #1
 8008c30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008c34:	bf00      	nop
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bc80      	pop	{r7}
 8008c3a:	4770      	bx	lr

08008c3c <LL_RCC_LSI_IsReady>:
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8008c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c48:	f003 0302 	and.w	r3, r3, #2
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	d101      	bne.n	8008c54 <LL_RCC_LSI_IsReady+0x18>
 8008c50:	2301      	movs	r3, #1
 8008c52:	e000      	b.n	8008c56 <LL_RCC_LSI_IsReady+0x1a>
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bc80      	pop	{r7}
 8008c5c:	4770      	bx	lr

08008c5e <LL_RCC_MSI_Enable>:
{
 8008c5e:	b480      	push	{r7}
 8008c60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8008c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c6c:	f043 0301 	orr.w	r3, r3, #1
 8008c70:	6013      	str	r3, [r2, #0]
}
 8008c72:	bf00      	nop
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bc80      	pop	{r7}
 8008c78:	4770      	bx	lr

08008c7a <LL_RCC_MSI_Disable>:
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8008c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c88:	f023 0301 	bic.w	r3, r3, #1
 8008c8c:	6013      	str	r3, [r2, #0]
}
 8008c8e:	bf00      	nop
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bc80      	pop	{r7}
 8008c94:	4770      	bx	lr

08008c96 <LL_RCC_MSI_IsReady>:
{
 8008c96:	b480      	push	{r7}
 8008c98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8008c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 0302 	and.w	r3, r3, #2
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d101      	bne.n	8008cac <LL_RCC_MSI_IsReady+0x16>
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e000      	b.n	8008cae <LL_RCC_MSI_IsReady+0x18>
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bc80      	pop	{r7}
 8008cb4:	4770      	bx	lr

08008cb6 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8008cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 0308 	and.w	r3, r3, #8
 8008cc4:	2b08      	cmp	r3, #8
 8008cc6:	d101      	bne.n	8008ccc <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e000      	b.n	8008cce <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bc80      	pop	{r7}
 8008cd4:	4770      	bx	lr

08008cd6 <LL_RCC_MSI_GetRange>:
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8008cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bc80      	pop	{r7}
 8008cea:	4770      	bx	lr

08008cec <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8008cec:	b480      	push	{r7}
 8008cee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8008cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cf8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bc80      	pop	{r7}
 8008d02:	4770      	bx	lr

08008d04 <LL_RCC_MSI_SetCalibTrimming>:
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8008d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	021b      	lsls	r3, r3, #8
 8008d1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	604b      	str	r3, [r1, #4]
}
 8008d22:	bf00      	nop
 8008d24:	370c      	adds	r7, #12
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bc80      	pop	{r7}
 8008d2a:	4770      	bx	lr

08008d2c <LL_RCC_SetSysClkSource>:
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8008d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	f023 0203 	bic.w	r2, r3, #3
 8008d3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4313      	orrs	r3, r2
 8008d46:	608b      	str	r3, [r1, #8]
}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bc80      	pop	{r7}
 8008d50:	4770      	bx	lr

08008d52 <LL_RCC_GetSysClkSource>:
{
 8008d52:	b480      	push	{r7}
 8008d54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	f003 030c 	and.w	r3, r3, #12
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bc80      	pop	{r7}
 8008d66:	4770      	bx	lr

08008d68 <LL_RCC_SetAHBPrescaler>:
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8008d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	608b      	str	r3, [r1, #8]
}
 8008d84:	bf00      	nop
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bc80      	pop	{r7}
 8008d8c:	4770      	bx	lr

08008d8e <LL_RCC_SetAHB3Prescaler>:
{
 8008d8e:	b480      	push	{r7}
 8008d90:	b083      	sub	sp, #12
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8008d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008d9e:	f023 020f 	bic.w	r2, r3, #15
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	091b      	lsrs	r3, r3, #4
 8008da6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008daa:	4313      	orrs	r3, r2
 8008dac:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bc80      	pop	{r7}
 8008db8:	4770      	bx	lr

08008dba <LL_RCC_SetAPB1Prescaler>:
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b083      	sub	sp, #12
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8008dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008dcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	608b      	str	r3, [r1, #8]
}
 8008dd6:	bf00      	nop
 8008dd8:	370c      	adds	r7, #12
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bc80      	pop	{r7}
 8008dde:	4770      	bx	lr

08008de0 <LL_RCC_SetAPB2Prescaler>:
{
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8008de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008df2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	608b      	str	r3, [r1, #8]
}
 8008dfc:	bf00      	nop
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bc80      	pop	{r7}
 8008e04:	4770      	bx	lr

08008e06 <LL_RCC_GetAHBPrescaler>:
{
 8008e06:	b480      	push	{r7}
 8008e08:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bc80      	pop	{r7}
 8008e1a:	4770      	bx	lr

08008e1c <LL_RCC_GetAHB3Prescaler>:
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8008e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e24:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008e28:	011b      	lsls	r3, r3, #4
 8008e2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bc80      	pop	{r7}
 8008e34:	4770      	bx	lr

08008e36 <LL_RCC_GetAPB1Prescaler>:
{
 8008e36:	b480      	push	{r7}
 8008e38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bc80      	pop	{r7}
 8008e4a:	4770      	bx	lr

08008e4c <LL_RCC_GetAPB2Prescaler>:
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8008e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bc80      	pop	{r7}
 8008e60:	4770      	bx	lr

08008e62 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8008e62:	b480      	push	{r7}
 8008e64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e74:	6013      	str	r3, [r2, #0]
}
 8008e76:	bf00      	nop
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bc80      	pop	{r7}
 8008e7c:	4770      	bx	lr

08008e7e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8008e7e:	b480      	push	{r7}
 8008e80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8008e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e90:	6013      	str	r3, [r2, #0]
}
 8008e92:	bf00      	nop
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bc80      	pop	{r7}
 8008e98:	4770      	bx	lr

08008e9a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8008e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ea8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008eac:	d101      	bne.n	8008eb2 <LL_RCC_PLL_IsReady+0x18>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e000      	b.n	8008eb4 <LL_RCC_PLL_IsReady+0x1a>
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bc80      	pop	{r7}
 8008eba:	4770      	bx	lr

08008ebc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	0a1b      	lsrs	r3, r3, #8
 8008ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bc80      	pop	{r7}
 8008ed2:	4770      	bx	lr

08008ed4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8008ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bc80      	pop	{r7}
 8008ee8:	4770      	bx	lr

08008eea <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8008eea:	b480      	push	{r7}
 8008eec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bc80      	pop	{r7}
 8008efe:	4770      	bx	lr

08008f00 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8008f00:	b480      	push	{r7}
 8008f02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	f003 0303 	and.w	r3, r3, #3
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bc80      	pop	{r7}
 8008f14:	4770      	bx	lr

08008f16 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8008f16:	b480      	push	{r7}
 8008f18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8008f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f28:	d101      	bne.n	8008f2e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e000      	b.n	8008f30 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bc80      	pop	{r7}
 8008f36:	4770      	bx	lr

08008f38 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8008f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f40:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f4c:	d101      	bne.n	8008f52 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e000      	b.n	8008f54 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bc80      	pop	{r7}
 8008f5a:	4770      	bx	lr

08008f5c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8008f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f6e:	d101      	bne.n	8008f74 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8008f70:	2301      	movs	r3, #1
 8008f72:	e000      	b.n	8008f76 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bc80      	pop	{r7}
 8008f7c:	4770      	bx	lr

08008f7e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8008f7e:	b480      	push	{r7}
 8008f80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8008f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f90:	d101      	bne.n	8008f96 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8008f92:	2301      	movs	r3, #1
 8008f94:	e000      	b.n	8008f98 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bc80      	pop	{r7}
 8008f9e:	4770      	bx	lr

08008fa0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b088      	sub	sp, #32
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d101      	bne.n	8008fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e36f      	b.n	8009692 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fb2:	f7ff fece 	bl	8008d52 <LL_RCC_GetSysClkSource>
 8008fb6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008fb8:	f7ff ffa2 	bl	8008f00 <LL_RCC_PLL_GetMainSource>
 8008fbc:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f003 0320 	and.w	r3, r3, #32
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f000 80c4 	beq.w	8009154 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d005      	beq.n	8008fde <HAL_RCC_OscConfig+0x3e>
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	2b0c      	cmp	r3, #12
 8008fd6:	d176      	bne.n	80090c6 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d173      	bne.n	80090c6 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a1b      	ldr	r3, [r3, #32]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d101      	bne.n	8008fea <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	e353      	b.n	8009692 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f003 0308 	and.w	r3, r3, #8
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d005      	beq.n	8009008 <HAL_RCC_OscConfig+0x68>
 8008ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009006:	e006      	b.n	8009016 <HAL_RCC_OscConfig+0x76>
 8009008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800900c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009010:	091b      	lsrs	r3, r3, #4
 8009012:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009016:	4293      	cmp	r3, r2
 8009018:	d222      	bcs.n	8009060 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800901e:	4618      	mov	r0, r3
 8009020:	f000 fd3c 	bl	8009a9c <RCC_SetFlashLatencyFromMSIRange>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d001      	beq.n	800902e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	e331      	b.n	8009692 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800902e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009038:	f043 0308 	orr.w	r3, r3, #8
 800903c:	6013      	str	r3, [r2, #0]
 800903e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800904c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009050:	4313      	orrs	r3, r2
 8009052:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009058:	4618      	mov	r0, r3
 800905a:	f7ff fe53 	bl	8008d04 <LL_RCC_MSI_SetCalibTrimming>
 800905e:	e021      	b.n	80090a4 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800906a:	f043 0308 	orr.w	r3, r3, #8
 800906e:	6013      	str	r3, [r2, #0]
 8009070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009082:	4313      	orrs	r3, r2
 8009084:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908a:	4618      	mov	r0, r3
 800908c:	f7ff fe3a 	bl	8008d04 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009094:	4618      	mov	r0, r3
 8009096:	f000 fd01 	bl	8009a9c <RCC_SetFlashLatencyFromMSIRange>
 800909a:	4603      	mov	r3, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d001      	beq.n	80090a4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	e2f6      	b.n	8009692 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80090a4:	f000 fcc2 	bl	8009a2c <HAL_RCC_GetHCLKFreq>
 80090a8:	4603      	mov	r3, r0
 80090aa:	4aa7      	ldr	r2, [pc, #668]	; (8009348 <HAL_RCC_OscConfig+0x3a8>)
 80090ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80090ae:	4ba7      	ldr	r3, [pc, #668]	; (800934c <HAL_RCC_OscConfig+0x3ac>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7f9 fbd2 	bl	800285c <HAL_InitTick>
 80090b8:	4603      	mov	r3, r0
 80090ba:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80090bc:	7cfb      	ldrb	r3, [r7, #19]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d047      	beq.n	8009152 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80090c2:	7cfb      	ldrb	r3, [r7, #19]
 80090c4:	e2e5      	b.n	8009692 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a1b      	ldr	r3, [r3, #32]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d02c      	beq.n	8009128 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80090ce:	f7ff fdc6 	bl	8008c5e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80090d2:	f7f9 fbcd 	bl	8002870 <HAL_GetTick>
 80090d6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80090d8:	e008      	b.n	80090ec <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80090da:	f7f9 fbc9 	bl	8002870 <HAL_GetTick>
 80090de:	4602      	mov	r2, r0
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	1ad3      	subs	r3, r2, r3
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d901      	bls.n	80090ec <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80090e8:	2303      	movs	r3, #3
 80090ea:	e2d2      	b.n	8009692 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80090ec:	f7ff fdd3 	bl	8008c96 <LL_RCC_MSI_IsReady>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d0f1      	beq.n	80090da <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80090f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009100:	f043 0308 	orr.w	r3, r3, #8
 8009104:	6013      	str	r3, [r2, #0]
 8009106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009114:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009118:	4313      	orrs	r3, r2
 800911a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009120:	4618      	mov	r0, r3
 8009122:	f7ff fdef 	bl	8008d04 <LL_RCC_MSI_SetCalibTrimming>
 8009126:	e015      	b.n	8009154 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009128:	f7ff fda7 	bl	8008c7a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800912c:	f7f9 fba0 	bl	8002870 <HAL_GetTick>
 8009130:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8009132:	e008      	b.n	8009146 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009134:	f7f9 fb9c 	bl	8002870 <HAL_GetTick>
 8009138:	4602      	mov	r2, r0
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	1ad3      	subs	r3, r2, r3
 800913e:	2b02      	cmp	r3, #2
 8009140:	d901      	bls.n	8009146 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009142:	2303      	movs	r3, #3
 8009144:	e2a5      	b.n	8009692 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8009146:	f7ff fda6 	bl	8008c96 <LL_RCC_MSI_IsReady>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d1f1      	bne.n	8009134 <HAL_RCC_OscConfig+0x194>
 8009150:	e000      	b.n	8009154 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009152:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 0301 	and.w	r3, r3, #1
 800915c:	2b00      	cmp	r3, #0
 800915e:	d058      	beq.n	8009212 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	2b08      	cmp	r3, #8
 8009164:	d005      	beq.n	8009172 <HAL_RCC_OscConfig+0x1d2>
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	2b0c      	cmp	r3, #12
 800916a:	d108      	bne.n	800917e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	2b03      	cmp	r3, #3
 8009170:	d105      	bne.n	800917e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d14b      	bne.n	8009212 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e289      	b.n	8009692 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800917e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009190:	4313      	orrs	r3, r2
 8009192:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800919c:	d102      	bne.n	80091a4 <HAL_RCC_OscConfig+0x204>
 800919e:	f7ff fcae 	bl	8008afe <LL_RCC_HSE_Enable>
 80091a2:	e00d      	b.n	80091c0 <HAL_RCC_OscConfig+0x220>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80091ac:	d104      	bne.n	80091b8 <HAL_RCC_OscConfig+0x218>
 80091ae:	f7ff fc79 	bl	8008aa4 <LL_RCC_HSE_EnableTcxo>
 80091b2:	f7ff fca4 	bl	8008afe <LL_RCC_HSE_Enable>
 80091b6:	e003      	b.n	80091c0 <HAL_RCC_OscConfig+0x220>
 80091b8:	f7ff fcaf 	bl	8008b1a <LL_RCC_HSE_Disable>
 80091bc:	f7ff fc80 	bl	8008ac0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d012      	beq.n	80091ee <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091c8:	f7f9 fb52 	bl	8002870 <HAL_GetTick>
 80091cc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80091ce:	e008      	b.n	80091e2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80091d0:	f7f9 fb4e 	bl	8002870 <HAL_GetTick>
 80091d4:	4602      	mov	r2, r0
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	1ad3      	subs	r3, r2, r3
 80091da:	2b64      	cmp	r3, #100	; 0x64
 80091dc:	d901      	bls.n	80091e2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80091de:	2303      	movs	r3, #3
 80091e0:	e257      	b.n	8009692 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80091e2:	f7ff fca8 	bl	8008b36 <LL_RCC_HSE_IsReady>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d0f1      	beq.n	80091d0 <HAL_RCC_OscConfig+0x230>
 80091ec:	e011      	b.n	8009212 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091ee:	f7f9 fb3f 	bl	8002870 <HAL_GetTick>
 80091f2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80091f4:	e008      	b.n	8009208 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80091f6:	f7f9 fb3b 	bl	8002870 <HAL_GetTick>
 80091fa:	4602      	mov	r2, r0
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	2b64      	cmp	r3, #100	; 0x64
 8009202:	d901      	bls.n	8009208 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8009204:	2303      	movs	r3, #3
 8009206:	e244      	b.n	8009692 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8009208:	f7ff fc95 	bl	8008b36 <LL_RCC_HSE_IsReady>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d1f1      	bne.n	80091f6 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f003 0302 	and.w	r3, r3, #2
 800921a:	2b00      	cmp	r3, #0
 800921c:	d046      	beq.n	80092ac <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	2b04      	cmp	r3, #4
 8009222:	d005      	beq.n	8009230 <HAL_RCC_OscConfig+0x290>
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	2b0c      	cmp	r3, #12
 8009228:	d10e      	bne.n	8009248 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	2b02      	cmp	r3, #2
 800922e:	d10b      	bne.n	8009248 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d101      	bne.n	800923c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	e22a      	b.n	8009692 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	695b      	ldr	r3, [r3, #20]
 8009240:	4618      	mov	r0, r3
 8009242:	f7ff fcb6 	bl	8008bb2 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009246:	e031      	b.n	80092ac <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	691b      	ldr	r3, [r3, #16]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d019      	beq.n	8009284 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009250:	f7ff fc82 	bl	8008b58 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009254:	f7f9 fb0c 	bl	8002870 <HAL_GetTick>
 8009258:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800925a:	e008      	b.n	800926e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800925c:	f7f9 fb08 	bl	8002870 <HAL_GetTick>
 8009260:	4602      	mov	r2, r0
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	2b02      	cmp	r3, #2
 8009268:	d901      	bls.n	800926e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800926a:	2303      	movs	r3, #3
 800926c:	e211      	b.n	8009692 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800926e:	f7ff fc8f 	bl	8008b90 <LL_RCC_HSI_IsReady>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d0f1      	beq.n	800925c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	695b      	ldr	r3, [r3, #20]
 800927c:	4618      	mov	r0, r3
 800927e:	f7ff fc98 	bl	8008bb2 <LL_RCC_HSI_SetCalibTrimming>
 8009282:	e013      	b.n	80092ac <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009284:	f7ff fc76 	bl	8008b74 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009288:	f7f9 faf2 	bl	8002870 <HAL_GetTick>
 800928c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800928e:	e008      	b.n	80092a2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009290:	f7f9 faee 	bl	8002870 <HAL_GetTick>
 8009294:	4602      	mov	r2, r0
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	2b02      	cmp	r3, #2
 800929c:	d901      	bls.n	80092a2 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800929e:	2303      	movs	r3, #3
 80092a0:	e1f7      	b.n	8009692 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80092a2:	f7ff fc75 	bl	8008b90 <LL_RCC_HSI_IsReady>
 80092a6:	4603      	mov	r3, r0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1f1      	bne.n	8009290 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f003 0308 	and.w	r3, r3, #8
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d06e      	beq.n	8009396 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	699b      	ldr	r3, [r3, #24]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d056      	beq.n	800936e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80092c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092c8:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	69da      	ldr	r2, [r3, #28]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f003 0310 	and.w	r3, r3, #16
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d031      	beq.n	800933c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f003 0302 	and.w	r3, r3, #2
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d006      	beq.n	80092f0 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d101      	bne.n	80092f0 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	e1d0      	b.n	8009692 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f003 0301 	and.w	r3, r3, #1
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d013      	beq.n	8009322 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80092fa:	f7ff fc8f 	bl	8008c1c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80092fe:	f7f9 fab7 	bl	8002870 <HAL_GetTick>
 8009302:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8009304:	e008      	b.n	8009318 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009306:	f7f9 fab3 	bl	8002870 <HAL_GetTick>
 800930a:	4602      	mov	r2, r0
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	2b11      	cmp	r3, #17
 8009312:	d901      	bls.n	8009318 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8009314:	2303      	movs	r3, #3
 8009316:	e1bc      	b.n	8009692 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8009318:	f7ff fc90 	bl	8008c3c <LL_RCC_LSI_IsReady>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d1f1      	bne.n	8009306 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8009322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800932a:	f023 0210 	bic.w	r2, r3, #16
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	69db      	ldr	r3, [r3, #28]
 8009332:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009336:	4313      	orrs	r3, r2
 8009338:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800933c:	f7ff fc5e 	bl	8008bfc <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009340:	f7f9 fa96 	bl	8002870 <HAL_GetTick>
 8009344:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8009346:	e00c      	b.n	8009362 <HAL_RCC_OscConfig+0x3c2>
 8009348:	20000000 	.word	0x20000000
 800934c:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009350:	f7f9 fa8e 	bl	8002870 <HAL_GetTick>
 8009354:	4602      	mov	r2, r0
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	1ad3      	subs	r3, r2, r3
 800935a:	2b11      	cmp	r3, #17
 800935c:	d901      	bls.n	8009362 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800935e:	2303      	movs	r3, #3
 8009360:	e197      	b.n	8009692 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8009362:	f7ff fc6b 	bl	8008c3c <LL_RCC_LSI_IsReady>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d0f1      	beq.n	8009350 <HAL_RCC_OscConfig+0x3b0>
 800936c:	e013      	b.n	8009396 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800936e:	f7ff fc55 	bl	8008c1c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009372:	f7f9 fa7d 	bl	8002870 <HAL_GetTick>
 8009376:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8009378:	e008      	b.n	800938c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800937a:	f7f9 fa79 	bl	8002870 <HAL_GetTick>
 800937e:	4602      	mov	r2, r0
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	1ad3      	subs	r3, r2, r3
 8009384:	2b11      	cmp	r3, #17
 8009386:	d901      	bls.n	800938c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8009388:	2303      	movs	r3, #3
 800938a:	e182      	b.n	8009692 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 800938c:	f7ff fc56 	bl	8008c3c <LL_RCC_LSI_IsReady>
 8009390:	4603      	mov	r3, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1f1      	bne.n	800937a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 0304 	and.w	r3, r3, #4
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f000 80d8 	beq.w	8009554 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80093a4:	f7ff fb6c 	bl	8008a80 <LL_PWR_IsEnabledBkUpAccess>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d113      	bne.n	80093d6 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80093ae:	f7ff faab 	bl	8008908 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80093b2:	f7f9 fa5d 	bl	8002870 <HAL_GetTick>
 80093b6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80093b8:	e008      	b.n	80093cc <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093ba:	f7f9 fa59 	bl	8002870 <HAL_GetTick>
 80093be:	4602      	mov	r2, r0
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	1ad3      	subs	r3, r2, r3
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	d901      	bls.n	80093cc <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80093c8:	2303      	movs	r3, #3
 80093ca:	e162      	b.n	8009692 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80093cc:	f7ff fb58 	bl	8008a80 <LL_PWR_IsEnabledBkUpAccess>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d0f1      	beq.n	80093ba <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d07b      	beq.n	80094d6 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	2b85      	cmp	r3, #133	; 0x85
 80093e4:	d003      	beq.n	80093ee <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	2b05      	cmp	r3, #5
 80093ec:	d109      	bne.n	8009402 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80093ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80093fa:	f043 0304 	orr.w	r3, r3, #4
 80093fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009402:	f7f9 fa35 	bl	8002870 <HAL_GetTick>
 8009406:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800940c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009410:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009414:	f043 0301 	orr.w	r3, r3, #1
 8009418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800941c:	e00a      	b.n	8009434 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800941e:	f7f9 fa27 	bl	8002870 <HAL_GetTick>
 8009422:	4602      	mov	r2, r0
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	1ad3      	subs	r3, r2, r3
 8009428:	f241 3288 	movw	r2, #5000	; 0x1388
 800942c:	4293      	cmp	r3, r2
 800942e:	d901      	bls.n	8009434 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8009430:	2303      	movs	r3, #3
 8009432:	e12e      	b.n	8009692 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8009434:	f7ff fbd1 	bl	8008bda <LL_RCC_LSE_IsReady>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d0ef      	beq.n	800941e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	2b81      	cmp	r3, #129	; 0x81
 8009444:	d003      	beq.n	800944e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	2b85      	cmp	r3, #133	; 0x85
 800944c:	d121      	bne.n	8009492 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800944e:	f7f9 fa0f 	bl	8002870 <HAL_GetTick>
 8009452:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800945c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009464:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8009468:	e00a      	b.n	8009480 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800946a:	f7f9 fa01 	bl	8002870 <HAL_GetTick>
 800946e:	4602      	mov	r2, r0
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	1ad3      	subs	r3, r2, r3
 8009474:	f241 3288 	movw	r2, #5000	; 0x1388
 8009478:	4293      	cmp	r3, r2
 800947a:	d901      	bls.n	8009480 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 800947c:	2303      	movs	r3, #3
 800947e:	e108      	b.n	8009692 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8009480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800948c:	2b00      	cmp	r3, #0
 800948e:	d0ec      	beq.n	800946a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8009490:	e060      	b.n	8009554 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009492:	f7f9 f9ed 	bl	8002870 <HAL_GetTick>
 8009496:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800949c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80094a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80094ac:	e00a      	b.n	80094c4 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094ae:	f7f9 f9df 	bl	8002870 <HAL_GetTick>
 80094b2:	4602      	mov	r2, r0
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80094bc:	4293      	cmp	r3, r2
 80094be:	d901      	bls.n	80094c4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80094c0:	2303      	movs	r3, #3
 80094c2:	e0e6      	b.n	8009692 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80094c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1ec      	bne.n	80094ae <HAL_RCC_OscConfig+0x50e>
 80094d4:	e03e      	b.n	8009554 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80094d6:	f7f9 f9cb 	bl	8002870 <HAL_GetTick>
 80094da:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80094dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80094e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80094f0:	e00a      	b.n	8009508 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094f2:	f7f9 f9bd 	bl	8002870 <HAL_GetTick>
 80094f6:	4602      	mov	r2, r0
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009500:	4293      	cmp	r3, r2
 8009502:	d901      	bls.n	8009508 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8009504:	2303      	movs	r3, #3
 8009506:	e0c4      	b.n	8009692 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800950c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009514:	2b00      	cmp	r3, #0
 8009516:	d1ec      	bne.n	80094f2 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009518:	f7f9 f9aa 	bl	8002870 <HAL_GetTick>
 800951c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800951e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009526:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800952a:	f023 0301 	bic.w	r3, r3, #1
 800952e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8009532:	e00a      	b.n	800954a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009534:	f7f9 f99c 	bl	8002870 <HAL_GetTick>
 8009538:	4602      	mov	r2, r0
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	1ad3      	subs	r3, r2, r3
 800953e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009542:	4293      	cmp	r3, r2
 8009544:	d901      	bls.n	800954a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8009546:	2303      	movs	r3, #3
 8009548:	e0a3      	b.n	8009692 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800954a:	f7ff fb46 	bl	8008bda <LL_RCC_LSE_IsReady>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d1ef      	bne.n	8009534 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009558:	2b00      	cmp	r3, #0
 800955a:	f000 8099 	beq.w	8009690 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	2b0c      	cmp	r3, #12
 8009562:	d06c      	beq.n	800963e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009568:	2b02      	cmp	r3, #2
 800956a:	d14b      	bne.n	8009604 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800956c:	f7ff fc87 	bl	8008e7e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009570:	f7f9 f97e 	bl	8002870 <HAL_GetTick>
 8009574:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8009576:	e008      	b.n	800958a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009578:	f7f9 f97a 	bl	8002870 <HAL_GetTick>
 800957c:	4602      	mov	r2, r0
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	2b0a      	cmp	r3, #10
 8009584:	d901      	bls.n	800958a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8009586:	2303      	movs	r3, #3
 8009588:	e083      	b.n	8009692 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800958a:	f7ff fc86 	bl	8008e9a <LL_RCC_PLL_IsReady>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1f1      	bne.n	8009578 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009598:	68da      	ldr	r2, [r3, #12]
 800959a:	4b40      	ldr	r3, [pc, #256]	; (800969c <HAL_RCC_OscConfig+0x6fc>)
 800959c:	4013      	ands	r3, r2
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80095a6:	4311      	orrs	r1, r2
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80095ac:	0212      	lsls	r2, r2, #8
 80095ae:	4311      	orrs	r1, r2
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80095b4:	4311      	orrs	r1, r2
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80095ba:	4311      	orrs	r1, r2
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80095c0:	430a      	orrs	r2, r1
 80095c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80095c6:	4313      	orrs	r3, r2
 80095c8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80095ca:	f7ff fc4a 	bl	8008e62 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80095ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095dc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095de:	f7f9 f947 	bl	8002870 <HAL_GetTick>
 80095e2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80095e4:	e008      	b.n	80095f8 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095e6:	f7f9 f943 	bl	8002870 <HAL_GetTick>
 80095ea:	4602      	mov	r2, r0
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	1ad3      	subs	r3, r2, r3
 80095f0:	2b0a      	cmp	r3, #10
 80095f2:	d901      	bls.n	80095f8 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80095f4:	2303      	movs	r3, #3
 80095f6:	e04c      	b.n	8009692 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80095f8:	f7ff fc4f 	bl	8008e9a <LL_RCC_PLL_IsReady>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d0f1      	beq.n	80095e6 <HAL_RCC_OscConfig+0x646>
 8009602:	e045      	b.n	8009690 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009604:	f7ff fc3b 	bl	8008e7e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009608:	f7f9 f932 	bl	8002870 <HAL_GetTick>
 800960c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800960e:	e008      	b.n	8009622 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009610:	f7f9 f92e 	bl	8002870 <HAL_GetTick>
 8009614:	4602      	mov	r2, r0
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	1ad3      	subs	r3, r2, r3
 800961a:	2b0a      	cmp	r3, #10
 800961c:	d901      	bls.n	8009622 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800961e:	2303      	movs	r3, #3
 8009620:	e037      	b.n	8009692 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8009622:	f7ff fc3a 	bl	8008e9a <LL_RCC_PLL_IsReady>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d1f1      	bne.n	8009610 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800962c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009630:	68da      	ldr	r2, [r3, #12]
 8009632:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009636:	4b1a      	ldr	r3, [pc, #104]	; (80096a0 <HAL_RCC_OscConfig+0x700>)
 8009638:	4013      	ands	r3, r2
 800963a:	60cb      	str	r3, [r1, #12]
 800963c:	e028      	b.n	8009690 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009642:	2b01      	cmp	r3, #1
 8009644:	d101      	bne.n	800964a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	e023      	b.n	8009692 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800964a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	f003 0203 	and.w	r2, r3, #3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800965c:	429a      	cmp	r2, r3
 800965e:	d115      	bne.n	800968c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800966a:	429a      	cmp	r2, r3
 800966c:	d10e      	bne.n	800968c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009678:	021b      	lsls	r3, r3, #8
 800967a:	429a      	cmp	r2, r3
 800967c:	d106      	bne.n	800968c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009688:	429a      	cmp	r2, r3
 800968a:	d001      	beq.n	8009690 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	e000      	b.n	8009692 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3720      	adds	r7, #32
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	11c1808c 	.word	0x11c1808c
 80096a0:	eefefffc 	.word	0xeefefffc

080096a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d101      	bne.n	80096b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	e10f      	b.n	80098d8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80096b8:	4b89      	ldr	r3, [pc, #548]	; (80098e0 <HAL_RCC_ClockConfig+0x23c>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f003 0307 	and.w	r3, r3, #7
 80096c0:	683a      	ldr	r2, [r7, #0]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d91b      	bls.n	80096fe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096c6:	4b86      	ldr	r3, [pc, #536]	; (80098e0 <HAL_RCC_ClockConfig+0x23c>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f023 0207 	bic.w	r2, r3, #7
 80096ce:	4984      	ldr	r1, [pc, #528]	; (80098e0 <HAL_RCC_ClockConfig+0x23c>)
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	4313      	orrs	r3, r2
 80096d4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80096d6:	f7f9 f8cb 	bl	8002870 <HAL_GetTick>
 80096da:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80096dc:	e008      	b.n	80096f0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80096de:	f7f9 f8c7 	bl	8002870 <HAL_GetTick>
 80096e2:	4602      	mov	r2, r0
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	1ad3      	subs	r3, r2, r3
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d901      	bls.n	80096f0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80096ec:	2303      	movs	r3, #3
 80096ee:	e0f3      	b.n	80098d8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80096f0:	4b7b      	ldr	r3, [pc, #492]	; (80098e0 <HAL_RCC_ClockConfig+0x23c>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f003 0307 	and.w	r3, r3, #7
 80096f8:	683a      	ldr	r2, [r7, #0]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d1ef      	bne.n	80096de <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 0302 	and.w	r3, r3, #2
 8009706:	2b00      	cmp	r3, #0
 8009708:	d016      	beq.n	8009738 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	4618      	mov	r0, r3
 8009710:	f7ff fb2a 	bl	8008d68 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009714:	f7f9 f8ac 	bl	8002870 <HAL_GetTick>
 8009718:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800971a:	e008      	b.n	800972e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800971c:	f7f9 f8a8 	bl	8002870 <HAL_GetTick>
 8009720:	4602      	mov	r2, r0
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	1ad3      	subs	r3, r2, r3
 8009726:	2b02      	cmp	r3, #2
 8009728:	d901      	bls.n	800972e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800972a:	2303      	movs	r3, #3
 800972c:	e0d4      	b.n	80098d8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800972e:	f7ff fbf2 	bl	8008f16 <LL_RCC_IsActiveFlag_HPRE>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d0f1      	beq.n	800971c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009740:	2b00      	cmp	r3, #0
 8009742:	d016      	beq.n	8009772 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	695b      	ldr	r3, [r3, #20]
 8009748:	4618      	mov	r0, r3
 800974a:	f7ff fb20 	bl	8008d8e <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800974e:	f7f9 f88f 	bl	8002870 <HAL_GetTick>
 8009752:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8009754:	e008      	b.n	8009768 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009756:	f7f9 f88b 	bl	8002870 <HAL_GetTick>
 800975a:	4602      	mov	r2, r0
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	1ad3      	subs	r3, r2, r3
 8009760:	2b02      	cmp	r3, #2
 8009762:	d901      	bls.n	8009768 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8009764:	2303      	movs	r3, #3
 8009766:	e0b7      	b.n	80098d8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8009768:	f7ff fbe6 	bl	8008f38 <LL_RCC_IsActiveFlag_SHDHPRE>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d0f1      	beq.n	8009756 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 0304 	and.w	r3, r3, #4
 800977a:	2b00      	cmp	r3, #0
 800977c:	d016      	beq.n	80097ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	68db      	ldr	r3, [r3, #12]
 8009782:	4618      	mov	r0, r3
 8009784:	f7ff fb19 	bl	8008dba <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009788:	f7f9 f872 	bl	8002870 <HAL_GetTick>
 800978c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800978e:	e008      	b.n	80097a2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009790:	f7f9 f86e 	bl	8002870 <HAL_GetTick>
 8009794:	4602      	mov	r2, r0
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	1ad3      	subs	r3, r2, r3
 800979a:	2b02      	cmp	r3, #2
 800979c:	d901      	bls.n	80097a2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800979e:	2303      	movs	r3, #3
 80097a0:	e09a      	b.n	80098d8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80097a2:	f7ff fbdb 	bl	8008f5c <LL_RCC_IsActiveFlag_PPRE1>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d0f1      	beq.n	8009790 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f003 0308 	and.w	r3, r3, #8
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d017      	beq.n	80097e8 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	691b      	ldr	r3, [r3, #16]
 80097bc:	00db      	lsls	r3, r3, #3
 80097be:	4618      	mov	r0, r3
 80097c0:	f7ff fb0e 	bl	8008de0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80097c4:	f7f9 f854 	bl	8002870 <HAL_GetTick>
 80097c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80097ca:	e008      	b.n	80097de <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80097cc:	f7f9 f850 	bl	8002870 <HAL_GetTick>
 80097d0:	4602      	mov	r2, r0
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	1ad3      	subs	r3, r2, r3
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	d901      	bls.n	80097de <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80097da:	2303      	movs	r3, #3
 80097dc:	e07c      	b.n	80098d8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80097de:	f7ff fbce 	bl	8008f7e <LL_RCC_IsActiveFlag_PPRE2>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d0f1      	beq.n	80097cc <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f003 0301 	and.w	r3, r3, #1
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d043      	beq.n	800987c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d106      	bne.n	800980a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80097fc:	f7ff f99b 	bl	8008b36 <LL_RCC_HSE_IsReady>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d11e      	bne.n	8009844 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	e066      	b.n	80098d8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	2b03      	cmp	r3, #3
 8009810:	d106      	bne.n	8009820 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8009812:	f7ff fb42 	bl	8008e9a <LL_RCC_PLL_IsReady>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d113      	bne.n	8009844 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	e05b      	b.n	80098d8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d106      	bne.n	8009836 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8009828:	f7ff fa35 	bl	8008c96 <LL_RCC_MSI_IsReady>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d108      	bne.n	8009844 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009832:	2301      	movs	r3, #1
 8009834:	e050      	b.n	80098d8 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8009836:	f7ff f9ab 	bl	8008b90 <LL_RCC_HSI_IsReady>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d101      	bne.n	8009844 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	e049      	b.n	80098d8 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	4618      	mov	r0, r3
 800984a:	f7ff fa6f 	bl	8008d2c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800984e:	f7f9 f80f 	bl	8002870 <HAL_GetTick>
 8009852:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009854:	e00a      	b.n	800986c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009856:	f7f9 f80b 	bl	8002870 <HAL_GetTick>
 800985a:	4602      	mov	r2, r0
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	1ad3      	subs	r3, r2, r3
 8009860:	f241 3288 	movw	r2, #5000	; 0x1388
 8009864:	4293      	cmp	r3, r2
 8009866:	d901      	bls.n	800986c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8009868:	2303      	movs	r3, #3
 800986a:	e035      	b.n	80098d8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800986c:	f7ff fa71 	bl	8008d52 <LL_RCC_GetSysClkSource>
 8009870:	4602      	mov	r2, r0
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	429a      	cmp	r2, r3
 800987a:	d1ec      	bne.n	8009856 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800987c:	4b18      	ldr	r3, [pc, #96]	; (80098e0 <HAL_RCC_ClockConfig+0x23c>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f003 0307 	and.w	r3, r3, #7
 8009884:	683a      	ldr	r2, [r7, #0]
 8009886:	429a      	cmp	r2, r3
 8009888:	d21b      	bcs.n	80098c2 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800988a:	4b15      	ldr	r3, [pc, #84]	; (80098e0 <HAL_RCC_ClockConfig+0x23c>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f023 0207 	bic.w	r2, r3, #7
 8009892:	4913      	ldr	r1, [pc, #76]	; (80098e0 <HAL_RCC_ClockConfig+0x23c>)
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	4313      	orrs	r3, r2
 8009898:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800989a:	f7f8 ffe9 	bl	8002870 <HAL_GetTick>
 800989e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80098a0:	e008      	b.n	80098b4 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80098a2:	f7f8 ffe5 	bl	8002870 <HAL_GetTick>
 80098a6:	4602      	mov	r2, r0
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d901      	bls.n	80098b4 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80098b0:	2303      	movs	r3, #3
 80098b2:	e011      	b.n	80098d8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80098b4:	4b0a      	ldr	r3, [pc, #40]	; (80098e0 <HAL_RCC_ClockConfig+0x23c>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f003 0307 	and.w	r3, r3, #7
 80098bc:	683a      	ldr	r2, [r7, #0]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d1ef      	bne.n	80098a2 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80098c2:	f000 f8b3 	bl	8009a2c <HAL_RCC_GetHCLKFreq>
 80098c6:	4603      	mov	r3, r0
 80098c8:	4a06      	ldr	r2, [pc, #24]	; (80098e4 <HAL_RCC_ClockConfig+0x240>)
 80098ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80098cc:	4b06      	ldr	r3, [pc, #24]	; (80098e8 <HAL_RCC_ClockConfig+0x244>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7f8 ffc3 	bl	800285c <HAL_InitTick>
 80098d6:	4603      	mov	r3, r0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3710      	adds	r7, #16
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	58004000 	.word	0x58004000
 80098e4:	20000000 	.word	0x20000000
 80098e8:	20000004 	.word	0x20000004

080098ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80098ec:	b590      	push	{r4, r7, lr}
 80098ee:	b087      	sub	sp, #28
 80098f0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80098f2:	2300      	movs	r3, #0
 80098f4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80098f6:	2300      	movs	r3, #0
 80098f8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098fa:	f7ff fa2a 	bl	8008d52 <LL_RCC_GetSysClkSource>
 80098fe:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009900:	f7ff fafe 	bl	8008f00 <LL_RCC_PLL_GetMainSource>
 8009904:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d005      	beq.n	8009918 <HAL_RCC_GetSysClockFreq+0x2c>
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	2b0c      	cmp	r3, #12
 8009910:	d139      	bne.n	8009986 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d136      	bne.n	8009986 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8009918:	f7ff f9cd 	bl	8008cb6 <LL_RCC_MSI_IsEnabledRangeSelect>
 800991c:	4603      	mov	r3, r0
 800991e:	2b00      	cmp	r3, #0
 8009920:	d115      	bne.n	800994e <HAL_RCC_GetSysClockFreq+0x62>
 8009922:	f7ff f9c8 	bl	8008cb6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009926:	4603      	mov	r3, r0
 8009928:	2b01      	cmp	r3, #1
 800992a:	d106      	bne.n	800993a <HAL_RCC_GetSysClockFreq+0x4e>
 800992c:	f7ff f9d3 	bl	8008cd6 <LL_RCC_MSI_GetRange>
 8009930:	4603      	mov	r3, r0
 8009932:	0a1b      	lsrs	r3, r3, #8
 8009934:	f003 030f 	and.w	r3, r3, #15
 8009938:	e005      	b.n	8009946 <HAL_RCC_GetSysClockFreq+0x5a>
 800993a:	f7ff f9d7 	bl	8008cec <LL_RCC_MSI_GetRangeAfterStandby>
 800993e:	4603      	mov	r3, r0
 8009940:	0a1b      	lsrs	r3, r3, #8
 8009942:	f003 030f 	and.w	r3, r3, #15
 8009946:	4a36      	ldr	r2, [pc, #216]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x134>)
 8009948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800994c:	e014      	b.n	8009978 <HAL_RCC_GetSysClockFreq+0x8c>
 800994e:	f7ff f9b2 	bl	8008cb6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009952:	4603      	mov	r3, r0
 8009954:	2b01      	cmp	r3, #1
 8009956:	d106      	bne.n	8009966 <HAL_RCC_GetSysClockFreq+0x7a>
 8009958:	f7ff f9bd 	bl	8008cd6 <LL_RCC_MSI_GetRange>
 800995c:	4603      	mov	r3, r0
 800995e:	091b      	lsrs	r3, r3, #4
 8009960:	f003 030f 	and.w	r3, r3, #15
 8009964:	e005      	b.n	8009972 <HAL_RCC_GetSysClockFreq+0x86>
 8009966:	f7ff f9c1 	bl	8008cec <LL_RCC_MSI_GetRangeAfterStandby>
 800996a:	4603      	mov	r3, r0
 800996c:	091b      	lsrs	r3, r3, #4
 800996e:	f003 030f 	and.w	r3, r3, #15
 8009972:	4a2b      	ldr	r2, [pc, #172]	; (8009a20 <HAL_RCC_GetSysClockFreq+0x134>)
 8009974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009978:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d115      	bne.n	80099ac <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009984:	e012      	b.n	80099ac <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	2b04      	cmp	r3, #4
 800998a:	d102      	bne.n	8009992 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800998c:	4b25      	ldr	r3, [pc, #148]	; (8009a24 <HAL_RCC_GetSysClockFreq+0x138>)
 800998e:	617b      	str	r3, [r7, #20]
 8009990:	e00c      	b.n	80099ac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	2b08      	cmp	r3, #8
 8009996:	d109      	bne.n	80099ac <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8009998:	f7ff f8a0 	bl	8008adc <LL_RCC_HSE_IsEnabledDiv2>
 800999c:	4603      	mov	r3, r0
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d102      	bne.n	80099a8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80099a2:	4b20      	ldr	r3, [pc, #128]	; (8009a24 <HAL_RCC_GetSysClockFreq+0x138>)
 80099a4:	617b      	str	r3, [r7, #20]
 80099a6:	e001      	b.n	80099ac <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80099a8:	4b1f      	ldr	r3, [pc, #124]	; (8009a28 <HAL_RCC_GetSysClockFreq+0x13c>)
 80099aa:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80099ac:	f7ff f9d1 	bl	8008d52 <LL_RCC_GetSysClkSource>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b0c      	cmp	r3, #12
 80099b4:	d12f      	bne.n	8009a16 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80099b6:	f7ff faa3 	bl	8008f00 <LL_RCC_PLL_GetMainSource>
 80099ba:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d003      	beq.n	80099ca <HAL_RCC_GetSysClockFreq+0xde>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2b03      	cmp	r3, #3
 80099c6:	d003      	beq.n	80099d0 <HAL_RCC_GetSysClockFreq+0xe4>
 80099c8:	e00d      	b.n	80099e6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80099ca:	4b16      	ldr	r3, [pc, #88]	; (8009a24 <HAL_RCC_GetSysClockFreq+0x138>)
 80099cc:	60fb      	str	r3, [r7, #12]
        break;
 80099ce:	e00d      	b.n	80099ec <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80099d0:	f7ff f884 	bl	8008adc <LL_RCC_HSE_IsEnabledDiv2>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d102      	bne.n	80099e0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80099da:	4b12      	ldr	r3, [pc, #72]	; (8009a24 <HAL_RCC_GetSysClockFreq+0x138>)
 80099dc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80099de:	e005      	b.n	80099ec <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80099e0:	4b11      	ldr	r3, [pc, #68]	; (8009a28 <HAL_RCC_GetSysClockFreq+0x13c>)
 80099e2:	60fb      	str	r3, [r7, #12]
        break;
 80099e4:	e002      	b.n	80099ec <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	60fb      	str	r3, [r7, #12]
        break;
 80099ea:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80099ec:	f7ff fa66 	bl	8008ebc <LL_RCC_PLL_GetN>
 80099f0:	4602      	mov	r2, r0
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	fb03 f402 	mul.w	r4, r3, r2
 80099f8:	f7ff fa77 	bl	8008eea <LL_RCC_PLL_GetDivider>
 80099fc:	4603      	mov	r3, r0
 80099fe:	091b      	lsrs	r3, r3, #4
 8009a00:	3301      	adds	r3, #1
 8009a02:	fbb4 f4f3 	udiv	r4, r4, r3
 8009a06:	f7ff fa65 	bl	8008ed4 <LL_RCC_PLL_GetR>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	0f5b      	lsrs	r3, r3, #29
 8009a0e:	3301      	adds	r3, #1
 8009a10:	fbb4 f3f3 	udiv	r3, r4, r3
 8009a14:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8009a16:	697b      	ldr	r3, [r7, #20]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	371c      	adds	r7, #28
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd90      	pop	{r4, r7, pc}
 8009a20:	0802192c 	.word	0x0802192c
 8009a24:	00f42400 	.word	0x00f42400
 8009a28:	01e84800 	.word	0x01e84800

08009a2c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a2c:	b598      	push	{r3, r4, r7, lr}
 8009a2e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8009a30:	f7ff ff5c 	bl	80098ec <HAL_RCC_GetSysClockFreq>
 8009a34:	4604      	mov	r4, r0
 8009a36:	f7ff f9e6 	bl	8008e06 <LL_RCC_GetAHBPrescaler>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	091b      	lsrs	r3, r3, #4
 8009a3e:	f003 030f 	and.w	r3, r3, #15
 8009a42:	4a03      	ldr	r2, [pc, #12]	; (8009a50 <HAL_RCC_GetHCLKFreq+0x24>)
 8009a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a48:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	bd98      	pop	{r3, r4, r7, pc}
 8009a50:	080218cc 	.word	0x080218cc

08009a54 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a54:	b598      	push	{r3, r4, r7, lr}
 8009a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009a58:	f7ff ffe8 	bl	8009a2c <HAL_RCC_GetHCLKFreq>
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	f7ff f9ea 	bl	8008e36 <LL_RCC_GetAPB1Prescaler>
 8009a62:	4603      	mov	r3, r0
 8009a64:	0a1b      	lsrs	r3, r3, #8
 8009a66:	4a03      	ldr	r2, [pc, #12]	; (8009a74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a6c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	bd98      	pop	{r3, r4, r7, pc}
 8009a74:	0802190c 	.word	0x0802190c

08009a78 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a78:	b598      	push	{r3, r4, r7, lr}
 8009a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8009a7c:	f7ff ffd6 	bl	8009a2c <HAL_RCC_GetHCLKFreq>
 8009a80:	4604      	mov	r4, r0
 8009a82:	f7ff f9e3 	bl	8008e4c <LL_RCC_GetAPB2Prescaler>
 8009a86:	4603      	mov	r3, r0
 8009a88:	0adb      	lsrs	r3, r3, #11
 8009a8a:	4a03      	ldr	r2, [pc, #12]	; (8009a98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a90:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	bd98      	pop	{r3, r4, r7, pc}
 8009a98:	0802190c 	.word	0x0802190c

08009a9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8009a9c:	b590      	push	{r4, r7, lr}
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	091b      	lsrs	r3, r3, #4
 8009aa8:	f003 030f 	and.w	r3, r3, #15
 8009aac:	4a10      	ldr	r2, [pc, #64]	; (8009af0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8009aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ab2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8009ab4:	f7ff f9b2 	bl	8008e1c <LL_RCC_GetAHB3Prescaler>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	091b      	lsrs	r3, r3, #4
 8009abc:	f003 030f 	and.w	r3, r3, #15
 8009ac0:	4a0c      	ldr	r2, [pc, #48]	; (8009af4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8009ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ac6:	68fa      	ldr	r2, [r7, #12]
 8009ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009acc:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	4a09      	ldr	r2, [pc, #36]	; (8009af8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8009ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ad6:	0c9c      	lsrs	r4, r3, #18
 8009ad8:	f7fe ff58 	bl	800898c <HAL_PWREx_GetVoltageRange>
 8009adc:	4603      	mov	r3, r0
 8009ade:	4619      	mov	r1, r3
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f000 f80b 	bl	8009afc <RCC_SetFlashLatency>
 8009ae6:	4603      	mov	r3, r0
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3714      	adds	r7, #20
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd90      	pop	{r4, r7, pc}
 8009af0:	0802192c 	.word	0x0802192c
 8009af4:	080218cc 	.word	0x080218cc
 8009af8:	431bde83 	.word	0x431bde83

08009afc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b08e      	sub	sp, #56	; 0x38
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8009b06:	4a3a      	ldr	r2, [pc, #232]	; (8009bf0 <RCC_SetFlashLatency+0xf4>)
 8009b08:	f107 0320 	add.w	r3, r7, #32
 8009b0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b10:	6018      	str	r0, [r3, #0]
 8009b12:	3304      	adds	r3, #4
 8009b14:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8009b16:	4a37      	ldr	r2, [pc, #220]	; (8009bf4 <RCC_SetFlashLatency+0xf8>)
 8009b18:	f107 0318 	add.w	r3, r7, #24
 8009b1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b20:	6018      	str	r0, [r3, #0]
 8009b22:	3304      	adds	r3, #4
 8009b24:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8009b26:	4a34      	ldr	r2, [pc, #208]	; (8009bf8 <RCC_SetFlashLatency+0xfc>)
 8009b28:	f107 030c 	add.w	r3, r7, #12
 8009b2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8009b2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8009b32:	2300      	movs	r3, #0
 8009b34:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b3c:	d11b      	bne.n	8009b76 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009b3e:	2300      	movs	r3, #0
 8009b40:	633b      	str	r3, [r7, #48]	; 0x30
 8009b42:	e014      	b.n	8009b6e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8009b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b46:	005b      	lsls	r3, r3, #1
 8009b48:	3338      	adds	r3, #56	; 0x38
 8009b4a:	443b      	add	r3, r7
 8009b4c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8009b50:	461a      	mov	r2, r3
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d807      	bhi.n	8009b68 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	3338      	adds	r3, #56	; 0x38
 8009b5e:	443b      	add	r3, r7
 8009b60:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8009b64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b66:	e021      	b.n	8009bac <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8009b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b70:	2b02      	cmp	r3, #2
 8009b72:	d9e7      	bls.n	8009b44 <RCC_SetFlashLatency+0x48>
 8009b74:	e01a      	b.n	8009bac <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009b76:	2300      	movs	r3, #0
 8009b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b7a:	e014      	b.n	8009ba6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8009b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7e:	005b      	lsls	r3, r3, #1
 8009b80:	3338      	adds	r3, #56	; 0x38
 8009b82:	443b      	add	r3, r7
 8009b84:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8009b88:	461a      	mov	r2, r3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d807      	bhi.n	8009ba0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	3338      	adds	r3, #56	; 0x38
 8009b96:	443b      	add	r3, r7
 8009b98:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8009b9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b9e:	e005      	b.n	8009bac <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba8:	2b02      	cmp	r3, #2
 8009baa:	d9e7      	bls.n	8009b7c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009bac:	4b13      	ldr	r3, [pc, #76]	; (8009bfc <RCC_SetFlashLatency+0x100>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f023 0207 	bic.w	r2, r3, #7
 8009bb4:	4911      	ldr	r1, [pc, #68]	; (8009bfc <RCC_SetFlashLatency+0x100>)
 8009bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009bbc:	f7f8 fe58 	bl	8002870 <HAL_GetTick>
 8009bc0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8009bc2:	e008      	b.n	8009bd6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009bc4:	f7f8 fe54 	bl	8002870 <HAL_GetTick>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bcc:	1ad3      	subs	r3, r2, r3
 8009bce:	2b02      	cmp	r3, #2
 8009bd0:	d901      	bls.n	8009bd6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8009bd2:	2303      	movs	r3, #3
 8009bd4:	e007      	b.n	8009be6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8009bd6:	4b09      	ldr	r3, [pc, #36]	; (8009bfc <RCC_SetFlashLatency+0x100>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f003 0307 	and.w	r3, r3, #7
 8009bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d1ef      	bne.n	8009bc4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3738      	adds	r7, #56	; 0x38
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	08021008 	.word	0x08021008
 8009bf4:	08021010 	.word	0x08021010
 8009bf8:	08021018 	.word	0x08021018
 8009bfc:	58004000 	.word	0x58004000

08009c00 <LL_RCC_LSE_IsReady>:
{
 8009c00:	b480      	push	{r7}
 8009c02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c0c:	f003 0302 	and.w	r3, r3, #2
 8009c10:	2b02      	cmp	r3, #2
 8009c12:	d101      	bne.n	8009c18 <LL_RCC_LSE_IsReady+0x18>
 8009c14:	2301      	movs	r3, #1
 8009c16:	e000      	b.n	8009c1a <LL_RCC_LSE_IsReady+0x1a>
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bc80      	pop	{r7}
 8009c20:	4770      	bx	lr

08009c22 <LL_RCC_SetUSARTClockSource>:
{
 8009c22:	b480      	push	{r7}
 8009c24:	b083      	sub	sp, #12
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8009c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	0c1b      	lsrs	r3, r3, #16
 8009c36:	43db      	mvns	r3, r3
 8009c38:	401a      	ands	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009c42:	4313      	orrs	r3, r2
 8009c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009c48:	bf00      	nop
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bc80      	pop	{r7}
 8009c50:	4770      	bx	lr

08009c52 <LL_RCC_SetI2SClockSource>:
{
 8009c52:	b480      	push	{r7}
 8009c54:	b083      	sub	sp, #12
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8009c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009c72:	bf00      	nop
 8009c74:	370c      	adds	r7, #12
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bc80      	pop	{r7}
 8009c7a:	4770      	bx	lr

08009c7c <LL_RCC_SetLPUARTClockSource>:
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8009c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c8c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009c90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4313      	orrs	r3, r2
 8009c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009c9c:	bf00      	nop
 8009c9e:	370c      	adds	r7, #12
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bc80      	pop	{r7}
 8009ca4:	4770      	bx	lr

08009ca6 <LL_RCC_SetI2CClockSource>:
{
 8009ca6:	b480      	push	{r7}
 8009ca8:	b083      	sub	sp, #12
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8009cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	091b      	lsrs	r3, r3, #4
 8009cba:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8009cbe:	43db      	mvns	r3, r3
 8009cc0:	401a      	ands	r2, r3
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	011b      	lsls	r3, r3, #4
 8009cc6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8009cca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009cd4:	bf00      	nop
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bc80      	pop	{r7}
 8009cdc:	4770      	bx	lr

08009cde <LL_RCC_SetLPTIMClockSource>:
{
 8009cde:	b480      	push	{r7}
 8009ce0:	b083      	sub	sp, #12
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8009ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	0c1b      	lsrs	r3, r3, #16
 8009cf2:	041b      	lsls	r3, r3, #16
 8009cf4:	43db      	mvns	r3, r3
 8009cf6:	401a      	ands	r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	041b      	lsls	r3, r3, #16
 8009cfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009d00:	4313      	orrs	r3, r2
 8009d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009d06:	bf00      	nop
 8009d08:	370c      	adds	r7, #12
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bc80      	pop	{r7}
 8009d0e:	4770      	bx	lr

08009d10 <LL_RCC_SetRNGClockSource>:
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8009d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d20:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009d24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009d30:	bf00      	nop
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bc80      	pop	{r7}
 8009d38:	4770      	bx	lr

08009d3a <LL_RCC_SetADCClockSource>:
{
 8009d3a:	b480      	push	{r7}
 8009d3c:	b083      	sub	sp, #12
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8009d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009d4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009d5a:	bf00      	nop
 8009d5c:	370c      	adds	r7, #12
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bc80      	pop	{r7}
 8009d62:	4770      	bx	lr

08009d64 <LL_RCC_SetRTCClockSource>:
{
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009d84:	bf00      	nop
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bc80      	pop	{r7}
 8009d8c:	4770      	bx	lr

08009d8e <LL_RCC_GetRTCClockSource>:
{
 8009d8e:	b480      	push	{r7}
 8009d90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8009d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bc80      	pop	{r7}
 8009da4:	4770      	bx	lr

08009da6 <LL_RCC_ForceBackupDomainReset>:
{
 8009da6:	b480      	push	{r7}
 8009da8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009db2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009dbe:	bf00      	nop
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bc80      	pop	{r7}
 8009dc4:	4770      	bx	lr

08009dc6 <LL_RCC_ReleaseBackupDomainReset>:
{
 8009dc6:	b480      	push	{r7}
 8009dc8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009dde:	bf00      	nop
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bc80      	pop	{r7}
 8009de4:	4770      	bx	lr
	...

08009de8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b086      	sub	sp, #24
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8009df0:	2300      	movs	r3, #0
 8009df2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8009df4:	2300      	movs	r3, #0
 8009df6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8009df8:	2300      	movs	r3, #0
 8009dfa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d058      	beq.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8009e08:	f7fe fd7e 	bl	8008908 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009e0c:	f7f8 fd30 	bl	8002870 <HAL_GetTick>
 8009e10:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8009e12:	e009      	b.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e14:	f7f8 fd2c 	bl	8002870 <HAL_GetTick>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	1ad3      	subs	r3, r2, r3
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d902      	bls.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8009e22:	2303      	movs	r3, #3
 8009e24:	74fb      	strb	r3, [r7, #19]
        break;
 8009e26:	e006      	b.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8009e28:	4b7b      	ldr	r3, [pc, #492]	; (800a018 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e34:	d1ee      	bne.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8009e36:	7cfb      	ldrb	r3, [r7, #19]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d13c      	bne.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8009e3c:	f7ff ffa7 	bl	8009d8e <LL_RCC_GetRTCClockSource>
 8009e40:	4602      	mov	r2, r0
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d00f      	beq.n	8009e6a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e56:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009e58:	f7ff ffa5 	bl	8009da6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009e5c:	f7ff ffb3 	bl	8009dc6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009e60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	f003 0302 	and.w	r3, r3, #2
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d014      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e74:	f7f8 fcfc 	bl	8002870 <HAL_GetTick>
 8009e78:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8009e7a:	e00b      	b.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e7c:	f7f8 fcf8 	bl	8002870 <HAL_GetTick>
 8009e80:	4602      	mov	r2, r0
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	1ad3      	subs	r3, r2, r3
 8009e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d902      	bls.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8009e8e:	2303      	movs	r3, #3
 8009e90:	74fb      	strb	r3, [r7, #19]
            break;
 8009e92:	e004      	b.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8009e94:	f7ff feb4 	bl	8009c00 <LL_RCC_LSE_IsReady>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d1ee      	bne.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8009e9e:	7cfb      	ldrb	r3, [r7, #19]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d105      	bne.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7ff ff5b 	bl	8009d64 <LL_RCC_SetRTCClockSource>
 8009eae:	e004      	b.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009eb0:	7cfb      	ldrb	r3, [r7, #19]
 8009eb2:	74bb      	strb	r3, [r7, #18]
 8009eb4:	e001      	b.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eb6:	7cfb      	ldrb	r3, [r7, #19]
 8009eb8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f003 0301 	and.w	r3, r3, #1
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d004      	beq.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7ff fea9 	bl	8009c22 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f003 0302 	and.w	r3, r3, #2
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d004      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7ff fe9e 	bl	8009c22 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f003 0320 	and.w	r3, r3, #32
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d004      	beq.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	691b      	ldr	r3, [r3, #16]
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7ff fec0 	bl	8009c7c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d004      	beq.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6a1b      	ldr	r3, [r3, #32]
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7ff fee6 	bl	8009cde <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d004      	beq.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7ff fedb 	bl	8009cde <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d004      	beq.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7ff fed0 	bl	8009cde <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d004      	beq.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	695b      	ldr	r3, [r3, #20]
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7ff fea9 	bl	8009ca6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d004      	beq.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	699b      	ldr	r3, [r3, #24]
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7ff fe9e 	bl	8009ca6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d004      	beq.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	69db      	ldr	r3, [r3, #28]
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7ff fe93 	bl	8009ca6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f003 0310 	and.w	r3, r3, #16
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d011      	beq.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7ff fe5e 	bl	8009c52 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f9e:	d107      	bne.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8009fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009fae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d010      	beq.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7ff fea5 	bl	8009d10 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d107      	bne.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8009fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009fd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009fdc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d011      	beq.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7ff fea3 	bl	8009d3a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ffc:	d107      	bne.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a00c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800a00e:	7cbb      	ldrb	r3, [r7, #18]
}
 800a010:	4618      	mov	r0, r3
 800a012:	3718      	adds	r7, #24
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	58000400 	.word	0x58000400

0800a01c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a024:	2301      	movs	r3, #1
 800a026:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d071      	beq.n	800a112 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a034:	b2db      	uxtb	r3, r3
 800a036:	2b00      	cmp	r3, #0
 800a038:	d106      	bne.n	800a048 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f7f8 f88c 	bl	8002160 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2202      	movs	r2, #2
 800a04c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a050:	4b32      	ldr	r3, [pc, #200]	; (800a11c <HAL_RTC_Init+0x100>)
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	f003 0310 	and.w	r3, r3, #16
 800a058:	2b10      	cmp	r3, #16
 800a05a:	d051      	beq.n	800a100 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a05c:	4b2f      	ldr	r3, [pc, #188]	; (800a11c <HAL_RTC_Init+0x100>)
 800a05e:	22ca      	movs	r2, #202	; 0xca
 800a060:	625a      	str	r2, [r3, #36]	; 0x24
 800a062:	4b2e      	ldr	r3, [pc, #184]	; (800a11c <HAL_RTC_Init+0x100>)
 800a064:	2253      	movs	r2, #83	; 0x53
 800a066:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 fa11 	bl	800a490 <RTC_EnterInitMode>
 800a06e:	4603      	mov	r3, r0
 800a070:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a072:	7bfb      	ldrb	r3, [r7, #15]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d13f      	bne.n	800a0f8 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800a078:	4b28      	ldr	r3, [pc, #160]	; (800a11c <HAL_RTC_Init+0x100>)
 800a07a:	699b      	ldr	r3, [r3, #24]
 800a07c:	4a27      	ldr	r2, [pc, #156]	; (800a11c <HAL_RTC_Init+0x100>)
 800a07e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800a082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a086:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800a088:	4b24      	ldr	r3, [pc, #144]	; (800a11c <HAL_RTC_Init+0x100>)
 800a08a:	699a      	ldr	r2, [r3, #24]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6859      	ldr	r1, [r3, #4]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	691b      	ldr	r3, [r3, #16]
 800a094:	4319      	orrs	r1, r3
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	699b      	ldr	r3, [r3, #24]
 800a09a:	430b      	orrs	r3, r1
 800a09c:	491f      	ldr	r1, [pc, #124]	; (800a11c <HAL_RTC_Init+0x100>)
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	68da      	ldr	r2, [r3, #12]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	041b      	lsls	r3, r3, #16
 800a0ac:	491b      	ldr	r1, [pc, #108]	; (800a11c <HAL_RTC_Init+0x100>)
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800a0b2:	4b1a      	ldr	r3, [pc, #104]	; (800a11c <HAL_RTC_Init+0x100>)
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c2:	430b      	orrs	r3, r1
 800a0c4:	4915      	ldr	r1, [pc, #84]	; (800a11c <HAL_RTC_Init+0x100>)
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 fa14 	bl	800a4f8 <RTC_ExitInitMode>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800a0d4:	7bfb      	ldrb	r3, [r7, #15]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d10e      	bne.n	800a0f8 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800a0da:	4b10      	ldr	r3, [pc, #64]	; (800a11c <HAL_RTC_Init+0x100>)
 800a0dc:	699b      	ldr	r3, [r3, #24]
 800a0de:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a19      	ldr	r1, [r3, #32]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	69db      	ldr	r3, [r3, #28]
 800a0ea:	4319      	orrs	r1, r3
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	695b      	ldr	r3, [r3, #20]
 800a0f0:	430b      	orrs	r3, r1
 800a0f2:	490a      	ldr	r1, [pc, #40]	; (800a11c <HAL_RTC_Init+0x100>)
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a0f8:	4b08      	ldr	r3, [pc, #32]	; (800a11c <HAL_RTC_Init+0x100>)
 800a0fa:	22ff      	movs	r2, #255	; 0xff
 800a0fc:	625a      	str	r2, [r3, #36]	; 0x24
 800a0fe:	e001      	b.n	800a104 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800a100:	2300      	movs	r3, #0
 800a102:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a104:	7bfb      	ldrb	r3, [r7, #15]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d103      	bne.n	800a112 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2201      	movs	r2, #1
 800a10e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800a112:	7bfb      	ldrb	r3, [r7, #15]
}
 800a114:	4618      	mov	r0, r3
 800a116:	3710      	adds	r7, #16
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	40002800 	.word	0x40002800

0800a120 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a120:	b590      	push	{r4, r7, lr}
 800a122:	b087      	sub	sp, #28
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a12c:	2300      	movs	r3, #0
 800a12e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a136:	2b01      	cmp	r3, #1
 800a138:	d101      	bne.n	800a13e <HAL_RTC_SetAlarm_IT+0x1e>
 800a13a:	2302      	movs	r3, #2
 800a13c:	e0f3      	b.n	800a326 <HAL_RTC_SetAlarm_IT+0x206>
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2201      	movs	r2, #1
 800a142:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2202      	movs	r2, #2
 800a14a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800a14e:	4b78      	ldr	r3, [pc, #480]	; (800a330 <HAL_RTC_SetAlarm_IT+0x210>)
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a156:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a15e:	d06a      	beq.n	800a236 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d13a      	bne.n	800a1dc <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a166:	4b72      	ldr	r3, [pc, #456]	; (800a330 <HAL_RTC_SetAlarm_IT+0x210>)
 800a168:	699b      	ldr	r3, [r3, #24]
 800a16a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d102      	bne.n	800a178 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	2200      	movs	r2, #0
 800a176:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	695b      	ldr	r3, [r3, #20]
 800a17c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	4618      	mov	r0, r3
 800a186:	f000 f9f5 	bl	800a574 <RTC_ByteToBcd2>
 800a18a:	4603      	mov	r3, r0
 800a18c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	785b      	ldrb	r3, [r3, #1]
 800a192:	4618      	mov	r0, r3
 800a194:	f000 f9ee 	bl	800a574 <RTC_ByteToBcd2>
 800a198:	4603      	mov	r3, r0
 800a19a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a19c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	789b      	ldrb	r3, [r3, #2]
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f000 f9e6 	bl	800a574 <RTC_ByteToBcd2>
 800a1a8:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a1aa:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	78db      	ldrb	r3, [r3, #3]
 800a1b2:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800a1b4:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f000 f9d8 	bl	800a574 <RTC_ByteToBcd2>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800a1c8:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800a1d0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	617b      	str	r3, [r7, #20]
 800a1da:	e02c      	b.n	800a236 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	695b      	ldr	r3, [r3, #20]
 800a1e0:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 800a1e4:	d00d      	beq.n	800a202 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	695b      	ldr	r3, [r3, #20]
 800a1ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a1ee:	d008      	beq.n	800a202 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a1f0:	4b4f      	ldr	r3, [pc, #316]	; (800a330 <HAL_RTC_SetAlarm_IT+0x210>)
 800a1f2:	699b      	ldr	r3, [r3, #24]
 800a1f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d102      	bne.n	800a202 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	2200      	movs	r2, #0
 800a200:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	785b      	ldrb	r3, [r3, #1]
 800a20c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a20e:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800a210:	68ba      	ldr	r2, [r7, #8]
 800a212:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a214:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	78db      	ldrb	r3, [r3, #3]
 800a21a:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800a21c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a224:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800a226:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800a22c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800a232:	4313      	orrs	r3, r2
 800a234:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a236:	4b3e      	ldr	r3, [pc, #248]	; (800a330 <HAL_RTC_SetAlarm_IT+0x210>)
 800a238:	22ca      	movs	r2, #202	; 0xca
 800a23a:	625a      	str	r2, [r3, #36]	; 0x24
 800a23c:	4b3c      	ldr	r3, [pc, #240]	; (800a330 <HAL_RTC_SetAlarm_IT+0x210>)
 800a23e:	2253      	movs	r2, #83	; 0x53
 800a240:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a24a:	d12c      	bne.n	800a2a6 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800a24c:	4b38      	ldr	r3, [pc, #224]	; (800a330 <HAL_RTC_SetAlarm_IT+0x210>)
 800a24e:	699b      	ldr	r3, [r3, #24]
 800a250:	4a37      	ldr	r2, [pc, #220]	; (800a330 <HAL_RTC_SetAlarm_IT+0x210>)
 800a252:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800a256:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800a258:	4b35      	ldr	r3, [pc, #212]	; (800a330 <HAL_RTC_SetAlarm_IT+0x210>)
 800a25a:	2201      	movs	r2, #1
 800a25c:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a264:	d107      	bne.n	800a276 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	699a      	ldr	r2, [r3, #24]
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	69db      	ldr	r3, [r3, #28]
 800a26e:	4930      	ldr	r1, [pc, #192]	; (800a330 <HAL_RTC_SetAlarm_IT+0x210>)
 800a270:	4313      	orrs	r3, r2
 800a272:	644b      	str	r3, [r1, #68]	; 0x44
 800a274:	e006      	b.n	800a284 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800a276:	4a2e      	ldr	r2, [pc, #184]	; (800a330 <HAL_RTC_SetAlarm_IT+0x210>)
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800a27c:	4a2c      	ldr	r2, [pc, #176]	; (800a330 <HAL_RTC_SetAlarm_IT+0x210>)
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	699b      	ldr	r3, [r3, #24]
 800a282:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800a284:	4a2a      	ldr	r2, [pc, #168]	; (800a330 <HAL_RTC_SetAlarm_IT+0x210>)
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a290:	f043 0201 	orr.w	r2, r3, #1
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800a298:	4b25      	ldr	r3, [pc, #148]	; (800a330 <HAL_RTC_SetAlarm_IT+0x210>)
 800a29a:	699b      	ldr	r3, [r3, #24]
 800a29c:	4a24      	ldr	r2, [pc, #144]	; (800a330 <HAL_RTC_SetAlarm_IT+0x210>)
 800a29e:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800a2a2:	6193      	str	r3, [r2, #24]
 800a2a4:	e02b      	b.n	800a2fe <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800a2a6:	4b22      	ldr	r3, [pc, #136]	; (800a330 <HAL_RTC_SetAlarm_IT+0x210>)
 800a2a8:	699b      	ldr	r3, [r3, #24]
 800a2aa:	4a21      	ldr	r2, [pc, #132]	; (800a330 <HAL_RTC_SetAlarm_IT+0x210>)
 800a2ac:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800a2b0:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800a2b2:	4b1f      	ldr	r3, [pc, #124]	; (800a330 <HAL_RTC_SetAlarm_IT+0x210>)
 800a2b4:	2202      	movs	r2, #2
 800a2b6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2be:	d107      	bne.n	800a2d0 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	699a      	ldr	r2, [r3, #24]
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	69db      	ldr	r3, [r3, #28]
 800a2c8:	4919      	ldr	r1, [pc, #100]	; (800a330 <HAL_RTC_SetAlarm_IT+0x210>)
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a2ce:	e006      	b.n	800a2de <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800a2d0:	4a17      	ldr	r2, [pc, #92]	; (800a330 <HAL_RTC_SetAlarm_IT+0x210>)
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800a2d6:	4a16      	ldr	r2, [pc, #88]	; (800a330 <HAL_RTC_SetAlarm_IT+0x210>)
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	699b      	ldr	r3, [r3, #24]
 800a2dc:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800a2de:	4a14      	ldr	r2, [pc, #80]	; (800a330 <HAL_RTC_SetAlarm_IT+0x210>)
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ea:	f043 0202 	orr.w	r2, r3, #2
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800a2f2:	4b0f      	ldr	r3, [pc, #60]	; (800a330 <HAL_RTC_SetAlarm_IT+0x210>)
 800a2f4:	699b      	ldr	r3, [r3, #24]
 800a2f6:	4a0e      	ldr	r2, [pc, #56]	; (800a330 <HAL_RTC_SetAlarm_IT+0x210>)
 800a2f8:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 800a2fc:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800a2fe:	4b0d      	ldr	r3, [pc, #52]	; (800a334 <HAL_RTC_SetAlarm_IT+0x214>)
 800a300:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a304:	4a0b      	ldr	r2, [pc, #44]	; (800a334 <HAL_RTC_SetAlarm_IT+0x214>)
 800a306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a30a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a30e:	4b08      	ldr	r3, [pc, #32]	; (800a330 <HAL_RTC_SetAlarm_IT+0x210>)
 800a310:	22ff      	movs	r2, #255	; 0xff
 800a312:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2200      	movs	r2, #0
 800a320:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a324:	2300      	movs	r3, #0
}
 800a326:	4618      	mov	r0, r3
 800a328:	371c      	adds	r7, #28
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd90      	pop	{r4, r7, pc}
 800a32e:	bf00      	nop
 800a330:	40002800 	.word	0x40002800
 800a334:	58000800 	.word	0x58000800

0800a338 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d101      	bne.n	800a350 <HAL_RTC_DeactivateAlarm+0x18>
 800a34c:	2302      	movs	r3, #2
 800a34e:	e048      	b.n	800a3e2 <HAL_RTC_DeactivateAlarm+0xaa>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2201      	movs	r2, #1
 800a354:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2202      	movs	r2, #2
 800a35c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a360:	4b22      	ldr	r3, [pc, #136]	; (800a3ec <HAL_RTC_DeactivateAlarm+0xb4>)
 800a362:	22ca      	movs	r2, #202	; 0xca
 800a364:	625a      	str	r2, [r3, #36]	; 0x24
 800a366:	4b21      	ldr	r3, [pc, #132]	; (800a3ec <HAL_RTC_DeactivateAlarm+0xb4>)
 800a368:	2253      	movs	r2, #83	; 0x53
 800a36a:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a372:	d115      	bne.n	800a3a0 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800a374:	4b1d      	ldr	r3, [pc, #116]	; (800a3ec <HAL_RTC_DeactivateAlarm+0xb4>)
 800a376:	699b      	ldr	r3, [r3, #24]
 800a378:	4a1c      	ldr	r2, [pc, #112]	; (800a3ec <HAL_RTC_DeactivateAlarm+0xb4>)
 800a37a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800a37e:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800a380:	4b1a      	ldr	r3, [pc, #104]	; (800a3ec <HAL_RTC_DeactivateAlarm+0xb4>)
 800a382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a384:	4a19      	ldr	r2, [pc, #100]	; (800a3ec <HAL_RTC_DeactivateAlarm+0xb4>)
 800a386:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a38a:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a390:	f023 0201 	bic.w	r2, r3, #1
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800a398:	4b14      	ldr	r3, [pc, #80]	; (800a3ec <HAL_RTC_DeactivateAlarm+0xb4>)
 800a39a:	2201      	movs	r2, #1
 800a39c:	65da      	str	r2, [r3, #92]	; 0x5c
 800a39e:	e014      	b.n	800a3ca <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800a3a0:	4b12      	ldr	r3, [pc, #72]	; (800a3ec <HAL_RTC_DeactivateAlarm+0xb4>)
 800a3a2:	699b      	ldr	r3, [r3, #24]
 800a3a4:	4a11      	ldr	r2, [pc, #68]	; (800a3ec <HAL_RTC_DeactivateAlarm+0xb4>)
 800a3a6:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800a3aa:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800a3ac:	4b0f      	ldr	r3, [pc, #60]	; (800a3ec <HAL_RTC_DeactivateAlarm+0xb4>)
 800a3ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3b0:	4a0e      	ldr	r2, [pc, #56]	; (800a3ec <HAL_RTC_DeactivateAlarm+0xb4>)
 800a3b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a3b6:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3bc:	f023 0202 	bic.w	r2, r3, #2
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800a3c4:	4b09      	ldr	r3, [pc, #36]	; (800a3ec <HAL_RTC_DeactivateAlarm+0xb4>)
 800a3c6:	2202      	movs	r2, #2
 800a3c8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3ca:	4b08      	ldr	r3, [pc, #32]	; (800a3ec <HAL_RTC_DeactivateAlarm+0xb4>)
 800a3cc:	22ff      	movs	r2, #255	; 0xff
 800a3ce:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	370c      	adds	r7, #12
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bc80      	pop	{r7}
 800a3ea:	4770      	bx	lr
 800a3ec:	40002800 	.word	0x40002800

0800a3f0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 800a3f8:	4b11      	ldr	r3, [pc, #68]	; (800a440 <HAL_RTC_AlarmIRQHandler+0x50>)
 800a3fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a400:	4013      	ands	r3, r2
 800a402:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f003 0301 	and.w	r3, r3, #1
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d005      	beq.n	800a41a <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800a40e:	4b0c      	ldr	r3, [pc, #48]	; (800a440 <HAL_RTC_AlarmIRQHandler+0x50>)
 800a410:	2201      	movs	r2, #1
 800a412:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f7f8 fc3c 	bl	8002c92 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f003 0302 	and.w	r3, r3, #2
 800a420:	2b00      	cmp	r3, #0
 800a422:	d005      	beq.n	800a430 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800a424:	4b06      	ldr	r3, [pc, #24]	; (800a440 <HAL_RTC_AlarmIRQHandler+0x50>)
 800a426:	2202      	movs	r2, #2
 800a428:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 f94a 	bl	800a6c4 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2201      	movs	r2, #1
 800a434:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 800a438:	bf00      	nop
 800a43a:	3710      	adds	r7, #16
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	40002800 	.word	0x40002800

0800a444 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800a44c:	4b0f      	ldr	r3, [pc, #60]	; (800a48c <HAL_RTC_WaitForSynchro+0x48>)
 800a44e:	68db      	ldr	r3, [r3, #12]
 800a450:	4a0e      	ldr	r2, [pc, #56]	; (800a48c <HAL_RTC_WaitForSynchro+0x48>)
 800a452:	f023 0320 	bic.w	r3, r3, #32
 800a456:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800a458:	f7f8 fa0a 	bl	8002870 <HAL_GetTick>
 800a45c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a45e:	e009      	b.n	800a474 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a460:	f7f8 fa06 	bl	8002870 <HAL_GetTick>
 800a464:	4602      	mov	r2, r0
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a46e:	d901      	bls.n	800a474 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800a470:	2303      	movs	r3, #3
 800a472:	e006      	b.n	800a482 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a474:	4b05      	ldr	r3, [pc, #20]	; (800a48c <HAL_RTC_WaitForSynchro+0x48>)
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	f003 0320 	and.w	r3, r3, #32
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d0ef      	beq.n	800a460 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	3710      	adds	r7, #16
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop
 800a48c:	40002800 	.word	0x40002800

0800a490 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a498:	2300      	movs	r3, #0
 800a49a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a49c:	4b15      	ldr	r3, [pc, #84]	; (800a4f4 <RTC_EnterInitMode+0x64>)
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d120      	bne.n	800a4ea <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a4a8:	4b12      	ldr	r3, [pc, #72]	; (800a4f4 <RTC_EnterInitMode+0x64>)
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	4a11      	ldr	r2, [pc, #68]	; (800a4f4 <RTC_EnterInitMode+0x64>)
 800a4ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4b2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800a4b4:	f7f8 f9dc 	bl	8002870 <HAL_GetTick>
 800a4b8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a4ba:	e00d      	b.n	800a4d8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a4bc:	f7f8 f9d8 	bl	8002870 <HAL_GetTick>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	1ad3      	subs	r3, r2, r3
 800a4c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4ca:	d905      	bls.n	800a4d8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a4cc:	2303      	movs	r3, #3
 800a4ce:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2203      	movs	r2, #3
 800a4d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a4d8:	4b06      	ldr	r3, [pc, #24]	; (800a4f4 <RTC_EnterInitMode+0x64>)
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d102      	bne.n	800a4ea <RTC_EnterInitMode+0x5a>
 800a4e4:	7bfb      	ldrb	r3, [r7, #15]
 800a4e6:	2b03      	cmp	r3, #3
 800a4e8:	d1e8      	bne.n	800a4bc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800a4ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3710      	adds	r7, #16
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	40002800 	.word	0x40002800

0800a4f8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a500:	2300      	movs	r3, #0
 800a502:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a504:	4b1a      	ldr	r3, [pc, #104]	; (800a570 <RTC_ExitInitMode+0x78>)
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	4a19      	ldr	r2, [pc, #100]	; (800a570 <RTC_ExitInitMode+0x78>)
 800a50a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a50e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a510:	4b17      	ldr	r3, [pc, #92]	; (800a570 <RTC_ExitInitMode+0x78>)
 800a512:	699b      	ldr	r3, [r3, #24]
 800a514:	f003 0320 	and.w	r3, r3, #32
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d10c      	bne.n	800a536 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f7ff ff91 	bl	800a444 <HAL_RTC_WaitForSynchro>
 800a522:	4603      	mov	r3, r0
 800a524:	2b00      	cmp	r3, #0
 800a526:	d01e      	beq.n	800a566 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2203      	movs	r2, #3
 800a52c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800a530:	2303      	movs	r3, #3
 800a532:	73fb      	strb	r3, [r7, #15]
 800a534:	e017      	b.n	800a566 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a536:	4b0e      	ldr	r3, [pc, #56]	; (800a570 <RTC_ExitInitMode+0x78>)
 800a538:	699b      	ldr	r3, [r3, #24]
 800a53a:	4a0d      	ldr	r2, [pc, #52]	; (800a570 <RTC_ExitInitMode+0x78>)
 800a53c:	f023 0320 	bic.w	r3, r3, #32
 800a540:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f7ff ff7e 	bl	800a444 <HAL_RTC_WaitForSynchro>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d005      	beq.n	800a55a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2203      	movs	r2, #3
 800a552:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800a556:	2303      	movs	r3, #3
 800a558:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a55a:	4b05      	ldr	r3, [pc, #20]	; (800a570 <RTC_ExitInitMode+0x78>)
 800a55c:	699b      	ldr	r3, [r3, #24]
 800a55e:	4a04      	ldr	r2, [pc, #16]	; (800a570 <RTC_ExitInitMode+0x78>)
 800a560:	f043 0320 	orr.w	r3, r3, #32
 800a564:	6193      	str	r3, [r2, #24]
  }

  return status;
 800a566:	7bfb      	ldrb	r3, [r7, #15]
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3710      	adds	r7, #16
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	40002800 	.word	0x40002800

0800a574 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	4603      	mov	r3, r0
 800a57c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a57e:	2300      	movs	r3, #0
 800a580:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800a582:	79fb      	ldrb	r3, [r7, #7]
 800a584:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800a586:	e005      	b.n	800a594 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	3301      	adds	r3, #1
 800a58c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800a58e:	7afb      	ldrb	r3, [r7, #11]
 800a590:	3b0a      	subs	r3, #10
 800a592:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800a594:	7afb      	ldrb	r3, [r7, #11]
 800a596:	2b09      	cmp	r3, #9
 800a598:	d8f6      	bhi.n	800a588 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	011b      	lsls	r3, r3, #4
 800a5a0:	b2da      	uxtb	r2, r3
 800a5a2:	7afb      	ldrb	r3, [r7, #11]
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	b2db      	uxtb	r3, r3
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3714      	adds	r7, #20
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bc80      	pop	{r7}
 800a5b0:	4770      	bx	lr
	...

0800a5b4 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d101      	bne.n	800a5ca <HAL_RTCEx_EnableBypassShadow+0x16>
 800a5c6:	2302      	movs	r3, #2
 800a5c8:	e01f      	b.n	800a60a <HAL_RTCEx_EnableBypassShadow+0x56>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2202      	movs	r2, #2
 800a5d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a5da:	4b0e      	ldr	r3, [pc, #56]	; (800a614 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800a5dc:	22ca      	movs	r2, #202	; 0xca
 800a5de:	625a      	str	r2, [r3, #36]	; 0x24
 800a5e0:	4b0c      	ldr	r3, [pc, #48]	; (800a614 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800a5e2:	2253      	movs	r2, #83	; 0x53
 800a5e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a5e6:	4b0b      	ldr	r3, [pc, #44]	; (800a614 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800a5e8:	699b      	ldr	r3, [r3, #24]
 800a5ea:	4a0a      	ldr	r2, [pc, #40]	; (800a614 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800a5ec:	f043 0320 	orr.w	r3, r3, #32
 800a5f0:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a5f2:	4b08      	ldr	r3, [pc, #32]	; (800a614 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800a5f4:	22ff      	movs	r2, #255	; 0xff
 800a5f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	370c      	adds	r7, #12
 800a60e:	46bd      	mov	sp, r7
 800a610:	bc80      	pop	{r7}
 800a612:	4770      	bx	lr
 800a614:	40002800 	.word	0x40002800

0800a618 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a626:	2b01      	cmp	r3, #1
 800a628:	d101      	bne.n	800a62e <HAL_RTCEx_SetSSRU_IT+0x16>
 800a62a:	2302      	movs	r3, #2
 800a62c:	e027      	b.n	800a67e <HAL_RTCEx_SetSSRU_IT+0x66>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2201      	movs	r2, #1
 800a632:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2202      	movs	r2, #2
 800a63a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a63e:	4b12      	ldr	r3, [pc, #72]	; (800a688 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800a640:	22ca      	movs	r2, #202	; 0xca
 800a642:	625a      	str	r2, [r3, #36]	; 0x24
 800a644:	4b10      	ldr	r3, [pc, #64]	; (800a688 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800a646:	2253      	movs	r2, #83	; 0x53
 800a648:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800a64a:	4b0f      	ldr	r3, [pc, #60]	; (800a688 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800a64c:	699b      	ldr	r3, [r3, #24]
 800a64e:	4a0e      	ldr	r2, [pc, #56]	; (800a688 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800a650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a654:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800a656:	4b0d      	ldr	r3, [pc, #52]	; (800a68c <HAL_RTCEx_SetSSRU_IT+0x74>)
 800a658:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a65c:	4a0b      	ldr	r2, [pc, #44]	; (800a68c <HAL_RTCEx_SetSSRU_IT+0x74>)
 800a65e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a662:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a666:	4b08      	ldr	r3, [pc, #32]	; (800a688 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800a668:	22ff      	movs	r2, #255	; 0xff
 800a66a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2201      	movs	r2, #1
 800a670:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a67c:	2300      	movs	r3, #0
}
 800a67e:	4618      	mov	r0, r3
 800a680:	370c      	adds	r7, #12
 800a682:	46bd      	mov	sp, r7
 800a684:	bc80      	pop	{r7}
 800a686:	4770      	bx	lr
 800a688:	40002800 	.word	0x40002800
 800a68c:	58000800 	.word	0x58000800

0800a690 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 800a698:	4b09      	ldr	r3, [pc, #36]	; (800a6c0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800a69a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a69c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d005      	beq.n	800a6b0 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 800a6a4:	4b06      	ldr	r3, [pc, #24]	; (800a6c0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800a6a6:	2240      	movs	r2, #64	; 0x40
 800a6a8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f7f8 fafb 	bl	8002ca6 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 800a6b8:	bf00      	nop
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	40002800 	.word	0x40002800

0800a6c4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b083      	sub	sp, #12
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800a6cc:	bf00      	nop
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bc80      	pop	{r7}
 800a6d4:	4770      	bx	lr
	...

0800a6d8 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b087      	sub	sp, #28
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	60b9      	str	r1, [r7, #8]
 800a6e2:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800a6e4:	4b07      	ldr	r3, [pc, #28]	; (800a704 <HAL_RTCEx_BKUPWrite+0x2c>)
 800a6e6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	697a      	ldr	r2, [r7, #20]
 800a6ee:	4413      	add	r3, r2
 800a6f0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	601a      	str	r2, [r3, #0]
}
 800a6f8:	bf00      	nop
 800a6fa:	371c      	adds	r7, #28
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bc80      	pop	{r7}
 800a700:	4770      	bx	lr
 800a702:	bf00      	nop
 800a704:	4000b100 	.word	0x4000b100

0800a708 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800a708:	b480      	push	{r7}
 800a70a:	b085      	sub	sp, #20
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800a712:	4b07      	ldr	r3, [pc, #28]	; (800a730 <HAL_RTCEx_BKUPRead+0x28>)
 800a714:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	4413      	add	r3, r2
 800a71e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
}
 800a724:	4618      	mov	r0, r3
 800a726:	3714      	adds	r7, #20
 800a728:	46bd      	mov	sp, r7
 800a72a:	bc80      	pop	{r7}
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	4000b100 	.word	0x4000b100

0800a734 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d101      	bne.n	800a746 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a742:	2301      	movs	r3, #1
 800a744:	e0c6      	b.n	800a8d4 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d108      	bne.n	800a760 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a756:	d009      	beq.n	800a76c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	61da      	str	r2, [r3, #28]
 800a75e:	e005      	b.n	800a76c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2200      	movs	r2, #0
 800a76a:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a772:	b2db      	uxtb	r3, r3
 800a774:	2b00      	cmp	r3, #0
 800a776:	d106      	bne.n	800a786 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2200      	movs	r2, #0
 800a77c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f7f7 fd97 	bl	80022b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2202      	movs	r2, #2
 800a78a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a79c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a7a6:	d902      	bls.n	800a7ae <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	60fb      	str	r3, [r7, #12]
 800a7ac:	e002      	b.n	800a7b4 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a7ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7b2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a7bc:	d007      	beq.n	800a7ce <HAL_SPI_Init+0x9a>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a7c6:	d002      	beq.n	800a7ce <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	689b      	ldr	r3, [r3, #8]
 800a7da:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a7de:	431a      	orrs	r2, r3
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	691b      	ldr	r3, [r3, #16]
 800a7e4:	f003 0302 	and.w	r3, r3, #2
 800a7e8:	431a      	orrs	r2, r3
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	695b      	ldr	r3, [r3, #20]
 800a7ee:	f003 0301 	and.w	r3, r3, #1
 800a7f2:	431a      	orrs	r2, r3
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	699b      	ldr	r3, [r3, #24]
 800a7f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a7fc:	431a      	orrs	r2, r3
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	69db      	ldr	r3, [r3, #28]
 800a802:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a806:	431a      	orrs	r2, r3
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6a1b      	ldr	r3, [r3, #32]
 800a80c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a810:	ea42 0103 	orr.w	r1, r2, r3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a818:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	430a      	orrs	r2, r1
 800a822:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a82c:	d11b      	bne.n	800a866 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a832:	2b00      	cmp	r3, #0
 800a834:	d10b      	bne.n	800a84e <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a83e:	d903      	bls.n	800a848 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2202      	movs	r2, #2
 800a844:	631a      	str	r2, [r3, #48]	; 0x30
 800a846:	e002      	b.n	800a84e <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a852:	2b02      	cmp	r3, #2
 800a854:	d107      	bne.n	800a866 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a864:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	699b      	ldr	r3, [r3, #24]
 800a86a:	0c1b      	lsrs	r3, r3, #16
 800a86c:	f003 0204 	and.w	r2, r3, #4
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a874:	f003 0310 	and.w	r3, r3, #16
 800a878:	431a      	orrs	r2, r3
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a87e:	f003 0308 	and.w	r3, r3, #8
 800a882:	431a      	orrs	r2, r3
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a88c:	ea42 0103 	orr.w	r1, r2, r3
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	430a      	orrs	r2, r1
 800a89c:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8a6:	d105      	bne.n	800a8b4 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	b292      	uxth	r2, r2
 800a8b2:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	69da      	ldr	r2, [r3, #28]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a8c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a8d2:	2300      	movs	r3, #0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3710      	adds	r7, #16
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b088      	sub	sp, #32
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	603b      	str	r3, [r7, #0]
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d101      	bne.n	800a8fe <HAL_SPI_Transmit+0x22>
 800a8fa:	2302      	movs	r3, #2
 800a8fc:	e17a      	b.n	800abf4 <HAL_SPI_Transmit+0x318>
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2201      	movs	r2, #1
 800a902:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a906:	f7f7 ffb3 	bl	8002870 <HAL_GetTick>
 800a90a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a90c:	88fb      	ldrh	r3, [r7, #6]
 800a90e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a916:	b2db      	uxtb	r3, r3
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d002      	beq.n	800a922 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a91c:	2302      	movs	r3, #2
 800a91e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a920:	e15f      	b.n	800abe2 <HAL_SPI_Transmit+0x306>
  }

  if ((pData == NULL) || (Size == 0U))
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d002      	beq.n	800a92e <HAL_SPI_Transmit+0x52>
 800a928:	88fb      	ldrh	r3, [r7, #6]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d102      	bne.n	800a934 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a92e:	2301      	movs	r3, #1
 800a930:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a932:	e156      	b.n	800abe2 <HAL_SPI_Transmit+0x306>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2203      	movs	r2, #3
 800a938:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2200      	movs	r2, #0
 800a940:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	68ba      	ldr	r2, [r7, #8]
 800a946:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	88fa      	ldrh	r2, [r7, #6]
 800a94c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	88fa      	ldrh	r2, [r7, #6]
 800a952:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2200      	movs	r2, #0
 800a958:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2200      	movs	r2, #0
 800a966:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2200      	movs	r2, #0
 800a96e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2200      	movs	r2, #0
 800a974:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	689b      	ldr	r3, [r3, #8]
 800a97a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a97e:	d10f      	bne.n	800a9a0 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a98e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a99e:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9a8:	d10f      	bne.n	800a9ca <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a9b8:	601a      	str	r2, [r3, #0]
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a9c8:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9d4:	2b40      	cmp	r3, #64	; 0x40
 800a9d6:	d007      	beq.n	800a9e8 <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a9e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a9f0:	d94b      	bls.n	800aa8a <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d002      	beq.n	800aa00 <HAL_SPI_Transmit+0x124>
 800a9fa:	8afb      	ldrh	r3, [r7, #22]
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d13e      	bne.n	800aa7e <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa04:	881a      	ldrh	r2, [r3, #0]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa10:	1c9a      	adds	r2, r3, #2
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	3b01      	subs	r3, #1
 800aa1e:	b29a      	uxth	r2, r3
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800aa24:	e02b      	b.n	800aa7e <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	f003 0302 	and.w	r3, r3, #2
 800aa30:	2b02      	cmp	r3, #2
 800aa32:	d112      	bne.n	800aa5a <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa38:	881a      	ldrh	r2, [r3, #0]
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa44:	1c9a      	adds	r2, r3, #2
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	3b01      	subs	r3, #1
 800aa52:	b29a      	uxth	r2, r3
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aa58:	e011      	b.n	800aa7e <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa5a:	f7f7 ff09 	bl	8002870 <HAL_GetTick>
 800aa5e:	4602      	mov	r2, r0
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	1ad3      	subs	r3, r2, r3
 800aa64:	683a      	ldr	r2, [r7, #0]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d803      	bhi.n	800aa72 <HAL_SPI_Transmit+0x196>
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa70:	d102      	bne.n	800aa78 <HAL_SPI_Transmit+0x19c>
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d102      	bne.n	800aa7e <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 800aa78:	2303      	movs	r3, #3
 800aa7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800aa7c:	e0b1      	b.n	800abe2 <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d1ce      	bne.n	800aa26 <HAL_SPI_Transmit+0x14a>
 800aa88:	e07c      	b.n	800ab84 <HAL_SPI_Transmit+0x2a8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d002      	beq.n	800aa98 <HAL_SPI_Transmit+0x1bc>
 800aa92:	8afb      	ldrh	r3, [r7, #22]
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d170      	bne.n	800ab7a <HAL_SPI_Transmit+0x29e>
    {
      if (hspi->TxXferCount > 1U)
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d912      	bls.n	800aac8 <HAL_SPI_Transmit+0x1ec>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaa6:	881a      	ldrh	r2, [r3, #0]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab2:	1c9a      	adds	r2, r3, #2
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	3b02      	subs	r3, #2
 800aac0:	b29a      	uxth	r2, r3
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aac6:	e058      	b.n	800ab7a <HAL_SPI_Transmit+0x29e>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	330c      	adds	r3, #12
 800aad2:	7812      	ldrb	r2, [r2, #0]
 800aad4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aada:	1c5a      	adds	r2, r3, #1
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	3b01      	subs	r3, #1
 800aae8:	b29a      	uxth	r2, r3
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800aaee:	e044      	b.n	800ab7a <HAL_SPI_Transmit+0x29e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	f003 0302 	and.w	r3, r3, #2
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	d12b      	bne.n	800ab56 <HAL_SPI_Transmit+0x27a>
      {
        if (hspi->TxXferCount > 1U)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab02:	b29b      	uxth	r3, r3
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d912      	bls.n	800ab2e <HAL_SPI_Transmit+0x252>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab0c:	881a      	ldrh	r2, [r3, #0]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab18:	1c9a      	adds	r2, r3, #2
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	3b02      	subs	r3, #2
 800ab26:	b29a      	uxth	r2, r3
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ab2c:	e025      	b.n	800ab7a <HAL_SPI_Transmit+0x29e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	330c      	adds	r3, #12
 800ab38:	7812      	ldrb	r2, [r2, #0]
 800ab3a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab40:	1c5a      	adds	r2, r3, #1
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	3b01      	subs	r3, #1
 800ab4e:	b29a      	uxth	r2, r3
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ab54:	e011      	b.n	800ab7a <HAL_SPI_Transmit+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab56:	f7f7 fe8b 	bl	8002870 <HAL_GetTick>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	69bb      	ldr	r3, [r7, #24]
 800ab5e:	1ad3      	subs	r3, r2, r3
 800ab60:	683a      	ldr	r2, [r7, #0]
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d803      	bhi.n	800ab6e <HAL_SPI_Transmit+0x292>
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab6c:	d102      	bne.n	800ab74 <HAL_SPI_Transmit+0x298>
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d102      	bne.n	800ab7a <HAL_SPI_Transmit+0x29e>
        {
          errorcode = HAL_TIMEOUT;
 800ab74:	2303      	movs	r3, #3
 800ab76:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ab78:	e033      	b.n	800abe2 <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d1b5      	bne.n	800aaf0 <HAL_SPI_Transmit+0x214>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab8c:	d107      	bne.n	800ab9e <HAL_SPI_Transmit+0x2c2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ab9c:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ab9e:	69ba      	ldr	r2, [r7, #24]
 800aba0:	6839      	ldr	r1, [r7, #0]
 800aba2:	68f8      	ldr	r0, [r7, #12]
 800aba4:	f000 f948 	bl	800ae38 <SPI_EndRxTxTransaction>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d002      	beq.n	800abb4 <HAL_SPI_Transmit+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2220      	movs	r2, #32
 800abb2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d10a      	bne.n	800abd2 <HAL_SPI_Transmit+0x2f6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800abbc:	2300      	movs	r3, #0
 800abbe:	613b      	str	r3, [r7, #16]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	68db      	ldr	r3, [r3, #12]
 800abc6:	613b      	str	r3, [r7, #16]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	613b      	str	r3, [r7, #16]
 800abd0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d002      	beq.n	800abe0 <HAL_SPI_Transmit+0x304>
  {
    errorcode = HAL_ERROR;
 800abda:	2301      	movs	r3, #1
 800abdc:	77fb      	strb	r3, [r7, #31]
 800abde:	e000      	b.n	800abe2 <HAL_SPI_Transmit+0x306>
  }

error:
 800abe0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2201      	movs	r2, #1
 800abe6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2200      	movs	r2, #0
 800abee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800abf2:	7ffb      	ldrb	r3, [r7, #31]
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3720      	adds	r7, #32
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b088      	sub	sp, #32
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	603b      	str	r3, [r7, #0]
 800ac08:	4613      	mov	r3, r2
 800ac0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ac0c:	f7f7 fe30 	bl	8002870 <HAL_GetTick>
 800ac10:	4602      	mov	r2, r0
 800ac12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac14:	1a9b      	subs	r3, r3, r2
 800ac16:	683a      	ldr	r2, [r7, #0]
 800ac18:	4413      	add	r3, r2
 800ac1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ac1c:	f7f7 fe28 	bl	8002870 <HAL_GetTick>
 800ac20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ac22:	4b39      	ldr	r3, [pc, #228]	; (800ad08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	015b      	lsls	r3, r3, #5
 800ac28:	0d1b      	lsrs	r3, r3, #20
 800ac2a:	69fa      	ldr	r2, [r7, #28]
 800ac2c:	fb02 f303 	mul.w	r3, r2, r3
 800ac30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ac32:	e054      	b.n	800acde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac3a:	d050      	beq.n	800acde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ac3c:	f7f7 fe18 	bl	8002870 <HAL_GetTick>
 800ac40:	4602      	mov	r2, r0
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	1ad3      	subs	r3, r2, r3
 800ac46:	69fa      	ldr	r2, [r7, #28]
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d902      	bls.n	800ac52 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ac4c:	69fb      	ldr	r3, [r7, #28]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d13d      	bne.n	800acce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	685a      	ldr	r2, [r3, #4]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ac60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac6a:	d111      	bne.n	800ac90 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac74:	d004      	beq.n	800ac80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac7e:	d107      	bne.n	800ac90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac98:	d10f      	bne.n	800acba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	681a      	ldr	r2, [r3, #0]
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aca8:	601a      	str	r2, [r3, #0]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800acb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2201      	movs	r2, #1
 800acbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800acca:	2303      	movs	r3, #3
 800accc:	e017      	b.n	800acfe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d101      	bne.n	800acd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800acd4:	2300      	movs	r3, #0
 800acd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	3b01      	subs	r3, #1
 800acdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	689a      	ldr	r2, [r3, #8]
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	4013      	ands	r3, r2
 800ace8:	68ba      	ldr	r2, [r7, #8]
 800acea:	429a      	cmp	r2, r3
 800acec:	bf0c      	ite	eq
 800acee:	2301      	moveq	r3, #1
 800acf0:	2300      	movne	r3, #0
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	461a      	mov	r2, r3
 800acf6:	79fb      	ldrb	r3, [r7, #7]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d19b      	bne.n	800ac34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800acfc:	2300      	movs	r3, #0
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3720      	adds	r7, #32
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	20000000 	.word	0x20000000

0800ad0c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b08a      	sub	sp, #40	; 0x28
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	60b9      	str	r1, [r7, #8]
 800ad16:	607a      	str	r2, [r7, #4]
 800ad18:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ad1e:	f7f7 fda7 	bl	8002870 <HAL_GetTick>
 800ad22:	4602      	mov	r2, r0
 800ad24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad26:	1a9b      	subs	r3, r3, r2
 800ad28:	683a      	ldr	r2, [r7, #0]
 800ad2a:	4413      	add	r3, r2
 800ad2c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800ad2e:	f7f7 fd9f 	bl	8002870 <HAL_GetTick>
 800ad32:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	330c      	adds	r3, #12
 800ad3a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ad3c:	4b3d      	ldr	r3, [pc, #244]	; (800ae34 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	4613      	mov	r3, r2
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	4413      	add	r3, r2
 800ad46:	00da      	lsls	r2, r3, #3
 800ad48:	1ad3      	subs	r3, r2, r3
 800ad4a:	0d1b      	lsrs	r3, r3, #20
 800ad4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad4e:	fb02 f303 	mul.w	r3, r2, r3
 800ad52:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800ad54:	e060      	b.n	800ae18 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ad5c:	d107      	bne.n	800ad6e <SPI_WaitFifoStateUntilTimeout+0x62>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d104      	bne.n	800ad6e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800ad6c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad74:	d050      	beq.n	800ae18 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ad76:	f7f7 fd7b 	bl	8002870 <HAL_GetTick>
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	6a3b      	ldr	r3, [r7, #32]
 800ad7e:	1ad3      	subs	r3, r2, r3
 800ad80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d902      	bls.n	800ad8c <SPI_WaitFifoStateUntilTimeout+0x80>
 800ad86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d13d      	bne.n	800ae08 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	685a      	ldr	r2, [r3, #4]
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ad9a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ada4:	d111      	bne.n	800adca <SPI_WaitFifoStateUntilTimeout+0xbe>
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	689b      	ldr	r3, [r3, #8]
 800adaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adae:	d004      	beq.n	800adba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adb8:	d107      	bne.n	800adca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800adc8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800add2:	d10f      	bne.n	800adf4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ade2:	601a      	str	r2, [r3, #0]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800adf2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2201      	movs	r2, #1
 800adf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2200      	movs	r2, #0
 800ae00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ae04:	2303      	movs	r3, #3
 800ae06:	e010      	b.n	800ae2a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ae08:	69bb      	ldr	r3, [r7, #24]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d101      	bne.n	800ae12 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	3b01      	subs	r3, #1
 800ae16:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	689a      	ldr	r2, [r3, #8]
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	4013      	ands	r3, r2
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d196      	bne.n	800ad56 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800ae28:	2300      	movs	r3, #0
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3728      	adds	r7, #40	; 0x28
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	20000000 	.word	0x20000000

0800ae38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b086      	sub	sp, #24
 800ae3c:	af02      	add	r7, sp, #8
 800ae3e:	60f8      	str	r0, [r7, #12]
 800ae40:	60b9      	str	r1, [r7, #8]
 800ae42:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	9300      	str	r3, [sp, #0]
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ae50:	68f8      	ldr	r0, [r7, #12]
 800ae52:	f7ff ff5b 	bl	800ad0c <SPI_WaitFifoStateUntilTimeout>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d007      	beq.n	800ae6c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae60:	f043 0220 	orr.w	r2, r3, #32
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ae68:	2303      	movs	r3, #3
 800ae6a:	e027      	b.n	800aebc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	9300      	str	r3, [sp, #0]
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	2200      	movs	r2, #0
 800ae74:	2180      	movs	r1, #128	; 0x80
 800ae76:	68f8      	ldr	r0, [r7, #12]
 800ae78:	f7ff fec0 	bl	800abfc <SPI_WaitFlagStateUntilTimeout>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d007      	beq.n	800ae92 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae86:	f043 0220 	orr.w	r2, r3, #32
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ae8e:	2303      	movs	r3, #3
 800ae90:	e014      	b.n	800aebc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	9300      	str	r3, [sp, #0]
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ae9e:	68f8      	ldr	r0, [r7, #12]
 800aea0:	f7ff ff34 	bl	800ad0c <SPI_WaitFifoStateUntilTimeout>
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d007      	beq.n	800aeba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aeae:	f043 0220 	orr.w	r2, r3, #32
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800aeb6:	2303      	movs	r3, #3
 800aeb8:	e000      	b.n	800aebc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800aeba:	2300      	movs	r3, #0
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3710      	adds	r7, #16
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <LL_PWR_SetRadioBusyTrigger>:
{
 800aec4:	b480      	push	{r7}
 800aec6:	b083      	sub	sp, #12
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800aecc:	4b06      	ldr	r3, [pc, #24]	; (800aee8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800aed4:	4904      	ldr	r1, [pc, #16]	; (800aee8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	4313      	orrs	r3, r2
 800aeda:	608b      	str	r3, [r1, #8]
}
 800aedc:	bf00      	nop
 800aede:	370c      	adds	r7, #12
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bc80      	pop	{r7}
 800aee4:	4770      	bx	lr
 800aee6:	bf00      	nop
 800aee8:	58000400 	.word	0x58000400

0800aeec <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 800aeec:	b480      	push	{r7}
 800aeee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800aef0:	4b05      	ldr	r3, [pc, #20]	; (800af08 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800aef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aef6:	4a04      	ldr	r2, [pc, #16]	; (800af08 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800aef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aefc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800af00:	bf00      	nop
 800af02:	46bd      	mov	sp, r7
 800af04:	bc80      	pop	{r7}
 800af06:	4770      	bx	lr
 800af08:	58000400 	.word	0x58000400

0800af0c <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 800af0c:	b480      	push	{r7}
 800af0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800af10:	4b05      	ldr	r3, [pc, #20]	; (800af28 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800af12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af16:	4a04      	ldr	r2, [pc, #16]	; (800af28 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800af18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800af1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800af20:	bf00      	nop
 800af22:	46bd      	mov	sp, r7
 800af24:	bc80      	pop	{r7}
 800af26:	4770      	bx	lr
 800af28:	58000400 	.word	0x58000400

0800af2c <LL_PWR_ClearFlag_RFBUSY>:
{
 800af2c:	b480      	push	{r7}
 800af2e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800af30:	4b03      	ldr	r3, [pc, #12]	; (800af40 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800af32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af36:	619a      	str	r2, [r3, #24]
}
 800af38:	bf00      	nop
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bc80      	pop	{r7}
 800af3e:	4770      	bx	lr
 800af40:	58000400 	.word	0x58000400

0800af44 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 800af44:	b480      	push	{r7}
 800af46:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800af48:	4b06      	ldr	r3, [pc, #24]	; (800af64 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800af4a:	695b      	ldr	r3, [r3, #20]
 800af4c:	f003 0302 	and.w	r3, r3, #2
 800af50:	2b02      	cmp	r3, #2
 800af52:	d101      	bne.n	800af58 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800af54:	2301      	movs	r3, #1
 800af56:	e000      	b.n	800af5a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800af58:	2300      	movs	r3, #0
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bc80      	pop	{r7}
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	58000400 	.word	0x58000400

0800af68 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 800af68:	b480      	push	{r7}
 800af6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800af6c:	4b06      	ldr	r3, [pc, #24]	; (800af88 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800af6e:	695b      	ldr	r3, [r3, #20]
 800af70:	f003 0304 	and.w	r3, r3, #4
 800af74:	2b04      	cmp	r3, #4
 800af76:	d101      	bne.n	800af7c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800af78:	2301      	movs	r3, #1
 800af7a:	e000      	b.n	800af7e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800af7c:	2300      	movs	r3, #0
}
 800af7e:	4618      	mov	r0, r3
 800af80:	46bd      	mov	sp, r7
 800af82:	bc80      	pop	{r7}
 800af84:	4770      	bx	lr
 800af86:	bf00      	nop
 800af88:	58000400 	.word	0x58000400

0800af8c <LL_RCC_RF_DisableReset>:
{
 800af8c:	b480      	push	{r7}
 800af8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800af90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800af94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800af9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800afa0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800afa4:	bf00      	nop
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bc80      	pop	{r7}
 800afaa:	4770      	bx	lr

0800afac <LL_RCC_IsRFUnderReset>:
{
 800afac:	b480      	push	{r7}
 800afae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800afb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800afb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800afb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800afbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800afc0:	d101      	bne.n	800afc6 <LL_RCC_IsRFUnderReset+0x1a>
 800afc2:	2301      	movs	r3, #1
 800afc4:	e000      	b.n	800afc8 <LL_RCC_IsRFUnderReset+0x1c>
 800afc6:	2300      	movs	r3, #0
}
 800afc8:	4618      	mov	r0, r3
 800afca:	46bd      	mov	sp, r7
 800afcc:	bc80      	pop	{r7}
 800afce:	4770      	bx	lr

0800afd0 <LL_EXTI_EnableIT_32_63>:
{
 800afd0:	b480      	push	{r7}
 800afd2:	b083      	sub	sp, #12
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800afd8:	4b06      	ldr	r3, [pc, #24]	; (800aff4 <LL_EXTI_EnableIT_32_63+0x24>)
 800afda:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800afde:	4905      	ldr	r1, [pc, #20]	; (800aff4 <LL_EXTI_EnableIT_32_63+0x24>)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	4313      	orrs	r3, r2
 800afe4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800afe8:	bf00      	nop
 800afea:	370c      	adds	r7, #12
 800afec:	46bd      	mov	sp, r7
 800afee:	bc80      	pop	{r7}
 800aff0:	4770      	bx	lr
 800aff2:	bf00      	nop
 800aff4:	58000800 	.word	0x58000800

0800aff8 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d103      	bne.n	800b00e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800b006:	2301      	movs	r3, #1
 800b008:	73fb      	strb	r3, [r7, #15]
    return status;
 800b00a:	7bfb      	ldrb	r3, [r7, #15]
 800b00c:	e052      	b.n	800b0b4 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800b00e:	2300      	movs	r3, #0
 800b010:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	799b      	ldrb	r3, [r3, #6]
 800b016:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 800b018:	7bbb      	ldrb	r3, [r7, #14]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d002      	beq.n	800b024 <HAL_SUBGHZ_Init+0x2c>
 800b01e:	7bbb      	ldrb	r3, [r7, #14]
 800b020:	2b03      	cmp	r3, #3
 800b022:	d109      	bne.n	800b038 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2200      	movs	r2, #0
 800b028:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f7f7 fa78 	bl	8002520 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800b030:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b034:	f7ff ffcc 	bl	800afd0 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 800b038:	7bbb      	ldrb	r3, [r7, #14]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d126      	bne.n	800b08c <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2202      	movs	r2, #2
 800b042:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 800b044:	f7ff ffa2 	bl	800af8c <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800b048:	4b1c      	ldr	r3, [pc, #112]	; (800b0bc <HAL_SUBGHZ_Init+0xc4>)
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	4613      	mov	r3, r2
 800b04e:	00db      	lsls	r3, r3, #3
 800b050:	1a9b      	subs	r3, r3, r2
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	0cdb      	lsrs	r3, r3, #19
 800b056:	2264      	movs	r2, #100	; 0x64
 800b058:	fb02 f303 	mul.w	r3, r2, r3
 800b05c:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d105      	bne.n	800b070 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 800b064:	2301      	movs	r3, #1
 800b066:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2201      	movs	r2, #1
 800b06c:	609a      	str	r2, [r3, #8]
        break;
 800b06e:	e007      	b.n	800b080 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	3b01      	subs	r3, #1
 800b074:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800b076:	f7ff ff99 	bl	800afac <LL_RCC_IsRFUnderReset>
 800b07a:	4603      	mov	r3, r0
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d1ee      	bne.n	800b05e <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800b080:	f7ff ff34 	bl	800aeec <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800b084:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b088:	f7ff ff1c 	bl	800aec4 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800b08c:	f7ff ff4e 	bl	800af2c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800b090:	7bfb      	ldrb	r3, [r7, #15]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d10a      	bne.n	800b0ac <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4618      	mov	r0, r3
 800b09c:	f000 faac 	bl	800b5f8 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	719a      	strb	r2, [r3, #6]

  return status;
 800b0b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3710      	adds	r7, #16
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}
 800b0bc:	20000000 	.word	0x20000000

0800b0c0 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b086      	sub	sp, #24
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	607a      	str	r2, [r7, #4]
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	817b      	strh	r3, [r7, #10]
 800b0d0:	4613      	mov	r3, r2
 800b0d2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	799b      	ldrb	r3, [r3, #6]
 800b0d8:	b2db      	uxtb	r3, r3
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	d14a      	bne.n	800b174 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	795b      	ldrb	r3, [r3, #5]
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d101      	bne.n	800b0ea <HAL_SUBGHZ_WriteRegisters+0x2a>
 800b0e6:	2302      	movs	r3, #2
 800b0e8:	e045      	b.n	800b176 <HAL_SUBGHZ_WriteRegisters+0xb6>
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2202      	movs	r2, #2
 800b0f4:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800b0f6:	68f8      	ldr	r0, [r7, #12]
 800b0f8:	f000 fb4c 	bl	800b794 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800b0fc:	f7ff ff06 	bl	800af0c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800b100:	210d      	movs	r1, #13
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	f000 fa98 	bl	800b638 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800b108:	897b      	ldrh	r3, [r7, #10]
 800b10a:	0a1b      	lsrs	r3, r3, #8
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	4619      	mov	r1, r3
 800b112:	68f8      	ldr	r0, [r7, #12]
 800b114:	f000 fa90 	bl	800b638 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800b118:	897b      	ldrh	r3, [r7, #10]
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	4619      	mov	r1, r3
 800b11e:	68f8      	ldr	r0, [r7, #12]
 800b120:	f000 fa8a 	bl	800b638 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800b124:	2300      	movs	r3, #0
 800b126:	82bb      	strh	r3, [r7, #20]
 800b128:	e00a      	b.n	800b140 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800b12a:	8abb      	ldrh	r3, [r7, #20]
 800b12c:	687a      	ldr	r2, [r7, #4]
 800b12e:	4413      	add	r3, r2
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	4619      	mov	r1, r3
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f000 fa7f 	bl	800b638 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800b13a:	8abb      	ldrh	r3, [r7, #20]
 800b13c:	3301      	adds	r3, #1
 800b13e:	82bb      	strh	r3, [r7, #20]
 800b140:	8aba      	ldrh	r2, [r7, #20]
 800b142:	893b      	ldrh	r3, [r7, #8]
 800b144:	429a      	cmp	r2, r3
 800b146:	d3f0      	bcc.n	800b12a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800b148:	f7ff fed0 	bl	800aeec <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800b14c:	68f8      	ldr	r0, [r7, #12]
 800b14e:	f000 fb45 	bl	800b7dc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	689b      	ldr	r3, [r3, #8]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d002      	beq.n	800b160 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800b15a:	2301      	movs	r3, #1
 800b15c:	75fb      	strb	r3, [r7, #23]
 800b15e:	e001      	b.n	800b164 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800b160:	2300      	movs	r3, #0
 800b162:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2201      	movs	r2, #1
 800b168:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2200      	movs	r2, #0
 800b16e:	715a      	strb	r2, [r3, #5]

    return status;
 800b170:	7dfb      	ldrb	r3, [r7, #23]
 800b172:	e000      	b.n	800b176 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800b174:	2302      	movs	r3, #2
  }
}
 800b176:	4618      	mov	r0, r3
 800b178:	3718      	adds	r7, #24
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b088      	sub	sp, #32
 800b182:	af00      	add	r7, sp, #0
 800b184:	60f8      	str	r0, [r7, #12]
 800b186:	607a      	str	r2, [r7, #4]
 800b188:	461a      	mov	r2, r3
 800b18a:	460b      	mov	r3, r1
 800b18c:	817b      	strh	r3, [r7, #10]
 800b18e:	4613      	mov	r3, r2
 800b190:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	799b      	ldrb	r3, [r3, #6]
 800b19a:	b2db      	uxtb	r3, r3
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d14a      	bne.n	800b236 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	795b      	ldrb	r3, [r3, #5]
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d101      	bne.n	800b1ac <HAL_SUBGHZ_ReadRegisters+0x2e>
 800b1a8:	2302      	movs	r3, #2
 800b1aa:	e045      	b.n	800b238 <HAL_SUBGHZ_ReadRegisters+0xba>
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800b1b2:	68f8      	ldr	r0, [r7, #12]
 800b1b4:	f000 faee 	bl	800b794 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800b1b8:	f7ff fea8 	bl	800af0c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800b1bc:	211d      	movs	r1, #29
 800b1be:	68f8      	ldr	r0, [r7, #12]
 800b1c0:	f000 fa3a 	bl	800b638 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800b1c4:	897b      	ldrh	r3, [r7, #10]
 800b1c6:	0a1b      	lsrs	r3, r3, #8
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	68f8      	ldr	r0, [r7, #12]
 800b1d0:	f000 fa32 	bl	800b638 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800b1d4:	897b      	ldrh	r3, [r7, #10]
 800b1d6:	b2db      	uxtb	r3, r3
 800b1d8:	4619      	mov	r1, r3
 800b1da:	68f8      	ldr	r0, [r7, #12]
 800b1dc:	f000 fa2c 	bl	800b638 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800b1e0:	2100      	movs	r1, #0
 800b1e2:	68f8      	ldr	r0, [r7, #12]
 800b1e4:	f000 fa28 	bl	800b638 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	82fb      	strh	r3, [r7, #22]
 800b1ec:	e009      	b.n	800b202 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800b1ee:	69b9      	ldr	r1, [r7, #24]
 800b1f0:	68f8      	ldr	r0, [r7, #12]
 800b1f2:	f000 fa77 	bl	800b6e4 <SUBGHZSPI_Receive>
      pData++;
 800b1f6:	69bb      	ldr	r3, [r7, #24]
 800b1f8:	3301      	adds	r3, #1
 800b1fa:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800b1fc:	8afb      	ldrh	r3, [r7, #22]
 800b1fe:	3301      	adds	r3, #1
 800b200:	82fb      	strh	r3, [r7, #22]
 800b202:	8afa      	ldrh	r2, [r7, #22]
 800b204:	893b      	ldrh	r3, [r7, #8]
 800b206:	429a      	cmp	r2, r3
 800b208:	d3f1      	bcc.n	800b1ee <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800b20a:	f7ff fe6f 	bl	800aeec <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800b20e:	68f8      	ldr	r0, [r7, #12]
 800b210:	f000 fae4 	bl	800b7dc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	689b      	ldr	r3, [r3, #8]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d002      	beq.n	800b222 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800b21c:	2301      	movs	r3, #1
 800b21e:	77fb      	strb	r3, [r7, #31]
 800b220:	e001      	b.n	800b226 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800b222:	2300      	movs	r3, #0
 800b224:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2201      	movs	r2, #1
 800b22a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2200      	movs	r2, #0
 800b230:	715a      	strb	r2, [r3, #5]

    return status;
 800b232:	7ffb      	ldrb	r3, [r7, #31]
 800b234:	e000      	b.n	800b238 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800b236:	2302      	movs	r3, #2
  }
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3720      	adds	r7, #32
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b086      	sub	sp, #24
 800b244:	af00      	add	r7, sp, #0
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	607a      	str	r2, [r7, #4]
 800b24a:	461a      	mov	r2, r3
 800b24c:	460b      	mov	r3, r1
 800b24e:	72fb      	strb	r3, [r7, #11]
 800b250:	4613      	mov	r3, r2
 800b252:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	799b      	ldrb	r3, [r3, #6]
 800b258:	b2db      	uxtb	r3, r3
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d14a      	bne.n	800b2f4 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	795b      	ldrb	r3, [r3, #5]
 800b262:	2b01      	cmp	r3, #1
 800b264:	d101      	bne.n	800b26a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800b266:	2302      	movs	r3, #2
 800b268:	e045      	b.n	800b2f6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2201      	movs	r2, #1
 800b26e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	f000 fa8f 	bl	800b794 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800b276:	7afb      	ldrb	r3, [r7, #11]
 800b278:	2b84      	cmp	r3, #132	; 0x84
 800b27a:	d002      	beq.n	800b282 <HAL_SUBGHZ_ExecSetCmd+0x42>
 800b27c:	7afb      	ldrb	r3, [r7, #11]
 800b27e:	2b94      	cmp	r3, #148	; 0x94
 800b280:	d103      	bne.n	800b28a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2201      	movs	r2, #1
 800b286:	711a      	strb	r2, [r3, #4]
 800b288:	e002      	b.n	800b290 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2200      	movs	r2, #0
 800b28e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800b290:	f7ff fe3c 	bl	800af0c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800b294:	7afb      	ldrb	r3, [r7, #11]
 800b296:	4619      	mov	r1, r3
 800b298:	68f8      	ldr	r0, [r7, #12]
 800b29a:	f000 f9cd 	bl	800b638 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800b29e:	2300      	movs	r3, #0
 800b2a0:	82bb      	strh	r3, [r7, #20]
 800b2a2:	e00a      	b.n	800b2ba <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800b2a4:	8abb      	ldrh	r3, [r7, #20]
 800b2a6:	687a      	ldr	r2, [r7, #4]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	68f8      	ldr	r0, [r7, #12]
 800b2b0:	f000 f9c2 	bl	800b638 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800b2b4:	8abb      	ldrh	r3, [r7, #20]
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	82bb      	strh	r3, [r7, #20]
 800b2ba:	8aba      	ldrh	r2, [r7, #20]
 800b2bc:	893b      	ldrh	r3, [r7, #8]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d3f0      	bcc.n	800b2a4 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800b2c2:	f7ff fe13 	bl	800aeec <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800b2c6:	7afb      	ldrb	r3, [r7, #11]
 800b2c8:	2b84      	cmp	r3, #132	; 0x84
 800b2ca:	d002      	beq.n	800b2d2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800b2cc:	68f8      	ldr	r0, [r7, #12]
 800b2ce:	f000 fa85 	bl	800b7dc <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	689b      	ldr	r3, [r3, #8]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d002      	beq.n	800b2e0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800b2da:	2301      	movs	r3, #1
 800b2dc:	75fb      	strb	r3, [r7, #23]
 800b2de:	e001      	b.n	800b2e4 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	715a      	strb	r2, [r3, #5]

    return status;
 800b2f0:	7dfb      	ldrb	r3, [r7, #23]
 800b2f2:	e000      	b.n	800b2f6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800b2f4:	2302      	movs	r3, #2
  }
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3718      	adds	r7, #24
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}

0800b2fe <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b088      	sub	sp, #32
 800b302:	af00      	add	r7, sp, #0
 800b304:	60f8      	str	r0, [r7, #12]
 800b306:	607a      	str	r2, [r7, #4]
 800b308:	461a      	mov	r2, r3
 800b30a:	460b      	mov	r3, r1
 800b30c:	72fb      	strb	r3, [r7, #11]
 800b30e:	4613      	mov	r3, r2
 800b310:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	799b      	ldrb	r3, [r3, #6]
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d13d      	bne.n	800b39c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	795b      	ldrb	r3, [r3, #5]
 800b324:	2b01      	cmp	r3, #1
 800b326:	d101      	bne.n	800b32c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800b328:	2302      	movs	r3, #2
 800b32a:	e038      	b.n	800b39e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2201      	movs	r2, #1
 800b330:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800b332:	68f8      	ldr	r0, [r7, #12]
 800b334:	f000 fa2e 	bl	800b794 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800b338:	f7ff fde8 	bl	800af0c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800b33c:	7afb      	ldrb	r3, [r7, #11]
 800b33e:	4619      	mov	r1, r3
 800b340:	68f8      	ldr	r0, [r7, #12]
 800b342:	f000 f979 	bl	800b638 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800b346:	2100      	movs	r1, #0
 800b348:	68f8      	ldr	r0, [r7, #12]
 800b34a:	f000 f975 	bl	800b638 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800b34e:	2300      	movs	r3, #0
 800b350:	82fb      	strh	r3, [r7, #22]
 800b352:	e009      	b.n	800b368 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800b354:	69b9      	ldr	r1, [r7, #24]
 800b356:	68f8      	ldr	r0, [r7, #12]
 800b358:	f000 f9c4 	bl	800b6e4 <SUBGHZSPI_Receive>
      pData++;
 800b35c:	69bb      	ldr	r3, [r7, #24]
 800b35e:	3301      	adds	r3, #1
 800b360:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800b362:	8afb      	ldrh	r3, [r7, #22]
 800b364:	3301      	adds	r3, #1
 800b366:	82fb      	strh	r3, [r7, #22]
 800b368:	8afa      	ldrh	r2, [r7, #22]
 800b36a:	893b      	ldrh	r3, [r7, #8]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d3f1      	bcc.n	800b354 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800b370:	f7ff fdbc 	bl	800aeec <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	f000 fa31 	bl	800b7dc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d002      	beq.n	800b388 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800b382:	2301      	movs	r3, #1
 800b384:	77fb      	strb	r3, [r7, #31]
 800b386:	e001      	b.n	800b38c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800b388:	2300      	movs	r3, #0
 800b38a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2201      	movs	r2, #1
 800b390:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2200      	movs	r2, #0
 800b396:	715a      	strb	r2, [r3, #5]

    return status;
 800b398:	7ffb      	ldrb	r3, [r7, #31]
 800b39a:	e000      	b.n	800b39e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b39c:	2302      	movs	r3, #2
  }
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3720      	adds	r7, #32
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}

0800b3a6 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800b3a6:	b580      	push	{r7, lr}
 800b3a8:	b086      	sub	sp, #24
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	60f8      	str	r0, [r7, #12]
 800b3ae:	607a      	str	r2, [r7, #4]
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	72fb      	strb	r3, [r7, #11]
 800b3b6:	4613      	mov	r3, r2
 800b3b8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	799b      	ldrb	r3, [r3, #6]
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d13e      	bne.n	800b442 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	795b      	ldrb	r3, [r3, #5]
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d101      	bne.n	800b3d0 <HAL_SUBGHZ_WriteBuffer+0x2a>
 800b3cc:	2302      	movs	r3, #2
 800b3ce:	e039      	b.n	800b444 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800b3d6:	68f8      	ldr	r0, [r7, #12]
 800b3d8:	f000 f9dc 	bl	800b794 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800b3dc:	f7ff fd96 	bl	800af0c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800b3e0:	210e      	movs	r1, #14
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	f000 f928 	bl	800b638 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800b3e8:	7afb      	ldrb	r3, [r7, #11]
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	f000 f923 	bl	800b638 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	82bb      	strh	r3, [r7, #20]
 800b3f6:	e00a      	b.n	800b40e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800b3f8:	8abb      	ldrh	r3, [r7, #20]
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	4619      	mov	r1, r3
 800b402:	68f8      	ldr	r0, [r7, #12]
 800b404:	f000 f918 	bl	800b638 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800b408:	8abb      	ldrh	r3, [r7, #20]
 800b40a:	3301      	adds	r3, #1
 800b40c:	82bb      	strh	r3, [r7, #20]
 800b40e:	8aba      	ldrh	r2, [r7, #20]
 800b410:	893b      	ldrh	r3, [r7, #8]
 800b412:	429a      	cmp	r2, r3
 800b414:	d3f0      	bcc.n	800b3f8 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800b416:	f7ff fd69 	bl	800aeec <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	f000 f9de 	bl	800b7dc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	689b      	ldr	r3, [r3, #8]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d002      	beq.n	800b42e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800b428:	2301      	movs	r3, #1
 800b42a:	75fb      	strb	r3, [r7, #23]
 800b42c:	e001      	b.n	800b432 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800b42e:	2300      	movs	r3, #0
 800b430:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2201      	movs	r2, #1
 800b436:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2200      	movs	r2, #0
 800b43c:	715a      	strb	r2, [r3, #5]

    return status;
 800b43e:	7dfb      	ldrb	r3, [r7, #23]
 800b440:	e000      	b.n	800b444 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800b442:	2302      	movs	r3, #2
  }
}
 800b444:	4618      	mov	r0, r3
 800b446:	3718      	adds	r7, #24
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b088      	sub	sp, #32
 800b450:	af00      	add	r7, sp, #0
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	607a      	str	r2, [r7, #4]
 800b456:	461a      	mov	r2, r3
 800b458:	460b      	mov	r3, r1
 800b45a:	72fb      	strb	r3, [r7, #11]
 800b45c:	4613      	mov	r3, r2
 800b45e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	799b      	ldrb	r3, [r3, #6]
 800b468:	b2db      	uxtb	r3, r3
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d141      	bne.n	800b4f2 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	795b      	ldrb	r3, [r3, #5]
 800b472:	2b01      	cmp	r3, #1
 800b474:	d101      	bne.n	800b47a <HAL_SUBGHZ_ReadBuffer+0x2e>
 800b476:	2302      	movs	r3, #2
 800b478:	e03c      	b.n	800b4f4 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2201      	movs	r2, #1
 800b47e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800b480:	68f8      	ldr	r0, [r7, #12]
 800b482:	f000 f987 	bl	800b794 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800b486:	f7ff fd41 	bl	800af0c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800b48a:	211e      	movs	r1, #30
 800b48c:	68f8      	ldr	r0, [r7, #12]
 800b48e:	f000 f8d3 	bl	800b638 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800b492:	7afb      	ldrb	r3, [r7, #11]
 800b494:	4619      	mov	r1, r3
 800b496:	68f8      	ldr	r0, [r7, #12]
 800b498:	f000 f8ce 	bl	800b638 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800b49c:	2100      	movs	r1, #0
 800b49e:	68f8      	ldr	r0, [r7, #12]
 800b4a0:	f000 f8ca 	bl	800b638 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	82fb      	strh	r3, [r7, #22]
 800b4a8:	e009      	b.n	800b4be <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800b4aa:	69b9      	ldr	r1, [r7, #24]
 800b4ac:	68f8      	ldr	r0, [r7, #12]
 800b4ae:	f000 f919 	bl	800b6e4 <SUBGHZSPI_Receive>
      pData++;
 800b4b2:	69bb      	ldr	r3, [r7, #24]
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800b4b8:	8afb      	ldrh	r3, [r7, #22]
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	82fb      	strh	r3, [r7, #22]
 800b4be:	8afa      	ldrh	r2, [r7, #22]
 800b4c0:	893b      	ldrh	r3, [r7, #8]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d3f1      	bcc.n	800b4aa <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800b4c6:	f7ff fd11 	bl	800aeec <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	f000 f986 	bl	800b7dc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	689b      	ldr	r3, [r3, #8]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d002      	beq.n	800b4de <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	77fb      	strb	r3, [r7, #31]
 800b4dc:	e001      	b.n	800b4e2 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	715a      	strb	r2, [r3, #5]

    return status;
 800b4ee:	7ffb      	ldrb	r3, [r7, #31]
 800b4f0:	e000      	b.n	800b4f4 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800b4f2:	2302      	movs	r3, #2
  }
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3720      	adds	r7, #32
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800b504:	2300      	movs	r3, #0
 800b506:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800b508:	f107 020c 	add.w	r2, r7, #12
 800b50c:	2302      	movs	r3, #2
 800b50e:	2112      	movs	r1, #18
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f7ff fef4 	bl	800b2fe <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800b516:	7b3b      	ldrb	r3, [r7, #12]
 800b518:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800b51a:	89fb      	ldrh	r3, [r7, #14]
 800b51c:	021b      	lsls	r3, r3, #8
 800b51e:	b21a      	sxth	r2, r3
 800b520:	7b7b      	ldrb	r3, [r7, #13]
 800b522:	b21b      	sxth	r3, r3
 800b524:	4313      	orrs	r3, r2
 800b526:	b21b      	sxth	r3, r3
 800b528:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800b52a:	f107 020c 	add.w	r2, r7, #12
 800b52e:	2302      	movs	r3, #2
 800b530:	2102      	movs	r1, #2
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f7ff fe84 	bl	800b240 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800b538:	89fb      	ldrh	r3, [r7, #14]
 800b53a:	f003 0301 	and.w	r3, r3, #1
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d002      	beq.n	800b548 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f013 fa3e 	bl	801e9c4 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800b548:	89fb      	ldrh	r3, [r7, #14]
 800b54a:	f003 0302 	and.w	r3, r3, #2
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d002      	beq.n	800b558 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f013 fa44 	bl	801e9e0 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800b558:	89fb      	ldrh	r3, [r7, #14]
 800b55a:	f003 0304 	and.w	r3, r3, #4
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d002      	beq.n	800b568 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f013 fa94 	bl	801ea90 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800b568:	89fb      	ldrh	r3, [r7, #14]
 800b56a:	f003 0308 	and.w	r3, r3, #8
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d002      	beq.n	800b578 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f013 fa9a 	bl	801eaac <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800b578:	89fb      	ldrh	r3, [r7, #14]
 800b57a:	f003 0310 	and.w	r3, r3, #16
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d002      	beq.n	800b588 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f013 faa0 	bl	801eac8 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800b588:	89fb      	ldrh	r3, [r7, #14]
 800b58a:	f003 0320 	and.w	r3, r3, #32
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d002      	beq.n	800b598 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f013 fa6e 	bl	801ea74 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800b598:	89fb      	ldrh	r3, [r7, #14]
 800b59a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d002      	beq.n	800b5a8 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f013 fa2a 	bl	801e9fc <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800b5a8:	89fb      	ldrh	r3, [r7, #14]
 800b5aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d00d      	beq.n	800b5ce <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800b5b2:	89fb      	ldrh	r3, [r7, #14]
 800b5b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d004      	beq.n	800b5c6 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800b5bc:	2101      	movs	r1, #1
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f013 fa2a 	bl	801ea18 <HAL_SUBGHZ_CADStatusCallback>
 800b5c4:	e003      	b.n	800b5ce <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f013 fa25 	bl	801ea18 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800b5ce:	89fb      	ldrh	r3, [r7, #14]
 800b5d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d002      	beq.n	800b5de <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f013 fa3b 	bl	801ea54 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800b5de:	89fb      	ldrh	r3, [r7, #14]
 800b5e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d002      	beq.n	800b5ee <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f013 fa7b 	bl	801eae4 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800b5ee:	bf00      	nop
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
	...

0800b5f8 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b083      	sub	sp, #12
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800b600:	4b0c      	ldr	r3, [pc, #48]	; (800b634 <SUBGHZSPI_Init+0x3c>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a0b      	ldr	r2, [pc, #44]	; (800b634 <SUBGHZSPI_Init+0x3c>)
 800b606:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b60a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800b60c:	4a09      	ldr	r2, [pc, #36]	; (800b634 <SUBGHZSPI_Init+0x3c>)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800b614:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800b616:	4b07      	ldr	r3, [pc, #28]	; (800b634 <SUBGHZSPI_Init+0x3c>)
 800b618:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800b61c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800b61e:	4b05      	ldr	r3, [pc, #20]	; (800b634 <SUBGHZSPI_Init+0x3c>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4a04      	ldr	r2, [pc, #16]	; (800b634 <SUBGHZSPI_Init+0x3c>)
 800b624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b628:	6013      	str	r3, [r2, #0]
}
 800b62a:	bf00      	nop
 800b62c:	370c      	adds	r7, #12
 800b62e:	46bd      	mov	sp, r7
 800b630:	bc80      	pop	{r7}
 800b632:	4770      	bx	lr
 800b634:	58010000 	.word	0x58010000

0800b638 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800b638:	b480      	push	{r7}
 800b63a:	b087      	sub	sp, #28
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	460b      	mov	r3, r1
 800b642:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800b644:	2300      	movs	r3, #0
 800b646:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800b648:	4b23      	ldr	r3, [pc, #140]	; (800b6d8 <SUBGHZSPI_Transmit+0xa0>)
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	4613      	mov	r3, r2
 800b64e:	00db      	lsls	r3, r3, #3
 800b650:	1a9b      	subs	r3, r3, r2
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	0cdb      	lsrs	r3, r3, #19
 800b656:	2264      	movs	r2, #100	; 0x64
 800b658:	fb02 f303 	mul.w	r3, r2, r3
 800b65c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d105      	bne.n	800b670 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800b664:	2301      	movs	r3, #1
 800b666:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2201      	movs	r2, #1
 800b66c:	609a      	str	r2, [r3, #8]
      break;
 800b66e:	e008      	b.n	800b682 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	3b01      	subs	r3, #1
 800b674:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800b676:	4b19      	ldr	r3, [pc, #100]	; (800b6dc <SUBGHZSPI_Transmit+0xa4>)
 800b678:	689b      	ldr	r3, [r3, #8]
 800b67a:	f003 0302 	and.w	r3, r3, #2
 800b67e:	2b02      	cmp	r3, #2
 800b680:	d1ed      	bne.n	800b65e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800b682:	4b17      	ldr	r3, [pc, #92]	; (800b6e0 <SUBGHZSPI_Transmit+0xa8>)
 800b684:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	78fa      	ldrb	r2, [r7, #3]
 800b68a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800b68c:	4b12      	ldr	r3, [pc, #72]	; (800b6d8 <SUBGHZSPI_Transmit+0xa0>)
 800b68e:	681a      	ldr	r2, [r3, #0]
 800b690:	4613      	mov	r3, r2
 800b692:	00db      	lsls	r3, r3, #3
 800b694:	1a9b      	subs	r3, r3, r2
 800b696:	009b      	lsls	r3, r3, #2
 800b698:	0cdb      	lsrs	r3, r3, #19
 800b69a:	2264      	movs	r2, #100	; 0x64
 800b69c:	fb02 f303 	mul.w	r3, r2, r3
 800b6a0:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d105      	bne.n	800b6b4 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	609a      	str	r2, [r3, #8]
      break;
 800b6b2:	e008      	b.n	800b6c6 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	3b01      	subs	r3, #1
 800b6b8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800b6ba:	4b08      	ldr	r3, [pc, #32]	; (800b6dc <SUBGHZSPI_Transmit+0xa4>)
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	f003 0301 	and.w	r3, r3, #1
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d1ed      	bne.n	800b6a2 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800b6c6:	4b05      	ldr	r3, [pc, #20]	; (800b6dc <SUBGHZSPI_Transmit+0xa4>)
 800b6c8:	68db      	ldr	r3, [r3, #12]

  return status;
 800b6ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	371c      	adds	r7, #28
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bc80      	pop	{r7}
 800b6d4:	4770      	bx	lr
 800b6d6:	bf00      	nop
 800b6d8:	20000000 	.word	0x20000000
 800b6dc:	58010000 	.word	0x58010000
 800b6e0:	5801000c 	.word	0x5801000c

0800b6e4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b087      	sub	sp, #28
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800b6f2:	4b25      	ldr	r3, [pc, #148]	; (800b788 <SUBGHZSPI_Receive+0xa4>)
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	00db      	lsls	r3, r3, #3
 800b6fa:	1a9b      	subs	r3, r3, r2
 800b6fc:	009b      	lsls	r3, r3, #2
 800b6fe:	0cdb      	lsrs	r3, r3, #19
 800b700:	2264      	movs	r2, #100	; 0x64
 800b702:	fb02 f303 	mul.w	r3, r2, r3
 800b706:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d105      	bne.n	800b71a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800b70e:	2301      	movs	r3, #1
 800b710:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2201      	movs	r2, #1
 800b716:	609a      	str	r2, [r3, #8]
      break;
 800b718:	e008      	b.n	800b72c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	3b01      	subs	r3, #1
 800b71e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800b720:	4b1a      	ldr	r3, [pc, #104]	; (800b78c <SUBGHZSPI_Receive+0xa8>)
 800b722:	689b      	ldr	r3, [r3, #8]
 800b724:	f003 0302 	and.w	r3, r3, #2
 800b728:	2b02      	cmp	r3, #2
 800b72a:	d1ed      	bne.n	800b708 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800b72c:	4b18      	ldr	r3, [pc, #96]	; (800b790 <SUBGHZSPI_Receive+0xac>)
 800b72e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	22ff      	movs	r2, #255	; 0xff
 800b734:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800b736:	4b14      	ldr	r3, [pc, #80]	; (800b788 <SUBGHZSPI_Receive+0xa4>)
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	4613      	mov	r3, r2
 800b73c:	00db      	lsls	r3, r3, #3
 800b73e:	1a9b      	subs	r3, r3, r2
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	0cdb      	lsrs	r3, r3, #19
 800b744:	2264      	movs	r2, #100	; 0x64
 800b746:	fb02 f303 	mul.w	r3, r2, r3
 800b74a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d105      	bne.n	800b75e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800b752:	2301      	movs	r3, #1
 800b754:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2201      	movs	r2, #1
 800b75a:	609a      	str	r2, [r3, #8]
      break;
 800b75c:	e008      	b.n	800b770 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	3b01      	subs	r3, #1
 800b762:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800b764:	4b09      	ldr	r3, [pc, #36]	; (800b78c <SUBGHZSPI_Receive+0xa8>)
 800b766:	689b      	ldr	r3, [r3, #8]
 800b768:	f003 0301 	and.w	r3, r3, #1
 800b76c:	2b01      	cmp	r3, #1
 800b76e:	d1ed      	bne.n	800b74c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800b770:	4b06      	ldr	r3, [pc, #24]	; (800b78c <SUBGHZSPI_Receive+0xa8>)
 800b772:	68db      	ldr	r3, [r3, #12]
 800b774:	b2da      	uxtb	r2, r3
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	701a      	strb	r2, [r3, #0]

  return status;
 800b77a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	371c      	adds	r7, #28
 800b780:	46bd      	mov	sp, r7
 800b782:	bc80      	pop	{r7}
 800b784:	4770      	bx	lr
 800b786:	bf00      	nop
 800b788:	20000000 	.word	0x20000000
 800b78c:	58010000 	.word	0x58010000
 800b790:	5801000c 	.word	0x5801000c

0800b794 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	791b      	ldrb	r3, [r3, #4]
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d111      	bne.n	800b7c8 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800b7a4:	4b0c      	ldr	r3, [pc, #48]	; (800b7d8 <SUBGHZ_CheckDeviceReady+0x44>)
 800b7a6:	681a      	ldr	r2, [r3, #0]
 800b7a8:	4613      	mov	r3, r2
 800b7aa:	005b      	lsls	r3, r3, #1
 800b7ac:	4413      	add	r3, r2
 800b7ae:	00db      	lsls	r3, r3, #3
 800b7b0:	0c1b      	lsrs	r3, r3, #16
 800b7b2:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800b7b4:	f7ff fbaa 	bl	800af0c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	3b01      	subs	r3, #1
 800b7bc:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d1f9      	bne.n	800b7b8 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800b7c4:	f7ff fb92 	bl	800aeec <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 f807 	bl	800b7dc <SUBGHZ_WaitOnBusy>
 800b7ce:	4603      	mov	r3, r0
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3710      	adds	r7, #16
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	20000000 	.word	0x20000000

0800b7dc <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b086      	sub	sp, #24
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800b7e8:	4b12      	ldr	r3, [pc, #72]	; (800b834 <SUBGHZ_WaitOnBusy+0x58>)
 800b7ea:	681a      	ldr	r2, [r3, #0]
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	005b      	lsls	r3, r3, #1
 800b7f0:	4413      	add	r3, r2
 800b7f2:	00db      	lsls	r3, r3, #3
 800b7f4:	0d1b      	lsrs	r3, r3, #20
 800b7f6:	2264      	movs	r2, #100	; 0x64
 800b7f8:	fb02 f303 	mul.w	r3, r2, r3
 800b7fc:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800b7fe:	f7ff fbb3 	bl	800af68 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800b802:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d105      	bne.n	800b816 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800b80a:	2301      	movs	r3, #1
 800b80c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2202      	movs	r2, #2
 800b812:	609a      	str	r2, [r3, #8]
      break;
 800b814:	e009      	b.n	800b82a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	3b01      	subs	r3, #1
 800b81a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800b81c:	f7ff fb92 	bl	800af44 <LL_PWR_IsActiveFlag_RFBUSYS>
 800b820:	4602      	mov	r2, r0
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	4013      	ands	r3, r2
 800b826:	2b01      	cmp	r3, #1
 800b828:	d0e9      	beq.n	800b7fe <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800b82a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3718      	adds	r7, #24
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}
 800b834:	20000000 	.word	0x20000000

0800b838 <LL_RCC_GetUSARTClockSource>:
{
 800b838:	b480      	push	{r7}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800b840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b844:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	401a      	ands	r2, r3
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	041b      	lsls	r3, r3, #16
 800b850:	4313      	orrs	r3, r2
}
 800b852:	4618      	mov	r0, r3
 800b854:	370c      	adds	r7, #12
 800b856:	46bd      	mov	sp, r7
 800b858:	bc80      	pop	{r7}
 800b85a:	4770      	bx	lr

0800b85c <LL_RCC_GetLPUARTClockSource>:
{
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800b864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b868:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	4013      	ands	r3, r2
}
 800b870:	4618      	mov	r0, r3
 800b872:	370c      	adds	r7, #12
 800b874:	46bd      	mov	sp, r7
 800b876:	bc80      	pop	{r7}
 800b878:	4770      	bx	lr

0800b87a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b87a:	b580      	push	{r7, lr}
 800b87c:	b082      	sub	sp, #8
 800b87e:	af00      	add	r7, sp, #0
 800b880:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d101      	bne.n	800b88c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b888:	2301      	movs	r3, #1
 800b88a:	e042      	b.n	800b912 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b892:	2b00      	cmp	r3, #0
 800b894:	d106      	bne.n	800b8a4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f7f7 fb66 	bl	8002f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2224      	movs	r2, #36	; 0x24
 800b8a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f022 0201 	bic.w	r2, r2, #1
 800b8ba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f000 fd85 	bl	800c3cc <UART_SetConfig>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	d101      	bne.n	800b8cc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	e022      	b.n	800b912 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d002      	beq.n	800b8da <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 ffed 	bl	800c8b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	685a      	ldr	r2, [r3, #4]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b8e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	689a      	ldr	r2, [r3, #8]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b8f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f042 0201 	orr.w	r2, r2, #1
 800b908:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f001 f873 	bl	800c9f6 <UART_CheckIdleState>
 800b910:	4603      	mov	r3, r0
}
 800b912:	4618      	mov	r0, r3
 800b914:	3708      	adds	r7, #8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}

0800b91a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b91a:	b580      	push	{r7, lr}
 800b91c:	b08a      	sub	sp, #40	; 0x28
 800b91e:	af02      	add	r7, sp, #8
 800b920:	60f8      	str	r0, [r7, #12]
 800b922:	60b9      	str	r1, [r7, #8]
 800b924:	603b      	str	r3, [r7, #0]
 800b926:	4613      	mov	r3, r2
 800b928:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b930:	2b20      	cmp	r3, #32
 800b932:	d173      	bne.n	800ba1c <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d002      	beq.n	800b940 <HAL_UART_Transmit+0x26>
 800b93a:	88fb      	ldrh	r3, [r7, #6]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d101      	bne.n	800b944 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b940:	2301      	movs	r3, #1
 800b942:	e06c      	b.n	800ba1e <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2200      	movs	r2, #0
 800b948:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2221      	movs	r2, #33	; 0x21
 800b950:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b954:	f7f6 ff8c 	bl	8002870 <HAL_GetTick>
 800b958:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	88fa      	ldrh	r2, [r7, #6]
 800b95e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	88fa      	ldrh	r2, [r7, #6]
 800b966:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	689b      	ldr	r3, [r3, #8]
 800b96e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b972:	d108      	bne.n	800b986 <HAL_UART_Transmit+0x6c>
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	691b      	ldr	r3, [r3, #16]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d104      	bne.n	800b986 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b97c:	2300      	movs	r3, #0
 800b97e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	61bb      	str	r3, [r7, #24]
 800b984:	e003      	b.n	800b98e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b98a:	2300      	movs	r3, #0
 800b98c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b98e:	e02c      	b.n	800b9ea <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	9300      	str	r3, [sp, #0]
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	2200      	movs	r2, #0
 800b998:	2180      	movs	r1, #128	; 0x80
 800b99a:	68f8      	ldr	r0, [r7, #12]
 800b99c:	f001 f879 	bl	800ca92 <UART_WaitOnFlagUntilTimeout>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d001      	beq.n	800b9aa <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800b9a6:	2303      	movs	r3, #3
 800b9a8:	e039      	b.n	800ba1e <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800b9aa:	69fb      	ldr	r3, [r7, #28]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d10b      	bne.n	800b9c8 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b9b0:	69bb      	ldr	r3, [r7, #24]
 800b9b2:	881b      	ldrh	r3, [r3, #0]
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b9be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b9c0:	69bb      	ldr	r3, [r7, #24]
 800b9c2:	3302      	adds	r3, #2
 800b9c4:	61bb      	str	r3, [r7, #24]
 800b9c6:	e007      	b.n	800b9d8 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b9c8:	69fb      	ldr	r3, [r7, #28]
 800b9ca:	781a      	ldrb	r2, [r3, #0]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b9d2:	69fb      	ldr	r3, [r7, #28]
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	3b01      	subs	r3, #1
 800b9e2:	b29a      	uxth	r2, r3
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1cc      	bne.n	800b990 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	9300      	str	r3, [sp, #0]
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	2140      	movs	r1, #64	; 0x40
 800ba00:	68f8      	ldr	r0, [r7, #12]
 800ba02:	f001 f846 	bl	800ca92 <UART_WaitOnFlagUntilTimeout>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d001      	beq.n	800ba10 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800ba0c:	2303      	movs	r3, #3
 800ba0e:	e006      	b.n	800ba1e <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	2220      	movs	r2, #32
 800ba14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	e000      	b.n	800ba1e <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800ba1c:	2302      	movs	r3, #2
  }
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3720      	adds	r7, #32
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}

0800ba26 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba26:	b580      	push	{r7, lr}
 800ba28:	b08a      	sub	sp, #40	; 0x28
 800ba2a:	af02      	add	r7, sp, #8
 800ba2c:	60f8      	str	r0, [r7, #12]
 800ba2e:	60b9      	str	r1, [r7, #8]
 800ba30:	603b      	str	r3, [r7, #0]
 800ba32:	4613      	mov	r3, r2
 800ba34:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba3c:	2b20      	cmp	r3, #32
 800ba3e:	f040 80b1 	bne.w	800bba4 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d002      	beq.n	800ba4e <HAL_UART_Receive+0x28>
 800ba48:	88fb      	ldrh	r3, [r7, #6]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d101      	bne.n	800ba52 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	e0a9      	b.n	800bba6 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2200      	movs	r2, #0
 800ba56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2222      	movs	r2, #34	; 0x22
 800ba5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2200      	movs	r2, #0
 800ba66:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ba68:	f7f6 ff02 	bl	8002870 <HAL_GetTick>
 800ba6c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	88fa      	ldrh	r2, [r7, #6]
 800ba72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	88fa      	ldrh	r2, [r7, #6]
 800ba7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	689b      	ldr	r3, [r3, #8]
 800ba82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba86:	d10e      	bne.n	800baa6 <HAL_UART_Receive+0x80>
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	691b      	ldr	r3, [r3, #16]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d105      	bne.n	800ba9c <HAL_UART_Receive+0x76>
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ba96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ba9a:	e02d      	b.n	800baf8 <HAL_UART_Receive+0xd2>
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	22ff      	movs	r2, #255	; 0xff
 800baa0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800baa4:	e028      	b.n	800baf8 <HAL_UART_Receive+0xd2>
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	689b      	ldr	r3, [r3, #8]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d10d      	bne.n	800baca <HAL_UART_Receive+0xa4>
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	691b      	ldr	r3, [r3, #16]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d104      	bne.n	800bac0 <HAL_UART_Receive+0x9a>
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	22ff      	movs	r2, #255	; 0xff
 800baba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800babe:	e01b      	b.n	800baf8 <HAL_UART_Receive+0xd2>
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	227f      	movs	r2, #127	; 0x7f
 800bac4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bac8:	e016      	b.n	800baf8 <HAL_UART_Receive+0xd2>
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	689b      	ldr	r3, [r3, #8]
 800bace:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bad2:	d10d      	bne.n	800baf0 <HAL_UART_Receive+0xca>
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	691b      	ldr	r3, [r3, #16]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d104      	bne.n	800bae6 <HAL_UART_Receive+0xc0>
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	227f      	movs	r2, #127	; 0x7f
 800bae0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bae4:	e008      	b.n	800baf8 <HAL_UART_Receive+0xd2>
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	223f      	movs	r2, #63	; 0x3f
 800baea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800baee:	e003      	b.n	800baf8 <HAL_UART_Receive+0xd2>
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2200      	movs	r2, #0
 800baf4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bafe:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb08:	d108      	bne.n	800bb1c <HAL_UART_Receive+0xf6>
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	691b      	ldr	r3, [r3, #16]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d104      	bne.n	800bb1c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800bb12:	2300      	movs	r3, #0
 800bb14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	61bb      	str	r3, [r7, #24]
 800bb1a:	e003      	b.n	800bb24 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bb20:	2300      	movs	r3, #0
 800bb22:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800bb24:	e032      	b.n	800bb8c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	9300      	str	r3, [sp, #0]
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	2120      	movs	r1, #32
 800bb30:	68f8      	ldr	r0, [r7, #12]
 800bb32:	f000 ffae 	bl	800ca92 <UART_WaitOnFlagUntilTimeout>
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d001      	beq.n	800bb40 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800bb3c:	2303      	movs	r3, #3
 800bb3e:	e032      	b.n	800bba6 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d10c      	bne.n	800bb60 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb4c:	b29a      	uxth	r2, r3
 800bb4e:	8a7b      	ldrh	r3, [r7, #18]
 800bb50:	4013      	ands	r3, r2
 800bb52:	b29a      	uxth	r2, r3
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800bb58:	69bb      	ldr	r3, [r7, #24]
 800bb5a:	3302      	adds	r3, #2
 800bb5c:	61bb      	str	r3, [r7, #24]
 800bb5e:	e00c      	b.n	800bb7a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb66:	b2da      	uxtb	r2, r3
 800bb68:	8a7b      	ldrh	r3, [r7, #18]
 800bb6a:	b2db      	uxtb	r3, r3
 800bb6c:	4013      	ands	r3, r2
 800bb6e:	b2da      	uxtb	r2, r3
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800bb74:	69fb      	ldr	r3, [r7, #28]
 800bb76:	3301      	adds	r3, #1
 800bb78:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	3b01      	subs	r3, #1
 800bb84:	b29a      	uxth	r2, r3
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d1c6      	bne.n	800bb26 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2220      	movs	r2, #32
 800bb9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800bba0:	2300      	movs	r3, #0
 800bba2:	e000      	b.n	800bba6 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800bba4:	2302      	movs	r3, #2
  }
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3720      	adds	r7, #32
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
	...

0800bbb0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b08a      	sub	sp, #40	; 0x28
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	60f8      	str	r0, [r7, #12]
 800bbb8:	60b9      	str	r1, [r7, #8]
 800bbba:	4613      	mov	r3, r2
 800bbbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbc4:	2b20      	cmp	r3, #32
 800bbc6:	d137      	bne.n	800bc38 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d002      	beq.n	800bbd4 <HAL_UART_Receive_IT+0x24>
 800bbce:	88fb      	ldrh	r3, [r7, #6]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d101      	bne.n	800bbd8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	e030      	b.n	800bc3a <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	4a18      	ldr	r2, [pc, #96]	; (800bc44 <HAL_UART_Receive_IT+0x94>)
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	d01f      	beq.n	800bc28 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d018      	beq.n	800bc28 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	e853 3f00 	ldrex	r3, [r3]
 800bc02:	613b      	str	r3, [r7, #16]
   return(result);
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bc0a:	627b      	str	r3, [r7, #36]	; 0x24
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	461a      	mov	r2, r3
 800bc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc14:	623b      	str	r3, [r7, #32]
 800bc16:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc18:	69f9      	ldr	r1, [r7, #28]
 800bc1a:	6a3a      	ldr	r2, [r7, #32]
 800bc1c:	e841 2300 	strex	r3, r2, [r1]
 800bc20:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc22:	69bb      	ldr	r3, [r7, #24]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d1e6      	bne.n	800bbf6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bc28:	88fb      	ldrh	r3, [r7, #6]
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	68b9      	ldr	r1, [r7, #8]
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f000 fff8 	bl	800cc24 <UART_Start_Receive_IT>
 800bc34:	4603      	mov	r3, r0
 800bc36:	e000      	b.n	800bc3a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bc38:	2302      	movs	r3, #2
  }
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3728      	adds	r7, #40	; 0x28
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	40008000 	.word	0x40008000

0800bc48 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b08a      	sub	sp, #40	; 0x28
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	60b9      	str	r1, [r7, #8]
 800bc52:	4613      	mov	r3, r2
 800bc54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc5c:	2b20      	cmp	r3, #32
 800bc5e:	d167      	bne.n	800bd30 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d002      	beq.n	800bc6c <HAL_UART_Transmit_DMA+0x24>
 800bc66:	88fb      	ldrh	r3, [r7, #6]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d101      	bne.n	800bc70 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	e060      	b.n	800bd32 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	68ba      	ldr	r2, [r7, #8]
 800bc74:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	88fa      	ldrh	r2, [r7, #6]
 800bc7a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	88fa      	ldrh	r2, [r7, #6]
 800bc82:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2221      	movs	r2, #33	; 0x21
 800bc92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d028      	beq.n	800bcf0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bca2:	4a26      	ldr	r2, [pc, #152]	; (800bd3c <HAL_UART_Transmit_DMA+0xf4>)
 800bca4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcaa:	4a25      	ldr	r2, [pc, #148]	; (800bd40 <HAL_UART_Transmit_DMA+0xf8>)
 800bcac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcb2:	4a24      	ldr	r2, [pc, #144]	; (800bd44 <HAL_UART_Transmit_DMA+0xfc>)
 800bcb4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcba:	2200      	movs	r2, #0
 800bcbc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	3328      	adds	r3, #40	; 0x28
 800bcce:	461a      	mov	r2, r3
 800bcd0:	88fb      	ldrh	r3, [r7, #6]
 800bcd2:	f7fb f90b 	bl	8006eec <HAL_DMA_Start_IT>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d009      	beq.n	800bcf0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2210      	movs	r2, #16
 800bce0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2220      	movs	r2, #32
 800bce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800bcec:	2301      	movs	r3, #1
 800bcee:	e020      	b.n	800bd32 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	2240      	movs	r2, #64	; 0x40
 800bcf6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	3308      	adds	r3, #8
 800bcfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	e853 3f00 	ldrex	r3, [r3]
 800bd06:	613b      	str	r3, [r7, #16]
   return(result);
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd0e:	627b      	str	r3, [r7, #36]	; 0x24
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	3308      	adds	r3, #8
 800bd16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd18:	623a      	str	r2, [r7, #32]
 800bd1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd1c:	69f9      	ldr	r1, [r7, #28]
 800bd1e:	6a3a      	ldr	r2, [r7, #32]
 800bd20:	e841 2300 	strex	r3, r2, [r1]
 800bd24:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd26:	69bb      	ldr	r3, [r7, #24]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d1e5      	bne.n	800bcf8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	e000      	b.n	800bd32 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800bd30:	2302      	movs	r3, #2
  }
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3728      	adds	r7, #40	; 0x28
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	bf00      	nop
 800bd3c:	0800cfaf 	.word	0x0800cfaf
 800bd40:	0800d049 	.word	0x0800d049
 800bd44:	0800d065 	.word	0x0800d065

0800bd48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b0ba      	sub	sp, #232	; 0xe8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	69db      	ldr	r3, [r3, #28]
 800bd56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	689b      	ldr	r3, [r3, #8]
 800bd6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bd6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bd72:	f640 030f 	movw	r3, #2063	; 0x80f
 800bd76:	4013      	ands	r3, r2
 800bd78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bd7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d11b      	bne.n	800bdbc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bd84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd88:	f003 0320 	and.w	r3, r3, #32
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d015      	beq.n	800bdbc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bd90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd94:	f003 0320 	and.w	r3, r3, #32
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d105      	bne.n	800bda8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bd9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bda0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d009      	beq.n	800bdbc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	f000 82e3 	beq.w	800c378 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	4798      	blx	r3
      }
      return;
 800bdba:	e2dd      	b.n	800c378 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bdbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	f000 8123 	beq.w	800c00c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bdc6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bdca:	4b8d      	ldr	r3, [pc, #564]	; (800c000 <HAL_UART_IRQHandler+0x2b8>)
 800bdcc:	4013      	ands	r3, r2
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d106      	bne.n	800bde0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bdd2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bdd6:	4b8b      	ldr	r3, [pc, #556]	; (800c004 <HAL_UART_IRQHandler+0x2bc>)
 800bdd8:	4013      	ands	r3, r2
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	f000 8116 	beq.w	800c00c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bde0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bde4:	f003 0301 	and.w	r3, r3, #1
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d011      	beq.n	800be10 <HAL_UART_IRQHandler+0xc8>
 800bdec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d00b      	beq.n	800be10 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be06:	f043 0201 	orr.w	r2, r3, #1
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be14:	f003 0302 	and.w	r3, r3, #2
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d011      	beq.n	800be40 <HAL_UART_IRQHandler+0xf8>
 800be1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be20:	f003 0301 	and.w	r3, r3, #1
 800be24:	2b00      	cmp	r3, #0
 800be26:	d00b      	beq.n	800be40 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2202      	movs	r2, #2
 800be2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be36:	f043 0204 	orr.w	r2, r3, #4
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be44:	f003 0304 	and.w	r3, r3, #4
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d011      	beq.n	800be70 <HAL_UART_IRQHandler+0x128>
 800be4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be50:	f003 0301 	and.w	r3, r3, #1
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00b      	beq.n	800be70 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	2204      	movs	r2, #4
 800be5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be66:	f043 0202 	orr.w	r2, r3, #2
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800be70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be74:	f003 0308 	and.w	r3, r3, #8
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d017      	beq.n	800beac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800be7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be80:	f003 0320 	and.w	r3, r3, #32
 800be84:	2b00      	cmp	r3, #0
 800be86:	d105      	bne.n	800be94 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800be88:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800be8c:	4b5c      	ldr	r3, [pc, #368]	; (800c000 <HAL_UART_IRQHandler+0x2b8>)
 800be8e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800be90:	2b00      	cmp	r3, #0
 800be92:	d00b      	beq.n	800beac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	2208      	movs	r2, #8
 800be9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bea2:	f043 0208 	orr.w	r2, r3, #8
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800beac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800beb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d012      	beq.n	800bede <HAL_UART_IRQHandler+0x196>
 800beb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bebc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d00c      	beq.n	800bede <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800becc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bed4:	f043 0220 	orr.w	r2, r3, #32
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	f000 8249 	beq.w	800c37c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800beea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800beee:	f003 0320 	and.w	r3, r3, #32
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d013      	beq.n	800bf1e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800befa:	f003 0320 	and.w	r3, r3, #32
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d105      	bne.n	800bf0e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bf02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d007      	beq.n	800bf1e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d003      	beq.n	800bf1e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	689b      	ldr	r3, [r3, #8]
 800bf2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf32:	2b40      	cmp	r3, #64	; 0x40
 800bf34:	d005      	beq.n	800bf42 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bf36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bf3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d054      	beq.n	800bfec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 ffce 	bl	800cee4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	689b      	ldr	r3, [r3, #8]
 800bf4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf52:	2b40      	cmp	r3, #64	; 0x40
 800bf54:	d146      	bne.n	800bfe4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	3308      	adds	r3, #8
 800bf5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bf64:	e853 3f00 	ldrex	r3, [r3]
 800bf68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bf6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	3308      	adds	r3, #8
 800bf7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bf82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bf86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bf8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bf92:	e841 2300 	strex	r3, r2, [r1]
 800bf96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bf9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d1d9      	bne.n	800bf56 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d017      	beq.n	800bfdc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfb2:	4a15      	ldr	r2, [pc, #84]	; (800c008 <HAL_UART_IRQHandler+0x2c0>)
 800bfb4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f7fb f871 	bl	80070a4 <HAL_DMA_Abort_IT>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d019      	beq.n	800bffc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800bfd6:	4610      	mov	r0, r2
 800bfd8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfda:	e00f      	b.n	800bffc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 f9e0 	bl	800c3a2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfe2:	e00b      	b.n	800bffc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f000 f9dc 	bl	800c3a2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfea:	e007      	b.n	800bffc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 f9d8 	bl	800c3a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2200      	movs	r2, #0
 800bff6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800bffa:	e1bf      	b.n	800c37c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bffc:	bf00      	nop
    return;
 800bffe:	e1bd      	b.n	800c37c <HAL_UART_IRQHandler+0x634>
 800c000:	10000001 	.word	0x10000001
 800c004:	04000120 	.word	0x04000120
 800c008:	0800d0e5 	.word	0x0800d0e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c010:	2b01      	cmp	r3, #1
 800c012:	f040 8153 	bne.w	800c2bc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c01a:	f003 0310 	and.w	r3, r3, #16
 800c01e:	2b00      	cmp	r3, #0
 800c020:	f000 814c 	beq.w	800c2bc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c028:	f003 0310 	and.w	r3, r3, #16
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	f000 8145 	beq.w	800c2bc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	2210      	movs	r2, #16
 800c038:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	689b      	ldr	r3, [r3, #8]
 800c040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c044:	2b40      	cmp	r3, #64	; 0x40
 800c046:	f040 80bb 	bne.w	800c1c0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c058:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	f000 818f 	beq.w	800c380 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c068:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c06c:	429a      	cmp	r2, r3
 800c06e:	f080 8187 	bcs.w	800c380 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c078:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f003 0320 	and.w	r3, r3, #32
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	f040 8087 	bne.w	800c19e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c098:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c09c:	e853 3f00 	ldrex	r3, [r3]
 800c0a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c0a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c0a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c0ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c0be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c0c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c0ca:	e841 2300 	strex	r3, r2, [r1]
 800c0ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c0d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d1da      	bne.n	800c090 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	3308      	adds	r3, #8
 800c0e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c0e4:	e853 3f00 	ldrex	r3, [r3]
 800c0e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c0ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c0ec:	f023 0301 	bic.w	r3, r3, #1
 800c0f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	3308      	adds	r3, #8
 800c0fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c0fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c102:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c104:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c106:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c10a:	e841 2300 	strex	r3, r2, [r1]
 800c10e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c110:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c112:	2b00      	cmp	r3, #0
 800c114:	d1e1      	bne.n	800c0da <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	3308      	adds	r3, #8
 800c11c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c11e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c120:	e853 3f00 	ldrex	r3, [r3]
 800c124:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c12c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	3308      	adds	r3, #8
 800c136:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c13a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c13c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c13e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c140:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c142:	e841 2300 	strex	r3, r2, [r1]
 800c146:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c148:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d1e3      	bne.n	800c116 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2220      	movs	r2, #32
 800c152:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2200      	movs	r2, #0
 800c15a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c164:	e853 3f00 	ldrex	r3, [r3]
 800c168:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c16a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c16c:	f023 0310 	bic.w	r3, r3, #16
 800c170:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	461a      	mov	r2, r3
 800c17a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c17e:	65bb      	str	r3, [r7, #88]	; 0x58
 800c180:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c182:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c184:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c186:	e841 2300 	strex	r3, r2, [r1]
 800c18a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c18c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d1e4      	bne.n	800c15c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c198:	4618      	mov	r0, r3
 800c19a:	f7fa ff25 	bl	8006fe8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2202      	movs	r2, #2
 800c1a2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	1ad3      	subs	r3, r2, r3
 800c1b4:	b29b      	uxth	r3, r3
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f000 f8fb 	bl	800c3b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c1be:	e0df      	b.n	800c380 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	1ad3      	subs	r3, r2, r3
 800c1d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1da:	b29b      	uxth	r3, r3
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	f000 80d1 	beq.w	800c384 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800c1e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	f000 80cc 	beq.w	800c384 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f4:	e853 3f00 	ldrex	r3, [r3]
 800c1f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c200:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	461a      	mov	r2, r3
 800c20a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c20e:	647b      	str	r3, [r7, #68]	; 0x44
 800c210:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c212:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c214:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c216:	e841 2300 	strex	r3, r2, [r1]
 800c21a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c21c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d1e4      	bne.n	800c1ec <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	3308      	adds	r3, #8
 800c228:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22c:	e853 3f00 	ldrex	r3, [r3]
 800c230:	623b      	str	r3, [r7, #32]
   return(result);
 800c232:	6a3b      	ldr	r3, [r7, #32]
 800c234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c238:	f023 0301 	bic.w	r3, r3, #1
 800c23c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	3308      	adds	r3, #8
 800c246:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c24a:	633a      	str	r2, [r7, #48]	; 0x30
 800c24c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c24e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c252:	e841 2300 	strex	r3, r2, [r1]
 800c256:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d1e1      	bne.n	800c222 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2220      	movs	r2, #32
 800c262:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2200      	movs	r2, #0
 800c26a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2200      	movs	r2, #0
 800c270:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	e853 3f00 	ldrex	r3, [r3]
 800c27e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f023 0310 	bic.w	r3, r3, #16
 800c286:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	461a      	mov	r2, r3
 800c290:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c294:	61fb      	str	r3, [r7, #28]
 800c296:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c298:	69b9      	ldr	r1, [r7, #24]
 800c29a:	69fa      	ldr	r2, [r7, #28]
 800c29c:	e841 2300 	strex	r3, r2, [r1]
 800c2a0:	617b      	str	r3, [r7, #20]
   return(result);
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d1e4      	bne.n	800c272 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2202      	movs	r2, #2
 800c2ac:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c2ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 f87d 	bl	800c3b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c2ba:	e063      	b.n	800c384 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c2bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d00e      	beq.n	800c2e6 <HAL_UART_IRQHandler+0x59e>
 800c2c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d008      	beq.n	800c2e6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c2dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f001 fc5e 	bl	800dba0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c2e4:	e051      	b.n	800c38a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c2e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d014      	beq.n	800c31c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c2f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d105      	bne.n	800c30a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c2fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c302:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c306:	2b00      	cmp	r3, #0
 800c308:	d008      	beq.n	800c31c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d03a      	beq.n	800c388 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	4798      	blx	r3
    }
    return;
 800c31a:	e035      	b.n	800c388 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c31c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c324:	2b00      	cmp	r3, #0
 800c326:	d009      	beq.n	800c33c <HAL_UART_IRQHandler+0x5f4>
 800c328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c32c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c330:	2b00      	cmp	r3, #0
 800c332:	d003      	beq.n	800c33c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f000 feeb 	bl	800d110 <UART_EndTransmit_IT>
    return;
 800c33a:	e026      	b.n	800c38a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c33c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c340:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c344:	2b00      	cmp	r3, #0
 800c346:	d009      	beq.n	800c35c <HAL_UART_IRQHandler+0x614>
 800c348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c34c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c350:	2b00      	cmp	r3, #0
 800c352:	d003      	beq.n	800c35c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f001 fc35 	bl	800dbc4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c35a:	e016      	b.n	800c38a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c35c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c360:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c364:	2b00      	cmp	r3, #0
 800c366:	d010      	beq.n	800c38a <HAL_UART_IRQHandler+0x642>
 800c368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	da0c      	bge.n	800c38a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f001 fc1e 	bl	800dbb2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c376:	e008      	b.n	800c38a <HAL_UART_IRQHandler+0x642>
      return;
 800c378:	bf00      	nop
 800c37a:	e006      	b.n	800c38a <HAL_UART_IRQHandler+0x642>
    return;
 800c37c:	bf00      	nop
 800c37e:	e004      	b.n	800c38a <HAL_UART_IRQHandler+0x642>
      return;
 800c380:	bf00      	nop
 800c382:	e002      	b.n	800c38a <HAL_UART_IRQHandler+0x642>
      return;
 800c384:	bf00      	nop
 800c386:	e000      	b.n	800c38a <HAL_UART_IRQHandler+0x642>
    return;
 800c388:	bf00      	nop
  }
}
 800c38a:	37e8      	adds	r7, #232	; 0xe8
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c390:	b480      	push	{r7}
 800c392:	b083      	sub	sp, #12
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c398:	bf00      	nop
 800c39a:	370c      	adds	r7, #12
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bc80      	pop	{r7}
 800c3a0:	4770      	bx	lr

0800c3a2 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c3a2:	b480      	push	{r7}
 800c3a4:	b083      	sub	sp, #12
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c3aa:	bf00      	nop
 800c3ac:	370c      	adds	r7, #12
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bc80      	pop	{r7}
 800c3b2:	4770      	bx	lr

0800c3b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	460b      	mov	r3, r1
 800c3be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c3c0:	bf00      	nop
 800c3c2:	370c      	adds	r7, #12
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bc80      	pop	{r7}
 800c3c8:	4770      	bx	lr
	...

0800c3cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c3cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c3d0:	b08c      	sub	sp, #48	; 0x30
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	689a      	ldr	r2, [r3, #8]
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	691b      	ldr	r3, [r3, #16]
 800c3e4:	431a      	orrs	r2, r3
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	695b      	ldr	r3, [r3, #20]
 800c3ea:	431a      	orrs	r2, r3
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	69db      	ldr	r3, [r3, #28]
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	681a      	ldr	r2, [r3, #0]
 800c3fa:	4b94      	ldr	r3, [pc, #592]	; (800c64c <UART_SetConfig+0x280>)
 800c3fc:	4013      	ands	r3, r2
 800c3fe:	697a      	ldr	r2, [r7, #20]
 800c400:	6812      	ldr	r2, [r2, #0]
 800c402:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c404:	430b      	orrs	r3, r1
 800c406:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	68da      	ldr	r2, [r3, #12]
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	430a      	orrs	r2, r1
 800c41c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	699b      	ldr	r3, [r3, #24]
 800c422:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4a89      	ldr	r2, [pc, #548]	; (800c650 <UART_SetConfig+0x284>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d004      	beq.n	800c438 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	6a1b      	ldr	r3, [r3, #32]
 800c432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c434:	4313      	orrs	r3, r2
 800c436:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	689b      	ldr	r3, [r3, #8]
 800c43e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c442:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c446:	697a      	ldr	r2, [r7, #20]
 800c448:	6812      	ldr	r2, [r2, #0]
 800c44a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c44c:	430b      	orrs	r3, r1
 800c44e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c456:	f023 010f 	bic.w	r1, r3, #15
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	430a      	orrs	r2, r1
 800c464:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a7a      	ldr	r2, [pc, #488]	; (800c654 <UART_SetConfig+0x288>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d127      	bne.n	800c4c0 <UART_SetConfig+0xf4>
 800c470:	2003      	movs	r0, #3
 800c472:	f7ff f9e1 	bl	800b838 <LL_RCC_GetUSARTClockSource>
 800c476:	4603      	mov	r3, r0
 800c478:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800c47c:	2b03      	cmp	r3, #3
 800c47e:	d81b      	bhi.n	800c4b8 <UART_SetConfig+0xec>
 800c480:	a201      	add	r2, pc, #4	; (adr r2, 800c488 <UART_SetConfig+0xbc>)
 800c482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c486:	bf00      	nop
 800c488:	0800c499 	.word	0x0800c499
 800c48c:	0800c4a9 	.word	0x0800c4a9
 800c490:	0800c4a1 	.word	0x0800c4a1
 800c494:	0800c4b1 	.word	0x0800c4b1
 800c498:	2301      	movs	r3, #1
 800c49a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c49e:	e080      	b.n	800c5a2 <UART_SetConfig+0x1d6>
 800c4a0:	2302      	movs	r3, #2
 800c4a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c4a6:	e07c      	b.n	800c5a2 <UART_SetConfig+0x1d6>
 800c4a8:	2304      	movs	r3, #4
 800c4aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c4ae:	e078      	b.n	800c5a2 <UART_SetConfig+0x1d6>
 800c4b0:	2308      	movs	r3, #8
 800c4b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c4b6:	e074      	b.n	800c5a2 <UART_SetConfig+0x1d6>
 800c4b8:	2310      	movs	r3, #16
 800c4ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c4be:	e070      	b.n	800c5a2 <UART_SetConfig+0x1d6>
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4a64      	ldr	r2, [pc, #400]	; (800c658 <UART_SetConfig+0x28c>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d138      	bne.n	800c53c <UART_SetConfig+0x170>
 800c4ca:	200c      	movs	r0, #12
 800c4cc:	f7ff f9b4 	bl	800b838 <LL_RCC_GetUSARTClockSource>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800c4d6:	2b0c      	cmp	r3, #12
 800c4d8:	d82c      	bhi.n	800c534 <UART_SetConfig+0x168>
 800c4da:	a201      	add	r2, pc, #4	; (adr r2, 800c4e0 <UART_SetConfig+0x114>)
 800c4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4e0:	0800c515 	.word	0x0800c515
 800c4e4:	0800c535 	.word	0x0800c535
 800c4e8:	0800c535 	.word	0x0800c535
 800c4ec:	0800c535 	.word	0x0800c535
 800c4f0:	0800c525 	.word	0x0800c525
 800c4f4:	0800c535 	.word	0x0800c535
 800c4f8:	0800c535 	.word	0x0800c535
 800c4fc:	0800c535 	.word	0x0800c535
 800c500:	0800c51d 	.word	0x0800c51d
 800c504:	0800c535 	.word	0x0800c535
 800c508:	0800c535 	.word	0x0800c535
 800c50c:	0800c535 	.word	0x0800c535
 800c510:	0800c52d 	.word	0x0800c52d
 800c514:	2300      	movs	r3, #0
 800c516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c51a:	e042      	b.n	800c5a2 <UART_SetConfig+0x1d6>
 800c51c:	2302      	movs	r3, #2
 800c51e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c522:	e03e      	b.n	800c5a2 <UART_SetConfig+0x1d6>
 800c524:	2304      	movs	r3, #4
 800c526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c52a:	e03a      	b.n	800c5a2 <UART_SetConfig+0x1d6>
 800c52c:	2308      	movs	r3, #8
 800c52e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c532:	e036      	b.n	800c5a2 <UART_SetConfig+0x1d6>
 800c534:	2310      	movs	r3, #16
 800c536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c53a:	e032      	b.n	800c5a2 <UART_SetConfig+0x1d6>
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a43      	ldr	r2, [pc, #268]	; (800c650 <UART_SetConfig+0x284>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d12a      	bne.n	800c59c <UART_SetConfig+0x1d0>
 800c546:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800c54a:	f7ff f987 	bl	800b85c <LL_RCC_GetLPUARTClockSource>
 800c54e:	4603      	mov	r3, r0
 800c550:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c554:	d01a      	beq.n	800c58c <UART_SetConfig+0x1c0>
 800c556:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c55a:	d81b      	bhi.n	800c594 <UART_SetConfig+0x1c8>
 800c55c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c560:	d00c      	beq.n	800c57c <UART_SetConfig+0x1b0>
 800c562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c566:	d815      	bhi.n	800c594 <UART_SetConfig+0x1c8>
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d003      	beq.n	800c574 <UART_SetConfig+0x1a8>
 800c56c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c570:	d008      	beq.n	800c584 <UART_SetConfig+0x1b8>
 800c572:	e00f      	b.n	800c594 <UART_SetConfig+0x1c8>
 800c574:	2300      	movs	r3, #0
 800c576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c57a:	e012      	b.n	800c5a2 <UART_SetConfig+0x1d6>
 800c57c:	2302      	movs	r3, #2
 800c57e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c582:	e00e      	b.n	800c5a2 <UART_SetConfig+0x1d6>
 800c584:	2304      	movs	r3, #4
 800c586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c58a:	e00a      	b.n	800c5a2 <UART_SetConfig+0x1d6>
 800c58c:	2308      	movs	r3, #8
 800c58e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c592:	e006      	b.n	800c5a2 <UART_SetConfig+0x1d6>
 800c594:	2310      	movs	r3, #16
 800c596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c59a:	e002      	b.n	800c5a2 <UART_SetConfig+0x1d6>
 800c59c:	2310      	movs	r3, #16
 800c59e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4a2a      	ldr	r2, [pc, #168]	; (800c650 <UART_SetConfig+0x284>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	f040 80a4 	bne.w	800c6f6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c5ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c5b2:	2b08      	cmp	r3, #8
 800c5b4:	d823      	bhi.n	800c5fe <UART_SetConfig+0x232>
 800c5b6:	a201      	add	r2, pc, #4	; (adr r2, 800c5bc <UART_SetConfig+0x1f0>)
 800c5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5bc:	0800c5e1 	.word	0x0800c5e1
 800c5c0:	0800c5ff 	.word	0x0800c5ff
 800c5c4:	0800c5e9 	.word	0x0800c5e9
 800c5c8:	0800c5ff 	.word	0x0800c5ff
 800c5cc:	0800c5ef 	.word	0x0800c5ef
 800c5d0:	0800c5ff 	.word	0x0800c5ff
 800c5d4:	0800c5ff 	.word	0x0800c5ff
 800c5d8:	0800c5ff 	.word	0x0800c5ff
 800c5dc:	0800c5f7 	.word	0x0800c5f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c5e0:	f7fd fa38 	bl	8009a54 <HAL_RCC_GetPCLK1Freq>
 800c5e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c5e6:	e010      	b.n	800c60a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c5e8:	4b1c      	ldr	r3, [pc, #112]	; (800c65c <UART_SetConfig+0x290>)
 800c5ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c5ec:	e00d      	b.n	800c60a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c5ee:	f7fd f97d 	bl	80098ec <HAL_RCC_GetSysClockFreq>
 800c5f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c5f4:	e009      	b.n	800c60a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c5f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c5fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c5fc:	e005      	b.n	800c60a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800c5fe:	2300      	movs	r3, #0
 800c600:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c602:	2301      	movs	r3, #1
 800c604:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c608:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	f000 8137 	beq.w	800c880 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c616:	4a12      	ldr	r2, [pc, #72]	; (800c660 <UART_SetConfig+0x294>)
 800c618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c61c:	461a      	mov	r2, r3
 800c61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c620:	fbb3 f3f2 	udiv	r3, r3, r2
 800c624:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	685a      	ldr	r2, [r3, #4]
 800c62a:	4613      	mov	r3, r2
 800c62c:	005b      	lsls	r3, r3, #1
 800c62e:	4413      	add	r3, r2
 800c630:	69ba      	ldr	r2, [r7, #24]
 800c632:	429a      	cmp	r2, r3
 800c634:	d305      	bcc.n	800c642 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c63c:	69ba      	ldr	r2, [r7, #24]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d910      	bls.n	800c664 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800c642:	2301      	movs	r3, #1
 800c644:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c648:	e11a      	b.n	800c880 <UART_SetConfig+0x4b4>
 800c64a:	bf00      	nop
 800c64c:	cfff69f3 	.word	0xcfff69f3
 800c650:	40008000 	.word	0x40008000
 800c654:	40013800 	.word	0x40013800
 800c658:	40004400 	.word	0x40004400
 800c65c:	00f42400 	.word	0x00f42400
 800c660:	080219bc 	.word	0x080219bc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c666:	2200      	movs	r2, #0
 800c668:	60bb      	str	r3, [r7, #8]
 800c66a:	60fa      	str	r2, [r7, #12]
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c670:	4a8e      	ldr	r2, [pc, #568]	; (800c8ac <UART_SetConfig+0x4e0>)
 800c672:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c676:	b29b      	uxth	r3, r3
 800c678:	2200      	movs	r2, #0
 800c67a:	603b      	str	r3, [r7, #0]
 800c67c:	607a      	str	r2, [r7, #4]
 800c67e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c682:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c686:	f7f4 fd45 	bl	8001114 <__aeabi_uldivmod>
 800c68a:	4602      	mov	r2, r0
 800c68c:	460b      	mov	r3, r1
 800c68e:	4610      	mov	r0, r2
 800c690:	4619      	mov	r1, r3
 800c692:	f04f 0200 	mov.w	r2, #0
 800c696:	f04f 0300 	mov.w	r3, #0
 800c69a:	020b      	lsls	r3, r1, #8
 800c69c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c6a0:	0202      	lsls	r2, r0, #8
 800c6a2:	6979      	ldr	r1, [r7, #20]
 800c6a4:	6849      	ldr	r1, [r1, #4]
 800c6a6:	0849      	lsrs	r1, r1, #1
 800c6a8:	2000      	movs	r0, #0
 800c6aa:	460c      	mov	r4, r1
 800c6ac:	4605      	mov	r5, r0
 800c6ae:	eb12 0804 	adds.w	r8, r2, r4
 800c6b2:	eb43 0905 	adc.w	r9, r3, r5
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	685b      	ldr	r3, [r3, #4]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	469a      	mov	sl, r3
 800c6be:	4693      	mov	fp, r2
 800c6c0:	4652      	mov	r2, sl
 800c6c2:	465b      	mov	r3, fp
 800c6c4:	4640      	mov	r0, r8
 800c6c6:	4649      	mov	r1, r9
 800c6c8:	f7f4 fd24 	bl	8001114 <__aeabi_uldivmod>
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	460b      	mov	r3, r1
 800c6d0:	4613      	mov	r3, r2
 800c6d2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c6d4:	6a3b      	ldr	r3, [r7, #32]
 800c6d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c6da:	d308      	bcc.n	800c6ee <UART_SetConfig+0x322>
 800c6dc:	6a3b      	ldr	r3, [r7, #32]
 800c6de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6e2:	d204      	bcs.n	800c6ee <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	6a3a      	ldr	r2, [r7, #32]
 800c6ea:	60da      	str	r2, [r3, #12]
 800c6ec:	e0c8      	b.n	800c880 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c6f4:	e0c4      	b.n	800c880 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	69db      	ldr	r3, [r3, #28]
 800c6fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6fe:	d167      	bne.n	800c7d0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800c700:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c704:	2b08      	cmp	r3, #8
 800c706:	d828      	bhi.n	800c75a <UART_SetConfig+0x38e>
 800c708:	a201      	add	r2, pc, #4	; (adr r2, 800c710 <UART_SetConfig+0x344>)
 800c70a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c70e:	bf00      	nop
 800c710:	0800c735 	.word	0x0800c735
 800c714:	0800c73d 	.word	0x0800c73d
 800c718:	0800c745 	.word	0x0800c745
 800c71c:	0800c75b 	.word	0x0800c75b
 800c720:	0800c74b 	.word	0x0800c74b
 800c724:	0800c75b 	.word	0x0800c75b
 800c728:	0800c75b 	.word	0x0800c75b
 800c72c:	0800c75b 	.word	0x0800c75b
 800c730:	0800c753 	.word	0x0800c753
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c734:	f7fd f98e 	bl	8009a54 <HAL_RCC_GetPCLK1Freq>
 800c738:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c73a:	e014      	b.n	800c766 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c73c:	f7fd f99c 	bl	8009a78 <HAL_RCC_GetPCLK2Freq>
 800c740:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c742:	e010      	b.n	800c766 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c744:	4b5a      	ldr	r3, [pc, #360]	; (800c8b0 <UART_SetConfig+0x4e4>)
 800c746:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c748:	e00d      	b.n	800c766 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c74a:	f7fd f8cf 	bl	80098ec <HAL_RCC_GetSysClockFreq>
 800c74e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c750:	e009      	b.n	800c766 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c756:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c758:	e005      	b.n	800c766 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800c75a:	2300      	movs	r3, #0
 800c75c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c75e:	2301      	movs	r3, #1
 800c760:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c764:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c768:	2b00      	cmp	r3, #0
 800c76a:	f000 8089 	beq.w	800c880 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c772:	4a4e      	ldr	r2, [pc, #312]	; (800c8ac <UART_SetConfig+0x4e0>)
 800c774:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c778:	461a      	mov	r2, r3
 800c77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c77c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c780:	005a      	lsls	r2, r3, #1
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	085b      	lsrs	r3, r3, #1
 800c788:	441a      	add	r2, r3
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c792:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c794:	6a3b      	ldr	r3, [r7, #32]
 800c796:	2b0f      	cmp	r3, #15
 800c798:	d916      	bls.n	800c7c8 <UART_SetConfig+0x3fc>
 800c79a:	6a3b      	ldr	r3, [r7, #32]
 800c79c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7a0:	d212      	bcs.n	800c7c8 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c7a2:	6a3b      	ldr	r3, [r7, #32]
 800c7a4:	b29b      	uxth	r3, r3
 800c7a6:	f023 030f 	bic.w	r3, r3, #15
 800c7aa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c7ac:	6a3b      	ldr	r3, [r7, #32]
 800c7ae:	085b      	lsrs	r3, r3, #1
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	f003 0307 	and.w	r3, r3, #7
 800c7b6:	b29a      	uxth	r2, r3
 800c7b8:	8bfb      	ldrh	r3, [r7, #30]
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	8bfa      	ldrh	r2, [r7, #30]
 800c7c4:	60da      	str	r2, [r3, #12]
 800c7c6:	e05b      	b.n	800c880 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c7ce:	e057      	b.n	800c880 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c7d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c7d4:	2b08      	cmp	r3, #8
 800c7d6:	d828      	bhi.n	800c82a <UART_SetConfig+0x45e>
 800c7d8:	a201      	add	r2, pc, #4	; (adr r2, 800c7e0 <UART_SetConfig+0x414>)
 800c7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7de:	bf00      	nop
 800c7e0:	0800c805 	.word	0x0800c805
 800c7e4:	0800c80d 	.word	0x0800c80d
 800c7e8:	0800c815 	.word	0x0800c815
 800c7ec:	0800c82b 	.word	0x0800c82b
 800c7f0:	0800c81b 	.word	0x0800c81b
 800c7f4:	0800c82b 	.word	0x0800c82b
 800c7f8:	0800c82b 	.word	0x0800c82b
 800c7fc:	0800c82b 	.word	0x0800c82b
 800c800:	0800c823 	.word	0x0800c823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c804:	f7fd f926 	bl	8009a54 <HAL_RCC_GetPCLK1Freq>
 800c808:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c80a:	e014      	b.n	800c836 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c80c:	f7fd f934 	bl	8009a78 <HAL_RCC_GetPCLK2Freq>
 800c810:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c812:	e010      	b.n	800c836 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c814:	4b26      	ldr	r3, [pc, #152]	; (800c8b0 <UART_SetConfig+0x4e4>)
 800c816:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c818:	e00d      	b.n	800c836 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c81a:	f7fd f867 	bl	80098ec <HAL_RCC_GetSysClockFreq>
 800c81e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c820:	e009      	b.n	800c836 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c826:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c828:	e005      	b.n	800c836 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800c82a:	2300      	movs	r3, #0
 800c82c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c82e:	2301      	movs	r3, #1
 800c830:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c834:	bf00      	nop
    }

    if (pclk != 0U)
 800c836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d021      	beq.n	800c880 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c840:	4a1a      	ldr	r2, [pc, #104]	; (800c8ac <UART_SetConfig+0x4e0>)
 800c842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c846:	461a      	mov	r2, r3
 800c848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c84a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	685b      	ldr	r3, [r3, #4]
 800c852:	085b      	lsrs	r3, r3, #1
 800c854:	441a      	add	r2, r3
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	685b      	ldr	r3, [r3, #4]
 800c85a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c85e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c860:	6a3b      	ldr	r3, [r7, #32]
 800c862:	2b0f      	cmp	r3, #15
 800c864:	d909      	bls.n	800c87a <UART_SetConfig+0x4ae>
 800c866:	6a3b      	ldr	r3, [r7, #32]
 800c868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c86c:	d205      	bcs.n	800c87a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c86e:	6a3b      	ldr	r3, [r7, #32]
 800c870:	b29a      	uxth	r2, r3
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	60da      	str	r2, [r3, #12]
 800c878:	e002      	b.n	800c880 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800c87a:	2301      	movs	r3, #1
 800c87c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	2201      	movs	r2, #1
 800c884:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	2201      	movs	r2, #1
 800c88c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	2200      	movs	r2, #0
 800c894:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	2200      	movs	r2, #0
 800c89a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c89c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3730      	adds	r7, #48	; 0x30
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c8aa:	bf00      	nop
 800c8ac:	080219bc 	.word	0x080219bc
 800c8b0:	00f42400 	.word	0x00f42400

0800c8b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b083      	sub	sp, #12
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8c0:	f003 0301 	and.w	r3, r3, #1
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d00a      	beq.n	800c8de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	430a      	orrs	r2, r1
 800c8dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8e2:	f003 0302 	and.w	r3, r3, #2
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d00a      	beq.n	800c900 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	430a      	orrs	r2, r1
 800c8fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c904:	f003 0304 	and.w	r3, r3, #4
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d00a      	beq.n	800c922 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	430a      	orrs	r2, r1
 800c920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c926:	f003 0308 	and.w	r3, r3, #8
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d00a      	beq.n	800c944 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	430a      	orrs	r2, r1
 800c942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c948:	f003 0310 	and.w	r3, r3, #16
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d00a      	beq.n	800c966 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	689b      	ldr	r3, [r3, #8]
 800c956:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	430a      	orrs	r2, r1
 800c964:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c96a:	f003 0320 	and.w	r3, r3, #32
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d00a      	beq.n	800c988 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	689b      	ldr	r3, [r3, #8]
 800c978:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	430a      	orrs	r2, r1
 800c986:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c98c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c990:	2b00      	cmp	r3, #0
 800c992:	d01a      	beq.n	800c9ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	430a      	orrs	r2, r1
 800c9a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c9b2:	d10a      	bne.n	800c9ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	685b      	ldr	r3, [r3, #4]
 800c9ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	430a      	orrs	r2, r1
 800c9c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d00a      	beq.n	800c9ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	430a      	orrs	r2, r1
 800c9ea:	605a      	str	r2, [r3, #4]
  }
}
 800c9ec:	bf00      	nop
 800c9ee:	370c      	adds	r7, #12
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bc80      	pop	{r7}
 800c9f4:	4770      	bx	lr

0800c9f6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c9f6:	b580      	push	{r7, lr}
 800c9f8:	b086      	sub	sp, #24
 800c9fa:	af02      	add	r7, sp, #8
 800c9fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2200      	movs	r2, #0
 800ca02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ca06:	f7f5 ff33 	bl	8002870 <HAL_GetTick>
 800ca0a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f003 0308 	and.w	r3, r3, #8
 800ca16:	2b08      	cmp	r3, #8
 800ca18:	d10e      	bne.n	800ca38 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ca1e:	9300      	str	r3, [sp, #0]
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2200      	movs	r2, #0
 800ca24:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f000 f832 	bl	800ca92 <UART_WaitOnFlagUntilTimeout>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d001      	beq.n	800ca38 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca34:	2303      	movs	r3, #3
 800ca36:	e028      	b.n	800ca8a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f003 0304 	and.w	r3, r3, #4
 800ca42:	2b04      	cmp	r3, #4
 800ca44:	d10e      	bne.n	800ca64 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ca4a:	9300      	str	r3, [sp, #0]
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f000 f81c 	bl	800ca92 <UART_WaitOnFlagUntilTimeout>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d001      	beq.n	800ca64 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca60:	2303      	movs	r3, #3
 800ca62:	e012      	b.n	800ca8a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2220      	movs	r2, #32
 800ca68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2220      	movs	r2, #32
 800ca70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2200      	movs	r2, #0
 800ca78:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2200      	movs	r2, #0
 800ca84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ca88:	2300      	movs	r3, #0
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3710      	adds	r7, #16
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}

0800ca92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ca92:	b580      	push	{r7, lr}
 800ca94:	b09c      	sub	sp, #112	; 0x70
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	60f8      	str	r0, [r7, #12]
 800ca9a:	60b9      	str	r1, [r7, #8]
 800ca9c:	603b      	str	r3, [r7, #0]
 800ca9e:	4613      	mov	r3, r2
 800caa0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800caa2:	e0a9      	b.n	800cbf8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800caa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800caa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800caaa:	f000 80a5 	beq.w	800cbf8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800caae:	f7f5 fedf 	bl	8002870 <HAL_GetTick>
 800cab2:	4602      	mov	r2, r0
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	1ad3      	subs	r3, r2, r3
 800cab8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800caba:	429a      	cmp	r2, r3
 800cabc:	d302      	bcc.n	800cac4 <UART_WaitOnFlagUntilTimeout+0x32>
 800cabe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d140      	bne.n	800cb46 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cacc:	e853 3f00 	ldrex	r3, [r3]
 800cad0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cad4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cad8:	667b      	str	r3, [r7, #100]	; 0x64
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	461a      	mov	r2, r3
 800cae0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cae2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cae4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cae6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cae8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800caea:	e841 2300 	strex	r3, r2, [r1]
 800caee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800caf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d1e6      	bne.n	800cac4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	3308      	adds	r3, #8
 800cafc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cafe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb00:	e853 3f00 	ldrex	r3, [r3]
 800cb04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb08:	f023 0301 	bic.w	r3, r3, #1
 800cb0c:	663b      	str	r3, [r7, #96]	; 0x60
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	3308      	adds	r3, #8
 800cb14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cb16:	64ba      	str	r2, [r7, #72]	; 0x48
 800cb18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cb1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb1e:	e841 2300 	strex	r3, r2, [r1]
 800cb22:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cb24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d1e5      	bne.n	800caf6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	2220      	movs	r2, #32
 800cb2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2220      	movs	r2, #32
 800cb36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800cb42:	2303      	movs	r3, #3
 800cb44:	e069      	b.n	800cc1a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f003 0304 	and.w	r3, r3, #4
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d051      	beq.n	800cbf8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	69db      	ldr	r3, [r3, #28]
 800cb5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb62:	d149      	bne.n	800cbf8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cb6c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb76:	e853 3f00 	ldrex	r3, [r3]
 800cb7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cb82:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	461a      	mov	r2, r3
 800cb8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb8c:	637b      	str	r3, [r7, #52]	; 0x34
 800cb8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cb92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb94:	e841 2300 	strex	r3, r2, [r1]
 800cb98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cb9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d1e6      	bne.n	800cb6e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	3308      	adds	r3, #8
 800cba6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	e853 3f00 	ldrex	r3, [r3]
 800cbae:	613b      	str	r3, [r7, #16]
   return(result);
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	f023 0301 	bic.w	r3, r3, #1
 800cbb6:	66bb      	str	r3, [r7, #104]	; 0x68
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	3308      	adds	r3, #8
 800cbbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cbc0:	623a      	str	r2, [r7, #32]
 800cbc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbc4:	69f9      	ldr	r1, [r7, #28]
 800cbc6:	6a3a      	ldr	r2, [r7, #32]
 800cbc8:	e841 2300 	strex	r3, r2, [r1]
 800cbcc:	61bb      	str	r3, [r7, #24]
   return(result);
 800cbce:	69bb      	ldr	r3, [r7, #24]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d1e5      	bne.n	800cba0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2220      	movs	r2, #32
 800cbd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	2220      	movs	r2, #32
 800cbe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	2220      	movs	r2, #32
 800cbe8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800cbf4:	2303      	movs	r3, #3
 800cbf6:	e010      	b.n	800cc1a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	69da      	ldr	r2, [r3, #28]
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	4013      	ands	r3, r2
 800cc02:	68ba      	ldr	r2, [r7, #8]
 800cc04:	429a      	cmp	r2, r3
 800cc06:	bf0c      	ite	eq
 800cc08:	2301      	moveq	r3, #1
 800cc0a:	2300      	movne	r3, #0
 800cc0c:	b2db      	uxtb	r3, r3
 800cc0e:	461a      	mov	r2, r3
 800cc10:	79fb      	ldrb	r3, [r7, #7]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	f43f af46 	beq.w	800caa4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cc18:	2300      	movs	r3, #0
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3770      	adds	r7, #112	; 0x70
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
	...

0800cc24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b0a3      	sub	sp, #140	; 0x8c
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	60f8      	str	r0, [r7, #12]
 800cc2c:	60b9      	str	r1, [r7, #8]
 800cc2e:	4613      	mov	r3, r2
 800cc30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	68ba      	ldr	r2, [r7, #8]
 800cc36:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	88fa      	ldrh	r2, [r7, #6]
 800cc3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	88fa      	ldrh	r2, [r7, #6]
 800cc44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	689b      	ldr	r3, [r3, #8]
 800cc52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc56:	d10e      	bne.n	800cc76 <UART_Start_Receive_IT+0x52>
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	691b      	ldr	r3, [r3, #16]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d105      	bne.n	800cc6c <UART_Start_Receive_IT+0x48>
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cc66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cc6a:	e02d      	b.n	800ccc8 <UART_Start_Receive_IT+0xa4>
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	22ff      	movs	r2, #255	; 0xff
 800cc70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cc74:	e028      	b.n	800ccc8 <UART_Start_Receive_IT+0xa4>
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	689b      	ldr	r3, [r3, #8]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d10d      	bne.n	800cc9a <UART_Start_Receive_IT+0x76>
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	691b      	ldr	r3, [r3, #16]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d104      	bne.n	800cc90 <UART_Start_Receive_IT+0x6c>
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	22ff      	movs	r2, #255	; 0xff
 800cc8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cc8e:	e01b      	b.n	800ccc8 <UART_Start_Receive_IT+0xa4>
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	227f      	movs	r2, #127	; 0x7f
 800cc94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cc98:	e016      	b.n	800ccc8 <UART_Start_Receive_IT+0xa4>
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	689b      	ldr	r3, [r3, #8]
 800cc9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cca2:	d10d      	bne.n	800ccc0 <UART_Start_Receive_IT+0x9c>
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	691b      	ldr	r3, [r3, #16]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d104      	bne.n	800ccb6 <UART_Start_Receive_IT+0x92>
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	227f      	movs	r2, #127	; 0x7f
 800ccb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ccb4:	e008      	b.n	800ccc8 <UART_Start_Receive_IT+0xa4>
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	223f      	movs	r2, #63	; 0x3f
 800ccba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ccbe:	e003      	b.n	800ccc8 <UART_Start_Receive_IT+0xa4>
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	2200      	movs	r2, #0
 800cccc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2222      	movs	r2, #34	; 0x22
 800ccd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	3308      	adds	r3, #8
 800ccde:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cce0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cce2:	e853 3f00 	ldrex	r3, [r3]
 800cce6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800cce8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ccea:	f043 0301 	orr.w	r3, r3, #1
 800ccee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	3308      	adds	r3, #8
 800ccf8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ccfc:	673a      	str	r2, [r7, #112]	; 0x70
 800ccfe:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd00:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cd02:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cd04:	e841 2300 	strex	r3, r2, [r1]
 800cd08:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800cd0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d1e3      	bne.n	800ccd8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd18:	d14f      	bne.n	800cdba <UART_Start_Receive_IT+0x196>
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cd20:	88fa      	ldrh	r2, [r7, #6]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d349      	bcc.n	800cdba <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	689b      	ldr	r3, [r3, #8]
 800cd2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd2e:	d107      	bne.n	800cd40 <UART_Start_Receive_IT+0x11c>
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	691b      	ldr	r3, [r3, #16]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d103      	bne.n	800cd40 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	4a46      	ldr	r2, [pc, #280]	; (800ce54 <UART_Start_Receive_IT+0x230>)
 800cd3c:	675a      	str	r2, [r3, #116]	; 0x74
 800cd3e:	e002      	b.n	800cd46 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	4a45      	ldr	r2, [pc, #276]	; (800ce58 <UART_Start_Receive_IT+0x234>)
 800cd44:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	691b      	ldr	r3, [r3, #16]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d01a      	beq.n	800cd84 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd56:	e853 3f00 	ldrex	r3, [r3]
 800cd5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cd5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cd70:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cd72:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cd76:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cd78:	e841 2300 	strex	r3, r2, [r1]
 800cd7c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cd7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d1e4      	bne.n	800cd4e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	3308      	adds	r3, #8
 800cd8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd8e:	e853 3f00 	ldrex	r3, [r3]
 800cd92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	3308      	adds	r3, #8
 800cda2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cda4:	64ba      	str	r2, [r7, #72]	; 0x48
 800cda6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cda8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cdaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cdac:	e841 2300 	strex	r3, r2, [r1]
 800cdb0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cdb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d1e5      	bne.n	800cd84 <UART_Start_Receive_IT+0x160>
 800cdb8:	e046      	b.n	800ce48 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	689b      	ldr	r3, [r3, #8]
 800cdbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdc2:	d107      	bne.n	800cdd4 <UART_Start_Receive_IT+0x1b0>
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	691b      	ldr	r3, [r3, #16]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d103      	bne.n	800cdd4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	4a23      	ldr	r2, [pc, #140]	; (800ce5c <UART_Start_Receive_IT+0x238>)
 800cdd0:	675a      	str	r2, [r3, #116]	; 0x74
 800cdd2:	e002      	b.n	800cdda <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	4a22      	ldr	r2, [pc, #136]	; (800ce60 <UART_Start_Receive_IT+0x23c>)
 800cdd8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	691b      	ldr	r3, [r3, #16]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d019      	beq.n	800ce16 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdea:	e853 3f00 	ldrex	r3, [r3]
 800cdee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cdf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800cdf6:	677b      	str	r3, [r7, #116]	; 0x74
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce00:	637b      	str	r3, [r7, #52]	; 0x34
 800ce02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ce06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce08:	e841 2300 	strex	r3, r2, [r1]
 800ce0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ce0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d1e6      	bne.n	800cde2 <UART_Start_Receive_IT+0x1be>
 800ce14:	e018      	b.n	800ce48 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	e853 3f00 	ldrex	r3, [r3]
 800ce22:	613b      	str	r3, [r7, #16]
   return(result);
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	f043 0320 	orr.w	r3, r3, #32
 800ce2a:	67bb      	str	r3, [r7, #120]	; 0x78
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	461a      	mov	r2, r3
 800ce32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce34:	623b      	str	r3, [r7, #32]
 800ce36:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce38:	69f9      	ldr	r1, [r7, #28]
 800ce3a:	6a3a      	ldr	r2, [r7, #32]
 800ce3c:	e841 2300 	strex	r3, r2, [r1]
 800ce40:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce42:	69bb      	ldr	r3, [r7, #24]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d1e6      	bne.n	800ce16 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ce48:	2300      	movs	r3, #0
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	378c      	adds	r7, #140	; 0x8c
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bc80      	pop	{r7}
 800ce52:	4770      	bx	lr
 800ce54:	0800d839 	.word	0x0800d839
 800ce58:	0800d4d9 	.word	0x0800d4d9
 800ce5c:	0800d321 	.word	0x0800d321
 800ce60:	0800d169 	.word	0x0800d169

0800ce64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b08f      	sub	sp, #60	; 0x3c
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce72:	6a3b      	ldr	r3, [r7, #32]
 800ce74:	e853 3f00 	ldrex	r3, [r3]
 800ce78:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce7a:	69fb      	ldr	r3, [r7, #28]
 800ce7c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ce80:	637b      	str	r3, [r7, #52]	; 0x34
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	461a      	mov	r2, r3
 800ce88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce8c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ce90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce92:	e841 2300 	strex	r3, r2, [r1]
 800ce96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ce98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d1e6      	bne.n	800ce6c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	3308      	adds	r3, #8
 800cea4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	e853 3f00 	ldrex	r3, [r3]
 800ceac:	60bb      	str	r3, [r7, #8]
   return(result);
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ceb4:	633b      	str	r3, [r7, #48]	; 0x30
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	3308      	adds	r3, #8
 800cebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cebe:	61ba      	str	r2, [r7, #24]
 800cec0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cec2:	6979      	ldr	r1, [r7, #20]
 800cec4:	69ba      	ldr	r2, [r7, #24]
 800cec6:	e841 2300 	strex	r3, r2, [r1]
 800ceca:	613b      	str	r3, [r7, #16]
   return(result);
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d1e5      	bne.n	800ce9e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2220      	movs	r2, #32
 800ced6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800ceda:	bf00      	nop
 800cedc:	373c      	adds	r7, #60	; 0x3c
 800cede:	46bd      	mov	sp, r7
 800cee0:	bc80      	pop	{r7}
 800cee2:	4770      	bx	lr

0800cee4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b095      	sub	sp, #84	; 0x54
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef4:	e853 3f00 	ldrex	r3, [r3]
 800cef8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cefc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cf00:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	461a      	mov	r2, r3
 800cf08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf0a:	643b      	str	r3, [r7, #64]	; 0x40
 800cf0c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cf10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf12:	e841 2300 	strex	r3, r2, [r1]
 800cf16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cf18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d1e6      	bne.n	800ceec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	3308      	adds	r3, #8
 800cf24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf26:	6a3b      	ldr	r3, [r7, #32]
 800cf28:	e853 3f00 	ldrex	r3, [r3]
 800cf2c:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf2e:	69fb      	ldr	r3, [r7, #28]
 800cf30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cf34:	f023 0301 	bic.w	r3, r3, #1
 800cf38:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	3308      	adds	r3, #8
 800cf40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf42:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cf44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf4a:	e841 2300 	strex	r3, r2, [r1]
 800cf4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cf50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d1e3      	bne.n	800cf1e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf5a:	2b01      	cmp	r3, #1
 800cf5c:	d118      	bne.n	800cf90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	e853 3f00 	ldrex	r3, [r3]
 800cf6a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	f023 0310 	bic.w	r3, r3, #16
 800cf72:	647b      	str	r3, [r7, #68]	; 0x44
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	461a      	mov	r2, r3
 800cf7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf7c:	61bb      	str	r3, [r7, #24]
 800cf7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf80:	6979      	ldr	r1, [r7, #20]
 800cf82:	69ba      	ldr	r2, [r7, #24]
 800cf84:	e841 2300 	strex	r3, r2, [r1]
 800cf88:	613b      	str	r3, [r7, #16]
   return(result);
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d1e6      	bne.n	800cf5e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2220      	movs	r2, #32
 800cf94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800cfa4:	bf00      	nop
 800cfa6:	3754      	adds	r7, #84	; 0x54
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bc80      	pop	{r7}
 800cfac:	4770      	bx	lr

0800cfae <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cfae:	b580      	push	{r7, lr}
 800cfb0:	b090      	sub	sp, #64	; 0x40
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfba:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f003 0320 	and.w	r3, r3, #32
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d137      	bne.n	800d03a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800cfca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfcc:	2200      	movs	r2, #0
 800cfce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cfd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	3308      	adds	r3, #8
 800cfd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfdc:	e853 3f00 	ldrex	r3, [r3]
 800cfe0:	623b      	str	r3, [r7, #32]
   return(result);
 800cfe2:	6a3b      	ldr	r3, [r7, #32]
 800cfe4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cfe8:	63bb      	str	r3, [r7, #56]	; 0x38
 800cfea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	3308      	adds	r3, #8
 800cff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cff2:	633a      	str	r2, [r7, #48]	; 0x30
 800cff4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cffa:	e841 2300 	strex	r3, r2, [r1]
 800cffe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d002:	2b00      	cmp	r3, #0
 800d004:	d1e5      	bne.n	800cfd2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	e853 3f00 	ldrex	r3, [r3]
 800d012:	60fb      	str	r3, [r7, #12]
   return(result);
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d01a:	637b      	str	r3, [r7, #52]	; 0x34
 800d01c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	461a      	mov	r2, r3
 800d022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d024:	61fb      	str	r3, [r7, #28]
 800d026:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d028:	69b9      	ldr	r1, [r7, #24]
 800d02a:	69fa      	ldr	r2, [r7, #28]
 800d02c:	e841 2300 	strex	r3, r2, [r1]
 800d030:	617b      	str	r3, [r7, #20]
   return(result);
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d1e6      	bne.n	800d006 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d038:	e002      	b.n	800d040 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d03a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d03c:	f7f6 f904 	bl	8003248 <HAL_UART_TxCpltCallback>
}
 800d040:	bf00      	nop
 800d042:	3740      	adds	r7, #64	; 0x40
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d054:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d056:	68f8      	ldr	r0, [r7, #12]
 800d058:	f7ff f99a 	bl	800c390 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d05c:	bf00      	nop
 800d05e:	3710      	adds	r7, #16
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b086      	sub	sp, #24
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d070:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d078:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d080:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	689b      	ldr	r3, [r3, #8]
 800d088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d08c:	2b80      	cmp	r3, #128	; 0x80
 800d08e:	d109      	bne.n	800d0a4 <UART_DMAError+0x40>
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	2b21      	cmp	r3, #33	; 0x21
 800d094:	d106      	bne.n	800d0a4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	2200      	movs	r2, #0
 800d09a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d09e:	6978      	ldr	r0, [r7, #20]
 800d0a0:	f7ff fee0 	bl	800ce64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	689b      	ldr	r3, [r3, #8]
 800d0aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0ae:	2b40      	cmp	r3, #64	; 0x40
 800d0b0:	d109      	bne.n	800d0c6 <UART_DMAError+0x62>
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2b22      	cmp	r3, #34	; 0x22
 800d0b6:	d106      	bne.n	800d0c6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d0c0:	6978      	ldr	r0, [r7, #20]
 800d0c2:	f7ff ff0f 	bl	800cee4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0cc:	f043 0210 	orr.w	r2, r3, #16
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d0d6:	6978      	ldr	r0, [r7, #20]
 800d0d8:	f7ff f963 	bl	800c3a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d0dc:	bf00      	nop
 800d0de:	3718      	adds	r7, #24
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}

0800d0e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b084      	sub	sp, #16
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d102:	68f8      	ldr	r0, [r7, #12]
 800d104:	f7ff f94d 	bl	800c3a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d108:	bf00      	nop
 800d10a:	3710      	adds	r7, #16
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b088      	sub	sp, #32
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	e853 3f00 	ldrex	r3, [r3]
 800d124:	60bb      	str	r3, [r7, #8]
   return(result);
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d12c:	61fb      	str	r3, [r7, #28]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	461a      	mov	r2, r3
 800d134:	69fb      	ldr	r3, [r7, #28]
 800d136:	61bb      	str	r3, [r7, #24]
 800d138:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d13a:	6979      	ldr	r1, [r7, #20]
 800d13c:	69ba      	ldr	r2, [r7, #24]
 800d13e:	e841 2300 	strex	r3, r2, [r1]
 800d142:	613b      	str	r3, [r7, #16]
   return(result);
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d1e6      	bne.n	800d118 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2220      	movs	r2, #32
 800d14e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2200      	movs	r2, #0
 800d156:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f7f6 f875 	bl	8003248 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d15e:	bf00      	nop
 800d160:	3720      	adds	r7, #32
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
	...

0800d168 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b09c      	sub	sp, #112	; 0x70
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d176:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d180:	2b22      	cmp	r3, #34	; 0x22
 800d182:	f040 80be 	bne.w	800d302 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d18c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d190:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d194:	b2d9      	uxtb	r1, r3
 800d196:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d19a:	b2da      	uxtb	r2, r3
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1a0:	400a      	ands	r2, r1
 800d1a2:	b2d2      	uxtb	r2, r2
 800d1a4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1aa:	1c5a      	adds	r2, r3, #1
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d1b6:	b29b      	uxth	r3, r3
 800d1b8:	3b01      	subs	r3, #1
 800d1ba:	b29a      	uxth	r2, r3
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d1c8:	b29b      	uxth	r3, r3
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	f040 80a1 	bne.w	800d312 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1d8:	e853 3f00 	ldrex	r3, [r3]
 800d1dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d1de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d1e4:	66bb      	str	r3, [r7, #104]	; 0x68
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d1ee:	65bb      	str	r3, [r7, #88]	; 0x58
 800d1f0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d1f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d1f6:	e841 2300 	strex	r3, r2, [r1]
 800d1fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d1fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d1e6      	bne.n	800d1d0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	3308      	adds	r3, #8
 800d208:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d20c:	e853 3f00 	ldrex	r3, [r3]
 800d210:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d214:	f023 0301 	bic.w	r3, r3, #1
 800d218:	667b      	str	r3, [r7, #100]	; 0x64
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	3308      	adds	r3, #8
 800d220:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d222:	647a      	str	r2, [r7, #68]	; 0x44
 800d224:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d226:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d228:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d22a:	e841 2300 	strex	r3, r2, [r1]
 800d22e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d232:	2b00      	cmp	r3, #0
 800d234:	d1e5      	bne.n	800d202 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2220      	movs	r2, #32
 800d23a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2200      	movs	r2, #0
 800d242:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2200      	movs	r2, #0
 800d248:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	4a33      	ldr	r2, [pc, #204]	; (800d31c <UART_RxISR_8BIT+0x1b4>)
 800d250:	4293      	cmp	r3, r2
 800d252:	d01f      	beq.n	800d294 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d018      	beq.n	800d294 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d26a:	e853 3f00 	ldrex	r3, [r3]
 800d26e:	623b      	str	r3, [r7, #32]
   return(result);
 800d270:	6a3b      	ldr	r3, [r7, #32]
 800d272:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d276:	663b      	str	r3, [r7, #96]	; 0x60
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	461a      	mov	r2, r3
 800d27e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d280:	633b      	str	r3, [r7, #48]	; 0x30
 800d282:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d284:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d288:	e841 2300 	strex	r3, r2, [r1]
 800d28c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d290:	2b00      	cmp	r3, #0
 800d292:	d1e6      	bne.n	800d262 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d12e      	bne.n	800d2fa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	e853 3f00 	ldrex	r3, [r3]
 800d2ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	f023 0310 	bic.w	r3, r3, #16
 800d2b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	461a      	mov	r2, r3
 800d2be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2c0:	61fb      	str	r3, [r7, #28]
 800d2c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2c4:	69b9      	ldr	r1, [r7, #24]
 800d2c6:	69fa      	ldr	r2, [r7, #28]
 800d2c8:	e841 2300 	strex	r3, r2, [r1]
 800d2cc:	617b      	str	r3, [r7, #20]
   return(result);
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d1e6      	bne.n	800d2a2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	69db      	ldr	r3, [r3, #28]
 800d2da:	f003 0310 	and.w	r3, r3, #16
 800d2de:	2b10      	cmp	r3, #16
 800d2e0:	d103      	bne.n	800d2ea <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	2210      	movs	r2, #16
 800d2e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f7ff f85e 	bl	800c3b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d2f8:	e00b      	b.n	800d312 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f7f5 ffba 	bl	8003274 <HAL_UART_RxCpltCallback>
}
 800d300:	e007      	b.n	800d312 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	699a      	ldr	r2, [r3, #24]
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f042 0208 	orr.w	r2, r2, #8
 800d310:	619a      	str	r2, [r3, #24]
}
 800d312:	bf00      	nop
 800d314:	3770      	adds	r7, #112	; 0x70
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
 800d31a:	bf00      	nop
 800d31c:	40008000 	.word	0x40008000

0800d320 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b09c      	sub	sp, #112	; 0x70
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d32e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d338:	2b22      	cmp	r3, #34	; 0x22
 800d33a:	f040 80be 	bne.w	800d4ba <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d344:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d34c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d34e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800d352:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d356:	4013      	ands	r3, r2
 800d358:	b29a      	uxth	r2, r3
 800d35a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d35c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d362:	1c9a      	adds	r2, r3, #2
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d36e:	b29b      	uxth	r3, r3
 800d370:	3b01      	subs	r3, #1
 800d372:	b29a      	uxth	r2, r3
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d380:	b29b      	uxth	r3, r3
 800d382:	2b00      	cmp	r3, #0
 800d384:	f040 80a1 	bne.w	800d4ca <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d38e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d390:	e853 3f00 	ldrex	r3, [r3]
 800d394:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d398:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d39c:	667b      	str	r3, [r7, #100]	; 0x64
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	461a      	mov	r2, r3
 800d3a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3a6:	657b      	str	r3, [r7, #84]	; 0x54
 800d3a8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d3ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d3ae:	e841 2300 	strex	r3, r2, [r1]
 800d3b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d3b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d1e6      	bne.n	800d388 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	3308      	adds	r3, #8
 800d3c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3c4:	e853 3f00 	ldrex	r3, [r3]
 800d3c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3cc:	f023 0301 	bic.w	r3, r3, #1
 800d3d0:	663b      	str	r3, [r7, #96]	; 0x60
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	3308      	adds	r3, #8
 800d3d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d3da:	643a      	str	r2, [r7, #64]	; 0x40
 800d3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d3e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d3e2:	e841 2300 	strex	r3, r2, [r1]
 800d3e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d1e5      	bne.n	800d3ba <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2220      	movs	r2, #32
 800d3f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2200      	movs	r2, #0
 800d400:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	4a33      	ldr	r2, [pc, #204]	; (800d4d4 <UART_RxISR_16BIT+0x1b4>)
 800d408:	4293      	cmp	r3, r2
 800d40a:	d01f      	beq.n	800d44c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d416:	2b00      	cmp	r3, #0
 800d418:	d018      	beq.n	800d44c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d420:	6a3b      	ldr	r3, [r7, #32]
 800d422:	e853 3f00 	ldrex	r3, [r3]
 800d426:	61fb      	str	r3, [r7, #28]
   return(result);
 800d428:	69fb      	ldr	r3, [r7, #28]
 800d42a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d42e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	461a      	mov	r2, r3
 800d436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d438:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d43a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d43c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d43e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d440:	e841 2300 	strex	r3, r2, [r1]
 800d444:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d1e6      	bne.n	800d41a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d450:	2b01      	cmp	r3, #1
 800d452:	d12e      	bne.n	800d4b2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2200      	movs	r2, #0
 800d458:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	e853 3f00 	ldrex	r3, [r3]
 800d466:	60bb      	str	r3, [r7, #8]
   return(result);
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	f023 0310 	bic.w	r3, r3, #16
 800d46e:	65bb      	str	r3, [r7, #88]	; 0x58
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	461a      	mov	r2, r3
 800d476:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d478:	61bb      	str	r3, [r7, #24]
 800d47a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d47c:	6979      	ldr	r1, [r7, #20]
 800d47e:	69ba      	ldr	r2, [r7, #24]
 800d480:	e841 2300 	strex	r3, r2, [r1]
 800d484:	613b      	str	r3, [r7, #16]
   return(result);
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d1e6      	bne.n	800d45a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	69db      	ldr	r3, [r3, #28]
 800d492:	f003 0310 	and.w	r3, r3, #16
 800d496:	2b10      	cmp	r3, #16
 800d498:	d103      	bne.n	800d4a2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	2210      	movs	r2, #16
 800d4a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f7fe ff82 	bl	800c3b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d4b0:	e00b      	b.n	800d4ca <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f7f5 fede 	bl	8003274 <HAL_UART_RxCpltCallback>
}
 800d4b8:	e007      	b.n	800d4ca <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	699a      	ldr	r2, [r3, #24]
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f042 0208 	orr.w	r2, r2, #8
 800d4c8:	619a      	str	r2, [r3, #24]
}
 800d4ca:	bf00      	nop
 800d4cc:	3770      	adds	r7, #112	; 0x70
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}
 800d4d2:	bf00      	nop
 800d4d4:	40008000 	.word	0x40008000

0800d4d8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b0ac      	sub	sp, #176	; 0xb0
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d4e6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	69db      	ldr	r3, [r3, #28]
 800d4f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	689b      	ldr	r3, [r3, #8]
 800d504:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d50e:	2b22      	cmp	r3, #34	; 0x22
 800d510:	f040 8182 	bne.w	800d818 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d51a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d51e:	e125      	b.n	800d76c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d526:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d52a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800d52e:	b2d9      	uxtb	r1, r3
 800d530:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800d534:	b2da      	uxtb	r2, r3
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d53a:	400a      	ands	r2, r1
 800d53c:	b2d2      	uxtb	r2, r2
 800d53e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d544:	1c5a      	adds	r2, r3, #1
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d550:	b29b      	uxth	r3, r3
 800d552:	3b01      	subs	r3, #1
 800d554:	b29a      	uxth	r2, r3
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	69db      	ldr	r3, [r3, #28]
 800d562:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d56a:	f003 0307 	and.w	r3, r3, #7
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d053      	beq.n	800d61a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d576:	f003 0301 	and.w	r3, r3, #1
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d011      	beq.n	800d5a2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800d57e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d586:	2b00      	cmp	r3, #0
 800d588:	d00b      	beq.n	800d5a2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	2201      	movs	r2, #1
 800d590:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d598:	f043 0201 	orr.w	r2, r3, #1
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d5a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d5a6:	f003 0302 	and.w	r3, r3, #2
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d011      	beq.n	800d5d2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d5ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d5b2:	f003 0301 	and.w	r3, r3, #1
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d00b      	beq.n	800d5d2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	2202      	movs	r2, #2
 800d5c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5c8:	f043 0204 	orr.w	r2, r3, #4
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d5d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d5d6:	f003 0304 	and.w	r3, r3, #4
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d011      	beq.n	800d602 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d5de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d5e2:	f003 0301 	and.w	r3, r3, #1
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d00b      	beq.n	800d602 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	2204      	movs	r2, #4
 800d5f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5f8:	f043 0202 	orr.w	r2, r3, #2
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d006      	beq.n	800d61a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f7fe fec8 	bl	800c3a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2200      	movs	r2, #0
 800d616:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d620:	b29b      	uxth	r3, r3
 800d622:	2b00      	cmp	r3, #0
 800d624:	f040 80a2 	bne.w	800d76c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d62e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d630:	e853 3f00 	ldrex	r3, [r3]
 800d634:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800d636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d63c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	461a      	mov	r2, r3
 800d646:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d64a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d64c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d64e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d650:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d652:	e841 2300 	strex	r3, r2, [r1]
 800d656:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800d658:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d1e4      	bne.n	800d628 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	3308      	adds	r3, #8
 800d664:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d668:	e853 3f00 	ldrex	r3, [r3]
 800d66c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800d66e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d674:	f023 0301 	bic.w	r3, r3, #1
 800d678:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	3308      	adds	r3, #8
 800d682:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d686:	66ba      	str	r2, [r7, #104]	; 0x68
 800d688:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d68a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d68c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d68e:	e841 2300 	strex	r3, r2, [r1]
 800d692:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d694:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d696:	2b00      	cmp	r3, #0
 800d698:	d1e1      	bne.n	800d65e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2220      	movs	r2, #32
 800d69e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	4a5f      	ldr	r2, [pc, #380]	; (800d830 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	d021      	beq.n	800d6fc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d01a      	beq.n	800d6fc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6ce:	e853 3f00 	ldrex	r3, [r3]
 800d6d2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d6d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d6da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	461a      	mov	r2, r3
 800d6e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d6e8:	657b      	str	r3, [r7, #84]	; 0x54
 800d6ea:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d6ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d6f0:	e841 2300 	strex	r3, r2, [r1]
 800d6f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d6f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d1e4      	bne.n	800d6c6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d700:	2b01      	cmp	r3, #1
 800d702:	d130      	bne.n	800d766 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2200      	movs	r2, #0
 800d708:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d712:	e853 3f00 	ldrex	r3, [r3]
 800d716:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d71a:	f023 0310 	bic.w	r3, r3, #16
 800d71e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	461a      	mov	r2, r3
 800d728:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d72c:	643b      	str	r3, [r7, #64]	; 0x40
 800d72e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d730:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d732:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d734:	e841 2300 	strex	r3, r2, [r1]
 800d738:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d1e4      	bne.n	800d70a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	69db      	ldr	r3, [r3, #28]
 800d746:	f003 0310 	and.w	r3, r3, #16
 800d74a:	2b10      	cmp	r3, #16
 800d74c:	d103      	bne.n	800d756 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	2210      	movs	r2, #16
 800d754:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d75c:	4619      	mov	r1, r3
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f7fe fe28 	bl	800c3b4 <HAL_UARTEx_RxEventCallback>
 800d764:	e002      	b.n	800d76c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f7f5 fd84 	bl	8003274 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d76c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800d770:	2b00      	cmp	r3, #0
 800d772:	d006      	beq.n	800d782 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800d774:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d778:	f003 0320 	and.w	r3, r3, #32
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	f47f aecf 	bne.w	800d520 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d788:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d78c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d790:	2b00      	cmp	r3, #0
 800d792:	d049      	beq.n	800d828 <UART_RxISR_8BIT_FIFOEN+0x350>
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d79a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800d79e:	429a      	cmp	r2, r3
 800d7a0:	d242      	bcs.n	800d828 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	3308      	adds	r3, #8
 800d7a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7aa:	6a3b      	ldr	r3, [r7, #32]
 800d7ac:	e853 3f00 	ldrex	r3, [r3]
 800d7b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d7b2:	69fb      	ldr	r3, [r7, #28]
 800d7b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d7b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	3308      	adds	r3, #8
 800d7c2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d7c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d7c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d7cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7ce:	e841 2300 	strex	r3, r2, [r1]
 800d7d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d1e3      	bne.n	800d7a2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	4a15      	ldr	r2, [pc, #84]	; (800d834 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800d7de:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	e853 3f00 	ldrex	r3, [r3]
 800d7ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	f043 0320 	orr.w	r3, r3, #32
 800d7f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	461a      	mov	r2, r3
 800d7fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d802:	61bb      	str	r3, [r7, #24]
 800d804:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d806:	6979      	ldr	r1, [r7, #20]
 800d808:	69ba      	ldr	r2, [r7, #24]
 800d80a:	e841 2300 	strex	r3, r2, [r1]
 800d80e:	613b      	str	r3, [r7, #16]
   return(result);
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d1e4      	bne.n	800d7e0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d816:	e007      	b.n	800d828 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	699a      	ldr	r2, [r3, #24]
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	f042 0208 	orr.w	r2, r2, #8
 800d826:	619a      	str	r2, [r3, #24]
}
 800d828:	bf00      	nop
 800d82a:	37b0      	adds	r7, #176	; 0xb0
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	40008000 	.word	0x40008000
 800d834:	0800d169 	.word	0x0800d169

0800d838 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b0ae      	sub	sp, #184	; 0xb8
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d846:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	69db      	ldr	r3, [r3, #28]
 800d850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	689b      	ldr	r3, [r3, #8]
 800d864:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d86e:	2b22      	cmp	r3, #34	; 0x22
 800d870:	f040 8186 	bne.w	800db80 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d87a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d87e:	e129      	b.n	800dad4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d886:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d88e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800d892:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800d896:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800d89a:	4013      	ands	r3, r2
 800d89c:	b29a      	uxth	r2, r3
 800d89e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d8a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8a8:	1c9a      	adds	r2, r3, #2
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d8b4:	b29b      	uxth	r3, r3
 800d8b6:	3b01      	subs	r3, #1
 800d8b8:	b29a      	uxth	r2, r3
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	69db      	ldr	r3, [r3, #28]
 800d8c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d8ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d8ce:	f003 0307 	and.w	r3, r3, #7
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d053      	beq.n	800d97e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d8d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d8da:	f003 0301 	and.w	r3, r3, #1
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d011      	beq.n	800d906 <UART_RxISR_16BIT_FIFOEN+0xce>
 800d8e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d8e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d00b      	beq.n	800d906 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8fc:	f043 0201 	orr.w	r2, r3, #1
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d906:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d90a:	f003 0302 	and.w	r3, r3, #2
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d011      	beq.n	800d936 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d912:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d916:	f003 0301 	and.w	r3, r3, #1
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d00b      	beq.n	800d936 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	2202      	movs	r2, #2
 800d924:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d92c:	f043 0204 	orr.w	r2, r3, #4
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d936:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d93a:	f003 0304 	and.w	r3, r3, #4
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d011      	beq.n	800d966 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d942:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d946:	f003 0301 	and.w	r3, r3, #1
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d00b      	beq.n	800d966 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	2204      	movs	r2, #4
 800d954:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d95c:	f043 0202 	orr.w	r2, r3, #2
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d006      	beq.n	800d97e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f7fe fd16 	bl	800c3a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2200      	movs	r2, #0
 800d97a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d984:	b29b      	uxth	r3, r3
 800d986:	2b00      	cmp	r3, #0
 800d988:	f040 80a4 	bne.w	800dad4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d994:	e853 3f00 	ldrex	r3, [r3]
 800d998:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d99a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d99c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d9a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	461a      	mov	r2, r3
 800d9aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d9ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d9b2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d9b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d9ba:	e841 2300 	strex	r3, r2, [r1]
 800d9be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d9c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d1e2      	bne.n	800d98c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	3308      	adds	r3, #8
 800d9cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d9d0:	e853 3f00 	ldrex	r3, [r3]
 800d9d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d9d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d9dc:	f023 0301 	bic.w	r3, r3, #1
 800d9e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	3308      	adds	r3, #8
 800d9ea:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d9ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d9f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d9f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d9f6:	e841 2300 	strex	r3, r2, [r1]
 800d9fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d9fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d1e1      	bne.n	800d9c6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2220      	movs	r2, #32
 800da06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2200      	movs	r2, #0
 800da0e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2200      	movs	r2, #0
 800da14:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	4a5f      	ldr	r2, [pc, #380]	; (800db98 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d021      	beq.n	800da64 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d01a      	beq.n	800da64 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da36:	e853 3f00 	ldrex	r3, [r3]
 800da3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800da3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800da42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	461a      	mov	r2, r3
 800da4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800da50:	65bb      	str	r3, [r7, #88]	; 0x58
 800da52:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800da56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800da58:	e841 2300 	strex	r3, r2, [r1]
 800da5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800da5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da60:	2b00      	cmp	r3, #0
 800da62:	d1e4      	bne.n	800da2e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da68:	2b01      	cmp	r3, #1
 800da6a:	d130      	bne.n	800dace <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2200      	movs	r2, #0
 800da70:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da7a:	e853 3f00 	ldrex	r3, [r3]
 800da7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800da80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da82:	f023 0310 	bic.w	r3, r3, #16
 800da86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	461a      	mov	r2, r3
 800da90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800da94:	647b      	str	r3, [r7, #68]	; 0x44
 800da96:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800da9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da9c:	e841 2300 	strex	r3, r2, [r1]
 800daa0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800daa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d1e4      	bne.n	800da72 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	69db      	ldr	r3, [r3, #28]
 800daae:	f003 0310 	and.w	r3, r3, #16
 800dab2:	2b10      	cmp	r3, #16
 800dab4:	d103      	bne.n	800dabe <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	2210      	movs	r2, #16
 800dabc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dac4:	4619      	mov	r1, r3
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f7fe fc74 	bl	800c3b4 <HAL_UARTEx_RxEventCallback>
 800dacc:	e002      	b.n	800dad4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f7f5 fbd0 	bl	8003274 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dad4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d006      	beq.n	800daea <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800dadc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dae0:	f003 0320 	and.w	r3, r3, #32
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	f47f aecb 	bne.w	800d880 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800daf0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800daf4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d049      	beq.n	800db90 <UART_RxISR_16BIT_FIFOEN+0x358>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800db02:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800db06:	429a      	cmp	r2, r3
 800db08:	d242      	bcs.n	800db90 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	3308      	adds	r3, #8
 800db10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db14:	e853 3f00 	ldrex	r3, [r3]
 800db18:	623b      	str	r3, [r7, #32]
   return(result);
 800db1a:	6a3b      	ldr	r3, [r7, #32]
 800db1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800db20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	3308      	adds	r3, #8
 800db2a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800db2e:	633a      	str	r2, [r7, #48]	; 0x30
 800db30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db36:	e841 2300 	strex	r3, r2, [r1]
 800db3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800db3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d1e3      	bne.n	800db0a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	4a15      	ldr	r2, [pc, #84]	; (800db9c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800db46:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	e853 3f00 	ldrex	r3, [r3]
 800db54:	60fb      	str	r3, [r7, #12]
   return(result);
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	f043 0320 	orr.w	r3, r3, #32
 800db5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	461a      	mov	r2, r3
 800db66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800db6a:	61fb      	str	r3, [r7, #28]
 800db6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db6e:	69b9      	ldr	r1, [r7, #24]
 800db70:	69fa      	ldr	r2, [r7, #28]
 800db72:	e841 2300 	strex	r3, r2, [r1]
 800db76:	617b      	str	r3, [r7, #20]
   return(result);
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d1e4      	bne.n	800db48 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800db7e:	e007      	b.n	800db90 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	699a      	ldr	r2, [r3, #24]
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f042 0208 	orr.w	r2, r2, #8
 800db8e:	619a      	str	r2, [r3, #24]
}
 800db90:	bf00      	nop
 800db92:	37b8      	adds	r7, #184	; 0xb8
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}
 800db98:	40008000 	.word	0x40008000
 800db9c:	0800d321 	.word	0x0800d321

0800dba0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dba0:	b480      	push	{r7}
 800dba2:	b083      	sub	sp, #12
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dba8:	bf00      	nop
 800dbaa:	370c      	adds	r7, #12
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bc80      	pop	{r7}
 800dbb0:	4770      	bx	lr

0800dbb2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dbb2:	b480      	push	{r7}
 800dbb4:	b083      	sub	sp, #12
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dbba:	bf00      	nop
 800dbbc:	370c      	adds	r7, #12
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bc80      	pop	{r7}
 800dbc2:	4770      	bx	lr

0800dbc4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b083      	sub	sp, #12
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dbcc:	bf00      	nop
 800dbce:	370c      	adds	r7, #12
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bc80      	pop	{r7}
 800dbd4:	4770      	bx	lr

0800dbd6 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800dbd6:	b580      	push	{r7, lr}
 800dbd8:	b088      	sub	sp, #32
 800dbda:	af02      	add	r7, sp, #8
 800dbdc:	60f8      	str	r0, [r7, #12]
 800dbde:	1d3b      	adds	r3, r7, #4
 800dbe0:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dbee:	2b01      	cmp	r3, #1
 800dbf0:	d101      	bne.n	800dbf6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800dbf2:	2302      	movs	r3, #2
 800dbf4:	e046      	b.n	800dc84 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	2224      	movs	r2, #36	; 0x24
 800dc02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	681a      	ldr	r2, [r3, #0]
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f022 0201 	bic.w	r2, r2, #1
 800dc14:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	689b      	ldr	r3, [r3, #8]
 800dc1c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800dc20:	687a      	ldr	r2, [r7, #4]
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	430a      	orrs	r2, r1
 800dc28:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d105      	bne.n	800dc3c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800dc30:	1d3b      	adds	r3, r7, #4
 800dc32:	e893 0006 	ldmia.w	r3, {r1, r2}
 800dc36:	68f8      	ldr	r0, [r7, #12]
 800dc38:	f000 f911 	bl	800de5e <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	681a      	ldr	r2, [r3, #0]
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f042 0201 	orr.w	r2, r2, #1
 800dc4a:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dc4c:	f7f4 fe10 	bl	8002870 <HAL_GetTick>
 800dc50:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dc52:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dc56:	9300      	str	r3, [sp, #0]
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dc60:	68f8      	ldr	r0, [r7, #12]
 800dc62:	f7fe ff16 	bl	800ca92 <UART_WaitOnFlagUntilTimeout>
 800dc66:	4603      	mov	r3, r0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d002      	beq.n	800dc72 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800dc6c:	2303      	movs	r3, #3
 800dc6e:	75fb      	strb	r3, [r7, #23]
 800dc70:	e003      	b.n	800dc7a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	2220      	movs	r2, #32
 800dc76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 800dc82:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3718      	adds	r7, #24
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}

0800dc8c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b089      	sub	sp, #36	; 0x24
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dc9a:	2b01      	cmp	r3, #1
 800dc9c:	d101      	bne.n	800dca2 <HAL_UARTEx_EnableStopMode+0x16>
 800dc9e:	2302      	movs	r3, #2
 800dca0:	e021      	b.n	800dce6 <HAL_UARTEx_EnableStopMode+0x5a>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2201      	movs	r2, #1
 800dca6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	e853 3f00 	ldrex	r3, [r3]
 800dcb6:	60bb      	str	r3, [r7, #8]
   return(result);
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	f043 0302 	orr.w	r3, r3, #2
 800dcbe:	61fb      	str	r3, [r7, #28]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	69fb      	ldr	r3, [r7, #28]
 800dcc8:	61bb      	str	r3, [r7, #24]
 800dcca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dccc:	6979      	ldr	r1, [r7, #20]
 800dcce:	69ba      	ldr	r2, [r7, #24]
 800dcd0:	e841 2300 	strex	r3, r2, [r1]
 800dcd4:	613b      	str	r3, [r7, #16]
   return(result);
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d1e6      	bne.n	800dcaa <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2200      	movs	r2, #0
 800dce0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800dce4:	2300      	movs	r3, #0
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3724      	adds	r7, #36	; 0x24
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bc80      	pop	{r7}
 800dcee:	4770      	bx	lr

0800dcf0 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b084      	sub	sp, #16
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dcfe:	2b01      	cmp	r3, #1
 800dd00:	d101      	bne.n	800dd06 <HAL_UARTEx_EnableFifoMode+0x16>
 800dd02:	2302      	movs	r3, #2
 800dd04:	e02b      	b.n	800dd5e <HAL_UARTEx_EnableFifoMode+0x6e>
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2201      	movs	r2, #1
 800dd0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2224      	movs	r2, #36	; 0x24
 800dd12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	681a      	ldr	r2, [r3, #0]
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	f022 0201 	bic.w	r2, r2, #1
 800dd2c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dd34:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800dd3c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	68fa      	ldr	r2, [r7, #12]
 800dd44:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f000 f8ac 	bl	800dea4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2220      	movs	r2, #32
 800dd50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2200      	movs	r2, #0
 800dd58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800dd5c:	2300      	movs	r3, #0
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3710      	adds	r7, #16
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}

0800dd66 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd66:	b580      	push	{r7, lr}
 800dd68:	b084      	sub	sp, #16
 800dd6a:	af00      	add	r7, sp, #0
 800dd6c:	6078      	str	r0, [r7, #4]
 800dd6e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dd76:	2b01      	cmp	r3, #1
 800dd78:	d101      	bne.n	800dd7e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dd7a:	2302      	movs	r3, #2
 800dd7c:	e02d      	b.n	800ddda <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2201      	movs	r2, #1
 800dd82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2224      	movs	r2, #36	; 0x24
 800dd8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	681a      	ldr	r2, [r3, #0]
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	f022 0201 	bic.w	r2, r2, #1
 800dda4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	689b      	ldr	r3, [r3, #8]
 800ddac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	683a      	ldr	r2, [r7, #0]
 800ddb6:	430a      	orrs	r2, r1
 800ddb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f000 f872 	bl	800dea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	68fa      	ldr	r2, [r7, #12]
 800ddc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2220      	movs	r2, #32
 800ddcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ddd8:	2300      	movs	r3, #0
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3710      	adds	r7, #16
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}

0800dde2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dde2:	b580      	push	{r7, lr}
 800dde4:	b084      	sub	sp, #16
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	6078      	str	r0, [r7, #4]
 800ddea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ddf2:	2b01      	cmp	r3, #1
 800ddf4:	d101      	bne.n	800ddfa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ddf6:	2302      	movs	r3, #2
 800ddf8:	e02d      	b.n	800de56 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2201      	movs	r2, #1
 800ddfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2224      	movs	r2, #36	; 0x24
 800de06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	681a      	ldr	r2, [r3, #0]
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	f022 0201 	bic.w	r2, r2, #1
 800de20:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	689b      	ldr	r3, [r3, #8]
 800de28:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	683a      	ldr	r2, [r7, #0]
 800de32:	430a      	orrs	r2, r1
 800de34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f000 f834 	bl	800dea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	68fa      	ldr	r2, [r7, #12]
 800de42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2220      	movs	r2, #32
 800de48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2200      	movs	r2, #0
 800de50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800de54:	2300      	movs	r3, #0
}
 800de56:	4618      	mov	r0, r3
 800de58:	3710      	adds	r7, #16
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}

0800de5e <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800de5e:	b480      	push	{r7}
 800de60:	b085      	sub	sp, #20
 800de62:	af00      	add	r7, sp, #0
 800de64:	60f8      	str	r0, [r7, #12]
 800de66:	1d3b      	adds	r3, r7, #4
 800de68:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	685b      	ldr	r3, [r3, #4]
 800de72:	f023 0210 	bic.w	r2, r3, #16
 800de76:	893b      	ldrh	r3, [r7, #8]
 800de78:	4619      	mov	r1, r3
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	430a      	orrs	r2, r1
 800de80:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	685b      	ldr	r3, [r3, #4]
 800de88:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800de8c:	7abb      	ldrb	r3, [r7, #10]
 800de8e:	061a      	lsls	r2, r3, #24
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	430a      	orrs	r2, r1
 800de96:	605a      	str	r2, [r3, #4]
}
 800de98:	bf00      	nop
 800de9a:	3714      	adds	r7, #20
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bc80      	pop	{r7}
 800dea0:	4770      	bx	lr
	...

0800dea4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dea4:	b480      	push	{r7}
 800dea6:	b085      	sub	sp, #20
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d108      	bne.n	800dec6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2201      	movs	r2, #1
 800deb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2201      	movs	r2, #1
 800dec0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dec4:	e031      	b.n	800df2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dec6:	2308      	movs	r3, #8
 800dec8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800deca:	2308      	movs	r3, #8
 800decc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	689b      	ldr	r3, [r3, #8]
 800ded4:	0e5b      	lsrs	r3, r3, #25
 800ded6:	b2db      	uxtb	r3, r3
 800ded8:	f003 0307 	and.w	r3, r3, #7
 800dedc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	689b      	ldr	r3, [r3, #8]
 800dee4:	0f5b      	lsrs	r3, r3, #29
 800dee6:	b2db      	uxtb	r3, r3
 800dee8:	f003 0307 	and.w	r3, r3, #7
 800deec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800deee:	7bbb      	ldrb	r3, [r7, #14]
 800def0:	7b3a      	ldrb	r2, [r7, #12]
 800def2:	4910      	ldr	r1, [pc, #64]	; (800df34 <UARTEx_SetNbDataToProcess+0x90>)
 800def4:	5c8a      	ldrb	r2, [r1, r2]
 800def6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800defa:	7b3a      	ldrb	r2, [r7, #12]
 800defc:	490e      	ldr	r1, [pc, #56]	; (800df38 <UARTEx_SetNbDataToProcess+0x94>)
 800defe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800df00:	fb93 f3f2 	sdiv	r3, r3, r2
 800df04:	b29a      	uxth	r2, r3
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df0c:	7bfb      	ldrb	r3, [r7, #15]
 800df0e:	7b7a      	ldrb	r2, [r7, #13]
 800df10:	4908      	ldr	r1, [pc, #32]	; (800df34 <UARTEx_SetNbDataToProcess+0x90>)
 800df12:	5c8a      	ldrb	r2, [r1, r2]
 800df14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800df18:	7b7a      	ldrb	r2, [r7, #13]
 800df1a:	4907      	ldr	r1, [pc, #28]	; (800df38 <UARTEx_SetNbDataToProcess+0x94>)
 800df1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df1e:	fb93 f3f2 	sdiv	r3, r3, r2
 800df22:	b29a      	uxth	r2, r3
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800df2a:	bf00      	nop
 800df2c:	3714      	adds	r7, #20
 800df2e:	46bd      	mov	sp, r7
 800df30:	bc80      	pop	{r7}
 800df32:	4770      	bx	lr
 800df34:	080219d4 	.word	0x080219d4
 800df38:	080219dc 	.word	0x080219dc

0800df3c <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800df40:	f7f4 fb36 	bl	80025b0 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800df44:	f000 f854 	bl	800dff0 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800df48:	bf00      	nop
 800df4a:	bd80      	pop	{r7, pc}

0800df4c <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800df50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df54:	f011 fbb6 	bl	801f6c4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800df58:	bf00      	nop
 800df5a:	bd80      	pop	{r7, pc}

0800df5c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800df5c:	b480      	push	{r7}
 800df5e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800df60:	f3bf 8f4f 	dsb	sy
}
 800df64:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800df66:	4b06      	ldr	r3, [pc, #24]	; (800df80 <__NVIC_SystemReset+0x24>)
 800df68:	68db      	ldr	r3, [r3, #12]
 800df6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800df6e:	4904      	ldr	r1, [pc, #16]	; (800df80 <__NVIC_SystemReset+0x24>)
 800df70:	4b04      	ldr	r3, [pc, #16]	; (800df84 <__NVIC_SystemReset+0x28>)
 800df72:	4313      	orrs	r3, r2
 800df74:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800df76:	f3bf 8f4f 	dsb	sy
}
 800df7a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800df7c:	bf00      	nop
 800df7e:	e7fd      	b.n	800df7c <__NVIC_SystemReset+0x20>
 800df80:	e000ed00 	.word	0xe000ed00
 800df84:	05fa0004 	.word	0x05fa0004

0800df88 <disableLoRaWAN>:
/* USER CODE END PV */

/* Exported functions ---------------------------------------------------------*/
/* USER CODE BEGIN EF */

void disableLoRaWAN(void){
 800df88:	b580      	push	{r7, lr}
 800df8a:	b084      	sub	sp, #16
 800df8c:	af00      	add	r7, sp, #0
	// Determine the total number of tasks from the last value in the enum
	int totalTasks = (int)CFG_SEQ_Task_NBR;
 800df8e:	2304      	movs	r3, #4
 800df90:	60bb      	str	r3, [r7, #8]

	// Iterate through each task ID
	for (int taskID = CFG_SEQ_Task_LmHandlerProcess; taskID < totalTasks; taskID++) {
 800df92:	2300      	movs	r3, #0
 800df94:	60fb      	str	r3, [r7, #12]
 800df96:	e00a      	b.n	800dfae <disableLoRaWAN+0x26>
		UTIL_SEQ_bm_t taskMask = (1U << taskID);
 800df98:	2201      	movs	r2, #1
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	fa02 f303 	lsl.w	r3, r2, r3
 800dfa0:	607b      	str	r3, [r7, #4]

		UTIL_SEQ_PauseTask(taskMask);
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f011 fcd8 	bl	801f958 <UTIL_SEQ_PauseTask>
	for (int taskID = CFG_SEQ_Task_LmHandlerProcess; taskID < totalTasks; taskID++) {
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	3301      	adds	r3, #1
 800dfac:	60fb      	str	r3, [r7, #12]
 800dfae:	68fa      	ldr	r2, [r7, #12]
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	dbf0      	blt.n	800df98 <disableLoRaWAN+0x10>
	}
	UTIL_TIMER_Stop(&TxTimer);
 800dfb6:	4809      	ldr	r0, [pc, #36]	; (800dfdc <disableLoRaWAN+0x54>)
 800dfb8:	f011 fde8 	bl	801fb8c <UTIL_TIMER_Stop>
	UTIL_TIMER_Stop(&StopJoinTimer);
 800dfbc:	4808      	ldr	r0, [pc, #32]	; (800dfe0 <disableLoRaWAN+0x58>)
 800dfbe:	f011 fde5 	bl	801fb8c <UTIL_TIMER_Stop>
	UTIL_TIMER_Stop(&TxLedTimer);
 800dfc2:	4808      	ldr	r0, [pc, #32]	; (800dfe4 <disableLoRaWAN+0x5c>)
 800dfc4:	f011 fde2 	bl	801fb8c <UTIL_TIMER_Stop>
	UTIL_TIMER_Stop(&RxLedTimer);
 800dfc8:	4807      	ldr	r0, [pc, #28]	; (800dfe8 <disableLoRaWAN+0x60>)
 800dfca:	f011 fddf 	bl	801fb8c <UTIL_TIMER_Stop>
	UTIL_TIMER_Stop(&JoinLedTimer);
 800dfce:	4807      	ldr	r0, [pc, #28]	; (800dfec <disableLoRaWAN+0x64>)
 800dfd0:	f011 fddc 	bl	801fb8c <UTIL_TIMER_Stop>
}
 800dfd4:	bf00      	nop
 800dfd6:	3710      	adds	r7, #16
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	200005a8 	.word	0x200005a8
 800dfe0:	200005c0 	.word	0x200005c0
 800dfe4:	200006cc 	.word	0x200006cc
 800dfe8:	200006e4 	.word	0x200006e4
 800dfec:	200006fc 	.word	0x200006fc

0800dff0 <LoRaWAN_Init>:

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b086      	sub	sp, #24
 800dff4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800dff6:	2300      	movs	r3, #0
 800dff8:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800dffa:	2300      	movs	r3, #0
 800dffc:	9302      	str	r3, [sp, #8]
 800dffe:	2303      	movs	r3, #3
 800e000:	9301      	str	r3, [sp, #4]
 800e002:	2301      	movs	r3, #1
 800e004:	9300      	str	r3, [sp, #0]
 800e006:	4b59      	ldr	r3, [pc, #356]	; (800e16c <LoRaWAN_Init+0x17c>)
 800e008:	2200      	movs	r2, #0
 800e00a:	2100      	movs	r1, #0
 800e00c:	2002      	movs	r0, #2
 800e00e:	f011 ffc7 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800e012:	2300      	movs	r3, #0
 800e014:	9302      	str	r3, [sp, #8]
 800e016:	2305      	movs	r3, #5
 800e018:	9301      	str	r3, [sp, #4]
 800e01a:	2302      	movs	r3, #2
 800e01c:	9300      	str	r3, [sp, #0]
 800e01e:	4b54      	ldr	r3, [pc, #336]	; (800e170 <LoRaWAN_Init+0x180>)
 800e020:	2200      	movs	r2, #0
 800e022:	2100      	movs	r1, #0
 800e024:	2002      	movs	r0, #2
 800e026:	f011 ffbb 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800e02a:	2300      	movs	r3, #0
 800e02c:	9302      	str	r3, [sp, #8]
 800e02e:	2303      	movs	r3, #3
 800e030:	9301      	str	r3, [sp, #4]
 800e032:	2301      	movs	r3, #1
 800e034:	9300      	str	r3, [sp, #0]
 800e036:	4b4f      	ldr	r3, [pc, #316]	; (800e174 <LoRaWAN_Init+0x184>)
 800e038:	2200      	movs	r2, #0
 800e03a:	2100      	movs	r1, #0
 800e03c:	2002      	movs	r0, #2
 800e03e:	f011 ffaf 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800e042:	1d3b      	adds	r3, r7, #4
 800e044:	4619      	mov	r1, r3
 800e046:	2000      	movs	r0, #0
 800e048:	f003 fa70 	bl	801152c <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	0e1b      	lsrs	r3, r3, #24
 800e050:	b2db      	uxtb	r3, r3
 800e052:	461a      	mov	r2, r3
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	0c1b      	lsrs	r3, r3, #16
 800e058:	b2db      	uxtb	r3, r3
 800e05a:	4619      	mov	r1, r3
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	0a1b      	lsrs	r3, r3, #8
 800e060:	b2db      	uxtb	r3, r3
 800e062:	9302      	str	r3, [sp, #8]
 800e064:	9101      	str	r1, [sp, #4]
 800e066:	9200      	str	r2, [sp, #0]
 800e068:	4b43      	ldr	r3, [pc, #268]	; (800e178 <LoRaWAN_Init+0x188>)
 800e06a:	2200      	movs	r2, #0
 800e06c:	2100      	movs	r1, #0
 800e06e:	2002      	movs	r0, #2
 800e070:	f011 ff96 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800e074:	1d3b      	adds	r3, r7, #4
 800e076:	4619      	mov	r1, r3
 800e078:	2001      	movs	r0, #1
 800e07a:	f003 fa57 	bl	801152c <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	0e1b      	lsrs	r3, r3, #24
 800e082:	b2db      	uxtb	r3, r3
 800e084:	461a      	mov	r2, r3
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	0c1b      	lsrs	r3, r3, #16
 800e08a:	b2db      	uxtb	r3, r3
 800e08c:	4619      	mov	r1, r3
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	0a1b      	lsrs	r3, r3, #8
 800e092:	b2db      	uxtb	r3, r3
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	b2c0      	uxtb	r0, r0
 800e098:	9003      	str	r0, [sp, #12]
 800e09a:	9302      	str	r3, [sp, #8]
 800e09c:	9101      	str	r1, [sp, #4]
 800e09e:	9200      	str	r2, [sp, #0]
 800e0a0:	4b36      	ldr	r3, [pc, #216]	; (800e17c <LoRaWAN_Init+0x18c>)
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	2100      	movs	r1, #0
 800e0a6:	2002      	movs	r0, #2
 800e0a8:	f011 ff7a 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	9300      	str	r3, [sp, #0]
 800e0b0:	4b33      	ldr	r3, [pc, #204]	; (800e180 <LoRaWAN_Init+0x190>)
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e0b8:	4832      	ldr	r0, [pc, #200]	; (800e184 <LoRaWAN_Init+0x194>)
 800e0ba:	f011 fcc3 	bl	801fa44 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800e0be:	2300      	movs	r3, #0
 800e0c0:	9300      	str	r3, [sp, #0]
 800e0c2:	4b31      	ldr	r3, [pc, #196]	; (800e188 <LoRaWAN_Init+0x198>)
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e0ca:	4830      	ldr	r0, [pc, #192]	; (800e18c <LoRaWAN_Init+0x19c>)
 800e0cc:	f011 fcba 	bl	801fa44 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	9300      	str	r3, [sp, #0]
 800e0d4:	4b2e      	ldr	r3, [pc, #184]	; (800e190 <LoRaWAN_Init+0x1a0>)
 800e0d6:	2201      	movs	r2, #1
 800e0d8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800e0dc:	482d      	ldr	r0, [pc, #180]	; (800e194 <LoRaWAN_Init+0x1a4>)
 800e0de:	f011 fcb1 	bl	801fa44 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	9300      	str	r3, [sp, #0]
 800e0e6:	4b2c      	ldr	r3, [pc, #176]	; (800e198 <LoRaWAN_Init+0x1a8>)
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800e0ee:	482b      	ldr	r0, [pc, #172]	; (800e19c <LoRaWAN_Init+0x1ac>)
 800e0f0:	f011 fca8 	bl	801fa44 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800e0f4:	4a2a      	ldr	r2, [pc, #168]	; (800e1a0 <LoRaWAN_Init+0x1b0>)
 800e0f6:	2100      	movs	r1, #0
 800e0f8:	2001      	movs	r0, #1
 800e0fa:	f011 fbdf 	bl	801f8bc <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800e0fe:	4a29      	ldr	r2, [pc, #164]	; (800e1a4 <LoRaWAN_Init+0x1b4>)
 800e100:	2100      	movs	r1, #0
 800e102:	2002      	movs	r0, #2
 800e104:	f011 fbda 	bl	801f8bc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800e108:	4a27      	ldr	r2, [pc, #156]	; (800e1a8 <LoRaWAN_Init+0x1b8>)
 800e10a:	2100      	movs	r1, #0
 800e10c:	2004      	movs	r0, #4
 800e10e:	f011 fbd5 	bl	801f8bc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800e112:	4a26      	ldr	r2, [pc, #152]	; (800e1ac <LoRaWAN_Init+0x1bc>)
 800e114:	2100      	movs	r1, #0
 800e116:	2008      	movs	r0, #8
 800e118:	f011 fbd0 	bl	801f8bc <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800e11c:	f000 fd64 	bl	800ebe8 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800e120:	4923      	ldr	r1, [pc, #140]	; (800e1b0 <LoRaWAN_Init+0x1c0>)
 800e122:	4824      	ldr	r0, [pc, #144]	; (800e1b4 <LoRaWAN_Init+0x1c4>)
 800e124:	f002 fa74 	bl	8010610 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800e128:	4823      	ldr	r0, [pc, #140]	; (800e1b8 <LoRaWAN_Init+0x1c8>)
 800e12a:	f002 fadf 	bl	80106ec <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800e12e:	4819      	ldr	r0, [pc, #100]	; (800e194 <LoRaWAN_Init+0x1a4>)
 800e130:	f011 fcbe 	bl	801fab0 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800e134:	4b21      	ldr	r3, [pc, #132]	; (800e1bc <LoRaWAN_Init+0x1cc>)
 800e136:	781b      	ldrb	r3, [r3, #0]
 800e138:	4a21      	ldr	r2, [pc, #132]	; (800e1c0 <LoRaWAN_Init+0x1d0>)
 800e13a:	7812      	ldrb	r2, [r2, #0]
 800e13c:	4611      	mov	r1, r2
 800e13e:	4618      	mov	r0, r3
 800e140:	f002 fc2c 	bl	801099c <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800e144:	4b1f      	ldr	r3, [pc, #124]	; (800e1c4 <LoRaWAN_Init+0x1d4>)
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d10b      	bne.n	800e164 <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800e14c:	4b1e      	ldr	r3, [pc, #120]	; (800e1c8 <LoRaWAN_Init+0x1d8>)
 800e14e:	6819      	ldr	r1, [r3, #0]
 800e150:	2300      	movs	r3, #0
 800e152:	9300      	str	r3, [sp, #0]
 800e154:	4b1d      	ldr	r3, [pc, #116]	; (800e1cc <LoRaWAN_Init+0x1dc>)
 800e156:	2200      	movs	r2, #0
 800e158:	481d      	ldr	r0, [pc, #116]	; (800e1d0 <LoRaWAN_Init+0x1e0>)
 800e15a:	f011 fc73 	bl	801fa44 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800e15e:	481c      	ldr	r0, [pc, #112]	; (800e1d0 <LoRaWAN_Init+0x1e0>)
 800e160:	f011 fca6 	bl	801fab0 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800e164:	bf00      	nop
 800e166:	3708      	adds	r7, #8
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	08021044 	.word	0x08021044
 800e170:	08021068 	.word	0x08021068
 800e174:	0802108c 	.word	0x0802108c
 800e178:	080210b0 	.word	0x080210b0
 800e17c:	080210d4 	.word	0x080210d4
 800e180:	0800e709 	.word	0x0800e709
 800e184:	200006cc 	.word	0x200006cc
 800e188:	0800e71b 	.word	0x0800e71b
 800e18c:	200006e4 	.word	0x200006e4
 800e190:	0800e72d 	.word	0x0800e72d
 800e194:	200006fc 	.word	0x200006fc
 800e198:	0800eae9 	.word	0x0800eae9
 800e19c:	200005c0 	.word	0x200005c0
 800e1a0:	08010931 	.word	0x08010931
 800e1a4:	0800e31d 	.word	0x0800e31d
 800e1a8:	0800eb0d 	.word	0x0800eb0d
 800e1ac:	0800ea69 	.word	0x0800ea69
 800e1b0:	01030000 	.word	0x01030000
 800e1b4:	20000024 	.word	0x20000024
 800e1b8:	20000070 	.word	0x20000070
 800e1bc:	20000020 	.word	0x20000020
 800e1c0:	20000021 	.word	0x20000021
 800e1c4:	200005a4 	.word	0x200005a4
 800e1c8:	20000088 	.word	0x20000088
 800e1cc:	0800e6d5 	.word	0x0800e6d5
 800e1d0:	200005a8 	.word	0x200005a8

0800e1d4 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800e1d4:	b5b0      	push	{r4, r5, r7, lr}
 800e1d6:	b08a      	sub	sp, #40	; 0x28
 800e1d8:	af06      	add	r7, sp, #24
 800e1da:	6078      	str	r0, [r7, #4]
 800e1dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	f000 8086 	beq.w	800e2f6 <OnRxData+0x122>
  {

    UTIL_TIMER_Start(&RxLedTimer);
 800e1ea:	4845      	ldr	r0, [pc, #276]	; (800e300 <OnRxData+0x12c>)
 800e1ec:	f011 fc60 	bl	801fab0 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	781b      	ldrb	r3, [r3, #0]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d05a      	beq.n	800e2ae <OnRxData+0xda>
    {
      if (appData != NULL)
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d057      	beq.n	800e2ae <OnRxData+0xda>
      {
        RxPort = appData->Port;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	781b      	ldrb	r3, [r3, #0]
 800e202:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	685b      	ldr	r3, [r3, #4]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d050      	beq.n	800e2ae <OnRxData+0xda>
        {
          switch (appData->Port)
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	781b      	ldrb	r3, [r3, #0]
 800e210:	2b02      	cmp	r3, #2
 800e212:	d01f      	beq.n	800e254 <OnRxData+0x80>
 800e214:	2b03      	cmp	r3, #3
 800e216:	d145      	bne.n	800e2a4 <OnRxData+0xd0>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	785b      	ldrb	r3, [r3, #1]
 800e21c:	2b01      	cmp	r3, #1
 800e21e:	d143      	bne.n	800e2a8 <OnRxData+0xd4>
              {
                switch (appData->Buffer[0])
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	685b      	ldr	r3, [r3, #4]
 800e224:	781b      	ldrb	r3, [r3, #0]
 800e226:	2b02      	cmp	r3, #2
 800e228:	d00e      	beq.n	800e248 <OnRxData+0x74>
 800e22a:	2b02      	cmp	r3, #2
 800e22c:	dc10      	bgt.n	800e250 <OnRxData+0x7c>
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d002      	beq.n	800e238 <OnRxData+0x64>
 800e232:	2b01      	cmp	r3, #1
 800e234:	d004      	beq.n	800e240 <OnRxData+0x6c>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800e236:	e00b      	b.n	800e250 <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_A);
 800e238:	2000      	movs	r0, #0
 800e23a:	f002 fd63 	bl	8010d04 <LmHandlerRequestClass>
                    break;
 800e23e:	e008      	b.n	800e252 <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_B);
 800e240:	2001      	movs	r0, #1
 800e242:	f002 fd5f 	bl	8010d04 <LmHandlerRequestClass>
                    break;
 800e246:	e004      	b.n	800e252 <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_C);
 800e248:	2002      	movs	r0, #2
 800e24a:	f002 fd5b 	bl	8010d04 <LmHandlerRequestClass>
                    break;
 800e24e:	e000      	b.n	800e252 <OnRxData+0x7e>
                    break;
 800e250:	bf00      	nop
                }
              }
              break;
 800e252:	e029      	b.n	800e2a8 <OnRxData+0xd4>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	785b      	ldrb	r3, [r3, #1]
 800e258:	2b01      	cmp	r3, #1
 800e25a:	d127      	bne.n	800e2ac <OnRxData+0xd8>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	781b      	ldrb	r3, [r3, #0]
 800e262:	f003 0301 	and.w	r3, r3, #1
 800e266:	b2da      	uxtb	r2, r3
 800e268:	4b26      	ldr	r3, [pc, #152]	; (800e304 <OnRxData+0x130>)
 800e26a:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800e26c:	4b25      	ldr	r3, [pc, #148]	; (800e304 <OnRxData+0x130>)
 800e26e:	781b      	ldrb	r3, [r3, #0]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d10b      	bne.n	800e28c <OnRxData+0xb8>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800e274:	4b24      	ldr	r3, [pc, #144]	; (800e308 <OnRxData+0x134>)
 800e276:	2200      	movs	r2, #0
 800e278:	2100      	movs	r1, #0
 800e27a:	2003      	movs	r0, #3
 800e27c:	f011 fe90 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800e280:	2201      	movs	r2, #1
 800e282:	2120      	movs	r1, #32
 800e284:	4821      	ldr	r0, [pc, #132]	; (800e30c <OnRxData+0x138>)
 800e286:	f7f9 fd3c 	bl	8007d02 <HAL_GPIO_WritePin>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
                }
              }
              break;
 800e28a:	e00f      	b.n	800e2ac <OnRxData+0xd8>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800e28c:	4b20      	ldr	r3, [pc, #128]	; (800e310 <OnRxData+0x13c>)
 800e28e:	2200      	movs	r2, #0
 800e290:	2100      	movs	r1, #0
 800e292:	2003      	movs	r0, #3
 800e294:	f011 fe84 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800e298:	2200      	movs	r2, #0
 800e29a:	2120      	movs	r1, #32
 800e29c:	481b      	ldr	r0, [pc, #108]	; (800e30c <OnRxData+0x138>)
 800e29e:	f7f9 fd30 	bl	8007d02 <HAL_GPIO_WritePin>
              break;
 800e2a2:	e003      	b.n	800e2ac <OnRxData+0xd8>

            default:

              break;
 800e2a4:	bf00      	nop
 800e2a6:	e002      	b.n	800e2ae <OnRxData+0xda>
              break;
 800e2a8:	bf00      	nop
 800e2aa:	e000      	b.n	800e2ae <OnRxData+0xda>
              break;
 800e2ac:	bf00      	nop
          }
        }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	7c1b      	ldrb	r3, [r3, #16]
 800e2b2:	2b05      	cmp	r3, #5
 800e2b4:	d81f      	bhi.n	800e2f6 <OnRxData+0x122>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	68db      	ldr	r3, [r3, #12]
 800e2ba:	7bfa      	ldrb	r2, [r7, #15]
 800e2bc:	6839      	ldr	r1, [r7, #0]
 800e2be:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800e2c2:	460c      	mov	r4, r1
 800e2c4:	6839      	ldr	r1, [r7, #0]
 800e2c6:	7c09      	ldrb	r1, [r1, #16]
 800e2c8:	4608      	mov	r0, r1
 800e2ca:	4912      	ldr	r1, [pc, #72]	; (800e314 <OnRxData+0x140>)
 800e2cc:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800e2d0:	6838      	ldr	r0, [r7, #0]
 800e2d2:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800e2d6:	4605      	mov	r5, r0
 800e2d8:	6838      	ldr	r0, [r7, #0]
 800e2da:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800e2de:	9005      	str	r0, [sp, #20]
 800e2e0:	9504      	str	r5, [sp, #16]
 800e2e2:	9103      	str	r1, [sp, #12]
 800e2e4:	9402      	str	r4, [sp, #8]
 800e2e6:	9201      	str	r2, [sp, #4]
 800e2e8:	9300      	str	r3, [sp, #0]
 800e2ea:	4b0b      	ldr	r3, [pc, #44]	; (800e318 <OnRxData+0x144>)
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	2100      	movs	r1, #0
 800e2f0:	2003      	movs	r0, #3
 800e2f2:	f011 fe55 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800e2f6:	bf00      	nop
 800e2f8:	3710      	adds	r7, #16
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bdb0      	pop	{r4, r5, r7, pc}
 800e2fe:	bf00      	nop
 800e300:	200006e4 	.word	0x200006e4
 800e304:	200006ca 	.word	0x200006ca
 800e308:	080210f8 	.word	0x080210f8
 800e30c:	48000400 	.word	0x48000400
 800e310:	08021104 	.word	0x08021104
 800e314:	20000008 	.word	0x20000008
 800e318:	08021110 	.word	0x08021110

0800e31c <SendTxData>:

static void SendTxData(void)
{
 800e31c:	b590      	push	{r4, r7, lr}
 800e31e:	b093      	sub	sp, #76	; 0x4c
 800e320:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800e322:	23ff      	movs	r3, #255	; 0xff
 800e324:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint8_t batteryLevel = GetBatteryLevel();
 800e328:	f7f4 f972 	bl	8002610 <GetBatteryLevel>
 800e32c:	4603      	mov	r3, r0
 800e32e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800e332:	2300      	movs	r3, #0
 800e334:	63fb      	str	r3, [r7, #60]	; 0x3c

  uint16_t pressure = 0;
 800e336:	2300      	movs	r3, #0
 800e338:	86bb      	strh	r3, [r7, #52]	; 0x34
  int16_t temperature = 0;
 800e33a:	2300      	movs	r3, #0
 800e33c:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t humidity = 0;
 800e33e:	2300      	movs	r3, #0
 800e340:	863b      	strh	r3, [r7, #48]	; 0x30
  uint32_t i = 0;
 800e342:	2300      	movs	r3, #0
 800e344:	63bb      	str	r3, [r7, #56]	; 0x38
  int32_t latitude = 0;
 800e346:	2300      	movs	r3, #0
 800e348:	62fb      	str	r3, [r7, #44]	; 0x2c
  int32_t longitude = 0;
 800e34a:	2300      	movs	r3, #0
 800e34c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t altitudeGps = 0;
 800e34e:	2300      	movs	r3, #0
 800e350:	84fb      	strh	r3, [r7, #38]	; 0x26

  EnvSensors_Read(&sensor_data);
 800e352:	1d3b      	adds	r3, r7, #4
 800e354:	4618      	mov	r0, r3
 800e356:	f7f4 facd 	bl	80028f4 <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800e35a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e35e:	9300      	str	r3, [sp, #0]
 800e360:	4b72      	ldr	r3, [pc, #456]	; (800e52c <SendTxData+0x210>)
 800e362:	2201      	movs	r2, #1
 800e364:	2100      	movs	r1, #0
 800e366:	2002      	movs	r0, #2
 800e368:	f011 fe1a 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
  float temperature_f = sensor_data.temperature*100;
 800e36c:	68bb      	ldr	r3, [r7, #8]
 800e36e:	4970      	ldr	r1, [pc, #448]	; (800e530 <SendTxData+0x214>)
 800e370:	4618      	mov	r0, r3
 800e372:	f7f2 fd39 	bl	8000de8 <__aeabi_fmul>
 800e376:	4603      	mov	r3, r0
 800e378:	623b      	str	r3, [r7, #32]
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d.%02d [C]\r\n", (int)temperature_f / 100, (int)temperature_f % 100);
 800e37a:	6a38      	ldr	r0, [r7, #32]
 800e37c:	f7f2 fe84 	bl	8001088 <__aeabi_f2iz>
 800e380:	4603      	mov	r3, r0
 800e382:	4a6c      	ldr	r2, [pc, #432]	; (800e534 <SendTxData+0x218>)
 800e384:	fb82 1203 	smull	r1, r2, r2, r3
 800e388:	1152      	asrs	r2, r2, #5
 800e38a:	17db      	asrs	r3, r3, #31
 800e38c:	1ad4      	subs	r4, r2, r3
 800e38e:	6a38      	ldr	r0, [r7, #32]
 800e390:	f7f2 fe7a 	bl	8001088 <__aeabi_f2iz>
 800e394:	4602      	mov	r2, r0
 800e396:	4b67      	ldr	r3, [pc, #412]	; (800e534 <SendTxData+0x218>)
 800e398:	fb83 1302 	smull	r1, r3, r3, r2
 800e39c:	1159      	asrs	r1, r3, #5
 800e39e:	17d3      	asrs	r3, r2, #31
 800e3a0:	1acb      	subs	r3, r1, r3
 800e3a2:	2164      	movs	r1, #100	; 0x64
 800e3a4:	fb01 f303 	mul.w	r3, r1, r3
 800e3a8:	1ad3      	subs	r3, r2, r3
 800e3aa:	9301      	str	r3, [sp, #4]
 800e3ac:	9400      	str	r4, [sp, #0]
 800e3ae:	4b62      	ldr	r3, [pc, #392]	; (800e538 <SendTxData+0x21c>)
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	2100      	movs	r1, #0
 800e3b4:	2002      	movs	r0, #2
 800e3b6:	f011 fdf3 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
  temperature = (uint16_t)temperature_f;
 800e3ba:	6a38      	ldr	r0, [r7, #32]
 800e3bc:	f7f2 fe8a 	bl	80010d4 <__aeabi_f2uiz>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	b29b      	uxth	r3, r3
 800e3c4:	867b      	strh	r3, [r7, #50]	; 0x32

  float pressure_f = sensor_data.pressure*100;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	4959      	ldr	r1, [pc, #356]	; (800e530 <SendTxData+0x214>)
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f7f2 fd0c 	bl	8000de8 <__aeabi_fmul>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	61fb      	str	r3, [r7, #28]
  APP_LOG(TS_ON, VLEVEL_M, "pressure: %d.%02d [Pa]\r\n", (int)pressure_f / 100, (int)pressure_f % 100);
 800e3d4:	69f8      	ldr	r0, [r7, #28]
 800e3d6:	f7f2 fe57 	bl	8001088 <__aeabi_f2iz>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	4a55      	ldr	r2, [pc, #340]	; (800e534 <SendTxData+0x218>)
 800e3de:	fb82 1203 	smull	r1, r2, r2, r3
 800e3e2:	1152      	asrs	r2, r2, #5
 800e3e4:	17db      	asrs	r3, r3, #31
 800e3e6:	1ad4      	subs	r4, r2, r3
 800e3e8:	69f8      	ldr	r0, [r7, #28]
 800e3ea:	f7f2 fe4d 	bl	8001088 <__aeabi_f2iz>
 800e3ee:	4602      	mov	r2, r0
 800e3f0:	4b50      	ldr	r3, [pc, #320]	; (800e534 <SendTxData+0x218>)
 800e3f2:	fb83 1302 	smull	r1, r3, r3, r2
 800e3f6:	1159      	asrs	r1, r3, #5
 800e3f8:	17d3      	asrs	r3, r2, #31
 800e3fa:	1acb      	subs	r3, r1, r3
 800e3fc:	2164      	movs	r1, #100	; 0x64
 800e3fe:	fb01 f303 	mul.w	r3, r1, r3
 800e402:	1ad3      	subs	r3, r2, r3
 800e404:	9301      	str	r3, [sp, #4]
 800e406:	9400      	str	r4, [sp, #0]
 800e408:	4b4c      	ldr	r3, [pc, #304]	; (800e53c <SendTxData+0x220>)
 800e40a:	2201      	movs	r2, #1
 800e40c:	2100      	movs	r1, #0
 800e40e:	2002      	movs	r0, #2
 800e410:	f011 fdc6 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800e414:	4b4a      	ldr	r3, [pc, #296]	; (800e540 <SendTxData+0x224>)
 800e416:	2202      	movs	r2, #2
 800e418:	701a      	strb	r2, [r3, #0]

  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	4949      	ldr	r1, [pc, #292]	; (800e544 <SendTxData+0x228>)
 800e41e:	4618      	mov	r0, r3
 800e420:	f7f2 fce2 	bl	8000de8 <__aeabi_fmul>
 800e424:	4603      	mov	r3, r0
 800e426:	4618      	mov	r0, r3
 800e428:	f7f2 fe54 	bl	80010d4 <__aeabi_f2uiz>
 800e42c:	4603      	mov	r3, r0
 800e42e:	863b      	strh	r3, [r7, #48]	; 0x30
  temperature = (int16_t)(sensor_data.temperature);
 800e430:	68bb      	ldr	r3, [r7, #8]
 800e432:	4618      	mov	r0, r3
 800e434:	f7f2 fe28 	bl	8001088 <__aeabi_f2iz>
 800e438:	4603      	mov	r3, r0
 800e43a:	867b      	strh	r3, [r7, #50]	; 0x32
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	493c      	ldr	r1, [pc, #240]	; (800e530 <SendTxData+0x214>)
 800e440:	4618      	mov	r0, r3
 800e442:	f7f2 fcd1 	bl	8000de8 <__aeabi_fmul>
 800e446:	4603      	mov	r3, r0
 800e448:	493e      	ldr	r1, [pc, #248]	; (800e544 <SendTxData+0x228>)
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7f2 fd80 	bl	8000f50 <__aeabi_fdiv>
 800e450:	4603      	mov	r3, r0
 800e452:	4618      	mov	r0, r3
 800e454:	f7f2 fe3e 	bl	80010d4 <__aeabi_f2uiz>
 800e458:	4603      	mov	r3, r0
 800e45a:	86bb      	strh	r3, [r7, #52]	; 0x34

  AppData.Buffer[i++] = AppLedStateOn;
 800e45c:	4b38      	ldr	r3, [pc, #224]	; (800e540 <SendTxData+0x224>)
 800e45e:	685a      	ldr	r2, [r3, #4]
 800e460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e462:	1c59      	adds	r1, r3, #1
 800e464:	63b9      	str	r1, [r7, #56]	; 0x38
 800e466:	4413      	add	r3, r2
 800e468:	4a37      	ldr	r2, [pc, #220]	; (800e548 <SendTxData+0x22c>)
 800e46a:	7812      	ldrb	r2, [r2, #0]
 800e46c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800e46e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e470:	0a1b      	lsrs	r3, r3, #8
 800e472:	b298      	uxth	r0, r3
 800e474:	4b32      	ldr	r3, [pc, #200]	; (800e540 <SendTxData+0x224>)
 800e476:	685a      	ldr	r2, [r3, #4]
 800e478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47a:	1c59      	adds	r1, r3, #1
 800e47c:	63b9      	str	r1, [r7, #56]	; 0x38
 800e47e:	4413      	add	r3, r2
 800e480:	b2c2      	uxtb	r2, r0
 800e482:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800e484:	4b2e      	ldr	r3, [pc, #184]	; (800e540 <SendTxData+0x224>)
 800e486:	685a      	ldr	r2, [r3, #4]
 800e488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e48a:	1c59      	adds	r1, r3, #1
 800e48c:	63b9      	str	r1, [r7, #56]	; 0x38
 800e48e:	4413      	add	r3, r2
 800e490:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800e492:	b2d2      	uxtb	r2, r2
 800e494:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800e496:	4b2a      	ldr	r3, [pc, #168]	; (800e540 <SendTxData+0x224>)
 800e498:	685a      	ldr	r2, [r3, #4]
 800e49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e49c:	1c59      	adds	r1, r3, #1
 800e49e:	63b9      	str	r1, [r7, #56]	; 0x38
 800e4a0:	4413      	add	r3, r2
 800e4a2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800e4a4:	b2d2      	uxtb	r2, r2
 800e4a6:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800e4a8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e4aa:	0a1b      	lsrs	r3, r3, #8
 800e4ac:	b298      	uxth	r0, r3
 800e4ae:	4b24      	ldr	r3, [pc, #144]	; (800e540 <SendTxData+0x224>)
 800e4b0:	685a      	ldr	r2, [r3, #4]
 800e4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b4:	1c59      	adds	r1, r3, #1
 800e4b6:	63b9      	str	r1, [r7, #56]	; 0x38
 800e4b8:	4413      	add	r3, r2
 800e4ba:	b2c2      	uxtb	r2, r0
 800e4bc:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800e4be:	4b20      	ldr	r3, [pc, #128]	; (800e540 <SendTxData+0x224>)
 800e4c0:	685a      	ldr	r2, [r3, #4]
 800e4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c4:	1c59      	adds	r1, r3, #1
 800e4c6:	63b9      	str	r1, [r7, #56]	; 0x38
 800e4c8:	4413      	add	r3, r2
 800e4ca:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800e4cc:	b2d2      	uxtb	r2, r2
 800e4ce:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800e4d0:	4b1e      	ldr	r3, [pc, #120]	; (800e54c <SendTxData+0x230>)
 800e4d2:	781b      	ldrb	r3, [r3, #0]
 800e4d4:	2b08      	cmp	r3, #8
 800e4d6:	d007      	beq.n	800e4e8 <SendTxData+0x1cc>
 800e4d8:	4b1c      	ldr	r3, [pc, #112]	; (800e54c <SendTxData+0x230>)
 800e4da:	781b      	ldrb	r3, [r3, #0]
 800e4dc:	2b01      	cmp	r3, #1
 800e4de:	d003      	beq.n	800e4e8 <SendTxData+0x1cc>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800e4e0:	4b1a      	ldr	r3, [pc, #104]	; (800e54c <SendTxData+0x230>)
 800e4e2:	781b      	ldrb	r3, [r3, #0]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d133      	bne.n	800e550 <SendTxData+0x234>
  {
    AppData.Buffer[i++] = 0;
 800e4e8:	4b15      	ldr	r3, [pc, #84]	; (800e540 <SendTxData+0x224>)
 800e4ea:	685a      	ldr	r2, [r3, #4]
 800e4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ee:	1c59      	adds	r1, r3, #1
 800e4f0:	63b9      	str	r1, [r7, #56]	; 0x38
 800e4f2:	4413      	add	r3, r2
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800e4f8:	4b11      	ldr	r3, [pc, #68]	; (800e540 <SendTxData+0x224>)
 800e4fa:	685a      	ldr	r2, [r3, #4]
 800e4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4fe:	1c59      	adds	r1, r3, #1
 800e500:	63b9      	str	r1, [r7, #56]	; 0x38
 800e502:	4413      	add	r3, r2
 800e504:	2200      	movs	r2, #0
 800e506:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800e508:	4b0d      	ldr	r3, [pc, #52]	; (800e540 <SendTxData+0x224>)
 800e50a:	685a      	ldr	r2, [r3, #4]
 800e50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e50e:	1c59      	adds	r1, r3, #1
 800e510:	63b9      	str	r1, [r7, #56]	; 0x38
 800e512:	4413      	add	r3, r2
 800e514:	2200      	movs	r2, #0
 800e516:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800e518:	4b09      	ldr	r3, [pc, #36]	; (800e540 <SendTxData+0x224>)
 800e51a:	685a      	ldr	r2, [r3, #4]
 800e51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e51e:	1c59      	adds	r1, r3, #1
 800e520:	63b9      	str	r1, [r7, #56]	; 0x38
 800e522:	4413      	add	r3, r2
 800e524:	2200      	movs	r2, #0
 800e526:	701a      	strb	r2, [r3, #0]
 800e528:	e06e      	b.n	800e608 <SendTxData+0x2ec>
 800e52a:	bf00      	nop
 800e52c:	08021158 	.word	0x08021158
 800e530:	42c80000 	.word	0x42c80000
 800e534:	51eb851f 	.word	0x51eb851f
 800e538:	08021164 	.word	0x08021164
 800e53c:	08021178 	.word	0x08021178
 800e540:	2000008c 	.word	0x2000008c
 800e544:	41200000 	.word	0x41200000
 800e548:	200006ca 	.word	0x200006ca
 800e54c:	20000070 	.word	0x20000070
  }
  else
  {
    latitude = sensor_data.latitude;
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	62fb      	str	r3, [r7, #44]	; 0x2c
    longitude = sensor_data.longitude;
 800e554:	697b      	ldr	r3, [r7, #20]
 800e556:	62bb      	str	r3, [r7, #40]	; 0x28

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800e558:	4b55      	ldr	r3, [pc, #340]	; (800e6b0 <SendTxData+0x394>)
 800e55a:	685a      	ldr	r2, [r3, #4]
 800e55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e55e:	1c59      	adds	r1, r3, #1
 800e560:	63b9      	str	r1, [r7, #56]	; 0x38
 800e562:	18d4      	adds	r4, r2, r3
 800e564:	f7f4 f854 	bl	8002610 <GetBatteryLevel>
 800e568:	4603      	mov	r3, r0
 800e56a:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800e56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e56e:	1418      	asrs	r0, r3, #16
 800e570:	4b4f      	ldr	r3, [pc, #316]	; (800e6b0 <SendTxData+0x394>)
 800e572:	685a      	ldr	r2, [r3, #4]
 800e574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e576:	1c59      	adds	r1, r3, #1
 800e578:	63b9      	str	r1, [r7, #56]	; 0x38
 800e57a:	4413      	add	r3, r2
 800e57c:	b2c2      	uxtb	r2, r0
 800e57e:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800e580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e582:	1218      	asrs	r0, r3, #8
 800e584:	4b4a      	ldr	r3, [pc, #296]	; (800e6b0 <SendTxData+0x394>)
 800e586:	685a      	ldr	r2, [r3, #4]
 800e588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e58a:	1c59      	adds	r1, r3, #1
 800e58c:	63b9      	str	r1, [r7, #56]	; 0x38
 800e58e:	4413      	add	r3, r2
 800e590:	b2c2      	uxtb	r2, r0
 800e592:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800e594:	4b46      	ldr	r3, [pc, #280]	; (800e6b0 <SendTxData+0x394>)
 800e596:	685a      	ldr	r2, [r3, #4]
 800e598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e59a:	1c59      	adds	r1, r3, #1
 800e59c:	63b9      	str	r1, [r7, #56]	; 0x38
 800e59e:	4413      	add	r3, r2
 800e5a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5a2:	b2d2      	uxtb	r2, r2
 800e5a4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800e5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a8:	1418      	asrs	r0, r3, #16
 800e5aa:	4b41      	ldr	r3, [pc, #260]	; (800e6b0 <SendTxData+0x394>)
 800e5ac:	685a      	ldr	r2, [r3, #4]
 800e5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b0:	1c59      	adds	r1, r3, #1
 800e5b2:	63b9      	str	r1, [r7, #56]	; 0x38
 800e5b4:	4413      	add	r3, r2
 800e5b6:	b2c2      	uxtb	r2, r0
 800e5b8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800e5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5bc:	1218      	asrs	r0, r3, #8
 800e5be:	4b3c      	ldr	r3, [pc, #240]	; (800e6b0 <SendTxData+0x394>)
 800e5c0:	685a      	ldr	r2, [r3, #4]
 800e5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c4:	1c59      	adds	r1, r3, #1
 800e5c6:	63b9      	str	r1, [r7, #56]	; 0x38
 800e5c8:	4413      	add	r3, r2
 800e5ca:	b2c2      	uxtb	r2, r0
 800e5cc:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800e5ce:	4b38      	ldr	r3, [pc, #224]	; (800e6b0 <SendTxData+0x394>)
 800e5d0:	685a      	ldr	r2, [r3, #4]
 800e5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d4:	1c59      	adds	r1, r3, #1
 800e5d6:	63b9      	str	r1, [r7, #56]	; 0x38
 800e5d8:	4413      	add	r3, r2
 800e5da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5dc:	b2d2      	uxtb	r2, r2
 800e5de:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800e5e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e5e2:	0a1b      	lsrs	r3, r3, #8
 800e5e4:	b298      	uxth	r0, r3
 800e5e6:	4b32      	ldr	r3, [pc, #200]	; (800e6b0 <SendTxData+0x394>)
 800e5e8:	685a      	ldr	r2, [r3, #4]
 800e5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ec:	1c59      	adds	r1, r3, #1
 800e5ee:	63b9      	str	r1, [r7, #56]	; 0x38
 800e5f0:	4413      	add	r3, r2
 800e5f2:	b2c2      	uxtb	r2, r0
 800e5f4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800e5f6:	4b2e      	ldr	r3, [pc, #184]	; (800e6b0 <SendTxData+0x394>)
 800e5f8:	685a      	ldr	r2, [r3, #4]
 800e5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5fc:	1c59      	adds	r1, r3, #1
 800e5fe:	63b9      	str	r1, [r7, #56]	; 0x38
 800e600:	4413      	add	r3, r2
 800e602:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e604:	b2d2      	uxtb	r2, r2
 800e606:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800e608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e60a:	b2da      	uxtb	r2, r3
 800e60c:	4b28      	ldr	r3, [pc, #160]	; (800e6b0 <SendTxData+0x394>)
 800e60e:	705a      	strb	r2, [r3, #1]


  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800e610:	4b28      	ldr	r3, [pc, #160]	; (800e6b4 <SendTxData+0x398>)
 800e612:	7a5b      	ldrb	r3, [r3, #9]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d007      	beq.n	800e628 <SendTxData+0x30c>
 800e618:	f002 fa62 	bl	8010ae0 <LmHandlerJoinStatus>
 800e61c:	4603      	mov	r3, r0
 800e61e:	2b01      	cmp	r3, #1
 800e620:	d102      	bne.n	800e628 <SendTxData+0x30c>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800e622:	4824      	ldr	r0, [pc, #144]	; (800e6b4 <SendTxData+0x398>)
 800e624:	f011 fab2 	bl	801fb8c <UTIL_TIMER_Stop>
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800e628:	4b23      	ldr	r3, [pc, #140]	; (800e6b8 <SendTxData+0x39c>)
 800e62a:	78db      	ldrb	r3, [r3, #3]
 800e62c:	2200      	movs	r2, #0
 800e62e:	4619      	mov	r1, r3
 800e630:	481f      	ldr	r0, [pc, #124]	; (800e6b0 <SendTxData+0x394>)
 800e632:	f002 fa71 	bl	8010b18 <LmHandlerSend>
 800e636:	4603      	mov	r3, r0
 800e638:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (LORAMAC_HANDLER_SUCCESS == status)
 800e63c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e640:	2b00      	cmp	r3, #0
 800e642:	d106      	bne.n	800e652 <SendTxData+0x336>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800e644:	4b1d      	ldr	r3, [pc, #116]	; (800e6bc <SendTxData+0x3a0>)
 800e646:	2201      	movs	r2, #1
 800e648:	2100      	movs	r1, #0
 800e64a:	2001      	movs	r0, #1
 800e64c:	f011 fca8 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
 800e650:	e016      	b.n	800e680 <SendTxData+0x364>
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800e652:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800e656:	f113 0f06 	cmn.w	r3, #6
 800e65a:	d111      	bne.n	800e680 <SendTxData+0x364>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800e65c:	f002 f994 	bl	8010988 <LmHandlerGetDutyCycleWaitTime>
 800e660:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (nextTxIn > 0)
 800e662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e664:	2b00      	cmp	r3, #0
 800e666:	d00b      	beq.n	800e680 <SendTxData+0x364>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800e668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e66a:	4a15      	ldr	r2, [pc, #84]	; (800e6c0 <SendTxData+0x3a4>)
 800e66c:	fba2 2303 	umull	r2, r3, r2, r3
 800e670:	099b      	lsrs	r3, r3, #6
 800e672:	9300      	str	r3, [sp, #0]
 800e674:	4b13      	ldr	r3, [pc, #76]	; (800e6c4 <SendTxData+0x3a8>)
 800e676:	2201      	movs	r2, #1
 800e678:	2100      	movs	r1, #0
 800e67a:	2001      	movs	r0, #1
 800e67c:	f011 fc90 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800e680:	4b11      	ldr	r3, [pc, #68]	; (800e6c8 <SendTxData+0x3ac>)
 800e682:	781b      	ldrb	r3, [r3, #0]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d10f      	bne.n	800e6a8 <SendTxData+0x38c>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800e688:	4810      	ldr	r0, [pc, #64]	; (800e6cc <SendTxData+0x3b0>)
 800e68a:	f011 fa7f 	bl	801fb8c <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800e68e:	4b10      	ldr	r3, [pc, #64]	; (800e6d0 <SendTxData+0x3b4>)
 800e690:	681a      	ldr	r2, [r3, #0]
 800e692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e694:	4293      	cmp	r3, r2
 800e696:	bf38      	it	cc
 800e698:	4613      	movcc	r3, r2
 800e69a:	4619      	mov	r1, r3
 800e69c:	480b      	ldr	r0, [pc, #44]	; (800e6cc <SendTxData+0x3b0>)
 800e69e:	f011 fae5 	bl	801fc6c <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800e6a2:	480a      	ldr	r0, [pc, #40]	; (800e6cc <SendTxData+0x3b0>)
 800e6a4:	f011 fa04 	bl	801fab0 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800e6a8:	bf00      	nop
 800e6aa:	3744      	adds	r7, #68	; 0x44
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd90      	pop	{r4, r7, pc}
 800e6b0:	2000008c 	.word	0x2000008c
 800e6b4:	200006fc 	.word	0x200006fc
 800e6b8:	20000070 	.word	0x20000070
 800e6bc:	08021194 	.word	0x08021194
 800e6c0:	10624dd3 	.word	0x10624dd3
 800e6c4:	080211a4 	.word	0x080211a4
 800e6c8:	200005a4 	.word	0x200005a4
 800e6cc:	200005a8 	.word	0x200005a8
 800e6d0:	20000088 	.word	0x20000088

0800e6d4 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b082      	sub	sp, #8
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */
	APP_LOG(TS_ON, VLEVEL_M, "starting TX timer\r\n");
 800e6dc:	4b08      	ldr	r3, [pc, #32]	; (800e700 <OnTxTimerEvent+0x2c>)
 800e6de:	2201      	movs	r2, #1
 800e6e0:	2100      	movs	r1, #0
 800e6e2:	2002      	movs	r0, #2
 800e6e4:	f011 fc5c 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800e6e8:	2100      	movs	r1, #0
 800e6ea:	2002      	movs	r0, #2
 800e6ec:	f011 f908 	bl	801f900 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800e6f0:	4804      	ldr	r0, [pc, #16]	; (800e704 <OnTxTimerEvent+0x30>)
 800e6f2:	f011 f9dd 	bl	801fab0 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800e6f6:	bf00      	nop
 800e6f8:	3708      	adds	r7, #8
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}
 800e6fe:	bf00      	nop
 800e700:	080211c4 	.word	0x080211c4
 800e704:	200005a8 	.word	0x200005a8

0800e708 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{ }
 800e708:	b480      	push	{r7}
 800e70a:	b083      	sub	sp, #12
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	bf00      	nop
 800e712:	370c      	adds	r7, #12
 800e714:	46bd      	mov	sp, r7
 800e716:	bc80      	pop	{r7}
 800e718:	4770      	bx	lr

0800e71a <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{ }
 800e71a:	b480      	push	{r7}
 800e71c:	b083      	sub	sp, #12
 800e71e:	af00      	add	r7, sp, #0
 800e720:	6078      	str	r0, [r7, #4]
 800e722:	bf00      	nop
 800e724:	370c      	adds	r7, #12
 800e726:	46bd      	mov	sp, r7
 800e728:	bc80      	pop	{r7}
 800e72a:	4770      	bx	lr

0800e72c <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{ }
 800e72c:	b480      	push	{r7}
 800e72e:	b083      	sub	sp, #12
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	bf00      	nop
 800e736:	370c      	adds	r7, #12
 800e738:	46bd      	mov	sp, r7
 800e73a:	bc80      	pop	{r7}
 800e73c:	4770      	bx	lr
	...

0800e740 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b086      	sub	sp, #24
 800e744:	af04      	add	r7, sp, #16
 800e746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d041      	beq.n	800e7d2 <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	781b      	ldrb	r3, [r3, #0]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d03d      	beq.n	800e7d2 <OnTxData+0x92>
    {
      UTIL_TIMER_Start(&TxLedTimer);
 800e756:	4821      	ldr	r0, [pc, #132]	; (800e7dc <OnTxData+0x9c>)
 800e758:	f011 f9aa 	bl	801fab0 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800e75c:	4b20      	ldr	r3, [pc, #128]	; (800e7e0 <OnTxData+0xa0>)
 800e75e:	2200      	movs	r2, #0
 800e760:	2100      	movs	r1, #0
 800e762:	2002      	movs	r0, #2
 800e764:	f011 fc1c 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_M, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	68db      	ldr	r3, [r3, #12]
 800e76c:	687a      	ldr	r2, [r7, #4]
 800e76e:	7c12      	ldrb	r2, [r2, #16]
 800e770:	4611      	mov	r1, r2
 800e772:	687a      	ldr	r2, [r7, #4]
 800e774:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800e778:	4610      	mov	r0, r2
 800e77a:	687a      	ldr	r2, [r7, #4]
 800e77c:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800e780:	9203      	str	r2, [sp, #12]
 800e782:	9002      	str	r0, [sp, #8]
 800e784:	9101      	str	r1, [sp, #4]
 800e786:	9300      	str	r3, [sp, #0]
 800e788:	4b16      	ldr	r3, [pc, #88]	; (800e7e4 <OnTxData+0xa4>)
 800e78a:	2200      	movs	r2, #0
 800e78c:	2100      	movs	r1, #0
 800e78e:	2002      	movs	r0, #2
 800e790:	f011 fc06 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_M, " | MSG TYPE:");
 800e794:	4b14      	ldr	r3, [pc, #80]	; (800e7e8 <OnTxData+0xa8>)
 800e796:	2200      	movs	r2, #0
 800e798:	2100      	movs	r1, #0
 800e79a:	2002      	movs	r0, #2
 800e79c:	f011 fc00 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	7a1b      	ldrb	r3, [r3, #8]
 800e7a4:	2b01      	cmp	r3, #1
 800e7a6:	d10e      	bne.n	800e7c6 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	7a5b      	ldrb	r3, [r3, #9]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d001      	beq.n	800e7b4 <OnTxData+0x74>
 800e7b0:	4b0e      	ldr	r3, [pc, #56]	; (800e7ec <OnTxData+0xac>)
 800e7b2:	e000      	b.n	800e7b6 <OnTxData+0x76>
 800e7b4:	4b0e      	ldr	r3, [pc, #56]	; (800e7f0 <OnTxData+0xb0>)
 800e7b6:	9300      	str	r3, [sp, #0]
 800e7b8:	4b0e      	ldr	r3, [pc, #56]	; (800e7f4 <OnTxData+0xb4>)
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	2100      	movs	r1, #0
 800e7be:	2002      	movs	r0, #2
 800e7c0:	f011 fbee 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_M, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800e7c4:	e005      	b.n	800e7d2 <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_M, "UNCONFIRMED\r\n");
 800e7c6:	4b0c      	ldr	r3, [pc, #48]	; (800e7f8 <OnTxData+0xb8>)
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	2100      	movs	r1, #0
 800e7cc:	2002      	movs	r0, #2
 800e7ce:	f011 fbe7 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
}
 800e7d2:	bf00      	nop
 800e7d4:	3708      	adds	r7, #8
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}
 800e7da:	bf00      	nop
 800e7dc:	200006cc 	.word	0x200006cc
 800e7e0:	080211d8 	.word	0x080211d8
 800e7e4:	0802120c 	.word	0x0802120c
 800e7e8:	08021240 	.word	0x08021240
 800e7ec:	08021250 	.word	0x08021250
 800e7f0:	08021254 	.word	0x08021254
 800e7f4:	0802125c 	.word	0x0802125c
 800e7f8:	08021270 	.word	0x08021270

0800e7fc <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b082      	sub	sp, #8
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d039      	beq.n	800e87e <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d11e      	bne.n	800e852 <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800e814:	2100      	movs	r1, #0
 800e816:	2004      	movs	r0, #4
 800e818:	f011 f872 	bl	801f900 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800e81c:	481a      	ldr	r0, [pc, #104]	; (800e888 <OnJoinRequest+0x8c>)
 800e81e:	f011 f9b5 	bl	801fb8c <UTIL_TIMER_Stop>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800e822:	4b1a      	ldr	r3, [pc, #104]	; (800e88c <OnJoinRequest+0x90>)
 800e824:	2200      	movs	r2, #0
 800e826:	2100      	movs	r1, #0
 800e828:	2002      	movs	r0, #2
 800e82a:	f011 fbb9 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	79db      	ldrb	r3, [r3, #7]
 800e832:	2b01      	cmp	r3, #1
 800e834:	d106      	bne.n	800e844 <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800e836:	4b16      	ldr	r3, [pc, #88]	; (800e890 <OnJoinRequest+0x94>)
 800e838:	2200      	movs	r2, #0
 800e83a:	2100      	movs	r1, #0
 800e83c:	2002      	movs	r0, #2
 800e83e:	f011 fbaf 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800e842:	e01c      	b.n	800e87e <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800e844:	4b13      	ldr	r3, [pc, #76]	; (800e894 <OnJoinRequest+0x98>)
 800e846:	2200      	movs	r2, #0
 800e848:	2100      	movs	r1, #0
 800e84a:	2002      	movs	r0, #2
 800e84c:	f011 fba8 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
}
 800e850:	e015      	b.n	800e87e <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800e852:	4b11      	ldr	r3, [pc, #68]	; (800e898 <OnJoinRequest+0x9c>)
 800e854:	2200      	movs	r2, #0
 800e856:	2100      	movs	r1, #0
 800e858:	2002      	movs	r0, #2
 800e85a:	f011 fba1 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	79db      	ldrb	r3, [r3, #7]
 800e862:	2b02      	cmp	r3, #2
 800e864:	d10b      	bne.n	800e87e <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800e866:	4b0d      	ldr	r3, [pc, #52]	; (800e89c <OnJoinRequest+0xa0>)
 800e868:	2200      	movs	r2, #0
 800e86a:	2100      	movs	r1, #0
 800e86c:	2002      	movs	r0, #2
 800e86e:	f011 fb97 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800e872:	4b0b      	ldr	r3, [pc, #44]	; (800e8a0 <OnJoinRequest+0xa4>)
 800e874:	781b      	ldrb	r3, [r3, #0]
 800e876:	2101      	movs	r1, #1
 800e878:	4618      	mov	r0, r3
 800e87a:	f002 f88f 	bl	801099c <LmHandlerJoin>
}
 800e87e:	bf00      	nop
 800e880:	3708      	adds	r7, #8
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}
 800e886:	bf00      	nop
 800e888:	200006fc 	.word	0x200006fc
 800e88c:	08021280 	.word	0x08021280
 800e890:	08021298 	.word	0x08021298
 800e894:	080212b8 	.word	0x080212b8
 800e898:	080212d8 	.word	0x080212d8
 800e89c:	080212f4 	.word	0x080212f4
 800e8a0:	20000020 	.word	0x20000020

0800e8a4 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800e8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8a6:	b093      	sub	sp, #76	; 0x4c
 800e8a8:	af0c      	add	r7, sp, #48	; 0x30
 800e8aa:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d056      	beq.n	800e960 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	785b      	ldrb	r3, [r3, #1]
 800e8b6:	2b02      	cmp	r3, #2
 800e8b8:	d008      	beq.n	800e8cc <OnBeaconStatusChange+0x28>
 800e8ba:	2b03      	cmp	r3, #3
 800e8bc:	d049      	beq.n	800e952 <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800e8be:	4b2a      	ldr	r3, [pc, #168]	; (800e968 <OnBeaconStatusChange+0xc4>)
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	2100      	movs	r1, #0
 800e8c4:	2002      	movs	r0, #2
 800e8c6:	f011 fb6b 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800e8ca:	e049      	b.n	800e960 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800e8cc:	697b      	ldr	r3, [r7, #20]
 800e8ce:	7c1b      	ldrb	r3, [r3, #16]
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	697b      	ldr	r3, [r7, #20]
 800e8d4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800e8d8:	461c      	mov	r4, r3
 800e8da:	697b      	ldr	r3, [r7, #20]
 800e8dc:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800e8e0:	461d      	mov	r5, r3
 800e8e2:	697b      	ldr	r3, [r7, #20]
 800e8e4:	68db      	ldr	r3, [r3, #12]
 800e8e6:	697a      	ldr	r2, [r7, #20]
 800e8e8:	6852      	ldr	r2, [r2, #4]
 800e8ea:	6979      	ldr	r1, [r7, #20]
 800e8ec:	7d89      	ldrb	r1, [r1, #22]
 800e8ee:	460e      	mov	r6, r1
 800e8f0:	6979      	ldr	r1, [r7, #20]
 800e8f2:	7dc9      	ldrb	r1, [r1, #23]
 800e8f4:	6139      	str	r1, [r7, #16]
 800e8f6:	6979      	ldr	r1, [r7, #20]
 800e8f8:	7e09      	ldrb	r1, [r1, #24]
 800e8fa:	60f9      	str	r1, [r7, #12]
 800e8fc:	6979      	ldr	r1, [r7, #20]
 800e8fe:	7e49      	ldrb	r1, [r1, #25]
 800e900:	60b9      	str	r1, [r7, #8]
 800e902:	6979      	ldr	r1, [r7, #20]
 800e904:	7e89      	ldrb	r1, [r1, #26]
 800e906:	6079      	str	r1, [r7, #4]
 800e908:	6979      	ldr	r1, [r7, #20]
 800e90a:	7ec9      	ldrb	r1, [r1, #27]
 800e90c:	6039      	str	r1, [r7, #0]
 800e90e:	6979      	ldr	r1, [r7, #20]
 800e910:	7f09      	ldrb	r1, [r1, #28]
 800e912:	910b      	str	r1, [sp, #44]	; 0x2c
 800e914:	f8d7 c000 	ldr.w	ip, [r7]
 800e918:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800e91c:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800e920:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800e924:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800e928:	f8cd c020 	str.w	ip, [sp, #32]
 800e92c:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800e930:	f8cd c01c 	str.w	ip, [sp, #28]
 800e934:	6939      	ldr	r1, [r7, #16]
 800e936:	9106      	str	r1, [sp, #24]
 800e938:	9605      	str	r6, [sp, #20]
 800e93a:	9204      	str	r2, [sp, #16]
 800e93c:	9303      	str	r3, [sp, #12]
 800e93e:	9502      	str	r5, [sp, #8]
 800e940:	9401      	str	r4, [sp, #4]
 800e942:	9000      	str	r0, [sp, #0]
 800e944:	4b09      	ldr	r3, [pc, #36]	; (800e96c <OnBeaconStatusChange+0xc8>)
 800e946:	2200      	movs	r2, #0
 800e948:	2100      	movs	r1, #0
 800e94a:	2002      	movs	r0, #2
 800e94c:	f011 fb28 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800e950:	e006      	b.n	800e960 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800e952:	4b07      	ldr	r3, [pc, #28]	; (800e970 <OnBeaconStatusChange+0xcc>)
 800e954:	2200      	movs	r2, #0
 800e956:	2100      	movs	r1, #0
 800e958:	2002      	movs	r0, #2
 800e95a:	f011 fb21 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800e95e:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800e960:	bf00      	nop
 800e962:	371c      	adds	r7, #28
 800e964:	46bd      	mov	sp, r7
 800e966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e968:	08021318 	.word	0x08021318
 800e96c:	08021330 	.word	0x08021330
 800e970:	080213a4 	.word	0x080213a4

0800e974 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800e974:	b480      	push	{r7}
 800e976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800e978:	bf00      	nop
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bc80      	pop	{r7}
 800e97e:	4770      	bx	lr

0800e980 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b084      	sub	sp, #16
 800e984:	af02      	add	r7, sp, #8
 800e986:	4603      	mov	r3, r0
 800e988:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800e98a:	79fb      	ldrb	r3, [r7, #7]
 800e98c:	4a06      	ldr	r2, [pc, #24]	; (800e9a8 <OnClassChange+0x28>)
 800e98e:	5cd3      	ldrb	r3, [r2, r3]
 800e990:	9300      	str	r3, [sp, #0]
 800e992:	4b06      	ldr	r3, [pc, #24]	; (800e9ac <OnClassChange+0x2c>)
 800e994:	2200      	movs	r2, #0
 800e996:	2100      	movs	r1, #0
 800e998:	2002      	movs	r0, #2
 800e99a:	f011 fb01 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800e99e:	bf00      	nop
 800e9a0:	3708      	adds	r7, #8
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}
 800e9a6:	bf00      	nop
 800e9a8:	080213e0 	.word	0x080213e0
 800e9ac:	080213c4 	.word	0x080213c4

0800e9b0 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800e9b4:	2100      	movs	r1, #0
 800e9b6:	2001      	movs	r0, #1
 800e9b8:	f010 ffa2 	bl	801f900 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800e9bc:	bf00      	nop
 800e9be:	bd80      	pop	{r7, pc}

0800e9c0 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b082      	sub	sp, #8
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800e9c8:	4a0d      	ldr	r2, [pc, #52]	; (800ea00 <OnTxPeriodicityChanged+0x40>)
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800e9ce:	4b0c      	ldr	r3, [pc, #48]	; (800ea00 <OnTxPeriodicityChanged+0x40>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d103      	bne.n	800e9de <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800e9d6:	4b0a      	ldr	r3, [pc, #40]	; (800ea00 <OnTxPeriodicityChanged+0x40>)
 800e9d8:	f242 7210 	movw	r2, #10000	; 0x2710
 800e9dc:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800e9de:	4809      	ldr	r0, [pc, #36]	; (800ea04 <OnTxPeriodicityChanged+0x44>)
 800e9e0:	f011 f8d4 	bl	801fb8c <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800e9e4:	4b06      	ldr	r3, [pc, #24]	; (800ea00 <OnTxPeriodicityChanged+0x40>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	4806      	ldr	r0, [pc, #24]	; (800ea04 <OnTxPeriodicityChanged+0x44>)
 800e9ec:	f011 f93e 	bl	801fc6c <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800e9f0:	4804      	ldr	r0, [pc, #16]	; (800ea04 <OnTxPeriodicityChanged+0x44>)
 800e9f2:	f011 f85d 	bl	801fab0 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800e9f6:	bf00      	nop
 800e9f8:	3708      	adds	r7, #8
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}
 800e9fe:	bf00      	nop
 800ea00:	20000088 	.word	0x20000088
 800ea04:	200005a8 	.word	0x200005a8

0800ea08 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b083      	sub	sp, #12
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	4603      	mov	r3, r0
 800ea10:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800ea12:	4a04      	ldr	r2, [pc, #16]	; (800ea24 <OnTxFrameCtrlChanged+0x1c>)
 800ea14:	79fb      	ldrb	r3, [r7, #7]
 800ea16:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800ea18:	bf00      	nop
 800ea1a:	370c      	adds	r7, #12
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bc80      	pop	{r7}
 800ea20:	4770      	bx	lr
 800ea22:	bf00      	nop
 800ea24:	20000070 	.word	0x20000070

0800ea28 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800ea28:	b480      	push	{r7}
 800ea2a:	b083      	sub	sp, #12
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	4603      	mov	r3, r0
 800ea30:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800ea32:	4a04      	ldr	r2, [pc, #16]	; (800ea44 <OnPingSlotPeriodicityChanged+0x1c>)
 800ea34:	79fb      	ldrb	r3, [r7, #7]
 800ea36:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800ea38:	bf00      	nop
 800ea3a:	370c      	adds	r7, #12
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bc80      	pop	{r7}
 800ea40:	4770      	bx	lr
 800ea42:	bf00      	nop
 800ea44:	20000070 	.word	0x20000070

0800ea48 <OnSystemReset>:

static void OnSystemReset(void)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800ea4c:	f002 fd9f 	bl	801158e <LmHandlerHalt>
 800ea50:	4603      	mov	r3, r0
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d106      	bne.n	800ea64 <OnSystemReset+0x1c>
 800ea56:	f002 f843 	bl	8010ae0 <LmHandlerJoinStatus>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	2b01      	cmp	r3, #1
 800ea5e:	d101      	bne.n	800ea64 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800ea60:	f7ff fa7c 	bl	800df5c <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800ea64:	bf00      	nop
 800ea66:	bd80      	pop	{r7, pc}

0800ea68 <StopJoin>:

static void StopJoin(void)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StopJoin_1 */

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800ea6c:	4817      	ldr	r0, [pc, #92]	; (800eacc <StopJoin+0x64>)
 800ea6e:	f011 f88d 	bl	801fb8c <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800ea72:	f002 fd7f 	bl	8011574 <LmHandlerStop>
 800ea76:	4603      	mov	r3, r0
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d006      	beq.n	800ea8a <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800ea7c:	4b14      	ldr	r3, [pc, #80]	; (800ead0 <StopJoin+0x68>)
 800ea7e:	2200      	movs	r2, #0
 800ea80:	2100      	movs	r1, #0
 800ea82:	2002      	movs	r0, #2
 800ea84:	f011 fa8c 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
 800ea88:	e01a      	b.n	800eac0 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800ea8a:	4b12      	ldr	r3, [pc, #72]	; (800ead4 <StopJoin+0x6c>)
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	2100      	movs	r1, #0
 800ea90:	2002      	movs	r0, #2
 800ea92:	f011 fa85 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800ea96:	4b10      	ldr	r3, [pc, #64]	; (800ead8 <StopJoin+0x70>)
 800ea98:	2201      	movs	r2, #1
 800ea9a:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800ea9c:	4b0f      	ldr	r3, [pc, #60]	; (800eadc <StopJoin+0x74>)
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	2100      	movs	r1, #0
 800eaa2:	2002      	movs	r0, #2
 800eaa4:	f011 fa7c 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800eaa8:	480d      	ldr	r0, [pc, #52]	; (800eae0 <StopJoin+0x78>)
 800eaaa:	f001 fe1f 	bl	80106ec <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800eaae:	4b0a      	ldr	r3, [pc, #40]	; (800ead8 <StopJoin+0x70>)
 800eab0:	781b      	ldrb	r3, [r3, #0]
 800eab2:	2101      	movs	r1, #1
 800eab4:	4618      	mov	r0, r3
 800eab6:	f001 ff71 	bl	801099c <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800eaba:	4804      	ldr	r0, [pc, #16]	; (800eacc <StopJoin+0x64>)
 800eabc:	f010 fff8 	bl	801fab0 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800eac0:	4808      	ldr	r0, [pc, #32]	; (800eae4 <StopJoin+0x7c>)
 800eac2:	f010 fff5 	bl	801fab0 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800eac6:	bf00      	nop
 800eac8:	bd80      	pop	{r7, pc}
 800eaca:	bf00      	nop
 800eacc:	200005a8 	.word	0x200005a8
 800ead0:	080213e4 	.word	0x080213e4
 800ead4:	08021404 	.word	0x08021404
 800ead8:	20000020 	.word	0x20000020
 800eadc:	08021418 	.word	0x08021418
 800eae0:	20000070 	.word	0x20000070
 800eae4:	200005c0 	.word	0x200005c0

0800eae8 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b082      	sub	sp, #8
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800eaf0:	4b05      	ldr	r3, [pc, #20]	; (800eb08 <OnStopJoinTimerEvent+0x20>)
 800eaf2:	781b      	ldrb	r3, [r3, #0]
 800eaf4:	2b02      	cmp	r3, #2
 800eaf6:	d103      	bne.n	800eb00 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800eaf8:	2100      	movs	r1, #0
 800eafa:	2008      	movs	r0, #8
 800eafc:	f010 ff00 	bl	801f900 <UTIL_SEQ_SetTask>
  }
  /* USER CODE BEGIN OnStopJoinTimerEvent_Last */

  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800eb00:	bf00      	nop
 800eb02:	3708      	adds	r7, #8
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}
 800eb08:	20000020 	.word	0x20000020

0800eb0c <StoreContext>:

static void StoreContext(void)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b082      	sub	sp, #8
 800eb10:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800eb12:	23ff      	movs	r3, #255	; 0xff
 800eb14:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800eb16:	f002 fd6f 	bl	80115f8 <LmHandlerNvmDataStore>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800eb1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb22:	f113 0f08 	cmn.w	r3, #8
 800eb26:	d106      	bne.n	800eb36 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800eb28:	4b0a      	ldr	r3, [pc, #40]	; (800eb54 <StoreContext+0x48>)
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	2100      	movs	r1, #0
 800eb2e:	2002      	movs	r0, #2
 800eb30:	f011 fa36 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800eb34:	e00a      	b.n	800eb4c <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800eb36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb3e:	d105      	bne.n	800eb4c <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800eb40:	4b05      	ldr	r3, [pc, #20]	; (800eb58 <StoreContext+0x4c>)
 800eb42:	2200      	movs	r2, #0
 800eb44:	2100      	movs	r1, #0
 800eb46:	2002      	movs	r0, #2
 800eb48:	f011 fa2a 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
}
 800eb4c:	bf00      	nop
 800eb4e:	3708      	adds	r7, #8
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}
 800eb54:	08021438 	.word	0x08021438
 800eb58:	08021450 	.word	0x08021450

0800eb5c <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b082      	sub	sp, #8
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	4603      	mov	r3, r0
 800eb64:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800eb66:	79fb      	ldrb	r3, [r7, #7]
 800eb68:	2b01      	cmp	r3, #1
 800eb6a:	d106      	bne.n	800eb7a <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800eb6c:	4b08      	ldr	r3, [pc, #32]	; (800eb90 <OnNvmDataChange+0x34>)
 800eb6e:	2200      	movs	r2, #0
 800eb70:	2100      	movs	r1, #0
 800eb72:	2002      	movs	r0, #2
 800eb74:	f011 fa14 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800eb78:	e005      	b.n	800eb86 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800eb7a:	4b06      	ldr	r3, [pc, #24]	; (800eb94 <OnNvmDataChange+0x38>)
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	2100      	movs	r1, #0
 800eb80:	2002      	movs	r0, #2
 800eb82:	f011 fa0d 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
}
 800eb86:	bf00      	nop
 800eb88:	3708      	adds	r7, #8
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}
 800eb8e:	bf00      	nop
 800eb90:	08021468 	.word	0x08021468
 800eb94:	0802147c 	.word	0x0802147c

0800eb98 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b082      	sub	sp, #8
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800eba2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800eba6:	4807      	ldr	r0, [pc, #28]	; (800ebc4 <OnStoreContextRequest+0x2c>)
 800eba8:	f7f2 fe0c 	bl	80017c4 <FLASH_IF_Erase>
 800ebac:	4603      	mov	r3, r0
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d104      	bne.n	800ebbc <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800ebb2:	683a      	ldr	r2, [r7, #0]
 800ebb4:	6879      	ldr	r1, [r7, #4]
 800ebb6:	4803      	ldr	r0, [pc, #12]	; (800ebc4 <OnStoreContextRequest+0x2c>)
 800ebb8:	f7f2 fdb4 	bl	8001724 <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800ebbc:	bf00      	nop
 800ebbe:	3708      	adds	r7, #8
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}
 800ebc4:	0803f000 	.word	0x0803f000

0800ebc8 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b082      	sub	sp, #8
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
 800ebd0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800ebd2:	683a      	ldr	r2, [r7, #0]
 800ebd4:	4903      	ldr	r1, [pc, #12]	; (800ebe4 <OnRestoreContextRequest+0x1c>)
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f7f2 fdcc 	bl	8001774 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800ebdc:	bf00      	nop
 800ebde:	3708      	adds	r7, #8
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}
 800ebe4:	0803f000 	.word	0x0803f000

0800ebe8 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800ebec:	4b15      	ldr	r3, [pc, #84]	; (800ec44 <LoraInfo_Init+0x5c>)
 800ebee:	2200      	movs	r2, #0
 800ebf0:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800ebf2:	4b14      	ldr	r3, [pc, #80]	; (800ec44 <LoraInfo_Init+0x5c>)
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800ebf8:	4b12      	ldr	r3, [pc, #72]	; (800ec44 <LoraInfo_Init+0x5c>)
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800ebfe:	4b11      	ldr	r3, [pc, #68]	; (800ec44 <LoraInfo_Init+0x5c>)
 800ec00:	2200      	movs	r2, #0
 800ec02:	60da      	str	r2, [r3, #12]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 800ec04:	4b0f      	ldr	r3, [pc, #60]	; (800ec44 <LoraInfo_Init+0x5c>)
 800ec06:	685b      	ldr	r3, [r3, #4]
 800ec08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ec0c:	4a0d      	ldr	r2, [pc, #52]	; (800ec44 <LoraInfo_Init+0x5c>)
 800ec0e:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800ec10:	4b0c      	ldr	r3, [pc, #48]	; (800ec44 <LoraInfo_Init+0x5c>)
 800ec12:	685b      	ldr	r3, [r3, #4]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d10c      	bne.n	800ec32 <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800ec18:	4b0b      	ldr	r3, [pc, #44]	; (800ec48 <LoraInfo_Init+0x60>)
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	2100      	movs	r1, #0
 800ec1e:	2000      	movs	r0, #0
 800ec20:	f011 f9be 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800ec24:	bf00      	nop
 800ec26:	f011 f9a9 	bl	801ff7c <UTIL_ADV_TRACE_IsBufferEmpty>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	2b01      	cmp	r3, #1
 800ec2e:	d1fa      	bne.n	800ec26 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800ec30:	e7fe      	b.n	800ec30 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800ec32:	4b04      	ldr	r3, [pc, #16]	; (800ec44 <LoraInfo_Init+0x5c>)
 800ec34:	2200      	movs	r2, #0
 800ec36:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800ec38:	4b02      	ldr	r3, [pc, #8]	; (800ec44 <LoraInfo_Init+0x5c>)
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800ec3e:	bf00      	nop
 800ec40:	bd80      	pop	{r7, pc}
 800ec42:	bf00      	nop
 800ec44:	20000714 	.word	0x20000714
 800ec48:	08021490 	.word	0x08021490

0800ec4c <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800ec50:	4b02      	ldr	r3, [pc, #8]	; (800ec5c <LoraInfo_GetPtr+0x10>)
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bc80      	pop	{r7}
 800ec58:	4770      	bx	lr
 800ec5a:	bf00      	nop
 800ec5c:	20000714 	.word	0x20000714

0800ec60 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800ec64:	f7f6 fc1e 	bl	80054a4 <BSP_RADIO_Init>
 800ec68:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	bd80      	pop	{r7, pc}

0800ec6e <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800ec6e:	b580      	push	{r7, lr}
 800ec70:	b082      	sub	sp, #8
 800ec72:	af00      	add	r7, sp, #0
 800ec74:	4603      	mov	r3, r0
 800ec76:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800ec78:	79fb      	ldrb	r3, [r7, #7]
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f7f6 fc44 	bl	8005508 <BSP_RADIO_ConfigRFSwitch>
 800ec80:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3708      	adds	r7, #8
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}

0800ec8a <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800ec8a:	b580      	push	{r7, lr}
 800ec8c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800ec8e:	f7f6 fc89 	bl	80055a4 <BSP_RADIO_GetTxConfig>
 800ec92:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	bd80      	pop	{r7, pc}

0800ec98 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800ec9c:	f7f6 fc89 	bl	80055b2 <BSP_RADIO_IsTCXO>
 800eca0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	bd80      	pop	{r7, pc}

0800eca6 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800eca6:	b580      	push	{r7, lr}
 800eca8:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800ecaa:	f7f6 fc89 	bl	80055c0 <BSP_RADIO_IsDCDC>
 800ecae:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b082      	sub	sp, #8
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	4603      	mov	r3, r0
 800ecbc:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800ecbe:	79fb      	ldrb	r3, [r7, #7]
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f7f6 fc84 	bl	80055ce <BSP_RADIO_GetRFOMaxPowerConfig>
 800ecc6:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3708      	adds	r7, #8
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b082      	sub	sp, #8
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	33f1      	adds	r3, #241	; 0xf1
 800ecdc:	2210      	movs	r2, #16
 800ecde:	2100      	movs	r1, #0
 800ece0:	4618      	mov	r0, r3
 800ece2:	f00c fdd3 	bl	801b88c <memset1>
    ctx->M_n = 0;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2200      	movs	r2, #0
 800ecea:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	22f0      	movs	r2, #240	; 0xf0
 800ecf2:	2100      	movs	r1, #0
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f00c fdc9 	bl	801b88c <memset1>
}
 800ecfa:	bf00      	nop
 800ecfc:	3708      	adds	r7, #8
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}

0800ed02 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800ed02:	b580      	push	{r7, lr}
 800ed04:	b082      	sub	sp, #8
 800ed06:	af00      	add	r7, sp, #0
 800ed08:	6078      	str	r0, [r7, #4]
 800ed0a:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	461a      	mov	r2, r3
 800ed10:	2110      	movs	r1, #16
 800ed12:	6838      	ldr	r0, [r7, #0]
 800ed14:	f000 fe5c 	bl	800f9d0 <lorawan_aes_set_key>
}
 800ed18:	bf00      	nop
 800ed1a:	3708      	adds	r7, #8
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}

0800ed20 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b08c      	sub	sp, #48	; 0x30
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	60f8      	str	r0, [r7, #12]
 800ed28:	60b9      	str	r1, [r7, #8]
 800ed2a:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	f000 80a1 	beq.w	800ee7a <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ed3e:	f1c3 0310 	rsb	r3, r3, #16
 800ed42:	687a      	ldr	r2, [r7, #4]
 800ed44:	4293      	cmp	r3, r2
 800ed46:	bf28      	it	cs
 800ed48:	4613      	movcs	r3, r2
 800ed4a:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	f203 1201 	addw	r2, r3, #257	; 0x101
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ed58:	4413      	add	r3, r2
 800ed5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed5c:	b292      	uxth	r2, r2
 800ed5e:	68b9      	ldr	r1, [r7, #8]
 800ed60:	4618      	mov	r0, r3
 800ed62:	f00c fd58 	bl	801b816 <memcpy1>
        ctx->M_n += mlen;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800ed6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed6e:	441a      	add	r2, r3
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ed7c:	2b0f      	cmp	r3, #15
 800ed7e:	f240 808d 	bls.w	800ee9c <AES_CMAC_Update+0x17c>
 800ed82:	687a      	ldr	r2, [r7, #4]
 800ed84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed86:	429a      	cmp	r2, r3
 800ed88:	f000 8088 	beq.w	800ee9c <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed90:	e015      	b.n	800edbe <AES_CMAC_Update+0x9e>
 800ed92:	68fa      	ldr	r2, [r7, #12]
 800ed94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed96:	4413      	add	r3, r2
 800ed98:	33f1      	adds	r3, #241	; 0xf1
 800ed9a:	781a      	ldrb	r2, [r3, #0]
 800ed9c:	68f9      	ldr	r1, [r7, #12]
 800ed9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda0:	440b      	add	r3, r1
 800eda2:	f203 1301 	addw	r3, r3, #257	; 0x101
 800eda6:	781b      	ldrb	r3, [r3, #0]
 800eda8:	4053      	eors	r3, r2
 800edaa:	b2d9      	uxtb	r1, r3
 800edac:	68fa      	ldr	r2, [r7, #12]
 800edae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb0:	4413      	add	r3, r2
 800edb2:	33f1      	adds	r3, #241	; 0xf1
 800edb4:	460a      	mov	r2, r1
 800edb6:	701a      	strb	r2, [r3, #0]
 800edb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edba:	3301      	adds	r3, #1
 800edbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800edbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc0:	2b0f      	cmp	r3, #15
 800edc2:	dde6      	ble.n	800ed92 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800edca:	f107 0314 	add.w	r3, r7, #20
 800edce:	2210      	movs	r2, #16
 800edd0:	4618      	mov	r0, r3
 800edd2:	f00c fd20 	bl	801b816 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800edd6:	68fa      	ldr	r2, [r7, #12]
 800edd8:	f107 0114 	add.w	r1, r7, #20
 800eddc:	f107 0314 	add.w	r3, r7, #20
 800ede0:	4618      	mov	r0, r3
 800ede2:	f000 fed3 	bl	800fb8c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	33f1      	adds	r3, #241	; 0xf1
 800edea:	f107 0114 	add.w	r1, r7, #20
 800edee:	2210      	movs	r2, #16
 800edf0:	4618      	mov	r0, r3
 800edf2:	f00c fd10 	bl	801b816 <memcpy1>

        data += mlen;
 800edf6:	68ba      	ldr	r2, [r7, #8]
 800edf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edfa:	4413      	add	r3, r2
 800edfc:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800edfe:	687a      	ldr	r2, [r7, #4]
 800ee00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee02:	1ad3      	subs	r3, r2, r3
 800ee04:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800ee06:	e038      	b.n	800ee7a <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800ee08:	2300      	movs	r3, #0
 800ee0a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ee0c:	e013      	b.n	800ee36 <AES_CMAC_Update+0x116>
 800ee0e:	68fa      	ldr	r2, [r7, #12]
 800ee10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee12:	4413      	add	r3, r2
 800ee14:	33f1      	adds	r3, #241	; 0xf1
 800ee16:	781a      	ldrb	r2, [r3, #0]
 800ee18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee1a:	68b9      	ldr	r1, [r7, #8]
 800ee1c:	440b      	add	r3, r1
 800ee1e:	781b      	ldrb	r3, [r3, #0]
 800ee20:	4053      	eors	r3, r2
 800ee22:	b2d9      	uxtb	r1, r3
 800ee24:	68fa      	ldr	r2, [r7, #12]
 800ee26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee28:	4413      	add	r3, r2
 800ee2a:	33f1      	adds	r3, #241	; 0xf1
 800ee2c:	460a      	mov	r2, r1
 800ee2e:	701a      	strb	r2, [r3, #0]
 800ee30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee32:	3301      	adds	r3, #1
 800ee34:	62bb      	str	r3, [r7, #40]	; 0x28
 800ee36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee38:	2b0f      	cmp	r3, #15
 800ee3a:	dde8      	ble.n	800ee0e <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800ee42:	f107 0314 	add.w	r3, r7, #20
 800ee46:	2210      	movs	r2, #16
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f00c fce4 	bl	801b816 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ee4e:	68fa      	ldr	r2, [r7, #12]
 800ee50:	f107 0114 	add.w	r1, r7, #20
 800ee54:	f107 0314 	add.w	r3, r7, #20
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f000 fe97 	bl	800fb8c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	33f1      	adds	r3, #241	; 0xf1
 800ee62:	f107 0114 	add.w	r1, r7, #20
 800ee66:	2210      	movs	r2, #16
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f00c fcd4 	bl	801b816 <memcpy1>

        data += 16;
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	3310      	adds	r3, #16
 800ee72:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	3b10      	subs	r3, #16
 800ee78:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	2b10      	cmp	r3, #16
 800ee7e:	d8c3      	bhi.n	800ee08 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ee86:	687a      	ldr	r2, [r7, #4]
 800ee88:	b292      	uxth	r2, r2
 800ee8a:	68b9      	ldr	r1, [r7, #8]
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f00c fcc2 	bl	801b816 <memcpy1>
    ctx->M_n = len;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	687a      	ldr	r2, [r7, #4]
 800ee96:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800ee9a:	e000      	b.n	800ee9e <AES_CMAC_Update+0x17e>
            return;
 800ee9c:	bf00      	nop
}
 800ee9e:	3730      	adds	r7, #48	; 0x30
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}

0800eea4 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b092      	sub	sp, #72	; 0x48
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
 800eeac:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800eeae:	f107 031c 	add.w	r3, r7, #28
 800eeb2:	2210      	movs	r2, #16
 800eeb4:	2100      	movs	r1, #0
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f00c fce8 	bl	801b88c <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800eebc:	683a      	ldr	r2, [r7, #0]
 800eebe:	f107 011c 	add.w	r1, r7, #28
 800eec2:	f107 031c 	add.w	r3, r7, #28
 800eec6:	4618      	mov	r0, r3
 800eec8:	f000 fe60 	bl	800fb8c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800eecc:	7f3b      	ldrb	r3, [r7, #28]
 800eece:	b25b      	sxtb	r3, r3
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	da30      	bge.n	800ef36 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800eed4:	2300      	movs	r3, #0
 800eed6:	647b      	str	r3, [r7, #68]	; 0x44
 800eed8:	e01b      	b.n	800ef12 <AES_CMAC_Final+0x6e>
 800eeda:	f107 021c 	add.w	r2, r7, #28
 800eede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eee0:	4413      	add	r3, r2
 800eee2:	781b      	ldrb	r3, [r3, #0]
 800eee4:	005b      	lsls	r3, r3, #1
 800eee6:	b25a      	sxtb	r2, r3
 800eee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eeea:	3301      	adds	r3, #1
 800eeec:	3348      	adds	r3, #72	; 0x48
 800eeee:	443b      	add	r3, r7
 800eef0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800eef4:	09db      	lsrs	r3, r3, #7
 800eef6:	b2db      	uxtb	r3, r3
 800eef8:	b25b      	sxtb	r3, r3
 800eefa:	4313      	orrs	r3, r2
 800eefc:	b25b      	sxtb	r3, r3
 800eefe:	b2d9      	uxtb	r1, r3
 800ef00:	f107 021c 	add.w	r2, r7, #28
 800ef04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef06:	4413      	add	r3, r2
 800ef08:	460a      	mov	r2, r1
 800ef0a:	701a      	strb	r2, [r3, #0]
 800ef0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef0e:	3301      	adds	r3, #1
 800ef10:	647b      	str	r3, [r7, #68]	; 0x44
 800ef12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef14:	2b0e      	cmp	r3, #14
 800ef16:	dde0      	ble.n	800eeda <AES_CMAC_Final+0x36>
 800ef18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ef1c:	005b      	lsls	r3, r3, #1
 800ef1e:	b2db      	uxtb	r3, r3
 800ef20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800ef24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ef28:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800ef2c:	43db      	mvns	r3, r3
 800ef2e:	b2db      	uxtb	r3, r3
 800ef30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef34:	e027      	b.n	800ef86 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800ef36:	2300      	movs	r3, #0
 800ef38:	643b      	str	r3, [r7, #64]	; 0x40
 800ef3a:	e01b      	b.n	800ef74 <AES_CMAC_Final+0xd0>
 800ef3c:	f107 021c 	add.w	r2, r7, #28
 800ef40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef42:	4413      	add	r3, r2
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	005b      	lsls	r3, r3, #1
 800ef48:	b25a      	sxtb	r2, r3
 800ef4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef4c:	3301      	adds	r3, #1
 800ef4e:	3348      	adds	r3, #72	; 0x48
 800ef50:	443b      	add	r3, r7
 800ef52:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ef56:	09db      	lsrs	r3, r3, #7
 800ef58:	b2db      	uxtb	r3, r3
 800ef5a:	b25b      	sxtb	r3, r3
 800ef5c:	4313      	orrs	r3, r2
 800ef5e:	b25b      	sxtb	r3, r3
 800ef60:	b2d9      	uxtb	r1, r3
 800ef62:	f107 021c 	add.w	r2, r7, #28
 800ef66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef68:	4413      	add	r3, r2
 800ef6a:	460a      	mov	r2, r1
 800ef6c:	701a      	strb	r2, [r3, #0]
 800ef6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef70:	3301      	adds	r3, #1
 800ef72:	643b      	str	r3, [r7, #64]	; 0x40
 800ef74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef76:	2b0e      	cmp	r3, #14
 800ef78:	dde0      	ble.n	800ef3c <AES_CMAC_Final+0x98>
 800ef7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ef7e:	005b      	lsls	r3, r3, #1
 800ef80:	b2db      	uxtb	r3, r3
 800ef82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ef8c:	2b10      	cmp	r3, #16
 800ef8e:	d11d      	bne.n	800efcc <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800ef90:	2300      	movs	r3, #0
 800ef92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef94:	e016      	b.n	800efc4 <AES_CMAC_Final+0x120>
 800ef96:	683a      	ldr	r2, [r7, #0]
 800ef98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef9a:	4413      	add	r3, r2
 800ef9c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800efa0:	781a      	ldrb	r2, [r3, #0]
 800efa2:	f107 011c 	add.w	r1, r7, #28
 800efa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efa8:	440b      	add	r3, r1
 800efaa:	781b      	ldrb	r3, [r3, #0]
 800efac:	4053      	eors	r3, r2
 800efae:	b2d9      	uxtb	r1, r3
 800efb0:	683a      	ldr	r2, [r7, #0]
 800efb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efb4:	4413      	add	r3, r2
 800efb6:	f203 1301 	addw	r3, r3, #257	; 0x101
 800efba:	460a      	mov	r2, r1
 800efbc:	701a      	strb	r2, [r3, #0]
 800efbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efc0:	3301      	adds	r3, #1
 800efc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800efc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efc6:	2b0f      	cmp	r3, #15
 800efc8:	dde5      	ble.n	800ef96 <AES_CMAC_Final+0xf2>
 800efca:	e096      	b.n	800f0fa <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800efcc:	7f3b      	ldrb	r3, [r7, #28]
 800efce:	b25b      	sxtb	r3, r3
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	da30      	bge.n	800f036 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800efd4:	2300      	movs	r3, #0
 800efd6:	63bb      	str	r3, [r7, #56]	; 0x38
 800efd8:	e01b      	b.n	800f012 <AES_CMAC_Final+0x16e>
 800efda:	f107 021c 	add.w	r2, r7, #28
 800efde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe0:	4413      	add	r3, r2
 800efe2:	781b      	ldrb	r3, [r3, #0]
 800efe4:	005b      	lsls	r3, r3, #1
 800efe6:	b25a      	sxtb	r2, r3
 800efe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efea:	3301      	adds	r3, #1
 800efec:	3348      	adds	r3, #72	; 0x48
 800efee:	443b      	add	r3, r7
 800eff0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800eff4:	09db      	lsrs	r3, r3, #7
 800eff6:	b2db      	uxtb	r3, r3
 800eff8:	b25b      	sxtb	r3, r3
 800effa:	4313      	orrs	r3, r2
 800effc:	b25b      	sxtb	r3, r3
 800effe:	b2d9      	uxtb	r1, r3
 800f000:	f107 021c 	add.w	r2, r7, #28
 800f004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f006:	4413      	add	r3, r2
 800f008:	460a      	mov	r2, r1
 800f00a:	701a      	strb	r2, [r3, #0]
 800f00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f00e:	3301      	adds	r3, #1
 800f010:	63bb      	str	r3, [r7, #56]	; 0x38
 800f012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f014:	2b0e      	cmp	r3, #14
 800f016:	dde0      	ble.n	800efda <AES_CMAC_Final+0x136>
 800f018:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f01c:	005b      	lsls	r3, r3, #1
 800f01e:	b2db      	uxtb	r3, r3
 800f020:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800f024:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f028:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800f02c:	43db      	mvns	r3, r3
 800f02e:	b2db      	uxtb	r3, r3
 800f030:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f034:	e027      	b.n	800f086 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800f036:	2300      	movs	r3, #0
 800f038:	637b      	str	r3, [r7, #52]	; 0x34
 800f03a:	e01b      	b.n	800f074 <AES_CMAC_Final+0x1d0>
 800f03c:	f107 021c 	add.w	r2, r7, #28
 800f040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f042:	4413      	add	r3, r2
 800f044:	781b      	ldrb	r3, [r3, #0]
 800f046:	005b      	lsls	r3, r3, #1
 800f048:	b25a      	sxtb	r2, r3
 800f04a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f04c:	3301      	adds	r3, #1
 800f04e:	3348      	adds	r3, #72	; 0x48
 800f050:	443b      	add	r3, r7
 800f052:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800f056:	09db      	lsrs	r3, r3, #7
 800f058:	b2db      	uxtb	r3, r3
 800f05a:	b25b      	sxtb	r3, r3
 800f05c:	4313      	orrs	r3, r2
 800f05e:	b25b      	sxtb	r3, r3
 800f060:	b2d9      	uxtb	r1, r3
 800f062:	f107 021c 	add.w	r2, r7, #28
 800f066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f068:	4413      	add	r3, r2
 800f06a:	460a      	mov	r2, r1
 800f06c:	701a      	strb	r2, [r3, #0]
 800f06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f070:	3301      	adds	r3, #1
 800f072:	637b      	str	r3, [r7, #52]	; 0x34
 800f074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f076:	2b0e      	cmp	r3, #14
 800f078:	dde0      	ble.n	800f03c <AES_CMAC_Final+0x198>
 800f07a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f07e:	005b      	lsls	r3, r3, #1
 800f080:	b2db      	uxtb	r3, r3
 800f082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800f08c:	683a      	ldr	r2, [r7, #0]
 800f08e:	4413      	add	r3, r2
 800f090:	2280      	movs	r2, #128	; 0x80
 800f092:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800f096:	e007      	b.n	800f0a8 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800f09e:	683a      	ldr	r2, [r7, #0]
 800f0a0:	4413      	add	r3, r2
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800f0ae:	1c5a      	adds	r2, r3, #1
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800f0bc:	2b0f      	cmp	r3, #15
 800f0be:	d9eb      	bls.n	800f098 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	633b      	str	r3, [r7, #48]	; 0x30
 800f0c4:	e016      	b.n	800f0f4 <AES_CMAC_Final+0x250>
 800f0c6:	683a      	ldr	r2, [r7, #0]
 800f0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ca:	4413      	add	r3, r2
 800f0cc:	f203 1301 	addw	r3, r3, #257	; 0x101
 800f0d0:	781a      	ldrb	r2, [r3, #0]
 800f0d2:	f107 011c 	add.w	r1, r7, #28
 800f0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d8:	440b      	add	r3, r1
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	4053      	eors	r3, r2
 800f0de:	b2d9      	uxtb	r1, r3
 800f0e0:	683a      	ldr	r2, [r7, #0]
 800f0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e4:	4413      	add	r3, r2
 800f0e6:	f203 1301 	addw	r3, r3, #257	; 0x101
 800f0ea:	460a      	mov	r2, r1
 800f0ec:	701a      	strb	r2, [r3, #0]
 800f0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f0:	3301      	adds	r3, #1
 800f0f2:	633b      	str	r3, [r7, #48]	; 0x30
 800f0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f6:	2b0f      	cmp	r3, #15
 800f0f8:	dde5      	ble.n	800f0c6 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f0fe:	e015      	b.n	800f12c <AES_CMAC_Final+0x288>
 800f100:	683a      	ldr	r2, [r7, #0]
 800f102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f104:	4413      	add	r3, r2
 800f106:	33f1      	adds	r3, #241	; 0xf1
 800f108:	781a      	ldrb	r2, [r3, #0]
 800f10a:	6839      	ldr	r1, [r7, #0]
 800f10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f10e:	440b      	add	r3, r1
 800f110:	f203 1301 	addw	r3, r3, #257	; 0x101
 800f114:	781b      	ldrb	r3, [r3, #0]
 800f116:	4053      	eors	r3, r2
 800f118:	b2d9      	uxtb	r1, r3
 800f11a:	683a      	ldr	r2, [r7, #0]
 800f11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f11e:	4413      	add	r3, r2
 800f120:	33f1      	adds	r3, #241	; 0xf1
 800f122:	460a      	mov	r2, r1
 800f124:	701a      	strb	r2, [r3, #0]
 800f126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f128:	3301      	adds	r3, #1
 800f12a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12e:	2b0f      	cmp	r3, #15
 800f130:	dde6      	ble.n	800f100 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800f138:	f107 030c 	add.w	r3, r7, #12
 800f13c:	2210      	movs	r2, #16
 800f13e:	4618      	mov	r0, r3
 800f140:	f00c fb69 	bl	801b816 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800f144:	683a      	ldr	r2, [r7, #0]
 800f146:	f107 030c 	add.w	r3, r7, #12
 800f14a:	6879      	ldr	r1, [r7, #4]
 800f14c:	4618      	mov	r0, r3
 800f14e:	f000 fd1d 	bl	800fb8c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800f152:	f107 031c 	add.w	r3, r7, #28
 800f156:	2210      	movs	r2, #16
 800f158:	2100      	movs	r1, #0
 800f15a:	4618      	mov	r0, r3
 800f15c:	f00c fb96 	bl	801b88c <memset1>
}
 800f160:	bf00      	nop
 800f162:	3748      	adds	r7, #72	; 0x48
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}

0800f168 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800f168:	b480      	push	{r7}
 800f16a:	b083      	sub	sp, #12
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
 800f170:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	781a      	ldrb	r2, [r3, #0]
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	3301      	adds	r3, #1
 800f17e:	683a      	ldr	r2, [r7, #0]
 800f180:	7852      	ldrb	r2, [r2, #1]
 800f182:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	3302      	adds	r3, #2
 800f188:	683a      	ldr	r2, [r7, #0]
 800f18a:	7892      	ldrb	r2, [r2, #2]
 800f18c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	3303      	adds	r3, #3
 800f192:	683a      	ldr	r2, [r7, #0]
 800f194:	78d2      	ldrb	r2, [r2, #3]
 800f196:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	3304      	adds	r3, #4
 800f19c:	683a      	ldr	r2, [r7, #0]
 800f19e:	7912      	ldrb	r2, [r2, #4]
 800f1a0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	3305      	adds	r3, #5
 800f1a6:	683a      	ldr	r2, [r7, #0]
 800f1a8:	7952      	ldrb	r2, [r2, #5]
 800f1aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	3306      	adds	r3, #6
 800f1b0:	683a      	ldr	r2, [r7, #0]
 800f1b2:	7992      	ldrb	r2, [r2, #6]
 800f1b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	3307      	adds	r3, #7
 800f1ba:	683a      	ldr	r2, [r7, #0]
 800f1bc:	79d2      	ldrb	r2, [r2, #7]
 800f1be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	3308      	adds	r3, #8
 800f1c4:	683a      	ldr	r2, [r7, #0]
 800f1c6:	7a12      	ldrb	r2, [r2, #8]
 800f1c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	3309      	adds	r3, #9
 800f1ce:	683a      	ldr	r2, [r7, #0]
 800f1d0:	7a52      	ldrb	r2, [r2, #9]
 800f1d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	330a      	adds	r3, #10
 800f1d8:	683a      	ldr	r2, [r7, #0]
 800f1da:	7a92      	ldrb	r2, [r2, #10]
 800f1dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	330b      	adds	r3, #11
 800f1e2:	683a      	ldr	r2, [r7, #0]
 800f1e4:	7ad2      	ldrb	r2, [r2, #11]
 800f1e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	330c      	adds	r3, #12
 800f1ec:	683a      	ldr	r2, [r7, #0]
 800f1ee:	7b12      	ldrb	r2, [r2, #12]
 800f1f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	330d      	adds	r3, #13
 800f1f6:	683a      	ldr	r2, [r7, #0]
 800f1f8:	7b52      	ldrb	r2, [r2, #13]
 800f1fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	330e      	adds	r3, #14
 800f200:	683a      	ldr	r2, [r7, #0]
 800f202:	7b92      	ldrb	r2, [r2, #14]
 800f204:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	330f      	adds	r3, #15
 800f20a:	683a      	ldr	r2, [r7, #0]
 800f20c:	7bd2      	ldrb	r2, [r2, #15]
 800f20e:	701a      	strb	r2, [r3, #0]
#endif
}
 800f210:	bf00      	nop
 800f212:	370c      	adds	r7, #12
 800f214:	46bd      	mov	sp, r7
 800f216:	bc80      	pop	{r7}
 800f218:	4770      	bx	lr

0800f21a <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800f21a:	b480      	push	{r7}
 800f21c:	b085      	sub	sp, #20
 800f21e:	af00      	add	r7, sp, #0
 800f220:	60f8      	str	r0, [r7, #12]
 800f222:	60b9      	str	r1, [r7, #8]
 800f224:	4613      	mov	r3, r2
 800f226:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800f228:	e007      	b.n	800f23a <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800f22a:	68ba      	ldr	r2, [r7, #8]
 800f22c:	1c53      	adds	r3, r2, #1
 800f22e:	60bb      	str	r3, [r7, #8]
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	1c59      	adds	r1, r3, #1
 800f234:	60f9      	str	r1, [r7, #12]
 800f236:	7812      	ldrb	r2, [r2, #0]
 800f238:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800f23a:	79fb      	ldrb	r3, [r7, #7]
 800f23c:	1e5a      	subs	r2, r3, #1
 800f23e:	71fa      	strb	r2, [r7, #7]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d1f2      	bne.n	800f22a <copy_block_nn+0x10>
}
 800f244:	bf00      	nop
 800f246:	bf00      	nop
 800f248:	3714      	adds	r7, #20
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bc80      	pop	{r7}
 800f24e:	4770      	bx	lr

0800f250 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800f250:	b480      	push	{r7}
 800f252:	b083      	sub	sp, #12
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	781a      	ldrb	r2, [r3, #0]
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	781b      	ldrb	r3, [r3, #0]
 800f262:	4053      	eors	r3, r2
 800f264:	b2da      	uxtb	r2, r3
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	3301      	adds	r3, #1
 800f26e:	7819      	ldrb	r1, [r3, #0]
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	3301      	adds	r3, #1
 800f274:	781a      	ldrb	r2, [r3, #0]
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	3301      	adds	r3, #1
 800f27a:	404a      	eors	r2, r1
 800f27c:	b2d2      	uxtb	r2, r2
 800f27e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	3302      	adds	r3, #2
 800f284:	7819      	ldrb	r1, [r3, #0]
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	3302      	adds	r3, #2
 800f28a:	781a      	ldrb	r2, [r3, #0]
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	3302      	adds	r3, #2
 800f290:	404a      	eors	r2, r1
 800f292:	b2d2      	uxtb	r2, r2
 800f294:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	3303      	adds	r3, #3
 800f29a:	7819      	ldrb	r1, [r3, #0]
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	3303      	adds	r3, #3
 800f2a0:	781a      	ldrb	r2, [r3, #0]
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	3303      	adds	r3, #3
 800f2a6:	404a      	eors	r2, r1
 800f2a8:	b2d2      	uxtb	r2, r2
 800f2aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	3304      	adds	r3, #4
 800f2b0:	7819      	ldrb	r1, [r3, #0]
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	3304      	adds	r3, #4
 800f2b6:	781a      	ldrb	r2, [r3, #0]
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	3304      	adds	r3, #4
 800f2bc:	404a      	eors	r2, r1
 800f2be:	b2d2      	uxtb	r2, r2
 800f2c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	3305      	adds	r3, #5
 800f2c6:	7819      	ldrb	r1, [r3, #0]
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	3305      	adds	r3, #5
 800f2cc:	781a      	ldrb	r2, [r3, #0]
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	3305      	adds	r3, #5
 800f2d2:	404a      	eors	r2, r1
 800f2d4:	b2d2      	uxtb	r2, r2
 800f2d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	3306      	adds	r3, #6
 800f2dc:	7819      	ldrb	r1, [r3, #0]
 800f2de:	683b      	ldr	r3, [r7, #0]
 800f2e0:	3306      	adds	r3, #6
 800f2e2:	781a      	ldrb	r2, [r3, #0]
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	3306      	adds	r3, #6
 800f2e8:	404a      	eors	r2, r1
 800f2ea:	b2d2      	uxtb	r2, r2
 800f2ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	3307      	adds	r3, #7
 800f2f2:	7819      	ldrb	r1, [r3, #0]
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	3307      	adds	r3, #7
 800f2f8:	781a      	ldrb	r2, [r3, #0]
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	3307      	adds	r3, #7
 800f2fe:	404a      	eors	r2, r1
 800f300:	b2d2      	uxtb	r2, r2
 800f302:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	3308      	adds	r3, #8
 800f308:	7819      	ldrb	r1, [r3, #0]
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	3308      	adds	r3, #8
 800f30e:	781a      	ldrb	r2, [r3, #0]
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	3308      	adds	r3, #8
 800f314:	404a      	eors	r2, r1
 800f316:	b2d2      	uxtb	r2, r2
 800f318:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	3309      	adds	r3, #9
 800f31e:	7819      	ldrb	r1, [r3, #0]
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	3309      	adds	r3, #9
 800f324:	781a      	ldrb	r2, [r3, #0]
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	3309      	adds	r3, #9
 800f32a:	404a      	eors	r2, r1
 800f32c:	b2d2      	uxtb	r2, r2
 800f32e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	330a      	adds	r3, #10
 800f334:	7819      	ldrb	r1, [r3, #0]
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	330a      	adds	r3, #10
 800f33a:	781a      	ldrb	r2, [r3, #0]
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	330a      	adds	r3, #10
 800f340:	404a      	eors	r2, r1
 800f342:	b2d2      	uxtb	r2, r2
 800f344:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	330b      	adds	r3, #11
 800f34a:	7819      	ldrb	r1, [r3, #0]
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	330b      	adds	r3, #11
 800f350:	781a      	ldrb	r2, [r3, #0]
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	330b      	adds	r3, #11
 800f356:	404a      	eors	r2, r1
 800f358:	b2d2      	uxtb	r2, r2
 800f35a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	330c      	adds	r3, #12
 800f360:	7819      	ldrb	r1, [r3, #0]
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	330c      	adds	r3, #12
 800f366:	781a      	ldrb	r2, [r3, #0]
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	330c      	adds	r3, #12
 800f36c:	404a      	eors	r2, r1
 800f36e:	b2d2      	uxtb	r2, r2
 800f370:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	330d      	adds	r3, #13
 800f376:	7819      	ldrb	r1, [r3, #0]
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	330d      	adds	r3, #13
 800f37c:	781a      	ldrb	r2, [r3, #0]
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	330d      	adds	r3, #13
 800f382:	404a      	eors	r2, r1
 800f384:	b2d2      	uxtb	r2, r2
 800f386:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	330e      	adds	r3, #14
 800f38c:	7819      	ldrb	r1, [r3, #0]
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	330e      	adds	r3, #14
 800f392:	781a      	ldrb	r2, [r3, #0]
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	330e      	adds	r3, #14
 800f398:	404a      	eors	r2, r1
 800f39a:	b2d2      	uxtb	r2, r2
 800f39c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	330f      	adds	r3, #15
 800f3a2:	7819      	ldrb	r1, [r3, #0]
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	330f      	adds	r3, #15
 800f3a8:	781a      	ldrb	r2, [r3, #0]
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	330f      	adds	r3, #15
 800f3ae:	404a      	eors	r2, r1
 800f3b0:	b2d2      	uxtb	r2, r2
 800f3b2:	701a      	strb	r2, [r3, #0]
#endif
}
 800f3b4:	bf00      	nop
 800f3b6:	370c      	adds	r7, #12
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bc80      	pop	{r7}
 800f3bc:	4770      	bx	lr

0800f3be <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800f3be:	b480      	push	{r7}
 800f3c0:	b085      	sub	sp, #20
 800f3c2:	af00      	add	r7, sp, #0
 800f3c4:	60f8      	str	r0, [r7, #12]
 800f3c6:	60b9      	str	r1, [r7, #8]
 800f3c8:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	781a      	ldrb	r2, [r3, #0]
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	781b      	ldrb	r3, [r3, #0]
 800f3d2:	4053      	eors	r3, r2
 800f3d4:	b2da      	uxtb	r2, r3
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	3301      	adds	r3, #1
 800f3de:	7819      	ldrb	r1, [r3, #0]
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	3301      	adds	r3, #1
 800f3e4:	781a      	ldrb	r2, [r3, #0]
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	3301      	adds	r3, #1
 800f3ea:	404a      	eors	r2, r1
 800f3ec:	b2d2      	uxtb	r2, r2
 800f3ee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	3302      	adds	r3, #2
 800f3f4:	7819      	ldrb	r1, [r3, #0]
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	3302      	adds	r3, #2
 800f3fa:	781a      	ldrb	r2, [r3, #0]
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	3302      	adds	r3, #2
 800f400:	404a      	eors	r2, r1
 800f402:	b2d2      	uxtb	r2, r2
 800f404:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800f406:	68bb      	ldr	r3, [r7, #8]
 800f408:	3303      	adds	r3, #3
 800f40a:	7819      	ldrb	r1, [r3, #0]
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	3303      	adds	r3, #3
 800f410:	781a      	ldrb	r2, [r3, #0]
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	3303      	adds	r3, #3
 800f416:	404a      	eors	r2, r1
 800f418:	b2d2      	uxtb	r2, r2
 800f41a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	3304      	adds	r3, #4
 800f420:	7819      	ldrb	r1, [r3, #0]
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	3304      	adds	r3, #4
 800f426:	781a      	ldrb	r2, [r3, #0]
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	3304      	adds	r3, #4
 800f42c:	404a      	eors	r2, r1
 800f42e:	b2d2      	uxtb	r2, r2
 800f430:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	3305      	adds	r3, #5
 800f436:	7819      	ldrb	r1, [r3, #0]
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	3305      	adds	r3, #5
 800f43c:	781a      	ldrb	r2, [r3, #0]
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	3305      	adds	r3, #5
 800f442:	404a      	eors	r2, r1
 800f444:	b2d2      	uxtb	r2, r2
 800f446:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800f448:	68bb      	ldr	r3, [r7, #8]
 800f44a:	3306      	adds	r3, #6
 800f44c:	7819      	ldrb	r1, [r3, #0]
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	3306      	adds	r3, #6
 800f452:	781a      	ldrb	r2, [r3, #0]
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	3306      	adds	r3, #6
 800f458:	404a      	eors	r2, r1
 800f45a:	b2d2      	uxtb	r2, r2
 800f45c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	3307      	adds	r3, #7
 800f462:	7819      	ldrb	r1, [r3, #0]
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	3307      	adds	r3, #7
 800f468:	781a      	ldrb	r2, [r3, #0]
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	3307      	adds	r3, #7
 800f46e:	404a      	eors	r2, r1
 800f470:	b2d2      	uxtb	r2, r2
 800f472:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	3308      	adds	r3, #8
 800f478:	7819      	ldrb	r1, [r3, #0]
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	3308      	adds	r3, #8
 800f47e:	781a      	ldrb	r2, [r3, #0]
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	3308      	adds	r3, #8
 800f484:	404a      	eors	r2, r1
 800f486:	b2d2      	uxtb	r2, r2
 800f488:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	3309      	adds	r3, #9
 800f48e:	7819      	ldrb	r1, [r3, #0]
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	3309      	adds	r3, #9
 800f494:	781a      	ldrb	r2, [r3, #0]
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	3309      	adds	r3, #9
 800f49a:	404a      	eors	r2, r1
 800f49c:	b2d2      	uxtb	r2, r2
 800f49e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	330a      	adds	r3, #10
 800f4a4:	7819      	ldrb	r1, [r3, #0]
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	330a      	adds	r3, #10
 800f4aa:	781a      	ldrb	r2, [r3, #0]
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	330a      	adds	r3, #10
 800f4b0:	404a      	eors	r2, r1
 800f4b2:	b2d2      	uxtb	r2, r2
 800f4b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	330b      	adds	r3, #11
 800f4ba:	7819      	ldrb	r1, [r3, #0]
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	330b      	adds	r3, #11
 800f4c0:	781a      	ldrb	r2, [r3, #0]
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	330b      	adds	r3, #11
 800f4c6:	404a      	eors	r2, r1
 800f4c8:	b2d2      	uxtb	r2, r2
 800f4ca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	330c      	adds	r3, #12
 800f4d0:	7819      	ldrb	r1, [r3, #0]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	330c      	adds	r3, #12
 800f4d6:	781a      	ldrb	r2, [r3, #0]
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	330c      	adds	r3, #12
 800f4dc:	404a      	eors	r2, r1
 800f4de:	b2d2      	uxtb	r2, r2
 800f4e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	330d      	adds	r3, #13
 800f4e6:	7819      	ldrb	r1, [r3, #0]
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	330d      	adds	r3, #13
 800f4ec:	781a      	ldrb	r2, [r3, #0]
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	330d      	adds	r3, #13
 800f4f2:	404a      	eors	r2, r1
 800f4f4:	b2d2      	uxtb	r2, r2
 800f4f6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800f4f8:	68bb      	ldr	r3, [r7, #8]
 800f4fa:	330e      	adds	r3, #14
 800f4fc:	7819      	ldrb	r1, [r3, #0]
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	330e      	adds	r3, #14
 800f502:	781a      	ldrb	r2, [r3, #0]
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	330e      	adds	r3, #14
 800f508:	404a      	eors	r2, r1
 800f50a:	b2d2      	uxtb	r2, r2
 800f50c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	330f      	adds	r3, #15
 800f512:	7819      	ldrb	r1, [r3, #0]
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	330f      	adds	r3, #15
 800f518:	781a      	ldrb	r2, [r3, #0]
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	330f      	adds	r3, #15
 800f51e:	404a      	eors	r2, r1
 800f520:	b2d2      	uxtb	r2, r2
 800f522:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800f524:	bf00      	nop
 800f526:	3714      	adds	r7, #20
 800f528:	46bd      	mov	sp, r7
 800f52a:	bc80      	pop	{r7}
 800f52c:	4770      	bx	lr

0800f52e <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800f52e:	b580      	push	{r7, lr}
 800f530:	b082      	sub	sp, #8
 800f532:	af00      	add	r7, sp, #0
 800f534:	6078      	str	r0, [r7, #4]
 800f536:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800f538:	6839      	ldr	r1, [r7, #0]
 800f53a:	6878      	ldr	r0, [r7, #4]
 800f53c:	f7ff fe88 	bl	800f250 <xor_block>
}
 800f540:	bf00      	nop
 800f542:	3708      	adds	r7, #8
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}

0800f548 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800f548:	b480      	push	{r7}
 800f54a:	b085      	sub	sp, #20
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	781b      	ldrb	r3, [r3, #0]
 800f554:	461a      	mov	r2, r3
 800f556:	4b48      	ldr	r3, [pc, #288]	; (800f678 <shift_sub_rows+0x130>)
 800f558:	5c9a      	ldrb	r2, [r3, r2]
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	701a      	strb	r2, [r3, #0]
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	3304      	adds	r3, #4
 800f562:	781b      	ldrb	r3, [r3, #0]
 800f564:	4619      	mov	r1, r3
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	3304      	adds	r3, #4
 800f56a:	4a43      	ldr	r2, [pc, #268]	; (800f678 <shift_sub_rows+0x130>)
 800f56c:	5c52      	ldrb	r2, [r2, r1]
 800f56e:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	3308      	adds	r3, #8
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	4619      	mov	r1, r3
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	3308      	adds	r3, #8
 800f57c:	4a3e      	ldr	r2, [pc, #248]	; (800f678 <shift_sub_rows+0x130>)
 800f57e:	5c52      	ldrb	r2, [r2, r1]
 800f580:	701a      	strb	r2, [r3, #0]
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	330c      	adds	r3, #12
 800f586:	781b      	ldrb	r3, [r3, #0]
 800f588:	4619      	mov	r1, r3
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	330c      	adds	r3, #12
 800f58e:	4a3a      	ldr	r2, [pc, #232]	; (800f678 <shift_sub_rows+0x130>)
 800f590:	5c52      	ldrb	r2, [r2, r1]
 800f592:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	785b      	ldrb	r3, [r3, #1]
 800f598:	73fb      	strb	r3, [r7, #15]
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	3305      	adds	r3, #5
 800f59e:	781b      	ldrb	r3, [r3, #0]
 800f5a0:	4619      	mov	r1, r3
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	3301      	adds	r3, #1
 800f5a6:	4a34      	ldr	r2, [pc, #208]	; (800f678 <shift_sub_rows+0x130>)
 800f5a8:	5c52      	ldrb	r2, [r2, r1]
 800f5aa:	701a      	strb	r2, [r3, #0]
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	3309      	adds	r3, #9
 800f5b0:	781b      	ldrb	r3, [r3, #0]
 800f5b2:	4619      	mov	r1, r3
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	3305      	adds	r3, #5
 800f5b8:	4a2f      	ldr	r2, [pc, #188]	; (800f678 <shift_sub_rows+0x130>)
 800f5ba:	5c52      	ldrb	r2, [r2, r1]
 800f5bc:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	330d      	adds	r3, #13
 800f5c2:	781b      	ldrb	r3, [r3, #0]
 800f5c4:	4619      	mov	r1, r3
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	3309      	adds	r3, #9
 800f5ca:	4a2b      	ldr	r2, [pc, #172]	; (800f678 <shift_sub_rows+0x130>)
 800f5cc:	5c52      	ldrb	r2, [r2, r1]
 800f5ce:	701a      	strb	r2, [r3, #0]
 800f5d0:	7bfa      	ldrb	r2, [r7, #15]
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	330d      	adds	r3, #13
 800f5d6:	4928      	ldr	r1, [pc, #160]	; (800f678 <shift_sub_rows+0x130>)
 800f5d8:	5c8a      	ldrb	r2, [r1, r2]
 800f5da:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	789b      	ldrb	r3, [r3, #2]
 800f5e0:	73fb      	strb	r3, [r7, #15]
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	330a      	adds	r3, #10
 800f5e6:	781b      	ldrb	r3, [r3, #0]
 800f5e8:	4619      	mov	r1, r3
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	3302      	adds	r3, #2
 800f5ee:	4a22      	ldr	r2, [pc, #136]	; (800f678 <shift_sub_rows+0x130>)
 800f5f0:	5c52      	ldrb	r2, [r2, r1]
 800f5f2:	701a      	strb	r2, [r3, #0]
 800f5f4:	7bfa      	ldrb	r2, [r7, #15]
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	330a      	adds	r3, #10
 800f5fa:	491f      	ldr	r1, [pc, #124]	; (800f678 <shift_sub_rows+0x130>)
 800f5fc:	5c8a      	ldrb	r2, [r1, r2]
 800f5fe:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	799b      	ldrb	r3, [r3, #6]
 800f604:	73fb      	strb	r3, [r7, #15]
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	330e      	adds	r3, #14
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	4619      	mov	r1, r3
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	3306      	adds	r3, #6
 800f612:	4a19      	ldr	r2, [pc, #100]	; (800f678 <shift_sub_rows+0x130>)
 800f614:	5c52      	ldrb	r2, [r2, r1]
 800f616:	701a      	strb	r2, [r3, #0]
 800f618:	7bfa      	ldrb	r2, [r7, #15]
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	330e      	adds	r3, #14
 800f61e:	4916      	ldr	r1, [pc, #88]	; (800f678 <shift_sub_rows+0x130>)
 800f620:	5c8a      	ldrb	r2, [r1, r2]
 800f622:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	7bdb      	ldrb	r3, [r3, #15]
 800f628:	73fb      	strb	r3, [r7, #15]
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	330b      	adds	r3, #11
 800f62e:	781b      	ldrb	r3, [r3, #0]
 800f630:	4619      	mov	r1, r3
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	330f      	adds	r3, #15
 800f636:	4a10      	ldr	r2, [pc, #64]	; (800f678 <shift_sub_rows+0x130>)
 800f638:	5c52      	ldrb	r2, [r2, r1]
 800f63a:	701a      	strb	r2, [r3, #0]
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	3307      	adds	r3, #7
 800f640:	781b      	ldrb	r3, [r3, #0]
 800f642:	4619      	mov	r1, r3
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	330b      	adds	r3, #11
 800f648:	4a0b      	ldr	r2, [pc, #44]	; (800f678 <shift_sub_rows+0x130>)
 800f64a:	5c52      	ldrb	r2, [r2, r1]
 800f64c:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	3303      	adds	r3, #3
 800f652:	781b      	ldrb	r3, [r3, #0]
 800f654:	4619      	mov	r1, r3
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	3307      	adds	r3, #7
 800f65a:	4a07      	ldr	r2, [pc, #28]	; (800f678 <shift_sub_rows+0x130>)
 800f65c:	5c52      	ldrb	r2, [r2, r1]
 800f65e:	701a      	strb	r2, [r3, #0]
 800f660:	7bfa      	ldrb	r2, [r7, #15]
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	3303      	adds	r3, #3
 800f666:	4904      	ldr	r1, [pc, #16]	; (800f678 <shift_sub_rows+0x130>)
 800f668:	5c8a      	ldrb	r2, [r1, r2]
 800f66a:	701a      	strb	r2, [r3, #0]
}
 800f66c:	bf00      	nop
 800f66e:	3714      	adds	r7, #20
 800f670:	46bd      	mov	sp, r7
 800f672:	bc80      	pop	{r7}
 800f674:	4770      	bx	lr
 800f676:	bf00      	nop
 800f678:	080219e4 	.word	0x080219e4

0800f67c <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b086      	sub	sp, #24
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800f684:	f107 0308 	add.w	r3, r7, #8
 800f688:	6879      	ldr	r1, [r7, #4]
 800f68a:	4618      	mov	r0, r3
 800f68c:	f7ff fd6c 	bl	800f168 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800f690:	7a3b      	ldrb	r3, [r7, #8]
 800f692:	461a      	mov	r2, r3
 800f694:	4b9a      	ldr	r3, [pc, #616]	; (800f900 <mix_sub_columns+0x284>)
 800f696:	5c9a      	ldrb	r2, [r3, r2]
 800f698:	7b7b      	ldrb	r3, [r7, #13]
 800f69a:	4619      	mov	r1, r3
 800f69c:	4b99      	ldr	r3, [pc, #612]	; (800f904 <mix_sub_columns+0x288>)
 800f69e:	5c5b      	ldrb	r3, [r3, r1]
 800f6a0:	4053      	eors	r3, r2
 800f6a2:	b2da      	uxtb	r2, r3
 800f6a4:	7cbb      	ldrb	r3, [r7, #18]
 800f6a6:	4619      	mov	r1, r3
 800f6a8:	4b97      	ldr	r3, [pc, #604]	; (800f908 <mix_sub_columns+0x28c>)
 800f6aa:	5c5b      	ldrb	r3, [r3, r1]
 800f6ac:	4053      	eors	r3, r2
 800f6ae:	b2da      	uxtb	r2, r3
 800f6b0:	7dfb      	ldrb	r3, [r7, #23]
 800f6b2:	4619      	mov	r1, r3
 800f6b4:	4b94      	ldr	r3, [pc, #592]	; (800f908 <mix_sub_columns+0x28c>)
 800f6b6:	5c5b      	ldrb	r3, [r3, r1]
 800f6b8:	4053      	eors	r3, r2
 800f6ba:	b2da      	uxtb	r2, r3
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800f6c0:	7a3b      	ldrb	r3, [r7, #8]
 800f6c2:	461a      	mov	r2, r3
 800f6c4:	4b90      	ldr	r3, [pc, #576]	; (800f908 <mix_sub_columns+0x28c>)
 800f6c6:	5c9a      	ldrb	r2, [r3, r2]
 800f6c8:	7b7b      	ldrb	r3, [r7, #13]
 800f6ca:	4619      	mov	r1, r3
 800f6cc:	4b8c      	ldr	r3, [pc, #560]	; (800f900 <mix_sub_columns+0x284>)
 800f6ce:	5c5b      	ldrb	r3, [r3, r1]
 800f6d0:	4053      	eors	r3, r2
 800f6d2:	b2da      	uxtb	r2, r3
 800f6d4:	7cbb      	ldrb	r3, [r7, #18]
 800f6d6:	4619      	mov	r1, r3
 800f6d8:	4b8a      	ldr	r3, [pc, #552]	; (800f904 <mix_sub_columns+0x288>)
 800f6da:	5c5b      	ldrb	r3, [r3, r1]
 800f6dc:	4053      	eors	r3, r2
 800f6de:	b2d9      	uxtb	r1, r3
 800f6e0:	7dfb      	ldrb	r3, [r7, #23]
 800f6e2:	461a      	mov	r2, r3
 800f6e4:	4b88      	ldr	r3, [pc, #544]	; (800f908 <mix_sub_columns+0x28c>)
 800f6e6:	5c9a      	ldrb	r2, [r3, r2]
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	3301      	adds	r3, #1
 800f6ec:	404a      	eors	r2, r1
 800f6ee:	b2d2      	uxtb	r2, r2
 800f6f0:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800f6f2:	7a3b      	ldrb	r3, [r7, #8]
 800f6f4:	461a      	mov	r2, r3
 800f6f6:	4b84      	ldr	r3, [pc, #528]	; (800f908 <mix_sub_columns+0x28c>)
 800f6f8:	5c9a      	ldrb	r2, [r3, r2]
 800f6fa:	7b7b      	ldrb	r3, [r7, #13]
 800f6fc:	4619      	mov	r1, r3
 800f6fe:	4b82      	ldr	r3, [pc, #520]	; (800f908 <mix_sub_columns+0x28c>)
 800f700:	5c5b      	ldrb	r3, [r3, r1]
 800f702:	4053      	eors	r3, r2
 800f704:	b2da      	uxtb	r2, r3
 800f706:	7cbb      	ldrb	r3, [r7, #18]
 800f708:	4619      	mov	r1, r3
 800f70a:	4b7d      	ldr	r3, [pc, #500]	; (800f900 <mix_sub_columns+0x284>)
 800f70c:	5c5b      	ldrb	r3, [r3, r1]
 800f70e:	4053      	eors	r3, r2
 800f710:	b2d9      	uxtb	r1, r3
 800f712:	7dfb      	ldrb	r3, [r7, #23]
 800f714:	461a      	mov	r2, r3
 800f716:	4b7b      	ldr	r3, [pc, #492]	; (800f904 <mix_sub_columns+0x288>)
 800f718:	5c9a      	ldrb	r2, [r3, r2]
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	3302      	adds	r3, #2
 800f71e:	404a      	eors	r2, r1
 800f720:	b2d2      	uxtb	r2, r2
 800f722:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800f724:	7a3b      	ldrb	r3, [r7, #8]
 800f726:	461a      	mov	r2, r3
 800f728:	4b76      	ldr	r3, [pc, #472]	; (800f904 <mix_sub_columns+0x288>)
 800f72a:	5c9a      	ldrb	r2, [r3, r2]
 800f72c:	7b7b      	ldrb	r3, [r7, #13]
 800f72e:	4619      	mov	r1, r3
 800f730:	4b75      	ldr	r3, [pc, #468]	; (800f908 <mix_sub_columns+0x28c>)
 800f732:	5c5b      	ldrb	r3, [r3, r1]
 800f734:	4053      	eors	r3, r2
 800f736:	b2da      	uxtb	r2, r3
 800f738:	7cbb      	ldrb	r3, [r7, #18]
 800f73a:	4619      	mov	r1, r3
 800f73c:	4b72      	ldr	r3, [pc, #456]	; (800f908 <mix_sub_columns+0x28c>)
 800f73e:	5c5b      	ldrb	r3, [r3, r1]
 800f740:	4053      	eors	r3, r2
 800f742:	b2d9      	uxtb	r1, r3
 800f744:	7dfb      	ldrb	r3, [r7, #23]
 800f746:	461a      	mov	r2, r3
 800f748:	4b6d      	ldr	r3, [pc, #436]	; (800f900 <mix_sub_columns+0x284>)
 800f74a:	5c9a      	ldrb	r2, [r3, r2]
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	3303      	adds	r3, #3
 800f750:	404a      	eors	r2, r1
 800f752:	b2d2      	uxtb	r2, r2
 800f754:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800f756:	7b3b      	ldrb	r3, [r7, #12]
 800f758:	461a      	mov	r2, r3
 800f75a:	4b69      	ldr	r3, [pc, #420]	; (800f900 <mix_sub_columns+0x284>)
 800f75c:	5c9a      	ldrb	r2, [r3, r2]
 800f75e:	7c7b      	ldrb	r3, [r7, #17]
 800f760:	4619      	mov	r1, r3
 800f762:	4b68      	ldr	r3, [pc, #416]	; (800f904 <mix_sub_columns+0x288>)
 800f764:	5c5b      	ldrb	r3, [r3, r1]
 800f766:	4053      	eors	r3, r2
 800f768:	b2da      	uxtb	r2, r3
 800f76a:	7dbb      	ldrb	r3, [r7, #22]
 800f76c:	4619      	mov	r1, r3
 800f76e:	4b66      	ldr	r3, [pc, #408]	; (800f908 <mix_sub_columns+0x28c>)
 800f770:	5c5b      	ldrb	r3, [r3, r1]
 800f772:	4053      	eors	r3, r2
 800f774:	b2d9      	uxtb	r1, r3
 800f776:	7afb      	ldrb	r3, [r7, #11]
 800f778:	461a      	mov	r2, r3
 800f77a:	4b63      	ldr	r3, [pc, #396]	; (800f908 <mix_sub_columns+0x28c>)
 800f77c:	5c9a      	ldrb	r2, [r3, r2]
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	3304      	adds	r3, #4
 800f782:	404a      	eors	r2, r1
 800f784:	b2d2      	uxtb	r2, r2
 800f786:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800f788:	7b3b      	ldrb	r3, [r7, #12]
 800f78a:	461a      	mov	r2, r3
 800f78c:	4b5e      	ldr	r3, [pc, #376]	; (800f908 <mix_sub_columns+0x28c>)
 800f78e:	5c9a      	ldrb	r2, [r3, r2]
 800f790:	7c7b      	ldrb	r3, [r7, #17]
 800f792:	4619      	mov	r1, r3
 800f794:	4b5a      	ldr	r3, [pc, #360]	; (800f900 <mix_sub_columns+0x284>)
 800f796:	5c5b      	ldrb	r3, [r3, r1]
 800f798:	4053      	eors	r3, r2
 800f79a:	b2da      	uxtb	r2, r3
 800f79c:	7dbb      	ldrb	r3, [r7, #22]
 800f79e:	4619      	mov	r1, r3
 800f7a0:	4b58      	ldr	r3, [pc, #352]	; (800f904 <mix_sub_columns+0x288>)
 800f7a2:	5c5b      	ldrb	r3, [r3, r1]
 800f7a4:	4053      	eors	r3, r2
 800f7a6:	b2d9      	uxtb	r1, r3
 800f7a8:	7afb      	ldrb	r3, [r7, #11]
 800f7aa:	461a      	mov	r2, r3
 800f7ac:	4b56      	ldr	r3, [pc, #344]	; (800f908 <mix_sub_columns+0x28c>)
 800f7ae:	5c9a      	ldrb	r2, [r3, r2]
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	3305      	adds	r3, #5
 800f7b4:	404a      	eors	r2, r1
 800f7b6:	b2d2      	uxtb	r2, r2
 800f7b8:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800f7ba:	7b3b      	ldrb	r3, [r7, #12]
 800f7bc:	461a      	mov	r2, r3
 800f7be:	4b52      	ldr	r3, [pc, #328]	; (800f908 <mix_sub_columns+0x28c>)
 800f7c0:	5c9a      	ldrb	r2, [r3, r2]
 800f7c2:	7c7b      	ldrb	r3, [r7, #17]
 800f7c4:	4619      	mov	r1, r3
 800f7c6:	4b50      	ldr	r3, [pc, #320]	; (800f908 <mix_sub_columns+0x28c>)
 800f7c8:	5c5b      	ldrb	r3, [r3, r1]
 800f7ca:	4053      	eors	r3, r2
 800f7cc:	b2da      	uxtb	r2, r3
 800f7ce:	7dbb      	ldrb	r3, [r7, #22]
 800f7d0:	4619      	mov	r1, r3
 800f7d2:	4b4b      	ldr	r3, [pc, #300]	; (800f900 <mix_sub_columns+0x284>)
 800f7d4:	5c5b      	ldrb	r3, [r3, r1]
 800f7d6:	4053      	eors	r3, r2
 800f7d8:	b2d9      	uxtb	r1, r3
 800f7da:	7afb      	ldrb	r3, [r7, #11]
 800f7dc:	461a      	mov	r2, r3
 800f7de:	4b49      	ldr	r3, [pc, #292]	; (800f904 <mix_sub_columns+0x288>)
 800f7e0:	5c9a      	ldrb	r2, [r3, r2]
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	3306      	adds	r3, #6
 800f7e6:	404a      	eors	r2, r1
 800f7e8:	b2d2      	uxtb	r2, r2
 800f7ea:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800f7ec:	7b3b      	ldrb	r3, [r7, #12]
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	4b44      	ldr	r3, [pc, #272]	; (800f904 <mix_sub_columns+0x288>)
 800f7f2:	5c9a      	ldrb	r2, [r3, r2]
 800f7f4:	7c7b      	ldrb	r3, [r7, #17]
 800f7f6:	4619      	mov	r1, r3
 800f7f8:	4b43      	ldr	r3, [pc, #268]	; (800f908 <mix_sub_columns+0x28c>)
 800f7fa:	5c5b      	ldrb	r3, [r3, r1]
 800f7fc:	4053      	eors	r3, r2
 800f7fe:	b2da      	uxtb	r2, r3
 800f800:	7dbb      	ldrb	r3, [r7, #22]
 800f802:	4619      	mov	r1, r3
 800f804:	4b40      	ldr	r3, [pc, #256]	; (800f908 <mix_sub_columns+0x28c>)
 800f806:	5c5b      	ldrb	r3, [r3, r1]
 800f808:	4053      	eors	r3, r2
 800f80a:	b2d9      	uxtb	r1, r3
 800f80c:	7afb      	ldrb	r3, [r7, #11]
 800f80e:	461a      	mov	r2, r3
 800f810:	4b3b      	ldr	r3, [pc, #236]	; (800f900 <mix_sub_columns+0x284>)
 800f812:	5c9a      	ldrb	r2, [r3, r2]
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	3307      	adds	r3, #7
 800f818:	404a      	eors	r2, r1
 800f81a:	b2d2      	uxtb	r2, r2
 800f81c:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800f81e:	7c3b      	ldrb	r3, [r7, #16]
 800f820:	461a      	mov	r2, r3
 800f822:	4b37      	ldr	r3, [pc, #220]	; (800f900 <mix_sub_columns+0x284>)
 800f824:	5c9a      	ldrb	r2, [r3, r2]
 800f826:	7d7b      	ldrb	r3, [r7, #21]
 800f828:	4619      	mov	r1, r3
 800f82a:	4b36      	ldr	r3, [pc, #216]	; (800f904 <mix_sub_columns+0x288>)
 800f82c:	5c5b      	ldrb	r3, [r3, r1]
 800f82e:	4053      	eors	r3, r2
 800f830:	b2da      	uxtb	r2, r3
 800f832:	7abb      	ldrb	r3, [r7, #10]
 800f834:	4619      	mov	r1, r3
 800f836:	4b34      	ldr	r3, [pc, #208]	; (800f908 <mix_sub_columns+0x28c>)
 800f838:	5c5b      	ldrb	r3, [r3, r1]
 800f83a:	4053      	eors	r3, r2
 800f83c:	b2d9      	uxtb	r1, r3
 800f83e:	7bfb      	ldrb	r3, [r7, #15]
 800f840:	461a      	mov	r2, r3
 800f842:	4b31      	ldr	r3, [pc, #196]	; (800f908 <mix_sub_columns+0x28c>)
 800f844:	5c9a      	ldrb	r2, [r3, r2]
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	3308      	adds	r3, #8
 800f84a:	404a      	eors	r2, r1
 800f84c:	b2d2      	uxtb	r2, r2
 800f84e:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800f850:	7c3b      	ldrb	r3, [r7, #16]
 800f852:	461a      	mov	r2, r3
 800f854:	4b2c      	ldr	r3, [pc, #176]	; (800f908 <mix_sub_columns+0x28c>)
 800f856:	5c9a      	ldrb	r2, [r3, r2]
 800f858:	7d7b      	ldrb	r3, [r7, #21]
 800f85a:	4619      	mov	r1, r3
 800f85c:	4b28      	ldr	r3, [pc, #160]	; (800f900 <mix_sub_columns+0x284>)
 800f85e:	5c5b      	ldrb	r3, [r3, r1]
 800f860:	4053      	eors	r3, r2
 800f862:	b2da      	uxtb	r2, r3
 800f864:	7abb      	ldrb	r3, [r7, #10]
 800f866:	4619      	mov	r1, r3
 800f868:	4b26      	ldr	r3, [pc, #152]	; (800f904 <mix_sub_columns+0x288>)
 800f86a:	5c5b      	ldrb	r3, [r3, r1]
 800f86c:	4053      	eors	r3, r2
 800f86e:	b2d9      	uxtb	r1, r3
 800f870:	7bfb      	ldrb	r3, [r7, #15]
 800f872:	461a      	mov	r2, r3
 800f874:	4b24      	ldr	r3, [pc, #144]	; (800f908 <mix_sub_columns+0x28c>)
 800f876:	5c9a      	ldrb	r2, [r3, r2]
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	3309      	adds	r3, #9
 800f87c:	404a      	eors	r2, r1
 800f87e:	b2d2      	uxtb	r2, r2
 800f880:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800f882:	7c3b      	ldrb	r3, [r7, #16]
 800f884:	461a      	mov	r2, r3
 800f886:	4b20      	ldr	r3, [pc, #128]	; (800f908 <mix_sub_columns+0x28c>)
 800f888:	5c9a      	ldrb	r2, [r3, r2]
 800f88a:	7d7b      	ldrb	r3, [r7, #21]
 800f88c:	4619      	mov	r1, r3
 800f88e:	4b1e      	ldr	r3, [pc, #120]	; (800f908 <mix_sub_columns+0x28c>)
 800f890:	5c5b      	ldrb	r3, [r3, r1]
 800f892:	4053      	eors	r3, r2
 800f894:	b2da      	uxtb	r2, r3
 800f896:	7abb      	ldrb	r3, [r7, #10]
 800f898:	4619      	mov	r1, r3
 800f89a:	4b19      	ldr	r3, [pc, #100]	; (800f900 <mix_sub_columns+0x284>)
 800f89c:	5c5b      	ldrb	r3, [r3, r1]
 800f89e:	4053      	eors	r3, r2
 800f8a0:	b2d9      	uxtb	r1, r3
 800f8a2:	7bfb      	ldrb	r3, [r7, #15]
 800f8a4:	461a      	mov	r2, r3
 800f8a6:	4b17      	ldr	r3, [pc, #92]	; (800f904 <mix_sub_columns+0x288>)
 800f8a8:	5c9a      	ldrb	r2, [r3, r2]
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	330a      	adds	r3, #10
 800f8ae:	404a      	eors	r2, r1
 800f8b0:	b2d2      	uxtb	r2, r2
 800f8b2:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800f8b4:	7c3b      	ldrb	r3, [r7, #16]
 800f8b6:	461a      	mov	r2, r3
 800f8b8:	4b12      	ldr	r3, [pc, #72]	; (800f904 <mix_sub_columns+0x288>)
 800f8ba:	5c9a      	ldrb	r2, [r3, r2]
 800f8bc:	7d7b      	ldrb	r3, [r7, #21]
 800f8be:	4619      	mov	r1, r3
 800f8c0:	4b11      	ldr	r3, [pc, #68]	; (800f908 <mix_sub_columns+0x28c>)
 800f8c2:	5c5b      	ldrb	r3, [r3, r1]
 800f8c4:	4053      	eors	r3, r2
 800f8c6:	b2da      	uxtb	r2, r3
 800f8c8:	7abb      	ldrb	r3, [r7, #10]
 800f8ca:	4619      	mov	r1, r3
 800f8cc:	4b0e      	ldr	r3, [pc, #56]	; (800f908 <mix_sub_columns+0x28c>)
 800f8ce:	5c5b      	ldrb	r3, [r3, r1]
 800f8d0:	4053      	eors	r3, r2
 800f8d2:	b2d9      	uxtb	r1, r3
 800f8d4:	7bfb      	ldrb	r3, [r7, #15]
 800f8d6:	461a      	mov	r2, r3
 800f8d8:	4b09      	ldr	r3, [pc, #36]	; (800f900 <mix_sub_columns+0x284>)
 800f8da:	5c9a      	ldrb	r2, [r3, r2]
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	330b      	adds	r3, #11
 800f8e0:	404a      	eors	r2, r1
 800f8e2:	b2d2      	uxtb	r2, r2
 800f8e4:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800f8e6:	7d3b      	ldrb	r3, [r7, #20]
 800f8e8:	461a      	mov	r2, r3
 800f8ea:	4b05      	ldr	r3, [pc, #20]	; (800f900 <mix_sub_columns+0x284>)
 800f8ec:	5c9a      	ldrb	r2, [r3, r2]
 800f8ee:	7a7b      	ldrb	r3, [r7, #9]
 800f8f0:	4619      	mov	r1, r3
 800f8f2:	4b04      	ldr	r3, [pc, #16]	; (800f904 <mix_sub_columns+0x288>)
 800f8f4:	5c5b      	ldrb	r3, [r3, r1]
 800f8f6:	4053      	eors	r3, r2
 800f8f8:	b2da      	uxtb	r2, r3
 800f8fa:	7bbb      	ldrb	r3, [r7, #14]
 800f8fc:	4619      	mov	r1, r3
 800f8fe:	e005      	b.n	800f90c <mix_sub_columns+0x290>
 800f900:	08021ae4 	.word	0x08021ae4
 800f904:	08021be4 	.word	0x08021be4
 800f908:	080219e4 	.word	0x080219e4
 800f90c:	4b2d      	ldr	r3, [pc, #180]	; (800f9c4 <mix_sub_columns+0x348>)
 800f90e:	5c5b      	ldrb	r3, [r3, r1]
 800f910:	4053      	eors	r3, r2
 800f912:	b2d9      	uxtb	r1, r3
 800f914:	7cfb      	ldrb	r3, [r7, #19]
 800f916:	461a      	mov	r2, r3
 800f918:	4b2a      	ldr	r3, [pc, #168]	; (800f9c4 <mix_sub_columns+0x348>)
 800f91a:	5c9a      	ldrb	r2, [r3, r2]
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	330c      	adds	r3, #12
 800f920:	404a      	eors	r2, r1
 800f922:	b2d2      	uxtb	r2, r2
 800f924:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800f926:	7d3b      	ldrb	r3, [r7, #20]
 800f928:	461a      	mov	r2, r3
 800f92a:	4b26      	ldr	r3, [pc, #152]	; (800f9c4 <mix_sub_columns+0x348>)
 800f92c:	5c9a      	ldrb	r2, [r3, r2]
 800f92e:	7a7b      	ldrb	r3, [r7, #9]
 800f930:	4619      	mov	r1, r3
 800f932:	4b25      	ldr	r3, [pc, #148]	; (800f9c8 <mix_sub_columns+0x34c>)
 800f934:	5c5b      	ldrb	r3, [r3, r1]
 800f936:	4053      	eors	r3, r2
 800f938:	b2da      	uxtb	r2, r3
 800f93a:	7bbb      	ldrb	r3, [r7, #14]
 800f93c:	4619      	mov	r1, r3
 800f93e:	4b23      	ldr	r3, [pc, #140]	; (800f9cc <mix_sub_columns+0x350>)
 800f940:	5c5b      	ldrb	r3, [r3, r1]
 800f942:	4053      	eors	r3, r2
 800f944:	b2d9      	uxtb	r1, r3
 800f946:	7cfb      	ldrb	r3, [r7, #19]
 800f948:	461a      	mov	r2, r3
 800f94a:	4b1e      	ldr	r3, [pc, #120]	; (800f9c4 <mix_sub_columns+0x348>)
 800f94c:	5c9a      	ldrb	r2, [r3, r2]
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	330d      	adds	r3, #13
 800f952:	404a      	eors	r2, r1
 800f954:	b2d2      	uxtb	r2, r2
 800f956:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800f958:	7d3b      	ldrb	r3, [r7, #20]
 800f95a:	461a      	mov	r2, r3
 800f95c:	4b19      	ldr	r3, [pc, #100]	; (800f9c4 <mix_sub_columns+0x348>)
 800f95e:	5c9a      	ldrb	r2, [r3, r2]
 800f960:	7a7b      	ldrb	r3, [r7, #9]
 800f962:	4619      	mov	r1, r3
 800f964:	4b17      	ldr	r3, [pc, #92]	; (800f9c4 <mix_sub_columns+0x348>)
 800f966:	5c5b      	ldrb	r3, [r3, r1]
 800f968:	4053      	eors	r3, r2
 800f96a:	b2da      	uxtb	r2, r3
 800f96c:	7bbb      	ldrb	r3, [r7, #14]
 800f96e:	4619      	mov	r1, r3
 800f970:	4b15      	ldr	r3, [pc, #84]	; (800f9c8 <mix_sub_columns+0x34c>)
 800f972:	5c5b      	ldrb	r3, [r3, r1]
 800f974:	4053      	eors	r3, r2
 800f976:	b2d9      	uxtb	r1, r3
 800f978:	7cfb      	ldrb	r3, [r7, #19]
 800f97a:	461a      	mov	r2, r3
 800f97c:	4b13      	ldr	r3, [pc, #76]	; (800f9cc <mix_sub_columns+0x350>)
 800f97e:	5c9a      	ldrb	r2, [r3, r2]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	330e      	adds	r3, #14
 800f984:	404a      	eors	r2, r1
 800f986:	b2d2      	uxtb	r2, r2
 800f988:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800f98a:	7d3b      	ldrb	r3, [r7, #20]
 800f98c:	461a      	mov	r2, r3
 800f98e:	4b0f      	ldr	r3, [pc, #60]	; (800f9cc <mix_sub_columns+0x350>)
 800f990:	5c9a      	ldrb	r2, [r3, r2]
 800f992:	7a7b      	ldrb	r3, [r7, #9]
 800f994:	4619      	mov	r1, r3
 800f996:	4b0b      	ldr	r3, [pc, #44]	; (800f9c4 <mix_sub_columns+0x348>)
 800f998:	5c5b      	ldrb	r3, [r3, r1]
 800f99a:	4053      	eors	r3, r2
 800f99c:	b2da      	uxtb	r2, r3
 800f99e:	7bbb      	ldrb	r3, [r7, #14]
 800f9a0:	4619      	mov	r1, r3
 800f9a2:	4b08      	ldr	r3, [pc, #32]	; (800f9c4 <mix_sub_columns+0x348>)
 800f9a4:	5c5b      	ldrb	r3, [r3, r1]
 800f9a6:	4053      	eors	r3, r2
 800f9a8:	b2d9      	uxtb	r1, r3
 800f9aa:	7cfb      	ldrb	r3, [r7, #19]
 800f9ac:	461a      	mov	r2, r3
 800f9ae:	4b06      	ldr	r3, [pc, #24]	; (800f9c8 <mix_sub_columns+0x34c>)
 800f9b0:	5c9a      	ldrb	r2, [r3, r2]
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	330f      	adds	r3, #15
 800f9b6:	404a      	eors	r2, r1
 800f9b8:	b2d2      	uxtb	r2, r2
 800f9ba:	701a      	strb	r2, [r3, #0]
  }
 800f9bc:	bf00      	nop
 800f9be:	3718      	adds	r7, #24
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	080219e4 	.word	0x080219e4
 800f9c8:	08021ae4 	.word	0x08021ae4
 800f9cc:	08021be4 	.word	0x08021be4

0800f9d0 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b086      	sub	sp, #24
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	60f8      	str	r0, [r7, #12]
 800f9d8:	460b      	mov	r3, r1
 800f9da:	607a      	str	r2, [r7, #4]
 800f9dc:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800f9de:	7afb      	ldrb	r3, [r7, #11]
 800f9e0:	3b10      	subs	r3, #16
 800f9e2:	2b10      	cmp	r3, #16
 800f9e4:	bf8c      	ite	hi
 800f9e6:	2201      	movhi	r2, #1
 800f9e8:	2200      	movls	r2, #0
 800f9ea:	b2d2      	uxtb	r2, r2
 800f9ec:	2a00      	cmp	r2, #0
 800f9ee:	d10b      	bne.n	800fa08 <lorawan_aes_set_key+0x38>
 800f9f0:	4a64      	ldr	r2, [pc, #400]	; (800fb84 <lorawan_aes_set_key+0x1b4>)
 800f9f2:	fa22 f303 	lsr.w	r3, r2, r3
 800f9f6:	f003 0301 	and.w	r3, r3, #1
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	bf14      	ite	ne
 800f9fe:	2301      	movne	r3, #1
 800fa00:	2300      	moveq	r3, #0
 800fa02:	b2db      	uxtb	r3, r3
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d105      	bne.n	800fa14 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800fa10:	23ff      	movs	r3, #255	; 0xff
 800fa12:	e0b2      	b.n	800fb7a <lorawan_aes_set_key+0x1aa>
        break;
 800fa14:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	7afa      	ldrb	r2, [r7, #11]
 800fa1a:	68f9      	ldr	r1, [r7, #12]
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f7ff fbfc 	bl	800f21a <copy_block_nn>
    hi = (keylen + 28) << 2;
 800fa22:	7afb      	ldrb	r3, [r7, #11]
 800fa24:	331c      	adds	r3, #28
 800fa26:	b2db      	uxtb	r3, r3
 800fa28:	009b      	lsls	r3, r3, #2
 800fa2a:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800fa2c:	7c7b      	ldrb	r3, [r7, #17]
 800fa2e:	091b      	lsrs	r3, r3, #4
 800fa30:	b2db      	uxtb	r3, r3
 800fa32:	3b01      	subs	r3, #1
 800fa34:	b2da      	uxtb	r2, r3
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800fa3c:	7afb      	ldrb	r3, [r7, #11]
 800fa3e:	75fb      	strb	r3, [r7, #23]
 800fa40:	2301      	movs	r3, #1
 800fa42:	75bb      	strb	r3, [r7, #22]
 800fa44:	e093      	b.n	800fb6e <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800fa46:	7dfb      	ldrb	r3, [r7, #23]
 800fa48:	3b04      	subs	r3, #4
 800fa4a:	687a      	ldr	r2, [r7, #4]
 800fa4c:	5cd3      	ldrb	r3, [r2, r3]
 800fa4e:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800fa50:	7dfb      	ldrb	r3, [r7, #23]
 800fa52:	3b03      	subs	r3, #3
 800fa54:	687a      	ldr	r2, [r7, #4]
 800fa56:	5cd3      	ldrb	r3, [r2, r3]
 800fa58:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800fa5a:	7dfb      	ldrb	r3, [r7, #23]
 800fa5c:	3b02      	subs	r3, #2
 800fa5e:	687a      	ldr	r2, [r7, #4]
 800fa60:	5cd3      	ldrb	r3, [r2, r3]
 800fa62:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800fa64:	7dfb      	ldrb	r3, [r7, #23]
 800fa66:	3b01      	subs	r3, #1
 800fa68:	687a      	ldr	r2, [r7, #4]
 800fa6a:	5cd3      	ldrb	r3, [r2, r3]
 800fa6c:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800fa6e:	7dfb      	ldrb	r3, [r7, #23]
 800fa70:	7afa      	ldrb	r2, [r7, #11]
 800fa72:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa76:	fb01 f202 	mul.w	r2, r1, r2
 800fa7a:	1a9b      	subs	r3, r3, r2
 800fa7c:	b2db      	uxtb	r3, r3
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d127      	bne.n	800fad2 <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800fa82:	7d7b      	ldrb	r3, [r7, #21]
 800fa84:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800fa86:	7d3b      	ldrb	r3, [r7, #20]
 800fa88:	4a3f      	ldr	r2, [pc, #252]	; (800fb88 <lorawan_aes_set_key+0x1b8>)
 800fa8a:	5cd2      	ldrb	r2, [r2, r3]
 800fa8c:	7dbb      	ldrb	r3, [r7, #22]
 800fa8e:	4053      	eors	r3, r2
 800fa90:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800fa92:	7cfb      	ldrb	r3, [r7, #19]
 800fa94:	4a3c      	ldr	r2, [pc, #240]	; (800fb88 <lorawan_aes_set_key+0x1b8>)
 800fa96:	5cd3      	ldrb	r3, [r2, r3]
 800fa98:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800fa9a:	7cbb      	ldrb	r3, [r7, #18]
 800fa9c:	4a3a      	ldr	r2, [pc, #232]	; (800fb88 <lorawan_aes_set_key+0x1b8>)
 800fa9e:	5cd3      	ldrb	r3, [r2, r3]
 800faa0:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800faa2:	7c3b      	ldrb	r3, [r7, #16]
 800faa4:	4a38      	ldr	r2, [pc, #224]	; (800fb88 <lorawan_aes_set_key+0x1b8>)
 800faa6:	5cd3      	ldrb	r3, [r2, r3]
 800faa8:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800faaa:	7dbb      	ldrb	r3, [r7, #22]
 800faac:	005b      	lsls	r3, r3, #1
 800faae:	b25a      	sxtb	r2, r3
 800fab0:	7dbb      	ldrb	r3, [r7, #22]
 800fab2:	09db      	lsrs	r3, r3, #7
 800fab4:	b2db      	uxtb	r3, r3
 800fab6:	4619      	mov	r1, r3
 800fab8:	0049      	lsls	r1, r1, #1
 800faba:	440b      	add	r3, r1
 800fabc:	4619      	mov	r1, r3
 800fabe:	00c8      	lsls	r0, r1, #3
 800fac0:	4619      	mov	r1, r3
 800fac2:	4603      	mov	r3, r0
 800fac4:	440b      	add	r3, r1
 800fac6:	b2db      	uxtb	r3, r3
 800fac8:	b25b      	sxtb	r3, r3
 800faca:	4053      	eors	r3, r2
 800facc:	b25b      	sxtb	r3, r3
 800face:	75bb      	strb	r3, [r7, #22]
 800fad0:	e01c      	b.n	800fb0c <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800fad2:	7afb      	ldrb	r3, [r7, #11]
 800fad4:	2b18      	cmp	r3, #24
 800fad6:	d919      	bls.n	800fb0c <lorawan_aes_set_key+0x13c>
 800fad8:	7dfb      	ldrb	r3, [r7, #23]
 800fada:	7afa      	ldrb	r2, [r7, #11]
 800fadc:	fbb3 f1f2 	udiv	r1, r3, r2
 800fae0:	fb01 f202 	mul.w	r2, r1, r2
 800fae4:	1a9b      	subs	r3, r3, r2
 800fae6:	b2db      	uxtb	r3, r3
 800fae8:	2b10      	cmp	r3, #16
 800faea:	d10f      	bne.n	800fb0c <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800faec:	7d7b      	ldrb	r3, [r7, #21]
 800faee:	4a26      	ldr	r2, [pc, #152]	; (800fb88 <lorawan_aes_set_key+0x1b8>)
 800faf0:	5cd3      	ldrb	r3, [r2, r3]
 800faf2:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800faf4:	7d3b      	ldrb	r3, [r7, #20]
 800faf6:	4a24      	ldr	r2, [pc, #144]	; (800fb88 <lorawan_aes_set_key+0x1b8>)
 800faf8:	5cd3      	ldrb	r3, [r2, r3]
 800fafa:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800fafc:	7cfb      	ldrb	r3, [r7, #19]
 800fafe:	4a22      	ldr	r2, [pc, #136]	; (800fb88 <lorawan_aes_set_key+0x1b8>)
 800fb00:	5cd3      	ldrb	r3, [r2, r3]
 800fb02:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800fb04:	7cbb      	ldrb	r3, [r7, #18]
 800fb06:	4a20      	ldr	r2, [pc, #128]	; (800fb88 <lorawan_aes_set_key+0x1b8>)
 800fb08:	5cd3      	ldrb	r3, [r2, r3]
 800fb0a:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800fb0c:	7dfa      	ldrb	r2, [r7, #23]
 800fb0e:	7afb      	ldrb	r3, [r7, #11]
 800fb10:	1ad3      	subs	r3, r2, r3
 800fb12:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800fb14:	7c3b      	ldrb	r3, [r7, #16]
 800fb16:	687a      	ldr	r2, [r7, #4]
 800fb18:	5cd1      	ldrb	r1, [r2, r3]
 800fb1a:	7dfb      	ldrb	r3, [r7, #23]
 800fb1c:	7d7a      	ldrb	r2, [r7, #21]
 800fb1e:	404a      	eors	r2, r1
 800fb20:	b2d1      	uxtb	r1, r2
 800fb22:	687a      	ldr	r2, [r7, #4]
 800fb24:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800fb26:	7c3b      	ldrb	r3, [r7, #16]
 800fb28:	3301      	adds	r3, #1
 800fb2a:	687a      	ldr	r2, [r7, #4]
 800fb2c:	5cd1      	ldrb	r1, [r2, r3]
 800fb2e:	7dfb      	ldrb	r3, [r7, #23]
 800fb30:	3301      	adds	r3, #1
 800fb32:	7d3a      	ldrb	r2, [r7, #20]
 800fb34:	404a      	eors	r2, r1
 800fb36:	b2d1      	uxtb	r1, r2
 800fb38:	687a      	ldr	r2, [r7, #4]
 800fb3a:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800fb3c:	7c3b      	ldrb	r3, [r7, #16]
 800fb3e:	3302      	adds	r3, #2
 800fb40:	687a      	ldr	r2, [r7, #4]
 800fb42:	5cd1      	ldrb	r1, [r2, r3]
 800fb44:	7dfb      	ldrb	r3, [r7, #23]
 800fb46:	3302      	adds	r3, #2
 800fb48:	7cfa      	ldrb	r2, [r7, #19]
 800fb4a:	404a      	eors	r2, r1
 800fb4c:	b2d1      	uxtb	r1, r2
 800fb4e:	687a      	ldr	r2, [r7, #4]
 800fb50:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800fb52:	7c3b      	ldrb	r3, [r7, #16]
 800fb54:	3303      	adds	r3, #3
 800fb56:	687a      	ldr	r2, [r7, #4]
 800fb58:	5cd1      	ldrb	r1, [r2, r3]
 800fb5a:	7dfb      	ldrb	r3, [r7, #23]
 800fb5c:	3303      	adds	r3, #3
 800fb5e:	7cba      	ldrb	r2, [r7, #18]
 800fb60:	404a      	eors	r2, r1
 800fb62:	b2d1      	uxtb	r1, r2
 800fb64:	687a      	ldr	r2, [r7, #4]
 800fb66:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800fb68:	7dfb      	ldrb	r3, [r7, #23]
 800fb6a:	3304      	adds	r3, #4
 800fb6c:	75fb      	strb	r3, [r7, #23]
 800fb6e:	7dfa      	ldrb	r2, [r7, #23]
 800fb70:	7c7b      	ldrb	r3, [r7, #17]
 800fb72:	429a      	cmp	r2, r3
 800fb74:	f4ff af67 	bcc.w	800fa46 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800fb78:	2300      	movs	r3, #0
}
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	3718      	adds	r7, #24
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}
 800fb82:	bf00      	nop
 800fb84:	00010101 	.word	0x00010101
 800fb88:	080219e4 	.word	0x080219e4

0800fb8c <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b08a      	sub	sp, #40	; 0x28
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	60f8      	str	r0, [r7, #12]
 800fb94:	60b9      	str	r1, [r7, #8]
 800fb96:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d038      	beq.n	800fc14 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800fba2:	687a      	ldr	r2, [r7, #4]
 800fba4:	f107 0314 	add.w	r3, r7, #20
 800fba8:	68f9      	ldr	r1, [r7, #12]
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f7ff fc07 	bl	800f3be <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800fbb0:	2301      	movs	r3, #1
 800fbb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fbb6:	e014      	b.n	800fbe2 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800fbb8:	f107 0314 	add.w	r3, r7, #20
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	f7ff fd5d 	bl	800f67c <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fbc8:	0112      	lsls	r2, r2, #4
 800fbca:	441a      	add	r2, r3
 800fbcc:	f107 0314 	add.w	r3, r7, #20
 800fbd0:	4611      	mov	r1, r2
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f7ff fcab 	bl	800f52e <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800fbd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbdc:	3301      	adds	r3, #1
 800fbde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800fbe8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fbec:	429a      	cmp	r2, r3
 800fbee:	d3e3      	bcc.n	800fbb8 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800fbf0:	f107 0314 	add.w	r3, r7, #20
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f7ff fca7 	bl	800f548 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fc00:	0112      	lsls	r2, r2, #4
 800fc02:	441a      	add	r2, r3
 800fc04:	f107 0314 	add.w	r3, r7, #20
 800fc08:	4619      	mov	r1, r3
 800fc0a:	68b8      	ldr	r0, [r7, #8]
 800fc0c:	f7ff fbd7 	bl	800f3be <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800fc10:	2300      	movs	r3, #0
 800fc12:	e000      	b.n	800fc16 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800fc14:	23ff      	movs	r3, #255	; 0xff
}
 800fc16:	4618      	mov	r0, r3
 800fc18:	3728      	adds	r7, #40	; 0x28
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
	...

0800fc20 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800fc20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc22:	b0a1      	sub	sp, #132	; 0x84
 800fc24:	af12      	add	r7, sp, #72	; 0x48
 800fc26:	4603      	mov	r3, r0
 800fc28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800fc2c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800fc30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc34:	4611      	mov	r1, r2
 800fc36:	4618      	mov	r0, r3
 800fc38:	f000 fa12 	bl	8010060 <SecureElementGetKeyByID>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d174      	bne.n	800fd2c <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fc42:	2300      	movs	r3, #0
 800fc44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fc48:	e06c      	b.n	800fd24 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800fc4a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fc4e:	4939      	ldr	r1, [pc, #228]	; (800fd34 <PrintKey+0x114>)
 800fc50:	4613      	mov	r3, r2
 800fc52:	005b      	lsls	r3, r3, #1
 800fc54:	4413      	add	r3, r2
 800fc56:	009b      	lsls	r3, r3, #2
 800fc58:	440b      	add	r3, r1
 800fc5a:	781b      	ldrb	r3, [r3, #0]
 800fc5c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800fc60:	429a      	cmp	r2, r3
 800fc62:	d15a      	bne.n	800fd1a <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800fc64:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fc68:	4932      	ldr	r1, [pc, #200]	; (800fd34 <PrintKey+0x114>)
 800fc6a:	4613      	mov	r3, r2
 800fc6c:	005b      	lsls	r3, r3, #1
 800fc6e:	4413      	add	r3, r2
 800fc70:	009b      	lsls	r3, r3, #2
 800fc72:	440b      	add	r3, r1
 800fc74:	3308      	adds	r3, #8
 800fc76:	6819      	ldr	r1, [r3, #0]
 800fc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc7a:	785b      	ldrb	r3, [r3, #1]
 800fc7c:	461d      	mov	r5, r3
 800fc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc80:	789b      	ldrb	r3, [r3, #2]
 800fc82:	461e      	mov	r6, r3
 800fc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc86:	78db      	ldrb	r3, [r3, #3]
 800fc88:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc8c:	791b      	ldrb	r3, [r3, #4]
 800fc8e:	627b      	str	r3, [r7, #36]	; 0x24
 800fc90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc92:	795b      	ldrb	r3, [r3, #5]
 800fc94:	623b      	str	r3, [r7, #32]
 800fc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc98:	799b      	ldrb	r3, [r3, #6]
 800fc9a:	61fb      	str	r3, [r7, #28]
 800fc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc9e:	79db      	ldrb	r3, [r3, #7]
 800fca0:	61bb      	str	r3, [r7, #24]
 800fca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca4:	7a1b      	ldrb	r3, [r3, #8]
 800fca6:	617b      	str	r3, [r7, #20]
 800fca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcaa:	7a5b      	ldrb	r3, [r3, #9]
 800fcac:	613b      	str	r3, [r7, #16]
 800fcae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb0:	7a9b      	ldrb	r3, [r3, #10]
 800fcb2:	60fb      	str	r3, [r7, #12]
 800fcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb6:	7adb      	ldrb	r3, [r3, #11]
 800fcb8:	60bb      	str	r3, [r7, #8]
 800fcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcbc:	7b1b      	ldrb	r3, [r3, #12]
 800fcbe:	607b      	str	r3, [r7, #4]
 800fcc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc2:	7b5b      	ldrb	r3, [r3, #13]
 800fcc4:	461c      	mov	r4, r3
 800fcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc8:	7b9b      	ldrb	r3, [r3, #14]
 800fcca:	4618      	mov	r0, r3
 800fccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcce:	7bdb      	ldrb	r3, [r3, #15]
 800fcd0:	461a      	mov	r2, r3
 800fcd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd4:	7c1b      	ldrb	r3, [r3, #16]
 800fcd6:	9310      	str	r3, [sp, #64]	; 0x40
 800fcd8:	920f      	str	r2, [sp, #60]	; 0x3c
 800fcda:	900e      	str	r0, [sp, #56]	; 0x38
 800fcdc:	940d      	str	r4, [sp, #52]	; 0x34
 800fcde:	687a      	ldr	r2, [r7, #4]
 800fce0:	920c      	str	r2, [sp, #48]	; 0x30
 800fce2:	68ba      	ldr	r2, [r7, #8]
 800fce4:	920b      	str	r2, [sp, #44]	; 0x2c
 800fce6:	68fa      	ldr	r2, [r7, #12]
 800fce8:	920a      	str	r2, [sp, #40]	; 0x28
 800fcea:	693a      	ldr	r2, [r7, #16]
 800fcec:	9209      	str	r2, [sp, #36]	; 0x24
 800fcee:	697a      	ldr	r2, [r7, #20]
 800fcf0:	9208      	str	r2, [sp, #32]
 800fcf2:	69ba      	ldr	r2, [r7, #24]
 800fcf4:	9207      	str	r2, [sp, #28]
 800fcf6:	69fa      	ldr	r2, [r7, #28]
 800fcf8:	9206      	str	r2, [sp, #24]
 800fcfa:	6a3a      	ldr	r2, [r7, #32]
 800fcfc:	9205      	str	r2, [sp, #20]
 800fcfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd00:	9204      	str	r2, [sp, #16]
 800fd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd04:	9303      	str	r3, [sp, #12]
 800fd06:	9602      	str	r6, [sp, #8]
 800fd08:	9501      	str	r5, [sp, #4]
 800fd0a:	9100      	str	r1, [sp, #0]
 800fd0c:	4b0a      	ldr	r3, [pc, #40]	; (800fd38 <PrintKey+0x118>)
 800fd0e:	2200      	movs	r2, #0
 800fd10:	2100      	movs	r1, #0
 800fd12:	2002      	movs	r0, #2
 800fd14:	f010 f944 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
 800fd18:	e008      	b.n	800fd2c <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fd1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd1e:	3301      	adds	r3, #1
 800fd20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fd24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd28:	2b0a      	cmp	r3, #10
 800fd2a:	d98e      	bls.n	800fc4a <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800fd2c:	373c      	adds	r7, #60	; 0x3c
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd32:	bf00      	nop
 800fd34:	08021ce4 	.word	0x08021ce4
 800fd38:	08021574 	.word	0x08021574

0800fd3c <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800fd3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd3e:	b091      	sub	sp, #68	; 0x44
 800fd40:	af08      	add	r7, sp, #32
 800fd42:	4603      	mov	r3, r0
 800fd44:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800fd46:	2300      	movs	r3, #0
 800fd48:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800fd4a:	f107 0310 	add.w	r3, r7, #16
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f000 fbda 	bl	8010508 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800fd54:	7c3b      	ldrb	r3, [r7, #16]
 800fd56:	7c7a      	ldrb	r2, [r7, #17]
 800fd58:	7cb9      	ldrb	r1, [r7, #18]
 800fd5a:	7cf8      	ldrb	r0, [r7, #19]
 800fd5c:	7d3c      	ldrb	r4, [r7, #20]
 800fd5e:	7d7d      	ldrb	r5, [r7, #21]
 800fd60:	7dbe      	ldrb	r6, [r7, #22]
 800fd62:	f897 c017 	ldrb.w	ip, [r7, #23]
 800fd66:	f8cd c01c 	str.w	ip, [sp, #28]
 800fd6a:	9606      	str	r6, [sp, #24]
 800fd6c:	9505      	str	r5, [sp, #20]
 800fd6e:	9404      	str	r4, [sp, #16]
 800fd70:	9003      	str	r0, [sp, #12]
 800fd72:	9102      	str	r1, [sp, #8]
 800fd74:	9201      	str	r2, [sp, #4]
 800fd76:	9300      	str	r3, [sp, #0]
 800fd78:	4b24      	ldr	r3, [pc, #144]	; (800fe0c <PrintIds+0xd0>)
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	2100      	movs	r1, #0
 800fd7e:	2002      	movs	r0, #2
 800fd80:	f010 f90e 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800fd84:	f107 0318 	add.w	r3, r7, #24
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f000 fbed 	bl	8010568 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800fd8e:	7e3b      	ldrb	r3, [r7, #24]
 800fd90:	7e7a      	ldrb	r2, [r7, #25]
 800fd92:	7eb9      	ldrb	r1, [r7, #26]
 800fd94:	7ef8      	ldrb	r0, [r7, #27]
 800fd96:	7f3c      	ldrb	r4, [r7, #28]
 800fd98:	7f7d      	ldrb	r5, [r7, #29]
 800fd9a:	7fbe      	ldrb	r6, [r7, #30]
 800fd9c:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800fda0:	f8cd c01c 	str.w	ip, [sp, #28]
 800fda4:	9606      	str	r6, [sp, #24]
 800fda6:	9505      	str	r5, [sp, #20]
 800fda8:	9404      	str	r4, [sp, #16]
 800fdaa:	9003      	str	r0, [sp, #12]
 800fdac:	9102      	str	r1, [sp, #8]
 800fdae:	9201      	str	r2, [sp, #4]
 800fdb0:	9300      	str	r3, [sp, #0]
 800fdb2:	4b17      	ldr	r3, [pc, #92]	; (800fe10 <PrintIds+0xd4>)
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	2100      	movs	r1, #0
 800fdb8:	2002      	movs	r0, #2
 800fdba:	f010 f8f1 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800fdbe:	f107 020c 	add.w	r2, r7, #12
 800fdc2:	79fb      	ldrb	r3, [r7, #7]
 800fdc4:	4611      	mov	r1, r2
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	f000 fc00 	bl	80105cc <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800fdcc:	f107 030c 	add.w	r3, r7, #12
 800fdd0:	3303      	adds	r3, #3
 800fdd2:	781b      	ldrb	r3, [r3, #0]
 800fdd4:	461a      	mov	r2, r3
 800fdd6:	f107 030c 	add.w	r3, r7, #12
 800fdda:	3302      	adds	r3, #2
 800fddc:	781b      	ldrb	r3, [r3, #0]
 800fdde:	4619      	mov	r1, r3
 800fde0:	f107 030c 	add.w	r3, r7, #12
 800fde4:	3301      	adds	r3, #1
 800fde6:	781b      	ldrb	r3, [r3, #0]
 800fde8:	4618      	mov	r0, r3
 800fdea:	f107 030c 	add.w	r3, r7, #12
 800fdee:	781b      	ldrb	r3, [r3, #0]
 800fdf0:	9303      	str	r3, [sp, #12]
 800fdf2:	9002      	str	r0, [sp, #8]
 800fdf4:	9101      	str	r1, [sp, #4]
 800fdf6:	9200      	str	r2, [sp, #0]
 800fdf8:	4b06      	ldr	r3, [pc, #24]	; (800fe14 <PrintIds+0xd8>)
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	2100      	movs	r1, #0
 800fdfe:	2002      	movs	r0, #2
 800fe00:	f010 f8ce 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800fe04:	bf00      	nop
 800fe06:	3724      	adds	r7, #36	; 0x24
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe0c:	080215d0 	.word	0x080215d0
 800fe10:	08021610 	.word	0x08021610
 800fe14:	08021650 	.word	0x08021650

0800fe18 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800fe18:	b480      	push	{r7}
 800fe1a:	b085      	sub	sp, #20
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	4603      	mov	r3, r0
 800fe20:	6039      	str	r1, [r7, #0]
 800fe22:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fe24:	2300      	movs	r3, #0
 800fe26:	73fb      	strb	r3, [r7, #15]
 800fe28:	e01a      	b.n	800fe60 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800fe2a:	4b12      	ldr	r3, [pc, #72]	; (800fe74 <GetKeyByID+0x5c>)
 800fe2c:	6819      	ldr	r1, [r3, #0]
 800fe2e:	7bfa      	ldrb	r2, [r7, #15]
 800fe30:	4613      	mov	r3, r2
 800fe32:	011b      	lsls	r3, r3, #4
 800fe34:	4413      	add	r3, r2
 800fe36:	440b      	add	r3, r1
 800fe38:	3318      	adds	r3, #24
 800fe3a:	781b      	ldrb	r3, [r3, #0]
 800fe3c:	79fa      	ldrb	r2, [r7, #7]
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	d10b      	bne.n	800fe5a <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800fe42:	4b0c      	ldr	r3, [pc, #48]	; (800fe74 <GetKeyByID+0x5c>)
 800fe44:	6819      	ldr	r1, [r3, #0]
 800fe46:	7bfa      	ldrb	r2, [r7, #15]
 800fe48:	4613      	mov	r3, r2
 800fe4a:	011b      	lsls	r3, r3, #4
 800fe4c:	4413      	add	r3, r2
 800fe4e:	3318      	adds	r3, #24
 800fe50:	18ca      	adds	r2, r1, r3
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800fe56:	2300      	movs	r3, #0
 800fe58:	e006      	b.n	800fe68 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fe5a:	7bfb      	ldrb	r3, [r7, #15]
 800fe5c:	3301      	adds	r3, #1
 800fe5e:	73fb      	strb	r3, [r7, #15]
 800fe60:	7bfb      	ldrb	r3, [r7, #15]
 800fe62:	2b0a      	cmp	r3, #10
 800fe64:	d9e1      	bls.n	800fe2a <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800fe66:	2303      	movs	r3, #3
}
 800fe68:	4618      	mov	r0, r3
 800fe6a:	3714      	adds	r7, #20
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	bc80      	pop	{r7}
 800fe70:	4770      	bx	lr
 800fe72:	bf00      	nop
 800fe74:	20000724 	.word	0x20000724

0800fe78 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800fe78:	b590      	push	{r4, r7, lr}
 800fe7a:	b0d1      	sub	sp, #324	; 0x144
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800fe82:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800fe86:	6020      	str	r0, [r4, #0]
 800fe88:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800fe8c:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800fe90:	6001      	str	r1, [r0, #0]
 800fe92:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800fe96:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800fe9a:	600a      	str	r2, [r1, #0]
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fea2:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800fea6:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800fea8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800feac:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d003      	beq.n	800febe <ComputeCmac+0x46>
 800feb6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800feba:	2b00      	cmp	r3, #0
 800febc:	d101      	bne.n	800fec2 <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800febe:	2302      	movs	r3, #2
 800fec0:	e05d      	b.n	800ff7e <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800fec2:	f107 0314 	add.w	r3, r7, #20
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7fe ff02 	bl	800ecd0 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800fecc:	f107 0210 	add.w	r2, r7, #16
 800fed0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fed4:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800fed8:	781b      	ldrb	r3, [r3, #0]
 800feda:	4611      	mov	r1, r2
 800fedc:	4618      	mov	r0, r3
 800fede:	f7ff ff9b 	bl	800fe18 <GetKeyByID>
 800fee2:	4603      	mov	r3, r0
 800fee4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800fee8:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800feec:	2b00      	cmp	r3, #0
 800feee:	d144      	bne.n	800ff7a <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800fef0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fef4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	1c5a      	adds	r2, r3, #1
 800fefc:	f107 0314 	add.w	r3, r7, #20
 800ff00:	4611      	mov	r1, r2
 800ff02:	4618      	mov	r0, r3
 800ff04:	f7fe fefd 	bl	800ed02 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800ff08:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ff0c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d009      	beq.n	800ff2a <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800ff16:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ff1a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ff1e:	f107 0014 	add.w	r0, r7, #20
 800ff22:	2210      	movs	r2, #16
 800ff24:	6819      	ldr	r1, [r3, #0]
 800ff26:	f7fe fefb 	bl	800ed20 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800ff2a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ff2e:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800ff32:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ff36:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ff3a:	f107 0014 	add.w	r0, r7, #20
 800ff3e:	6812      	ldr	r2, [r2, #0]
 800ff40:	6819      	ldr	r1, [r3, #0]
 800ff42:	f7fe feed 	bl	800ed20 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800ff46:	f107 0214 	add.w	r2, r7, #20
 800ff4a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800ff4e:	4611      	mov	r1, r2
 800ff50:	4618      	mov	r0, r3
 800ff52:	f7fe ffa7 	bl	800eea4 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800ff56:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800ff5a:	461a      	mov	r2, r3
 800ff5c:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800ff60:	021b      	lsls	r3, r3, #8
 800ff62:	431a      	orrs	r2, r3
 800ff64:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800ff68:	041b      	lsls	r3, r3, #16
 800ff6a:	431a      	orrs	r2, r3
 800ff6c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800ff70:	061b      	lsls	r3, r3, #24
 800ff72:	431a      	orrs	r2, r3
 800ff74:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ff78:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800ff7a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bd90      	pop	{r4, r7, pc}

0800ff88 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b082      	sub	sp, #8
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d101      	bne.n	800ff9a <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ff96:	2302      	movs	r3, #2
 800ff98:	e00a      	b.n	800ffb0 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800ff9a:	4a07      	ldr	r2, [pc, #28]	; (800ffb8 <SecureElementInit+0x30>)
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800ffa0:	4b05      	ldr	r3, [pc, #20]	; (800ffb8 <SecureElementInit+0x30>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	22d8      	movs	r2, #216	; 0xd8
 800ffa6:	4905      	ldr	r1, [pc, #20]	; (800ffbc <SecureElementInit+0x34>)
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f00b fc34 	bl	801b816 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800ffae:	2300      	movs	r3, #0
}
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	3708      	adds	r7, #8
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bd80      	pop	{r7, pc}
 800ffb8:	20000724 	.word	0x20000724
 800ffbc:	08021f80 	.word	0x08021f80

0800ffc0 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b086      	sub	sp, #24
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800ffca:	2300      	movs	r3, #0
 800ffcc:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800ffce:	f107 030c 	add.w	r3, r7, #12
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	f000 fa98 	bl	8010508 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800ffd8:	f107 0308 	add.w	r3, r7, #8
 800ffdc:	4619      	mov	r1, r3
 800ffde:	2001      	movs	r0, #1
 800ffe0:	f000 faf4 	bl	80105cc <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d024      	beq.n	8010034 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800ffea:	2300      	movs	r3, #0
 800ffec:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800ffee:	2300      	movs	r3, #0
 800fff0:	75bb      	strb	r3, [r7, #22]
 800fff2:	e00c      	b.n	801000e <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800fff4:	7dbb      	ldrb	r3, [r7, #22]
 800fff6:	3318      	adds	r3, #24
 800fff8:	443b      	add	r3, r7
 800fffa:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d002      	beq.n	8010008 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 8010002:	2301      	movs	r3, #1
 8010004:	75fb      	strb	r3, [r7, #23]
                break;
 8010006:	e005      	b.n	8010014 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 8010008:	7dbb      	ldrb	r3, [r7, #22]
 801000a:	3301      	adds	r3, #1
 801000c:	75bb      	strb	r3, [r7, #22]
 801000e:	7dbb      	ldrb	r3, [r7, #22]
 8010010:	2b07      	cmp	r3, #7
 8010012:	d9ef      	bls.n	800fff4 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 8010014:	7dfb      	ldrb	r3, [r7, #23]
 8010016:	f083 0301 	eor.w	r3, r3, #1
 801001a:	b2db      	uxtb	r3, r3
 801001c:	2b00      	cmp	r3, #0
 801001e:	d009      	beq.n	8010034 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 8010020:	f107 020c 	add.w	r2, r7, #12
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	4610      	mov	r0, r2
 8010028:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 801002a:	f107 030c 	add.w	r3, r7, #12
 801002e:	4618      	mov	r0, r3
 8010030:	f000 fa52 	bl	80104d8 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d00c      	beq.n	8010054 <SecureElementInitMcuID+0x94>
 801003a:	68bb      	ldr	r3, [r7, #8]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d109      	bne.n	8010054 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 8010040:	f107 0208 	add.w	r2, r7, #8
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	4610      	mov	r0, r2
 8010048:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 801004a:	68bb      	ldr	r3, [r7, #8]
 801004c:	4619      	mov	r1, r3
 801004e:	2001      	movs	r0, #1
 8010050:	f000 faa2 	bl	8010598 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 8010054:	2300      	movs	r3, #0
}
 8010056:	4618      	mov	r0, r3
 8010058:	3718      	adds	r7, #24
 801005a:	46bd      	mov	sp, r7
 801005c:	bd80      	pop	{r7, pc}
	...

08010060 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 8010060:	b480      	push	{r7}
 8010062:	b085      	sub	sp, #20
 8010064:	af00      	add	r7, sp, #0
 8010066:	4603      	mov	r3, r0
 8010068:	6039      	str	r1, [r7, #0]
 801006a:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801006c:	2300      	movs	r3, #0
 801006e:	73fb      	strb	r3, [r7, #15]
 8010070:	e01a      	b.n	80100a8 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8010072:	4b12      	ldr	r3, [pc, #72]	; (80100bc <SecureElementGetKeyByID+0x5c>)
 8010074:	6819      	ldr	r1, [r3, #0]
 8010076:	7bfa      	ldrb	r2, [r7, #15]
 8010078:	4613      	mov	r3, r2
 801007a:	011b      	lsls	r3, r3, #4
 801007c:	4413      	add	r3, r2
 801007e:	440b      	add	r3, r1
 8010080:	3318      	adds	r3, #24
 8010082:	781b      	ldrb	r3, [r3, #0]
 8010084:	79fa      	ldrb	r2, [r7, #7]
 8010086:	429a      	cmp	r2, r3
 8010088:	d10b      	bne.n	80100a2 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 801008a:	4b0c      	ldr	r3, [pc, #48]	; (80100bc <SecureElementGetKeyByID+0x5c>)
 801008c:	6819      	ldr	r1, [r3, #0]
 801008e:	7bfa      	ldrb	r2, [r7, #15]
 8010090:	4613      	mov	r3, r2
 8010092:	011b      	lsls	r3, r3, #4
 8010094:	4413      	add	r3, r2
 8010096:	3318      	adds	r3, #24
 8010098:	18ca      	adds	r2, r1, r3
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 801009e:	2300      	movs	r3, #0
 80100a0:	e006      	b.n	80100b0 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80100a2:	7bfb      	ldrb	r3, [r7, #15]
 80100a4:	3301      	adds	r3, #1
 80100a6:	73fb      	strb	r3, [r7, #15]
 80100a8:	7bfb      	ldrb	r3, [r7, #15]
 80100aa:	2b0a      	cmp	r3, #10
 80100ac:	d9e1      	bls.n	8010072 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80100ae:	2303      	movs	r3, #3
}
 80100b0:	4618      	mov	r0, r3
 80100b2:	3714      	adds	r7, #20
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bc80      	pop	{r7}
 80100b8:	4770      	bx	lr
 80100ba:	bf00      	nop
 80100bc:	20000724 	.word	0x20000724

080100c0 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 80100c4:	2000      	movs	r0, #0
 80100c6:	f7ff fdab 	bl	800fc20 <PrintKey>
    PrintKey( NWK_KEY );
 80100ca:	2001      	movs	r0, #1
 80100cc:	f7ff fda8 	bl	800fc20 <PrintKey>
    PrintKey( APP_S_KEY );
 80100d0:	2009      	movs	r0, #9
 80100d2:	f7ff fda5 	bl	800fc20 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 80100d6:	2008      	movs	r0, #8
 80100d8:	f7ff fda2 	bl	800fc20 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 80100dc:	2000      	movs	r0, #0
 80100de:	f7ff fe2d 	bl	800fd3c <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 80100e2:	2300      	movs	r3, #0
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	bd80      	pop	{r7, pc}

080100e8 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b082      	sub	sp, #8
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	4603      	mov	r3, r0
 80100f0:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 80100f2:	200b      	movs	r0, #11
 80100f4:	f7ff fd94 	bl	800fc20 <PrintKey>
    PrintKey( MC_KE_KEY );
 80100f8:	200c      	movs	r0, #12
 80100fa:	f7ff fd91 	bl	800fc20 <PrintKey>
    PrintKey( APP_S_KEY );
 80100fe:	2009      	movs	r0, #9
 8010100:	f7ff fd8e 	bl	800fc20 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 8010104:	2008      	movs	r0, #8
 8010106:	f7ff fd8b 	bl	800fc20 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 801010a:	200a      	movs	r0, #10
 801010c:	f7ff fd88 	bl	800fc20 <PrintKey>
    PrintIds( mode );
 8010110:	79fb      	ldrb	r3, [r7, #7]
 8010112:	4618      	mov	r0, r3
 8010114:	f7ff fe12 	bl	800fd3c <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 8010118:	2300      	movs	r3, #0
}
 801011a:	4618      	mov	r0, r3
 801011c:	3708      	adds	r7, #8
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}
	...

08010124 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b088      	sub	sp, #32
 8010128:	af00      	add	r7, sp, #0
 801012a:	4603      	mov	r3, r0
 801012c:	6039      	str	r1, [r7, #0]
 801012e:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d101      	bne.n	801013a <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8010136:	2302      	movs	r3, #2
 8010138:	e04c      	b.n	80101d4 <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801013a:	2300      	movs	r3, #0
 801013c:	77fb      	strb	r3, [r7, #31]
 801013e:	e045      	b.n	80101cc <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8010140:	4b26      	ldr	r3, [pc, #152]	; (80101dc <SecureElementSetKey+0xb8>)
 8010142:	6819      	ldr	r1, [r3, #0]
 8010144:	7ffa      	ldrb	r2, [r7, #31]
 8010146:	4613      	mov	r3, r2
 8010148:	011b      	lsls	r3, r3, #4
 801014a:	4413      	add	r3, r2
 801014c:	440b      	add	r3, r1
 801014e:	3318      	adds	r3, #24
 8010150:	781b      	ldrb	r3, [r3, #0]
 8010152:	79fa      	ldrb	r2, [r7, #7]
 8010154:	429a      	cmp	r2, r3
 8010156:	d136      	bne.n	80101c6 <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 8010158:	79fb      	ldrb	r3, [r7, #7]
 801015a:	2b0d      	cmp	r3, #13
 801015c:	d123      	bne.n	80101a6 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 801015e:	2306      	movs	r3, #6
 8010160:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 8010162:	2300      	movs	r3, #0
 8010164:	60fb      	str	r3, [r7, #12]
 8010166:	f107 0310 	add.w	r3, r7, #16
 801016a:	2200      	movs	r2, #0
 801016c:	601a      	str	r2, [r3, #0]
 801016e:	605a      	str	r2, [r3, #4]
 8010170:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 8010172:	f107 030c 	add.w	r3, r7, #12
 8010176:	220c      	movs	r2, #12
 8010178:	2110      	movs	r1, #16
 801017a:	6838      	ldr	r0, [r7, #0]
 801017c:	f000 f876 	bl	801026c <SecureElementAesEncrypt>
 8010180:	4603      	mov	r3, r0
 8010182:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8010184:	4b15      	ldr	r3, [pc, #84]	; (80101dc <SecureElementSetKey+0xb8>)
 8010186:	6819      	ldr	r1, [r3, #0]
 8010188:	7ffa      	ldrb	r2, [r7, #31]
 801018a:	4613      	mov	r3, r2
 801018c:	011b      	lsls	r3, r3, #4
 801018e:	4413      	add	r3, r2
 8010190:	3318      	adds	r3, #24
 8010192:	440b      	add	r3, r1
 8010194:	3301      	adds	r3, #1
 8010196:	f107 010c 	add.w	r1, r7, #12
 801019a:	2210      	movs	r2, #16
 801019c:	4618      	mov	r0, r3
 801019e:	f00b fb3a 	bl	801b816 <memcpy1>
                return retval;
 80101a2:	7fbb      	ldrb	r3, [r7, #30]
 80101a4:	e016      	b.n	80101d4 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 80101a6:	4b0d      	ldr	r3, [pc, #52]	; (80101dc <SecureElementSetKey+0xb8>)
 80101a8:	6819      	ldr	r1, [r3, #0]
 80101aa:	7ffa      	ldrb	r2, [r7, #31]
 80101ac:	4613      	mov	r3, r2
 80101ae:	011b      	lsls	r3, r3, #4
 80101b0:	4413      	add	r3, r2
 80101b2:	3318      	adds	r3, #24
 80101b4:	440b      	add	r3, r1
 80101b6:	3301      	adds	r3, #1
 80101b8:	2210      	movs	r2, #16
 80101ba:	6839      	ldr	r1, [r7, #0]
 80101bc:	4618      	mov	r0, r3
 80101be:	f00b fb2a 	bl	801b816 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 80101c2:	2300      	movs	r3, #0
 80101c4:	e006      	b.n	80101d4 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80101c6:	7ffb      	ldrb	r3, [r7, #31]
 80101c8:	3301      	adds	r3, #1
 80101ca:	77fb      	strb	r3, [r7, #31]
 80101cc:	7ffb      	ldrb	r3, [r7, #31]
 80101ce:	2b0a      	cmp	r3, #10
 80101d0:	d9b6      	bls.n	8010140 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80101d2:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 80101d4:	4618      	mov	r0, r3
 80101d6:	3720      	adds	r7, #32
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}
 80101dc:	20000724 	.word	0x20000724

080101e0 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b086      	sub	sp, #24
 80101e4:	af02      	add	r7, sp, #8
 80101e6:	60f8      	str	r0, [r7, #12]
 80101e8:	60b9      	str	r1, [r7, #8]
 80101ea:	607a      	str	r2, [r7, #4]
 80101ec:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 80101ee:	78fb      	ldrb	r3, [r7, #3]
 80101f0:	2b0b      	cmp	r3, #11
 80101f2:	d901      	bls.n	80101f8 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80101f4:	2303      	movs	r3, #3
 80101f6:	e009      	b.n	801020c <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 80101f8:	78fa      	ldrb	r2, [r7, #3]
 80101fa:	69bb      	ldr	r3, [r7, #24]
 80101fc:	9300      	str	r3, [sp, #0]
 80101fe:	4613      	mov	r3, r2
 8010200:	687a      	ldr	r2, [r7, #4]
 8010202:	68b9      	ldr	r1, [r7, #8]
 8010204:	68f8      	ldr	r0, [r7, #12]
 8010206:	f7ff fe37 	bl	800fe78 <ComputeCmac>
 801020a:	4603      	mov	r3, r0
}
 801020c:	4618      	mov	r0, r3
 801020e:	3710      	adds	r7, #16
 8010210:	46bd      	mov	sp, r7
 8010212:	bd80      	pop	{r7, pc}

08010214 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b088      	sub	sp, #32
 8010218:	af02      	add	r7, sp, #8
 801021a:	60f8      	str	r0, [r7, #12]
 801021c:	60b9      	str	r1, [r7, #8]
 801021e:	607a      	str	r2, [r7, #4]
 8010220:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d101      	bne.n	801022c <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8010228:	2302      	movs	r3, #2
 801022a:	e01b      	b.n	8010264 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 801022c:	2306      	movs	r3, #6
 801022e:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 8010230:	2300      	movs	r3, #0
 8010232:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8010234:	78fa      	ldrb	r2, [r7, #3]
 8010236:	f107 0310 	add.w	r3, r7, #16
 801023a:	9300      	str	r3, [sp, #0]
 801023c:	4613      	mov	r3, r2
 801023e:	68ba      	ldr	r2, [r7, #8]
 8010240:	68f9      	ldr	r1, [r7, #12]
 8010242:	2000      	movs	r0, #0
 8010244:	f7ff fe18 	bl	800fe78 <ComputeCmac>
 8010248:	4603      	mov	r3, r0
 801024a:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 801024c:	7dfb      	ldrb	r3, [r7, #23]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d001      	beq.n	8010256 <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 8010252:	7dfb      	ldrb	r3, [r7, #23]
 8010254:	e006      	b.n	8010264 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 8010256:	693b      	ldr	r3, [r7, #16]
 8010258:	687a      	ldr	r2, [r7, #4]
 801025a:	429a      	cmp	r2, r3
 801025c:	d001      	beq.n	8010262 <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 801025e:	2301      	movs	r3, #1
 8010260:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 8010262:	7dfb      	ldrb	r3, [r7, #23]
}
 8010264:	4618      	mov	r0, r3
 8010266:	3718      	adds	r7, #24
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}

0801026c <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b0c2      	sub	sp, #264	; 0x108
 8010270:	af00      	add	r7, sp, #0
 8010272:	60f8      	str	r0, [r7, #12]
 8010274:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010278:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 801027c:	6001      	str	r1, [r0, #0]
 801027e:	4611      	mov	r1, r2
 8010280:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8010284:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8010288:	6013      	str	r3, [r2, #0]
 801028a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801028e:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8010292:	460a      	mov	r2, r1
 8010294:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d006      	beq.n	80102aa <SecureElementAesEncrypt+0x3e>
 801029c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d101      	bne.n	80102ae <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80102aa:	2302      	movs	r3, #2
 80102ac:	e059      	b.n	8010362 <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 80102ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102b2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	f003 030f 	and.w	r3, r3, #15
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d001      	beq.n	80102c4 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80102c0:	2305      	movs	r3, #5
 80102c2:	e04e      	b.n	8010362 <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 80102c4:	f107 0314 	add.w	r3, r7, #20
 80102c8:	22f0      	movs	r2, #240	; 0xf0
 80102ca:	2100      	movs	r1, #0
 80102cc:	4618      	mov	r0, r3
 80102ce:	f00b fadd 	bl	801b88c <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 80102d2:	f107 0210 	add.w	r2, r7, #16
 80102d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102da:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80102de:	781b      	ldrb	r3, [r3, #0]
 80102e0:	4611      	mov	r1, r2
 80102e2:	4618      	mov	r0, r3
 80102e4:	f7ff fd98 	bl	800fe18 <GetKeyByID>
 80102e8:	4603      	mov	r3, r0
 80102ea:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 80102ee:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d133      	bne.n	801035e <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 80102f6:	693b      	ldr	r3, [r7, #16]
 80102f8:	3301      	adds	r3, #1
 80102fa:	f107 0214 	add.w	r2, r7, #20
 80102fe:	2110      	movs	r1, #16
 8010300:	4618      	mov	r0, r3
 8010302:	f7ff fb65 	bl	800f9d0 <lorawan_aes_set_key>

        uint8_t block = 0;
 8010306:	2300      	movs	r3, #0
 8010308:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 801030c:	e020      	b.n	8010350 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 801030e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8010312:	68fa      	ldr	r2, [r7, #12]
 8010314:	18d0      	adds	r0, r2, r3
 8010316:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 801031a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 801031e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8010322:	6812      	ldr	r2, [r2, #0]
 8010324:	4413      	add	r3, r2
 8010326:	f107 0214 	add.w	r2, r7, #20
 801032a:	4619      	mov	r1, r3
 801032c:	f7ff fc2e 	bl	800fb8c <lorawan_aes_encrypt>
            block = block + 16;
 8010330:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8010334:	3310      	adds	r3, #16
 8010336:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 801033a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801033e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8010342:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8010346:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 801034a:	6812      	ldr	r2, [r2, #0]
 801034c:	3a10      	subs	r2, #16
 801034e:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 8010350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010354:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d1d7      	bne.n	801030e <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 801035e:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 8010362:	4618      	mov	r0, r3
 8010364:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}

0801036c <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b088      	sub	sp, #32
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
 8010374:	460b      	mov	r3, r1
 8010376:	70fb      	strb	r3, [r7, #3]
 8010378:	4613      	mov	r3, r2
 801037a:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d101      	bne.n	8010386 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8010382:	2302      	movs	r3, #2
 8010384:	e02e      	b.n	80103e4 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 8010386:	2306      	movs	r3, #6
 8010388:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 801038a:	78bb      	ldrb	r3, [r7, #2]
 801038c:	2b0c      	cmp	r3, #12
 801038e:	d104      	bne.n	801039a <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 8010390:	78fb      	ldrb	r3, [r7, #3]
 8010392:	2b0b      	cmp	r3, #11
 8010394:	d001      	beq.n	801039a <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010396:	2303      	movs	r3, #3
 8010398:	e024      	b.n	80103e4 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 801039a:	2300      	movs	r3, #0
 801039c:	60fb      	str	r3, [r7, #12]
 801039e:	f107 0310 	add.w	r3, r7, #16
 80103a2:	2200      	movs	r2, #0
 80103a4:	601a      	str	r2, [r3, #0]
 80103a6:	605a      	str	r2, [r3, #4]
 80103a8:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 80103aa:	f107 030c 	add.w	r3, r7, #12
 80103ae:	78fa      	ldrb	r2, [r7, #3]
 80103b0:	2110      	movs	r1, #16
 80103b2:	6878      	ldr	r0, [r7, #4]
 80103b4:	f7ff ff5a 	bl	801026c <SecureElementAesEncrypt>
 80103b8:	4603      	mov	r3, r0
 80103ba:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 80103bc:	7ffb      	ldrb	r3, [r7, #31]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d001      	beq.n	80103c6 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 80103c2:	7ffb      	ldrb	r3, [r7, #31]
 80103c4:	e00e      	b.n	80103e4 <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 80103c6:	f107 020c 	add.w	r2, r7, #12
 80103ca:	78bb      	ldrb	r3, [r7, #2]
 80103cc:	4611      	mov	r1, r2
 80103ce:	4618      	mov	r0, r3
 80103d0:	f7ff fea8 	bl	8010124 <SecureElementSetKey>
 80103d4:	4603      	mov	r3, r0
 80103d6:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 80103d8:	7ffb      	ldrb	r3, [r7, #31]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d001      	beq.n	80103e2 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 80103de:	7ffb      	ldrb	r3, [r7, #31]
 80103e0:	e000      	b.n	80103e4 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 80103e2:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	3720      	adds	r7, #32
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}

080103ec <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b086      	sub	sp, #24
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	60b9      	str	r1, [r7, #8]
 80103f4:	607b      	str	r3, [r7, #4]
 80103f6:	4603      	mov	r3, r0
 80103f8:	73fb      	strb	r3, [r7, #15]
 80103fa:	4613      	mov	r3, r2
 80103fc:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d005      	beq.n	8010410 <SecureElementProcessJoinAccept+0x24>
 8010404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010406:	2b00      	cmp	r3, #0
 8010408:	d002      	beq.n	8010410 <SecureElementProcessJoinAccept+0x24>
 801040a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801040c:	2b00      	cmp	r3, #0
 801040e:	d101      	bne.n	8010414 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8010410:	2302      	movs	r3, #2
 8010412:	e05c      	b.n	80104ce <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 8010414:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010418:	2b21      	cmp	r3, #33	; 0x21
 801041a:	d901      	bls.n	8010420 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 801041c:	2305      	movs	r3, #5
 801041e:	e056      	b.n	80104ce <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 8010420:	2301      	movs	r3, #1
 8010422:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8010424:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010428:	b29b      	uxth	r3, r3
 801042a:	461a      	mov	r2, r3
 801042c:	6879      	ldr	r1, [r7, #4]
 801042e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010430:	f00b f9f1 	bl	801b816 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	1c58      	adds	r0, r3, #1
 8010438:	f897 3020 	ldrb.w	r3, [r7, #32]
 801043c:	3b01      	subs	r3, #1
 801043e:	4619      	mov	r1, r3
 8010440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010442:	3301      	adds	r3, #1
 8010444:	7dfa      	ldrb	r2, [r7, #23]
 8010446:	f7ff ff11 	bl	801026c <SecureElementAesEncrypt>
 801044a:	4603      	mov	r3, r0
 801044c:	2b00      	cmp	r3, #0
 801044e:	d001      	beq.n	8010454 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8010450:	2307      	movs	r3, #7
 8010452:	e03c      	b.n	80104ce <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8010454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010456:	330b      	adds	r3, #11
 8010458:	781b      	ldrb	r3, [r3, #0]
 801045a:	09db      	lsrs	r3, r3, #7
 801045c:	b2da      	uxtb	r2, r3
 801045e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010460:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 8010462:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010466:	3b04      	subs	r3, #4
 8010468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801046a:	4413      	add	r3, r2
 801046c:	781b      	ldrb	r3, [r3, #0]
 801046e:	4619      	mov	r1, r3
 8010470:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010474:	3b03      	subs	r3, #3
 8010476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010478:	4413      	add	r3, r2
 801047a:	781b      	ldrb	r3, [r3, #0]
 801047c:	021b      	lsls	r3, r3, #8
 801047e:	ea41 0203 	orr.w	r2, r1, r3
 8010482:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010486:	3b02      	subs	r3, #2
 8010488:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801048a:	440b      	add	r3, r1
 801048c:	781b      	ldrb	r3, [r3, #0]
 801048e:	041b      	lsls	r3, r3, #16
 8010490:	431a      	orrs	r2, r3
 8010492:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010496:	3b01      	subs	r3, #1
 8010498:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801049a:	440b      	add	r3, r1
 801049c:	781b      	ldrb	r3, [r3, #0]
 801049e:	061b      	lsls	r3, r3, #24
 80104a0:	4313      	orrs	r3, r2
 80104a2:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 80104a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104a6:	781b      	ldrb	r3, [r3, #0]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d10d      	bne.n	80104c8 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 80104ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80104b0:	3b04      	subs	r3, #4
 80104b2:	4619      	mov	r1, r3
 80104b4:	2301      	movs	r3, #1
 80104b6:	693a      	ldr	r2, [r7, #16]
 80104b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80104ba:	f7ff feab 	bl	8010214 <SecureElementVerifyAesCmac>
 80104be:	4603      	mov	r3, r0
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d003      	beq.n	80104cc <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 80104c4:	2301      	movs	r3, #1
 80104c6:	e002      	b.n	80104ce <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 80104c8:	2304      	movs	r3, #4
 80104ca:	e000      	b.n	80104ce <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 80104cc:	2300      	movs	r3, #0
}
 80104ce:	4618      	mov	r0, r3
 80104d0:	3718      	adds	r7, #24
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}
	...

080104d8 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b082      	sub	sp, #8
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d101      	bne.n	80104ea <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80104e6:	2302      	movs	r3, #2
 80104e8:	e007      	b.n	80104fa <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 80104ea:	4b06      	ldr	r3, [pc, #24]	; (8010504 <SecureElementSetDevEui+0x2c>)
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	2208      	movs	r2, #8
 80104f0:	6879      	ldr	r1, [r7, #4]
 80104f2:	4618      	mov	r0, r3
 80104f4:	f00b f98f 	bl	801b816 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80104f8:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 80104fa:	4618      	mov	r0, r3
 80104fc:	3708      	adds	r7, #8
 80104fe:	46bd      	mov	sp, r7
 8010500:	bd80      	pop	{r7, pc}
 8010502:	bf00      	nop
 8010504:	20000724 	.word	0x20000724

08010508 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b082      	sub	sp, #8
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d101      	bne.n	801051a <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8010516:	2302      	movs	r3, #2
 8010518:	e007      	b.n	801052a <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 801051a:	4b06      	ldr	r3, [pc, #24]	; (8010534 <SecureElementGetDevEui+0x2c>)
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	2208      	movs	r2, #8
 8010520:	4619      	mov	r1, r3
 8010522:	6878      	ldr	r0, [r7, #4]
 8010524:	f00b f977 	bl	801b816 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010528:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 801052a:	4618      	mov	r0, r3
 801052c:	3708      	adds	r7, #8
 801052e:	46bd      	mov	sp, r7
 8010530:	bd80      	pop	{r7, pc}
 8010532:	bf00      	nop
 8010534:	20000724 	.word	0x20000724

08010538 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b082      	sub	sp, #8
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d101      	bne.n	801054a <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8010546:	2302      	movs	r3, #2
 8010548:	e008      	b.n	801055c <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 801054a:	4b06      	ldr	r3, [pc, #24]	; (8010564 <SecureElementSetJoinEui+0x2c>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	3308      	adds	r3, #8
 8010550:	2208      	movs	r2, #8
 8010552:	6879      	ldr	r1, [r7, #4]
 8010554:	4618      	mov	r0, r3
 8010556:	f00b f95e 	bl	801b816 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 801055a:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 801055c:	4618      	mov	r0, r3
 801055e:	3708      	adds	r7, #8
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}
 8010564:	20000724 	.word	0x20000724

08010568 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b082      	sub	sp, #8
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d101      	bne.n	801057a <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8010576:	2302      	movs	r3, #2
 8010578:	e008      	b.n	801058c <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 801057a:	4b06      	ldr	r3, [pc, #24]	; (8010594 <SecureElementGetJoinEui+0x2c>)
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	3308      	adds	r3, #8
 8010580:	2208      	movs	r2, #8
 8010582:	4619      	mov	r1, r3
 8010584:	6878      	ldr	r0, [r7, #4]
 8010586:	f00b f946 	bl	801b816 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 801058a:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 801058c:	4618      	mov	r0, r3
 801058e:	3708      	adds	r7, #8
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}
 8010594:	20000724 	.word	0x20000724

08010598 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 8010598:	b480      	push	{r7}
 801059a:	b083      	sub	sp, #12
 801059c:	af00      	add	r7, sp, #0
 801059e:	4603      	mov	r3, r0
 80105a0:	6039      	str	r1, [r7, #0]
 80105a2:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 80105a4:	79fb      	ldrb	r3, [r7, #7]
 80105a6:	2b02      	cmp	r3, #2
 80105a8:	d104      	bne.n	80105b4 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 80105aa:	4b07      	ldr	r3, [pc, #28]	; (80105c8 <SecureElementSetDevAddr+0x30>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	683a      	ldr	r2, [r7, #0]
 80105b0:	611a      	str	r2, [r3, #16]
 80105b2:	e003      	b.n	80105bc <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 80105b4:	4b04      	ldr	r3, [pc, #16]	; (80105c8 <SecureElementSetDevAddr+0x30>)
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	683a      	ldr	r2, [r7, #0]
 80105ba:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 80105bc:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 80105be:	4618      	mov	r0, r3
 80105c0:	370c      	adds	r7, #12
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bc80      	pop	{r7}
 80105c6:	4770      	bx	lr
 80105c8:	20000724 	.word	0x20000724

080105cc <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 80105cc:	b480      	push	{r7}
 80105ce:	b083      	sub	sp, #12
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	4603      	mov	r3, r0
 80105d4:	6039      	str	r1, [r7, #0]
 80105d6:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d101      	bne.n	80105e2 <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80105de:	2302      	movs	r3, #2
 80105e0:	e00e      	b.n	8010600 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 80105e2:	79fb      	ldrb	r3, [r7, #7]
 80105e4:	2b02      	cmp	r3, #2
 80105e6:	d105      	bne.n	80105f4 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 80105e8:	4b08      	ldr	r3, [pc, #32]	; (801060c <SecureElementGetDevAddr+0x40>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	691a      	ldr	r2, [r3, #16]
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	601a      	str	r2, [r3, #0]
 80105f2:	e004      	b.n	80105fe <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 80105f4:	4b05      	ldr	r3, [pc, #20]	; (801060c <SecureElementGetDevAddr+0x40>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	695a      	ldr	r2, [r3, #20]
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 80105fe:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 8010600:	4618      	mov	r0, r3
 8010602:	370c      	adds	r7, #12
 8010604:	46bd      	mov	sp, r7
 8010606:	bc80      	pop	{r7}
 8010608:	4770      	bx	lr
 801060a:	bf00      	nop
 801060c:	20000724 	.word	0x20000724

08010610 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b082      	sub	sp, #8
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
 8010618:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 801061a:	4a29      	ldr	r2, [pc, #164]	; (80106c0 <LmHandlerInit+0xb0>)
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8010620:	4b28      	ldr	r3, [pc, #160]	; (80106c4 <LmHandlerInit+0xb4>)
 8010622:	4a29      	ldr	r2, [pc, #164]	; (80106c8 <LmHandlerInit+0xb8>)
 8010624:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8010626:	4b27      	ldr	r3, [pc, #156]	; (80106c4 <LmHandlerInit+0xb4>)
 8010628:	4a28      	ldr	r2, [pc, #160]	; (80106cc <LmHandlerInit+0xbc>)
 801062a:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 801062c:	4b25      	ldr	r3, [pc, #148]	; (80106c4 <LmHandlerInit+0xb4>)
 801062e:	4a28      	ldr	r2, [pc, #160]	; (80106d0 <LmHandlerInit+0xc0>)
 8010630:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8010632:	4b24      	ldr	r3, [pc, #144]	; (80106c4 <LmHandlerInit+0xb4>)
 8010634:	4a27      	ldr	r2, [pc, #156]	; (80106d4 <LmHandlerInit+0xc4>)
 8010636:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8010638:	4b21      	ldr	r3, [pc, #132]	; (80106c0 <LmHandlerInit+0xb0>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	4a26      	ldr	r2, [pc, #152]	; (80106d8 <LmHandlerInit+0xc8>)
 8010640:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 8010642:	4b1f      	ldr	r3, [pc, #124]	; (80106c0 <LmHandlerInit+0xb0>)
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	685b      	ldr	r3, [r3, #4]
 8010648:	4a23      	ldr	r2, [pc, #140]	; (80106d8 <LmHandlerInit+0xc8>)
 801064a:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 801064c:	4b1c      	ldr	r3, [pc, #112]	; (80106c0 <LmHandlerInit+0xb0>)
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	689b      	ldr	r3, [r3, #8]
 8010652:	4a21      	ldr	r2, [pc, #132]	; (80106d8 <LmHandlerInit+0xc8>)
 8010654:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 8010656:	4b1a      	ldr	r3, [pc, #104]	; (80106c0 <LmHandlerInit+0xb0>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	68db      	ldr	r3, [r3, #12]
 801065c:	4a1e      	ldr	r2, [pc, #120]	; (80106d8 <LmHandlerInit+0xc8>)
 801065e:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8010660:	4b1d      	ldr	r3, [pc, #116]	; (80106d8 <LmHandlerInit+0xc8>)
 8010662:	4a1e      	ldr	r2, [pc, #120]	; (80106dc <LmHandlerInit+0xcc>)
 8010664:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 8010666:	4b16      	ldr	r3, [pc, #88]	; (80106c0 <LmHandlerInit+0xb0>)
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	699b      	ldr	r3, [r3, #24]
 801066c:	4a1a      	ldr	r2, [pc, #104]	; (80106d8 <LmHandlerInit+0xc8>)
 801066e:	6153      	str	r3, [r2, #20]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 8010670:	683b      	ldr	r3, [r7, #0]
 8010672:	4a1b      	ldr	r2, [pc, #108]	; (80106e0 <LmHandlerInit+0xd0>)
 8010674:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 8010676:	4b12      	ldr	r3, [pc, #72]	; (80106c0 <LmHandlerInit+0xb0>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801067c:	4a18      	ldr	r2, [pc, #96]	; (80106e0 <LmHandlerInit+0xd0>)
 801067e:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 8010680:	4b17      	ldr	r3, [pc, #92]	; (80106e0 <LmHandlerInit+0xd0>)
 8010682:	4a18      	ldr	r2, [pc, #96]	; (80106e4 <LmHandlerInit+0xd4>)
 8010684:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 8010686:	4b16      	ldr	r3, [pc, #88]	; (80106e0 <LmHandlerInit+0xd0>)
 8010688:	4a17      	ldr	r2, [pc, #92]	; (80106e8 <LmHandlerInit+0xd8>)
 801068a:	60da      	str	r2, [r3, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 801068c:	4914      	ldr	r1, [pc, #80]	; (80106e0 <LmHandlerInit+0xd0>)
 801068e:	2000      	movs	r0, #0
 8010690:	f000 fdb4 	bl	80111fc <LmHandlerPackageRegister>
 8010694:	4603      	mov	r3, r0
 8010696:	2b00      	cmp	r3, #0
 8010698:	d002      	beq.n	80106a0 <LmHandlerInit+0x90>
    {
        return LORAMAC_HANDLER_ERROR;
 801069a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801069e:	e00a      	b.n	80106b6 <LmHandlerInit+0xa6>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 80106a0:	463b      	mov	r3, r7
 80106a2:	4618      	mov	r0, r3
 80106a4:	f001 fd2a 	bl	80120fc <LmhpPackagesRegistrationInit>
 80106a8:	4603      	mov	r3, r0
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d002      	beq.n	80106b4 <LmHandlerInit+0xa4>
    {
        return LORAMAC_HANDLER_ERROR;
 80106ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80106b2:	e000      	b.n	80106b6 <LmHandlerInit+0xa6>
    }

    return LORAMAC_HANDLER_SUCCESS;
 80106b4:	2300      	movs	r3, #0
}
 80106b6:	4618      	mov	r0, r3
 80106b8:	3708      	adds	r7, #8
 80106ba:	46bd      	mov	sp, r7
 80106bc:	bd80      	pop	{r7, pc}
 80106be:	bf00      	nop
 80106c0:	2000077c 	.word	0x2000077c
 80106c4:	20000780 	.word	0x20000780
 80106c8:	08010ed5 	.word	0x08010ed5
 80106cc:	08010f49 	.word	0x08010f49
 80106d0:	08011019 	.word	0x08011019
 80106d4:	08011169 	.word	0x08011169
 80106d8:	20000790 	.word	0x20000790
 80106dc:	080116a9 	.word	0x080116a9
 80106e0:	20000740 	.word	0x20000740
 80106e4:	080114bd 	.word	0x080114bd
 80106e8:	080114f5 	.word	0x080114f5

080106ec <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b092      	sub	sp, #72	; 0x48
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 80106f4:	2218      	movs	r2, #24
 80106f6:	6879      	ldr	r1, [r7, #4]
 80106f8:	4884      	ldr	r0, [pc, #528]	; (801090c <LmHandlerConfigure+0x220>)
 80106fa:	f00b f88c 	bl	801b816 <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 80106fe:	4b84      	ldr	r3, [pc, #528]	; (8010910 <LmHandlerConfigure+0x224>)
 8010700:	2200      	movs	r2, #0
 8010702:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 8010704:	f7fe faa2 	bl	800ec4c <LoraInfo_GetPtr>
 8010708:	6478      	str	r0, [r7, #68]	; 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 801070a:	4b80      	ldr	r3, [pc, #512]	; (801090c <LmHandlerConfigure+0x220>)
 801070c:	781b      	ldrb	r3, [r3, #0]
 801070e:	461a      	mov	r2, r3
 8010710:	2301      	movs	r3, #1
 8010712:	4093      	lsls	r3, r2
 8010714:	461a      	mov	r2, r3
 8010716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010718:	685b      	ldr	r3, [r3, #4]
 801071a:	4013      	ands	r3, r2
 801071c:	2b00      	cmp	r3, #0
 801071e:	d106      	bne.n	801072e <LmHandlerConfigure+0x42>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 8010720:	4b7c      	ldr	r3, [pc, #496]	; (8010914 <LmHandlerConfigure+0x228>)
 8010722:	2201      	movs	r2, #1
 8010724:	2100      	movs	r1, #0
 8010726:	2000      	movs	r0, #0
 8010728:	f00f fc3a 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 801072c:	e7fe      	b.n	801072c <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 801072e:	4b77      	ldr	r3, [pc, #476]	; (801090c <LmHandlerConfigure+0x220>)
 8010730:	781b      	ldrb	r3, [r3, #0]
 8010732:	461a      	mov	r2, r3
 8010734:	4978      	ldr	r1, [pc, #480]	; (8010918 <LmHandlerConfigure+0x22c>)
 8010736:	4879      	ldr	r0, [pc, #484]	; (801091c <LmHandlerConfigure+0x230>)
 8010738:	f004 ffd4 	bl	80156e4 <LoRaMacInitialization>
 801073c:	4603      	mov	r3, r0
 801073e:	2b00      	cmp	r3, #0
 8010740:	d002      	beq.n	8010748 <LmHandlerConfigure+0x5c>
    {
        return LORAMAC_HANDLER_ERROR;
 8010742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010746:	e0dc      	b.n	8010902 <LmHandlerConfigure+0x216>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 8010748:	2327      	movs	r3, #39	; 0x27
 801074a:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 801074c:	f107 0318 	add.w	r3, r7, #24
 8010750:	4618      	mov	r0, r3
 8010752:	f005 fd53 	bl	80161fc <LoRaMacMibSetRequestConfirm>
 8010756:	4603      	mov	r3, r0
 8010758:	2b00      	cmp	r3, #0
 801075a:	d103      	bne.n	8010764 <LmHandlerConfigure+0x78>
    {
        CtxRestoreDone = true;
 801075c:	4b70      	ldr	r3, [pc, #448]	; (8010920 <LmHandlerConfigure+0x234>)
 801075e:	2201      	movs	r2, #1
 8010760:	701a      	strb	r2, [r3, #0]
 8010762:	e02a      	b.n	80107ba <LmHandlerConfigure+0xce>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 8010764:	2328      	movs	r3, #40	; 0x28
 8010766:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 8010768:	4b6e      	ldr	r3, [pc, #440]	; (8010924 <LmHandlerConfigure+0x238>)
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	691b      	ldr	r3, [r3, #16]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d00c      	beq.n	801078c <LmHandlerConfigure+0xa0>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 8010772:	f107 0318 	add.w	r3, r7, #24
 8010776:	4618      	mov	r0, r3
 8010778:	f005 fb68 	bl	8015e4c <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 801077c:	4b69      	ldr	r3, [pc, #420]	; (8010924 <LmHandlerConfigure+0x238>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	691b      	ldr	r3, [r3, #16]
 8010782:	69fa      	ldr	r2, [r7, #28]
 8010784:	f240 51cc 	movw	r1, #1484	; 0x5cc
 8010788:	4610      	mov	r0, r2
 801078a:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 801078c:	2327      	movs	r3, #39	; 0x27
 801078e:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8010790:	f107 0318 	add.w	r3, r7, #24
 8010794:	4618      	mov	r0, r3
 8010796:	f005 fd31 	bl	80161fc <LoRaMacMibSetRequestConfirm>
 801079a:	4603      	mov	r3, r0
 801079c:	2b00      	cmp	r3, #0
 801079e:	d10c      	bne.n	80107ba <LmHandlerConfigure+0xce>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 80107a0:	2301      	movs	r3, #1
 80107a2:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 80107a4:	f107 0318 	add.w	r3, r7, #24
 80107a8:	4618      	mov	r0, r3
 80107aa:	f005 fb4f 	bl	8015e4c <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 80107ae:	7f3b      	ldrb	r3, [r7, #28]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d002      	beq.n	80107ba <LmHandlerConfigure+0xce>
            {
                CtxRestoreDone = true;
 80107b4:	4b5a      	ldr	r3, [pc, #360]	; (8010920 <LmHandlerConfigure+0x234>)
 80107b6:	2201      	movs	r2, #1
 80107b8:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 80107ba:	4b59      	ldr	r3, [pc, #356]	; (8010920 <LmHandlerConfigure+0x234>)
 80107bc:	781b      	ldrb	r3, [r3, #0]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d022      	beq.n	8010808 <LmHandlerConfigure+0x11c>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 80107c2:	4b58      	ldr	r3, [pc, #352]	; (8010924 <LmHandlerConfigure+0x238>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	69db      	ldr	r3, [r3, #28]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d004      	beq.n	80107d6 <LmHandlerConfigure+0xea>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 80107cc:	4b55      	ldr	r3, [pc, #340]	; (8010924 <LmHandlerConfigure+0x238>)
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	69db      	ldr	r3, [r3, #28]
 80107d2:	2000      	movs	r0, #0
 80107d4:	4798      	blx	r3
        }

        mibReq.Type = MIB_NVM_CTXS;
 80107d6:	2327      	movs	r3, #39	; 0x27
 80107d8:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 80107da:	f107 0318 	add.w	r3, r7, #24
 80107de:	4618      	mov	r0, r3
 80107e0:	f005 fb34 	bl	8015e4c <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 80107e4:	69fb      	ldr	r3, [r7, #28]
 80107e6:	643b      	str	r3, [r7, #64]	; 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 80107e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107ea:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80107ee:	4b47      	ldr	r3, [pc, #284]	; (801090c <LmHandlerConfigure+0x220>)
 80107f0:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 80107f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107f4:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 80107f8:	4b44      	ldr	r3, [pc, #272]	; (801090c <LmHandlerConfigure+0x220>)
 80107fa:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 80107fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107fe:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8010802:	4b42      	ldr	r3, [pc, #264]	; (801090c <LmHandlerConfigure+0x220>)
 8010804:	709a      	strb	r2, [r3, #2]
 8010806:	e008      	b.n	801081a <LmHandlerConfigure+0x12e>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 8010808:	2305      	movs	r3, #5
 801080a:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 801080c:	2300      	movs	r3, #0
 801080e:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8010810:	f107 0318 	add.w	r3, r7, #24
 8010814:	4618      	mov	r0, r3
 8010816:	f005 fcf1 	bl	80161fc <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 801081a:	4b3f      	ldr	r3, [pc, #252]	; (8010918 <LmHandlerConfigure+0x22c>)
 801081c:	689b      	ldr	r3, [r3, #8]
 801081e:	4a3e      	ldr	r2, [pc, #248]	; (8010918 <LmHandlerConfigure+0x22c>)
 8010820:	68d2      	ldr	r2, [r2, #12]
 8010822:	4611      	mov	r1, r2
 8010824:	4618      	mov	r0, r3
 8010826:	f7ff fbcb 	bl	800ffc0 <SecureElementInitMcuID>
 801082a:	4603      	mov	r3, r0
 801082c:	2b00      	cmp	r3, #0
 801082e:	d002      	beq.n	8010836 <LmHandlerConfigure+0x14a>
    {
        return LORAMAC_HANDLER_ERROR;
 8010830:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010834:	e065      	b.n	8010902 <LmHandlerConfigure+0x216>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 8010836:	2306      	movs	r3, #6
 8010838:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 801083a:	f107 0318 	add.w	r3, r7, #24
 801083e:	4618      	mov	r0, r3
 8010840:	f005 fb04 	bl	8015e4c <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8010844:	69fb      	ldr	r3, [r7, #28]
 8010846:	4a38      	ldr	r2, [pc, #224]	; (8010928 <LmHandlerConfigure+0x23c>)
 8010848:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 801084a:	f107 0318 	add.w	r3, r7, #24
 801084e:	4618      	mov	r0, r3
 8010850:	f005 fcd4 	bl	80161fc <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 8010854:	2302      	movs	r3, #2
 8010856:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 8010858:	4b33      	ldr	r3, [pc, #204]	; (8010928 <LmHandlerConfigure+0x23c>)
 801085a:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 801085c:	f107 0318 	add.w	r3, r7, #24
 8010860:	4618      	mov	r0, r3
 8010862:	f005 faf3 	bl	8015e4c <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 8010866:	2303      	movs	r3, #3
 8010868:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 801086a:	4b30      	ldr	r3, [pc, #192]	; (801092c <LmHandlerConfigure+0x240>)
 801086c:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 801086e:	f107 0318 	add.w	r3, r7, #24
 8010872:	4618      	mov	r0, r3
 8010874:	f005 faea 	bl	8015e4c <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 8010878:	f7ff fc22 	bl	80100c0 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 801087c:	230f      	movs	r3, #15
 801087e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8010880:	2301      	movs	r3, #1
 8010882:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8010884:	f107 0318 	add.w	r3, r7, #24
 8010888:	4618      	mov	r0, r3
 801088a:	f005 fcb7 	bl	80161fc <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 801088e:	2310      	movs	r3, #16
 8010890:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8010892:	2300      	movs	r3, #0
 8010894:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8010896:	f107 0318 	add.w	r3, r7, #24
 801089a:	4618      	mov	r0, r3
 801089c:	f005 fcae 	bl	80161fc <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 80108a0:	2304      	movs	r3, #4
 80108a2:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 80108a4:	4b19      	ldr	r3, [pc, #100]	; (801090c <LmHandlerConfigure+0x220>)
 80108a6:	789b      	ldrb	r3, [r3, #2]
 80108a8:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80108aa:	f107 0318 	add.w	r3, r7, #24
 80108ae:	4618      	mov	r0, r3
 80108b0:	f005 fca4 	bl	80161fc <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 80108b4:	233a      	movs	r3, #58	; 0x3a
 80108b6:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 80108b8:	4b14      	ldr	r3, [pc, #80]	; (801090c <LmHandlerConfigure+0x220>)
 80108ba:	695b      	ldr	r3, [r3, #20]
 80108bc:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80108be:	f107 0318 	add.w	r3, r7, #24
 80108c2:	4618      	mov	r0, r3
 80108c4:	f005 fc9a 	bl	80161fc <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80108c8:	230f      	movs	r3, #15
 80108ca:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 80108cc:	4b0f      	ldr	r3, [pc, #60]	; (801090c <LmHandlerConfigure+0x220>)
 80108ce:	781b      	ldrb	r3, [r3, #0]
 80108d0:	f107 0210 	add.w	r2, r7, #16
 80108d4:	4611      	mov	r1, r2
 80108d6:	4618      	mov	r0, r3
 80108d8:	f008 fbe5 	bl	80190a6 <RegionGetPhyParam>
 80108dc:	4603      	mov	r3, r0
 80108de:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	bf14      	ite	ne
 80108e6:	2301      	movne	r3, #1
 80108e8:	2300      	moveq	r3, #0
 80108ea:	b2da      	uxtb	r2, r3
 80108ec:	4b07      	ldr	r3, [pc, #28]	; (801090c <LmHandlerConfigure+0x220>)
 80108ee:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 80108f0:	2014      	movs	r0, #20
 80108f2:	f000 fad7 	bl	8010ea4 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 80108f6:	4b05      	ldr	r3, [pc, #20]	; (801090c <LmHandlerConfigure+0x220>)
 80108f8:	79db      	ldrb	r3, [r3, #7]
 80108fa:	4618      	mov	r0, r3
 80108fc:	f006 faf8 	bl	8016ef0 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 8010900:	2300      	movs	r3, #0
}
 8010902:	4618      	mov	r0, r3
 8010904:	3748      	adds	r7, #72	; 0x48
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}
 801090a:	bf00      	nop
 801090c:	20000764 	.word	0x20000764
 8010910:	200007ac 	.word	0x200007ac
 8010914:	0802167c 	.word	0x0802167c
 8010918:	20000790 	.word	0x20000790
 801091c:	20000780 	.word	0x20000780
 8010920:	200008a2 	.word	0x200008a2
 8010924:	2000077c 	.word	0x2000077c
 8010928:	20000728 	.word	0x20000728
 801092c:	20000730 	.word	0x20000730

08010930 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b082      	sub	sp, #8
 8010934:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 8010936:	f002 fe49 	bl	80135cc <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 801093a:	f000 fd8b 	bl	8011454 <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 801093e:	f000 fd5f 	bl	8011400 <LmHandlerPackageIsTxPending>
 8010942:	4603      	mov	r3, r0
 8010944:	2b00      	cmp	r3, #0
 8010946:	d117      	bne.n	8010978 <LmHandlerProcess+0x48>
        return;
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    /* If a MAC layer scheduled uplink is still pending try to send it. */
    if( IsUplinkTxPending == true )
 8010948:	4b0d      	ldr	r3, [pc, #52]	; (8010980 <LmHandlerProcess+0x50>)
 801094a:	781b      	ldrb	r3, [r3, #0]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d014      	beq.n	801097a <LmHandlerProcess+0x4a>
    {
        /* Send an empty message */
        LmHandlerAppData_t appData =
 8010950:	2300      	movs	r3, #0
 8010952:	703b      	strb	r3, [r7, #0]
 8010954:	2300      	movs	r3, #0
 8010956:	707b      	strb	r3, [r7, #1]
 8010958:	2300      	movs	r3, #0
 801095a:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 801095c:	4b09      	ldr	r3, [pc, #36]	; (8010984 <LmHandlerProcess+0x54>)
 801095e:	78d9      	ldrb	r1, [r3, #3]
 8010960:	463b      	mov	r3, r7
 8010962:	2200      	movs	r2, #0
 8010964:	4618      	mov	r0, r3
 8010966:	f000 f8d7 	bl	8010b18 <LmHandlerSend>
 801096a:	4603      	mov	r3, r0
 801096c:	2b00      	cmp	r3, #0
 801096e:	d104      	bne.n	801097a <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 8010970:	4b03      	ldr	r3, [pc, #12]	; (8010980 <LmHandlerProcess+0x50>)
 8010972:	2200      	movs	r2, #0
 8010974:	701a      	strb	r2, [r3, #0]
 8010976:	e000      	b.n	801097a <LmHandlerProcess+0x4a>
        return;
 8010978:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 801097a:	3708      	adds	r7, #8
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}
 8010980:	200007ac 	.word	0x200007ac
 8010984:	20000764 	.word	0x20000764

08010988 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 8010988:	b480      	push	{r7}
 801098a:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 801098c:	4b02      	ldr	r3, [pc, #8]	; (8010998 <LmHandlerGetDutyCycleWaitTime+0x10>)
 801098e:	681b      	ldr	r3, [r3, #0]
}
 8010990:	4618      	mov	r0, r3
 8010992:	46bd      	mov	sp, r7
 8010994:	bc80      	pop	{r7}
 8010996:	4770      	bx	lr
 8010998:	200007a8 	.word	0x200007a8

0801099c <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b092      	sub	sp, #72	; 0x48
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	4603      	mov	r3, r0
 80109a4:	460a      	mov	r2, r1
 80109a6:	71fb      	strb	r3, [r7, #7]
 80109a8:	4613      	mov	r3, r2
 80109aa:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 80109ac:	2301      	movs	r3, #1
 80109ae:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 80109b2:	4b46      	ldr	r3, [pc, #280]	; (8010acc <LmHandlerJoin+0x130>)
 80109b4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80109b8:	b2db      	uxtb	r3, r3
 80109ba:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 80109be:	4b43      	ldr	r3, [pc, #268]	; (8010acc <LmHandlerJoin+0x130>)
 80109c0:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80109c4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 80109c8:	79fb      	ldrb	r3, [r7, #7]
 80109ca:	2b02      	cmp	r3, #2
 80109cc:	d10b      	bne.n	80109e6 <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 80109ce:	2302      	movs	r3, #2
 80109d0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 80109d4:	4b3e      	ldr	r3, [pc, #248]	; (8010ad0 <LmHandlerJoin+0x134>)
 80109d6:	2202      	movs	r2, #2
 80109d8:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 80109da:	4a3d      	ldr	r2, [pc, #244]	; (8010ad0 <LmHandlerJoin+0x134>)
 80109dc:	79bb      	ldrb	r3, [r7, #6]
 80109de:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 80109e0:	f005 f936 	bl	8015c50 <LoRaMacStart>
 80109e4:	e05c      	b.n	8010aa0 <LmHandlerJoin+0x104>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 80109e6:	2301      	movs	r3, #1
 80109e8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 80109ec:	4b38      	ldr	r3, [pc, #224]	; (8010ad0 <LmHandlerJoin+0x134>)
 80109ee:	2201      	movs	r2, #1
 80109f0:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 80109f2:	4b36      	ldr	r3, [pc, #216]	; (8010acc <LmHandlerJoin+0x130>)
 80109f4:	f993 2004 	ldrsb.w	r2, [r3, #4]
 80109f8:	4b35      	ldr	r3, [pc, #212]	; (8010ad0 <LmHandlerJoin+0x134>)
 80109fa:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 80109fc:	4b33      	ldr	r3, [pc, #204]	; (8010acc <LmHandlerJoin+0x130>)
 80109fe:	f993 2005 	ldrsb.w	r2, [r3, #5]
 8010a02:	4b33      	ldr	r3, [pc, #204]	; (8010ad0 <LmHandlerJoin+0x134>)
 8010a04:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8010a06:	4b32      	ldr	r3, [pc, #200]	; (8010ad0 <LmHandlerJoin+0x134>)
 8010a08:	2200      	movs	r2, #0
 8010a0a:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 8010a0c:	4a30      	ldr	r2, [pc, #192]	; (8010ad0 <LmHandlerJoin+0x134>)
 8010a0e:	79bb      	ldrb	r3, [r7, #6]
 8010a10:	7213      	strb	r3, [r2, #8]

        if( CtxRestoreDone == false )
 8010a12:	4b30      	ldr	r3, [pc, #192]	; (8010ad4 <LmHandlerJoin+0x138>)
 8010a14:	781b      	ldrb	r3, [r3, #0]
 8010a16:	f083 0301 	eor.w	r3, r3, #1
 8010a1a:	b2db      	uxtb	r3, r3
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d034      	beq.n	8010a8a <LmHandlerJoin+0xee>
        {
            /* Configure the default datarate */
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8010a20:	231f      	movs	r3, #31
 8010a22:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 8010a24:	4b29      	ldr	r3, [pc, #164]	; (8010acc <LmHandlerJoin+0x130>)
 8010a26:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010a2a:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010a2c:	f107 030c 	add.w	r3, r7, #12
 8010a30:	4618      	mov	r0, r3
 8010a32:	f005 fbe3 	bl	80161fc <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 8010a36:	2320      	movs	r3, #32
 8010a38:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 8010a3a:	4b24      	ldr	r3, [pc, #144]	; (8010acc <LmHandlerJoin+0x130>)
 8010a3c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010a40:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010a42:	f107 030c 	add.w	r3, r7, #12
 8010a46:	4618      	mov	r0, r3
 8010a48:	f005 fbd8 	bl	80161fc <LoRaMacMibSetRequestConfirm>

            /* Configure the default Tx Power */
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 8010a4c:	2322      	movs	r3, #34	; 0x22
 8010a4e:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 8010a50:	4b1e      	ldr	r3, [pc, #120]	; (8010acc <LmHandlerJoin+0x130>)
 8010a52:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8010a56:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010a58:	f107 030c 	add.w	r3, r7, #12
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f005 fbcd 	bl	80161fc <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_TX_POWER;
 8010a62:	2321      	movs	r3, #33	; 0x21
 8010a64:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 8010a66:	4b19      	ldr	r3, [pc, #100]	; (8010acc <LmHandlerJoin+0x130>)
 8010a68:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8010a6c:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010a6e:	f107 030c 	add.w	r3, r7, #12
 8010a72:	4618      	mov	r0, r3
 8010a74:	f005 fbc2 	bl	80161fc <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8010a78:	2329      	movs	r3, #41	; 0x29
 8010a7a:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8010a7c:	4b16      	ldr	r3, [pc, #88]	; (8010ad8 <LmHandlerJoin+0x13c>)
 8010a7e:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010a80:	f107 030c 	add.w	r3, r7, #12
 8010a84:	4618      	mov	r0, r3
 8010a86:	f005 fbb9 	bl	80161fc <LoRaMacMibSetRequestConfirm>
        }

        LoRaMacStart();
 8010a8a:	f005 f8e1 	bl	8015c50 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8010a8e:	2301      	movs	r3, #1
 8010a90:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8010a92:	2301      	movs	r3, #1
 8010a94:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8010a96:	f107 030c 	add.w	r3, r7, #12
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f005 fbae 	bl	80161fc <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
#endif /* LORAMAC_VERSION */
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 8010aa0:	4b0c      	ldr	r3, [pc, #48]	; (8010ad4 <LmHandlerJoin+0x138>)
 8010aa2:	781b      	ldrb	r3, [r3, #0]
 8010aa4:	f083 0301 	eor.w	r3, r3, #1
 8010aa8:	b2db      	uxtb	r3, r3
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d102      	bne.n	8010ab4 <LmHandlerJoin+0x118>
 8010aae:	79bb      	ldrb	r3, [r7, #6]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d004      	beq.n	8010abe <LmHandlerJoin+0x122>
    {
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 8010ab4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010ab8:	4618      	mov	r0, r3
 8010aba:	f005 ff49 	bl	8016950 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8010abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ac0:	4a06      	ldr	r2, [pc, #24]	; (8010adc <LmHandlerJoin+0x140>)
 8010ac2:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 8010ac4:	bf00      	nop
 8010ac6:	3748      	adds	r7, #72	; 0x48
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	bd80      	pop	{r7, pc}
 8010acc:	20000764 	.word	0x20000764
 8010ad0:	20000094 	.word	0x20000094
 8010ad4:	200008a2 	.word	0x200008a2
 8010ad8:	01000400 	.word	0x01000400
 8010adc:	200007a8 	.word	0x200007a8

08010ae0 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b08c      	sub	sp, #48	; 0x30
 8010ae4:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8010ae6:	2301      	movs	r3, #1
 8010ae8:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8010aea:	1d3b      	adds	r3, r7, #4
 8010aec:	4618      	mov	r0, r3
 8010aee:	f005 f9ad 	bl	8015e4c <LoRaMacMibGetRequestConfirm>
 8010af2:	4603      	mov	r3, r0
 8010af4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( status == LORAMAC_STATUS_OK )
 8010af8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d106      	bne.n	8010b0e <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010b00:	7a3b      	ldrb	r3, [r7, #8]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d101      	bne.n	8010b0a <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 8010b06:	2300      	movs	r3, #0
 8010b08:	e002      	b.n	8010b10 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	e000      	b.n	8010b10 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 8010b0e:	2300      	movs	r3, #0
    }
}
 8010b10:	4618      	mov	r0, r3
 8010b12:	3730      	adds	r7, #48	; 0x30
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}

08010b18 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b08a      	sub	sp, #40	; 0x28
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
 8010b20:	460b      	mov	r3, r1
 8010b22:	70fb      	strb	r3, [r7, #3]
 8010b24:	4613      	mov	r3, r2
 8010b26:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 8010b28:	23ff      	movs	r3, #255	; 0xff
 8010b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 8010b2e:	f002 faa7 	bl	8013080 <LoRaMacIsBusy>
 8010b32:	4603      	mov	r3, r0
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d002      	beq.n	8010b3e <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8010b38:	f06f 0301 	mvn.w	r3, #1
 8010b3c:	e0ab      	b.n	8010c96 <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 8010b3e:	f002 fac7 	bl	80130d0 <LoRaMacIsStopped>
 8010b42:	4603      	mov	r3, r0
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d002      	beq.n	8010b4e <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8010b48:	f06f 0302 	mvn.w	r3, #2
 8010b4c:	e0a3      	b.n	8010c96 <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8010b4e:	f7ff ffc7 	bl	8010ae0 <LmHandlerJoinStatus>
 8010b52:	4603      	mov	r3, r0
 8010b54:	2b01      	cmp	r3, #1
 8010b56:	d00a      	beq.n	8010b6e <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8010b58:	4b51      	ldr	r3, [pc, #324]	; (8010ca0 <LmHandlerSend+0x188>)
 8010b5a:	79db      	ldrb	r3, [r3, #7]
 8010b5c:	4a50      	ldr	r2, [pc, #320]	; (8010ca0 <LmHandlerSend+0x188>)
 8010b5e:	7a12      	ldrb	r2, [r2, #8]
 8010b60:	4611      	mov	r1, r2
 8010b62:	4618      	mov	r0, r3
 8010b64:	f7ff ff1a 	bl	801099c <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8010b68:	f06f 0302 	mvn.w	r3, #2
 8010b6c:	e093      	b.n	8010c96 <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 8010b6e:	4a4d      	ldr	r2, [pc, #308]	; (8010ca4 <LmHandlerSend+0x18c>)
 8010b70:	78fb      	ldrb	r3, [r7, #3]
 8010b72:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 8010b74:	78fb      	ldrb	r3, [r7, #3]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	bf14      	ite	ne
 8010b7a:	2301      	movne	r3, #1
 8010b7c:	2300      	moveq	r3, #0
 8010b7e:	b2db      	uxtb	r3, r3
 8010b80:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8010b82:	4b49      	ldr	r3, [pc, #292]	; (8010ca8 <LmHandlerSend+0x190>)
 8010b84:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010b88:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	785b      	ldrb	r3, [r3, #1]
 8010b8e:	f107 020c 	add.w	r2, r7, #12
 8010b92:	4611      	mov	r1, r2
 8010b94:	4618      	mov	r0, r3
 8010b96:	f005 f8c9 	bl	8015d2c <LoRaMacQueryTxPossible>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d009      	beq.n	8010bb4 <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8010ba8:	2300      	movs	r3, #0
 8010baa:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 8010bac:	23f9      	movs	r3, #249	; 0xf9
 8010bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010bb2:	e009      	b.n	8010bc8 <LmHandlerSend+0xb0>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	781b      	ldrb	r3, [r3, #0]
 8010bb8:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	785b      	ldrb	r3, [r3, #1]
 8010bbe:	b29b      	uxth	r3, r3
 8010bc0:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	685b      	ldr	r3, [r3, #4]
 8010bc6:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 8010bc8:	4b36      	ldr	r3, [pc, #216]	; (8010ca4 <LmHandlerSend+0x18c>)
 8010bca:	687a      	ldr	r2, [r7, #4]
 8010bcc:	3310      	adds	r3, #16
 8010bce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010bd2:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8010bd6:	4b34      	ldr	r3, [pc, #208]	; (8010ca8 <LmHandlerSend+0x190>)
 8010bd8:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8010bdc:	4b31      	ldr	r3, [pc, #196]	; (8010ca4 <LmHandlerSend+0x18c>)
 8010bde:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 8010be0:	78ba      	ldrb	r2, [r7, #2]
 8010be2:	f107 0310 	add.w	r3, r7, #16
 8010be6:	4611      	mov	r1, r2
 8010be8:	4618      	mov	r0, r3
 8010bea:	f006 f849 	bl	8016c80 <LoRaMacMcpsRequest>
 8010bee:	4603      	mov	r3, r0
 8010bf0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8010bf4:	6a3b      	ldr	r3, [r7, #32]
 8010bf6:	4a2d      	ldr	r2, [pc, #180]	; (8010cac <LmHandlerSend+0x194>)
 8010bf8:	6013      	str	r3, [r2, #0]

    switch( status )
 8010bfa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010bfe:	2b11      	cmp	r3, #17
 8010c00:	d842      	bhi.n	8010c88 <LmHandlerSend+0x170>
 8010c02:	a201      	add	r2, pc, #4	; (adr r2, 8010c08 <LmHandlerSend+0xf0>)
 8010c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c08:	08010c51 	.word	0x08010c51
 8010c0c:	08010c69 	.word	0x08010c69
 8010c10:	08010c89 	.word	0x08010c89
 8010c14:	08010c89 	.word	0x08010c89
 8010c18:	08010c89 	.word	0x08010c89
 8010c1c:	08010c89 	.word	0x08010c89
 8010c20:	08010c89 	.word	0x08010c89
 8010c24:	08010c71 	.word	0x08010c71
 8010c28:	08010c89 	.word	0x08010c89
 8010c2c:	08010c89 	.word	0x08010c89
 8010c30:	08010c89 	.word	0x08010c89
 8010c34:	08010c81 	.word	0x08010c81
 8010c38:	08010c89 	.word	0x08010c89
 8010c3c:	08010c89 	.word	0x08010c89
 8010c40:	08010c69 	.word	0x08010c69
 8010c44:	08010c69 	.word	0x08010c69
 8010c48:	08010c69 	.word	0x08010c69
 8010c4c:	08010c79 	.word	0x08010c79
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 8010c50:	4b17      	ldr	r3, [pc, #92]	; (8010cb0 <LmHandlerSend+0x198>)
 8010c52:	2200      	movs	r2, #0
 8010c54:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 8010c56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010c5a:	f113 0f07 	cmn.w	r3, #7
 8010c5e:	d017      	beq.n	8010c90 <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 8010c60:	2300      	movs	r3, #0
 8010c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8010c66:	e013      	b.n	8010c90 <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 8010c68:	23fe      	movs	r3, #254	; 0xfe
 8010c6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8010c6e:	e010      	b.n	8010c92 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8010c70:	23fd      	movs	r3, #253	; 0xfd
 8010c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8010c76:	e00c      	b.n	8010c92 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 8010c78:	23fb      	movs	r3, #251	; 0xfb
 8010c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8010c7e:	e008      	b.n	8010c92 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8010c80:	23fa      	movs	r3, #250	; 0xfa
 8010c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8010c86:	e004      	b.n	8010c92 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8010c88:	23ff      	movs	r3, #255	; 0xff
 8010c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8010c8e:	e000      	b.n	8010c92 <LmHandlerSend+0x17a>
            break;
 8010c90:	bf00      	nop
    }

    return lmhStatus;
 8010c92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010c96:	4618      	mov	r0, r3
 8010c98:	3728      	adds	r7, #40	; 0x28
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bd80      	pop	{r7, pc}
 8010c9e:	bf00      	nop
 8010ca0:	20000094 	.word	0x20000094
 8010ca4:	200000a0 	.word	0x200000a0
 8010ca8:	20000764 	.word	0x20000764
 8010cac:	200007a8 	.word	0x200007a8
 8010cb0:	200007ac 	.word	0x200007ac

08010cb4 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b086      	sub	sp, #24
 8010cb8:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 8010cba:	2309      	movs	r3, #9
 8010cbc:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 8010cbe:	463b      	mov	r3, r7
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f005 fe45 	bl	8016950 <LoRaMacMlmeRequest>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8010cca:	693b      	ldr	r3, [r7, #16]
 8010ccc:	4a06      	ldr	r2, [pc, #24]	; (8010ce8 <LmHandlerDeviceTimeReq+0x34>)
 8010cce:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 8010cd0:	7dfb      	ldrb	r3, [r7, #23]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d101      	bne.n	8010cda <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	e001      	b.n	8010cde <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 8010cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 8010cde:	4618      	mov	r0, r3
 8010ce0:	3718      	adds	r7, #24
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	bd80      	pop	{r7, pc}
 8010ce6:	bf00      	nop
 8010ce8:	200007a8 	.word	0x200007a8

08010cec <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 8010cec:	b480      	push	{r7}
 8010cee:	b083      	sub	sp, #12
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 8010cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	370c      	adds	r7, #12
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bc80      	pop	{r7}
 8010d02:	4770      	bx	lr

08010d04 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b08e      	sub	sp, #56	; 0x38
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8010d0e:	2300      	movs	r3, #0
 8010d10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( LoRaMacIsBusy() == true )
 8010d14:	f002 f9b4 	bl	8013080 <LoRaMacIsBusy>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d002      	beq.n	8010d24 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8010d1e:	f06f 0301 	mvn.w	r3, #1
 8010d22:	e071      	b.n	8010e08 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 8010d24:	f7ff fedc 	bl	8010ae0 <LmHandlerJoinStatus>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	2b01      	cmp	r3, #1
 8010d2c:	d002      	beq.n	8010d34 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8010d2e:	f06f 0302 	mvn.w	r3, #2
 8010d32:	e069      	b.n	8010e08 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 8010d34:	2300      	movs	r3, #0
 8010d36:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8010d38:	f107 030c 	add.w	r3, r7, #12
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f005 f885 	bl	8015e4c <LoRaMacMibGetRequestConfirm>
 8010d42:	4603      	mov	r3, r0
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d002      	beq.n	8010d4e <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 8010d48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d4c:	e05c      	b.n	8010e08 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 8010d4e:	7c3b      	ldrb	r3, [r7, #16]
 8010d50:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 8010d54:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010d58:	79fb      	ldrb	r3, [r7, #7]
 8010d5a:	429a      	cmp	r2, r3
 8010d5c:	d052      	beq.n	8010e04 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 8010d5e:	79fb      	ldrb	r3, [r7, #7]
 8010d60:	2b02      	cmp	r3, #2
 8010d62:	d028      	beq.n	8010db6 <LmHandlerRequestClass+0xb2>
 8010d64:	2b02      	cmp	r3, #2
 8010d66:	dc48      	bgt.n	8010dfa <LmHandlerRequestClass+0xf6>
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d002      	beq.n	8010d72 <LmHandlerRequestClass+0x6e>
 8010d6c:	2b01      	cmp	r3, #1
 8010d6e:	d01e      	beq.n	8010dae <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 8010d70:	e043      	b.n	8010dfa <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 8010d72:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d041      	beq.n	8010dfe <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 8010d7a:	79fb      	ldrb	r3, [r7, #7]
 8010d7c:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8010d7e:	f107 030c 	add.w	r3, r7, #12
 8010d82:	4618      	mov	r0, r3
 8010d84:	f005 fa3a 	bl	80161fc <LoRaMacMibSetRequestConfirm>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d10b      	bne.n	8010da6 <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8010d8e:	4b20      	ldr	r3, [pc, #128]	; (8010e10 <LmHandlerRequestClass+0x10c>)
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d032      	beq.n	8010dfe <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8010d98:	4b1d      	ldr	r3, [pc, #116]	; (8010e10 <LmHandlerRequestClass+0x10c>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d9e:	79fa      	ldrb	r2, [r7, #7]
 8010da0:	4610      	mov	r0, r2
 8010da2:	4798      	blx	r3
                break;
 8010da4:	e02b      	b.n	8010dfe <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8010da6:	23ff      	movs	r3, #255	; 0xff
 8010da8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 8010dac:	e027      	b.n	8010dfe <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 8010dae:	23ff      	movs	r3, #255	; 0xff
 8010db0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 8010db4:	e026      	b.n	8010e04 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 8010db6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d003      	beq.n	8010dc6 <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8010dbe:	23ff      	movs	r3, #255	; 0xff
 8010dc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 8010dc4:	e01d      	b.n	8010e02 <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 8010dc6:	79fb      	ldrb	r3, [r7, #7]
 8010dc8:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8010dca:	f107 030c 	add.w	r3, r7, #12
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f005 fa14 	bl	80161fc <LoRaMacMibSetRequestConfirm>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d10b      	bne.n	8010df2 <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 8010dda:	4b0d      	ldr	r3, [pc, #52]	; (8010e10 <LmHandlerRequestClass+0x10c>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d00e      	beq.n	8010e02 <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 8010de4:	4b0a      	ldr	r3, [pc, #40]	; (8010e10 <LmHandlerRequestClass+0x10c>)
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010dea:	79fa      	ldrb	r2, [r7, #7]
 8010dec:	4610      	mov	r0, r2
 8010dee:	4798      	blx	r3
                break;
 8010df0:	e007      	b.n	8010e02 <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8010df2:	23ff      	movs	r3, #255	; 0xff
 8010df4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 8010df8:	e003      	b.n	8010e02 <LmHandlerRequestClass+0xfe>
                break;
 8010dfa:	bf00      	nop
 8010dfc:	e002      	b.n	8010e04 <LmHandlerRequestClass+0x100>
                break;
 8010dfe:	bf00      	nop
 8010e00:	e000      	b.n	8010e04 <LmHandlerRequestClass+0x100>
                break;
 8010e02:	bf00      	nop
        }
    }
    return errorStatus;
 8010e04:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8010e08:	4618      	mov	r0, r3
 8010e0a:	3738      	adds	r7, #56	; 0x38
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bd80      	pop	{r7, pc}
 8010e10:	2000077c 	.word	0x2000077c

08010e14 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b08c      	sub	sp, #48	; 0x30
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d102      	bne.n	8010e28 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8010e22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e26:	e010      	b.n	8010e4a <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 8010e28:	2300      	movs	r3, #0
 8010e2a:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8010e2c:	f107 0308 	add.w	r3, r7, #8
 8010e30:	4618      	mov	r0, r3
 8010e32:	f005 f80b 	bl	8015e4c <LoRaMacMibGetRequestConfirm>
 8010e36:	4603      	mov	r3, r0
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d002      	beq.n	8010e42 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8010e3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e40:	e003      	b.n	8010e4a <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 8010e42:	7b3a      	ldrb	r2, [r7, #12]
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8010e48:	2300      	movs	r3, #0
}
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	3730      	adds	r7, #48	; 0x30
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	bd80      	pop	{r7, pc}
	...

08010e54 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b08c      	sub	sp, #48	; 0x30
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d102      	bne.n	8010e68 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8010e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e66:	e016      	b.n	8010e96 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 8010e68:	2320      	movs	r3, #32
 8010e6a:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 8010e6c:	f107 0308 	add.w	r3, r7, #8
 8010e70:	4618      	mov	r0, r3
 8010e72:	f004 ffeb 	bl	8015e4c <LoRaMacMibGetRequestConfirm>
 8010e76:	4603      	mov	r3, r0
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d002      	beq.n	8010e82 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8010e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e80:	e009      	b.n	8010e96 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 8010e82:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	f993 2000 	ldrsb.w	r2, [r3]
 8010e90:	4b03      	ldr	r3, [pc, #12]	; (8010ea0 <LmHandlerGetTxDatarate+0x4c>)
 8010e92:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 8010e94:	2300      	movs	r3, #0
}
 8010e96:	4618      	mov	r0, r3
 8010e98:	3730      	adds	r7, #48	; 0x30
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bd80      	pop	{r7, pc}
 8010e9e:	bf00      	nop
 8010ea0:	20000764 	.word	0x20000764

08010ea4 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b08c      	sub	sp, #48	; 0x30
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8010eac:	2323      	movs	r3, #35	; 0x23
 8010eae:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8010eb4:	f107 0308 	add.w	r3, r7, #8
 8010eb8:	4618      	mov	r0, r3
 8010eba:	f005 f99f 	bl	80161fc <LoRaMacMibSetRequestConfirm>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d002      	beq.n	8010eca <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 8010ec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ec8:	e000      	b.n	8010ecc <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 8010eca:	2300      	movs	r3, #0
}
 8010ecc:	4618      	mov	r0, r3
 8010ece:	3730      	adds	r7, #48	; 0x30
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}

08010ed4 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b082      	sub	sp, #8
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 8010edc:	4b18      	ldr	r3, [pc, #96]	; (8010f40 <McpsConfirm+0x6c>)
 8010ede:	2201      	movs	r2, #1
 8010ee0:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	785a      	ldrb	r2, [r3, #1]
 8010ee6:	4b16      	ldr	r3, [pc, #88]	; (8010f40 <McpsConfirm+0x6c>)
 8010ee8:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	789b      	ldrb	r3, [r3, #2]
 8010eee:	b25a      	sxtb	r2, r3
 8010ef0:	4b13      	ldr	r3, [pc, #76]	; (8010f40 <McpsConfirm+0x6c>)
 8010ef2:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	68db      	ldr	r3, [r3, #12]
 8010ef8:	4a11      	ldr	r2, [pc, #68]	; (8010f40 <McpsConfirm+0x6c>)
 8010efa:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8010f02:	4b0f      	ldr	r3, [pc, #60]	; (8010f40 <McpsConfirm+0x6c>)
 8010f04:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	691b      	ldr	r3, [r3, #16]
 8010f0a:	b2da      	uxtb	r2, r3
 8010f0c:	4b0c      	ldr	r3, [pc, #48]	; (8010f40 <McpsConfirm+0x6c>)
 8010f0e:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	791b      	ldrb	r3, [r3, #4]
 8010f14:	461a      	mov	r2, r3
 8010f16:	4b0a      	ldr	r3, [pc, #40]	; (8010f40 <McpsConfirm+0x6c>)
 8010f18:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 8010f1a:	4b0a      	ldr	r3, [pc, #40]	; (8010f44 <McpsConfirm+0x70>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d004      	beq.n	8010f2e <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 8010f24:	4b07      	ldr	r3, [pc, #28]	; (8010f44 <McpsConfirm+0x70>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f2a:	4805      	ldr	r0, [pc, #20]	; (8010f40 <McpsConfirm+0x6c>)
 8010f2c:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8010f2e:	6879      	ldr	r1, [r7, #4]
 8010f30:	2000      	movs	r0, #0
 8010f32:	f000 f9e9 	bl	8011308 <LmHandlerPackagesNotify>
}
 8010f36:	bf00      	nop
 8010f38:	3708      	adds	r7, #8
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd80      	pop	{r7, pc}
 8010f3e:	bf00      	nop
 8010f40:	200000a0 	.word	0x200000a0
 8010f44:	2000077c 	.word	0x2000077c

08010f48 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b086      	sub	sp, #24
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
 8010f50:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 8010f52:	2300      	movs	r3, #0
 8010f54:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 8010f56:	4b2d      	ldr	r3, [pc, #180]	; (801100c <McpsIndication+0xc4>)
 8010f58:	2201      	movs	r2, #1
 8010f5a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	785a      	ldrb	r2, [r3, #1]
 8010f60:	4b2a      	ldr	r3, [pc, #168]	; (801100c <McpsIndication+0xc4>)
 8010f62:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8010f64:	4b29      	ldr	r3, [pc, #164]	; (801100c <McpsIndication+0xc4>)
 8010f66:	785b      	ldrb	r3, [r3, #1]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d14b      	bne.n	8011004 <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	791b      	ldrb	r3, [r3, #4]
 8010f70:	b25a      	sxtb	r2, r3
 8010f72:	4b26      	ldr	r3, [pc, #152]	; (801100c <McpsIndication+0xc4>)
 8010f74:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8010f76:	683b      	ldr	r3, [r7, #0]
 8010f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010f7c:	b25a      	sxtb	r2, r3
 8010f7e:	4b23      	ldr	r3, [pc, #140]	; (801100c <McpsIndication+0xc4>)
 8010f80:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8010f82:	683b      	ldr	r3, [r7, #0]
 8010f84:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8010f88:	4b20      	ldr	r3, [pc, #128]	; (801100c <McpsIndication+0xc4>)
 8010f8a:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8010f8c:	683b      	ldr	r3, [r7, #0]
 8010f8e:	78da      	ldrb	r2, [r3, #3]
 8010f90:	4b1e      	ldr	r3, [pc, #120]	; (801100c <McpsIndication+0xc4>)
 8010f92:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	691b      	ldr	r3, [r3, #16]
 8010f98:	4a1c      	ldr	r2, [pc, #112]	; (801100c <McpsIndication+0xc4>)
 8010f9a:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	78db      	ldrb	r3, [r3, #3]
 8010fa0:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	7b1b      	ldrb	r3, [r3, #12]
 8010fa6:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	689b      	ldr	r3, [r3, #8]
 8010fac:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 8010fae:	4b18      	ldr	r3, [pc, #96]	; (8011010 <McpsIndication+0xc8>)
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d007      	beq.n	8010fc8 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 8010fb8:	4b15      	ldr	r3, [pc, #84]	; (8011010 <McpsIndication+0xc8>)
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fbe:	f107 0210 	add.w	r2, r7, #16
 8010fc2:	4912      	ldr	r1, [pc, #72]	; (801100c <McpsIndication+0xc4>)
 8010fc4:	4610      	mov	r0, r2
 8010fc6:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 8010fc8:	4b11      	ldr	r3, [pc, #68]	; (8011010 <McpsIndication+0xc8>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d007      	beq.n	8010fe2 <McpsIndication+0x9a>
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	7e1b      	ldrb	r3, [r3, #24]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d003      	beq.n	8010fe2 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8010fda:	4b0d      	ldr	r3, [pc, #52]	; (8011010 <McpsIndication+0xc8>)
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fe0:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 8010fe2:	6879      	ldr	r1, [r7, #4]
 8010fe4:	2001      	movs	r0, #1
 8010fe6:	f000 f98f 	bl	8011308 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 8010fea:	f107 030f 	add.w	r3, r7, #15
 8010fee:	4618      	mov	r0, r3
 8010ff0:	f7ff ff10 	bl	8010e14 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	795b      	ldrb	r3, [r3, #5]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d004      	beq.n	8011006 <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 8010ffc:	4b05      	ldr	r3, [pc, #20]	; (8011014 <McpsIndication+0xcc>)
 8010ffe:	2201      	movs	r2, #1
 8011000:	701a      	strb	r2, [r3, #0]
 8011002:	e000      	b.n	8011006 <McpsIndication+0xbe>
        return;
 8011004:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 8011006:	3718      	adds	r7, #24
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}
 801100c:	200000bc 	.word	0x200000bc
 8011010:	2000077c 	.word	0x2000077c
 8011014:	200007ac 	.word	0x200007ac

08011018 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b08c      	sub	sp, #48	; 0x30
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 8011020:	4b49      	ldr	r3, [pc, #292]	; (8011148 <MlmeConfirm+0x130>)
 8011022:	2200      	movs	r2, #0
 8011024:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	785a      	ldrb	r2, [r3, #1]
 801102a:	4b47      	ldr	r3, [pc, #284]	; (8011148 <MlmeConfirm+0x130>)
 801102c:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 801102e:	4b47      	ldr	r3, [pc, #284]	; (801114c <MlmeConfirm+0x134>)
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011034:	2b00      	cmp	r3, #0
 8011036:	d004      	beq.n	8011042 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 8011038:	4b44      	ldr	r3, [pc, #272]	; (801114c <MlmeConfirm+0x134>)
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801103e:	4842      	ldr	r0, [pc, #264]	; (8011148 <MlmeConfirm+0x130>)
 8011040:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8011042:	6879      	ldr	r1, [r7, #4]
 8011044:	2002      	movs	r0, #2
 8011046:	f000 f95f 	bl	8011308 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	781b      	ldrb	r3, [r3, #0]
 801104e:	3b01      	subs	r3, #1
 8011050:	2b0b      	cmp	r3, #11
 8011052:	d872      	bhi.n	801113a <MlmeConfirm+0x122>
 8011054:	a201      	add	r2, pc, #4	; (adr r2, 801105c <MlmeConfirm+0x44>)
 8011056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801105a:	bf00      	nop
 801105c:	0801108d 	.word	0x0801108d
 8011060:	0801113b 	.word	0x0801113b
 8011064:	0801113b 	.word	0x0801113b
 8011068:	0801113b 	.word	0x0801113b
 801106c:	08011109 	.word	0x08011109
 8011070:	0801113b 	.word	0x0801113b
 8011074:	0801113b 	.word	0x0801113b
 8011078:	0801113b 	.word	0x0801113b
 801107c:	0801113b 	.word	0x0801113b
 8011080:	0801113b 	.word	0x0801113b
 8011084:	08011121 	.word	0x08011121
 8011088:	0801113b 	.word	0x0801113b
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 801108c:	2306      	movs	r3, #6
 801108e:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 8011090:	f107 0308 	add.w	r3, r7, #8
 8011094:	4618      	mov	r0, r3
 8011096:	f004 fed9 	bl	8015e4c <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 801109a:	4b2d      	ldr	r3, [pc, #180]	; (8011150 <MlmeConfirm+0x138>)
 801109c:	79db      	ldrb	r3, [r3, #7]
 801109e:	68fa      	ldr	r2, [r7, #12]
 80110a0:	4611      	mov	r1, r2
 80110a2:	4618      	mov	r0, r3
 80110a4:	f7ff fa78 	bl	8010598 <SecureElementSetDevAddr>
 80110a8:	4603      	mov	r3, r0
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d102      	bne.n	80110b4 <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	4a28      	ldr	r2, [pc, #160]	; (8011154 <MlmeConfirm+0x13c>)
 80110b2:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 80110b4:	4828      	ldr	r0, [pc, #160]	; (8011158 <MlmeConfirm+0x140>)
 80110b6:	f7ff fecd 	bl	8010e54 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 80110ba:	4828      	ldr	r0, [pc, #160]	; (801115c <MlmeConfirm+0x144>)
 80110bc:	f000 fa74 	bl	80115a8 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80110c0:	4b21      	ldr	r3, [pc, #132]	; (8011148 <MlmeConfirm+0x130>)
 80110c2:	785b      	ldrb	r3, [r3, #1]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d108      	bne.n	80110da <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80110c8:	4b21      	ldr	r3, [pc, #132]	; (8011150 <MlmeConfirm+0x138>)
 80110ca:	2200      	movs	r2, #0
 80110cc:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 80110ce:	4b24      	ldr	r3, [pc, #144]	; (8011160 <MlmeConfirm+0x148>)
 80110d0:	785b      	ldrb	r3, [r3, #1]
 80110d2:	4618      	mov	r0, r3
 80110d4:	f7ff fe16 	bl	8010d04 <LmHandlerRequestClass>
 80110d8:	e002      	b.n	80110e0 <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 80110da:	4b1d      	ldr	r3, [pc, #116]	; (8011150 <MlmeConfirm+0x138>)
 80110dc:	22ff      	movs	r2, #255	; 0xff
 80110de:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 80110e0:	4b1a      	ldr	r3, [pc, #104]	; (801114c <MlmeConfirm+0x134>)
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d004      	beq.n	80110f4 <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80110ea:	4b18      	ldr	r3, [pc, #96]	; (801114c <MlmeConfirm+0x134>)
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110f0:	4817      	ldr	r0, [pc, #92]	; (8011150 <MlmeConfirm+0x138>)
 80110f2:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80110f4:	4b14      	ldr	r3, [pc, #80]	; (8011148 <MlmeConfirm+0x130>)
 80110f6:	785b      	ldrb	r3, [r3, #1]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d120      	bne.n	801113e <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 80110fc:	4b14      	ldr	r3, [pc, #80]	; (8011150 <MlmeConfirm+0x138>)
 80110fe:	79db      	ldrb	r3, [r3, #7]
 8011100:	4618      	mov	r0, r3
 8011102:	f7fe fff1 	bl	80100e8 <SecureElementPrintSessionKeys>
                }
            }
            break;
 8011106:	e01a      	b.n	801113e <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 8011108:	4b16      	ldr	r3, [pc, #88]	; (8011164 <MlmeConfirm+0x14c>)
 801110a:	2201      	movs	r2, #1
 801110c:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	7a1a      	ldrb	r2, [r3, #8]
 8011112:	4b14      	ldr	r3, [pc, #80]	; (8011164 <MlmeConfirm+0x14c>)
 8011114:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	7a5a      	ldrb	r2, [r3, #9]
 801111a:	4b12      	ldr	r3, [pc, #72]	; (8011164 <MlmeConfirm+0x14c>)
 801111c:	74da      	strb	r2, [r3, #19]
            }
            break;
 801111e:	e00f      	b.n	8011140 <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	785b      	ldrb	r3, [r3, #1]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d105      	bne.n	8011134 <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 8011128:	4b0d      	ldr	r3, [pc, #52]	; (8011160 <MlmeConfirm+0x148>)
 801112a:	7c1b      	ldrb	r3, [r3, #16]
 801112c:	4618      	mov	r0, r3
 801112e:	f7ff fddd 	bl	8010cec <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 8011132:	e005      	b.n	8011140 <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 8011134:	f7ff fdbe 	bl	8010cb4 <LmHandlerDeviceTimeReq>
            break;
 8011138:	e002      	b.n	8011140 <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 801113a:	bf00      	nop
 801113c:	e000      	b.n	8011140 <MlmeConfirm+0x128>
            break;
 801113e:	bf00      	nop
    }
}
 8011140:	bf00      	nop
 8011142:	3730      	adds	r7, #48	; 0x30
 8011144:	46bd      	mov	sp, r7
 8011146:	bd80      	pop	{r7, pc}
 8011148:	200000a0 	.word	0x200000a0
 801114c:	2000077c 	.word	0x2000077c
 8011150:	20000094 	.word	0x20000094
 8011154:	20000728 	.word	0x20000728
 8011158:	20000098 	.word	0x20000098
 801115c:	20000099 	.word	0x20000099
 8011160:	20000764 	.word	0x20000764
 8011164:	200000bc 	.word	0x200000bc

08011168 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b082      	sub	sp, #8
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
 8011170:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 8011172:	4b20      	ldr	r3, [pc, #128]	; (80111f4 <MlmeIndication+0x8c>)
 8011174:	2200      	movs	r2, #0
 8011176:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	785a      	ldrb	r2, [r3, #1]
 801117c:	4b1d      	ldr	r3, [pc, #116]	; (80111f4 <MlmeIndication+0x8c>)
 801117e:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	789b      	ldrb	r3, [r3, #2]
 8011184:	b25a      	sxtb	r2, r3
 8011186:	4b1b      	ldr	r3, [pc, #108]	; (80111f4 <MlmeIndication+0x8c>)
 8011188:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 801118a:	683b      	ldr	r3, [r7, #0]
 801118c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011190:	b25a      	sxtb	r2, r3
 8011192:	4b18      	ldr	r3, [pc, #96]	; (80111f4 <MlmeIndication+0x8c>)
 8011194:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8011196:	683b      	ldr	r3, [r7, #0]
 8011198:	f993 2002 	ldrsb.w	r2, [r3, #2]
 801119c:	4b15      	ldr	r3, [pc, #84]	; (80111f4 <MlmeIndication+0x8c>)
 801119e:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 80111a0:	683b      	ldr	r3, [r7, #0]
 80111a2:	78da      	ldrb	r2, [r3, #3]
 80111a4:	4b13      	ldr	r3, [pc, #76]	; (80111f4 <MlmeIndication+0x8c>)
 80111a6:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	685b      	ldr	r3, [r3, #4]
 80111ac:	4a11      	ldr	r2, [pc, #68]	; (80111f4 <MlmeIndication+0x8c>)
 80111ae:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 80111b0:	4b11      	ldr	r3, [pc, #68]	; (80111f8 <MlmeIndication+0x90>)
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d00d      	beq.n	80111d6 <MlmeIndication+0x6e>
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	781b      	ldrb	r3, [r3, #0]
 80111be:	2b0a      	cmp	r3, #10
 80111c0:	d009      	beq.n	80111d6 <MlmeIndication+0x6e>
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	781b      	ldrb	r3, [r3, #0]
 80111c6:	2b0e      	cmp	r3, #14
 80111c8:	d005      	beq.n	80111d6 <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 80111ca:	4b0b      	ldr	r3, [pc, #44]	; (80111f8 <MlmeIndication+0x90>)
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111d0:	4908      	ldr	r1, [pc, #32]	; (80111f4 <MlmeIndication+0x8c>)
 80111d2:	2000      	movs	r0, #0
 80111d4:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 80111d6:	6879      	ldr	r1, [r7, #4]
 80111d8:	2003      	movs	r0, #3
 80111da:	f000 f895 	bl	8011308 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	781b      	ldrb	r3, [r3, #0]
 80111e2:	2b0a      	cmp	r3, #10
 80111e4:	d001      	beq.n	80111ea <MlmeIndication+0x82>
 80111e6:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 80111e8:	e000      	b.n	80111ec <MlmeIndication+0x84>
            break;
 80111ea:	bf00      	nop
    }
}
 80111ec:	bf00      	nop
 80111ee:	3708      	adds	r7, #8
 80111f0:	46bd      	mov	sp, r7
 80111f2:	bd80      	pop	{r7, pc}
 80111f4:	200000bc 	.word	0x200000bc
 80111f8:	2000077c 	.word	0x2000077c

080111fc <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b084      	sub	sp, #16
 8011200:	af00      	add	r7, sp, #0
 8011202:	4603      	mov	r3, r0
 8011204:	6039      	str	r1, [r7, #0]
 8011206:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 8011208:	2300      	movs	r3, #0
 801120a:	60fb      	str	r3, [r7, #12]
    switch( id )
 801120c:	79fb      	ldrb	r3, [r7, #7]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d104      	bne.n	801121c <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 8011212:	f000 fa8b 	bl	801172c <LmhpCompliancePackageFactory>
 8011216:	4603      	mov	r3, r0
 8011218:	60fb      	str	r3, [r7, #12]
                break;
 801121a:	e00d      	b.n	8011238 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 801121c:	f107 020c 	add.w	r2, r7, #12
 8011220:	79fb      	ldrb	r3, [r7, #7]
 8011222:	4611      	mov	r1, r2
 8011224:	4618      	mov	r0, r3
 8011226:	f000 ff73 	bl	8012110 <LmhpPackagesRegister>
 801122a:	4603      	mov	r3, r0
 801122c:	2b00      	cmp	r3, #0
 801122e:	d002      	beq.n	8011236 <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 8011230:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011234:	e03b      	b.n	80112ae <LmHandlerPackageRegister+0xb2>
                }
                break;
 8011236:	bf00      	nop
            }
    }
    if( package != NULL )
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d035      	beq.n	80112aa <LmHandlerPackageRegister+0xae>
    {
        LmHandlerPackages[id] = package;
 801123e:	79fb      	ldrb	r3, [r7, #7]
 8011240:	68fa      	ldr	r2, [r7, #12]
 8011242:	491d      	ldr	r1, [pc, #116]	; (80112b8 <LmHandlerPackageRegister+0xbc>)
 8011244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8011248:	79fb      	ldrb	r3, [r7, #7]
 801124a:	4a1b      	ldr	r2, [pc, #108]	; (80112b8 <LmHandlerPackageRegister+0xbc>)
 801124c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011250:	4a1a      	ldr	r2, [pc, #104]	; (80112bc <LmHandlerPackageRegister+0xc0>)
 8011252:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 8011254:	4b1a      	ldr	r3, [pc, #104]	; (80112c0 <LmHandlerPackageRegister+0xc4>)
 8011256:	681a      	ldr	r2, [r3, #0]
 8011258:	79fb      	ldrb	r3, [r7, #7]
 801125a:	4917      	ldr	r1, [pc, #92]	; (80112b8 <LmHandlerPackageRegister+0xbc>)
 801125c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011260:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8011262:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 8011264:	4b16      	ldr	r3, [pc, #88]	; (80112c0 <LmHandlerPackageRegister+0xc4>)
 8011266:	681a      	ldr	r2, [r3, #0]
 8011268:	79fb      	ldrb	r3, [r7, #7]
 801126a:	4913      	ldr	r1, [pc, #76]	; (80112b8 <LmHandlerPackageRegister+0xbc>)
 801126c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8011270:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8011272:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8011274:	79fb      	ldrb	r3, [r7, #7]
 8011276:	4a10      	ldr	r2, [pc, #64]	; (80112b8 <LmHandlerPackageRegister+0xbc>)
 8011278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801127c:	4a11      	ldr	r2, [pc, #68]	; (80112c4 <LmHandlerPackageRegister+0xc8>)
 801127e:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8011280:	4b0f      	ldr	r3, [pc, #60]	; (80112c0 <LmHandlerPackageRegister+0xc4>)
 8011282:	681a      	ldr	r2, [r3, #0]
 8011284:	79fb      	ldrb	r3, [r7, #7]
 8011286:	490c      	ldr	r1, [pc, #48]	; (80112b8 <LmHandlerPackageRegister+0xbc>)
 8011288:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801128c:	6992      	ldr	r2, [r2, #24]
 801128e:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8011290:	79fb      	ldrb	r3, [r7, #7]
 8011292:	4a09      	ldr	r2, [pc, #36]	; (80112b8 <LmHandlerPackageRegister+0xbc>)
 8011294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011298:	685b      	ldr	r3, [r3, #4]
 801129a:	4a0b      	ldr	r2, [pc, #44]	; (80112c8 <LmHandlerPackageRegister+0xcc>)
 801129c:	6851      	ldr	r1, [r2, #4]
 801129e:	4a0a      	ldr	r2, [pc, #40]	; (80112c8 <LmHandlerPackageRegister+0xcc>)
 80112a0:	7852      	ldrb	r2, [r2, #1]
 80112a2:	6838      	ldr	r0, [r7, #0]
 80112a4:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 80112a6:	2300      	movs	r3, #0
 80112a8:	e001      	b.n	80112ae <LmHandlerPackageRegister+0xb2>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 80112aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 80112ae:	4618      	mov	r0, r3
 80112b0:	3710      	adds	r7, #16
 80112b2:	46bd      	mov	sp, r7
 80112b4:	bd80      	pop	{r7, pc}
 80112b6:	bf00      	nop
 80112b8:	20000750 	.word	0x20000750
 80112bc:	0801099d 	.word	0x0801099d
 80112c0:	2000077c 	.word	0x2000077c
 80112c4:	08010cb5 	.word	0x08010cb5
 80112c8:	200000d0 	.word	0x200000d0

080112cc <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b082      	sub	sp, #8
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	4603      	mov	r3, r0
 80112d4:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 80112d6:	79fb      	ldrb	r3, [r7, #7]
 80112d8:	2b04      	cmp	r3, #4
 80112da:	d80e      	bhi.n	80112fa <LmHandlerPackageIsInitialized+0x2e>
 80112dc:	79fb      	ldrb	r3, [r7, #7]
 80112de:	4a09      	ldr	r2, [pc, #36]	; (8011304 <LmHandlerPackageIsInitialized+0x38>)
 80112e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112e4:	689b      	ldr	r3, [r3, #8]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d007      	beq.n	80112fa <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 80112ea:	79fb      	ldrb	r3, [r7, #7]
 80112ec:	4a05      	ldr	r2, [pc, #20]	; (8011304 <LmHandlerPackageIsInitialized+0x38>)
 80112ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112f2:	689b      	ldr	r3, [r3, #8]
 80112f4:	4798      	blx	r3
 80112f6:	4603      	mov	r3, r0
 80112f8:	e000      	b.n	80112fc <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 80112fa:	2300      	movs	r3, #0
    }
}
 80112fc:	4618      	mov	r0, r3
 80112fe:	3708      	adds	r7, #8
 8011300:	46bd      	mov	sp, r7
 8011302:	bd80      	pop	{r7, pc}
 8011304:	20000750 	.word	0x20000750

08011308 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b084      	sub	sp, #16
 801130c:	af00      	add	r7, sp, #0
 801130e:	4603      	mov	r3, r0
 8011310:	6039      	str	r1, [r7, #0]
 8011312:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8011314:	2300      	movs	r3, #0
 8011316:	73fb      	strb	r3, [r7, #15]
 8011318:	e067      	b.n	80113ea <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 801131a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801131e:	4a37      	ldr	r2, [pc, #220]	; (80113fc <LmHandlerPackagesNotify+0xf4>)
 8011320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d05a      	beq.n	80113de <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 8011328:	79fb      	ldrb	r3, [r7, #7]
 801132a:	2b03      	cmp	r3, #3
 801132c:	d84e      	bhi.n	80113cc <LmHandlerPackagesNotify+0xc4>
 801132e:	a201      	add	r2, pc, #4	; (adr r2, 8011334 <LmHandlerPackagesNotify+0x2c>)
 8011330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011334:	08011345 	.word	0x08011345
 8011338:	08011367 	.word	0x08011367
 801133c:	08011389 	.word	0x08011389
 8011340:	080113ab 	.word	0x080113ab
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8011344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011348:	4a2c      	ldr	r2, [pc, #176]	; (80113fc <LmHandlerPackagesNotify+0xf4>)
 801134a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801134e:	699b      	ldr	r3, [r3, #24]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d03d      	beq.n	80113d0 <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 8011354:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011358:	4a28      	ldr	r2, [pc, #160]	; (80113fc <LmHandlerPackagesNotify+0xf4>)
 801135a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801135e:	699b      	ldr	r3, [r3, #24]
 8011360:	6838      	ldr	r0, [r7, #0]
 8011362:	4798      	blx	r3
                        }
                        break;
 8011364:	e034      	b.n	80113d0 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 8011366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801136a:	4a24      	ldr	r2, [pc, #144]	; (80113fc <LmHandlerPackagesNotify+0xf4>)
 801136c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011370:	69db      	ldr	r3, [r3, #28]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d02e      	beq.n	80113d4 <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 8011376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801137a:	4a20      	ldr	r2, [pc, #128]	; (80113fc <LmHandlerPackagesNotify+0xf4>)
 801137c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011380:	69db      	ldr	r3, [r3, #28]
 8011382:	6838      	ldr	r0, [r7, #0]
 8011384:	4798      	blx	r3
                        }
                        break;
 8011386:	e025      	b.n	80113d4 <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8011388:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801138c:	4a1b      	ldr	r2, [pc, #108]	; (80113fc <LmHandlerPackagesNotify+0xf4>)
 801138e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011392:	6a1b      	ldr	r3, [r3, #32]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d01f      	beq.n	80113d8 <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 8011398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801139c:	4a17      	ldr	r2, [pc, #92]	; (80113fc <LmHandlerPackagesNotify+0xf4>)
 801139e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80113a2:	6a1b      	ldr	r3, [r3, #32]
 80113a4:	6838      	ldr	r0, [r7, #0]
 80113a6:	4798      	blx	r3
                        }
                        break;
 80113a8:	e016      	b.n	80113d8 <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 80113aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113ae:	4a13      	ldr	r2, [pc, #76]	; (80113fc <LmHandlerPackagesNotify+0xf4>)
 80113b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80113b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d010      	beq.n	80113dc <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 80113ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113be:	4a0f      	ldr	r2, [pc, #60]	; (80113fc <LmHandlerPackagesNotify+0xf4>)
 80113c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80113c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113c6:	6838      	ldr	r0, [r7, #0]
 80113c8:	4798      	blx	r3
                        }
                        break;
 80113ca:	e007      	b.n	80113dc <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 80113cc:	bf00      	nop
 80113ce:	e006      	b.n	80113de <LmHandlerPackagesNotify+0xd6>
                        break;
 80113d0:	bf00      	nop
 80113d2:	e004      	b.n	80113de <LmHandlerPackagesNotify+0xd6>
                        break;
 80113d4:	bf00      	nop
 80113d6:	e002      	b.n	80113de <LmHandlerPackagesNotify+0xd6>
                        break;
 80113d8:	bf00      	nop
 80113da:	e000      	b.n	80113de <LmHandlerPackagesNotify+0xd6>
                        break;
 80113dc:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80113de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113e2:	b2db      	uxtb	r3, r3
 80113e4:	3301      	adds	r3, #1
 80113e6:	b2db      	uxtb	r3, r3
 80113e8:	73fb      	strb	r3, [r7, #15]
 80113ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113ee:	2b04      	cmp	r3, #4
 80113f0:	dd93      	ble.n	801131a <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 80113f2:	bf00      	nop
 80113f4:	bf00      	nop
 80113f6:	3710      	adds	r7, #16
 80113f8:	46bd      	mov	sp, r7
 80113fa:	bd80      	pop	{r7, pc}
 80113fc:	20000750 	.word	0x20000750

08011400 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b082      	sub	sp, #8
 8011404:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8011406:	2300      	movs	r3, #0
 8011408:	71fb      	strb	r3, [r7, #7]
 801140a:	e018      	b.n	801143e <LmHandlerPackageIsTxPending+0x3e>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 801140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011410:	4a0f      	ldr	r2, [pc, #60]	; (8011450 <LmHandlerPackageIsTxPending+0x50>)
 8011412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d00b      	beq.n	8011432 <LmHandlerPackageIsTxPending+0x32>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 801141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801141e:	4a0c      	ldr	r2, [pc, #48]	; (8011450 <LmHandlerPackageIsTxPending+0x50>)
 8011420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011424:	68db      	ldr	r3, [r3, #12]
 8011426:	4798      	blx	r3
 8011428:	4603      	mov	r3, r0
 801142a:	2b00      	cmp	r3, #0
 801142c:	d001      	beq.n	8011432 <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 801142e:	2301      	movs	r3, #1
 8011430:	e00a      	b.n	8011448 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8011432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011436:	b2db      	uxtb	r3, r3
 8011438:	3301      	adds	r3, #1
 801143a:	b2db      	uxtb	r3, r3
 801143c:	71fb      	strb	r3, [r7, #7]
 801143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011442:	2b04      	cmp	r3, #4
 8011444:	dde2      	ble.n	801140c <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 8011446:	2300      	movs	r3, #0
}
 8011448:	4618      	mov	r0, r3
 801144a:	3708      	adds	r7, #8
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}
 8011450:	20000750 	.word	0x20000750

08011454 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b082      	sub	sp, #8
 8011458:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 801145a:	2300      	movs	r3, #0
 801145c:	71fb      	strb	r3, [r7, #7]
 801145e:	e022      	b.n	80114a6 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8011460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011464:	4a14      	ldr	r2, [pc, #80]	; (80114b8 <LmHandlerPackagesProcess+0x64>)
 8011466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d015      	beq.n	801149a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 801146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011472:	4a11      	ldr	r2, [pc, #68]	; (80114b8 <LmHandlerPackagesProcess+0x64>)
 8011474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011478:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 801147a:	2b00      	cmp	r3, #0
 801147c:	d00d      	beq.n	801149a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 801147e:	79fb      	ldrb	r3, [r7, #7]
 8011480:	4618      	mov	r0, r3
 8011482:	f7ff ff23 	bl	80112cc <LmHandlerPackageIsInitialized>
 8011486:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8011488:	2b00      	cmp	r3, #0
 801148a:	d006      	beq.n	801149a <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 801148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011490:	4a09      	ldr	r2, [pc, #36]	; (80114b8 <LmHandlerPackagesProcess+0x64>)
 8011492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011496:	691b      	ldr	r3, [r3, #16]
 8011498:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 801149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801149e:	b2db      	uxtb	r3, r3
 80114a0:	3301      	adds	r3, #1
 80114a2:	b2db      	uxtb	r3, r3
 80114a4:	71fb      	strb	r3, [r7, #7]
 80114a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80114aa:	2b04      	cmp	r3, #4
 80114ac:	ddd8      	ble.n	8011460 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 80114ae:	bf00      	nop
 80114b0:	bf00      	nop
 80114b2:	3708      	adds	r7, #8
 80114b4:	46bd      	mov	sp, r7
 80114b6:	bd80      	pop	{r7, pc}
 80114b8:	20000750 	.word	0x20000750

080114bc <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b082      	sub	sp, #8
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	4603      	mov	r3, r0
 80114c4:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 80114c6:	4a09      	ldr	r2, [pc, #36]	; (80114ec <LmHandlerOnTxFrameCtrlChanged+0x30>)
 80114c8:	79fb      	ldrb	r3, [r7, #7]
 80114ca:	70d3      	strb	r3, [r2, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 80114cc:	4b08      	ldr	r3, [pc, #32]	; (80114f0 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d005      	beq.n	80114e2 <LmHandlerOnTxFrameCtrlChanged+0x26>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 80114d6:	4b06      	ldr	r3, [pc, #24]	; (80114f0 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114dc:	79fa      	ldrb	r2, [r7, #7]
 80114de:	4610      	mov	r0, r2
 80114e0:	4798      	blx	r3
    }
}
 80114e2:	bf00      	nop
 80114e4:	3708      	adds	r7, #8
 80114e6:	46bd      	mov	sp, r7
 80114e8:	bd80      	pop	{r7, pc}
 80114ea:	bf00      	nop
 80114ec:	20000764 	.word	0x20000764
 80114f0:	2000077c 	.word	0x2000077c

080114f4 <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b082      	sub	sp, #8
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	4603      	mov	r3, r0
 80114fc:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 80114fe:	4a09      	ldr	r2, [pc, #36]	; (8011524 <LmHandlerOnPingSlotPeriodicityChanged+0x30>)
 8011500:	79fb      	ldrb	r3, [r7, #7]
 8011502:	7413      	strb	r3, [r2, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 8011504:	4b08      	ldr	r3, [pc, #32]	; (8011528 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801150a:	2b00      	cmp	r3, #0
 801150c:	d005      	beq.n	801151a <LmHandlerOnPingSlotPeriodicityChanged+0x26>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 801150e:	4b06      	ldr	r3, [pc, #24]	; (8011528 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011514:	79fa      	ldrb	r2, [r7, #7]
 8011516:	4610      	mov	r0, r2
 8011518:	4798      	blx	r3
    }
}
 801151a:	bf00      	nop
 801151c:	3708      	adds	r7, #8
 801151e:	46bd      	mov	sp, r7
 8011520:	bd80      	pop	{r7, pc}
 8011522:	bf00      	nop
 8011524:	20000764 	.word	0x20000764
 8011528:	2000077c 	.word	0x2000077c

0801152c <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 801152c:	b480      	push	{r7}
 801152e:	b083      	sub	sp, #12
 8011530:	af00      	add	r7, sp, #0
 8011532:	4603      	mov	r3, r0
 8011534:	6039      	str	r1, [r7, #0]
 8011536:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 8011538:	683b      	ldr	r3, [r7, #0]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d102      	bne.n	8011544 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 801153e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011542:	e00e      	b.n	8011562 <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 8011544:	79fb      	ldrb	r3, [r7, #7]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d002      	beq.n	8011550 <LmHandlerGetVersion+0x24>
 801154a:	2b01      	cmp	r3, #1
 801154c:	d004      	beq.n	8011558 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 801154e:	e007      	b.n	8011560 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	4a06      	ldr	r2, [pc, #24]	; (801156c <LmHandlerGetVersion+0x40>)
 8011554:	601a      	str	r2, [r3, #0]
            break;
 8011556:	e003      	b.n	8011560 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 8011558:	683b      	ldr	r3, [r7, #0]
 801155a:	4a05      	ldr	r2, [pc, #20]	; (8011570 <LmHandlerGetVersion+0x44>)
 801155c:	601a      	str	r2, [r3, #0]
            break;
 801155e:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 8011560:	2300      	movs	r3, #0
}
 8011562:	4618      	mov	r0, r3
 8011564:	370c      	adds	r7, #12
 8011566:	46bd      	mov	sp, r7
 8011568:	bc80      	pop	{r7}
 801156a:	4770      	bx	lr
 801156c:	01000400 	.word	0x01000400
 8011570:	02010001 	.word	0x02010001

08011574 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 8011574:	b580      	push	{r7, lr}
 8011576:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 8011578:	f005 fce0 	bl	8016f3c <LoRaMacDeInitialization>
 801157c:	4603      	mov	r3, r0
 801157e:	2b00      	cmp	r3, #0
 8011580:	d101      	bne.n	8011586 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8011582:	2300      	movs	r3, #0
 8011584:	e001      	b.n	801158a <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8011586:	f06f 0301 	mvn.w	r3, #1
    }
}
 801158a:	4618      	mov	r0, r3
 801158c:	bd80      	pop	{r7, pc}

0801158e <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 801158e:	b580      	push	{r7, lr}
 8011590:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 8011592:	f004 fb93 	bl	8015cbc <LoRaMacHalt>
 8011596:	4603      	mov	r3, r0
 8011598:	2b00      	cmp	r3, #0
 801159a:	d101      	bne.n	80115a0 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 801159c:	2300      	movs	r3, #0
 801159e:	e001      	b.n	80115a4 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 80115a0:	f06f 0301 	mvn.w	r3, #1
    }
}
 80115a4:	4618      	mov	r0, r3
 80115a6:	bd80      	pop	{r7, pc}

080115a8 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b08c      	sub	sp, #48	; 0x30
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d102      	bne.n	80115bc <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 80115b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80115ba:	e016      	b.n	80115ea <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 80115bc:	2321      	movs	r3, #33	; 0x21
 80115be:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80115c0:	f107 0308 	add.w	r3, r7, #8
 80115c4:	4618      	mov	r0, r3
 80115c6:	f004 fc41 	bl	8015e4c <LoRaMacMibGetRequestConfirm>
 80115ca:	4603      	mov	r3, r0
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d002      	beq.n	80115d6 <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 80115d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80115d4:	e009      	b.n	80115ea <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 80115d6:	f997 200c 	ldrsb.w	r2, [r7, #12]
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	f993 2000 	ldrsb.w	r2, [r3]
 80115e4:	4b03      	ldr	r3, [pc, #12]	; (80115f4 <LmHandlerGetTxPower+0x4c>)
 80115e6:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 80115e8:	2300      	movs	r3, #0
}
 80115ea:	4618      	mov	r0, r3
 80115ec:	3730      	adds	r7, #48	; 0x30
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bd80      	pop	{r7, pc}
 80115f2:	bf00      	nop
 80115f4:	20000764 	.word	0x20000764

080115f8 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b08e      	sub	sp, #56	; 0x38
 80115fc:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 80115fe:	2300      	movs	r3, #0
 8011600:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 8011604:	2300      	movs	r3, #0
 8011606:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 8011608:	f7ff ffc1 	bl	801158e <LmHandlerHalt>
 801160c:	4603      	mov	r3, r0
 801160e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 8011612:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8011616:	2b00      	cmp	r3, #0
 8011618:	d12f      	bne.n	801167a <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 801161a:	f000 f859 	bl	80116d0 <NvmDataMgmtStoreBegin>
 801161e:	6338      	str	r0, [r7, #48]	; 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 8011620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011622:	f113 0f02 	cmn.w	r3, #2
 8011626:	d103      	bne.n	8011630 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 8011628:	23f8      	movs	r3, #248	; 0xf8
 801162a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801162e:	e01c      	b.n	801166a <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 8011630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011632:	2b00      	cmp	r3, #0
 8011634:	d104      	bne.n	8011640 <LmHandlerNvmDataStore+0x48>
 8011636:	4b1b      	ldr	r3, [pc, #108]	; (80116a4 <LmHandlerNvmDataStore+0xac>)
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	695b      	ldr	r3, [r3, #20]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d103      	bne.n	8011648 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8011640:	23ff      	movs	r3, #255	; 0xff
 8011642:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011646:	e010      	b.n	801166a <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 8011648:	2327      	movs	r3, #39	; 0x27
 801164a:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 801164c:	463b      	mov	r3, r7
 801164e:	4618      	mov	r0, r3
 8011650:	f004 fbfc 	bl	8015e4c <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	62fb      	str	r3, [r7, #44]	; 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 8011658:	f44f 63ba 	mov.w	r3, #1488	; 0x5d0
 801165c:	62bb      	str	r3, [r7, #40]	; 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 801165e:	4b11      	ldr	r3, [pc, #68]	; (80116a4 <LmHandlerNvmDataStore+0xac>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	695b      	ldr	r3, [r3, #20]
 8011664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011666:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011668:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 801166a:	f000 f847 	bl	80116fc <NvmDataMgmtStoreEnd>
 801166e:	4603      	mov	r3, r0
 8011670:	2b00      	cmp	r3, #0
 8011672:	d002      	beq.n	801167a <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8011674:	23ff      	movs	r3, #255	; 0xff
 8011676:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 801167a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 801167e:	2b00      	cmp	r3, #0
 8011680:	d109      	bne.n	8011696 <LmHandlerNvmDataStore+0x9e>
 8011682:	4b08      	ldr	r3, [pc, #32]	; (80116a4 <LmHandlerNvmDataStore+0xac>)
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	69db      	ldr	r3, [r3, #28]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d004      	beq.n	8011696 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 801168c:	4b05      	ldr	r3, [pc, #20]	; (80116a4 <LmHandlerNvmDataStore+0xac>)
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	69db      	ldr	r3, [r3, #28]
 8011692:	2001      	movs	r0, #1
 8011694:	4798      	blx	r3
    }

    return lmhStatus;
 8011696:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 801169a:	4618      	mov	r0, r3
 801169c:	3738      	adds	r7, #56	; 0x38
 801169e:	46bd      	mov	sp, r7
 80116a0:	bd80      	pop	{r7, pc}
 80116a2:	bf00      	nop
 80116a4:	2000077c 	.word	0x2000077c

080116a8 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 80116a8:	b480      	push	{r7}
 80116aa:	b083      	sub	sp, #12
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	4603      	mov	r3, r0
 80116b0:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 80116b2:	4b06      	ldr	r3, [pc, #24]	; (80116cc <NvmDataMgmtEvent+0x24>)
 80116b4:	881a      	ldrh	r2, [r3, #0]
 80116b6:	88fb      	ldrh	r3, [r7, #6]
 80116b8:	4313      	orrs	r3, r2
 80116ba:	b29a      	uxth	r2, r3
 80116bc:	4b03      	ldr	r3, [pc, #12]	; (80116cc <NvmDataMgmtEvent+0x24>)
 80116be:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 80116c0:	bf00      	nop
 80116c2:	370c      	adds	r7, #12
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bc80      	pop	{r7}
 80116c8:	4770      	bx	lr
 80116ca:	bf00      	nop
 80116cc:	200008a4 	.word	0x200008a4

080116d0 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 80116d4:	4b08      	ldr	r3, [pc, #32]	; (80116f8 <NvmDataMgmtStoreBegin+0x28>)
 80116d6:	881b      	ldrh	r3, [r3, #0]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d102      	bne.n	80116e2 <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 80116dc:	f06f 0301 	mvn.w	r3, #1
 80116e0:	e008      	b.n	80116f4 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 80116e2:	f004 fac3 	bl	8015c6c <LoRaMacStop>
 80116e6:	4603      	mov	r3, r0
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d002      	beq.n	80116f2 <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 80116ec:	f06f 0302 	mvn.w	r3, #2
 80116f0:	e000      	b.n	80116f4 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 80116f2:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 80116f4:	4618      	mov	r0, r3
 80116f6:	bd80      	pop	{r7, pc}
 80116f8:	200008a4 	.word	0x200008a4

080116fc <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8011700:	4b03      	ldr	r3, [pc, #12]	; (8011710 <NvmDataMgmtStoreEnd+0x14>)
 8011702:	2200      	movs	r2, #0
 8011704:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 8011706:	f004 faa3 	bl	8015c50 <LoRaMacStart>
    return NVM_DATA_OK;
 801170a:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 801170c:	4618      	mov	r0, r3
 801170e:	bd80      	pop	{r7, pc}
 8011710:	200008a4 	.word	0x200008a4

08011714 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 8011714:	b580      	push	{r7, lr}
 8011716:	af00      	add	r7, sp, #0
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 8011718:	2220      	movs	r2, #32
 801171a:	2100      	movs	r1, #0
 801171c:	4802      	ldr	r0, [pc, #8]	; (8011728 <ClassBStatusReset+0x14>)
 801171e:	f00a f8b5 	bl	801b88c <memset1>
}
 8011722:	bf00      	nop
 8011724:	bd80      	pop	{r7, pc}
 8011726:	bf00      	nop
 8011728:	200008bc 	.word	0x200008bc

0801172c <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  /* To be initialized by LmHandler */
    .OnSystemReset           = NULL,  /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 801172c:	b480      	push	{r7}
 801172e:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 8011730:	4b02      	ldr	r3, [pc, #8]	; (801173c <LmhpCompliancePackageFactory+0x10>)
}
 8011732:	4618      	mov	r0, r3
 8011734:	46bd      	mov	sp, r7
 8011736:	bc80      	pop	{r7}
 8011738:	4770      	bx	lr
 801173a:	bf00      	nop
 801173c:	200000d8 	.word	0x200000d8

08011740 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b086      	sub	sp, #24
 8011744:	af02      	add	r7, sp, #8
 8011746:	60f8      	str	r0, [r7, #12]
 8011748:	60b9      	str	r1, [r7, #8]
 801174a:	4613      	mov	r3, r2
 801174c:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d018      	beq.n	8011786 <LmhpComplianceInit+0x46>
 8011754:	68bb      	ldr	r3, [r7, #8]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d015      	beq.n	8011786 <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 801175a:	4a19      	ldr	r2, [pc, #100]	; (80117c0 <LmhpComplianceInit+0x80>)
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 8011760:	4a18      	ldr	r2, [pc, #96]	; (80117c4 <LmhpComplianceInit+0x84>)
 8011762:	68bb      	ldr	r3, [r7, #8]
 8011764:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8011766:	4a17      	ldr	r2, [pc, #92]	; (80117c4 <LmhpComplianceInit+0x84>)
 8011768:	79fb      	ldrb	r3, [r7, #7]
 801176a:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 801176c:	4b15      	ldr	r3, [pc, #84]	; (80117c4 <LmhpComplianceInit+0x84>)
 801176e:	2201      	movs	r2, #1
 8011770:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 8011772:	2300      	movs	r3, #0
 8011774:	9300      	str	r3, [sp, #0]
 8011776:	4b14      	ldr	r3, [pc, #80]	; (80117c8 <LmhpComplianceInit+0x88>)
 8011778:	2200      	movs	r2, #0
 801177a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801177e:	4813      	ldr	r0, [pc, #76]	; (80117cc <LmhpComplianceInit+0x8c>)
 8011780:	f00e f960 	bl	801fa44 <UTIL_TIMER_Create>
 8011784:	e005      	b.n	8011792 <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 8011786:	4b0e      	ldr	r3, [pc, #56]	; (80117c0 <LmhpComplianceInit+0x80>)
 8011788:	2200      	movs	r2, #0
 801178a:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 801178c:	4b0d      	ldr	r3, [pc, #52]	; (80117c4 <LmhpComplianceInit+0x84>)
 801178e:	2200      	movs	r2, #0
 8011790:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 8011792:	4b0c      	ldr	r3, [pc, #48]	; (80117c4 <LmhpComplianceInit+0x84>)
 8011794:	2200      	movs	r2, #0
 8011796:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 8011798:	f7ff ffbc 	bl	8011714 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 801179c:	4b09      	ldr	r3, [pc, #36]	; (80117c4 <LmhpComplianceInit+0x84>)
 801179e:	2200      	movs	r2, #0
 80117a0:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 80117a2:	4b08      	ldr	r3, [pc, #32]	; (80117c4 <LmhpComplianceInit+0x84>)
 80117a4:	2200      	movs	r2, #0
 80117a6:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 80117a8:	4b06      	ldr	r3, [pc, #24]	; (80117c4 <LmhpComplianceInit+0x84>)
 80117aa:	2200      	movs	r2, #0
 80117ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 80117b0:	4b04      	ldr	r3, [pc, #16]	; (80117c4 <LmhpComplianceInit+0x84>)
 80117b2:	2200      	movs	r2, #0
 80117b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 80117b8:	bf00      	nop
 80117ba:	3710      	adds	r7, #16
 80117bc:	46bd      	mov	sp, r7
 80117be:	bd80      	pop	{r7, pc}
 80117c0:	200008e0 	.word	0x200008e0
 80117c4:	200008a8 	.word	0x200008a8
 80117c8:	080120c9 	.word	0x080120c9
 80117cc:	200008e4 	.word	0x200008e4

080117d0 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 80117d0:	b480      	push	{r7}
 80117d2:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 80117d4:	4b02      	ldr	r3, [pc, #8]	; (80117e0 <LmhpComplianceIsInitialized+0x10>)
 80117d6:	781b      	ldrb	r3, [r3, #0]
}
 80117d8:	4618      	mov	r0, r3
 80117da:	46bd      	mov	sp, r7
 80117dc:	bc80      	pop	{r7}
 80117de:	4770      	bx	lr
 80117e0:	200008a8 	.word	0x200008a8

080117e4 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 80117e4:	b480      	push	{r7}
 80117e6:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 80117e8:	4b02      	ldr	r3, [pc, #8]	; (80117f4 <LmhpComplianceIsTxPending+0x10>)
 80117ea:	785b      	ldrb	r3, [r3, #1]
}
 80117ec:	4618      	mov	r0, r3
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bc80      	pop	{r7}
 80117f2:	4770      	bx	lr
 80117f4:	200008a8 	.word	0x200008a8

080117f8 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 80117f8:	b590      	push	{r4, r7, lr}
 80117fa:	b085      	sub	sp, #20
 80117fc:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 80117fe:	4b33      	ldr	r3, [pc, #204]	; (80118cc <LmhpComplianceProcess+0xd4>)
 8011800:	785b      	ldrb	r3, [r3, #1]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d03e      	beq.n	8011884 <LmhpComplianceProcess+0x8c>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 8011806:	f00e fadb 	bl	801fdc0 <UTIL_TIMER_GetCurrentTime>
 801180a:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 801180c:	4b2f      	ldr	r3, [pc, #188]	; (80118cc <LmhpComplianceProcess+0xd4>)
 801180e:	685c      	ldr	r4, [r3, #4]
 8011810:	f7ff f8ba 	bl	8010988 <LmHandlerGetDutyCycleWaitTime>
 8011814:	4603      	mov	r3, r0
 8011816:	4423      	add	r3, r4
 8011818:	68fa      	ldr	r2, [r7, #12]
 801181a:	429a      	cmp	r2, r3
 801181c:	d941      	bls.n	80118a2 <LmhpComplianceProcess+0xaa>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 801181e:	4b2b      	ldr	r3, [pc, #172]	; (80118cc <LmhpComplianceProcess+0xd4>)
 8011820:	7a9b      	ldrb	r3, [r3, #10]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d03d      	beq.n	80118a2 <LmhpComplianceProcess+0xaa>
            {
                /* Answer commands */
                LmHandlerAppData_t appData =
 8011826:	23e0      	movs	r3, #224	; 0xe0
 8011828:	703b      	strb	r3, [r7, #0]
                {
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 801182a:	4b28      	ldr	r3, [pc, #160]	; (80118cc <LmhpComplianceProcess+0xd4>)
 801182c:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData =
 801182e:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 8011830:	4b26      	ldr	r3, [pc, #152]	; (80118cc <LmhpComplianceProcess+0xd4>)
 8011832:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData =
 8011834:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };

                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 8011836:	23ff      	movs	r3, #255	; 0xff
 8011838:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 801183a:	4b24      	ldr	r3, [pc, #144]	; (80118cc <LmhpComplianceProcess+0xd4>)
 801183c:	7a19      	ldrb	r1, [r3, #8]
 801183e:	463b      	mov	r3, r7
 8011840:	2201      	movs	r2, #1
 8011842:	4618      	mov	r0, r3
 8011844:	f7ff f968 	bl	8010b18 <LmHandlerSend>
 8011848:	4603      	mov	r3, r0
 801184a:	72fb      	strb	r3, [r7, #11]
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 801184c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d004      	beq.n	801185e <LmhpComplianceProcess+0x66>
 8011854:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011858:	f113 0f07 	cmn.w	r3, #7
 801185c:	d106      	bne.n	801186c <LmhpComplianceProcess+0x74>
                {
                    ComplianceTestState.IsTxPending = false;
 801185e:	4b1b      	ldr	r3, [pc, #108]	; (80118cc <LmhpComplianceProcess+0xd4>)
 8011860:	2200      	movs	r2, #0
 8011862:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 8011864:	4b19      	ldr	r3, [pc, #100]	; (80118cc <LmhpComplianceProcess+0xd4>)
 8011866:	2200      	movs	r2, #0
 8011868:	729a      	strb	r2, [r3, #10]
 801186a:	e007      	b.n	801187c <LmhpComplianceProcess+0x84>
                }
                else
                {
                    /* try to send the message again */
                    TimerSetValue( &ProcessTimer, 1500 );
 801186c:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8011870:	4817      	ldr	r0, [pc, #92]	; (80118d0 <LmhpComplianceProcess+0xd8>)
 8011872:	f00e f9fb 	bl	801fc6c <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 8011876:	4816      	ldr	r0, [pc, #88]	; (80118d0 <LmhpComplianceProcess+0xd8>)
 8011878:	f00e f91a 	bl	801fab0 <UTIL_TIMER_Start>
                }

                ComplianceTestState.TxPendingTimestamp = now;
 801187c:	4a13      	ldr	r2, [pc, #76]	; (80118cc <LmhpComplianceProcess+0xd4>)
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	6053      	str	r3, [r2, #4]
 8011882:	e00e      	b.n	80118a2 <LmhpComplianceProcess+0xaa>
        }
    }
    else
    {
        /* If no Tx is pending process other commands */
        if( ComplianceTestState.IsClassReqCmdPending == true )
 8011884:	4b11      	ldr	r3, [pc, #68]	; (80118cc <LmhpComplianceProcess+0xd4>)
 8011886:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801188a:	2b00      	cmp	r3, #0
 801188c:	d009      	beq.n	80118a2 <LmhpComplianceProcess+0xaa>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 801188e:	4b0f      	ldr	r3, [pc, #60]	; (80118cc <LmhpComplianceProcess+0xd4>)
 8011890:	2200      	movs	r2, #0
 8011892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 8011896:	4b0d      	ldr	r3, [pc, #52]	; (80118cc <LmhpComplianceProcess+0xd4>)
 8011898:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801189c:	4618      	mov	r0, r3
 801189e:	f7ff fa31 	bl	8010d04 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 80118a2:	4b0a      	ldr	r3, [pc, #40]	; (80118cc <LmhpComplianceProcess+0xd4>)
 80118a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d00a      	beq.n	80118c2 <LmhpComplianceProcess+0xca>
    {
        ComplianceTestState.IsResetCmdPending = false;
 80118ac:	4b07      	ldr	r3, [pc, #28]	; (80118cc <LmhpComplianceProcess+0xd4>)
 80118ae:	2200      	movs	r2, #0
 80118b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Call platform MCU reset API */
        if( CompliancePackage.OnSystemReset != NULL )
 80118b4:	4b07      	ldr	r3, [pc, #28]	; (80118d4 <LmhpComplianceProcess+0xdc>)
 80118b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d002      	beq.n	80118c2 <LmhpComplianceProcess+0xca>
        {
            CompliancePackage.OnSystemReset( );
 80118bc:	4b05      	ldr	r3, [pc, #20]	; (80118d4 <LmhpComplianceProcess+0xdc>)
 80118be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118c0:	4798      	blx	r3
        }
    }
}
 80118c2:	bf00      	nop
 80118c4:	3714      	adds	r7, #20
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bd90      	pop	{r4, r7, pc}
 80118ca:	bf00      	nop
 80118cc:	200008a8 	.word	0x200008a8
 80118d0:	200008e4 	.word	0x200008e4
 80118d4:	200000d8 	.word	0x200000d8

080118d8 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 80118d8:	b5b0      	push	{r4, r5, r7, lr}
 80118da:	b0a4      	sub	sp, #144	; 0x90
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 80118e0:	2300      	movs	r3, #0
 80118e2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 80118e6:	4bd0      	ldr	r3, [pc, #832]	; (8011c28 <LmhpComplianceOnMcpsIndication+0x350>)
 80118e8:	781b      	ldrb	r3, [r3, #0]
 80118ea:	f083 0301 	eor.w	r3, r3, #1
 80118ee:	b2db      	uxtb	r3, r3
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	f040 83bf 	bne.w	8012074 <LmhpComplianceOnMcpsIndication+0x79c>
        return;
    }

    /* Increment the compliance certification protocol downlink counter */
    /* Not counting downlinks on FPort 0 */
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	78db      	ldrb	r3, [r3, #3]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d103      	bne.n	8011906 <LmhpComplianceOnMcpsIndication+0x2e>
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	7b9b      	ldrb	r3, [r3, #14]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d005      	beq.n	8011912 <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 8011906:	4bc8      	ldr	r3, [pc, #800]	; (8011c28 <LmhpComplianceOnMcpsIndication+0x350>)
 8011908:	8a1b      	ldrh	r3, [r3, #16]
 801190a:	3301      	adds	r3, #1
 801190c:	b29a      	uxth	r2, r3
 801190e:	4bc6      	ldr	r3, [pc, #792]	; (8011c28 <LmhpComplianceOnMcpsIndication+0x350>)
 8011910:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	7b5b      	ldrb	r3, [r3, #13]
 8011916:	f083 0301 	eor.w	r3, r3, #1
 801191a:	b2db      	uxtb	r3, r3
 801191c:	2b00      	cmp	r3, #0
 801191e:	f040 83ab 	bne.w	8012078 <LmhpComplianceOnMcpsIndication+0x7a0>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	78db      	ldrb	r3, [r3, #3]
 8011926:	2be0      	cmp	r3, #224	; 0xe0
 8011928:	f040 83a8 	bne.w	801207c <LmhpComplianceOnMcpsIndication+0x7a4>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 801192c:	4bbe      	ldr	r3, [pc, #760]	; (8011c28 <LmhpComplianceOnMcpsIndication+0x350>)
 801192e:	2200      	movs	r2, #0
 8011930:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	689a      	ldr	r2, [r3, #8]
 8011936:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801193a:	1c59      	adds	r1, r3, #1
 801193c:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8011940:	4413      	add	r3, r2
 8011942:	781b      	ldrb	r3, [r3, #0]
 8011944:	2b7f      	cmp	r3, #127	; 0x7f
 8011946:	f200 8372 	bhi.w	801202e <LmhpComplianceOnMcpsIndication+0x756>
 801194a:	a201      	add	r2, pc, #4	; (adr r2, 8011950 <LmhpComplianceOnMcpsIndication+0x78>)
 801194c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011950:	08011b51 	.word	0x08011b51
 8011954:	08011b95 	.word	0x08011b95
 8011958:	08011b9f 	.word	0x08011b9f
 801195c:	08011bb5 	.word	0x08011bb5
 8011960:	08011bd7 	.word	0x08011bd7
 8011964:	08011c05 	.word	0x08011c05
 8011968:	08011c31 	.word	0x08011c31
 801196c:	08011c8f 	.word	0x08011c8f
 8011970:	08011ce7 	.word	0x08011ce7
 8011974:	08011d53 	.word	0x08011d53
 8011978:	08011da3 	.word	0x08011da3
 801197c:	0801202f 	.word	0x0801202f
 8011980:	0801202f 	.word	0x0801202f
 8011984:	0801202f 	.word	0x0801202f
 8011988:	0801202f 	.word	0x0801202f
 801198c:	0801202f 	.word	0x0801202f
 8011990:	0801202f 	.word	0x0801202f
 8011994:	0801202f 	.word	0x0801202f
 8011998:	0801202f 	.word	0x0801202f
 801199c:	0801202f 	.word	0x0801202f
 80119a0:	0801202f 	.word	0x0801202f
 80119a4:	0801202f 	.word	0x0801202f
 80119a8:	0801202f 	.word	0x0801202f
 80119ac:	0801202f 	.word	0x0801202f
 80119b0:	0801202f 	.word	0x0801202f
 80119b4:	0801202f 	.word	0x0801202f
 80119b8:	0801202f 	.word	0x0801202f
 80119bc:	0801202f 	.word	0x0801202f
 80119c0:	0801202f 	.word	0x0801202f
 80119c4:	0801202f 	.word	0x0801202f
 80119c8:	0801202f 	.word	0x0801202f
 80119cc:	0801202f 	.word	0x0801202f
 80119d0:	08011dab 	.word	0x08011dab
 80119d4:	08011dbd 	.word	0x08011dbd
 80119d8:	08011dc5 	.word	0x08011dc5
 80119dc:	0801202f 	.word	0x0801202f
 80119e0:	0801202f 	.word	0x0801202f
 80119e4:	0801202f 	.word	0x0801202f
 80119e8:	0801202f 	.word	0x0801202f
 80119ec:	0801202f 	.word	0x0801202f
 80119f0:	0801202f 	.word	0x0801202f
 80119f4:	0801202f 	.word	0x0801202f
 80119f8:	0801202f 	.word	0x0801202f
 80119fc:	0801202f 	.word	0x0801202f
 8011a00:	0801202f 	.word	0x0801202f
 8011a04:	0801202f 	.word	0x0801202f
 8011a08:	0801202f 	.word	0x0801202f
 8011a0c:	0801202f 	.word	0x0801202f
 8011a10:	0801202f 	.word	0x0801202f
 8011a14:	0801202f 	.word	0x0801202f
 8011a18:	0801202f 	.word	0x0801202f
 8011a1c:	0801202f 	.word	0x0801202f
 8011a20:	0801202f 	.word	0x0801202f
 8011a24:	0801202f 	.word	0x0801202f
 8011a28:	0801202f 	.word	0x0801202f
 8011a2c:	0801202f 	.word	0x0801202f
 8011a30:	0801202f 	.word	0x0801202f
 8011a34:	0801202f 	.word	0x0801202f
 8011a38:	0801202f 	.word	0x0801202f
 8011a3c:	0801202f 	.word	0x0801202f
 8011a40:	0801202f 	.word	0x0801202f
 8011a44:	0801202f 	.word	0x0801202f
 8011a48:	0801202f 	.word	0x0801202f
 8011a4c:	0801202f 	.word	0x0801202f
 8011a50:	0801202f 	.word	0x0801202f
 8011a54:	0801202f 	.word	0x0801202f
 8011a58:	0801202f 	.word	0x0801202f
 8011a5c:	0801202f 	.word	0x0801202f
 8011a60:	0801202f 	.word	0x0801202f
 8011a64:	0801202f 	.word	0x0801202f
 8011a68:	0801202f 	.word	0x0801202f
 8011a6c:	0801202f 	.word	0x0801202f
 8011a70:	0801202f 	.word	0x0801202f
 8011a74:	0801202f 	.word	0x0801202f
 8011a78:	0801202f 	.word	0x0801202f
 8011a7c:	0801202f 	.word	0x0801202f
 8011a80:	0801202f 	.word	0x0801202f
 8011a84:	0801202f 	.word	0x0801202f
 8011a88:	0801202f 	.word	0x0801202f
 8011a8c:	0801202f 	.word	0x0801202f
 8011a90:	0801202f 	.word	0x0801202f
 8011a94:	0801202f 	.word	0x0801202f
 8011a98:	0801202f 	.word	0x0801202f
 8011a9c:	0801202f 	.word	0x0801202f
 8011aa0:	0801202f 	.word	0x0801202f
 8011aa4:	0801202f 	.word	0x0801202f
 8011aa8:	0801202f 	.word	0x0801202f
 8011aac:	0801202f 	.word	0x0801202f
 8011ab0:	0801202f 	.word	0x0801202f
 8011ab4:	0801202f 	.word	0x0801202f
 8011ab8:	0801202f 	.word	0x0801202f
 8011abc:	0801202f 	.word	0x0801202f
 8011ac0:	0801202f 	.word	0x0801202f
 8011ac4:	0801202f 	.word	0x0801202f
 8011ac8:	0801202f 	.word	0x0801202f
 8011acc:	0801202f 	.word	0x0801202f
 8011ad0:	0801202f 	.word	0x0801202f
 8011ad4:	0801202f 	.word	0x0801202f
 8011ad8:	0801202f 	.word	0x0801202f
 8011adc:	0801202f 	.word	0x0801202f
 8011ae0:	0801202f 	.word	0x0801202f
 8011ae4:	0801202f 	.word	0x0801202f
 8011ae8:	0801202f 	.word	0x0801202f
 8011aec:	0801202f 	.word	0x0801202f
 8011af0:	0801202f 	.word	0x0801202f
 8011af4:	0801202f 	.word	0x0801202f
 8011af8:	0801202f 	.word	0x0801202f
 8011afc:	0801202f 	.word	0x0801202f
 8011b00:	0801202f 	.word	0x0801202f
 8011b04:	0801202f 	.word	0x0801202f
 8011b08:	0801202f 	.word	0x0801202f
 8011b0c:	0801202f 	.word	0x0801202f
 8011b10:	0801202f 	.word	0x0801202f
 8011b14:	0801202f 	.word	0x0801202f
 8011b18:	0801202f 	.word	0x0801202f
 8011b1c:	0801202f 	.word	0x0801202f
 8011b20:	0801202f 	.word	0x0801202f
 8011b24:	0801202f 	.word	0x0801202f
 8011b28:	0801202f 	.word	0x0801202f
 8011b2c:	0801202f 	.word	0x0801202f
 8011b30:	0801202f 	.word	0x0801202f
 8011b34:	0801202f 	.word	0x0801202f
 8011b38:	0801202f 	.word	0x0801202f
 8011b3c:	0801202f 	.word	0x0801202f
 8011b40:	0801202f 	.word	0x0801202f
 8011b44:	08011df7 	.word	0x08011df7
 8011b48:	08011ea7 	.word	0x08011ea7
 8011b4c:	08011ed9 	.word	0x08011ed9
    {
        case COMPLIANCE_PKG_VERSION_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 8011b50:	4b35      	ldr	r3, [pc, #212]	; (8011c28 <LmhpComplianceOnMcpsIndication+0x350>)
 8011b52:	68da      	ldr	r2, [r3, #12]
 8011b54:	4b34      	ldr	r3, [pc, #208]	; (8011c28 <LmhpComplianceOnMcpsIndication+0x350>)
 8011b56:	7a9b      	ldrb	r3, [r3, #10]
 8011b58:	1c59      	adds	r1, r3, #1
 8011b5a:	b2c8      	uxtb	r0, r1
 8011b5c:	4932      	ldr	r1, [pc, #200]	; (8011c28 <LmhpComplianceOnMcpsIndication+0x350>)
 8011b5e:	7288      	strb	r0, [r1, #10]
 8011b60:	4413      	add	r3, r2
 8011b62:	2200      	movs	r2, #0
 8011b64:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 8011b66:	4b30      	ldr	r3, [pc, #192]	; (8011c28 <LmhpComplianceOnMcpsIndication+0x350>)
 8011b68:	68da      	ldr	r2, [r3, #12]
 8011b6a:	4b2f      	ldr	r3, [pc, #188]	; (8011c28 <LmhpComplianceOnMcpsIndication+0x350>)
 8011b6c:	7a9b      	ldrb	r3, [r3, #10]
 8011b6e:	1c59      	adds	r1, r3, #1
 8011b70:	b2c8      	uxtb	r0, r1
 8011b72:	492d      	ldr	r1, [pc, #180]	; (8011c28 <LmhpComplianceOnMcpsIndication+0x350>)
 8011b74:	7288      	strb	r0, [r1, #10]
 8011b76:	4413      	add	r3, r2
 8011b78:	2206      	movs	r2, #6
 8011b7a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 8011b7c:	4b2a      	ldr	r3, [pc, #168]	; (8011c28 <LmhpComplianceOnMcpsIndication+0x350>)
 8011b7e:	68da      	ldr	r2, [r3, #12]
 8011b80:	4b29      	ldr	r3, [pc, #164]	; (8011c28 <LmhpComplianceOnMcpsIndication+0x350>)
 8011b82:	7a9b      	ldrb	r3, [r3, #10]
 8011b84:	1c59      	adds	r1, r3, #1
 8011b86:	b2c8      	uxtb	r0, r1
 8011b88:	4927      	ldr	r1, [pc, #156]	; (8011c28 <LmhpComplianceOnMcpsIndication+0x350>)
 8011b8a:	7288      	strb	r0, [r1, #10]
 8011b8c:	4413      	add	r3, r2
 8011b8e:	2201      	movs	r2, #1
 8011b90:	701a      	strb	r2, [r3, #0]
                break;
 8011b92:	e257      	b.n	8012044 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_RESET_REQ:
            {
                ComplianceTestState.IsResetCmdPending = true;
 8011b94:	4b24      	ldr	r3, [pc, #144]	; (8011c28 <LmhpComplianceOnMcpsIndication+0x350>)
 8011b96:	2201      	movs	r2, #1
 8011b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 8011b9c:	e252      	b.n	8012044 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_JOIN_REQ:
            {
                if( CompliancePackage.OnJoinRequest != NULL )
 8011b9e:	4b23      	ldr	r3, [pc, #140]	; (8011c2c <LmhpComplianceOnMcpsIndication+0x354>)
 8011ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	f000 8245 	beq.w	8012032 <LmhpComplianceOnMcpsIndication+0x75a>
                {
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 8011ba8:	4b20      	ldr	r3, [pc, #128]	; (8011c2c <LmhpComplianceOnMcpsIndication+0x354>)
 8011baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bac:	2101      	movs	r1, #1
 8011bae:	2002      	movs	r0, #2
 8011bb0:	4798      	blx	r3
                }
                break;
 8011bb2:	e23e      	b.n	8012032 <LmhpComplianceOnMcpsIndication+0x75a>
            }
        case COMPLIANCE_SWITCH_CLASS_REQ:
            {
                /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	689a      	ldr	r2, [r3, #8]
 8011bb8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011bbc:	1c59      	adds	r1, r3, #1
 8011bbe:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8011bc2:	4413      	add	r3, r2
 8011bc4:	781a      	ldrb	r2, [r3, #0]
 8011bc6:	4b18      	ldr	r3, [pc, #96]	; (8011c28 <LmhpComplianceOnMcpsIndication+0x350>)
 8011bc8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 8011bcc:	4b16      	ldr	r3, [pc, #88]	; (8011c28 <LmhpComplianceOnMcpsIndication+0x350>)
 8011bce:	2201      	movs	r2, #1
 8011bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                break;
 8011bd4:	e236      	b.n	8012044 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_ADR_BIT_CHANGE_REQ:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type            = MIB_ADR;
 8011bd6:	2304      	movs	r3, #4
 8011bd8:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	689a      	ldr	r2, [r3, #8]
 8011bde:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011be2:	1c59      	adds	r1, r3, #1
 8011be4:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8011be8:	4413      	add	r3, r2
 8011bea:	781b      	ldrb	r3, [r3, #0]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	bf14      	ite	ne
 8011bf0:	2301      	movne	r3, #1
 8011bf2:	2300      	moveq	r3, #0
 8011bf4:	b2db      	uxtb	r3, r3
 8011bf6:	733b      	strb	r3, [r7, #12]

                LoRaMacMibSetRequestConfirm( &mibReq );
 8011bf8:	f107 0308 	add.w	r3, r7, #8
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f004 fafd 	bl	80161fc <LoRaMacMibSetRequestConfirm>
                break;
 8011c02:	e21f      	b.n	8012044 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
            {
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	689a      	ldr	r2, [r3, #8]
 8011c08:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011c0c:	1c59      	adds	r1, r3, #1
 8011c0e:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8011c12:	4413      	add	r3, r2
 8011c14:	781b      	ldrb	r3, [r3, #0]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	bf14      	ite	ne
 8011c1a:	2301      	movne	r3, #1
 8011c1c:	2300      	moveq	r3, #0
 8011c1e:	b2db      	uxtb	r3, r3
 8011c20:	4618      	mov	r0, r3
 8011c22:	f005 f965 	bl	8016ef0 <LoRaMacTestSetDutyCycleOn>
                break;
 8011c26:	e20d      	b.n	8012044 <LmhpComplianceOnMcpsIndication+0x76c>
 8011c28:	200008a8 	.word	0x200008a8
 8011c2c:	200000d8 	.word	0x200000d8
            }
        case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
            {
                /* Periodicity in milli-seconds */
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 8011c30:	4ba5      	ldr	r3, [pc, #660]	; (8011ec8 <LmhpComplianceOnMcpsIndication+0x5f0>)
 8011c32:	f107 0408 	add.w	r4, r7, #8
 8011c36:	461d      	mov	r5, r3
 8011c38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011c44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	689a      	ldr	r2, [r3, #8]
 8011c4c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011c50:	1c59      	adds	r1, r3, #1
 8011c52:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8011c56:	4413      	add	r3, r2
 8011c58:	781b      	ldrb	r3, [r3, #0]
 8011c5a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 8011c5e:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8011c62:	2b0a      	cmp	r3, #10
 8011c64:	f200 81e7 	bhi.w	8012036 <LmhpComplianceOnMcpsIndication+0x75e>
                {
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 8011c68:	4b98      	ldr	r3, [pc, #608]	; (8011ecc <LmhpComplianceOnMcpsIndication+0x5f4>)
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	685b      	ldr	r3, [r3, #4]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	f000 81e1 	beq.w	8012036 <LmhpComplianceOnMcpsIndication+0x75e>
                    {
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 8011c74:	4b95      	ldr	r3, [pc, #596]	; (8011ecc <LmhpComplianceOnMcpsIndication+0x5f4>)
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	685a      	ldr	r2, [r3, #4]
 8011c7a:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8011c7e:	009b      	lsls	r3, r3, #2
 8011c80:	3390      	adds	r3, #144	; 0x90
 8011c82:	443b      	add	r3, r7
 8011c84:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8011c88:	4618      	mov	r0, r3
 8011c8a:	4790      	blx	r2
                    }
                }
                break;
 8011c8c:	e1d3      	b.n	8012036 <LmhpComplianceOnMcpsIndication+0x75e>
            }
        case COMPLIANCE_TX_FRAMES_CTRL_REQ:
            {
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	689a      	ldr	r2, [r3, #8]
 8011c92:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011c96:	1c59      	adds	r1, r3, #1
 8011c98:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8011c9c:	4413      	add	r3, r2
 8011c9e:	781b      	ldrb	r3, [r3, #0]
 8011ca0:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

                if( ( frameType == 1 ) || ( frameType == 2 ) )
 8011ca4:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8011ca8:	2b01      	cmp	r3, #1
 8011caa:	d004      	beq.n	8011cb6 <LmhpComplianceOnMcpsIndication+0x3de>
 8011cac:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8011cb0:	2b02      	cmp	r3, #2
 8011cb2:	f040 81c2 	bne.w	801203a <LmhpComplianceOnMcpsIndication+0x762>
                {
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8011cb6:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8011cba:	2b01      	cmp	r3, #1
 8011cbc:	bf14      	ite	ne
 8011cbe:	2301      	movne	r3, #1
 8011cc0:	2300      	moveq	r3, #0
 8011cc2:	b2db      	uxtb	r3, r3
 8011cc4:	461a      	mov	r2, r3
 8011cc6:	4b82      	ldr	r3, [pc, #520]	; (8011ed0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011cc8:	721a      	strb	r2, [r3, #8]

                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 8011cca:	4b80      	ldr	r3, [pc, #512]	; (8011ecc <LmhpComplianceOnMcpsIndication+0x5f4>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	689b      	ldr	r3, [r3, #8]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	f000 81b2 	beq.w	801203a <LmhpComplianceOnMcpsIndication+0x762>
                    {
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 8011cd6:	4b7d      	ldr	r3, [pc, #500]	; (8011ecc <LmhpComplianceOnMcpsIndication+0x5f4>)
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	689b      	ldr	r3, [r3, #8]
 8011cdc:	4a7c      	ldr	r2, [pc, #496]	; (8011ed0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011cde:	7a12      	ldrb	r2, [r2, #8]
 8011ce0:	4610      	mov	r0, r2
 8011ce2:	4798      	blx	r3
                    }
                }
                break;
 8011ce4:	e1a9      	b.n	801203a <LmhpComplianceOnMcpsIndication+0x762>
            }
        case COMPLIANCE_ECHO_PAYLOAD_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 8011ce6:	4b7a      	ldr	r3, [pc, #488]	; (8011ed0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011ce8:	68da      	ldr	r2, [r3, #12]
 8011cea:	4b79      	ldr	r3, [pc, #484]	; (8011ed0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011cec:	7a9b      	ldrb	r3, [r3, #10]
 8011cee:	1c59      	adds	r1, r3, #1
 8011cf0:	b2c8      	uxtb	r0, r1
 8011cf2:	4977      	ldr	r1, [pc, #476]	; (8011ed0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011cf4:	7288      	strb	r0, [r1, #10]
 8011cf6:	4413      	add	r3, r2
 8011cf8:	2208      	movs	r2, #8
 8011cfa:	701a      	strb	r2, [r3, #0]

                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8011cfc:	2301      	movs	r3, #1
 8011cfe:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8011d02:	e019      	b.n	8011d38 <LmhpComplianceOnMcpsIndication+0x460>
                     i++ )
                {
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	689a      	ldr	r2, [r3, #8]
 8011d08:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011d0c:	1c59      	adds	r1, r3, #1
 8011d0e:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8011d12:	4413      	add	r3, r2
 8011d14:	781a      	ldrb	r2, [r3, #0]
 8011d16:	4b6e      	ldr	r3, [pc, #440]	; (8011ed0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d18:	68d9      	ldr	r1, [r3, #12]
 8011d1a:	4b6d      	ldr	r3, [pc, #436]	; (8011ed0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d1c:	7a9b      	ldrb	r3, [r3, #10]
 8011d1e:	1c58      	adds	r0, r3, #1
 8011d20:	b2c4      	uxtb	r4, r0
 8011d22:	486b      	ldr	r0, [pc, #428]	; (8011ed0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d24:	7284      	strb	r4, [r0, #10]
 8011d26:	440b      	add	r3, r1
 8011d28:	3201      	adds	r2, #1
 8011d2a:	b2d2      	uxtb	r2, r2
 8011d2c:	701a      	strb	r2, [r3, #0]
                     i++ )
 8011d2e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8011d32:	3301      	adds	r3, #1
 8011d34:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8011d38:	4b65      	ldr	r3, [pc, #404]	; (8011ed0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d3a:	7a5a      	ldrb	r2, [r3, #9]
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	7b1b      	ldrb	r3, [r3, #12]
 8011d40:	4293      	cmp	r3, r2
 8011d42:	bf28      	it	cs
 8011d44:	4613      	movcs	r3, r2
 8011d46:	b2db      	uxtb	r3, r3
 8011d48:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8011d4c:	429a      	cmp	r2, r3
 8011d4e:	d3d9      	bcc.n	8011d04 <LmhpComplianceOnMcpsIndication+0x42c>
                }
                break;
 8011d50:	e178      	b.n	8012044 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 8011d52:	4b5f      	ldr	r3, [pc, #380]	; (8011ed0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d54:	68da      	ldr	r2, [r3, #12]
 8011d56:	4b5e      	ldr	r3, [pc, #376]	; (8011ed0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d58:	7a9b      	ldrb	r3, [r3, #10]
 8011d5a:	1c59      	adds	r1, r3, #1
 8011d5c:	b2c8      	uxtb	r0, r1
 8011d5e:	495c      	ldr	r1, [pc, #368]	; (8011ed0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d60:	7288      	strb	r0, [r1, #10]
 8011d62:	4413      	add	r3, r2
 8011d64:	2209      	movs	r2, #9
 8011d66:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 8011d68:	4b59      	ldr	r3, [pc, #356]	; (8011ed0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d6a:	8a18      	ldrh	r0, [r3, #16]
 8011d6c:	4b58      	ldr	r3, [pc, #352]	; (8011ed0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d6e:	68da      	ldr	r2, [r3, #12]
 8011d70:	4b57      	ldr	r3, [pc, #348]	; (8011ed0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d72:	7a9b      	ldrb	r3, [r3, #10]
 8011d74:	1c59      	adds	r1, r3, #1
 8011d76:	b2cc      	uxtb	r4, r1
 8011d78:	4955      	ldr	r1, [pc, #340]	; (8011ed0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d7a:	728c      	strb	r4, [r1, #10]
 8011d7c:	4413      	add	r3, r2
 8011d7e:	b2c2      	uxtb	r2, r0
 8011d80:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 8011d82:	4b53      	ldr	r3, [pc, #332]	; (8011ed0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d84:	8a1b      	ldrh	r3, [r3, #16]
 8011d86:	0a1b      	lsrs	r3, r3, #8
 8011d88:	b298      	uxth	r0, r3
 8011d8a:	4b51      	ldr	r3, [pc, #324]	; (8011ed0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d8c:	68da      	ldr	r2, [r3, #12]
 8011d8e:	4b50      	ldr	r3, [pc, #320]	; (8011ed0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d90:	7a9b      	ldrb	r3, [r3, #10]
 8011d92:	1c59      	adds	r1, r3, #1
 8011d94:	b2cc      	uxtb	r4, r1
 8011d96:	494e      	ldr	r1, [pc, #312]	; (8011ed0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011d98:	728c      	strb	r4, [r1, #10]
 8011d9a:	4413      	add	r3, r2
 8011d9c:	b2c2      	uxtb	r2, r0
 8011d9e:	701a      	strb	r2, [r3, #0]
                break;
 8011da0:	e150      	b.n	8012044 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_RESET_REQ:
            {
                ComplianceTestState.RxAppCnt = 0;
 8011da2:	4b4b      	ldr	r3, [pc, #300]	; (8011ed0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011da4:	2200      	movs	r2, #0
 8011da6:	821a      	strh	r2, [r3, #16]
                break;
 8011da8:	e14c      	b.n	8012044 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_LINK_CHECK_REQ:
            {
                MlmeReq_t mlmeReq;
                mlmeReq.Type = MLME_LINK_CHECK;
 8011daa:	2305      	movs	r3, #5
 8011dac:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

                LoRaMacMlmeRequest( &mlmeReq );
 8011db0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011db4:	4618      	mov	r0, r3
 8011db6:	f004 fdcb 	bl	8016950 <LoRaMacMlmeRequest>
                break;
 8011dba:	e143      	b.n	8012044 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DEVICE_TIME_REQ:
            {
                CompliancePackage.OnDeviceTimeRequest( );
 8011dbc:	4b45      	ldr	r3, [pc, #276]	; (8011ed4 <LmhpComplianceOnMcpsIndication+0x5fc>)
 8011dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dc0:	4798      	blx	r3
                break;
 8011dc2:	e13f      	b.n	8012044 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_PING_SLOT_INFO_REQ:
            {
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	689a      	ldr	r2, [r3, #8]
 8011dc8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011dcc:	1c59      	adds	r1, r3, #1
 8011dce:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8011dd2:	4413      	add	r3, r2
 8011dd4:	781a      	ldrb	r2, [r3, #0]
 8011dd6:	4b3e      	ldr	r3, [pc, #248]	; (8011ed0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011dd8:	755a      	strb	r2, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 8011dda:	4b3c      	ldr	r3, [pc, #240]	; (8011ecc <LmhpComplianceOnMcpsIndication+0x5f4>)
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	68db      	ldr	r3, [r3, #12]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	f000 812c 	beq.w	801203e <LmhpComplianceOnMcpsIndication+0x766>
                {
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 8011de6:	4b39      	ldr	r3, [pc, #228]	; (8011ecc <LmhpComplianceOnMcpsIndication+0x5f4>)
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	68db      	ldr	r3, [r3, #12]
 8011dec:	4a38      	ldr	r2, [pc, #224]	; (8011ed0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011dee:	7d52      	ldrb	r2, [r2, #21]
 8011df0:	4610      	mov	r0, r2
 8011df2:	4798      	blx	r3
                }
                break;
 8011df4:	e123      	b.n	801203e <LmhpComplianceOnMcpsIndication+0x766>
            }
#endif /* CLASS_B not available */
        case COMPLIANCE_TX_CW_REQ:
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 7 )
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	7b1b      	ldrb	r3, [r3, #12]
 8011dfa:	2b07      	cmp	r3, #7
 8011dfc:	f040 8121 	bne.w	8012042 <LmhpComplianceOnMcpsIndication+0x76a>
                {
                    mlmeReq.Type = MLME_TXCW;
 8011e00:	2306      	movs	r3, #6
 8011e02:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                    mlmeReq.Req.TxCw.Timeout =
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	689a      	ldr	r2, [r3, #8]
 8011e0a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011e0e:	4413      	add	r3, r2
 8011e10:	781b      	ldrb	r3, [r3, #0]
 8011e12:	b21a      	sxth	r2, r3
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	6899      	ldr	r1, [r3, #8]
 8011e18:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011e1c:	3301      	adds	r3, #1
 8011e1e:	440b      	add	r3, r1
 8011e20:	781b      	ldrb	r3, [r3, #0]
 8011e22:	021b      	lsls	r3, r3, #8
 8011e24:	b21b      	sxth	r3, r3
 8011e26:	4313      	orrs	r3, r2
 8011e28:	b21b      	sxth	r3, r3
 8011e2a:	b29b      	uxth	r3, r3
                    mlmeReq.Req.TxCw.Timeout =
 8011e2c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                    cmdIndex += 2;
 8011e30:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011e34:	3302      	adds	r3, #2
 8011e36:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Frequency =
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	689a      	ldr	r2, [r3, #8]
 8011e3e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011e42:	4413      	add	r3, r2
 8011e44:	781b      	ldrb	r3, [r3, #0]
 8011e46:	4619      	mov	r1, r3
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	689a      	ldr	r2, [r3, #8]
 8011e4c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011e50:	3301      	adds	r3, #1
 8011e52:	4413      	add	r3, r2
 8011e54:	781b      	ldrb	r3, [r3, #0]
 8011e56:	021b      	lsls	r3, r3, #8
 8011e58:	ea41 0203 	orr.w	r2, r1, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	6899      	ldr	r1, [r3, #8]
 8011e60:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011e64:	3302      	adds	r3, #2
 8011e66:	440b      	add	r3, r1
 8011e68:	781b      	ldrb	r3, [r3, #0]
 8011e6a:	041b      	lsls	r3, r3, #16
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8011e6c:	4313      	orrs	r3, r2
 8011e6e:	461a      	mov	r2, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8011e70:	2364      	movs	r3, #100	; 0x64
 8011e72:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 8011e76:	647b      	str	r3, [r7, #68]	; 0x44
                        100;
                    cmdIndex += 3;
 8011e78:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011e7c:	3303      	adds	r3, #3
 8011e7e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	689a      	ldr	r2, [r3, #8]
 8011e86:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8011e8a:	1c59      	adds	r1, r3, #1
 8011e8c:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8011e90:	4413      	add	r3, r2
 8011e92:	781b      	ldrb	r3, [r3, #0]
 8011e94:	b25b      	sxtb	r3, r3
 8011e96:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 8011e9a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f004 fd56 	bl	8016950 <LoRaMacMlmeRequest>
                }
                break;
 8011ea4:	e0cd      	b.n	8012042 <LmhpComplianceOnMcpsIndication+0x76a>
            }
        case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
            {
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 8011ea6:	233b      	movs	r3, #59	; 0x3b
 8011ea8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                mibReq.Param.IsCertPortOn = false;
 8011eac:	2300      	movs	r3, #0
 8011eae:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacMibSetRequestConfirm( &mibReq );
 8011eb2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f004 f9a0 	bl	80161fc <LoRaMacMibSetRequestConfirm>

                ComplianceTestState.IsResetCmdPending = true;
 8011ebc:	4b04      	ldr	r3, [pc, #16]	; (8011ed0 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8011ebe:	2201      	movs	r2, #1
 8011ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 8011ec4:	e0be      	b.n	8012044 <LmhpComplianceOnMcpsIndication+0x76c>
 8011ec6:	bf00      	nop
 8011ec8:	080216c8 	.word	0x080216c8
 8011ecc:	200008e0 	.word	0x200008e0
 8011ed0:	200008a8 	.word	0x200008a8
 8011ed4:	200000d8 	.word	0x200000d8
            {
                Version_t           lrwanVersion;
                Version_t           lrwanRpVersion;
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_LORAWAN_VERSION;
 8011ed8:	232a      	movs	r3, #42	; 0x2a
 8011eda:	723b      	strb	r3, [r7, #8]

                LoRaMacMibGetRequestConfirm( &mibReq );
 8011edc:	f107 0308 	add.w	r3, r7, #8
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f003 ffb3 	bl	8015e4c <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	63bb      	str	r3, [r7, #56]	; 0x38
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 8011eea:	693b      	ldr	r3, [r7, #16]
 8011eec:	637b      	str	r3, [r7, #52]	; 0x34

                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 8011eee:	4b65      	ldr	r3, [pc, #404]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011ef0:	68da      	ldr	r2, [r3, #12]
 8011ef2:	4b64      	ldr	r3, [pc, #400]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011ef4:	7a9b      	ldrb	r3, [r3, #10]
 8011ef6:	1c59      	adds	r1, r3, #1
 8011ef8:	b2c8      	uxtb	r0, r1
 8011efa:	4962      	ldr	r1, [pc, #392]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011efc:	7288      	strb	r0, [r1, #10]
 8011efe:	4413      	add	r3, r2
 8011f00:	227f      	movs	r2, #127	; 0x7f
 8011f02:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 8011f04:	4b60      	ldr	r3, [pc, #384]	; (8012088 <LmhpComplianceOnMcpsIndication+0x7b0>)
 8011f06:	681a      	ldr	r2, [r3, #0]
 8011f08:	4b5e      	ldr	r3, [pc, #376]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f0a:	68d9      	ldr	r1, [r3, #12]
 8011f0c:	4b5d      	ldr	r3, [pc, #372]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f0e:	7a9b      	ldrb	r3, [r3, #10]
 8011f10:	1c58      	adds	r0, r3, #1
 8011f12:	b2c4      	uxtb	r4, r0
 8011f14:	485b      	ldr	r0, [pc, #364]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f16:	7284      	strb	r4, [r0, #10]
 8011f18:	440b      	add	r3, r1
 8011f1a:	78d2      	ldrb	r2, [r2, #3]
 8011f1c:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 8011f1e:	4b5a      	ldr	r3, [pc, #360]	; (8012088 <LmhpComplianceOnMcpsIndication+0x7b0>)
 8011f20:	681a      	ldr	r2, [r3, #0]
 8011f22:	4b58      	ldr	r3, [pc, #352]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f24:	68d9      	ldr	r1, [r3, #12]
 8011f26:	4b57      	ldr	r3, [pc, #348]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f28:	7a9b      	ldrb	r3, [r3, #10]
 8011f2a:	1c58      	adds	r0, r3, #1
 8011f2c:	b2c4      	uxtb	r4, r0
 8011f2e:	4855      	ldr	r0, [pc, #340]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f30:	7284      	strb	r4, [r0, #10]
 8011f32:	440b      	add	r3, r1
 8011f34:	7892      	ldrb	r2, [r2, #2]
 8011f36:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 8011f38:	4b53      	ldr	r3, [pc, #332]	; (8012088 <LmhpComplianceOnMcpsIndication+0x7b0>)
 8011f3a:	681a      	ldr	r2, [r3, #0]
 8011f3c:	4b51      	ldr	r3, [pc, #324]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f3e:	68d9      	ldr	r1, [r3, #12]
 8011f40:	4b50      	ldr	r3, [pc, #320]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f42:	7a9b      	ldrb	r3, [r3, #10]
 8011f44:	1c58      	adds	r0, r3, #1
 8011f46:	b2c4      	uxtb	r4, r0
 8011f48:	484e      	ldr	r0, [pc, #312]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f4a:	7284      	strb	r4, [r0, #10]
 8011f4c:	440b      	add	r3, r1
 8011f4e:	7852      	ldrb	r2, [r2, #1]
 8011f50:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 8011f52:	4b4d      	ldr	r3, [pc, #308]	; (8012088 <LmhpComplianceOnMcpsIndication+0x7b0>)
 8011f54:	681a      	ldr	r2, [r3, #0]
 8011f56:	4b4b      	ldr	r3, [pc, #300]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f58:	68d9      	ldr	r1, [r3, #12]
 8011f5a:	4b4a      	ldr	r3, [pc, #296]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f5c:	7a9b      	ldrb	r3, [r3, #10]
 8011f5e:	1c58      	adds	r0, r3, #1
 8011f60:	b2c4      	uxtb	r4, r0
 8011f62:	4848      	ldr	r0, [pc, #288]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f64:	7284      	strb	r4, [r0, #10]
 8011f66:	440b      	add	r3, r1
 8011f68:	7812      	ldrb	r2, [r2, #0]
 8011f6a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 8011f6c:	4b45      	ldr	r3, [pc, #276]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f6e:	68da      	ldr	r2, [r3, #12]
 8011f70:	4b44      	ldr	r3, [pc, #272]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f72:	7a9b      	ldrb	r3, [r3, #10]
 8011f74:	1c59      	adds	r1, r3, #1
 8011f76:	b2c8      	uxtb	r0, r1
 8011f78:	4942      	ldr	r1, [pc, #264]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f7a:	7288      	strb	r0, [r1, #10]
 8011f7c:	4413      	add	r3, r2
 8011f7e:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8011f82:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 8011f84:	4b3f      	ldr	r3, [pc, #252]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f86:	68da      	ldr	r2, [r3, #12]
 8011f88:	4b3e      	ldr	r3, [pc, #248]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f8a:	7a9b      	ldrb	r3, [r3, #10]
 8011f8c:	1c59      	adds	r1, r3, #1
 8011f8e:	b2c8      	uxtb	r0, r1
 8011f90:	493c      	ldr	r1, [pc, #240]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f92:	7288      	strb	r0, [r1, #10]
 8011f94:	4413      	add	r3, r2
 8011f96:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8011f9a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 8011f9c:	4b39      	ldr	r3, [pc, #228]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011f9e:	68da      	ldr	r2, [r3, #12]
 8011fa0:	4b38      	ldr	r3, [pc, #224]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011fa2:	7a9b      	ldrb	r3, [r3, #10]
 8011fa4:	1c59      	adds	r1, r3, #1
 8011fa6:	b2c8      	uxtb	r0, r1
 8011fa8:	4936      	ldr	r1, [pc, #216]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011faa:	7288      	strb	r0, [r1, #10]
 8011fac:	4413      	add	r3, r2
 8011fae:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8011fb2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 8011fb4:	4b33      	ldr	r3, [pc, #204]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011fb6:	68da      	ldr	r2, [r3, #12]
 8011fb8:	4b32      	ldr	r3, [pc, #200]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011fba:	7a9b      	ldrb	r3, [r3, #10]
 8011fbc:	1c59      	adds	r1, r3, #1
 8011fbe:	b2c8      	uxtb	r0, r1
 8011fc0:	4930      	ldr	r1, [pc, #192]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011fc2:	7288      	strb	r0, [r1, #10]
 8011fc4:	4413      	add	r3, r2
 8011fc6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011fca:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 8011fcc:	4b2d      	ldr	r3, [pc, #180]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011fce:	68da      	ldr	r2, [r3, #12]
 8011fd0:	4b2c      	ldr	r3, [pc, #176]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011fd2:	7a9b      	ldrb	r3, [r3, #10]
 8011fd4:	1c59      	adds	r1, r3, #1
 8011fd6:	b2c8      	uxtb	r0, r1
 8011fd8:	492a      	ldr	r1, [pc, #168]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011fda:	7288      	strb	r0, [r1, #10]
 8011fdc:	4413      	add	r3, r2
 8011fde:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011fe2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 8011fe4:	4b27      	ldr	r3, [pc, #156]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011fe6:	68da      	ldr	r2, [r3, #12]
 8011fe8:	4b26      	ldr	r3, [pc, #152]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011fea:	7a9b      	ldrb	r3, [r3, #10]
 8011fec:	1c59      	adds	r1, r3, #1
 8011fee:	b2c8      	uxtb	r0, r1
 8011ff0:	4924      	ldr	r1, [pc, #144]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011ff2:	7288      	strb	r0, [r1, #10]
 8011ff4:	4413      	add	r3, r2
 8011ff6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8011ffa:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 8011ffc:	4b21      	ldr	r3, [pc, #132]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8011ffe:	68da      	ldr	r2, [r3, #12]
 8012000:	4b20      	ldr	r3, [pc, #128]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012002:	7a9b      	ldrb	r3, [r3, #10]
 8012004:	1c59      	adds	r1, r3, #1
 8012006:	b2c8      	uxtb	r0, r1
 8012008:	491e      	ldr	r1, [pc, #120]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801200a:	7288      	strb	r0, [r1, #10]
 801200c:	4413      	add	r3, r2
 801200e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8012012:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 8012014:	4b1b      	ldr	r3, [pc, #108]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012016:	68da      	ldr	r2, [r3, #12]
 8012018:	4b1a      	ldr	r3, [pc, #104]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801201a:	7a9b      	ldrb	r3, [r3, #10]
 801201c:	1c59      	adds	r1, r3, #1
 801201e:	b2c8      	uxtb	r0, r1
 8012020:	4918      	ldr	r1, [pc, #96]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012022:	7288      	strb	r0, [r1, #10]
 8012024:	4413      	add	r3, r2
 8012026:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 801202a:	701a      	strb	r2, [r3, #0]
                break;
 801202c:	e00a      	b.n	8012044 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        default:
            {
                break;
 801202e:	bf00      	nop
 8012030:	e008      	b.n	8012044 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8012032:	bf00      	nop
 8012034:	e006      	b.n	8012044 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8012036:	bf00      	nop
 8012038:	e004      	b.n	8012044 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 801203a:	bf00      	nop
 801203c:	e002      	b.n	8012044 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 801203e:	bf00      	nop
 8012040:	e000      	b.n	8012044 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8012042:	bf00      	nop
            }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 8012044:	4b0f      	ldr	r3, [pc, #60]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8012046:	7a9b      	ldrb	r3, [r3, #10]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d00c      	beq.n	8012066 <LmhpComplianceOnMcpsIndication+0x78e>
    {
        if( ProcessTimer.IsRunning == 0U)
 801204c:	4b0f      	ldr	r3, [pc, #60]	; (801208c <LmhpComplianceOnMcpsIndication+0x7b4>)
 801204e:	7a5b      	ldrb	r3, [r3, #9]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d114      	bne.n	801207e <LmhpComplianceOnMcpsIndication+0x7a6>
        {
            TimerSetValue( &ProcessTimer, 1000 );
 8012054:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012058:	480c      	ldr	r0, [pc, #48]	; (801208c <LmhpComplianceOnMcpsIndication+0x7b4>)
 801205a:	f00d fe07 	bl	801fc6c <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 801205e:	480b      	ldr	r0, [pc, #44]	; (801208c <LmhpComplianceOnMcpsIndication+0x7b4>)
 8012060:	f00d fd26 	bl	801fab0 <UTIL_TIMER_Start>
 8012064:	e00b      	b.n	801207e <LmhpComplianceOnMcpsIndication+0x7a6>
        }
    }
    else
    {
        /* Abort any pending Tx as a new command has been processed */
        TimerStop( &ProcessTimer );
 8012066:	4809      	ldr	r0, [pc, #36]	; (801208c <LmhpComplianceOnMcpsIndication+0x7b4>)
 8012068:	f00d fd90 	bl	801fb8c <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 801206c:	4b05      	ldr	r3, [pc, #20]	; (8012084 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801206e:	2200      	movs	r2, #0
 8012070:	705a      	strb	r2, [r3, #1]
 8012072:	e004      	b.n	801207e <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 8012074:	bf00      	nop
 8012076:	e002      	b.n	801207e <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 8012078:	bf00      	nop
 801207a:	e000      	b.n	801207e <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 801207c:	bf00      	nop
    }
}
 801207e:	3790      	adds	r7, #144	; 0x90
 8012080:	46bd      	mov	sp, r7
 8012082:	bdb0      	pop	{r4, r5, r7, pc}
 8012084:	200008a8 	.word	0x200008a8
 8012088:	200008e0 	.word	0x200008e0
 801208c:	200008e4 	.word	0x200008e4

08012090 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8012090:	b480      	push	{r7}
 8012092:	b083      	sub	sp, #12
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
                }
                break;
            }
#endif /* CLASS_B not available */
        default:
            break;
 8012098:	bf00      	nop
    }
}
 801209a:	bf00      	nop
 801209c:	370c      	adds	r7, #12
 801209e:	46bd      	mov	sp, r7
 80120a0:	bc80      	pop	{r7}
 80120a2:	4770      	bx	lr

080120a4 <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t *mlmeIndication )
{
 80120a4:	b480      	push	{r7}
 80120a6:	b083      	sub	sp, #12
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 80120ac:	4b05      	ldr	r3, [pc, #20]	; (80120c4 <LmhpComplianceOnMlmeIndication+0x20>)
 80120ae:	781b      	ldrb	r3, [r3, #0]
 80120b0:	f083 0301 	eor.w	r3, r3, #1
 80120b4:	b2db      	uxtb	r3, r3
 80120b6:	2b00      	cmp	r3, #0
    {
        return;
 80120b8:	bf00      	nop
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 80120ba:	370c      	adds	r7, #12
 80120bc:	46bd      	mov	sp, r7
 80120be:	bc80      	pop	{r7}
 80120c0:	4770      	bx	lr
 80120c2:	bf00      	nop
 80120c4:	200008a8 	.word	0x200008a8

080120c8 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b082      	sub	sp, #8
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.DataBufferSize != 0 )
 80120d0:	4b08      	ldr	r3, [pc, #32]	; (80120f4 <OnProcessTimer+0x2c>)
 80120d2:	7a9b      	ldrb	r3, [r3, #10]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d002      	beq.n	80120de <OnProcessTimer+0x16>
    {
        ComplianceTestState.IsTxPending = true;
 80120d8:	4b06      	ldr	r3, [pc, #24]	; (80120f4 <OnProcessTimer+0x2c>)
 80120da:	2201      	movs	r2, #1
 80120dc:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 80120de:	4b06      	ldr	r3, [pc, #24]	; (80120f8 <OnProcessTimer+0x30>)
 80120e0:	695b      	ldr	r3, [r3, #20]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d002      	beq.n	80120ec <OnProcessTimer+0x24>
    {
        CompliancePackage.OnPackageProcessEvent();
 80120e6:	4b04      	ldr	r3, [pc, #16]	; (80120f8 <OnProcessTimer+0x30>)
 80120e8:	695b      	ldr	r3, [r3, #20]
 80120ea:	4798      	blx	r3
    }
}
 80120ec:	bf00      	nop
 80120ee:	3708      	adds	r7, #8
 80120f0:	46bd      	mov	sp, r7
 80120f2:	bd80      	pop	{r7, pc}
 80120f4:	200008a8 	.word	0x200008a8
 80120f8:	200000d8 	.word	0x200000d8

080120fc <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 80120fc:	b480      	push	{r7}
 80120fe:	b083      	sub	sp, #12
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 8012104:	2300      	movs	r3, #0
}
 8012106:	4618      	mov	r0, r3
 8012108:	370c      	adds	r7, #12
 801210a:	46bd      	mov	sp, r7
 801210c:	bc80      	pop	{r7}
 801210e:	4770      	bx	lr

08012110 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 8012110:	b480      	push	{r7}
 8012112:	b083      	sub	sp, #12
 8012114:	af00      	add	r7, sp, #0
 8012116:	4603      	mov	r3, r0
 8012118:	6039      	str	r1, [r7, #0]
 801211a:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 801211c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 8012120:	4618      	mov	r0, r3
 8012122:	370c      	adds	r7, #12
 8012124:	46bd      	mov	sp, r7
 8012126:	bc80      	pop	{r7}
 8012128:	4770      	bx	lr
	...

0801212c <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 801212c:	b590      	push	{r4, r7, lr}
 801212e:	b083      	sub	sp, #12
 8012130:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8012132:	f00d fe45 	bl	801fdc0 <UTIL_TIMER_GetCurrentTime>
 8012136:	4603      	mov	r3, r0
 8012138:	4a0f      	ldr	r2, [pc, #60]	; (8012178 <OnRadioTxDone+0x4c>)
 801213a:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 801213c:	4c0f      	ldr	r4, [pc, #60]	; (801217c <OnRadioTxDone+0x50>)
 801213e:	463b      	mov	r3, r7
 8012140:	4618      	mov	r0, r3
 8012142:	f00c ff9b 	bl	801f07c <SysTimeGet>
 8012146:	f504 734e 	add.w	r3, r4, #824	; 0x338
 801214a:	463a      	mov	r2, r7
 801214c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012150:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 8012154:	4a0a      	ldr	r2, [pc, #40]	; (8012180 <OnRadioTxDone+0x54>)
 8012156:	7813      	ldrb	r3, [r2, #0]
 8012158:	f043 0320 	orr.w	r3, r3, #32
 801215c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 801215e:	f003 fa71 	bl	8015644 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8012162:	4b08      	ldr	r3, [pc, #32]	; (8012184 <OnRadioTxDone+0x58>)
 8012164:	2201      	movs	r2, #1
 8012166:	2100      	movs	r1, #0
 8012168:	2002      	movs	r0, #2
 801216a:	f00d ff19 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
}
 801216e:	bf00      	nop
 8012170:	370c      	adds	r7, #12
 8012172:	46bd      	mov	sp, r7
 8012174:	bd90      	pop	{r4, r7, pc}
 8012176:	bf00      	nop
 8012178:	20001a44 	.word	0x20001a44
 801217c:	200008fc 	.word	0x200008fc
 8012180:	20001a40 	.word	0x20001a40
 8012184:	080216f4 	.word	0x080216f4

08012188 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8012188:	b580      	push	{r7, lr}
 801218a:	b084      	sub	sp, #16
 801218c:	af00      	add	r7, sp, #0
 801218e:	60f8      	str	r0, [r7, #12]
 8012190:	4608      	mov	r0, r1
 8012192:	4611      	mov	r1, r2
 8012194:	461a      	mov	r2, r3
 8012196:	4603      	mov	r3, r0
 8012198:	817b      	strh	r3, [r7, #10]
 801219a:	460b      	mov	r3, r1
 801219c:	813b      	strh	r3, [r7, #8]
 801219e:	4613      	mov	r3, r2
 80121a0:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80121a2:	f00d fe0d 	bl	801fdc0 <UTIL_TIMER_GetCurrentTime>
 80121a6:	4603      	mov	r3, r0
 80121a8:	4a11      	ldr	r2, [pc, #68]	; (80121f0 <OnRadioRxDone+0x68>)
 80121aa:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 80121ac:	4a10      	ldr	r2, [pc, #64]	; (80121f0 <OnRadioRxDone+0x68>)
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 80121b2:	4a0f      	ldr	r2, [pc, #60]	; (80121f0 <OnRadioRxDone+0x68>)
 80121b4:	897b      	ldrh	r3, [r7, #10]
 80121b6:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 80121b8:	4a0d      	ldr	r2, [pc, #52]	; (80121f0 <OnRadioRxDone+0x68>)
 80121ba:	893b      	ldrh	r3, [r7, #8]
 80121bc:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 80121be:	4a0c      	ldr	r2, [pc, #48]	; (80121f0 <OnRadioRxDone+0x68>)
 80121c0:	79fb      	ldrb	r3, [r7, #7]
 80121c2:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 80121c4:	4a0b      	ldr	r2, [pc, #44]	; (80121f4 <OnRadioRxDone+0x6c>)
 80121c6:	7813      	ldrb	r3, [r2, #0]
 80121c8:	f043 0310 	orr.w	r3, r3, #16
 80121cc:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 80121ce:	4a09      	ldr	r2, [pc, #36]	; (80121f4 <OnRadioRxDone+0x6c>)
 80121d0:	7813      	ldrb	r3, [r2, #0]
 80121d2:	f043 0301 	orr.w	r3, r3, #1
 80121d6:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 80121d8:	f003 fa34 	bl	8015644 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 80121dc:	4b06      	ldr	r3, [pc, #24]	; (80121f8 <OnRadioRxDone+0x70>)
 80121de:	2201      	movs	r2, #1
 80121e0:	2100      	movs	r1, #0
 80121e2:	2002      	movs	r0, #2
 80121e4:	f00d fedc 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
}
 80121e8:	bf00      	nop
 80121ea:	3710      	adds	r7, #16
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bd80      	pop	{r7, pc}
 80121f0:	20001a48 	.word	0x20001a48
 80121f4:	20001a40 	.word	0x20001a40
 80121f8:	08021704 	.word	0x08021704

080121fc <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8012200:	4a07      	ldr	r2, [pc, #28]	; (8012220 <OnRadioTxTimeout+0x24>)
 8012202:	7813      	ldrb	r3, [r2, #0]
 8012204:	f043 0308 	orr.w	r3, r3, #8
 8012208:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 801220a:	f003 fa1b 	bl	8015644 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 801220e:	4b05      	ldr	r3, [pc, #20]	; (8012224 <OnRadioTxTimeout+0x28>)
 8012210:	2201      	movs	r2, #1
 8012212:	2100      	movs	r1, #0
 8012214:	2002      	movs	r0, #2
 8012216:	f00d fec3 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
}
 801221a:	bf00      	nop
 801221c:	bd80      	pop	{r7, pc}
 801221e:	bf00      	nop
 8012220:	20001a40 	.word	0x20001a40
 8012224:	08021714 	.word	0x08021714

08012228 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 8012228:	b580      	push	{r7, lr}
 801222a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 801222c:	4a04      	ldr	r2, [pc, #16]	; (8012240 <OnRadioRxError+0x18>)
 801222e:	7813      	ldrb	r3, [r2, #0]
 8012230:	f043 0304 	orr.w	r3, r3, #4
 8012234:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8012236:	f003 fa05 	bl	8015644 <OnMacProcessNotify>
}
 801223a:	bf00      	nop
 801223c:	bd80      	pop	{r7, pc}
 801223e:	bf00      	nop
 8012240:	20001a40 	.word	0x20001a40

08012244 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 8012244:	b580      	push	{r7, lr}
 8012246:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8012248:	4a07      	ldr	r2, [pc, #28]	; (8012268 <OnRadioRxTimeout+0x24>)
 801224a:	7813      	ldrb	r3, [r2, #0]
 801224c:	f043 0302 	orr.w	r3, r3, #2
 8012250:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8012252:	f003 f9f7 	bl	8015644 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8012256:	4b05      	ldr	r3, [pc, #20]	; (801226c <OnRadioRxTimeout+0x28>)
 8012258:	2201      	movs	r2, #1
 801225a:	2100      	movs	r1, #0
 801225c:	2002      	movs	r0, #2
 801225e:	f00d fe9f 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
}
 8012262:	bf00      	nop
 8012264:	bd80      	pop	{r7, pc}
 8012266:	bf00      	nop
 8012268:	20001a40 	.word	0x20001a40
 801226c:	08021724 	.word	0x08021724

08012270 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 8012270:	b480      	push	{r7}
 8012272:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8012274:	4b08      	ldr	r3, [pc, #32]	; (8012298 <UpdateRxSlotIdleState+0x28>)
 8012276:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801227a:	2b02      	cmp	r3, #2
 801227c:	d004      	beq.n	8012288 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 801227e:	4b07      	ldr	r3, [pc, #28]	; (801229c <UpdateRxSlotIdleState+0x2c>)
 8012280:	2206      	movs	r2, #6
 8012282:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 8012286:	e003      	b.n	8012290 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012288:	4b04      	ldr	r3, [pc, #16]	; (801229c <UpdateRxSlotIdleState+0x2c>)
 801228a:	2202      	movs	r2, #2
 801228c:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
}
 8012290:	bf00      	nop
 8012292:	46bd      	mov	sp, r7
 8012294:	bc80      	pop	{r7}
 8012296:	4770      	bx	lr
 8012298:	20000e18 	.word	0x20000e18
 801229c:	200008fc 	.word	0x200008fc

080122a0 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b092      	sub	sp, #72	; 0x48
 80122a4:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80122a6:	4b4a      	ldr	r3, [pc, #296]	; (80123d0 <ProcessRadioTxDone+0x130>)
 80122a8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80122ac:	2b02      	cmp	r3, #2
 80122ae:	d002      	beq.n	80122b6 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 80122b0:	4b48      	ldr	r3, [pc, #288]	; (80123d4 <ProcessRadioTxDone+0x134>)
 80122b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122b4:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80122b6:	f3ef 8310 	mrs	r3, PRIMASK
 80122ba:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80122bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 80122be:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 80122c0:	b672      	cpsid	i
}
 80122c2:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 80122c4:	f00d fd7c 	bl	801fdc0 <UTIL_TIMER_GetCurrentTime>
 80122c8:	4602      	mov	r2, r0
 80122ca:	4b43      	ldr	r3, [pc, #268]	; (80123d8 <ProcessRadioTxDone+0x138>)
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	1ad3      	subs	r3, r2, r3
 80122d0:	63bb      	str	r3, [r7, #56]	; 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 80122d2:	4b42      	ldr	r3, [pc, #264]	; (80123dc <ProcessRadioTxDone+0x13c>)
 80122d4:	f8d3 23b0 	ldr.w	r2, [r3, #944]	; 0x3b0
 80122d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122da:	1ad3      	subs	r3, r2, r3
 80122dc:	4619      	mov	r1, r3
 80122de:	4840      	ldr	r0, [pc, #256]	; (80123e0 <ProcessRadioTxDone+0x140>)
 80122e0:	f00d fcc4 	bl	801fc6c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 80122e4:	483e      	ldr	r0, [pc, #248]	; (80123e0 <ProcessRadioTxDone+0x140>)
 80122e6:	f00d fbe3 	bl	801fab0 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 80122ea:	4b3c      	ldr	r3, [pc, #240]	; (80123dc <ProcessRadioTxDone+0x13c>)
 80122ec:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 80122f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122f2:	1ad3      	subs	r3, r2, r3
 80122f4:	4619      	mov	r1, r3
 80122f6:	483b      	ldr	r0, [pc, #236]	; (80123e4 <ProcessRadioTxDone+0x144>)
 80122f8:	f00d fcb8 	bl	801fc6c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 80122fc:	4839      	ldr	r0, [pc, #228]	; (80123e4 <ProcessRadioTxDone+0x144>)
 80122fe:	f00d fbd7 	bl	801fab0 <UTIL_TIMER_Start>
 8012302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012304:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012308:	f383 8810 	msr	PRIMASK, r3
}
 801230c:	bf00      	nop
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 801230e:	4b33      	ldr	r3, [pc, #204]	; (80123dc <ProcessRadioTxDone+0x13c>)
 8012310:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8012314:	2b00      	cmp	r3, #0
 8012316:	d01a      	beq.n	801234e <ProcessRadioTxDone+0xae>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 8012318:	2315      	movs	r3, #21
 801231a:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801231e:	4b2c      	ldr	r3, [pc, #176]	; (80123d0 <ProcessRadioTxDone+0x130>)
 8012320:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012324:	f107 0220 	add.w	r2, r7, #32
 8012328:	4611      	mov	r1, r2
 801232a:	4618      	mov	r0, r3
 801232c:	f006 febb 	bl	80190a6 <RegionGetPhyParam>
 8012330:	4603      	mov	r3, r0
 8012332:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8012334:	4b29      	ldr	r3, [pc, #164]	; (80123dc <ProcessRadioTxDone+0x13c>)
 8012336:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 801233a:	69fb      	ldr	r3, [r7, #28]
 801233c:	4413      	add	r3, r2
 801233e:	4619      	mov	r1, r3
 8012340:	4829      	ldr	r0, [pc, #164]	; (80123e8 <ProcessRadioTxDone+0x148>)
 8012342:	f00d fc93 	bl	801fc6c <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 8012346:	4828      	ldr	r0, [pc, #160]	; (80123e8 <ProcessRadioTxDone+0x148>)
 8012348:	f00d fbb2 	bl	801fab0 <UTIL_TIMER_Start>
 801234c:	e003      	b.n	8012356 <ProcessRadioTxDone+0xb6>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801234e:	4b23      	ldr	r3, [pc, #140]	; (80123dc <ProcessRadioTxDone+0x13c>)
 8012350:	2200      	movs	r2, #0
 8012352:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8012356:	4b20      	ldr	r3, [pc, #128]	; (80123d8 <ProcessRadioTxDone+0x138>)
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	4a1d      	ldr	r2, [pc, #116]	; (80123d0 <ProcessRadioTxDone+0x130>)
 801235c:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 801235e:	4b1f      	ldr	r3, [pc, #124]	; (80123dc <ProcessRadioTxDone+0x13c>)
 8012360:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 8012364:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8012366:	4b1c      	ldr	r3, [pc, #112]	; (80123d8 <ProcessRadioTxDone+0x138>)
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 801236c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012370:	4618      	mov	r0, r3
 8012372:	f00c febb 	bl	801f0ec <SysTimeGetMcuTime>
 8012376:	4638      	mov	r0, r7
 8012378:	4b15      	ldr	r3, [pc, #84]	; (80123d0 <ProcessRadioTxDone+0x130>)
 801237a:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 801237e:	9200      	str	r2, [sp, #0]
 8012380:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8012384:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8012388:	ca06      	ldmia	r2, {r1, r2}
 801238a:	f00c fe10 	bl	801efae <SysTimeSub>
 801238e:	f107 0314 	add.w	r3, r7, #20
 8012392:	463a      	mov	r2, r7
 8012394:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012398:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 801239c:	4b0f      	ldr	r3, [pc, #60]	; (80123dc <ProcessRadioTxDone+0x13c>)
 801239e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80123a2:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 80123a4:	2301      	movs	r3, #1
 80123a6:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80123a8:	4b09      	ldr	r3, [pc, #36]	; (80123d0 <ProcessRadioTxDone+0x130>)
 80123aa:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d101      	bne.n	80123b6 <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 80123b2:	2300      	movs	r3, #0
 80123b4:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 80123b6:	4b06      	ldr	r3, [pc, #24]	; (80123d0 <ProcessRadioTxDone+0x130>)
 80123b8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80123bc:	f107 0208 	add.w	r2, r7, #8
 80123c0:	4611      	mov	r1, r2
 80123c2:	4618      	mov	r0, r3
 80123c4:	f006 fe87 	bl	80190d6 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 80123c8:	bf00      	nop
 80123ca:	3740      	adds	r7, #64	; 0x40
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}
 80123d0:	20000e18 	.word	0x20000e18
 80123d4:	08021dfc 	.word	0x08021dfc
 80123d8:	20001a44 	.word	0x20001a44
 80123dc:	200008fc 	.word	0x200008fc
 80123e0:	20000c7c 	.word	0x20000c7c
 80123e4:	20000c94 	.word	0x20000c94
 80123e8:	20000cfc 	.word	0x20000cfc

080123ec <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80123f0:	4b10      	ldr	r3, [pc, #64]	; (8012434 <PrepareRxDoneAbort+0x48>)
 80123f2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80123f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80123fa:	4a0e      	ldr	r2, [pc, #56]	; (8012434 <PrepareRxDoneAbort+0x48>)
 80123fc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 8012400:	4b0c      	ldr	r3, [pc, #48]	; (8012434 <PrepareRxDoneAbort+0x48>)
 8012402:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8012406:	2b00      	cmp	r3, #0
 8012408:	d002      	beq.n	8012410 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 801240a:	2000      	movs	r0, #0
 801240c:	f001 f9fa 	bl	8013804 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 8012410:	4a08      	ldr	r2, [pc, #32]	; (8012434 <PrepareRxDoneAbort+0x48>)
 8012412:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012416:	f043 0302 	orr.w	r3, r3, #2
 801241a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 801241e:	4a05      	ldr	r2, [pc, #20]	; (8012434 <PrepareRxDoneAbort+0x48>)
 8012420:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012424:	f043 0310 	orr.w	r3, r3, #16
 8012428:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

    UpdateRxSlotIdleState( );
 801242c:	f7ff ff20 	bl	8012270 <UpdateRxSlotIdleState>
}
 8012430:	bf00      	nop
 8012432:	bd80      	pop	{r7, pc}
 8012434:	200008fc 	.word	0x200008fc

08012438 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 8012438:	b590      	push	{r4, r7, lr}
 801243a:	b0ab      	sub	sp, #172	; 0xac
 801243c:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 801243e:	2312      	movs	r3, #18
 8012440:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 8012444:	4b81      	ldr	r3, [pc, #516]	; (801264c <ProcessRadioRxDone+0x214>)
 8012446:	685b      	ldr	r3, [r3, #4]
 8012448:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint16_t size = RxDoneParams.Size;
 801244c:	4b7f      	ldr	r3, [pc, #508]	; (801264c <ProcessRadioRxDone+0x214>)
 801244e:	891b      	ldrh	r3, [r3, #8]
 8012450:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    int16_t rssi = RxDoneParams.Rssi;
 8012454:	4b7d      	ldr	r3, [pc, #500]	; (801264c <ProcessRadioRxDone+0x214>)
 8012456:	895b      	ldrh	r3, [r3, #10]
 8012458:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
    int8_t snr = RxDoneParams.Snr;
 801245c:	4b7b      	ldr	r3, [pc, #492]	; (801264c <ProcessRadioRxDone+0x214>)
 801245e:	7b1b      	ldrb	r3, [r3, #12]
 8012460:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

    uint8_t pktHeaderLen = 0;
 8012464:	2300      	movs	r3, #0
 8012466:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

    uint32_t downLinkCounter = 0;
 801246a:	2300      	movs	r3, #0
 801246c:	617b      	str	r3, [r7, #20]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 801246e:	4b78      	ldr	r3, [pc, #480]	; (8012650 <ProcessRadioRxDone+0x218>)
 8012470:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8012474:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint8_t multicast = 0;
 8012478:	2300      	movs	r3, #0
 801247a:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 801247e:	2301      	movs	r3, #1
 8012480:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 8012484:	2301      	movs	r3, #1
 8012486:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 801248a:	4a72      	ldr	r2, [pc, #456]	; (8012654 <ProcessRadioRxDone+0x21c>)
 801248c:	7813      	ldrb	r3, [r2, #0]
 801248e:	f36f 0300 	bfc	r3, #0, #1
 8012492:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 8012494:	4b70      	ldr	r3, [pc, #448]	; (8012658 <ProcessRadioRxDone+0x220>)
 8012496:	2200      	movs	r2, #0
 8012498:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
    MacCtx.RxStatus.Rssi = rssi;
 801249c:	4a6e      	ldr	r2, [pc, #440]	; (8012658 <ProcessRadioRxDone+0x220>)
 801249e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80124a2:	f8a2 348c 	strh.w	r3, [r2, #1164]	; 0x48c
    MacCtx.RxStatus.Snr = snr;
 80124a6:	4a6c      	ldr	r2, [pc, #432]	; (8012658 <ProcessRadioRxDone+0x220>)
 80124a8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80124ac:	f882 348e 	strb.w	r3, [r2, #1166]	; 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 80124b0:	4b69      	ldr	r3, [pc, #420]	; (8012658 <ProcessRadioRxDone+0x220>)
 80124b2:	f893 2490 	ldrb.w	r2, [r3, #1168]	; 0x490
 80124b6:	4b68      	ldr	r3, [pc, #416]	; (8012658 <ProcessRadioRxDone+0x220>)
 80124b8:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
    MacCtx.McpsIndication.Port = 0;
 80124bc:	4b66      	ldr	r3, [pc, #408]	; (8012658 <ProcessRadioRxDone+0x220>)
 80124be:	2200      	movs	r2, #0
 80124c0:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
    MacCtx.McpsIndication.Multicast = 0;
 80124c4:	4b64      	ldr	r3, [pc, #400]	; (8012658 <ProcessRadioRxDone+0x220>)
 80124c6:	2200      	movs	r2, #0
 80124c8:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 80124cc:	4b62      	ldr	r3, [pc, #392]	; (8012658 <ProcessRadioRxDone+0x220>)
 80124ce:	2200      	movs	r2, #0
 80124d0:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 80124d4:	4b60      	ldr	r3, [pc, #384]	; (8012658 <ProcessRadioRxDone+0x220>)
 80124d6:	2200      	movs	r2, #0
 80124d8:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 80124dc:	4b5e      	ldr	r3, [pc, #376]	; (8012658 <ProcessRadioRxDone+0x220>)
 80124de:	2200      	movs	r2, #0
 80124e0:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 80124e4:	4b5c      	ldr	r3, [pc, #368]	; (8012658 <ProcessRadioRxDone+0x220>)
 80124e6:	2200      	movs	r2, #0
 80124e8:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 80124ec:	4b5a      	ldr	r3, [pc, #360]	; (8012658 <ProcessRadioRxDone+0x220>)
 80124ee:	2200      	movs	r2, #0
 80124f0:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 80124f4:	4b58      	ldr	r3, [pc, #352]	; (8012658 <ProcessRadioRxDone+0x220>)
 80124f6:	2200      	movs	r2, #0
 80124f8:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80124fc:	4b56      	ldr	r3, [pc, #344]	; (8012658 <ProcessRadioRxDone+0x220>)
 80124fe:	2200      	movs	r2, #0
 8012500:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 8012504:	4b54      	ldr	r3, [pc, #336]	; (8012658 <ProcessRadioRxDone+0x220>)
 8012506:	2200      	movs	r2, #0
 8012508:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 801250c:	4b52      	ldr	r3, [pc, #328]	; (8012658 <ProcessRadioRxDone+0x220>)
 801250e:	2200      	movs	r2, #0
 8012510:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 8012514:	4b50      	ldr	r3, [pc, #320]	; (8012658 <ProcessRadioRxDone+0x220>)
 8012516:	2200      	movs	r2, #0
 8012518:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 801251c:	4b4f      	ldr	r3, [pc, #316]	; (801265c <ProcessRadioRxDone+0x224>)
 801251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012520:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8012522:	4b4d      	ldr	r3, [pc, #308]	; (8012658 <ProcessRadioRxDone+0x220>)
 8012524:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8012528:	2b00      	cmp	r3, #0
 801252a:	d102      	bne.n	8012532 <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 801252c:	484c      	ldr	r0, [pc, #304]	; (8012660 <ProcessRadioRxDone+0x228>)
 801252e:	f00d fb2d 	bl	801fb8c <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8012532:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8012536:	4619      	mov	r1, r3
 8012538:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 801253c:	f004 fe28 	bl	8017190 <LoRaMacClassBRxBeacon>
 8012540:	4603      	mov	r3, r0
 8012542:	2b00      	cmp	r3, #0
 8012544:	d00b      	beq.n	801255e <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8012546:	4a44      	ldr	r2, [pc, #272]	; (8012658 <ProcessRadioRxDone+0x220>)
 8012548:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 801254c:	f8a2 347e 	strh.w	r3, [r2, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8012550:	4a41      	ldr	r2, [pc, #260]	; (8012658 <ProcessRadioRxDone+0x220>)
 8012552:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8012556:	f882 3480 	strb.w	r3, [r2, #1152]	; 0x480
        return;
 801255a:	f000 bc75 	b.w	8012e48 <ProcessRadioRxDone+0xa10>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801255e:	4b3c      	ldr	r3, [pc, #240]	; (8012650 <ProcessRadioRxDone+0x218>)
 8012560:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012564:	2b01      	cmp	r3, #1
 8012566:	d11e      	bne.n	80125a6 <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8012568:	f004 fe25 	bl	80171b6 <LoRaMacClassBIsPingExpected>
 801256c:	4603      	mov	r3, r0
 801256e:	2b00      	cmp	r3, #0
 8012570:	d00a      	beq.n	8012588 <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8012572:	2000      	movs	r0, #0
 8012574:	f004 fdd6 	bl	8017124 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8012578:	2000      	movs	r0, #0
 801257a:	f004 fdf7 	bl	801716c <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 801257e:	4b36      	ldr	r3, [pc, #216]	; (8012658 <ProcessRadioRxDone+0x220>)
 8012580:	2204      	movs	r2, #4
 8012582:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 8012586:	e00e      	b.n	80125a6 <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8012588:	f004 fe1c 	bl	80171c4 <LoRaMacClassBIsMulticastExpected>
 801258c:	4603      	mov	r3, r0
 801258e:	2b00      	cmp	r3, #0
 8012590:	d009      	beq.n	80125a6 <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8012592:	2000      	movs	r0, #0
 8012594:	f004 fdd0 	bl	8017138 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8012598:	2000      	movs	r0, #0
 801259a:	f004 fdf0 	bl	801717e <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 801259e:	4b2e      	ldr	r3, [pc, #184]	; (8012658 <ProcessRadioRxDone+0x220>)
 80125a0:	2205      	movs	r2, #5
 80125a2:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 80125a6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d107      	bne.n	80125be <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80125ae:	4b2a      	ldr	r3, [pc, #168]	; (8012658 <ProcessRadioRxDone+0x220>)
 80125b0:	2201      	movs	r2, #1
 80125b2:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
        PrepareRxDoneAbort( );
 80125b6:	f7ff ff19 	bl	80123ec <PrepareRxDoneAbort>
        return;
 80125ba:	f000 bc45 	b.w	8012e48 <ProcessRadioRxDone+0xa10>
    }

    macHdr.Value = payload[pktHeaderLen++];
 80125be:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80125c2:	1c5a      	adds	r2, r3, #1
 80125c4:	f887 208e 	strb.w	r2, [r7, #142]	; 0x8e
 80125c8:	461a      	mov	r2, r3
 80125ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80125ce:	4413      	add	r3, r2
 80125d0:	781b      	ldrb	r3, [r3, #0]
 80125d2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 80125d6:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80125da:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80125de:	b2db      	uxtb	r3, r3
 80125e0:	3b01      	subs	r3, #1
 80125e2:	2b06      	cmp	r3, #6
 80125e4:	f200 8403 	bhi.w	8012dee <ProcessRadioRxDone+0x9b6>
 80125e8:	a201      	add	r2, pc, #4	; (adr r2, 80125f0 <ProcessRadioRxDone+0x1b8>)
 80125ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125ee:	bf00      	nop
 80125f0:	0801260d 	.word	0x0801260d
 80125f4:	08012def 	.word	0x08012def
 80125f8:	0801280b 	.word	0x0801280b
 80125fc:	08012def 	.word	0x08012def
 8012600:	08012803 	.word	0x08012803
 8012604:	08012def 	.word	0x08012def
 8012608:	08012d93 	.word	0x08012d93
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 801260c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8012610:	2b10      	cmp	r3, #16
 8012612:	d807      	bhi.n	8012624 <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012614:	4b10      	ldr	r3, [pc, #64]	; (8012658 <ProcessRadioRxDone+0x220>)
 8012616:	2201      	movs	r2, #1
 8012618:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 801261c:	f7ff fee6 	bl	80123ec <PrepareRxDoneAbort>
                return;
 8012620:	f000 bc12 	b.w	8012e48 <ProcessRadioRxDone+0xa10>
            }
            macMsgJoinAccept.Buffer = payload;
 8012624:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012628:	61bb      	str	r3, [r7, #24]
            macMsgJoinAccept.BufSize = size;
 801262a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 801262e:	b2db      	uxtb	r3, r3
 8012630:	773b      	strb	r3, [r7, #28]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8012632:	4b07      	ldr	r3, [pc, #28]	; (8012650 <ProcessRadioRxDone+0x218>)
 8012634:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8012638:	2b00      	cmp	r3, #0
 801263a:	d013      	beq.n	8012664 <ProcessRadioRxDone+0x22c>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801263c:	4b06      	ldr	r3, [pc, #24]	; (8012658 <ProcessRadioRxDone+0x220>)
 801263e:	2201      	movs	r2, #1
 8012640:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8012644:	f7ff fed2 	bl	80123ec <PrepareRxDoneAbort>
                return;
 8012648:	e3fe      	b.n	8012e48 <ProcessRadioRxDone+0xa10>
 801264a:	bf00      	nop
 801264c:	20001a48 	.word	0x20001a48
 8012650:	20000e18 	.word	0x20000e18
 8012654:	20001a40 	.word	0x20001a40
 8012658:	200008fc 	.word	0x200008fc
 801265c:	08021dfc 	.word	0x08021dfc
 8012660:	20000c94 	.word	0x20000c94
            }

            SecureElementGetJoinEui( joinEui );
 8012664:	f107 0308 	add.w	r3, r7, #8
 8012668:	4618      	mov	r0, r3
 801266a:	f7fd ff7d 	bl	8010568 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 801266e:	f107 0218 	add.w	r2, r7, #24
 8012672:	f107 0308 	add.w	r3, r7, #8
 8012676:	4619      	mov	r1, r3
 8012678:	20ff      	movs	r0, #255	; 0xff
 801267a:	f005 ff95 	bl	80185a8 <LoRaMacCryptoHandleJoinAccept>
 801267e:	4603      	mov	r3, r0
 8012680:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 8012684:	2300      	movs	r3, #0
 8012686:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 801268a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801268e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012692:	b2db      	uxtb	r3, r3
 8012694:	b25b      	sxtb	r3, r3
 8012696:	713b      	strb	r3, [r7, #4]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012698:	4bb1      	ldr	r3, [pc, #708]	; (8012960 <ProcessRadioRxDone+0x528>)
 801269a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 801269e:	717b      	strb	r3, [r7, #5]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 80126a0:	4baf      	ldr	r3, [pc, #700]	; (8012960 <ProcessRadioRxDone+0x528>)
 80126a2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80126a6:	1d39      	adds	r1, r7, #4
 80126a8:	2207      	movs	r2, #7
 80126aa:	4618      	mov	r0, r3
 80126ac:	f006 fd36 	bl	801911c <RegionVerify>
 80126b0:	4603      	mov	r3, r0
 80126b2:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 80126b6:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	f040 8095 	bne.w	80127ea <ProcessRadioRxDone+0x3b2>
 80126c0:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	f000 8090 	beq.w	80127ea <ProcessRadioRxDone+0x3b2>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 80126ca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80126ce:	461a      	mov	r2, r3
 80126d0:	4ba3      	ldr	r3, [pc, #652]	; (8012960 <ProcessRadioRxDone+0x528>)
 80126d2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80126d6:	4ba2      	ldr	r3, [pc, #648]	; (8012960 <ProcessRadioRxDone+0x528>)
 80126d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80126dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80126e0:	021b      	lsls	r3, r3, #8
 80126e2:	4313      	orrs	r3, r2
 80126e4:	4a9e      	ldr	r2, [pc, #632]	; (8012960 <ProcessRadioRxDone+0x528>)
 80126e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80126ea:	4b9d      	ldr	r3, [pc, #628]	; (8012960 <ProcessRadioRxDone+0x528>)
 80126ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80126f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80126f4:	041b      	lsls	r3, r3, #16
 80126f6:	4313      	orrs	r3, r2
 80126f8:	4a99      	ldr	r2, [pc, #612]	; (8012960 <ProcessRadioRxDone+0x528>)
 80126fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 80126fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012700:	4a97      	ldr	r2, [pc, #604]	; (8012960 <ProcessRadioRxDone+0x528>)
 8012702:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 8012706:	4b96      	ldr	r3, [pc, #600]	; (8012960 <ProcessRadioRxDone+0x528>)
 8012708:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801270c:	4619      	mov	r1, r3
 801270e:	2002      	movs	r0, #2
 8012710:	f7fd ff42 	bl	8010598 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8012714:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012718:	f3c3 1302 	ubfx	r3, r3, #4, #3
 801271c:	b2db      	uxtb	r3, r3
 801271e:	461a      	mov	r2, r3
 8012720:	4b8f      	ldr	r3, [pc, #572]	; (8012960 <ProcessRadioRxDone+0x528>)
 8012722:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8012726:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801272a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801272e:	b2db      	uxtb	r3, r3
 8012730:	461a      	mov	r2, r3
 8012732:	4b8b      	ldr	r3, [pc, #556]	; (8012960 <ProcessRadioRxDone+0x528>)
 8012734:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8012738:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801273c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012740:	b2db      	uxtb	r3, r3
 8012742:	461a      	mov	r2, r3
 8012744:	4b86      	ldr	r3, [pc, #536]	; (8012960 <ProcessRadioRxDone+0x528>)
 8012746:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 801274a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801274e:	461a      	mov	r2, r3
 8012750:	4b83      	ldr	r3, [pc, #524]	; (8012960 <ProcessRadioRxDone+0x528>)
 8012752:	659a      	str	r2, [r3, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8012754:	4b82      	ldr	r3, [pc, #520]	; (8012960 <ProcessRadioRxDone+0x528>)
 8012756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012758:	2b00      	cmp	r3, #0
 801275a:	d102      	bne.n	8012762 <ProcessRadioRxDone+0x32a>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 801275c:	4b80      	ldr	r3, [pc, #512]	; (8012960 <ProcessRadioRxDone+0x528>)
 801275e:	2201      	movs	r2, #1
 8012760:	659a      	str	r2, [r3, #88]	; 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8012762:	4b7f      	ldr	r3, [pc, #508]	; (8012960 <ProcessRadioRxDone+0x528>)
 8012764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012766:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801276a:	fb02 f303 	mul.w	r3, r2, r3
 801276e:	4a7c      	ldr	r2, [pc, #496]	; (8012960 <ProcessRadioRxDone+0x528>)
 8012770:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8012772:	4b7b      	ldr	r3, [pc, #492]	; (8012960 <ProcessRadioRxDone+0x528>)
 8012774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012776:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801277a:	4a79      	ldr	r2, [pc, #484]	; (8012960 <ProcessRadioRxDone+0x528>)
 801277c:	65d3      	str	r3, [r2, #92]	; 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 801277e:	4b78      	ldr	r3, [pc, #480]	; (8012960 <ProcessRadioRxDone+0x528>)
 8012780:	2201      	movs	r2, #1
 8012782:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8012786:	4b76      	ldr	r3, [pc, #472]	; (8012960 <ProcessRadioRxDone+0x528>)
 8012788:	2200      	movs	r2, #0
 801278a:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 801278e:	f107 0318 	add.w	r3, r7, #24
 8012792:	3312      	adds	r3, #18
 8012794:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 8012798:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 801279c:	b2db      	uxtb	r3, r3
 801279e:	3b11      	subs	r3, #17
 80127a0:	b2db      	uxtb	r3, r3
 80127a2:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 80127a6:	4b6f      	ldr	r3, [pc, #444]	; (8012964 <ProcessRadioRxDone+0x52c>)
 80127a8:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 80127ac:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 80127b0:	4b6b      	ldr	r3, [pc, #428]	; (8012960 <ProcessRadioRxDone+0x528>)
 80127b2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80127b6:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80127ba:	4611      	mov	r1, r2
 80127bc:	4618      	mov	r0, r3
 80127be:	f006 fcc4 	bl	801914a <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 80127c2:	4b67      	ldr	r3, [pc, #412]	; (8012960 <ProcessRadioRxDone+0x528>)
 80127c4:	2202      	movs	r2, #2
 80127c6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 80127ca:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80127ce:	4618      	mov	r0, r3
 80127d0:	f005 f9f4 	bl	8017bbc <LoRaMacConfirmQueueIsCmdActive>
 80127d4:	4603      	mov	r3, r0
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	f000 8311 	beq.w	8012dfe <ProcessRadioRxDone+0x9c6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 80127dc:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80127e0:	4619      	mov	r1, r3
 80127e2:	2000      	movs	r0, #0
 80127e4:	f005 f95e 	bl	8017aa4 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 80127e8:	e309      	b.n	8012dfe <ProcessRadioRxDone+0x9c6>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80127ea:	2001      	movs	r0, #1
 80127ec:	f005 f9e6 	bl	8017bbc <LoRaMacConfirmQueueIsCmdActive>
 80127f0:	4603      	mov	r3, r0
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	f000 8302 	beq.w	8012dfc <ProcessRadioRxDone+0x9c4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80127f8:	2101      	movs	r1, #1
 80127fa:	2007      	movs	r0, #7
 80127fc:	f005 f952 	bl	8017aa4 <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 8012800:	e2fc      	b.n	8012dfc <ProcessRadioRxDone+0x9c4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8012802:	4b58      	ldr	r3, [pc, #352]	; (8012964 <ProcessRadioRxDone+0x52c>)
 8012804:	2201      	movs	r2, #1
 8012806:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801280a:	4b55      	ldr	r3, [pc, #340]	; (8012960 <ProcessRadioRxDone+0x528>)
 801280c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8012810:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8012814:	4b53      	ldr	r3, [pc, #332]	; (8012964 <ProcessRadioRxDone+0x52c>)
 8012816:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 801281a:	b25b      	sxtb	r3, r3
 801281c:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8012820:	230d      	movs	r3, #13
 8012822:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8012826:	4b4e      	ldr	r3, [pc, #312]	; (8012960 <ProcessRadioRxDone+0x528>)
 8012828:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 801282c:	2b00      	cmp	r3, #0
 801282e:	d002      	beq.n	8012836 <ProcessRadioRxDone+0x3fe>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8012830:	230e      	movs	r3, #14
 8012832:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012836:	4b4a      	ldr	r3, [pc, #296]	; (8012960 <ProcessRadioRxDone+0x528>)
 8012838:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801283c:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8012840:	4611      	mov	r1, r2
 8012842:	4618      	mov	r0, r3
 8012844:	f006 fc2f 	bl	80190a6 <RegionGetPhyParam>
 8012848:	4603      	mov	r3, r0
 801284a:	673b      	str	r3, [r7, #112]	; 0x70
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 801284c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8012850:	3b0d      	subs	r3, #13
 8012852:	b29b      	uxth	r3, r3
 8012854:	b21b      	sxth	r3, r3
 8012856:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801285a:	b21a      	sxth	r2, r3
 801285c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801285e:	b21b      	sxth	r3, r3
 8012860:	429a      	cmp	r2, r3
 8012862:	dc03      	bgt.n	801286c <ProcessRadioRxDone+0x434>
 8012864:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8012868:	2b0b      	cmp	r3, #11
 801286a:	d806      	bhi.n	801287a <ProcessRadioRxDone+0x442>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801286c:	4b3d      	ldr	r3, [pc, #244]	; (8012964 <ProcessRadioRxDone+0x52c>)
 801286e:	2201      	movs	r2, #1
 8012870:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8012874:	f7ff fdba 	bl	80123ec <PrepareRxDoneAbort>
                return;
 8012878:	e2e6      	b.n	8012e48 <ProcessRadioRxDone+0xa10>
            }
            macMsgData.Buffer = payload;
 801287a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801287e:	643b      	str	r3, [r7, #64]	; 0x40
            macMsgData.BufSize = size;
 8012880:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8012884:	b2db      	uxtb	r3, r3
 8012886:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
            macMsgData.FRMPayload = MacCtx.RxPayload;
 801288a:	4b37      	ldr	r3, [pc, #220]	; (8012968 <ProcessRadioRxDone+0x530>)
 801288c:	667b      	str	r3, [r7, #100]	; 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 801288e:	23ff      	movs	r3, #255	; 0xff
 8012890:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8012894:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012898:	4618      	mov	r0, r3
 801289a:	f006 f987 	bl	8018bac <LoRaMacParserData>
 801289e:	4603      	mov	r3, r0
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d006      	beq.n	80128b2 <ProcessRadioRxDone+0x47a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80128a4:	4b2f      	ldr	r3, [pc, #188]	; (8012964 <ProcessRadioRxDone+0x52c>)
 80128a6:	2201      	movs	r2, #1
 80128a8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 80128ac:	f7ff fd9e 	bl	80123ec <PrepareRxDoneAbort>
                return;
 80128b0:	e2ca      	b.n	8012e48 <ProcessRadioRxDone+0xa10>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80128b2:	4b2b      	ldr	r3, [pc, #172]	; (8012960 <ProcessRadioRxDone+0x528>)
 80128b4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80128b8:	2b01      	cmp	r3, #1
 80128ba:	d132      	bne.n	8012922 <ProcessRadioRxDone+0x4ea>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 80128bc:	f004 fc7b 	bl	80171b6 <LoRaMacClassBIsPingExpected>
 80128c0:	4603      	mov	r3, r0
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d014      	beq.n	80128f0 <ProcessRadioRxDone+0x4b8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80128c6:	2000      	movs	r0, #0
 80128c8:	f004 fc2c 	bl	8017124 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 80128cc:	2000      	movs	r0, #0
 80128ce:	f004 fc4d 	bl	801716c <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 80128d2:	4b24      	ldr	r3, [pc, #144]	; (8012964 <ProcessRadioRxDone+0x52c>)
 80128d4:	2204      	movs	r2, #4
 80128d6:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 80128da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80128dc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80128e0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80128e4:	b2db      	uxtb	r3, r3
 80128e6:	4619      	mov	r1, r3
 80128e8:	4610      	mov	r0, r2
 80128ea:	f004 fced 	bl	80172c8 <LoRaMacClassBSetFPendingBit>
 80128ee:	e018      	b.n	8012922 <ProcessRadioRxDone+0x4ea>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80128f0:	f004 fc68 	bl	80171c4 <LoRaMacClassBIsMulticastExpected>
 80128f4:	4603      	mov	r3, r0
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d013      	beq.n	8012922 <ProcessRadioRxDone+0x4ea>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80128fa:	2000      	movs	r0, #0
 80128fc:	f004 fc1c 	bl	8017138 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8012900:	2000      	movs	r0, #0
 8012902:	f004 fc3c 	bl	801717e <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8012906:	4b17      	ldr	r3, [pc, #92]	; (8012964 <ProcessRadioRxDone+0x52c>)
 8012908:	2205      	movs	r2, #5
 801290a:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 801290e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012910:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8012914:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8012918:	b2db      	uxtb	r3, r3
 801291a:	4619      	mov	r1, r3
 801291c:	4610      	mov	r0, r2
 801291e:	f004 fcd3 	bl	80172c8 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8012922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012924:	4a0f      	ldr	r2, [pc, #60]	; (8012964 <ProcessRadioRxDone+0x52c>)
 8012926:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 801292a:	f107 0212 	add.w	r2, r7, #18
 801292e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012932:	4611      	mov	r1, r2
 8012934:	4618      	mov	r0, r3
 8012936:	f002 fd81 	bl	801543c <DetermineFrameType>
 801293a:	4603      	mov	r3, r0
 801293c:	2b00      	cmp	r3, #0
 801293e:	d006      	beq.n	801294e <ProcessRadioRxDone+0x516>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012940:	4b08      	ldr	r3, [pc, #32]	; (8012964 <ProcessRadioRxDone+0x52c>)
 8012942:	2201      	movs	r2, #1
 8012944:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8012948:	f7ff fd50 	bl	80123ec <PrepareRxDoneAbort>
                return;
 801294c:	e27c      	b.n	8012e48 <ProcessRadioRxDone+0xa10>
            }

            //Check if it is a multicast message
            multicast = 0;
 801294e:	2300      	movs	r3, #0
 8012950:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
            downLinkCounter = 0;
 8012954:	2300      	movs	r3, #0
 8012956:	617b      	str	r3, [r7, #20]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012958:	2300      	movs	r3, #0
 801295a:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 801295e:	e055      	b.n	8012a0c <ProcessRadioRxDone+0x5d4>
 8012960:	20000e18 	.word	0x20000e18
 8012964:	200008fc 	.word	0x200008fc
 8012968:	20000b34 	.word	0x20000b34
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 801296c:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8012970:	499f      	ldr	r1, [pc, #636]	; (8012bf0 <ProcessRadioRxDone+0x7b8>)
 8012972:	4613      	mov	r3, r2
 8012974:	005b      	lsls	r3, r3, #1
 8012976:	4413      	add	r3, r2
 8012978:	011b      	lsls	r3, r3, #4
 801297a:	440b      	add	r3, r1
 801297c:	33ec      	adds	r3, #236	; 0xec
 801297e:	681a      	ldr	r2, [r3, #0]
 8012980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012982:	429a      	cmp	r2, r3
 8012984:	d13d      	bne.n	8012a02 <ProcessRadioRxDone+0x5ca>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8012986:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 801298a:	4999      	ldr	r1, [pc, #612]	; (8012bf0 <ProcessRadioRxDone+0x7b8>)
 801298c:	4613      	mov	r3, r2
 801298e:	005b      	lsls	r3, r3, #1
 8012990:	4413      	add	r3, r2
 8012992:	011b      	lsls	r3, r3, #4
 8012994:	440b      	add	r3, r1
 8012996:	33e9      	adds	r3, #233	; 0xe9
 8012998:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 801299a:	2b00      	cmp	r3, #0
 801299c:	d031      	beq.n	8012a02 <ProcessRadioRxDone+0x5ca>
                {
                    multicast = 1;
 801299e:	2301      	movs	r3, #1
 80129a0:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 80129a4:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 80129a8:	4991      	ldr	r1, [pc, #580]	; (8012bf0 <ProcessRadioRxDone+0x7b8>)
 80129aa:	4613      	mov	r3, r2
 80129ac:	005b      	lsls	r3, r3, #1
 80129ae:	4413      	add	r3, r2
 80129b0:	011b      	lsls	r3, r3, #4
 80129b2:	440b      	add	r3, r1
 80129b4:	33ea      	adds	r3, #234	; 0xea
 80129b6:	781b      	ldrb	r3, [r3, #0]
 80129b8:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 80129bc:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 80129c0:	498b      	ldr	r1, [pc, #556]	; (8012bf0 <ProcessRadioRxDone+0x7b8>)
 80129c2:	4613      	mov	r3, r2
 80129c4:	005b      	lsls	r3, r3, #1
 80129c6:	4413      	add	r3, r2
 80129c8:	011b      	lsls	r3, r3, #4
 80129ca:	440b      	add	r3, r1
 80129cc:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	617b      	str	r3, [r7, #20]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 80129d6:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 80129da:	4985      	ldr	r1, [pc, #532]	; (8012bf0 <ProcessRadioRxDone+0x7b8>)
 80129dc:	4613      	mov	r3, r2
 80129de:	005b      	lsls	r3, r3, #1
 80129e0:	4413      	add	r3, r2
 80129e2:	011b      	lsls	r3, r3, #4
 80129e4:	440b      	add	r3, r1
 80129e6:	33ec      	adds	r3, #236	; 0xec
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80129ee:	4b80      	ldr	r3, [pc, #512]	; (8012bf0 <ProcessRadioRxDone+0x7b8>)
 80129f0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80129f4:	2b02      	cmp	r3, #2
 80129f6:	d10e      	bne.n	8012a16 <ProcessRadioRxDone+0x5de>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80129f8:	4b7e      	ldr	r3, [pc, #504]	; (8012bf4 <ProcessRadioRxDone+0x7bc>)
 80129fa:	2203      	movs	r2, #3
 80129fc:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    }
                    break;
 8012a00:	e009      	b.n	8012a16 <ProcessRadioRxDone+0x5de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012a02:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8012a06:	3301      	adds	r3, #1
 8012a08:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 8012a0c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d0ab      	beq.n	801296c <ProcessRadioRxDone+0x534>
 8012a14:	e000      	b.n	8012a18 <ProcessRadioRxDone+0x5e0>
                    break;
 8012a16:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8012a18:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8012a1c:	2b01      	cmp	r3, #1
 8012a1e:	d117      	bne.n	8012a50 <ProcessRadioRxDone+0x618>
 8012a20:	7cbb      	ldrb	r3, [r7, #18]
 8012a22:	2b03      	cmp	r3, #3
 8012a24:	d10d      	bne.n	8012a42 <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8012a26:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8012a2a:	f003 0320 	and.w	r3, r3, #32
 8012a2e:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d106      	bne.n	8012a42 <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 8012a34:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8012a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a3c:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d006      	beq.n	8012a50 <ProcessRadioRxDone+0x618>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012a42:	4b6c      	ldr	r3, [pc, #432]	; (8012bf4 <ProcessRadioRxDone+0x7bc>)
 8012a44:	2201      	movs	r2, #1
 8012a46:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8012a4a:	f7ff fccf 	bl	80123ec <PrepareRxDoneAbort>
                return;
 8012a4e:	e1fb      	b.n	8012e48 <ProcessRadioRxDone+0xa10>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 8012a50:	7cb9      	ldrb	r1, [r7, #18]
 8012a52:	4c67      	ldr	r4, [pc, #412]	; (8012bf0 <ProcessRadioRxDone+0x7b8>)
 8012a54:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8012a58:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8012a5c:	f107 0314 	add.w	r3, r7, #20
 8012a60:	9301      	str	r3, [sp, #4]
 8012a62:	f107 0313 	add.w	r3, r7, #19
 8012a66:	9300      	str	r3, [sp, #0]
 8012a68:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8012a6c:	f000 fee4 	bl	8013838 <GetFCntDown>
 8012a70:	4603      	mov	r3, r0
 8012a72:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8012a76:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d017      	beq.n	8012aae <ProcessRadioRxDone+0x676>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8012a7e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8012a82:	2b07      	cmp	r3, #7
 8012a84:	d104      	bne.n	8012a90 <ProcessRadioRxDone+0x658>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8012a86:	4b5b      	ldr	r3, [pc, #364]	; (8012bf4 <ProcessRadioRxDone+0x7bc>)
 8012a88:	2208      	movs	r2, #8
 8012a8a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 8012a8e:	e003      	b.n	8012a98 <ProcessRadioRxDone+0x660>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012a90:	4b58      	ldr	r3, [pc, #352]	; (8012bf4 <ProcessRadioRxDone+0x7bc>)
 8012a92:	2201      	movs	r2, #1
 8012a94:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	4a56      	ldr	r2, [pc, #344]	; (8012bf4 <ProcessRadioRxDone+0x7bc>)
 8012a9c:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8012aa0:	697b      	ldr	r3, [r7, #20]
 8012aa2:	4a54      	ldr	r2, [pc, #336]	; (8012bf4 <ProcessRadioRxDone+0x7bc>)
 8012aa4:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
                PrepareRxDoneAbort( );
 8012aa8:	f7ff fca0 	bl	80123ec <PrepareRxDoneAbort>
                return;
 8012aac:	e1cc      	b.n	8012e48 <ProcessRadioRxDone+0xa10>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8012aae:	7cfa      	ldrb	r2, [r7, #19]
 8012ab0:	6979      	ldr	r1, [r7, #20]
 8012ab2:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8012ab6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012aba:	9300      	str	r3, [sp, #0]
 8012abc:	460b      	mov	r3, r1
 8012abe:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8012ac2:	f005 fed3 	bl	801886c <LoRaMacCryptoUnsecureMessage>
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8012acc:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d00f      	beq.n	8012af4 <ProcessRadioRxDone+0x6bc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8012ad4:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8012ad8:	2b02      	cmp	r3, #2
 8012ada:	d104      	bne.n	8012ae6 <ProcessRadioRxDone+0x6ae>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8012adc:	4b45      	ldr	r3, [pc, #276]	; (8012bf4 <ProcessRadioRxDone+0x7bc>)
 8012ade:	220a      	movs	r2, #10
 8012ae0:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 8012ae4:	e003      	b.n	8012aee <ProcessRadioRxDone+0x6b6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8012ae6:	4b43      	ldr	r3, [pc, #268]	; (8012bf4 <ProcessRadioRxDone+0x7bc>)
 8012ae8:	220b      	movs	r2, #11
 8012aea:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                PrepareRxDoneAbort( );
 8012aee:	f7ff fc7d 	bl	80123ec <PrepareRxDoneAbort>
                return;
 8012af2:	e1a9      	b.n	8012e48 <ProcessRadioRxDone+0xa10>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8012af4:	4b3f      	ldr	r3, [pc, #252]	; (8012bf4 <ProcessRadioRxDone+0x7bc>)
 8012af6:	2200      	movs	r2, #0
 8012af8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 8012afc:	4a3d      	ldr	r2, [pc, #244]	; (8012bf4 <ProcessRadioRxDone+0x7bc>)
 8012afe:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8012b02:	f882 3422 	strb.w	r3, [r2, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 8012b06:	4b3b      	ldr	r3, [pc, #236]	; (8012bf4 <ProcessRadioRxDone+0x7bc>)
 8012b08:	2200      	movs	r2, #0
 8012b0a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 8012b0e:	4b39      	ldr	r3, [pc, #228]	; (8012bf4 <ProcessRadioRxDone+0x7bc>)
 8012b10:	2200      	movs	r2, #0
 8012b12:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8012b16:	697b      	ldr	r3, [r7, #20]
 8012b18:	4a36      	ldr	r2, [pc, #216]	; (8012bf4 <ProcessRadioRxDone+0x7bc>)
 8012b1a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8012b1e:	697b      	ldr	r3, [r7, #20]
 8012b20:	4a34      	ldr	r2, [pc, #208]	; (8012bf4 <ProcessRadioRxDone+0x7bc>)
 8012b22:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8012b26:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8012b2a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8012b2e:	b2db      	uxtb	r3, r3
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	bf14      	ite	ne
 8012b34:	2301      	movne	r3, #1
 8012b36:	2300      	moveq	r3, #0
 8012b38:	b2da      	uxtb	r2, r3
 8012b3a:	4b2e      	ldr	r3, [pc, #184]	; (8012bf4 <ProcessRadioRxDone+0x7bc>)
 8012b3c:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8012b40:	4b2c      	ldr	r3, [pc, #176]	; (8012bf4 <ProcessRadioRxDone+0x7bc>)
 8012b42:	2200      	movs	r2, #0
 8012b44:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8012b48:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8012b4c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8012b50:	b2db      	uxtb	r3, r3
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	bf14      	ite	ne
 8012b56:	2301      	movne	r3, #1
 8012b58:	2300      	moveq	r3, #0
 8012b5a:	b2da      	uxtb	r2, r3
 8012b5c:	4b25      	ldr	r3, [pc, #148]	; (8012bf4 <ProcessRadioRxDone+0x7bc>)
 8012b5e:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8012b62:	4b24      	ldr	r3, [pc, #144]	; (8012bf4 <ProcessRadioRxDone+0x7bc>)
 8012b64:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d004      	beq.n	8012b76 <ProcessRadioRxDone+0x73e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8012b6c:	4b21      	ldr	r3, [pc, #132]	; (8012bf4 <ProcessRadioRxDone+0x7bc>)
 8012b6e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8012b72:	2b01      	cmp	r3, #1
 8012b74:	d106      	bne.n	8012b84 <ProcessRadioRxDone+0x74c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 8012b76:	4b1e      	ldr	r3, [pc, #120]	; (8012bf0 <ProcessRadioRxDone+0x7b8>)
 8012b78:	2200      	movs	r2, #0
 8012b7a:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 8012b7c:	4b1c      	ldr	r3, [pc, #112]	; (8012bf0 <ProcessRadioRxDone+0x7b8>)
 8012b7e:	2201      	movs	r2, #1
 8012b80:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 8012b84:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8012b88:	2b01      	cmp	r3, #1
 8012b8a:	d104      	bne.n	8012b96 <ProcessRadioRxDone+0x75e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8012b8c:	4b19      	ldr	r3, [pc, #100]	; (8012bf4 <ProcessRadioRxDone+0x7bc>)
 8012b8e:	2202      	movs	r2, #2
 8012b90:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 8012b94:	e03a      	b.n	8012c0c <ProcessRadioRxDone+0x7d4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8012b96:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8012b9a:	f023 031f 	bic.w	r3, r3, #31
 8012b9e:	b2db      	uxtb	r3, r3
 8012ba0:	2ba0      	cmp	r3, #160	; 0xa0
 8012ba2:	d12b      	bne.n	8012bfc <ProcessRadioRxDone+0x7c4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 8012ba4:	4b12      	ldr	r3, [pc, #72]	; (8012bf0 <ProcessRadioRxDone+0x7b8>)
 8012ba6:	2201      	movs	r2, #1
 8012ba8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8012bac:	4b10      	ldr	r3, [pc, #64]	; (8012bf0 <ProcessRadioRxDone+0x7b8>)
 8012bae:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d102      	bne.n	8012bbc <ProcessRadioRxDone+0x784>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8012bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012bb8:	4a0d      	ldr	r2, [pc, #52]	; (8012bf0 <ProcessRadioRxDone+0x7b8>)
 8012bba:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8012bbc:	4b0d      	ldr	r3, [pc, #52]	; (8012bf4 <ProcessRadioRxDone+0x7bc>)
 8012bbe:	2201      	movs	r2, #1
 8012bc0:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012bc4:	4b0b      	ldr	r3, [pc, #44]	; (8012bf4 <ProcessRadioRxDone+0x7bc>)
 8012bc6:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d01e      	beq.n	8012c0c <ProcessRadioRxDone+0x7d4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 8012bce:	4b09      	ldr	r3, [pc, #36]	; (8012bf4 <ProcessRadioRxDone+0x7bc>)
 8012bd0:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8012bd4:	2b01      	cmp	r3, #1
 8012bd6:	d019      	beq.n	8012c0c <ProcessRadioRxDone+0x7d4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8012bd8:	4b05      	ldr	r3, [pc, #20]	; (8012bf0 <ProcessRadioRxDone+0x7b8>)
 8012bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012bde:	4a05      	ldr	r2, [pc, #20]	; (8012bf4 <ProcessRadioRxDone+0x7bc>)
 8012be0:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 8012be4:	4b04      	ldr	r3, [pc, #16]	; (8012bf8 <ProcessRadioRxDone+0x7c0>)
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	4a02      	ldr	r2, [pc, #8]	; (8012bf4 <ProcessRadioRxDone+0x7bc>)
 8012bea:	f8c2 3498 	str.w	r3, [r2, #1176]	; 0x498
 8012bee:	e00d      	b.n	8012c0c <ProcessRadioRxDone+0x7d4>
 8012bf0:	20000e18 	.word	0x20000e18
 8012bf4:	200008fc 	.word	0x200008fc
 8012bf8:	20001a48 	.word	0x20001a48
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 8012bfc:	4b94      	ldr	r3, [pc, #592]	; (8012e50 <ProcessRadioRxDone+0xa18>)
 8012bfe:	2200      	movs	r2, #0
 8012c00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8012c04:	4b93      	ldr	r3, [pc, #588]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012c06:	2200      	movs	r2, #0
 8012c08:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 8012c0c:	4b90      	ldr	r3, [pc, #576]	; (8012e50 <ProcessRadioRxDone+0xa18>)
 8012c0e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d106      	bne.n	8012c24 <ProcessRadioRxDone+0x7ec>
 8012c16:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8012c1a:	f003 0310 	and.w	r3, r3, #16
 8012c1e:	b2db      	uxtb	r3, r3
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d008      	beq.n	8012c36 <ProcessRadioRxDone+0x7fe>
 8012c24:	4b8a      	ldr	r3, [pc, #552]	; (8012e50 <ProcessRadioRxDone+0xa18>)
 8012c26:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d103      	bne.n	8012c36 <ProcessRadioRxDone+0x7fe>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 8012c2e:	4b89      	ldr	r3, [pc, #548]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012c30:	2201      	movs	r2, #1
 8012c32:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8012c36:	4b87      	ldr	r3, [pc, #540]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012c38:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8012c3c:	4a85      	ldr	r2, [pc, #532]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012c3e:	f892 2440 	ldrb.w	r2, [r2, #1088]	; 0x440
 8012c42:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 8012c46:	4618      	mov	r0, r3
 8012c48:	f001 ff8a 	bl	8014b60 <RemoveMacCommands>

            switch( fType )
 8012c4c:	7cbb      	ldrb	r3, [r7, #18]
 8012c4e:	2b03      	cmp	r3, #3
 8012c50:	d873      	bhi.n	8012d3a <ProcessRadioRxDone+0x902>
 8012c52:	a201      	add	r2, pc, #4	; (adr r2, 8012c58 <ProcessRadioRxDone+0x820>)
 8012c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c58:	08012c69 	.word	0x08012c69
 8012c5c:	08012cb9 	.word	0x08012cb9
 8012c60:	08012cef 	.word	0x08012cef
 8012c64:	08012d15 	.word	0x08012d15
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8012c68:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8012c6c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012c70:	b2db      	uxtb	r3, r3
 8012c72:	461c      	mov	r4, r3
 8012c74:	4b77      	ldr	r3, [pc, #476]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012c76:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8012c7a:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 8012c7e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8012c82:	f102 0010 	add.w	r0, r2, #16
 8012c86:	9300      	str	r3, [sp, #0]
 8012c88:	460b      	mov	r3, r1
 8012c8a:	4622      	mov	r2, r4
 8012c8c:	2100      	movs	r1, #0
 8012c8e:	f000 ff4f 	bl	8013b30 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8012c92:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8012c96:	4b6f      	ldr	r3, [pc, #444]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012c98:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8012c9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012c9e:	4a6d      	ldr	r2, [pc, #436]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012ca0:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8012ca4:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8012ca8:	4b6a      	ldr	r3, [pc, #424]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012caa:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8012cae:	4b69      	ldr	r3, [pc, #420]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012cb0:	2201      	movs	r2, #1
 8012cb2:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 8012cb6:	e047      	b.n	8012d48 <ProcessRadioRxDone+0x910>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8012cb8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8012cbc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012cc0:	b2db      	uxtb	r3, r3
 8012cc2:	461c      	mov	r4, r3
 8012cc4:	4b63      	ldr	r3, [pc, #396]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012cc6:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8012cca:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 8012cce:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8012cd2:	f102 0010 	add.w	r0, r2, #16
 8012cd6:	9300      	str	r3, [sp, #0]
 8012cd8:	460b      	mov	r3, r1
 8012cda:	4622      	mov	r2, r4
 8012cdc:	2100      	movs	r1, #0
 8012cde:	f000 ff27 	bl	8013b30 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8012ce2:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8012ce6:	4b5b      	ldr	r3, [pc, #364]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012ce8:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 8012cec:	e02c      	b.n	8012d48 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8012cee:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8012cf0:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8012cf4:	4b57      	ldr	r3, [pc, #348]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012cf6:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8012cfa:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 8012cfe:	9300      	str	r3, [sp, #0]
 8012d00:	460b      	mov	r3, r1
 8012d02:	2100      	movs	r1, #0
 8012d04:	f000 ff14 	bl	8013b30 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8012d08:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8012d0c:	4b51      	ldr	r3, [pc, #324]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012d0e:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 8012d12:	e019      	b.n	8012d48 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8012d14:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8012d18:	4b4e      	ldr	r3, [pc, #312]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012d1a:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8012d1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012d20:	4a4c      	ldr	r2, [pc, #304]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012d22:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8012d26:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8012d2a:	4b4a      	ldr	r3, [pc, #296]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012d2c:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8012d30:	4b48      	ldr	r3, [pc, #288]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012d32:	2201      	movs	r2, #1
 8012d34:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 8012d38:	e006      	b.n	8012d48 <ProcessRadioRxDone+0x910>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012d3a:	4b46      	ldr	r3, [pc, #280]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012d3c:	2201      	movs	r2, #1
 8012d3e:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 8012d42:	f7ff fb53 	bl	80123ec <PrepareRxDoneAbort>
                    break;
 8012d46:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8012d48:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8012d4c:	2be0      	cmp	r3, #224	; 0xe0
 8012d4e:	d118      	bne.n	8012d82 <ProcessRadioRxDone+0x94a>
 8012d50:	4b3f      	ldr	r3, [pc, #252]	; (8012e50 <ProcessRadioRxDone+0xa18>)
 8012d52:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 8012d56:	f083 0301 	eor.w	r3, r3, #1
 8012d5a:	b2db      	uxtb	r3, r3
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d010      	beq.n	8012d82 <ProcessRadioRxDone+0x94a>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 8012d60:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8012d64:	4b3b      	ldr	r3, [pc, #236]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012d66:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 8012d6a:	4b3a      	ldr	r3, [pc, #232]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012d6c:	2200      	movs	r2, #0
 8012d6e:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 8012d72:	4b38      	ldr	r3, [pc, #224]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012d74:	2200      	movs	r2, #0
 8012d76:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                MacCtx.McpsIndication.RxData = false;
 8012d7a:	4b36      	ldr	r3, [pc, #216]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012d7c:	2200      	movs	r2, #0
 8012d7e:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8012d82:	4a34      	ldr	r2, [pc, #208]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012d84:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012d88:	f043 0302 	orr.w	r3, r3, #2
 8012d8c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

            break;
 8012d90:	e035      	b.n	8012dfe <ProcessRadioRxDone+0x9c6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8012d92:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8012d96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012d9a:	18d1      	adds	r1, r2, r3
 8012d9c:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8012da0:	b29b      	uxth	r3, r3
 8012da2:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8012da6:	1ad3      	subs	r3, r2, r3
 8012da8:	b29b      	uxth	r3, r3
 8012daa:	461a      	mov	r2, r3
 8012dac:	482a      	ldr	r0, [pc, #168]	; (8012e58 <ProcessRadioRxDone+0xa20>)
 8012dae:	f008 fd32 	bl	801b816 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8012db2:	4b28      	ldr	r3, [pc, #160]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012db4:	2203      	movs	r2, #3
 8012db6:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8012dba:	4b26      	ldr	r3, [pc, #152]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012dbc:	2200      	movs	r2, #0
 8012dbe:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8012dc2:	4b24      	ldr	r3, [pc, #144]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012dc4:	4a24      	ldr	r2, [pc, #144]	; (8012e58 <ProcessRadioRxDone+0xa20>)
 8012dc6:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8012dca:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8012dce:	b2da      	uxtb	r2, r3
 8012dd0:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8012dd4:	1ad3      	subs	r3, r2, r3
 8012dd6:	b2da      	uxtb	r2, r3
 8012dd8:	4b1e      	ldr	r3, [pc, #120]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012dda:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 8012dde:	4a1d      	ldr	r2, [pc, #116]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012de0:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012de4:	f043 0302 	orr.w	r3, r3, #2
 8012de8:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            break;
 8012dec:	e007      	b.n	8012dfe <ProcessRadioRxDone+0x9c6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012dee:	4b19      	ldr	r3, [pc, #100]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012df0:	2201      	movs	r2, #1
 8012df2:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            PrepareRxDoneAbort( );
 8012df6:	f7ff faf9 	bl	80123ec <PrepareRxDoneAbort>
            break;
 8012dfa:	e000      	b.n	8012dfe <ProcessRadioRxDone+0x9c6>
            break;
 8012dfc:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8012dfe:	4b15      	ldr	r3, [pc, #84]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012e00:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d004      	beq.n	8012e12 <ProcessRadioRxDone+0x9da>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8012e08:	4b12      	ldr	r3, [pc, #72]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012e0a:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8012e0e:	2b01      	cmp	r3, #1
 8012e10:	d10c      	bne.n	8012e2c <ProcessRadioRxDone+0x9f4>
    {
        if( MacCtx.NodeAckRequested == true )
 8012e12:	4b10      	ldr	r3, [pc, #64]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012e14:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d007      	beq.n	8012e2c <ProcessRadioRxDone+0x9f4>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 8012e1c:	4b0d      	ldr	r3, [pc, #52]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012e1e:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d002      	beq.n	8012e2c <ProcessRadioRxDone+0x9f4>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 8012e26:	2000      	movs	r0, #0
 8012e28:	f000 fcec 	bl	8013804 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 8012e2c:	4b09      	ldr	r3, [pc, #36]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012e2e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8012e32:	2b02      	cmp	r3, #2
 8012e34:	d006      	beq.n	8012e44 <ProcessRadioRxDone+0xa0c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 8012e36:	4a07      	ldr	r2, [pc, #28]	; (8012e54 <ProcessRadioRxDone+0xa1c>)
 8012e38:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012e3c:	f043 0310 	orr.w	r3, r3, #16
 8012e40:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 8012e44:	f7ff fa14 	bl	8012270 <UpdateRxSlotIdleState>
}
 8012e48:	37a4      	adds	r7, #164	; 0xa4
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	bd90      	pop	{r4, r7, pc}
 8012e4e:	bf00      	nop
 8012e50:	20000e18 	.word	0x20000e18
 8012e54:	200008fc 	.word	0x200008fc
 8012e58:	20000b34 	.word	0x20000b34

08012e5c <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8012e60:	4b11      	ldr	r3, [pc, #68]	; (8012ea8 <ProcessRadioTxTimeout+0x4c>)
 8012e62:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012e66:	2b02      	cmp	r3, #2
 8012e68:	d002      	beq.n	8012e70 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 8012e6a:	4b10      	ldr	r3, [pc, #64]	; (8012eac <ProcessRadioTxTimeout+0x50>)
 8012e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e6e:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8012e70:	f7ff f9fe 	bl	8012270 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8012e74:	4b0e      	ldr	r3, [pc, #56]	; (8012eb0 <ProcessRadioTxTimeout+0x54>)
 8012e76:	2202      	movs	r2, #2
 8012e78:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8012e7c:	2002      	movs	r0, #2
 8012e7e:	f004 fe69 	bl	8017b54 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8012e82:	4b0b      	ldr	r3, [pc, #44]	; (8012eb0 <ProcessRadioTxTimeout+0x54>)
 8012e84:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d003      	beq.n	8012e94 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 8012e8c:	4b08      	ldr	r3, [pc, #32]	; (8012eb0 <ProcessRadioTxTimeout+0x54>)
 8012e8e:	2201      	movs	r2, #1
 8012e90:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8012e94:	4a06      	ldr	r2, [pc, #24]	; (8012eb0 <ProcessRadioTxTimeout+0x54>)
 8012e96:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012e9a:	f043 0310 	orr.w	r3, r3, #16
 8012e9e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
}
 8012ea2:	bf00      	nop
 8012ea4:	bd80      	pop	{r7, pc}
 8012ea6:	bf00      	nop
 8012ea8:	20000e18 	.word	0x20000e18
 8012eac:	08021dfc 	.word	0x08021dfc
 8012eb0:	200008fc 	.word	0x200008fc

08012eb4 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b084      	sub	sp, #16
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	4603      	mov	r3, r0
 8012ebc:	460a      	mov	r2, r1
 8012ebe:	71fb      	strb	r3, [r7, #7]
 8012ec0:	4613      	mov	r3, r2
 8012ec2:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8012ec8:	4b3d      	ldr	r3, [pc, #244]	; (8012fc0 <HandleRadioRxErrorTimeout+0x10c>)
 8012eca:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012ece:	2b02      	cmp	r3, #2
 8012ed0:	d002      	beq.n	8012ed8 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 8012ed2:	4b3c      	ldr	r3, [pc, #240]	; (8012fc4 <HandleRadioRxErrorTimeout+0x110>)
 8012ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ed6:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8012ed8:	f004 f966 	bl	80171a8 <LoRaMacClassBIsBeaconExpected>
 8012edc:	4603      	mov	r3, r0
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d007      	beq.n	8012ef2 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8012ee2:	2002      	movs	r0, #2
 8012ee4:	f004 f914 	bl	8017110 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8012ee8:	2000      	movs	r0, #0
 8012eea:	f004 f936 	bl	801715a <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8012eee:	2301      	movs	r3, #1
 8012ef0:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012ef2:	4b33      	ldr	r3, [pc, #204]	; (8012fc0 <HandleRadioRxErrorTimeout+0x10c>)
 8012ef4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012ef8:	2b01      	cmp	r3, #1
 8012efa:	d119      	bne.n	8012f30 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8012efc:	f004 f95b 	bl	80171b6 <LoRaMacClassBIsPingExpected>
 8012f00:	4603      	mov	r3, r0
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d007      	beq.n	8012f16 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8012f06:	2000      	movs	r0, #0
 8012f08:	f004 f90c 	bl	8017124 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8012f0c:	2000      	movs	r0, #0
 8012f0e:	f004 f92d 	bl	801716c <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8012f12:	2301      	movs	r3, #1
 8012f14:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8012f16:	f004 f955 	bl	80171c4 <LoRaMacClassBIsMulticastExpected>
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d007      	beq.n	8012f30 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8012f20:	2000      	movs	r0, #0
 8012f22:	f004 f909 	bl	8017138 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8012f26:	2000      	movs	r0, #0
 8012f28:	f004 f929 	bl	801717e <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8012f2c:	2301      	movs	r3, #1
 8012f2e:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 8012f30:	7bfb      	ldrb	r3, [r7, #15]
 8012f32:	f083 0301 	eor.w	r3, r3, #1
 8012f36:	b2db      	uxtb	r3, r3
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d03b      	beq.n	8012fb4 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8012f3c:	4b22      	ldr	r3, [pc, #136]	; (8012fc8 <HandleRadioRxErrorTimeout+0x114>)
 8012f3e:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d122      	bne.n	8012f8c <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 8012f46:	4b20      	ldr	r3, [pc, #128]	; (8012fc8 <HandleRadioRxErrorTimeout+0x114>)
 8012f48:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d003      	beq.n	8012f58 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8012f50:	4a1d      	ldr	r2, [pc, #116]	; (8012fc8 <HandleRadioRxErrorTimeout+0x114>)
 8012f52:	79fb      	ldrb	r3, [r7, #7]
 8012f54:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8012f58:	79fb      	ldrb	r3, [r7, #7]
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f004 fdfa 	bl	8017b54 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8012f60:	4b17      	ldr	r3, [pc, #92]	; (8012fc0 <HandleRadioRxErrorTimeout+0x10c>)
 8012f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f64:	4618      	mov	r0, r3
 8012f66:	f00c ff3d 	bl	801fde4 <UTIL_TIMER_GetElapsedTime>
 8012f6a:	4602      	mov	r2, r0
 8012f6c:	4b16      	ldr	r3, [pc, #88]	; (8012fc8 <HandleRadioRxErrorTimeout+0x114>)
 8012f6e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8012f72:	429a      	cmp	r2, r3
 8012f74:	d31e      	bcc.n	8012fb4 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 8012f76:	4815      	ldr	r0, [pc, #84]	; (8012fcc <HandleRadioRxErrorTimeout+0x118>)
 8012f78:	f00c fe08 	bl	801fb8c <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8012f7c:	4a12      	ldr	r2, [pc, #72]	; (8012fc8 <HandleRadioRxErrorTimeout+0x114>)
 8012f7e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012f82:	f043 0310 	orr.w	r3, r3, #16
 8012f86:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8012f8a:	e013      	b.n	8012fb4 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 8012f8c:	4b0e      	ldr	r3, [pc, #56]	; (8012fc8 <HandleRadioRxErrorTimeout+0x114>)
 8012f8e:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d003      	beq.n	8012f9e <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8012f96:	4a0c      	ldr	r2, [pc, #48]	; (8012fc8 <HandleRadioRxErrorTimeout+0x114>)
 8012f98:	79bb      	ldrb	r3, [r7, #6]
 8012f9a:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8012f9e:	79bb      	ldrb	r3, [r7, #6]
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	f004 fdd7 	bl	8017b54 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 8012fa6:	4a08      	ldr	r2, [pc, #32]	; (8012fc8 <HandleRadioRxErrorTimeout+0x114>)
 8012fa8:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012fac:	f043 0310 	orr.w	r3, r3, #16
 8012fb0:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 8012fb4:	f7ff f95c 	bl	8012270 <UpdateRxSlotIdleState>
}
 8012fb8:	bf00      	nop
 8012fba:	3710      	adds	r7, #16
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	bd80      	pop	{r7, pc}
 8012fc0:	20000e18 	.word	0x20000e18
 8012fc4:	08021dfc 	.word	0x08021dfc
 8012fc8:	200008fc 	.word	0x200008fc
 8012fcc:	20000c94 	.word	0x20000c94

08012fd0 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8012fd4:	2106      	movs	r1, #6
 8012fd6:	2005      	movs	r0, #5
 8012fd8:	f7ff ff6c 	bl	8012eb4 <HandleRadioRxErrorTimeout>
}
 8012fdc:	bf00      	nop
 8012fde:	bd80      	pop	{r7, pc}

08012fe0 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8012fe4:	2104      	movs	r1, #4
 8012fe6:	2003      	movs	r0, #3
 8012fe8:	f7ff ff64 	bl	8012eb4 <HandleRadioRxErrorTimeout>
}
 8012fec:	bf00      	nop
 8012fee:	bd80      	pop	{r7, pc}

08012ff0 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b084      	sub	sp, #16
 8012ff4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8012ffa:	607b      	str	r3, [r7, #4]
  return(result);
 8012ffc:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8012ffe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8013000:	b672      	cpsid	i
}
 8013002:	bf00      	nop
    events = LoRaMacRadioEvents;
 8013004:	4b1d      	ldr	r3, [pc, #116]	; (801307c <LoRaMacHandleIrqEvents+0x8c>)
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 801300a:	4b1c      	ldr	r3, [pc, #112]	; (801307c <LoRaMacHandleIrqEvents+0x8c>)
 801300c:	2200      	movs	r2, #0
 801300e:	601a      	str	r2, [r3, #0]
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013014:	68bb      	ldr	r3, [r7, #8]
 8013016:	f383 8810 	msr	PRIMASK, r3
}
 801301a:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 801301c:	683b      	ldr	r3, [r7, #0]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d027      	beq.n	8013072 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 8013022:	783b      	ldrb	r3, [r7, #0]
 8013024:	f003 0320 	and.w	r3, r3, #32
 8013028:	b2db      	uxtb	r3, r3
 801302a:	2b00      	cmp	r3, #0
 801302c:	d001      	beq.n	8013032 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 801302e:	f7ff f937 	bl	80122a0 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8013032:	783b      	ldrb	r3, [r7, #0]
 8013034:	f003 0310 	and.w	r3, r3, #16
 8013038:	b2db      	uxtb	r3, r3
 801303a:	2b00      	cmp	r3, #0
 801303c:	d001      	beq.n	8013042 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 801303e:	f7ff f9fb 	bl	8012438 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 8013042:	783b      	ldrb	r3, [r7, #0]
 8013044:	f003 0308 	and.w	r3, r3, #8
 8013048:	b2db      	uxtb	r3, r3
 801304a:	2b00      	cmp	r3, #0
 801304c:	d001      	beq.n	8013052 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 801304e:	f7ff ff05 	bl	8012e5c <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8013052:	783b      	ldrb	r3, [r7, #0]
 8013054:	f003 0304 	and.w	r3, r3, #4
 8013058:	b2db      	uxtb	r3, r3
 801305a:	2b00      	cmp	r3, #0
 801305c:	d001      	beq.n	8013062 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 801305e:	f7ff ffb7 	bl	8012fd0 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8013062:	783b      	ldrb	r3, [r7, #0]
 8013064:	f003 0302 	and.w	r3, r3, #2
 8013068:	b2db      	uxtb	r3, r3
 801306a:	2b00      	cmp	r3, #0
 801306c:	d001      	beq.n	8013072 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 801306e:	f7ff ffb7 	bl	8012fe0 <ProcessRadioRxTimeout>
        }
    }
}
 8013072:	bf00      	nop
 8013074:	3710      	adds	r7, #16
 8013076:	46bd      	mov	sp, r7
 8013078:	bd80      	pop	{r7, pc}
 801307a:	bf00      	nop
 801307c:	20001a40 	.word	0x20001a40

08013080 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8013080:	b480      	push	{r7}
 8013082:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8013084:	4b10      	ldr	r3, [pc, #64]	; (80130c8 <LoRaMacIsBusy+0x48>)
 8013086:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801308a:	2b01      	cmp	r3, #1
 801308c:	d101      	bne.n	8013092 <LoRaMacIsBusy+0x12>
    {
        return false;
 801308e:	2300      	movs	r3, #0
 8013090:	e015      	b.n	80130be <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 8013092:	4b0e      	ldr	r3, [pc, #56]	; (80130cc <LoRaMacIsBusy+0x4c>)
 8013094:	781b      	ldrb	r3, [r3, #0]
 8013096:	f003 0301 	and.w	r3, r3, #1
 801309a:	b2db      	uxtb	r3, r3
 801309c:	2b00      	cmp	r3, #0
 801309e:	d001      	beq.n	80130a4 <LoRaMacIsBusy+0x24>
    {
        return true;
 80130a0:	2301      	movs	r3, #1
 80130a2:	e00c      	b.n	80130be <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80130a4:	4b08      	ldr	r3, [pc, #32]	; (80130c8 <LoRaMacIsBusy+0x48>)
 80130a6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d106      	bne.n	80130bc <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 80130ae:	4b06      	ldr	r3, [pc, #24]	; (80130c8 <LoRaMacIsBusy+0x48>)
 80130b0:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80130b4:	2b01      	cmp	r3, #1
 80130b6:	d101      	bne.n	80130bc <LoRaMacIsBusy+0x3c>
    {
        return false;
 80130b8:	2300      	movs	r3, #0
 80130ba:	e000      	b.n	80130be <LoRaMacIsBusy+0x3e>
    }
    return true;
 80130bc:	2301      	movs	r3, #1
}
 80130be:	4618      	mov	r0, r3
 80130c0:	46bd      	mov	sp, r7
 80130c2:	bc80      	pop	{r7}
 80130c4:	4770      	bx	lr
 80130c6:	bf00      	nop
 80130c8:	200008fc 	.word	0x200008fc
 80130cc:	20001a40 	.word	0x20001a40

080130d0 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 80130d0:	b480      	push	{r7}
 80130d2:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 80130d4:	4b05      	ldr	r3, [pc, #20]	; (80130ec <LoRaMacIsStopped+0x1c>)
 80130d6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80130da:	2b01      	cmp	r3, #1
 80130dc:	d101      	bne.n	80130e2 <LoRaMacIsStopped+0x12>
    {
        return true;
 80130de:	2301      	movs	r3, #1
 80130e0:	e000      	b.n	80130e4 <LoRaMacIsStopped+0x14>
    }
    return false;
 80130e2:	2300      	movs	r3, #0
}
 80130e4:	4618      	mov	r0, r3
 80130e6:	46bd      	mov	sp, r7
 80130e8:	bc80      	pop	{r7}
 80130ea:	4770      	bx	lr
 80130ec:	200008fc 	.word	0x200008fc

080130f0 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 80130f0:	b480      	push	{r7}
 80130f2:	b083      	sub	sp, #12
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	4603      	mov	r3, r0
 80130f8:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 80130fa:	4a04      	ldr	r2, [pc, #16]	; (801310c <LoRaMacEnableRequests+0x1c>)
 80130fc:	79fb      	ldrb	r3, [r7, #7]
 80130fe:	f882 3492 	strb.w	r3, [r2, #1170]	; 0x492
}
 8013102:	bf00      	nop
 8013104:	370c      	adds	r7, #12
 8013106:	46bd      	mov	sp, r7
 8013108:	bc80      	pop	{r7}
 801310a:	4770      	bx	lr
 801310c:	200008fc 	.word	0x200008fc

08013110 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8013110:	b580      	push	{r7, lr}
 8013112:	b082      	sub	sp, #8
 8013114:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 8013116:	4b2c      	ldr	r3, [pc, #176]	; (80131c8 <LoRaMacHandleRequestEvents+0xb8>)
 8013118:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801311c:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 801311e:	4b2a      	ldr	r3, [pc, #168]	; (80131c8 <LoRaMacHandleRequestEvents+0xb8>)
 8013120:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013124:	2b00      	cmp	r3, #0
 8013126:	d14a      	bne.n	80131be <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8013128:	4b27      	ldr	r3, [pc, #156]	; (80131c8 <LoRaMacHandleRequestEvents+0xb8>)
 801312a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801312e:	f003 0301 	and.w	r3, r3, #1
 8013132:	b2db      	uxtb	r3, r3
 8013134:	2b00      	cmp	r3, #0
 8013136:	d006      	beq.n	8013146 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8013138:	4a23      	ldr	r2, [pc, #140]	; (80131c8 <LoRaMacHandleRequestEvents+0xb8>)
 801313a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801313e:	f36f 0300 	bfc	r3, #0, #1
 8013142:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8013146:	4b20      	ldr	r3, [pc, #128]	; (80131c8 <LoRaMacHandleRequestEvents+0xb8>)
 8013148:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801314c:	f003 0304 	and.w	r3, r3, #4
 8013150:	b2db      	uxtb	r3, r3
 8013152:	2b00      	cmp	r3, #0
 8013154:	d006      	beq.n	8013164 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8013156:	4a1c      	ldr	r2, [pc, #112]	; (80131c8 <LoRaMacHandleRequestEvents+0xb8>)
 8013158:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801315c:	f36f 0382 	bfc	r3, #2, #1
 8013160:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8013164:	2001      	movs	r0, #1
 8013166:	f7ff ffc3 	bl	80130f0 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 801316a:	793b      	ldrb	r3, [r7, #4]
 801316c:	f003 0301 	and.w	r3, r3, #1
 8013170:	b2db      	uxtb	r3, r3
 8013172:	2b00      	cmp	r3, #0
 8013174:	d005      	beq.n	8013182 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8013176:	4b14      	ldr	r3, [pc, #80]	; (80131c8 <LoRaMacHandleRequestEvents+0xb8>)
 8013178:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	4813      	ldr	r0, [pc, #76]	; (80131cc <LoRaMacHandleRequestEvents+0xbc>)
 8013180:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 8013182:	793b      	ldrb	r3, [r7, #4]
 8013184:	f003 0304 	and.w	r3, r3, #4
 8013188:	b2db      	uxtb	r3, r3
 801318a:	2b00      	cmp	r3, #0
 801318c:	d00e      	beq.n	80131ac <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 801318e:	4810      	ldr	r0, [pc, #64]	; (80131d0 <LoRaMacHandleRequestEvents+0xc0>)
 8013190:	f004 fd2e 	bl	8017bf0 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8013194:	f004 fd7e 	bl	8017c94 <LoRaMacConfirmQueueGetCnt>
 8013198:	4603      	mov	r3, r0
 801319a:	2b00      	cmp	r3, #0
 801319c:	d006      	beq.n	80131ac <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 801319e:	4a0a      	ldr	r2, [pc, #40]	; (80131c8 <LoRaMacHandleRequestEvents+0xb8>)
 80131a0:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80131a4:	f043 0304 	orr.w	r3, r3, #4
 80131a8:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 80131ac:	f004 f828 	bl	8017200 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 80131b0:	4a05      	ldr	r2, [pc, #20]	; (80131c8 <LoRaMacHandleRequestEvents+0xb8>)
 80131b2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80131b6:	f36f 1304 	bfc	r3, #4, #1
 80131ba:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 80131be:	bf00      	nop
 80131c0:	3708      	adds	r7, #8
 80131c2:	46bd      	mov	sp, r7
 80131c4:	bd80      	pop	{r7, pc}
 80131c6:	bf00      	nop
 80131c8:	200008fc 	.word	0x200008fc
 80131cc:	20000d3c 	.word	0x20000d3c
 80131d0:	20000d50 	.word	0x20000d50

080131d4 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80131d8:	4b16      	ldr	r3, [pc, #88]	; (8013234 <LoRaMacHandleIndicationEvents+0x60>)
 80131da:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80131de:	f003 0308 	and.w	r3, r3, #8
 80131e2:	b2db      	uxtb	r3, r3
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d00d      	beq.n	8013204 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 80131e8:	4a12      	ldr	r2, [pc, #72]	; (8013234 <LoRaMacHandleIndicationEvents+0x60>)
 80131ea:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80131ee:	f36f 03c3 	bfc	r3, #3, #1
 80131f2:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 80131f6:	4b0f      	ldr	r3, [pc, #60]	; (8013234 <LoRaMacHandleIndicationEvents+0x60>)
 80131f8:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 80131fc:	68db      	ldr	r3, [r3, #12]
 80131fe:	490e      	ldr	r1, [pc, #56]	; (8013238 <LoRaMacHandleIndicationEvents+0x64>)
 8013200:	480e      	ldr	r0, [pc, #56]	; (801323c <LoRaMacHandleIndicationEvents+0x68>)
 8013202:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013204:	4b0b      	ldr	r3, [pc, #44]	; (8013234 <LoRaMacHandleIndicationEvents+0x60>)
 8013206:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801320a:	f003 0302 	and.w	r3, r3, #2
 801320e:	b2db      	uxtb	r3, r3
 8013210:	2b00      	cmp	r3, #0
 8013212:	d00d      	beq.n	8013230 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8013214:	4a07      	ldr	r2, [pc, #28]	; (8013234 <LoRaMacHandleIndicationEvents+0x60>)
 8013216:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801321a:	f36f 0341 	bfc	r3, #1, #1
 801321e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8013222:	4b04      	ldr	r3, [pc, #16]	; (8013234 <LoRaMacHandleIndicationEvents+0x60>)
 8013224:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8013228:	685b      	ldr	r3, [r3, #4]
 801322a:	4903      	ldr	r1, [pc, #12]	; (8013238 <LoRaMacHandleIndicationEvents+0x64>)
 801322c:	4804      	ldr	r0, [pc, #16]	; (8013240 <LoRaMacHandleIndicationEvents+0x6c>)
 801322e:	4798      	blx	r3
    }
}
 8013230:	bf00      	nop
 8013232:	bd80      	pop	{r7, pc}
 8013234:	200008fc 	.word	0x200008fc
 8013238:	20000d88 	.word	0x20000d88
 801323c:	20000d64 	.word	0x20000d64
 8013240:	20000d1c 	.word	0x20000d1c

08013244 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 8013244:	b580      	push	{r7, lr}
 8013246:	b082      	sub	sp, #8
 8013248:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 801324a:	4b2a      	ldr	r3, [pc, #168]	; (80132f4 <LoRaMacHandleMcpsRequest+0xb0>)
 801324c:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8013250:	f003 0301 	and.w	r3, r3, #1
 8013254:	b2db      	uxtb	r3, r3
 8013256:	2b00      	cmp	r3, #0
 8013258:	d048      	beq.n	80132ec <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 801325a:	2300      	movs	r3, #0
 801325c:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 801325e:	2300      	movs	r3, #0
 8013260:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8013262:	4b24      	ldr	r3, [pc, #144]	; (80132f4 <LoRaMacHandleMcpsRequest+0xb0>)
 8013264:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 8013268:	2b00      	cmp	r3, #0
 801326a:	d004      	beq.n	8013276 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 801326c:	4b21      	ldr	r3, [pc, #132]	; (80132f4 <LoRaMacHandleMcpsRequest+0xb0>)
 801326e:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8013272:	2b03      	cmp	r3, #3
 8013274:	d104      	bne.n	8013280 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8013276:	f002 f943 	bl	8015500 <CheckRetransUnconfirmedUplink>
 801327a:	4603      	mov	r3, r0
 801327c:	71fb      	strb	r3, [r7, #7]
 801327e:	e010      	b.n	80132a2 <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8013280:	4b1c      	ldr	r3, [pc, #112]	; (80132f4 <LoRaMacHandleMcpsRequest+0xb0>)
 8013282:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 8013286:	2b01      	cmp	r3, #1
 8013288:	d10b      	bne.n	80132a2 <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 801328a:	4b1a      	ldr	r3, [pc, #104]	; (80132f4 <LoRaMacHandleMcpsRequest+0xb0>)
 801328c:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8013290:	2b00      	cmp	r3, #0
 8013292:	d004      	beq.n	801329e <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8013294:	f002 f960 	bl	8015558 <CheckRetransConfirmedUplink>
 8013298:	4603      	mov	r3, r0
 801329a:	71fb      	strb	r3, [r7, #7]
 801329c:	e001      	b.n	80132a2 <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 801329e:	2301      	movs	r3, #1
 80132a0:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 80132a2:	79fb      	ldrb	r3, [r7, #7]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d00d      	beq.n	80132c4 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 80132a8:	4813      	ldr	r0, [pc, #76]	; (80132f8 <LoRaMacHandleMcpsRequest+0xb4>)
 80132aa:	f00c fc6f 	bl	801fb8c <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80132ae:	4b11      	ldr	r3, [pc, #68]	; (80132f4 <LoRaMacHandleMcpsRequest+0xb0>)
 80132b0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80132b4:	f023 0320 	bic.w	r3, r3, #32
 80132b8:	4a0e      	ldr	r2, [pc, #56]	; (80132f4 <LoRaMacHandleMcpsRequest+0xb0>)
 80132ba:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 80132be:	f002 f985 	bl	80155cc <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 80132c2:	e013      	b.n	80132ec <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 80132c4:	79bb      	ldrb	r3, [r7, #6]
 80132c6:	f083 0301 	eor.w	r3, r3, #1
 80132ca:	b2db      	uxtb	r3, r3
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d00d      	beq.n	80132ec <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 80132d0:	4a08      	ldr	r2, [pc, #32]	; (80132f4 <LoRaMacHandleMcpsRequest+0xb0>)
 80132d2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80132d6:	f36f 1304 	bfc	r3, #4, #1
 80132da:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 80132de:	4b05      	ldr	r3, [pc, #20]	; (80132f4 <LoRaMacHandleMcpsRequest+0xb0>)
 80132e0:	2200      	movs	r2, #0
 80132e2:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 80132e6:	2000      	movs	r0, #0
 80132e8:	f000 f9c8 	bl	801367c <OnTxDelayedTimerEvent>
}
 80132ec:	bf00      	nop
 80132ee:	3708      	adds	r7, #8
 80132f0:	46bd      	mov	sp, r7
 80132f2:	bd80      	pop	{r7, pc}
 80132f4:	200008fc 	.word	0x200008fc
 80132f8:	20000c64 	.word	0x20000c64

080132fc <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 80132fc:	b580      	push	{r7, lr}
 80132fe:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8013300:	4b18      	ldr	r3, [pc, #96]	; (8013364 <LoRaMacHandleMlmeRequest+0x68>)
 8013302:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8013306:	f003 0304 	and.w	r3, r3, #4
 801330a:	b2db      	uxtb	r3, r3
 801330c:	2b00      	cmp	r3, #0
 801330e:	d026      	beq.n	801335e <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8013310:	2001      	movs	r0, #1
 8013312:	f004 fc53 	bl	8017bbc <LoRaMacConfirmQueueIsCmdActive>
 8013316:	4603      	mov	r3, r0
 8013318:	2b00      	cmp	r3, #0
 801331a:	d012      	beq.n	8013342 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 801331c:	2001      	movs	r0, #1
 801331e:	f004 fbef 	bl	8017b00 <LoRaMacConfirmQueueGetStatus>
 8013322:	4603      	mov	r3, r0
 8013324:	2b00      	cmp	r3, #0
 8013326:	d103      	bne.n	8013330 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8013328:	4b0e      	ldr	r3, [pc, #56]	; (8013364 <LoRaMacHandleMlmeRequest+0x68>)
 801332a:	2200      	movs	r2, #0
 801332c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8013330:	4b0c      	ldr	r3, [pc, #48]	; (8013364 <LoRaMacHandleMlmeRequest+0x68>)
 8013332:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013336:	f023 0302 	bic.w	r3, r3, #2
 801333a:	4a0a      	ldr	r2, [pc, #40]	; (8013364 <LoRaMacHandleMlmeRequest+0x68>)
 801333c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8013340:	e00d      	b.n	801335e <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 8013342:	2006      	movs	r0, #6
 8013344:	f004 fc3a 	bl	8017bbc <LoRaMacConfirmQueueIsCmdActive>
 8013348:	4603      	mov	r3, r0
 801334a:	2b00      	cmp	r3, #0
 801334c:	d007      	beq.n	801335e <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801334e:	4b05      	ldr	r3, [pc, #20]	; (8013364 <LoRaMacHandleMlmeRequest+0x68>)
 8013350:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013354:	f023 0302 	bic.w	r3, r3, #2
 8013358:	4a02      	ldr	r2, [pc, #8]	; (8013364 <LoRaMacHandleMlmeRequest+0x68>)
 801335a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 801335e:	bf00      	nop
 8013360:	bd80      	pop	{r7, pc}
 8013362:	bf00      	nop
 8013364:	200008fc 	.word	0x200008fc

08013368 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8013368:	b580      	push	{r7, lr}
 801336a:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 801336c:	200b      	movs	r0, #11
 801336e:	f004 fc25 	bl	8017bbc <LoRaMacConfirmQueueIsCmdActive>
 8013372:	4603      	mov	r3, r0
 8013374:	2b00      	cmp	r3, #0
 8013376:	d019      	beq.n	80133ac <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8013378:	4b0e      	ldr	r3, [pc, #56]	; (80133b4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 801337a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801337e:	f003 0301 	and.w	r3, r3, #1
 8013382:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8013384:	2b00      	cmp	r3, #0
 8013386:	d111      	bne.n	80133ac <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8013388:	4b0a      	ldr	r3, [pc, #40]	; (80133b4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 801338a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801338e:	f003 0304 	and.w	r3, r3, #4
 8013392:	b2db      	uxtb	r3, r3
 8013394:	2b00      	cmp	r3, #0
 8013396:	d009      	beq.n	80133ac <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8013398:	4b06      	ldr	r3, [pc, #24]	; (80133b4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 801339a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801339e:	f023 0302 	bic.w	r3, r3, #2
 80133a2:	4a04      	ldr	r2, [pc, #16]	; (80133b4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 80133a4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 80133a8:	2301      	movs	r3, #1
 80133aa:	e000      	b.n	80133ae <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 80133ac:	2300      	movs	r3, #0
}
 80133ae:	4618      	mov	r0, r3
 80133b0:	bd80      	pop	{r7, pc}
 80133b2:	bf00      	nop
 80133b4:	200008fc 	.word	0x200008fc

080133b8 <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 80133b8:	b480      	push	{r7}
 80133ba:	b083      	sub	sp, #12
 80133bc:	af00      	add	r7, sp, #0
 80133be:	4603      	mov	r3, r0
 80133c0:	71fb      	strb	r3, [r7, #7]
 80133c2:	460b      	mov	r3, r1
 80133c4:	71bb      	strb	r3, [r7, #6]
 80133c6:	4613      	mov	r3, r2
 80133c8:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 80133ca:	79fb      	ldrb	r3, [r7, #7]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d00a      	beq.n	80133e6 <CheckForMinimumAbpDatarate+0x2e>
 80133d0:	79bb      	ldrb	r3, [r7, #6]
 80133d2:	2b01      	cmp	r3, #1
 80133d4:	d107      	bne.n	80133e6 <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 80133d6:	797b      	ldrb	r3, [r7, #5]
 80133d8:	f083 0301 	eor.w	r3, r3, #1
 80133dc:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d001      	beq.n	80133e6 <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 80133e2:	2301      	movs	r3, #1
 80133e4:	e000      	b.n	80133e8 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 80133e6:	2300      	movs	r3, #0
}
 80133e8:	4618      	mov	r0, r3
 80133ea:	370c      	adds	r7, #12
 80133ec:	46bd      	mov	sp, r7
 80133ee:	bc80      	pop	{r7}
 80133f0:	4770      	bx	lr
	...

080133f4 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 80133f4:	b480      	push	{r7}
 80133f6:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 80133f8:	4b0d      	ldr	r3, [pc, #52]	; (8013430 <LoRaMacCheckForRxAbort+0x3c>)
 80133fa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80133fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013402:	2b00      	cmp	r3, #0
 8013404:	d00f      	beq.n	8013426 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8013406:	4b0a      	ldr	r3, [pc, #40]	; (8013430 <LoRaMacCheckForRxAbort+0x3c>)
 8013408:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801340c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013410:	4a07      	ldr	r2, [pc, #28]	; (8013430 <LoRaMacCheckForRxAbort+0x3c>)
 8013412:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8013416:	4b06      	ldr	r3, [pc, #24]	; (8013430 <LoRaMacCheckForRxAbort+0x3c>)
 8013418:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801341c:	f023 0302 	bic.w	r3, r3, #2
 8013420:	4a03      	ldr	r2, [pc, #12]	; (8013430 <LoRaMacCheckForRxAbort+0x3c>)
 8013422:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8013426:	bf00      	nop
 8013428:	46bd      	mov	sp, r7
 801342a:	bc80      	pop	{r7}
 801342c:	4770      	bx	lr
 801342e:	bf00      	nop
 8013430:	200008fc 	.word	0x200008fc

08013434 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8013434:	b580      	push	{r7, lr}
 8013436:	b084      	sub	sp, #16
 8013438:	af00      	add	r7, sp, #0
 801343a:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 801343c:	2300      	movs	r3, #0
 801343e:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8013440:	2300      	movs	r3, #0
 8013442:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 8013444:	4b51      	ldr	r3, [pc, #324]	; (801358c <LoRaMacHandleNvm+0x158>)
 8013446:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801344a:	2b00      	cmp	r3, #0
 801344c:	f040 8099 	bne.w	8013582 <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	2124      	movs	r1, #36	; 0x24
 8013454:	4618      	mov	r0, r3
 8013456:	f008 fa33 	bl	801b8c0 <Crc32>
 801345a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013460:	68ba      	ldr	r2, [r7, #8]
 8013462:	429a      	cmp	r2, r3
 8013464:	d006      	beq.n	8013474 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	68ba      	ldr	r2, [r7, #8]
 801346a:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 801346c:	89fb      	ldrh	r3, [r7, #14]
 801346e:	f043 0301 	orr.w	r3, r3, #1
 8013472:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	3328      	adds	r3, #40	; 0x28
 8013478:	211c      	movs	r1, #28
 801347a:	4618      	mov	r0, r3
 801347c:	f008 fa20 	bl	801b8c0 <Crc32>
 8013480:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013486:	68ba      	ldr	r2, [r7, #8]
 8013488:	429a      	cmp	r2, r3
 801348a:	d006      	beq.n	801349a <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	68ba      	ldr	r2, [r7, #8]
 8013490:	645a      	str	r2, [r3, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8013492:	89fb      	ldrh	r3, [r7, #14]
 8013494:	f043 0302 	orr.w	r3, r3, #2
 8013498:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	3348      	adds	r3, #72	; 0x48
 801349e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80134a2:	4618      	mov	r0, r3
 80134a4:	f008 fa0c 	bl	801b8c0 <Crc32>
 80134a8:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80134b0:	68ba      	ldr	r2, [r7, #8]
 80134b2:	429a      	cmp	r2, r3
 80134b4:	d007      	beq.n	80134c6 <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	68ba      	ldr	r2, [r7, #8]
 80134ba:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 80134be:	89fb      	ldrh	r3, [r7, #14]
 80134c0:	f043 0304 	orr.w	r3, r3, #4
 80134c4:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80134cc:	21d4      	movs	r1, #212	; 0xd4
 80134ce:	4618      	mov	r0, r3
 80134d0:	f008 f9f6 	bl	801b8c0 <Crc32>
 80134d4:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80134dc:	68ba      	ldr	r2, [r7, #8]
 80134de:	429a      	cmp	r2, r3
 80134e0:	d007      	beq.n	80134f2 <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	68ba      	ldr	r2, [r7, #8]
 80134e6:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 80134ea:	89fb      	ldrh	r3, [r7, #14]
 80134ec:	f043 0308 	orr.w	r3, r3, #8
 80134f0:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80134f8:	2110      	movs	r1, #16
 80134fa:	4618      	mov	r0, r3
 80134fc:	f008 f9e0 	bl	801b8c0 <Crc32>
 8013500:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8013508:	68ba      	ldr	r2, [r7, #8]
 801350a:	429a      	cmp	r2, r3
 801350c:	d007      	beq.n	801351e <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	68ba      	ldr	r2, [r7, #8]
 8013512:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8013516:	89fb      	ldrh	r3, [r7, #14]
 8013518:	f043 0310 	orr.w	r3, r3, #16
 801351c:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8013524:	f44f 715e 	mov.w	r1, #888	; 0x378
 8013528:	4618      	mov	r0, r3
 801352a:	f008 f9c9 	bl	801b8c0 <Crc32>
 801352e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8013536:	68ba      	ldr	r2, [r7, #8]
 8013538:	429a      	cmp	r2, r3
 801353a:	d007      	beq.n	801354c <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	68ba      	ldr	r2, [r7, #8]
 8013540:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8013544:	89fb      	ldrh	r3, [r7, #14]
 8013546:	f043 0320 	orr.w	r3, r3, #32
 801354a:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 8013552:	2114      	movs	r1, #20
 8013554:	4618      	mov	r0, r3
 8013556:	f008 f9b3 	bl	801b8c0 <Crc32>
 801355a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 8013562:	68ba      	ldr	r2, [r7, #8]
 8013564:	429a      	cmp	r2, r3
 8013566:	d007      	beq.n	8013578 <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	68ba      	ldr	r2, [r7, #8]
 801356c:	f8c3 25c8 	str.w	r2, [r3, #1480]	; 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8013570:	89fb      	ldrh	r3, [r7, #14]
 8013572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013576:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8013578:	89fb      	ldrh	r3, [r7, #14]
 801357a:	4618      	mov	r0, r3
 801357c:	f002 f878 	bl	8015670 <CallNvmDataChangeCallback>
 8013580:	e000      	b.n	8013584 <LoRaMacHandleNvm+0x150>
        return;
 8013582:	bf00      	nop
}
 8013584:	3710      	adds	r7, #16
 8013586:	46bd      	mov	sp, r7
 8013588:	bd80      	pop	{r7, pc}
 801358a:	bf00      	nop
 801358c:	200008fc 	.word	0x200008fc

08013590 <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 8013590:	b580      	push	{r7, lr}
 8013592:	b084      	sub	sp, #16
 8013594:	af00      	add	r7, sp, #0
 8013596:	6078      	str	r0, [r7, #4]
 8013598:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 801359a:	683b      	ldr	r3, [r7, #0]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d00d      	beq.n	80135bc <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 80135a0:	6838      	ldr	r0, [r7, #0]
 80135a2:	f00c fc1f 	bl	801fde4 <UTIL_TIMER_GetElapsedTime>
 80135a6:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 80135a8:	68fa      	ldr	r2, [r7, #12]
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	429a      	cmp	r2, r3
 80135ae:	d905      	bls.n	80135bc <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 80135b0:	4b05      	ldr	r3, [pc, #20]	; (80135c8 <LoRaMacHandleResponseTimeout+0x38>)
 80135b2:	2200      	movs	r2, #0
 80135b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 80135b8:	2301      	movs	r3, #1
 80135ba:	e000      	b.n	80135be <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 80135bc:	2300      	movs	r3, #0
}
 80135be:	4618      	mov	r0, r3
 80135c0:	3710      	adds	r7, #16
 80135c2:	46bd      	mov	sp, r7
 80135c4:	bd80      	pop	{r7, pc}
 80135c6:	bf00      	nop
 80135c8:	20000e18 	.word	0x20000e18

080135cc <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b082      	sub	sp, #8
 80135d0:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 80135d2:	2300      	movs	r3, #0
 80135d4:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 80135d6:	f7ff fd0b 	bl	8012ff0 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 80135da:	f003 fe80 	bl	80172de <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 80135de:	4b25      	ldr	r3, [pc, #148]	; (8013674 <LoRaMacProcess+0xa8>)
 80135e0:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80135e4:	f003 0310 	and.w	r3, r3, #16
 80135e8:	b2db      	uxtb	r3, r3
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d023      	beq.n	8013636 <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 80135ee:	2000      	movs	r0, #0
 80135f0:	f7ff fd7e 	bl	80130f0 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 80135f4:	f7ff fefe 	bl	80133f4 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 80135f8:	f002 f858 	bl	80156ac <IsRequestPending>
 80135fc:	4603      	mov	r3, r0
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d006      	beq.n	8013610 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8013602:	f7ff feb1 	bl	8013368 <LoRaMacCheckForBeaconAcquisition>
 8013606:	4603      	mov	r3, r0
 8013608:	461a      	mov	r2, r3
 801360a:	79fb      	ldrb	r3, [r7, #7]
 801360c:	4313      	orrs	r3, r2
 801360e:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8013610:	79fb      	ldrb	r3, [r7, #7]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d103      	bne.n	801361e <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 8013616:	f7ff fe71 	bl	80132fc <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 801361a:	f7ff fe13 	bl	8013244 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 801361e:	f7ff fd77 	bl	8013110 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8013622:	2001      	movs	r0, #1
 8013624:	f7ff fd64 	bl	80130f0 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8013628:	4a12      	ldr	r2, [pc, #72]	; (8013674 <LoRaMacProcess+0xa8>)
 801362a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801362e:	f043 0320 	orr.w	r3, r3, #32
 8013632:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
    LoRaMacHandleIndicationEvents( );
 8013636:	f7ff fdcd 	bl	80131d4 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 801363a:	4b0e      	ldr	r3, [pc, #56]	; (8013674 <LoRaMacProcess+0xa8>)
 801363c:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8013640:	2b02      	cmp	r3, #2
 8013642:	d101      	bne.n	8013648 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 8013644:	f001 fc1a 	bl	8014e7c <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8013648:	4b0a      	ldr	r3, [pc, #40]	; (8013674 <LoRaMacProcess+0xa8>)
 801364a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801364e:	f003 0320 	and.w	r3, r3, #32
 8013652:	b2db      	uxtb	r3, r3
 8013654:	2b00      	cmp	r3, #0
 8013656:	d009      	beq.n	801366c <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8013658:	4a06      	ldr	r2, [pc, #24]	; (8013674 <LoRaMacProcess+0xa8>)
 801365a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801365e:	f36f 1345 	bfc	r3, #5, #1
 8013662:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        LoRaMacHandleNvm( &Nvm );
 8013666:	4804      	ldr	r0, [pc, #16]	; (8013678 <LoRaMacProcess+0xac>)
 8013668:	f7ff fee4 	bl	8013434 <LoRaMacHandleNvm>
    }
}
 801366c:	bf00      	nop
 801366e:	3708      	adds	r7, #8
 8013670:	46bd      	mov	sp, r7
 8013672:	bd80      	pop	{r7, pc}
 8013674:	200008fc 	.word	0x200008fc
 8013678:	20000e18 	.word	0x20000e18

0801367c <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 801367c:	b580      	push	{r7, lr}
 801367e:	b082      	sub	sp, #8
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8013684:	481e      	ldr	r0, [pc, #120]	; (8013700 <OnTxDelayedTimerEvent+0x84>)
 8013686:	f00c fa81 	bl	801fb8c <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 801368a:	4b1e      	ldr	r3, [pc, #120]	; (8013704 <OnTxDelayedTimerEvent+0x88>)
 801368c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013690:	f023 0320 	bic.w	r3, r3, #32
 8013694:	4a1b      	ldr	r2, [pc, #108]	; (8013704 <OnTxDelayedTimerEvent+0x88>)
 8013696:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 801369a:	4b1b      	ldr	r3, [pc, #108]	; (8013708 <OnTxDelayedTimerEvent+0x8c>)
 801369c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80136a0:	4a18      	ldr	r2, [pc, #96]	; (8013704 <OnTxDelayedTimerEvent+0x88>)
 80136a2:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 80136a6:	4611      	mov	r1, r2
 80136a8:	4618      	mov	r0, r3
 80136aa:	f7ff ff71 	bl	8013590 <LoRaMacHandleResponseTimeout>
 80136ae:	4603      	mov	r3, r0
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d11e      	bne.n	80136f2 <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 80136b4:	2001      	movs	r0, #1
 80136b6:	f001 f92b 	bl	8014910 <ScheduleTx>
 80136ba:	4603      	mov	r3, r0
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d01a      	beq.n	80136f6 <OnTxDelayedTimerEvent+0x7a>
 80136c0:	2b0b      	cmp	r3, #11
 80136c2:	d018      	beq.n	80136f6 <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80136c4:	4b10      	ldr	r3, [pc, #64]	; (8013708 <OnTxDelayedTimerEvent+0x8c>)
 80136c6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80136ca:	b2da      	uxtb	r2, r3
 80136cc:	4b0d      	ldr	r3, [pc, #52]	; (8013704 <OnTxDelayedTimerEvent+0x88>)
 80136ce:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80136d2:	4b0c      	ldr	r3, [pc, #48]	; (8013704 <OnTxDelayedTimerEvent+0x88>)
 80136d4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80136d8:	4b0a      	ldr	r3, [pc, #40]	; (8013704 <OnTxDelayedTimerEvent+0x88>)
 80136da:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80136de:	4b09      	ldr	r3, [pc, #36]	; (8013704 <OnTxDelayedTimerEvent+0x88>)
 80136e0:	2209      	movs	r2, #9
 80136e2:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 80136e6:	2009      	movs	r0, #9
 80136e8:	f004 fa34 	bl	8017b54 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 80136ec:	f001 ff6e 	bl	80155cc <StopRetransmission>
            break;
 80136f0:	e002      	b.n	80136f8 <OnTxDelayedTimerEvent+0x7c>
        return;
 80136f2:	bf00      	nop
 80136f4:	e000      	b.n	80136f8 <OnTxDelayedTimerEvent+0x7c>
            break;
 80136f6:	bf00      	nop
        }
    }
}
 80136f8:	3708      	adds	r7, #8
 80136fa:	46bd      	mov	sp, r7
 80136fc:	bd80      	pop	{r7, pc}
 80136fe:	bf00      	nop
 8013700:	20000c64 	.word	0x20000c64
 8013704:	200008fc 	.word	0x200008fc
 8013708:	20000e18 	.word	0x20000e18

0801370c <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 801370c:	b580      	push	{r7, lr}
 801370e:	b082      	sub	sp, #8
 8013710:	af00      	add	r7, sp, #0
 8013712:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8013714:	4b17      	ldr	r3, [pc, #92]	; (8013774 <OnRxWindow1TimerEvent+0x68>)
 8013716:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 801371a:	4b16      	ldr	r3, [pc, #88]	; (8013774 <OnRxWindow1TimerEvent+0x68>)
 801371c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8013720:	4b15      	ldr	r3, [pc, #84]	; (8013778 <OnRxWindow1TimerEvent+0x6c>)
 8013722:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8013726:	b25a      	sxtb	r2, r3
 8013728:	4b12      	ldr	r3, [pc, #72]	; (8013774 <OnRxWindow1TimerEvent+0x68>)
 801372a:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801372e:	4b12      	ldr	r3, [pc, #72]	; (8013778 <OnRxWindow1TimerEvent+0x6c>)
 8013730:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8013734:	4b0f      	ldr	r3, [pc, #60]	; (8013774 <OnRxWindow1TimerEvent+0x68>)
 8013736:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801373a:	4b0f      	ldr	r3, [pc, #60]	; (8013778 <OnRxWindow1TimerEvent+0x6c>)
 801373c:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8013740:	4b0c      	ldr	r3, [pc, #48]	; (8013774 <OnRxWindow1TimerEvent+0x68>)
 8013742:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8013746:	4b0b      	ldr	r3, [pc, #44]	; (8013774 <OnRxWindow1TimerEvent+0x68>)
 8013748:	2200      	movs	r2, #0
 801374a:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 801374e:	4b09      	ldr	r3, [pc, #36]	; (8013774 <OnRxWindow1TimerEvent+0x68>)
 8013750:	2200      	movs	r2, #0
 8013752:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8013756:	4b08      	ldr	r3, [pc, #32]	; (8013778 <OnRxWindow1TimerEvent+0x6c>)
 8013758:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 801375c:	4b05      	ldr	r3, [pc, #20]	; (8013774 <OnRxWindow1TimerEvent+0x68>)
 801375e:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8013762:	4906      	ldr	r1, [pc, #24]	; (801377c <OnRxWindow1TimerEvent+0x70>)
 8013764:	4806      	ldr	r0, [pc, #24]	; (8013780 <OnRxWindow1TimerEvent+0x74>)
 8013766:	f001 fb55 	bl	8014e14 <RxWindowSetup>
}
 801376a:	bf00      	nop
 801376c:	3708      	adds	r7, #8
 801376e:	46bd      	mov	sp, r7
 8013770:	bd80      	pop	{r7, pc}
 8013772:	bf00      	nop
 8013774:	200008fc 	.word	0x200008fc
 8013778:	20000e18 	.word	0x20000e18
 801377c:	20000cb4 	.word	0x20000cb4
 8013780:	20000c7c 	.word	0x20000c7c

08013784 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8013784:	b580      	push	{r7, lr}
 8013786:	b082      	sub	sp, #8
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 801378c:	4b19      	ldr	r3, [pc, #100]	; (80137f4 <OnRxWindow2TimerEvent+0x70>)
 801378e:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8013792:	2b00      	cmp	r3, #0
 8013794:	d029      	beq.n	80137ea <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8013796:	4b17      	ldr	r3, [pc, #92]	; (80137f4 <OnRxWindow2TimerEvent+0x70>)
 8013798:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 801379c:	4b15      	ldr	r3, [pc, #84]	; (80137f4 <OnRxWindow2TimerEvent+0x70>)
 801379e:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80137a2:	4b15      	ldr	r3, [pc, #84]	; (80137f8 <OnRxWindow2TimerEvent+0x74>)
 80137a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137a6:	4a13      	ldr	r2, [pc, #76]	; (80137f4 <OnRxWindow2TimerEvent+0x70>)
 80137a8:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80137ac:	4b12      	ldr	r3, [pc, #72]	; (80137f8 <OnRxWindow2TimerEvent+0x74>)
 80137ae:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80137b2:	4b10      	ldr	r3, [pc, #64]	; (80137f4 <OnRxWindow2TimerEvent+0x70>)
 80137b4:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80137b8:	4b0f      	ldr	r3, [pc, #60]	; (80137f8 <OnRxWindow2TimerEvent+0x74>)
 80137ba:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80137be:	4b0d      	ldr	r3, [pc, #52]	; (80137f4 <OnRxWindow2TimerEvent+0x70>)
 80137c0:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 80137c4:	4b0b      	ldr	r3, [pc, #44]	; (80137f4 <OnRxWindow2TimerEvent+0x70>)
 80137c6:	2200      	movs	r2, #0
 80137c8:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80137cc:	4b09      	ldr	r3, [pc, #36]	; (80137f4 <OnRxWindow2TimerEvent+0x70>)
 80137ce:	2201      	movs	r2, #1
 80137d0:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80137d4:	4b08      	ldr	r3, [pc, #32]	; (80137f8 <OnRxWindow2TimerEvent+0x74>)
 80137d6:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80137da:	4b06      	ldr	r3, [pc, #24]	; (80137f4 <OnRxWindow2TimerEvent+0x70>)
 80137dc:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80137e0:	4906      	ldr	r1, [pc, #24]	; (80137fc <OnRxWindow2TimerEvent+0x78>)
 80137e2:	4807      	ldr	r0, [pc, #28]	; (8013800 <OnRxWindow2TimerEvent+0x7c>)
 80137e4:	f001 fb16 	bl	8014e14 <RxWindowSetup>
 80137e8:	e000      	b.n	80137ec <OnRxWindow2TimerEvent+0x68>
        return;
 80137ea:	bf00      	nop
}
 80137ec:	3708      	adds	r7, #8
 80137ee:	46bd      	mov	sp, r7
 80137f0:	bd80      	pop	{r7, pc}
 80137f2:	bf00      	nop
 80137f4:	200008fc 	.word	0x200008fc
 80137f8:	20000e18 	.word	0x20000e18
 80137fc:	20000ccc 	.word	0x20000ccc
 8013800:	20000c94 	.word	0x20000c94

08013804 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 8013804:	b580      	push	{r7, lr}
 8013806:	b082      	sub	sp, #8
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 801380c:	4808      	ldr	r0, [pc, #32]	; (8013830 <OnRetransmitTimeoutTimerEvent+0x2c>)
 801380e:	f00c f9bd 	bl	801fb8c <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 8013812:	4b08      	ldr	r3, [pc, #32]	; (8013834 <OnRetransmitTimeoutTimerEvent+0x30>)
 8013814:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8013818:	2b00      	cmp	r3, #0
 801381a:	d003      	beq.n	8013824 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 801381c:	4b05      	ldr	r3, [pc, #20]	; (8013834 <OnRetransmitTimeoutTimerEvent+0x30>)
 801381e:	2201      	movs	r2, #1
 8013820:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    }
    OnMacProcessNotify( );
 8013824:	f001 ff0e 	bl	8015644 <OnMacProcessNotify>
}
 8013828:	bf00      	nop
 801382a:	3708      	adds	r7, #8
 801382c:	46bd      	mov	sp, r7
 801382e:	bd80      	pop	{r7, pc}
 8013830:	20000cfc 	.word	0x20000cfc
 8013834:	200008fc 	.word	0x200008fc

08013838 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8013838:	b580      	push	{r7, lr}
 801383a:	b084      	sub	sp, #16
 801383c:	af00      	add	r7, sp, #0
 801383e:	60ba      	str	r2, [r7, #8]
 8013840:	607b      	str	r3, [r7, #4]
 8013842:	4603      	mov	r3, r0
 8013844:	73fb      	strb	r3, [r7, #15]
 8013846:	460b      	mov	r3, r1
 8013848:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 801384a:	68bb      	ldr	r3, [r7, #8]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d005      	beq.n	801385c <GetFCntDown+0x24>
 8013850:	69bb      	ldr	r3, [r7, #24]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d002      	beq.n	801385c <GetFCntDown+0x24>
 8013856:	69fb      	ldr	r3, [r7, #28]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d101      	bne.n	8013860 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801385c:	2309      	movs	r3, #9
 801385e:	e028      	b.n	80138b2 <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8013860:	7bfb      	ldrb	r3, [r7, #15]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d016      	beq.n	8013894 <GetFCntDown+0x5c>
 8013866:	2b01      	cmp	r3, #1
 8013868:	d118      	bne.n	801389c <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 801386a:	79bb      	ldrb	r3, [r7, #6]
 801386c:	2b01      	cmp	r3, #1
 801386e:	d10d      	bne.n	801388c <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8013870:	7bbb      	ldrb	r3, [r7, #14]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d002      	beq.n	801387c <GetFCntDown+0x44>
 8013876:	7bbb      	ldrb	r3, [r7, #14]
 8013878:	2b03      	cmp	r3, #3
 801387a:	d103      	bne.n	8013884 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 801387c:	69bb      	ldr	r3, [r7, #24]
 801387e:	2202      	movs	r2, #2
 8013880:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8013882:	e00d      	b.n	80138a0 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8013884:	69bb      	ldr	r3, [r7, #24]
 8013886:	2201      	movs	r2, #1
 8013888:	701a      	strb	r2, [r3, #0]
            break;
 801388a:	e009      	b.n	80138a0 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 801388c:	69bb      	ldr	r3, [r7, #24]
 801388e:	2203      	movs	r2, #3
 8013890:	701a      	strb	r2, [r3, #0]
            break;
 8013892:	e005      	b.n	80138a0 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8013894:	69bb      	ldr	r3, [r7, #24]
 8013896:	2204      	movs	r2, #4
 8013898:	701a      	strb	r2, [r3, #0]
            break;
 801389a:	e001      	b.n	80138a0 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 801389c:	2305      	movs	r3, #5
 801389e:	e008      	b.n	80138b2 <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 80138a0:	69bb      	ldr	r3, [r7, #24]
 80138a2:	7818      	ldrb	r0, [r3, #0]
 80138a4:	68bb      	ldr	r3, [r7, #8]
 80138a6:	89db      	ldrh	r3, [r3, #14]
 80138a8:	69fa      	ldr	r2, [r7, #28]
 80138aa:	4619      	mov	r1, r3
 80138ac:	f004 fd90 	bl	80183d0 <LoRaMacCryptoGetFCntDown>
 80138b0:	4603      	mov	r3, r0
}
 80138b2:	4618      	mov	r0, r3
 80138b4:	3710      	adds	r7, #16
 80138b6:	46bd      	mov	sp, r7
 80138b8:	bd80      	pop	{r7, pc}
	...

080138bc <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 80138bc:	b5b0      	push	{r4, r5, r7, lr}
 80138be:	b084      	sub	sp, #16
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	4603      	mov	r3, r0
 80138c4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80138c6:	2303      	movs	r3, #3
 80138c8:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 80138ca:	4b6e      	ldr	r3, [pc, #440]	; (8013a84 <SwitchClass+0x1c8>)
 80138cc:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80138d0:	2b02      	cmp	r3, #2
 80138d2:	f000 80bb 	beq.w	8013a4c <SwitchClass+0x190>
 80138d6:	2b02      	cmp	r3, #2
 80138d8:	f300 80ce 	bgt.w	8013a78 <SwitchClass+0x1bc>
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d003      	beq.n	80138e8 <SwitchClass+0x2c>
 80138e0:	2b01      	cmp	r3, #1
 80138e2:	f000 80a5 	beq.w	8013a30 <SwitchClass+0x174>
 80138e6:	e0c7      	b.n	8013a78 <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 80138e8:	79fb      	ldrb	r3, [r7, #7]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d109      	bne.n	8013902 <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80138ee:	4b65      	ldr	r3, [pc, #404]	; (8013a84 <SwitchClass+0x1c8>)
 80138f0:	4a64      	ldr	r2, [pc, #400]	; (8013a84 <SwitchClass+0x1c8>)
 80138f2:	3374      	adds	r3, #116	; 0x74
 80138f4:	326c      	adds	r2, #108	; 0x6c
 80138f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80138fa:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 80138fe:	2300      	movs	r3, #0
 8013900:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 8013902:	79fb      	ldrb	r3, [r7, #7]
 8013904:	2b01      	cmp	r3, #1
 8013906:	d10c      	bne.n	8013922 <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8013908:	79fb      	ldrb	r3, [r7, #7]
 801390a:	4618      	mov	r0, r3
 801390c:	f003 fc7e 	bl	801720c <LoRaMacClassBSwitchClass>
 8013910:	4603      	mov	r3, r0
 8013912:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8013914:	7bfb      	ldrb	r3, [r7, #15]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d103      	bne.n	8013922 <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 801391a:	4a5a      	ldr	r2, [pc, #360]	; (8013a84 <SwitchClass+0x1c8>)
 801391c:	79fb      	ldrb	r3, [r7, #7]
 801391e:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
                }
            }

            if( deviceClass == CLASS_C )
 8013922:	79fb      	ldrb	r3, [r7, #7]
 8013924:	2b02      	cmp	r3, #2
 8013926:	f040 80a2 	bne.w	8013a6e <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 801392a:	4a56      	ldr	r2, [pc, #344]	; (8013a84 <SwitchClass+0x1c8>)
 801392c:	79fb      	ldrb	r3, [r7, #7]
 801392e:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8013932:	4a55      	ldr	r2, [pc, #340]	; (8013a88 <SwitchClass+0x1cc>)
 8013934:	4b54      	ldr	r3, [pc, #336]	; (8013a88 <SwitchClass+0x1cc>)
 8013936:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 801393a:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 801393e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013942:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013946:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801394a:	4b4f      	ldr	r3, [pc, #316]	; (8013a88 <SwitchClass+0x1cc>)
 801394c:	2202      	movs	r2, #2
 801394e:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013952:	2300      	movs	r3, #0
 8013954:	73bb      	strb	r3, [r7, #14]
 8013956:	e05b      	b.n	8013a10 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8013958:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801395c:	4949      	ldr	r1, [pc, #292]	; (8013a84 <SwitchClass+0x1c8>)
 801395e:	4613      	mov	r3, r2
 8013960:	005b      	lsls	r3, r3, #1
 8013962:	4413      	add	r3, r2
 8013964:	011b      	lsls	r3, r3, #4
 8013966:	440b      	add	r3, r1
 8013968:	33e9      	adds	r3, #233	; 0xe9
 801396a:	781b      	ldrb	r3, [r3, #0]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d049      	beq.n	8013a04 <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 8013970:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8013974:	4943      	ldr	r1, [pc, #268]	; (8013a84 <SwitchClass+0x1c8>)
 8013976:	4613      	mov	r3, r2
 8013978:	005b      	lsls	r3, r3, #1
 801397a:	4413      	add	r3, r2
 801397c:	011b      	lsls	r3, r3, #4
 801397e:	440b      	add	r3, r1
 8013980:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013984:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8013986:	2b02      	cmp	r3, #2
 8013988:	d13c      	bne.n	8013a04 <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 801398a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801398e:	493d      	ldr	r1, [pc, #244]	; (8013a84 <SwitchClass+0x1c8>)
 8013990:	4613      	mov	r3, r2
 8013992:	005b      	lsls	r3, r3, #1
 8013994:	4413      	add	r3, r2
 8013996:	011b      	lsls	r3, r3, #4
 8013998:	440b      	add	r3, r1
 801399a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	4a38      	ldr	r2, [pc, #224]	; (8013a84 <SwitchClass+0x1c8>)
 80139a2:	6753      	str	r3, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 80139a4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80139a8:	4936      	ldr	r1, [pc, #216]	; (8013a84 <SwitchClass+0x1c8>)
 80139aa:	4613      	mov	r3, r2
 80139ac:	005b      	lsls	r3, r3, #1
 80139ae:	4413      	add	r3, r2
 80139b0:	011b      	lsls	r3, r3, #4
 80139b2:	440b      	add	r3, r1
 80139b4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80139b8:	f993 3000 	ldrsb.w	r3, [r3]
 80139bc:	b2da      	uxtb	r2, r3
 80139be:	4b31      	ldr	r3, [pc, #196]	; (8013a84 <SwitchClass+0x1c8>)
 80139c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80139c4:	4b30      	ldr	r3, [pc, #192]	; (8013a88 <SwitchClass+0x1cc>)
 80139c6:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 80139ca:	4b2f      	ldr	r3, [pc, #188]	; (8013a88 <SwitchClass+0x1cc>)
 80139cc:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80139d0:	4b2c      	ldr	r3, [pc, #176]	; (8013a84 <SwitchClass+0x1c8>)
 80139d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80139d4:	4a2c      	ldr	r2, [pc, #176]	; (8013a88 <SwitchClass+0x1cc>)
 80139d6:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80139da:	4b2a      	ldr	r3, [pc, #168]	; (8013a84 <SwitchClass+0x1c8>)
 80139dc:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80139e0:	4b29      	ldr	r3, [pc, #164]	; (8013a88 <SwitchClass+0x1cc>)
 80139e2:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80139e6:	4b27      	ldr	r3, [pc, #156]	; (8013a84 <SwitchClass+0x1c8>)
 80139e8:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80139ec:	4b26      	ldr	r3, [pc, #152]	; (8013a88 <SwitchClass+0x1cc>)
 80139ee:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80139f2:	4b25      	ldr	r3, [pc, #148]	; (8013a88 <SwitchClass+0x1cc>)
 80139f4:	2203      	movs	r2, #3
 80139f6:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 80139fa:	4b23      	ldr	r3, [pc, #140]	; (8013a88 <SwitchClass+0x1cc>)
 80139fc:	2201      	movs	r2, #1
 80139fe:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 8013a02:	e009      	b.n	8013a18 <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013a04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013a08:	b2db      	uxtb	r3, r3
 8013a0a:	3301      	adds	r3, #1
 8013a0c:	b2db      	uxtb	r3, r3
 8013a0e:	73bb      	strb	r3, [r7, #14]
 8013a10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	dd9f      	ble.n	8013958 <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8013a18:	4b1b      	ldr	r3, [pc, #108]	; (8013a88 <SwitchClass+0x1cc>)
 8013a1a:	2200      	movs	r2, #0
 8013a1c:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8013a20:	4b1a      	ldr	r3, [pc, #104]	; (8013a8c <SwitchClass+0x1d0>)
 8013a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a24:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 8013a26:	f001 fa29 	bl	8014e7c <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8013a2e:	e01e      	b.n	8013a6e <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8013a30:	79fb      	ldrb	r3, [r7, #7]
 8013a32:	4618      	mov	r0, r3
 8013a34:	f003 fbea 	bl	801720c <LoRaMacClassBSwitchClass>
 8013a38:	4603      	mov	r3, r0
 8013a3a:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8013a3c:	7bfb      	ldrb	r3, [r7, #15]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d117      	bne.n	8013a72 <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8013a42:	4a10      	ldr	r2, [pc, #64]	; (8013a84 <SwitchClass+0x1c8>)
 8013a44:	79fb      	ldrb	r3, [r7, #7]
 8013a46:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            }
            break;
 8013a4a:	e012      	b.n	8013a72 <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8013a4c:	79fb      	ldrb	r3, [r7, #7]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d111      	bne.n	8013a76 <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 8013a52:	4b0d      	ldr	r3, [pc, #52]	; (8013a88 <SwitchClass+0x1cc>)
 8013a54:	2206      	movs	r2, #6
 8013a56:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 8013a5a:	4a0a      	ldr	r2, [pc, #40]	; (8013a84 <SwitchClass+0x1c8>)
 8013a5c:	79fb      	ldrb	r3, [r7, #7]
 8013a5e:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8013a62:	4b0a      	ldr	r3, [pc, #40]	; (8013a8c <SwitchClass+0x1d0>)
 8013a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a66:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8013a68:	2300      	movs	r3, #0
 8013a6a:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 8013a6c:	e003      	b.n	8013a76 <SwitchClass+0x1ba>
            break;
 8013a6e:	bf00      	nop
 8013a70:	e002      	b.n	8013a78 <SwitchClass+0x1bc>
            break;
 8013a72:	bf00      	nop
 8013a74:	e000      	b.n	8013a78 <SwitchClass+0x1bc>
            break;
 8013a76:	bf00      	nop
        }
    }

    return status;
 8013a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	3710      	adds	r7, #16
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bdb0      	pop	{r4, r5, r7, pc}
 8013a82:	bf00      	nop
 8013a84:	20000e18 	.word	0x20000e18
 8013a88:	200008fc 	.word	0x200008fc
 8013a8c:	08021dfc 	.word	0x08021dfc

08013a90 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b086      	sub	sp, #24
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	4603      	mov	r3, r0
 8013a98:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013a9a:	4b10      	ldr	r3, [pc, #64]	; (8013adc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8013a9c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8013aa0:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8013aa2:	79fb      	ldrb	r3, [r7, #7]
 8013aa4:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8013aa6:	230d      	movs	r3, #13
 8013aa8:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8013aaa:	4b0c      	ldr	r3, [pc, #48]	; (8013adc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8013aac:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d001      	beq.n	8013ab8 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8013ab4:	230e      	movs	r3, #14
 8013ab6:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013ab8:	4b08      	ldr	r3, [pc, #32]	; (8013adc <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8013aba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013abe:	f107 0210 	add.w	r2, r7, #16
 8013ac2:	4611      	mov	r1, r2
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	f005 faee 	bl	80190a6 <RegionGetPhyParam>
 8013aca:	4603      	mov	r3, r0
 8013acc:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	b2db      	uxtb	r3, r3
}
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	3718      	adds	r7, #24
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	bd80      	pop	{r7, pc}
 8013ada:	bf00      	nop
 8013adc:	20000e18 	.word	0x20000e18

08013ae0 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8013ae0:	b580      	push	{r7, lr}
 8013ae2:	b084      	sub	sp, #16
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	4603      	mov	r3, r0
 8013ae8:	71fb      	strb	r3, [r7, #7]
 8013aea:	460b      	mov	r3, r1
 8013aec:	71bb      	strb	r3, [r7, #6]
 8013aee:	4613      	mov	r3, r2
 8013af0:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8013af2:	2300      	movs	r3, #0
 8013af4:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 8013af6:	2300      	movs	r3, #0
 8013af8:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8013afa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013afe:	4618      	mov	r0, r3
 8013b00:	f7ff ffc6 	bl	8013a90 <GetMaxAppPayloadWithoutFOptsLength>
 8013b04:	4603      	mov	r3, r0
 8013b06:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8013b08:	79fb      	ldrb	r3, [r7, #7]
 8013b0a:	b29a      	uxth	r2, r3
 8013b0c:	797b      	ldrb	r3, [r7, #5]
 8013b0e:	b29b      	uxth	r3, r3
 8013b10:	4413      	add	r3, r2
 8013b12:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8013b14:	89ba      	ldrh	r2, [r7, #12]
 8013b16:	89fb      	ldrh	r3, [r7, #14]
 8013b18:	429a      	cmp	r2, r3
 8013b1a:	d804      	bhi.n	8013b26 <ValidatePayloadLength+0x46>
 8013b1c:	89bb      	ldrh	r3, [r7, #12]
 8013b1e:	2bff      	cmp	r3, #255	; 0xff
 8013b20:	d801      	bhi.n	8013b26 <ValidatePayloadLength+0x46>
    {
        return true;
 8013b22:	2301      	movs	r3, #1
 8013b24:	e000      	b.n	8013b28 <ValidatePayloadLength+0x48>
    }
    return false;
 8013b26:	2300      	movs	r3, #0
}
 8013b28:	4618      	mov	r0, r3
 8013b2a:	3710      	adds	r7, #16
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	bd80      	pop	{r7, pc}

08013b30 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8013b30:	b590      	push	{r4, r7, lr}
 8013b32:	b0a5      	sub	sp, #148	; 0x94
 8013b34:	af02      	add	r7, sp, #8
 8013b36:	6078      	str	r0, [r7, #4]
 8013b38:	4608      	mov	r0, r1
 8013b3a:	4611      	mov	r1, r2
 8013b3c:	461a      	mov	r2, r3
 8013b3e:	4603      	mov	r3, r0
 8013b40:	70fb      	strb	r3, [r7, #3]
 8013b42:	460b      	mov	r3, r1
 8013b44:	70bb      	strb	r3, [r7, #2]
 8013b46:	4613      	mov	r3, r2
 8013b48:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 8013b4a:	2300      	movs	r3, #0
 8013b4c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 8013b50:	2300      	movs	r3, #0
 8013b52:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8013b56:	2300      	movs	r3, #0
 8013b58:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8013b5c:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	f000 84ab 	beq.w	80144bc <ProcessMacCommands+0x98c>
 8013b66:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8013b6a:	2b01      	cmp	r3, #1
 8013b6c:	f040 84ac 	bne.w	80144c8 <ProcessMacCommands+0x998>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8013b70:	f000 bca4 	b.w	80144bc <ProcessMacCommands+0x98c>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8013b74:	78fb      	ldrb	r3, [r7, #3]
 8013b76:	687a      	ldr	r2, [r7, #4]
 8013b78:	4413      	add	r3, r2
 8013b7a:	781b      	ldrb	r3, [r3, #0]
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	f003 fe45 	bl	801780c <LoRaMacCommandsGetCmdSize>
 8013b82:	4603      	mov	r3, r0
 8013b84:	461a      	mov	r2, r3
 8013b86:	78fb      	ldrb	r3, [r7, #3]
 8013b88:	441a      	add	r2, r3
 8013b8a:	78bb      	ldrb	r3, [r7, #2]
 8013b8c:	429a      	cmp	r2, r3
 8013b8e:	f300 849d 	bgt.w	80144cc <ProcessMacCommands+0x99c>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8013b92:	78fb      	ldrb	r3, [r7, #3]
 8013b94:	1c5a      	adds	r2, r3, #1
 8013b96:	70fa      	strb	r2, [r7, #3]
 8013b98:	461a      	mov	r2, r3
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	4413      	add	r3, r2
 8013b9e:	781b      	ldrb	r3, [r3, #0]
 8013ba0:	3b02      	subs	r3, #2
 8013ba2:	2b11      	cmp	r3, #17
 8013ba4:	f200 8494 	bhi.w	80144d0 <ProcessMacCommands+0x9a0>
 8013ba8:	a201      	add	r2, pc, #4	; (adr r2, 8013bb0 <ProcessMacCommands+0x80>)
 8013baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bae:	bf00      	nop
 8013bb0:	08013bf9 	.word	0x08013bf9
 8013bb4:	08013c3b 	.word	0x08013c3b
 8013bb8:	08013db7 	.word	0x08013db7
 8013bbc:	08013df5 	.word	0x08013df5
 8013bc0:	08013eed 	.word	0x08013eed
 8013bc4:	08013f3d 	.word	0x08013f3d
 8013bc8:	08013ff9 	.word	0x08013ff9
 8013bcc:	0801404f 	.word	0x0801404f
 8013bd0:	08014135 	.word	0x08014135
 8013bd4:	080144d1 	.word	0x080144d1
 8013bd8:	080144d1 	.word	0x080144d1
 8013bdc:	080141dd 	.word	0x080141dd
 8013be0:	080144d1 	.word	0x080144d1
 8013be4:	080144d1 	.word	0x080144d1
 8013be8:	080142fd 	.word	0x080142fd
 8013bec:	08014331 	.word	0x08014331
 8013bf0:	080143c1 	.word	0x080143c1
 8013bf4:	08014437 	.word	0x08014437
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8013bf8:	2005      	movs	r0, #5
 8013bfa:	f003 ffdf 	bl	8017bbc <LoRaMacConfirmQueueIsCmdActive>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	f000 845b 	beq.w	80144bc <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8013c06:	2105      	movs	r1, #5
 8013c08:	2000      	movs	r0, #0
 8013c0a:	f003 ff4b 	bl	8017aa4 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8013c0e:	78fb      	ldrb	r3, [r7, #3]
 8013c10:	1c5a      	adds	r2, r3, #1
 8013c12:	70fa      	strb	r2, [r7, #3]
 8013c14:	461a      	mov	r2, r3
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	4413      	add	r3, r2
 8013c1a:	781a      	ldrb	r2, [r3, #0]
 8013c1c:	4bb0      	ldr	r3, [pc, #704]	; (8013ee0 <ProcessMacCommands+0x3b0>)
 8013c1e:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8013c22:	78fb      	ldrb	r3, [r7, #3]
 8013c24:	1c5a      	adds	r2, r3, #1
 8013c26:	70fa      	strb	r2, [r7, #3]
 8013c28:	461a      	mov	r2, r3
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	4413      	add	r3, r2
 8013c2e:	781a      	ldrb	r2, [r3, #0]
 8013c30:	4bab      	ldr	r3, [pc, #684]	; (8013ee0 <ProcessMacCommands+0x3b0>)
 8013c32:	f883 245d 	strb.w	r2, [r3, #1117]	; 0x45d
                }
                break;
 8013c36:	f000 bc41 	b.w	80144bc <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8013c40:	2300      	movs	r3, #0
 8013c42:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 8013c46:	2300      	movs	r3, #0
 8013c48:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 8013c52:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8013c56:	f083 0301 	eor.w	r3, r3, #1
 8013c5a:	b2db      	uxtb	r3, r3
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	f000 80a5 	beq.w	8013dac <ProcessMacCommands+0x27c>
                {
                    adrBlockFound = true;
 8013c62:	2301      	movs	r3, #1
 8013c64:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8013c68:	78fb      	ldrb	r3, [r7, #3]
 8013c6a:	3b01      	subs	r3, #1
 8013c6c:	687a      	ldr	r2, [r7, #4]
 8013c6e:	4413      	add	r3, r2
 8013c70:	65fb      	str	r3, [r7, #92]	; 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8013c72:	4b9c      	ldr	r3, [pc, #624]	; (8013ee4 <ProcessMacCommands+0x3b4>)
 8013c74:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8013c78:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013c7c:	4b99      	ldr	r3, [pc, #612]	; (8013ee4 <ProcessMacCommands+0x3b4>)
 8013c7e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8013c82:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8013c86:	4b97      	ldr	r3, [pc, #604]	; (8013ee4 <ProcessMacCommands+0x3b4>)
 8013c88:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013c8c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013c90:	4b94      	ldr	r3, [pc, #592]	; (8013ee4 <ProcessMacCommands+0x3b4>)
 8013c92:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013c96:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8013c9a:	4b92      	ldr	r3, [pc, #584]	; (8013ee4 <ProcessMacCommands+0x3b4>)
 8013c9c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8013ca0:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 8013ca4:	4b8f      	ldr	r3, [pc, #572]	; (8013ee4 <ProcessMacCommands+0x3b4>)
 8013ca6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8013caa:	65bb      	str	r3, [r7, #88]	; 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8013cac:	4b8d      	ldr	r3, [pc, #564]	; (8013ee4 <ProcessMacCommands+0x3b4>)
 8013cae:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d008      	beq.n	8013cc8 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8013cb6:	78ba      	ldrb	r2, [r7, #2]
 8013cb8:	78fb      	ldrb	r3, [r7, #3]
 8013cba:	1ad3      	subs	r3, r2, r3
 8013cbc:	b2db      	uxtb	r3, r3
 8013cbe:	3301      	adds	r3, #1
 8013cc0:	b2db      	uxtb	r3, r3
 8013cc2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 8013cc6:	e002      	b.n	8013cce <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 8013cc8:	2305      	movs	r3, #5
 8013cca:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8013cce:	4b85      	ldr	r3, [pc, #532]	; (8013ee4 <ProcessMacCommands+0x3b4>)
 8013cd0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8013cd4:	f107 0456 	add.w	r4, r7, #86	; 0x56
 8013cd8:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8013cdc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8013ce0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013ce4:	9301      	str	r3, [sp, #4]
 8013ce6:	f107 0355 	add.w	r3, r7, #85	; 0x55
 8013cea:	9300      	str	r3, [sp, #0]
 8013cec:	4623      	mov	r3, r4
 8013cee:	f005 fa97 	bl	8019220 <RegionLinkAdrReq>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 8013cf8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8013cfc:	f003 0307 	and.w	r3, r3, #7
 8013d00:	2b07      	cmp	r3, #7
 8013d02:	d119      	bne.n	8013d38 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8013d04:	4b77      	ldr	r3, [pc, #476]	; (8013ee4 <ProcessMacCommands+0x3b4>)
 8013d06:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8013d0a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8013d0e:	429a      	cmp	r2, r3
 8013d10:	da03      	bge.n	8013d1a <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8013d12:	4b74      	ldr	r3, [pc, #464]	; (8013ee4 <ProcessMacCommands+0x3b4>)
 8013d14:	2201      	movs	r2, #1
 8013d16:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8013d1a:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 8013d1e:	4b71      	ldr	r3, [pc, #452]	; (8013ee4 <ProcessMacCommands+0x3b4>)
 8013d20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8013d24:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 8013d28:	4b6e      	ldr	r3, [pc, #440]	; (8013ee4 <ProcessMacCommands+0x3b4>)
 8013d2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8013d2e:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8013d32:	4b6c      	ldr	r3, [pc, #432]	; (8013ee4 <ProcessMacCommands+0x3b4>)
 8013d34:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8013d38:	2300      	movs	r3, #0
 8013d3a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8013d3e:	e00b      	b.n	8013d58 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8013d40:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 8013d44:	2201      	movs	r2, #1
 8013d46:	4619      	mov	r1, r3
 8013d48:	2003      	movs	r0, #3
 8013d4a:	f003 fbff 	bl	801754c <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8013d4e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8013d52:	3301      	adds	r3, #1
 8013d54:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8013d58:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8013d5c:	4a62      	ldr	r2, [pc, #392]	; (8013ee8 <ProcessMacCommands+0x3b8>)
 8013d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8013d62:	089b      	lsrs	r3, r3, #2
 8013d64:	b2db      	uxtb	r3, r3
 8013d66:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8013d6a:	429a      	cmp	r2, r3
 8013d6c:	d3e8      	bcc.n	8013d40 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 8013d6e:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8013d72:	78fb      	ldrb	r3, [r7, #3]
 8013d74:	4413      	add	r3, r2
 8013d76:	b2db      	uxtb	r3, r3
 8013d78:	3b01      	subs	r3, #1
 8013d7a:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 8013d7c:	78fa      	ldrb	r2, [r7, #3]
 8013d7e:	78bb      	ldrb	r3, [r7, #2]
 8013d80:	429a      	cmp	r2, r3
 8013d82:	d20a      	bcs.n	8013d9a <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8013d84:	78fb      	ldrb	r3, [r7, #3]
 8013d86:	1c5a      	adds	r2, r3, #1
 8013d88:	70fa      	strb	r2, [r7, #3]
 8013d8a:	461a      	mov	r2, r3
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	4413      	add	r3, r2
 8013d90:	781b      	ldrb	r3, [r3, #0]
 8013d92:	2b03      	cmp	r3, #3
 8013d94:	f43f af68 	beq.w	8013c68 <ProcessMacCommands+0x138>
 8013d98:	e000      	b.n	8013d9c <ProcessMacCommands+0x26c>
                            break;
 8013d9a:	bf00      	nop

                    if( macIndex < commandsSize )
 8013d9c:	78fa      	ldrb	r2, [r7, #3]
 8013d9e:	78bb      	ldrb	r3, [r7, #2]
 8013da0:	429a      	cmp	r2, r3
 8013da2:	d206      	bcs.n	8013db2 <ProcessMacCommands+0x282>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 8013da4:	78fb      	ldrb	r3, [r7, #3]
 8013da6:	3b01      	subs	r3, #1
 8013da8:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 8013daa:	e002      	b.n	8013db2 <ProcessMacCommands+0x282>
                    macIndex += 4;
 8013dac:	78fb      	ldrb	r3, [r7, #3]
 8013dae:	3304      	adds	r3, #4
 8013db0:	70fb      	strb	r3, [r7, #3]
                break;
 8013db2:	bf00      	nop
 8013db4:	e382      	b.n	80144bc <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8013db6:	78fb      	ldrb	r3, [r7, #3]
 8013db8:	1c5a      	adds	r2, r3, #1
 8013dba:	70fa      	strb	r2, [r7, #3]
 8013dbc:	461a      	mov	r2, r3
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	4413      	add	r3, r2
 8013dc2:	781b      	ldrb	r3, [r3, #0]
 8013dc4:	f003 030f 	and.w	r3, r3, #15
 8013dc8:	b2da      	uxtb	r2, r3
 8013dca:	4b46      	ldr	r3, [pc, #280]	; (8013ee4 <ProcessMacCommands+0x3b4>)
 8013dcc:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8013dd0:	4b44      	ldr	r3, [pc, #272]	; (8013ee4 <ProcessMacCommands+0x3b4>)
 8013dd2:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8013dd6:	461a      	mov	r2, r3
 8013dd8:	2301      	movs	r3, #1
 8013dda:	4093      	lsls	r3, r2
 8013ddc:	b29a      	uxth	r2, r3
 8013dde:	4b41      	ldr	r3, [pc, #260]	; (8013ee4 <ProcessMacCommands+0x3b4>)
 8013de0:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8013de4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013de8:	2200      	movs	r2, #0
 8013dea:	4619      	mov	r1, r3
 8013dec:	2004      	movs	r0, #4
 8013dee:	f003 fbad 	bl	801754c <LoRaMacCommandsAddCmd>
                break;
 8013df2:	e363      	b.n	80144bc <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8013df4:	2307      	movs	r3, #7
 8013df6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8013dfa:	78fb      	ldrb	r3, [r7, #3]
 8013dfc:	687a      	ldr	r2, [r7, #4]
 8013dfe:	4413      	add	r3, r2
 8013e00:	781b      	ldrb	r3, [r3, #0]
 8013e02:	091b      	lsrs	r3, r3, #4
 8013e04:	b2db      	uxtb	r3, r3
 8013e06:	b25b      	sxtb	r3, r3
 8013e08:	f003 0307 	and.w	r3, r3, #7
 8013e0c:	b25b      	sxtb	r3, r3
 8013e0e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8013e12:	78fb      	ldrb	r3, [r7, #3]
 8013e14:	687a      	ldr	r2, [r7, #4]
 8013e16:	4413      	add	r3, r2
 8013e18:	781b      	ldrb	r3, [r3, #0]
 8013e1a:	b25b      	sxtb	r3, r3
 8013e1c:	f003 030f 	and.w	r3, r3, #15
 8013e20:	b25b      	sxtb	r3, r3
 8013e22:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 8013e26:	78fb      	ldrb	r3, [r7, #3]
 8013e28:	3301      	adds	r3, #1
 8013e2a:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8013e2c:	78fb      	ldrb	r3, [r7, #3]
 8013e2e:	1c5a      	adds	r2, r3, #1
 8013e30:	70fa      	strb	r2, [r7, #3]
 8013e32:	461a      	mov	r2, r3
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	4413      	add	r3, r2
 8013e38:	781b      	ldrb	r3, [r3, #0]
 8013e3a:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8013e3c:	78fb      	ldrb	r3, [r7, #3]
 8013e3e:	1c5a      	adds	r2, r3, #1
 8013e40:	70fa      	strb	r2, [r7, #3]
 8013e42:	461a      	mov	r2, r3
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	4413      	add	r3, r2
 8013e48:	781b      	ldrb	r3, [r3, #0]
 8013e4a:	021a      	lsls	r2, r3, #8
 8013e4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e4e:	4313      	orrs	r3, r2
 8013e50:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8013e52:	78fb      	ldrb	r3, [r7, #3]
 8013e54:	1c5a      	adds	r2, r3, #1
 8013e56:	70fa      	strb	r2, [r7, #3]
 8013e58:	461a      	mov	r2, r3
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	4413      	add	r3, r2
 8013e5e:	781b      	ldrb	r3, [r3, #0]
 8013e60:	041a      	lsls	r2, r3, #16
 8013e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e64:	4313      	orrs	r3, r2
 8013e66:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 8013e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e6a:	2264      	movs	r2, #100	; 0x64
 8013e6c:	fb02 f303 	mul.w	r3, r2, r3
 8013e70:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8013e72:	4b1c      	ldr	r3, [pc, #112]	; (8013ee4 <ProcessMacCommands+0x3b4>)
 8013e74:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013e78:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8013e7c:	4611      	mov	r1, r2
 8013e7e:	4618      	mov	r0, r3
 8013e80:	f005 f9e8 	bl	8019254 <RegionRxParamSetupReq>
 8013e84:	4603      	mov	r3, r0
 8013e86:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8013e8a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8013e8e:	f003 0307 	and.w	r3, r3, #7
 8013e92:	2b07      	cmp	r3, #7
 8013e94:	d117      	bne.n	8013ec6 <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8013e96:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8013e9a:	b2da      	uxtb	r2, r3
 8013e9c:	4b11      	ldr	r3, [pc, #68]	; (8013ee4 <ProcessMacCommands+0x3b4>)
 8013e9e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8013ea2:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8013ea6:	b2da      	uxtb	r2, r3
 8013ea8:	4b0e      	ldr	r3, [pc, #56]	; (8013ee4 <ProcessMacCommands+0x3b4>)
 8013eaa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8013eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013eb0:	4a0c      	ldr	r2, [pc, #48]	; (8013ee4 <ProcessMacCommands+0x3b4>)
 8013eb2:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8013eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013eb6:	4a0b      	ldr	r2, [pc, #44]	; (8013ee4 <ProcessMacCommands+0x3b4>)
 8013eb8:	6753      	str	r3, [r2, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8013eba:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8013ebe:	b2da      	uxtb	r2, r3
 8013ec0:	4b08      	ldr	r3, [pc, #32]	; (8013ee4 <ProcessMacCommands+0x3b4>)
 8013ec2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                }
                macCmdPayload[0] = status;
 8013ec6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8013eca:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8013ece:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013ed2:	2201      	movs	r2, #1
 8013ed4:	4619      	mov	r1, r3
 8013ed6:	2005      	movs	r0, #5
 8013ed8:	f003 fb38 	bl	801754c <LoRaMacCommandsAddCmd>
                break;
 8013edc:	bf00      	nop
 8013ede:	e2ed      	b.n	80144bc <ProcessMacCommands+0x98c>
 8013ee0:	200008fc 	.word	0x200008fc
 8013ee4:	20000e18 	.word	0x20000e18
 8013ee8:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8013eec:	23ff      	movs	r3, #255	; 0xff
 8013eee:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8013ef2:	4bb7      	ldr	r3, [pc, #732]	; (80141d0 <ProcessMacCommands+0x6a0>)
 8013ef4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d00d      	beq.n	8013f18 <ProcessMacCommands+0x3e8>
 8013efc:	4bb4      	ldr	r3, [pc, #720]	; (80141d0 <ProcessMacCommands+0x6a0>)
 8013efe:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d007      	beq.n	8013f18 <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8013f08:	4bb1      	ldr	r3, [pc, #708]	; (80141d0 <ProcessMacCommands+0x6a0>)
 8013f0a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	4798      	blx	r3
 8013f12:	4603      	mov	r3, r0
 8013f14:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8013f18:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8013f1c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8013f20:	787b      	ldrb	r3, [r7, #1]
 8013f22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013f26:	b2db      	uxtb	r3, r3
 8013f28:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8013f2c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013f30:	2202      	movs	r2, #2
 8013f32:	4619      	mov	r1, r3
 8013f34:	2006      	movs	r0, #6
 8013f36:	f003 fb09 	bl	801754c <LoRaMacCommandsAddCmd>
                break;
 8013f3a:	e2bf      	b.n	80144bc <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8013f3c:	2303      	movs	r3, #3
 8013f3e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8013f42:	78fb      	ldrb	r3, [r7, #3]
 8013f44:	1c5a      	adds	r2, r3, #1
 8013f46:	70fa      	strb	r2, [r7, #3]
 8013f48:	461a      	mov	r2, r3
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	4413      	add	r3, r2
 8013f4e:	781b      	ldrb	r3, [r3, #0]
 8013f50:	b25b      	sxtb	r3, r3
 8013f52:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 8013f56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013f5a:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8013f5c:	78fb      	ldrb	r3, [r7, #3]
 8013f5e:	1c5a      	adds	r2, r3, #1
 8013f60:	70fa      	strb	r2, [r7, #3]
 8013f62:	461a      	mov	r2, r3
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	4413      	add	r3, r2
 8013f68:	781b      	ldrb	r3, [r3, #0]
 8013f6a:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8013f6c:	78fb      	ldrb	r3, [r7, #3]
 8013f6e:	1c5a      	adds	r2, r3, #1
 8013f70:	70fa      	strb	r2, [r7, #3]
 8013f72:	461a      	mov	r2, r3
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	4413      	add	r3, r2
 8013f78:	781b      	ldrb	r3, [r3, #0]
 8013f7a:	021a      	lsls	r2, r3, #8
 8013f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f7e:	4313      	orrs	r3, r2
 8013f80:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8013f82:	78fb      	ldrb	r3, [r7, #3]
 8013f84:	1c5a      	adds	r2, r3, #1
 8013f86:	70fa      	strb	r2, [r7, #3]
 8013f88:	461a      	mov	r2, r3
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	4413      	add	r3, r2
 8013f8e:	781b      	ldrb	r3, [r3, #0]
 8013f90:	041a      	lsls	r2, r3, #16
 8013f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f94:	4313      	orrs	r3, r2
 8013f96:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 8013f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f9a:	2264      	movs	r2, #100	; 0x64
 8013f9c:	fb02 f303 	mul.w	r3, r2, r3
 8013fa0:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 8013fa6:	78fb      	ldrb	r3, [r7, #3]
 8013fa8:	1c5a      	adds	r2, r3, #1
 8013faa:	70fa      	strb	r2, [r7, #3]
 8013fac:	461a      	mov	r2, r3
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	4413      	add	r3, r2
 8013fb2:	781b      	ldrb	r3, [r3, #0]
 8013fb4:	b25b      	sxtb	r3, r3
 8013fb6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8013fba:	4b86      	ldr	r3, [pc, #536]	; (80141d4 <ProcessMacCommands+0x6a4>)
 8013fbc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013fc0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8013fc4:	4611      	mov	r1, r2
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	f005 f957 	bl	801927a <RegionNewChannelReq>
 8013fcc:	4603      	mov	r3, r0
 8013fce:	b2db      	uxtb	r3, r3
 8013fd0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8013fd4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8013fd8:	b25b      	sxtb	r3, r3
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	db0a      	blt.n	8013ff4 <ProcessMacCommands+0x4c4>
                {
                    macCmdPayload[0] = status;
 8013fde:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8013fe2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8013fe6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013fea:	2201      	movs	r2, #1
 8013fec:	4619      	mov	r1, r3
 8013fee:	2007      	movs	r0, #7
 8013ff0:	f003 faac 	bl	801754c <LoRaMacCommandsAddCmd>
                }
                break;
 8013ff4:	bf00      	nop
 8013ff6:	e261      	b.n	80144bc <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8013ff8:	78fb      	ldrb	r3, [r7, #3]
 8013ffa:	1c5a      	adds	r2, r3, #1
 8013ffc:	70fa      	strb	r2, [r7, #3]
 8013ffe:	461a      	mov	r2, r3
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	4413      	add	r3, r2
 8014004:	781b      	ldrb	r3, [r3, #0]
 8014006:	f003 030f 	and.w	r3, r3, #15
 801400a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 801400e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8014012:	2b00      	cmp	r3, #0
 8014014:	d104      	bne.n	8014020 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 8014016:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801401a:	3301      	adds	r3, #1
 801401c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8014020:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8014024:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014028:	fb02 f303 	mul.w	r3, r2, r3
 801402c:	461a      	mov	r2, r3
 801402e:	4b69      	ldr	r3, [pc, #420]	; (80141d4 <ProcessMacCommands+0x6a4>)
 8014030:	659a      	str	r2, [r3, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8014032:	4b68      	ldr	r3, [pc, #416]	; (80141d4 <ProcessMacCommands+0x6a4>)
 8014034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014036:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801403a:	4a66      	ldr	r2, [pc, #408]	; (80141d4 <ProcessMacCommands+0x6a4>)
 801403c:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 801403e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8014042:	2200      	movs	r2, #0
 8014044:	4619      	mov	r1, r3
 8014046:	2008      	movs	r0, #8
 8014048:	f003 fa80 	bl	801754c <LoRaMacCommandsAddCmd>
                break;
 801404c:	e236      	b.n	80144bc <ProcessMacCommands+0x98c>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 801404e:	78fb      	ldrb	r3, [r7, #3]
 8014050:	1c5a      	adds	r2, r3, #1
 8014052:	70fa      	strb	r2, [r7, #3]
 8014054:	461a      	mov	r2, r3
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	4413      	add	r3, r2
 801405a:	781b      	ldrb	r3, [r3, #0]
 801405c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8014060:	2300      	movs	r3, #0
 8014062:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8014066:	2300      	movs	r3, #0
 8014068:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 801406c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8014070:	f003 0320 	and.w	r3, r3, #32
 8014074:	2b00      	cmp	r3, #0
 8014076:	d002      	beq.n	801407e <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8014078:	2301      	movs	r3, #1
 801407a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 801407e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8014082:	f003 0310 	and.w	r3, r3, #16
 8014086:	2b00      	cmp	r3, #0
 8014088:	d002      	beq.n	8014090 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 801408a:	2301      	movs	r3, #1
 801408c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8014090:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8014094:	f003 030f 	and.w	r3, r3, #15
 8014098:	b2db      	uxtb	r3, r3
 801409a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 801409e:	4b4d      	ldr	r3, [pc, #308]	; (80141d4 <ProcessMacCommands+0x6a4>)
 80140a0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80140a4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80140a8:	4611      	mov	r1, r2
 80140aa:	4618      	mov	r0, r3
 80140ac:	f005 f8f8 	bl	80192a0 <RegionTxParamSetupReq>
 80140b0:	4603      	mov	r3, r0
 80140b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80140b6:	d03b      	beq.n	8014130 <ProcessMacCommands+0x600>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80140b8:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80140bc:	4b45      	ldr	r3, [pc, #276]	; (80141d4 <ProcessMacCommands+0x6a4>)
 80140be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80140c2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80140c6:	4b43      	ldr	r3, [pc, #268]	; (80141d4 <ProcessMacCommands+0x6a4>)
 80140c8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80140cc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80140d0:	461a      	mov	r2, r3
 80140d2:	4b41      	ldr	r3, [pc, #260]	; (80141d8 <ProcessMacCommands+0x6a8>)
 80140d4:	5c9b      	ldrb	r3, [r3, r2]
 80140d6:	4618      	mov	r0, r3
 80140d8:	f7ec fe2e 	bl	8000d38 <__aeabi_ui2f>
 80140dc:	4603      	mov	r3, r0
 80140de:	4a3d      	ldr	r2, [pc, #244]	; (80141d4 <ProcessMacCommands+0x6a4>)
 80140e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80140e4:	2302      	movs	r3, #2
 80140e6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80140ea:	4b3a      	ldr	r3, [pc, #232]	; (80141d4 <ProcessMacCommands+0x6a4>)
 80140ec:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80140f0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80140f4:	4b37      	ldr	r3, [pc, #220]	; (80141d4 <ProcessMacCommands+0x6a4>)
 80140f6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80140fa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80140fe:	4611      	mov	r1, r2
 8014100:	4618      	mov	r0, r3
 8014102:	f004 ffd0 	bl	80190a6 <RegionGetPhyParam>
 8014106:	4603      	mov	r3, r0
 8014108:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 801410a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801410c:	b25a      	sxtb	r2, r3
 801410e:	4b31      	ldr	r3, [pc, #196]	; (80141d4 <ProcessMacCommands+0x6a4>)
 8014110:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8014114:	4293      	cmp	r3, r2
 8014116:	bfb8      	it	lt
 8014118:	4613      	movlt	r3, r2
 801411a:	b25a      	sxtb	r2, r3
 801411c:	4b2d      	ldr	r3, [pc, #180]	; (80141d4 <ProcessMacCommands+0x6a4>)
 801411e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8014122:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8014126:	2200      	movs	r2, #0
 8014128:	4619      	mov	r1, r3
 801412a:	2009      	movs	r0, #9
 801412c:	f003 fa0e 	bl	801754c <LoRaMacCommandsAddCmd>
                }
                break;
 8014130:	bf00      	nop
 8014132:	e1c3      	b.n	80144bc <ProcessMacCommands+0x98c>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8014134:	2303      	movs	r3, #3
 8014136:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 801413a:	78fb      	ldrb	r3, [r7, #3]
 801413c:	1c5a      	adds	r2, r3, #1
 801413e:	70fa      	strb	r2, [r7, #3]
 8014140:	461a      	mov	r2, r3
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	4413      	add	r3, r2
 8014146:	781b      	ldrb	r3, [r3, #0]
 8014148:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 801414c:	78fb      	ldrb	r3, [r7, #3]
 801414e:	1c5a      	adds	r2, r3, #1
 8014150:	70fa      	strb	r2, [r7, #3]
 8014152:	461a      	mov	r2, r3
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	4413      	add	r3, r2
 8014158:	781b      	ldrb	r3, [r3, #0]
 801415a:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801415c:	78fb      	ldrb	r3, [r7, #3]
 801415e:	1c5a      	adds	r2, r3, #1
 8014160:	70fa      	strb	r2, [r7, #3]
 8014162:	461a      	mov	r2, r3
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	4413      	add	r3, r2
 8014168:	781b      	ldrb	r3, [r3, #0]
 801416a:	021a      	lsls	r2, r3, #8
 801416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801416e:	4313      	orrs	r3, r2
 8014170:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8014172:	78fb      	ldrb	r3, [r7, #3]
 8014174:	1c5a      	adds	r2, r3, #1
 8014176:	70fa      	strb	r2, [r7, #3]
 8014178:	461a      	mov	r2, r3
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	4413      	add	r3, r2
 801417e:	781b      	ldrb	r3, [r3, #0]
 8014180:	041a      	lsls	r2, r3, #16
 8014182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014184:	4313      	orrs	r3, r2
 8014186:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8014188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801418a:	2264      	movs	r2, #100	; 0x64
 801418c:	fb02 f303 	mul.w	r3, r2, r3
 8014190:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8014192:	4b10      	ldr	r3, [pc, #64]	; (80141d4 <ProcessMacCommands+0x6a4>)
 8014194:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014198:	f107 0220 	add.w	r2, r7, #32
 801419c:	4611      	mov	r1, r2
 801419e:	4618      	mov	r0, r3
 80141a0:	f005 f891 	bl	80192c6 <RegionDlChannelReq>
 80141a4:	4603      	mov	r3, r0
 80141a6:	b2db      	uxtb	r3, r3
 80141a8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 80141ac:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80141b0:	b25b      	sxtb	r3, r3
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	db0a      	blt.n	80141cc <ProcessMacCommands+0x69c>
                {
                    macCmdPayload[0] = status;
 80141b6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80141ba:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80141be:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80141c2:	2201      	movs	r2, #1
 80141c4:	4619      	mov	r1, r3
 80141c6:	200a      	movs	r0, #10
 80141c8:	f003 f9c0 	bl	801754c <LoRaMacCommandsAddCmd>
                }
                break;
 80141cc:	bf00      	nop
 80141ce:	e175      	b.n	80144bc <ProcessMacCommands+0x98c>
 80141d0:	200008fc 	.word	0x200008fc
 80141d4:	20000e18 	.word	0x20000e18
 80141d8:	08021d68 	.word	0x08021d68
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80141dc:	2009      	movs	r0, #9
 80141de:	f003 fced 	bl	8017bbc <LoRaMacConfirmQueueIsCmdActive>
 80141e2:	4603      	mov	r3, r0
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	f000 8084 	beq.w	80142f2 <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80141ea:	2109      	movs	r1, #9
 80141ec:	2000      	movs	r0, #0
 80141ee:	f003 fc59 	bl	8017aa4 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 80141f2:	f107 0318 	add.w	r3, r7, #24
 80141f6:	2200      	movs	r2, #0
 80141f8:	601a      	str	r2, [r3, #0]
 80141fa:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 80141fc:	f107 0310 	add.w	r3, r7, #16
 8014200:	2200      	movs	r2, #0
 8014202:	601a      	str	r2, [r3, #0]
 8014204:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8014206:	f107 0308 	add.w	r3, r7, #8
 801420a:	2200      	movs	r2, #0
 801420c:	601a      	str	r2, [r3, #0]
 801420e:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8014210:	78fb      	ldrb	r3, [r7, #3]
 8014212:	1c5a      	adds	r2, r3, #1
 8014214:	70fa      	strb	r2, [r7, #3]
 8014216:	461a      	mov	r2, r3
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	4413      	add	r3, r2
 801421c:	781b      	ldrb	r3, [r3, #0]
 801421e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8014220:	78fb      	ldrb	r3, [r7, #3]
 8014222:	1c5a      	adds	r2, r3, #1
 8014224:	70fa      	strb	r2, [r7, #3]
 8014226:	461a      	mov	r2, r3
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	4413      	add	r3, r2
 801422c:	781b      	ldrb	r3, [r3, #0]
 801422e:	021a      	lsls	r2, r3, #8
 8014230:	69bb      	ldr	r3, [r7, #24]
 8014232:	4313      	orrs	r3, r2
 8014234:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8014236:	78fb      	ldrb	r3, [r7, #3]
 8014238:	1c5a      	adds	r2, r3, #1
 801423a:	70fa      	strb	r2, [r7, #3]
 801423c:	461a      	mov	r2, r3
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	4413      	add	r3, r2
 8014242:	781b      	ldrb	r3, [r3, #0]
 8014244:	041a      	lsls	r2, r3, #16
 8014246:	69bb      	ldr	r3, [r7, #24]
 8014248:	4313      	orrs	r3, r2
 801424a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 801424c:	78fb      	ldrb	r3, [r7, #3]
 801424e:	1c5a      	adds	r2, r3, #1
 8014250:	70fa      	strb	r2, [r7, #3]
 8014252:	461a      	mov	r2, r3
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	4413      	add	r3, r2
 8014258:	781b      	ldrb	r3, [r3, #0]
 801425a:	061a      	lsls	r2, r3, #24
 801425c:	69bb      	ldr	r3, [r7, #24]
 801425e:	4313      	orrs	r3, r2
 8014260:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8014262:	78fb      	ldrb	r3, [r7, #3]
 8014264:	1c5a      	adds	r2, r3, #1
 8014266:	70fa      	strb	r2, [r7, #3]
 8014268:	461a      	mov	r2, r3
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	4413      	add	r3, r2
 801426e:	781b      	ldrb	r3, [r3, #0]
 8014270:	b21b      	sxth	r3, r3
 8014272:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8014274:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8014278:	461a      	mov	r2, r3
 801427a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801427e:	fb02 f303 	mul.w	r3, r2, r3
 8014282:	121b      	asrs	r3, r3, #8
 8014284:	b21b      	sxth	r3, r3
 8014286:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8014288:	f107 0310 	add.w	r3, r7, #16
 801428c:	f107 0218 	add.w	r2, r7, #24
 8014290:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014294:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8014298:	693a      	ldr	r2, [r7, #16]
 801429a:	4b8f      	ldr	r3, [pc, #572]	; (80144d8 <ProcessMacCommands+0x9a8>)
 801429c:	4413      	add	r3, r2
 801429e:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 80142a0:	f107 0308 	add.w	r3, r7, #8
 80142a4:	4618      	mov	r0, r3
 80142a6:	f00a fee9 	bl	801f07c <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80142aa:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80142ae:	4b8b      	ldr	r3, [pc, #556]	; (80144dc <ProcessMacCommands+0x9ac>)
 80142b0:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 80142b4:	9200      	str	r2, [sp, #0]
 80142b6:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 80142ba:	f107 0210 	add.w	r2, r7, #16
 80142be:	ca06      	ldmia	r2, {r1, r2}
 80142c0:	f00a fe75 	bl	801efae <SysTimeSub>
 80142c4:	f107 0010 	add.w	r0, r7, #16
 80142c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80142ca:	9300      	str	r3, [sp, #0]
 80142cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80142ce:	f107 0208 	add.w	r2, r7, #8
 80142d2:	ca06      	ldmia	r2, {r1, r2}
 80142d4:	f00a fe32 	bl	801ef3c <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 80142d8:	f107 0310 	add.w	r3, r7, #16
 80142dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80142e0:	f00a fe9e 	bl	801f020 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80142e4:	f002 ffd0 	bl	8017288 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80142e8:	4b7c      	ldr	r3, [pc, #496]	; (80144dc <ProcessMacCommands+0x9ac>)
 80142ea:	2201      	movs	r2, #1
 80142ec:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 80142f0:	e0e4      	b.n	80144bc <ProcessMacCommands+0x98c>
                }
                else
                {
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 80142f2:	4b7a      	ldr	r3, [pc, #488]	; (80144dc <ProcessMacCommands+0x9ac>)
 80142f4:	2200      	movs	r2, #0
 80142f6:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#endif /* LORAMAC_VERSION */
                }
                break;
 80142fa:	e0df      	b.n	80144bc <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80142fc:	200c      	movs	r0, #12
 80142fe:	f003 fc5d 	bl	8017bbc <LoRaMacConfirmQueueIsCmdActive>
 8014302:	4603      	mov	r3, r0
 8014304:	2b00      	cmp	r3, #0
 8014306:	f000 80d9 	beq.w	80144bc <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 801430a:	210c      	movs	r1, #12
 801430c:	2000      	movs	r0, #0
 801430e:	f003 fbc9 	bl	8017aa4 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8014312:	4b72      	ldr	r3, [pc, #456]	; (80144dc <ProcessMacCommands+0x9ac>)
 8014314:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8014318:	2b04      	cmp	r3, #4
 801431a:	f000 80cf 	beq.w	80144bc <ProcessMacCommands+0x98c>
 801431e:	4b6f      	ldr	r3, [pc, #444]	; (80144dc <ProcessMacCommands+0x9ac>)
 8014320:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8014324:	2b05      	cmp	r3, #5
 8014326:	f000 80c9 	beq.w	80144bc <ProcessMacCommands+0x98c>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 801432a:	f002 ff8e 	bl	801724a <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 801432e:	e0c5      	b.n	80144bc <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8014330:	2303      	movs	r3, #3
 8014332:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 8014336:	2300      	movs	r3, #0
 8014338:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 801433a:	78fb      	ldrb	r3, [r7, #3]
 801433c:	1c5a      	adds	r2, r3, #1
 801433e:	70fa      	strb	r2, [r7, #3]
 8014340:	461a      	mov	r2, r3
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	4413      	add	r3, r2
 8014346:	781b      	ldrb	r3, [r3, #0]
 8014348:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 801434a:	78fb      	ldrb	r3, [r7, #3]
 801434c:	1c5a      	adds	r2, r3, #1
 801434e:	70fa      	strb	r2, [r7, #3]
 8014350:	461a      	mov	r2, r3
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	4413      	add	r3, r2
 8014356:	781b      	ldrb	r3, [r3, #0]
 8014358:	021b      	lsls	r3, r3, #8
 801435a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801435c:	4313      	orrs	r3, r2
 801435e:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8014360:	78fb      	ldrb	r3, [r7, #3]
 8014362:	1c5a      	adds	r2, r3, #1
 8014364:	70fa      	strb	r2, [r7, #3]
 8014366:	461a      	mov	r2, r3
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	4413      	add	r3, r2
 801436c:	781b      	ldrb	r3, [r3, #0]
 801436e:	041b      	lsls	r3, r3, #16
 8014370:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014372:	4313      	orrs	r3, r2
 8014374:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8014376:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014378:	2264      	movs	r2, #100	; 0x64
 801437a:	fb02 f303 	mul.w	r3, r2, r3
 801437e:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8014380:	78fb      	ldrb	r3, [r7, #3]
 8014382:	1c5a      	adds	r2, r3, #1
 8014384:	70fa      	strb	r2, [r7, #3]
 8014386:	461a      	mov	r2, r3
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	4413      	add	r3, r2
 801438c:	781b      	ldrb	r3, [r3, #0]
 801438e:	f003 030f 	and.w	r3, r3, #15
 8014392:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8014396:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801439a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801439c:	4618      	mov	r0, r3
 801439e:	f002 ff5a 	bl	8017256 <LoRaMacClassBPingSlotChannelReq>
 80143a2:	4603      	mov	r3, r0
 80143a4:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 80143a8:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80143ac:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 80143b0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80143b4:	2201      	movs	r2, #1
 80143b6:	4619      	mov	r1, r3
 80143b8:	2011      	movs	r0, #17
 80143ba:	f003 f8c7 	bl	801754c <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 80143be:	e07d      	b.n	80144bc <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 80143c0:	200d      	movs	r0, #13
 80143c2:	f003 fbfb 	bl	8017bbc <LoRaMacConfirmQueueIsCmdActive>
 80143c6:	4603      	mov	r3, r0
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d077      	beq.n	80144bc <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80143cc:	210d      	movs	r1, #13
 80143ce:	2000      	movs	r0, #0
 80143d0:	f003 fb68 	bl	8017aa4 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 80143d4:	2300      	movs	r3, #0
 80143d6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 80143da:	2300      	movs	r3, #0
 80143dc:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 80143e0:	78fb      	ldrb	r3, [r7, #3]
 80143e2:	1c5a      	adds	r2, r3, #1
 80143e4:	70fa      	strb	r2, [r7, #3]
 80143e6:	461a      	mov	r2, r3
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	4413      	add	r3, r2
 80143ec:	781b      	ldrb	r3, [r3, #0]
 80143ee:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80143f2:	78fb      	ldrb	r3, [r7, #3]
 80143f4:	1c5a      	adds	r2, r3, #1
 80143f6:	70fa      	strb	r2, [r7, #3]
 80143f8:	461a      	mov	r2, r3
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	4413      	add	r3, r2
 80143fe:	781b      	ldrb	r3, [r3, #0]
 8014400:	021b      	lsls	r3, r3, #8
 8014402:	b21a      	sxth	r2, r3
 8014404:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8014408:	4313      	orrs	r3, r2
 801440a:	b21b      	sxth	r3, r3
 801440c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8014410:	78fb      	ldrb	r3, [r7, #3]
 8014412:	1c5a      	adds	r2, r3, #1
 8014414:	70fa      	strb	r2, [r7, #3]
 8014416:	461a      	mov	r2, r3
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	4413      	add	r3, r2
 801441c:	781b      	ldrb	r3, [r3, #0]
 801441e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8014422:	4b2f      	ldr	r3, [pc, #188]	; (80144e0 <ProcessMacCommands+0x9b0>)
 8014424:	681a      	ldr	r2, [r3, #0]
 8014426:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 801442a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 801442e:	4618      	mov	r0, r3
 8014430:	f002 ff1d 	bl	801726e <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8014434:	e042      	b.n	80144bc <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8014436:	2300      	movs	r3, #0
 8014438:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 801443c:	78fb      	ldrb	r3, [r7, #3]
 801443e:	1c5a      	adds	r2, r3, #1
 8014440:	70fa      	strb	r2, [r7, #3]
 8014442:	461a      	mov	r2, r3
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	4413      	add	r3, r2
 8014448:	781b      	ldrb	r3, [r3, #0]
 801444a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 801444e:	78fb      	ldrb	r3, [r7, #3]
 8014450:	1c5a      	adds	r2, r3, #1
 8014452:	70fa      	strb	r2, [r7, #3]
 8014454:	461a      	mov	r2, r3
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	4413      	add	r3, r2
 801445a:	781b      	ldrb	r3, [r3, #0]
 801445c:	021b      	lsls	r3, r3, #8
 801445e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014462:	4313      	orrs	r3, r2
 8014464:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8014468:	78fb      	ldrb	r3, [r7, #3]
 801446a:	1c5a      	adds	r2, r3, #1
 801446c:	70fa      	strb	r2, [r7, #3]
 801446e:	461a      	mov	r2, r3
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	4413      	add	r3, r2
 8014474:	781b      	ldrb	r3, [r3, #0]
 8014476:	041b      	lsls	r3, r3, #16
 8014478:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801447c:	4313      	orrs	r3, r2
 801447e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 8014482:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014486:	2264      	movs	r2, #100	; 0x64
 8014488:	fb02 f303 	mul.w	r3, r2, r3
 801448c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8014490:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8014494:	f002 fefe 	bl	8017294 <LoRaMacClassBBeaconFreqReq>
 8014498:	4603      	mov	r3, r0
 801449a:	2b00      	cmp	r3, #0
 801449c:	d003      	beq.n	80144a6 <ProcessMacCommands+0x976>
                    {
                        macCmdPayload[0] = 1;
 801449e:	2301      	movs	r3, #1
 80144a0:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 80144a4:	e002      	b.n	80144ac <ProcessMacCommands+0x97c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 80144a6:	2300      	movs	r3, #0
 80144a8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80144ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80144b0:	2201      	movs	r2, #1
 80144b2:	4619      	mov	r1, r3
 80144b4:	2013      	movs	r0, #19
 80144b6:	f003 f849 	bl	801754c <LoRaMacCommandsAddCmd>
                }
                break;
 80144ba:	bf00      	nop
    while( macIndex < commandsSize )
 80144bc:	78fa      	ldrb	r2, [r7, #3]
 80144be:	78bb      	ldrb	r3, [r7, #2]
 80144c0:	429a      	cmp	r2, r3
 80144c2:	f4ff ab57 	bcc.w	8013b74 <ProcessMacCommands+0x44>
 80144c6:	e004      	b.n	80144d2 <ProcessMacCommands+0x9a2>
        return;
 80144c8:	bf00      	nop
 80144ca:	e002      	b.n	80144d2 <ProcessMacCommands+0x9a2>
            return;
 80144cc:	bf00      	nop
 80144ce:	e000      	b.n	80144d2 <ProcessMacCommands+0x9a2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 80144d0:	bf00      	nop
        }
    }
}
 80144d2:	378c      	adds	r7, #140	; 0x8c
 80144d4:	46bd      	mov	sp, r7
 80144d6:	bd90      	pop	{r4, r7, pc}
 80144d8:	12d53d80 	.word	0x12d53d80
 80144dc:	200008fc 	.word	0x200008fc
 80144e0:	20001a48 	.word	0x20001a48

080144e4 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 80144e4:	b580      	push	{r7, lr}
 80144e6:	b08e      	sub	sp, #56	; 0x38
 80144e8:	af02      	add	r7, sp, #8
 80144ea:	60f8      	str	r0, [r7, #12]
 80144ec:	607a      	str	r2, [r7, #4]
 80144ee:	461a      	mov	r2, r3
 80144f0:	460b      	mov	r3, r1
 80144f2:	72fb      	strb	r3, [r7, #11]
 80144f4:	4613      	mov	r3, r2
 80144f6:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80144f8:	2303      	movs	r3, #3
 80144fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 80144fe:	4b66      	ldr	r3, [pc, #408]	; (8014698 <Send+0x1b4>)
 8014500:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8014504:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8014508:	4b63      	ldr	r3, [pc, #396]	; (8014698 <Send+0x1b4>)
 801450a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801450e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8014512:	4b61      	ldr	r3, [pc, #388]	; (8014698 <Send+0x1b4>)
 8014514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014516:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8014518:	4b5f      	ldr	r3, [pc, #380]	; (8014698 <Send+0x1b4>)
 801451a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 801451e:	2b00      	cmp	r3, #0
 8014520:	d101      	bne.n	8014526 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8014522:	2307      	movs	r3, #7
 8014524:	e0b4      	b.n	8014690 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8014526:	4b5c      	ldr	r3, [pc, #368]	; (8014698 <Send+0x1b4>)
 8014528:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 801452c:	2b00      	cmp	r3, #0
 801452e:	d102      	bne.n	8014536 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8014530:	4b59      	ldr	r3, [pc, #356]	; (8014698 <Send+0x1b4>)
 8014532:	2200      	movs	r2, #0
 8014534:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 8014536:	2300      	movs	r3, #0
 8014538:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 801453c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014540:	f36f 0303 	bfc	r3, #0, #4
 8014544:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8014548:	4b53      	ldr	r3, [pc, #332]	; (8014698 <Send+0x1b4>)
 801454a:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 801454e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014552:	f362 13c7 	bfi	r3, r2, #7, #1
 8014556:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801455a:	4b4f      	ldr	r3, [pc, #316]	; (8014698 <Send+0x1b4>)
 801455c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8014560:	2b01      	cmp	r3, #1
 8014562:	d106      	bne.n	8014572 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8014564:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014568:	f043 0310 	orr.w	r3, r3, #16
 801456c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8014570:	e005      	b.n	801457e <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8014572:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014576:	f36f 1304 	bfc	r3, #4, #1
 801457a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 801457e:	4b46      	ldr	r3, [pc, #280]	; (8014698 <Send+0x1b4>)
 8014580:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8014584:	2b00      	cmp	r3, #0
 8014586:	d005      	beq.n	8014594 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8014588:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801458c:	f043 0320 	orr.w	r3, r3, #32
 8014590:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 8014594:	2301      	movs	r3, #1
 8014596:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8014598:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801459c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80145a0:	b2db      	uxtb	r3, r3
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	bf14      	ite	ne
 80145a6:	2301      	movne	r3, #1
 80145a8:	2300      	moveq	r3, #0
 80145aa:	b2db      	uxtb	r3, r3
 80145ac:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80145ae:	4b3a      	ldr	r3, [pc, #232]	; (8014698 <Send+0x1b4>)
 80145b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145b2:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80145b4:	4b38      	ldr	r3, [pc, #224]	; (8014698 <Send+0x1b4>)
 80145b6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80145ba:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80145bc:	4b36      	ldr	r3, [pc, #216]	; (8014698 <Send+0x1b4>)
 80145be:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80145c2:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80145c4:	4b34      	ldr	r3, [pc, #208]	; (8014698 <Send+0x1b4>)
 80145c6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80145ca:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80145ce:	4b32      	ldr	r3, [pc, #200]	; (8014698 <Send+0x1b4>)
 80145d0:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80145d4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80145d8:	4b2f      	ldr	r3, [pc, #188]	; (8014698 <Send+0x1b4>)
 80145da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80145de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80145e2:	4b2d      	ldr	r3, [pc, #180]	; (8014698 <Send+0x1b4>)
 80145e4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80145e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80145ec:	4b2a      	ldr	r3, [pc, #168]	; (8014698 <Send+0x1b4>)
 80145ee:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80145f2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 80145f6:	f107 0014 	add.w	r0, r7, #20
 80145fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80145fe:	9300      	str	r3, [sp, #0]
 8014600:	4b26      	ldr	r3, [pc, #152]	; (801469c <Send+0x1b8>)
 8014602:	4a27      	ldr	r2, [pc, #156]	; (80146a0 <Send+0x1bc>)
 8014604:	4927      	ldr	r1, [pc, #156]	; (80146a4 <Send+0x1c0>)
 8014606:	f002 fcbf 	bl	8016f88 <LoRaMacAdrCalcNext>
 801460a:	4603      	mov	r3, r0
 801460c:	461a      	mov	r2, r3
 801460e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014612:	f362 1386 	bfi	r3, r2, #6, #1
 8014616:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 801461a:	7afa      	ldrb	r2, [r7, #11]
 801461c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8014620:	893b      	ldrh	r3, [r7, #8]
 8014622:	9300      	str	r3, [sp, #0]
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	68f8      	ldr	r0, [r7, #12]
 8014628:	f000 fc72 	bl	8014f10 <PrepareFrame>
 801462c:	4603      	mov	r3, r0
 801462e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8014632:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014636:	2b00      	cmp	r3, #0
 8014638:	d003      	beq.n	8014642 <Send+0x15e>
 801463a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801463e:	2b0a      	cmp	r3, #10
 8014640:	d107      	bne.n	8014652 <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8014642:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8014646:	4618      	mov	r0, r3
 8014648:	f000 f962 	bl	8014910 <ScheduleTx>
 801464c:	4603      	mov	r3, r0
 801464e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8014652:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014656:	2b00      	cmp	r3, #0
 8014658:	d00a      	beq.n	8014670 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 801465a:	4a0f      	ldr	r2, [pc, #60]	; (8014698 <Send+0x1b4>)
 801465c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8014660:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8014664:	4a0c      	ldr	r2, [pc, #48]	; (8014698 <Send+0x1b4>)
 8014666:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801466a:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 801466e:	e00d      	b.n	801468c <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8014670:	4b09      	ldr	r3, [pc, #36]	; (8014698 <Send+0x1b4>)
 8014672:	2200      	movs	r2, #0
 8014674:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8014678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801467a:	4a07      	ldr	r2, [pc, #28]	; (8014698 <Send+0x1b4>)
 801467c:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 801467e:	f003 f80b 	bl	8017698 <LoRaMacCommandsRemoveNoneStickyCmds>
 8014682:	4603      	mov	r3, r0
 8014684:	2b00      	cmp	r3, #0
 8014686:	d001      	beq.n	801468c <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014688:	2313      	movs	r3, #19
 801468a:	e001      	b.n	8014690 <Send+0x1ac>
        }
    }
    return status;
 801468c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014690:	4618      	mov	r0, r3
 8014692:	3730      	adds	r7, #48	; 0x30
 8014694:	46bd      	mov	sp, r7
 8014696:	bd80      	pop	{r7, pc}
 8014698:	20000e18 	.word	0x20000e18
 801469c:	20000e80 	.word	0x20000e80
 80146a0:	20000e50 	.word	0x20000e50
 80146a4:	20000e51 	.word	0x20000e51

080146a8 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b084      	sub	sp, #16
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	4603      	mov	r3, r0
 80146b0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80146b2:	2300      	movs	r3, #0
 80146b4:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 80146b6:	2300      	movs	r3, #0
 80146b8:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 80146ba:	2301      	movs	r3, #1
 80146bc:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 80146be:	79fb      	ldrb	r3, [r7, #7]
 80146c0:	2bff      	cmp	r3, #255	; 0xff
 80146c2:	d11f      	bne.n	8014704 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 80146c4:	2000      	movs	r0, #0
 80146c6:	f7ff f8f9 	bl	80138bc <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80146ca:	4b15      	ldr	r3, [pc, #84]	; (8014720 <SendReJoinReq+0x78>)
 80146cc:	2200      	movs	r2, #0
 80146ce:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80146d2:	4b13      	ldr	r3, [pc, #76]	; (8014720 <SendReJoinReq+0x78>)
 80146d4:	4a13      	ldr	r2, [pc, #76]	; (8014724 <SendReJoinReq+0x7c>)
 80146d6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80146da:	4b11      	ldr	r3, [pc, #68]	; (8014720 <SendReJoinReq+0x78>)
 80146dc:	22ff      	movs	r2, #255	; 0xff
 80146de:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 80146e2:	7b3b      	ldrb	r3, [r7, #12]
 80146e4:	f36f 1347 	bfc	r3, #5, #3
 80146e8:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 80146ea:	7b3a      	ldrb	r2, [r7, #12]
 80146ec:	4b0c      	ldr	r3, [pc, #48]	; (8014720 <SendReJoinReq+0x78>)
 80146ee:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 80146f2:	480d      	ldr	r0, [pc, #52]	; (8014728 <SendReJoinReq+0x80>)
 80146f4:	f7fb ff38 	bl	8010568 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 80146f8:	480c      	ldr	r0, [pc, #48]	; (801472c <SendReJoinReq+0x84>)
 80146fa:	f7fb ff05 	bl	8010508 <SecureElementGetDevEui>

            allowDelayedTx = false;
 80146fe:	2300      	movs	r3, #0
 8014700:	73fb      	strb	r3, [r7, #15]

            break;
 8014702:	e002      	b.n	801470a <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014704:	2302      	movs	r3, #2
 8014706:	73bb      	strb	r3, [r7, #14]
            break;
 8014708:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 801470a:	7bfb      	ldrb	r3, [r7, #15]
 801470c:	4618      	mov	r0, r3
 801470e:	f000 f8ff 	bl	8014910 <ScheduleTx>
 8014712:	4603      	mov	r3, r0
 8014714:	73bb      	strb	r3, [r7, #14]
    return status;
 8014716:	7bbb      	ldrb	r3, [r7, #14]
}
 8014718:	4618      	mov	r0, r3
 801471a:	3710      	adds	r7, #16
 801471c:	46bd      	mov	sp, r7
 801471e:	bd80      	pop	{r7, pc}
 8014720:	200008fc 	.word	0x200008fc
 8014724:	200008fe 	.word	0x200008fe
 8014728:	20000a0a 	.word	0x20000a0a
 801472c:	20000a12 	.word	0x20000a12

08014730 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8014730:	b580      	push	{r7, lr}
 8014732:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8014734:	f002 fd38 	bl	80171a8 <LoRaMacClassBIsBeaconExpected>
 8014738:	4603      	mov	r3, r0
 801473a:	2b00      	cmp	r3, #0
 801473c:	d001      	beq.n	8014742 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 801473e:	230e      	movs	r3, #14
 8014740:	e013      	b.n	801476a <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8014742:	4b0b      	ldr	r3, [pc, #44]	; (8014770 <CheckForClassBCollision+0x40>)
 8014744:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8014748:	2b01      	cmp	r3, #1
 801474a:	d10d      	bne.n	8014768 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 801474c:	f002 fd33 	bl	80171b6 <LoRaMacClassBIsPingExpected>
 8014750:	4603      	mov	r3, r0
 8014752:	2b00      	cmp	r3, #0
 8014754:	d001      	beq.n	801475a <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8014756:	230f      	movs	r3, #15
 8014758:	e007      	b.n	801476a <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 801475a:	f002 fd33 	bl	80171c4 <LoRaMacClassBIsMulticastExpected>
 801475e:	4603      	mov	r3, r0
 8014760:	2b00      	cmp	r3, #0
 8014762:	d001      	beq.n	8014768 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8014764:	230f      	movs	r3, #15
 8014766:	e000      	b.n	801476a <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8014768:	2300      	movs	r3, #0
}
 801476a:	4618      	mov	r0, r3
 801476c:	bd80      	pop	{r7, pc}
 801476e:	bf00      	nop
 8014770:	20000e18 	.word	0x20000e18

08014774 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8014774:	b590      	push	{r4, r7, lr}
 8014776:	b083      	sub	sp, #12
 8014778:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801477a:	4b2d      	ldr	r3, [pc, #180]	; (8014830 <ComputeRxWindowParameters+0xbc>)
 801477c:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8014780:	4b2b      	ldr	r3, [pc, #172]	; (8014830 <ComputeRxWindowParameters+0xbc>)
 8014782:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8014786:	4b2a      	ldr	r3, [pc, #168]	; (8014830 <ComputeRxWindowParameters+0xbc>)
 8014788:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 801478c:	4b28      	ldr	r3, [pc, #160]	; (8014830 <ComputeRxWindowParameters+0xbc>)
 801478e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8014792:	4b27      	ldr	r3, [pc, #156]	; (8014830 <ComputeRxWindowParameters+0xbc>)
 8014794:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8014798:	b25b      	sxtb	r3, r3
 801479a:	f004 fdd9 	bl	8019350 <RegionApplyDrOffset>
 801479e:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80147a0:	b259      	sxtb	r1, r3
 80147a2:	4b23      	ldr	r3, [pc, #140]	; (8014830 <ComputeRxWindowParameters+0xbc>)
 80147a4:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80147a8:	4b21      	ldr	r3, [pc, #132]	; (8014830 <ComputeRxWindowParameters+0xbc>)
 80147aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80147ac:	4821      	ldr	r0, [pc, #132]	; (8014834 <ComputeRxWindowParameters+0xc0>)
 80147ae:	9000      	str	r0, [sp, #0]
 80147b0:	4620      	mov	r0, r4
 80147b2:	f004 fcef 	bl	8019194 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80147b6:	4b1e      	ldr	r3, [pc, #120]	; (8014830 <ComputeRxWindowParameters+0xbc>)
 80147b8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 80147bc:	4b1c      	ldr	r3, [pc, #112]	; (8014830 <ComputeRxWindowParameters+0xbc>)
 80147be:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80147c2:	b259      	sxtb	r1, r3
 80147c4:	4b1a      	ldr	r3, [pc, #104]	; (8014830 <ComputeRxWindowParameters+0xbc>)
 80147c6:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80147ca:	4b19      	ldr	r3, [pc, #100]	; (8014830 <ComputeRxWindowParameters+0xbc>)
 80147cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80147ce:	4c1a      	ldr	r4, [pc, #104]	; (8014838 <ComputeRxWindowParameters+0xc4>)
 80147d0:	9400      	str	r4, [sp, #0]
 80147d2:	f004 fcdf 	bl	8019194 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80147d6:	4b16      	ldr	r3, [pc, #88]	; (8014830 <ComputeRxWindowParameters+0xbc>)
 80147d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80147da:	4a18      	ldr	r2, [pc, #96]	; (801483c <ComputeRxWindowParameters+0xc8>)
 80147dc:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 80147e0:	4413      	add	r3, r2
 80147e2:	4a16      	ldr	r2, [pc, #88]	; (801483c <ComputeRxWindowParameters+0xc8>)
 80147e4:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80147e8:	4b11      	ldr	r3, [pc, #68]	; (8014830 <ComputeRxWindowParameters+0xbc>)
 80147ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80147ec:	4a13      	ldr	r2, [pc, #76]	; (801483c <ComputeRxWindowParameters+0xc8>)
 80147ee:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 80147f2:	4413      	add	r3, r2
 80147f4:	4a11      	ldr	r2, [pc, #68]	; (801483c <ComputeRxWindowParameters+0xc8>)
 80147f6:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 80147fa:	4b10      	ldr	r3, [pc, #64]	; (801483c <ComputeRxWindowParameters+0xc8>)
 80147fc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8014800:	2b04      	cmp	r3, #4
 8014802:	d011      	beq.n	8014828 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8014804:	4b0a      	ldr	r3, [pc, #40]	; (8014830 <ComputeRxWindowParameters+0xbc>)
 8014806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014808:	4a0c      	ldr	r2, [pc, #48]	; (801483c <ComputeRxWindowParameters+0xc8>)
 801480a:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 801480e:	4413      	add	r3, r2
 8014810:	4a0a      	ldr	r2, [pc, #40]	; (801483c <ComputeRxWindowParameters+0xc8>)
 8014812:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8014816:	4b06      	ldr	r3, [pc, #24]	; (8014830 <ComputeRxWindowParameters+0xbc>)
 8014818:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801481a:	4a08      	ldr	r2, [pc, #32]	; (801483c <ComputeRxWindowParameters+0xc8>)
 801481c:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8014820:	4413      	add	r3, r2
 8014822:	4a06      	ldr	r2, [pc, #24]	; (801483c <ComputeRxWindowParameters+0xc8>)
 8014824:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8014828:	bf00      	nop
 801482a:	3704      	adds	r7, #4
 801482c:	46bd      	mov	sp, r7
 801482e:	bd90      	pop	{r4, r7, pc}
 8014830:	20000e18 	.word	0x20000e18
 8014834:	20000cb4 	.word	0x20000cb4
 8014838:	20000ccc 	.word	0x20000ccc
 801483c:	200008fc 	.word	0x200008fc

08014840 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8014840:	b580      	push	{r7, lr}
 8014842:	b082      	sub	sp, #8
 8014844:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8014846:	2300      	movs	r3, #0
 8014848:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 801484a:	4b13      	ldr	r3, [pc, #76]	; (8014898 <VerifyTxFrame+0x58>)
 801484c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8014850:	2b00      	cmp	r3, #0
 8014852:	d01b      	beq.n	801488c <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8014854:	1d3b      	adds	r3, r7, #4
 8014856:	4618      	mov	r0, r3
 8014858:	f002 ff6e 	bl	8017738 <LoRaMacCommandsGetSizeSerializedCmds>
 801485c:	4603      	mov	r3, r0
 801485e:	2b00      	cmp	r3, #0
 8014860:	d001      	beq.n	8014866 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014862:	2313      	movs	r3, #19
 8014864:	e013      	b.n	801488e <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8014866:	4b0d      	ldr	r3, [pc, #52]	; (801489c <VerifyTxFrame+0x5c>)
 8014868:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801486c:	4a0a      	ldr	r2, [pc, #40]	; (8014898 <VerifyTxFrame+0x58>)
 801486e:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8014872:	687a      	ldr	r2, [r7, #4]
 8014874:	b2d2      	uxtb	r2, r2
 8014876:	4618      	mov	r0, r3
 8014878:	f7ff f932 	bl	8013ae0 <ValidatePayloadLength>
 801487c:	4603      	mov	r3, r0
 801487e:	f083 0301 	eor.w	r3, r3, #1
 8014882:	b2db      	uxtb	r3, r3
 8014884:	2b00      	cmp	r3, #0
 8014886:	d001      	beq.n	801488c <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8014888:	2308      	movs	r3, #8
 801488a:	e000      	b.n	801488e <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 801488c:	2300      	movs	r3, #0
}
 801488e:	4618      	mov	r0, r3
 8014890:	3708      	adds	r7, #8
 8014892:	46bd      	mov	sp, r7
 8014894:	bd80      	pop	{r7, pc}
 8014896:	bf00      	nop
 8014898:	20000e18 	.word	0x20000e18
 801489c:	200008fc 	.word	0x200008fc

080148a0 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b082      	sub	sp, #8
 80148a4:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 80148a6:	4b18      	ldr	r3, [pc, #96]	; (8014908 <SerializeTxFrame+0x68>)
 80148a8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d002      	beq.n	80148b6 <SerializeTxFrame+0x16>
 80148b0:	2b04      	cmp	r3, #4
 80148b2:	d011      	beq.n	80148d8 <SerializeTxFrame+0x38>
 80148b4:	e021      	b.n	80148fa <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80148b6:	4815      	ldr	r0, [pc, #84]	; (801490c <SerializeTxFrame+0x6c>)
 80148b8:	f004 fa6c 	bl	8018d94 <LoRaMacSerializerJoinRequest>
 80148bc:	4603      	mov	r3, r0
 80148be:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80148c0:	79fb      	ldrb	r3, [r7, #7]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d001      	beq.n	80148ca <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80148c6:	2311      	movs	r3, #17
 80148c8:	e01a      	b.n	8014900 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80148ca:	4b0f      	ldr	r3, [pc, #60]	; (8014908 <SerializeTxFrame+0x68>)
 80148cc:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80148d0:	b29a      	uxth	r2, r3
 80148d2:	4b0d      	ldr	r3, [pc, #52]	; (8014908 <SerializeTxFrame+0x68>)
 80148d4:	801a      	strh	r2, [r3, #0]
            break;
 80148d6:	e012      	b.n	80148fe <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80148d8:	480c      	ldr	r0, [pc, #48]	; (801490c <SerializeTxFrame+0x6c>)
 80148da:	f004 fadd 	bl	8018e98 <LoRaMacSerializerData>
 80148de:	4603      	mov	r3, r0
 80148e0:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80148e2:	79fb      	ldrb	r3, [r7, #7]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d001      	beq.n	80148ec <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80148e8:	2311      	movs	r3, #17
 80148ea:	e009      	b.n	8014900 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80148ec:	4b06      	ldr	r3, [pc, #24]	; (8014908 <SerializeTxFrame+0x68>)
 80148ee:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80148f2:	b29a      	uxth	r2, r3
 80148f4:	4b04      	ldr	r3, [pc, #16]	; (8014908 <SerializeTxFrame+0x68>)
 80148f6:	801a      	strh	r2, [r3, #0]
            break;
 80148f8:	e001      	b.n	80148fe <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80148fa:	2303      	movs	r3, #3
 80148fc:	e000      	b.n	8014900 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 80148fe:	2300      	movs	r3, #0
}
 8014900:	4618      	mov	r0, r3
 8014902:	3708      	adds	r7, #8
 8014904:	46bd      	mov	sp, r7
 8014906:	bd80      	pop	{r7, pc}
 8014908:	200008fc 	.word	0x200008fc
 801490c:	20000a04 	.word	0x20000a04

08014910 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8014910:	b580      	push	{r7, lr}
 8014912:	b090      	sub	sp, #64	; 0x40
 8014914:	af02      	add	r7, sp, #8
 8014916:	4603      	mov	r3, r0
 8014918:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801491a:	2303      	movs	r3, #3
 801491c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8014920:	f7ff ff06 	bl	8014730 <CheckForClassBCollision>
 8014924:	4603      	mov	r3, r0
 8014926:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 801492a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801492e:	2b00      	cmp	r3, #0
 8014930:	d002      	beq.n	8014938 <ScheduleTx+0x28>
    {
        return status;
 8014932:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014936:	e092      	b.n	8014a5e <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8014938:	f000 f8f8 	bl	8014b2c <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 801493c:	f7ff ffb0 	bl	80148a0 <SerializeTxFrame>
 8014940:	4603      	mov	r3, r0
 8014942:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8014946:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801494a:	2b00      	cmp	r3, #0
 801494c:	d002      	beq.n	8014954 <ScheduleTx+0x44>
    {
        return status;
 801494e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014952:	e084      	b.n	8014a5e <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8014954:	4b44      	ldr	r3, [pc, #272]	; (8014a68 <ScheduleTx+0x158>)
 8014956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014958:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801495a:	4b43      	ldr	r3, [pc, #268]	; (8014a68 <ScheduleTx+0x158>)
 801495c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8014960:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8014962:	4b41      	ldr	r3, [pc, #260]	; (8014a68 <ScheduleTx+0x158>)
 8014964:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8014968:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 801496a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801496e:	4618      	mov	r0, r3
 8014970:	f00a fbbc 	bl	801f0ec <SysTimeGetMcuTime>
 8014974:	4638      	mov	r0, r7
 8014976:	4b3c      	ldr	r3, [pc, #240]	; (8014a68 <ScheduleTx+0x158>)
 8014978:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 801497c:	9200      	str	r2, [sp, #0]
 801497e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8014982:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8014986:	ca06      	ldmia	r2, {r1, r2}
 8014988:	f00a fb11 	bl	801efae <SysTimeSub>
 801498c:	f107 0320 	add.w	r3, r7, #32
 8014990:	463a      	mov	r2, r7
 8014992:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014996:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 801499a:	4b33      	ldr	r3, [pc, #204]	; (8014a68 <ScheduleTx+0x158>)
 801499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801499e:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 80149a0:	2300      	movs	r3, #0
 80149a2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 80149a6:	2301      	movs	r3, #1
 80149a8:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80149aa:	4b30      	ldr	r3, [pc, #192]	; (8014a6c <ScheduleTx+0x15c>)
 80149ac:	881b      	ldrh	r3, [r3, #0]
 80149ae:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80149b0:	4b2d      	ldr	r3, [pc, #180]	; (8014a68 <ScheduleTx+0x158>)
 80149b2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d104      	bne.n	80149c4 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 80149ba:	2301      	movs	r3, #1
 80149bc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 80149c0:	2300      	movs	r3, #0
 80149c2:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80149c4:	4b28      	ldr	r3, [pc, #160]	; (8014a68 <ScheduleTx+0x158>)
 80149c6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80149ca:	f107 0114 	add.w	r1, r7, #20
 80149ce:	4b28      	ldr	r3, [pc, #160]	; (8014a70 <ScheduleTx+0x160>)
 80149d0:	9300      	str	r3, [sp, #0]
 80149d2:	4b28      	ldr	r3, [pc, #160]	; (8014a74 <ScheduleTx+0x164>)
 80149d4:	4a28      	ldr	r2, [pc, #160]	; (8014a78 <ScheduleTx+0x168>)
 80149d6:	f004 fca3 	bl	8019320 <RegionNextChannel>
 80149da:	4603      	mov	r3, r0
 80149dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 80149e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d025      	beq.n	8014a34 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 80149e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80149ec:	2b0b      	cmp	r3, #11
 80149ee:	d11e      	bne.n	8014a2e <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 80149f0:	4b1e      	ldr	r3, [pc, #120]	; (8014a6c <ScheduleTx+0x15c>)
 80149f2:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d01c      	beq.n	8014a34 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 80149fa:	7bfb      	ldrb	r3, [r7, #15]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d013      	beq.n	8014a28 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8014a00:	4b1a      	ldr	r3, [pc, #104]	; (8014a6c <ScheduleTx+0x15c>)
 8014a02:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014a06:	f043 0320 	orr.w	r3, r3, #32
 8014a0a:	4a18      	ldr	r2, [pc, #96]	; (8014a6c <ScheduleTx+0x15c>)
 8014a0c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8014a10:	4b16      	ldr	r3, [pc, #88]	; (8014a6c <ScheduleTx+0x15c>)
 8014a12:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8014a16:	4619      	mov	r1, r3
 8014a18:	4818      	ldr	r0, [pc, #96]	; (8014a7c <ScheduleTx+0x16c>)
 8014a1a:	f00b f927 	bl	801fc6c <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8014a1e:	4817      	ldr	r0, [pc, #92]	; (8014a7c <ScheduleTx+0x16c>)
 8014a20:	f00b f846 	bl	801fab0 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8014a24:	2300      	movs	r3, #0
 8014a26:	e01a      	b.n	8014a5e <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8014a28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014a2c:	e017      	b.n	8014a5e <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8014a2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014a32:	e014      	b.n	8014a5e <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8014a34:	f7ff fe9e 	bl	8014774 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8014a38:	f7ff ff02 	bl	8014840 <VerifyTxFrame>
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8014a42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d002      	beq.n	8014a50 <ScheduleTx+0x140>
    {
        return status;
 8014a4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014a4e:	e006      	b.n	8014a5e <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8014a50:	4b06      	ldr	r3, [pc, #24]	; (8014a6c <ScheduleTx+0x15c>)
 8014a52:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 8014a56:	4618      	mov	r0, r3
 8014a58:	f000 fb76 	bl	8015148 <SendFrameOnChannel>
 8014a5c:	4603      	mov	r3, r0
}
 8014a5e:	4618      	mov	r0, r3
 8014a60:	3738      	adds	r7, #56	; 0x38
 8014a62:	46bd      	mov	sp, r7
 8014a64:	bd80      	pop	{r7, pc}
 8014a66:	bf00      	nop
 8014a68:	20000e18 	.word	0x20000e18
 8014a6c:	200008fc 	.word	0x200008fc
 8014a70:	20000e48 	.word	0x20000e48
 8014a74:	20000d90 	.word	0x20000d90
 8014a78:	20000d17 	.word	0x20000d17
 8014a7c:	20000c64 	.word	0x20000c64

08014a80 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b084      	sub	sp, #16
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	4603      	mov	r3, r0
 8014a88:	460a      	mov	r2, r1
 8014a8a:	71fb      	strb	r3, [r7, #7]
 8014a8c:	4613      	mov	r3, r2
 8014a8e:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8014a90:	2312      	movs	r3, #18
 8014a92:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8014a94:	2300      	movs	r3, #0
 8014a96:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8014a98:	4b22      	ldr	r3, [pc, #136]	; (8014b24 <SecureFrame+0xa4>)
 8014a9a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d002      	beq.n	8014aa8 <SecureFrame+0x28>
 8014aa2:	2b04      	cmp	r3, #4
 8014aa4:	d011      	beq.n	8014aca <SecureFrame+0x4a>
 8014aa6:	e036      	b.n	8014b16 <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8014aa8:	481f      	ldr	r0, [pc, #124]	; (8014b28 <SecureFrame+0xa8>)
 8014aaa:	f003 fd3f 	bl	801852c <LoRaMacCryptoPrepareJoinRequest>
 8014aae:	4603      	mov	r3, r0
 8014ab0:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8014ab2:	7bfb      	ldrb	r3, [r7, #15]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d001      	beq.n	8014abc <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8014ab8:	2311      	movs	r3, #17
 8014aba:	e02f      	b.n	8014b1c <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8014abc:	4b19      	ldr	r3, [pc, #100]	; (8014b24 <SecureFrame+0xa4>)
 8014abe:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8014ac2:	b29a      	uxth	r2, r3
 8014ac4:	4b17      	ldr	r3, [pc, #92]	; (8014b24 <SecureFrame+0xa4>)
 8014ac6:	801a      	strh	r2, [r3, #0]
            break;
 8014ac8:	e027      	b.n	8014b1a <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8014aca:	f107 0308 	add.w	r3, r7, #8
 8014ace:	4618      	mov	r0, r3
 8014ad0:	f003 fc66 	bl	80183a0 <LoRaMacCryptoGetFCntUp>
 8014ad4:	4603      	mov	r3, r0
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d001      	beq.n	8014ade <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8014ada:	2312      	movs	r3, #18
 8014adc:	e01e      	b.n	8014b1c <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8014ade:	4b11      	ldr	r3, [pc, #68]	; (8014b24 <SecureFrame+0xa4>)
 8014ae0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d002      	beq.n	8014aee <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8014ae8:	68bb      	ldr	r3, [r7, #8]
 8014aea:	3b01      	subs	r3, #1
 8014aec:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8014aee:	68b8      	ldr	r0, [r7, #8]
 8014af0:	79ba      	ldrb	r2, [r7, #6]
 8014af2:	79f9      	ldrb	r1, [r7, #7]
 8014af4:	4b0c      	ldr	r3, [pc, #48]	; (8014b28 <SecureFrame+0xa8>)
 8014af6:	f003 fe41 	bl	801877c <LoRaMacCryptoSecureMessage>
 8014afa:	4603      	mov	r3, r0
 8014afc:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8014afe:	7bfb      	ldrb	r3, [r7, #15]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d001      	beq.n	8014b08 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8014b04:	2311      	movs	r3, #17
 8014b06:	e009      	b.n	8014b1c <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8014b08:	4b06      	ldr	r3, [pc, #24]	; (8014b24 <SecureFrame+0xa4>)
 8014b0a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8014b0e:	b29a      	uxth	r2, r3
 8014b10:	4b04      	ldr	r3, [pc, #16]	; (8014b24 <SecureFrame+0xa4>)
 8014b12:	801a      	strh	r2, [r3, #0]
            break;
 8014b14:	e001      	b.n	8014b1a <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8014b16:	2303      	movs	r3, #3
 8014b18:	e000      	b.n	8014b1c <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 8014b1a:	2300      	movs	r3, #0
}
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	3710      	adds	r7, #16
 8014b20:	46bd      	mov	sp, r7
 8014b22:	bd80      	pop	{r7, pc}
 8014b24:	200008fc 	.word	0x200008fc
 8014b28:	20000a04 	.word	0x20000a04

08014b2c <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8014b2c:	b480      	push	{r7}
 8014b2e:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8014b30:	4b09      	ldr	r3, [pc, #36]	; (8014b58 <CalculateBackOff+0x2c>)
 8014b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d10a      	bne.n	8014b4e <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8014b38:	4b07      	ldr	r3, [pc, #28]	; (8014b58 <CalculateBackOff+0x2c>)
 8014b3a:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8014b3e:	3b01      	subs	r3, #1
 8014b40:	4a06      	ldr	r2, [pc, #24]	; (8014b5c <CalculateBackOff+0x30>)
 8014b42:	f8d2 241c 	ldr.w	r2, [r2, #1052]	; 0x41c
 8014b46:	fb02 f303 	mul.w	r3, r2, r3
 8014b4a:	4a03      	ldr	r2, [pc, #12]	; (8014b58 <CalculateBackOff+0x2c>)
 8014b4c:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8014b4e:	bf00      	nop
 8014b50:	46bd      	mov	sp, r7
 8014b52:	bc80      	pop	{r7}
 8014b54:	4770      	bx	lr
 8014b56:	bf00      	nop
 8014b58:	20000e18 	.word	0x20000e18
 8014b5c:	200008fc 	.word	0x200008fc

08014b60 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8014b60:	b580      	push	{r7, lr}
 8014b62:	b082      	sub	sp, #8
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	4603      	mov	r3, r0
 8014b68:	7139      	strb	r1, [r7, #4]
 8014b6a:	71fb      	strb	r3, [r7, #7]
 8014b6c:	4613      	mov	r3, r2
 8014b6e:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8014b70:	79fb      	ldrb	r3, [r7, #7]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d002      	beq.n	8014b7c <RemoveMacCommands+0x1c>
 8014b76:	79fb      	ldrb	r3, [r7, #7]
 8014b78:	2b01      	cmp	r3, #1
 8014b7a:	d10d      	bne.n	8014b98 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8014b7c:	79bb      	ldrb	r3, [r7, #6]
 8014b7e:	2b01      	cmp	r3, #1
 8014b80:	d108      	bne.n	8014b94 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8014b82:	793b      	ldrb	r3, [r7, #4]
 8014b84:	f003 0320 	and.w	r3, r3, #32
 8014b88:	b2db      	uxtb	r3, r3
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d004      	beq.n	8014b98 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8014b8e:	f002 fda7 	bl	80176e0 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8014b92:	e001      	b.n	8014b98 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8014b94:	f002 fda4 	bl	80176e0 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8014b98:	bf00      	nop
 8014b9a:	3708      	adds	r7, #8
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	bd80      	pop	{r7, pc}

08014ba0 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 8014ba0:	b5b0      	push	{r4, r5, r7, lr}
 8014ba2:	b092      	sub	sp, #72	; 0x48
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	4603      	mov	r3, r0
 8014ba8:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 8014baa:	79fb      	ldrb	r3, [r7, #7]
 8014bac:	f083 0301 	eor.w	r3, r3, #1
 8014bb0:	b2db      	uxtb	r3, r3
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d003      	beq.n	8014bbe <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8014bb6:	4b88      	ldr	r3, [pc, #544]	; (8014dd8 <ResetMacParameters+0x238>)
 8014bb8:	2200      	movs	r2, #0
 8014bba:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8014bbe:	4b86      	ldr	r3, [pc, #536]	; (8014dd8 <ResetMacParameters+0x238>)
 8014bc0:	2200      	movs	r2, #0
 8014bc2:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8014bc4:	4b85      	ldr	r3, [pc, #532]	; (8014ddc <ResetMacParameters+0x23c>)
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8014bcc:	4b83      	ldr	r3, [pc, #524]	; (8014ddc <ResetMacParameters+0x23c>)
 8014bce:	2200      	movs	r2, #0
 8014bd0:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 8014bd4:	4b81      	ldr	r3, [pc, #516]	; (8014ddc <ResetMacParameters+0x23c>)
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8014bdc:	4b7e      	ldr	r3, [pc, #504]	; (8014dd8 <ResetMacParameters+0x238>)
 8014bde:	2200      	movs	r2, #0
 8014be0:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8014be4:	4b7c      	ldr	r3, [pc, #496]	; (8014dd8 <ResetMacParameters+0x238>)
 8014be6:	2201      	movs	r2, #1
 8014be8:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8014bec:	4b7a      	ldr	r3, [pc, #488]	; (8014dd8 <ResetMacParameters+0x238>)
 8014bee:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8014bf2:	4b79      	ldr	r3, [pc, #484]	; (8014dd8 <ResetMacParameters+0x238>)
 8014bf4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8014bf8:	4b77      	ldr	r3, [pc, #476]	; (8014dd8 <ResetMacParameters+0x238>)
 8014bfa:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8014bfe:	4b76      	ldr	r3, [pc, #472]	; (8014dd8 <ResetMacParameters+0x238>)
 8014c00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8014c04:	4b74      	ldr	r3, [pc, #464]	; (8014dd8 <ResetMacParameters+0x238>)
 8014c06:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 8014c0a:	4b73      	ldr	r3, [pc, #460]	; (8014dd8 <ResetMacParameters+0x238>)
 8014c0c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8014c10:	4b71      	ldr	r3, [pc, #452]	; (8014dd8 <ResetMacParameters+0x238>)
 8014c12:	4a71      	ldr	r2, [pc, #452]	; (8014dd8 <ResetMacParameters+0x238>)
 8014c14:	336c      	adds	r3, #108	; 0x6c
 8014c16:	32b4      	adds	r2, #180	; 0xb4
 8014c18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014c1c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8014c20:	4b6d      	ldr	r3, [pc, #436]	; (8014dd8 <ResetMacParameters+0x238>)
 8014c22:	4a6d      	ldr	r2, [pc, #436]	; (8014dd8 <ResetMacParameters+0x238>)
 8014c24:	3374      	adds	r3, #116	; 0x74
 8014c26:	32bc      	adds	r2, #188	; 0xbc
 8014c28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014c2c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8014c30:	4b69      	ldr	r3, [pc, #420]	; (8014dd8 <ResetMacParameters+0x238>)
 8014c32:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 8014c36:	4b68      	ldr	r3, [pc, #416]	; (8014dd8 <ResetMacParameters+0x238>)
 8014c38:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8014c3c:	4b66      	ldr	r3, [pc, #408]	; (8014dd8 <ResetMacParameters+0x238>)
 8014c3e:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 8014c42:	4b65      	ldr	r3, [pc, #404]	; (8014dd8 <ResetMacParameters+0x238>)
 8014c44:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8014c48:	4b63      	ldr	r3, [pc, #396]	; (8014dd8 <ResetMacParameters+0x238>)
 8014c4a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8014c4e:	4a62      	ldr	r2, [pc, #392]	; (8014dd8 <ResetMacParameters+0x238>)
 8014c50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8014c54:	4b60      	ldr	r3, [pc, #384]	; (8014dd8 <ResetMacParameters+0x238>)
 8014c56:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8014c5a:	4a5f      	ldr	r2, [pc, #380]	; (8014dd8 <ResetMacParameters+0x238>)
 8014c5c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8014c60:	4b5d      	ldr	r3, [pc, #372]	; (8014dd8 <ResetMacParameters+0x238>)
 8014c62:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8014c66:	4b5c      	ldr	r3, [pc, #368]	; (8014dd8 <ResetMacParameters+0x238>)
 8014c68:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8014c6c:	4b5a      	ldr	r3, [pc, #360]	; (8014dd8 <ResetMacParameters+0x238>)
 8014c6e:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8014c72:	4b59      	ldr	r3, [pc, #356]	; (8014dd8 <ResetMacParameters+0x238>)
 8014c74:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

    MacCtx.NodeAckRequested = false;
 8014c78:	4b58      	ldr	r3, [pc, #352]	; (8014ddc <ResetMacParameters+0x23c>)
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 8014c80:	4b55      	ldr	r3, [pc, #340]	; (8014dd8 <ResetMacParameters+0x238>)
 8014c82:	2200      	movs	r2, #0
 8014c84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8014c88:	4b53      	ldr	r3, [pc, #332]	; (8014dd8 <ResetMacParameters+0x238>)
 8014c8a:	2200      	movs	r2, #0
 8014c8c:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 8014c90:	4b51      	ldr	r3, [pc, #324]	; (8014dd8 <ResetMacParameters+0x238>)
 8014c92:	2200      	movs	r2, #0
 8014c94:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 8014c98:	4b4f      	ldr	r3, [pc, #316]	; (8014dd8 <ResetMacParameters+0x238>)
 8014c9a:	2200      	movs	r2, #0
 8014c9c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 8014ca0:	4b4d      	ldr	r3, [pc, #308]	; (8014dd8 <ResetMacParameters+0x238>)
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 8014ca8:	4b4b      	ldr	r3, [pc, #300]	; (8014dd8 <ResetMacParameters+0x238>)
 8014caa:	2200      	movs	r2, #0
 8014cac:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8014cb0:	4b49      	ldr	r3, [pc, #292]	; (8014dd8 <ResetMacParameters+0x238>)
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 8014cb8:	4b47      	ldr	r3, [pc, #284]	; (8014dd8 <ResetMacParameters+0x238>)
 8014cba:	2200      	movs	r2, #0
 8014cbc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8014cc0:	4b45      	ldr	r3, [pc, #276]	; (8014dd8 <ResetMacParameters+0x238>)
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8014cc8:	4b43      	ldr	r3, [pc, #268]	; (8014dd8 <ResetMacParameters+0x238>)
 8014cca:	2200      	movs	r2, #0
 8014ccc:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8014cd0:	4b41      	ldr	r3, [pc, #260]	; (8014dd8 <ResetMacParameters+0x238>)
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8014cd8:	2301      	movs	r3, #1
 8014cda:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8014cdc:	4b40      	ldr	r3, [pc, #256]	; (8014de0 <ResetMacParameters+0x240>)
 8014cde:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8014ce0:	4b40      	ldr	r3, [pc, #256]	; (8014de4 <ResetMacParameters+0x244>)
 8014ce2:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 8014ce4:	4b40      	ldr	r3, [pc, #256]	; (8014de8 <ResetMacParameters+0x248>)
 8014ce6:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8014ce8:	4b3b      	ldr	r3, [pc, #236]	; (8014dd8 <ResetMacParameters+0x238>)
 8014cea:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014cee:	f107 020c 	add.w	r2, r7, #12
 8014cf2:	4611      	mov	r1, r2
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	f004 f9ff 	bl	80190f8 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8014cfa:	4b38      	ldr	r3, [pc, #224]	; (8014ddc <ResetMacParameters+0x23c>)
 8014cfc:	2200      	movs	r2, #0
 8014cfe:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8014d02:	4b36      	ldr	r3, [pc, #216]	; (8014ddc <ResetMacParameters+0x23c>)
 8014d04:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8014d08:	4b34      	ldr	r3, [pc, #208]	; (8014ddc <ResetMacParameters+0x23c>)
 8014d0a:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8014d0e:	4b32      	ldr	r3, [pc, #200]	; (8014dd8 <ResetMacParameters+0x238>)
 8014d10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d12:	4a32      	ldr	r2, [pc, #200]	; (8014ddc <ResetMacParameters+0x23c>)
 8014d14:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014d18:	4b2f      	ldr	r3, [pc, #188]	; (8014dd8 <ResetMacParameters+0x238>)
 8014d1a:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8014d1e:	4b2f      	ldr	r3, [pc, #188]	; (8014ddc <ResetMacParameters+0x23c>)
 8014d20:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8014d24:	4b2c      	ldr	r3, [pc, #176]	; (8014dd8 <ResetMacParameters+0x238>)
 8014d26:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8014d2a:	4b2c      	ldr	r3, [pc, #176]	; (8014ddc <ResetMacParameters+0x23c>)
 8014d2c:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8014d30:	4b2a      	ldr	r3, [pc, #168]	; (8014ddc <ResetMacParameters+0x23c>)
 8014d32:	2200      	movs	r2, #0
 8014d34:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8014d38:	4b28      	ldr	r3, [pc, #160]	; (8014ddc <ResetMacParameters+0x23c>)
 8014d3a:	2201      	movs	r2, #1
 8014d3c:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8014d40:	4b25      	ldr	r3, [pc, #148]	; (8014dd8 <ResetMacParameters+0x238>)
 8014d42:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8014d46:	4b25      	ldr	r3, [pc, #148]	; (8014ddc <ResetMacParameters+0x23c>)
 8014d48:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8014d4c:	4a23      	ldr	r2, [pc, #140]	; (8014ddc <ResetMacParameters+0x23c>)
 8014d4e:	4b23      	ldr	r3, [pc, #140]	; (8014ddc <ResetMacParameters+0x23c>)
 8014d50:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 8014d54:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 8014d58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014d5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014d5c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014d60:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8014d64:	4b1d      	ldr	r3, [pc, #116]	; (8014ddc <ResetMacParameters+0x23c>)
 8014d66:	2201      	movs	r2, #1
 8014d68:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8014d6c:	4b1b      	ldr	r3, [pc, #108]	; (8014ddc <ResetMacParameters+0x23c>)
 8014d6e:	2202      	movs	r2, #2
 8014d70:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8014d74:	2300      	movs	r3, #0
 8014d76:	643b      	str	r3, [r7, #64]	; 0x40
    classBCallbacks.MacProcessNotify = NULL;
 8014d78:	2300      	movs	r3, #0
 8014d7a:	647b      	str	r3, [r7, #68]	; 0x44

    if( MacCtx.MacCallbacks != NULL )
 8014d7c:	4b17      	ldr	r3, [pc, #92]	; (8014ddc <ResetMacParameters+0x23c>)
 8014d7e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d009      	beq.n	8014d9a <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8014d86:	4b15      	ldr	r3, [pc, #84]	; (8014ddc <ResetMacParameters+0x23c>)
 8014d88:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014d8c:	685b      	ldr	r3, [r3, #4]
 8014d8e:	643b      	str	r3, [r7, #64]	; 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8014d90:	4b12      	ldr	r3, [pc, #72]	; (8014ddc <ResetMacParameters+0x23c>)
 8014d92:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014d96:	695b      	ldr	r3, [r3, #20]
 8014d98:	647b      	str	r3, [r7, #68]	; 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8014d9a:	4b14      	ldr	r3, [pc, #80]	; (8014dec <ResetMacParameters+0x24c>)
 8014d9c:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8014d9e:	4b14      	ldr	r3, [pc, #80]	; (8014df0 <ResetMacParameters+0x250>)
 8014da0:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8014da2:	4b14      	ldr	r3, [pc, #80]	; (8014df4 <ResetMacParameters+0x254>)
 8014da4:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8014da6:	4b14      	ldr	r3, [pc, #80]	; (8014df8 <ResetMacParameters+0x258>)
 8014da8:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8014daa:	4b14      	ldr	r3, [pc, #80]	; (8014dfc <ResetMacParameters+0x25c>)
 8014dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8014dae:	4b14      	ldr	r3, [pc, #80]	; (8014e00 <ResetMacParameters+0x260>)
 8014db0:	633b      	str	r3, [r7, #48]	; 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8014db2:	4b14      	ldr	r3, [pc, #80]	; (8014e04 <ResetMacParameters+0x264>)
 8014db4:	637b      	str	r3, [r7, #52]	; 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8014db6:	4b14      	ldr	r3, [pc, #80]	; (8014e08 <ResetMacParameters+0x268>)
 8014db8:	63bb      	str	r3, [r7, #56]	; 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8014dba:	4b14      	ldr	r3, [pc, #80]	; (8014e0c <ResetMacParameters+0x26c>)
 8014dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8014dbe:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8014dc2:	f107 031c 	add.w	r3, r7, #28
 8014dc6:	4a12      	ldr	r2, [pc, #72]	; (8014e10 <ResetMacParameters+0x270>)
 8014dc8:	4618      	mov	r0, r3
 8014dca:	f002 f996 	bl	80170fa <LoRaMacClassBInit>
}
 8014dce:	bf00      	nop
 8014dd0:	3748      	adds	r7, #72	; 0x48
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8014dd6:	bf00      	nop
 8014dd8:	20000e18 	.word	0x20000e18
 8014ddc:	200008fc 	.word	0x200008fc
 8014de0:	2000103c 	.word	0x2000103c
 8014de4:	20001050 	.word	0x20001050
 8014de8:	200019b0 	.word	0x200019b0
 8014dec:	20000d64 	.word	0x20000d64
 8014df0:	20000d1c 	.word	0x20000d1c
 8014df4:	20000d50 	.word	0x20000d50
 8014df8:	20000d8d 	.word	0x20000d8d
 8014dfc:	20000efc 	.word	0x20000efc
 8014e00:	20000e60 	.word	0x20000e60
 8014e04:	20000e64 	.word	0x20000e64
 8014e08:	20000f00 	.word	0x20000f00
 8014e0c:	20000f48 	.word	0x20000f48
 8014e10:	200013cc 	.word	0x200013cc

08014e14 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b082      	sub	sp, #8
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	6078      	str	r0, [r7, #4]
 8014e1c:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8014e1e:	6878      	ldr	r0, [r7, #4]
 8014e20:	f00a feb4 	bl	801fb8c <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8014e24:	4b11      	ldr	r3, [pc, #68]	; (8014e6c <RxWindowSetup+0x58>)
 8014e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e28:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8014e2a:	4b11      	ldr	r3, [pc, #68]	; (8014e70 <RxWindowSetup+0x5c>)
 8014e2c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014e30:	4a10      	ldr	r2, [pc, #64]	; (8014e74 <RxWindowSetup+0x60>)
 8014e32:	6839      	ldr	r1, [r7, #0]
 8014e34:	4618      	mov	r0, r3
 8014e36:	f004 f9c7 	bl	80191c8 <RegionRxConfig>
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d010      	beq.n	8014e62 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8014e40:	4b0d      	ldr	r3, [pc, #52]	; (8014e78 <RxWindowSetup+0x64>)
 8014e42:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 8014e46:	4b0c      	ldr	r3, [pc, #48]	; (8014e78 <RxWindowSetup+0x64>)
 8014e48:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8014e4c:	4b07      	ldr	r3, [pc, #28]	; (8014e6c <RxWindowSetup+0x58>)
 8014e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e50:	4a07      	ldr	r2, [pc, #28]	; (8014e70 <RxWindowSetup+0x5c>)
 8014e52:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8014e54:	4610      	mov	r0, r2
 8014e56:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8014e58:	683b      	ldr	r3, [r7, #0]
 8014e5a:	7cda      	ldrb	r2, [r3, #19]
 8014e5c:	4b06      	ldr	r3, [pc, #24]	; (8014e78 <RxWindowSetup+0x64>)
 8014e5e:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 8014e62:	bf00      	nop
 8014e64:	3708      	adds	r7, #8
 8014e66:	46bd      	mov	sp, r7
 8014e68:	bd80      	pop	{r7, pc}
 8014e6a:	bf00      	nop
 8014e6c:	08021dfc 	.word	0x08021dfc
 8014e70:	20000e18 	.word	0x20000e18
 8014e74:	20000d20 	.word	0x20000d20
 8014e78:	200008fc 	.word	0x200008fc

08014e7c <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8014e7c:	b590      	push	{r4, r7, lr}
 8014e7e:	b083      	sub	sp, #12
 8014e80:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8014e82:	4b1e      	ldr	r3, [pc, #120]	; (8014efc <OpenContinuousRxCWindow+0x80>)
 8014e84:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8014e88:	4b1c      	ldr	r3, [pc, #112]	; (8014efc <OpenContinuousRxCWindow+0x80>)
 8014e8a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8014e8e:	b259      	sxtb	r1, r3
 8014e90:	4b1a      	ldr	r3, [pc, #104]	; (8014efc <OpenContinuousRxCWindow+0x80>)
 8014e92:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8014e96:	4b19      	ldr	r3, [pc, #100]	; (8014efc <OpenContinuousRxCWindow+0x80>)
 8014e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014e9a:	4c19      	ldr	r4, [pc, #100]	; (8014f00 <OpenContinuousRxCWindow+0x84>)
 8014e9c:	9400      	str	r4, [sp, #0]
 8014e9e:	f004 f979 	bl	8019194 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8014ea2:	4b18      	ldr	r3, [pc, #96]	; (8014f04 <OpenContinuousRxCWindow+0x88>)
 8014ea4:	2202      	movs	r2, #2
 8014ea6:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8014eaa:	4b14      	ldr	r3, [pc, #80]	; (8014efc <OpenContinuousRxCWindow+0x80>)
 8014eac:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8014eb0:	4b14      	ldr	r3, [pc, #80]	; (8014f04 <OpenContinuousRxCWindow+0x88>)
 8014eb2:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8014eb6:	4b13      	ldr	r3, [pc, #76]	; (8014f04 <OpenContinuousRxCWindow+0x88>)
 8014eb8:	2201      	movs	r2, #1
 8014eba:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8014ebe:	4b0f      	ldr	r3, [pc, #60]	; (8014efc <OpenContinuousRxCWindow+0x80>)
 8014ec0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014ec4:	4a10      	ldr	r2, [pc, #64]	; (8014f08 <OpenContinuousRxCWindow+0x8c>)
 8014ec6:	490e      	ldr	r1, [pc, #56]	; (8014f00 <OpenContinuousRxCWindow+0x84>)
 8014ec8:	4618      	mov	r0, r3
 8014eca:	f004 f97d 	bl	80191c8 <RegionRxConfig>
 8014ece:	4603      	mov	r3, r0
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d00f      	beq.n	8014ef4 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8014ed4:	4b0b      	ldr	r3, [pc, #44]	; (8014f04 <OpenContinuousRxCWindow+0x88>)
 8014ed6:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 8014eda:	4b0a      	ldr	r3, [pc, #40]	; (8014f04 <OpenContinuousRxCWindow+0x88>)
 8014edc:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( 0 ); // Continuous mode
 8014ee0:	4b0a      	ldr	r3, [pc, #40]	; (8014f0c <OpenContinuousRxCWindow+0x90>)
 8014ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ee4:	2000      	movs	r0, #0
 8014ee6:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8014ee8:	4b06      	ldr	r3, [pc, #24]	; (8014f04 <OpenContinuousRxCWindow+0x88>)
 8014eea:	f893 23fb 	ldrb.w	r2, [r3, #1019]	; 0x3fb
 8014eee:	4b05      	ldr	r3, [pc, #20]	; (8014f04 <OpenContinuousRxCWindow+0x88>)
 8014ef0:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 8014ef4:	bf00      	nop
 8014ef6:	3704      	adds	r7, #4
 8014ef8:	46bd      	mov	sp, r7
 8014efa:	bd90      	pop	{r4, r7, pc}
 8014efc:	20000e18 	.word	0x20000e18
 8014f00:	20000ce4 	.word	0x20000ce4
 8014f04:	200008fc 	.word	0x200008fc
 8014f08:	20000d20 	.word	0x20000d20
 8014f0c:	08021dfc 	.word	0x08021dfc

08014f10 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b088      	sub	sp, #32
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	60f8      	str	r0, [r7, #12]
 8014f18:	60b9      	str	r1, [r7, #8]
 8014f1a:	603b      	str	r3, [r7, #0]
 8014f1c:	4613      	mov	r3, r2
 8014f1e:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8014f20:	4b82      	ldr	r3, [pc, #520]	; (801512c <PrepareFrame+0x21c>)
 8014f22:	2200      	movs	r2, #0
 8014f24:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8014f26:	4b81      	ldr	r3, [pc, #516]	; (801512c <PrepareFrame+0x21c>)
 8014f28:	2200      	movs	r2, #0
 8014f2a:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    uint32_t fCntUp = 0;
 8014f2e:	2300      	movs	r3, #0
 8014f30:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8014f32:	2300      	movs	r3, #0
 8014f34:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8014f36:	2300      	movs	r3, #0
 8014f38:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8014f3a:	683b      	ldr	r3, [r7, #0]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d101      	bne.n	8014f44 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8014f40:	2300      	movs	r3, #0
 8014f42:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8014f44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014f46:	461a      	mov	r2, r3
 8014f48:	6839      	ldr	r1, [r7, #0]
 8014f4a:	4879      	ldr	r0, [pc, #484]	; (8015130 <PrepareFrame+0x220>)
 8014f4c:	f006 fc63 	bl	801b816 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8014f50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014f52:	b2da      	uxtb	r2, r3
 8014f54:	4b75      	ldr	r3, [pc, #468]	; (801512c <PrepareFrame+0x21c>)
 8014f56:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	781a      	ldrb	r2, [r3, #0]
 8014f5e:	4b73      	ldr	r3, [pc, #460]	; (801512c <PrepareFrame+0x21c>)
 8014f60:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	781b      	ldrb	r3, [r3, #0]
 8014f66:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8014f6a:	b2db      	uxtb	r3, r3
 8014f6c:	2b07      	cmp	r3, #7
 8014f6e:	f000 80b9 	beq.w	80150e4 <PrepareFrame+0x1d4>
 8014f72:	2b07      	cmp	r3, #7
 8014f74:	f300 80d0 	bgt.w	8015118 <PrepareFrame+0x208>
 8014f78:	2b02      	cmp	r3, #2
 8014f7a:	d006      	beq.n	8014f8a <PrepareFrame+0x7a>
 8014f7c:	2b04      	cmp	r3, #4
 8014f7e:	f040 80cb 	bne.w	8015118 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8014f82:	4b6a      	ldr	r3, [pc, #424]	; (801512c <PrepareFrame+0x21c>)
 8014f84:	2201      	movs	r2, #1
 8014f86:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8014f8a:	4b68      	ldr	r3, [pc, #416]	; (801512c <PrepareFrame+0x21c>)
 8014f8c:	2204      	movs	r2, #4
 8014f8e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8014f92:	4b66      	ldr	r3, [pc, #408]	; (801512c <PrepareFrame+0x21c>)
 8014f94:	4a67      	ldr	r2, [pc, #412]	; (8015134 <PrepareFrame+0x224>)
 8014f96:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8014f9a:	4b64      	ldr	r3, [pc, #400]	; (801512c <PrepareFrame+0x21c>)
 8014f9c:	22ff      	movs	r2, #255	; 0xff
 8014f9e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	781a      	ldrb	r2, [r3, #0]
 8014fa6:	4b61      	ldr	r3, [pc, #388]	; (801512c <PrepareFrame+0x21c>)
 8014fa8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8014fac:	4a5f      	ldr	r2, [pc, #380]	; (801512c <PrepareFrame+0x21c>)
 8014fae:	79fb      	ldrb	r3, [r7, #7]
 8014fb0:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8014fb4:	4b60      	ldr	r3, [pc, #384]	; (8015138 <PrepareFrame+0x228>)
 8014fb6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8014fba:	4a5c      	ldr	r2, [pc, #368]	; (801512c <PrepareFrame+0x21c>)
 8014fbc:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8014fc0:	68bb      	ldr	r3, [r7, #8]
 8014fc2:	781a      	ldrb	r2, [r3, #0]
 8014fc4:	4b59      	ldr	r3, [pc, #356]	; (801512c <PrepareFrame+0x21c>)
 8014fc6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8014fca:	4b58      	ldr	r3, [pc, #352]	; (801512c <PrepareFrame+0x21c>)
 8014fcc:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8014fd0:	4b56      	ldr	r3, [pc, #344]	; (801512c <PrepareFrame+0x21c>)
 8014fd2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8014fd6:	4b55      	ldr	r3, [pc, #340]	; (801512c <PrepareFrame+0x21c>)
 8014fd8:	4a55      	ldr	r2, [pc, #340]	; (8015130 <PrepareFrame+0x220>)
 8014fda:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8014fde:	f107 0318 	add.w	r3, r7, #24
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	f003 f9dc 	bl	80183a0 <LoRaMacCryptoGetFCntUp>
 8014fe8:	4603      	mov	r3, r0
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d001      	beq.n	8014ff2 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8014fee:	2312      	movs	r3, #18
 8014ff0:	e098      	b.n	8015124 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8014ff2:	69bb      	ldr	r3, [r7, #24]
 8014ff4:	b29a      	uxth	r2, r3
 8014ff6:	4b4d      	ldr	r3, [pc, #308]	; (801512c <PrepareFrame+0x21c>)
 8014ff8:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 8014ffc:	4b4b      	ldr	r3, [pc, #300]	; (801512c <PrepareFrame+0x21c>)
 8014ffe:	2200      	movs	r2, #0
 8015000:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8015004:	4b49      	ldr	r3, [pc, #292]	; (801512c <PrepareFrame+0x21c>)
 8015006:	2200      	movs	r2, #0
 8015008:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 801500c:	69bb      	ldr	r3, [r7, #24]
 801500e:	4a47      	ldr	r2, [pc, #284]	; (801512c <PrepareFrame+0x21c>)
 8015010:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8015014:	f107 0314 	add.w	r3, r7, #20
 8015018:	4618      	mov	r0, r3
 801501a:	f002 fb8d 	bl	8017738 <LoRaMacCommandsGetSizeSerializedCmds>
 801501e:	4603      	mov	r3, r0
 8015020:	2b00      	cmp	r3, #0
 8015022:	d001      	beq.n	8015028 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015024:	2313      	movs	r3, #19
 8015026:	e07d      	b.n	8015124 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8015028:	697b      	ldr	r3, [r7, #20]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d076      	beq.n	801511c <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 801502e:	4b42      	ldr	r3, [pc, #264]	; (8015138 <PrepareFrame+0x228>)
 8015030:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8015034:	4618      	mov	r0, r3
 8015036:	f7fe fd2b 	bl	8013a90 <GetMaxAppPayloadWithoutFOptsLength>
 801503a:	4603      	mov	r3, r0
 801503c:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801503e:	4b3b      	ldr	r3, [pc, #236]	; (801512c <PrepareFrame+0x21c>)
 8015040:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8015044:	2b00      	cmp	r3, #0
 8015046:	d01d      	beq.n	8015084 <PrepareFrame+0x174>
 8015048:	697b      	ldr	r3, [r7, #20]
 801504a:	2b0f      	cmp	r3, #15
 801504c:	d81a      	bhi.n	8015084 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 801504e:	f107 0314 	add.w	r3, r7, #20
 8015052:	4a3a      	ldr	r2, [pc, #232]	; (801513c <PrepareFrame+0x22c>)
 8015054:	4619      	mov	r1, r3
 8015056:	200f      	movs	r0, #15
 8015058:	f002 fb84 	bl	8017764 <LoRaMacCommandsSerializeCmds>
 801505c:	4603      	mov	r3, r0
 801505e:	2b00      	cmp	r3, #0
 8015060:	d001      	beq.n	8015066 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015062:	2313      	movs	r3, #19
 8015064:	e05e      	b.n	8015124 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8015066:	697b      	ldr	r3, [r7, #20]
 8015068:	f003 030f 	and.w	r3, r3, #15
 801506c:	b2d9      	uxtb	r1, r3
 801506e:	68ba      	ldr	r2, [r7, #8]
 8015070:	7813      	ldrb	r3, [r2, #0]
 8015072:	f361 0303 	bfi	r3, r1, #0, #4
 8015076:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8015078:	68bb      	ldr	r3, [r7, #8]
 801507a:	781a      	ldrb	r2, [r3, #0]
 801507c:	4b2b      	ldr	r3, [pc, #172]	; (801512c <PrepareFrame+0x21c>)
 801507e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8015082:	e04b      	b.n	801511c <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8015084:	4b29      	ldr	r3, [pc, #164]	; (801512c <PrepareFrame+0x21c>)
 8015086:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801508a:	2b00      	cmp	r3, #0
 801508c:	d010      	beq.n	80150b0 <PrepareFrame+0x1a0>
 801508e:	697b      	ldr	r3, [r7, #20]
 8015090:	2b0f      	cmp	r3, #15
 8015092:	d90d      	bls.n	80150b0 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8015094:	7ffb      	ldrb	r3, [r7, #31]
 8015096:	f107 0114 	add.w	r1, r7, #20
 801509a:	4a29      	ldr	r2, [pc, #164]	; (8015140 <PrepareFrame+0x230>)
 801509c:	4618      	mov	r0, r3
 801509e:	f002 fb61 	bl	8017764 <LoRaMacCommandsSerializeCmds>
 80150a2:	4603      	mov	r3, r0
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d001      	beq.n	80150ac <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80150a8:	2313      	movs	r3, #19
 80150aa:	e03b      	b.n	8015124 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 80150ac:	230a      	movs	r3, #10
 80150ae:	e039      	b.n	8015124 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80150b0:	7ffb      	ldrb	r3, [r7, #31]
 80150b2:	f107 0114 	add.w	r1, r7, #20
 80150b6:	4a22      	ldr	r2, [pc, #136]	; (8015140 <PrepareFrame+0x230>)
 80150b8:	4618      	mov	r0, r3
 80150ba:	f002 fb53 	bl	8017764 <LoRaMacCommandsSerializeCmds>
 80150be:	4603      	mov	r3, r0
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d001      	beq.n	80150c8 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80150c4:	2313      	movs	r3, #19
 80150c6:	e02d      	b.n	8015124 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80150c8:	4b18      	ldr	r3, [pc, #96]	; (801512c <PrepareFrame+0x21c>)
 80150ca:	2200      	movs	r2, #0
 80150cc:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80150d0:	4b16      	ldr	r3, [pc, #88]	; (801512c <PrepareFrame+0x21c>)
 80150d2:	4a1b      	ldr	r2, [pc, #108]	; (8015140 <PrepareFrame+0x230>)
 80150d4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80150d8:	697b      	ldr	r3, [r7, #20]
 80150da:	b2da      	uxtb	r2, r3
 80150dc:	4b13      	ldr	r3, [pc, #76]	; (801512c <PrepareFrame+0x21c>)
 80150de:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 80150e2:	e01b      	b.n	801511c <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80150e4:	683b      	ldr	r3, [r7, #0]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d01a      	beq.n	8015120 <PrepareFrame+0x210>
 80150ea:	4b10      	ldr	r3, [pc, #64]	; (801512c <PrepareFrame+0x21c>)
 80150ec:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d015      	beq.n	8015120 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80150f4:	4813      	ldr	r0, [pc, #76]	; (8015144 <PrepareFrame+0x234>)
 80150f6:	4b0d      	ldr	r3, [pc, #52]	; (801512c <PrepareFrame+0x21c>)
 80150f8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80150fc:	b29b      	uxth	r3, r3
 80150fe:	461a      	mov	r2, r3
 8015100:	6839      	ldr	r1, [r7, #0]
 8015102:	f006 fb88 	bl	801b816 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8015106:	4b09      	ldr	r3, [pc, #36]	; (801512c <PrepareFrame+0x21c>)
 8015108:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801510c:	b29b      	uxth	r3, r3
 801510e:	3301      	adds	r3, #1
 8015110:	b29a      	uxth	r2, r3
 8015112:	4b06      	ldr	r3, [pc, #24]	; (801512c <PrepareFrame+0x21c>)
 8015114:	801a      	strh	r2, [r3, #0]
            }
            break;
 8015116:	e003      	b.n	8015120 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015118:	2302      	movs	r3, #2
 801511a:	e003      	b.n	8015124 <PrepareFrame+0x214>
            break;
 801511c:	bf00      	nop
 801511e:	e000      	b.n	8015122 <PrepareFrame+0x212>
            break;
 8015120:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8015122:	2300      	movs	r3, #0
}
 8015124:	4618      	mov	r0, r3
 8015126:	3720      	adds	r7, #32
 8015128:	46bd      	mov	sp, r7
 801512a:	bd80      	pop	{r7, pc}
 801512c:	200008fc 	.word	0x200008fc
 8015130:	20000a34 	.word	0x20000a34
 8015134:	200008fe 	.word	0x200008fe
 8015138:	20000e18 	.word	0x20000e18
 801513c:	20000a14 	.word	0x20000a14
 8015140:	20000d98 	.word	0x20000d98
 8015144:	200008ff 	.word	0x200008ff

08015148 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b08a      	sub	sp, #40	; 0x28
 801514c:	af00      	add	r7, sp, #0
 801514e:	4603      	mov	r3, r0
 8015150:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015152:	2303      	movs	r3, #3
 8015154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8015158:	2300      	movs	r3, #0
 801515a:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 801515c:	79fb      	ldrb	r3, [r7, #7]
 801515e:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8015160:	4b4b      	ldr	r3, [pc, #300]	; (8015290 <SendFrameOnChannel+0x148>)
 8015162:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8015166:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8015168:	4b49      	ldr	r3, [pc, #292]	; (8015290 <SendFrameOnChannel+0x148>)
 801516a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801516e:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8015170:	4b47      	ldr	r3, [pc, #284]	; (8015290 <SendFrameOnChannel+0x148>)
 8015172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015176:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8015178:	4b45      	ldr	r3, [pc, #276]	; (8015290 <SendFrameOnChannel+0x148>)
 801517a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801517e:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8015180:	4b44      	ldr	r3, [pc, #272]	; (8015294 <SendFrameOnChannel+0x14c>)
 8015182:	881b      	ldrh	r3, [r3, #0]
 8015184:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8015186:	4b42      	ldr	r3, [pc, #264]	; (8015290 <SendFrameOnChannel+0x148>)
 8015188:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 801518c:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 801518e:	4b40      	ldr	r3, [pc, #256]	; (8015290 <SendFrameOnChannel+0x148>)
 8015190:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8015194:	f107 020f 	add.w	r2, r7, #15
 8015198:	f107 0110 	add.w	r1, r7, #16
 801519c:	4b3e      	ldr	r3, [pc, #248]	; (8015298 <SendFrameOnChannel+0x150>)
 801519e:	f004 f828 	bl	80191f2 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80151a2:	4b3c      	ldr	r3, [pc, #240]	; (8015294 <SendFrameOnChannel+0x14c>)
 80151a4:	2201      	movs	r2, #1
 80151a6:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80151aa:	4b39      	ldr	r3, [pc, #228]	; (8015290 <SendFrameOnChannel+0x148>)
 80151ac:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80151b0:	b2da      	uxtb	r2, r3
 80151b2:	4b38      	ldr	r3, [pc, #224]	; (8015294 <SendFrameOnChannel+0x14c>)
 80151b4:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 80151b8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80151bc:	4b35      	ldr	r3, [pc, #212]	; (8015294 <SendFrameOnChannel+0x14c>)
 80151be:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
    MacCtx.McpsConfirm.Channel = channel;
 80151c2:	79fb      	ldrb	r3, [r7, #7]
 80151c4:	4a33      	ldr	r2, [pc, #204]	; (8015294 <SendFrameOnChannel+0x14c>)
 80151c6:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80151ca:	4b32      	ldr	r3, [pc, #200]	; (8015294 <SendFrameOnChannel+0x14c>)
 80151cc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80151d0:	4a30      	ldr	r2, [pc, #192]	; (8015294 <SendFrameOnChannel+0x14c>)
 80151d2:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80151d6:	4b2f      	ldr	r3, [pc, #188]	; (8015294 <SendFrameOnChannel+0x14c>)
 80151d8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80151dc:	4a2d      	ldr	r2, [pc, #180]	; (8015294 <SendFrameOnChannel+0x14c>)
 80151de:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80151e2:	f001 fff6 	bl	80171d2 <LoRaMacClassBIsBeaconModeActive>
 80151e6:	4603      	mov	r3, r0
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d00b      	beq.n	8015204 <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80151ec:	4b29      	ldr	r3, [pc, #164]	; (8015294 <SendFrameOnChannel+0x14c>)
 80151ee:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80151f2:	4618      	mov	r0, r3
 80151f4:	f002 f858 	bl	80172a8 <LoRaMacClassBIsUplinkCollision>
 80151f8:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 80151fa:	6a3b      	ldr	r3, [r7, #32]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d001      	beq.n	8015204 <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8015200:	2310      	movs	r3, #16
 8015202:	e040      	b.n	8015286 <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8015204:	4b22      	ldr	r3, [pc, #136]	; (8015290 <SendFrameOnChannel+0x148>)
 8015206:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801520a:	2b01      	cmp	r3, #1
 801520c:	d101      	bne.n	8015212 <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 801520e:	f002 f855 	bl	80172bc <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8015212:	f001 ffef 	bl	80171f4 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8015216:	4b1e      	ldr	r3, [pc, #120]	; (8015290 <SendFrameOnChannel+0x148>)
 8015218:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801521c:	b2db      	uxtb	r3, r3
 801521e:	4a1d      	ldr	r2, [pc, #116]	; (8015294 <SendFrameOnChannel+0x14c>)
 8015220:	f892 241b 	ldrb.w	r2, [r2, #1051]	; 0x41b
 8015224:	4611      	mov	r1, r2
 8015226:	4618      	mov	r0, r3
 8015228:	f7ff fc2a 	bl	8014a80 <SecureFrame>
 801522c:	4603      	mov	r3, r0
 801522e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8015232:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015236:	2b00      	cmp	r3, #0
 8015238:	d002      	beq.n	8015240 <SendFrameOnChannel+0xf8>
    {
        return status;
 801523a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801523e:	e022      	b.n	8015286 <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8015240:	4b14      	ldr	r3, [pc, #80]	; (8015294 <SendFrameOnChannel+0x14c>)
 8015242:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8015246:	f043 0302 	orr.w	r3, r3, #2
 801524a:	4a12      	ldr	r2, [pc, #72]	; (8015294 <SendFrameOnChannel+0x14c>)
 801524c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 8015250:	4b10      	ldr	r3, [pc, #64]	; (8015294 <SendFrameOnChannel+0x14c>)
 8015252:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015256:	3301      	adds	r3, #1
 8015258:	b2da      	uxtb	r2, r3
 801525a:	4b0e      	ldr	r3, [pc, #56]	; (8015294 <SendFrameOnChannel+0x14c>)
 801525c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8015260:	4b0c      	ldr	r3, [pc, #48]	; (8015294 <SendFrameOnChannel+0x14c>)
 8015262:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015266:	4b0b      	ldr	r3, [pc, #44]	; (8015294 <SendFrameOnChannel+0x14c>)
 8015268:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 801526c:	4b09      	ldr	r3, [pc, #36]	; (8015294 <SendFrameOnChannel+0x14c>)
 801526e:	2200      	movs	r2, #0
 8015270:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8015274:	4b09      	ldr	r3, [pc, #36]	; (801529c <SendFrameOnChannel+0x154>)
 8015276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015278:	4a06      	ldr	r2, [pc, #24]	; (8015294 <SendFrameOnChannel+0x14c>)
 801527a:	8812      	ldrh	r2, [r2, #0]
 801527c:	b2d2      	uxtb	r2, r2
 801527e:	4611      	mov	r1, r2
 8015280:	4807      	ldr	r0, [pc, #28]	; (80152a0 <SendFrameOnChannel+0x158>)
 8015282:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8015284:	2300      	movs	r3, #0
}
 8015286:	4618      	mov	r0, r3
 8015288:	3728      	adds	r7, #40	; 0x28
 801528a:	46bd      	mov	sp, r7
 801528c:	bd80      	pop	{r7, pc}
 801528e:	bf00      	nop
 8015290:	20000e18 	.word	0x20000e18
 8015294:	200008fc 	.word	0x200008fc
 8015298:	20000d18 	.word	0x20000d18
 801529c:	08021dfc 	.word	0x08021dfc
 80152a0:	200008fe 	.word	0x200008fe

080152a4 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b082      	sub	sp, #8
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	4603      	mov	r3, r0
 80152ac:	6039      	str	r1, [r7, #0]
 80152ae:	80fb      	strh	r3, [r7, #6]
 80152b0:	4613      	mov	r3, r2
 80152b2:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80152b4:	4b09      	ldr	r3, [pc, #36]	; (80152dc <SetTxContinuousWave+0x38>)
 80152b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80152b8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80152bc:	88fa      	ldrh	r2, [r7, #6]
 80152be:	6838      	ldr	r0, [r7, #0]
 80152c0:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80152c2:	4b07      	ldr	r3, [pc, #28]	; (80152e0 <SetTxContinuousWave+0x3c>)
 80152c4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80152c8:	f043 0302 	orr.w	r3, r3, #2
 80152cc:	4a04      	ldr	r2, [pc, #16]	; (80152e0 <SetTxContinuousWave+0x3c>)
 80152ce:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80152d2:	2300      	movs	r3, #0
}
 80152d4:	4618      	mov	r0, r3
 80152d6:	3708      	adds	r7, #8
 80152d8:	46bd      	mov	sp, r7
 80152da:	bd80      	pop	{r7, pc}
 80152dc:	08021dfc 	.word	0x08021dfc
 80152e0:	200008fc 	.word	0x200008fc

080152e4 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 80152e4:	b580      	push	{r7, lr}
 80152e6:	b082      	sub	sp, #8
 80152e8:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 80152ea:	2300      	movs	r3, #0
 80152ec:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80152ee:	4b49      	ldr	r3, [pc, #292]	; (8015414 <RestoreNvmData+0x130>)
 80152f0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80152f4:	2b01      	cmp	r3, #1
 80152f6:	d001      	beq.n	80152fc <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 80152f8:	2301      	movs	r3, #1
 80152fa:	e087      	b.n	801540c <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 80152fc:	2124      	movs	r1, #36	; 0x24
 80152fe:	4846      	ldr	r0, [pc, #280]	; (8015418 <RestoreNvmData+0x134>)
 8015300:	f006 fade 	bl	801b8c0 <Crc32>
 8015304:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8015306:	4b44      	ldr	r3, [pc, #272]	; (8015418 <RestoreNvmData+0x134>)
 8015308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801530a:	687a      	ldr	r2, [r7, #4]
 801530c:	429a      	cmp	r2, r3
 801530e:	d001      	beq.n	8015314 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8015310:	2317      	movs	r3, #23
 8015312:	e07b      	b.n	801540c <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8015314:	211c      	movs	r1, #28
 8015316:	4841      	ldr	r0, [pc, #260]	; (801541c <RestoreNvmData+0x138>)
 8015318:	f006 fad2 	bl	801b8c0 <Crc32>
 801531c:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 801531e:	4b3e      	ldr	r3, [pc, #248]	; (8015418 <RestoreNvmData+0x134>)
 8015320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015322:	687a      	ldr	r2, [r7, #4]
 8015324:	429a      	cmp	r2, r3
 8015326:	d001      	beq.n	801532c <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8015328:	2317      	movs	r3, #23
 801532a:	e06f      	b.n	801540c <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 801532c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015330:	483b      	ldr	r0, [pc, #236]	; (8015420 <RestoreNvmData+0x13c>)
 8015332:	f006 fac5 	bl	801b8c0 <Crc32>
 8015336:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8015338:	4b37      	ldr	r3, [pc, #220]	; (8015418 <RestoreNvmData+0x134>)
 801533a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 801533e:	687a      	ldr	r2, [r7, #4]
 8015340:	429a      	cmp	r2, r3
 8015342:	d001      	beq.n	8015348 <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8015344:	2317      	movs	r3, #23
 8015346:	e061      	b.n	801540c <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8015348:	21d4      	movs	r1, #212	; 0xd4
 801534a:	4836      	ldr	r0, [pc, #216]	; (8015424 <RestoreNvmData+0x140>)
 801534c:	f006 fab8 	bl	801b8c0 <Crc32>
 8015350:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8015352:	4b31      	ldr	r3, [pc, #196]	; (8015418 <RestoreNvmData+0x134>)
 8015354:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8015358:	687a      	ldr	r2, [r7, #4]
 801535a:	429a      	cmp	r2, r3
 801535c:	d001      	beq.n	8015362 <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801535e:	2317      	movs	r3, #23
 8015360:	e054      	b.n	801540c <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8015362:	2110      	movs	r1, #16
 8015364:	4830      	ldr	r0, [pc, #192]	; (8015428 <RestoreNvmData+0x144>)
 8015366:	f006 faab 	bl	801b8c0 <Crc32>
 801536a:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 801536c:	4b2a      	ldr	r3, [pc, #168]	; (8015418 <RestoreNvmData+0x134>)
 801536e:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8015372:	687a      	ldr	r2, [r7, #4]
 8015374:	429a      	cmp	r2, r3
 8015376:	d001      	beq.n	801537c <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8015378:	2317      	movs	r3, #23
 801537a:	e047      	b.n	801540c <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 801537c:	f44f 715e 	mov.w	r1, #888	; 0x378
 8015380:	482a      	ldr	r0, [pc, #168]	; (801542c <RestoreNvmData+0x148>)
 8015382:	f006 fa9d 	bl	801b8c0 <Crc32>
 8015386:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 8015388:	4b23      	ldr	r3, [pc, #140]	; (8015418 <RestoreNvmData+0x134>)
 801538a:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 801538e:	687a      	ldr	r2, [r7, #4]
 8015390:	429a      	cmp	r2, r3
 8015392:	d001      	beq.n	8015398 <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8015394:	2317      	movs	r3, #23
 8015396:	e039      	b.n	801540c <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8015398:	2114      	movs	r1, #20
 801539a:	4825      	ldr	r0, [pc, #148]	; (8015430 <RestoreNvmData+0x14c>)
 801539c:	f006 fa90 	bl	801b8c0 <Crc32>
 80153a0:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 80153a2:	4b1d      	ldr	r3, [pc, #116]	; (8015418 <RestoreNvmData+0x134>)
 80153a4:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 80153a8:	687a      	ldr	r2, [r7, #4]
 80153aa:	429a      	cmp	r2, r3
 80153ac:	d001      	beq.n	80153b2 <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80153ae:	2317      	movs	r3, #23
 80153b0:	e02c      	b.n	801540c <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 80153b2:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80153b6:	4918      	ldr	r1, [pc, #96]	; (8015418 <RestoreNvmData+0x134>)
 80153b8:	481e      	ldr	r0, [pc, #120]	; (8015434 <RestoreNvmData+0x150>)
 80153ba:	f006 fa2c 	bl	801b816 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 80153be:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80153c2:	2100      	movs	r1, #0
 80153c4:	4814      	ldr	r0, [pc, #80]	; (8015418 <RestoreNvmData+0x134>)
 80153c6:	f006 fa61 	bl	801b88c <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80153ca:	4b12      	ldr	r3, [pc, #72]	; (8015414 <RestoreNvmData+0x130>)
 80153cc:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 80153d0:	4b10      	ldr	r3, [pc, #64]	; (8015414 <RestoreNvmData+0x130>)
 80153d2:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80153d6:	4b17      	ldr	r3, [pc, #92]	; (8015434 <RestoreNvmData+0x150>)
 80153d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80153da:	4a0e      	ldr	r2, [pc, #56]	; (8015414 <RestoreNvmData+0x130>)
 80153dc:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80153e0:	4b14      	ldr	r3, [pc, #80]	; (8015434 <RestoreNvmData+0x150>)
 80153e2:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80153e6:	4b0b      	ldr	r3, [pc, #44]	; (8015414 <RestoreNvmData+0x130>)
 80153e8:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80153ec:	4b09      	ldr	r3, [pc, #36]	; (8015414 <RestoreNvmData+0x130>)
 80153ee:	2201      	movs	r2, #1
 80153f0:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80153f4:	4b07      	ldr	r3, [pc, #28]	; (8015414 <RestoreNvmData+0x130>)
 80153f6:	2202      	movs	r2, #2
 80153f8:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80153fc:	4b0e      	ldr	r3, [pc, #56]	; (8015438 <RestoreNvmData+0x154>)
 80153fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015400:	4a0c      	ldr	r2, [pc, #48]	; (8015434 <RestoreNvmData+0x150>)
 8015402:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8015406:	4610      	mov	r0, r2
 8015408:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 801540a:	2300      	movs	r3, #0
}
 801540c:	4618      	mov	r0, r3
 801540e:	3708      	adds	r7, #8
 8015410:	46bd      	mov	sp, r7
 8015412:	bd80      	pop	{r7, pc}
 8015414:	200008fc 	.word	0x200008fc
 8015418:	200013e4 	.word	0x200013e4
 801541c:	2000140c 	.word	0x2000140c
 8015420:	2000142c 	.word	0x2000142c
 8015424:	20001530 	.word	0x20001530
 8015428:	20001608 	.word	0x20001608
 801542c:	2000161c 	.word	0x2000161c
 8015430:	20001998 	.word	0x20001998
 8015434:	20000e18 	.word	0x20000e18
 8015438:	08021dfc 	.word	0x08021dfc

0801543c <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 801543c:	b480      	push	{r7}
 801543e:	b083      	sub	sp, #12
 8015440:	af00      	add	r7, sp, #0
 8015442:	6078      	str	r0, [r7, #4]
 8015444:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d002      	beq.n	8015452 <DetermineFrameType+0x16>
 801544c:	683b      	ldr	r3, [r7, #0]
 801544e:	2b00      	cmp	r3, #0
 8015450:	d101      	bne.n	8015456 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015452:	2303      	movs	r3, #3
 8015454:	e03b      	b.n	80154ce <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	7b1b      	ldrb	r3, [r3, #12]
 801545a:	f003 030f 	and.w	r3, r3, #15
 801545e:	b2db      	uxtb	r3, r3
 8015460:	2b00      	cmp	r3, #0
 8015462:	d008      	beq.n	8015476 <DetermineFrameType+0x3a>
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	f893 3020 	ldrb.w	r3, [r3, #32]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d003      	beq.n	8015476 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 801546e:	683b      	ldr	r3, [r7, #0]
 8015470:	2200      	movs	r2, #0
 8015472:	701a      	strb	r2, [r3, #0]
 8015474:	e02a      	b.n	80154cc <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801547c:	2b00      	cmp	r3, #0
 801547e:	d103      	bne.n	8015488 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8015480:	683b      	ldr	r3, [r7, #0]
 8015482:	2201      	movs	r2, #1
 8015484:	701a      	strb	r2, [r3, #0]
 8015486:	e021      	b.n	80154cc <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	7b1b      	ldrb	r3, [r3, #12]
 801548c:	f003 030f 	and.w	r3, r3, #15
 8015490:	b2db      	uxtb	r3, r3
 8015492:	2b00      	cmp	r3, #0
 8015494:	d108      	bne.n	80154a8 <DetermineFrameType+0x6c>
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	f893 3020 	ldrb.w	r3, [r3, #32]
 801549c:	2b00      	cmp	r3, #0
 801549e:	d103      	bne.n	80154a8 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80154a0:	683b      	ldr	r3, [r7, #0]
 80154a2:	2202      	movs	r2, #2
 80154a4:	701a      	strb	r2, [r3, #0]
 80154a6:	e011      	b.n	80154cc <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	7b1b      	ldrb	r3, [r3, #12]
 80154ac:	f003 030f 	and.w	r3, r3, #15
 80154b0:	b2db      	uxtb	r3, r3
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d108      	bne.n	80154c8 <DetermineFrameType+0x8c>
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d003      	beq.n	80154c8 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 80154c0:	683b      	ldr	r3, [r7, #0]
 80154c2:	2203      	movs	r2, #3
 80154c4:	701a      	strb	r2, [r3, #0]
 80154c6:	e001      	b.n	80154cc <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 80154c8:	2318      	movs	r3, #24
 80154ca:	e000      	b.n	80154ce <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 80154cc:	2300      	movs	r3, #0
}
 80154ce:	4618      	mov	r0, r3
 80154d0:	370c      	adds	r7, #12
 80154d2:	46bd      	mov	sp, r7
 80154d4:	bc80      	pop	{r7}
 80154d6:	4770      	bx	lr

080154d8 <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 80154d8:	b480      	push	{r7}
 80154da:	b083      	sub	sp, #12
 80154dc:	af00      	add	r7, sp, #0
 80154de:	4603      	mov	r3, r0
 80154e0:	460a      	mov	r2, r1
 80154e2:	71fb      	strb	r3, [r7, #7]
 80154e4:	4613      	mov	r3, r2
 80154e6:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 80154e8:	79fa      	ldrb	r2, [r7, #7]
 80154ea:	79bb      	ldrb	r3, [r7, #6]
 80154ec:	429a      	cmp	r2, r3
 80154ee:	d301      	bcc.n	80154f4 <CheckRetrans+0x1c>
    {
        return true;
 80154f0:	2301      	movs	r3, #1
 80154f2:	e000      	b.n	80154f6 <CheckRetrans+0x1e>
    }
    return false;
 80154f4:	2300      	movs	r3, #0
}
 80154f6:	4618      	mov	r0, r3
 80154f8:	370c      	adds	r7, #12
 80154fa:	46bd      	mov	sp, r7
 80154fc:	bc80      	pop	{r7}
 80154fe:	4770      	bx	lr

08015500 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8015500:	b580      	push	{r7, lr}
 8015502:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8015504:	4b12      	ldr	r3, [pc, #72]	; (8015550 <CheckRetransUnconfirmedUplink+0x50>)
 8015506:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801550a:	4a12      	ldr	r2, [pc, #72]	; (8015554 <CheckRetransUnconfirmedUplink+0x54>)
 801550c:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 8015510:	4611      	mov	r1, r2
 8015512:	4618      	mov	r0, r3
 8015514:	f7ff ffe0 	bl	80154d8 <CheckRetrans>
 8015518:	4603      	mov	r3, r0
 801551a:	2b00      	cmp	r3, #0
 801551c:	d001      	beq.n	8015522 <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 801551e:	2301      	movs	r3, #1
 8015520:	e014      	b.n	801554c <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8015522:	4b0b      	ldr	r3, [pc, #44]	; (8015550 <CheckRetransUnconfirmedUplink+0x50>)
 8015524:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8015528:	f003 0302 	and.w	r3, r3, #2
 801552c:	b2db      	uxtb	r3, r3
 801552e:	2b00      	cmp	r3, #0
 8015530:	d00b      	beq.n	801554a <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8015532:	4b07      	ldr	r3, [pc, #28]	; (8015550 <CheckRetransUnconfirmedUplink+0x50>)
 8015534:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8015538:	2b00      	cmp	r3, #0
 801553a:	d004      	beq.n	8015546 <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 801553c:	4b04      	ldr	r3, [pc, #16]	; (8015550 <CheckRetransUnconfirmedUplink+0x50>)
 801553e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8015542:	2b01      	cmp	r3, #1
 8015544:	d101      	bne.n	801554a <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 8015546:	2301      	movs	r3, #1
 8015548:	e000      	b.n	801554c <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 801554a:	2300      	movs	r3, #0
}
 801554c:	4618      	mov	r0, r3
 801554e:	bd80      	pop	{r7, pc}
 8015550:	200008fc 	.word	0x200008fc
 8015554:	20000e18 	.word	0x20000e18

08015558 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8015558:	b580      	push	{r7, lr}
 801555a:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 801555c:	4b10      	ldr	r3, [pc, #64]	; (80155a0 <CheckRetransConfirmedUplink+0x48>)
 801555e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015562:	4a10      	ldr	r2, [pc, #64]	; (80155a4 <CheckRetransConfirmedUplink+0x4c>)
 8015564:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 8015568:	4611      	mov	r1, r2
 801556a:	4618      	mov	r0, r3
 801556c:	f7ff ffb4 	bl	80154d8 <CheckRetrans>
 8015570:	4603      	mov	r3, r0
 8015572:	2b00      	cmp	r3, #0
 8015574:	d001      	beq.n	801557a <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8015576:	2301      	movs	r3, #1
 8015578:	e00f      	b.n	801559a <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801557a:	4b09      	ldr	r3, [pc, #36]	; (80155a0 <CheckRetransConfirmedUplink+0x48>)
 801557c:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8015580:	f003 0302 	and.w	r3, r3, #2
 8015584:	b2db      	uxtb	r3, r3
 8015586:	2b00      	cmp	r3, #0
 8015588:	d006      	beq.n	8015598 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 801558a:	4b05      	ldr	r3, [pc, #20]	; (80155a0 <CheckRetransConfirmedUplink+0x48>)
 801558c:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 8015590:	2b00      	cmp	r3, #0
 8015592:	d001      	beq.n	8015598 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 8015594:	2301      	movs	r3, #1
 8015596:	e000      	b.n	801559a <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8015598:	2300      	movs	r3, #0
}
 801559a:	4618      	mov	r0, r3
 801559c:	bd80      	pop	{r7, pc}
 801559e:	bf00      	nop
 80155a0:	200008fc 	.word	0x200008fc
 80155a4:	20000e18 	.word	0x20000e18

080155a8 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 80155a8:	b480      	push	{r7}
 80155aa:	b083      	sub	sp, #12
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80155b6:	d002      	beq.n	80155be <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	3301      	adds	r3, #1
 80155bc:	607b      	str	r3, [r7, #4]
    }
    return counter;
 80155be:	687b      	ldr	r3, [r7, #4]
}
 80155c0:	4618      	mov	r0, r3
 80155c2:	370c      	adds	r7, #12
 80155c4:	46bd      	mov	sp, r7
 80155c6:	bc80      	pop	{r7}
 80155c8:	4770      	bx	lr
	...

080155cc <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 80155cc:	b580      	push	{r7, lr}
 80155ce:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80155d0:	4b1a      	ldr	r3, [pc, #104]	; (801563c <StopRetransmission+0x70>)
 80155d2:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80155d6:	f003 0302 	and.w	r3, r3, #2
 80155da:	b2db      	uxtb	r3, r3
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d009      	beq.n	80155f4 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80155e0:	4b16      	ldr	r3, [pc, #88]	; (801563c <StopRetransmission+0x70>)
 80155e2:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d011      	beq.n	801560e <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 80155ea:	4b14      	ldr	r3, [pc, #80]	; (801563c <StopRetransmission+0x70>)
 80155ec:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80155f0:	2b01      	cmp	r3, #1
 80155f2:	d00c      	beq.n	801560e <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80155f4:	4b12      	ldr	r3, [pc, #72]	; (8015640 <StopRetransmission+0x74>)
 80155f6:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d007      	beq.n	801560e <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 80155fe:	4b10      	ldr	r3, [pc, #64]	; (8015640 <StopRetransmission+0x74>)
 8015600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015602:	4618      	mov	r0, r3
 8015604:	f7ff ffd0 	bl	80155a8 <IncreaseAdrAckCounter>
 8015608:	4603      	mov	r3, r0
 801560a:	4a0d      	ldr	r2, [pc, #52]	; (8015640 <StopRetransmission+0x74>)
 801560c:	6293      	str	r3, [r2, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 801560e:	4b0b      	ldr	r3, [pc, #44]	; (801563c <StopRetransmission+0x70>)
 8015610:	2200      	movs	r2, #0
 8015612:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 8015616:	4b09      	ldr	r3, [pc, #36]	; (801563c <StopRetransmission+0x70>)
 8015618:	2200      	movs	r2, #0
 801561a:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 801561e:	4b07      	ldr	r3, [pc, #28]	; (801563c <StopRetransmission+0x70>)
 8015620:	2200      	movs	r2, #0
 8015622:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8015626:	4b05      	ldr	r3, [pc, #20]	; (801563c <StopRetransmission+0x70>)
 8015628:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801562c:	f023 0302 	bic.w	r3, r3, #2
 8015630:	4a02      	ldr	r2, [pc, #8]	; (801563c <StopRetransmission+0x70>)
 8015632:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8015636:	2301      	movs	r3, #1
}
 8015638:	4618      	mov	r0, r3
 801563a:	bd80      	pop	{r7, pc}
 801563c:	200008fc 	.word	0x200008fc
 8015640:	20000e18 	.word	0x20000e18

08015644 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8015644:	b580      	push	{r7, lr}
 8015646:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8015648:	4b08      	ldr	r3, [pc, #32]	; (801566c <OnMacProcessNotify+0x28>)
 801564a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801564e:	2b00      	cmp	r3, #0
 8015650:	d00a      	beq.n	8015668 <OnMacProcessNotify+0x24>
 8015652:	4b06      	ldr	r3, [pc, #24]	; (801566c <OnMacProcessNotify+0x28>)
 8015654:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8015658:	695b      	ldr	r3, [r3, #20]
 801565a:	2b00      	cmp	r3, #0
 801565c:	d004      	beq.n	8015668 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 801565e:	4b03      	ldr	r3, [pc, #12]	; (801566c <OnMacProcessNotify+0x28>)
 8015660:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8015664:	695b      	ldr	r3, [r3, #20]
 8015666:	4798      	blx	r3
    }
}
 8015668:	bf00      	nop
 801566a:	bd80      	pop	{r7, pc}
 801566c:	200008fc 	.word	0x200008fc

08015670 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8015670:	b580      	push	{r7, lr}
 8015672:	b082      	sub	sp, #8
 8015674:	af00      	add	r7, sp, #0
 8015676:	4603      	mov	r3, r0
 8015678:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 801567a:	4b0b      	ldr	r3, [pc, #44]	; (80156a8 <CallNvmDataChangeCallback+0x38>)
 801567c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8015680:	2b00      	cmp	r3, #0
 8015682:	d00c      	beq.n	801569e <CallNvmDataChangeCallback+0x2e>
 8015684:	4b08      	ldr	r3, [pc, #32]	; (80156a8 <CallNvmDataChangeCallback+0x38>)
 8015686:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801568a:	691b      	ldr	r3, [r3, #16]
 801568c:	2b00      	cmp	r3, #0
 801568e:	d006      	beq.n	801569e <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8015690:	4b05      	ldr	r3, [pc, #20]	; (80156a8 <CallNvmDataChangeCallback+0x38>)
 8015692:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8015696:	691b      	ldr	r3, [r3, #16]
 8015698:	88fa      	ldrh	r2, [r7, #6]
 801569a:	4610      	mov	r0, r2
 801569c:	4798      	blx	r3
    }
}
 801569e:	bf00      	nop
 80156a0:	3708      	adds	r7, #8
 80156a2:	46bd      	mov	sp, r7
 80156a4:	bd80      	pop	{r7, pc}
 80156a6:	bf00      	nop
 80156a8:	200008fc 	.word	0x200008fc

080156ac <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 80156ac:	b480      	push	{r7}
 80156ae:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80156b0:	4b0b      	ldr	r3, [pc, #44]	; (80156e0 <IsRequestPending+0x34>)
 80156b2:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80156b6:	f003 0304 	and.w	r3, r3, #4
 80156ba:	b2db      	uxtb	r3, r3
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d107      	bne.n	80156d0 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 80156c0:	4b07      	ldr	r3, [pc, #28]	; (80156e0 <IsRequestPending+0x34>)
 80156c2:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80156c6:	f003 0301 	and.w	r3, r3, #1
 80156ca:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d001      	beq.n	80156d4 <IsRequestPending+0x28>
    {
        return 1;
 80156d0:	2301      	movs	r3, #1
 80156d2:	e000      	b.n	80156d6 <IsRequestPending+0x2a>
    }
    return 0;
 80156d4:	2300      	movs	r3, #0
}
 80156d6:	4618      	mov	r0, r3
 80156d8:	46bd      	mov	sp, r7
 80156da:	bc80      	pop	{r7}
 80156dc:	4770      	bx	lr
 80156de:	bf00      	nop
 80156e0:	200008fc 	.word	0x200008fc

080156e4 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80156e4:	b590      	push	{r4, r7, lr}
 80156e6:	b091      	sub	sp, #68	; 0x44
 80156e8:	af02      	add	r7, sp, #8
 80156ea:	6178      	str	r0, [r7, #20]
 80156ec:	6139      	str	r1, [r7, #16]
 80156ee:	4613      	mov	r3, r2
 80156f0:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 80156f2:	697b      	ldr	r3, [r7, #20]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d002      	beq.n	80156fe <LoRaMacInitialization+0x1a>
 80156f8:	693b      	ldr	r3, [r7, #16]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d101      	bne.n	8015702 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80156fe:	2303      	movs	r3, #3
 8015700:	e27a      	b.n	8015bf8 <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8015702:	697b      	ldr	r3, [r7, #20]
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d00b      	beq.n	8015722 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 801570a:	697b      	ldr	r3, [r7, #20]
 801570c:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801570e:	2b00      	cmp	r3, #0
 8015710:	d007      	beq.n	8015722 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8015712:	697b      	ldr	r3, [r7, #20]
 8015714:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8015716:	2b00      	cmp	r3, #0
 8015718:	d003      	beq.n	8015722 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 801571a:	697b      	ldr	r3, [r7, #20]
 801571c:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 801571e:	2b00      	cmp	r3, #0
 8015720:	d101      	bne.n	8015726 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015722:	2303      	movs	r3, #3
 8015724:	e268      	b.n	8015bf8 <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8015726:	7bfb      	ldrb	r3, [r7, #15]
 8015728:	4618      	mov	r0, r3
 801572a:	f003 fcac 	bl	8019086 <RegionIsActive>
 801572e:	4603      	mov	r3, r0
 8015730:	f083 0301 	eor.w	r3, r3, #1
 8015734:	b2db      	uxtb	r3, r3
 8015736:	2b00      	cmp	r3, #0
 8015738:	d001      	beq.n	801573e <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801573a:	2309      	movs	r3, #9
 801573c:	e25c      	b.n	8015bf8 <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 801573e:	6978      	ldr	r0, [r7, #20]
 8015740:	f002 f932 	bl	80179a8 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8015744:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8015748:	2100      	movs	r1, #0
 801574a:	48c7      	ldr	r0, [pc, #796]	; (8015a68 <LoRaMacInitialization+0x384>)
 801574c:	f006 f89e 	bl	801b88c <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8015750:	f240 521c 	movw	r2, #1308	; 0x51c
 8015754:	2100      	movs	r1, #0
 8015756:	48c5      	ldr	r0, [pc, #788]	; (8015a6c <LoRaMacInitialization+0x388>)
 8015758:	f006 f898 	bl	801b88c <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 801575c:	4ac2      	ldr	r2, [pc, #776]	; (8015a68 <LoRaMacInitialization+0x384>)
 801575e:	7bfb      	ldrb	r3, [r7, #15]
 8015760:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8015764:	4bc0      	ldr	r3, [pc, #768]	; (8015a68 <LoRaMacInitialization+0x384>)
 8015766:	2200      	movs	r2, #0
 8015768:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 801576c:	4bbe      	ldr	r3, [pc, #760]	; (8015a68 <LoRaMacInitialization+0x384>)
 801576e:	2200      	movs	r2, #0
 8015770:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8015774:	4bbc      	ldr	r3, [pc, #752]	; (8015a68 <LoRaMacInitialization+0x384>)
 8015776:	4abe      	ldr	r2, [pc, #760]	; (8015a70 <LoRaMacInitialization+0x38c>)
 8015778:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 801577c:	2300      	movs	r3, #0
 801577e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8015782:	4bbc      	ldr	r3, [pc, #752]	; (8015a74 <LoRaMacInitialization+0x390>)
 8015784:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8015786:	4bbc      	ldr	r3, [pc, #752]	; (8015a78 <LoRaMacInitialization+0x394>)
 8015788:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 801578a:	4bbc      	ldr	r3, [pc, #752]	; (8015a7c <LoRaMacInitialization+0x398>)
 801578c:	627b      	str	r3, [r7, #36]	; 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801578e:	4bb6      	ldr	r3, [pc, #728]	; (8015a68 <LoRaMacInitialization+0x384>)
 8015790:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015794:	f107 021c 	add.w	r2, r7, #28
 8015798:	4611      	mov	r1, r2
 801579a:	4618      	mov	r0, r3
 801579c:	f003 fcac 	bl	80190f8 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80157a0:	230f      	movs	r3, #15
 80157a2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80157a6:	4bb0      	ldr	r3, [pc, #704]	; (8015a68 <LoRaMacInitialization+0x384>)
 80157a8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80157ac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80157b0:	4611      	mov	r1, r2
 80157b2:	4618      	mov	r0, r3
 80157b4:	f003 fc77 	bl	80190a6 <RegionGetPhyParam>
 80157b8:	4603      	mov	r3, r0
 80157ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 80157bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157be:	2b00      	cmp	r3, #0
 80157c0:	bf14      	ite	ne
 80157c2:	2301      	movne	r3, #1
 80157c4:	2300      	moveq	r3, #0
 80157c6:	b2da      	uxtb	r2, r3
 80157c8:	4ba7      	ldr	r3, [pc, #668]	; (8015a68 <LoRaMacInitialization+0x384>)
 80157ca:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80157ce:	230a      	movs	r3, #10
 80157d0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80157d4:	4ba4      	ldr	r3, [pc, #656]	; (8015a68 <LoRaMacInitialization+0x384>)
 80157d6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80157da:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80157de:	4611      	mov	r1, r2
 80157e0:	4618      	mov	r0, r3
 80157e2:	f003 fc60 	bl	80190a6 <RegionGetPhyParam>
 80157e6:	4603      	mov	r3, r0
 80157e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 80157ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157ec:	b25a      	sxtb	r2, r3
 80157ee:	4b9e      	ldr	r3, [pc, #632]	; (8015a68 <LoRaMacInitialization+0x384>)
 80157f0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 80157f4:	2306      	movs	r3, #6
 80157f6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80157fa:	4b9b      	ldr	r3, [pc, #620]	; (8015a68 <LoRaMacInitialization+0x384>)
 80157fc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015800:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015804:	4611      	mov	r1, r2
 8015806:	4618      	mov	r0, r3
 8015808:	f003 fc4d 	bl	80190a6 <RegionGetPhyParam>
 801580c:	4603      	mov	r3, r0
 801580e:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8015810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015812:	b25a      	sxtb	r2, r3
 8015814:	4b94      	ldr	r3, [pc, #592]	; (8015a68 <LoRaMacInitialization+0x384>)
 8015816:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 801581a:	2310      	movs	r3, #16
 801581c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015820:	4b91      	ldr	r3, [pc, #580]	; (8015a68 <LoRaMacInitialization+0x384>)
 8015822:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015826:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801582a:	4611      	mov	r1, r2
 801582c:	4618      	mov	r0, r3
 801582e:	f003 fc3a 	bl	80190a6 <RegionGetPhyParam>
 8015832:	4603      	mov	r3, r0
 8015834:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8015836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015838:	4a8b      	ldr	r2, [pc, #556]	; (8015a68 <LoRaMacInitialization+0x384>)
 801583a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 801583e:	2311      	movs	r3, #17
 8015840:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015844:	4b88      	ldr	r3, [pc, #544]	; (8015a68 <LoRaMacInitialization+0x384>)
 8015846:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801584a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801584e:	4611      	mov	r1, r2
 8015850:	4618      	mov	r0, r3
 8015852:	f003 fc28 	bl	80190a6 <RegionGetPhyParam>
 8015856:	4603      	mov	r3, r0
 8015858:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 801585a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801585c:	4a82      	ldr	r2, [pc, #520]	; (8015a68 <LoRaMacInitialization+0x384>)
 801585e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8015862:	2312      	movs	r3, #18
 8015864:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015868:	4b7f      	ldr	r3, [pc, #508]	; (8015a68 <LoRaMacInitialization+0x384>)
 801586a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801586e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015872:	4611      	mov	r1, r2
 8015874:	4618      	mov	r0, r3
 8015876:	f003 fc16 	bl	80190a6 <RegionGetPhyParam>
 801587a:	4603      	mov	r3, r0
 801587c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 801587e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015880:	4a79      	ldr	r2, [pc, #484]	; (8015a68 <LoRaMacInitialization+0x384>)
 8015882:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8015886:	2313      	movs	r3, #19
 8015888:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801588c:	4b76      	ldr	r3, [pc, #472]	; (8015a68 <LoRaMacInitialization+0x384>)
 801588e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015892:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015896:	4611      	mov	r1, r2
 8015898:	4618      	mov	r0, r3
 801589a:	f003 fc04 	bl	80190a6 <RegionGetPhyParam>
 801589e:	4603      	mov	r3, r0
 80158a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80158a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158a4:	4a70      	ldr	r2, [pc, #448]	; (8015a68 <LoRaMacInitialization+0x384>)
 80158a6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80158aa:	2314      	movs	r3, #20
 80158ac:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80158b0:	4b6d      	ldr	r3, [pc, #436]	; (8015a68 <LoRaMacInitialization+0x384>)
 80158b2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80158b6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80158ba:	4611      	mov	r1, r2
 80158bc:	4618      	mov	r0, r3
 80158be:	f003 fbf2 	bl	80190a6 <RegionGetPhyParam>
 80158c2:	4603      	mov	r3, r0
 80158c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80158c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158c8:	4a67      	ldr	r2, [pc, #412]	; (8015a68 <LoRaMacInitialization+0x384>)
 80158ca:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80158ce:	2316      	movs	r3, #22
 80158d0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80158d4:	4b64      	ldr	r3, [pc, #400]	; (8015a68 <LoRaMacInitialization+0x384>)
 80158d6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80158da:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80158de:	4611      	mov	r1, r2
 80158e0:	4618      	mov	r0, r3
 80158e2:	f003 fbe0 	bl	80190a6 <RegionGetPhyParam>
 80158e6:	4603      	mov	r3, r0
 80158e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80158ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158ec:	b2da      	uxtb	r2, r3
 80158ee:	4b5e      	ldr	r3, [pc, #376]	; (8015a68 <LoRaMacInitialization+0x384>)
 80158f0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80158f4:	2317      	movs	r3, #23
 80158f6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80158fa:	4b5b      	ldr	r3, [pc, #364]	; (8015a68 <LoRaMacInitialization+0x384>)
 80158fc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015900:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015904:	4611      	mov	r1, r2
 8015906:	4618      	mov	r0, r3
 8015908:	f003 fbcd 	bl	80190a6 <RegionGetPhyParam>
 801590c:	4603      	mov	r3, r0
 801590e:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8015910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015912:	4a55      	ldr	r2, [pc, #340]	; (8015a68 <LoRaMacInitialization+0x384>)
 8015914:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8015918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801591a:	4a53      	ldr	r2, [pc, #332]	; (8015a68 <LoRaMacInitialization+0x384>)
 801591c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8015920:	2318      	movs	r3, #24
 8015922:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015926:	4b50      	ldr	r3, [pc, #320]	; (8015a68 <LoRaMacInitialization+0x384>)
 8015928:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801592c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015930:	4611      	mov	r1, r2
 8015932:	4618      	mov	r0, r3
 8015934:	f003 fbb7 	bl	80190a6 <RegionGetPhyParam>
 8015938:	4603      	mov	r3, r0
 801593a:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 801593c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801593e:	b2da      	uxtb	r2, r3
 8015940:	4b49      	ldr	r3, [pc, #292]	; (8015a68 <LoRaMacInitialization+0x384>)
 8015942:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8015946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015948:	b2da      	uxtb	r2, r3
 801594a:	4b47      	ldr	r3, [pc, #284]	; (8015a68 <LoRaMacInitialization+0x384>)
 801594c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8015950:	231d      	movs	r3, #29
 8015952:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015956:	4b44      	ldr	r3, [pc, #272]	; (8015a68 <LoRaMacInitialization+0x384>)
 8015958:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801595c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015960:	4611      	mov	r1, r2
 8015962:	4618      	mov	r0, r3
 8015964:	f003 fb9f 	bl	80190a6 <RegionGetPhyParam>
 8015968:	4603      	mov	r3, r0
 801596a:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 801596c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801596e:	b2da      	uxtb	r2, r3
 8015970:	4b3d      	ldr	r3, [pc, #244]	; (8015a68 <LoRaMacInitialization+0x384>)
 8015972:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8015976:	231e      	movs	r3, #30
 8015978:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801597c:	4b3a      	ldr	r3, [pc, #232]	; (8015a68 <LoRaMacInitialization+0x384>)
 801597e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015982:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015986:	4611      	mov	r1, r2
 8015988:	4618      	mov	r0, r3
 801598a:	f003 fb8c 	bl	80190a6 <RegionGetPhyParam>
 801598e:	4603      	mov	r3, r0
 8015990:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8015992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015994:	b2da      	uxtb	r2, r3
 8015996:	4b34      	ldr	r3, [pc, #208]	; (8015a68 <LoRaMacInitialization+0x384>)
 8015998:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 801599c:	231f      	movs	r3, #31
 801599e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80159a2:	4b31      	ldr	r3, [pc, #196]	; (8015a68 <LoRaMacInitialization+0x384>)
 80159a4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80159a8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80159ac:	4611      	mov	r1, r2
 80159ae:	4618      	mov	r0, r3
 80159b0:	f003 fb79 	bl	80190a6 <RegionGetPhyParam>
 80159b4:	4603      	mov	r3, r0
 80159b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 80159b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159ba:	4a2b      	ldr	r2, [pc, #172]	; (8015a68 <LoRaMacInitialization+0x384>)
 80159bc:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80159c0:	2320      	movs	r3, #32
 80159c2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80159c6:	4b28      	ldr	r3, [pc, #160]	; (8015a68 <LoRaMacInitialization+0x384>)
 80159c8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80159cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80159d0:	4611      	mov	r1, r2
 80159d2:	4618      	mov	r0, r3
 80159d4:	f003 fb67 	bl	80190a6 <RegionGetPhyParam>
 80159d8:	4603      	mov	r3, r0
 80159da:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 80159dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159de:	4a22      	ldr	r2, [pc, #136]	; (8015a68 <LoRaMacInitialization+0x384>)
 80159e0:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80159e4:	230b      	movs	r3, #11
 80159e6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80159ea:	4b1f      	ldr	r3, [pc, #124]	; (8015a68 <LoRaMacInitialization+0x384>)
 80159ec:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80159f0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80159f4:	4611      	mov	r1, r2
 80159f6:	4618      	mov	r0, r3
 80159f8:	f003 fb55 	bl	80190a6 <RegionGetPhyParam>
 80159fc:	4603      	mov	r3, r0
 80159fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8015a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a02:	b29a      	uxth	r2, r3
 8015a04:	4b18      	ldr	r3, [pc, #96]	; (8015a68 <LoRaMacInitialization+0x384>)
 8015a06:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8015a0a:	230c      	movs	r3, #12
 8015a0c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015a10:	4b15      	ldr	r3, [pc, #84]	; (8015a68 <LoRaMacInitialization+0x384>)
 8015a12:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015a16:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015a1a:	4611      	mov	r1, r2
 8015a1c:	4618      	mov	r0, r3
 8015a1e:	f003 fb42 	bl	80190a6 <RegionGetPhyParam>
 8015a22:	4603      	mov	r3, r0
 8015a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 8015a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a28:	b29a      	uxth	r2, r3
 8015a2a:	4b0f      	ldr	r3, [pc, #60]	; (8015a68 <LoRaMacInitialization+0x384>)
 8015a2c:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8015a30:	4b0d      	ldr	r3, [pc, #52]	; (8015a68 <LoRaMacInitialization+0x384>)
 8015a32:	2201      	movs	r2, #1
 8015a34:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8015a38:	4b0b      	ldr	r3, [pc, #44]	; (8015a68 <LoRaMacInitialization+0x384>)
 8015a3a:	220a      	movs	r2, #10
 8015a3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8015a40:	4b09      	ldr	r3, [pc, #36]	; (8015a68 <LoRaMacInitialization+0x384>)
 8015a42:	2206      	movs	r2, #6
 8015a44:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8015a48:	4b07      	ldr	r3, [pc, #28]	; (8015a68 <LoRaMacInitialization+0x384>)
 8015a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015a4e:	4a06      	ldr	r2, [pc, #24]	; (8015a68 <LoRaMacInitialization+0x384>)
 8015a50:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8015a52:	4b05      	ldr	r3, [pc, #20]	; (8015a68 <LoRaMacInitialization+0x384>)
 8015a54:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8015a58:	4b03      	ldr	r3, [pc, #12]	; (8015a68 <LoRaMacInitialization+0x384>)
 8015a5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8015a5e:	4b02      	ldr	r3, [pc, #8]	; (8015a68 <LoRaMacInitialization+0x384>)
 8015a60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8015a64:	e00c      	b.n	8015a80 <LoRaMacInitialization+0x39c>
 8015a66:	bf00      	nop
 8015a68:	20000e18 	.word	0x20000e18
 8015a6c:	200008fc 	.word	0x200008fc
 8015a70:	01000400 	.word	0x01000400
 8015a74:	2000103c 	.word	0x2000103c
 8015a78:	20001050 	.word	0x20001050
 8015a7c:	200019b0 	.word	0x200019b0
 8015a80:	4a5f      	ldr	r2, [pc, #380]	; (8015c00 <LoRaMacInitialization+0x51c>)
 8015a82:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8015a84:	4b5e      	ldr	r3, [pc, #376]	; (8015c00 <LoRaMacInitialization+0x51c>)
 8015a86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015a8a:	4a5d      	ldr	r2, [pc, #372]	; (8015c00 <LoRaMacInitialization+0x51c>)
 8015a8c:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8015a8e:	4b5c      	ldr	r3, [pc, #368]	; (8015c00 <LoRaMacInitialization+0x51c>)
 8015a90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015a94:	4a5a      	ldr	r2, [pc, #360]	; (8015c00 <LoRaMacInitialization+0x51c>)
 8015a96:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8015a98:	4b59      	ldr	r3, [pc, #356]	; (8015c00 <LoRaMacInitialization+0x51c>)
 8015a9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015a9e:	4a58      	ldr	r2, [pc, #352]	; (8015c00 <LoRaMacInitialization+0x51c>)
 8015aa0:	6613      	str	r3, [r2, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8015aa2:	4b57      	ldr	r3, [pc, #348]	; (8015c00 <LoRaMacInitialization+0x51c>)
 8015aa4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015aa8:	4a55      	ldr	r2, [pc, #340]	; (8015c00 <LoRaMacInitialization+0x51c>)
 8015aaa:	6653      	str	r3, [r2, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8015aac:	4b54      	ldr	r3, [pc, #336]	; (8015c00 <LoRaMacInitialization+0x51c>)
 8015aae:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 8015ab2:	4b53      	ldr	r3, [pc, #332]	; (8015c00 <LoRaMacInitialization+0x51c>)
 8015ab4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8015ab8:	4b51      	ldr	r3, [pc, #324]	; (8015c00 <LoRaMacInitialization+0x51c>)
 8015aba:	2201      	movs	r2, #1
 8015abc:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8015ac0:	4a50      	ldr	r2, [pc, #320]	; (8015c04 <LoRaMacInitialization+0x520>)
 8015ac2:	693b      	ldr	r3, [r7, #16]
 8015ac4:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( false );
 8015ac8:	2000      	movs	r0, #0
 8015aca:	f7ff f869 	bl	8014ba0 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8015ace:	4b4c      	ldr	r3, [pc, #304]	; (8015c00 <LoRaMacInitialization+0x51c>)
 8015ad0:	2201      	movs	r2, #1
 8015ad2:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 8015ad6:	4a4b      	ldr	r2, [pc, #300]	; (8015c04 <LoRaMacInitialization+0x520>)
 8015ad8:	697b      	ldr	r3, [r7, #20]
 8015ada:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8015ade:	4b49      	ldr	r3, [pc, #292]	; (8015c04 <LoRaMacInitialization+0x520>)
 8015ae0:	2200      	movs	r2, #0
 8015ae2:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 8015ae6:	4b47      	ldr	r3, [pc, #284]	; (8015c04 <LoRaMacInitialization+0x520>)
 8015ae8:	2201      	movs	r2, #1
 8015aea:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8015aee:	4b44      	ldr	r3, [pc, #272]	; (8015c00 <LoRaMacInitialization+0x51c>)
 8015af0:	2200      	movs	r2, #0
 8015af2:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8015af4:	4b42      	ldr	r3, [pc, #264]	; (8015c00 <LoRaMacInitialization+0x51c>)
 8015af6:	2200      	movs	r2, #0
 8015af8:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8015afa:	2300      	movs	r3, #0
 8015afc:	9300      	str	r3, [sp, #0]
 8015afe:	4b42      	ldr	r3, [pc, #264]	; (8015c08 <LoRaMacInitialization+0x524>)
 8015b00:	2200      	movs	r2, #0
 8015b02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015b06:	4841      	ldr	r0, [pc, #260]	; (8015c0c <LoRaMacInitialization+0x528>)
 8015b08:	f009 ff9c 	bl	801fa44 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	9300      	str	r3, [sp, #0]
 8015b10:	4b3f      	ldr	r3, [pc, #252]	; (8015c10 <LoRaMacInitialization+0x52c>)
 8015b12:	2200      	movs	r2, #0
 8015b14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015b18:	483e      	ldr	r0, [pc, #248]	; (8015c14 <LoRaMacInitialization+0x530>)
 8015b1a:	f009 ff93 	bl	801fa44 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8015b1e:	2300      	movs	r3, #0
 8015b20:	9300      	str	r3, [sp, #0]
 8015b22:	4b3d      	ldr	r3, [pc, #244]	; (8015c18 <LoRaMacInitialization+0x534>)
 8015b24:	2200      	movs	r2, #0
 8015b26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015b2a:	483c      	ldr	r0, [pc, #240]	; (8015c1c <LoRaMacInitialization+0x538>)
 8015b2c:	f009 ff8a 	bl	801fa44 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8015b30:	2300      	movs	r3, #0
 8015b32:	9300      	str	r3, [sp, #0]
 8015b34:	4b3a      	ldr	r3, [pc, #232]	; (8015c20 <LoRaMacInitialization+0x53c>)
 8015b36:	2200      	movs	r2, #0
 8015b38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015b3c:	4839      	ldr	r0, [pc, #228]	; (8015c24 <LoRaMacInitialization+0x540>)
 8015b3e:	f009 ff81 	bl	801fa44 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8015b42:	4c2f      	ldr	r4, [pc, #188]	; (8015c00 <LoRaMacInitialization+0x51c>)
 8015b44:	463b      	mov	r3, r7
 8015b46:	4618      	mov	r0, r3
 8015b48:	f009 fad0 	bl	801f0ec <SysTimeGetMcuTime>
 8015b4c:	f504 7392 	add.w	r3, r4, #292	; 0x124
 8015b50:	463a      	mov	r2, r7
 8015b52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015b56:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8015b5a:	4b33      	ldr	r3, [pc, #204]	; (8015c28 <LoRaMacInitialization+0x544>)
 8015b5c:	2200      	movs	r2, #0
 8015b5e:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8015b60:	4b28      	ldr	r3, [pc, #160]	; (8015c04 <LoRaMacInitialization+0x520>)
 8015b62:	4a32      	ldr	r2, [pc, #200]	; (8015c2c <LoRaMacInitialization+0x548>)
 8015b64:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8015b68:	4b26      	ldr	r3, [pc, #152]	; (8015c04 <LoRaMacInitialization+0x520>)
 8015b6a:	4a31      	ldr	r2, [pc, #196]	; (8015c30 <LoRaMacInitialization+0x54c>)
 8015b6c:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8015b70:	4b24      	ldr	r3, [pc, #144]	; (8015c04 <LoRaMacInitialization+0x520>)
 8015b72:	4a30      	ldr	r2, [pc, #192]	; (8015c34 <LoRaMacInitialization+0x550>)
 8015b74:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8015b78:	4b22      	ldr	r3, [pc, #136]	; (8015c04 <LoRaMacInitialization+0x520>)
 8015b7a:	4a2f      	ldr	r2, [pc, #188]	; (8015c38 <LoRaMacInitialization+0x554>)
 8015b7c:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8015b80:	4b20      	ldr	r3, [pc, #128]	; (8015c04 <LoRaMacInitialization+0x520>)
 8015b82:	4a2e      	ldr	r2, [pc, #184]	; (8015c3c <LoRaMacInitialization+0x558>)
 8015b84:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8015b88:	4b2d      	ldr	r3, [pc, #180]	; (8015c40 <LoRaMacInitialization+0x55c>)
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	482d      	ldr	r0, [pc, #180]	; (8015c44 <LoRaMacInitialization+0x560>)
 8015b8e:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8015b90:	482d      	ldr	r0, [pc, #180]	; (8015c48 <LoRaMacInitialization+0x564>)
 8015b92:	f7fa f9f9 	bl	800ff88 <SecureElementInit>
 8015b96:	4603      	mov	r3, r0
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d001      	beq.n	8015ba0 <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8015b9c:	2311      	movs	r3, #17
 8015b9e:	e02b      	b.n	8015bf8 <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8015ba0:	4817      	ldr	r0, [pc, #92]	; (8015c00 <LoRaMacInitialization+0x51c>)
 8015ba2:	f002 fbc1 	bl	8018328 <LoRaMacCryptoInit>
 8015ba6:	4603      	mov	r3, r0
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d001      	beq.n	8015bb0 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8015bac:	2311      	movs	r3, #17
 8015bae:	e023      	b.n	8015bf8 <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8015bb0:	f001 fcbc 	bl	801752c <LoRaMacCommandsInit>
 8015bb4:	4603      	mov	r3, r0
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d001      	beq.n	8015bbe <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015bba:	2313      	movs	r3, #19
 8015bbc:	e01c      	b.n	8015bf8 <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8015bbe:	4823      	ldr	r0, [pc, #140]	; (8015c4c <LoRaMacInitialization+0x568>)
 8015bc0:	f002 fc52 	bl	8018468 <LoRaMacCryptoSetMulticastReference>
 8015bc4:	4603      	mov	r3, r0
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d001      	beq.n	8015bce <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8015bca:	2311      	movs	r3, #17
 8015bcc:	e014      	b.n	8015bf8 <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8015bce:	4b1c      	ldr	r3, [pc, #112]	; (8015c40 <LoRaMacInitialization+0x55c>)
 8015bd0:	695b      	ldr	r3, [r3, #20]
 8015bd2:	4798      	blx	r3
 8015bd4:	4603      	mov	r3, r0
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	f005 fdf8 	bl	801b7cc <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8015bdc:	4b18      	ldr	r3, [pc, #96]	; (8015c40 <LoRaMacInitialization+0x55c>)
 8015bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015be0:	4a07      	ldr	r2, [pc, #28]	; (8015c00 <LoRaMacInitialization+0x51c>)
 8015be2:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8015be6:	4610      	mov	r0, r2
 8015be8:	4798      	blx	r3
    Radio.Sleep( );
 8015bea:	4b15      	ldr	r3, [pc, #84]	; (8015c40 <LoRaMacInitialization+0x55c>)
 8015bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bee:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8015bf0:	2001      	movs	r0, #1
 8015bf2:	f7fd fa7d 	bl	80130f0 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8015bf6:	2300      	movs	r3, #0
}
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	373c      	adds	r7, #60	; 0x3c
 8015bfc:	46bd      	mov	sp, r7
 8015bfe:	bd90      	pop	{r4, r7, pc}
 8015c00:	20000e18 	.word	0x20000e18
 8015c04:	200008fc 	.word	0x200008fc
 8015c08:	0801367d 	.word	0x0801367d
 8015c0c:	20000c64 	.word	0x20000c64
 8015c10:	0801370d 	.word	0x0801370d
 8015c14:	20000c7c 	.word	0x20000c7c
 8015c18:	08013785 	.word	0x08013785
 8015c1c:	20000c94 	.word	0x20000c94
 8015c20:	08013805 	.word	0x08013805
 8015c24:	20000cfc 	.word	0x20000cfc
 8015c28:	20001a40 	.word	0x20001a40
 8015c2c:	0801212d 	.word	0x0801212d
 8015c30:	08012189 	.word	0x08012189
 8015c34:	08012229 	.word	0x08012229
 8015c38:	080121fd 	.word	0x080121fd
 8015c3c:	08012245 	.word	0x08012245
 8015c40:	08021dfc 	.word	0x08021dfc
 8015c44:	20000c48 	.word	0x20000c48
 8015c48:	20000f64 	.word	0x20000f64
 8015c4c:	20000f00 	.word	0x20000f00

08015c50 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8015c54:	4b04      	ldr	r3, [pc, #16]	; (8015c68 <LoRaMacStart+0x18>)
 8015c56:	2200      	movs	r2, #0
 8015c58:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 8015c5c:	f7fc fb08 	bl	8012270 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8015c60:	2300      	movs	r3, #0
}
 8015c62:	4618      	mov	r0, r3
 8015c64:	bd80      	pop	{r7, pc}
 8015c66:	bf00      	nop
 8015c68:	200008fc 	.word	0x200008fc

08015c6c <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8015c6c:	b580      	push	{r7, lr}
 8015c6e:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8015c70:	f7fd fa06 	bl	8013080 <LoRaMacIsBusy>
 8015c74:	4603      	mov	r3, r0
 8015c76:	f083 0301 	eor.w	r3, r3, #1
 8015c7a:	b2db      	uxtb	r3, r3
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d00d      	beq.n	8015c9c <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8015c80:	4b0b      	ldr	r3, [pc, #44]	; (8015cb0 <LoRaMacStop+0x44>)
 8015c82:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8015c86:	2b02      	cmp	r3, #2
 8015c88:	d102      	bne.n	8015c90 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 8015c8a:	4b0a      	ldr	r3, [pc, #40]	; (8015cb4 <LoRaMacStop+0x48>)
 8015c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c8e:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 8015c90:	4b09      	ldr	r3, [pc, #36]	; (8015cb8 <LoRaMacStop+0x4c>)
 8015c92:	2201      	movs	r2, #1
 8015c94:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8015c98:	2300      	movs	r3, #0
 8015c9a:	e007      	b.n	8015cac <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8015c9c:	4b06      	ldr	r3, [pc, #24]	; (8015cb8 <LoRaMacStop+0x4c>)
 8015c9e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8015ca2:	2b01      	cmp	r3, #1
 8015ca4:	d101      	bne.n	8015caa <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 8015ca6:	2300      	movs	r3, #0
 8015ca8:	e000      	b.n	8015cac <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 8015caa:	2301      	movs	r3, #1
}
 8015cac:	4618      	mov	r0, r3
 8015cae:	bd80      	pop	{r7, pc}
 8015cb0:	20000e18 	.word	0x20000e18
 8015cb4:	08021dfc 	.word	0x08021dfc
 8015cb8:	200008fc 	.word	0x200008fc

08015cbc <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8015cbc:	b580      	push	{r7, lr}
 8015cbe:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8015cc0:	4812      	ldr	r0, [pc, #72]	; (8015d0c <LoRaMacHalt+0x50>)
 8015cc2:	f009 ff63 	bl	801fb8c <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8015cc6:	4812      	ldr	r0, [pc, #72]	; (8015d10 <LoRaMacHalt+0x54>)
 8015cc8:	f009 ff60 	bl	801fb8c <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8015ccc:	4811      	ldr	r0, [pc, #68]	; (8015d14 <LoRaMacHalt+0x58>)
 8015cce:	f009 ff5d 	bl	801fb8c <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8015cd2:	4811      	ldr	r0, [pc, #68]	; (8015d18 <LoRaMacHalt+0x5c>)
 8015cd4:	f009 ff5a 	bl	801fb8c <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8015cd8:	f001 fa8c 	bl	80171f4 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8015cdc:	4b0f      	ldr	r3, [pc, #60]	; (8015d1c <LoRaMacHalt+0x60>)
 8015cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ce0:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8015ce2:	4b0f      	ldr	r3, [pc, #60]	; (8015d20 <LoRaMacHalt+0x64>)
 8015ce4:	2200      	movs	r2, #0
 8015ce6:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 8015cea:	480e      	ldr	r0, [pc, #56]	; (8015d24 <LoRaMacHalt+0x68>)
 8015cec:	f7fd fba2 	bl	8013434 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8015cf0:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8015cf4:	490b      	ldr	r1, [pc, #44]	; (8015d24 <LoRaMacHalt+0x68>)
 8015cf6:	480c      	ldr	r0, [pc, #48]	; (8015d28 <LoRaMacHalt+0x6c>)
 8015cf8:	f005 fd8d 	bl	801b816 <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 8015cfc:	4b08      	ldr	r3, [pc, #32]	; (8015d20 <LoRaMacHalt+0x64>)
 8015cfe:	2201      	movs	r2, #1
 8015d00:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8015d04:	2300      	movs	r3, #0
}
 8015d06:	4618      	mov	r0, r3
 8015d08:	bd80      	pop	{r7, pc}
 8015d0a:	bf00      	nop
 8015d0c:	20000c64 	.word	0x20000c64
 8015d10:	20000c7c 	.word	0x20000c7c
 8015d14:	20000c94 	.word	0x20000c94
 8015d18:	20000cfc 	.word	0x20000cfc
 8015d1c:	08021dfc 	.word	0x08021dfc
 8015d20:	200008fc 	.word	0x200008fc
 8015d24:	20000e18 	.word	0x20000e18
 8015d28:	200013e4 	.word	0x200013e4

08015d2c <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8015d2c:	b590      	push	{r4, r7, lr}
 8015d2e:	b08d      	sub	sp, #52	; 0x34
 8015d30:	af02      	add	r7, sp, #8
 8015d32:	4603      	mov	r3, r0
 8015d34:	6039      	str	r1, [r7, #0]
 8015d36:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8015d38:	4b42      	ldr	r3, [pc, #264]	; (8015e44 <LoRaMacQueryTxPossible+0x118>)
 8015d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d3c:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8015d3e:	4b41      	ldr	r3, [pc, #260]	; (8015e44 <LoRaMacQueryTxPossible+0x118>)
 8015d40:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 8015d44:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8015d46:	4b3f      	ldr	r3, [pc, #252]	; (8015e44 <LoRaMacQueryTxPossible+0x118>)
 8015d48:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 8015d4c:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8015d4e:	4b3e      	ldr	r3, [pc, #248]	; (8015e48 <LoRaMacQueryTxPossible+0x11c>)
 8015d50:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015d54:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8015d56:	2300      	movs	r3, #0
 8015d58:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8015d5a:	683b      	ldr	r3, [r7, #0]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d101      	bne.n	8015d64 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015d60:	2303      	movs	r3, #3
 8015d62:	e06b      	b.n	8015e3c <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8015d64:	2300      	movs	r3, #0
 8015d66:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8015d68:	4b36      	ldr	r3, [pc, #216]	; (8015e44 <LoRaMacQueryTxPossible+0x118>)
 8015d6a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8015d6e:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8015d70:	4b34      	ldr	r3, [pc, #208]	; (8015e44 <LoRaMacQueryTxPossible+0x118>)
 8015d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d74:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8015d76:	4b33      	ldr	r3, [pc, #204]	; (8015e44 <LoRaMacQueryTxPossible+0x118>)
 8015d78:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8015d7c:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8015d7e:	4b31      	ldr	r3, [pc, #196]	; (8015e44 <LoRaMacQueryTxPossible+0x118>)
 8015d80:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8015d84:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8015d86:	4b2f      	ldr	r3, [pc, #188]	; (8015e44 <LoRaMacQueryTxPossible+0x118>)
 8015d88:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8015d8c:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8015d90:	4b2c      	ldr	r3, [pc, #176]	; (8015e44 <LoRaMacQueryTxPossible+0x118>)
 8015d92:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8015d96:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 8015d9a:	4b2b      	ldr	r3, [pc, #172]	; (8015e48 <LoRaMacQueryTxPossible+0x11c>)
 8015d9c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015da0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8015da4:	4b27      	ldr	r3, [pc, #156]	; (8015e44 <LoRaMacQueryTxPossible+0x118>)
 8015da6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8015daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8015dae:	4b25      	ldr	r3, [pc, #148]	; (8015e44 <LoRaMacQueryTxPossible+0x118>)
 8015db0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015db4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8015db8:	f107 040d 	add.w	r4, r7, #13
 8015dbc:	f107 020e 	add.w	r2, r7, #14
 8015dc0:	f107 010f 	add.w	r1, r7, #15
 8015dc4:	f107 0014 	add.w	r0, r7, #20
 8015dc8:	f107 0310 	add.w	r3, r7, #16
 8015dcc:	9300      	str	r3, [sp, #0]
 8015dce:	4623      	mov	r3, r4
 8015dd0:	f001 f8da 	bl	8016f88 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8015dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015dd8:	4618      	mov	r0, r3
 8015dda:	f7fd fe59 	bl	8013a90 <GetMaxAppPayloadWithoutFOptsLength>
 8015dde:	4603      	mov	r3, r0
 8015de0:	461a      	mov	r2, r3
 8015de2:	683b      	ldr	r3, [r7, #0]
 8015de4:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8015de6:	f107 0308 	add.w	r3, r7, #8
 8015dea:	4618      	mov	r0, r3
 8015dec:	f001 fca4 	bl	8017738 <LoRaMacCommandsGetSizeSerializedCmds>
 8015df0:	4603      	mov	r3, r0
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d001      	beq.n	8015dfa <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015df6:	2313      	movs	r3, #19
 8015df8:	e020      	b.n	8015e3c <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8015dfa:	68bb      	ldr	r3, [r7, #8]
 8015dfc:	2b0f      	cmp	r3, #15
 8015dfe:	d819      	bhi.n	8015e34 <LoRaMacQueryTxPossible+0x108>
 8015e00:	683b      	ldr	r3, [r7, #0]
 8015e02:	785b      	ldrb	r3, [r3, #1]
 8015e04:	461a      	mov	r2, r3
 8015e06:	68bb      	ldr	r3, [r7, #8]
 8015e08:	429a      	cmp	r2, r3
 8015e0a:	d313      	bcc.n	8015e34 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8015e0c:	683b      	ldr	r3, [r7, #0]
 8015e0e:	785a      	ldrb	r2, [r3, #1]
 8015e10:	68bb      	ldr	r3, [r7, #8]
 8015e12:	b2db      	uxtb	r3, r3
 8015e14:	1ad3      	subs	r3, r2, r3
 8015e16:	b2da      	uxtb	r2, r3
 8015e18:	683b      	ldr	r3, [r7, #0]
 8015e1a:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8015e1c:	683b      	ldr	r3, [r7, #0]
 8015e1e:	785b      	ldrb	r3, [r3, #1]
 8015e20:	4619      	mov	r1, r3
 8015e22:	79fa      	ldrb	r2, [r7, #7]
 8015e24:	68bb      	ldr	r3, [r7, #8]
 8015e26:	4413      	add	r3, r2
 8015e28:	4299      	cmp	r1, r3
 8015e2a:	d301      	bcc.n	8015e30 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	e005      	b.n	8015e3c <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8015e30:	2308      	movs	r3, #8
 8015e32:	e003      	b.n	8015e3c <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8015e34:	683b      	ldr	r3, [r7, #0]
 8015e36:	2200      	movs	r2, #0
 8015e38:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8015e3a:	2308      	movs	r3, #8
    }
}
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	372c      	adds	r7, #44	; 0x2c
 8015e40:	46bd      	mov	sp, r7
 8015e42:	bd90      	pop	{r4, r7, pc}
 8015e44:	20000e18 	.word	0x20000e18
 8015e48:	200008fc 	.word	0x200008fc

08015e4c <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8015e4c:	b590      	push	{r4, r7, lr}
 8015e4e:	b087      	sub	sp, #28
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8015e54:	2300      	movs	r3, #0
 8015e56:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d101      	bne.n	8015e62 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015e5e:	2303      	movs	r3, #3
 8015e60:	e1c4      	b.n	80161ec <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	781b      	ldrb	r3, [r3, #0]
 8015e66:	2b41      	cmp	r3, #65	; 0x41
 8015e68:	f200 81b9 	bhi.w	80161de <LoRaMacMibGetRequestConfirm+0x392>
 8015e6c:	a201      	add	r2, pc, #4	; (adr r2, 8015e74 <LoRaMacMibGetRequestConfirm+0x28>)
 8015e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e72:	bf00      	nop
 8015e74:	08015f7d 	.word	0x08015f7d
 8015e78:	08015f89 	.word	0x08015f89
 8015e7c:	08015f95 	.word	0x08015f95
 8015e80:	08015fa1 	.word	0x08015fa1
 8015e84:	08015fad 	.word	0x08015fad
 8015e88:	08015fb9 	.word	0x08015fb9
 8015e8c:	08015fc5 	.word	0x08015fc5
 8015e90:	080161df 	.word	0x080161df
 8015e94:	080161df 	.word	0x080161df
 8015e98:	080161df 	.word	0x080161df
 8015e9c:	080161df 	.word	0x080161df
 8015ea0:	080161df 	.word	0x080161df
 8015ea4:	080161df 	.word	0x080161df
 8015ea8:	080161df 	.word	0x080161df
 8015eac:	080161df 	.word	0x080161df
 8015eb0:	08015fd9 	.word	0x08015fd9
 8015eb4:	08015fe5 	.word	0x08015fe5
 8015eb8:	08015ff1 	.word	0x08015ff1
 8015ebc:	08016013 	.word	0x08016013
 8015ec0:	08016025 	.word	0x08016025
 8015ec4:	08016037 	.word	0x08016037
 8015ec8:	08016049 	.word	0x08016049
 8015ecc:	0801607d 	.word	0x0801607d
 8015ed0:	0801605b 	.word	0x0801605b
 8015ed4:	0801609f 	.word	0x0801609f
 8015ed8:	080160ab 	.word	0x080160ab
 8015edc:	080160b5 	.word	0x080160b5
 8015ee0:	080160bf 	.word	0x080160bf
 8015ee4:	080160c9 	.word	0x080160c9
 8015ee8:	080160d3 	.word	0x080160d3
 8015eec:	080160dd 	.word	0x080160dd
 8015ef0:	08016109 	.word	0x08016109
 8015ef4:	08016115 	.word	0x08016115
 8015ef8:	0801612d 	.word	0x0801612d
 8015efc:	08016121 	.word	0x08016121
 8015f00:	08016139 	.word	0x08016139
 8015f04:	08016143 	.word	0x08016143
 8015f08:	0801614f 	.word	0x0801614f
 8015f0c:	0801616b 	.word	0x0801616b
 8015f10:	0801615b 	.word	0x0801615b
 8015f14:	08016163 	.word	0x08016163
 8015f18:	080161df 	.word	0x080161df
 8015f1c:	08016177 	.word	0x08016177
 8015f20:	080161df 	.word	0x080161df
 8015f24:	080161df 	.word	0x080161df
 8015f28:	080161df 	.word	0x080161df
 8015f2c:	080161df 	.word	0x080161df
 8015f30:	080161df 	.word	0x080161df
 8015f34:	080161df 	.word	0x080161df
 8015f38:	080161df 	.word	0x080161df
 8015f3c:	080161df 	.word	0x080161df
 8015f40:	080161df 	.word	0x080161df
 8015f44:	080161df 	.word	0x080161df
 8015f48:	080161df 	.word	0x080161df
 8015f4c:	080161df 	.word	0x080161df
 8015f50:	080161df 	.word	0x080161df
 8015f54:	080161df 	.word	0x080161df
 8015f58:	080161df 	.word	0x080161df
 8015f5c:	0801618b 	.word	0x0801618b
 8015f60:	08016197 	.word	0x08016197
 8015f64:	080161a3 	.word	0x080161a3
 8015f68:	080161af 	.word	0x080161af
 8015f6c:	080161bb 	.word	0x080161bb
 8015f70:	080161c7 	.word	0x080161c7
 8015f74:	080161d3 	.word	0x080161d3
 8015f78:	080161d9 	.word	0x080161d9
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8015f7c:	4b9d      	ldr	r3, [pc, #628]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8015f7e:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	711a      	strb	r2, [r3, #4]
            break;
 8015f86:	e130      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8015f88:	4b9a      	ldr	r3, [pc, #616]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8015f8a:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	711a      	strb	r2, [r3, #4]
            break;
 8015f92:	e12a      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	685b      	ldr	r3, [r3, #4]
 8015f98:	4618      	mov	r0, r3
 8015f9a:	f7fa fab5 	bl	8010508 <SecureElementGetDevEui>
            break;
 8015f9e:	e124      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	685b      	ldr	r3, [r3, #4]
 8015fa4:	4618      	mov	r0, r3
 8015fa6:	f7fa fadf 	bl	8010568 <SecureElementGetJoinEui>
            break;
 8015faa:	e11e      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8015fac:	4b91      	ldr	r3, [pc, #580]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8015fae:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	711a      	strb	r2, [r3, #4]
            break;
 8015fb6:	e118      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8015fb8:	4b8e      	ldr	r3, [pc, #568]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8015fba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	605a      	str	r2, [r3, #4]
            break;
 8015fc2:	e112      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 8015fc4:	4b8b      	ldr	r3, [pc, #556]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8015fc6:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	3304      	adds	r3, #4
 8015fce:	4619      	mov	r1, r3
 8015fd0:	4610      	mov	r0, r2
 8015fd2:	f7fa fafb 	bl	80105cc <SecureElementGetDevAddr>
            break;
 8015fd6:	e108      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8015fd8:	4b86      	ldr	r3, [pc, #536]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8015fda:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	711a      	strb	r2, [r3, #4]
            break;
 8015fe2:	e102      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8015fe4:	4b83      	ldr	r3, [pc, #524]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8015fe6:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	711a      	strb	r2, [r3, #4]
            break;
 8015fee:	e0fc      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8015ff0:	231c      	movs	r3, #28
 8015ff2:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015ff4:	4b7f      	ldr	r3, [pc, #508]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8015ff6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015ffa:	f107 0210 	add.w	r2, r7, #16
 8015ffe:	4611      	mov	r1, r2
 8016000:	4618      	mov	r0, r3
 8016002:	f003 f850 	bl	80190a6 <RegionGetPhyParam>
 8016006:	4603      	mov	r3, r0
 8016008:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 801600a:	68fa      	ldr	r2, [r7, #12]
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	605a      	str	r2, [r3, #4]
            break;
 8016010:	e0eb      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	4a77      	ldr	r2, [pc, #476]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016016:	3304      	adds	r3, #4
 8016018:	326c      	adds	r2, #108	; 0x6c
 801601a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801601e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8016022:	e0e2      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	4a73      	ldr	r2, [pc, #460]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016028:	3304      	adds	r3, #4
 801602a:	32b4      	adds	r2, #180	; 0xb4
 801602c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016030:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8016034:	e0d9      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	4a6e      	ldr	r2, [pc, #440]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801603a:	3304      	adds	r3, #4
 801603c:	3274      	adds	r2, #116	; 0x74
 801603e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016042:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8016046:	e0d0      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	4a6a      	ldr	r2, [pc, #424]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801604c:	3304      	adds	r3, #4
 801604e:	32bc      	adds	r2, #188	; 0xbc
 8016050:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016054:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8016058:	e0c7      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 801605a:	231a      	movs	r3, #26
 801605c:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801605e:	4b65      	ldr	r3, [pc, #404]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016060:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016064:	f107 0210 	add.w	r2, r7, #16
 8016068:	4611      	mov	r1, r2
 801606a:	4618      	mov	r0, r3
 801606c:	f003 f81b 	bl	80190a6 <RegionGetPhyParam>
 8016070:	4603      	mov	r3, r0
 8016072:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8016074:	68fa      	ldr	r2, [r7, #12]
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	605a      	str	r2, [r3, #4]
            break;
 801607a:	e0b6      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 801607c:	2319      	movs	r3, #25
 801607e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8016080:	4b5c      	ldr	r3, [pc, #368]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016082:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016086:	f107 0210 	add.w	r2, r7, #16
 801608a:	4611      	mov	r1, r2
 801608c:	4618      	mov	r0, r3
 801608e:	f003 f80a 	bl	80190a6 <RegionGetPhyParam>
 8016092:	4603      	mov	r3, r0
 8016094:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8016096:	68fa      	ldr	r2, [r7, #12]
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	605a      	str	r2, [r3, #4]
            break;
 801609c:	e0a5      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 801609e:	4b55      	ldr	r3, [pc, #340]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80160a0:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	711a      	strb	r2, [r3, #4]
            break;
 80160a8:	e09f      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80160aa:	4b52      	ldr	r3, [pc, #328]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80160ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	605a      	str	r2, [r3, #4]
            break;
 80160b2:	e09a      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80160b4:	4b4f      	ldr	r3, [pc, #316]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80160b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	605a      	str	r2, [r3, #4]
            break;
 80160bc:	e095      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80160be:	4b4d      	ldr	r3, [pc, #308]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80160c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	605a      	str	r2, [r3, #4]
            break;
 80160c6:	e090      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80160c8:	4b4a      	ldr	r3, [pc, #296]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80160ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	605a      	str	r2, [r3, #4]
            break;
 80160d0:	e08b      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80160d2:	4b48      	ldr	r3, [pc, #288]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80160d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	605a      	str	r2, [r3, #4]
            break;
 80160da:	e086      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 80160dc:	2302      	movs	r3, #2
 80160de:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80160e0:	4b44      	ldr	r3, [pc, #272]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80160e2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80160e6:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80160e8:	4b42      	ldr	r3, [pc, #264]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80160ea:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80160ee:	f107 0210 	add.w	r2, r7, #16
 80160f2:	4611      	mov	r1, r2
 80160f4:	4618      	mov	r0, r3
 80160f6:	f002 ffd6 	bl	80190a6 <RegionGetPhyParam>
 80160fa:	4603      	mov	r3, r0
 80160fc:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	b25a      	sxtb	r2, r3
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	711a      	strb	r2, [r3, #4]
            break;
 8016106:	e070      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8016108:	4b3a      	ldr	r3, [pc, #232]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801610a:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	711a      	strb	r2, [r3, #4]
            break;
 8016112:	e06a      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8016114:	4b37      	ldr	r3, [pc, #220]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016116:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	711a      	strb	r2, [r3, #4]
            break;
 801611e:	e064      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8016120:	4b34      	ldr	r3, [pc, #208]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016122:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	711a      	strb	r2, [r3, #4]
            break;
 801612a:	e05e      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 801612c:	4b31      	ldr	r3, [pc, #196]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801612e:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	711a      	strb	r2, [r3, #4]
            break;
 8016136:	e058      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8016138:	4b2e      	ldr	r3, [pc, #184]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801613a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	605a      	str	r2, [r3, #4]
            break;
 8016140:	e053      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8016142:	4b2c      	ldr	r3, [pc, #176]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016144:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	711a      	strb	r2, [r3, #4]
            break;
 801614c:	e04d      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801614e:	4b29      	ldr	r3, [pc, #164]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016150:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	605a      	str	r2, [r3, #4]
            break;
 8016158:	e047      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	4a25      	ldr	r2, [pc, #148]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801615e:	605a      	str	r2, [r3, #4]
            break;
 8016160:	e043      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	4a24      	ldr	r2, [pc, #144]	; (80161f8 <LoRaMacMibGetRequestConfirm+0x3ac>)
 8016166:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8016168:	e03f      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801616a:	4b22      	ldr	r3, [pc, #136]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801616c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	605a      	str	r2, [r3, #4]
            break;
 8016174:	e039      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	4a1e      	ldr	r2, [pc, #120]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801617a:	f8d2 212c 	ldr.w	r2, [r2, #300]	; 0x12c
 801617e:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8016180:	687c      	ldr	r4, [r7, #4]
 8016182:	f003 f907 	bl	8019394 <RegionGetVersion>
 8016186:	60a0      	str	r0, [r4, #8]
            break;
 8016188:	e02f      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 801618a:	4b1a      	ldr	r3, [pc, #104]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801618c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	605a      	str	r2, [r3, #4]
            break;
 8016194:	e029      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8016196:	4b17      	ldr	r3, [pc, #92]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8016198:	f893 211f 	ldrb.w	r2, [r3, #287]	; 0x11f
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	711a      	strb	r2, [r3, #4]
            break;
 80161a0:	e023      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80161a2:	4b14      	ldr	r3, [pc, #80]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80161a4:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	809a      	strh	r2, [r3, #4]
            break;
 80161ac:	e01d      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80161ae:	4b11      	ldr	r3, [pc, #68]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80161b0:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	809a      	strh	r2, [r3, #4]
            break;
 80161b8:	e017      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 80161ba:	4b0e      	ldr	r3, [pc, #56]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80161bc:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	809a      	strh	r2, [r3, #4]
            break;
 80161c4:	e011      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 80161c6:	4b0b      	ldr	r3, [pc, #44]	; (80161f4 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80161c8:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	809a      	strh	r2, [r3, #4]
            break;
 80161d0:	e00b      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80161d2:	2318      	movs	r3, #24
 80161d4:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80161d6:	e008      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80161d8:	2318      	movs	r3, #24
 80161da:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80161dc:	e005      	b.n	80161ea <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80161de:	6878      	ldr	r0, [r7, #4]
 80161e0:	f001 f81f 	bl	8017222 <LoRaMacClassBMibGetRequestConfirm>
 80161e4:	4603      	mov	r3, r0
 80161e6:	75fb      	strb	r3, [r7, #23]
            break;
 80161e8:	bf00      	nop
        }
    }
    return status;
 80161ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80161ec:	4618      	mov	r0, r3
 80161ee:	371c      	adds	r7, #28
 80161f0:	46bd      	mov	sp, r7
 80161f2:	bd90      	pop	{r4, r7, pc}
 80161f4:	20000e18 	.word	0x20000e18
 80161f8:	200013e4 	.word	0x200013e4

080161fc <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80161fc:	b580      	push	{r7, lr}
 80161fe:	b086      	sub	sp, #24
 8016200:	af00      	add	r7, sp, #0
 8016202:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8016204:	2300      	movs	r3, #0
 8016206:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	2b00      	cmp	r3, #0
 801620c:	d101      	bne.n	8016212 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801620e:	2303      	movs	r3, #3
 8016210:	e396      	b.n	8016940 <LoRaMacMibSetRequestConfirm+0x744>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8016212:	4bbd      	ldr	r3, [pc, #756]	; (8016508 <LoRaMacMibSetRequestConfirm+0x30c>)
 8016214:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8016218:	f003 0302 	and.w	r3, r3, #2
 801621c:	2b00      	cmp	r3, #0
 801621e:	d001      	beq.n	8016224 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8016220:	2301      	movs	r3, #1
 8016222:	e38d      	b.n	8016940 <LoRaMacMibSetRequestConfirm+0x744>
    }

    switch( mibSet->Type )
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	781b      	ldrb	r3, [r3, #0]
 8016228:	2b41      	cmp	r3, #65	; 0x41
 801622a:	f200 835d 	bhi.w	80168e8 <LoRaMacMibSetRequestConfirm+0x6ec>
 801622e:	a201      	add	r2, pc, #4	; (adr r2, 8016234 <LoRaMacMibSetRequestConfirm+0x38>)
 8016230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016234:	0801633d 	.word	0x0801633d
 8016238:	0801634d 	.word	0x0801634d
 801623c:	08016367 	.word	0x08016367
 8016240:	0801637f 	.word	0x0801637f
 8016244:	08016397 	.word	0x08016397
 8016248:	080163a3 	.word	0x080163a3
 801624c:	080163af 	.word	0x080163af
 8016250:	080163d9 	.word	0x080163d9
 8016254:	080163ff 	.word	0x080163ff
 8016258:	08016425 	.word	0x08016425
 801625c:	0801644b 	.word	0x0801644b
 8016260:	08016471 	.word	0x08016471
 8016264:	08016497 	.word	0x08016497
 8016268:	080164bd 	.word	0x080164bd
 801626c:	080164e3 	.word	0x080164e3
 8016270:	08016511 	.word	0x08016511
 8016274:	08016531 	.word	0x08016531
 8016278:	080168e9 	.word	0x080168e9
 801627c:	0801653d 	.word	0x0801653d
 8016280:	080165ad 	.word	0x080165ad
 8016284:	080165ed 	.word	0x080165ed
 8016288:	0801664f 	.word	0x0801664f
 801628c:	080166bf 	.word	0x080166bf
 8016290:	0801668f 	.word	0x0801668f
 8016294:	080166ef 	.word	0x080166ef
 8016298:	08016711 	.word	0x08016711
 801629c:	0801671b 	.word	0x0801671b
 80162a0:	08016725 	.word	0x08016725
 80162a4:	0801672f 	.word	0x0801672f
 80162a8:	08016739 	.word	0x08016739
 80162ac:	080168e9 	.word	0x080168e9
 80162b0:	08016743 	.word	0x08016743
 80162b4:	08016775 	.word	0x08016775
 80162b8:	080167e9 	.word	0x080167e9
 80162bc:	080167af 	.word	0x080167af
 80162c0:	0801681b 	.word	0x0801681b
 80162c4:	08016831 	.word	0x08016831
 80162c8:	08016849 	.word	0x08016849
 80162cc:	08016855 	.word	0x08016855
 80162d0:	08016861 	.word	0x08016861
 80162d4:	080168e9 	.word	0x080168e9
 80162d8:	0801686b 	.word	0x0801686b
 80162dc:	080168e9 	.word	0x080168e9
 80162e0:	080168e9 	.word	0x080168e9
 80162e4:	080168e9 	.word	0x080168e9
 80162e8:	080168e9 	.word	0x080168e9
 80162ec:	080168e9 	.word	0x080168e9
 80162f0:	080168e9 	.word	0x080168e9
 80162f4:	080168e9 	.word	0x080168e9
 80162f8:	080168e9 	.word	0x080168e9
 80162fc:	080168e9 	.word	0x080168e9
 8016300:	080168e9 	.word	0x080168e9
 8016304:	080168e9 	.word	0x080168e9
 8016308:	080168e9 	.word	0x080168e9
 801630c:	080168e9 	.word	0x080168e9
 8016310:	080168e9 	.word	0x080168e9
 8016314:	080168e9 	.word	0x080168e9
 8016318:	080168e9 	.word	0x080168e9
 801631c:	08016895 	.word	0x08016895
 8016320:	080168a1 	.word	0x080168a1
 8016324:	080168ad 	.word	0x080168ad
 8016328:	080168b9 	.word	0x080168b9
 801632c:	080168c5 	.word	0x080168c5
 8016330:	080168d1 	.word	0x080168d1
 8016334:	080168dd 	.word	0x080168dd
 8016338:	080168e3 	.word	0x080168e3
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	791b      	ldrb	r3, [r3, #4]
 8016340:	4618      	mov	r0, r3
 8016342:	f7fd fabb 	bl	80138bc <SwitchClass>
 8016346:	4603      	mov	r3, r0
 8016348:	75fb      	strb	r3, [r7, #23]
            break;
 801634a:	e2ee      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	791b      	ldrb	r3, [r3, #4]
 8016350:	2b02      	cmp	r3, #2
 8016352:	d005      	beq.n	8016360 <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	791a      	ldrb	r2, [r3, #4]
 8016358:	4b6c      	ldr	r3, [pc, #432]	; (801650c <LoRaMacMibSetRequestConfirm+0x310>)
 801635a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801635e:	e2e4      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016360:	2303      	movs	r3, #3
 8016362:	75fb      	strb	r3, [r7, #23]
            break;
 8016364:	e2e1      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	685b      	ldr	r3, [r3, #4]
 801636a:	4618      	mov	r0, r3
 801636c:	f7fa f8b4 	bl	80104d8 <SecureElementSetDevEui>
 8016370:	4603      	mov	r3, r0
 8016372:	2b00      	cmp	r3, #0
 8016374:	f000 82be 	beq.w	80168f4 <LoRaMacMibSetRequestConfirm+0x6f8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016378:	2303      	movs	r3, #3
 801637a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801637c:	e2ba      	b.n	80168f4 <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	685b      	ldr	r3, [r3, #4]
 8016382:	4618      	mov	r0, r3
 8016384:	f7fa f8d8 	bl	8010538 <SecureElementSetJoinEui>
 8016388:	4603      	mov	r3, r0
 801638a:	2b00      	cmp	r3, #0
 801638c:	f000 82b4 	beq.w	80168f8 <LoRaMacMibSetRequestConfirm+0x6fc>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016390:	2303      	movs	r3, #3
 8016392:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8016394:	e2b0      	b.n	80168f8 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	791a      	ldrb	r2, [r3, #4]
 801639a:	4b5c      	ldr	r3, [pc, #368]	; (801650c <LoRaMacMibSetRequestConfirm+0x310>)
 801639c:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            break;
 80163a0:	e2c3      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	685b      	ldr	r3, [r3, #4]
 80163a6:	4a59      	ldr	r2, [pc, #356]	; (801650c <LoRaMacMibSetRequestConfirm+0x310>)
 80163a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            break;
 80163ac:	e2bd      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 80163ae:	4b57      	ldr	r3, [pc, #348]	; (801650c <LoRaMacMibSetRequestConfirm+0x310>)
 80163b0:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	685b      	ldr	r3, [r3, #4]
 80163b8:	4619      	mov	r1, r3
 80163ba:	4610      	mov	r0, r2
 80163bc:	f7fa f8ec 	bl	8010598 <SecureElementSetDevAddr>
 80163c0:	4603      	mov	r3, r0
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d002      	beq.n	80163cc <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80163c6:	2303      	movs	r3, #3
 80163c8:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 80163ca:	e2ae      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	685b      	ldr	r3, [r3, #4]
 80163d0:	4a4e      	ldr	r2, [pc, #312]	; (801650c <LoRaMacMibSetRequestConfirm+0x310>)
 80163d2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            break;
 80163d6:	e2a8      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	685b      	ldr	r3, [r3, #4]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d00b      	beq.n	80163f8 <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	685b      	ldr	r3, [r3, #4]
 80163e4:	4619      	mov	r1, r3
 80163e6:	2000      	movs	r0, #0
 80163e8:	f002 f868 	bl	80184bc <LoRaMacCryptoSetKey>
 80163ec:	4603      	mov	r3, r0
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	f000 8284 	beq.w	80168fc <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80163f4:	2311      	movs	r3, #17
 80163f6:	e2a3      	b.n	8016940 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80163f8:	2303      	movs	r3, #3
 80163fa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80163fc:	e27e      	b.n	80168fc <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	685b      	ldr	r3, [r3, #4]
 8016402:	2b00      	cmp	r3, #0
 8016404:	d00b      	beq.n	801641e <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	685b      	ldr	r3, [r3, #4]
 801640a:	4619      	mov	r1, r3
 801640c:	2001      	movs	r0, #1
 801640e:	f002 f855 	bl	80184bc <LoRaMacCryptoSetKey>
 8016412:	4603      	mov	r3, r0
 8016414:	2b00      	cmp	r3, #0
 8016416:	f000 8273 	beq.w	8016900 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801641a:	2311      	movs	r3, #17
 801641c:	e290      	b.n	8016940 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801641e:	2303      	movs	r3, #3
 8016420:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8016422:	e26d      	b.n	8016900 <LoRaMacMibSetRequestConfirm+0x704>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	685b      	ldr	r3, [r3, #4]
 8016428:	2b00      	cmp	r3, #0
 801642a:	d00b      	beq.n	8016444 <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	685b      	ldr	r3, [r3, #4]
 8016430:	4619      	mov	r1, r3
 8016432:	2008      	movs	r0, #8
 8016434:	f002 f842 	bl	80184bc <LoRaMacCryptoSetKey>
 8016438:	4603      	mov	r3, r0
 801643a:	2b00      	cmp	r3, #0
 801643c:	f000 8262 	beq.w	8016904 <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8016440:	2311      	movs	r3, #17
 8016442:	e27d      	b.n	8016940 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016444:	2303      	movs	r3, #3
 8016446:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8016448:	e25c      	b.n	8016904 <LoRaMacMibSetRequestConfirm+0x708>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	685b      	ldr	r3, [r3, #4]
 801644e:	2b00      	cmp	r3, #0
 8016450:	d00b      	beq.n	801646a <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	685b      	ldr	r3, [r3, #4]
 8016456:	4619      	mov	r1, r3
 8016458:	2009      	movs	r0, #9
 801645a:	f002 f82f 	bl	80184bc <LoRaMacCryptoSetKey>
 801645e:	4603      	mov	r3, r0
 8016460:	2b00      	cmp	r3, #0
 8016462:	f000 8251 	beq.w	8016908 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8016466:	2311      	movs	r3, #17
 8016468:	e26a      	b.n	8016940 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801646a:	2303      	movs	r3, #3
 801646c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801646e:	e24b      	b.n	8016908 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	685b      	ldr	r3, [r3, #4]
 8016474:	2b00      	cmp	r3, #0
 8016476:	d00b      	beq.n	8016490 <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	685b      	ldr	r3, [r3, #4]
 801647c:	4619      	mov	r1, r3
 801647e:	200c      	movs	r0, #12
 8016480:	f002 f81c 	bl	80184bc <LoRaMacCryptoSetKey>
 8016484:	4603      	mov	r3, r0
 8016486:	2b00      	cmp	r3, #0
 8016488:	f000 8240 	beq.w	801690c <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801648c:	2311      	movs	r3, #17
 801648e:	e257      	b.n	8016940 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016490:	2303      	movs	r3, #3
 8016492:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8016494:	e23a      	b.n	801690c <LoRaMacMibSetRequestConfirm+0x710>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	685b      	ldr	r3, [r3, #4]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d00b      	beq.n	80164b6 <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	685b      	ldr	r3, [r3, #4]
 80164a2:	4619      	mov	r1, r3
 80164a4:	200d      	movs	r0, #13
 80164a6:	f002 f809 	bl	80184bc <LoRaMacCryptoSetKey>
 80164aa:	4603      	mov	r3, r0
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	f000 822f 	beq.w	8016910 <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80164b2:	2311      	movs	r3, #17
 80164b4:	e244      	b.n	8016940 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80164b6:	2303      	movs	r3, #3
 80164b8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80164ba:	e229      	b.n	8016910 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	685b      	ldr	r3, [r3, #4]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d00b      	beq.n	80164dc <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	685b      	ldr	r3, [r3, #4]
 80164c8:	4619      	mov	r1, r3
 80164ca:	200e      	movs	r0, #14
 80164cc:	f001 fff6 	bl	80184bc <LoRaMacCryptoSetKey>
 80164d0:	4603      	mov	r3, r0
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	f000 821e 	beq.w	8016914 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80164d8:	2311      	movs	r3, #17
 80164da:	e231      	b.n	8016940 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80164dc:	2303      	movs	r3, #3
 80164de:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80164e0:	e218      	b.n	8016914 <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	685b      	ldr	r3, [r3, #4]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d00b      	beq.n	8016502 <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	685b      	ldr	r3, [r3, #4]
 80164ee:	4619      	mov	r1, r3
 80164f0:	200f      	movs	r0, #15
 80164f2:	f001 ffe3 	bl	80184bc <LoRaMacCryptoSetKey>
 80164f6:	4603      	mov	r3, r0
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	f000 820d 	beq.w	8016918 <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80164fe:	2311      	movs	r3, #17
 8016500:	e21e      	b.n	8016940 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016502:	2303      	movs	r3, #3
 8016504:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8016506:	e207      	b.n	8016918 <LoRaMacMibSetRequestConfirm+0x71c>
 8016508:	200008fc 	.word	0x200008fc
 801650c:	20000e18 	.word	0x20000e18
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	791a      	ldrb	r2, [r3, #4]
 8016514:	4bb2      	ldr	r3, [pc, #712]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016516:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801651a:	4bb2      	ldr	r3, [pc, #712]	; (80167e4 <LoRaMacMibSetRequestConfirm+0x5e8>)
 801651c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801651e:	4ab0      	ldr	r2, [pc, #704]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016520:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8016524:	4610      	mov	r0, r2
 8016526:	4798      	blx	r3
            Radio.Sleep( );
 8016528:	4bae      	ldr	r3, [pc, #696]	; (80167e4 <LoRaMacMibSetRequestConfirm+0x5e8>)
 801652a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801652c:	4798      	blx	r3
            break;
 801652e:	e1fc      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	791a      	ldrb	r2, [r3, #4]
 8016534:	4baa      	ldr	r3, [pc, #680]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016536:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 801653a:	e1f6      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	7a1b      	ldrb	r3, [r3, #8]
 8016540:	b25b      	sxtb	r3, r3
 8016542:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8016544:	4ba6      	ldr	r3, [pc, #664]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016546:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 801654a:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 801654c:	4ba4      	ldr	r3, [pc, #656]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801654e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016552:	f107 0108 	add.w	r1, r7, #8
 8016556:	2207      	movs	r2, #7
 8016558:	4618      	mov	r0, r3
 801655a:	f002 fddf 	bl	801911c <RegionVerify>
 801655e:	4603      	mov	r3, r0
 8016560:	f083 0301 	eor.w	r3, r3, #1
 8016564:	b2db      	uxtb	r3, r3
 8016566:	2b00      	cmp	r3, #0
 8016568:	d002      	beq.n	8016570 <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801656a:	2303      	movs	r3, #3
 801656c:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 801656e:	e1dc      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	685b      	ldr	r3, [r3, #4]
 8016574:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8016576:	4b9a      	ldr	r3, [pc, #616]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016578:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801657c:	f107 0108 	add.w	r1, r7, #8
 8016580:	2200      	movs	r2, #0
 8016582:	4618      	mov	r0, r3
 8016584:	f002 fdca 	bl	801911c <RegionVerify>
 8016588:	4603      	mov	r3, r0
 801658a:	f083 0301 	eor.w	r3, r3, #1
 801658e:	b2db      	uxtb	r3, r3
 8016590:	2b00      	cmp	r3, #0
 8016592:	d002      	beq.n	801659a <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016594:	2303      	movs	r3, #3
 8016596:	75fb      	strb	r3, [r7, #23]
            break;
 8016598:	e1c7      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 801659a:	4b91      	ldr	r3, [pc, #580]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801659c:	687a      	ldr	r2, [r7, #4]
 801659e:	336c      	adds	r3, #108	; 0x6c
 80165a0:	3204      	adds	r2, #4
 80165a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80165a6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80165aa:	e1be      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	7a1b      	ldrb	r3, [r3, #8]
 80165b0:	b25b      	sxtb	r3, r3
 80165b2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80165b4:	4b8a      	ldr	r3, [pc, #552]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80165b6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80165ba:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80165bc:	4b88      	ldr	r3, [pc, #544]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80165be:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80165c2:	f107 0108 	add.w	r1, r7, #8
 80165c6:	2207      	movs	r2, #7
 80165c8:	4618      	mov	r0, r3
 80165ca:	f002 fda7 	bl	801911c <RegionVerify>
 80165ce:	4603      	mov	r3, r0
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d008      	beq.n	80165e6 <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80165d4:	4b82      	ldr	r3, [pc, #520]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80165d6:	687a      	ldr	r2, [r7, #4]
 80165d8:	33b4      	adds	r3, #180	; 0xb4
 80165da:	3204      	adds	r2, #4
 80165dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80165e0:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80165e4:	e1a1      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80165e6:	2303      	movs	r3, #3
 80165e8:	75fb      	strb	r3, [r7, #23]
            break;
 80165ea:	e19e      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	7a1b      	ldrb	r3, [r3, #8]
 80165f0:	b25b      	sxtb	r3, r3
 80165f2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80165f4:	4b7a      	ldr	r3, [pc, #488]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80165f6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80165fa:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80165fc:	4b78      	ldr	r3, [pc, #480]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80165fe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016602:	f107 0108 	add.w	r1, r7, #8
 8016606:	2207      	movs	r2, #7
 8016608:	4618      	mov	r0, r3
 801660a:	f002 fd87 	bl	801911c <RegionVerify>
 801660e:	4603      	mov	r3, r0
 8016610:	2b00      	cmp	r3, #0
 8016612:	d019      	beq.n	8016648 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8016614:	4b72      	ldr	r3, [pc, #456]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016616:	687a      	ldr	r2, [r7, #4]
 8016618:	3374      	adds	r3, #116	; 0x74
 801661a:	3204      	adds	r2, #4
 801661c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016620:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8016624:	4b6e      	ldr	r3, [pc, #440]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016626:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801662a:	2b02      	cmp	r3, #2
 801662c:	f040 8176 	bne.w	801691c <LoRaMacMibSetRequestConfirm+0x720>
 8016630:	4b6b      	ldr	r3, [pc, #428]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016632:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8016636:	2b00      	cmp	r3, #0
 8016638:	f000 8170 	beq.w	801691c <LoRaMacMibSetRequestConfirm+0x720>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 801663c:	4b69      	ldr	r3, [pc, #420]	; (80167e4 <LoRaMacMibSetRequestConfirm+0x5e8>)
 801663e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016640:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8016642:	f7fe fc1b 	bl	8014e7c <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8016646:	e169      	b.n	801691c <LoRaMacMibSetRequestConfirm+0x720>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016648:	2303      	movs	r3, #3
 801664a:	75fb      	strb	r3, [r7, #23]
            break;
 801664c:	e166      	b.n	801691c <LoRaMacMibSetRequestConfirm+0x720>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	7a1b      	ldrb	r3, [r3, #8]
 8016652:	b25b      	sxtb	r3, r3
 8016654:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8016656:	4b62      	ldr	r3, [pc, #392]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016658:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 801665c:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801665e:	4b60      	ldr	r3, [pc, #384]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016660:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016664:	f107 0108 	add.w	r1, r7, #8
 8016668:	2207      	movs	r2, #7
 801666a:	4618      	mov	r0, r3
 801666c:	f002 fd56 	bl	801911c <RegionVerify>
 8016670:	4603      	mov	r3, r0
 8016672:	2b00      	cmp	r3, #0
 8016674:	d008      	beq.n	8016688 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8016676:	4b5a      	ldr	r3, [pc, #360]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016678:	687a      	ldr	r2, [r7, #4]
 801667a:	33bc      	adds	r3, #188	; 0xbc
 801667c:	3204      	adds	r2, #4
 801667e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016682:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8016686:	e150      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016688:	2303      	movs	r3, #3
 801668a:	75fb      	strb	r3, [r7, #23]
            break;
 801668c:	e14d      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	685b      	ldr	r3, [r3, #4]
 8016692:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8016694:	2301      	movs	r3, #1
 8016696:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8016698:	4b51      	ldr	r3, [pc, #324]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801669a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801669e:	f107 020c 	add.w	r2, r7, #12
 80166a2:	4611      	mov	r1, r2
 80166a4:	4618      	mov	r0, r3
 80166a6:	f002 fd62 	bl	801916e <RegionChanMaskSet>
 80166aa:	4603      	mov	r3, r0
 80166ac:	f083 0301 	eor.w	r3, r3, #1
 80166b0:	b2db      	uxtb	r3, r3
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	f000 8134 	beq.w	8016920 <LoRaMacMibSetRequestConfirm+0x724>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80166b8:	2303      	movs	r3, #3
 80166ba:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80166bc:	e130      	b.n	8016920 <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	685b      	ldr	r3, [r3, #4]
 80166c2:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80166c4:	2300      	movs	r3, #0
 80166c6:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80166c8:	4b45      	ldr	r3, [pc, #276]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80166ca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80166ce:	f107 020c 	add.w	r2, r7, #12
 80166d2:	4611      	mov	r1, r2
 80166d4:	4618      	mov	r0, r3
 80166d6:	f002 fd4a 	bl	801916e <RegionChanMaskSet>
 80166da:	4603      	mov	r3, r0
 80166dc:	f083 0301 	eor.w	r3, r3, #1
 80166e0:	b2db      	uxtb	r3, r3
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	f000 811e 	beq.w	8016924 <LoRaMacMibSetRequestConfirm+0x728>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80166e8:	2303      	movs	r3, #3
 80166ea:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80166ec:	e11a      	b.n	8016924 <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	791b      	ldrb	r3, [r3, #4]
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d009      	beq.n	801670a <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80166fa:	2b0f      	cmp	r3, #15
 80166fc:	d805      	bhi.n	801670a <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	791a      	ldrb	r2, [r3, #4]
 8016702:	4b37      	ldr	r3, [pc, #220]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016704:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8016708:	e10f      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801670a:	2303      	movs	r3, #3
 801670c:	75fb      	strb	r3, [r7, #23]
            break;
 801670e:	e10c      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	685b      	ldr	r3, [r3, #4]
 8016714:	4a32      	ldr	r2, [pc, #200]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016716:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8016718:	e107      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	685b      	ldr	r3, [r3, #4]
 801671e:	4a30      	ldr	r2, [pc, #192]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016720:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8016722:	e102      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	685b      	ldr	r3, [r3, #4]
 8016728:	4a2d      	ldr	r2, [pc, #180]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801672a:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 801672c:	e0fd      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	685b      	ldr	r3, [r3, #4]
 8016732:	4a2b      	ldr	r2, [pc, #172]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016734:	6613      	str	r3, [r2, #96]	; 0x60
            break;
 8016736:	e0f8      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	685b      	ldr	r3, [r3, #4]
 801673c:	4a28      	ldr	r2, [pc, #160]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801673e:	6653      	str	r3, [r2, #100]	; 0x64
            break;
 8016740:	e0f3      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016748:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 801674a:	4b25      	ldr	r3, [pc, #148]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801674c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016750:	f107 0108 	add.w	r1, r7, #8
 8016754:	2206      	movs	r2, #6
 8016756:	4618      	mov	r0, r3
 8016758:	f002 fce0 	bl	801911c <RegionVerify>
 801675c:	4603      	mov	r3, r0
 801675e:	2b00      	cmp	r3, #0
 8016760:	d005      	beq.n	801676e <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8016762:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8016766:	4b1e      	ldr	r3, [pc, #120]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016768:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801676c:	e0dd      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801676e:	2303      	movs	r3, #3
 8016770:	75fb      	strb	r3, [r7, #23]
            break;
 8016772:	e0da      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801677a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801677c:	4b18      	ldr	r3, [pc, #96]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801677e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8016782:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8016784:	4b16      	ldr	r3, [pc, #88]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8016786:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801678a:	f107 0108 	add.w	r1, r7, #8
 801678e:	2205      	movs	r2, #5
 8016790:	4618      	mov	r0, r3
 8016792:	f002 fcc3 	bl	801911c <RegionVerify>
 8016796:	4603      	mov	r3, r0
 8016798:	2b00      	cmp	r3, #0
 801679a:	d005      	beq.n	80167a8 <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 801679c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80167a0:	4b0f      	ldr	r3, [pc, #60]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80167a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80167a6:	e0c0      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80167a8:	2303      	movs	r3, #3
 80167aa:	75fb      	strb	r3, [r7, #23]
            break;
 80167ac:	e0bd      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80167b4:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 80167b6:	4b0a      	ldr	r3, [pc, #40]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80167b8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80167bc:	f107 0108 	add.w	r1, r7, #8
 80167c0:	220a      	movs	r2, #10
 80167c2:	4618      	mov	r0, r3
 80167c4:	f002 fcaa 	bl	801911c <RegionVerify>
 80167c8:	4603      	mov	r3, r0
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d005      	beq.n	80167da <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 80167ce:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80167d2:	4b03      	ldr	r3, [pc, #12]	; (80167e0 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80167d4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80167d8:	e0a7      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80167da:	2303      	movs	r3, #3
 80167dc:	75fb      	strb	r3, [r7, #23]
            break;
 80167de:	e0a4      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
 80167e0:	20000e18 	.word	0x20000e18
 80167e4:	08021dfc 	.word	0x08021dfc
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80167ee:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 80167f0:	4b55      	ldr	r3, [pc, #340]	; (8016948 <LoRaMacMibSetRequestConfirm+0x74c>)
 80167f2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80167f6:	f107 0108 	add.w	r1, r7, #8
 80167fa:	2209      	movs	r2, #9
 80167fc:	4618      	mov	r0, r3
 80167fe:	f002 fc8d 	bl	801911c <RegionVerify>
 8016802:	4603      	mov	r3, r0
 8016804:	2b00      	cmp	r3, #0
 8016806:	d005      	beq.n	8016814 <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8016808:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801680c:	4b4e      	ldr	r3, [pc, #312]	; (8016948 <LoRaMacMibSetRequestConfirm+0x74c>)
 801680e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8016812:	e08a      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8016814:	2303      	movs	r3, #3
 8016816:	75fb      	strb	r3, [r7, #23]
            break;
 8016818:	e087      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	685b      	ldr	r3, [r3, #4]
 801681e:	4a4a      	ldr	r2, [pc, #296]	; (8016948 <LoRaMacMibSetRequestConfirm+0x74c>)
 8016820:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8016824:	4b48      	ldr	r3, [pc, #288]	; (8016948 <LoRaMacMibSetRequestConfirm+0x74c>)
 8016826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801682a:	4a47      	ldr	r2, [pc, #284]	; (8016948 <LoRaMacMibSetRequestConfirm+0x74c>)
 801682c:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 801682e:	e07c      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	791a      	ldrb	r2, [r3, #4]
 8016834:	4b44      	ldr	r3, [pc, #272]	; (8016948 <LoRaMacMibSetRequestConfirm+0x74c>)
 8016836:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 801683a:	4b43      	ldr	r3, [pc, #268]	; (8016948 <LoRaMacMibSetRequestConfirm+0x74c>)
 801683c:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8016840:	4b41      	ldr	r3, [pc, #260]	; (8016948 <LoRaMacMibSetRequestConfirm+0x74c>)
 8016842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            break;
 8016846:	e070      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	685b      	ldr	r3, [r3, #4]
 801684c:	4a3e      	ldr	r2, [pc, #248]	; (8016948 <LoRaMacMibSetRequestConfirm+0x74c>)
 801684e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8016852:	e06a      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	685b      	ldr	r3, [r3, #4]
 8016858:	4a3b      	ldr	r2, [pc, #236]	; (8016948 <LoRaMacMibSetRequestConfirm+0x74c>)
 801685a:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 801685e:	e064      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8016860:	f7fe fd40 	bl	80152e4 <RestoreNvmData>
 8016864:	4603      	mov	r3, r0
 8016866:	75fb      	strb	r3, [r7, #23]
            break;
 8016868:	e05f      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	799b      	ldrb	r3, [r3, #6]
 801686e:	2b01      	cmp	r3, #1
 8016870:	d80d      	bhi.n	801688e <LoRaMacMibSetRequestConfirm+0x692>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8016872:	4a35      	ldr	r2, [pc, #212]	; (8016948 <LoRaMacMibSetRequestConfirm+0x74c>)
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	685b      	ldr	r3, [r3, #4]
 8016878:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	6858      	ldr	r0, [r3, #4]
 8016880:	f001 fd7e 	bl	8018380 <LoRaMacCryptoSetLrWanVersion>
 8016884:	4603      	mov	r3, r0
 8016886:	2b00      	cmp	r3, #0
 8016888:	d04e      	beq.n	8016928 <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801688a:	2311      	movs	r3, #17
 801688c:	e058      	b.n	8016940 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801688e:	2303      	movs	r3, #3
 8016890:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8016892:	e049      	b.n	8016928 <LoRaMacMibSetRequestConfirm+0x72c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	685b      	ldr	r3, [r3, #4]
 8016898:	4a2b      	ldr	r2, [pc, #172]	; (8016948 <LoRaMacMibSetRequestConfirm+0x74c>)
 801689a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
            break;
 801689e:	e044      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	791a      	ldrb	r2, [r3, #4]
 80168a4:	4b28      	ldr	r3, [pc, #160]	; (8016948 <LoRaMacMibSetRequestConfirm+0x74c>)
 80168a6:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
            break;
 80168aa:	e03e      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	889a      	ldrh	r2, [r3, #4]
 80168b0:	4b25      	ldr	r3, [pc, #148]	; (8016948 <LoRaMacMibSetRequestConfirm+0x74c>)
 80168b2:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            break;
 80168b6:	e038      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	889a      	ldrh	r2, [r3, #4]
 80168bc:	4b22      	ldr	r3, [pc, #136]	; (8016948 <LoRaMacMibSetRequestConfirm+0x74c>)
 80168be:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            break;
 80168c2:	e032      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	889a      	ldrh	r2, [r3, #4]
 80168c8:	4b1f      	ldr	r3, [pc, #124]	; (8016948 <LoRaMacMibSetRequestConfirm+0x74c>)
 80168ca:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
            break;
 80168ce:	e02c      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	889a      	ldrh	r2, [r3, #4]
 80168d4:	4b1c      	ldr	r3, [pc, #112]	; (8016948 <LoRaMacMibSetRequestConfirm+0x74c>)
 80168d6:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
            break;
 80168da:	e026      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80168dc:	2318      	movs	r3, #24
 80168de:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80168e0:	e023      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80168e2:	2318      	movs	r3, #24
 80168e4:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80168e6:	e020      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80168e8:	6878      	ldr	r0, [r7, #4]
 80168ea:	f000 fca4 	bl	8017236 <LoRaMacMibClassBSetRequestConfirm>
 80168ee:	4603      	mov	r3, r0
 80168f0:	75fb      	strb	r3, [r7, #23]
            break;
 80168f2:	e01a      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80168f4:	bf00      	nop
 80168f6:	e018      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80168f8:	bf00      	nop
 80168fa:	e016      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80168fc:	bf00      	nop
 80168fe:	e014      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016900:	bf00      	nop
 8016902:	e012      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016904:	bf00      	nop
 8016906:	e010      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016908:	bf00      	nop
 801690a:	e00e      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 801690c:	bf00      	nop
 801690e:	e00c      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016910:	bf00      	nop
 8016912:	e00a      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016914:	bf00      	nop
 8016916:	e008      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016918:	bf00      	nop
 801691a:	e006      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 801691c:	bf00      	nop
 801691e:	e004      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016920:	bf00      	nop
 8016922:	e002      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016924:	bf00      	nop
 8016926:	e000      	b.n	801692a <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8016928:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 801692a:	7dfb      	ldrb	r3, [r7, #23]
 801692c:	2b00      	cmp	r3, #0
 801692e:	d106      	bne.n	801693e <LoRaMacMibSetRequestConfirm+0x742>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8016930:	4a06      	ldr	r2, [pc, #24]	; (801694c <LoRaMacMibSetRequestConfirm+0x750>)
 8016932:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8016936:	f043 0320 	orr.w	r3, r3, #32
 801693a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 801693e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016940:	4618      	mov	r0, r3
 8016942:	3718      	adds	r7, #24
 8016944:	46bd      	mov	sp, r7
 8016946:	bd80      	pop	{r7, pc}
 8016948:	20000e18 	.word	0x20000e18
 801694c:	200008fc 	.word	0x200008fc

08016950 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8016950:	b580      	push	{r7, lr}
 8016952:	b08a      	sub	sp, #40	; 0x28
 8016954:	af00      	add	r7, sp, #0
 8016956:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8016958:	2302      	movs	r3, #2
 801695a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801695e:	2300      	movs	r3, #0
 8016960:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	2b00      	cmp	r3, #0
 8016966:	d101      	bne.n	801696c <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8016968:	2303      	movs	r3, #3
 801696a:	e17e      	b.n	8016c6a <LoRaMacMlmeRequest+0x31a>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	2200      	movs	r2, #0
 8016970:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8016972:	f7fc fb85 	bl	8013080 <LoRaMacIsBusy>
 8016976:	4603      	mov	r3, r0
 8016978:	2b00      	cmp	r3, #0
 801697a:	d001      	beq.n	8016980 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 801697c:	2301      	movs	r3, #1
 801697e:	e174      	b.n	8016c6a <LoRaMacMlmeRequest+0x31a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8016980:	f001 f994 	bl	8017cac <LoRaMacConfirmQueueIsFull>
 8016984:	4603      	mov	r3, r0
 8016986:	2b00      	cmp	r3, #0
 8016988:	d001      	beq.n	801698e <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 801698a:	2301      	movs	r3, #1
 801698c:	e16d      	b.n	8016c6a <LoRaMacMlmeRequest+0x31a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801698e:	f001 f981 	bl	8017c94 <LoRaMacConfirmQueueGetCnt>
 8016992:	4603      	mov	r3, r0
 8016994:	2b00      	cmp	r3, #0
 8016996:	d104      	bne.n	80169a2 <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8016998:	2214      	movs	r2, #20
 801699a:	2100      	movs	r1, #0
 801699c:	48b5      	ldr	r0, [pc, #724]	; (8016c74 <LoRaMacMlmeRequest+0x324>)
 801699e:	f004 ff75 	bl	801b88c <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80169a2:	4bb5      	ldr	r3, [pc, #724]	; (8016c78 <LoRaMacMlmeRequest+0x328>)
 80169a4:	2201      	movs	r2, #1
 80169a6:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80169aa:	4ab3      	ldr	r2, [pc, #716]	; (8016c78 <LoRaMacMlmeRequest+0x328>)
 80169ac:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80169b0:	f043 0304 	orr.w	r3, r3, #4
 80169b4:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    queueElement.Request = mlmeRequest->Type;
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	781b      	ldrb	r3, [r3, #0]
 80169bc:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80169c0:	2301      	movs	r3, #1
 80169c2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 80169c6:	2300      	movs	r3, #0
 80169c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 80169cc:	2300      	movs	r3, #0
 80169ce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	781b      	ldrb	r3, [r3, #0]
 80169d6:	3b01      	subs	r3, #1
 80169d8:	2b0c      	cmp	r3, #12
 80169da:	f200 811a 	bhi.w	8016c12 <LoRaMacMlmeRequest+0x2c2>
 80169de:	a201      	add	r2, pc, #4	; (adr r2, 80169e4 <LoRaMacMlmeRequest+0x94>)
 80169e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80169e4:	08016a19 	.word	0x08016a19
 80169e8:	08016c13 	.word	0x08016c13
 80169ec:	08016c13 	.word	0x08016c13
 80169f0:	08016c13 	.word	0x08016c13
 80169f4:	08016af7 	.word	0x08016af7
 80169f8:	08016b1b 	.word	0x08016b1b
 80169fc:	08016c13 	.word	0x08016c13
 8016a00:	08016c13 	.word	0x08016c13
 8016a04:	08016b39 	.word	0x08016b39
 8016a08:	08016c13 	.word	0x08016c13
 8016a0c:	08016be1 	.word	0x08016be1
 8016a10:	08016b75 	.word	0x08016b75
 8016a14:	08016bbf 	.word	0x08016bbf
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8016a18:	4b97      	ldr	r3, [pc, #604]	; (8016c78 <LoRaMacMlmeRequest+0x328>)
 8016a1a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8016a1e:	f003 0320 	and.w	r3, r3, #32
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d001      	beq.n	8016a2a <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 8016a26:	2301      	movs	r3, #1
 8016a28:	e11f      	b.n	8016c6a <LoRaMacMlmeRequest+0x31a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	791b      	ldrb	r3, [r3, #4]
 8016a2e:	2b02      	cmp	r3, #2
 8016a30:	d135      	bne.n	8016a9e <LoRaMacMlmeRequest+0x14e>
            {
                ResetMacParameters( false );
 8016a32:	2000      	movs	r0, #0
 8016a34:	f7fe f8b4 	bl	8014ba0 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8016a38:	4b90      	ldr	r3, [pc, #576]	; (8016c7c <LoRaMacMlmeRequest+0x32c>)
 8016a3a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	795b      	ldrb	r3, [r3, #5]
 8016a42:	b25b      	sxtb	r3, r3
 8016a44:	2200      	movs	r2, #0
 8016a46:	4619      	mov	r1, r3
 8016a48:	f002 fc50 	bl	80192ec <RegionAlternateDr>
 8016a4c:	4603      	mov	r3, r0
 8016a4e:	461a      	mov	r2, r3
 8016a50:	4b8a      	ldr	r3, [pc, #552]	; (8016c7c <LoRaMacMlmeRequest+0x32c>)
 8016a52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8016a5c:	4b87      	ldr	r3, [pc, #540]	; (8016c7c <LoRaMacMlmeRequest+0x32c>)
 8016a5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8016a62:	2307      	movs	r3, #7
 8016a64:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

                status = SendReJoinReq( JOIN_REQ );
 8016a68:	20ff      	movs	r0, #255	; 0xff
 8016a6a:	f7fd fe1d 	bl	80146a8 <SendReJoinReq>
 8016a6e:	4603      	mov	r3, r0
 8016a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if( status != LORAMAC_STATUS_OK )
 8016a74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	f000 80cc 	beq.w	8016c16 <LoRaMacMlmeRequest+0x2c6>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8016a7e:	4b7f      	ldr	r3, [pc, #508]	; (8016c7c <LoRaMacMlmeRequest+0x32c>)
 8016a80:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	795b      	ldrb	r3, [r3, #5]
 8016a88:	b25b      	sxtb	r3, r3
 8016a8a:	2201      	movs	r2, #1
 8016a8c:	4619      	mov	r1, r3
 8016a8e:	f002 fc2d 	bl	80192ec <RegionAlternateDr>
 8016a92:	4603      	mov	r3, r0
 8016a94:	461a      	mov	r2, r3
 8016a96:	4b79      	ldr	r3, [pc, #484]	; (8016c7c <LoRaMacMlmeRequest+0x32c>)
 8016a98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8016a9c:	e0bb      	b.n	8016c16 <LoRaMacMlmeRequest+0x2c6>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	791b      	ldrb	r3, [r3, #4]
 8016aa2:	2b01      	cmp	r3, #1
 8016aa4:	f040 80b7 	bne.w	8016c16 <LoRaMacMlmeRequest+0x2c6>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8016aa8:	4b74      	ldr	r3, [pc, #464]	; (8016c7c <LoRaMacMlmeRequest+0x32c>)
 8016aaa:	2200      	movs	r2, #0
 8016aac:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8016ab0:	2302      	movs	r3, #2
 8016ab2:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8016ab4:	4b71      	ldr	r3, [pc, #452]	; (8016c7c <LoRaMacMlmeRequest+0x32c>)
 8016ab6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016aba:	f107 020c 	add.w	r2, r7, #12
 8016abe:	4611      	mov	r1, r2
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	f002 fb19 	bl	80190f8 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	791a      	ldrb	r2, [r3, #4]
 8016aca:	4b6c      	ldr	r3, [pc, #432]	; (8016c7c <LoRaMacMlmeRequest+0x32c>)
 8016acc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8016ad0:	2300      	movs	r3, #0
 8016ad2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                queueElement.ReadyToHandle = true;
 8016ad6:	2301      	movs	r3, #1
 8016ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                OnMacProcessNotify( );
 8016adc:	f7fe fdb2 	bl	8015644 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8016ae0:	4a65      	ldr	r2, [pc, #404]	; (8016c78 <LoRaMacMlmeRequest+0x328>)
 8016ae2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8016ae6:	f043 0310 	orr.w	r3, r3, #16
 8016aea:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
                status = LORAMAC_STATUS_OK;
 8016aee:	2300      	movs	r3, #0
 8016af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8016af4:	e08f      	b.n	8016c16 <LoRaMacMlmeRequest+0x2c6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8016af6:	2300      	movs	r3, #0
 8016af8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8016afc:	f107 031c 	add.w	r3, r7, #28
 8016b00:	2200      	movs	r2, #0
 8016b02:	4619      	mov	r1, r3
 8016b04:	2002      	movs	r0, #2
 8016b06:	f000 fd21 	bl	801754c <LoRaMacCommandsAddCmd>
 8016b0a:	4603      	mov	r3, r0
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	f000 8084 	beq.w	8016c1a <LoRaMacMlmeRequest+0x2ca>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8016b12:	2313      	movs	r3, #19
 8016b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8016b18:	e07f      	b.n	8016c1a <LoRaMacMlmeRequest+0x2ca>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	8898      	ldrh	r0, [r3, #4]
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	6899      	ldr	r1, [r3, #8]
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8016b28:	b2db      	uxtb	r3, r3
 8016b2a:	461a      	mov	r2, r3
 8016b2c:	f7fe fbba 	bl	80152a4 <SetTxContinuousWave>
 8016b30:	4603      	mov	r3, r0
 8016b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8016b36:	e077      	b.n	8016c28 <LoRaMacMlmeRequest+0x2d8>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8016b38:	2300      	movs	r3, #0
 8016b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8016b3e:	f107 0308 	add.w	r3, r7, #8
 8016b42:	4619      	mov	r1, r3
 8016b44:	200d      	movs	r0, #13
 8016b46:	f000 fd81 	bl	801764c <LoRaMacCommandsGetCmd>
 8016b4a:	4603      	mov	r3, r0
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d103      	bne.n	8016b58 <LoRaMacMlmeRequest+0x208>
            {
                status = LORAMAC_STATUS_OK;
 8016b50:	2300      	movs	r3, #0
 8016b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8016b56:	e062      	b.n	8016c1e <LoRaMacMlmeRequest+0x2ce>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8016b58:	f107 031c 	add.w	r3, r7, #28
 8016b5c:	2200      	movs	r2, #0
 8016b5e:	4619      	mov	r1, r3
 8016b60:	200d      	movs	r0, #13
 8016b62:	f000 fcf3 	bl	801754c <LoRaMacCommandsAddCmd>
 8016b66:	4603      	mov	r3, r0
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d058      	beq.n	8016c1e <LoRaMacMlmeRequest+0x2ce>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8016b6c:	2313      	movs	r3, #19
 8016b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8016b72:	e054      	b.n	8016c1e <LoRaMacMlmeRequest+0x2ce>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8016b74:	4b41      	ldr	r3, [pc, #260]	; (8016c7c <LoRaMacMlmeRequest+0x32c>)
 8016b76:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d151      	bne.n	8016c22 <LoRaMacMlmeRequest+0x2d2>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	791b      	ldrb	r3, [r3, #4]
 8016b82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	791b      	ldrb	r3, [r3, #4]
 8016b8a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8016b8e:	b2db      	uxtb	r3, r3
 8016b90:	4618      	mov	r0, r3
 8016b92:	f000 fb25 	bl	80171e0 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8016b96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016b9a:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 8016b9c:	2300      	movs	r3, #0
 8016b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8016ba2:	f107 031c 	add.w	r3, r7, #28
 8016ba6:	2201      	movs	r2, #1
 8016ba8:	4619      	mov	r1, r3
 8016baa:	2010      	movs	r0, #16
 8016bac:	f000 fcce 	bl	801754c <LoRaMacCommandsAddCmd>
 8016bb0:	4603      	mov	r3, r0
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d035      	beq.n	8016c22 <LoRaMacMlmeRequest+0x2d2>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8016bb6:	2313      	movs	r3, #19
 8016bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
            break;
 8016bbc:	e031      	b.n	8016c22 <LoRaMacMlmeRequest+0x2d2>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8016bbe:	2300      	movs	r3, #0
 8016bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8016bc4:	f107 031c 	add.w	r3, r7, #28
 8016bc8:	2200      	movs	r2, #0
 8016bca:	4619      	mov	r1, r3
 8016bcc:	2012      	movs	r0, #18
 8016bce:	f000 fcbd 	bl	801754c <LoRaMacCommandsAddCmd>
 8016bd2:	4603      	mov	r3, r0
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d026      	beq.n	8016c26 <LoRaMacMlmeRequest+0x2d6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8016bd8:	2313      	movs	r3, #19
 8016bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8016bde:	e022      	b.n	8016c26 <LoRaMacMlmeRequest+0x2d6>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8016be0:	2301      	movs	r3, #1
 8016be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8016be6:	f000 fab1 	bl	801714c <LoRaMacClassBIsAcquisitionInProgress>
 8016bea:	4603      	mov	r3, r0
 8016bec:	f083 0301 	eor.w	r3, r3, #1
 8016bf0:	b2db      	uxtb	r3, r3
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d009      	beq.n	8016c0a <LoRaMacMlmeRequest+0x2ba>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8016bf6:	2000      	movs	r0, #0
 8016bf8:	f000 fa8a 	bl	8017110 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8016bfc:	2000      	movs	r0, #0
 8016bfe:	f000 faac 	bl	801715a <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8016c02:	2300      	movs	r3, #0
 8016c04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8016c08:	e00e      	b.n	8016c28 <LoRaMacMlmeRequest+0x2d8>
                status = LORAMAC_STATUS_BUSY;
 8016c0a:	2301      	movs	r3, #1
 8016c0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8016c10:	e00a      	b.n	8016c28 <LoRaMacMlmeRequest+0x2d8>
        }
        default:
            break;
 8016c12:	bf00      	nop
 8016c14:	e008      	b.n	8016c28 <LoRaMacMlmeRequest+0x2d8>
            break;
 8016c16:	bf00      	nop
 8016c18:	e006      	b.n	8016c28 <LoRaMacMlmeRequest+0x2d8>
            break;
 8016c1a:	bf00      	nop
 8016c1c:	e004      	b.n	8016c28 <LoRaMacMlmeRequest+0x2d8>
            break;
 8016c1e:	bf00      	nop
 8016c20:	e002      	b.n	8016c28 <LoRaMacMlmeRequest+0x2d8>
            break;
 8016c22:	bf00      	nop
 8016c24:	e000      	b.n	8016c28 <LoRaMacMlmeRequest+0x2d8>
            break;
 8016c26:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8016c28:	4b13      	ldr	r3, [pc, #76]	; (8016c78 <LoRaMacMlmeRequest+0x328>)
 8016c2a:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8016c32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d010      	beq.n	8016c5c <LoRaMacMlmeRequest+0x30c>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8016c3a:	f001 f82b 	bl	8017c94 <LoRaMacConfirmQueueGetCnt>
 8016c3e:	4603      	mov	r3, r0
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d110      	bne.n	8016c66 <LoRaMacMlmeRequest+0x316>
        {
            MacCtx.NodeAckRequested = false;
 8016c44:	4b0c      	ldr	r3, [pc, #48]	; (8016c78 <LoRaMacMlmeRequest+0x328>)
 8016c46:	2200      	movs	r2, #0
 8016c48:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8016c4c:	4a0a      	ldr	r2, [pc, #40]	; (8016c78 <LoRaMacMlmeRequest+0x328>)
 8016c4e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8016c52:	f36f 0382 	bfc	r3, #2, #1
 8016c56:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8016c5a:	e004      	b.n	8016c66 <LoRaMacMlmeRequest+0x316>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8016c5c:	f107 0320 	add.w	r3, r7, #32
 8016c60:	4618      	mov	r0, r3
 8016c62:	f000 fec3 	bl	80179ec <LoRaMacConfirmQueueAdd>
    }
    return status;
 8016c66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	3728      	adds	r7, #40	; 0x28
 8016c6e:	46bd      	mov	sp, r7
 8016c70:	bd80      	pop	{r7, pc}
 8016c72:	bf00      	nop
 8016c74:	20000d50 	.word	0x20000d50
 8016c78:	200008fc 	.word	0x200008fc
 8016c7c:	20000e18 	.word	0x20000e18

08016c80 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8016c80:	b5b0      	push	{r4, r5, r7, lr}
 8016c82:	b092      	sub	sp, #72	; 0x48
 8016c84:	af02      	add	r7, sp, #8
 8016c86:	6078      	str	r0, [r7, #4]
 8016c88:	460b      	mov	r3, r1
 8016c8a:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8016c8c:	2302      	movs	r3, #2
 8016c8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8016c92:	2300      	movs	r3, #0
 8016c94:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    void* fBuffer = NULL;
 8016c98:	2300      	movs	r3, #0
 8016c9a:	63bb      	str	r3, [r7, #56]	; 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8016c9c:	2300      	movs	r3, #0
 8016c9e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool readyToSend = false;
 8016ca2:	2300      	movs	r3, #0
 8016ca4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    if( mcpsRequest == NULL )
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d101      	bne.n	8016cb2 <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8016cae:	2303      	movs	r3, #3
 8016cb0:	e113      	b.n	8016eda <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	2200      	movs	r2, #0
 8016cb6:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 8016cb8:	f7fc f9e2 	bl	8013080 <LoRaMacIsBusy>
 8016cbc:	4603      	mov	r3, r0
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d001      	beq.n	8016cc6 <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 8016cc2:	2301      	movs	r3, #1
 8016cc4:	e109      	b.n	8016eda <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	f107 040c 	add.w	r4, r7, #12
 8016ccc:	461d      	mov	r5, r3
 8016cce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016cd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016cd2:	682b      	ldr	r3, [r5, #0]
 8016cd4:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8016cdc:	2214      	movs	r2, #20
 8016cde:	2100      	movs	r1, #0
 8016ce0:	4880      	ldr	r0, [pc, #512]	; (8016ee4 <LoRaMacMcpsRequest+0x264>)
 8016ce2:	f004 fdd3 	bl	801b88c <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8016ce6:	4b80      	ldr	r3, [pc, #512]	; (8016ee8 <LoRaMacMcpsRequest+0x268>)
 8016ce8:	2201      	movs	r2, #1
 8016cea:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8016cee:	4b7f      	ldr	r3, [pc, #508]	; (8016eec <LoRaMacMcpsRequest+0x26c>)
 8016cf0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8016cf4:	2b02      	cmp	r3, #2
 8016cf6:	d111      	bne.n	8016d1c <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8016cf8:	4b7c      	ldr	r3, [pc, #496]	; (8016eec <LoRaMacMcpsRequest+0x26c>)
 8016cfa:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8016cfe:	2b02      	cmp	r3, #2
 8016d00:	d10c      	bne.n	8016d1c <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8016d02:	4b7a      	ldr	r3, [pc, #488]	; (8016eec <LoRaMacMcpsRequest+0x26c>)
 8016d04:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 8016d08:	f083 0301 	eor.w	r3, r3, #1
 8016d0c:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d004      	beq.n	8016d1c <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 8016d12:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d101      	bne.n	8016d1c <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8016d18:	2301      	movs	r3, #1
 8016d1a:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8016d1c:	7b3b      	ldrb	r3, [r7, #12]
 8016d1e:	2b03      	cmp	r3, #3
 8016d20:	d030      	beq.n	8016d84 <LoRaMacMcpsRequest+0x104>
 8016d22:	2b03      	cmp	r3, #3
 8016d24:	dc3f      	bgt.n	8016da6 <LoRaMacMcpsRequest+0x126>
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d002      	beq.n	8016d30 <LoRaMacMcpsRequest+0xb0>
 8016d2a:	2b01      	cmp	r3, #1
 8016d2c:	d015      	beq.n	8016d5a <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8016d2e:	e03a      	b.n	8016da6 <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8016d30:	2301      	movs	r3, #1
 8016d32:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8016d36:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016d3a:	2202      	movs	r2, #2
 8016d3c:	f362 1347 	bfi	r3, r2, #5, #3
 8016d40:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8016d44:	7c3b      	ldrb	r3, [r7, #16]
 8016d46:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8016d4a:	697b      	ldr	r3, [r7, #20]
 8016d4c:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8016d4e:	8b3b      	ldrh	r3, [r7, #24]
 8016d50:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 8016d52:	7ebb      	ldrb	r3, [r7, #26]
 8016d54:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8016d58:	e026      	b.n	8016da8 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8016d5a:	2301      	movs	r3, #1
 8016d5c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8016d60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016d64:	2204      	movs	r2, #4
 8016d66:	f362 1347 	bfi	r3, r2, #5, #3
 8016d6a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Confirmed.fPort;
 8016d6e:	7c3b      	ldrb	r3, [r7, #16]
 8016d70:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 8016d74:	697b      	ldr	r3, [r7, #20]
 8016d76:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8016d78:	8b3b      	ldrh	r3, [r7, #24]
 8016d7a:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Confirmed.Datarate;
 8016d7c:	7ebb      	ldrb	r3, [r7, #26]
 8016d7e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8016d82:	e011      	b.n	8016da8 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8016d84:	2301      	movs	r3, #1
 8016d86:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8016d8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016d8e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8016d92:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 8016d96:	693b      	ldr	r3, [r7, #16]
 8016d98:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8016d9a:	8abb      	ldrh	r3, [r7, #20]
 8016d9c:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Proprietary.Datarate;
 8016d9e:	7dbb      	ldrb	r3, [r7, #22]
 8016da0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8016da4:	e000      	b.n	8016da8 <LoRaMacMcpsRequest+0x128>
            break;
 8016da6:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 8016da8:	2302      	movs	r3, #2
 8016daa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8016dae:	4b4f      	ldr	r3, [pc, #316]	; (8016eec <LoRaMacMcpsRequest+0x26c>)
 8016db0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8016db4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8016db8:	4b4c      	ldr	r3, [pc, #304]	; (8016eec <LoRaMacMcpsRequest+0x26c>)
 8016dba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016dbe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8016dc2:	4611      	mov	r1, r2
 8016dc4:	4618      	mov	r0, r3
 8016dc6:	f002 f96e 	bl	80190a6 <RegionGetPhyParam>
 8016dca:	4603      	mov	r3, r0
 8016dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8016dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dd0:	b25b      	sxtb	r3, r3
 8016dd2:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 8016dd6:	4293      	cmp	r3, r2
 8016dd8:	bfb8      	it	lt
 8016dda:	4613      	movlt	r3, r2
 8016ddc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8016de0:	4b42      	ldr	r3, [pc, #264]	; (8016eec <LoRaMacMcpsRequest+0x26c>)
 8016de2:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8016de6:	4a41      	ldr	r2, [pc, #260]	; (8016eec <LoRaMacMcpsRequest+0x26c>)
 8016de8:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 8016dec:	4a3f      	ldr	r2, [pc, #252]	; (8016eec <LoRaMacMcpsRequest+0x26c>)
 8016dee:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 8016df2:	4618      	mov	r0, r3
 8016df4:	f7fc fae0 	bl	80133b8 <CheckForMinimumAbpDatarate>
 8016df8:	4603      	mov	r3, r0
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d002      	beq.n	8016e04 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 8016dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e00:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if( readyToSend == true )
 8016e04:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d05f      	beq.n	8016ecc <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8016e0c:	4b37      	ldr	r3, [pc, #220]	; (8016eec <LoRaMacMcpsRequest+0x26c>)
 8016e0e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8016e12:	f083 0301 	eor.w	r3, r3, #1
 8016e16:	b2db      	uxtb	r3, r3
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d10e      	bne.n	8016e3a <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8016e1c:	4b33      	ldr	r3, [pc, #204]	; (8016eec <LoRaMacMcpsRequest+0x26c>)
 8016e1e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8016e22:	4a32      	ldr	r2, [pc, #200]	; (8016eec <LoRaMacMcpsRequest+0x26c>)
 8016e24:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 8016e28:	4a30      	ldr	r2, [pc, #192]	; (8016eec <LoRaMacMcpsRequest+0x26c>)
 8016e2a:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 8016e2e:	4618      	mov	r0, r3
 8016e30:	f7fc fac2 	bl	80133b8 <CheckForMinimumAbpDatarate>
 8016e34:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d01c      	beq.n	8016e74 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8016e3a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8016e3e:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8016e42:	4b2a      	ldr	r3, [pc, #168]	; (8016eec <LoRaMacMcpsRequest+0x26c>)
 8016e44:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8016e48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8016e4c:	4b27      	ldr	r3, [pc, #156]	; (8016eec <LoRaMacMcpsRequest+0x26c>)
 8016e4e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016e52:	f107 0120 	add.w	r1, r7, #32
 8016e56:	2205      	movs	r2, #5
 8016e58:	4618      	mov	r0, r3
 8016e5a:	f002 f95f 	bl	801911c <RegionVerify>
 8016e5e:	4603      	mov	r3, r0
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d005      	beq.n	8016e70 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8016e64:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8016e68:	4b20      	ldr	r3, [pc, #128]	; (8016eec <LoRaMacMcpsRequest+0x26c>)
 8016e6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8016e6e:	e001      	b.n	8016e74 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8016e70:	2303      	movs	r3, #3
 8016e72:	e032      	b.n	8016eda <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8016e74:	4b1d      	ldr	r3, [pc, #116]	; (8016eec <LoRaMacMcpsRequest+0x26c>)
 8016e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016e7a:	4a1b      	ldr	r2, [pc, #108]	; (8016ee8 <LoRaMacMcpsRequest+0x268>)
 8016e7c:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 8016e80:	4611      	mov	r1, r2
 8016e82:	4618      	mov	r0, r3
 8016e84:	f7fc fb84 	bl	8013590 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8016e88:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016e8a:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8016e8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8016e92:	78fb      	ldrb	r3, [r7, #3]
 8016e94:	9300      	str	r3, [sp, #0]
 8016e96:	4613      	mov	r3, r2
 8016e98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e9a:	f7fd fb23 	bl	80144e4 <Send>
 8016e9e:	4603      	mov	r3, r0
 8016ea0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if( status == LORAMAC_STATUS_OK )
 8016ea4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d10b      	bne.n	8016ec4 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8016eac:	7b3a      	ldrb	r2, [r7, #12]
 8016eae:	4b0e      	ldr	r3, [pc, #56]	; (8016ee8 <LoRaMacMcpsRequest+0x268>)
 8016eb0:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8016eb4:	4a0c      	ldr	r2, [pc, #48]	; (8016ee8 <LoRaMacMcpsRequest+0x268>)
 8016eb6:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8016eba:	f043 0301 	orr.w	r3, r3, #1
 8016ebe:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8016ec2:	e003      	b.n	8016ecc <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8016ec4:	4b08      	ldr	r3, [pc, #32]	; (8016ee8 <LoRaMacMcpsRequest+0x268>)
 8016ec6:	2200      	movs	r2, #0
 8016ec8:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8016ecc:	4b06      	ldr	r3, [pc, #24]	; (8016ee8 <LoRaMacMcpsRequest+0x268>)
 8016ece:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	611a      	str	r2, [r3, #16]

    return status;
 8016ed6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8016eda:	4618      	mov	r0, r3
 8016edc:	3740      	adds	r7, #64	; 0x40
 8016ede:	46bd      	mov	sp, r7
 8016ee0:	bdb0      	pop	{r4, r5, r7, pc}
 8016ee2:	bf00      	nop
 8016ee4:	20000d3c 	.word	0x20000d3c
 8016ee8:	200008fc 	.word	0x200008fc
 8016eec:	20000e18 	.word	0x20000e18

08016ef0 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8016ef0:	b580      	push	{r7, lr}
 8016ef2:	b084      	sub	sp, #16
 8016ef4:	af00      	add	r7, sp, #0
 8016ef6:	4603      	mov	r3, r0
 8016ef8:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8016efa:	79fb      	ldrb	r3, [r7, #7]
 8016efc:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8016efe:	4b0d      	ldr	r3, [pc, #52]	; (8016f34 <LoRaMacTestSetDutyCycleOn+0x44>)
 8016f00:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016f04:	f107 010c 	add.w	r1, r7, #12
 8016f08:	220f      	movs	r2, #15
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	f002 f906 	bl	801911c <RegionVerify>
 8016f10:	4603      	mov	r3, r0
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d00a      	beq.n	8016f2c <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8016f16:	4a07      	ldr	r2, [pc, #28]	; (8016f34 <LoRaMacTestSetDutyCycleOn+0x44>)
 8016f18:	79fb      	ldrb	r3, [r7, #7]
 8016f1a:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8016f1e:	4a06      	ldr	r2, [pc, #24]	; (8016f38 <LoRaMacTestSetDutyCycleOn+0x48>)
 8016f20:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8016f24:	f043 0320 	orr.w	r3, r3, #32
 8016f28:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 8016f2c:	bf00      	nop
 8016f2e:	3710      	adds	r7, #16
 8016f30:	46bd      	mov	sp, r7
 8016f32:	bd80      	pop	{r7, pc}
 8016f34:	20000e18 	.word	0x20000e18
 8016f38:	200008fc 	.word	0x200008fc

08016f3c <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8016f3c:	b580      	push	{r7, lr}
 8016f3e:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8016f40:	f7fe fe94 	bl	8015c6c <LoRaMacStop>
 8016f44:	4603      	mov	r3, r0
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d112      	bne.n	8016f70 <LoRaMacDeInitialization+0x34>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8016f4a:	480b      	ldr	r0, [pc, #44]	; (8016f78 <LoRaMacDeInitialization+0x3c>)
 8016f4c:	f008 fe1e 	bl	801fb8c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8016f50:	480a      	ldr	r0, [pc, #40]	; (8016f7c <LoRaMacDeInitialization+0x40>)
 8016f52:	f008 fe1b 	bl	801fb8c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8016f56:	480a      	ldr	r0, [pc, #40]	; (8016f80 <LoRaMacDeInitialization+0x44>)
 8016f58:	f008 fe18 	bl	801fb8c <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8016f5c:	f000 f94a 	bl	80171f4 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8016f60:	2000      	movs	r0, #0
 8016f62:	f7fd fe1d 	bl	8014ba0 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8016f66:	4b07      	ldr	r3, [pc, #28]	; (8016f84 <LoRaMacDeInitialization+0x48>)
 8016f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f6a:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8016f6c:	2300      	movs	r3, #0
 8016f6e:	e000      	b.n	8016f72 <LoRaMacDeInitialization+0x36>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8016f70:	2301      	movs	r3, #1
    }
}
 8016f72:	4618      	mov	r0, r3
 8016f74:	bd80      	pop	{r7, pc}
 8016f76:	bf00      	nop
 8016f78:	20000c64 	.word	0x20000c64
 8016f7c:	20000c7c 	.word	0x20000c7c
 8016f80:	20000c94 	.word	0x20000c94
 8016f84:	08021dfc 	.word	0x08021dfc

08016f88 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8016f88:	b580      	push	{r7, lr}
 8016f8a:	b08c      	sub	sp, #48	; 0x30
 8016f8c:	af00      	add	r7, sp, #0
 8016f8e:	60f8      	str	r0, [r7, #12]
 8016f90:	60b9      	str	r1, [r7, #8]
 8016f92:	607a      	str	r2, [r7, #4]
 8016f94:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8016f96:	2300      	movs	r3, #0
 8016f98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8016f9c:	68fb      	ldr	r3, [r7, #12]
 8016f9e:	7b1b      	ldrb	r3, [r3, #12]
 8016fa0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	7b5b      	ldrb	r3, [r3, #13]
 8016fa8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	7b9b      	ldrb	r3, [r3, #14]
 8016fb0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	685a      	ldr	r2, [r3, #4]
 8016fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fba:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	785b      	ldrb	r3, [r3, #1]
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	f000 8088 	beq.w	80170d6 <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8016fc6:	2302      	movs	r3, #2
 8016fc8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8016fcc:	68fb      	ldr	r3, [r7, #12]
 8016fce:	7bdb      	ldrb	r3, [r3, #15]
 8016fd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	7c1b      	ldrb	r3, [r3, #16]
 8016fd8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8016fdc:	4611      	mov	r1, r2
 8016fde:	4618      	mov	r0, r3
 8016fe0:	f002 f861 	bl	80190a6 <RegionGetPhyParam>
 8016fe4:	4603      	mov	r3, r0
 8016fe6:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8016fe8:	6a3b      	ldr	r3, [r7, #32]
 8016fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        datarate = MAX( datarate, minTxDatarate );
 8016fee:	f997 202b 	ldrsb.w	r2, [r7, #43]	; 0x2b
 8016ff2:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8016ff6:	4293      	cmp	r3, r2
 8016ff8:	bfb8      	it	lt
 8016ffa:	4613      	movlt	r3, r2
 8016ffc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8017000:	68fb      	ldr	r3, [r7, #12]
 8017002:	685b      	ldr	r3, [r3, #4]
 8017004:	68fa      	ldr	r2, [r7, #12]
 8017006:	8912      	ldrh	r2, [r2, #8]
 8017008:	4293      	cmp	r3, r2
 801700a:	d302      	bcc.n	8017012 <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 801700c:	2301      	movs	r3, #1
 801700e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	685b      	ldr	r3, [r3, #4]
 8017016:	68fa      	ldr	r2, [r7, #12]
 8017018:	8912      	ldrh	r2, [r2, #8]
 801701a:	4611      	mov	r1, r2
 801701c:	68fa      	ldr	r2, [r7, #12]
 801701e:	8952      	ldrh	r2, [r2, #10]
 8017020:	440a      	add	r2, r1
 8017022:	4293      	cmp	r3, r2
 8017024:	d30f      	bcc.n	8017046 <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8017026:	230a      	movs	r3, #10
 8017028:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801702c:	68fb      	ldr	r3, [r7, #12]
 801702e:	7c1b      	ldrb	r3, [r3, #16]
 8017030:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8017034:	4611      	mov	r1, r2
 8017036:	4618      	mov	r0, r3
 8017038:	f002 f835 	bl	80190a6 <RegionGetPhyParam>
 801703c:	4603      	mov	r3, r0
 801703e:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8017040:	6a3b      	ldr	r3, [r7, #32]
 8017042:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8017046:	68fb      	ldr	r3, [r7, #12]
 8017048:	685b      	ldr	r3, [r3, #4]
 801704a:	68fa      	ldr	r2, [r7, #12]
 801704c:	8912      	ldrh	r2, [r2, #8]
 801704e:	4611      	mov	r1, r2
 8017050:	68fa      	ldr	r2, [r7, #12]
 8017052:	8952      	ldrh	r2, [r2, #10]
 8017054:	0052      	lsls	r2, r2, #1
 8017056:	440a      	add	r2, r1
 8017058:	4293      	cmp	r3, r2
 801705a:	d33c      	bcc.n	80170d6 <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 801705c:	68fb      	ldr	r3, [r7, #12]
 801705e:	685b      	ldr	r3, [r3, #4]
 8017060:	68fa      	ldr	r2, [r7, #12]
 8017062:	8912      	ldrh	r2, [r2, #8]
 8017064:	1a9b      	subs	r3, r3, r2
 8017066:	68fa      	ldr	r2, [r7, #12]
 8017068:	8952      	ldrh	r2, [r2, #10]
 801706a:	fbb3 f1f2 	udiv	r1, r3, r2
 801706e:	fb01 f202 	mul.w	r2, r1, r2
 8017072:	1a9b      	subs	r3, r3, r2
 8017074:	2b00      	cmp	r3, #0
 8017076:	d12e      	bne.n	80170d6 <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8017078:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 801707c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8017080:	429a      	cmp	r2, r3
 8017082:	d110      	bne.n	80170a6 <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	781b      	ldrb	r3, [r3, #0]
 8017088:	2b00      	cmp	r3, #0
 801708a:	d009      	beq.n	80170a0 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 801708c:	2302      	movs	r3, #2
 801708e:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	7c1b      	ldrb	r3, [r3, #16]
 8017094:	f107 0210 	add.w	r2, r7, #16
 8017098:	4611      	mov	r1, r2
 801709a:	4618      	mov	r0, r3
 801709c:	f002 f82c 	bl	80190f8 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 80170a0:	2301      	movs	r3, #1
 80170a2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80170a6:	2321      	movs	r3, #33	; 0x21
 80170a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                getPhy.Datarate = datarate;
 80170ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80170b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80170b4:	68fb      	ldr	r3, [r7, #12]
 80170b6:	7bdb      	ldrb	r3, [r3, #15]
 80170b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	7c1b      	ldrb	r3, [r3, #16]
 80170c0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80170c4:	4611      	mov	r1, r2
 80170c6:	4618      	mov	r0, r3
 80170c8:	f001 ffed 	bl	80190a6 <RegionGetPhyParam>
 80170cc:	4603      	mov	r3, r0
 80170ce:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 80170d0:	6a3b      	ldr	r3, [r7, #32]
 80170d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }
        }
    }

    *drOut = datarate;
 80170d6:	68bb      	ldr	r3, [r7, #8]
 80170d8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80170dc:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80170e4:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 80170e6:	683b      	ldr	r3, [r7, #0]
 80170e8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80170ec:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80170ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80170f2:	4618      	mov	r0, r3
 80170f4:	3730      	adds	r7, #48	; 0x30
 80170f6:	46bd      	mov	sp, r7
 80170f8:	bd80      	pop	{r7, pc}

080170fa <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 80170fa:	b480      	push	{r7}
 80170fc:	b085      	sub	sp, #20
 80170fe:	af00      	add	r7, sp, #0
 8017100:	60f8      	str	r0, [r7, #12]
 8017102:	60b9      	str	r1, [r7, #8]
 8017104:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017106:	bf00      	nop
 8017108:	3714      	adds	r7, #20
 801710a:	46bd      	mov	sp, r7
 801710c:	bc80      	pop	{r7}
 801710e:	4770      	bx	lr

08017110 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8017110:	b480      	push	{r7}
 8017112:	b083      	sub	sp, #12
 8017114:	af00      	add	r7, sp, #0
 8017116:	4603      	mov	r3, r0
 8017118:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801711a:	bf00      	nop
 801711c:	370c      	adds	r7, #12
 801711e:	46bd      	mov	sp, r7
 8017120:	bc80      	pop	{r7}
 8017122:	4770      	bx	lr

08017124 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8017124:	b480      	push	{r7}
 8017126:	b083      	sub	sp, #12
 8017128:	af00      	add	r7, sp, #0
 801712a:	4603      	mov	r3, r0
 801712c:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801712e:	bf00      	nop
 8017130:	370c      	adds	r7, #12
 8017132:	46bd      	mov	sp, r7
 8017134:	bc80      	pop	{r7}
 8017136:	4770      	bx	lr

08017138 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8017138:	b480      	push	{r7}
 801713a:	b083      	sub	sp, #12
 801713c:	af00      	add	r7, sp, #0
 801713e:	4603      	mov	r3, r0
 8017140:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017142:	bf00      	nop
 8017144:	370c      	adds	r7, #12
 8017146:	46bd      	mov	sp, r7
 8017148:	bc80      	pop	{r7}
 801714a:	4770      	bx	lr

0801714c <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 801714c:	b480      	push	{r7}
 801714e:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8017150:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017152:	4618      	mov	r0, r3
 8017154:	46bd      	mov	sp, r7
 8017156:	bc80      	pop	{r7}
 8017158:	4770      	bx	lr

0801715a <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 801715a:	b480      	push	{r7}
 801715c:	b083      	sub	sp, #12
 801715e:	af00      	add	r7, sp, #0
 8017160:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017162:	bf00      	nop
 8017164:	370c      	adds	r7, #12
 8017166:	46bd      	mov	sp, r7
 8017168:	bc80      	pop	{r7}
 801716a:	4770      	bx	lr

0801716c <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 801716c:	b480      	push	{r7}
 801716e:	b083      	sub	sp, #12
 8017170:	af00      	add	r7, sp, #0
 8017172:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017174:	bf00      	nop
 8017176:	370c      	adds	r7, #12
 8017178:	46bd      	mov	sp, r7
 801717a:	bc80      	pop	{r7}
 801717c:	4770      	bx	lr

0801717e <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 801717e:	b480      	push	{r7}
 8017180:	b083      	sub	sp, #12
 8017182:	af00      	add	r7, sp, #0
 8017184:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017186:	bf00      	nop
 8017188:	370c      	adds	r7, #12
 801718a:	46bd      	mov	sp, r7
 801718c:	bc80      	pop	{r7}
 801718e:	4770      	bx	lr

08017190 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8017190:	b480      	push	{r7}
 8017192:	b083      	sub	sp, #12
 8017194:	af00      	add	r7, sp, #0
 8017196:	6078      	str	r0, [r7, #4]
 8017198:	460b      	mov	r3, r1
 801719a:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 801719c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801719e:	4618      	mov	r0, r3
 80171a0:	370c      	adds	r7, #12
 80171a2:	46bd      	mov	sp, r7
 80171a4:	bc80      	pop	{r7}
 80171a6:	4770      	bx	lr

080171a8 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80171a8:	b480      	push	{r7}
 80171aa:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80171ac:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80171ae:	4618      	mov	r0, r3
 80171b0:	46bd      	mov	sp, r7
 80171b2:	bc80      	pop	{r7}
 80171b4:	4770      	bx	lr

080171b6 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80171b6:	b480      	push	{r7}
 80171b8:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80171ba:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80171bc:	4618      	mov	r0, r3
 80171be:	46bd      	mov	sp, r7
 80171c0:	bc80      	pop	{r7}
 80171c2:	4770      	bx	lr

080171c4 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80171c4:	b480      	push	{r7}
 80171c6:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80171c8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80171ca:	4618      	mov	r0, r3
 80171cc:	46bd      	mov	sp, r7
 80171ce:	bc80      	pop	{r7}
 80171d0:	4770      	bx	lr

080171d2 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80171d2:	b480      	push	{r7}
 80171d4:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80171d6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80171d8:	4618      	mov	r0, r3
 80171da:	46bd      	mov	sp, r7
 80171dc:	bc80      	pop	{r7}
 80171de:	4770      	bx	lr

080171e0 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80171e0:	b480      	push	{r7}
 80171e2:	b083      	sub	sp, #12
 80171e4:	af00      	add	r7, sp, #0
 80171e6:	4603      	mov	r3, r0
 80171e8:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80171ea:	bf00      	nop
 80171ec:	370c      	adds	r7, #12
 80171ee:	46bd      	mov	sp, r7
 80171f0:	bc80      	pop	{r7}
 80171f2:	4770      	bx	lr

080171f4 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80171f4:	b480      	push	{r7}
 80171f6:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80171f8:	bf00      	nop
 80171fa:	46bd      	mov	sp, r7
 80171fc:	bc80      	pop	{r7}
 80171fe:	4770      	bx	lr

08017200 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8017200:	b480      	push	{r7}
 8017202:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017204:	bf00      	nop
 8017206:	46bd      	mov	sp, r7
 8017208:	bc80      	pop	{r7}
 801720a:	4770      	bx	lr

0801720c <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 801720c:	b480      	push	{r7}
 801720e:	b083      	sub	sp, #12
 8017210:	af00      	add	r7, sp, #0
 8017212:	4603      	mov	r3, r0
 8017214:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8017216:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017218:	4618      	mov	r0, r3
 801721a:	370c      	adds	r7, #12
 801721c:	46bd      	mov	sp, r7
 801721e:	bc80      	pop	{r7}
 8017220:	4770      	bx	lr

08017222 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8017222:	b480      	push	{r7}
 8017224:	b083      	sub	sp, #12
 8017226:	af00      	add	r7, sp, #0
 8017228:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801722a:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801722c:	4618      	mov	r0, r3
 801722e:	370c      	adds	r7, #12
 8017230:	46bd      	mov	sp, r7
 8017232:	bc80      	pop	{r7}
 8017234:	4770      	bx	lr

08017236 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8017236:	b480      	push	{r7}
 8017238:	b083      	sub	sp, #12
 801723a:	af00      	add	r7, sp, #0
 801723c:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801723e:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017240:	4618      	mov	r0, r3
 8017242:	370c      	adds	r7, #12
 8017244:	46bd      	mov	sp, r7
 8017246:	bc80      	pop	{r7}
 8017248:	4770      	bx	lr

0801724a <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 801724a:	b480      	push	{r7}
 801724c:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801724e:	bf00      	nop
 8017250:	46bd      	mov	sp, r7
 8017252:	bc80      	pop	{r7}
 8017254:	4770      	bx	lr

08017256 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8017256:	b480      	push	{r7}
 8017258:	b083      	sub	sp, #12
 801725a:	af00      	add	r7, sp, #0
 801725c:	4603      	mov	r3, r0
 801725e:	6039      	str	r1, [r7, #0]
 8017260:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8017262:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8017264:	4618      	mov	r0, r3
 8017266:	370c      	adds	r7, #12
 8017268:	46bd      	mov	sp, r7
 801726a:	bc80      	pop	{r7}
 801726c:	4770      	bx	lr

0801726e <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 801726e:	b480      	push	{r7}
 8017270:	b083      	sub	sp, #12
 8017272:	af00      	add	r7, sp, #0
 8017274:	4603      	mov	r3, r0
 8017276:	603a      	str	r2, [r7, #0]
 8017278:	80fb      	strh	r3, [r7, #6]
 801727a:	460b      	mov	r3, r1
 801727c:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801727e:	bf00      	nop
 8017280:	370c      	adds	r7, #12
 8017282:	46bd      	mov	sp, r7
 8017284:	bc80      	pop	{r7}
 8017286:	4770      	bx	lr

08017288 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8017288:	b480      	push	{r7}
 801728a:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801728c:	bf00      	nop
 801728e:	46bd      	mov	sp, r7
 8017290:	bc80      	pop	{r7}
 8017292:	4770      	bx	lr

08017294 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8017294:	b480      	push	{r7}
 8017296:	b083      	sub	sp, #12
 8017298:	af00      	add	r7, sp, #0
 801729a:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 801729c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801729e:	4618      	mov	r0, r3
 80172a0:	370c      	adds	r7, #12
 80172a2:	46bd      	mov	sp, r7
 80172a4:	bc80      	pop	{r7}
 80172a6:	4770      	bx	lr

080172a8 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80172a8:	b480      	push	{r7}
 80172aa:	b083      	sub	sp, #12
 80172ac:	af00      	add	r7, sp, #0
 80172ae:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80172b0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80172b2:	4618      	mov	r0, r3
 80172b4:	370c      	adds	r7, #12
 80172b6:	46bd      	mov	sp, r7
 80172b8:	bc80      	pop	{r7}
 80172ba:	4770      	bx	lr

080172bc <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80172bc:	b480      	push	{r7}
 80172be:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80172c0:	bf00      	nop
 80172c2:	46bd      	mov	sp, r7
 80172c4:	bc80      	pop	{r7}
 80172c6:	4770      	bx	lr

080172c8 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 80172c8:	b480      	push	{r7}
 80172ca:	b083      	sub	sp, #12
 80172cc:	af00      	add	r7, sp, #0
 80172ce:	6078      	str	r0, [r7, #4]
 80172d0:	460b      	mov	r3, r1
 80172d2:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80172d4:	bf00      	nop
 80172d6:	370c      	adds	r7, #12
 80172d8:	46bd      	mov	sp, r7
 80172da:	bc80      	pop	{r7}
 80172dc:	4770      	bx	lr

080172de <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 80172de:	b480      	push	{r7}
 80172e0:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80172e2:	bf00      	nop
 80172e4:	46bd      	mov	sp, r7
 80172e6:	bc80      	pop	{r7}
 80172e8:	4770      	bx	lr

080172ea <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80172ea:	b480      	push	{r7}
 80172ec:	b085      	sub	sp, #20
 80172ee:	af00      	add	r7, sp, #0
 80172f0:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80172f6:	2300      	movs	r3, #0
 80172f8:	81fb      	strh	r3, [r7, #14]
 80172fa:	e00a      	b.n	8017312 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80172fc:	89fb      	ldrh	r3, [r7, #14]
 80172fe:	68ba      	ldr	r2, [r7, #8]
 8017300:	4413      	add	r3, r2
 8017302:	781b      	ldrb	r3, [r3, #0]
 8017304:	2b00      	cmp	r3, #0
 8017306:	d001      	beq.n	801730c <IsSlotFree+0x22>
        {
            return false;
 8017308:	2300      	movs	r3, #0
 801730a:	e006      	b.n	801731a <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801730c:	89fb      	ldrh	r3, [r7, #14]
 801730e:	3301      	adds	r3, #1
 8017310:	81fb      	strh	r3, [r7, #14]
 8017312:	89fb      	ldrh	r3, [r7, #14]
 8017314:	2b0f      	cmp	r3, #15
 8017316:	d9f1      	bls.n	80172fc <IsSlotFree+0x12>
        }
    }
    return true;
 8017318:	2301      	movs	r3, #1
}
 801731a:	4618      	mov	r0, r3
 801731c:	3714      	adds	r7, #20
 801731e:	46bd      	mov	sp, r7
 8017320:	bc80      	pop	{r7}
 8017322:	4770      	bx	lr

08017324 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8017324:	b580      	push	{r7, lr}
 8017326:	b082      	sub	sp, #8
 8017328:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 801732a:	2300      	movs	r3, #0
 801732c:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801732e:	e007      	b.n	8017340 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8017330:	79fb      	ldrb	r3, [r7, #7]
 8017332:	3301      	adds	r3, #1
 8017334:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8017336:	79fb      	ldrb	r3, [r7, #7]
 8017338:	2b20      	cmp	r3, #32
 801733a:	d101      	bne.n	8017340 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 801733c:	2300      	movs	r3, #0
 801733e:	e012      	b.n	8017366 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8017340:	79fb      	ldrb	r3, [r7, #7]
 8017342:	011b      	lsls	r3, r3, #4
 8017344:	3308      	adds	r3, #8
 8017346:	4a0a      	ldr	r2, [pc, #40]	; (8017370 <MallocNewMacCommandSlot+0x4c>)
 8017348:	4413      	add	r3, r2
 801734a:	4618      	mov	r0, r3
 801734c:	f7ff ffcd 	bl	80172ea <IsSlotFree>
 8017350:	4603      	mov	r3, r0
 8017352:	f083 0301 	eor.w	r3, r3, #1
 8017356:	b2db      	uxtb	r3, r3
 8017358:	2b00      	cmp	r3, #0
 801735a:	d1e9      	bne.n	8017330 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 801735c:	79fb      	ldrb	r3, [r7, #7]
 801735e:	011b      	lsls	r3, r3, #4
 8017360:	3308      	adds	r3, #8
 8017362:	4a03      	ldr	r2, [pc, #12]	; (8017370 <MallocNewMacCommandSlot+0x4c>)
 8017364:	4413      	add	r3, r2
}
 8017366:	4618      	mov	r0, r3
 8017368:	3708      	adds	r7, #8
 801736a:	46bd      	mov	sp, r7
 801736c:	bd80      	pop	{r7, pc}
 801736e:	bf00      	nop
 8017370:	20001a58 	.word	0x20001a58

08017374 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8017374:	b580      	push	{r7, lr}
 8017376:	b082      	sub	sp, #8
 8017378:	af00      	add	r7, sp, #0
 801737a:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	2b00      	cmp	r3, #0
 8017380:	d101      	bne.n	8017386 <FreeMacCommandSlot+0x12>
    {
        return false;
 8017382:	2300      	movs	r3, #0
 8017384:	e005      	b.n	8017392 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8017386:	2210      	movs	r2, #16
 8017388:	2100      	movs	r1, #0
 801738a:	6878      	ldr	r0, [r7, #4]
 801738c:	f004 fa7e 	bl	801b88c <memset1>

    return true;
 8017390:	2301      	movs	r3, #1
}
 8017392:	4618      	mov	r0, r3
 8017394:	3708      	adds	r7, #8
 8017396:	46bd      	mov	sp, r7
 8017398:	bd80      	pop	{r7, pc}

0801739a <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 801739a:	b480      	push	{r7}
 801739c:	b083      	sub	sp, #12
 801739e:	af00      	add	r7, sp, #0
 80173a0:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d101      	bne.n	80173ac <LinkedListInit+0x12>
    {
        return false;
 80173a8:	2300      	movs	r3, #0
 80173aa:	e006      	b.n	80173ba <LinkedListInit+0x20>
    }

    list->First = NULL;
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	2200      	movs	r2, #0
 80173b0:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	2200      	movs	r2, #0
 80173b6:	605a      	str	r2, [r3, #4]

    return true;
 80173b8:	2301      	movs	r3, #1
}
 80173ba:	4618      	mov	r0, r3
 80173bc:	370c      	adds	r7, #12
 80173be:	46bd      	mov	sp, r7
 80173c0:	bc80      	pop	{r7}
 80173c2:	4770      	bx	lr

080173c4 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80173c4:	b480      	push	{r7}
 80173c6:	b083      	sub	sp, #12
 80173c8:	af00      	add	r7, sp, #0
 80173ca:	6078      	str	r0, [r7, #4]
 80173cc:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d002      	beq.n	80173da <LinkedListAdd+0x16>
 80173d4:	683b      	ldr	r3, [r7, #0]
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d101      	bne.n	80173de <LinkedListAdd+0x1a>
    {
        return false;
 80173da:	2300      	movs	r3, #0
 80173dc:	e015      	b.n	801740a <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	681b      	ldr	r3, [r3, #0]
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d102      	bne.n	80173ec <LinkedListAdd+0x28>
    {
        list->First = element;
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	683a      	ldr	r2, [r7, #0]
 80173ea:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	685b      	ldr	r3, [r3, #4]
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d003      	beq.n	80173fc <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	685b      	ldr	r3, [r3, #4]
 80173f8:	683a      	ldr	r2, [r7, #0]
 80173fa:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80173fc:	683b      	ldr	r3, [r7, #0]
 80173fe:	2200      	movs	r2, #0
 8017400:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	683a      	ldr	r2, [r7, #0]
 8017406:	605a      	str	r2, [r3, #4]

    return true;
 8017408:	2301      	movs	r3, #1
}
 801740a:	4618      	mov	r0, r3
 801740c:	370c      	adds	r7, #12
 801740e:	46bd      	mov	sp, r7
 8017410:	bc80      	pop	{r7}
 8017412:	4770      	bx	lr

08017414 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8017414:	b480      	push	{r7}
 8017416:	b085      	sub	sp, #20
 8017418:	af00      	add	r7, sp, #0
 801741a:	6078      	str	r0, [r7, #4]
 801741c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	2b00      	cmp	r3, #0
 8017422:	d002      	beq.n	801742a <LinkedListGetPrevious+0x16>
 8017424:	683b      	ldr	r3, [r7, #0]
 8017426:	2b00      	cmp	r3, #0
 8017428:	d101      	bne.n	801742e <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 801742a:	2300      	movs	r3, #0
 801742c:	e016      	b.n	801745c <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	681b      	ldr	r3, [r3, #0]
 8017432:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8017434:	683a      	ldr	r2, [r7, #0]
 8017436:	68fb      	ldr	r3, [r7, #12]
 8017438:	429a      	cmp	r2, r3
 801743a:	d00c      	beq.n	8017456 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 801743c:	e002      	b.n	8017444 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 801743e:	68fb      	ldr	r3, [r7, #12]
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	2b00      	cmp	r3, #0
 8017448:	d007      	beq.n	801745a <LinkedListGetPrevious+0x46>
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	681b      	ldr	r3, [r3, #0]
 801744e:	683a      	ldr	r2, [r7, #0]
 8017450:	429a      	cmp	r2, r3
 8017452:	d1f4      	bne.n	801743e <LinkedListGetPrevious+0x2a>
 8017454:	e001      	b.n	801745a <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8017456:	2300      	movs	r3, #0
 8017458:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 801745a:	68fb      	ldr	r3, [r7, #12]
}
 801745c:	4618      	mov	r0, r3
 801745e:	3714      	adds	r7, #20
 8017460:	46bd      	mov	sp, r7
 8017462:	bc80      	pop	{r7}
 8017464:	4770      	bx	lr

08017466 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8017466:	b580      	push	{r7, lr}
 8017468:	b084      	sub	sp, #16
 801746a:	af00      	add	r7, sp, #0
 801746c:	6078      	str	r0, [r7, #4]
 801746e:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d002      	beq.n	801747c <LinkedListRemove+0x16>
 8017476:	683b      	ldr	r3, [r7, #0]
 8017478:	2b00      	cmp	r3, #0
 801747a:	d101      	bne.n	8017480 <LinkedListRemove+0x1a>
    {
        return false;
 801747c:	2300      	movs	r3, #0
 801747e:	e020      	b.n	80174c2 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8017480:	6839      	ldr	r1, [r7, #0]
 8017482:	6878      	ldr	r0, [r7, #4]
 8017484:	f7ff ffc6 	bl	8017414 <LinkedListGetPrevious>
 8017488:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	681b      	ldr	r3, [r3, #0]
 801748e:	683a      	ldr	r2, [r7, #0]
 8017490:	429a      	cmp	r2, r3
 8017492:	d103      	bne.n	801749c <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8017494:	683b      	ldr	r3, [r7, #0]
 8017496:	681a      	ldr	r2, [r3, #0]
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	685b      	ldr	r3, [r3, #4]
 80174a0:	683a      	ldr	r2, [r7, #0]
 80174a2:	429a      	cmp	r2, r3
 80174a4:	d102      	bne.n	80174ac <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	68fa      	ldr	r2, [r7, #12]
 80174aa:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80174ac:	68fb      	ldr	r3, [r7, #12]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d003      	beq.n	80174ba <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 80174b2:	683b      	ldr	r3, [r7, #0]
 80174b4:	681a      	ldr	r2, [r3, #0]
 80174b6:	68fb      	ldr	r3, [r7, #12]
 80174b8:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80174ba:	683b      	ldr	r3, [r7, #0]
 80174bc:	2200      	movs	r2, #0
 80174be:	601a      	str	r2, [r3, #0]

    return true;
 80174c0:	2301      	movs	r3, #1
}
 80174c2:	4618      	mov	r0, r3
 80174c4:	3710      	adds	r7, #16
 80174c6:	46bd      	mov	sp, r7
 80174c8:	bd80      	pop	{r7, pc}
	...

080174cc <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80174cc:	b480      	push	{r7}
 80174ce:	b083      	sub	sp, #12
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	4603      	mov	r3, r0
 80174d4:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 80174d6:	79fb      	ldrb	r3, [r7, #7]
 80174d8:	2b11      	cmp	r3, #17
 80174da:	bf8c      	ite	hi
 80174dc:	2201      	movhi	r2, #1
 80174de:	2200      	movls	r2, #0
 80174e0:	b2d2      	uxtb	r2, r2
 80174e2:	2a00      	cmp	r2, #0
 80174e4:	d10d      	bne.n	8017502 <IsSticky+0x36>
 80174e6:	4a0a      	ldr	r2, [pc, #40]	; (8017510 <IsSticky+0x44>)
 80174e8:	fa22 f303 	lsr.w	r3, r2, r3
 80174ec:	f003 0301 	and.w	r3, r3, #1
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	bf14      	ite	ne
 80174f4:	2301      	movne	r3, #1
 80174f6:	2300      	moveq	r3, #0
 80174f8:	b2db      	uxtb	r3, r3
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d001      	beq.n	8017502 <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 80174fe:	2301      	movs	r3, #1
 8017500:	e000      	b.n	8017504 <IsSticky+0x38>
        default:
            return false;
 8017502:	2300      	movs	r3, #0
    }
}
 8017504:	4618      	mov	r0, r3
 8017506:	370c      	adds	r7, #12
 8017508:	46bd      	mov	sp, r7
 801750a:	bc80      	pop	{r7}
 801750c:	4770      	bx	lr
 801750e:	bf00      	nop
 8017510:	00020720 	.word	0x00020720

08017514 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8017514:	b480      	push	{r7}
 8017516:	b083      	sub	sp, #12
 8017518:	af00      	add	r7, sp, #0
 801751a:	4603      	mov	r3, r0
 801751c:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 801751e:	2300      	movs	r3, #0
    }
}
 8017520:	4618      	mov	r0, r3
 8017522:	370c      	adds	r7, #12
 8017524:	46bd      	mov	sp, r7
 8017526:	bc80      	pop	{r7}
 8017528:	4770      	bx	lr
	...

0801752c <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 801752c:	b580      	push	{r7, lr}
 801752e:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8017530:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8017534:	2100      	movs	r1, #0
 8017536:	4804      	ldr	r0, [pc, #16]	; (8017548 <LoRaMacCommandsInit+0x1c>)
 8017538:	f004 f9a8 	bl	801b88c <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 801753c:	4802      	ldr	r0, [pc, #8]	; (8017548 <LoRaMacCommandsInit+0x1c>)
 801753e:	f7ff ff2c 	bl	801739a <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8017542:	2300      	movs	r3, #0
}
 8017544:	4618      	mov	r0, r3
 8017546:	bd80      	pop	{r7, pc}
 8017548:	20001a58 	.word	0x20001a58

0801754c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 801754c:	b580      	push	{r7, lr}
 801754e:	b086      	sub	sp, #24
 8017550:	af00      	add	r7, sp, #0
 8017552:	4603      	mov	r3, r0
 8017554:	60b9      	str	r1, [r7, #8]
 8017556:	607a      	str	r2, [r7, #4]
 8017558:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 801755a:	68bb      	ldr	r3, [r7, #8]
 801755c:	2b00      	cmp	r3, #0
 801755e:	d101      	bne.n	8017564 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8017560:	2301      	movs	r3, #1
 8017562:	e03b      	b.n	80175dc <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8017564:	f7ff fede 	bl	8017324 <MallocNewMacCommandSlot>
 8017568:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 801756a:	697b      	ldr	r3, [r7, #20]
 801756c:	2b00      	cmp	r3, #0
 801756e:	d101      	bne.n	8017574 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8017570:	2302      	movs	r3, #2
 8017572:	e033      	b.n	80175dc <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8017574:	6979      	ldr	r1, [r7, #20]
 8017576:	481b      	ldr	r0, [pc, #108]	; (80175e4 <LoRaMacCommandsAddCmd+0x98>)
 8017578:	f7ff ff24 	bl	80173c4 <LinkedListAdd>
 801757c:	4603      	mov	r3, r0
 801757e:	f083 0301 	eor.w	r3, r3, #1
 8017582:	b2db      	uxtb	r3, r3
 8017584:	2b00      	cmp	r3, #0
 8017586:	d001      	beq.n	801758c <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8017588:	2305      	movs	r3, #5
 801758a:	e027      	b.n	80175dc <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 801758c:	697b      	ldr	r3, [r7, #20]
 801758e:	7bfa      	ldrb	r2, [r7, #15]
 8017590:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8017592:	697b      	ldr	r3, [r7, #20]
 8017594:	687a      	ldr	r2, [r7, #4]
 8017596:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8017598:	697b      	ldr	r3, [r7, #20]
 801759a:	3305      	adds	r3, #5
 801759c:	687a      	ldr	r2, [r7, #4]
 801759e:	b292      	uxth	r2, r2
 80175a0:	68b9      	ldr	r1, [r7, #8]
 80175a2:	4618      	mov	r0, r3
 80175a4:	f004 f937 	bl	801b816 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80175a8:	7bfb      	ldrb	r3, [r7, #15]
 80175aa:	4618      	mov	r0, r3
 80175ac:	f7ff ff8e 	bl	80174cc <IsSticky>
 80175b0:	4603      	mov	r3, r0
 80175b2:	461a      	mov	r2, r3
 80175b4:	697b      	ldr	r3, [r7, #20]
 80175b6:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 80175b8:	7bfb      	ldrb	r3, [r7, #15]
 80175ba:	4618      	mov	r0, r3
 80175bc:	f7ff ffaa 	bl	8017514 <IsConfirmationRequired>
 80175c0:	4603      	mov	r3, r0
 80175c2:	461a      	mov	r2, r3
 80175c4:	697b      	ldr	r3, [r7, #20]
 80175c6:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80175c8:	4b06      	ldr	r3, [pc, #24]	; (80175e4 <LoRaMacCommandsAddCmd+0x98>)
 80175ca:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	4413      	add	r3, r2
 80175d2:	3301      	adds	r3, #1
 80175d4:	4a03      	ldr	r2, [pc, #12]	; (80175e4 <LoRaMacCommandsAddCmd+0x98>)
 80175d6:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 80175da:	2300      	movs	r3, #0
}
 80175dc:	4618      	mov	r0, r3
 80175de:	3718      	adds	r7, #24
 80175e0:	46bd      	mov	sp, r7
 80175e2:	bd80      	pop	{r7, pc}
 80175e4:	20001a58 	.word	0x20001a58

080175e8 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80175e8:	b580      	push	{r7, lr}
 80175ea:	b082      	sub	sp, #8
 80175ec:	af00      	add	r7, sp, #0
 80175ee:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d101      	bne.n	80175fa <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80175f6:	2301      	movs	r3, #1
 80175f8:	e021      	b.n	801763e <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 80175fa:	6879      	ldr	r1, [r7, #4]
 80175fc:	4812      	ldr	r0, [pc, #72]	; (8017648 <LoRaMacCommandsRemoveCmd+0x60>)
 80175fe:	f7ff ff32 	bl	8017466 <LinkedListRemove>
 8017602:	4603      	mov	r3, r0
 8017604:	f083 0301 	eor.w	r3, r3, #1
 8017608:	b2db      	uxtb	r3, r3
 801760a:	2b00      	cmp	r3, #0
 801760c:	d001      	beq.n	8017612 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801760e:	2303      	movs	r3, #3
 8017610:	e015      	b.n	801763e <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8017612:	4b0d      	ldr	r3, [pc, #52]	; (8017648 <LoRaMacCommandsRemoveCmd+0x60>)
 8017614:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	689b      	ldr	r3, [r3, #8]
 801761c:	1ad3      	subs	r3, r2, r3
 801761e:	3b01      	subs	r3, #1
 8017620:	4a09      	ldr	r2, [pc, #36]	; (8017648 <LoRaMacCommandsRemoveCmd+0x60>)
 8017622:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8017626:	6878      	ldr	r0, [r7, #4]
 8017628:	f7ff fea4 	bl	8017374 <FreeMacCommandSlot>
 801762c:	4603      	mov	r3, r0
 801762e:	f083 0301 	eor.w	r3, r3, #1
 8017632:	b2db      	uxtb	r3, r3
 8017634:	2b00      	cmp	r3, #0
 8017636:	d001      	beq.n	801763c <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8017638:	2305      	movs	r3, #5
 801763a:	e000      	b.n	801763e <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801763c:	2300      	movs	r3, #0
}
 801763e:	4618      	mov	r0, r3
 8017640:	3708      	adds	r7, #8
 8017642:	46bd      	mov	sp, r7
 8017644:	bd80      	pop	{r7, pc}
 8017646:	bf00      	nop
 8017648:	20001a58 	.word	0x20001a58

0801764c <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 801764c:	b480      	push	{r7}
 801764e:	b085      	sub	sp, #20
 8017650:	af00      	add	r7, sp, #0
 8017652:	4603      	mov	r3, r0
 8017654:	6039      	str	r1, [r7, #0]
 8017656:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8017658:	4b0e      	ldr	r3, [pc, #56]	; (8017694 <LoRaMacCommandsGetCmd+0x48>)
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 801765e:	e002      	b.n	8017666 <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	681b      	ldr	r3, [r3, #0]
 8017664:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	2b00      	cmp	r3, #0
 801766a:	d004      	beq.n	8017676 <LoRaMacCommandsGetCmd+0x2a>
 801766c:	68fb      	ldr	r3, [r7, #12]
 801766e:	791b      	ldrb	r3, [r3, #4]
 8017670:	79fa      	ldrb	r2, [r7, #7]
 8017672:	429a      	cmp	r2, r3
 8017674:	d1f4      	bne.n	8017660 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8017676:	683b      	ldr	r3, [r7, #0]
 8017678:	68fa      	ldr	r2, [r7, #12]
 801767a:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	2b00      	cmp	r3, #0
 8017680:	d101      	bne.n	8017686 <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8017682:	2303      	movs	r3, #3
 8017684:	e000      	b.n	8017688 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8017686:	2300      	movs	r3, #0
}
 8017688:	4618      	mov	r0, r3
 801768a:	3714      	adds	r7, #20
 801768c:	46bd      	mov	sp, r7
 801768e:	bc80      	pop	{r7}
 8017690:	4770      	bx	lr
 8017692:	bf00      	nop
 8017694:	20001a58 	.word	0x20001a58

08017698 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8017698:	b580      	push	{r7, lr}
 801769a:	b082      	sub	sp, #8
 801769c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801769e:	4b0f      	ldr	r3, [pc, #60]	; (80176dc <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80176a4:	e012      	b.n	80176cc <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	7b1b      	ldrb	r3, [r3, #12]
 80176aa:	f083 0301 	eor.w	r3, r3, #1
 80176ae:	b2db      	uxtb	r3, r3
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d008      	beq.n	80176c6 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80176ba:	6878      	ldr	r0, [r7, #4]
 80176bc:	f7ff ff94 	bl	80175e8 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80176c0:	683b      	ldr	r3, [r7, #0]
 80176c2:	607b      	str	r3, [r7, #4]
 80176c4:	e002      	b.n	80176cc <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d1e9      	bne.n	80176a6 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80176d2:	2300      	movs	r3, #0
}
 80176d4:	4618      	mov	r0, r3
 80176d6:	3708      	adds	r7, #8
 80176d8:	46bd      	mov	sp, r7
 80176da:	bd80      	pop	{r7, pc}
 80176dc:	20001a58 	.word	0x20001a58

080176e0 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80176e0:	b580      	push	{r7, lr}
 80176e2:	b082      	sub	sp, #8
 80176e4:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80176e6:	4b13      	ldr	r3, [pc, #76]	; (8017734 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80176ec:	e01a      	b.n	8017724 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	681b      	ldr	r3, [r3, #0]
 80176f2:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	791b      	ldrb	r3, [r3, #4]
 80176f8:	4618      	mov	r0, r3
 80176fa:	f7ff fee7 	bl	80174cc <IsSticky>
 80176fe:	4603      	mov	r3, r0
 8017700:	2b00      	cmp	r3, #0
 8017702:	d00d      	beq.n	8017720 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	791b      	ldrb	r3, [r3, #4]
 8017708:	4618      	mov	r0, r3
 801770a:	f7ff ff03 	bl	8017514 <IsConfirmationRequired>
 801770e:	4603      	mov	r3, r0
 8017710:	f083 0301 	eor.w	r3, r3, #1
 8017714:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 8017716:	2b00      	cmp	r3, #0
 8017718:	d002      	beq.n	8017720 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 801771a:	6878      	ldr	r0, [r7, #4]
 801771c:	f7ff ff64 	bl	80175e8 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8017720:	683b      	ldr	r3, [r7, #0]
 8017722:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	2b00      	cmp	r3, #0
 8017728:	d1e1      	bne.n	80176ee <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801772a:	2300      	movs	r3, #0
}
 801772c:	4618      	mov	r0, r3
 801772e:	3708      	adds	r7, #8
 8017730:	46bd      	mov	sp, r7
 8017732:	bd80      	pop	{r7, pc}
 8017734:	20001a58 	.word	0x20001a58

08017738 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8017738:	b480      	push	{r7}
 801773a:	b083      	sub	sp, #12
 801773c:	af00      	add	r7, sp, #0
 801773e:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	2b00      	cmp	r3, #0
 8017744:	d101      	bne.n	801774a <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8017746:	2301      	movs	r3, #1
 8017748:	e005      	b.n	8017756 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 801774a:	4b05      	ldr	r3, [pc, #20]	; (8017760 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 801774c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8017754:	2300      	movs	r3, #0
}
 8017756:	4618      	mov	r0, r3
 8017758:	370c      	adds	r7, #12
 801775a:	46bd      	mov	sp, r7
 801775c:	bc80      	pop	{r7}
 801775e:	4770      	bx	lr
 8017760:	20001a58 	.word	0x20001a58

08017764 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8017764:	b580      	push	{r7, lr}
 8017766:	b088      	sub	sp, #32
 8017768:	af00      	add	r7, sp, #0
 801776a:	60f8      	str	r0, [r7, #12]
 801776c:	60b9      	str	r1, [r7, #8]
 801776e:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8017770:	4b25      	ldr	r3, [pc, #148]	; (8017808 <LoRaMacCommandsSerializeCmds+0xa4>)
 8017772:	681b      	ldr	r3, [r3, #0]
 8017774:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8017776:	2300      	movs	r3, #0
 8017778:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	2b00      	cmp	r3, #0
 801777e:	d002      	beq.n	8017786 <LoRaMacCommandsSerializeCmds+0x22>
 8017780:	68bb      	ldr	r3, [r7, #8]
 8017782:	2b00      	cmp	r3, #0
 8017784:	d126      	bne.n	80177d4 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8017786:	2301      	movs	r3, #1
 8017788:	e039      	b.n	80177fe <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 801778a:	7efb      	ldrb	r3, [r7, #27]
 801778c:	68fa      	ldr	r2, [r7, #12]
 801778e:	1ad2      	subs	r2, r2, r3
 8017790:	69fb      	ldr	r3, [r7, #28]
 8017792:	689b      	ldr	r3, [r3, #8]
 8017794:	3301      	adds	r3, #1
 8017796:	429a      	cmp	r2, r3
 8017798:	d320      	bcc.n	80177dc <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 801779a:	7efb      	ldrb	r3, [r7, #27]
 801779c:	1c5a      	adds	r2, r3, #1
 801779e:	76fa      	strb	r2, [r7, #27]
 80177a0:	461a      	mov	r2, r3
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	4413      	add	r3, r2
 80177a6:	69fa      	ldr	r2, [r7, #28]
 80177a8:	7912      	ldrb	r2, [r2, #4]
 80177aa:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80177ac:	7efb      	ldrb	r3, [r7, #27]
 80177ae:	687a      	ldr	r2, [r7, #4]
 80177b0:	18d0      	adds	r0, r2, r3
 80177b2:	69fb      	ldr	r3, [r7, #28]
 80177b4:	1d59      	adds	r1, r3, #5
 80177b6:	69fb      	ldr	r3, [r7, #28]
 80177b8:	689b      	ldr	r3, [r3, #8]
 80177ba:	b29b      	uxth	r3, r3
 80177bc:	461a      	mov	r2, r3
 80177be:	f004 f82a 	bl	801b816 <memcpy1>
            itr += curElement->PayloadSize;
 80177c2:	69fb      	ldr	r3, [r7, #28]
 80177c4:	689b      	ldr	r3, [r3, #8]
 80177c6:	b2da      	uxtb	r2, r3
 80177c8:	7efb      	ldrb	r3, [r7, #27]
 80177ca:	4413      	add	r3, r2
 80177cc:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80177ce:	69fb      	ldr	r3, [r7, #28]
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80177d4:	69fb      	ldr	r3, [r7, #28]
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d1d7      	bne.n	801778a <LoRaMacCommandsSerializeCmds+0x26>
 80177da:	e009      	b.n	80177f0 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 80177dc:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80177de:	e007      	b.n	80177f0 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80177e0:	69fb      	ldr	r3, [r7, #28]
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 80177e6:	69f8      	ldr	r0, [r7, #28]
 80177e8:	f7ff fefe 	bl	80175e8 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80177ec:	697b      	ldr	r3, [r7, #20]
 80177ee:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80177f0:	69fb      	ldr	r3, [r7, #28]
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d1f4      	bne.n	80177e0 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80177f6:	68b8      	ldr	r0, [r7, #8]
 80177f8:	f7ff ff9e 	bl	8017738 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80177fc:	2300      	movs	r3, #0
}
 80177fe:	4618      	mov	r0, r3
 8017800:	3720      	adds	r7, #32
 8017802:	46bd      	mov	sp, r7
 8017804:	bd80      	pop	{r7, pc}
 8017806:	bf00      	nop
 8017808:	20001a58 	.word	0x20001a58

0801780c <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 801780c:	b480      	push	{r7}
 801780e:	b085      	sub	sp, #20
 8017810:	af00      	add	r7, sp, #0
 8017812:	4603      	mov	r3, r0
 8017814:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8017816:	2300      	movs	r3, #0
 8017818:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 801781a:	79fb      	ldrb	r3, [r7, #7]
 801781c:	3b02      	subs	r3, #2
 801781e:	2b11      	cmp	r3, #17
 8017820:	d850      	bhi.n	80178c4 <LoRaMacCommandsGetCmdSize+0xb8>
 8017822:	a201      	add	r2, pc, #4	; (adr r2, 8017828 <LoRaMacCommandsGetCmdSize+0x1c>)
 8017824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017828:	08017871 	.word	0x08017871
 801782c:	08017877 	.word	0x08017877
 8017830:	0801787d 	.word	0x0801787d
 8017834:	08017883 	.word	0x08017883
 8017838:	08017889 	.word	0x08017889
 801783c:	0801788f 	.word	0x0801788f
 8017840:	08017895 	.word	0x08017895
 8017844:	0801789b 	.word	0x0801789b
 8017848:	080178a1 	.word	0x080178a1
 801784c:	080178c5 	.word	0x080178c5
 8017850:	080178c5 	.word	0x080178c5
 8017854:	080178a7 	.word	0x080178a7
 8017858:	080178c5 	.word	0x080178c5
 801785c:	080178c5 	.word	0x080178c5
 8017860:	080178ad 	.word	0x080178ad
 8017864:	080178b3 	.word	0x080178b3
 8017868:	080178b9 	.word	0x080178b9
 801786c:	080178bf 	.word	0x080178bf
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8017870:	2303      	movs	r3, #3
 8017872:	73fb      	strb	r3, [r7, #15]
            break;
 8017874:	e027      	b.n	80178c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8017876:	2305      	movs	r3, #5
 8017878:	73fb      	strb	r3, [r7, #15]
            break;
 801787a:	e024      	b.n	80178c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 801787c:	2302      	movs	r3, #2
 801787e:	73fb      	strb	r3, [r7, #15]
            break;
 8017880:	e021      	b.n	80178c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8017882:	2305      	movs	r3, #5
 8017884:	73fb      	strb	r3, [r7, #15]
            break;
 8017886:	e01e      	b.n	80178c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8017888:	2301      	movs	r3, #1
 801788a:	73fb      	strb	r3, [r7, #15]
            break;
 801788c:	e01b      	b.n	80178c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 801788e:	2306      	movs	r3, #6
 8017890:	73fb      	strb	r3, [r7, #15]
            break;
 8017892:	e018      	b.n	80178c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8017894:	2302      	movs	r3, #2
 8017896:	73fb      	strb	r3, [r7, #15]
            break;
 8017898:	e015      	b.n	80178c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 801789a:	2302      	movs	r3, #2
 801789c:	73fb      	strb	r3, [r7, #15]
            break;
 801789e:	e012      	b.n	80178c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 80178a0:	2305      	movs	r3, #5
 80178a2:	73fb      	strb	r3, [r7, #15]
            break;
 80178a4:	e00f      	b.n	80178c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 80178a6:	2306      	movs	r3, #6
 80178a8:	73fb      	strb	r3, [r7, #15]
            break;
 80178aa:	e00c      	b.n	80178c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 80178ac:	2301      	movs	r3, #1
 80178ae:	73fb      	strb	r3, [r7, #15]
            break;
 80178b0:	e009      	b.n	80178c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80178b2:	2305      	movs	r3, #5
 80178b4:	73fb      	strb	r3, [r7, #15]
            break;
 80178b6:	e006      	b.n	80178c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80178b8:	2304      	movs	r3, #4
 80178ba:	73fb      	strb	r3, [r7, #15]
            break;
 80178bc:	e003      	b.n	80178c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80178be:	2304      	movs	r3, #4
 80178c0:	73fb      	strb	r3, [r7, #15]
            break;
 80178c2:	e000      	b.n	80178c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 80178c4:	bf00      	nop
        }
    }
    return cidSize;
 80178c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80178c8:	4618      	mov	r0, r3
 80178ca:	3714      	adds	r7, #20
 80178cc:	46bd      	mov	sp, r7
 80178ce:	bc80      	pop	{r7}
 80178d0:	4770      	bx	lr
 80178d2:	bf00      	nop

080178d4 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 80178d4:	b480      	push	{r7}
 80178d6:	b083      	sub	sp, #12
 80178d8:	af00      	add	r7, sp, #0
 80178da:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	4a07      	ldr	r2, [pc, #28]	; (80178fc <IncreaseBufferPointer+0x28>)
 80178e0:	4293      	cmp	r3, r2
 80178e2:	d102      	bne.n	80178ea <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80178e4:	4b06      	ldr	r3, [pc, #24]	; (8017900 <IncreaseBufferPointer+0x2c>)
 80178e6:	607b      	str	r3, [r7, #4]
 80178e8:	e002      	b.n	80178f0 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	3304      	adds	r3, #4
 80178ee:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80178f0:	687b      	ldr	r3, [r7, #4]
}
 80178f2:	4618      	mov	r0, r3
 80178f4:	370c      	adds	r7, #12
 80178f6:	46bd      	mov	sp, r7
 80178f8:	bc80      	pop	{r7}
 80178fa:	4770      	bx	lr
 80178fc:	20001c80 	.word	0x20001c80
 8017900:	20001c70 	.word	0x20001c70

08017904 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8017904:	b480      	push	{r7}
 8017906:	b083      	sub	sp, #12
 8017908:	af00      	add	r7, sp, #0
 801790a:	4603      	mov	r3, r0
 801790c:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 801790e:	79fb      	ldrb	r3, [r7, #7]
 8017910:	2b00      	cmp	r3, #0
 8017912:	d101      	bne.n	8017918 <IsListEmpty+0x14>
    {
        return true;
 8017914:	2301      	movs	r3, #1
 8017916:	e000      	b.n	801791a <IsListEmpty+0x16>
    }
    return false;
 8017918:	2300      	movs	r3, #0
}
 801791a:	4618      	mov	r0, r3
 801791c:	370c      	adds	r7, #12
 801791e:	46bd      	mov	sp, r7
 8017920:	bc80      	pop	{r7}
 8017922:	4770      	bx	lr

08017924 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8017924:	b480      	push	{r7}
 8017926:	b083      	sub	sp, #12
 8017928:	af00      	add	r7, sp, #0
 801792a:	4603      	mov	r3, r0
 801792c:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 801792e:	79fb      	ldrb	r3, [r7, #7]
 8017930:	2b04      	cmp	r3, #4
 8017932:	d901      	bls.n	8017938 <IsListFull+0x14>
    {
        return true;
 8017934:	2301      	movs	r3, #1
 8017936:	e000      	b.n	801793a <IsListFull+0x16>
    }
    return false;
 8017938:	2300      	movs	r3, #0
}
 801793a:	4618      	mov	r0, r3
 801793c:	370c      	adds	r7, #12
 801793e:	46bd      	mov	sp, r7
 8017940:	bc80      	pop	{r7}
 8017942:	4770      	bx	lr

08017944 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8017944:	b580      	push	{r7, lr}
 8017946:	b086      	sub	sp, #24
 8017948:	af00      	add	r7, sp, #0
 801794a:	4603      	mov	r3, r0
 801794c:	60b9      	str	r1, [r7, #8]
 801794e:	607a      	str	r2, [r7, #4]
 8017950:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8017952:	68bb      	ldr	r3, [r7, #8]
 8017954:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8017956:	4b13      	ldr	r3, [pc, #76]	; (80179a4 <GetElement+0x60>)
 8017958:	f893 3020 	ldrb.w	r3, [r3, #32]
 801795c:	4618      	mov	r0, r3
 801795e:	f7ff ffd1 	bl	8017904 <IsListEmpty>
 8017962:	4603      	mov	r3, r0
 8017964:	2b00      	cmp	r3, #0
 8017966:	d001      	beq.n	801796c <GetElement+0x28>
    {
        return NULL;
 8017968:	2300      	movs	r3, #0
 801796a:	e017      	b.n	801799c <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 801796c:	2300      	movs	r3, #0
 801796e:	74fb      	strb	r3, [r7, #19]
 8017970:	e00d      	b.n	801798e <GetElement+0x4a>
    {
        if( element->Request == request )
 8017972:	697b      	ldr	r3, [r7, #20]
 8017974:	781b      	ldrb	r3, [r3, #0]
 8017976:	7bfa      	ldrb	r2, [r7, #15]
 8017978:	429a      	cmp	r2, r3
 801797a:	d101      	bne.n	8017980 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 801797c:	697b      	ldr	r3, [r7, #20]
 801797e:	e00d      	b.n	801799c <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8017980:	6978      	ldr	r0, [r7, #20]
 8017982:	f7ff ffa7 	bl	80178d4 <IncreaseBufferPointer>
 8017986:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8017988:	7cfb      	ldrb	r3, [r7, #19]
 801798a:	3301      	adds	r3, #1
 801798c:	74fb      	strb	r3, [r7, #19]
 801798e:	4b05      	ldr	r3, [pc, #20]	; (80179a4 <GetElement+0x60>)
 8017990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017994:	7cfa      	ldrb	r2, [r7, #19]
 8017996:	429a      	cmp	r2, r3
 8017998:	d3eb      	bcc.n	8017972 <GetElement+0x2e>
    }

    return NULL;
 801799a:	2300      	movs	r3, #0
}
 801799c:	4618      	mov	r0, r3
 801799e:	3718      	adds	r7, #24
 80179a0:	46bd      	mov	sp, r7
 80179a2:	bd80      	pop	{r7, pc}
 80179a4:	20001c64 	.word	0x20001c64

080179a8 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b082      	sub	sp, #8
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 80179b0:	4a0c      	ldr	r2, [pc, #48]	; (80179e4 <LoRaMacConfirmQueueInit+0x3c>)
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80179b6:	4b0b      	ldr	r3, [pc, #44]	; (80179e4 <LoRaMacConfirmQueueInit+0x3c>)
 80179b8:	2200      	movs	r2, #0
 80179ba:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80179be:	4b09      	ldr	r3, [pc, #36]	; (80179e4 <LoRaMacConfirmQueueInit+0x3c>)
 80179c0:	4a09      	ldr	r2, [pc, #36]	; (80179e8 <LoRaMacConfirmQueueInit+0x40>)
 80179c2:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80179c4:	4b07      	ldr	r3, [pc, #28]	; (80179e4 <LoRaMacConfirmQueueInit+0x3c>)
 80179c6:	4a08      	ldr	r2, [pc, #32]	; (80179e8 <LoRaMacConfirmQueueInit+0x40>)
 80179c8:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80179ca:	2214      	movs	r2, #20
 80179cc:	21ff      	movs	r1, #255	; 0xff
 80179ce:	4806      	ldr	r0, [pc, #24]	; (80179e8 <LoRaMacConfirmQueueInit+0x40>)
 80179d0:	f003 ff5c 	bl	801b88c <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80179d4:	4b03      	ldr	r3, [pc, #12]	; (80179e4 <LoRaMacConfirmQueueInit+0x3c>)
 80179d6:	2201      	movs	r2, #1
 80179d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80179dc:	bf00      	nop
 80179de:	3708      	adds	r7, #8
 80179e0:	46bd      	mov	sp, r7
 80179e2:	bd80      	pop	{r7, pc}
 80179e4:	20001c64 	.word	0x20001c64
 80179e8:	20001c70 	.word	0x20001c70

080179ec <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80179ec:	b580      	push	{r7, lr}
 80179ee:	b082      	sub	sp, #8
 80179f0:	af00      	add	r7, sp, #0
 80179f2:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80179f4:	4b19      	ldr	r3, [pc, #100]	; (8017a5c <LoRaMacConfirmQueueAdd+0x70>)
 80179f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80179fa:	4618      	mov	r0, r3
 80179fc:	f7ff ff92 	bl	8017924 <IsListFull>
 8017a00:	4603      	mov	r3, r0
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d001      	beq.n	8017a0a <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8017a06:	2300      	movs	r3, #0
 8017a08:	e024      	b.n	8017a54 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8017a0a:	4b14      	ldr	r3, [pc, #80]	; (8017a5c <LoRaMacConfirmQueueAdd+0x70>)
 8017a0c:	689b      	ldr	r3, [r3, #8]
 8017a0e:	687a      	ldr	r2, [r7, #4]
 8017a10:	7812      	ldrb	r2, [r2, #0]
 8017a12:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8017a14:	4b11      	ldr	r3, [pc, #68]	; (8017a5c <LoRaMacConfirmQueueAdd+0x70>)
 8017a16:	689b      	ldr	r3, [r3, #8]
 8017a18:	687a      	ldr	r2, [r7, #4]
 8017a1a:	7852      	ldrb	r2, [r2, #1]
 8017a1c:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8017a1e:	4b0f      	ldr	r3, [pc, #60]	; (8017a5c <LoRaMacConfirmQueueAdd+0x70>)
 8017a20:	689b      	ldr	r3, [r3, #8]
 8017a22:	687a      	ldr	r2, [r7, #4]
 8017a24:	78d2      	ldrb	r2, [r2, #3]
 8017a26:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8017a28:	4b0c      	ldr	r3, [pc, #48]	; (8017a5c <LoRaMacConfirmQueueAdd+0x70>)
 8017a2a:	689b      	ldr	r3, [r3, #8]
 8017a2c:	687a      	ldr	r2, [r7, #4]
 8017a2e:	7892      	ldrb	r2, [r2, #2]
 8017a30:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8017a32:	4b0a      	ldr	r3, [pc, #40]	; (8017a5c <LoRaMacConfirmQueueAdd+0x70>)
 8017a34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017a38:	3301      	adds	r3, #1
 8017a3a:	b2da      	uxtb	r2, r3
 8017a3c:	4b07      	ldr	r3, [pc, #28]	; (8017a5c <LoRaMacConfirmQueueAdd+0x70>)
 8017a3e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8017a42:	4b06      	ldr	r3, [pc, #24]	; (8017a5c <LoRaMacConfirmQueueAdd+0x70>)
 8017a44:	689b      	ldr	r3, [r3, #8]
 8017a46:	4618      	mov	r0, r3
 8017a48:	f7ff ff44 	bl	80178d4 <IncreaseBufferPointer>
 8017a4c:	4603      	mov	r3, r0
 8017a4e:	4a03      	ldr	r2, [pc, #12]	; (8017a5c <LoRaMacConfirmQueueAdd+0x70>)
 8017a50:	6093      	str	r3, [r2, #8]

    return true;
 8017a52:	2301      	movs	r3, #1
}
 8017a54:	4618      	mov	r0, r3
 8017a56:	3708      	adds	r7, #8
 8017a58:	46bd      	mov	sp, r7
 8017a5a:	bd80      	pop	{r7, pc}
 8017a5c:	20001c64 	.word	0x20001c64

08017a60 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8017a60:	b580      	push	{r7, lr}
 8017a62:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8017a64:	4b0e      	ldr	r3, [pc, #56]	; (8017aa0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8017a66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017a6a:	4618      	mov	r0, r3
 8017a6c:	f7ff ff4a 	bl	8017904 <IsListEmpty>
 8017a70:	4603      	mov	r3, r0
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d001      	beq.n	8017a7a <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8017a76:	2300      	movs	r3, #0
 8017a78:	e010      	b.n	8017a9c <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8017a7a:	4b09      	ldr	r3, [pc, #36]	; (8017aa0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8017a7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017a80:	3b01      	subs	r3, #1
 8017a82:	b2da      	uxtb	r2, r3
 8017a84:	4b06      	ldr	r3, [pc, #24]	; (8017aa0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8017a86:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8017a8a:	4b05      	ldr	r3, [pc, #20]	; (8017aa0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8017a8c:	685b      	ldr	r3, [r3, #4]
 8017a8e:	4618      	mov	r0, r3
 8017a90:	f7ff ff20 	bl	80178d4 <IncreaseBufferPointer>
 8017a94:	4603      	mov	r3, r0
 8017a96:	4a02      	ldr	r2, [pc, #8]	; (8017aa0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8017a98:	6053      	str	r3, [r2, #4]

    return true;
 8017a9a:	2301      	movs	r3, #1
}
 8017a9c:	4618      	mov	r0, r3
 8017a9e:	bd80      	pop	{r7, pc}
 8017aa0:	20001c64 	.word	0x20001c64

08017aa4 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8017aa4:	b580      	push	{r7, lr}
 8017aa6:	b084      	sub	sp, #16
 8017aa8:	af00      	add	r7, sp, #0
 8017aaa:	4603      	mov	r3, r0
 8017aac:	460a      	mov	r2, r1
 8017aae:	71fb      	strb	r3, [r7, #7]
 8017ab0:	4613      	mov	r3, r2
 8017ab2:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8017ab4:	2300      	movs	r3, #0
 8017ab6:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8017ab8:	4b10      	ldr	r3, [pc, #64]	; (8017afc <LoRaMacConfirmQueueSetStatus+0x58>)
 8017aba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017abe:	4618      	mov	r0, r3
 8017ac0:	f7ff ff20 	bl	8017904 <IsListEmpty>
 8017ac4:	4603      	mov	r3, r0
 8017ac6:	f083 0301 	eor.w	r3, r3, #1
 8017aca:	b2db      	uxtb	r3, r3
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d011      	beq.n	8017af4 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8017ad0:	4b0a      	ldr	r3, [pc, #40]	; (8017afc <LoRaMacConfirmQueueSetStatus+0x58>)
 8017ad2:	6859      	ldr	r1, [r3, #4]
 8017ad4:	4b09      	ldr	r3, [pc, #36]	; (8017afc <LoRaMacConfirmQueueSetStatus+0x58>)
 8017ad6:	689a      	ldr	r2, [r3, #8]
 8017ad8:	79bb      	ldrb	r3, [r7, #6]
 8017ada:	4618      	mov	r0, r3
 8017adc:	f7ff ff32 	bl	8017944 <GetElement>
 8017ae0:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8017ae2:	68fb      	ldr	r3, [r7, #12]
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d005      	beq.n	8017af4 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	79fa      	ldrb	r2, [r7, #7]
 8017aec:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	2201      	movs	r2, #1
 8017af2:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8017af4:	bf00      	nop
 8017af6:	3710      	adds	r7, #16
 8017af8:	46bd      	mov	sp, r7
 8017afa:	bd80      	pop	{r7, pc}
 8017afc:	20001c64 	.word	0x20001c64

08017b00 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8017b00:	b580      	push	{r7, lr}
 8017b02:	b084      	sub	sp, #16
 8017b04:	af00      	add	r7, sp, #0
 8017b06:	4603      	mov	r3, r0
 8017b08:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8017b0a:	2300      	movs	r3, #0
 8017b0c:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8017b0e:	4b10      	ldr	r3, [pc, #64]	; (8017b50 <LoRaMacConfirmQueueGetStatus+0x50>)
 8017b10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017b14:	4618      	mov	r0, r3
 8017b16:	f7ff fef5 	bl	8017904 <IsListEmpty>
 8017b1a:	4603      	mov	r3, r0
 8017b1c:	f083 0301 	eor.w	r3, r3, #1
 8017b20:	b2db      	uxtb	r3, r3
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d00e      	beq.n	8017b44 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8017b26:	4b0a      	ldr	r3, [pc, #40]	; (8017b50 <LoRaMacConfirmQueueGetStatus+0x50>)
 8017b28:	6859      	ldr	r1, [r3, #4]
 8017b2a:	4b09      	ldr	r3, [pc, #36]	; (8017b50 <LoRaMacConfirmQueueGetStatus+0x50>)
 8017b2c:	689a      	ldr	r2, [r3, #8]
 8017b2e:	79fb      	ldrb	r3, [r7, #7]
 8017b30:	4618      	mov	r0, r3
 8017b32:	f7ff ff07 	bl	8017944 <GetElement>
 8017b36:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8017b38:	68fb      	ldr	r3, [r7, #12]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d002      	beq.n	8017b44 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	785b      	ldrb	r3, [r3, #1]
 8017b42:	e000      	b.n	8017b46 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8017b44:	2301      	movs	r3, #1
}
 8017b46:	4618      	mov	r0, r3
 8017b48:	3710      	adds	r7, #16
 8017b4a:	46bd      	mov	sp, r7
 8017b4c:	bd80      	pop	{r7, pc}
 8017b4e:	bf00      	nop
 8017b50:	20001c64 	.word	0x20001c64

08017b54 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8017b54:	b580      	push	{r7, lr}
 8017b56:	b084      	sub	sp, #16
 8017b58:	af00      	add	r7, sp, #0
 8017b5a:	4603      	mov	r3, r0
 8017b5c:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8017b5e:	4b16      	ldr	r3, [pc, #88]	; (8017bb8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8017b60:	685b      	ldr	r3, [r3, #4]
 8017b62:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8017b64:	4a14      	ldr	r2, [pc, #80]	; (8017bb8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8017b66:	79fb      	ldrb	r3, [r7, #7]
 8017b68:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8017b6c:	4b12      	ldr	r3, [pc, #72]	; (8017bb8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8017b6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017b72:	4618      	mov	r0, r3
 8017b74:	f7ff fec6 	bl	8017904 <IsListEmpty>
 8017b78:	4603      	mov	r3, r0
 8017b7a:	f083 0301 	eor.w	r3, r3, #1
 8017b7e:	b2db      	uxtb	r3, r3
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d015      	beq.n	8017bb0 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8017b84:	68fb      	ldr	r3, [r7, #12]
 8017b86:	79fa      	ldrb	r2, [r7, #7]
 8017b88:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	78db      	ldrb	r3, [r3, #3]
 8017b8e:	f083 0301 	eor.w	r3, r3, #1
 8017b92:	b2db      	uxtb	r3, r3
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	d002      	beq.n	8017b9e <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8017b98:	68fb      	ldr	r3, [r7, #12]
 8017b9a:	2201      	movs	r2, #1
 8017b9c:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8017b9e:	68f8      	ldr	r0, [r7, #12]
 8017ba0:	f7ff fe98 	bl	80178d4 <IncreaseBufferPointer>
 8017ba4:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8017ba6:	4b04      	ldr	r3, [pc, #16]	; (8017bb8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8017ba8:	689b      	ldr	r3, [r3, #8]
 8017baa:	68fa      	ldr	r2, [r7, #12]
 8017bac:	429a      	cmp	r2, r3
 8017bae:	d1e9      	bne.n	8017b84 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8017bb0:	bf00      	nop
 8017bb2:	3710      	adds	r7, #16
 8017bb4:	46bd      	mov	sp, r7
 8017bb6:	bd80      	pop	{r7, pc}
 8017bb8:	20001c64 	.word	0x20001c64

08017bbc <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8017bbc:	b580      	push	{r7, lr}
 8017bbe:	b082      	sub	sp, #8
 8017bc0:	af00      	add	r7, sp, #0
 8017bc2:	4603      	mov	r3, r0
 8017bc4:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8017bc6:	4b09      	ldr	r3, [pc, #36]	; (8017bec <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8017bc8:	6859      	ldr	r1, [r3, #4]
 8017bca:	4b08      	ldr	r3, [pc, #32]	; (8017bec <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8017bcc:	689a      	ldr	r2, [r3, #8]
 8017bce:	79fb      	ldrb	r3, [r7, #7]
 8017bd0:	4618      	mov	r0, r3
 8017bd2:	f7ff feb7 	bl	8017944 <GetElement>
 8017bd6:	4603      	mov	r3, r0
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	d001      	beq.n	8017be0 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8017bdc:	2301      	movs	r3, #1
 8017bde:	e000      	b.n	8017be2 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8017be0:	2300      	movs	r3, #0
}
 8017be2:	4618      	mov	r0, r3
 8017be4:	3708      	adds	r7, #8
 8017be6:	46bd      	mov	sp, r7
 8017be8:	bd80      	pop	{r7, pc}
 8017bea:	bf00      	nop
 8017bec:	20001c64 	.word	0x20001c64

08017bf0 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8017bf0:	b580      	push	{r7, lr}
 8017bf2:	b084      	sub	sp, #16
 8017bf4:	af00      	add	r7, sp, #0
 8017bf6:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8017bf8:	4b25      	ldr	r3, [pc, #148]	; (8017c90 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8017bfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017bfe:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8017c00:	2300      	movs	r3, #0
 8017c02:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8017c04:	f107 0308 	add.w	r3, r7, #8
 8017c08:	2204      	movs	r2, #4
 8017c0a:	2100      	movs	r1, #0
 8017c0c:	4618      	mov	r0, r3
 8017c0e:	f003 fe3d 	bl	801b88c <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 8017c12:	2300      	movs	r3, #0
 8017c14:	73fb      	strb	r3, [r7, #15]
 8017c16:	e032      	b.n	8017c7e <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8017c18:	4b1d      	ldr	r3, [pc, #116]	; (8017c90 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8017c1a:	685b      	ldr	r3, [r3, #4]
 8017c1c:	781a      	ldrb	r2, [r3, #0]
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8017c22:	4b1b      	ldr	r3, [pc, #108]	; (8017c90 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8017c24:	685b      	ldr	r3, [r3, #4]
 8017c26:	785a      	ldrb	r2, [r3, #1]
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8017c2c:	4b18      	ldr	r3, [pc, #96]	; (8017c90 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8017c2e:	685b      	ldr	r3, [r3, #4]
 8017c30:	789b      	ldrb	r3, [r3, #2]
 8017c32:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8017c34:	7b7b      	ldrb	r3, [r7, #13]
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d005      	beq.n	8017c46 <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8017c3a:	4b15      	ldr	r3, [pc, #84]	; (8017c90 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	689b      	ldr	r3, [r3, #8]
 8017c40:	6878      	ldr	r0, [r7, #4]
 8017c42:	4798      	blx	r3
 8017c44:	e00b      	b.n	8017c5e <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8017c46:	4b12      	ldr	r3, [pc, #72]	; (8017c90 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8017c48:	685b      	ldr	r3, [r3, #4]
 8017c4a:	781b      	ldrb	r3, [r3, #0]
 8017c4c:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8017c4e:	4b10      	ldr	r3, [pc, #64]	; (8017c90 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8017c50:	685b      	ldr	r3, [r3, #4]
 8017c52:	785b      	ldrb	r3, [r3, #1]
 8017c54:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8017c56:	4b0e      	ldr	r3, [pc, #56]	; (8017c90 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8017c58:	685b      	ldr	r3, [r3, #4]
 8017c5a:	78db      	ldrb	r3, [r3, #3]
 8017c5c:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8017c5e:	f7ff feff 	bl	8017a60 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8017c62:	7b7b      	ldrb	r3, [r7, #13]
 8017c64:	f083 0301 	eor.w	r3, r3, #1
 8017c68:	b2db      	uxtb	r3, r3
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d004      	beq.n	8017c78 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8017c6e:	f107 0308 	add.w	r3, r7, #8
 8017c72:	4618      	mov	r0, r3
 8017c74:	f7ff feba 	bl	80179ec <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8017c78:	7bfb      	ldrb	r3, [r7, #15]
 8017c7a:	3301      	adds	r3, #1
 8017c7c:	73fb      	strb	r3, [r7, #15]
 8017c7e:	7bfa      	ldrb	r2, [r7, #15]
 8017c80:	7bbb      	ldrb	r3, [r7, #14]
 8017c82:	429a      	cmp	r2, r3
 8017c84:	d3c8      	bcc.n	8017c18 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 8017c86:	bf00      	nop
 8017c88:	bf00      	nop
 8017c8a:	3710      	adds	r7, #16
 8017c8c:	46bd      	mov	sp, r7
 8017c8e:	bd80      	pop	{r7, pc}
 8017c90:	20001c64 	.word	0x20001c64

08017c94 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8017c94:	b480      	push	{r7}
 8017c96:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8017c98:	4b03      	ldr	r3, [pc, #12]	; (8017ca8 <LoRaMacConfirmQueueGetCnt+0x14>)
 8017c9a:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8017c9e:	4618      	mov	r0, r3
 8017ca0:	46bd      	mov	sp, r7
 8017ca2:	bc80      	pop	{r7}
 8017ca4:	4770      	bx	lr
 8017ca6:	bf00      	nop
 8017ca8:	20001c64 	.word	0x20001c64

08017cac <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8017cac:	b580      	push	{r7, lr}
 8017cae:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8017cb0:	4b06      	ldr	r3, [pc, #24]	; (8017ccc <LoRaMacConfirmQueueIsFull+0x20>)
 8017cb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017cb6:	4618      	mov	r0, r3
 8017cb8:	f7ff fe34 	bl	8017924 <IsListFull>
 8017cbc:	4603      	mov	r3, r0
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d001      	beq.n	8017cc6 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8017cc2:	2301      	movs	r3, #1
 8017cc4:	e000      	b.n	8017cc8 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8017cc6:	2300      	movs	r3, #0
    }
}
 8017cc8:	4618      	mov	r0, r3
 8017cca:	bd80      	pop	{r7, pc}
 8017ccc:	20001c64 	.word	0x20001c64

08017cd0 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8017cd0:	b580      	push	{r7, lr}
 8017cd2:	b08e      	sub	sp, #56	; 0x38
 8017cd4:	af00      	add	r7, sp, #0
 8017cd6:	60f8      	str	r0, [r7, #12]
 8017cd8:	607b      	str	r3, [r7, #4]
 8017cda:	460b      	mov	r3, r1
 8017cdc:	817b      	strh	r3, [r7, #10]
 8017cde:	4613      	mov	r3, r2
 8017ce0:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8017ce2:	68fb      	ldr	r3, [r7, #12]
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d101      	bne.n	8017cec <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017ce8:	2309      	movs	r3, #9
 8017cea:	e086      	b.n	8017dfa <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8017cec:	2300      	movs	r3, #0
 8017cee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8017cf2:	2301      	movs	r3, #1
 8017cf4:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8017cf6:	2300      	movs	r3, #0
 8017cf8:	623b      	str	r3, [r7, #32]
 8017cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017cfe:	2200      	movs	r2, #0
 8017d00:	601a      	str	r2, [r3, #0]
 8017d02:	605a      	str	r2, [r3, #4]
 8017d04:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8017d06:	2300      	movs	r3, #0
 8017d08:	613b      	str	r3, [r7, #16]
 8017d0a:	f107 0314 	add.w	r3, r7, #20
 8017d0e:	2200      	movs	r2, #0
 8017d10:	601a      	str	r2, [r3, #0]
 8017d12:	605a      	str	r2, [r3, #4]
 8017d14:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8017d16:	2301      	movs	r3, #1
 8017d18:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8017d1a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8017d1e:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	b2db      	uxtb	r3, r3
 8017d24:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	0a1b      	lsrs	r3, r3, #8
 8017d2a:	b2db      	uxtb	r3, r3
 8017d2c:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	0c1b      	lsrs	r3, r3, #16
 8017d32:	b2db      	uxtb	r3, r3
 8017d34:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	0e1b      	lsrs	r3, r3, #24
 8017d3a:	b2db      	uxtb	r3, r3
 8017d3c:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8017d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d40:	b2db      	uxtb	r3, r3
 8017d42:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8017d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d46:	0a1b      	lsrs	r3, r3, #8
 8017d48:	b2db      	uxtb	r3, r3
 8017d4a:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8017d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d4e:	0c1b      	lsrs	r3, r3, #16
 8017d50:	b2db      	uxtb	r3, r3
 8017d52:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8017d54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d56:	0e1b      	lsrs	r3, r3, #24
 8017d58:	b2db      	uxtb	r3, r3
 8017d5a:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8017d5c:	e048      	b.n	8017df0 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8017d5e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017d60:	b2db      	uxtb	r3, r3
 8017d62:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8017d64:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017d66:	3301      	adds	r3, #1
 8017d68:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8017d6a:	f107 0320 	add.w	r3, r7, #32
 8017d6e:	7a7a      	ldrb	r2, [r7, #9]
 8017d70:	f107 0010 	add.w	r0, r7, #16
 8017d74:	2110      	movs	r1, #16
 8017d76:	f7f8 fa79 	bl	801026c <SecureElementAesEncrypt>
 8017d7a:	4603      	mov	r3, r0
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d001      	beq.n	8017d84 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017d80:	230e      	movs	r3, #14
 8017d82:	e03a      	b.n	8017dfa <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8017d84:	2300      	movs	r3, #0
 8017d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8017d8a:	e01e      	b.n	8017dca <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8017d8c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8017d90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017d94:	4413      	add	r3, r2
 8017d96:	461a      	mov	r2, r3
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	4413      	add	r3, r2
 8017d9c:	7819      	ldrb	r1, [r3, #0]
 8017d9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017da2:	3338      	adds	r3, #56	; 0x38
 8017da4:	443b      	add	r3, r7
 8017da6:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8017daa:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8017dae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017db2:	4403      	add	r3, r0
 8017db4:	4618      	mov	r0, r3
 8017db6:	68fb      	ldr	r3, [r7, #12]
 8017db8:	4403      	add	r3, r0
 8017dba:	404a      	eors	r2, r1
 8017dbc:	b2d2      	uxtb	r2, r2
 8017dbe:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8017dc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017dc4:	3301      	adds	r3, #1
 8017dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8017dca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017dce:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8017dd2:	2a10      	cmp	r2, #16
 8017dd4:	bfa8      	it	ge
 8017dd6:	2210      	movge	r2, #16
 8017dd8:	b212      	sxth	r2, r2
 8017dda:	4293      	cmp	r3, r2
 8017ddc:	dbd6      	blt.n	8017d8c <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8017dde:	897b      	ldrh	r3, [r7, #10]
 8017de0:	3b10      	subs	r3, #16
 8017de2:	b29b      	uxth	r3, r3
 8017de4:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8017de6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017dea:	3310      	adds	r3, #16
 8017dec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8017df0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	dcb2      	bgt.n	8017d5e <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8017df8:	2300      	movs	r3, #0
}
 8017dfa:	4618      	mov	r0, r3
 8017dfc:	3738      	adds	r7, #56	; 0x38
 8017dfe:	46bd      	mov	sp, r7
 8017e00:	bd80      	pop	{r7, pc}

08017e02 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8017e02:	b490      	push	{r4, r7}
 8017e04:	b082      	sub	sp, #8
 8017e06:	af00      	add	r7, sp, #0
 8017e08:	4604      	mov	r4, r0
 8017e0a:	4608      	mov	r0, r1
 8017e0c:	4611      	mov	r1, r2
 8017e0e:	461a      	mov	r2, r3
 8017e10:	4623      	mov	r3, r4
 8017e12:	80fb      	strh	r3, [r7, #6]
 8017e14:	4603      	mov	r3, r0
 8017e16:	717b      	strb	r3, [r7, #5]
 8017e18:	460b      	mov	r3, r1
 8017e1a:	713b      	strb	r3, [r7, #4]
 8017e1c:	4613      	mov	r3, r2
 8017e1e:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8017e20:	69bb      	ldr	r3, [r7, #24]
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d101      	bne.n	8017e2a <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017e26:	2309      	movs	r3, #9
 8017e28:	e04e      	b.n	8017ec8 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8017e2a:	69bb      	ldr	r3, [r7, #24]
 8017e2c:	2249      	movs	r2, #73	; 0x49
 8017e2e:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8017e30:	69bb      	ldr	r3, [r7, #24]
 8017e32:	3301      	adds	r3, #1
 8017e34:	2200      	movs	r2, #0
 8017e36:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8017e38:	69bb      	ldr	r3, [r7, #24]
 8017e3a:	3302      	adds	r3, #2
 8017e3c:	2200      	movs	r2, #0
 8017e3e:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8017e40:	69bb      	ldr	r3, [r7, #24]
 8017e42:	3303      	adds	r3, #3
 8017e44:	2200      	movs	r2, #0
 8017e46:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8017e48:	69bb      	ldr	r3, [r7, #24]
 8017e4a:	3304      	adds	r3, #4
 8017e4c:	2200      	movs	r2, #0
 8017e4e:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8017e50:	69bb      	ldr	r3, [r7, #24]
 8017e52:	3305      	adds	r3, #5
 8017e54:	78fa      	ldrb	r2, [r7, #3]
 8017e56:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8017e58:	69bb      	ldr	r3, [r7, #24]
 8017e5a:	3306      	adds	r3, #6
 8017e5c:	693a      	ldr	r2, [r7, #16]
 8017e5e:	b2d2      	uxtb	r2, r2
 8017e60:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8017e62:	693b      	ldr	r3, [r7, #16]
 8017e64:	0a1a      	lsrs	r2, r3, #8
 8017e66:	69bb      	ldr	r3, [r7, #24]
 8017e68:	3307      	adds	r3, #7
 8017e6a:	b2d2      	uxtb	r2, r2
 8017e6c:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8017e6e:	693b      	ldr	r3, [r7, #16]
 8017e70:	0c1a      	lsrs	r2, r3, #16
 8017e72:	69bb      	ldr	r3, [r7, #24]
 8017e74:	3308      	adds	r3, #8
 8017e76:	b2d2      	uxtb	r2, r2
 8017e78:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8017e7a:	693b      	ldr	r3, [r7, #16]
 8017e7c:	0e1a      	lsrs	r2, r3, #24
 8017e7e:	69bb      	ldr	r3, [r7, #24]
 8017e80:	3309      	adds	r3, #9
 8017e82:	b2d2      	uxtb	r2, r2
 8017e84:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8017e86:	69bb      	ldr	r3, [r7, #24]
 8017e88:	330a      	adds	r3, #10
 8017e8a:	697a      	ldr	r2, [r7, #20]
 8017e8c:	b2d2      	uxtb	r2, r2
 8017e8e:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8017e90:	697b      	ldr	r3, [r7, #20]
 8017e92:	0a1a      	lsrs	r2, r3, #8
 8017e94:	69bb      	ldr	r3, [r7, #24]
 8017e96:	330b      	adds	r3, #11
 8017e98:	b2d2      	uxtb	r2, r2
 8017e9a:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8017e9c:	697b      	ldr	r3, [r7, #20]
 8017e9e:	0c1a      	lsrs	r2, r3, #16
 8017ea0:	69bb      	ldr	r3, [r7, #24]
 8017ea2:	330c      	adds	r3, #12
 8017ea4:	b2d2      	uxtb	r2, r2
 8017ea6:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8017ea8:	697b      	ldr	r3, [r7, #20]
 8017eaa:	0e1a      	lsrs	r2, r3, #24
 8017eac:	69bb      	ldr	r3, [r7, #24]
 8017eae:	330d      	adds	r3, #13
 8017eb0:	b2d2      	uxtb	r2, r2
 8017eb2:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8017eb4:	69bb      	ldr	r3, [r7, #24]
 8017eb6:	330e      	adds	r3, #14
 8017eb8:	2200      	movs	r2, #0
 8017eba:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8017ebc:	69bb      	ldr	r3, [r7, #24]
 8017ebe:	330f      	adds	r3, #15
 8017ec0:	88fa      	ldrh	r2, [r7, #6]
 8017ec2:	b2d2      	uxtb	r2, r2
 8017ec4:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8017ec6:	2300      	movs	r3, #0
}
 8017ec8:	4618      	mov	r0, r3
 8017eca:	3708      	adds	r7, #8
 8017ecc:	46bd      	mov	sp, r7
 8017ece:	bc90      	pop	{r4, r7}
 8017ed0:	4770      	bx	lr

08017ed2 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8017ed2:	b590      	push	{r4, r7, lr}
 8017ed4:	b08b      	sub	sp, #44	; 0x2c
 8017ed6:	af04      	add	r7, sp, #16
 8017ed8:	6078      	str	r0, [r7, #4]
 8017eda:	4608      	mov	r0, r1
 8017edc:	4611      	mov	r1, r2
 8017ede:	461a      	mov	r2, r3
 8017ee0:	4603      	mov	r3, r0
 8017ee2:	807b      	strh	r3, [r7, #2]
 8017ee4:	460b      	mov	r3, r1
 8017ee6:	707b      	strb	r3, [r7, #1]
 8017ee8:	4613      	mov	r3, r2
 8017eea:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	d002      	beq.n	8017ef8 <ComputeCmacB0+0x26>
 8017ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d101      	bne.n	8017efc <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017ef8:	2309      	movs	r3, #9
 8017efa:	e024      	b.n	8017f46 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8017efc:	887b      	ldrh	r3, [r7, #2]
 8017efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017f02:	d901      	bls.n	8017f08 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8017f04:	230d      	movs	r3, #13
 8017f06:	e01e      	b.n	8017f46 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8017f08:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8017f0c:	783a      	ldrb	r2, [r7, #0]
 8017f0e:	7879      	ldrb	r1, [r7, #1]
 8017f10:	8878      	ldrh	r0, [r7, #2]
 8017f12:	f107 0308 	add.w	r3, r7, #8
 8017f16:	9302      	str	r3, [sp, #8]
 8017f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f1a:	9301      	str	r3, [sp, #4]
 8017f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f1e:	9300      	str	r3, [sp, #0]
 8017f20:	4623      	mov	r3, r4
 8017f22:	f7ff ff6e 	bl	8017e02 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8017f26:	887a      	ldrh	r2, [r7, #2]
 8017f28:	7879      	ldrb	r1, [r7, #1]
 8017f2a:	f107 0008 	add.w	r0, r7, #8
 8017f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f30:	9300      	str	r3, [sp, #0]
 8017f32:	460b      	mov	r3, r1
 8017f34:	6879      	ldr	r1, [r7, #4]
 8017f36:	f7f8 f953 	bl	80101e0 <SecureElementComputeAesCmac>
 8017f3a:	4603      	mov	r3, r0
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d001      	beq.n	8017f44 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017f40:	230e      	movs	r3, #14
 8017f42:	e000      	b.n	8017f46 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8017f44:	2300      	movs	r3, #0
}
 8017f46:	4618      	mov	r0, r3
 8017f48:	371c      	adds	r7, #28
 8017f4a:	46bd      	mov	sp, r7
 8017f4c:	bd90      	pop	{r4, r7, pc}

08017f4e <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8017f4e:	b590      	push	{r4, r7, lr}
 8017f50:	b0cd      	sub	sp, #308	; 0x134
 8017f52:	af04      	add	r7, sp, #16
 8017f54:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8017f58:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8017f5c:	6020      	str	r0, [r4, #0]
 8017f5e:	460c      	mov	r4, r1
 8017f60:	4610      	mov	r0, r2
 8017f62:	4619      	mov	r1, r3
 8017f64:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8017f68:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8017f6c:	4622      	mov	r2, r4
 8017f6e:	801a      	strh	r2, [r3, #0]
 8017f70:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8017f74:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8017f78:	4602      	mov	r2, r0
 8017f7a:	701a      	strb	r2, [r3, #0]
 8017f7c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8017f80:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8017f84:	460a      	mov	r2, r1
 8017f86:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8017f88:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8017f8c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d101      	bne.n	8017f9a <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017f96:	2309      	movs	r3, #9
 8017f98:	e063      	b.n	8018062 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8017f9a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8017f9e:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8017fa2:	881b      	ldrh	r3, [r3, #0]
 8017fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017fa8:	d901      	bls.n	8017fae <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8017faa:	230d      	movs	r3, #13
 8017fac:	e059      	b.n	8018062 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8017fae:	f107 030c 	add.w	r3, r7, #12
 8017fb2:	f44f 7288 	mov.w	r2, #272	; 0x110
 8017fb6:	2100      	movs	r1, #0
 8017fb8:	4618      	mov	r0, r3
 8017fba:	f003 fc67 	bl	801b88c <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8017fbe:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8017fc2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8017fc6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8017fca:	781a      	ldrb	r2, [r3, #0]
 8017fcc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8017fd0:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8017fd4:	7819      	ldrb	r1, [r3, #0]
 8017fd6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8017fda:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8017fde:	8818      	ldrh	r0, [r3, #0]
 8017fe0:	f107 030c 	add.w	r3, r7, #12
 8017fe4:	9302      	str	r3, [sp, #8]
 8017fe6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8017fea:	9301      	str	r3, [sp, #4]
 8017fec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8017ff0:	9300      	str	r3, [sp, #0]
 8017ff2:	4623      	mov	r3, r4
 8017ff4:	f7ff ff05 	bl	8017e02 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8017ff8:	f107 030c 	add.w	r3, r7, #12
 8017ffc:	3310      	adds	r3, #16
 8017ffe:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8018002:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 8018006:	8812      	ldrh	r2, [r2, #0]
 8018008:	f507 7190 	add.w	r1, r7, #288	; 0x120
 801800c:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8018010:	6809      	ldr	r1, [r1, #0]
 8018012:	4618      	mov	r0, r3
 8018014:	f003 fbff 	bl	801b816 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8018018:	2306      	movs	r3, #6
 801801a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801801e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018022:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8018026:	881b      	ldrh	r3, [r3, #0]
 8018028:	3310      	adds	r3, #16
 801802a:	4619      	mov	r1, r3
 801802c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8018030:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8018034:	781b      	ldrb	r3, [r3, #0]
 8018036:	f107 000c 	add.w	r0, r7, #12
 801803a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801803e:	f7f8 f8e9 	bl	8010214 <SecureElementVerifyAesCmac>
 8018042:	4603      	mov	r3, r0
 8018044:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8018048:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801804c:	2b00      	cmp	r3, #0
 801804e:	d101      	bne.n	8018054 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8018050:	2300      	movs	r3, #0
 8018052:	e006      	b.n	8018062 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8018054:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8018058:	2b01      	cmp	r3, #1
 801805a:	d101      	bne.n	8018060 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 801805c:	2301      	movs	r3, #1
 801805e:	e000      	b.n	8018062 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018060:	230e      	movs	r3, #14
}
 8018062:	4618      	mov	r0, r3
 8018064:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8018068:	46bd      	mov	sp, r7
 801806a:	bd90      	pop	{r4, r7, pc}

0801806c <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 801806c:	b480      	push	{r7}
 801806e:	b085      	sub	sp, #20
 8018070:	af00      	add	r7, sp, #0
 8018072:	4603      	mov	r3, r0
 8018074:	6039      	str	r1, [r7, #0]
 8018076:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8018078:	2300      	movs	r3, #0
 801807a:	73fb      	strb	r3, [r7, #15]
 801807c:	e011      	b.n	80180a2 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 801807e:	7bfb      	ldrb	r3, [r7, #15]
 8018080:	4a0c      	ldr	r2, [pc, #48]	; (80180b4 <GetKeyAddrItem+0x48>)
 8018082:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8018086:	79fa      	ldrb	r2, [r7, #7]
 8018088:	429a      	cmp	r2, r3
 801808a:	d107      	bne.n	801809c <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 801808c:	7bfb      	ldrb	r3, [r7, #15]
 801808e:	009b      	lsls	r3, r3, #2
 8018090:	4a08      	ldr	r2, [pc, #32]	; (80180b4 <GetKeyAddrItem+0x48>)
 8018092:	441a      	add	r2, r3
 8018094:	683b      	ldr	r3, [r7, #0]
 8018096:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8018098:	2300      	movs	r3, #0
 801809a:	e006      	b.n	80180aa <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 801809c:	7bfb      	ldrb	r3, [r7, #15]
 801809e:	3301      	adds	r3, #1
 80180a0:	73fb      	strb	r3, [r7, #15]
 80180a2:	7bfb      	ldrb	r3, [r7, #15]
 80180a4:	2b01      	cmp	r3, #1
 80180a6:	d9ea      	bls.n	801807e <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80180a8:	230b      	movs	r3, #11
}
 80180aa:	4618      	mov	r0, r3
 80180ac:	3714      	adds	r7, #20
 80180ae:	46bd      	mov	sp, r7
 80180b0:	bc80      	pop	{r7}
 80180b2:	4770      	bx	lr
 80180b4:	20000110 	.word	0x20000110

080180b8 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80180b8:	b580      	push	{r7, lr}
 80180ba:	b088      	sub	sp, #32
 80180bc:	af00      	add	r7, sp, #0
 80180be:	60b9      	str	r1, [r7, #8]
 80180c0:	607a      	str	r2, [r7, #4]
 80180c2:	461a      	mov	r2, r3
 80180c4:	4603      	mov	r3, r0
 80180c6:	73fb      	strb	r3, [r7, #15]
 80180c8:	4613      	mov	r3, r2
 80180ca:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80180cc:	2300      	movs	r3, #0
 80180ce:	613b      	str	r3, [r7, #16]
 80180d0:	f107 0314 	add.w	r3, r7, #20
 80180d4:	2200      	movs	r2, #0
 80180d6:	601a      	str	r2, [r3, #0]
 80180d8:	605a      	str	r2, [r3, #4]
 80180da:	609a      	str	r2, [r3, #8]

    switch( keyID )
 80180dc:	7bfb      	ldrb	r3, [r7, #15]
 80180de:	2b08      	cmp	r3, #8
 80180e0:	d002      	beq.n	80180e8 <DeriveSessionKey10x+0x30>
 80180e2:	2b09      	cmp	r3, #9
 80180e4:	d003      	beq.n	80180ee <DeriveSessionKey10x+0x36>
 80180e6:	e005      	b.n	80180f4 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 80180e8:	2301      	movs	r3, #1
 80180ea:	743b      	strb	r3, [r7, #16]
            break;
 80180ec:	e004      	b.n	80180f8 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80180ee:	2302      	movs	r3, #2
 80180f0:	743b      	strb	r3, [r7, #16]
            break;
 80180f2:	e001      	b.n	80180f8 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80180f4:	230a      	movs	r3, #10
 80180f6:	e02a      	b.n	801814e <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80180f8:	68bb      	ldr	r3, [r7, #8]
 80180fa:	b2db      	uxtb	r3, r3
 80180fc:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80180fe:	68bb      	ldr	r3, [r7, #8]
 8018100:	0a1b      	lsrs	r3, r3, #8
 8018102:	b2db      	uxtb	r3, r3
 8018104:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8018106:	68bb      	ldr	r3, [r7, #8]
 8018108:	0c1b      	lsrs	r3, r3, #16
 801810a:	b2db      	uxtb	r3, r3
 801810c:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	b2db      	uxtb	r3, r3
 8018112:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	0a1b      	lsrs	r3, r3, #8
 8018118:	b2db      	uxtb	r3, r3
 801811a:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	0c1b      	lsrs	r3, r3, #16
 8018120:	b2db      	uxtb	r3, r3
 8018122:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8018124:	89bb      	ldrh	r3, [r7, #12]
 8018126:	b2db      	uxtb	r3, r3
 8018128:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 801812a:	89bb      	ldrh	r3, [r7, #12]
 801812c:	0a1b      	lsrs	r3, r3, #8
 801812e:	b29b      	uxth	r3, r3
 8018130:	b2db      	uxtb	r3, r3
 8018132:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8018134:	7bfa      	ldrb	r2, [r7, #15]
 8018136:	f107 0310 	add.w	r3, r7, #16
 801813a:	2101      	movs	r1, #1
 801813c:	4618      	mov	r0, r3
 801813e:	f7f8 f915 	bl	801036c <SecureElementDeriveAndStoreKey>
 8018142:	4603      	mov	r3, r0
 8018144:	2b00      	cmp	r3, #0
 8018146:	d001      	beq.n	801814c <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018148:	230e      	movs	r3, #14
 801814a:	e000      	b.n	801814e <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801814c:	2300      	movs	r3, #0
}
 801814e:	4618      	mov	r0, r3
 8018150:	3720      	adds	r7, #32
 8018152:	46bd      	mov	sp, r7
 8018154:	bd80      	pop	{r7, pc}
	...

08018158 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8018158:	b480      	push	{r7}
 801815a:	b083      	sub	sp, #12
 801815c:	af00      	add	r7, sp, #0
 801815e:	4603      	mov	r3, r0
 8018160:	6039      	str	r1, [r7, #0]
 8018162:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8018164:	683b      	ldr	r3, [r7, #0]
 8018166:	2b00      	cmp	r3, #0
 8018168:	d101      	bne.n	801816e <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801816a:	2309      	movs	r3, #9
 801816c:	e029      	b.n	80181c2 <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 801816e:	79fb      	ldrb	r3, [r7, #7]
 8018170:	3b01      	subs	r3, #1
 8018172:	2b03      	cmp	r3, #3
 8018174:	d822      	bhi.n	80181bc <GetLastFcntDown+0x64>
 8018176:	a201      	add	r2, pc, #4	; (adr r2, 801817c <GetLastFcntDown+0x24>)
 8018178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801817c:	0801818d 	.word	0x0801818d
 8018180:	08018199 	.word	0x08018199
 8018184:	080181a5 	.word	0x080181a5
 8018188:	080181b1 	.word	0x080181b1
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 801818c:	4b0f      	ldr	r3, [pc, #60]	; (80181cc <GetLastFcntDown+0x74>)
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	691a      	ldr	r2, [r3, #16]
 8018192:	683b      	ldr	r3, [r7, #0]
 8018194:	601a      	str	r2, [r3, #0]
            break;
 8018196:	e013      	b.n	80181c0 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8018198:	4b0c      	ldr	r3, [pc, #48]	; (80181cc <GetLastFcntDown+0x74>)
 801819a:	681b      	ldr	r3, [r3, #0]
 801819c:	695a      	ldr	r2, [r3, #20]
 801819e:	683b      	ldr	r3, [r7, #0]
 80181a0:	601a      	str	r2, [r3, #0]
            break;
 80181a2:	e00d      	b.n	80181c0 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80181a4:	4b09      	ldr	r3, [pc, #36]	; (80181cc <GetLastFcntDown+0x74>)
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	699a      	ldr	r2, [r3, #24]
 80181aa:	683b      	ldr	r3, [r7, #0]
 80181ac:	601a      	str	r2, [r3, #0]
            break;
 80181ae:	e007      	b.n	80181c0 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80181b0:	4b06      	ldr	r3, [pc, #24]	; (80181cc <GetLastFcntDown+0x74>)
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	69da      	ldr	r2, [r3, #28]
 80181b6:	683b      	ldr	r3, [r7, #0]
 80181b8:	601a      	str	r2, [r3, #0]
            break;
 80181ba:	e001      	b.n	80181c0 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80181bc:	2305      	movs	r3, #5
 80181be:	e000      	b.n	80181c2 <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80181c0:	2300      	movs	r3, #0
}
 80181c2:	4618      	mov	r0, r3
 80181c4:	370c      	adds	r7, #12
 80181c6:	46bd      	mov	sp, r7
 80181c8:	bc80      	pop	{r7}
 80181ca:	4770      	bx	lr
 80181cc:	20001c88 	.word	0x20001c88

080181d0 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80181d0:	b580      	push	{r7, lr}
 80181d2:	b084      	sub	sp, #16
 80181d4:	af00      	add	r7, sp, #0
 80181d6:	4603      	mov	r3, r0
 80181d8:	6039      	str	r1, [r7, #0]
 80181da:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80181dc:	2300      	movs	r3, #0
 80181de:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80181e0:	f107 020c 	add.w	r2, r7, #12
 80181e4:	79fb      	ldrb	r3, [r7, #7]
 80181e6:	4611      	mov	r1, r2
 80181e8:	4618      	mov	r0, r3
 80181ea:	f7ff ffb5 	bl	8018158 <GetLastFcntDown>
 80181ee:	4603      	mov	r3, r0
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d001      	beq.n	80181f8 <CheckFCntDown+0x28>
    {
        return false;
 80181f4:	2300      	movs	r3, #0
 80181f6:	e00a      	b.n	801820e <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	683a      	ldr	r2, [r7, #0]
 80181fc:	429a      	cmp	r2, r3
 80181fe:	d803      	bhi.n	8018208 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8018200:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8018202:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018206:	d101      	bne.n	801820c <CheckFCntDown+0x3c>
    {
        return true;
 8018208:	2301      	movs	r3, #1
 801820a:	e000      	b.n	801820e <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 801820c:	2300      	movs	r3, #0
    }
}
 801820e:	4618      	mov	r0, r3
 8018210:	3710      	adds	r7, #16
 8018212:	46bd      	mov	sp, r7
 8018214:	bd80      	pop	{r7, pc}
	...

08018218 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8018218:	b480      	push	{r7}
 801821a:	b083      	sub	sp, #12
 801821c:	af00      	add	r7, sp, #0
 801821e:	4603      	mov	r3, r0
 8018220:	6039      	str	r1, [r7, #0]
 8018222:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8018224:	79fb      	ldrb	r3, [r7, #7]
 8018226:	3b01      	subs	r3, #1
 8018228:	2b03      	cmp	r3, #3
 801822a:	d82b      	bhi.n	8018284 <UpdateFCntDown+0x6c>
 801822c:	a201      	add	r2, pc, #4	; (adr r2, 8018234 <UpdateFCntDown+0x1c>)
 801822e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018232:	bf00      	nop
 8018234:	08018245 	.word	0x08018245
 8018238:	08018257 	.word	0x08018257
 801823c:	08018269 	.word	0x08018269
 8018240:	0801827b 	.word	0x0801827b
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8018244:	4b12      	ldr	r3, [pc, #72]	; (8018290 <UpdateFCntDown+0x78>)
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	683a      	ldr	r2, [r7, #0]
 801824a:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 801824c:	4b10      	ldr	r3, [pc, #64]	; (8018290 <UpdateFCntDown+0x78>)
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	683a      	ldr	r2, [r7, #0]
 8018252:	621a      	str	r2, [r3, #32]
            break;
 8018254:	e017      	b.n	8018286 <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8018256:	4b0e      	ldr	r3, [pc, #56]	; (8018290 <UpdateFCntDown+0x78>)
 8018258:	681b      	ldr	r3, [r3, #0]
 801825a:	683a      	ldr	r2, [r7, #0]
 801825c:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 801825e:	4b0c      	ldr	r3, [pc, #48]	; (8018290 <UpdateFCntDown+0x78>)
 8018260:	681b      	ldr	r3, [r3, #0]
 8018262:	683a      	ldr	r2, [r7, #0]
 8018264:	621a      	str	r2, [r3, #32]
            break;
 8018266:	e00e      	b.n	8018286 <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8018268:	4b09      	ldr	r3, [pc, #36]	; (8018290 <UpdateFCntDown+0x78>)
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	683a      	ldr	r2, [r7, #0]
 801826e:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8018270:	4b07      	ldr	r3, [pc, #28]	; (8018290 <UpdateFCntDown+0x78>)
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	683a      	ldr	r2, [r7, #0]
 8018276:	621a      	str	r2, [r3, #32]
            break;
 8018278:	e005      	b.n	8018286 <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 801827a:	4b05      	ldr	r3, [pc, #20]	; (8018290 <UpdateFCntDown+0x78>)
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	683a      	ldr	r2, [r7, #0]
 8018280:	61da      	str	r2, [r3, #28]
            break;
 8018282:	e000      	b.n	8018286 <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8018284:	bf00      	nop
    }
}
 8018286:	bf00      	nop
 8018288:	370c      	adds	r7, #12
 801828a:	46bd      	mov	sp, r7
 801828c:	bc80      	pop	{r7}
 801828e:	4770      	bx	lr
 8018290:	20001c88 	.word	0x20001c88

08018294 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8018294:	b480      	push	{r7}
 8018296:	b083      	sub	sp, #12
 8018298:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 801829a:	4b18      	ldr	r3, [pc, #96]	; (80182fc <ResetFCnts+0x68>)
 801829c:	681b      	ldr	r3, [r3, #0]
 801829e:	2200      	movs	r2, #0
 80182a0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80182a2:	4b16      	ldr	r3, [pc, #88]	; (80182fc <ResetFCnts+0x68>)
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80182aa:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80182ac:	4b13      	ldr	r3, [pc, #76]	; (80182fc <ResetFCnts+0x68>)
 80182ae:	681b      	ldr	r3, [r3, #0]
 80182b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80182b4:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 80182b6:	4b11      	ldr	r3, [pc, #68]	; (80182fc <ResetFCnts+0x68>)
 80182b8:	681b      	ldr	r3, [r3, #0]
 80182ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80182be:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80182c0:	4b0e      	ldr	r3, [pc, #56]	; (80182fc <ResetFCnts+0x68>)
 80182c2:	681a      	ldr	r2, [r3, #0]
 80182c4:	4b0d      	ldr	r3, [pc, #52]	; (80182fc <ResetFCnts+0x68>)
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	6992      	ldr	r2, [r2, #24]
 80182ca:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80182cc:	2300      	movs	r3, #0
 80182ce:	607b      	str	r3, [r7, #4]
 80182d0:	e00b      	b.n	80182ea <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 80182d2:	4b0a      	ldr	r3, [pc, #40]	; (80182fc <ResetFCnts+0x68>)
 80182d4:	681a      	ldr	r2, [r3, #0]
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	3306      	adds	r3, #6
 80182da:	009b      	lsls	r3, r3, #2
 80182dc:	4413      	add	r3, r2
 80182de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80182e2:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	3301      	adds	r3, #1
 80182e8:	607b      	str	r3, [r7, #4]
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	ddf0      	ble.n	80182d2 <ResetFCnts+0x3e>
    }
}
 80182f0:	bf00      	nop
 80182f2:	bf00      	nop
 80182f4:	370c      	adds	r7, #12
 80182f6:	46bd      	mov	sp, r7
 80182f8:	bc80      	pop	{r7}
 80182fa:	4770      	bx	lr
 80182fc:	20001c88 	.word	0x20001c88

08018300 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8018300:	b480      	push	{r7}
 8018302:	b083      	sub	sp, #12
 8018304:	af00      	add	r7, sp, #0
 8018306:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8018308:	4b06      	ldr	r3, [pc, #24]	; (8018324 <IsJoinNonce10xOk+0x24>)
 801830a:	681b      	ldr	r3, [r3, #0]
 801830c:	689b      	ldr	r3, [r3, #8]
 801830e:	687a      	ldr	r2, [r7, #4]
 8018310:	429a      	cmp	r2, r3
 8018312:	bf8c      	ite	hi
 8018314:	2301      	movhi	r3, #1
 8018316:	2300      	movls	r3, #0
 8018318:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 801831a:	4618      	mov	r0, r3
 801831c:	370c      	adds	r7, #12
 801831e:	46bd      	mov	sp, r7
 8018320:	bc80      	pop	{r7}
 8018322:	4770      	bx	lr
 8018324:	20001c88 	.word	0x20001c88

08018328 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8018328:	b580      	push	{r7, lr}
 801832a:	b082      	sub	sp, #8
 801832c:	af00      	add	r7, sp, #0
 801832e:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	2b00      	cmp	r3, #0
 8018334:	d101      	bne.n	801833a <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8018336:	2308      	movs	r3, #8
 8018338:	e01c      	b.n	8018374 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 801833a:	4a10      	ldr	r2, [pc, #64]	; (801837c <LoRaMacCryptoInit+0x54>)
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8018340:	4b0e      	ldr	r3, [pc, #56]	; (801837c <LoRaMacCryptoInit+0x54>)
 8018342:	681b      	ldr	r3, [r3, #0]
 8018344:	2228      	movs	r2, #40	; 0x28
 8018346:	2100      	movs	r1, #0
 8018348:	4618      	mov	r0, r3
 801834a:	f003 fa9f 	bl	801b88c <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 801834e:	4b0b      	ldr	r3, [pc, #44]	; (801837c <LoRaMacCryptoInit+0x54>)
 8018350:	681b      	ldr	r3, [r3, #0]
 8018352:	2201      	movs	r2, #1
 8018354:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8018356:	4b09      	ldr	r3, [pc, #36]	; (801837c <LoRaMacCryptoInit+0x54>)
 8018358:	681b      	ldr	r3, [r3, #0]
 801835a:	2201      	movs	r2, #1
 801835c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 801835e:	4b07      	ldr	r3, [pc, #28]	; (801837c <LoRaMacCryptoInit+0x54>)
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	2201      	movs	r2, #1
 8018364:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8018366:	4b05      	ldr	r3, [pc, #20]	; (801837c <LoRaMacCryptoInit+0x54>)
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	2200      	movs	r2, #0
 801836c:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 801836e:	f7ff ff91 	bl	8018294 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8018372:	2300      	movs	r3, #0
}
 8018374:	4618      	mov	r0, r3
 8018376:	3708      	adds	r7, #8
 8018378:	46bd      	mov	sp, r7
 801837a:	bd80      	pop	{r7, pc}
 801837c:	20001c88 	.word	0x20001c88

08018380 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8018380:	b480      	push	{r7}
 8018382:	b083      	sub	sp, #12
 8018384:	af00      	add	r7, sp, #0
 8018386:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8018388:	4b04      	ldr	r3, [pc, #16]	; (801839c <LoRaMacCryptoSetLrWanVersion+0x1c>)
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	687a      	ldr	r2, [r7, #4]
 801838e:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8018390:	2300      	movs	r3, #0
}
 8018392:	4618      	mov	r0, r3
 8018394:	370c      	adds	r7, #12
 8018396:	46bd      	mov	sp, r7
 8018398:	bc80      	pop	{r7}
 801839a:	4770      	bx	lr
 801839c:	20001c88 	.word	0x20001c88

080183a0 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80183a0:	b480      	push	{r7}
 80183a2:	b083      	sub	sp, #12
 80183a4:	af00      	add	r7, sp, #0
 80183a6:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d101      	bne.n	80183b2 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80183ae:	2309      	movs	r3, #9
 80183b0:	e006      	b.n	80183c0 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80183b2:	4b06      	ldr	r3, [pc, #24]	; (80183cc <LoRaMacCryptoGetFCntUp+0x2c>)
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	68db      	ldr	r3, [r3, #12]
 80183b8:	1c5a      	adds	r2, r3, #1
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80183be:	2300      	movs	r3, #0
}
 80183c0:	4618      	mov	r0, r3
 80183c2:	370c      	adds	r7, #12
 80183c4:	46bd      	mov	sp, r7
 80183c6:	bc80      	pop	{r7}
 80183c8:	4770      	bx	lr
 80183ca:	bf00      	nop
 80183cc:	20001c88 	.word	0x20001c88

080183d0 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 80183d0:	b580      	push	{r7, lr}
 80183d2:	b088      	sub	sp, #32
 80183d4:	af00      	add	r7, sp, #0
 80183d6:	4603      	mov	r3, r0
 80183d8:	60b9      	str	r1, [r7, #8]
 80183da:	607a      	str	r2, [r7, #4]
 80183dc:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 80183de:	2300      	movs	r3, #0
 80183e0:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 80183e2:	2300      	movs	r3, #0
 80183e4:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80183e6:	2312      	movs	r3, #18
 80183e8:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d101      	bne.n	80183f4 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80183f0:	2309      	movs	r3, #9
 80183f2:	e035      	b.n	8018460 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80183f4:	f107 0214 	add.w	r2, r7, #20
 80183f8:	7bfb      	ldrb	r3, [r7, #15]
 80183fa:	4611      	mov	r1, r2
 80183fc:	4618      	mov	r0, r3
 80183fe:	f7ff feab 	bl	8018158 <GetLastFcntDown>
 8018402:	4603      	mov	r3, r0
 8018404:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8018406:	7efb      	ldrb	r3, [r7, #27]
 8018408:	2b00      	cmp	r3, #0
 801840a:	d001      	beq.n	8018410 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 801840c:	7efb      	ldrb	r3, [r7, #27]
 801840e:	e027      	b.n	8018460 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8018410:	697b      	ldr	r3, [r7, #20]
 8018412:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018416:	d103      	bne.n	8018420 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	68ba      	ldr	r2, [r7, #8]
 801841c:	601a      	str	r2, [r3, #0]
 801841e:	e01e      	b.n	801845e <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8018420:	697b      	ldr	r3, [r7, #20]
 8018422:	b29b      	uxth	r3, r3
 8018424:	68ba      	ldr	r2, [r7, #8]
 8018426:	1ad3      	subs	r3, r2, r3
 8018428:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 801842a:	69fb      	ldr	r3, [r7, #28]
 801842c:	2b00      	cmp	r3, #0
 801842e:	dd05      	ble.n	801843c <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8018430:	697a      	ldr	r2, [r7, #20]
 8018432:	69fb      	ldr	r3, [r7, #28]
 8018434:	441a      	add	r2, r3
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	601a      	str	r2, [r3, #0]
 801843a:	e010      	b.n	801845e <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 801843c:	69fb      	ldr	r3, [r7, #28]
 801843e:	2b00      	cmp	r3, #0
 8018440:	d104      	bne.n	801844c <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8018442:	697a      	ldr	r2, [r7, #20]
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8018448:	2307      	movs	r3, #7
 801844a:	e009      	b.n	8018460 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 801844c:	697b      	ldr	r3, [r7, #20]
 801844e:	0c1b      	lsrs	r3, r3, #16
 8018450:	041b      	lsls	r3, r3, #16
 8018452:	68ba      	ldr	r2, [r7, #8]
 8018454:	4413      	add	r3, r2
 8018456:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801845e:	2300      	movs	r3, #0
}
 8018460:	4618      	mov	r0, r3
 8018462:	3720      	adds	r7, #32
 8018464:	46bd      	mov	sp, r7
 8018466:	bd80      	pop	{r7, pc}

08018468 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8018468:	b480      	push	{r7}
 801846a:	b085      	sub	sp, #20
 801846c:	af00      	add	r7, sp, #0
 801846e:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	2b00      	cmp	r3, #0
 8018474:	d101      	bne.n	801847a <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8018476:	2309      	movs	r3, #9
 8018478:	e019      	b.n	80184ae <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801847a:	2300      	movs	r3, #0
 801847c:	60fb      	str	r3, [r7, #12]
 801847e:	e012      	b.n	80184a6 <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8018480:	4b0d      	ldr	r3, [pc, #52]	; (80184b8 <LoRaMacCryptoSetMulticastReference+0x50>)
 8018482:	6819      	ldr	r1, [r3, #0]
 8018484:	68fa      	ldr	r2, [r7, #12]
 8018486:	4613      	mov	r3, r2
 8018488:	005b      	lsls	r3, r3, #1
 801848a:	4413      	add	r3, r2
 801848c:	011b      	lsls	r3, r3, #4
 801848e:	461a      	mov	r2, r3
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	4413      	add	r3, r2
 8018494:	68fa      	ldr	r2, [r7, #12]
 8018496:	3206      	adds	r2, #6
 8018498:	0092      	lsls	r2, r2, #2
 801849a:	440a      	add	r2, r1
 801849c:	3204      	adds	r2, #4
 801849e:	625a      	str	r2, [r3, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80184a0:	68fb      	ldr	r3, [r7, #12]
 80184a2:	3301      	adds	r3, #1
 80184a4:	60fb      	str	r3, [r7, #12]
 80184a6:	68fb      	ldr	r3, [r7, #12]
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	dde9      	ble.n	8018480 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80184ac:	2300      	movs	r3, #0
}
 80184ae:	4618      	mov	r0, r3
 80184b0:	3714      	adds	r7, #20
 80184b2:	46bd      	mov	sp, r7
 80184b4:	bc80      	pop	{r7}
 80184b6:	4770      	bx	lr
 80184b8:	20001c88 	.word	0x20001c88

080184bc <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 80184bc:	b580      	push	{r7, lr}
 80184be:	b082      	sub	sp, #8
 80184c0:	af00      	add	r7, sp, #0
 80184c2:	4603      	mov	r3, r0
 80184c4:	6039      	str	r1, [r7, #0]
 80184c6:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 80184c8:	79fb      	ldrb	r3, [r7, #7]
 80184ca:	6839      	ldr	r1, [r7, #0]
 80184cc:	4618      	mov	r0, r3
 80184ce:	f7f7 fe29 	bl	8010124 <SecureElementSetKey>
 80184d2:	4603      	mov	r3, r0
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d001      	beq.n	80184dc <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80184d8:	230e      	movs	r3, #14
 80184da:	e021      	b.n	8018520 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 80184dc:	79fb      	ldrb	r3, [r7, #7]
 80184de:	2b00      	cmp	r3, #0
 80184e0:	d11d      	bne.n	801851e <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80184e2:	4b11      	ldr	r3, [pc, #68]	; (8018528 <LoRaMacCryptoSetKey+0x6c>)
 80184e4:	681b      	ldr	r3, [r3, #0]
 80184e6:	789b      	ldrb	r3, [r3, #2]
 80184e8:	210b      	movs	r1, #11
 80184ea:	4618      	mov	r0, r3
 80184ec:	f000 fa58 	bl	80189a0 <LoRaMacCryptoDeriveLifeTimeKey>
 80184f0:	4603      	mov	r3, r0
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d001      	beq.n	80184fa <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80184f6:	230e      	movs	r3, #14
 80184f8:	e012      	b.n	8018520 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80184fa:	210c      	movs	r1, #12
 80184fc:	2000      	movs	r0, #0
 80184fe:	f000 fa4f 	bl	80189a0 <LoRaMacCryptoDeriveLifeTimeKey>
 8018502:	4603      	mov	r3, r0
 8018504:	2b00      	cmp	r3, #0
 8018506:	d001      	beq.n	801850c <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018508:	230e      	movs	r3, #14
 801850a:	e009      	b.n	8018520 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801850c:	210a      	movs	r1, #10
 801850e:	2000      	movs	r0, #0
 8018510:	f000 fa46 	bl	80189a0 <LoRaMacCryptoDeriveLifeTimeKey>
 8018514:	4603      	mov	r3, r0
 8018516:	2b00      	cmp	r3, #0
 8018518:	d001      	beq.n	801851e <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801851a:	230e      	movs	r3, #14
 801851c:	e000      	b.n	8018520 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801851e:	2300      	movs	r3, #0
}
 8018520:	4618      	mov	r0, r3
 8018522:	3708      	adds	r7, #8
 8018524:	46bd      	mov	sp, r7
 8018526:	bd80      	pop	{r7, pc}
 8018528:	20001c88 	.word	0x20001c88

0801852c <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801852c:	b580      	push	{r7, lr}
 801852e:	b086      	sub	sp, #24
 8018530:	af02      	add	r7, sp, #8
 8018532:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	2b00      	cmp	r3, #0
 8018538:	d101      	bne.n	801853e <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801853a:	2309      	movs	r3, #9
 801853c:	e02d      	b.n	801859a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 801853e:	2301      	movs	r3, #1
 8018540:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8018542:	4b18      	ldr	r3, [pc, #96]	; (80185a4 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8018544:	681b      	ldr	r3, [r3, #0]
 8018546:	889a      	ldrh	r2, [r3, #4]
 8018548:	3201      	adds	r2, #1
 801854a:	b292      	uxth	r2, r2
 801854c:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 801854e:	4b15      	ldr	r3, [pc, #84]	; (80185a4 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	889a      	ldrh	r2, [r3, #4]
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8018558:	6878      	ldr	r0, [r7, #4]
 801855a:	f000 fc1b 	bl	8018d94 <LoRaMacSerializerJoinRequest>
 801855e:	4603      	mov	r3, r0
 8018560:	2b00      	cmp	r3, #0
 8018562:	d001      	beq.n	8018568 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8018564:	2310      	movs	r3, #16
 8018566:	e018      	b.n	801859a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	6819      	ldr	r1, [r3, #0]
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	3318      	adds	r3, #24
 8018570:	7bfa      	ldrb	r2, [r7, #15]
 8018572:	9300      	str	r3, [sp, #0]
 8018574:	4613      	mov	r3, r2
 8018576:	2213      	movs	r2, #19
 8018578:	2000      	movs	r0, #0
 801857a:	f7f7 fe31 	bl	80101e0 <SecureElementComputeAesCmac>
 801857e:	4603      	mov	r3, r0
 8018580:	2b00      	cmp	r3, #0
 8018582:	d001      	beq.n	8018588 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018584:	230e      	movs	r3, #14
 8018586:	e008      	b.n	801859a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8018588:	6878      	ldr	r0, [r7, #4]
 801858a:	f000 fc03 	bl	8018d94 <LoRaMacSerializerJoinRequest>
 801858e:	4603      	mov	r3, r0
 8018590:	2b00      	cmp	r3, #0
 8018592:	d001      	beq.n	8018598 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8018594:	2310      	movs	r3, #16
 8018596:	e000      	b.n	801859a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8018598:	2300      	movs	r3, #0
}
 801859a:	4618      	mov	r0, r3
 801859c:	3710      	adds	r7, #16
 801859e:	46bd      	mov	sp, r7
 80185a0:	bd80      	pop	{r7, pc}
 80185a2:	bf00      	nop
 80185a4:	20001c88 	.word	0x20001c88

080185a8 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80185a8:	b590      	push	{r4, r7, lr}
 80185aa:	b097      	sub	sp, #92	; 0x5c
 80185ac:	af04      	add	r7, sp, #16
 80185ae:	4603      	mov	r3, r0
 80185b0:	60b9      	str	r1, [r7, #8]
 80185b2:	607a      	str	r2, [r7, #4]
 80185b4:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d002      	beq.n	80185c2 <LoRaMacCryptoHandleJoinAccept+0x1a>
 80185bc:	68bb      	ldr	r3, [r7, #8]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d101      	bne.n	80185c6 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80185c2:	2309      	movs	r3, #9
 80185c4:	e0d3      	b.n	801876e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80185c6:	2312      	movs	r3, #18
 80185c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80185cc:	2300      	movs	r3, #0
 80185ce:	617b      	str	r3, [r7, #20]
 80185d0:	f107 0318 	add.w	r3, r7, #24
 80185d4:	221d      	movs	r2, #29
 80185d6:	2100      	movs	r1, #0
 80185d8:	4618      	mov	r0, r3
 80185da:	f007 fff9 	bl	80205d0 <memset>
    uint8_t versionMinor         = 0;
 80185de:	2300      	movs	r3, #0
 80185e0:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80185e2:	4b65      	ldr	r3, [pc, #404]	; (8018778 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80185e4:	681b      	ldr	r3, [r3, #0]
 80185e6:	889b      	ldrh	r3, [r3, #4]
 80185e8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	681c      	ldr	r4, [r3, #0]
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	791b      	ldrb	r3, [r3, #4]
 80185f4:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80185f8:	7bf8      	ldrb	r0, [r7, #15]
 80185fa:	f107 0213 	add.w	r2, r7, #19
 80185fe:	9202      	str	r2, [sp, #8]
 8018600:	f107 0214 	add.w	r2, r7, #20
 8018604:	9201      	str	r2, [sp, #4]
 8018606:	9300      	str	r3, [sp, #0]
 8018608:	4623      	mov	r3, r4
 801860a:	460a      	mov	r2, r1
 801860c:	68b9      	ldr	r1, [r7, #8]
 801860e:	f7f7 feed 	bl	80103ec <SecureElementProcessJoinAccept>
 8018612:	4603      	mov	r3, r0
 8018614:	2b00      	cmp	r3, #0
 8018616:	d001      	beq.n	801861c <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018618:	230e      	movs	r3, #14
 801861a:	e0a8      	b.n	801876e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	6818      	ldr	r0, [r3, #0]
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	791b      	ldrb	r3, [r3, #4]
 8018624:	b29a      	uxth	r2, r3
 8018626:	f107 0314 	add.w	r3, r7, #20
 801862a:	4619      	mov	r1, r3
 801862c:	f003 f8f3 	bl	801b816 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8018630:	6878      	ldr	r0, [r7, #4]
 8018632:	f000 f9f0 	bl	8018a16 <LoRaMacParserJoinAccept>
 8018636:	4603      	mov	r3, r0
 8018638:	2b00      	cmp	r3, #0
 801863a:	d001      	beq.n	8018640 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801863c:	230f      	movs	r3, #15
 801863e:	e096      	b.n	801876e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8018640:	2300      	movs	r3, #0
 8018642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	799b      	ldrb	r3, [r3, #6]
 801864a:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	79db      	ldrb	r3, [r3, #7]
 8018650:	021b      	lsls	r3, r3, #8
 8018652:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018654:	4313      	orrs	r3, r2
 8018656:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	7a1b      	ldrb	r3, [r3, #8]
 801865c:	041b      	lsls	r3, r3, #16
 801865e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018660:	4313      	orrs	r3, r2
 8018662:	63fb      	str	r3, [r7, #60]	; 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8018664:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8018666:	f7ff fe4b 	bl	8018300 <IsJoinNonce10xOk>
 801866a:	4603      	mov	r3, r0
 801866c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    if( isJoinNonceOk == true )
 8018670:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8018674:	2b00      	cmp	r3, #0
 8018676:	d010      	beq.n	801869a <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8018678:	4b3f      	ldr	r3, [pc, #252]	; (8018778 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801867e:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8018680:	7cfb      	ldrb	r3, [r7, #19]
 8018682:	210b      	movs	r1, #11
 8018684:	4618      	mov	r0, r3
 8018686:	f000 f98b 	bl	80189a0 <LoRaMacCryptoDeriveLifeTimeKey>
 801868a:	4603      	mov	r3, r0
 801868c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8018690:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018694:	2b00      	cmp	r3, #0
 8018696:	d005      	beq.n	80186a4 <LoRaMacCryptoHandleJoinAccept+0xfc>
 8018698:	e001      	b.n	801869e <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 801869a:	2303      	movs	r3, #3
 801869c:	e067      	b.n	801876e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 801869e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80186a2:	e064      	b.n	801876e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 80186a4:	210c      	movs	r1, #12
 80186a6:	2000      	movs	r0, #0
 80186a8:	f000 f97a 	bl	80189a0 <LoRaMacCryptoDeriveLifeTimeKey>
 80186ac:	4603      	mov	r3, r0
 80186ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80186b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d002      	beq.n	80186c0 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 80186ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80186be:	e056      	b.n	801876e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 80186c0:	210a      	movs	r1, #10
 80186c2:	2000      	movs	r0, #0
 80186c4:	f000 f96c 	bl	80189a0 <LoRaMacCryptoDeriveLifeTimeKey>
 80186c8:	4603      	mov	r3, r0
 80186ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80186ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d002      	beq.n	80186dc <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 80186d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80186da:	e048      	b.n	801876e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	7a5b      	ldrb	r3, [r3, #9]
 80186e0:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	7a9b      	ldrb	r3, [r3, #10]
 80186e6:	021b      	lsls	r3, r3, #8
 80186e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80186ea:	4313      	orrs	r3, r2
 80186ec:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	7adb      	ldrb	r3, [r3, #11]
 80186f2:	041b      	lsls	r3, r3, #16
 80186f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80186f6:	4313      	orrs	r3, r2
 80186f8:	63bb      	str	r3, [r7, #56]	; 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80186fa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80186fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018700:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018702:	2009      	movs	r0, #9
 8018704:	f7ff fcd8 	bl	80180b8 <DeriveSessionKey10x>
 8018708:	4603      	mov	r3, r0
 801870a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801870e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018712:	2b00      	cmp	r3, #0
 8018714:	d002      	beq.n	801871c <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 8018716:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801871a:	e028      	b.n	801876e <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 801871c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018720:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018722:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018724:	2008      	movs	r0, #8
 8018726:	f7ff fcc7 	bl	80180b8 <DeriveSessionKey10x>
 801872a:	4603      	mov	r3, r0
 801872c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8018730:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018734:	2b00      	cmp	r3, #0
 8018736:	d002      	beq.n	801873e <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 8018738:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801873c:	e017      	b.n	801876e <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 801873e:	4b0e      	ldr	r3, [pc, #56]	; (8018778 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8018740:	681b      	ldr	r3, [r3, #0]
 8018742:	7cfa      	ldrb	r2, [r7, #19]
 8018744:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8018746:	4b0c      	ldr	r3, [pc, #48]	; (8018778 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8018748:	681b      	ldr	r3, [r3, #0]
 801874a:	2200      	movs	r2, #0
 801874c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 801874e:	4b0a      	ldr	r3, [pc, #40]	; (8018778 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018756:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8018758:	4b07      	ldr	r3, [pc, #28]	; (8018778 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801875a:	681b      	ldr	r3, [r3, #0]
 801875c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018760:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8018762:	4b05      	ldr	r3, [pc, #20]	; (8018778 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8018764:	681b      	ldr	r3, [r3, #0]
 8018766:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801876a:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 801876c:	2300      	movs	r3, #0
}
 801876e:	4618      	mov	r0, r3
 8018770:	374c      	adds	r7, #76	; 0x4c
 8018772:	46bd      	mov	sp, r7
 8018774:	bd90      	pop	{r4, r7, pc}
 8018776:	bf00      	nop
 8018778:	20001c88 	.word	0x20001c88

0801877c <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 801877c:	b590      	push	{r4, r7, lr}
 801877e:	b08b      	sub	sp, #44	; 0x2c
 8018780:	af04      	add	r7, sp, #16
 8018782:	60f8      	str	r0, [r7, #12]
 8018784:	607b      	str	r3, [r7, #4]
 8018786:	460b      	mov	r3, r1
 8018788:	72fb      	strb	r3, [r7, #11]
 801878a:	4613      	mov	r3, r2
 801878c:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801878e:	2312      	movs	r3, #18
 8018790:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8018792:	2309      	movs	r3, #9
 8018794:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	2b00      	cmp	r3, #0
 801879a:	d101      	bne.n	80187a0 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801879c:	2309      	movs	r3, #9
 801879e:	e05f      	b.n	8018860 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 80187a0:	4b31      	ldr	r3, [pc, #196]	; (8018868 <LoRaMacCryptoSecureMessage+0xec>)
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	68db      	ldr	r3, [r3, #12]
 80187a6:	68fa      	ldr	r2, [r7, #12]
 80187a8:	429a      	cmp	r2, r3
 80187aa:	d201      	bcs.n	80187b0 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80187ac:	2306      	movs	r3, #6
 80187ae:	e057      	b.n	8018860 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	d101      	bne.n	80187be <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80187ba:	2308      	movs	r3, #8
 80187bc:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 80187be:	4b2a      	ldr	r3, [pc, #168]	; (8018868 <LoRaMacCryptoSecureMessage+0xec>)
 80187c0:	681b      	ldr	r3, [r3, #0]
 80187c2:	68db      	ldr	r3, [r3, #12]
 80187c4:	68fa      	ldr	r2, [r7, #12]
 80187c6:	429a      	cmp	r2, r3
 80187c8:	d916      	bls.n	80187f8 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80187d4:	b219      	sxth	r1, r3
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	689c      	ldr	r4, [r3, #8]
 80187da:	7dfa      	ldrb	r2, [r7, #23]
 80187dc:	68fb      	ldr	r3, [r7, #12]
 80187de:	9301      	str	r3, [sp, #4]
 80187e0:	2300      	movs	r3, #0
 80187e2:	9300      	str	r3, [sp, #0]
 80187e4:	4623      	mov	r3, r4
 80187e6:	f7ff fa73 	bl	8017cd0 <PayloadEncrypt>
 80187ea:	4603      	mov	r3, r0
 80187ec:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80187ee:	7dbb      	ldrb	r3, [r7, #22]
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d001      	beq.n	80187f8 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 80187f4:	7dbb      	ldrb	r3, [r7, #22]
 80187f6:	e033      	b.n	8018860 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80187f8:	6878      	ldr	r0, [r7, #4]
 80187fa:	f000 fb4d 	bl	8018e98 <LoRaMacSerializerData>
 80187fe:	4603      	mov	r3, r0
 8018800:	2b00      	cmp	r3, #0
 8018802:	d001      	beq.n	8018808 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8018804:	2310      	movs	r3, #16
 8018806:	e02b      	b.n	8018860 <LoRaMacCryptoSecureMessage+0xe4>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8018808:	2308      	movs	r3, #8
 801880a:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	6818      	ldr	r0, [r3, #0]
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	791b      	ldrb	r3, [r3, #4]
 8018814:	b29b      	uxth	r3, r3
 8018816:	3b04      	subs	r3, #4
 8018818:	b299      	uxth	r1, r3
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	689b      	ldr	r3, [r3, #8]
 801881e:	687a      	ldr	r2, [r7, #4]
 8018820:	322c      	adds	r2, #44	; 0x2c
 8018822:	7dfc      	ldrb	r4, [r7, #23]
 8018824:	9203      	str	r2, [sp, #12]
 8018826:	68fa      	ldr	r2, [r7, #12]
 8018828:	9202      	str	r2, [sp, #8]
 801882a:	9301      	str	r3, [sp, #4]
 801882c:	2300      	movs	r3, #0
 801882e:	9300      	str	r3, [sp, #0]
 8018830:	2300      	movs	r3, #0
 8018832:	4622      	mov	r2, r4
 8018834:	f7ff fb4d 	bl	8017ed2 <ComputeCmacB0>
 8018838:	4603      	mov	r3, r0
 801883a:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801883c:	7dbb      	ldrb	r3, [r7, #22]
 801883e:	2b00      	cmp	r3, #0
 8018840:	d001      	beq.n	8018846 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8018842:	7dbb      	ldrb	r3, [r7, #22]
 8018844:	e00c      	b.n	8018860 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8018846:	6878      	ldr	r0, [r7, #4]
 8018848:	f000 fb26 	bl	8018e98 <LoRaMacSerializerData>
 801884c:	4603      	mov	r3, r0
 801884e:	2b00      	cmp	r3, #0
 8018850:	d001      	beq.n	8018856 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8018852:	2310      	movs	r3, #16
 8018854:	e004      	b.n	8018860 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8018856:	4b04      	ldr	r3, [pc, #16]	; (8018868 <LoRaMacCryptoSecureMessage+0xec>)
 8018858:	681b      	ldr	r3, [r3, #0]
 801885a:	68fa      	ldr	r2, [r7, #12]
 801885c:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 801885e:	2300      	movs	r3, #0
}
 8018860:	4618      	mov	r0, r3
 8018862:	371c      	adds	r7, #28
 8018864:	46bd      	mov	sp, r7
 8018866:	bd90      	pop	{r4, r7, pc}
 8018868:	20001c88 	.word	0x20001c88

0801886c <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 801886c:	b590      	push	{r4, r7, lr}
 801886e:	b08b      	sub	sp, #44	; 0x2c
 8018870:	af04      	add	r7, sp, #16
 8018872:	60b9      	str	r1, [r7, #8]
 8018874:	607b      	str	r3, [r7, #4]
 8018876:	4603      	mov	r3, r0
 8018878:	73fb      	strb	r3, [r7, #15]
 801887a:	4613      	mov	r3, r2
 801887c:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 801887e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018880:	2b00      	cmp	r3, #0
 8018882:	d101      	bne.n	8018888 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8018884:	2309      	movs	r3, #9
 8018886:	e084      	b.n	8018992 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8018888:	7bbb      	ldrb	r3, [r7, #14]
 801888a:	6879      	ldr	r1, [r7, #4]
 801888c:	4618      	mov	r0, r3
 801888e:	f7ff fc9f 	bl	80181d0 <CheckFCntDown>
 8018892:	4603      	mov	r3, r0
 8018894:	f083 0301 	eor.w	r3, r3, #1
 8018898:	b2db      	uxtb	r3, r3
 801889a:	2b00      	cmp	r3, #0
 801889c:	d001      	beq.n	80188a2 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 801889e:	2306      	movs	r3, #6
 80188a0:	e077      	b.n	8018992 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80188a2:	2312      	movs	r3, #18
 80188a4:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80188a6:	2309      	movs	r3, #9
 80188a8:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 80188aa:	2308      	movs	r3, #8
 80188ac:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80188ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80188b0:	f000 f97c 	bl	8018bac <LoRaMacParserData>
 80188b4:	4603      	mov	r3, r0
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d001      	beq.n	80188be <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80188ba:	230f      	movs	r3, #15
 80188bc:	e069      	b.n	8018992 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 80188be:	f107 0210 	add.w	r2, r7, #16
 80188c2:	7bfb      	ldrb	r3, [r7, #15]
 80188c4:	4611      	mov	r1, r2
 80188c6:	4618      	mov	r0, r3
 80188c8:	f7ff fbd0 	bl	801806c <GetKeyAddrItem>
 80188cc:	4603      	mov	r3, r0
 80188ce:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80188d0:	7d7b      	ldrb	r3, [r7, #21]
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d001      	beq.n	80188da <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 80188d6:	7d7b      	ldrb	r3, [r7, #21]
 80188d8:	e05b      	b.n	8018992 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 80188da:	693b      	ldr	r3, [r7, #16]
 80188dc:	785b      	ldrb	r3, [r3, #1]
 80188de:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 80188e0:	693b      	ldr	r3, [r7, #16]
 80188e2:	789b      	ldrb	r3, [r3, #2]
 80188e4:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80188e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188e8:	689b      	ldr	r3, [r3, #8]
 80188ea:	68ba      	ldr	r2, [r7, #8]
 80188ec:	429a      	cmp	r2, r3
 80188ee:	d001      	beq.n	80188f4 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80188f0:	2302      	movs	r3, #2
 80188f2:	e04e      	b.n	8018992 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80188f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188f6:	7b1b      	ldrb	r3, [r3, #12]
 80188f8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80188fc:	b2db      	uxtb	r3, r3
 80188fe:	2b00      	cmp	r3, #0
 8018900:	bf14      	ite	ne
 8018902:	2301      	movne	r3, #1
 8018904:	2300      	moveq	r3, #0
 8018906:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8018908:	4b24      	ldr	r3, [pc, #144]	; (801899c <LoRaMacCryptoUnsecureMessage+0x130>)
 801890a:	681b      	ldr	r3, [r3, #0]
 801890c:	789b      	ldrb	r3, [r3, #2]
 801890e:	2b00      	cmp	r3, #0
 8018910:	d101      	bne.n	8018916 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8018912:	2300      	movs	r3, #0
 8018914:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8018916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018918:	6818      	ldr	r0, [r3, #0]
 801891a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801891c:	791b      	ldrb	r3, [r3, #4]
 801891e:	b29b      	uxth	r3, r3
 8018920:	3b04      	subs	r3, #4
 8018922:	b299      	uxth	r1, r3
 8018924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018928:	7dbc      	ldrb	r4, [r7, #22]
 801892a:	7d3a      	ldrb	r2, [r7, #20]
 801892c:	9303      	str	r3, [sp, #12]
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	9302      	str	r3, [sp, #8]
 8018932:	68bb      	ldr	r3, [r7, #8]
 8018934:	9301      	str	r3, [sp, #4]
 8018936:	2301      	movs	r3, #1
 8018938:	9300      	str	r3, [sp, #0]
 801893a:	4623      	mov	r3, r4
 801893c:	f7ff fb07 	bl	8017f4e <VerifyCmacB0>
 8018940:	4603      	mov	r3, r0
 8018942:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8018944:	7d7b      	ldrb	r3, [r7, #21]
 8018946:	2b00      	cmp	r3, #0
 8018948:	d001      	beq.n	801894e <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 801894a:	7d7b      	ldrb	r3, [r7, #21]
 801894c:	e021      	b.n	8018992 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 801894e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018950:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018954:	2b00      	cmp	r3, #0
 8018956:	d101      	bne.n	801895c <LoRaMacCryptoUnsecureMessage+0xf0>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8018958:	2308      	movs	r3, #8
 801895a:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 801895c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801895e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8018960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018966:	b219      	sxth	r1, r3
 8018968:	7dfa      	ldrb	r2, [r7, #23]
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	9301      	str	r3, [sp, #4]
 801896e:	2301      	movs	r3, #1
 8018970:	9300      	str	r3, [sp, #0]
 8018972:	68bb      	ldr	r3, [r7, #8]
 8018974:	f7ff f9ac 	bl	8017cd0 <PayloadEncrypt>
 8018978:	4603      	mov	r3, r0
 801897a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801897c:	7d7b      	ldrb	r3, [r7, #21]
 801897e:	2b00      	cmp	r3, #0
 8018980:	d001      	beq.n	8018986 <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8018982:	7d7b      	ldrb	r3, [r7, #21]
 8018984:	e005      	b.n	8018992 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8018986:	7bbb      	ldrb	r3, [r7, #14]
 8018988:	6879      	ldr	r1, [r7, #4]
 801898a:	4618      	mov	r0, r3
 801898c:	f7ff fc44 	bl	8018218 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8018990:	2300      	movs	r3, #0
}
 8018992:	4618      	mov	r0, r3
 8018994:	371c      	adds	r7, #28
 8018996:	46bd      	mov	sp, r7
 8018998:	bd90      	pop	{r4, r7, pc}
 801899a:	bf00      	nop
 801899c:	20001c88 	.word	0x20001c88

080189a0 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 80189a0:	b580      	push	{r7, lr}
 80189a2:	b088      	sub	sp, #32
 80189a4:	af00      	add	r7, sp, #0
 80189a6:	4603      	mov	r3, r0
 80189a8:	460a      	mov	r2, r1
 80189aa:	71fb      	strb	r3, [r7, #7]
 80189ac:	4613      	mov	r3, r2
 80189ae:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 80189b0:	2300      	movs	r3, #0
 80189b2:	60fb      	str	r3, [r7, #12]
 80189b4:	f107 0310 	add.w	r3, r7, #16
 80189b8:	2200      	movs	r2, #0
 80189ba:	601a      	str	r2, [r3, #0]
 80189bc:	605a      	str	r2, [r3, #4]
 80189be:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 80189c0:	2300      	movs	r3, #0
 80189c2:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 80189c4:	79bb      	ldrb	r3, [r7, #6]
 80189c6:	2b0c      	cmp	r3, #12
 80189c8:	d00b      	beq.n	80189e2 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 80189ca:	2b0c      	cmp	r3, #12
 80189cc:	dc0f      	bgt.n	80189ee <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 80189ce:	2b0a      	cmp	r3, #10
 80189d0:	d00a      	beq.n	80189e8 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 80189d2:	2b0b      	cmp	r3, #11
 80189d4:	d10b      	bne.n	80189ee <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 80189d6:	79fb      	ldrb	r3, [r7, #7]
 80189d8:	2b01      	cmp	r3, #1
 80189da:	d10a      	bne.n	80189f2 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 80189dc:	2320      	movs	r3, #32
 80189de:	733b      	strb	r3, [r7, #12]
            }
            break;
 80189e0:	e007      	b.n	80189f2 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 80189e2:	230b      	movs	r3, #11
 80189e4:	77fb      	strb	r3, [r7, #31]
            break;
 80189e6:	e005      	b.n	80189f4 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 80189e8:	2330      	movs	r3, #48	; 0x30
 80189ea:	733b      	strb	r3, [r7, #12]
            break;
 80189ec:	e002      	b.n	80189f4 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80189ee:	230a      	movs	r3, #10
 80189f0:	e00d      	b.n	8018a0e <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 80189f2:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 80189f4:	79ba      	ldrb	r2, [r7, #6]
 80189f6:	7ff9      	ldrb	r1, [r7, #31]
 80189f8:	f107 030c 	add.w	r3, r7, #12
 80189fc:	4618      	mov	r0, r3
 80189fe:	f7f7 fcb5 	bl	801036c <SecureElementDeriveAndStoreKey>
 8018a02:	4603      	mov	r3, r0
 8018a04:	2b00      	cmp	r3, #0
 8018a06:	d001      	beq.n	8018a0c <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8018a08:	230e      	movs	r3, #14
 8018a0a:	e000      	b.n	8018a0e <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8018a0c:	2300      	movs	r3, #0
}
 8018a0e:	4618      	mov	r0, r3
 8018a10:	3720      	adds	r7, #32
 8018a12:	46bd      	mov	sp, r7
 8018a14:	bd80      	pop	{r7, pc}

08018a16 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8018a16:	b580      	push	{r7, lr}
 8018a18:	b084      	sub	sp, #16
 8018a1a:	af00      	add	r7, sp, #0
 8018a1c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	d003      	beq.n	8018a2c <LoRaMacParserJoinAccept+0x16>
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	681b      	ldr	r3, [r3, #0]
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d101      	bne.n	8018a30 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8018a2c:	2302      	movs	r3, #2
 8018a2e:	e0b9      	b.n	8018ba4 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8018a30:	2300      	movs	r3, #0
 8018a32:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	681a      	ldr	r2, [r3, #0]
 8018a38:	89fb      	ldrh	r3, [r7, #14]
 8018a3a:	1c59      	adds	r1, r3, #1
 8018a3c:	81f9      	strh	r1, [r7, #14]
 8018a3e:	4413      	add	r3, r2
 8018a40:	781a      	ldrb	r2, [r3, #0]
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	1d98      	adds	r0, r3, #6
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	681a      	ldr	r2, [r3, #0]
 8018a4e:	89fb      	ldrh	r3, [r7, #14]
 8018a50:	4413      	add	r3, r2
 8018a52:	2203      	movs	r2, #3
 8018a54:	4619      	mov	r1, r3
 8018a56:	f002 fede 	bl	801b816 <memcpy1>
    bufItr = bufItr + 3;
 8018a5a:	89fb      	ldrh	r3, [r7, #14]
 8018a5c:	3303      	adds	r3, #3
 8018a5e:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	f103 0009 	add.w	r0, r3, #9
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	681a      	ldr	r2, [r3, #0]
 8018a6a:	89fb      	ldrh	r3, [r7, #14]
 8018a6c:	4413      	add	r3, r2
 8018a6e:	2203      	movs	r2, #3
 8018a70:	4619      	mov	r1, r3
 8018a72:	f002 fed0 	bl	801b816 <memcpy1>
    bufItr = bufItr + 3;
 8018a76:	89fb      	ldrh	r3, [r7, #14]
 8018a78:	3303      	adds	r3, #3
 8018a7a:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	681a      	ldr	r2, [r3, #0]
 8018a80:	89fb      	ldrh	r3, [r7, #14]
 8018a82:	1c59      	adds	r1, r3, #1
 8018a84:	81f9      	strh	r1, [r7, #14]
 8018a86:	4413      	add	r3, r2
 8018a88:	781b      	ldrb	r3, [r3, #0]
 8018a8a:	461a      	mov	r2, r3
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	681a      	ldr	r2, [r3, #0]
 8018a94:	89fb      	ldrh	r3, [r7, #14]
 8018a96:	1c59      	adds	r1, r3, #1
 8018a98:	81f9      	strh	r1, [r7, #14]
 8018a9a:	4413      	add	r3, r2
 8018a9c:	781b      	ldrb	r3, [r3, #0]
 8018a9e:	021a      	lsls	r2, r3, #8
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	68db      	ldr	r3, [r3, #12]
 8018aa4:	431a      	orrs	r2, r3
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	681a      	ldr	r2, [r3, #0]
 8018aae:	89fb      	ldrh	r3, [r7, #14]
 8018ab0:	1c59      	adds	r1, r3, #1
 8018ab2:	81f9      	strh	r1, [r7, #14]
 8018ab4:	4413      	add	r3, r2
 8018ab6:	781b      	ldrb	r3, [r3, #0]
 8018ab8:	041a      	lsls	r2, r3, #16
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	68db      	ldr	r3, [r3, #12]
 8018abe:	431a      	orrs	r2, r3
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	681a      	ldr	r2, [r3, #0]
 8018ac8:	89fb      	ldrh	r3, [r7, #14]
 8018aca:	1c59      	adds	r1, r3, #1
 8018acc:	81f9      	strh	r1, [r7, #14]
 8018ace:	4413      	add	r3, r2
 8018ad0:	781b      	ldrb	r3, [r3, #0]
 8018ad2:	061a      	lsls	r2, r3, #24
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	68db      	ldr	r3, [r3, #12]
 8018ad8:	431a      	orrs	r2, r3
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	681a      	ldr	r2, [r3, #0]
 8018ae2:	89fb      	ldrh	r3, [r7, #14]
 8018ae4:	1c59      	adds	r1, r3, #1
 8018ae6:	81f9      	strh	r1, [r7, #14]
 8018ae8:	4413      	add	r3, r2
 8018aea:	781a      	ldrb	r2, [r3, #0]
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	681a      	ldr	r2, [r3, #0]
 8018af4:	89fb      	ldrh	r3, [r7, #14]
 8018af6:	1c59      	adds	r1, r3, #1
 8018af8:	81f9      	strh	r1, [r7, #14]
 8018afa:	4413      	add	r3, r2
 8018afc:	781a      	ldrb	r2, [r3, #0]
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	791b      	ldrb	r3, [r3, #4]
 8018b06:	1f1a      	subs	r2, r3, #4
 8018b08:	89fb      	ldrh	r3, [r7, #14]
 8018b0a:	1ad3      	subs	r3, r2, r3
 8018b0c:	2b10      	cmp	r3, #16
 8018b0e:	d10e      	bne.n	8018b2e <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	f103 0012 	add.w	r0, r3, #18
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	681a      	ldr	r2, [r3, #0]
 8018b1a:	89fb      	ldrh	r3, [r7, #14]
 8018b1c:	4413      	add	r3, r2
 8018b1e:	2210      	movs	r2, #16
 8018b20:	4619      	mov	r1, r3
 8018b22:	f002 fe78 	bl	801b816 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8018b26:	89fb      	ldrh	r3, [r7, #14]
 8018b28:	3310      	adds	r3, #16
 8018b2a:	81fb      	strh	r3, [r7, #14]
 8018b2c:	e008      	b.n	8018b40 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	791b      	ldrb	r3, [r3, #4]
 8018b32:	1f1a      	subs	r2, r3, #4
 8018b34:	89fb      	ldrh	r3, [r7, #14]
 8018b36:	1ad3      	subs	r3, r2, r3
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	dd01      	ble.n	8018b40 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8018b3c:	2301      	movs	r3, #1
 8018b3e:	e031      	b.n	8018ba4 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	681a      	ldr	r2, [r3, #0]
 8018b44:	89fb      	ldrh	r3, [r7, #14]
 8018b46:	1c59      	adds	r1, r3, #1
 8018b48:	81f9      	strh	r1, [r7, #14]
 8018b4a:	4413      	add	r3, r2
 8018b4c:	781b      	ldrb	r3, [r3, #0]
 8018b4e:	461a      	mov	r2, r3
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	681a      	ldr	r2, [r3, #0]
 8018b58:	89fb      	ldrh	r3, [r7, #14]
 8018b5a:	1c59      	adds	r1, r3, #1
 8018b5c:	81f9      	strh	r1, [r7, #14]
 8018b5e:	4413      	add	r3, r2
 8018b60:	781b      	ldrb	r3, [r3, #0]
 8018b62:	021a      	lsls	r2, r3, #8
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b68:	431a      	orrs	r2, r3
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	681a      	ldr	r2, [r3, #0]
 8018b72:	89fb      	ldrh	r3, [r7, #14]
 8018b74:	1c59      	adds	r1, r3, #1
 8018b76:	81f9      	strh	r1, [r7, #14]
 8018b78:	4413      	add	r3, r2
 8018b7a:	781b      	ldrb	r3, [r3, #0]
 8018b7c:	041a      	lsls	r2, r3, #16
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b82:	431a      	orrs	r2, r3
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	681a      	ldr	r2, [r3, #0]
 8018b8c:	89fb      	ldrh	r3, [r7, #14]
 8018b8e:	1c59      	adds	r1, r3, #1
 8018b90:	81f9      	strh	r1, [r7, #14]
 8018b92:	4413      	add	r3, r2
 8018b94:	781b      	ldrb	r3, [r3, #0]
 8018b96:	061a      	lsls	r2, r3, #24
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b9c:	431a      	orrs	r2, r3
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8018ba2:	2300      	movs	r3, #0
}
 8018ba4:	4618      	mov	r0, r3
 8018ba6:	3710      	adds	r7, #16
 8018ba8:	46bd      	mov	sp, r7
 8018baa:	bd80      	pop	{r7, pc}

08018bac <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8018bac:	b580      	push	{r7, lr}
 8018bae:	b084      	sub	sp, #16
 8018bb0:	af00      	add	r7, sp, #0
 8018bb2:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	2b00      	cmp	r3, #0
 8018bb8:	d003      	beq.n	8018bc2 <LoRaMacParserData+0x16>
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	681b      	ldr	r3, [r3, #0]
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d101      	bne.n	8018bc6 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8018bc2:	2302      	movs	r3, #2
 8018bc4:	e0e2      	b.n	8018d8c <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8018bc6:	2300      	movs	r3, #0
 8018bc8:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	681a      	ldr	r2, [r3, #0]
 8018bce:	89fb      	ldrh	r3, [r7, #14]
 8018bd0:	1c59      	adds	r1, r3, #1
 8018bd2:	81f9      	strh	r1, [r7, #14]
 8018bd4:	4413      	add	r3, r2
 8018bd6:	781a      	ldrb	r2, [r3, #0]
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	681a      	ldr	r2, [r3, #0]
 8018be0:	89fb      	ldrh	r3, [r7, #14]
 8018be2:	1c59      	adds	r1, r3, #1
 8018be4:	81f9      	strh	r1, [r7, #14]
 8018be6:	4413      	add	r3, r2
 8018be8:	781b      	ldrb	r3, [r3, #0]
 8018bea:	461a      	mov	r2, r3
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	681a      	ldr	r2, [r3, #0]
 8018bf4:	89fb      	ldrh	r3, [r7, #14]
 8018bf6:	1c59      	adds	r1, r3, #1
 8018bf8:	81f9      	strh	r1, [r7, #14]
 8018bfa:	4413      	add	r3, r2
 8018bfc:	781b      	ldrb	r3, [r3, #0]
 8018bfe:	021a      	lsls	r2, r3, #8
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	689b      	ldr	r3, [r3, #8]
 8018c04:	431a      	orrs	r2, r3
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	681a      	ldr	r2, [r3, #0]
 8018c0e:	89fb      	ldrh	r3, [r7, #14]
 8018c10:	1c59      	adds	r1, r3, #1
 8018c12:	81f9      	strh	r1, [r7, #14]
 8018c14:	4413      	add	r3, r2
 8018c16:	781b      	ldrb	r3, [r3, #0]
 8018c18:	041a      	lsls	r2, r3, #16
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	689b      	ldr	r3, [r3, #8]
 8018c1e:	431a      	orrs	r2, r3
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	681a      	ldr	r2, [r3, #0]
 8018c28:	89fb      	ldrh	r3, [r7, #14]
 8018c2a:	1c59      	adds	r1, r3, #1
 8018c2c:	81f9      	strh	r1, [r7, #14]
 8018c2e:	4413      	add	r3, r2
 8018c30:	781b      	ldrb	r3, [r3, #0]
 8018c32:	061a      	lsls	r2, r3, #24
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	689b      	ldr	r3, [r3, #8]
 8018c38:	431a      	orrs	r2, r3
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	681a      	ldr	r2, [r3, #0]
 8018c42:	89fb      	ldrh	r3, [r7, #14]
 8018c44:	1c59      	adds	r1, r3, #1
 8018c46:	81f9      	strh	r1, [r7, #14]
 8018c48:	4413      	add	r3, r2
 8018c4a:	781a      	ldrb	r2, [r3, #0]
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	681a      	ldr	r2, [r3, #0]
 8018c54:	89fb      	ldrh	r3, [r7, #14]
 8018c56:	1c59      	adds	r1, r3, #1
 8018c58:	81f9      	strh	r1, [r7, #14]
 8018c5a:	4413      	add	r3, r2
 8018c5c:	781b      	ldrb	r3, [r3, #0]
 8018c5e:	b29a      	uxth	r2, r3
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	681a      	ldr	r2, [r3, #0]
 8018c68:	89fb      	ldrh	r3, [r7, #14]
 8018c6a:	1c59      	adds	r1, r3, #1
 8018c6c:	81f9      	strh	r1, [r7, #14]
 8018c6e:	4413      	add	r3, r2
 8018c70:	781b      	ldrb	r3, [r3, #0]
 8018c72:	0219      	lsls	r1, r3, #8
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	89db      	ldrh	r3, [r3, #14]
 8018c78:	b21a      	sxth	r2, r3
 8018c7a:	b20b      	sxth	r3, r1
 8018c7c:	4313      	orrs	r3, r2
 8018c7e:	b21b      	sxth	r3, r3
 8018c80:	b29a      	uxth	r2, r3
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	f103 0010 	add.w	r0, r3, #16
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	681a      	ldr	r2, [r3, #0]
 8018c90:	89fb      	ldrh	r3, [r7, #14]
 8018c92:	18d1      	adds	r1, r2, r3
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	7b1b      	ldrb	r3, [r3, #12]
 8018c98:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8018c9c:	b2db      	uxtb	r3, r3
 8018c9e:	b29b      	uxth	r3, r3
 8018ca0:	461a      	mov	r2, r3
 8018ca2:	f002 fdb8 	bl	801b816 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	7b1b      	ldrb	r3, [r3, #12]
 8018caa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8018cae:	b2db      	uxtb	r3, r3
 8018cb0:	b29a      	uxth	r2, r3
 8018cb2:	89fb      	ldrh	r3, [r7, #14]
 8018cb4:	4413      	add	r3, r2
 8018cb6:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	2200      	movs	r2, #0
 8018cbc:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	2200      	movs	r2, #0
 8018cc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	791b      	ldrb	r3, [r3, #4]
 8018ccc:	461a      	mov	r2, r3
 8018cce:	89fb      	ldrh	r3, [r7, #14]
 8018cd0:	1ad3      	subs	r3, r2, r3
 8018cd2:	2b04      	cmp	r3, #4
 8018cd4:	dd28      	ble.n	8018d28 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	681a      	ldr	r2, [r3, #0]
 8018cda:	89fb      	ldrh	r3, [r7, #14]
 8018cdc:	1c59      	adds	r1, r3, #1
 8018cde:	81f9      	strh	r1, [r7, #14]
 8018ce0:	4413      	add	r3, r2
 8018ce2:	781a      	ldrb	r2, [r3, #0]
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	791a      	ldrb	r2, [r3, #4]
 8018cee:	89fb      	ldrh	r3, [r7, #14]
 8018cf0:	b2db      	uxtb	r3, r3
 8018cf2:	1ad3      	subs	r3, r2, r3
 8018cf4:	b2db      	uxtb	r3, r3
 8018cf6:	3b04      	subs	r3, #4
 8018cf8:	b2da      	uxtb	r2, r3
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	681a      	ldr	r2, [r3, #0]
 8018d08:	89fb      	ldrh	r3, [r7, #14]
 8018d0a:	18d1      	adds	r1, r2, r3
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018d12:	b29b      	uxth	r3, r3
 8018d14:	461a      	mov	r2, r3
 8018d16:	f002 fd7e 	bl	801b816 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018d20:	b29a      	uxth	r2, r3
 8018d22:	89fb      	ldrh	r3, [r7, #14]
 8018d24:	4413      	add	r3, r2
 8018d26:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	681a      	ldr	r2, [r3, #0]
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	791b      	ldrb	r3, [r3, #4]
 8018d30:	3b04      	subs	r3, #4
 8018d32:	4413      	add	r3, r2
 8018d34:	781b      	ldrb	r3, [r3, #0]
 8018d36:	461a      	mov	r2, r3
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	6819      	ldr	r1, [r3, #0]
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	791b      	ldrb	r3, [r3, #4]
 8018d48:	3b03      	subs	r3, #3
 8018d4a:	440b      	add	r3, r1
 8018d4c:	781b      	ldrb	r3, [r3, #0]
 8018d4e:	021b      	lsls	r3, r3, #8
 8018d50:	431a      	orrs	r2, r3
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	6819      	ldr	r1, [r3, #0]
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	791b      	ldrb	r3, [r3, #4]
 8018d62:	3b02      	subs	r3, #2
 8018d64:	440b      	add	r3, r1
 8018d66:	781b      	ldrb	r3, [r3, #0]
 8018d68:	041b      	lsls	r3, r3, #16
 8018d6a:	431a      	orrs	r2, r3
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	6819      	ldr	r1, [r3, #0]
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	791b      	ldrb	r3, [r3, #4]
 8018d7c:	3b01      	subs	r3, #1
 8018d7e:	440b      	add	r3, r1
 8018d80:	781b      	ldrb	r3, [r3, #0]
 8018d82:	061b      	lsls	r3, r3, #24
 8018d84:	431a      	orrs	r2, r3
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8018d8a:	2300      	movs	r3, #0
}
 8018d8c:	4618      	mov	r0, r3
 8018d8e:	3710      	adds	r7, #16
 8018d90:	46bd      	mov	sp, r7
 8018d92:	bd80      	pop	{r7, pc}

08018d94 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8018d94:	b580      	push	{r7, lr}
 8018d96:	b084      	sub	sp, #16
 8018d98:	af00      	add	r7, sp, #0
 8018d9a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	2b00      	cmp	r3, #0
 8018da0:	d003      	beq.n	8018daa <LoRaMacSerializerJoinRequest+0x16>
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	681b      	ldr	r3, [r3, #0]
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d101      	bne.n	8018dae <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8018daa:	2301      	movs	r3, #1
 8018dac:	e070      	b.n	8018e90 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8018dae:	2300      	movs	r3, #0
 8018db0:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	791b      	ldrb	r3, [r3, #4]
 8018db6:	2b16      	cmp	r3, #22
 8018db8:	d801      	bhi.n	8018dbe <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8018dba:	2302      	movs	r3, #2
 8018dbc:	e068      	b.n	8018e90 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	681a      	ldr	r2, [r3, #0]
 8018dc2:	89fb      	ldrh	r3, [r7, #14]
 8018dc4:	1c59      	adds	r1, r3, #1
 8018dc6:	81f9      	strh	r1, [r7, #14]
 8018dc8:	4413      	add	r3, r2
 8018dca:	687a      	ldr	r2, [r7, #4]
 8018dcc:	7952      	ldrb	r2, [r2, #5]
 8018dce:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	681a      	ldr	r2, [r3, #0]
 8018dd4:	89fb      	ldrh	r3, [r7, #14]
 8018dd6:	18d0      	adds	r0, r2, r3
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	3306      	adds	r3, #6
 8018ddc:	2208      	movs	r2, #8
 8018dde:	4619      	mov	r1, r3
 8018de0:	f002 fd34 	bl	801b84c <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8018de4:	89fb      	ldrh	r3, [r7, #14]
 8018de6:	3308      	adds	r3, #8
 8018de8:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	681a      	ldr	r2, [r3, #0]
 8018dee:	89fb      	ldrh	r3, [r7, #14]
 8018df0:	18d0      	adds	r0, r2, r3
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	330e      	adds	r3, #14
 8018df6:	2208      	movs	r2, #8
 8018df8:	4619      	mov	r1, r3
 8018dfa:	f002 fd27 	bl	801b84c <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8018dfe:	89fb      	ldrh	r3, [r7, #14]
 8018e00:	3308      	adds	r3, #8
 8018e02:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	8ad9      	ldrh	r1, [r3, #22]
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	681a      	ldr	r2, [r3, #0]
 8018e0c:	89fb      	ldrh	r3, [r7, #14]
 8018e0e:	1c58      	adds	r0, r3, #1
 8018e10:	81f8      	strh	r0, [r7, #14]
 8018e12:	4413      	add	r3, r2
 8018e14:	b2ca      	uxtb	r2, r1
 8018e16:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	8adb      	ldrh	r3, [r3, #22]
 8018e1c:	0a1b      	lsrs	r3, r3, #8
 8018e1e:	b299      	uxth	r1, r3
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	681a      	ldr	r2, [r3, #0]
 8018e24:	89fb      	ldrh	r3, [r7, #14]
 8018e26:	1c58      	adds	r0, r3, #1
 8018e28:	81f8      	strh	r0, [r7, #14]
 8018e2a:	4413      	add	r3, r2
 8018e2c:	b2ca      	uxtb	r2, r1
 8018e2e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	6999      	ldr	r1, [r3, #24]
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	681a      	ldr	r2, [r3, #0]
 8018e38:	89fb      	ldrh	r3, [r7, #14]
 8018e3a:	1c58      	adds	r0, r3, #1
 8018e3c:	81f8      	strh	r0, [r7, #14]
 8018e3e:	4413      	add	r3, r2
 8018e40:	b2ca      	uxtb	r2, r1
 8018e42:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	699b      	ldr	r3, [r3, #24]
 8018e48:	0a19      	lsrs	r1, r3, #8
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	681a      	ldr	r2, [r3, #0]
 8018e4e:	89fb      	ldrh	r3, [r7, #14]
 8018e50:	1c58      	adds	r0, r3, #1
 8018e52:	81f8      	strh	r0, [r7, #14]
 8018e54:	4413      	add	r3, r2
 8018e56:	b2ca      	uxtb	r2, r1
 8018e58:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	699b      	ldr	r3, [r3, #24]
 8018e5e:	0c19      	lsrs	r1, r3, #16
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	681a      	ldr	r2, [r3, #0]
 8018e64:	89fb      	ldrh	r3, [r7, #14]
 8018e66:	1c58      	adds	r0, r3, #1
 8018e68:	81f8      	strh	r0, [r7, #14]
 8018e6a:	4413      	add	r3, r2
 8018e6c:	b2ca      	uxtb	r2, r1
 8018e6e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	699b      	ldr	r3, [r3, #24]
 8018e74:	0e19      	lsrs	r1, r3, #24
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	681a      	ldr	r2, [r3, #0]
 8018e7a:	89fb      	ldrh	r3, [r7, #14]
 8018e7c:	1c58      	adds	r0, r3, #1
 8018e7e:	81f8      	strh	r0, [r7, #14]
 8018e80:	4413      	add	r3, r2
 8018e82:	b2ca      	uxtb	r2, r1
 8018e84:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8018e86:	89fb      	ldrh	r3, [r7, #14]
 8018e88:	b2da      	uxtb	r2, r3
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8018e8e:	2300      	movs	r3, #0
}
 8018e90:	4618      	mov	r0, r3
 8018e92:	3710      	adds	r7, #16
 8018e94:	46bd      	mov	sp, r7
 8018e96:	bd80      	pop	{r7, pc}

08018e98 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8018e98:	b580      	push	{r7, lr}
 8018e9a:	b084      	sub	sp, #16
 8018e9c:	af00      	add	r7, sp, #0
 8018e9e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	2b00      	cmp	r3, #0
 8018ea4:	d003      	beq.n	8018eae <LoRaMacSerializerData+0x16>
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	681b      	ldr	r3, [r3, #0]
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d101      	bne.n	8018eb2 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8018eae:	2301      	movs	r3, #1
 8018eb0:	e0e5      	b.n	801907e <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8018eb2:	2300      	movs	r3, #0
 8018eb4:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8018eb6:	2308      	movs	r3, #8
 8018eb8:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	7b1b      	ldrb	r3, [r3, #12]
 8018ebe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8018ec2:	b2db      	uxtb	r3, r3
 8018ec4:	b29a      	uxth	r2, r3
 8018ec6:	89bb      	ldrh	r3, [r7, #12]
 8018ec8:	4413      	add	r3, r2
 8018eca:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	d002      	beq.n	8018edc <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8018ed6:	89bb      	ldrh	r3, [r7, #12]
 8018ed8:	3301      	adds	r3, #1
 8018eda:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018ee2:	b29a      	uxth	r2, r3
 8018ee4:	89bb      	ldrh	r3, [r7, #12]
 8018ee6:	4413      	add	r3, r2
 8018ee8:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8018eea:	89bb      	ldrh	r3, [r7, #12]
 8018eec:	3304      	adds	r3, #4
 8018eee:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	791b      	ldrb	r3, [r3, #4]
 8018ef4:	b29b      	uxth	r3, r3
 8018ef6:	89ba      	ldrh	r2, [r7, #12]
 8018ef8:	429a      	cmp	r2, r3
 8018efa:	d901      	bls.n	8018f00 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8018efc:	2302      	movs	r3, #2
 8018efe:	e0be      	b.n	801907e <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	681a      	ldr	r2, [r3, #0]
 8018f04:	89fb      	ldrh	r3, [r7, #14]
 8018f06:	1c59      	adds	r1, r3, #1
 8018f08:	81f9      	strh	r1, [r7, #14]
 8018f0a:	4413      	add	r3, r2
 8018f0c:	687a      	ldr	r2, [r7, #4]
 8018f0e:	7952      	ldrb	r2, [r2, #5]
 8018f10:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	6899      	ldr	r1, [r3, #8]
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	681a      	ldr	r2, [r3, #0]
 8018f1a:	89fb      	ldrh	r3, [r7, #14]
 8018f1c:	1c58      	adds	r0, r3, #1
 8018f1e:	81f8      	strh	r0, [r7, #14]
 8018f20:	4413      	add	r3, r2
 8018f22:	b2ca      	uxtb	r2, r1
 8018f24:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	689b      	ldr	r3, [r3, #8]
 8018f2a:	0a19      	lsrs	r1, r3, #8
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	681a      	ldr	r2, [r3, #0]
 8018f30:	89fb      	ldrh	r3, [r7, #14]
 8018f32:	1c58      	adds	r0, r3, #1
 8018f34:	81f8      	strh	r0, [r7, #14]
 8018f36:	4413      	add	r3, r2
 8018f38:	b2ca      	uxtb	r2, r1
 8018f3a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	689b      	ldr	r3, [r3, #8]
 8018f40:	0c19      	lsrs	r1, r3, #16
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	681a      	ldr	r2, [r3, #0]
 8018f46:	89fb      	ldrh	r3, [r7, #14]
 8018f48:	1c58      	adds	r0, r3, #1
 8018f4a:	81f8      	strh	r0, [r7, #14]
 8018f4c:	4413      	add	r3, r2
 8018f4e:	b2ca      	uxtb	r2, r1
 8018f50:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	689b      	ldr	r3, [r3, #8]
 8018f56:	0e19      	lsrs	r1, r3, #24
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	681a      	ldr	r2, [r3, #0]
 8018f5c:	89fb      	ldrh	r3, [r7, #14]
 8018f5e:	1c58      	adds	r0, r3, #1
 8018f60:	81f8      	strh	r0, [r7, #14]
 8018f62:	4413      	add	r3, r2
 8018f64:	b2ca      	uxtb	r2, r1
 8018f66:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	681a      	ldr	r2, [r3, #0]
 8018f6c:	89fb      	ldrh	r3, [r7, #14]
 8018f6e:	1c59      	adds	r1, r3, #1
 8018f70:	81f9      	strh	r1, [r7, #14]
 8018f72:	4413      	add	r3, r2
 8018f74:	687a      	ldr	r2, [r7, #4]
 8018f76:	7b12      	ldrb	r2, [r2, #12]
 8018f78:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	89d9      	ldrh	r1, [r3, #14]
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	681a      	ldr	r2, [r3, #0]
 8018f82:	89fb      	ldrh	r3, [r7, #14]
 8018f84:	1c58      	adds	r0, r3, #1
 8018f86:	81f8      	strh	r0, [r7, #14]
 8018f88:	4413      	add	r3, r2
 8018f8a:	b2ca      	uxtb	r2, r1
 8018f8c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	89db      	ldrh	r3, [r3, #14]
 8018f92:	0a1b      	lsrs	r3, r3, #8
 8018f94:	b299      	uxth	r1, r3
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	681a      	ldr	r2, [r3, #0]
 8018f9a:	89fb      	ldrh	r3, [r7, #14]
 8018f9c:	1c58      	adds	r0, r3, #1
 8018f9e:	81f8      	strh	r0, [r7, #14]
 8018fa0:	4413      	add	r3, r2
 8018fa2:	b2ca      	uxtb	r2, r1
 8018fa4:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	681a      	ldr	r2, [r3, #0]
 8018faa:	89fb      	ldrh	r3, [r7, #14]
 8018fac:	18d0      	adds	r0, r2, r3
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	f103 0110 	add.w	r1, r3, #16
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	7b1b      	ldrb	r3, [r3, #12]
 8018fb8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8018fbc:	b2db      	uxtb	r3, r3
 8018fbe:	b29b      	uxth	r3, r3
 8018fc0:	461a      	mov	r2, r3
 8018fc2:	f002 fc28 	bl	801b816 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	7b1b      	ldrb	r3, [r3, #12]
 8018fca:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8018fce:	b2db      	uxtb	r3, r3
 8018fd0:	b29a      	uxth	r2, r3
 8018fd2:	89fb      	ldrh	r3, [r7, #14]
 8018fd4:	4413      	add	r3, r2
 8018fd6:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	d009      	beq.n	8018ff6 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	681a      	ldr	r2, [r3, #0]
 8018fe6:	89fb      	ldrh	r3, [r7, #14]
 8018fe8:	1c59      	adds	r1, r3, #1
 8018fea:	81f9      	strh	r1, [r7, #14]
 8018fec:	4413      	add	r3, r2
 8018fee:	687a      	ldr	r2, [r7, #4]
 8018ff0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8018ff4:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	681a      	ldr	r2, [r3, #0]
 8018ffa:	89fb      	ldrh	r3, [r7, #14]
 8018ffc:	18d0      	adds	r0, r2, r3
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019008:	b29b      	uxth	r3, r3
 801900a:	461a      	mov	r2, r3
 801900c:	f002 fc03 	bl	801b816 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019016:	b29a      	uxth	r2, r3
 8019018:	89fb      	ldrh	r3, [r7, #14]
 801901a:	4413      	add	r3, r2
 801901c:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	681a      	ldr	r2, [r3, #0]
 8019026:	89fb      	ldrh	r3, [r7, #14]
 8019028:	1c58      	adds	r0, r3, #1
 801902a:	81f8      	strh	r0, [r7, #14]
 801902c:	4413      	add	r3, r2
 801902e:	b2ca      	uxtb	r2, r1
 8019030:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019036:	0a19      	lsrs	r1, r3, #8
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	681a      	ldr	r2, [r3, #0]
 801903c:	89fb      	ldrh	r3, [r7, #14]
 801903e:	1c58      	adds	r0, r3, #1
 8019040:	81f8      	strh	r0, [r7, #14]
 8019042:	4413      	add	r3, r2
 8019044:	b2ca      	uxtb	r2, r1
 8019046:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801904c:	0c19      	lsrs	r1, r3, #16
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	681a      	ldr	r2, [r3, #0]
 8019052:	89fb      	ldrh	r3, [r7, #14]
 8019054:	1c58      	adds	r0, r3, #1
 8019056:	81f8      	strh	r0, [r7, #14]
 8019058:	4413      	add	r3, r2
 801905a:	b2ca      	uxtb	r2, r1
 801905c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019062:	0e19      	lsrs	r1, r3, #24
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	681a      	ldr	r2, [r3, #0]
 8019068:	89fb      	ldrh	r3, [r7, #14]
 801906a:	1c58      	adds	r0, r3, #1
 801906c:	81f8      	strh	r0, [r7, #14]
 801906e:	4413      	add	r3, r2
 8019070:	b2ca      	uxtb	r2, r1
 8019072:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8019074:	89fb      	ldrh	r3, [r7, #14]
 8019076:	b2da      	uxtb	r2, r3
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801907c:	2300      	movs	r3, #0
}
 801907e:	4618      	mov	r0, r3
 8019080:	3710      	adds	r7, #16
 8019082:	46bd      	mov	sp, r7
 8019084:	bd80      	pop	{r7, pc}

08019086 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8019086:	b480      	push	{r7}
 8019088:	b083      	sub	sp, #12
 801908a:	af00      	add	r7, sp, #0
 801908c:	4603      	mov	r3, r0
 801908e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019090:	79fb      	ldrb	r3, [r7, #7]
 8019092:	2b08      	cmp	r3, #8
 8019094:	d101      	bne.n	801909a <RegionIsActive+0x14>
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 8019096:	2301      	movs	r3, #1
 8019098:	e000      	b.n	801909c <RegionIsActive+0x16>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 801909a:	2300      	movs	r3, #0
        }
    }
}
 801909c:	4618      	mov	r0, r3
 801909e:	370c      	adds	r7, #12
 80190a0:	46bd      	mov	sp, r7
 80190a2:	bc80      	pop	{r7}
 80190a4:	4770      	bx	lr

080190a6 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80190a6:	b580      	push	{r7, lr}
 80190a8:	b084      	sub	sp, #16
 80190aa:	af00      	add	r7, sp, #0
 80190ac:	4603      	mov	r3, r0
 80190ae:	6039      	str	r1, [r7, #0]
 80190b0:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80190b2:	2300      	movs	r3, #0
 80190b4:	60bb      	str	r3, [r7, #8]
    switch( region )
 80190b6:	79fb      	ldrb	r3, [r7, #7]
 80190b8:	2b08      	cmp	r3, #8
 80190ba:	d105      	bne.n	80190c8 <RegionGetPhyParam+0x22>
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 80190bc:	6838      	ldr	r0, [r7, #0]
 80190be:	f001 fa11 	bl	801a4e4 <RegionUS915GetPhyParam>
 80190c2:	4603      	mov	r3, r0
 80190c4:	60fb      	str	r3, [r7, #12]
 80190c6:	e001      	b.n	80190cc <RegionGetPhyParam+0x26>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80190c8:	68bb      	ldr	r3, [r7, #8]
 80190ca:	60fb      	str	r3, [r7, #12]
        }
    }
}
 80190cc:	68fb      	ldr	r3, [r7, #12]
 80190ce:	4618      	mov	r0, r3
 80190d0:	3710      	adds	r7, #16
 80190d2:	46bd      	mov	sp, r7
 80190d4:	bd80      	pop	{r7, pc}

080190d6 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 80190d6:	b580      	push	{r7, lr}
 80190d8:	b082      	sub	sp, #8
 80190da:	af00      	add	r7, sp, #0
 80190dc:	4603      	mov	r3, r0
 80190de:	6039      	str	r1, [r7, #0]
 80190e0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80190e2:	79fb      	ldrb	r3, [r7, #7]
 80190e4:	2b08      	cmp	r3, #8
 80190e6:	d103      	bne.n	80190f0 <RegionSetBandTxDone+0x1a>
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
        KR920_SET_BAND_TX_DONE( );
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
 80190e8:	6838      	ldr	r0, [r7, #0]
 80190ea:	f001 fb57 	bl	801a79c <RegionUS915SetBandTxDone>
 80190ee:	e000      	b.n	80190f2 <RegionSetBandTxDone+0x1c>
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 80190f0:	bf00      	nop
        }
    }
}
 80190f2:	3708      	adds	r7, #8
 80190f4:	46bd      	mov	sp, r7
 80190f6:	bd80      	pop	{r7, pc}

080190f8 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 80190f8:	b580      	push	{r7, lr}
 80190fa:	b082      	sub	sp, #8
 80190fc:	af00      	add	r7, sp, #0
 80190fe:	4603      	mov	r3, r0
 8019100:	6039      	str	r1, [r7, #0]
 8019102:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019104:	79fb      	ldrb	r3, [r7, #7]
 8019106:	2b08      	cmp	r3, #8
 8019108:	d103      	bne.n	8019112 <RegionInitDefaults+0x1a>
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
        KR920_INIT_DEFAULTS( );
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
 801910a:	6838      	ldr	r0, [r7, #0]
 801910c:	f001 fb72 	bl	801a7f4 <RegionUS915InitDefaults>
 8019110:	e000      	b.n	8019114 <RegionInitDefaults+0x1c>
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8019112:	bf00      	nop
        }
    }
}
 8019114:	bf00      	nop
 8019116:	3708      	adds	r7, #8
 8019118:	46bd      	mov	sp, r7
 801911a:	bd80      	pop	{r7, pc}

0801911c <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801911c:	b580      	push	{r7, lr}
 801911e:	b082      	sub	sp, #8
 8019120:	af00      	add	r7, sp, #0
 8019122:	4603      	mov	r3, r0
 8019124:	6039      	str	r1, [r7, #0]
 8019126:	71fb      	strb	r3, [r7, #7]
 8019128:	4613      	mov	r3, r2
 801912a:	71bb      	strb	r3, [r7, #6]
    switch( region )
 801912c:	79fb      	ldrb	r3, [r7, #7]
 801912e:	2b08      	cmp	r3, #8
 8019130:	d106      	bne.n	8019140 <RegionVerify+0x24>
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 8019132:	79bb      	ldrb	r3, [r7, #6]
 8019134:	4619      	mov	r1, r3
 8019136:	6838      	ldr	r0, [r7, #0]
 8019138:	f001 fc8e 	bl	801aa58 <RegionUS915Verify>
 801913c:	4603      	mov	r3, r0
 801913e:	e000      	b.n	8019142 <RegionVerify+0x26>
        RU864_VERIFY( );
        default:
        {
            return false;
 8019140:	2300      	movs	r3, #0
        }
    }
}
 8019142:	4618      	mov	r0, r3
 8019144:	3708      	adds	r7, #8
 8019146:	46bd      	mov	sp, r7
 8019148:	bd80      	pop	{r7, pc}

0801914a <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 801914a:	b580      	push	{r7, lr}
 801914c:	b082      	sub	sp, #8
 801914e:	af00      	add	r7, sp, #0
 8019150:	4603      	mov	r3, r0
 8019152:	6039      	str	r1, [r7, #0]
 8019154:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019156:	79fb      	ldrb	r3, [r7, #7]
 8019158:	2b08      	cmp	r3, #8
 801915a:	d103      	bne.n	8019164 <RegionApplyCFList+0x1a>
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
        KR920_APPLY_CF_LIST( );
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
 801915c:	6838      	ldr	r0, [r7, #0]
 801915e:	f001 fcf1 	bl	801ab44 <RegionUS915ApplyCFList>
 8019162:	e000      	b.n	8019166 <RegionApplyCFList+0x1c>
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8019164:	bf00      	nop
        }
    }
}
 8019166:	bf00      	nop
 8019168:	3708      	adds	r7, #8
 801916a:	46bd      	mov	sp, r7
 801916c:	bd80      	pop	{r7, pc}

0801916e <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 801916e:	b580      	push	{r7, lr}
 8019170:	b082      	sub	sp, #8
 8019172:	af00      	add	r7, sp, #0
 8019174:	4603      	mov	r3, r0
 8019176:	6039      	str	r1, [r7, #0]
 8019178:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801917a:	79fb      	ldrb	r3, [r7, #7]
 801917c:	2b08      	cmp	r3, #8
 801917e:	d104      	bne.n	801918a <RegionChanMaskSet+0x1c>
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 8019180:	6838      	ldr	r0, [r7, #0]
 8019182:	f001 fd53 	bl	801ac2c <RegionUS915ChanMaskSet>
 8019186:	4603      	mov	r3, r0
 8019188:	e000      	b.n	801918c <RegionChanMaskSet+0x1e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 801918a:	2300      	movs	r3, #0
        }
    }
}
 801918c:	4618      	mov	r0, r3
 801918e:	3708      	adds	r7, #8
 8019190:	46bd      	mov	sp, r7
 8019192:	bd80      	pop	{r7, pc}

08019194 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8019194:	b580      	push	{r7, lr}
 8019196:	b082      	sub	sp, #8
 8019198:	af00      	add	r7, sp, #0
 801919a:	603b      	str	r3, [r7, #0]
 801919c:	4603      	mov	r3, r0
 801919e:	71fb      	strb	r3, [r7, #7]
 80191a0:	460b      	mov	r3, r1
 80191a2:	71bb      	strb	r3, [r7, #6]
 80191a4:	4613      	mov	r3, r2
 80191a6:	717b      	strb	r3, [r7, #5]
    switch( region )
 80191a8:	79fb      	ldrb	r3, [r7, #7]
 80191aa:	2b08      	cmp	r3, #8
 80191ac:	d107      	bne.n	80191be <RegionComputeRxWindowParameters+0x2a>
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
        KR920_COMPUTE_RX_WINDOW_PARAMETERS( );
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 80191ae:	7979      	ldrb	r1, [r7, #5]
 80191b0:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80191b4:	693b      	ldr	r3, [r7, #16]
 80191b6:	683a      	ldr	r2, [r7, #0]
 80191b8:	f001 fda0 	bl	801acfc <RegionUS915ComputeRxWindowParameters>
 80191bc:	e000      	b.n	80191c0 <RegionComputeRxWindowParameters+0x2c>
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80191be:	bf00      	nop
        }
    }
}
 80191c0:	bf00      	nop
 80191c2:	3708      	adds	r7, #8
 80191c4:	46bd      	mov	sp, r7
 80191c6:	bd80      	pop	{r7, pc}

080191c8 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80191c8:	b580      	push	{r7, lr}
 80191ca:	b084      	sub	sp, #16
 80191cc:	af00      	add	r7, sp, #0
 80191ce:	4603      	mov	r3, r0
 80191d0:	60b9      	str	r1, [r7, #8]
 80191d2:	607a      	str	r2, [r7, #4]
 80191d4:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80191d6:	7bfb      	ldrb	r3, [r7, #15]
 80191d8:	2b08      	cmp	r3, #8
 80191da:	d105      	bne.n	80191e8 <RegionRxConfig+0x20>
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 80191dc:	6879      	ldr	r1, [r7, #4]
 80191de:	68b8      	ldr	r0, [r7, #8]
 80191e0:	f001 fdd6 	bl	801ad90 <RegionUS915RxConfig>
 80191e4:	4603      	mov	r3, r0
 80191e6:	e000      	b.n	80191ea <RegionRxConfig+0x22>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 80191e8:	2300      	movs	r3, #0
        }
    }
}
 80191ea:	4618      	mov	r0, r3
 80191ec:	3710      	adds	r7, #16
 80191ee:	46bd      	mov	sp, r7
 80191f0:	bd80      	pop	{r7, pc}

080191f2 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80191f2:	b580      	push	{r7, lr}
 80191f4:	b084      	sub	sp, #16
 80191f6:	af00      	add	r7, sp, #0
 80191f8:	60b9      	str	r1, [r7, #8]
 80191fa:	607a      	str	r2, [r7, #4]
 80191fc:	603b      	str	r3, [r7, #0]
 80191fe:	4603      	mov	r3, r0
 8019200:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8019202:	7bfb      	ldrb	r3, [r7, #15]
 8019204:	2b08      	cmp	r3, #8
 8019206:	d106      	bne.n	8019216 <RegionTxConfig+0x24>
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8019208:	683a      	ldr	r2, [r7, #0]
 801920a:	6879      	ldr	r1, [r7, #4]
 801920c:	68b8      	ldr	r0, [r7, #8]
 801920e:	f001 fe43 	bl	801ae98 <RegionUS915TxConfig>
 8019212:	4603      	mov	r3, r0
 8019214:	e000      	b.n	8019218 <RegionTxConfig+0x26>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8019216:	2300      	movs	r3, #0
        }
    }
}
 8019218:	4618      	mov	r0, r3
 801921a:	3710      	adds	r7, #16
 801921c:	46bd      	mov	sp, r7
 801921e:	bd80      	pop	{r7, pc}

08019220 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8019220:	b580      	push	{r7, lr}
 8019222:	b086      	sub	sp, #24
 8019224:	af02      	add	r7, sp, #8
 8019226:	60b9      	str	r1, [r7, #8]
 8019228:	607a      	str	r2, [r7, #4]
 801922a:	603b      	str	r3, [r7, #0]
 801922c:	4603      	mov	r3, r0
 801922e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8019230:	7bfb      	ldrb	r3, [r7, #15]
 8019232:	2b08      	cmp	r3, #8
 8019234:	d109      	bne.n	801924a <RegionLinkAdrReq+0x2a>
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 8019236:	69fb      	ldr	r3, [r7, #28]
 8019238:	9300      	str	r3, [sp, #0]
 801923a:	69bb      	ldr	r3, [r7, #24]
 801923c:	683a      	ldr	r2, [r7, #0]
 801923e:	6879      	ldr	r1, [r7, #4]
 8019240:	68b8      	ldr	r0, [r7, #8]
 8019242:	f001 fed3 	bl	801afec <RegionUS915LinkAdrReq>
 8019246:	4603      	mov	r3, r0
 8019248:	e000      	b.n	801924c <RegionLinkAdrReq+0x2c>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 801924a:	2300      	movs	r3, #0
        }
    }
}
 801924c:	4618      	mov	r0, r3
 801924e:	3710      	adds	r7, #16
 8019250:	46bd      	mov	sp, r7
 8019252:	bd80      	pop	{r7, pc}

08019254 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8019254:	b580      	push	{r7, lr}
 8019256:	b082      	sub	sp, #8
 8019258:	af00      	add	r7, sp, #0
 801925a:	4603      	mov	r3, r0
 801925c:	6039      	str	r1, [r7, #0]
 801925e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019260:	79fb      	ldrb	r3, [r7, #7]
 8019262:	2b08      	cmp	r3, #8
 8019264:	d104      	bne.n	8019270 <RegionRxParamSetupReq+0x1c>
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 8019266:	6838      	ldr	r0, [r7, #0]
 8019268:	f002 f8da 	bl	801b420 <RegionUS915RxParamSetupReq>
 801926c:	4603      	mov	r3, r0
 801926e:	e000      	b.n	8019272 <RegionRxParamSetupReq+0x1e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8019270:	2300      	movs	r3, #0
        }
    }
}
 8019272:	4618      	mov	r0, r3
 8019274:	3708      	adds	r7, #8
 8019276:	46bd      	mov	sp, r7
 8019278:	bd80      	pop	{r7, pc}

0801927a <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 801927a:	b580      	push	{r7, lr}
 801927c:	b082      	sub	sp, #8
 801927e:	af00      	add	r7, sp, #0
 8019280:	4603      	mov	r3, r0
 8019282:	6039      	str	r1, [r7, #0]
 8019284:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8019286:	79fb      	ldrb	r3, [r7, #7]
 8019288:	2b08      	cmp	r3, #8
 801928a:	d104      	bne.n	8019296 <RegionNewChannelReq+0x1c>
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 801928c:	6838      	ldr	r0, [r7, #0]
 801928e:	f002 f913 	bl	801b4b8 <RegionUS915NewChannelReq>
 8019292:	4603      	mov	r3, r0
 8019294:	e000      	b.n	8019298 <RegionNewChannelReq+0x1e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8019296:	2300      	movs	r3, #0
        }
    }
}
 8019298:	4618      	mov	r0, r3
 801929a:	3708      	adds	r7, #8
 801929c:	46bd      	mov	sp, r7
 801929e:	bd80      	pop	{r7, pc}

080192a0 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80192a0:	b580      	push	{r7, lr}
 80192a2:	b082      	sub	sp, #8
 80192a4:	af00      	add	r7, sp, #0
 80192a6:	4603      	mov	r3, r0
 80192a8:	6039      	str	r1, [r7, #0]
 80192aa:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80192ac:	79fb      	ldrb	r3, [r7, #7]
 80192ae:	2b08      	cmp	r3, #8
 80192b0:	d104      	bne.n	80192bc <RegionTxParamSetupReq+0x1c>
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 80192b2:	6838      	ldr	r0, [r7, #0]
 80192b4:	f002 f90b 	bl	801b4ce <RegionUS915TxParamSetupReq>
 80192b8:	4603      	mov	r3, r0
 80192ba:	e000      	b.n	80192be <RegionTxParamSetupReq+0x1e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80192bc:	2300      	movs	r3, #0
        }
    }
}
 80192be:	4618      	mov	r0, r3
 80192c0:	3708      	adds	r7, #8
 80192c2:	46bd      	mov	sp, r7
 80192c4:	bd80      	pop	{r7, pc}

080192c6 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80192c6:	b580      	push	{r7, lr}
 80192c8:	b082      	sub	sp, #8
 80192ca:	af00      	add	r7, sp, #0
 80192cc:	4603      	mov	r3, r0
 80192ce:	6039      	str	r1, [r7, #0]
 80192d0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80192d2:	79fb      	ldrb	r3, [r7, #7]
 80192d4:	2b08      	cmp	r3, #8
 80192d6:	d104      	bne.n	80192e2 <RegionDlChannelReq+0x1c>
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 80192d8:	6838      	ldr	r0, [r7, #0]
 80192da:	f002 f903 	bl	801b4e4 <RegionUS915DlChannelReq>
 80192de:	4603      	mov	r3, r0
 80192e0:	e000      	b.n	80192e4 <RegionDlChannelReq+0x1e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80192e2:	2300      	movs	r3, #0
        }
    }
}
 80192e4:	4618      	mov	r0, r3
 80192e6:	3708      	adds	r7, #8
 80192e8:	46bd      	mov	sp, r7
 80192ea:	bd80      	pop	{r7, pc}

080192ec <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 80192ec:	b580      	push	{r7, lr}
 80192ee:	b082      	sub	sp, #8
 80192f0:	af00      	add	r7, sp, #0
 80192f2:	4603      	mov	r3, r0
 80192f4:	71fb      	strb	r3, [r7, #7]
 80192f6:	460b      	mov	r3, r1
 80192f8:	71bb      	strb	r3, [r7, #6]
 80192fa:	4613      	mov	r3, r2
 80192fc:	717b      	strb	r3, [r7, #5]
    switch( region )
 80192fe:	79fb      	ldrb	r3, [r7, #7]
 8019300:	2b08      	cmp	r3, #8
 8019302:	d108      	bne.n	8019316 <RegionAlternateDr+0x2a>
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8019304:	797a      	ldrb	r2, [r7, #5]
 8019306:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801930a:	4611      	mov	r1, r2
 801930c:	4618      	mov	r0, r3
 801930e:	f002 f8f5 	bl	801b4fc <RegionUS915AlternateDr>
 8019312:	4603      	mov	r3, r0
 8019314:	e000      	b.n	8019318 <RegionAlternateDr+0x2c>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8019316:	2300      	movs	r3, #0
        }
    }
}
 8019318:	4618      	mov	r0, r3
 801931a:	3708      	adds	r7, #8
 801931c:	46bd      	mov	sp, r7
 801931e:	bd80      	pop	{r7, pc}

08019320 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8019320:	b580      	push	{r7, lr}
 8019322:	b084      	sub	sp, #16
 8019324:	af00      	add	r7, sp, #0
 8019326:	60b9      	str	r1, [r7, #8]
 8019328:	607a      	str	r2, [r7, #4]
 801932a:	603b      	str	r3, [r7, #0]
 801932c:	4603      	mov	r3, r0
 801932e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8019330:	7bfb      	ldrb	r3, [r7, #15]
 8019332:	2b08      	cmp	r3, #8
 8019334:	d107      	bne.n	8019346 <RegionNextChannel+0x26>
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 8019336:	69bb      	ldr	r3, [r7, #24]
 8019338:	683a      	ldr	r2, [r7, #0]
 801933a:	6879      	ldr	r1, [r7, #4]
 801933c:	68b8      	ldr	r0, [r7, #8]
 801933e:	f002 f913 	bl	801b568 <RegionUS915NextChannel>
 8019342:	4603      	mov	r3, r0
 8019344:	e000      	b.n	8019348 <RegionNextChannel+0x28>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8019346:	2309      	movs	r3, #9
        }
    }
}
 8019348:	4618      	mov	r0, r3
 801934a:	3710      	adds	r7, #16
 801934c:	46bd      	mov	sp, r7
 801934e:	bd80      	pop	{r7, pc}

08019350 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8019350:	b590      	push	{r4, r7, lr}
 8019352:	b083      	sub	sp, #12
 8019354:	af00      	add	r7, sp, #0
 8019356:	4604      	mov	r4, r0
 8019358:	4608      	mov	r0, r1
 801935a:	4611      	mov	r1, r2
 801935c:	461a      	mov	r2, r3
 801935e:	4623      	mov	r3, r4
 8019360:	71fb      	strb	r3, [r7, #7]
 8019362:	4603      	mov	r3, r0
 8019364:	71bb      	strb	r3, [r7, #6]
 8019366:	460b      	mov	r3, r1
 8019368:	717b      	strb	r3, [r7, #5]
 801936a:	4613      	mov	r3, r2
 801936c:	713b      	strb	r3, [r7, #4]
    switch( region )
 801936e:	79fb      	ldrb	r3, [r7, #7]
 8019370:	2b08      	cmp	r3, #8
 8019372:	d109      	bne.n	8019388 <RegionApplyDrOffset+0x38>
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 8019374:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8019378:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801937c:	79bb      	ldrb	r3, [r7, #6]
 801937e:	4618      	mov	r0, r3
 8019380:	f002 f9e0 	bl	801b744 <RegionUS915ApplyDrOffset>
 8019384:	4603      	mov	r3, r0
 8019386:	e000      	b.n	801938a <RegionApplyDrOffset+0x3a>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8019388:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 801938a:	4618      	mov	r0, r3
 801938c:	370c      	adds	r7, #12
 801938e:	46bd      	mov	sp, r7
 8019390:	bd90      	pop	{r4, r7, pc}
	...

08019394 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8019394:	b480      	push	{r7}
 8019396:	b083      	sub	sp, #12
 8019398:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 801939a:	4b04      	ldr	r3, [pc, #16]	; (80193ac <RegionGetVersion+0x18>)
 801939c:	607b      	str	r3, [r7, #4]

    return version;
 801939e:	687b      	ldr	r3, [r7, #4]
}
 80193a0:	4618      	mov	r0, r3
 80193a2:	370c      	adds	r7, #12
 80193a4:	46bd      	mov	sp, r7
 80193a6:	bc80      	pop	{r7}
 80193a8:	4770      	bx	lr
 80193aa:	bf00      	nop
 80193ac:	02010001 	.word	0x02010001

080193b0 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 80193b0:	b480      	push	{r7}
 80193b2:	b087      	sub	sp, #28
 80193b4:	af00      	add	r7, sp, #0
 80193b6:	4603      	mov	r3, r0
 80193b8:	60b9      	str	r1, [r7, #8]
 80193ba:	607a      	str	r2, [r7, #4]
 80193bc:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 80193be:	68bb      	ldr	r3, [r7, #8]
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d002      	beq.n	80193ca <FindAvailable125kHzChannels+0x1a>
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	2b00      	cmp	r3, #0
 80193c8:	d101      	bne.n	80193ce <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80193ca:	2303      	movs	r3, #3
 80193cc:	e021      	b.n	8019412 <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	2200      	movs	r2, #0
 80193d2:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 80193d4:	2300      	movs	r3, #0
 80193d6:	75fb      	strb	r3, [r7, #23]
 80193d8:	e017      	b.n	801940a <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 80193da:	89fa      	ldrh	r2, [r7, #14]
 80193dc:	7dfb      	ldrb	r3, [r7, #23]
 80193de:	fa42 f303 	asr.w	r3, r2, r3
 80193e2:	f003 0301 	and.w	r3, r3, #1
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	d00c      	beq.n	8019404 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	781b      	ldrb	r3, [r3, #0]
 80193ee:	461a      	mov	r2, r3
 80193f0:	68bb      	ldr	r3, [r7, #8]
 80193f2:	4413      	add	r3, r2
 80193f4:	7dfa      	ldrb	r2, [r7, #23]
 80193f6:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	781b      	ldrb	r3, [r3, #0]
 80193fc:	3301      	adds	r3, #1
 80193fe:	b2da      	uxtb	r2, r3
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8019404:	7dfb      	ldrb	r3, [r7, #23]
 8019406:	3301      	adds	r3, #1
 8019408:	75fb      	strb	r3, [r7, #23]
 801940a:	7dfb      	ldrb	r3, [r7, #23]
 801940c:	2b07      	cmp	r3, #7
 801940e:	d9e4      	bls.n	80193da <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 8019410:	2300      	movs	r3, #0
}
 8019412:	4618      	mov	r0, r3
 8019414:	371c      	adds	r7, #28
 8019416:	46bd      	mov	sp, r7
 8019418:	bc80      	pop	{r7}
 801941a:	4770      	bx	lr

0801941c <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 801941c:	b590      	push	{r4, r7, lr}
 801941e:	b089      	sub	sp, #36	; 0x24
 8019420:	af00      	add	r7, sp, #0
 8019422:	60f8      	str	r0, [r7, #12]
 8019424:	60b9      	str	r1, [r7, #8]
 8019426:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8019428:	2300      	movs	r3, #0
 801942a:	617b      	str	r3, [r7, #20]
 801942c:	2300      	movs	r3, #0
 801942e:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 8019430:	2300      	movs	r3, #0
 8019432:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8019434:	68fb      	ldr	r3, [r7, #12]
 8019436:	2b00      	cmp	r3, #0
 8019438:	d005      	beq.n	8019446 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 801943a:	68bb      	ldr	r3, [r7, #8]
 801943c:	2b00      	cmp	r3, #0
 801943e:	d002      	beq.n	8019446 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	2b00      	cmp	r3, #0
 8019444:	d101      	bne.n	801944a <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8019446:	2303      	movs	r3, #3
 8019448:	e055      	b.n	80194f6 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 801944a:	68bb      	ldr	r3, [r7, #8]
 801944c:	781b      	ldrb	r3, [r3, #0]
 801944e:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8019450:	7f7b      	ldrb	r3, [r7, #29]
 8019452:	085b      	lsrs	r3, r3, #1
 8019454:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 8019456:	7f7b      	ldrb	r3, [r7, #29]
 8019458:	f003 0301 	and.w	r3, r3, #1
 801945c:	b2db      	uxtb	r3, r3
 801945e:	2b00      	cmp	r3, #0
 8019460:	d107      	bne.n	8019472 <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8019462:	7f3b      	ldrb	r3, [r7, #28]
 8019464:	005b      	lsls	r3, r3, #1
 8019466:	68fa      	ldr	r2, [r7, #12]
 8019468:	4413      	add	r3, r2
 801946a:	881b      	ldrh	r3, [r3, #0]
 801946c:	b2db      	uxtb	r3, r3
 801946e:	83fb      	strh	r3, [r7, #30]
 8019470:	e006      	b.n	8019480 <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8019472:	7f3b      	ldrb	r3, [r7, #28]
 8019474:	005b      	lsls	r3, r3, #1
 8019476:	68fa      	ldr	r2, [r7, #12]
 8019478:	4413      	add	r3, r2
 801947a:	881b      	ldrh	r3, [r3, #0]
 801947c:	0a1b      	lsrs	r3, r3, #8
 801947e:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8019480:	f107 0213 	add.w	r2, r7, #19
 8019484:	f107 0114 	add.w	r1, r7, #20
 8019488:	8bfb      	ldrh	r3, [r7, #30]
 801948a:	4618      	mov	r0, r3
 801948c:	f7ff ff90 	bl	80193b0 <FindAvailable125kHzChannels>
 8019490:	4603      	mov	r3, r0
 8019492:	2b03      	cmp	r3, #3
 8019494:	d101      	bne.n	801949a <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8019496:	2303      	movs	r3, #3
 8019498:	e02d      	b.n	80194f6 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 801949a:	7cfb      	ldrb	r3, [r7, #19]
 801949c:	2b00      	cmp	r3, #0
 801949e:	d011      	beq.n	80194c4 <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 80194a0:	7f7b      	ldrb	r3, [r7, #29]
 80194a2:	00db      	lsls	r3, r3, #3
 80194a4:	b2dc      	uxtb	r4, r3
 80194a6:	7cfb      	ldrb	r3, [r7, #19]
 80194a8:	3b01      	subs	r3, #1
 80194aa:	4619      	mov	r1, r3
 80194ac:	2000      	movs	r0, #0
 80194ae:	f002 f99b 	bl	801b7e8 <randr>
 80194b2:	4603      	mov	r3, r0
 80194b4:	3320      	adds	r3, #32
 80194b6:	443b      	add	r3, r7
 80194b8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80194bc:	4423      	add	r3, r4
 80194be:	b2da      	uxtb	r2, r3
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 80194c4:	7f7b      	ldrb	r3, [r7, #29]
 80194c6:	3301      	adds	r3, #1
 80194c8:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 80194ca:	7f7b      	ldrb	r3, [r7, #29]
 80194cc:	2b07      	cmp	r3, #7
 80194ce:	d901      	bls.n	80194d4 <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 80194d0:	2300      	movs	r3, #0
 80194d2:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 80194d4:	7cfb      	ldrb	r3, [r7, #19]
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	d104      	bne.n	80194e4 <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 80194da:	68bb      	ldr	r3, [r7, #8]
 80194dc:	781b      	ldrb	r3, [r3, #0]
 80194de:	7f7a      	ldrb	r2, [r7, #29]
 80194e0:	429a      	cmp	r2, r3
 80194e2:	d1b5      	bne.n	8019450 <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 80194e4:	7cfb      	ldrb	r3, [r7, #19]
 80194e6:	2b00      	cmp	r3, #0
 80194e8:	d004      	beq.n	80194f4 <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 80194ea:	68bb      	ldr	r3, [r7, #8]
 80194ec:	7f7a      	ldrb	r2, [r7, #29]
 80194ee:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80194f0:	2300      	movs	r3, #0
 80194f2:	e000      	b.n	80194f6 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 80194f4:	2303      	movs	r3, #3
}
 80194f6:	4618      	mov	r0, r3
 80194f8:	3724      	adds	r7, #36	; 0x24
 80194fa:	46bd      	mov	sp, r7
 80194fc:	bd90      	pop	{r4, r7, pc}

080194fe <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 80194fe:	b480      	push	{r7}
 8019500:	b085      	sub	sp, #20
 8019502:	af00      	add	r7, sp, #0
 8019504:	4603      	mov	r3, r0
 8019506:	60b9      	str	r1, [r7, #8]
 8019508:	607a      	str	r2, [r7, #4]
 801950a:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 801950c:	7bfb      	ldrb	r3, [r7, #15]
 801950e:	687a      	ldr	r2, [r7, #4]
 8019510:	fb03 f202 	mul.w	r2, r3, r2
 8019514:	68bb      	ldr	r3, [r7, #8]
 8019516:	4413      	add	r3, r2
}
 8019518:	4618      	mov	r0, r3
 801951a:	3714      	adds	r7, #20
 801951c:	46bd      	mov	sp, r7
 801951e:	bc80      	pop	{r7}
 8019520:	4770      	bx	lr

08019522 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8019522:	b480      	push	{r7}
 8019524:	b087      	sub	sp, #28
 8019526:	af00      	add	r7, sp, #0
 8019528:	60f8      	str	r0, [r7, #12]
 801952a:	4608      	mov	r0, r1
 801952c:	4639      	mov	r1, r7
 801952e:	e881 000c 	stmia.w	r1, {r2, r3}
 8019532:	4603      	mov	r3, r0
 8019534:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8019536:	68fb      	ldr	r3, [r7, #12]
 8019538:	881b      	ldrh	r3, [r3, #0]
 801953a:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 801953c:	7afb      	ldrb	r3, [r7, #11]
 801953e:	f083 0301 	eor.w	r3, r3, #1
 8019542:	b2db      	uxtb	r3, r3
 8019544:	2b00      	cmp	r3, #0
 8019546:	d01b      	beq.n	8019580 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8019548:	f242 7310 	movw	r3, #10000	; 0x2710
 801954c:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 801954e:	683b      	ldr	r3, [r7, #0]
 8019550:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8019554:	d202      	bcs.n	801955c <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8019556:	2364      	movs	r3, #100	; 0x64
 8019558:	82bb      	strh	r3, [r7, #20]
 801955a:	e00b      	b.n	8019574 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 801955c:	683b      	ldr	r3, [r7, #0]
 801955e:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8019562:	4293      	cmp	r3, r2
 8019564:	d803      	bhi.n	801956e <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8019566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801956a:	82bb      	strh	r3, [r7, #20]
 801956c:	e002      	b.n	8019574 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 801956e:	f242 7310 	movw	r3, #10000	; 0x2710
 8019572:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8019574:	8aba      	ldrh	r2, [r7, #20]
 8019576:	8afb      	ldrh	r3, [r7, #22]
 8019578:	4293      	cmp	r3, r2
 801957a:	bf38      	it	cc
 801957c:	4613      	movcc	r3, r2
 801957e:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8019580:	8afb      	ldrh	r3, [r7, #22]
 8019582:	2b00      	cmp	r3, #0
 8019584:	d101      	bne.n	801958a <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8019586:	2301      	movs	r3, #1
 8019588:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 801958a:	8afb      	ldrh	r3, [r7, #22]
}
 801958c:	4618      	mov	r0, r3
 801958e:	371c      	adds	r7, #28
 8019590:	46bd      	mov	sp, r7
 8019592:	bc80      	pop	{r7}
 8019594:	4770      	bx	lr
	...

08019598 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8019598:	b580      	push	{r7, lr}
 801959a:	b08e      	sub	sp, #56	; 0x38
 801959c:	af02      	add	r7, sp, #8
 801959e:	60f8      	str	r0, [r7, #12]
 80195a0:	4608      	mov	r0, r1
 80195a2:	4639      	mov	r1, r7
 80195a4:	e881 000c 	stmia.w	r1, {r2, r3}
 80195a8:	4603      	mov	r3, r0
 80195aa:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80195ac:	68fb      	ldr	r3, [r7, #12]
 80195ae:	881b      	ldrh	r3, [r3, #0]
 80195b0:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80195b2:	4b4b      	ldr	r3, [pc, #300]	; (80196e0 <SetMaxTimeCredits+0x148>)
 80195b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 80195b6:	463b      	mov	r3, r7
 80195b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80195bc:	f005 fdb6 	bl	801f12c <SysTimeToMs>
 80195c0:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 80195c2:	f107 0314 	add.w	r3, r7, #20
 80195c6:	2200      	movs	r2, #0
 80195c8:	601a      	str	r2, [r3, #0]
 80195ca:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80195cc:	7af9      	ldrb	r1, [r7, #11]
 80195ce:	463b      	mov	r3, r7
 80195d0:	cb0c      	ldmia	r3, {r2, r3}
 80195d2:	68f8      	ldr	r0, [r7, #12]
 80195d4:	f7ff ffa5 	bl	8019522 <GetDutyCycle>
 80195d8:	4603      	mov	r3, r0
 80195da:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 80195dc:	7afb      	ldrb	r3, [r7, #11]
 80195de:	f083 0301 	eor.w	r3, r3, #1
 80195e2:	b2db      	uxtb	r3, r3
 80195e4:	2b00      	cmp	r3, #0
 80195e6:	d062      	beq.n	80196ae <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80195e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80195ea:	2b64      	cmp	r3, #100	; 0x64
 80195ec:	d105      	bne.n	80195fa <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80195ee:	4b3c      	ldr	r3, [pc, #240]	; (80196e0 <SetMaxTimeCredits+0x148>)
 80195f0:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80195f2:	68fb      	ldr	r3, [r7, #12]
 80195f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80195f6:	609a      	str	r2, [r3, #8]
 80195f8:	e00b      	b.n	8019612 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80195fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80195fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8019600:	d105      	bne.n	801960e <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8019602:	4b38      	ldr	r3, [pc, #224]	; (80196e4 <SetMaxTimeCredits+0x14c>)
 8019604:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8019606:	68fb      	ldr	r3, [r7, #12]
 8019608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801960a:	609a      	str	r2, [r3, #8]
 801960c:	e001      	b.n	8019612 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 801960e:	4b36      	ldr	r3, [pc, #216]	; (80196e8 <SetMaxTimeCredits+0x150>)
 8019610:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8019612:	68fb      	ldr	r3, [r7, #12]
 8019614:	689a      	ldr	r2, [r3, #8]
 8019616:	f107 031c 	add.w	r3, r7, #28
 801961a:	4611      	mov	r1, r2
 801961c:	4618      	mov	r0, r3
 801961e:	f005 fdad 	bl	801f17c <SysTimeFromMs>
 8019622:	f107 0014 	add.w	r0, r7, #20
 8019626:	6a3b      	ldr	r3, [r7, #32]
 8019628:	9300      	str	r3, [sp, #0]
 801962a:	69fb      	ldr	r3, [r7, #28]
 801962c:	463a      	mov	r2, r7
 801962e:	ca06      	ldmia	r2, {r1, r2}
 8019630:	f005 fcbd 	bl	801efae <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8019634:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8019638:	f083 0301 	eor.w	r3, r3, #1
 801963c:	b2db      	uxtb	r3, r3
 801963e:	2b00      	cmp	r3, #0
 8019640:	d006      	beq.n	8019650 <SetMaxTimeCredits+0xb8>
 8019642:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019646:	f083 0301 	eor.w	r3, r3, #1
 801964a:	b2db      	uxtb	r3, r3
 801964c:	2b00      	cmp	r3, #0
 801964e:	d108      	bne.n	8019662 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8019650:	68fb      	ldr	r3, [r7, #12]
 8019652:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8019654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019656:	429a      	cmp	r2, r3
 8019658:	d103      	bne.n	8019662 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 801965a:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 801965c:	4a23      	ldr	r2, [pc, #140]	; (80196ec <SetMaxTimeCredits+0x154>)
 801965e:	4293      	cmp	r3, r2
 8019660:	d92f      	bls.n	80196c2 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019666:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8019668:	683b      	ldr	r3, [r7, #0]
 801966a:	4a21      	ldr	r2, [pc, #132]	; (80196f0 <SetMaxTimeCredits+0x158>)
 801966c:	4293      	cmp	r3, r2
 801966e:	d928      	bls.n	80196c2 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8019670:	683b      	ldr	r3, [r7, #0]
 8019672:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8019676:	3b30      	subs	r3, #48	; 0x30
 8019678:	4a1e      	ldr	r2, [pc, #120]	; (80196f4 <SetMaxTimeCredits+0x15c>)
 801967a:	fba2 2303 	umull	r2, r3, r2, r3
 801967e:	0c1b      	lsrs	r3, r3, #16
 8019680:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8019682:	697b      	ldr	r3, [r7, #20]
 8019684:	4a1c      	ldr	r2, [pc, #112]	; (80196f8 <SetMaxTimeCredits+0x160>)
 8019686:	fb02 f303 	mul.w	r3, r2, r3
 801968a:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801968c:	697b      	ldr	r3, [r7, #20]
 801968e:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8019692:	3330      	adds	r3, #48	; 0x30
 8019694:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8019696:	2300      	movs	r3, #0
 8019698:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 801969a:	f107 0314 	add.w	r3, r7, #20
 801969e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80196a2:	f005 fd43 	bl	801f12c <SysTimeToMs>
 80196a6:	4602      	mov	r2, r0
 80196a8:	68fb      	ldr	r3, [r7, #12]
 80196aa:	609a      	str	r2, [r3, #8]
 80196ac:	e009      	b.n	80196c2 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80196ae:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80196b2:	f083 0301 	eor.w	r3, r3, #1
 80196b6:	b2db      	uxtb	r3, r3
 80196b8:	2b00      	cmp	r3, #0
 80196ba:	d002      	beq.n	80196c2 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80196bc:	68fb      	ldr	r3, [r7, #12]
 80196be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80196c0:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80196c2:	68fb      	ldr	r3, [r7, #12]
 80196c4:	685b      	ldr	r3, [r3, #4]
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d102      	bne.n	80196d0 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80196ca:	68fb      	ldr	r3, [r7, #12]
 80196cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80196ce:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80196d0:	68fb      	ldr	r3, [r7, #12]
 80196d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80196d4:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80196d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 80196d8:	4618      	mov	r0, r3
 80196da:	3730      	adds	r7, #48	; 0x30
 80196dc:	46bd      	mov	sp, r7
 80196de:	bd80      	pop	{r7, pc}
 80196e0:	001b7740 	.word	0x001b7740
 80196e4:	0112a880 	.word	0x0112a880
 80196e8:	02932e00 	.word	0x02932e00
 80196ec:	0001517f 	.word	0x0001517f
 80196f0:	0001ec2f 	.word	0x0001ec2f
 80196f4:	c22e4507 	.word	0xc22e4507
 80196f8:	00015180 	.word	0x00015180

080196fc <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 80196fc:	b580      	push	{r7, lr}
 80196fe:	b086      	sub	sp, #24
 8019700:	af02      	add	r7, sp, #8
 8019702:	6078      	str	r0, [r7, #4]
 8019704:	4608      	mov	r0, r1
 8019706:	4611      	mov	r1, r2
 8019708:	461a      	mov	r2, r3
 801970a:	4603      	mov	r3, r0
 801970c:	70fb      	strb	r3, [r7, #3]
 801970e:	460b      	mov	r3, r1
 8019710:	70bb      	strb	r3, [r7, #2]
 8019712:	4613      	mov	r3, r2
 8019714:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8019716:	78f9      	ldrb	r1, [r7, #3]
 8019718:	787b      	ldrb	r3, [r7, #1]
 801971a:	9301      	str	r3, [sp, #4]
 801971c:	78bb      	ldrb	r3, [r7, #2]
 801971e:	9300      	str	r3, [sp, #0]
 8019720:	f107 0318 	add.w	r3, r7, #24
 8019724:	cb0c      	ldmia	r3, {r2, r3}
 8019726:	6878      	ldr	r0, [r7, #4]
 8019728:	f7ff ff36 	bl	8019598 <SetMaxTimeCredits>
 801972c:	4603      	mov	r3, r0
 801972e:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8019730:	78fb      	ldrb	r3, [r7, #3]
 8019732:	2b00      	cmp	r3, #0
 8019734:	d00a      	beq.n	801974c <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	685b      	ldr	r3, [r3, #4]
 801973a:	4618      	mov	r0, r3
 801973c:	f006 fb52 	bl	801fde4 <UTIL_TIMER_GetElapsedTime>
 8019740:	4602      	mov	r2, r0
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	68db      	ldr	r3, [r3, #12]
 8019746:	441a      	add	r2, r3
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	68da      	ldr	r2, [r3, #12]
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	691b      	ldr	r3, [r3, #16]
 8019754:	429a      	cmp	r2, r3
 8019756:	d903      	bls.n	8019760 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	691a      	ldr	r2, [r3, #16]
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	6a3a      	ldr	r2, [r7, #32]
 8019764:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8019766:	89fb      	ldrh	r3, [r7, #14]
}
 8019768:	4618      	mov	r0, r3
 801976a:	3710      	adds	r7, #16
 801976c:	46bd      	mov	sp, r7
 801976e:	bd80      	pop	{r7, pc}

08019770 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8019770:	b480      	push	{r7}
 8019772:	b085      	sub	sp, #20
 8019774:	af00      	add	r7, sp, #0
 8019776:	4603      	mov	r3, r0
 8019778:	460a      	mov	r2, r1
 801977a:	80fb      	strh	r3, [r7, #6]
 801977c:	4613      	mov	r3, r2
 801977e:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8019780:	2300      	movs	r3, #0
 8019782:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8019784:	2300      	movs	r3, #0
 8019786:	73bb      	strb	r3, [r7, #14]
 8019788:	e011      	b.n	80197ae <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801978a:	88fa      	ldrh	r2, [r7, #6]
 801978c:	7bbb      	ldrb	r3, [r7, #14]
 801978e:	2101      	movs	r1, #1
 8019790:	fa01 f303 	lsl.w	r3, r1, r3
 8019794:	401a      	ands	r2, r3
 8019796:	7bbb      	ldrb	r3, [r7, #14]
 8019798:	2101      	movs	r1, #1
 801979a:	fa01 f303 	lsl.w	r3, r1, r3
 801979e:	429a      	cmp	r2, r3
 80197a0:	d102      	bne.n	80197a8 <CountChannels+0x38>
        {
            nbActiveBits++;
 80197a2:	7bfb      	ldrb	r3, [r7, #15]
 80197a4:	3301      	adds	r3, #1
 80197a6:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 80197a8:	7bbb      	ldrb	r3, [r7, #14]
 80197aa:	3301      	adds	r3, #1
 80197ac:	73bb      	strb	r3, [r7, #14]
 80197ae:	7bba      	ldrb	r2, [r7, #14]
 80197b0:	797b      	ldrb	r3, [r7, #5]
 80197b2:	429a      	cmp	r2, r3
 80197b4:	d3e9      	bcc.n	801978a <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80197b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80197b8:	4618      	mov	r0, r3
 80197ba:	3714      	adds	r7, #20
 80197bc:	46bd      	mov	sp, r7
 80197be:	bc80      	pop	{r7}
 80197c0:	4770      	bx	lr

080197c2 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80197c2:	b580      	push	{r7, lr}
 80197c4:	b084      	sub	sp, #16
 80197c6:	af00      	add	r7, sp, #0
 80197c8:	6039      	str	r1, [r7, #0]
 80197ca:	4611      	mov	r1, r2
 80197cc:	461a      	mov	r2, r3
 80197ce:	4603      	mov	r3, r0
 80197d0:	71fb      	strb	r3, [r7, #7]
 80197d2:	460b      	mov	r3, r1
 80197d4:	71bb      	strb	r3, [r7, #6]
 80197d6:	4613      	mov	r3, r2
 80197d8:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80197da:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80197de:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80197e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80197e6:	4618      	mov	r0, r3
 80197e8:	f000 f85d 	bl	80198a6 <RegionCommonValueInRange>
 80197ec:	4603      	mov	r3, r0
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d101      	bne.n	80197f6 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80197f2:	2300      	movs	r3, #0
 80197f4:	e053      	b.n	801989e <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80197f6:	2300      	movs	r3, #0
 80197f8:	73fb      	strb	r3, [r7, #15]
 80197fa:	2300      	movs	r3, #0
 80197fc:	73bb      	strb	r3, [r7, #14]
 80197fe:	e049      	b.n	8019894 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8019800:	2300      	movs	r3, #0
 8019802:	737b      	strb	r3, [r7, #13]
 8019804:	e03d      	b.n	8019882 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8019806:	7bbb      	ldrb	r3, [r7, #14]
 8019808:	005b      	lsls	r3, r3, #1
 801980a:	683a      	ldr	r2, [r7, #0]
 801980c:	4413      	add	r3, r2
 801980e:	881b      	ldrh	r3, [r3, #0]
 8019810:	461a      	mov	r2, r3
 8019812:	7b7b      	ldrb	r3, [r7, #13]
 8019814:	fa42 f303 	asr.w	r3, r2, r3
 8019818:	f003 0301 	and.w	r3, r3, #1
 801981c:	2b00      	cmp	r3, #0
 801981e:	d02d      	beq.n	801987c <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8019820:	7bfa      	ldrb	r2, [r7, #15]
 8019822:	7b7b      	ldrb	r3, [r7, #13]
 8019824:	4413      	add	r3, r2
 8019826:	461a      	mov	r2, r3
 8019828:	4613      	mov	r3, r2
 801982a:	005b      	lsls	r3, r3, #1
 801982c:	4413      	add	r3, r2
 801982e:	009b      	lsls	r3, r3, #2
 8019830:	461a      	mov	r2, r3
 8019832:	69fb      	ldr	r3, [r7, #28]
 8019834:	4413      	add	r3, r2
 8019836:	7a1b      	ldrb	r3, [r3, #8]
 8019838:	f343 0303 	sbfx	r3, r3, #0, #4
 801983c:	b25b      	sxtb	r3, r3
 801983e:	f003 030f 	and.w	r3, r3, #15
 8019842:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8019844:	7bfa      	ldrb	r2, [r7, #15]
 8019846:	7b7b      	ldrb	r3, [r7, #13]
 8019848:	4413      	add	r3, r2
 801984a:	461a      	mov	r2, r3
 801984c:	4613      	mov	r3, r2
 801984e:	005b      	lsls	r3, r3, #1
 8019850:	4413      	add	r3, r2
 8019852:	009b      	lsls	r3, r3, #2
 8019854:	461a      	mov	r2, r3
 8019856:	69fb      	ldr	r3, [r7, #28]
 8019858:	4413      	add	r3, r2
 801985a:	7a1b      	ldrb	r3, [r3, #8]
 801985c:	f343 1303 	sbfx	r3, r3, #4, #4
 8019860:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8019862:	f003 030f 	and.w	r3, r3, #15
 8019866:	b25a      	sxtb	r2, r3
 8019868:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801986c:	4618      	mov	r0, r3
 801986e:	f000 f81a 	bl	80198a6 <RegionCommonValueInRange>
 8019872:	4603      	mov	r3, r0
 8019874:	2b01      	cmp	r3, #1
 8019876:	d101      	bne.n	801987c <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8019878:	2301      	movs	r3, #1
 801987a:	e010      	b.n	801989e <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 801987c:	7b7b      	ldrb	r3, [r7, #13]
 801987e:	3301      	adds	r3, #1
 8019880:	737b      	strb	r3, [r7, #13]
 8019882:	7b7b      	ldrb	r3, [r7, #13]
 8019884:	2b0f      	cmp	r3, #15
 8019886:	d9be      	bls.n	8019806 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8019888:	7bfb      	ldrb	r3, [r7, #15]
 801988a:	3310      	adds	r3, #16
 801988c:	73fb      	strb	r3, [r7, #15]
 801988e:	7bbb      	ldrb	r3, [r7, #14]
 8019890:	3301      	adds	r3, #1
 8019892:	73bb      	strb	r3, [r7, #14]
 8019894:	7bfa      	ldrb	r2, [r7, #15]
 8019896:	79fb      	ldrb	r3, [r7, #7]
 8019898:	429a      	cmp	r2, r3
 801989a:	d3b1      	bcc.n	8019800 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 801989c:	2300      	movs	r3, #0
}
 801989e:	4618      	mov	r0, r3
 80198a0:	3710      	adds	r7, #16
 80198a2:	46bd      	mov	sp, r7
 80198a4:	bd80      	pop	{r7, pc}

080198a6 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 80198a6:	b480      	push	{r7}
 80198a8:	b083      	sub	sp, #12
 80198aa:	af00      	add	r7, sp, #0
 80198ac:	4603      	mov	r3, r0
 80198ae:	71fb      	strb	r3, [r7, #7]
 80198b0:	460b      	mov	r3, r1
 80198b2:	71bb      	strb	r3, [r7, #6]
 80198b4:	4613      	mov	r3, r2
 80198b6:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 80198b8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80198bc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80198c0:	429a      	cmp	r2, r3
 80198c2:	db07      	blt.n	80198d4 <RegionCommonValueInRange+0x2e>
 80198c4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80198c8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80198cc:	429a      	cmp	r2, r3
 80198ce:	dc01      	bgt.n	80198d4 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 80198d0:	2301      	movs	r3, #1
 80198d2:	e000      	b.n	80198d6 <RegionCommonValueInRange+0x30>
    }
    return 0;
 80198d4:	2300      	movs	r3, #0
}
 80198d6:	4618      	mov	r0, r3
 80198d8:	370c      	adds	r7, #12
 80198da:	46bd      	mov	sp, r7
 80198dc:	bc80      	pop	{r7}
 80198de:	4770      	bx	lr

080198e0 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80198e0:	b480      	push	{r7}
 80198e2:	b085      	sub	sp, #20
 80198e4:	af00      	add	r7, sp, #0
 80198e6:	6078      	str	r0, [r7, #4]
 80198e8:	460b      	mov	r3, r1
 80198ea:	70fb      	strb	r3, [r7, #3]
 80198ec:	4613      	mov	r3, r2
 80198ee:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 80198f0:	78fb      	ldrb	r3, [r7, #3]
 80198f2:	091b      	lsrs	r3, r3, #4
 80198f4:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80198f6:	78bb      	ldrb	r3, [r7, #2]
 80198f8:	091b      	lsrs	r3, r3, #4
 80198fa:	b2db      	uxtb	r3, r3
 80198fc:	7bfa      	ldrb	r2, [r7, #15]
 80198fe:	429a      	cmp	r2, r3
 8019900:	d803      	bhi.n	801990a <RegionCommonChanDisable+0x2a>
 8019902:	78fa      	ldrb	r2, [r7, #3]
 8019904:	78bb      	ldrb	r3, [r7, #2]
 8019906:	429a      	cmp	r2, r3
 8019908:	d301      	bcc.n	801990e <RegionCommonChanDisable+0x2e>
    {
        return false;
 801990a:	2300      	movs	r3, #0
 801990c:	e017      	b.n	801993e <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 801990e:	7bfb      	ldrb	r3, [r7, #15]
 8019910:	005b      	lsls	r3, r3, #1
 8019912:	687a      	ldr	r2, [r7, #4]
 8019914:	4413      	add	r3, r2
 8019916:	881b      	ldrh	r3, [r3, #0]
 8019918:	b21a      	sxth	r2, r3
 801991a:	78fb      	ldrb	r3, [r7, #3]
 801991c:	f003 030f 	and.w	r3, r3, #15
 8019920:	2101      	movs	r1, #1
 8019922:	fa01 f303 	lsl.w	r3, r1, r3
 8019926:	b21b      	sxth	r3, r3
 8019928:	43db      	mvns	r3, r3
 801992a:	b21b      	sxth	r3, r3
 801992c:	4013      	ands	r3, r2
 801992e:	b219      	sxth	r1, r3
 8019930:	7bfb      	ldrb	r3, [r7, #15]
 8019932:	005b      	lsls	r3, r3, #1
 8019934:	687a      	ldr	r2, [r7, #4]
 8019936:	4413      	add	r3, r2
 8019938:	b28a      	uxth	r2, r1
 801993a:	801a      	strh	r2, [r3, #0]

    return true;
 801993c:	2301      	movs	r3, #1
}
 801993e:	4618      	mov	r0, r3
 8019940:	3714      	adds	r7, #20
 8019942:	46bd      	mov	sp, r7
 8019944:	bc80      	pop	{r7}
 8019946:	4770      	bx	lr

08019948 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8019948:	b580      	push	{r7, lr}
 801994a:	b084      	sub	sp, #16
 801994c:	af00      	add	r7, sp, #0
 801994e:	6078      	str	r0, [r7, #4]
 8019950:	460b      	mov	r3, r1
 8019952:	70fb      	strb	r3, [r7, #3]
 8019954:	4613      	mov	r3, r2
 8019956:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8019958:	2300      	movs	r3, #0
 801995a:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	2b00      	cmp	r3, #0
 8019960:	d101      	bne.n	8019966 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8019962:	2300      	movs	r3, #0
 8019964:	e018      	b.n	8019998 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8019966:	78fb      	ldrb	r3, [r7, #3]
 8019968:	73bb      	strb	r3, [r7, #14]
 801996a:	e010      	b.n	801998e <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 801996c:	7bbb      	ldrb	r3, [r7, #14]
 801996e:	005b      	lsls	r3, r3, #1
 8019970:	687a      	ldr	r2, [r7, #4]
 8019972:	4413      	add	r3, r2
 8019974:	881b      	ldrh	r3, [r3, #0]
 8019976:	2110      	movs	r1, #16
 8019978:	4618      	mov	r0, r3
 801997a:	f7ff fef9 	bl	8019770 <CountChannels>
 801997e:	4603      	mov	r3, r0
 8019980:	461a      	mov	r2, r3
 8019982:	7bfb      	ldrb	r3, [r7, #15]
 8019984:	4413      	add	r3, r2
 8019986:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8019988:	7bbb      	ldrb	r3, [r7, #14]
 801998a:	3301      	adds	r3, #1
 801998c:	73bb      	strb	r3, [r7, #14]
 801998e:	7bba      	ldrb	r2, [r7, #14]
 8019990:	78bb      	ldrb	r3, [r7, #2]
 8019992:	429a      	cmp	r2, r3
 8019994:	d3ea      	bcc.n	801996c <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8019996:	7bfb      	ldrb	r3, [r7, #15]
}
 8019998:	4618      	mov	r0, r3
 801999a:	3710      	adds	r7, #16
 801999c:	46bd      	mov	sp, r7
 801999e:	bd80      	pop	{r7, pc}

080199a0 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 80199a0:	b480      	push	{r7}
 80199a2:	b087      	sub	sp, #28
 80199a4:	af00      	add	r7, sp, #0
 80199a6:	60f8      	str	r0, [r7, #12]
 80199a8:	60b9      	str	r1, [r7, #8]
 80199aa:	4613      	mov	r3, r2
 80199ac:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80199ae:	68fb      	ldr	r3, [r7, #12]
 80199b0:	2b00      	cmp	r3, #0
 80199b2:	d016      	beq.n	80199e2 <RegionCommonChanMaskCopy+0x42>
 80199b4:	68bb      	ldr	r3, [r7, #8]
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	d013      	beq.n	80199e2 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 80199ba:	2300      	movs	r3, #0
 80199bc:	75fb      	strb	r3, [r7, #23]
 80199be:	e00c      	b.n	80199da <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80199c0:	7dfb      	ldrb	r3, [r7, #23]
 80199c2:	005b      	lsls	r3, r3, #1
 80199c4:	68ba      	ldr	r2, [r7, #8]
 80199c6:	441a      	add	r2, r3
 80199c8:	7dfb      	ldrb	r3, [r7, #23]
 80199ca:	005b      	lsls	r3, r3, #1
 80199cc:	68f9      	ldr	r1, [r7, #12]
 80199ce:	440b      	add	r3, r1
 80199d0:	8812      	ldrh	r2, [r2, #0]
 80199d2:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80199d4:	7dfb      	ldrb	r3, [r7, #23]
 80199d6:	3301      	adds	r3, #1
 80199d8:	75fb      	strb	r3, [r7, #23]
 80199da:	7dfa      	ldrb	r2, [r7, #23]
 80199dc:	79fb      	ldrb	r3, [r7, #7]
 80199de:	429a      	cmp	r2, r3
 80199e0:	d3ee      	bcc.n	80199c0 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 80199e2:	bf00      	nop
 80199e4:	371c      	adds	r7, #28
 80199e6:	46bd      	mov	sp, r7
 80199e8:	bc80      	pop	{r7}
 80199ea:	4770      	bx	lr

080199ec <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80199ec:	b082      	sub	sp, #8
 80199ee:	b580      	push	{r7, lr}
 80199f0:	b086      	sub	sp, #24
 80199f2:	af00      	add	r7, sp, #0
 80199f4:	60f8      	str	r0, [r7, #12]
 80199f6:	60b9      	str	r1, [r7, #8]
 80199f8:	627b      	str	r3, [r7, #36]	; 0x24
 80199fa:	4613      	mov	r3, r2
 80199fc:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80199fe:	79f9      	ldrb	r1, [r7, #7]
 8019a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019a04:	cb0c      	ldmia	r3, {r2, r3}
 8019a06:	68f8      	ldr	r0, [r7, #12]
 8019a08:	f7ff fd8b 	bl	8019522 <GetDutyCycle>
 8019a0c:	4603      	mov	r3, r0
 8019a0e:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8019a10:	68fb      	ldr	r3, [r7, #12]
 8019a12:	68da      	ldr	r2, [r3, #12]
 8019a14:	8afb      	ldrh	r3, [r7, #22]
 8019a16:	68b9      	ldr	r1, [r7, #8]
 8019a18:	fb01 f303 	mul.w	r3, r1, r3
 8019a1c:	429a      	cmp	r2, r3
 8019a1e:	d909      	bls.n	8019a34 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8019a20:	68fb      	ldr	r3, [r7, #12]
 8019a22:	68da      	ldr	r2, [r3, #12]
 8019a24:	8afb      	ldrh	r3, [r7, #22]
 8019a26:	68b9      	ldr	r1, [r7, #8]
 8019a28:	fb01 f303 	mul.w	r3, r1, r3
 8019a2c:	1ad2      	subs	r2, r2, r3
 8019a2e:	68fb      	ldr	r3, [r7, #12]
 8019a30:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8019a32:	e002      	b.n	8019a3a <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8019a34:	68fb      	ldr	r3, [r7, #12]
 8019a36:	2200      	movs	r2, #0
 8019a38:	60da      	str	r2, [r3, #12]
}
 8019a3a:	bf00      	nop
 8019a3c:	3718      	adds	r7, #24
 8019a3e:	46bd      	mov	sp, r7
 8019a40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8019a44:	b002      	add	sp, #8
 8019a46:	4770      	bx	lr

08019a48 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8019a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a4a:	b08f      	sub	sp, #60	; 0x3c
 8019a4c:	af04      	add	r7, sp, #16
 8019a4e:	6039      	str	r1, [r7, #0]
 8019a50:	4611      	mov	r1, r2
 8019a52:	461a      	mov	r2, r3
 8019a54:	4603      	mov	r3, r0
 8019a56:	71fb      	strb	r3, [r7, #7]
 8019a58:	460b      	mov	r3, r1
 8019a5a:	71bb      	strb	r3, [r7, #6]
 8019a5c:	4613      	mov	r3, r2
 8019a5e:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8019a60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019a64:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8019a66:	f006 f9ab 	bl	801fdc0 <UTIL_TIMER_GetCurrentTime>
 8019a6a:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8019a6c:	2300      	movs	r3, #0
 8019a6e:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8019a70:	2301      	movs	r3, #1
 8019a72:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8019a74:	2300      	movs	r3, #0
 8019a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8019a7a:	2300      	movs	r3, #0
 8019a7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8019a80:	e0ba      	b.n	8019bf8 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8019a82:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019a86:	4613      	mov	r3, r2
 8019a88:	005b      	lsls	r3, r3, #1
 8019a8a:	4413      	add	r3, r2
 8019a8c:	00db      	lsls	r3, r3, #3
 8019a8e:	461a      	mov	r2, r3
 8019a90:	683b      	ldr	r3, [r7, #0]
 8019a92:	189c      	adds	r4, r3, r2
 8019a94:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8019a98:	797a      	ldrb	r2, [r7, #5]
 8019a9a:	79fd      	ldrb	r5, [r7, #7]
 8019a9c:	69fb      	ldr	r3, [r7, #28]
 8019a9e:	9302      	str	r3, [sp, #8]
 8019aa0:	46ec      	mov	ip, sp
 8019aa2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019aa6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019aaa:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019aae:	4633      	mov	r3, r6
 8019ab0:	4629      	mov	r1, r5
 8019ab2:	4620      	mov	r0, r4
 8019ab4:	f7ff fe22 	bl	80196fc <UpdateTimeCredits>
 8019ab8:	4603      	mov	r3, r0
 8019aba:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8019abc:	8afa      	ldrh	r2, [r7, #22]
 8019abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019ac0:	fb02 f303 	mul.w	r3, r2, r3
 8019ac4:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8019ac6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019aca:	4613      	mov	r3, r2
 8019acc:	005b      	lsls	r3, r3, #1
 8019ace:	4413      	add	r3, r2
 8019ad0:	00db      	lsls	r3, r3, #3
 8019ad2:	461a      	mov	r2, r3
 8019ad4:	683b      	ldr	r3, [r7, #0]
 8019ad6:	4413      	add	r3, r2
 8019ad8:	68db      	ldr	r3, [r3, #12]
 8019ada:	69ba      	ldr	r2, [r7, #24]
 8019adc:	429a      	cmp	r2, r3
 8019ade:	d908      	bls.n	8019af2 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8019ae0:	797b      	ldrb	r3, [r7, #5]
 8019ae2:	f083 0301 	eor.w	r3, r3, #1
 8019ae6:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	d013      	beq.n	8019b14 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8019aec:	79fb      	ldrb	r3, [r7, #7]
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	d010      	beq.n	8019b14 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8019af2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019af6:	4613      	mov	r3, r2
 8019af8:	005b      	lsls	r3, r3, #1
 8019afa:	4413      	add	r3, r2
 8019afc:	00db      	lsls	r3, r3, #3
 8019afe:	461a      	mov	r2, r3
 8019b00:	683b      	ldr	r3, [r7, #0]
 8019b02:	4413      	add	r3, r2
 8019b04:	2201      	movs	r2, #1
 8019b06:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8019b08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019b0c:	3301      	adds	r3, #1
 8019b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8019b12:	e06c      	b.n	8019bee <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8019b14:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019b18:	4613      	mov	r3, r2
 8019b1a:	005b      	lsls	r3, r3, #1
 8019b1c:	4413      	add	r3, r2
 8019b1e:	00db      	lsls	r3, r3, #3
 8019b20:	461a      	mov	r2, r3
 8019b22:	683b      	ldr	r3, [r7, #0]
 8019b24:	4413      	add	r3, r2
 8019b26:	2200      	movs	r2, #0
 8019b28:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8019b2a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019b2e:	4613      	mov	r3, r2
 8019b30:	005b      	lsls	r3, r3, #1
 8019b32:	4413      	add	r3, r2
 8019b34:	00db      	lsls	r3, r3, #3
 8019b36:	461a      	mov	r2, r3
 8019b38:	683b      	ldr	r3, [r7, #0]
 8019b3a:	4413      	add	r3, r2
 8019b3c:	691b      	ldr	r3, [r3, #16]
 8019b3e:	69ba      	ldr	r2, [r7, #24]
 8019b40:	429a      	cmp	r2, r3
 8019b42:	d815      	bhi.n	8019b70 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8019b44:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019b48:	4613      	mov	r3, r2
 8019b4a:	005b      	lsls	r3, r3, #1
 8019b4c:	4413      	add	r3, r2
 8019b4e:	00db      	lsls	r3, r3, #3
 8019b50:	461a      	mov	r2, r3
 8019b52:	683b      	ldr	r3, [r7, #0]
 8019b54:	4413      	add	r3, r2
 8019b56:	68db      	ldr	r3, [r3, #12]
 8019b58:	69ba      	ldr	r2, [r7, #24]
 8019b5a:	1ad3      	subs	r3, r2, r3
 8019b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019b5e:	4293      	cmp	r3, r2
 8019b60:	bf28      	it	cs
 8019b62:	4613      	movcs	r3, r2
 8019b64:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8019b66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019b6a:	3301      	adds	r3, #1
 8019b6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8019b70:	79fb      	ldrb	r3, [r7, #7]
 8019b72:	f083 0301 	eor.w	r3, r3, #1
 8019b76:	b2db      	uxtb	r3, r3
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	d038      	beq.n	8019bee <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8019b7c:	2300      	movs	r3, #0
 8019b7e:	60fb      	str	r3, [r7, #12]
 8019b80:	2300      	movs	r3, #0
 8019b82:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8019b84:	8afb      	ldrh	r3, [r7, #22]
 8019b86:	2b64      	cmp	r3, #100	; 0x64
 8019b88:	d103      	bne.n	8019b92 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8019b8a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8019b8e:	60fb      	str	r3, [r7, #12]
 8019b90:	e009      	b.n	8019ba6 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8019b92:	8afb      	ldrh	r3, [r7, #22]
 8019b94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8019b98:	d103      	bne.n	8019ba2 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8019b9a:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8019b9e:	60fb      	str	r3, [r7, #12]
 8019ba0:	e001      	b.n	8019ba6 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8019ba2:	4b1e      	ldr	r3, [pc, #120]	; (8019c1c <RegionCommonUpdateBandTimeOff+0x1d4>)
 8019ba4:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8019ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019ba8:	4a1c      	ldr	r2, [pc, #112]	; (8019c1c <RegionCommonUpdateBandTimeOff+0x1d4>)
 8019baa:	4293      	cmp	r3, r2
 8019bac:	d90e      	bls.n	8019bcc <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8019bae:	68fa      	ldr	r2, [r7, #12]
 8019bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019bb2:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8019bb6:	3b30      	subs	r3, #48	; 0x30
 8019bb8:	4919      	ldr	r1, [pc, #100]	; (8019c20 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8019bba:	fba1 1303 	umull	r1, r3, r1, r3
 8019bbe:	0c1b      	lsrs	r3, r3, #16
 8019bc0:	3301      	adds	r3, #1
 8019bc2:	4918      	ldr	r1, [pc, #96]	; (8019c24 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8019bc4:	fb01 f303 	mul.w	r3, r1, r3
 8019bc8:	4413      	add	r3, r2
 8019bca:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8019bcc:	f107 000c 	add.w	r0, r7, #12
 8019bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019bd2:	9300      	str	r3, [sp, #0]
 8019bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019bd6:	f107 020c 	add.w	r2, r7, #12
 8019bda:	ca06      	ldmia	r2, {r1, r2}
 8019bdc:	f005 f9e7 	bl	801efae <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8019be0:	f107 030c 	add.w	r3, r7, #12
 8019be4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019be8:	f005 faa0 	bl	801f12c <SysTimeToMs>
 8019bec:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8019bee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019bf2:	3301      	adds	r3, #1
 8019bf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8019bf8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019bfc:	79bb      	ldrb	r3, [r7, #6]
 8019bfe:	429a      	cmp	r2, r3
 8019c00:	f4ff af3f 	bcc.w	8019a82 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8019c04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	d102      	bne.n	8019c12 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8019c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019c10:	e000      	b.n	8019c14 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8019c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019c14:	4618      	mov	r0, r3
 8019c16:	372c      	adds	r7, #44	; 0x2c
 8019c18:	46bd      	mov	sp, r7
 8019c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c1c:	0001ec30 	.word	0x0001ec30
 8019c20:	c22e4507 	.word	0xc22e4507
 8019c24:	00015180 	.word	0x00015180

08019c28 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8019c28:	b480      	push	{r7}
 8019c2a:	b085      	sub	sp, #20
 8019c2c:	af00      	add	r7, sp, #0
 8019c2e:	6078      	str	r0, [r7, #4]
 8019c30:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8019c32:	2300      	movs	r3, #0
 8019c34:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	781b      	ldrb	r3, [r3, #0]
 8019c3a:	2b03      	cmp	r3, #3
 8019c3c:	d13f      	bne.n	8019cbe <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	3301      	adds	r3, #1
 8019c42:	781b      	ldrb	r3, [r3, #0]
 8019c44:	b25a      	sxtb	r2, r3
 8019c46:	683b      	ldr	r3, [r7, #0]
 8019c48:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8019c4a:	683b      	ldr	r3, [r7, #0]
 8019c4c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019c50:	f003 030f 	and.w	r3, r3, #15
 8019c54:	b25a      	sxtb	r2, r3
 8019c56:	683b      	ldr	r3, [r7, #0]
 8019c58:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8019c5a:	683b      	ldr	r3, [r7, #0]
 8019c5c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019c60:	b2db      	uxtb	r3, r3
 8019c62:	091b      	lsrs	r3, r3, #4
 8019c64:	b2db      	uxtb	r3, r3
 8019c66:	b25a      	sxtb	r2, r3
 8019c68:	683b      	ldr	r3, [r7, #0]
 8019c6a:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	3302      	adds	r3, #2
 8019c70:	781b      	ldrb	r3, [r3, #0]
 8019c72:	b29a      	uxth	r2, r3
 8019c74:	683b      	ldr	r3, [r7, #0]
 8019c76:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8019c78:	683b      	ldr	r3, [r7, #0]
 8019c7a:	889b      	ldrh	r3, [r3, #4]
 8019c7c:	b21a      	sxth	r2, r3
 8019c7e:	687b      	ldr	r3, [r7, #4]
 8019c80:	3303      	adds	r3, #3
 8019c82:	781b      	ldrb	r3, [r3, #0]
 8019c84:	021b      	lsls	r3, r3, #8
 8019c86:	b21b      	sxth	r3, r3
 8019c88:	4313      	orrs	r3, r2
 8019c8a:	b21b      	sxth	r3, r3
 8019c8c:	b29a      	uxth	r2, r3
 8019c8e:	683b      	ldr	r3, [r7, #0]
 8019c90:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	791a      	ldrb	r2, [r3, #4]
 8019c96:	683b      	ldr	r3, [r7, #0]
 8019c98:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8019c9a:	683b      	ldr	r3, [r7, #0]
 8019c9c:	781b      	ldrb	r3, [r3, #0]
 8019c9e:	091b      	lsrs	r3, r3, #4
 8019ca0:	b2db      	uxtb	r3, r3
 8019ca2:	f003 0307 	and.w	r3, r3, #7
 8019ca6:	b2da      	uxtb	r2, r3
 8019ca8:	683b      	ldr	r3, [r7, #0]
 8019caa:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8019cac:	683b      	ldr	r3, [r7, #0]
 8019cae:	781b      	ldrb	r3, [r3, #0]
 8019cb0:	f003 030f 	and.w	r3, r3, #15
 8019cb4:	b2da      	uxtb	r2, r3
 8019cb6:	683b      	ldr	r3, [r7, #0]
 8019cb8:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8019cba:	2305      	movs	r3, #5
 8019cbc:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8019cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8019cc0:	4618      	mov	r0, r3
 8019cc2:	3714      	adds	r7, #20
 8019cc4:	46bd      	mov	sp, r7
 8019cc6:	bc80      	pop	{r7}
 8019cc8:	4770      	bx	lr

08019cca <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8019cca:	b5b0      	push	{r4, r5, r7, lr}
 8019ccc:	b088      	sub	sp, #32
 8019cce:	af02      	add	r7, sp, #8
 8019cd0:	60f8      	str	r0, [r7, #12]
 8019cd2:	60b9      	str	r1, [r7, #8]
 8019cd4:	607a      	str	r2, [r7, #4]
 8019cd6:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8019cd8:	68fb      	ldr	r3, [r7, #12]
 8019cda:	791b      	ldrb	r3, [r3, #4]
 8019cdc:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8019cde:	68fb      	ldr	r3, [r7, #12]
 8019ce0:	799b      	ldrb	r3, [r3, #6]
 8019ce2:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8019ce4:	68fb      	ldr	r3, [r7, #12]
 8019ce6:	79db      	ldrb	r3, [r3, #7]
 8019ce8:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8019cea:	68fb      	ldr	r3, [r7, #12]
 8019cec:	7a1b      	ldrb	r3, [r3, #8]
 8019cee:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8019cf0:	68fb      	ldr	r3, [r7, #12]
 8019cf2:	795b      	ldrb	r3, [r3, #5]
 8019cf4:	f083 0301 	eor.w	r3, r3, #1
 8019cf8:	b2db      	uxtb	r3, r3
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	d008      	beq.n	8019d10 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8019cfe:	68fb      	ldr	r3, [r7, #12]
 8019d00:	7adb      	ldrb	r3, [r3, #11]
 8019d02:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8019d04:	68fb      	ldr	r3, [r7, #12]
 8019d06:	7a5b      	ldrb	r3, [r3, #9]
 8019d08:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8019d0a:	68fb      	ldr	r3, [r7, #12]
 8019d0c:	7a9b      	ldrb	r3, [r3, #10]
 8019d0e:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8019d10:	7dfb      	ldrb	r3, [r7, #23]
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	d04a      	beq.n	8019dac <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8019d16:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8019d1a:	2b0f      	cmp	r3, #15
 8019d1c:	d103      	bne.n	8019d26 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8019d1e:	68fb      	ldr	r3, [r7, #12]
 8019d20:	7a5b      	ldrb	r3, [r3, #9]
 8019d22:	75bb      	strb	r3, [r7, #22]
 8019d24:	e01d      	b.n	8019d62 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8019d26:	68fb      	ldr	r3, [r7, #12]
 8019d28:	7b18      	ldrb	r0, [r3, #12]
 8019d2a:	68fb      	ldr	r3, [r7, #12]
 8019d2c:	6919      	ldr	r1, [r3, #16]
 8019d2e:	68fb      	ldr	r3, [r7, #12]
 8019d30:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8019d3a:	68fa      	ldr	r2, [r7, #12]
 8019d3c:	6992      	ldr	r2, [r2, #24]
 8019d3e:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8019d42:	9201      	str	r2, [sp, #4]
 8019d44:	9300      	str	r3, [sp, #0]
 8019d46:	462b      	mov	r3, r5
 8019d48:	4622      	mov	r2, r4
 8019d4a:	f7ff fd3a 	bl	80197c2 <RegionCommonChanVerifyDr>
 8019d4e:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8019d50:	f083 0301 	eor.w	r3, r3, #1
 8019d54:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d003      	beq.n	8019d62 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8019d5a:	7dfb      	ldrb	r3, [r7, #23]
 8019d5c:	f023 0302 	bic.w	r3, r3, #2
 8019d60:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8019d62:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8019d66:	2b0f      	cmp	r3, #15
 8019d68:	d103      	bne.n	8019d72 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8019d6a:	68fb      	ldr	r3, [r7, #12]
 8019d6c:	7a9b      	ldrb	r3, [r3, #10]
 8019d6e:	757b      	strb	r3, [r7, #21]
 8019d70:	e01c      	b.n	8019dac <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8019d72:	68fb      	ldr	r3, [r7, #12]
 8019d74:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8019d78:	68fb      	ldr	r3, [r7, #12]
 8019d7a:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8019d7e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8019d82:	4618      	mov	r0, r3
 8019d84:	f7ff fd8f 	bl	80198a6 <RegionCommonValueInRange>
 8019d88:	4603      	mov	r3, r0
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	d10e      	bne.n	8019dac <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8019d94:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8019d98:	429a      	cmp	r2, r3
 8019d9a:	da03      	bge.n	8019da4 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8019d9c:	68fb      	ldr	r3, [r7, #12]
 8019d9e:	7f5b      	ldrb	r3, [r3, #29]
 8019da0:	757b      	strb	r3, [r7, #21]
 8019da2:	e003      	b.n	8019dac <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8019da4:	7dfb      	ldrb	r3, [r7, #23]
 8019da6:	f023 0304 	bic.w	r3, r3, #4
 8019daa:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8019dac:	7dfb      	ldrb	r3, [r7, #23]
 8019dae:	2b07      	cmp	r3, #7
 8019db0:	d105      	bne.n	8019dbe <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8019db2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	d101      	bne.n	8019dbe <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8019dba:	2301      	movs	r3, #1
 8019dbc:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8019dbe:	68bb      	ldr	r3, [r7, #8]
 8019dc0:	7dba      	ldrb	r2, [r7, #22]
 8019dc2:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	7d7a      	ldrb	r2, [r7, #21]
 8019dc8:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8019dca:	7d3a      	ldrb	r2, [r7, #20]
 8019dcc:	683b      	ldr	r3, [r7, #0]
 8019dce:	701a      	strb	r2, [r3, #0]

    return status;
 8019dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8019dd2:	4618      	mov	r0, r3
 8019dd4:	3718      	adds	r7, #24
 8019dd6:	46bd      	mov	sp, r7
 8019dd8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08019ddc <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8019ddc:	b480      	push	{r7}
 8019dde:	b083      	sub	sp, #12
 8019de0:	af00      	add	r7, sp, #0
 8019de2:	4603      	mov	r3, r0
 8019de4:	6039      	str	r1, [r7, #0]
 8019de6:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8019de8:	79fb      	ldrb	r3, [r7, #7]
 8019dea:	4a06      	ldr	r2, [pc, #24]	; (8019e04 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8019dec:	fa02 f303 	lsl.w	r3, r2, r3
 8019df0:	461a      	mov	r2, r3
 8019df2:	683b      	ldr	r3, [r7, #0]
 8019df4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8019df8:	4618      	mov	r0, r3
 8019dfa:	370c      	adds	r7, #12
 8019dfc:	46bd      	mov	sp, r7
 8019dfe:	bc80      	pop	{r7}
 8019e00:	4770      	bx	lr
 8019e02:	bf00      	nop
 8019e04:	000f4240 	.word	0x000f4240

08019e08 <RegionCommonComputeRxWindowParameters>:
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8019e08:	b480      	push	{r7}
 8019e0a:	b085      	sub	sp, #20
 8019e0c:	af00      	add	r7, sp, #0
 8019e0e:	60f8      	str	r0, [r7, #12]
 8019e10:	607a      	str	r2, [r7, #4]
 8019e12:	603b      	str	r3, [r7, #0]
 8019e14:	460b      	mov	r3, r1
 8019e16:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8019e18:	7afa      	ldrb	r2, [r7, #11]
 8019e1a:	7afb      	ldrb	r3, [r7, #11]
 8019e1c:	3b04      	subs	r3, #4
 8019e1e:	4619      	mov	r1, r3
 8019e20:	68fb      	ldr	r3, [r7, #12]
 8019e22:	fb03 f101 	mul.w	r1, r3, r1
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8019e2c:	fb00 f303 	mul.w	r3, r0, r3
 8019e30:	440b      	add	r3, r1
 8019e32:	005b      	lsls	r3, r3, #1
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	d013      	beq.n	8019e60 <RegionCommonComputeRxWindowParameters+0x58>
 8019e38:	7afb      	ldrb	r3, [r7, #11]
 8019e3a:	3b04      	subs	r3, #4
 8019e3c:	4619      	mov	r1, r3
 8019e3e:	68fb      	ldr	r3, [r7, #12]
 8019e40:	fb03 f101 	mul.w	r1, r3, r1
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8019e4a:	fb00 f303 	mul.w	r3, r0, r3
 8019e4e:	440b      	add	r3, r1
 8019e50:	0059      	lsls	r1, r3, #1
 8019e52:	68fb      	ldr	r3, [r7, #12]
 8019e54:	440b      	add	r3, r1
 8019e56:	1e59      	subs	r1, r3, #1
 8019e58:	68fb      	ldr	r3, [r7, #12]
 8019e5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8019e5e:	e00f      	b.n	8019e80 <RegionCommonComputeRxWindowParameters+0x78>
 8019e60:	7afb      	ldrb	r3, [r7, #11]
 8019e62:	3b04      	subs	r3, #4
 8019e64:	4619      	mov	r1, r3
 8019e66:	68fb      	ldr	r3, [r7, #12]
 8019e68:	fb03 f101 	mul.w	r1, r3, r1
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8019e72:	fb00 f303 	mul.w	r3, r0, r3
 8019e76:	440b      	add	r3, r1
 8019e78:	0059      	lsls	r1, r3, #1
 8019e7a:	68fb      	ldr	r3, [r7, #12]
 8019e7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8019e80:	429a      	cmp	r2, r3
 8019e82:	bf38      	it	cc
 8019e84:	461a      	movcc	r2, r3
 8019e86:	69bb      	ldr	r3, [r7, #24]
 8019e88:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8019e8a:	68fb      	ldr	r3, [r7, #12]
 8019e8c:	009b      	lsls	r3, r3, #2
 8019e8e:	4619      	mov	r1, r3
 8019e90:	69bb      	ldr	r3, [r7, #24]
 8019e92:	681b      	ldr	r3, [r3, #0]
 8019e94:	68fa      	ldr	r2, [r7, #12]
 8019e96:	fb02 f303 	mul.w	r3, r2, r3
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	d007      	beq.n	8019eae <RegionCommonComputeRxWindowParameters+0xa6>
 8019e9e:	69bb      	ldr	r3, [r7, #24]
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	68fa      	ldr	r2, [r7, #12]
 8019ea4:	fb02 f303 	mul.w	r3, r2, r3
 8019ea8:	3301      	adds	r3, #1
 8019eaa:	085b      	lsrs	r3, r3, #1
 8019eac:	e005      	b.n	8019eba <RegionCommonComputeRxWindowParameters+0xb2>
 8019eae:	69bb      	ldr	r3, [r7, #24]
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	68fa      	ldr	r2, [r7, #12]
 8019eb4:	fb02 f303 	mul.w	r3, r2, r3
 8019eb8:	085b      	lsrs	r3, r3, #1
 8019eba:	1acb      	subs	r3, r1, r3
 8019ebc:	683a      	ldr	r2, [r7, #0]
 8019ebe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8019ec2:	fb01 f202 	mul.w	r2, r1, r2
 8019ec6:	1a9b      	subs	r3, r3, r2
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	dd27      	ble.n	8019f1c <RegionCommonComputeRxWindowParameters+0x114>
 8019ecc:	68fb      	ldr	r3, [r7, #12]
 8019ece:	009b      	lsls	r3, r3, #2
 8019ed0:	4619      	mov	r1, r3
 8019ed2:	69bb      	ldr	r3, [r7, #24]
 8019ed4:	681b      	ldr	r3, [r3, #0]
 8019ed6:	68fa      	ldr	r2, [r7, #12]
 8019ed8:	fb02 f303 	mul.w	r3, r2, r3
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	d007      	beq.n	8019ef0 <RegionCommonComputeRxWindowParameters+0xe8>
 8019ee0:	69bb      	ldr	r3, [r7, #24]
 8019ee2:	681b      	ldr	r3, [r3, #0]
 8019ee4:	68fa      	ldr	r2, [r7, #12]
 8019ee6:	fb02 f303 	mul.w	r3, r2, r3
 8019eea:	3301      	adds	r3, #1
 8019eec:	085b      	lsrs	r3, r3, #1
 8019eee:	e005      	b.n	8019efc <RegionCommonComputeRxWindowParameters+0xf4>
 8019ef0:	69bb      	ldr	r3, [r7, #24]
 8019ef2:	681b      	ldr	r3, [r3, #0]
 8019ef4:	68fa      	ldr	r2, [r7, #12]
 8019ef6:	fb02 f303 	mul.w	r3, r2, r3
 8019efa:	085b      	lsrs	r3, r3, #1
 8019efc:	1acb      	subs	r3, r1, r3
 8019efe:	683a      	ldr	r2, [r7, #0]
 8019f00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8019f04:	fb01 f202 	mul.w	r2, r1, r2
 8019f08:	1a9b      	subs	r3, r3, r2
 8019f0a:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8019f0e:	4a19      	ldr	r2, [pc, #100]	; (8019f74 <RegionCommonComputeRxWindowParameters+0x16c>)
 8019f10:	fb82 1203 	smull	r1, r2, r2, r3
 8019f14:	1192      	asrs	r2, r2, #6
 8019f16:	17db      	asrs	r3, r3, #31
 8019f18:	1ad3      	subs	r3, r2, r3
 8019f1a:	e024      	b.n	8019f66 <RegionCommonComputeRxWindowParameters+0x15e>
 8019f1c:	68fb      	ldr	r3, [r7, #12]
 8019f1e:	009b      	lsls	r3, r3, #2
 8019f20:	4619      	mov	r1, r3
 8019f22:	69bb      	ldr	r3, [r7, #24]
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	68fa      	ldr	r2, [r7, #12]
 8019f28:	fb02 f303 	mul.w	r3, r2, r3
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	d007      	beq.n	8019f40 <RegionCommonComputeRxWindowParameters+0x138>
 8019f30:	69bb      	ldr	r3, [r7, #24]
 8019f32:	681b      	ldr	r3, [r3, #0]
 8019f34:	68fa      	ldr	r2, [r7, #12]
 8019f36:	fb02 f303 	mul.w	r3, r2, r3
 8019f3a:	3301      	adds	r3, #1
 8019f3c:	085b      	lsrs	r3, r3, #1
 8019f3e:	e005      	b.n	8019f4c <RegionCommonComputeRxWindowParameters+0x144>
 8019f40:	69bb      	ldr	r3, [r7, #24]
 8019f42:	681b      	ldr	r3, [r3, #0]
 8019f44:	68fa      	ldr	r2, [r7, #12]
 8019f46:	fb02 f303 	mul.w	r3, r2, r3
 8019f4a:	085b      	lsrs	r3, r3, #1
 8019f4c:	1acb      	subs	r3, r1, r3
 8019f4e:	683a      	ldr	r2, [r7, #0]
 8019f50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8019f54:	fb01 f202 	mul.w	r2, r1, r2
 8019f58:	1a9b      	subs	r3, r3, r2
 8019f5a:	4a06      	ldr	r2, [pc, #24]	; (8019f74 <RegionCommonComputeRxWindowParameters+0x16c>)
 8019f5c:	fb82 1203 	smull	r1, r2, r2, r3
 8019f60:	1192      	asrs	r2, r2, #6
 8019f62:	17db      	asrs	r3, r3, #31
 8019f64:	1ad3      	subs	r3, r2, r3
 8019f66:	69fa      	ldr	r2, [r7, #28]
 8019f68:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8019f6a:	bf00      	nop
 8019f6c:	3714      	adds	r7, #20
 8019f6e:	46bd      	mov	sp, r7
 8019f70:	bc80      	pop	{r7}
 8019f72:	4770      	bx	lr
 8019f74:	10624dd3 	.word	0x10624dd3

08019f78 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8019f78:	b580      	push	{r7, lr}
 8019f7a:	b086      	sub	sp, #24
 8019f7c:	af00      	add	r7, sp, #0
 8019f7e:	4603      	mov	r3, r0
 8019f80:	60b9      	str	r1, [r7, #8]
 8019f82:	607a      	str	r2, [r7, #4]
 8019f84:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8019f86:	2300      	movs	r3, #0
 8019f88:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8019f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019f8e:	005b      	lsls	r3, r3, #1
 8019f90:	4618      	mov	r0, r3
 8019f92:	f7e6 fed1 	bl	8000d38 <__aeabi_ui2f>
 8019f96:	4603      	mov	r3, r0
 8019f98:	4619      	mov	r1, r3
 8019f9a:	68b8      	ldr	r0, [r7, #8]
 8019f9c:	f7e6 fe1a 	bl	8000bd4 <__aeabi_fsub>
 8019fa0:	4603      	mov	r3, r0
 8019fa2:	6879      	ldr	r1, [r7, #4]
 8019fa4:	4618      	mov	r0, r3
 8019fa6:	f7e6 fe15 	bl	8000bd4 <__aeabi_fsub>
 8019faa:	4603      	mov	r3, r0
 8019fac:	4618      	mov	r0, r3
 8019fae:	f7e6 faa3 	bl	80004f8 <__aeabi_f2d>
 8019fb2:	4602      	mov	r2, r0
 8019fb4:	460b      	mov	r3, r1
 8019fb6:	4610      	mov	r0, r2
 8019fb8:	4619      	mov	r1, r3
 8019fba:	f006 fa69 	bl	8020490 <floor>
 8019fbe:	4602      	mov	r2, r0
 8019fc0:	460b      	mov	r3, r1
 8019fc2:	4610      	mov	r0, r2
 8019fc4:	4619      	mov	r1, r3
 8019fc6:	f7e6 fd89 	bl	8000adc <__aeabi_d2iz>
 8019fca:	4603      	mov	r3, r0
 8019fcc:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8019fce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019fd2:	4618      	mov	r0, r3
 8019fd4:	3718      	adds	r7, #24
 8019fd6:	46bd      	mov	sp, r7
 8019fd8:	bd80      	pop	{r7, pc}

08019fda <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8019fda:	b590      	push	{r4, r7, lr}
 8019fdc:	b087      	sub	sp, #28
 8019fde:	af00      	add	r7, sp, #0
 8019fe0:	60f8      	str	r0, [r7, #12]
 8019fe2:	60b9      	str	r1, [r7, #8]
 8019fe4:	607a      	str	r2, [r7, #4]
 8019fe6:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8019fe8:	2300      	movs	r3, #0
 8019fea:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8019fec:	2300      	movs	r3, #0
 8019fee:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8019ff0:	2300      	movs	r3, #0
 8019ff2:	757b      	strb	r3, [r7, #21]
 8019ff4:	2300      	movs	r3, #0
 8019ff6:	753b      	strb	r3, [r7, #20]
 8019ff8:	e09c      	b.n	801a134 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8019ffa:	2300      	movs	r3, #0
 8019ffc:	74fb      	strb	r3, [r7, #19]
 8019ffe:	e08f      	b.n	801a120 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 801a000:	68fb      	ldr	r3, [r7, #12]
 801a002:	685a      	ldr	r2, [r3, #4]
 801a004:	7d3b      	ldrb	r3, [r7, #20]
 801a006:	005b      	lsls	r3, r3, #1
 801a008:	4413      	add	r3, r2
 801a00a:	881b      	ldrh	r3, [r3, #0]
 801a00c:	461a      	mov	r2, r3
 801a00e:	7cfb      	ldrb	r3, [r7, #19]
 801a010:	fa42 f303 	asr.w	r3, r2, r3
 801a014:	f003 0301 	and.w	r3, r3, #1
 801a018:	2b00      	cmp	r3, #0
 801a01a:	d07e      	beq.n	801a11a <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 801a01c:	68fb      	ldr	r3, [r7, #12]
 801a01e:	689a      	ldr	r2, [r3, #8]
 801a020:	7d79      	ldrb	r1, [r7, #21]
 801a022:	7cfb      	ldrb	r3, [r7, #19]
 801a024:	440b      	add	r3, r1
 801a026:	4619      	mov	r1, r3
 801a028:	460b      	mov	r3, r1
 801a02a:	005b      	lsls	r3, r3, #1
 801a02c:	440b      	add	r3, r1
 801a02e:	009b      	lsls	r3, r3, #2
 801a030:	4413      	add	r3, r2
 801a032:	681b      	ldr	r3, [r3, #0]
 801a034:	2b00      	cmp	r3, #0
 801a036:	d06b      	beq.n	801a110 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801a038:	68fb      	ldr	r3, [r7, #12]
 801a03a:	781b      	ldrb	r3, [r3, #0]
 801a03c:	f083 0301 	eor.w	r3, r3, #1
 801a040:	b2db      	uxtb	r3, r3
 801a042:	2b00      	cmp	r3, #0
 801a044:	d011      	beq.n	801a06a <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 801a046:	68fb      	ldr	r3, [r7, #12]
 801a048:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801a04a:	2b00      	cmp	r3, #0
 801a04c:	d00d      	beq.n	801a06a <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801a04e:	68fb      	ldr	r3, [r7, #12]
 801a050:	695a      	ldr	r2, [r3, #20]
 801a052:	7d3b      	ldrb	r3, [r7, #20]
 801a054:	005b      	lsls	r3, r3, #1
 801a056:	4413      	add	r3, r2
 801a058:	881b      	ldrh	r3, [r3, #0]
 801a05a:	461a      	mov	r2, r3
 801a05c:	7cfb      	ldrb	r3, [r7, #19]
 801a05e:	fa42 f303 	asr.w	r3, r2, r3
 801a062:	f003 0301 	and.w	r3, r3, #1
 801a066:	2b00      	cmp	r3, #0
 801a068:	d054      	beq.n	801a114 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801a06a:	68fb      	ldr	r3, [r7, #12]
 801a06c:	785b      	ldrb	r3, [r3, #1]
 801a06e:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 801a070:	68fb      	ldr	r3, [r7, #12]
 801a072:	689a      	ldr	r2, [r3, #8]
 801a074:	7d79      	ldrb	r1, [r7, #21]
 801a076:	7cfb      	ldrb	r3, [r7, #19]
 801a078:	440b      	add	r3, r1
 801a07a:	4619      	mov	r1, r3
 801a07c:	460b      	mov	r3, r1
 801a07e:	005b      	lsls	r3, r3, #1
 801a080:	440b      	add	r3, r1
 801a082:	009b      	lsls	r3, r3, #2
 801a084:	4413      	add	r3, r2
 801a086:	7a1b      	ldrb	r3, [r3, #8]
 801a088:	f343 0303 	sbfx	r3, r3, #0, #4
 801a08c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801a08e:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 801a090:	68fb      	ldr	r3, [r7, #12]
 801a092:	689a      	ldr	r2, [r3, #8]
 801a094:	7d79      	ldrb	r1, [r7, #21]
 801a096:	7cfb      	ldrb	r3, [r7, #19]
 801a098:	440b      	add	r3, r1
 801a09a:	4619      	mov	r1, r3
 801a09c:	460b      	mov	r3, r1
 801a09e:	005b      	lsls	r3, r3, #1
 801a0a0:	440b      	add	r3, r1
 801a0a2:	009b      	lsls	r3, r3, #2
 801a0a4:	4413      	add	r3, r2
 801a0a6:	7a1b      	ldrb	r3, [r3, #8]
 801a0a8:	f343 1303 	sbfx	r3, r3, #4, #4
 801a0ac:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801a0ae:	461a      	mov	r2, r3
 801a0b0:	4621      	mov	r1, r4
 801a0b2:	f7ff fbf8 	bl	80198a6 <RegionCommonValueInRange>
 801a0b6:	4603      	mov	r3, r0
 801a0b8:	2b00      	cmp	r3, #0
 801a0ba:	d02d      	beq.n	801a118 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 801a0bc:	68fb      	ldr	r3, [r7, #12]
 801a0be:	68da      	ldr	r2, [r3, #12]
 801a0c0:	68fb      	ldr	r3, [r7, #12]
 801a0c2:	6899      	ldr	r1, [r3, #8]
 801a0c4:	7d78      	ldrb	r0, [r7, #21]
 801a0c6:	7cfb      	ldrb	r3, [r7, #19]
 801a0c8:	4403      	add	r3, r0
 801a0ca:	4618      	mov	r0, r3
 801a0cc:	4603      	mov	r3, r0
 801a0ce:	005b      	lsls	r3, r3, #1
 801a0d0:	4403      	add	r3, r0
 801a0d2:	009b      	lsls	r3, r3, #2
 801a0d4:	440b      	add	r3, r1
 801a0d6:	7a5b      	ldrb	r3, [r3, #9]
 801a0d8:	4619      	mov	r1, r3
 801a0da:	460b      	mov	r3, r1
 801a0dc:	005b      	lsls	r3, r3, #1
 801a0de:	440b      	add	r3, r1
 801a0e0:	00db      	lsls	r3, r3, #3
 801a0e2:	4413      	add	r3, r2
 801a0e4:	7d1b      	ldrb	r3, [r3, #20]
 801a0e6:	f083 0301 	eor.w	r3, r3, #1
 801a0ea:	b2db      	uxtb	r3, r3
 801a0ec:	2b00      	cmp	r3, #0
 801a0ee:	d003      	beq.n	801a0f8 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 801a0f0:	7dbb      	ldrb	r3, [r7, #22]
 801a0f2:	3301      	adds	r3, #1
 801a0f4:	75bb      	strb	r3, [r7, #22]
                    continue;
 801a0f6:	e010      	b.n	801a11a <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 801a0f8:	7dfb      	ldrb	r3, [r7, #23]
 801a0fa:	1c5a      	adds	r2, r3, #1
 801a0fc:	75fa      	strb	r2, [r7, #23]
 801a0fe:	461a      	mov	r2, r3
 801a100:	68bb      	ldr	r3, [r7, #8]
 801a102:	4413      	add	r3, r2
 801a104:	7d79      	ldrb	r1, [r7, #21]
 801a106:	7cfa      	ldrb	r2, [r7, #19]
 801a108:	440a      	add	r2, r1
 801a10a:	b2d2      	uxtb	r2, r2
 801a10c:	701a      	strb	r2, [r3, #0]
 801a10e:	e004      	b.n	801a11a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801a110:	bf00      	nop
 801a112:	e002      	b.n	801a11a <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 801a114:	bf00      	nop
 801a116:	e000      	b.n	801a11a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801a118:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 801a11a:	7cfb      	ldrb	r3, [r7, #19]
 801a11c:	3301      	adds	r3, #1
 801a11e:	74fb      	strb	r3, [r7, #19]
 801a120:	7cfb      	ldrb	r3, [r7, #19]
 801a122:	2b0f      	cmp	r3, #15
 801a124:	f67f af6c 	bls.w	801a000 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801a128:	7d7b      	ldrb	r3, [r7, #21]
 801a12a:	3310      	adds	r3, #16
 801a12c:	757b      	strb	r3, [r7, #21]
 801a12e:	7d3b      	ldrb	r3, [r7, #20]
 801a130:	3301      	adds	r3, #1
 801a132:	753b      	strb	r3, [r7, #20]
 801a134:	7d7b      	ldrb	r3, [r7, #21]
 801a136:	b29a      	uxth	r2, r3
 801a138:	68fb      	ldr	r3, [r7, #12]
 801a13a:	8a1b      	ldrh	r3, [r3, #16]
 801a13c:	429a      	cmp	r2, r3
 801a13e:	f4ff af5c 	bcc.w	8019ffa <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	7dfa      	ldrb	r2, [r7, #23]
 801a146:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 801a148:	683b      	ldr	r3, [r7, #0]
 801a14a:	7dba      	ldrb	r2, [r7, #22]
 801a14c:	701a      	strb	r2, [r3, #0]
}
 801a14e:	bf00      	nop
 801a150:	371c      	adds	r7, #28
 801a152:	46bd      	mov	sp, r7
 801a154:	bd90      	pop	{r4, r7, pc}

0801a156 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801a156:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a158:	b08b      	sub	sp, #44	; 0x2c
 801a15a:	af04      	add	r7, sp, #16
 801a15c:	60f8      	str	r0, [r7, #12]
 801a15e:	60b9      	str	r1, [r7, #8]
 801a160:	607a      	str	r2, [r7, #4]
 801a162:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 801a164:	68fb      	ldr	r3, [r7, #12]
 801a166:	685b      	ldr	r3, [r3, #4]
 801a168:	4618      	mov	r0, r3
 801a16a:	f005 fe3b 	bl	801fde4 <UTIL_TIMER_GetElapsedTime>
 801a16e:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 801a170:	68fb      	ldr	r3, [r7, #12]
 801a172:	681a      	ldr	r2, [r3, #0]
 801a174:	697b      	ldr	r3, [r7, #20]
 801a176:	1ad2      	subs	r2, r2, r3
 801a178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a17a:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 801a17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a17e:	2201      	movs	r2, #1
 801a180:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801a182:	683b      	ldr	r3, [r7, #0]
 801a184:	2200      	movs	r2, #0
 801a186:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801a188:	68fb      	ldr	r3, [r7, #12]
 801a18a:	685b      	ldr	r3, [r3, #4]
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	d004      	beq.n	801a19a <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 801a190:	68fb      	ldr	r3, [r7, #12]
 801a192:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801a194:	697a      	ldr	r2, [r7, #20]
 801a196:	429a      	cmp	r2, r3
 801a198:	d32b      	bcc.n	801a1f2 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801a19a:	68bb      	ldr	r3, [r7, #8]
 801a19c:	2200      	movs	r2, #0
 801a19e:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801a1a0:	68fb      	ldr	r3, [r7, #12]
 801a1a2:	69db      	ldr	r3, [r3, #28]
 801a1a4:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 801a1a6:	68fb      	ldr	r3, [r7, #12]
 801a1a8:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801a1aa:	68dd      	ldr	r5, [r3, #12]
 801a1ac:	68fb      	ldr	r3, [r7, #12]
 801a1ae:	7a5e      	ldrb	r6, [r3, #9]
 801a1b0:	68fb      	ldr	r3, [r7, #12]
 801a1b2:	f893 c008 	ldrb.w	ip, [r3, #8]
 801a1b6:	68fb      	ldr	r3, [r7, #12]
 801a1b8:	7d1b      	ldrb	r3, [r3, #20]
 801a1ba:	68fa      	ldr	r2, [r7, #12]
 801a1bc:	6992      	ldr	r2, [r2, #24]
 801a1be:	9203      	str	r2, [sp, #12]
 801a1c0:	68fa      	ldr	r2, [r7, #12]
 801a1c2:	f10d 0e04 	add.w	lr, sp, #4
 801a1c6:	320c      	adds	r2, #12
 801a1c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a1cc:	e88e 0003 	stmia.w	lr, {r0, r1}
 801a1d0:	9300      	str	r3, [sp, #0]
 801a1d2:	4663      	mov	r3, ip
 801a1d4:	4632      	mov	r2, r6
 801a1d6:	4629      	mov	r1, r5
 801a1d8:	4620      	mov	r0, r4
 801a1da:	f7ff fc35 	bl	8019a48 <RegionCommonUpdateBandTimeOff>
 801a1de:	4602      	mov	r2, r0
 801a1e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a1e2:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 801a1e4:	68fb      	ldr	r3, [r7, #12]
 801a1e6:	69d8      	ldr	r0, [r3, #28]
 801a1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1ea:	683a      	ldr	r2, [r7, #0]
 801a1ec:	6879      	ldr	r1, [r7, #4]
 801a1ee:	f7ff fef4 	bl	8019fda <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 801a1f2:	683b      	ldr	r3, [r7, #0]
 801a1f4:	781b      	ldrb	r3, [r3, #0]
 801a1f6:	2b00      	cmp	r3, #0
 801a1f8:	d004      	beq.n	801a204 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 801a1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a1fc:	2200      	movs	r2, #0
 801a1fe:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801a200:	2300      	movs	r3, #0
 801a202:	e006      	b.n	801a212 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 801a204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a206:	781b      	ldrb	r3, [r3, #0]
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d001      	beq.n	801a210 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 801a20c:	230b      	movs	r3, #11
 801a20e:	e000      	b.n	801a212 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801a210:	230c      	movs	r3, #12
    }
}
 801a212:	4618      	mov	r0, r3
 801a214:	371c      	adds	r7, #28
 801a216:	46bd      	mov	sp, r7
 801a218:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a21a <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 801a21a:	b5b0      	push	{r4, r5, r7, lr}
 801a21c:	b086      	sub	sp, #24
 801a21e:	af02      	add	r7, sp, #8
 801a220:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	781b      	ldrb	r3, [r3, #0]
 801a226:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	f993 2000 	ldrsb.w	r2, [r3]
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801a234:	429a      	cmp	r2, r3
 801a236:	d103      	bne.n	801a240 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801a23e:	e026      	b.n	801a28e <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 801a240:	7bfb      	ldrb	r3, [r7, #15]
 801a242:	3b01      	subs	r3, #1
 801a244:	b2db      	uxtb	r3, r3
 801a246:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801a24e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801a252:	429a      	cmp	r2, r3
 801a254:	d019      	beq.n	801a28a <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	78d8      	ldrb	r0, [r3, #3]
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	6859      	ldr	r1, [r3, #4]
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	f993 5002 	ldrsb.w	r5, [r3, #2]
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a26a:	687a      	ldr	r2, [r7, #4]
 801a26c:	6892      	ldr	r2, [r2, #8]
 801a26e:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801a272:	9201      	str	r2, [sp, #4]
 801a274:	9300      	str	r3, [sp, #0]
 801a276:	462b      	mov	r3, r5
 801a278:	4622      	mov	r2, r4
 801a27a:	f7ff faa2 	bl	80197c2 <RegionCommonChanVerifyDr>
 801a27e:	4603      	mov	r3, r0
 801a280:	f083 0301 	eor.w	r3, r3, #1
 801a284:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 801a286:	2b00      	cmp	r3, #0
 801a288:	d1da      	bne.n	801a240 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 801a28a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801a28e:	4618      	mov	r0, r3
 801a290:	3710      	adds	r7, #16
 801a292:	46bd      	mov	sp, r7
 801a294:	bdb0      	pop	{r4, r5, r7, pc}

0801a296 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 801a296:	b480      	push	{r7}
 801a298:	b083      	sub	sp, #12
 801a29a:	af00      	add	r7, sp, #0
 801a29c:	4603      	mov	r3, r0
 801a29e:	460a      	mov	r2, r1
 801a2a0:	71fb      	strb	r3, [r7, #7]
 801a2a2:	4613      	mov	r3, r2
 801a2a4:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 801a2a6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801a2aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a2ae:	4293      	cmp	r3, r2
 801a2b0:	bfb8      	it	lt
 801a2b2:	4613      	movlt	r3, r2
 801a2b4:	b25b      	sxtb	r3, r3
}
 801a2b6:	4618      	mov	r0, r3
 801a2b8:	370c      	adds	r7, #12
 801a2ba:	46bd      	mov	sp, r7
 801a2bc:	bc80      	pop	{r7}
 801a2be:	4770      	bx	lr

0801a2c0 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 801a2c0:	b480      	push	{r7}
 801a2c2:	b083      	sub	sp, #12
 801a2c4:	af00      	add	r7, sp, #0
 801a2c6:	6078      	str	r0, [r7, #4]
 801a2c8:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	009b      	lsls	r3, r3, #2
 801a2ce:	683a      	ldr	r2, [r7, #0]
 801a2d0:	4413      	add	r3, r2
 801a2d2:	681b      	ldr	r3, [r3, #0]
 801a2d4:	4a07      	ldr	r2, [pc, #28]	; (801a2f4 <RegionCommonGetBandwidth+0x34>)
 801a2d6:	4293      	cmp	r3, r2
 801a2d8:	d004      	beq.n	801a2e4 <RegionCommonGetBandwidth+0x24>
 801a2da:	4a07      	ldr	r2, [pc, #28]	; (801a2f8 <RegionCommonGetBandwidth+0x38>)
 801a2dc:	4293      	cmp	r3, r2
 801a2de:	d003      	beq.n	801a2e8 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 801a2e0:	2300      	movs	r3, #0
 801a2e2:	e002      	b.n	801a2ea <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 801a2e4:	2301      	movs	r3, #1
 801a2e6:	e000      	b.n	801a2ea <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 801a2e8:	2302      	movs	r3, #2
    }
}
 801a2ea:	4618      	mov	r0, r3
 801a2ec:	370c      	adds	r7, #12
 801a2ee:	46bd      	mov	sp, r7
 801a2f0:	bc80      	pop	{r7}
 801a2f2:	4770      	bx	lr
 801a2f4:	0003d090 	.word	0x0003d090
 801a2f8:	0007a120 	.word	0x0007a120

0801a2fc <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 801a2fc:	b580      	push	{r7, lr}
 801a2fe:	b086      	sub	sp, #24
 801a300:	af04      	add	r7, sp, #16
 801a302:	4603      	mov	r3, r0
 801a304:	6039      	str	r1, [r7, #0]
 801a306:	71fb      	strb	r3, [r7, #7]
 801a308:	4613      	mov	r3, r2
 801a30a:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 801a30c:	79fb      	ldrb	r3, [r7, #7]
 801a30e:	2b05      	cmp	r3, #5
 801a310:	d810      	bhi.n	801a334 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801a312:	79fb      	ldrb	r3, [r7, #7]
 801a314:	4a0f      	ldr	r2, [pc, #60]	; (801a354 <RegionCommonRxConfigPrint+0x58>)
 801a316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a31a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801a31e:	9202      	str	r2, [sp, #8]
 801a320:	683a      	ldr	r2, [r7, #0]
 801a322:	9201      	str	r2, [sp, #4]
 801a324:	9300      	str	r3, [sp, #0]
 801a326:	4b0c      	ldr	r3, [pc, #48]	; (801a358 <RegionCommonRxConfigPrint+0x5c>)
 801a328:	2201      	movs	r2, #1
 801a32a:	2100      	movs	r1, #0
 801a32c:	2002      	movs	r0, #2
 801a32e:	f005 fe37 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 801a332:	e00a      	b.n	801a34a <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 801a334:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a338:	9301      	str	r3, [sp, #4]
 801a33a:	683b      	ldr	r3, [r7, #0]
 801a33c:	9300      	str	r3, [sp, #0]
 801a33e:	4b07      	ldr	r3, [pc, #28]	; (801a35c <RegionCommonRxConfigPrint+0x60>)
 801a340:	2201      	movs	r2, #1
 801a342:	2100      	movs	r1, #0
 801a344:	2002      	movs	r0, #2
 801a346:	f005 fe2b 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
}
 801a34a:	bf00      	nop
 801a34c:	3708      	adds	r7, #8
 801a34e:	46bd      	mov	sp, r7
 801a350:	bd80      	pop	{r7, pc}
 801a352:	bf00      	nop
 801a354:	20000118 	.word	0x20000118
 801a358:	08021774 	.word	0x08021774
 801a35c:	08021794 	.word	0x08021794

0801a360 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 801a360:	b580      	push	{r7, lr}
 801a362:	b084      	sub	sp, #16
 801a364:	af02      	add	r7, sp, #8
 801a366:	6078      	str	r0, [r7, #4]
 801a368:	460b      	mov	r3, r1
 801a36a:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 801a36c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a370:	9301      	str	r3, [sp, #4]
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	9300      	str	r3, [sp, #0]
 801a376:	4b05      	ldr	r3, [pc, #20]	; (801a38c <RegionCommonTxConfigPrint+0x2c>)
 801a378:	2201      	movs	r2, #1
 801a37a:	2100      	movs	r1, #0
 801a37c:	2002      	movs	r0, #2
 801a37e:	f005 fe0f 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
}
 801a382:	bf00      	nop
 801a384:	3708      	adds	r7, #8
 801a386:	46bd      	mov	sp, r7
 801a388:	bd80      	pop	{r7, pc}
 801a38a:	bf00      	nop
 801a38c:	080217b0 	.word	0x080217b0

0801a390 <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 801a390:	b580      	push	{r7, lr}
 801a392:	b084      	sub	sp, #16
 801a394:	af00      	add	r7, sp, #0
 801a396:	603b      	str	r3, [r7, #0]
 801a398:	4603      	mov	r3, r0
 801a39a:	71fb      	strb	r3, [r7, #7]
 801a39c:	460b      	mov	r3, r1
 801a39e:	71bb      	strb	r3, [r7, #6]
 801a3a0:	4613      	mov	r3, r2
 801a3a2:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 801a3a4:	79fb      	ldrb	r3, [r7, #7]
 801a3a6:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 801a3a8:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801a3ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a3b0:	4611      	mov	r1, r2
 801a3b2:	4618      	mov	r0, r3
 801a3b4:	f7ff ff6f 	bl	801a296 <RegionCommonLimitTxPower>
 801a3b8:	4603      	mov	r3, r0
 801a3ba:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 801a3bc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801a3c0:	2b04      	cmp	r3, #4
 801a3c2:	d106      	bne.n	801a3d2 <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 801a3c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a3c8:	2b02      	cmp	r3, #2
 801a3ca:	bfb8      	it	lt
 801a3cc:	2302      	movlt	r3, #2
 801a3ce:	73fb      	strb	r3, [r7, #15]
 801a3d0:	e00d      	b.n	801a3ee <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 801a3d2:	2204      	movs	r2, #4
 801a3d4:	2100      	movs	r1, #0
 801a3d6:	6838      	ldr	r0, [r7, #0]
 801a3d8:	f7ff fab6 	bl	8019948 <RegionCommonCountChannels>
 801a3dc:	4603      	mov	r3, r0
 801a3de:	2b31      	cmp	r3, #49	; 0x31
 801a3e0:	d805      	bhi.n	801a3ee <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 801a3e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a3e6:	2b05      	cmp	r3, #5
 801a3e8:	bfb8      	it	lt
 801a3ea:	2305      	movlt	r3, #5
 801a3ec:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 801a3ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a3f2:	4618      	mov	r0, r3
 801a3f4:	3710      	adds	r7, #16
 801a3f6:	46bd      	mov	sp, r7
 801a3f8:	bd80      	pop	{r7, pc}
	...

0801a3fc <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 801a3fc:	b580      	push	{r7, lr}
 801a3fe:	b082      	sub	sp, #8
 801a400:	af00      	add	r7, sp, #0
 801a402:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801a404:	4b18      	ldr	r3, [pc, #96]	; (801a468 <VerifyRfFreq+0x6c>)
 801a406:	6a1b      	ldr	r3, [r3, #32]
 801a408:	6878      	ldr	r0, [r7, #4]
 801a40a:	4798      	blx	r3
 801a40c:	4603      	mov	r3, r0
 801a40e:	f083 0301 	eor.w	r3, r3, #1
 801a412:	b2db      	uxtb	r3, r3
 801a414:	2b00      	cmp	r3, #0
 801a416:	d001      	beq.n	801a41c <VerifyRfFreq+0x20>
    {
        return false;
 801a418:	2300      	movs	r3, #0
 801a41a:	e021      	b.n	801a460 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	4a13      	ldr	r2, [pc, #76]	; (801a46c <VerifyRfFreq+0x70>)
 801a420:	4293      	cmp	r3, r2
 801a422:	d910      	bls.n	801a446 <VerifyRfFreq+0x4a>
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	4a12      	ldr	r2, [pc, #72]	; (801a470 <VerifyRfFreq+0x74>)
 801a428:	4293      	cmp	r3, r2
 801a42a:	d80c      	bhi.n	801a446 <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 801a42c:	687a      	ldr	r2, [r7, #4]
 801a42e:	4b11      	ldr	r3, [pc, #68]	; (801a474 <VerifyRfFreq+0x78>)
 801a430:	4413      	add	r3, r2
 801a432:	4a11      	ldr	r2, [pc, #68]	; (801a478 <VerifyRfFreq+0x7c>)
 801a434:	fba2 1203 	umull	r1, r2, r2, r3
 801a438:	0c92      	lsrs	r2, r2, #18
 801a43a:	4910      	ldr	r1, [pc, #64]	; (801a47c <VerifyRfFreq+0x80>)
 801a43c:	fb01 f202 	mul.w	r2, r1, r2
 801a440:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 801a442:	2a00      	cmp	r2, #0
 801a444:	d001      	beq.n	801a44a <VerifyRfFreq+0x4e>
    {
        return false;
 801a446:	2300      	movs	r3, #0
 801a448:	e00a      	b.n	801a460 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	4a0c      	ldr	r2, [pc, #48]	; (801a480 <VerifyRfFreq+0x84>)
 801a44e:	4293      	cmp	r3, r2
 801a450:	d903      	bls.n	801a45a <VerifyRfFreq+0x5e>
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	4a06      	ldr	r2, [pc, #24]	; (801a470 <VerifyRfFreq+0x74>)
 801a456:	4293      	cmp	r3, r2
 801a458:	d901      	bls.n	801a45e <VerifyRfFreq+0x62>
    {
        return false;
 801a45a:	2300      	movs	r3, #0
 801a45c:	e000      	b.n	801a460 <VerifyRfFreq+0x64>
    }
    return true;
 801a45e:	2301      	movs	r3, #1
}
 801a460:	4618      	mov	r0, r3
 801a462:	3708      	adds	r7, #8
 801a464:	46bd      	mov	sp, r7
 801a466:	bd80      	pop	{r7, pc}
 801a468:	08021dfc 	.word	0x08021dfc
 801a46c:	3708709f 	.word	0x3708709f
 801a470:	374886e0 	.word	0x374886e0
 801a474:	c8f78f60 	.word	0xc8f78f60
 801a478:	6fd91d85 	.word	0x6fd91d85
 801a47c:	000927c0 	.word	0x000927c0
 801a480:	35c8015f 	.word	0x35c8015f

0801a484 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801a484:	b590      	push	{r4, r7, lr}
 801a486:	b089      	sub	sp, #36	; 0x24
 801a488:	af04      	add	r7, sp, #16
 801a48a:	4603      	mov	r3, r0
 801a48c:	460a      	mov	r2, r1
 801a48e:	71fb      	strb	r3, [r7, #7]
 801a490:	4613      	mov	r3, r2
 801a492:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 801a494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a498:	4a0f      	ldr	r2, [pc, #60]	; (801a4d8 <GetTimeOnAir+0x54>)
 801a49a:	5cd3      	ldrb	r3, [r2, r3]
 801a49c:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 801a49e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a4a2:	490e      	ldr	r1, [pc, #56]	; (801a4dc <GetTimeOnAir+0x58>)
 801a4a4:	4618      	mov	r0, r3
 801a4a6:	f7ff ff0b 	bl	801a2c0 <RegionCommonGetBandwidth>
 801a4aa:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801a4ac:	4b0c      	ldr	r3, [pc, #48]	; (801a4e0 <GetTimeOnAir+0x5c>)
 801a4ae:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801a4b0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801a4b4:	88bb      	ldrh	r3, [r7, #4]
 801a4b6:	b2db      	uxtb	r3, r3
 801a4b8:	2101      	movs	r1, #1
 801a4ba:	9103      	str	r1, [sp, #12]
 801a4bc:	9302      	str	r3, [sp, #8]
 801a4be:	2300      	movs	r3, #0
 801a4c0:	9301      	str	r3, [sp, #4]
 801a4c2:	2308      	movs	r3, #8
 801a4c4:	9300      	str	r3, [sp, #0]
 801a4c6:	2301      	movs	r3, #1
 801a4c8:	68b9      	ldr	r1, [r7, #8]
 801a4ca:	2001      	movs	r0, #1
 801a4cc:	47a0      	blx	r4
 801a4ce:	4603      	mov	r3, r0
}
 801a4d0:	4618      	mov	r0, r3
 801a4d2:	3714      	adds	r7, #20
 801a4d4:	46bd      	mov	sp, r7
 801a4d6:	bd90      	pop	{r4, r7, pc}
 801a4d8:	08021d78 	.word	0x08021d78
 801a4dc:	08021d88 	.word	0x08021d88
 801a4e0:	08021dfc 	.word	0x08021dfc

0801a4e4 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 801a4e4:	b580      	push	{r7, lr}
 801a4e6:	b088      	sub	sp, #32
 801a4e8:	af00      	add	r7, sp, #0
 801a4ea:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801a4ec:	2300      	movs	r3, #0
 801a4ee:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	781b      	ldrb	r3, [r3, #0]
 801a4f4:	3b01      	subs	r3, #1
 801a4f6:	2b37      	cmp	r3, #55	; 0x37
 801a4f8:	f200 8136 	bhi.w	801a768 <RegionUS915GetPhyParam+0x284>
 801a4fc:	a201      	add	r2, pc, #4	; (adr r2, 801a504 <RegionUS915GetPhyParam+0x20>)
 801a4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a502:	bf00      	nop
 801a504:	0801a5e5 	.word	0x0801a5e5
 801a508:	0801a5eb 	.word	0x0801a5eb
 801a50c:	0801a769 	.word	0x0801a769
 801a510:	0801a769 	.word	0x0801a769
 801a514:	0801a769 	.word	0x0801a769
 801a518:	0801a5f1 	.word	0x0801a5f1
 801a51c:	0801a769 	.word	0x0801a769
 801a520:	0801a62b 	.word	0x0801a62b
 801a524:	0801a769 	.word	0x0801a769
 801a528:	0801a631 	.word	0x0801a631
 801a52c:	0801a637 	.word	0x0801a637
 801a530:	0801a63d 	.word	0x0801a63d
 801a534:	0801a643 	.word	0x0801a643
 801a538:	0801a653 	.word	0x0801a653
 801a53c:	0801a663 	.word	0x0801a663
 801a540:	0801a669 	.word	0x0801a669
 801a544:	0801a671 	.word	0x0801a671
 801a548:	0801a679 	.word	0x0801a679
 801a54c:	0801a681 	.word	0x0801a681
 801a550:	0801a689 	.word	0x0801a689
 801a554:	0801a691 	.word	0x0801a691
 801a558:	0801a6a5 	.word	0x0801a6a5
 801a55c:	0801a6ab 	.word	0x0801a6ab
 801a560:	0801a6b1 	.word	0x0801a6b1
 801a564:	0801a6b7 	.word	0x0801a6b7
 801a568:	0801a6c3 	.word	0x0801a6c3
 801a56c:	0801a6cf 	.word	0x0801a6cf
 801a570:	0801a6d5 	.word	0x0801a6d5
 801a574:	0801a6dd 	.word	0x0801a6dd
 801a578:	0801a6e3 	.word	0x0801a6e3
 801a57c:	0801a6e9 	.word	0x0801a6e9
 801a580:	0801a6ef 	.word	0x0801a6ef
 801a584:	0801a5f7 	.word	0x0801a5f7
 801a588:	0801a769 	.word	0x0801a769
 801a58c:	0801a769 	.word	0x0801a769
 801a590:	0801a769 	.word	0x0801a769
 801a594:	0801a769 	.word	0x0801a769
 801a598:	0801a769 	.word	0x0801a769
 801a59c:	0801a769 	.word	0x0801a769
 801a5a0:	0801a769 	.word	0x0801a769
 801a5a4:	0801a769 	.word	0x0801a769
 801a5a8:	0801a769 	.word	0x0801a769
 801a5ac:	0801a769 	.word	0x0801a769
 801a5b0:	0801a769 	.word	0x0801a769
 801a5b4:	0801a769 	.word	0x0801a769
 801a5b8:	0801a769 	.word	0x0801a769
 801a5bc:	0801a6f7 	.word	0x0801a6f7
 801a5c0:	0801a70b 	.word	0x0801a70b
 801a5c4:	0801a719 	.word	0x0801a719
 801a5c8:	0801a71f 	.word	0x0801a71f
 801a5cc:	0801a769 	.word	0x0801a769
 801a5d0:	0801a725 	.word	0x0801a725
 801a5d4:	0801a739 	.word	0x0801a739
 801a5d8:	0801a73f 	.word	0x0801a73f
 801a5dc:	0801a745 	.word	0x0801a745
 801a5e0:	0801a755 	.word	0x0801a755
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 801a5e4:	2308      	movs	r3, #8
 801a5e6:	61bb      	str	r3, [r7, #24]
            break;
 801a5e8:	e0bf      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 801a5ea:	2300      	movs	r3, #0
 801a5ec:	61bb      	str	r3, [r7, #24]
            break;
 801a5ee:	e0bc      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 801a5f0:	2300      	movs	r3, #0
 801a5f2:	61bb      	str	r3, [r7, #24]
            break;
 801a5f4:	e0b9      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a5fc:	733b      	strb	r3, [r7, #12]
 801a5fe:	2304      	movs	r3, #4
 801a600:	737b      	strb	r3, [r7, #13]
 801a602:	2300      	movs	r3, #0
 801a604:	73bb      	strb	r3, [r7, #14]
 801a606:	2348      	movs	r3, #72	; 0x48
 801a608:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801a60a:	4b5b      	ldr	r3, [pc, #364]	; (801a778 <RegionUS915GetPhyParam+0x294>)
 801a60c:	681b      	ldr	r3, [r3, #0]
 801a60e:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a612:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 801a614:	4b58      	ldr	r3, [pc, #352]	; (801a778 <RegionUS915GetPhyParam+0x294>)
 801a616:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a618:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801a61a:	f107 030c 	add.w	r3, r7, #12
 801a61e:	4618      	mov	r0, r3
 801a620:	f7ff fdfb 	bl	801a21a <RegionCommonGetNextLowerTxDr>
 801a624:	4603      	mov	r3, r0
 801a626:	61bb      	str	r3, [r7, #24]
            break;
 801a628:	e09f      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 801a62a:	2300      	movs	r3, #0
 801a62c:	61bb      	str	r3, [r7, #24]
            break;
 801a62e:	e09c      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 801a630:	2300      	movs	r3, #0
 801a632:	61bb      	str	r3, [r7, #24]
            break;
 801a634:	e099      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801a636:	2340      	movs	r3, #64	; 0x40
 801a638:	61bb      	str	r3, [r7, #24]
            break;
 801a63a:	e096      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801a63c:	2320      	movs	r3, #32
 801a63e:	61bb      	str	r3, [r7, #24]
            break;
 801a640:	e093      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 801a642:	687b      	ldr	r3, [r7, #4]
 801a644:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a648:	461a      	mov	r2, r3
 801a64a:	4b4c      	ldr	r3, [pc, #304]	; (801a77c <RegionUS915GetPhyParam+0x298>)
 801a64c:	5c9b      	ldrb	r3, [r3, r2]
 801a64e:	61bb      	str	r3, [r7, #24]
            break;
 801a650:	e08b      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a658:	461a      	mov	r2, r3
 801a65a:	4b49      	ldr	r3, [pc, #292]	; (801a780 <RegionUS915GetPhyParam+0x29c>)
 801a65c:	5c9b      	ldrb	r3, [r3, r2]
 801a65e:	61bb      	str	r3, [r7, #24]
            break;
 801a660:	e083      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 801a662:	2300      	movs	r3, #0
 801a664:	61bb      	str	r3, [r7, #24]
            break;
 801a666:	e080      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 801a668:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801a66c:	61bb      	str	r3, [r7, #24]
            break;
 801a66e:	e07c      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801a670:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a674:	61bb      	str	r3, [r7, #24]
            break;
 801a676:	e078      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801a678:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801a67c:	61bb      	str	r3, [r7, #24]
            break;
 801a67e:	e074      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801a680:	f241 3388 	movw	r3, #5000	; 0x1388
 801a684:	61bb      	str	r3, [r7, #24]
            break;
 801a686:	e070      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801a688:	f241 7370 	movw	r3, #6000	; 0x1770
 801a68c:	61bb      	str	r3, [r7, #24]
            break;
 801a68e:	e06c      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 801a690:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801a694:	483b      	ldr	r0, [pc, #236]	; (801a784 <RegionUS915GetPhyParam+0x2a0>)
 801a696:	f001 f8a7 	bl	801b7e8 <randr>
 801a69a:	4603      	mov	r3, r0
 801a69c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801a6a0:	61bb      	str	r3, [r7, #24]
            break;
 801a6a2:	e062      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 801a6a4:	2300      	movs	r3, #0
 801a6a6:	61bb      	str	r3, [r7, #24]
            break;
 801a6a8:	e05f      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 801a6aa:	4b37      	ldr	r3, [pc, #220]	; (801a788 <RegionUS915GetPhyParam+0x2a4>)
 801a6ac:	61bb      	str	r3, [r7, #24]
            break;
 801a6ae:	e05c      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 801a6b0:	2308      	movs	r3, #8
 801a6b2:	61bb      	str	r3, [r7, #24]
            break;
 801a6b4:	e059      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801a6b6:	4b30      	ldr	r3, [pc, #192]	; (801a778 <RegionUS915GetPhyParam+0x294>)
 801a6b8:	681b      	ldr	r3, [r3, #0]
 801a6ba:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801a6be:	61bb      	str	r3, [r7, #24]
            break;
 801a6c0:	e053      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801a6c2:	4b2d      	ldr	r3, [pc, #180]	; (801a778 <RegionUS915GetPhyParam+0x294>)
 801a6c4:	681b      	ldr	r3, [r3, #0]
 801a6c6:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801a6ca:	61bb      	str	r3, [r7, #24]
            break;
 801a6cc:	e04d      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 801a6ce:	2348      	movs	r3, #72	; 0x48
 801a6d0:	61bb      	str	r3, [r7, #24]
            break;
 801a6d2:	e04a      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 801a6d4:	4b28      	ldr	r3, [pc, #160]	; (801a778 <RegionUS915GetPhyParam+0x294>)
 801a6d6:	681b      	ldr	r3, [r3, #0]
 801a6d8:	61bb      	str	r3, [r7, #24]
            break;
 801a6da:	e046      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 801a6dc:	2300      	movs	r3, #0
 801a6de:	61bb      	str	r3, [r7, #24]
            break;
 801a6e0:	e043      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801a6e2:	2300      	movs	r3, #0
 801a6e4:	61bb      	str	r3, [r7, #24]
            break;
 801a6e6:	e040      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 801a6e8:	4b28      	ldr	r3, [pc, #160]	; (801a78c <RegionUS915GetPhyParam+0x2a8>)
 801a6ea:	61bb      	str	r3, [r7, #24]
            break;
 801a6ec:	e03d      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 801a6ee:	f04f 0300 	mov.w	r3, #0
 801a6f2:	61bb      	str	r3, [r7, #24]
            break;
 801a6f4:	e039      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	791b      	ldrb	r3, [r3, #4]
 801a6fa:	4a25      	ldr	r2, [pc, #148]	; (801a790 <RegionUS915GetPhyParam+0x2ac>)
 801a6fc:	4922      	ldr	r1, [pc, #136]	; (801a788 <RegionUS915GetPhyParam+0x2a4>)
 801a6fe:	4618      	mov	r0, r3
 801a700:	f7fe fefd 	bl	80194fe <RegionBaseUSCalcDownlinkFrequency>
 801a704:	4603      	mov	r3, r0
 801a706:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801a708:	e02f      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 801a70a:	2317      	movs	r3, #23
 801a70c:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 801a70e:	2304      	movs	r3, #4
 801a710:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 801a712:	2303      	movs	r3, #3
 801a714:	76bb      	strb	r3, [r7, #26]
            break;
 801a716:	e028      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 801a718:	2308      	movs	r3, #8
 801a71a:	61bb      	str	r3, [r7, #24]
            break;
 801a71c:	e025      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 801a71e:	2308      	movs	r3, #8
 801a720:	61bb      	str	r3, [r7, #24]
            break;
 801a722:	e022      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	791b      	ldrb	r3, [r3, #4]
 801a728:	4a19      	ldr	r2, [pc, #100]	; (801a790 <RegionUS915GetPhyParam+0x2ac>)
 801a72a:	4917      	ldr	r1, [pc, #92]	; (801a788 <RegionUS915GetPhyParam+0x2a4>)
 801a72c:	4618      	mov	r0, r3
 801a72e:	f7fe fee6 	bl	80194fe <RegionBaseUSCalcDownlinkFrequency>
 801a732:	4603      	mov	r3, r0
 801a734:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801a736:	e018      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 801a738:	2308      	movs	r3, #8
 801a73a:	61bb      	str	r3, [r7, #24]
            break;
 801a73c:	e015      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 801a73e:	2308      	movs	r3, #8
 801a740:	61bb      	str	r3, [r7, #24]
            break;
 801a742:	e012      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a74a:	461a      	mov	r2, r3
 801a74c:	4b11      	ldr	r3, [pc, #68]	; (801a794 <RegionUS915GetPhyParam+0x2b0>)
 801a74e:	5c9b      	ldrb	r3, [r3, r2]
 801a750:	61bb      	str	r3, [r7, #24]
            break;
 801a752:	e00a      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 801a754:	687b      	ldr	r3, [r7, #4]
 801a756:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a75a:	490f      	ldr	r1, [pc, #60]	; (801a798 <RegionUS915GetPhyParam+0x2b4>)
 801a75c:	4618      	mov	r0, r3
 801a75e:	f7ff fdaf 	bl	801a2c0 <RegionCommonGetBandwidth>
 801a762:	4603      	mov	r3, r0
 801a764:	61bb      	str	r3, [r7, #24]
            break;
 801a766:	e000      	b.n	801a76a <RegionUS915GetPhyParam+0x286>
        }
        default:
        {
            break;
 801a768:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 801a76a:	69bb      	ldr	r3, [r7, #24]
 801a76c:	61fb      	str	r3, [r7, #28]
 801a76e:	69fb      	ldr	r3, [r7, #28]
}
 801a770:	4618      	mov	r0, r3
 801a772:	3720      	adds	r7, #32
 801a774:	46bd      	mov	sp, r7
 801a776:	bd80      	pop	{r7, pc}
 801a778:	20001c90 	.word	0x20001c90
 801a77c:	08021ddc 	.word	0x08021ddc
 801a780:	08021dec 	.word	0x08021dec
 801a784:	fffffc18 	.word	0xfffffc18
 801a788:	370870a0 	.word	0x370870a0
 801a78c:	4200999a 	.word	0x4200999a
 801a790:	000927c0 	.word	0x000927c0
 801a794:	08021d78 	.word	0x08021d78
 801a798:	08021d88 	.word	0x08021d88

0801a79c <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801a79c:	b590      	push	{r4, r7, lr}
 801a79e:	b085      	sub	sp, #20
 801a7a0:	af02      	add	r7, sp, #8
 801a7a2:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801a7a4:	4b11      	ldr	r3, [pc, #68]	; (801a7ec <RegionUS915SetBandTxDone+0x50>)
 801a7a6:	681a      	ldr	r2, [r3, #0]
 801a7a8:	4b11      	ldr	r3, [pc, #68]	; (801a7f0 <RegionUS915SetBandTxDone+0x54>)
 801a7aa:	6819      	ldr	r1, [r3, #0]
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	781b      	ldrb	r3, [r3, #0]
 801a7b0:	4618      	mov	r0, r3
 801a7b2:	4603      	mov	r3, r0
 801a7b4:	005b      	lsls	r3, r3, #1
 801a7b6:	4403      	add	r3, r0
 801a7b8:	009b      	lsls	r3, r3, #2
 801a7ba:	440b      	add	r3, r1
 801a7bc:	3309      	adds	r3, #9
 801a7be:	781b      	ldrb	r3, [r3, #0]
 801a7c0:	4619      	mov	r1, r3
 801a7c2:	460b      	mov	r3, r1
 801a7c4:	005b      	lsls	r3, r3, #1
 801a7c6:	440b      	add	r3, r1
 801a7c8:	00db      	lsls	r3, r3, #3
 801a7ca:	18d0      	adds	r0, r2, r3
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	6899      	ldr	r1, [r3, #8]
 801a7d0:	687b      	ldr	r3, [r7, #4]
 801a7d2:	785c      	ldrb	r4, [r3, #1]
 801a7d4:	687b      	ldr	r3, [r7, #4]
 801a7d6:	691a      	ldr	r2, [r3, #16]
 801a7d8:	9200      	str	r2, [sp, #0]
 801a7da:	68db      	ldr	r3, [r3, #12]
 801a7dc:	4622      	mov	r2, r4
 801a7de:	f7ff f905 	bl	80199ec <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 801a7e2:	bf00      	nop
 801a7e4:	370c      	adds	r7, #12
 801a7e6:	46bd      	mov	sp, r7
 801a7e8:	bd90      	pop	{r4, r7, pc}
 801a7ea:	bf00      	nop
 801a7ec:	20001c94 	.word	0x20001c94
 801a7f0:	20001c90 	.word	0x20001c90

0801a7f4 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 801a7f4:	b580      	push	{r7, lr}
 801a7f6:	b08a      	sub	sp, #40	; 0x28
 801a7f8:	af00      	add	r7, sp, #0
 801a7fa:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 801a7fc:	2301      	movs	r3, #1
 801a7fe:	81bb      	strh	r3, [r7, #12]
 801a800:	2300      	movs	r3, #0
 801a802:	73bb      	strb	r3, [r7, #14]
 801a804:	2300      	movs	r3, #0
 801a806:	613b      	str	r3, [r7, #16]
 801a808:	2300      	movs	r3, #0
 801a80a:	617b      	str	r3, [r7, #20]
 801a80c:	2300      	movs	r3, #0
 801a80e:	61bb      	str	r3, [r7, #24]
 801a810:	2300      	movs	r3, #0
 801a812:	61fb      	str	r3, [r7, #28]
 801a814:	2300      	movs	r3, #0
 801a816:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	7b1b      	ldrb	r3, [r3, #12]
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d007      	beq.n	801a832 <RegionUS915InitDefaults+0x3e>
 801a822:	2b00      	cmp	r3, #0
 801a824:	f2c0 8104 	blt.w	801aa30 <RegionUS915InitDefaults+0x23c>
 801a828:	3b01      	subs	r3, #1
 801a82a:	2b01      	cmp	r3, #1
 801a82c:	f200 8100 	bhi.w	801aa30 <RegionUS915InitDefaults+0x23c>
 801a830:	e0ce      	b.n	801a9d0 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	681b      	ldr	r3, [r3, #0]
 801a836:	2b00      	cmp	r3, #0
 801a838:	f000 80fc 	beq.w	801aa34 <RegionUS915InitDefaults+0x240>
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	685b      	ldr	r3, [r3, #4]
 801a840:	2b00      	cmp	r3, #0
 801a842:	f000 80f7 	beq.w	801aa34 <RegionUS915InitDefaults+0x240>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801a846:	687b      	ldr	r3, [r7, #4]
 801a848:	681b      	ldr	r3, [r3, #0]
 801a84a:	4a7c      	ldr	r2, [pc, #496]	; (801aa3c <RegionUS915InitDefaults+0x248>)
 801a84c:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	685b      	ldr	r3, [r3, #4]
 801a852:	4a7b      	ldr	r2, [pc, #492]	; (801aa40 <RegionUS915InitDefaults+0x24c>)
 801a854:	6013      	str	r3, [r2, #0]
            RegionNvmGroup1->JoinTrialsCounter = 0;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
 801a856:	687b      	ldr	r3, [r7, #4]
 801a858:	689b      	ldr	r3, [r3, #8]
 801a85a:	4a7a      	ldr	r2, [pc, #488]	; (801aa44 <RegionUS915InitDefaults+0x250>)
 801a85c:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801a85e:	4b77      	ldr	r3, [pc, #476]	; (801aa3c <RegionUS915InitDefaults+0x248>)
 801a860:	681b      	ldr	r3, [r3, #0]
 801a862:	2200      	movs	r2, #0
 801a864:	731a      	strb	r2, [r3, #12]

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 801a866:	4b75      	ldr	r3, [pc, #468]	; (801aa3c <RegionUS915InitDefaults+0x248>)
 801a868:	681b      	ldr	r3, [r3, #0]
 801a86a:	2200      	movs	r2, #0
 801a86c:	735a      	strb	r2, [r3, #13]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 801a86e:	4b75      	ldr	r3, [pc, #468]	; (801aa44 <RegionUS915InitDefaults+0x250>)
 801a870:	681b      	ldr	r3, [r3, #0]
 801a872:	f107 010c 	add.w	r1, r7, #12
 801a876:	2218      	movs	r2, #24
 801a878:	4618      	mov	r0, r3
 801a87a:	f000 ffcc 	bl	801b816 <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801a87e:	2300      	movs	r3, #0
 801a880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a884:	e02e      	b.n	801a8e4 <RegionUS915InitDefaults+0xf0>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 801a886:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a88a:	4a6f      	ldr	r2, [pc, #444]	; (801aa48 <RegionUS915InitDefaults+0x254>)
 801a88c:	fb03 f202 	mul.w	r2, r3, r2
 801a890:	4b6e      	ldr	r3, [pc, #440]	; (801aa4c <RegionUS915InitDefaults+0x258>)
 801a892:	4413      	add	r3, r2
 801a894:	4a6a      	ldr	r2, [pc, #424]	; (801aa40 <RegionUS915InitDefaults+0x24c>)
 801a896:	6811      	ldr	r1, [r2, #0]
 801a898:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a89c:	4618      	mov	r0, r3
 801a89e:	4613      	mov	r3, r2
 801a8a0:	005b      	lsls	r3, r3, #1
 801a8a2:	4413      	add	r3, r2
 801a8a4:	009b      	lsls	r3, r3, #2
 801a8a6:	440b      	add	r3, r1
 801a8a8:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 801a8aa:	4b65      	ldr	r3, [pc, #404]	; (801aa40 <RegionUS915InitDefaults+0x24c>)
 801a8ac:	6819      	ldr	r1, [r3, #0]
 801a8ae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a8b2:	4613      	mov	r3, r2
 801a8b4:	005b      	lsls	r3, r3, #1
 801a8b6:	4413      	add	r3, r2
 801a8b8:	009b      	lsls	r3, r3, #2
 801a8ba:	440b      	add	r3, r1
 801a8bc:	3308      	adds	r3, #8
 801a8be:	2230      	movs	r2, #48	; 0x30
 801a8c0:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801a8c2:	4b5f      	ldr	r3, [pc, #380]	; (801aa40 <RegionUS915InitDefaults+0x24c>)
 801a8c4:	6819      	ldr	r1, [r3, #0]
 801a8c6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a8ca:	4613      	mov	r3, r2
 801a8cc:	005b      	lsls	r3, r3, #1
 801a8ce:	4413      	add	r3, r2
 801a8d0:	009b      	lsls	r3, r3, #2
 801a8d2:	440b      	add	r3, r1
 801a8d4:	3309      	adds	r3, #9
 801a8d6:	2200      	movs	r2, #0
 801a8d8:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801a8da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a8de:	3301      	adds	r3, #1
 801a8e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a8e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a8e8:	2b3f      	cmp	r3, #63	; 0x3f
 801a8ea:	d9cc      	bls.n	801a886 <RegionUS915InitDefaults+0x92>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801a8ec:	2340      	movs	r3, #64	; 0x40
 801a8ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a8f2:	e02f      	b.n	801a954 <RegionUS915InitDefaults+0x160>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 801a8f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a8f8:	3b40      	subs	r3, #64	; 0x40
 801a8fa:	4a55      	ldr	r2, [pc, #340]	; (801aa50 <RegionUS915InitDefaults+0x25c>)
 801a8fc:	fb03 f202 	mul.w	r2, r3, r2
 801a900:	4b54      	ldr	r3, [pc, #336]	; (801aa54 <RegionUS915InitDefaults+0x260>)
 801a902:	4413      	add	r3, r2
 801a904:	4a4e      	ldr	r2, [pc, #312]	; (801aa40 <RegionUS915InitDefaults+0x24c>)
 801a906:	6811      	ldr	r1, [r2, #0]
 801a908:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a90c:	4618      	mov	r0, r3
 801a90e:	4613      	mov	r3, r2
 801a910:	005b      	lsls	r3, r3, #1
 801a912:	4413      	add	r3, r2
 801a914:	009b      	lsls	r3, r3, #2
 801a916:	440b      	add	r3, r1
 801a918:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 801a91a:	4b49      	ldr	r3, [pc, #292]	; (801aa40 <RegionUS915InitDefaults+0x24c>)
 801a91c:	6819      	ldr	r1, [r3, #0]
 801a91e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a922:	4613      	mov	r3, r2
 801a924:	005b      	lsls	r3, r3, #1
 801a926:	4413      	add	r3, r2
 801a928:	009b      	lsls	r3, r3, #2
 801a92a:	440b      	add	r3, r1
 801a92c:	3308      	adds	r3, #8
 801a92e:	2244      	movs	r2, #68	; 0x44
 801a930:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801a932:	4b43      	ldr	r3, [pc, #268]	; (801aa40 <RegionUS915InitDefaults+0x24c>)
 801a934:	6819      	ldr	r1, [r3, #0]
 801a936:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a93a:	4613      	mov	r3, r2
 801a93c:	005b      	lsls	r3, r3, #1
 801a93e:	4413      	add	r3, r2
 801a940:	009b      	lsls	r3, r3, #2
 801a942:	440b      	add	r3, r1
 801a944:	3309      	adds	r3, #9
 801a946:	2200      	movs	r2, #0
 801a948:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801a94a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a94e:	3301      	adds	r3, #1
 801a950:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a954:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a958:	2b47      	cmp	r3, #71	; 0x47
 801a95a:	d9cb      	bls.n	801a8f4 <RegionUS915InitDefaults+0x100>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 801a95c:	4b38      	ldr	r3, [pc, #224]	; (801aa40 <RegionUS915InitDefaults+0x24c>)
 801a95e:	681b      	ldr	r3, [r3, #0]
 801a960:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a964:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 801a968:	4b35      	ldr	r3, [pc, #212]	; (801aa40 <RegionUS915InitDefaults+0x24c>)
 801a96a:	681b      	ldr	r3, [r3, #0]
 801a96c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a970:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 801a974:	4b32      	ldr	r3, [pc, #200]	; (801aa40 <RegionUS915InitDefaults+0x24c>)
 801a976:	681b      	ldr	r3, [r3, #0]
 801a978:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a97c:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 801a980:	4b2f      	ldr	r3, [pc, #188]	; (801aa40 <RegionUS915InitDefaults+0x24c>)
 801a982:	681b      	ldr	r3, [r3, #0]
 801a984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a988:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 801a98c:	4b2c      	ldr	r3, [pc, #176]	; (801aa40 <RegionUS915InitDefaults+0x24c>)
 801a98e:	681b      	ldr	r3, [r3, #0]
 801a990:	22ff      	movs	r2, #255	; 0xff
 801a992:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801a996:	4b2a      	ldr	r3, [pc, #168]	; (801aa40 <RegionUS915InitDefaults+0x24c>)
 801a998:	681b      	ldr	r3, [r3, #0]
 801a99a:	2200      	movs	r2, #0
 801a99c:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801a9a0:	4b27      	ldr	r3, [pc, #156]	; (801aa40 <RegionUS915InitDefaults+0x24c>)
 801a9a2:	681b      	ldr	r3, [r3, #0]
 801a9a4:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801a9a8:	4b25      	ldr	r3, [pc, #148]	; (801aa40 <RegionUS915InitDefaults+0x24c>)
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801a9b0:	2206      	movs	r2, #6
 801a9b2:	4619      	mov	r1, r3
 801a9b4:	f7fe fff4 	bl	80199a0 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801a9b8:	4b20      	ldr	r3, [pc, #128]	; (801aa3c <RegionUS915InitDefaults+0x248>)
 801a9ba:	681b      	ldr	r3, [r3, #0]
 801a9bc:	4618      	mov	r0, r3
 801a9be:	4b20      	ldr	r3, [pc, #128]	; (801aa40 <RegionUS915InitDefaults+0x24c>)
 801a9c0:	681b      	ldr	r3, [r3, #0]
 801a9c2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801a9c6:	2206      	movs	r2, #6
 801a9c8:	4619      	mov	r1, r3
 801a9ca:	f7fe ffe9 	bl	80199a0 <RegionCommonChanMaskCopy>
            break;
 801a9ce:	e032      	b.n	801aa36 <RegionUS915InitDefaults+0x242>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801a9d0:	4b1b      	ldr	r3, [pc, #108]	; (801aa40 <RegionUS915InitDefaults+0x24c>)
 801a9d2:	681b      	ldr	r3, [r3, #0]
 801a9d4:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801a9d8:	4b19      	ldr	r3, [pc, #100]	; (801aa40 <RegionUS915InitDefaults+0x24c>)
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801a9e0:	2206      	movs	r2, #6
 801a9e2:	4619      	mov	r1, r3
 801a9e4:	f7fe ffdc 	bl	80199a0 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 801a9e8:	2300      	movs	r3, #0
 801a9ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801a9ee:	e01a      	b.n	801aa26 <RegionUS915InitDefaults+0x232>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801a9f0:	4b12      	ldr	r3, [pc, #72]	; (801aa3c <RegionUS915InitDefaults+0x248>)
 801a9f2:	681b      	ldr	r3, [r3, #0]
 801a9f4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801a9f8:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801a9fc:	4b10      	ldr	r3, [pc, #64]	; (801aa40 <RegionUS915InitDefaults+0x24c>)
 801a9fe:	681b      	ldr	r3, [r3, #0]
 801aa00:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801aa04:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801aa08:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801aa0c:	4b0b      	ldr	r3, [pc, #44]	; (801aa3c <RegionUS915InitDefaults+0x248>)
 801aa0e:	681b      	ldr	r3, [r3, #0]
 801aa10:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801aa14:	4001      	ands	r1, r0
 801aa16:	b289      	uxth	r1, r1
 801aa18:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 801aa1c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801aa20:	3301      	adds	r3, #1
 801aa22:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801aa26:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801aa2a:	2b05      	cmp	r3, #5
 801aa2c:	d9e0      	bls.n	801a9f0 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 801aa2e:	e002      	b.n	801aa36 <RegionUS915InitDefaults+0x242>
        }
        default:
        {
            break;
 801aa30:	bf00      	nop
 801aa32:	e000      	b.n	801aa36 <RegionUS915InitDefaults+0x242>
                return;
 801aa34:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 801aa36:	3728      	adds	r7, #40	; 0x28
 801aa38:	46bd      	mov	sp, r7
 801aa3a:	bd80      	pop	{r7, pc}
 801aa3c:	20001c8c 	.word	0x20001c8c
 801aa40:	20001c90 	.word	0x20001c90
 801aa44:	20001c94 	.word	0x20001c94
 801aa48:	00030d40 	.word	0x00030d40
 801aa4c:	35c80160 	.word	0x35c80160
 801aa50:	00186a00 	.word	0x00186a00
 801aa54:	35d2afc0 	.word	0x35d2afc0

0801aa58 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801aa58:	b580      	push	{r7, lr}
 801aa5a:	b082      	sub	sp, #8
 801aa5c:	af00      	add	r7, sp, #0
 801aa5e:	6078      	str	r0, [r7, #4]
 801aa60:	460b      	mov	r3, r1
 801aa62:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 801aa64:	78fb      	ldrb	r3, [r7, #3]
 801aa66:	2b0f      	cmp	r3, #15
 801aa68:	d867      	bhi.n	801ab3a <RegionUS915Verify+0xe2>
 801aa6a:	a201      	add	r2, pc, #4	; (adr r2, 801aa70 <RegionUS915Verify+0x18>)
 801aa6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aa70:	0801aab1 	.word	0x0801aab1
 801aa74:	0801ab3b 	.word	0x0801ab3b
 801aa78:	0801ab3b 	.word	0x0801ab3b
 801aa7c:	0801ab3b 	.word	0x0801ab3b
 801aa80:	0801ab3b 	.word	0x0801ab3b
 801aa84:	0801aabf 	.word	0x0801aabf
 801aa88:	0801aadd 	.word	0x0801aadd
 801aa8c:	0801aafb 	.word	0x0801aafb
 801aa90:	0801ab3b 	.word	0x0801ab3b
 801aa94:	0801ab19 	.word	0x0801ab19
 801aa98:	0801ab19 	.word	0x0801ab19
 801aa9c:	0801ab3b 	.word	0x0801ab3b
 801aaa0:	0801ab3b 	.word	0x0801ab3b
 801aaa4:	0801ab3b 	.word	0x0801ab3b
 801aaa8:	0801ab3b 	.word	0x0801ab3b
 801aaac:	0801ab37 	.word	0x0801ab37
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 801aab0:	687b      	ldr	r3, [r7, #4]
 801aab2:	681b      	ldr	r3, [r3, #0]
 801aab4:	4618      	mov	r0, r3
 801aab6:	f7ff fca1 	bl	801a3fc <VerifyRfFreq>
 801aaba:	4603      	mov	r3, r0
 801aabc:	e03e      	b.n	801ab3c <RegionUS915Verify+0xe4>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	f993 3000 	ldrsb.w	r3, [r3]
 801aac4:	2204      	movs	r2, #4
 801aac6:	2100      	movs	r1, #0
 801aac8:	4618      	mov	r0, r3
 801aaca:	f7fe feec 	bl	80198a6 <RegionCommonValueInRange>
 801aace:	4603      	mov	r3, r0
 801aad0:	2b00      	cmp	r3, #0
 801aad2:	bf14      	ite	ne
 801aad4:	2301      	movne	r3, #1
 801aad6:	2300      	moveq	r3, #0
 801aad8:	b2db      	uxtb	r3, r3
 801aada:	e02f      	b.n	801ab3c <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	f993 3000 	ldrsb.w	r3, [r3]
 801aae2:	2205      	movs	r2, #5
 801aae4:	2100      	movs	r1, #0
 801aae6:	4618      	mov	r0, r3
 801aae8:	f7fe fedd 	bl	80198a6 <RegionCommonValueInRange>
 801aaec:	4603      	mov	r3, r0
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	bf14      	ite	ne
 801aaf2:	2301      	movne	r3, #1
 801aaf4:	2300      	moveq	r3, #0
 801aaf6:	b2db      	uxtb	r3, r3
 801aaf8:	e020      	b.n	801ab3c <RegionUS915Verify+0xe4>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	f993 3000 	ldrsb.w	r3, [r3]
 801ab00:	220d      	movs	r2, #13
 801ab02:	2108      	movs	r1, #8
 801ab04:	4618      	mov	r0, r3
 801ab06:	f7fe fece 	bl	80198a6 <RegionCommonValueInRange>
 801ab0a:	4603      	mov	r3, r0
 801ab0c:	2b00      	cmp	r3, #0
 801ab0e:	bf14      	ite	ne
 801ab10:	2301      	movne	r3, #1
 801ab12:	2300      	moveq	r3, #0
 801ab14:	b2db      	uxtb	r3, r3
 801ab16:	e011      	b.n	801ab3c <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	f993 3000 	ldrsb.w	r3, [r3]
 801ab1e:	220e      	movs	r2, #14
 801ab20:	2100      	movs	r1, #0
 801ab22:	4618      	mov	r0, r3
 801ab24:	f7fe febf 	bl	80198a6 <RegionCommonValueInRange>
 801ab28:	4603      	mov	r3, r0
 801ab2a:	2b00      	cmp	r3, #0
 801ab2c:	bf14      	ite	ne
 801ab2e:	2301      	movne	r3, #1
 801ab30:	2300      	moveq	r3, #0
 801ab32:	b2db      	uxtb	r3, r3
 801ab34:	e002      	b.n	801ab3c <RegionUS915Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 801ab36:	2300      	movs	r3, #0
 801ab38:	e000      	b.n	801ab3c <RegionUS915Verify+0xe4>
        }
        default:
            return false;
 801ab3a:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 801ab3c:	4618      	mov	r0, r3
 801ab3e:	3708      	adds	r7, #8
 801ab40:	46bd      	mov	sp, r7
 801ab42:	bd80      	pop	{r7, pc}

0801ab44 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801ab44:	b480      	push	{r7}
 801ab46:	b085      	sub	sp, #20
 801ab48:	af00      	add	r7, sp, #0
 801ab4a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 801ab4c:	687b      	ldr	r3, [r7, #4]
 801ab4e:	7a1b      	ldrb	r3, [r3, #8]
 801ab50:	2b10      	cmp	r3, #16
 801ab52:	d160      	bne.n	801ac16 <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	685b      	ldr	r3, [r3, #4]
 801ab58:	330f      	adds	r3, #15
 801ab5a:	781b      	ldrb	r3, [r3, #0]
 801ab5c:	2b01      	cmp	r3, #1
 801ab5e:	d15c      	bne.n	801ac1a <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801ab60:	2300      	movs	r3, #0
 801ab62:	73fb      	strb	r3, [r7, #15]
 801ab64:	2300      	movs	r3, #0
 801ab66:	73bb      	strb	r3, [r7, #14]
 801ab68:	e051      	b.n	801ac0e <RegionUS915ApplyCFList+0xca>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 801ab6a:	687b      	ldr	r3, [r7, #4]
 801ab6c:	685a      	ldr	r2, [r3, #4]
 801ab6e:	7bbb      	ldrb	r3, [r7, #14]
 801ab70:	4413      	add	r3, r2
 801ab72:	7819      	ldrb	r1, [r3, #0]
 801ab74:	4b2b      	ldr	r3, [pc, #172]	; (801ac24 <RegionUS915ApplyCFList+0xe0>)
 801ab76:	681b      	ldr	r3, [r3, #0]
 801ab78:	7bfa      	ldrb	r2, [r7, #15]
 801ab7a:	b289      	uxth	r1, r1
 801ab7c:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801ab80:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 801ab84:	4b27      	ldr	r3, [pc, #156]	; (801ac24 <RegionUS915ApplyCFList+0xe0>)
 801ab86:	681b      	ldr	r3, [r3, #0]
 801ab88:	7bfa      	ldrb	r2, [r7, #15]
 801ab8a:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801ab8e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	685a      	ldr	r2, [r3, #4]
 801ab96:	7bbb      	ldrb	r3, [r7, #14]
 801ab98:	3301      	adds	r3, #1
 801ab9a:	4413      	add	r3, r2
 801ab9c:	781b      	ldrb	r3, [r3, #0]
 801ab9e:	b29b      	uxth	r3, r3
 801aba0:	021b      	lsls	r3, r3, #8
 801aba2:	b299      	uxth	r1, r3
 801aba4:	4b1f      	ldr	r3, [pc, #124]	; (801ac24 <RegionUS915ApplyCFList+0xe0>)
 801aba6:	681b      	ldr	r3, [r3, #0]
 801aba8:	7bfa      	ldrb	r2, [r7, #15]
 801abaa:	4301      	orrs	r1, r0
 801abac:	b289      	uxth	r1, r1
 801abae:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801abb2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 801abb6:	7bfb      	ldrb	r3, [r7, #15]
 801abb8:	2b04      	cmp	r3, #4
 801abba:	d10f      	bne.n	801abdc <RegionUS915ApplyCFList+0x98>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 801abbc:	4b19      	ldr	r3, [pc, #100]	; (801ac24 <RegionUS915ApplyCFList+0xe0>)
 801abbe:	681b      	ldr	r3, [r3, #0]
 801abc0:	7bfa      	ldrb	r2, [r7, #15]
 801abc2:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801abc6:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801abca:	4b16      	ldr	r3, [pc, #88]	; (801ac24 <RegionUS915ApplyCFList+0xe0>)
 801abcc:	681b      	ldr	r3, [r3, #0]
 801abce:	7bfa      	ldrb	r2, [r7, #15]
 801abd0:	b2c9      	uxtb	r1, r1
 801abd2:	b289      	uxth	r1, r1
 801abd4:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801abd8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 801abdc:	4b12      	ldr	r3, [pc, #72]	; (801ac28 <RegionUS915ApplyCFList+0xe4>)
 801abde:	681b      	ldr	r3, [r3, #0]
 801abe0:	7bfa      	ldrb	r2, [r7, #15]
 801abe2:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801abe6:	4b0f      	ldr	r3, [pc, #60]	; (801ac24 <RegionUS915ApplyCFList+0xe0>)
 801abe8:	681b      	ldr	r3, [r3, #0]
 801abea:	7bfa      	ldrb	r2, [r7, #15]
 801abec:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801abf0:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801abf4:	4b0c      	ldr	r3, [pc, #48]	; (801ac28 <RegionUS915ApplyCFList+0xe4>)
 801abf6:	681b      	ldr	r3, [r3, #0]
 801abf8:	7bfa      	ldrb	r2, [r7, #15]
 801abfa:	4001      	ands	r1, r0
 801abfc:	b289      	uxth	r1, r1
 801abfe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801ac02:	7bfb      	ldrb	r3, [r7, #15]
 801ac04:	3301      	adds	r3, #1
 801ac06:	73fb      	strb	r3, [r7, #15]
 801ac08:	7bbb      	ldrb	r3, [r7, #14]
 801ac0a:	3302      	adds	r3, #2
 801ac0c:	73bb      	strb	r3, [r7, #14]
 801ac0e:	7bfb      	ldrb	r3, [r7, #15]
 801ac10:	2b04      	cmp	r3, #4
 801ac12:	d9aa      	bls.n	801ab6a <RegionUS915ApplyCFList+0x26>
 801ac14:	e002      	b.n	801ac1c <RegionUS915ApplyCFList+0xd8>
        return;
 801ac16:	bf00      	nop
 801ac18:	e000      	b.n	801ac1c <RegionUS915ApplyCFList+0xd8>
        return;
 801ac1a:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 801ac1c:	3714      	adds	r7, #20
 801ac1e:	46bd      	mov	sp, r7
 801ac20:	bc80      	pop	{r7}
 801ac22:	4770      	bx	lr
 801ac24:	20001c90 	.word	0x20001c90
 801ac28:	20001c8c 	.word	0x20001c8c

0801ac2c <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801ac2c:	b580      	push	{r7, lr}
 801ac2e:	b084      	sub	sp, #16
 801ac30:	af00      	add	r7, sp, #0
 801ac32:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	681b      	ldr	r3, [r3, #0]
 801ac38:	2204      	movs	r2, #4
 801ac3a:	2100      	movs	r1, #0
 801ac3c:	4618      	mov	r0, r3
 801ac3e:	f7fe fe83 	bl	8019948 <RegionCommonCountChannels>
 801ac42:	4603      	mov	r3, r0
 801ac44:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 801ac46:	7bbb      	ldrb	r3, [r7, #14]
 801ac48:	2b01      	cmp	r3, #1
 801ac4a:	d804      	bhi.n	801ac56 <RegionUS915ChanMaskSet+0x2a>
 801ac4c:	7bbb      	ldrb	r3, [r7, #14]
 801ac4e:	2b00      	cmp	r3, #0
 801ac50:	d001      	beq.n	801ac56 <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 801ac52:	2300      	movs	r3, #0
 801ac54:	e04a      	b.n	801acec <RegionUS915ChanMaskSet+0xc0>
    }

    switch( chanMaskSet->ChannelsMaskType )
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	791b      	ldrb	r3, [r3, #4]
 801ac5a:	2b00      	cmp	r3, #0
 801ac5c:	d002      	beq.n	801ac64 <RegionUS915ChanMaskSet+0x38>
 801ac5e:	2b01      	cmp	r3, #1
 801ac60:	d036      	beq.n	801acd0 <RegionUS915ChanMaskSet+0xa4>
 801ac62:	e040      	b.n	801ace6 <RegionUS915ChanMaskSet+0xba>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801ac64:	4b23      	ldr	r3, [pc, #140]	; (801acf4 <RegionUS915ChanMaskSet+0xc8>)
 801ac66:	681b      	ldr	r3, [r3, #0]
 801ac68:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801ac6c:	687b      	ldr	r3, [r7, #4]
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	2206      	movs	r2, #6
 801ac72:	4619      	mov	r1, r3
 801ac74:	f7fe fe94 	bl	80199a0 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 801ac78:	4b1e      	ldr	r3, [pc, #120]	; (801acf4 <RegionUS915ChanMaskSet+0xc8>)
 801ac7a:	681b      	ldr	r3, [r3, #0]
 801ac7c:	f8b3 2374 	ldrh.w	r2, [r3, #884]	; 0x374
 801ac80:	4b1c      	ldr	r3, [pc, #112]	; (801acf4 <RegionUS915ChanMaskSet+0xc8>)
 801ac82:	681b      	ldr	r3, [r3, #0]
 801ac84:	b2d2      	uxtb	r2, r2
 801ac86:	b292      	uxth	r2, r2
 801ac88:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801ac8c:	4b19      	ldr	r3, [pc, #100]	; (801acf4 <RegionUS915ChanMaskSet+0xc8>)
 801ac8e:	681b      	ldr	r3, [r3, #0]
 801ac90:	2200      	movs	r2, #0
 801ac92:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801ac96:	2300      	movs	r3, #0
 801ac98:	73fb      	strb	r3, [r7, #15]
 801ac9a:	e015      	b.n	801acc8 <RegionUS915ChanMaskSet+0x9c>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801ac9c:	4b16      	ldr	r3, [pc, #88]	; (801acf8 <RegionUS915ChanMaskSet+0xcc>)
 801ac9e:	681b      	ldr	r3, [r3, #0]
 801aca0:	7bfa      	ldrb	r2, [r7, #15]
 801aca2:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801aca6:	4b13      	ldr	r3, [pc, #76]	; (801acf4 <RegionUS915ChanMaskSet+0xc8>)
 801aca8:	681b      	ldr	r3, [r3, #0]
 801acaa:	7bfa      	ldrb	r2, [r7, #15]
 801acac:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801acb0:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801acb4:	4b10      	ldr	r3, [pc, #64]	; (801acf8 <RegionUS915ChanMaskSet+0xcc>)
 801acb6:	681b      	ldr	r3, [r3, #0]
 801acb8:	7bfa      	ldrb	r2, [r7, #15]
 801acba:	4001      	ands	r1, r0
 801acbc:	b289      	uxth	r1, r1
 801acbe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801acc2:	7bfb      	ldrb	r3, [r7, #15]
 801acc4:	3301      	adds	r3, #1
 801acc6:	73fb      	strb	r3, [r7, #15]
 801acc8:	7bfb      	ldrb	r3, [r7, #15]
 801acca:	2b05      	cmp	r3, #5
 801accc:	d9e6      	bls.n	801ac9c <RegionUS915ChanMaskSet+0x70>
            }
            break;
 801acce:	e00c      	b.n	801acea <RegionUS915ChanMaskSet+0xbe>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801acd0:	4b08      	ldr	r3, [pc, #32]	; (801acf4 <RegionUS915ChanMaskSet+0xc8>)
 801acd2:	681b      	ldr	r3, [r3, #0]
 801acd4:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	2206      	movs	r2, #6
 801acde:	4619      	mov	r1, r3
 801ace0:	f7fe fe5e 	bl	80199a0 <RegionCommonChanMaskCopy>
            break;
 801ace4:	e001      	b.n	801acea <RegionUS915ChanMaskSet+0xbe>
        }
        default:
            return false;
 801ace6:	2300      	movs	r3, #0
 801ace8:	e000      	b.n	801acec <RegionUS915ChanMaskSet+0xc0>
    }
    return true;
 801acea:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801acec:	4618      	mov	r0, r3
 801acee:	3710      	adds	r7, #16
 801acf0:	46bd      	mov	sp, r7
 801acf2:	bd80      	pop	{r7, pc}
 801acf4:	20001c90 	.word	0x20001c90
 801acf8:	20001c8c 	.word	0x20001c8c

0801acfc <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801acfc:	b580      	push	{r7, lr}
 801acfe:	b088      	sub	sp, #32
 801ad00:	af02      	add	r7, sp, #8
 801ad02:	60ba      	str	r2, [r7, #8]
 801ad04:	607b      	str	r3, [r7, #4]
 801ad06:	4603      	mov	r3, r0
 801ad08:	73fb      	strb	r3, [r7, #15]
 801ad0a:	460b      	mov	r3, r1
 801ad0c:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 801ad0e:	2300      	movs	r3, #0
 801ad10:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 801ad12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ad16:	2b0d      	cmp	r3, #13
 801ad18:	bfa8      	it	ge
 801ad1a:	230d      	movge	r3, #13
 801ad1c:	b25a      	sxtb	r2, r3
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ad28:	4916      	ldr	r1, [pc, #88]	; (801ad84 <RegionUS915ComputeRxWindowParameters+0x88>)
 801ad2a:	4618      	mov	r0, r3
 801ad2c:	f7ff fac8 	bl	801a2c0 <RegionCommonGetBandwidth>
 801ad30:	4603      	mov	r3, r0
 801ad32:	b2da      	uxtb	r2, r3
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 801ad38:	687b      	ldr	r3, [r7, #4]
 801ad3a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ad3e:	461a      	mov	r2, r3
 801ad40:	4b11      	ldr	r3, [pc, #68]	; (801ad88 <RegionUS915ComputeRxWindowParameters+0x8c>)
 801ad42:	5c9a      	ldrb	r2, [r3, r2]
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ad4a:	4619      	mov	r1, r3
 801ad4c:	4b0d      	ldr	r3, [pc, #52]	; (801ad84 <RegionUS915ComputeRxWindowParameters+0x88>)
 801ad4e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ad52:	4619      	mov	r1, r3
 801ad54:	4610      	mov	r0, r2
 801ad56:	f7ff f841 	bl	8019ddc <RegionCommonComputeSymbolTimeLoRa>
 801ad5a:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801ad5c:	4b0b      	ldr	r3, [pc, #44]	; (801ad8c <RegionUS915ComputeRxWindowParameters+0x90>)
 801ad5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ad60:	4798      	blx	r3
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	3308      	adds	r3, #8
 801ad66:	687a      	ldr	r2, [r7, #4]
 801ad68:	320c      	adds	r2, #12
 801ad6a:	7bb9      	ldrb	r1, [r7, #14]
 801ad6c:	9201      	str	r2, [sp, #4]
 801ad6e:	9300      	str	r3, [sp, #0]
 801ad70:	4603      	mov	r3, r0
 801ad72:	68ba      	ldr	r2, [r7, #8]
 801ad74:	6978      	ldr	r0, [r7, #20]
 801ad76:	f7ff f847 	bl	8019e08 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 801ad7a:	bf00      	nop
 801ad7c:	3718      	adds	r7, #24
 801ad7e:	46bd      	mov	sp, r7
 801ad80:	bd80      	pop	{r7, pc}
 801ad82:	bf00      	nop
 801ad84:	08021d88 	.word	0x08021d88
 801ad88:	08021d78 	.word	0x08021d78
 801ad8c:	08021dfc 	.word	0x08021dfc

0801ad90 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801ad90:	b590      	push	{r4, r7, lr}
 801ad92:	b091      	sub	sp, #68	; 0x44
 801ad94:	af0a      	add	r7, sp, #40	; 0x28
 801ad96:	6078      	str	r0, [r7, #4]
 801ad98:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 801ad9a:	687b      	ldr	r3, [r7, #4]
 801ad9c:	785b      	ldrb	r3, [r3, #1]
 801ad9e:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801ada0:	2300      	movs	r3, #0
 801ada2:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 801ada4:	2300      	movs	r3, #0
 801ada6:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	685b      	ldr	r3, [r3, #4]
 801adac:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801adae:	4b34      	ldr	r3, [pc, #208]	; (801ae80 <RegionUS915RxConfig+0xf0>)
 801adb0:	685b      	ldr	r3, [r3, #4]
 801adb2:	4798      	blx	r3
 801adb4:	4603      	mov	r3, r0
 801adb6:	2b00      	cmp	r3, #0
 801adb8:	d001      	beq.n	801adbe <RegionUS915RxConfig+0x2e>
    {
        return false;
 801adba:	2300      	movs	r3, #0
 801adbc:	e05c      	b.n	801ae78 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	7cdb      	ldrb	r3, [r3, #19]
 801adc2:	2b00      	cmp	r3, #0
 801adc4:	d109      	bne.n	801adda <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 801adc6:	687b      	ldr	r3, [r7, #4]
 801adc8:	781b      	ldrb	r3, [r3, #0]
 801adca:	f003 0307 	and.w	r3, r3, #7
 801adce:	4a2d      	ldr	r2, [pc, #180]	; (801ae84 <RegionUS915RxConfig+0xf4>)
 801add0:	fb03 f202 	mul.w	r2, r3, r2
 801add4:	4b2c      	ldr	r3, [pc, #176]	; (801ae88 <RegionUS915RxConfig+0xf8>)
 801add6:	4413      	add	r3, r2
 801add8:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 801adda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801adde:	4a2b      	ldr	r2, [pc, #172]	; (801ae8c <RegionUS915RxConfig+0xfc>)
 801ade0:	5cd3      	ldrb	r3, [r2, r3]
 801ade2:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801ade4:	4b26      	ldr	r3, [pc, #152]	; (801ae80 <RegionUS915RxConfig+0xf0>)
 801ade6:	68db      	ldr	r3, [r3, #12]
 801ade8:	6938      	ldr	r0, [r7, #16]
 801adea:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801adec:	4b24      	ldr	r3, [pc, #144]	; (801ae80 <RegionUS915RxConfig+0xf0>)
 801adee:	699c      	ldr	r4, [r3, #24]
 801adf0:	687b      	ldr	r3, [r7, #4]
 801adf2:	789b      	ldrb	r3, [r3, #2]
 801adf4:	4618      	mov	r0, r3
 801adf6:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	689b      	ldr	r3, [r3, #8]
 801adfe:	b29b      	uxth	r3, r3
 801ae00:	687a      	ldr	r2, [r7, #4]
 801ae02:	7c92      	ldrb	r2, [r2, #18]
 801ae04:	9209      	str	r2, [sp, #36]	; 0x24
 801ae06:	2201      	movs	r2, #1
 801ae08:	9208      	str	r2, [sp, #32]
 801ae0a:	2200      	movs	r2, #0
 801ae0c:	9207      	str	r2, [sp, #28]
 801ae0e:	2200      	movs	r2, #0
 801ae10:	9206      	str	r2, [sp, #24]
 801ae12:	2200      	movs	r2, #0
 801ae14:	9205      	str	r2, [sp, #20]
 801ae16:	2200      	movs	r2, #0
 801ae18:	9204      	str	r2, [sp, #16]
 801ae1a:	2200      	movs	r2, #0
 801ae1c:	9203      	str	r2, [sp, #12]
 801ae1e:	9302      	str	r3, [sp, #8]
 801ae20:	2308      	movs	r3, #8
 801ae22:	9301      	str	r3, [sp, #4]
 801ae24:	2300      	movs	r3, #0
 801ae26:	9300      	str	r3, [sp, #0]
 801ae28:	2301      	movs	r3, #1
 801ae2a:	460a      	mov	r2, r1
 801ae2c:	4601      	mov	r1, r0
 801ae2e:	2001      	movs	r0, #1
 801ae30:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	7c5b      	ldrb	r3, [r3, #17]
 801ae36:	2b00      	cmp	r3, #0
 801ae38:	d005      	beq.n	801ae46 <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 801ae3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ae3e:	4a14      	ldr	r2, [pc, #80]	; (801ae90 <RegionUS915RxConfig+0x100>)
 801ae40:	5cd3      	ldrb	r3, [r2, r3]
 801ae42:	75fb      	strb	r3, [r7, #23]
 801ae44:	e004      	b.n	801ae50 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 801ae46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ae4a:	4a12      	ldr	r2, [pc, #72]	; (801ae94 <RegionUS915RxConfig+0x104>)
 801ae4c:	5cd3      	ldrb	r3, [r2, r3]
 801ae4e:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801ae50:	4b0b      	ldr	r3, [pc, #44]	; (801ae80 <RegionUS915RxConfig+0xf0>)
 801ae52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ae54:	7dfa      	ldrb	r2, [r7, #23]
 801ae56:	320d      	adds	r2, #13
 801ae58:	b2d2      	uxtb	r2, r2
 801ae5a:	4611      	mov	r1, r2
 801ae5c:	2001      	movs	r0, #1
 801ae5e:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801ae60:	687b      	ldr	r3, [r7, #4]
 801ae62:	7cdb      	ldrb	r3, [r3, #19]
 801ae64:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801ae68:	6939      	ldr	r1, [r7, #16]
 801ae6a:	4618      	mov	r0, r3
 801ae6c:	f7ff fa46 	bl	801a2fc <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 801ae70:	683b      	ldr	r3, [r7, #0]
 801ae72:	7bfa      	ldrb	r2, [r7, #15]
 801ae74:	701a      	strb	r2, [r3, #0]
    return true;
 801ae76:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801ae78:	4618      	mov	r0, r3
 801ae7a:	371c      	adds	r7, #28
 801ae7c:	46bd      	mov	sp, r7
 801ae7e:	bd90      	pop	{r4, r7, pc}
 801ae80:	08021dfc 	.word	0x08021dfc
 801ae84:	000927c0 	.word	0x000927c0
 801ae88:	370870a0 	.word	0x370870a0
 801ae8c:	08021d78 	.word	0x08021d78
 801ae90:	08021dec 	.word	0x08021dec
 801ae94:	08021ddc 	.word	0x08021ddc

0801ae98 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801ae98:	b590      	push	{r4, r7, lr}
 801ae9a:	b093      	sub	sp, #76	; 0x4c
 801ae9c:	af0a      	add	r7, sp, #40	; 0x28
 801ae9e:	60f8      	str	r0, [r7, #12]
 801aea0:	60b9      	str	r1, [r7, #8]
 801aea2:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 801aea4:	68fb      	ldr	r3, [r7, #12]
 801aea6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801aeaa:	461a      	mov	r2, r3
 801aeac:	4b49      	ldr	r3, [pc, #292]	; (801afd4 <RegionUS915TxConfig+0x13c>)
 801aeae:	5c9b      	ldrb	r3, [r3, r2]
 801aeb0:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 801aeb2:	68fb      	ldr	r3, [r7, #12]
 801aeb4:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801aeb8:	4b47      	ldr	r3, [pc, #284]	; (801afd8 <RegionUS915TxConfig+0x140>)
 801aeba:	681a      	ldr	r2, [r3, #0]
 801aebc:	4b47      	ldr	r3, [pc, #284]	; (801afdc <RegionUS915TxConfig+0x144>)
 801aebe:	6819      	ldr	r1, [r3, #0]
 801aec0:	68fb      	ldr	r3, [r7, #12]
 801aec2:	781b      	ldrb	r3, [r3, #0]
 801aec4:	461c      	mov	r4, r3
 801aec6:	4623      	mov	r3, r4
 801aec8:	005b      	lsls	r3, r3, #1
 801aeca:	4423      	add	r3, r4
 801aecc:	009b      	lsls	r3, r3, #2
 801aece:	440b      	add	r3, r1
 801aed0:	3309      	adds	r3, #9
 801aed2:	781b      	ldrb	r3, [r3, #0]
 801aed4:	4619      	mov	r1, r3
 801aed6:	460b      	mov	r3, r1
 801aed8:	005b      	lsls	r3, r3, #1
 801aeda:	440b      	add	r3, r1
 801aedc:	00db      	lsls	r3, r3, #3
 801aede:	4413      	add	r3, r2
 801aee0:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801aee4:	68fb      	ldr	r3, [r7, #12]
 801aee6:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801aeea:	4b3c      	ldr	r3, [pc, #240]	; (801afdc <RegionUS915TxConfig+0x144>)
 801aeec:	681b      	ldr	r3, [r3, #0]
 801aeee:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801aef2:	f7ff fa4d 	bl	801a390 <LimitTxPower>
 801aef6:	4603      	mov	r3, r0
 801aef8:	77bb      	strb	r3, [r7, #30]
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 801aefa:	68fb      	ldr	r3, [r7, #12]
 801aefc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801af00:	4937      	ldr	r1, [pc, #220]	; (801afe0 <RegionUS915TxConfig+0x148>)
 801af02:	4618      	mov	r0, r3
 801af04:	f7ff f9dc 	bl	801a2c0 <RegionCommonGetBandwidth>
 801af08:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801af0a:	2300      	movs	r3, #0
 801af0c:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 801af0e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801af12:	f04f 0200 	mov.w	r2, #0
 801af16:	4933      	ldr	r1, [pc, #204]	; (801afe4 <RegionUS915TxConfig+0x14c>)
 801af18:	4618      	mov	r0, r3
 801af1a:	f7ff f82d 	bl	8019f78 <RegionCommonComputeTxPower>
 801af1e:	4603      	mov	r3, r0
 801af20:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801af22:	4b31      	ldr	r3, [pc, #196]	; (801afe8 <RegionUS915TxConfig+0x150>)
 801af24:	68da      	ldr	r2, [r3, #12]
 801af26:	4b2d      	ldr	r3, [pc, #180]	; (801afdc <RegionUS915TxConfig+0x144>)
 801af28:	6819      	ldr	r1, [r3, #0]
 801af2a:	68fb      	ldr	r3, [r7, #12]
 801af2c:	781b      	ldrb	r3, [r3, #0]
 801af2e:	4618      	mov	r0, r3
 801af30:	4603      	mov	r3, r0
 801af32:	005b      	lsls	r3, r3, #1
 801af34:	4403      	add	r3, r0
 801af36:	009b      	lsls	r3, r3, #2
 801af38:	440b      	add	r3, r1
 801af3a:	681b      	ldr	r3, [r3, #0]
 801af3c:	4618      	mov	r0, r3
 801af3e:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801af40:	4b29      	ldr	r3, [pc, #164]	; (801afe8 <RegionUS915TxConfig+0x150>)
 801af42:	69dc      	ldr	r4, [r3, #28]
 801af44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801af48:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801af4c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801af50:	9208      	str	r2, [sp, #32]
 801af52:	2200      	movs	r2, #0
 801af54:	9207      	str	r2, [sp, #28]
 801af56:	2200      	movs	r2, #0
 801af58:	9206      	str	r2, [sp, #24]
 801af5a:	2200      	movs	r2, #0
 801af5c:	9205      	str	r2, [sp, #20]
 801af5e:	2201      	movs	r2, #1
 801af60:	9204      	str	r2, [sp, #16]
 801af62:	2200      	movs	r2, #0
 801af64:	9203      	str	r2, [sp, #12]
 801af66:	2208      	movs	r2, #8
 801af68:	9202      	str	r2, [sp, #8]
 801af6a:	2201      	movs	r2, #1
 801af6c:	9201      	str	r2, [sp, #4]
 801af6e:	9300      	str	r3, [sp, #0]
 801af70:	69bb      	ldr	r3, [r7, #24]
 801af72:	2200      	movs	r2, #0
 801af74:	2001      	movs	r0, #1
 801af76:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801af78:	4b18      	ldr	r3, [pc, #96]	; (801afdc <RegionUS915TxConfig+0x144>)
 801af7a:	681a      	ldr	r2, [r3, #0]
 801af7c:	68fb      	ldr	r3, [r7, #12]
 801af7e:	781b      	ldrb	r3, [r3, #0]
 801af80:	4619      	mov	r1, r3
 801af82:	460b      	mov	r3, r1
 801af84:	005b      	lsls	r3, r3, #1
 801af86:	440b      	add	r3, r1
 801af88:	009b      	lsls	r3, r3, #2
 801af8a:	4413      	add	r3, r2
 801af8c:	681a      	ldr	r2, [r3, #0]
 801af8e:	68fb      	ldr	r3, [r7, #12]
 801af90:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801af94:	4619      	mov	r1, r3
 801af96:	4610      	mov	r0, r2
 801af98:	f7ff f9e2 	bl	801a360 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 801af9c:	4b12      	ldr	r3, [pc, #72]	; (801afe8 <RegionUS915TxConfig+0x150>)
 801af9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801afa0:	68fa      	ldr	r2, [r7, #12]
 801afa2:	8992      	ldrh	r2, [r2, #12]
 801afa4:	b2d2      	uxtb	r2, r2
 801afa6:	4611      	mov	r1, r2
 801afa8:	2001      	movs	r0, #1
 801afaa:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801afac:	68fb      	ldr	r3, [r7, #12]
 801afae:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801afb2:	68fb      	ldr	r3, [r7, #12]
 801afb4:	899b      	ldrh	r3, [r3, #12]
 801afb6:	4619      	mov	r1, r3
 801afb8:	4610      	mov	r0, r2
 801afba:	f7ff fa63 	bl	801a484 <GetTimeOnAir>
 801afbe:	4602      	mov	r2, r0
 801afc0:	687b      	ldr	r3, [r7, #4]
 801afc2:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 801afc4:	68bb      	ldr	r3, [r7, #8]
 801afc6:	7fba      	ldrb	r2, [r7, #30]
 801afc8:	701a      	strb	r2, [r3, #0]
    return true;
 801afca:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801afcc:	4618      	mov	r0, r3
 801afce:	3724      	adds	r7, #36	; 0x24
 801afd0:	46bd      	mov	sp, r7
 801afd2:	bd90      	pop	{r4, r7, pc}
 801afd4:	08021d78 	.word	0x08021d78
 801afd8:	20001c94 	.word	0x20001c94
 801afdc:	20001c90 	.word	0x20001c90
 801afe0:	08021d88 	.word	0x08021d88
 801afe4:	41f00000 	.word	0x41f00000
 801afe8:	08021dfc 	.word	0x08021dfc

0801afec <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801afec:	b590      	push	{r4, r7, lr}
 801afee:	b097      	sub	sp, #92	; 0x5c
 801aff0:	af00      	add	r7, sp, #0
 801aff2:	60f8      	str	r0, [r7, #12]
 801aff4:	60b9      	str	r1, [r7, #8]
 801aff6:	607a      	str	r2, [r7, #4]
 801aff8:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801affa:	2307      	movs	r3, #7
 801affc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801b000:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b004:	2200      	movs	r2, #0
 801b006:	601a      	str	r2, [r3, #0]
 801b008:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801b00a:	2300      	movs	r3, #0
 801b00c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    uint8_t bytesProcessed = 0;
 801b010:	2300      	movs	r3, #0
 801b012:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 801b016:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b01a:	2200      	movs	r2, #0
 801b01c:	601a      	str	r2, [r3, #0]
 801b01e:	605a      	str	r2, [r3, #4]
 801b020:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801b022:	4b97      	ldr	r3, [pc, #604]	; (801b280 <RegionUS915LinkAdrReq+0x294>)
 801b024:	681b      	ldr	r3, [r3, #0]
 801b026:	f503 7158 	add.w	r1, r3, #864	; 0x360
 801b02a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b02e:	2206      	movs	r2, #6
 801b030:	4618      	mov	r0, r3
 801b032:	f7fe fcb5 	bl	80199a0 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801b036:	e11b      	b.n	801b270 <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801b038:	68fb      	ldr	r3, [r7, #12]
 801b03a:	685a      	ldr	r2, [r3, #4]
 801b03c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 801b040:	4413      	add	r3, r2
 801b042:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801b046:	4611      	mov	r1, r2
 801b048:	4618      	mov	r0, r3
 801b04a:	f7fe fded 	bl	8019c28 <RegionCommonParseLinkAdrReq>
 801b04e:	4603      	mov	r3, r0
 801b050:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        if( nextIndex == 0 )
 801b054:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801b058:	2b00      	cmp	r3, #0
 801b05a:	f000 8113 	beq.w	801b284 <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801b05e:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801b062:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801b066:	4413      	add	r3, r2
 801b068:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801b06c:	2307      	movs	r3, #7
 801b06e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 801b072:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801b076:	2b06      	cmp	r3, #6
 801b078:	d116      	bne.n	801b0a8 <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 801b07a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b07e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0xFFFF;
 801b082:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b086:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0xFFFF;
 801b08a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b08e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0xFFFF;
 801b092:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b096:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801b09a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801b09e:	b2db      	uxtb	r3, r3
 801b0a0:	b29b      	uxth	r3, r3
 801b0a2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801b0a6:	e0e3      	b.n	801b270 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 801b0a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801b0ac:	2b07      	cmp	r3, #7
 801b0ae:	d112      	bne.n	801b0d6 <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 801b0b0:	2300      	movs	r3, #0
 801b0b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0x0000;
 801b0b6:	2300      	movs	r3, #0
 801b0b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0x0000;
 801b0bc:	2300      	movs	r3, #0
 801b0be:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0x0000;
 801b0c2:	2300      	movs	r3, #0
 801b0c4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801b0c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801b0cc:	b2db      	uxtb	r3, r3
 801b0ce:	b29b      	uxth	r3, r3
 801b0d0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801b0d4:	e0cc      	b.n	801b270 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 801b0d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801b0da:	2b05      	cmp	r3, #5
 801b0dc:	f040 80bf 	bne.w	801b25e <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 801b0e0:	2301      	movs	r3, #1
 801b0e2:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 801b0e6:	2300      	movs	r3, #0
 801b0e8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 801b0ec:	2300      	movs	r3, #0
 801b0ee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801b0f2:	e0ae      	b.n	801b252 <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 801b0f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801b0f8:	b2da      	uxtb	r2, r3
 801b0fa:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801b0fe:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b102:	fa01 f303 	lsl.w	r3, r1, r3
 801b106:	4013      	ands	r3, r2
 801b108:	2b00      	cmp	r3, #0
 801b10a:	d04d      	beq.n	801b1a8 <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 801b10c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b110:	f003 0301 	and.w	r3, r3, #1
 801b114:	b2db      	uxtb	r3, r3
 801b116:	2b00      	cmp	r3, #0
 801b118:	d120      	bne.n	801b15c <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 801b11a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b11e:	005b      	lsls	r3, r3, #1
 801b120:	3358      	adds	r3, #88	; 0x58
 801b122:	443b      	add	r3, r7
 801b124:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801b128:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b12c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 801b130:	b292      	uxth	r2, r2
 801b132:	005b      	lsls	r3, r3, #1
 801b134:	3358      	adds	r3, #88	; 0x58
 801b136:	443b      	add	r3, r7
 801b138:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801b13c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801b140:	b21a      	sxth	r2, r3
 801b142:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801b146:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b14a:	fa01 f303 	lsl.w	r3, r1, r3
 801b14e:	b21b      	sxth	r3, r3
 801b150:	4313      	orrs	r3, r2
 801b152:	b21b      	sxth	r3, r3
 801b154:	b29b      	uxth	r3, r3
 801b156:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801b15a:	e075      	b.n	801b248 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 801b15c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b160:	005b      	lsls	r3, r3, #1
 801b162:	3358      	adds	r3, #88	; 0x58
 801b164:	443b      	add	r3, r7
 801b166:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801b16a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b16e:	f062 02ff 	orn	r2, r2, #255	; 0xff
 801b172:	b292      	uxth	r2, r2
 801b174:	005b      	lsls	r3, r3, #1
 801b176:	3358      	adds	r3, #88	; 0x58
 801b178:	443b      	add	r3, r7
 801b17a:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801b17e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801b182:	b21a      	sxth	r2, r3
 801b184:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801b188:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b18c:	fa01 f303 	lsl.w	r3, r1, r3
 801b190:	b21b      	sxth	r3, r3
 801b192:	4313      	orrs	r3, r2
 801b194:	b21b      	sxth	r3, r3
 801b196:	b29b      	uxth	r3, r3
 801b198:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801b19c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b1a0:	3301      	adds	r3, #1
 801b1a2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 801b1a6:	e04f      	b.n	801b248 <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 801b1a8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b1ac:	f003 0301 	and.w	r3, r3, #1
 801b1b0:	b2db      	uxtb	r3, r3
 801b1b2:	2b00      	cmp	r3, #0
 801b1b4:	d122      	bne.n	801b1fc <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 801b1b6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b1ba:	005b      	lsls	r3, r3, #1
 801b1bc:	3358      	adds	r3, #88	; 0x58
 801b1be:	443b      	add	r3, r7
 801b1c0:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801b1c4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b1c8:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801b1cc:	b292      	uxth	r2, r2
 801b1ce:	005b      	lsls	r3, r3, #1
 801b1d0:	3358      	adds	r3, #88	; 0x58
 801b1d2:	443b      	add	r3, r7
 801b1d4:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801b1d8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801b1dc:	b21a      	sxth	r2, r3
 801b1de:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801b1e2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b1e6:	fa01 f303 	lsl.w	r3, r1, r3
 801b1ea:	b21b      	sxth	r3, r3
 801b1ec:	43db      	mvns	r3, r3
 801b1ee:	b21b      	sxth	r3, r3
 801b1f0:	4013      	ands	r3, r2
 801b1f2:	b21b      	sxth	r3, r3
 801b1f4:	b29b      	uxth	r3, r3
 801b1f6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801b1fa:	e025      	b.n	801b248 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 801b1fc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b200:	005b      	lsls	r3, r3, #1
 801b202:	3358      	adds	r3, #88	; 0x58
 801b204:	443b      	add	r3, r7
 801b206:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801b20a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b20e:	b2d2      	uxtb	r2, r2
 801b210:	b292      	uxth	r2, r2
 801b212:	005b      	lsls	r3, r3, #1
 801b214:	3358      	adds	r3, #88	; 0x58
 801b216:	443b      	add	r3, r7
 801b218:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801b21c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801b220:	b21a      	sxth	r2, r3
 801b222:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801b226:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b22a:	fa01 f303 	lsl.w	r3, r1, r3
 801b22e:	b21b      	sxth	r3, r3
 801b230:	43db      	mvns	r3, r3
 801b232:	b21b      	sxth	r3, r3
 801b234:	4013      	ands	r3, r2
 801b236:	b21b      	sxth	r3, r3
 801b238:	b29b      	uxth	r3, r3
 801b23a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801b23e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b242:	3301      	adds	r3, #1
 801b244:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 801b248:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b24c:	3301      	adds	r3, #1
 801b24e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801b252:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b256:	2b07      	cmp	r3, #7
 801b258:	f67f af4c 	bls.w	801b0f4 <RegionUS915LinkAdrReq+0x108>
 801b25c:	e008      	b.n	801b270 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 801b25e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801b262:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 801b266:	005b      	lsls	r3, r3, #1
 801b268:	3358      	adds	r3, #88	; 0x58
 801b26a:	443b      	add	r3, r7
 801b26c:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801b270:	68fb      	ldr	r3, [r7, #12]
 801b272:	7a1b      	ldrb	r3, [r3, #8]
 801b274:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801b278:	429a      	cmp	r2, r3
 801b27a:	f4ff aedd 	bcc.w	801b038 <RegionUS915LinkAdrReq+0x4c>
 801b27e:	e002      	b.n	801b286 <RegionUS915LinkAdrReq+0x29a>
 801b280:	20001c90 	.word	0x20001c90
            break; // break loop, since no more request has been found
 801b284:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 801b286:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801b28a:	2b03      	cmp	r3, #3
 801b28c:	dc0f      	bgt.n	801b2ae <RegionUS915LinkAdrReq+0x2c2>
 801b28e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b292:	2204      	movs	r2, #4
 801b294:	2100      	movs	r1, #0
 801b296:	4618      	mov	r0, r3
 801b298:	f7fe fb56 	bl	8019948 <RegionCommonCountChannels>
 801b29c:	4603      	mov	r3, r0
 801b29e:	2b01      	cmp	r3, #1
 801b2a0:	d805      	bhi.n	801b2ae <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 801b2a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b2a6:	f023 0301 	bic.w	r3, r3, #1
 801b2aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801b2ae:	2302      	movs	r3, #2
 801b2b0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801b2b4:	68fb      	ldr	r3, [r7, #12]
 801b2b6:	7a5b      	ldrb	r3, [r3, #9]
 801b2b8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 801b2bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b2c0:	4618      	mov	r0, r3
 801b2c2:	f7ff f90f 	bl	801a4e4 <RegionUS915GetPhyParam>
 801b2c6:	4603      	mov	r3, r0
 801b2c8:	637b      	str	r3, [r7, #52]	; 0x34

    linkAdrVerifyParams.Status = status;
 801b2ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b2ce:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801b2d0:	68fb      	ldr	r3, [r7, #12]
 801b2d2:	7a9b      	ldrb	r3, [r3, #10]
 801b2d4:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801b2d6:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801b2da:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801b2dc:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 801b2e0:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801b2e2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801b2e6:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801b2e8:	68fb      	ldr	r3, [r7, #12]
 801b2ea:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801b2ee:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801b2f0:	68fb      	ldr	r3, [r7, #12]
 801b2f2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801b2f6:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801b2f8:	68fb      	ldr	r3, [r7, #12]
 801b2fa:	7b5b      	ldrb	r3, [r3, #13]
 801b2fc:	b25b      	sxtb	r3, r3
 801b2fe:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 801b300:	2348      	movs	r3, #72	; 0x48
 801b302:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 801b306:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b30a:	627b      	str	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801b30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b30e:	b25b      	sxtb	r3, r3
 801b310:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 801b314:	2304      	movs	r3, #4
 801b316:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801b31a:	4b3f      	ldr	r3, [pc, #252]	; (801b418 <RegionUS915LinkAdrReq+0x42c>)
 801b31c:	681b      	ldr	r3, [r3, #0]
 801b31e:	62fb      	str	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 801b320:	230e      	movs	r3, #14
 801b322:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 801b326:	2300      	movs	r3, #0
 801b328:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801b32c:	68fb      	ldr	r3, [r7, #12]
 801b32e:	681b      	ldr	r3, [r3, #0]
 801b330:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801b332:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 801b336:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b33a:	1c9a      	adds	r2, r3, #2
 801b33c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b340:	1c59      	adds	r1, r3, #1
 801b342:	f107 0014 	add.w	r0, r7, #20
 801b346:	4623      	mov	r3, r4
 801b348:	f7fe fcbf 	bl	8019cca <RegionCommonLinkAdrReqVerifyParams>
 801b34c:	4603      	mov	r3, r0
 801b34e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801b352:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b356:	2b07      	cmp	r3, #7
 801b358:	d147      	bne.n	801b3ea <RegionUS915LinkAdrReq+0x3fe>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 801b35a:	4b2f      	ldr	r3, [pc, #188]	; (801b418 <RegionUS915LinkAdrReq+0x42c>)
 801b35c:	681b      	ldr	r3, [r3, #0]
 801b35e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801b362:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801b366:	2206      	movs	r2, #6
 801b368:	4618      	mov	r0, r3
 801b36a:	f7fe fb19 	bl	80199a0 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 801b36e:	4b2b      	ldr	r3, [pc, #172]	; (801b41c <RegionUS915LinkAdrReq+0x430>)
 801b370:	681b      	ldr	r3, [r3, #0]
 801b372:	8819      	ldrh	r1, [r3, #0]
 801b374:	4b28      	ldr	r3, [pc, #160]	; (801b418 <RegionUS915LinkAdrReq+0x42c>)
 801b376:	681b      	ldr	r3, [r3, #0]
 801b378:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 801b37c:	4b27      	ldr	r3, [pc, #156]	; (801b41c <RegionUS915LinkAdrReq+0x430>)
 801b37e:	681b      	ldr	r3, [r3, #0]
 801b380:	400a      	ands	r2, r1
 801b382:	b292      	uxth	r2, r2
 801b384:	801a      	strh	r2, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 801b386:	4b25      	ldr	r3, [pc, #148]	; (801b41c <RegionUS915LinkAdrReq+0x430>)
 801b388:	681b      	ldr	r3, [r3, #0]
 801b38a:	8859      	ldrh	r1, [r3, #2]
 801b38c:	4b22      	ldr	r3, [pc, #136]	; (801b418 <RegionUS915LinkAdrReq+0x42c>)
 801b38e:	681b      	ldr	r3, [r3, #0]
 801b390:	f8b3 2362 	ldrh.w	r2, [r3, #866]	; 0x362
 801b394:	4b21      	ldr	r3, [pc, #132]	; (801b41c <RegionUS915LinkAdrReq+0x430>)
 801b396:	681b      	ldr	r3, [r3, #0]
 801b398:	400a      	ands	r2, r1
 801b39a:	b292      	uxth	r2, r2
 801b39c:	805a      	strh	r2, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 801b39e:	4b1f      	ldr	r3, [pc, #124]	; (801b41c <RegionUS915LinkAdrReq+0x430>)
 801b3a0:	681b      	ldr	r3, [r3, #0]
 801b3a2:	8899      	ldrh	r1, [r3, #4]
 801b3a4:	4b1c      	ldr	r3, [pc, #112]	; (801b418 <RegionUS915LinkAdrReq+0x42c>)
 801b3a6:	681b      	ldr	r3, [r3, #0]
 801b3a8:	f8b3 2364 	ldrh.w	r2, [r3, #868]	; 0x364
 801b3ac:	4b1b      	ldr	r3, [pc, #108]	; (801b41c <RegionUS915LinkAdrReq+0x430>)
 801b3ae:	681b      	ldr	r3, [r3, #0]
 801b3b0:	400a      	ands	r2, r1
 801b3b2:	b292      	uxth	r2, r2
 801b3b4:	809a      	strh	r2, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 801b3b6:	4b19      	ldr	r3, [pc, #100]	; (801b41c <RegionUS915LinkAdrReq+0x430>)
 801b3b8:	681b      	ldr	r3, [r3, #0]
 801b3ba:	88d9      	ldrh	r1, [r3, #6]
 801b3bc:	4b16      	ldr	r3, [pc, #88]	; (801b418 <RegionUS915LinkAdrReq+0x42c>)
 801b3be:	681b      	ldr	r3, [r3, #0]
 801b3c0:	f8b3 2366 	ldrh.w	r2, [r3, #870]	; 0x366
 801b3c4:	4b15      	ldr	r3, [pc, #84]	; (801b41c <RegionUS915LinkAdrReq+0x430>)
 801b3c6:	681b      	ldr	r3, [r3, #0]
 801b3c8:	400a      	ands	r2, r1
 801b3ca:	b292      	uxth	r2, r2
 801b3cc:	80da      	strh	r2, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801b3ce:	4b12      	ldr	r3, [pc, #72]	; (801b418 <RegionUS915LinkAdrReq+0x42c>)
 801b3d0:	681a      	ldr	r2, [r3, #0]
 801b3d2:	4b12      	ldr	r3, [pc, #72]	; (801b41c <RegionUS915LinkAdrReq+0x430>)
 801b3d4:	681b      	ldr	r3, [r3, #0]
 801b3d6:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 801b3da:	811a      	strh	r2, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 801b3dc:	4b0e      	ldr	r3, [pc, #56]	; (801b418 <RegionUS915LinkAdrReq+0x42c>)
 801b3de:	681a      	ldr	r2, [r3, #0]
 801b3e0:	4b0e      	ldr	r3, [pc, #56]	; (801b41c <RegionUS915LinkAdrReq+0x430>)
 801b3e2:	681b      	ldr	r3, [r3, #0]
 801b3e4:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 801b3e8:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801b3ea:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 801b3ee:	68bb      	ldr	r3, [r7, #8]
 801b3f0:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801b3f2:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 801b3f6:	687b      	ldr	r3, [r7, #4]
 801b3f8:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801b3fa:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 801b3fe:	683b      	ldr	r3, [r7, #0]
 801b400:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801b402:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b404:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801b408:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 801b40a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801b40e:	4618      	mov	r0, r3
 801b410:	375c      	adds	r7, #92	; 0x5c
 801b412:	46bd      	mov	sp, r7
 801b414:	bd90      	pop	{r4, r7, pc}
 801b416:	bf00      	nop
 801b418:	20001c90 	.word	0x20001c90
 801b41c:	20001c8c 	.word	0x20001c8c

0801b420 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801b420:	b580      	push	{r7, lr}
 801b422:	b084      	sub	sp, #16
 801b424:	af00      	add	r7, sp, #0
 801b426:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801b428:	2307      	movs	r3, #7
 801b42a:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	685b      	ldr	r3, [r3, #4]
 801b430:	4618      	mov	r0, r3
 801b432:	f7fe ffe3 	bl	801a3fc <VerifyRfFreq>
 801b436:	4603      	mov	r3, r0
 801b438:	f083 0301 	eor.w	r3, r3, #1
 801b43c:	b2db      	uxtb	r3, r3
 801b43e:	2b00      	cmp	r3, #0
 801b440:	d003      	beq.n	801b44a <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 801b442:	7bfb      	ldrb	r3, [r7, #15]
 801b444:	f023 0301 	bic.w	r3, r3, #1
 801b448:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	f993 3000 	ldrsb.w	r3, [r3]
 801b450:	220d      	movs	r2, #13
 801b452:	2108      	movs	r1, #8
 801b454:	4618      	mov	r0, r3
 801b456:	f7fe fa26 	bl	80198a6 <RegionCommonValueInRange>
 801b45a:	4603      	mov	r3, r0
 801b45c:	2b00      	cmp	r3, #0
 801b45e:	d103      	bne.n	801b468 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 801b460:	7bfb      	ldrb	r3, [r7, #15]
 801b462:	f023 0302 	bic.w	r3, r3, #2
 801b466:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	f993 3000 	ldrsb.w	r3, [r3]
 801b46e:	2207      	movs	r2, #7
 801b470:	2105      	movs	r1, #5
 801b472:	4618      	mov	r0, r3
 801b474:	f7fe fa17 	bl	80198a6 <RegionCommonValueInRange>
 801b478:	4603      	mov	r3, r0
 801b47a:	2b01      	cmp	r3, #1
 801b47c:	d004      	beq.n	801b488 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 801b47e:	687b      	ldr	r3, [r7, #4]
 801b480:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801b484:	2b0d      	cmp	r3, #13
 801b486:	dd03      	ble.n	801b490 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 801b488:	7bfb      	ldrb	r3, [r7, #15]
 801b48a:	f023 0302 	bic.w	r3, r3, #2
 801b48e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b496:	2203      	movs	r2, #3
 801b498:	2100      	movs	r1, #0
 801b49a:	4618      	mov	r0, r3
 801b49c:	f7fe fa03 	bl	80198a6 <RegionCommonValueInRange>
 801b4a0:	4603      	mov	r3, r0
 801b4a2:	2b00      	cmp	r3, #0
 801b4a4:	d103      	bne.n	801b4ae <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801b4a6:	7bfb      	ldrb	r3, [r7, #15]
 801b4a8:	f023 0304 	bic.w	r3, r3, #4
 801b4ac:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 801b4ae:	7bfb      	ldrb	r3, [r7, #15]
}
 801b4b0:	4618      	mov	r0, r3
 801b4b2:	3710      	adds	r7, #16
 801b4b4:	46bd      	mov	sp, r7
 801b4b6:	bd80      	pop	{r7, pc}

0801b4b8 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801b4b8:	b480      	push	{r7}
 801b4ba:	b083      	sub	sp, #12
 801b4bc:	af00      	add	r7, sp, #0
 801b4be:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801b4c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801b4c4:	4618      	mov	r0, r3
 801b4c6:	370c      	adds	r7, #12
 801b4c8:	46bd      	mov	sp, r7
 801b4ca:	bc80      	pop	{r7}
 801b4cc:	4770      	bx	lr

0801b4ce <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801b4ce:	b480      	push	{r7}
 801b4d0:	b083      	sub	sp, #12
 801b4d2:	af00      	add	r7, sp, #0
 801b4d4:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801b4d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801b4da:	4618      	mov	r0, r3
 801b4dc:	370c      	adds	r7, #12
 801b4de:	46bd      	mov	sp, r7
 801b4e0:	bc80      	pop	{r7}
 801b4e2:	4770      	bx	lr

0801b4e4 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801b4e4:	b480      	push	{r7}
 801b4e6:	b083      	sub	sp, #12
 801b4e8:	af00      	add	r7, sp, #0
 801b4ea:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801b4ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801b4f0:	4618      	mov	r0, r3
 801b4f2:	370c      	adds	r7, #12
 801b4f4:	46bd      	mov	sp, r7
 801b4f6:	bc80      	pop	{r7}
 801b4f8:	4770      	bx	lr
	...

0801b4fc <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 801b4fc:	b480      	push	{r7}
 801b4fe:	b083      	sub	sp, #12
 801b500:	af00      	add	r7, sp, #0
 801b502:	4603      	mov	r3, r0
 801b504:	460a      	mov	r2, r1
 801b506:	71fb      	strb	r3, [r7, #7]
 801b508:	4613      	mov	r3, r2
 801b50a:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 801b50c:	79bb      	ldrb	r3, [r7, #6]
 801b50e:	2b00      	cmp	r3, #0
 801b510:	d106      	bne.n	801b520 <RegionUS915AlternateDr+0x24>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 801b512:	4b13      	ldr	r3, [pc, #76]	; (801b560 <RegionUS915AlternateDr+0x64>)
 801b514:	681b      	ldr	r3, [r3, #0]
 801b516:	7b5a      	ldrb	r2, [r3, #13]
 801b518:	3201      	adds	r2, #1
 801b51a:	b2d2      	uxtb	r2, r2
 801b51c:	735a      	strb	r2, [r3, #13]
 801b51e:	e005      	b.n	801b52c <RegionUS915AlternateDr+0x30>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 801b520:	4b0f      	ldr	r3, [pc, #60]	; (801b560 <RegionUS915AlternateDr+0x64>)
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	7b5a      	ldrb	r2, [r3, #13]
 801b526:	3a01      	subs	r2, #1
 801b528:	b2d2      	uxtb	r2, r2
 801b52a:	735a      	strb	r2, [r3, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 801b52c:	4b0c      	ldr	r3, [pc, #48]	; (801b560 <RegionUS915AlternateDr+0x64>)
 801b52e:	681b      	ldr	r3, [r3, #0]
 801b530:	7b5a      	ldrb	r2, [r3, #13]
 801b532:	4b0c      	ldr	r3, [pc, #48]	; (801b564 <RegionUS915AlternateDr+0x68>)
 801b534:	fba3 1302 	umull	r1, r3, r3, r2
 801b538:	0859      	lsrs	r1, r3, #1
 801b53a:	460b      	mov	r3, r1
 801b53c:	00db      	lsls	r3, r3, #3
 801b53e:	440b      	add	r3, r1
 801b540:	1ad3      	subs	r3, r2, r3
 801b542:	b2db      	uxtb	r3, r3
 801b544:	2b00      	cmp	r3, #0
 801b546:	d102      	bne.n	801b54e <RegionUS915AlternateDr+0x52>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 801b548:	2304      	movs	r3, #4
 801b54a:	71fb      	strb	r3, [r7, #7]
 801b54c:	e001      	b.n	801b552 <RegionUS915AlternateDr+0x56>
    }
    else
    {
        currentDr = DR_0;
 801b54e:	2300      	movs	r3, #0
 801b550:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 801b552:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 801b556:	4618      	mov	r0, r3
 801b558:	370c      	adds	r7, #12
 801b55a:	46bd      	mov	sp, r7
 801b55c:	bc80      	pop	{r7}
 801b55e:	4770      	bx	lr
 801b560:	20001c8c 	.word	0x20001c8c
 801b564:	38e38e39 	.word	0x38e38e39

0801b568 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801b568:	b580      	push	{r7, lr}
 801b56a:	b0a8      	sub	sp, #160	; 0xa0
 801b56c:	af02      	add	r7, sp, #8
 801b56e:	60f8      	str	r0, [r7, #12]
 801b570:	60b9      	str	r1, [r7, #8]
 801b572:	607a      	str	r2, [r7, #4]
 801b574:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 801b576:	2300      	movs	r3, #0
 801b578:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t nbRestrictedChannels = 0;
 801b57c:	2300      	movs	r3, #0
 801b57e:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 801b582:	2300      	movs	r3, #0
 801b584:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b586:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b58a:	2244      	movs	r2, #68	; 0x44
 801b58c:	2100      	movs	r1, #0
 801b58e:	4618      	mov	r0, r3
 801b590:	f005 f81e 	bl	80205d0 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801b594:	230c      	movs	r3, #12
 801b596:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 801b59a:	4b67      	ldr	r3, [pc, #412]	; (801b738 <RegionUS915NextChannel+0x1d0>)
 801b59c:	681b      	ldr	r3, [r3, #0]
 801b59e:	2204      	movs	r2, #4
 801b5a0:	2100      	movs	r1, #0
 801b5a2:	4618      	mov	r0, r3
 801b5a4:	f7fe f9d0 	bl	8019948 <RegionCommonCountChannels>
 801b5a8:	4603      	mov	r3, r0
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	d10e      	bne.n	801b5cc <RegionUS915NextChannel+0x64>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 801b5ae:	4b62      	ldr	r3, [pc, #392]	; (801b738 <RegionUS915NextChannel+0x1d0>)
 801b5b0:	681b      	ldr	r3, [r3, #0]
 801b5b2:	4618      	mov	r0, r3
 801b5b4:	4b61      	ldr	r3, [pc, #388]	; (801b73c <RegionUS915NextChannel+0x1d4>)
 801b5b6:	681b      	ldr	r3, [r3, #0]
 801b5b8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801b5bc:	2204      	movs	r2, #4
 801b5be:	4619      	mov	r1, r3
 801b5c0:	f7fe f9ee 	bl	80199a0 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801b5c4:	4b5c      	ldr	r3, [pc, #368]	; (801b738 <RegionUS915NextChannel+0x1d0>)
 801b5c6:	681b      	ldr	r3, [r3, #0]
 801b5c8:	2200      	movs	r2, #0
 801b5ca:	731a      	strb	r2, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 801b5cc:	68fb      	ldr	r3, [r7, #12]
 801b5ce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801b5d2:	2b03      	cmp	r3, #3
 801b5d4:	dd0c      	ble.n	801b5f0 <RegionUS915NextChannel+0x88>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 801b5d6:	4b58      	ldr	r3, [pc, #352]	; (801b738 <RegionUS915NextChannel+0x1d0>)
 801b5d8:	681b      	ldr	r3, [r3, #0]
 801b5da:	891b      	ldrh	r3, [r3, #8]
 801b5dc:	b2db      	uxtb	r3, r3
 801b5de:	2b00      	cmp	r3, #0
 801b5e0:	d106      	bne.n	801b5f0 <RegionUS915NextChannel+0x88>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801b5e2:	4b56      	ldr	r3, [pc, #344]	; (801b73c <RegionUS915NextChannel+0x1d4>)
 801b5e4:	681a      	ldr	r2, [r3, #0]
 801b5e6:	4b54      	ldr	r3, [pc, #336]	; (801b738 <RegionUS915NextChannel+0x1d0>)
 801b5e8:	681b      	ldr	r3, [r3, #0]
 801b5ea:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 801b5ee:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801b5f0:	68fb      	ldr	r3, [r7, #12]
 801b5f2:	7a5b      	ldrb	r3, [r3, #9]
 801b5f4:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801b5f6:	68fb      	ldr	r3, [r7, #12]
 801b5f8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801b5fc:	b2db      	uxtb	r3, r3
 801b5fe:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 801b600:	4b4d      	ldr	r3, [pc, #308]	; (801b738 <RegionUS915NextChannel+0x1d0>)
 801b602:	681b      	ldr	r3, [r3, #0]
 801b604:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801b606:	4b4d      	ldr	r3, [pc, #308]	; (801b73c <RegionUS915NextChannel+0x1d4>)
 801b608:	681b      	ldr	r3, [r3, #0]
 801b60a:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 801b60c:	4b4c      	ldr	r3, [pc, #304]	; (801b740 <RegionUS915NextChannel+0x1d8>)
 801b60e:	681b      	ldr	r3, [r3, #0]
 801b610:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 801b612:	2348      	movs	r3, #72	; 0x48
 801b614:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = NULL;
 801b616:	2300      	movs	r3, #0
 801b618:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801b61a:	68fb      	ldr	r3, [r7, #12]
 801b61c:	681b      	ldr	r3, [r3, #0]
 801b61e:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801b620:	68fb      	ldr	r3, [r7, #12]
 801b622:	685b      	ldr	r3, [r3, #4]
 801b624:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801b626:	68fb      	ldr	r3, [r7, #12]
 801b628:	7a9b      	ldrb	r3, [r3, #10]
 801b62a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 801b62e:	2301      	movs	r3, #1
 801b630:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801b634:	f107 0314 	add.w	r3, r7, #20
 801b638:	64bb      	str	r3, [r7, #72]	; 0x48

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801b63a:	68fa      	ldr	r2, [r7, #12]
 801b63c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b640:	320c      	adds	r2, #12
 801b642:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b646:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801b64a:	68fb      	ldr	r3, [r7, #12]
 801b64c:	7d1b      	ldrb	r3, [r3, #20]
 801b64e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801b652:	68fb      	ldr	r3, [r7, #12]
 801b654:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801b658:	68fb      	ldr	r3, [r7, #12]
 801b65a:	8adb      	ldrh	r3, [r3, #22]
 801b65c:	4619      	mov	r1, r3
 801b65e:	4610      	mov	r0, r2
 801b660:	f7fe ff10 	bl	801a484 <GetTimeOnAir>
 801b664:	4603      	mov	r3, r0
 801b666:	647b      	str	r3, [r7, #68]	; 0x44
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801b668:	f107 0195 	add.w	r1, r7, #149	; 0x95
 801b66c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801b670:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801b674:	687b      	ldr	r3, [r7, #4]
 801b676:	9301      	str	r3, [sp, #4]
 801b678:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801b67c:	9300      	str	r3, [sp, #0]
 801b67e:	460b      	mov	r3, r1
 801b680:	6839      	ldr	r1, [r7, #0]
 801b682:	f7fe fd68 	bl	801a156 <RegionCommonIdentifyChannels>
 801b686:	4603      	mov	r3, r0
 801b688:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801b68c:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 801b690:	2b00      	cmp	r3, #0
 801b692:	d14a      	bne.n	801b72a <RegionUS915NextChannel+0x1c2>
    {
        if( nextChanParams->Joined == true )
 801b694:	68fb      	ldr	r3, [r7, #12]
 801b696:	7a5b      	ldrb	r3, [r3, #9]
 801b698:	2b00      	cmp	r3, #0
 801b69a:	d00e      	beq.n	801b6ba <RegionUS915NextChannel+0x152>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801b69c:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 801b6a0:	3b01      	subs	r3, #1
 801b6a2:	4619      	mov	r1, r3
 801b6a4:	2000      	movs	r0, #0
 801b6a6:	f000 f89f 	bl	801b7e8 <randr>
 801b6aa:	4603      	mov	r3, r0
 801b6ac:	3398      	adds	r3, #152	; 0x98
 801b6ae:	443b      	add	r3, r7
 801b6b0:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 801b6b4:	68bb      	ldr	r3, [r7, #8]
 801b6b6:	701a      	strb	r2, [r3, #0]
 801b6b8:	e02e      	b.n	801b718 <RegionUS915NextChannel+0x1b0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 801b6ba:	68fb      	ldr	r3, [r7, #12]
 801b6bc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801b6c0:	2b00      	cmp	r3, #0
 801b6c2:	d10e      	bne.n	801b6e2 <RegionUS915NextChannel+0x17a>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801b6c4:	4b1c      	ldr	r3, [pc, #112]	; (801b738 <RegionUS915NextChannel+0x1d0>)
 801b6c6:	681b      	ldr	r3, [r3, #0]
 801b6c8:	4618      	mov	r0, r3
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 801b6ca:	4b1b      	ldr	r3, [pc, #108]	; (801b738 <RegionUS915NextChannel+0x1d0>)
 801b6cc:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801b6ce:	330c      	adds	r3, #12
 801b6d0:	68ba      	ldr	r2, [r7, #8]
 801b6d2:	4619      	mov	r1, r3
 801b6d4:	f7fd fea2 	bl	801941c <RegionBaseUSComputeNext125kHzJoinChannel>
 801b6d8:	4603      	mov	r3, r0
 801b6da:	2b03      	cmp	r3, #3
 801b6dc:	d11c      	bne.n	801b718 <RegionUS915NextChannel+0x1b0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 801b6de:	2303      	movs	r3, #3
 801b6e0:	e025      	b.n	801b72e <RegionUS915NextChannel+0x1c6>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 801b6e2:	2300      	movs	r3, #0
 801b6e4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801b6e8:	e004      	b.n	801b6f4 <RegionUS915NextChannel+0x18c>
                {
                    i++;
 801b6ea:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b6ee:	3301      	adds	r3, #1
 801b6f0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801b6f4:	4b10      	ldr	r3, [pc, #64]	; (801b738 <RegionUS915NextChannel+0x1d0>)
 801b6f6:	681b      	ldr	r3, [r3, #0]
 801b6f8:	891b      	ldrh	r3, [r3, #8]
 801b6fa:	b2da      	uxtb	r2, r3
 801b6fc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b700:	fa42 f303 	asr.w	r3, r2, r3
 801b704:	f003 0301 	and.w	r3, r3, #1
 801b708:	2b00      	cmp	r3, #0
 801b70a:	d0ee      	beq.n	801b6ea <RegionUS915NextChannel+0x182>
                }
                *channel = 64 + i;
 801b70c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b710:	3340      	adds	r3, #64	; 0x40
 801b712:	b2da      	uxtb	r2, r3
 801b714:	68bb      	ldr	r3, [r7, #8]
 801b716:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 801b718:	4b07      	ldr	r3, [pc, #28]	; (801b738 <RegionUS915NextChannel+0x1d0>)
 801b71a:	681b      	ldr	r3, [r3, #0]
 801b71c:	4618      	mov	r0, r3
 801b71e:	68bb      	ldr	r3, [r7, #8]
 801b720:	781b      	ldrb	r3, [r3, #0]
 801b722:	2248      	movs	r2, #72	; 0x48
 801b724:	4619      	mov	r1, r3
 801b726:	f7fe f8db 	bl	80198e0 <RegionCommonChanDisable>
    }
    return status;
 801b72a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 801b72e:	4618      	mov	r0, r3
 801b730:	3798      	adds	r7, #152	; 0x98
 801b732:	46bd      	mov	sp, r7
 801b734:	bd80      	pop	{r7, pc}
 801b736:	bf00      	nop
 801b738:	20001c8c 	.word	0x20001c8c
 801b73c:	20001c90 	.word	0x20001c90
 801b740:	20001c94 	.word	0x20001c94

0801b744 <RegionUS915ApplyDrOffset>:
#endif /* REGION_US915 */
}
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801b744:	b480      	push	{r7}
 801b746:	b085      	sub	sp, #20
 801b748:	af00      	add	r7, sp, #0
 801b74a:	4603      	mov	r3, r0
 801b74c:	71fb      	strb	r3, [r7, #7]
 801b74e:	460b      	mov	r3, r1
 801b750:	71bb      	strb	r3, [r7, #6]
 801b752:	4613      	mov	r3, r2
 801b754:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 801b756:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801b75a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801b75e:	4909      	ldr	r1, [pc, #36]	; (801b784 <RegionUS915ApplyDrOffset+0x40>)
 801b760:	0092      	lsls	r2, r2, #2
 801b762:	440a      	add	r2, r1
 801b764:	4413      	add	r3, r2
 801b766:	781b      	ldrb	r3, [r3, #0]
 801b768:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801b76a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b76e:	2b00      	cmp	r3, #0
 801b770:	da01      	bge.n	801b776 <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 801b772:	2300      	movs	r3, #0
 801b774:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801b776:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 801b778:	4618      	mov	r0, r3
 801b77a:	3714      	adds	r7, #20
 801b77c:	46bd      	mov	sp, r7
 801b77e:	bc80      	pop	{r7}
 801b780:	4770      	bx	lr
 801b782:	bf00      	nop
 801b784:	08021dc8 	.word	0x08021dc8

0801b788 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 801b788:	b480      	push	{r7}
 801b78a:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801b78c:	4b0d      	ldr	r3, [pc, #52]	; (801b7c4 <rand1+0x3c>)
 801b78e:	681b      	ldr	r3, [r3, #0]
 801b790:	4a0d      	ldr	r2, [pc, #52]	; (801b7c8 <rand1+0x40>)
 801b792:	fb02 f303 	mul.w	r3, r2, r3
 801b796:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b79a:	3339      	adds	r3, #57	; 0x39
 801b79c:	4a09      	ldr	r2, [pc, #36]	; (801b7c4 <rand1+0x3c>)
 801b79e:	6013      	str	r3, [r2, #0]
 801b7a0:	4b08      	ldr	r3, [pc, #32]	; (801b7c4 <rand1+0x3c>)
 801b7a2:	681a      	ldr	r2, [r3, #0]
 801b7a4:	2303      	movs	r3, #3
 801b7a6:	fba3 1302 	umull	r1, r3, r3, r2
 801b7aa:	1ad1      	subs	r1, r2, r3
 801b7ac:	0849      	lsrs	r1, r1, #1
 801b7ae:	440b      	add	r3, r1
 801b7b0:	0f99      	lsrs	r1, r3, #30
 801b7b2:	460b      	mov	r3, r1
 801b7b4:	07db      	lsls	r3, r3, #31
 801b7b6:	1a5b      	subs	r3, r3, r1
 801b7b8:	1ad1      	subs	r1, r2, r3
 801b7ba:	460b      	mov	r3, r1
}
 801b7bc:	4618      	mov	r0, r3
 801b7be:	46bd      	mov	sp, r7
 801b7c0:	bc80      	pop	{r7}
 801b7c2:	4770      	bx	lr
 801b7c4:	20000130 	.word	0x20000130
 801b7c8:	41c64e6d 	.word	0x41c64e6d

0801b7cc <srand1>:

void srand1( uint32_t seed )
{
 801b7cc:	b480      	push	{r7}
 801b7ce:	b083      	sub	sp, #12
 801b7d0:	af00      	add	r7, sp, #0
 801b7d2:	6078      	str	r0, [r7, #4]
    next = seed;
 801b7d4:	4a03      	ldr	r2, [pc, #12]	; (801b7e4 <srand1+0x18>)
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	6013      	str	r3, [r2, #0]
}
 801b7da:	bf00      	nop
 801b7dc:	370c      	adds	r7, #12
 801b7de:	46bd      	mov	sp, r7
 801b7e0:	bc80      	pop	{r7}
 801b7e2:	4770      	bx	lr
 801b7e4:	20000130 	.word	0x20000130

0801b7e8 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801b7e8:	b580      	push	{r7, lr}
 801b7ea:	b082      	sub	sp, #8
 801b7ec:	af00      	add	r7, sp, #0
 801b7ee:	6078      	str	r0, [r7, #4]
 801b7f0:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801b7f2:	f7ff ffc9 	bl	801b788 <rand1>
 801b7f6:	4602      	mov	r2, r0
 801b7f8:	6839      	ldr	r1, [r7, #0]
 801b7fa:	687b      	ldr	r3, [r7, #4]
 801b7fc:	1acb      	subs	r3, r1, r3
 801b7fe:	3301      	adds	r3, #1
 801b800:	fb92 f1f3 	sdiv	r1, r2, r3
 801b804:	fb01 f303 	mul.w	r3, r1, r3
 801b808:	1ad2      	subs	r2, r2, r3
 801b80a:	687b      	ldr	r3, [r7, #4]
 801b80c:	4413      	add	r3, r2
}
 801b80e:	4618      	mov	r0, r3
 801b810:	3708      	adds	r7, #8
 801b812:	46bd      	mov	sp, r7
 801b814:	bd80      	pop	{r7, pc}

0801b816 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801b816:	b480      	push	{r7}
 801b818:	b085      	sub	sp, #20
 801b81a:	af00      	add	r7, sp, #0
 801b81c:	60f8      	str	r0, [r7, #12]
 801b81e:	60b9      	str	r1, [r7, #8]
 801b820:	4613      	mov	r3, r2
 801b822:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 801b824:	e007      	b.n	801b836 <memcpy1+0x20>
    {
        *dst++ = *src++;
 801b826:	68ba      	ldr	r2, [r7, #8]
 801b828:	1c53      	adds	r3, r2, #1
 801b82a:	60bb      	str	r3, [r7, #8]
 801b82c:	68fb      	ldr	r3, [r7, #12]
 801b82e:	1c59      	adds	r1, r3, #1
 801b830:	60f9      	str	r1, [r7, #12]
 801b832:	7812      	ldrb	r2, [r2, #0]
 801b834:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b836:	88fb      	ldrh	r3, [r7, #6]
 801b838:	1e5a      	subs	r2, r3, #1
 801b83a:	80fa      	strh	r2, [r7, #6]
 801b83c:	2b00      	cmp	r3, #0
 801b83e:	d1f2      	bne.n	801b826 <memcpy1+0x10>
    }
}
 801b840:	bf00      	nop
 801b842:	bf00      	nop
 801b844:	3714      	adds	r7, #20
 801b846:	46bd      	mov	sp, r7
 801b848:	bc80      	pop	{r7}
 801b84a:	4770      	bx	lr

0801b84c <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801b84c:	b480      	push	{r7}
 801b84e:	b085      	sub	sp, #20
 801b850:	af00      	add	r7, sp, #0
 801b852:	60f8      	str	r0, [r7, #12]
 801b854:	60b9      	str	r1, [r7, #8]
 801b856:	4613      	mov	r3, r2
 801b858:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801b85a:	88fb      	ldrh	r3, [r7, #6]
 801b85c:	3b01      	subs	r3, #1
 801b85e:	68fa      	ldr	r2, [r7, #12]
 801b860:	4413      	add	r3, r2
 801b862:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801b864:	e007      	b.n	801b876 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801b866:	68ba      	ldr	r2, [r7, #8]
 801b868:	1c53      	adds	r3, r2, #1
 801b86a:	60bb      	str	r3, [r7, #8]
 801b86c:	68fb      	ldr	r3, [r7, #12]
 801b86e:	1e59      	subs	r1, r3, #1
 801b870:	60f9      	str	r1, [r7, #12]
 801b872:	7812      	ldrb	r2, [r2, #0]
 801b874:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b876:	88fb      	ldrh	r3, [r7, #6]
 801b878:	1e5a      	subs	r2, r3, #1
 801b87a:	80fa      	strh	r2, [r7, #6]
 801b87c:	2b00      	cmp	r3, #0
 801b87e:	d1f2      	bne.n	801b866 <memcpyr+0x1a>
    }
}
 801b880:	bf00      	nop
 801b882:	bf00      	nop
 801b884:	3714      	adds	r7, #20
 801b886:	46bd      	mov	sp, r7
 801b888:	bc80      	pop	{r7}
 801b88a:	4770      	bx	lr

0801b88c <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801b88c:	b480      	push	{r7}
 801b88e:	b083      	sub	sp, #12
 801b890:	af00      	add	r7, sp, #0
 801b892:	6078      	str	r0, [r7, #4]
 801b894:	460b      	mov	r3, r1
 801b896:	70fb      	strb	r3, [r7, #3]
 801b898:	4613      	mov	r3, r2
 801b89a:	803b      	strh	r3, [r7, #0]
    while( size-- )
 801b89c:	e004      	b.n	801b8a8 <memset1+0x1c>
    {
        *dst++ = value;
 801b89e:	687b      	ldr	r3, [r7, #4]
 801b8a0:	1c5a      	adds	r2, r3, #1
 801b8a2:	607a      	str	r2, [r7, #4]
 801b8a4:	78fa      	ldrb	r2, [r7, #3]
 801b8a6:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b8a8:	883b      	ldrh	r3, [r7, #0]
 801b8aa:	1e5a      	subs	r2, r3, #1
 801b8ac:	803a      	strh	r2, [r7, #0]
 801b8ae:	2b00      	cmp	r3, #0
 801b8b0:	d1f5      	bne.n	801b89e <memset1+0x12>
    }
}
 801b8b2:	bf00      	nop
 801b8b4:	bf00      	nop
 801b8b6:	370c      	adds	r7, #12
 801b8b8:	46bd      	mov	sp, r7
 801b8ba:	bc80      	pop	{r7}
 801b8bc:	4770      	bx	lr
	...

0801b8c0 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 801b8c0:	b480      	push	{r7}
 801b8c2:	b085      	sub	sp, #20
 801b8c4:	af00      	add	r7, sp, #0
 801b8c6:	6078      	str	r0, [r7, #4]
 801b8c8:	460b      	mov	r3, r1
 801b8ca:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 801b8cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b8d0:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 801b8d2:	687b      	ldr	r3, [r7, #4]
 801b8d4:	2b00      	cmp	r3, #0
 801b8d6:	d101      	bne.n	801b8dc <Crc32+0x1c>
    {
        return 0;
 801b8d8:	2300      	movs	r3, #0
 801b8da:	e026      	b.n	801b92a <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 801b8dc:	2300      	movs	r3, #0
 801b8de:	817b      	strh	r3, [r7, #10]
 801b8e0:	e01d      	b.n	801b91e <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 801b8e2:	897b      	ldrh	r3, [r7, #10]
 801b8e4:	687a      	ldr	r2, [r7, #4]
 801b8e6:	4413      	add	r3, r2
 801b8e8:	781b      	ldrb	r3, [r3, #0]
 801b8ea:	461a      	mov	r2, r3
 801b8ec:	68fb      	ldr	r3, [r7, #12]
 801b8ee:	4053      	eors	r3, r2
 801b8f0:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801b8f2:	2300      	movs	r3, #0
 801b8f4:	813b      	strh	r3, [r7, #8]
 801b8f6:	e00c      	b.n	801b912 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 801b8f8:	68fb      	ldr	r3, [r7, #12]
 801b8fa:	085a      	lsrs	r2, r3, #1
 801b8fc:	68fb      	ldr	r3, [r7, #12]
 801b8fe:	f003 0301 	and.w	r3, r3, #1
 801b902:	425b      	negs	r3, r3
 801b904:	490b      	ldr	r1, [pc, #44]	; (801b934 <Crc32+0x74>)
 801b906:	400b      	ands	r3, r1
 801b908:	4053      	eors	r3, r2
 801b90a:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801b90c:	893b      	ldrh	r3, [r7, #8]
 801b90e:	3301      	adds	r3, #1
 801b910:	813b      	strh	r3, [r7, #8]
 801b912:	893b      	ldrh	r3, [r7, #8]
 801b914:	2b07      	cmp	r3, #7
 801b916:	d9ef      	bls.n	801b8f8 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 801b918:	897b      	ldrh	r3, [r7, #10]
 801b91a:	3301      	adds	r3, #1
 801b91c:	817b      	strh	r3, [r7, #10]
 801b91e:	897a      	ldrh	r2, [r7, #10]
 801b920:	887b      	ldrh	r3, [r7, #2]
 801b922:	429a      	cmp	r2, r3
 801b924:	d3dd      	bcc.n	801b8e2 <Crc32+0x22>
        }
    }

    return ~crc;
 801b926:	68fb      	ldr	r3, [r7, #12]
 801b928:	43db      	mvns	r3, r3
}
 801b92a:	4618      	mov	r0, r3
 801b92c:	3714      	adds	r7, #20
 801b92e:	46bd      	mov	sp, r7
 801b930:	bc80      	pop	{r7}
 801b932:	4770      	bx	lr
 801b934:	edb88320 	.word	0xedb88320

0801b938 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 801b938:	b580      	push	{r7, lr}
 801b93a:	b084      	sub	sp, #16
 801b93c:	af02      	add	r7, sp, #8
 801b93e:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 801b940:	4a24      	ldr	r2, [pc, #144]	; (801b9d4 <RadioInit+0x9c>)
 801b942:	687b      	ldr	r3, [r7, #4]
 801b944:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801b946:	4b24      	ldr	r3, [pc, #144]	; (801b9d8 <RadioInit+0xa0>)
 801b948:	2200      	movs	r2, #0
 801b94a:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 801b94c:	4b22      	ldr	r3, [pc, #136]	; (801b9d8 <RadioInit+0xa0>)
 801b94e:	2200      	movs	r2, #0
 801b950:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801b952:	4b21      	ldr	r3, [pc, #132]	; (801b9d8 <RadioInit+0xa0>)
 801b954:	2200      	movs	r2, #0
 801b956:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801b958:	4b1f      	ldr	r3, [pc, #124]	; (801b9d8 <RadioInit+0xa0>)
 801b95a:	2200      	movs	r2, #0
 801b95c:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 801b95e:	481f      	ldr	r0, [pc, #124]	; (801b9dc <RadioInit+0xa4>)
 801b960:	f001 ffc2 	bl	801d8e8 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 801b964:	4b1c      	ldr	r3, [pc, #112]	; (801b9d8 <RadioInit+0xa0>)
 801b966:	2200      	movs	r2, #0
 801b968:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 801b96a:	4b1b      	ldr	r3, [pc, #108]	; (801b9d8 <RadioInit+0xa0>)
 801b96c:	2200      	movs	r2, #0
 801b96e:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 801b970:	f002 fa56 	bl	801de20 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801b974:	2100      	movs	r1, #0
 801b976:	2000      	movs	r0, #0
 801b978:	f002 fe22 	bl	801e5c0 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 801b97c:	2204      	movs	r2, #4
 801b97e:	2100      	movs	r1, #0
 801b980:	2001      	movs	r0, #1
 801b982:	f002 fbdf 	bl	801e144 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801b986:	2300      	movs	r3, #0
 801b988:	2200      	movs	r2, #0
 801b98a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b98e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b992:	f002 fb0f 	bl	801dfb4 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 801b996:	f000 fe99 	bl	801c6cc <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801b99a:	2300      	movs	r3, #0
 801b99c:	9300      	str	r3, [sp, #0]
 801b99e:	4b10      	ldr	r3, [pc, #64]	; (801b9e0 <RadioInit+0xa8>)
 801b9a0:	2200      	movs	r2, #0
 801b9a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801b9a6:	480f      	ldr	r0, [pc, #60]	; (801b9e4 <RadioInit+0xac>)
 801b9a8:	f004 f84c 	bl	801fa44 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801b9ac:	2300      	movs	r3, #0
 801b9ae:	9300      	str	r3, [sp, #0]
 801b9b0:	4b0d      	ldr	r3, [pc, #52]	; (801b9e8 <RadioInit+0xb0>)
 801b9b2:	2200      	movs	r2, #0
 801b9b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801b9b8:	480c      	ldr	r0, [pc, #48]	; (801b9ec <RadioInit+0xb4>)
 801b9ba:	f004 f843 	bl	801fa44 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801b9be:	4809      	ldr	r0, [pc, #36]	; (801b9e4 <RadioInit+0xac>)
 801b9c0:	f004 f8e4 	bl	801fb8c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801b9c4:	4809      	ldr	r0, [pc, #36]	; (801b9ec <RadioInit+0xb4>)
 801b9c6:	f004 f8e1 	bl	801fb8c <UTIL_TIMER_Stop>
}
 801b9ca:	bf00      	nop
 801b9cc:	3708      	adds	r7, #8
 801b9ce:	46bd      	mov	sp, r7
 801b9d0:	bd80      	pop	{r7, pc}
 801b9d2:	bf00      	nop
 801b9d4:	20001d98 	.word	0x20001d98
 801b9d8:	20001d9c 	.word	0x20001d9c
 801b9dc:	0801cac5 	.word	0x0801cac5
 801b9e0:	0801ca4d 	.word	0x0801ca4d
 801b9e4:	20001df8 	.word	0x20001df8
 801b9e8:	0801ca61 	.word	0x0801ca61
 801b9ec:	20001e10 	.word	0x20001e10

0801b9f0 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 801b9f0:	b580      	push	{r7, lr}
 801b9f2:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801b9f4:	f001 ffc0 	bl	801d978 <SUBGRF_GetOperatingMode>
 801b9f8:	4603      	mov	r3, r0
 801b9fa:	2b07      	cmp	r3, #7
 801b9fc:	d00a      	beq.n	801ba14 <RadioGetStatus+0x24>
 801b9fe:	2b07      	cmp	r3, #7
 801ba00:	dc0a      	bgt.n	801ba18 <RadioGetStatus+0x28>
 801ba02:	2b04      	cmp	r3, #4
 801ba04:	d002      	beq.n	801ba0c <RadioGetStatus+0x1c>
 801ba06:	2b05      	cmp	r3, #5
 801ba08:	d002      	beq.n	801ba10 <RadioGetStatus+0x20>
 801ba0a:	e005      	b.n	801ba18 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 801ba0c:	2302      	movs	r3, #2
 801ba0e:	e004      	b.n	801ba1a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 801ba10:	2301      	movs	r3, #1
 801ba12:	e002      	b.n	801ba1a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801ba14:	2303      	movs	r3, #3
 801ba16:	e000      	b.n	801ba1a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801ba18:	2300      	movs	r3, #0
    }
}
 801ba1a:	4618      	mov	r0, r3
 801ba1c:	bd80      	pop	{r7, pc}
	...

0801ba20 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 801ba20:	b580      	push	{r7, lr}
 801ba22:	b082      	sub	sp, #8
 801ba24:	af00      	add	r7, sp, #0
 801ba26:	4603      	mov	r3, r0
 801ba28:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801ba2a:	4a2a      	ldr	r2, [pc, #168]	; (801bad4 <RadioSetModem+0xb4>)
 801ba2c:	79fb      	ldrb	r3, [r7, #7]
 801ba2e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 801ba30:	79fb      	ldrb	r3, [r7, #7]
 801ba32:	4618      	mov	r0, r3
 801ba34:	f003 f997 	bl	801ed66 <RFW_SetRadioModem>
    switch( modem )
 801ba38:	79fb      	ldrb	r3, [r7, #7]
 801ba3a:	2b05      	cmp	r3, #5
 801ba3c:	d80e      	bhi.n	801ba5c <RadioSetModem+0x3c>
 801ba3e:	a201      	add	r2, pc, #4	; (adr r2, 801ba44 <RadioSetModem+0x24>)
 801ba40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba44:	0801ba6b 	.word	0x0801ba6b
 801ba48:	0801ba79 	.word	0x0801ba79
 801ba4c:	0801ba5d 	.word	0x0801ba5d
 801ba50:	0801ba9f 	.word	0x0801ba9f
 801ba54:	0801baad 	.word	0x0801baad
 801ba58:	0801babb 	.word	0x0801babb
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801ba5c:	2003      	movs	r0, #3
 801ba5e:	f002 fb4b 	bl	801e0f8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801ba62:	4b1c      	ldr	r3, [pc, #112]	; (801bad4 <RadioSetModem+0xb4>)
 801ba64:	2200      	movs	r2, #0
 801ba66:	735a      	strb	r2, [r3, #13]
        break;
 801ba68:	e02f      	b.n	801baca <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801ba6a:	2000      	movs	r0, #0
 801ba6c:	f002 fb44 	bl	801e0f8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801ba70:	4b18      	ldr	r3, [pc, #96]	; (801bad4 <RadioSetModem+0xb4>)
 801ba72:	2200      	movs	r2, #0
 801ba74:	735a      	strb	r2, [r3, #13]
        break;
 801ba76:	e028      	b.n	801baca <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801ba78:	2001      	movs	r0, #1
 801ba7a:	f002 fb3d 	bl	801e0f8 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801ba7e:	4b15      	ldr	r3, [pc, #84]	; (801bad4 <RadioSetModem+0xb4>)
 801ba80:	7b5a      	ldrb	r2, [r3, #13]
 801ba82:	4b14      	ldr	r3, [pc, #80]	; (801bad4 <RadioSetModem+0xb4>)
 801ba84:	7b1b      	ldrb	r3, [r3, #12]
 801ba86:	429a      	cmp	r2, r3
 801ba88:	d01e      	beq.n	801bac8 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801ba8a:	4b12      	ldr	r3, [pc, #72]	; (801bad4 <RadioSetModem+0xb4>)
 801ba8c:	7b1a      	ldrb	r2, [r3, #12]
 801ba8e:	4b11      	ldr	r3, [pc, #68]	; (801bad4 <RadioSetModem+0xb4>)
 801ba90:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801ba92:	4b10      	ldr	r3, [pc, #64]	; (801bad4 <RadioSetModem+0xb4>)
 801ba94:	7b5b      	ldrb	r3, [r3, #13]
 801ba96:	4618      	mov	r0, r3
 801ba98:	f000 ffa2 	bl	801c9e0 <RadioSetPublicNetwork>
        }
        break;
 801ba9c:	e014      	b.n	801bac8 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801ba9e:	2002      	movs	r0, #2
 801baa0:	f002 fb2a 	bl	801e0f8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801baa4:	4b0b      	ldr	r3, [pc, #44]	; (801bad4 <RadioSetModem+0xb4>)
 801baa6:	2200      	movs	r2, #0
 801baa8:	735a      	strb	r2, [r3, #13]
        break;
 801baaa:	e00e      	b.n	801baca <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801baac:	2002      	movs	r0, #2
 801baae:	f002 fb23 	bl	801e0f8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801bab2:	4b08      	ldr	r3, [pc, #32]	; (801bad4 <RadioSetModem+0xb4>)
 801bab4:	2200      	movs	r2, #0
 801bab6:	735a      	strb	r2, [r3, #13]
        break;
 801bab8:	e007      	b.n	801baca <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801baba:	2000      	movs	r0, #0
 801babc:	f002 fb1c 	bl	801e0f8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801bac0:	4b04      	ldr	r3, [pc, #16]	; (801bad4 <RadioSetModem+0xb4>)
 801bac2:	2200      	movs	r2, #0
 801bac4:	735a      	strb	r2, [r3, #13]
        break;
 801bac6:	e000      	b.n	801baca <RadioSetModem+0xaa>
        break;
 801bac8:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801baca:	bf00      	nop
 801bacc:	3708      	adds	r7, #8
 801bace:	46bd      	mov	sp, r7
 801bad0:	bd80      	pop	{r7, pc}
 801bad2:	bf00      	nop
 801bad4:	20001d9c 	.word	0x20001d9c

0801bad8 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801bad8:	b580      	push	{r7, lr}
 801bada:	b082      	sub	sp, #8
 801badc:	af00      	add	r7, sp, #0
 801bade:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801bae0:	6878      	ldr	r0, [r7, #4]
 801bae2:	f002 fac3 	bl	801e06c <SUBGRF_SetRfFrequency>
}
 801bae6:	bf00      	nop
 801bae8:	3708      	adds	r7, #8
 801baea:	46bd      	mov	sp, r7
 801baec:	bd80      	pop	{r7, pc}

0801baee <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801baee:	b580      	push	{r7, lr}
 801baf0:	b090      	sub	sp, #64	; 0x40
 801baf2:	af0a      	add	r7, sp, #40	; 0x28
 801baf4:	60f8      	str	r0, [r7, #12]
 801baf6:	60b9      	str	r1, [r7, #8]
 801baf8:	603b      	str	r3, [r7, #0]
 801bafa:	4613      	mov	r3, r2
 801bafc:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801bafe:	2301      	movs	r3, #1
 801bb00:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801bb02:	2300      	movs	r3, #0
 801bb04:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801bb06:	2300      	movs	r3, #0
 801bb08:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 801bb0a:	f000 fdf2 	bl	801c6f2 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801bb0e:	2000      	movs	r0, #0
 801bb10:	f7ff ff86 	bl	801ba20 <RadioSetModem>

    RadioSetChannel( freq );
 801bb14:	68f8      	ldr	r0, [r7, #12]
 801bb16:	f7ff ffdf 	bl	801bad8 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801bb1a:	2301      	movs	r3, #1
 801bb1c:	9309      	str	r3, [sp, #36]	; 0x24
 801bb1e:	2300      	movs	r3, #0
 801bb20:	9308      	str	r3, [sp, #32]
 801bb22:	2300      	movs	r3, #0
 801bb24:	9307      	str	r3, [sp, #28]
 801bb26:	2300      	movs	r3, #0
 801bb28:	9306      	str	r3, [sp, #24]
 801bb2a:	2300      	movs	r3, #0
 801bb2c:	9305      	str	r3, [sp, #20]
 801bb2e:	2300      	movs	r3, #0
 801bb30:	9304      	str	r3, [sp, #16]
 801bb32:	2300      	movs	r3, #0
 801bb34:	9303      	str	r3, [sp, #12]
 801bb36:	2300      	movs	r3, #0
 801bb38:	9302      	str	r3, [sp, #8]
 801bb3a:	2303      	movs	r3, #3
 801bb3c:	9301      	str	r3, [sp, #4]
 801bb3e:	68bb      	ldr	r3, [r7, #8]
 801bb40:	9300      	str	r3, [sp, #0]
 801bb42:	2300      	movs	r3, #0
 801bb44:	f44f 7216 	mov.w	r2, #600	; 0x258
 801bb48:	68b9      	ldr	r1, [r7, #8]
 801bb4a:	2000      	movs	r0, #0
 801bb4c:	f000 f83c 	bl	801bbc8 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 801bb50:	2000      	movs	r0, #0
 801bb52:	f000 fdd5 	bl	801c700 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801bb56:	f000 ff71 	bl	801ca3c <RadioGetWakeupTime>
 801bb5a:	4603      	mov	r3, r0
 801bb5c:	4618      	mov	r0, r3
 801bb5e:	f7e6 fe9b 	bl	8002898 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801bb62:	f004 f92d 	bl	801fdc0 <UTIL_TIMER_GetCurrentTime>
 801bb66:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801bb68:	e00d      	b.n	801bb86 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801bb6a:	2000      	movs	r0, #0
 801bb6c:	f000 feb6 	bl	801c8dc <RadioRssi>
 801bb70:	4603      	mov	r3, r0
 801bb72:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801bb74:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801bb78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bb7c:	429a      	cmp	r2, r3
 801bb7e:	dd02      	ble.n	801bb86 <RadioIsChannelFree+0x98>
        {
            status = false;
 801bb80:	2300      	movs	r3, #0
 801bb82:	75fb      	strb	r3, [r7, #23]
            break;
 801bb84:	e006      	b.n	801bb94 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801bb86:	6938      	ldr	r0, [r7, #16]
 801bb88:	f004 f92c 	bl	801fde4 <UTIL_TIMER_GetElapsedTime>
 801bb8c:	4602      	mov	r2, r0
 801bb8e:	683b      	ldr	r3, [r7, #0]
 801bb90:	4293      	cmp	r3, r2
 801bb92:	d8ea      	bhi.n	801bb6a <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 801bb94:	f000 fdad 	bl	801c6f2 <RadioStandby>

    return status;
 801bb98:	7dfb      	ldrb	r3, [r7, #23]
}
 801bb9a:	4618      	mov	r0, r3
 801bb9c:	3718      	adds	r7, #24
 801bb9e:	46bd      	mov	sp, r7
 801bba0:	bd80      	pop	{r7, pc}

0801bba2 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801bba2:	b580      	push	{r7, lr}
 801bba4:	b082      	sub	sp, #8
 801bba6:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 801bba8:	2300      	movs	r3, #0
 801bbaa:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801bbac:	2300      	movs	r3, #0
 801bbae:	2200      	movs	r2, #0
 801bbb0:	2100      	movs	r1, #0
 801bbb2:	2000      	movs	r0, #0
 801bbb4:	f002 f9fe 	bl	801dfb4 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801bbb8:	f001 ffaf 	bl	801db1a <SUBGRF_GetRandom>
 801bbbc:	6078      	str	r0, [r7, #4]

    return rnd;
 801bbbe:	687b      	ldr	r3, [r7, #4]
}
 801bbc0:	4618      	mov	r0, r3
 801bbc2:	3708      	adds	r7, #8
 801bbc4:	46bd      	mov	sp, r7
 801bbc6:	bd80      	pop	{r7, pc}

0801bbc8 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801bbc8:	b580      	push	{r7, lr}
 801bbca:	b08a      	sub	sp, #40	; 0x28
 801bbcc:	af00      	add	r7, sp, #0
 801bbce:	60b9      	str	r1, [r7, #8]
 801bbd0:	607a      	str	r2, [r7, #4]
 801bbd2:	461a      	mov	r2, r3
 801bbd4:	4603      	mov	r3, r0
 801bbd6:	73fb      	strb	r3, [r7, #15]
 801bbd8:	4613      	mov	r3, r2
 801bbda:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 801bbdc:	4ab9      	ldr	r2, [pc, #740]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801bbde:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801bbe2:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 801bbe4:	f003 f87d 	bl	801ece2 <RFW_DeInit>
    if( rxContinuous == true )
 801bbe8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801bbec:	2b00      	cmp	r3, #0
 801bbee:	d001      	beq.n	801bbf4 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 801bbf0:	2300      	movs	r3, #0
 801bbf2:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 801bbf4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801bbf8:	2b00      	cmp	r3, #0
 801bbfa:	d004      	beq.n	801bc06 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801bbfc:	4ab2      	ldr	r2, [pc, #712]	; (801bec8 <RadioSetRxConfig+0x300>)
 801bbfe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801bc02:	7013      	strb	r3, [r2, #0]
 801bc04:	e002      	b.n	801bc0c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801bc06:	4bb0      	ldr	r3, [pc, #704]	; (801bec8 <RadioSetRxConfig+0x300>)
 801bc08:	22ff      	movs	r2, #255	; 0xff
 801bc0a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801bc0c:	7bfb      	ldrb	r3, [r7, #15]
 801bc0e:	2b05      	cmp	r3, #5
 801bc10:	d009      	beq.n	801bc26 <RadioSetRxConfig+0x5e>
 801bc12:	2b05      	cmp	r3, #5
 801bc14:	f300 81d7 	bgt.w	801bfc6 <RadioSetRxConfig+0x3fe>
 801bc18:	2b00      	cmp	r3, #0
 801bc1a:	f000 80bf 	beq.w	801bd9c <RadioSetRxConfig+0x1d4>
 801bc1e:	2b01      	cmp	r3, #1
 801bc20:	f000 8124 	beq.w	801be6c <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801bc24:	e1cf      	b.n	801bfc6 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801bc26:	2001      	movs	r0, #1
 801bc28:	f002 f8bc 	bl	801dda4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bc2c:	4ba5      	ldr	r3, [pc, #660]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801bc2e:	2200      	movs	r2, #0
 801bc30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801bc34:	4aa3      	ldr	r2, [pc, #652]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801bc36:	687b      	ldr	r3, [r7, #4]
 801bc38:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801bc3a:	4ba2      	ldr	r3, [pc, #648]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801bc3c:	2209      	movs	r2, #9
 801bc3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801bc42:	4ba0      	ldr	r3, [pc, #640]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801bc44:	f44f 7248 	mov.w	r2, #800	; 0x320
 801bc48:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801bc4a:	68b8      	ldr	r0, [r7, #8]
 801bc4c:	f002 ff7c 	bl	801eb48 <SUBGRF_GetFskBandwidthRegValue>
 801bc50:	4603      	mov	r3, r0
 801bc52:	461a      	mov	r2, r3
 801bc54:	4b9b      	ldr	r3, [pc, #620]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801bc56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bc5a:	4b9a      	ldr	r3, [pc, #616]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801bc5c:	2200      	movs	r2, #0
 801bc5e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801bc60:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bc62:	00db      	lsls	r3, r3, #3
 801bc64:	b29a      	uxth	r2, r3
 801bc66:	4b97      	ldr	r3, [pc, #604]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801bc68:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801bc6a:	4b96      	ldr	r3, [pc, #600]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801bc6c:	2200      	movs	r2, #0
 801bc6e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 801bc70:	4b94      	ldr	r3, [pc, #592]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801bc72:	2210      	movs	r2, #16
 801bc74:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801bc76:	4b93      	ldr	r3, [pc, #588]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801bc78:	2200      	movs	r2, #0
 801bc7a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801bc7c:	4b91      	ldr	r3, [pc, #580]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801bc7e:	2200      	movs	r2, #0
 801bc80:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801bc82:	4b91      	ldr	r3, [pc, #580]	; (801bec8 <RadioSetRxConfig+0x300>)
 801bc84:	781a      	ldrb	r2, [r3, #0]
 801bc86:	4b8f      	ldr	r3, [pc, #572]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801bc88:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801bc8a:	4b8e      	ldr	r3, [pc, #568]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801bc8c:	2201      	movs	r2, #1
 801bc8e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 801bc90:	4b8c      	ldr	r3, [pc, #560]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801bc92:	2200      	movs	r2, #0
 801bc94:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801bc96:	2005      	movs	r0, #5
 801bc98:	f7ff fec2 	bl	801ba20 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bc9c:	488b      	ldr	r0, [pc, #556]	; (801becc <RadioSetRxConfig+0x304>)
 801bc9e:	f002 fb1f 	bl	801e2e0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bca2:	488b      	ldr	r0, [pc, #556]	; (801bed0 <RadioSetRxConfig+0x308>)
 801bca4:	f002 fbee 	bl	801e484 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801bca8:	4a8a      	ldr	r2, [pc, #552]	; (801bed4 <RadioSetRxConfig+0x30c>)
 801bcaa:	f107 031c 	add.w	r3, r7, #28
 801bcae:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bcb2:	e883 0003 	stmia.w	r3, {r0, r1}
 801bcb6:	f107 031c 	add.w	r3, r7, #28
 801bcba:	4618      	mov	r0, r3
 801bcbc:	f001 feab 	bl	801da16 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801bcc0:	f240 10ff 	movw	r0, #511	; 0x1ff
 801bcc4:	f001 fef6 	bl	801dab4 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 801bcc8:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801bccc:	f000 fe25 	bl	801c91a <RadioRead>
 801bcd0:	4603      	mov	r3, r0
 801bcd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801bcd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bcda:	f023 0310 	bic.w	r3, r3, #16
 801bcde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 801bce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bce6:	4619      	mov	r1, r3
 801bce8:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801bcec:	f000 fe03 	bl	801c8f6 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 801bcf0:	2104      	movs	r1, #4
 801bcf2:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801bcf6:	f000 fdfe 	bl	801c8f6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801bcfa:	f640 009b 	movw	r0, #2203	; 0x89b
 801bcfe:	f000 fe0c 	bl	801c91a <RadioRead>
 801bd02:	4603      	mov	r3, r0
 801bd04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801bd08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bd0c:	f023 031c 	bic.w	r3, r3, #28
 801bd10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 801bd14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bd18:	f043 0308 	orr.w	r3, r3, #8
 801bd1c:	b2db      	uxtb	r3, r3
 801bd1e:	4619      	mov	r1, r3
 801bd20:	f640 009b 	movw	r0, #2203	; 0x89b
 801bd24:	f000 fde7 	bl	801c8f6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 801bd28:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801bd2c:	f000 fdf5 	bl	801c91a <RadioRead>
 801bd30:	4603      	mov	r3, r0
 801bd32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801bd36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bd3a:	f023 0318 	bic.w	r3, r3, #24
 801bd3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801bd42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bd46:	f043 0318 	orr.w	r3, r3, #24
 801bd4a:	b2db      	uxtb	r3, r3
 801bd4c:	4619      	mov	r1, r3
 801bd4e:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801bd52:	f000 fdd0 	bl	801c8f6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801bd56:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801bd5a:	f000 fdde 	bl	801c91a <RadioRead>
 801bd5e:	4603      	mov	r3, r0
 801bd60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801bd64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bd68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801bd6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 801bd70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bd74:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801bd78:	b2db      	uxtb	r3, r3
 801bd7a:	4619      	mov	r1, r3
 801bd7c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801bd80:	f000 fdb9 	bl	801c8f6 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801bd84:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801bd86:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801bd8a:	fb02 f303 	mul.w	r3, r2, r3
 801bd8e:	461a      	mov	r2, r3
 801bd90:	687b      	ldr	r3, [r7, #4]
 801bd92:	fbb2 f3f3 	udiv	r3, r2, r3
 801bd96:	4a4b      	ldr	r2, [pc, #300]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801bd98:	6093      	str	r3, [r2, #8]
            break;
 801bd9a:	e115      	b.n	801bfc8 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801bd9c:	2000      	movs	r0, #0
 801bd9e:	f002 f801 	bl	801dda4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bda2:	4b48      	ldr	r3, [pc, #288]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801bda4:	2200      	movs	r2, #0
 801bda6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801bdaa:	4a46      	ldr	r2, [pc, #280]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801bdac:	687b      	ldr	r3, [r7, #4]
 801bdae:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801bdb0:	4b44      	ldr	r3, [pc, #272]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801bdb2:	220b      	movs	r2, #11
 801bdb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801bdb8:	68b8      	ldr	r0, [r7, #8]
 801bdba:	f002 fec5 	bl	801eb48 <SUBGRF_GetFskBandwidthRegValue>
 801bdbe:	4603      	mov	r3, r0
 801bdc0:	461a      	mov	r2, r3
 801bdc2:	4b40      	ldr	r3, [pc, #256]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801bdc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bdc8:	4b3e      	ldr	r3, [pc, #248]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801bdca:	2200      	movs	r2, #0
 801bdcc:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801bdce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bdd0:	00db      	lsls	r3, r3, #3
 801bdd2:	b29a      	uxth	r2, r3
 801bdd4:	4b3b      	ldr	r3, [pc, #236]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801bdd6:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801bdd8:	4b3a      	ldr	r3, [pc, #232]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801bdda:	2204      	movs	r2, #4
 801bddc:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801bdde:	4b39      	ldr	r3, [pc, #228]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801bde0:	2218      	movs	r2, #24
 801bde2:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801bde4:	4b37      	ldr	r3, [pc, #220]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801bde6:	2200      	movs	r2, #0
 801bde8:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801bdea:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801bdee:	f083 0301 	eor.w	r3, r3, #1
 801bdf2:	b2db      	uxtb	r3, r3
 801bdf4:	461a      	mov	r2, r3
 801bdf6:	4b33      	ldr	r3, [pc, #204]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801bdf8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801bdfa:	4b33      	ldr	r3, [pc, #204]	; (801bec8 <RadioSetRxConfig+0x300>)
 801bdfc:	781a      	ldrb	r2, [r3, #0]
 801bdfe:	4b31      	ldr	r3, [pc, #196]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801be00:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801be02:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801be06:	2b00      	cmp	r3, #0
 801be08:	d003      	beq.n	801be12 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801be0a:	4b2e      	ldr	r3, [pc, #184]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801be0c:	22f2      	movs	r2, #242	; 0xf2
 801be0e:	75da      	strb	r2, [r3, #23]
 801be10:	e002      	b.n	801be18 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801be12:	4b2c      	ldr	r3, [pc, #176]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801be14:	2201      	movs	r2, #1
 801be16:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801be18:	4b2a      	ldr	r3, [pc, #168]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801be1a:	2201      	movs	r2, #1
 801be1c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801be1e:	f000 fc68 	bl	801c6f2 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801be22:	2000      	movs	r0, #0
 801be24:	f7ff fdfc 	bl	801ba20 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801be28:	4828      	ldr	r0, [pc, #160]	; (801becc <RadioSetRxConfig+0x304>)
 801be2a:	f002 fa59 	bl	801e2e0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801be2e:	4828      	ldr	r0, [pc, #160]	; (801bed0 <RadioSetRxConfig+0x308>)
 801be30:	f002 fb28 	bl	801e484 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801be34:	4a28      	ldr	r2, [pc, #160]	; (801bed8 <RadioSetRxConfig+0x310>)
 801be36:	f107 0314 	add.w	r3, r7, #20
 801be3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801be3e:	e883 0003 	stmia.w	r3, {r0, r1}
 801be42:	f107 0314 	add.w	r3, r7, #20
 801be46:	4618      	mov	r0, r3
 801be48:	f001 fde5 	bl	801da16 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801be4c:	f240 10ff 	movw	r0, #511	; 0x1ff
 801be50:	f001 fe30 	bl	801dab4 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801be54:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801be56:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801be5a:	fb02 f303 	mul.w	r3, r2, r3
 801be5e:	461a      	mov	r2, r3
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	fbb2 f3f3 	udiv	r3, r2, r3
 801be66:	4a17      	ldr	r2, [pc, #92]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801be68:	6093      	str	r3, [r2, #8]
            break;
 801be6a:	e0ad      	b.n	801bfc8 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801be6c:	2000      	movs	r0, #0
 801be6e:	f001 ff99 	bl	801dda4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801be72:	4b14      	ldr	r3, [pc, #80]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801be74:	2201      	movs	r2, #1
 801be76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	b2da      	uxtb	r2, r3
 801be7e:	4b11      	ldr	r3, [pc, #68]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801be80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801be84:	4a15      	ldr	r2, [pc, #84]	; (801bedc <RadioSetRxConfig+0x314>)
 801be86:	68bb      	ldr	r3, [r7, #8]
 801be88:	4413      	add	r3, r2
 801be8a:	781a      	ldrb	r2, [r3, #0]
 801be8c:	4b0d      	ldr	r3, [pc, #52]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801be8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801be92:	4a0c      	ldr	r2, [pc, #48]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801be94:	7bbb      	ldrb	r3, [r7, #14]
 801be96:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801be9a:	68bb      	ldr	r3, [r7, #8]
 801be9c:	2b00      	cmp	r3, #0
 801be9e:	d105      	bne.n	801beac <RadioSetRxConfig+0x2e4>
 801bea0:	687b      	ldr	r3, [r7, #4]
 801bea2:	2b0b      	cmp	r3, #11
 801bea4:	d008      	beq.n	801beb8 <RadioSetRxConfig+0x2f0>
 801bea6:	687b      	ldr	r3, [r7, #4]
 801bea8:	2b0c      	cmp	r3, #12
 801beaa:	d005      	beq.n	801beb8 <RadioSetRxConfig+0x2f0>
 801beac:	68bb      	ldr	r3, [r7, #8]
 801beae:	2b01      	cmp	r3, #1
 801beb0:	d116      	bne.n	801bee0 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801beb2:	687b      	ldr	r3, [r7, #4]
 801beb4:	2b0c      	cmp	r3, #12
 801beb6:	d113      	bne.n	801bee0 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801beb8:	4b02      	ldr	r3, [pc, #8]	; (801bec4 <RadioSetRxConfig+0x2fc>)
 801beba:	2201      	movs	r2, #1
 801bebc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801bec0:	e012      	b.n	801bee8 <RadioSetRxConfig+0x320>
 801bec2:	bf00      	nop
 801bec4:	20001d9c 	.word	0x20001d9c
 801bec8:	20000134 	.word	0x20000134
 801becc:	20001dd4 	.word	0x20001dd4
 801bed0:	20001daa 	.word	0x20001daa
 801bed4:	080217cc 	.word	0x080217cc
 801bed8:	080217d4 	.word	0x080217d4
 801bedc:	08021e88 	.word	0x08021e88
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801bee0:	4b3b      	ldr	r3, [pc, #236]	; (801bfd0 <RadioSetRxConfig+0x408>)
 801bee2:	2200      	movs	r2, #0
 801bee4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801bee8:	4b39      	ldr	r3, [pc, #228]	; (801bfd0 <RadioSetRxConfig+0x408>)
 801beea:	2201      	movs	r2, #1
 801beec:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801beee:	4b38      	ldr	r3, [pc, #224]	; (801bfd0 <RadioSetRxConfig+0x408>)
 801bef0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801bef4:	2b05      	cmp	r3, #5
 801bef6:	d004      	beq.n	801bf02 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801bef8:	4b35      	ldr	r3, [pc, #212]	; (801bfd0 <RadioSetRxConfig+0x408>)
 801befa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801befe:	2b06      	cmp	r3, #6
 801bf00:	d10a      	bne.n	801bf18 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801bf02:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bf04:	2b0b      	cmp	r3, #11
 801bf06:	d803      	bhi.n	801bf10 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801bf08:	4b31      	ldr	r3, [pc, #196]	; (801bfd0 <RadioSetRxConfig+0x408>)
 801bf0a:	220c      	movs	r2, #12
 801bf0c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801bf0e:	e006      	b.n	801bf1e <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801bf10:	4a2f      	ldr	r2, [pc, #188]	; (801bfd0 <RadioSetRxConfig+0x408>)
 801bf12:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bf14:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801bf16:	e002      	b.n	801bf1e <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801bf18:	4a2d      	ldr	r2, [pc, #180]	; (801bfd0 <RadioSetRxConfig+0x408>)
 801bf1a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bf1c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801bf1e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801bf22:	4b2b      	ldr	r3, [pc, #172]	; (801bfd0 <RadioSetRxConfig+0x408>)
 801bf24:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801bf26:	4b2b      	ldr	r3, [pc, #172]	; (801bfd4 <RadioSetRxConfig+0x40c>)
 801bf28:	781a      	ldrb	r2, [r3, #0]
 801bf2a:	4b29      	ldr	r3, [pc, #164]	; (801bfd0 <RadioSetRxConfig+0x408>)
 801bf2c:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801bf2e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801bf32:	4b27      	ldr	r3, [pc, #156]	; (801bfd0 <RadioSetRxConfig+0x408>)
 801bf34:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801bf38:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801bf3c:	4b24      	ldr	r3, [pc, #144]	; (801bfd0 <RadioSetRxConfig+0x408>)
 801bf3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801bf42:	f000 fbd6 	bl	801c6f2 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801bf46:	2001      	movs	r0, #1
 801bf48:	f7ff fd6a 	bl	801ba20 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bf4c:	4822      	ldr	r0, [pc, #136]	; (801bfd8 <RadioSetRxConfig+0x410>)
 801bf4e:	f002 f9c7 	bl	801e2e0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bf52:	4822      	ldr	r0, [pc, #136]	; (801bfdc <RadioSetRxConfig+0x414>)
 801bf54:	f002 fa96 	bl	801e484 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801bf58:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801bf5a:	b2db      	uxtb	r3, r3
 801bf5c:	4618      	mov	r0, r3
 801bf5e:	f001 ff30 	bl	801ddc2 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 801bf62:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801bf66:	f002 fbe9 	bl	801e73c <SUBGRF_ReadRegister>
 801bf6a:	4603      	mov	r3, r0
 801bf6c:	f003 0301 	and.w	r3, r3, #1
 801bf70:	b2db      	uxtb	r3, r3
 801bf72:	4619      	mov	r1, r3
 801bf74:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801bf78:	f002 fbcc 	bl	801e714 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801bf7c:	4b14      	ldr	r3, [pc, #80]	; (801bfd0 <RadioSetRxConfig+0x408>)
 801bf7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801bf82:	2b01      	cmp	r3, #1
 801bf84:	d10d      	bne.n	801bfa2 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801bf86:	f240 7036 	movw	r0, #1846	; 0x736
 801bf8a:	f002 fbd7 	bl	801e73c <SUBGRF_ReadRegister>
 801bf8e:	4603      	mov	r3, r0
 801bf90:	f023 0304 	bic.w	r3, r3, #4
 801bf94:	b2db      	uxtb	r3, r3
 801bf96:	4619      	mov	r1, r3
 801bf98:	f240 7036 	movw	r0, #1846	; 0x736
 801bf9c:	f002 fbba 	bl	801e714 <SUBGRF_WriteRegister>
 801bfa0:	e00c      	b.n	801bfbc <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801bfa2:	f240 7036 	movw	r0, #1846	; 0x736
 801bfa6:	f002 fbc9 	bl	801e73c <SUBGRF_ReadRegister>
 801bfaa:	4603      	mov	r3, r0
 801bfac:	f043 0304 	orr.w	r3, r3, #4
 801bfb0:	b2db      	uxtb	r3, r3
 801bfb2:	4619      	mov	r1, r3
 801bfb4:	f240 7036 	movw	r0, #1846	; 0x736
 801bfb8:	f002 fbac 	bl	801e714 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801bfbc:	4b04      	ldr	r3, [pc, #16]	; (801bfd0 <RadioSetRxConfig+0x408>)
 801bfbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bfc2:	609a      	str	r2, [r3, #8]
            break;
 801bfc4:	e000      	b.n	801bfc8 <RadioSetRxConfig+0x400>
            break;
 801bfc6:	bf00      	nop
    }
}
 801bfc8:	bf00      	nop
 801bfca:	3728      	adds	r7, #40	; 0x28
 801bfcc:	46bd      	mov	sp, r7
 801bfce:	bd80      	pop	{r7, pc}
 801bfd0:	20001d9c 	.word	0x20001d9c
 801bfd4:	20000134 	.word	0x20000134
 801bfd8:	20001dd4 	.word	0x20001dd4
 801bfdc:	20001daa 	.word	0x20001daa

0801bfe0 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801bfe0:	b580      	push	{r7, lr}
 801bfe2:	b086      	sub	sp, #24
 801bfe4:	af00      	add	r7, sp, #0
 801bfe6:	60ba      	str	r2, [r7, #8]
 801bfe8:	607b      	str	r3, [r7, #4]
 801bfea:	4603      	mov	r3, r0
 801bfec:	73fb      	strb	r3, [r7, #15]
 801bfee:	460b      	mov	r3, r1
 801bff0:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 801bff2:	f002 fe76 	bl	801ece2 <RFW_DeInit>
    switch( modem )
 801bff6:	7bfb      	ldrb	r3, [r7, #15]
 801bff8:	2b04      	cmp	r3, #4
 801bffa:	f000 80c7 	beq.w	801c18c <RadioSetTxConfig+0x1ac>
 801bffe:	2b04      	cmp	r3, #4
 801c000:	f300 80d6 	bgt.w	801c1b0 <RadioSetTxConfig+0x1d0>
 801c004:	2b00      	cmp	r3, #0
 801c006:	d002      	beq.n	801c00e <RadioSetTxConfig+0x2e>
 801c008:	2b01      	cmp	r3, #1
 801c00a:	d059      	beq.n	801c0c0 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801c00c:	e0d0      	b.n	801c1b0 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801c00e:	4b77      	ldr	r3, [pc, #476]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c010:	2200      	movs	r2, #0
 801c012:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801c016:	4a75      	ldr	r2, [pc, #468]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c018:	6a3b      	ldr	r3, [r7, #32]
 801c01a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801c01c:	4b73      	ldr	r3, [pc, #460]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c01e:	220b      	movs	r2, #11
 801c020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801c024:	6878      	ldr	r0, [r7, #4]
 801c026:	f002 fd8f 	bl	801eb48 <SUBGRF_GetFskBandwidthRegValue>
 801c02a:	4603      	mov	r3, r0
 801c02c:	461a      	mov	r2, r3
 801c02e:	4b6f      	ldr	r3, [pc, #444]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801c034:	4a6d      	ldr	r2, [pc, #436]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c036:	68bb      	ldr	r3, [r7, #8]
 801c038:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801c03a:	4b6c      	ldr	r3, [pc, #432]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c03c:	2200      	movs	r2, #0
 801c03e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801c040:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801c042:	00db      	lsls	r3, r3, #3
 801c044:	b29a      	uxth	r2, r3
 801c046:	4b69      	ldr	r3, [pc, #420]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c048:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801c04a:	4b68      	ldr	r3, [pc, #416]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c04c:	2204      	movs	r2, #4
 801c04e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801c050:	4b66      	ldr	r3, [pc, #408]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c052:	2218      	movs	r2, #24
 801c054:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801c056:	4b65      	ldr	r3, [pc, #404]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c058:	2200      	movs	r2, #0
 801c05a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801c05c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801c060:	f083 0301 	eor.w	r3, r3, #1
 801c064:	b2db      	uxtb	r3, r3
 801c066:	461a      	mov	r2, r3
 801c068:	4b60      	ldr	r3, [pc, #384]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c06a:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801c06c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801c070:	2b00      	cmp	r3, #0
 801c072:	d003      	beq.n	801c07c <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801c074:	4b5d      	ldr	r3, [pc, #372]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c076:	22f2      	movs	r2, #242	; 0xf2
 801c078:	75da      	strb	r2, [r3, #23]
 801c07a:	e002      	b.n	801c082 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801c07c:	4b5b      	ldr	r3, [pc, #364]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c07e:	2201      	movs	r2, #1
 801c080:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801c082:	4b5a      	ldr	r3, [pc, #360]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c084:	2201      	movs	r2, #1
 801c086:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801c088:	f000 fb33 	bl	801c6f2 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801c08c:	2000      	movs	r0, #0
 801c08e:	f7ff fcc7 	bl	801ba20 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c092:	4857      	ldr	r0, [pc, #348]	; (801c1f0 <RadioSetTxConfig+0x210>)
 801c094:	f002 f924 	bl	801e2e0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c098:	4856      	ldr	r0, [pc, #344]	; (801c1f4 <RadioSetTxConfig+0x214>)
 801c09a:	f002 f9f3 	bl	801e484 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801c09e:	4a56      	ldr	r2, [pc, #344]	; (801c1f8 <RadioSetTxConfig+0x218>)
 801c0a0:	f107 0310 	add.w	r3, r7, #16
 801c0a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c0a8:	e883 0003 	stmia.w	r3, {r0, r1}
 801c0ac:	f107 0310 	add.w	r3, r7, #16
 801c0b0:	4618      	mov	r0, r3
 801c0b2:	f001 fcb0 	bl	801da16 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801c0b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 801c0ba:	f001 fcfb 	bl	801dab4 <SUBGRF_SetWhiteningSeed>
            break;
 801c0be:	e078      	b.n	801c1b2 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801c0c0:	4b4a      	ldr	r3, [pc, #296]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c0c2:	2201      	movs	r2, #1
 801c0c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801c0c8:	6a3b      	ldr	r3, [r7, #32]
 801c0ca:	b2da      	uxtb	r2, r3
 801c0cc:	4b47      	ldr	r3, [pc, #284]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c0ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801c0d2:	4a4a      	ldr	r2, [pc, #296]	; (801c1fc <RadioSetTxConfig+0x21c>)
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	4413      	add	r3, r2
 801c0d8:	781a      	ldrb	r2, [r3, #0]
 801c0da:	4b44      	ldr	r3, [pc, #272]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c0dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801c0e0:	4a42      	ldr	r2, [pc, #264]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c0e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c0e6:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801c0ea:	687b      	ldr	r3, [r7, #4]
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	d105      	bne.n	801c0fc <RadioSetTxConfig+0x11c>
 801c0f0:	6a3b      	ldr	r3, [r7, #32]
 801c0f2:	2b0b      	cmp	r3, #11
 801c0f4:	d008      	beq.n	801c108 <RadioSetTxConfig+0x128>
 801c0f6:	6a3b      	ldr	r3, [r7, #32]
 801c0f8:	2b0c      	cmp	r3, #12
 801c0fa:	d005      	beq.n	801c108 <RadioSetTxConfig+0x128>
 801c0fc:	687b      	ldr	r3, [r7, #4]
 801c0fe:	2b01      	cmp	r3, #1
 801c100:	d107      	bne.n	801c112 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801c102:	6a3b      	ldr	r3, [r7, #32]
 801c104:	2b0c      	cmp	r3, #12
 801c106:	d104      	bne.n	801c112 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801c108:	4b38      	ldr	r3, [pc, #224]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c10a:	2201      	movs	r2, #1
 801c10c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801c110:	e003      	b.n	801c11a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801c112:	4b36      	ldr	r3, [pc, #216]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c114:	2200      	movs	r2, #0
 801c116:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801c11a:	4b34      	ldr	r3, [pc, #208]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c11c:	2201      	movs	r2, #1
 801c11e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801c120:	4b32      	ldr	r3, [pc, #200]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c122:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c126:	2b05      	cmp	r3, #5
 801c128:	d004      	beq.n	801c134 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801c12a:	4b30      	ldr	r3, [pc, #192]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c12c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801c130:	2b06      	cmp	r3, #6
 801c132:	d10a      	bne.n	801c14a <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801c134:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801c136:	2b0b      	cmp	r3, #11
 801c138:	d803      	bhi.n	801c142 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801c13a:	4b2c      	ldr	r3, [pc, #176]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c13c:	220c      	movs	r2, #12
 801c13e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801c140:	e006      	b.n	801c150 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801c142:	4a2a      	ldr	r2, [pc, #168]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c144:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801c146:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801c148:	e002      	b.n	801c150 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801c14a:	4a28      	ldr	r2, [pc, #160]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c14c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801c14e:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801c150:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801c154:	4b25      	ldr	r3, [pc, #148]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c156:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801c158:	4b29      	ldr	r3, [pc, #164]	; (801c200 <RadioSetTxConfig+0x220>)
 801c15a:	781a      	ldrb	r2, [r3, #0]
 801c15c:	4b23      	ldr	r3, [pc, #140]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c15e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801c160:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801c164:	4b21      	ldr	r3, [pc, #132]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c166:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801c16a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801c16e:	4b1f      	ldr	r3, [pc, #124]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c170:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801c174:	f000 fabd 	bl	801c6f2 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801c178:	2001      	movs	r0, #1
 801c17a:	f7ff fc51 	bl	801ba20 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c17e:	481c      	ldr	r0, [pc, #112]	; (801c1f0 <RadioSetTxConfig+0x210>)
 801c180:	f002 f8ae 	bl	801e2e0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c184:	481b      	ldr	r0, [pc, #108]	; (801c1f4 <RadioSetTxConfig+0x214>)
 801c186:	f002 f97d 	bl	801e484 <SUBGRF_SetPacketParams>
            break;
 801c18a:	e012      	b.n	801c1b2 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801c18c:	2004      	movs	r0, #4
 801c18e:	f7ff fc47 	bl	801ba20 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801c192:	4b16      	ldr	r3, [pc, #88]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c194:	2202      	movs	r2, #2
 801c196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801c19a:	4a14      	ldr	r2, [pc, #80]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c19c:	6a3b      	ldr	r3, [r7, #32]
 801c19e:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801c1a0:	4b12      	ldr	r3, [pc, #72]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c1a2:	2216      	movs	r2, #22
 801c1a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c1a8:	4811      	ldr	r0, [pc, #68]	; (801c1f0 <RadioSetTxConfig+0x210>)
 801c1aa:	f002 f899 	bl	801e2e0 <SUBGRF_SetModulationParams>
            break;
 801c1ae:	e000      	b.n	801c1b2 <RadioSetTxConfig+0x1d2>
            break;
 801c1b0:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801c1b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c1b6:	4618      	mov	r0, r3
 801c1b8:	f002 fbc8 	bl	801e94c <SUBGRF_SetRfTxPower>
 801c1bc:	4603      	mov	r3, r0
 801c1be:	461a      	mov	r2, r3
 801c1c0:	4b0a      	ldr	r3, [pc, #40]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c1c2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801c1c6:	210e      	movs	r1, #14
 801c1c8:	f640 101f 	movw	r0, #2335	; 0x91f
 801c1cc:	f002 faa2 	bl	801e714 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801c1d0:	4b06      	ldr	r3, [pc, #24]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c1d2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c1d6:	4618      	mov	r0, r3
 801c1d8:	f002 fd97 	bl	801ed0a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801c1dc:	4a03      	ldr	r2, [pc, #12]	; (801c1ec <RadioSetTxConfig+0x20c>)
 801c1de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c1e0:	6053      	str	r3, [r2, #4]
}
 801c1e2:	bf00      	nop
 801c1e4:	3718      	adds	r7, #24
 801c1e6:	46bd      	mov	sp, r7
 801c1e8:	bd80      	pop	{r7, pc}
 801c1ea:	bf00      	nop
 801c1ec:	20001d9c 	.word	0x20001d9c
 801c1f0:	20001dd4 	.word	0x20001dd4
 801c1f4:	20001daa 	.word	0x20001daa
 801c1f8:	080217d4 	.word	0x080217d4
 801c1fc:	08021e88 	.word	0x08021e88
 801c200:	20000134 	.word	0x20000134

0801c204 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801c204:	b480      	push	{r7}
 801c206:	b083      	sub	sp, #12
 801c208:	af00      	add	r7, sp, #0
 801c20a:	6078      	str	r0, [r7, #4]
    return true;
 801c20c:	2301      	movs	r3, #1
}
 801c20e:	4618      	mov	r0, r3
 801c210:	370c      	adds	r7, #12
 801c212:	46bd      	mov	sp, r7
 801c214:	bc80      	pop	{r7}
 801c216:	4770      	bx	lr

0801c218 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801c218:	b480      	push	{r7}
 801c21a:	b085      	sub	sp, #20
 801c21c:	af00      	add	r7, sp, #0
 801c21e:	4603      	mov	r3, r0
 801c220:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801c222:	2300      	movs	r3, #0
 801c224:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801c226:	79fb      	ldrb	r3, [r7, #7]
 801c228:	2b0a      	cmp	r3, #10
 801c22a:	d83e      	bhi.n	801c2aa <RadioGetLoRaBandwidthInHz+0x92>
 801c22c:	a201      	add	r2, pc, #4	; (adr r2, 801c234 <RadioGetLoRaBandwidthInHz+0x1c>)
 801c22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c232:	bf00      	nop
 801c234:	0801c261 	.word	0x0801c261
 801c238:	0801c271 	.word	0x0801c271
 801c23c:	0801c281 	.word	0x0801c281
 801c240:	0801c291 	.word	0x0801c291
 801c244:	0801c299 	.word	0x0801c299
 801c248:	0801c29f 	.word	0x0801c29f
 801c24c:	0801c2a5 	.word	0x0801c2a5
 801c250:	0801c2ab 	.word	0x0801c2ab
 801c254:	0801c269 	.word	0x0801c269
 801c258:	0801c279 	.word	0x0801c279
 801c25c:	0801c289 	.word	0x0801c289
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801c260:	f641 6384 	movw	r3, #7812	; 0x1e84
 801c264:	60fb      	str	r3, [r7, #12]
        break;
 801c266:	e020      	b.n	801c2aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801c268:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801c26c:	60fb      	str	r3, [r7, #12]
        break;
 801c26e:	e01c      	b.n	801c2aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801c270:	f643 5309 	movw	r3, #15625	; 0x3d09
 801c274:	60fb      	str	r3, [r7, #12]
        break;
 801c276:	e018      	b.n	801c2aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801c278:	f245 1361 	movw	r3, #20833	; 0x5161
 801c27c:	60fb      	str	r3, [r7, #12]
        break;
 801c27e:	e014      	b.n	801c2aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801c280:	f647 2312 	movw	r3, #31250	; 0x7a12
 801c284:	60fb      	str	r3, [r7, #12]
        break;
 801c286:	e010      	b.n	801c2aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801c288:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801c28c:	60fb      	str	r3, [r7, #12]
        break;
 801c28e:	e00c      	b.n	801c2aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801c290:	f24f 4324 	movw	r3, #62500	; 0xf424
 801c294:	60fb      	str	r3, [r7, #12]
        break;
 801c296:	e008      	b.n	801c2aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801c298:	4b07      	ldr	r3, [pc, #28]	; (801c2b8 <RadioGetLoRaBandwidthInHz+0xa0>)
 801c29a:	60fb      	str	r3, [r7, #12]
        break;
 801c29c:	e005      	b.n	801c2aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801c29e:	4b07      	ldr	r3, [pc, #28]	; (801c2bc <RadioGetLoRaBandwidthInHz+0xa4>)
 801c2a0:	60fb      	str	r3, [r7, #12]
        break;
 801c2a2:	e002      	b.n	801c2aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801c2a4:	4b06      	ldr	r3, [pc, #24]	; (801c2c0 <RadioGetLoRaBandwidthInHz+0xa8>)
 801c2a6:	60fb      	str	r3, [r7, #12]
        break;
 801c2a8:	bf00      	nop
    }

    return bandwidthInHz;
 801c2aa:	68fb      	ldr	r3, [r7, #12]
}
 801c2ac:	4618      	mov	r0, r3
 801c2ae:	3714      	adds	r7, #20
 801c2b0:	46bd      	mov	sp, r7
 801c2b2:	bc80      	pop	{r7}
 801c2b4:	4770      	bx	lr
 801c2b6:	bf00      	nop
 801c2b8:	0001e848 	.word	0x0001e848
 801c2bc:	0003d090 	.word	0x0003d090
 801c2c0:	0007a120 	.word	0x0007a120

0801c2c4 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801c2c4:	b480      	push	{r7}
 801c2c6:	b083      	sub	sp, #12
 801c2c8:	af00      	add	r7, sp, #0
 801c2ca:	6078      	str	r0, [r7, #4]
 801c2cc:	4608      	mov	r0, r1
 801c2ce:	4611      	mov	r1, r2
 801c2d0:	461a      	mov	r2, r3
 801c2d2:	4603      	mov	r3, r0
 801c2d4:	70fb      	strb	r3, [r7, #3]
 801c2d6:	460b      	mov	r3, r1
 801c2d8:	803b      	strh	r3, [r7, #0]
 801c2da:	4613      	mov	r3, r2
 801c2dc:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 801c2de:	883b      	ldrh	r3, [r7, #0]
 801c2e0:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801c2e2:	78ba      	ldrb	r2, [r7, #2]
 801c2e4:	f082 0201 	eor.w	r2, r2, #1
 801c2e8:	b2d2      	uxtb	r2, r2
 801c2ea:	2a00      	cmp	r2, #0
 801c2ec:	d001      	beq.n	801c2f2 <RadioGetGfskTimeOnAirNumerator+0x2e>
 801c2ee:	2208      	movs	r2, #8
 801c2f0:	e000      	b.n	801c2f4 <RadioGetGfskTimeOnAirNumerator+0x30>
 801c2f2:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801c2f4:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801c2f6:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801c2fa:	7c3b      	ldrb	r3, [r7, #16]
 801c2fc:	7d39      	ldrb	r1, [r7, #20]
 801c2fe:	2900      	cmp	r1, #0
 801c300:	d001      	beq.n	801c306 <RadioGetGfskTimeOnAirNumerator+0x42>
 801c302:	2102      	movs	r1, #2
 801c304:	e000      	b.n	801c308 <RadioGetGfskTimeOnAirNumerator+0x44>
 801c306:	2100      	movs	r1, #0
 801c308:	440b      	add	r3, r1
 801c30a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801c30c:	4413      	add	r3, r2
}
 801c30e:	4618      	mov	r0, r3
 801c310:	370c      	adds	r7, #12
 801c312:	46bd      	mov	sp, r7
 801c314:	bc80      	pop	{r7}
 801c316:	4770      	bx	lr

0801c318 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801c318:	b480      	push	{r7}
 801c31a:	b08b      	sub	sp, #44	; 0x2c
 801c31c:	af00      	add	r7, sp, #0
 801c31e:	60f8      	str	r0, [r7, #12]
 801c320:	60b9      	str	r1, [r7, #8]
 801c322:	4611      	mov	r1, r2
 801c324:	461a      	mov	r2, r3
 801c326:	460b      	mov	r3, r1
 801c328:	71fb      	strb	r3, [r7, #7]
 801c32a:	4613      	mov	r3, r2
 801c32c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801c32e:	79fb      	ldrb	r3, [r7, #7]
 801c330:	3304      	adds	r3, #4
 801c332:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801c334:	2300      	movs	r3, #0
 801c336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801c33a:	68bb      	ldr	r3, [r7, #8]
 801c33c:	2b05      	cmp	r3, #5
 801c33e:	d002      	beq.n	801c346 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801c340:	68bb      	ldr	r3, [r7, #8]
 801c342:	2b06      	cmp	r3, #6
 801c344:	d104      	bne.n	801c350 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801c346:	88bb      	ldrh	r3, [r7, #4]
 801c348:	2b0b      	cmp	r3, #11
 801c34a:	d801      	bhi.n	801c350 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801c34c:	230c      	movs	r3, #12
 801c34e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801c350:	68fb      	ldr	r3, [r7, #12]
 801c352:	2b00      	cmp	r3, #0
 801c354:	d105      	bne.n	801c362 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801c356:	68bb      	ldr	r3, [r7, #8]
 801c358:	2b0b      	cmp	r3, #11
 801c35a:	d008      	beq.n	801c36e <RadioGetLoRaTimeOnAirNumerator+0x56>
 801c35c:	68bb      	ldr	r3, [r7, #8]
 801c35e:	2b0c      	cmp	r3, #12
 801c360:	d005      	beq.n	801c36e <RadioGetLoRaTimeOnAirNumerator+0x56>
 801c362:	68fb      	ldr	r3, [r7, #12]
 801c364:	2b01      	cmp	r3, #1
 801c366:	d105      	bne.n	801c374 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801c368:	68bb      	ldr	r3, [r7, #8]
 801c36a:	2b0c      	cmp	r3, #12
 801c36c:	d102      	bne.n	801c374 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801c36e:	2301      	movs	r3, #1
 801c370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801c374:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801c378:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801c37a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801c37e:	2a00      	cmp	r2, #0
 801c380:	d001      	beq.n	801c386 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801c382:	2210      	movs	r2, #16
 801c384:	e000      	b.n	801c388 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801c386:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801c388:	4413      	add	r3, r2
 801c38a:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801c38c:	68bb      	ldr	r3, [r7, #8]
 801c38e:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801c390:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801c392:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801c396:	2a00      	cmp	r2, #0
 801c398:	d001      	beq.n	801c39e <RadioGetLoRaTimeOnAirNumerator+0x86>
 801c39a:	2200      	movs	r2, #0
 801c39c:	e000      	b.n	801c3a0 <RadioGetLoRaTimeOnAirNumerator+0x88>
 801c39e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801c3a0:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801c3a2:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801c3a4:	68bb      	ldr	r3, [r7, #8]
 801c3a6:	2b06      	cmp	r3, #6
 801c3a8:	d803      	bhi.n	801c3b2 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801c3aa:	68bb      	ldr	r3, [r7, #8]
 801c3ac:	009b      	lsls	r3, r3, #2
 801c3ae:	623b      	str	r3, [r7, #32]
 801c3b0:	e00e      	b.n	801c3d0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801c3b2:	69fb      	ldr	r3, [r7, #28]
 801c3b4:	3308      	adds	r3, #8
 801c3b6:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801c3b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c3bc:	2b00      	cmp	r3, #0
 801c3be:	d004      	beq.n	801c3ca <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801c3c0:	68bb      	ldr	r3, [r7, #8]
 801c3c2:	3b02      	subs	r3, #2
 801c3c4:	009b      	lsls	r3, r3, #2
 801c3c6:	623b      	str	r3, [r7, #32]
 801c3c8:	e002      	b.n	801c3d0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801c3ca:	68bb      	ldr	r3, [r7, #8]
 801c3cc:	009b      	lsls	r3, r3, #2
 801c3ce:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801c3d0:	69fb      	ldr	r3, [r7, #28]
 801c3d2:	2b00      	cmp	r3, #0
 801c3d4:	da01      	bge.n	801c3da <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801c3d6:	2300      	movs	r3, #0
 801c3d8:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801c3da:	69fa      	ldr	r2, [r7, #28]
 801c3dc:	6a3b      	ldr	r3, [r7, #32]
 801c3de:	4413      	add	r3, r2
 801c3e0:	1e5a      	subs	r2, r3, #1
 801c3e2:	6a3b      	ldr	r3, [r7, #32]
 801c3e4:	fb92 f3f3 	sdiv	r3, r2, r3
 801c3e8:	697a      	ldr	r2, [r7, #20]
 801c3ea:	fb03 f202 	mul.w	r2, r3, r2
 801c3ee:	88bb      	ldrh	r3, [r7, #4]
 801c3f0:	4413      	add	r3, r2
    int32_t intermediate =
 801c3f2:	330c      	adds	r3, #12
 801c3f4:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801c3f6:	68bb      	ldr	r3, [r7, #8]
 801c3f8:	2b06      	cmp	r3, #6
 801c3fa:	d802      	bhi.n	801c402 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801c3fc:	69bb      	ldr	r3, [r7, #24]
 801c3fe:	3302      	adds	r3, #2
 801c400:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801c402:	69bb      	ldr	r3, [r7, #24]
 801c404:	009b      	lsls	r3, r3, #2
 801c406:	1c5a      	adds	r2, r3, #1
 801c408:	68bb      	ldr	r3, [r7, #8]
 801c40a:	3b02      	subs	r3, #2
 801c40c:	fa02 f303 	lsl.w	r3, r2, r3
}
 801c410:	4618      	mov	r0, r3
 801c412:	372c      	adds	r7, #44	; 0x2c
 801c414:	46bd      	mov	sp, r7
 801c416:	bc80      	pop	{r7}
 801c418:	4770      	bx	lr
	...

0801c41c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801c41c:	b580      	push	{r7, lr}
 801c41e:	b08a      	sub	sp, #40	; 0x28
 801c420:	af04      	add	r7, sp, #16
 801c422:	60b9      	str	r1, [r7, #8]
 801c424:	607a      	str	r2, [r7, #4]
 801c426:	461a      	mov	r2, r3
 801c428:	4603      	mov	r3, r0
 801c42a:	73fb      	strb	r3, [r7, #15]
 801c42c:	4613      	mov	r3, r2
 801c42e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801c430:	2300      	movs	r3, #0
 801c432:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801c434:	2301      	movs	r3, #1
 801c436:	613b      	str	r3, [r7, #16]

    switch( modem )
 801c438:	7bfb      	ldrb	r3, [r7, #15]
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d002      	beq.n	801c444 <RadioTimeOnAir+0x28>
 801c43e:	2b01      	cmp	r3, #1
 801c440:	d017      	beq.n	801c472 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801c442:	e035      	b.n	801c4b0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801c444:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801c448:	8c3a      	ldrh	r2, [r7, #32]
 801c44a:	7bb9      	ldrb	r1, [r7, #14]
 801c44c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801c450:	9301      	str	r3, [sp, #4]
 801c452:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c456:	9300      	str	r3, [sp, #0]
 801c458:	4603      	mov	r3, r0
 801c45a:	6878      	ldr	r0, [r7, #4]
 801c45c:	f7ff ff32 	bl	801c2c4 <RadioGetGfskTimeOnAirNumerator>
 801c460:	4603      	mov	r3, r0
 801c462:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c466:	fb02 f303 	mul.w	r3, r2, r3
 801c46a:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801c46c:	687b      	ldr	r3, [r7, #4]
 801c46e:	613b      	str	r3, [r7, #16]
        break;
 801c470:	e01e      	b.n	801c4b0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801c472:	8c39      	ldrh	r1, [r7, #32]
 801c474:	7bba      	ldrb	r2, [r7, #14]
 801c476:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801c47a:	9302      	str	r3, [sp, #8]
 801c47c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c480:	9301      	str	r3, [sp, #4]
 801c482:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c486:	9300      	str	r3, [sp, #0]
 801c488:	460b      	mov	r3, r1
 801c48a:	6879      	ldr	r1, [r7, #4]
 801c48c:	68b8      	ldr	r0, [r7, #8]
 801c48e:	f7ff ff43 	bl	801c318 <RadioGetLoRaTimeOnAirNumerator>
 801c492:	4603      	mov	r3, r0
 801c494:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c498:	fb02 f303 	mul.w	r3, r2, r3
 801c49c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801c49e:	4a0a      	ldr	r2, [pc, #40]	; (801c4c8 <RadioTimeOnAir+0xac>)
 801c4a0:	68bb      	ldr	r3, [r7, #8]
 801c4a2:	4413      	add	r3, r2
 801c4a4:	781b      	ldrb	r3, [r3, #0]
 801c4a6:	4618      	mov	r0, r3
 801c4a8:	f7ff feb6 	bl	801c218 <RadioGetLoRaBandwidthInHz>
 801c4ac:	6138      	str	r0, [r7, #16]
        break;
 801c4ae:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 801c4b0:	697a      	ldr	r2, [r7, #20]
 801c4b2:	693b      	ldr	r3, [r7, #16]
 801c4b4:	4413      	add	r3, r2
 801c4b6:	1e5a      	subs	r2, r3, #1
 801c4b8:	693b      	ldr	r3, [r7, #16]
 801c4ba:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801c4be:	4618      	mov	r0, r3
 801c4c0:	3718      	adds	r7, #24
 801c4c2:	46bd      	mov	sp, r7
 801c4c4:	bd80      	pop	{r7, pc}
 801c4c6:	bf00      	nop
 801c4c8:	08021e88 	.word	0x08021e88

0801c4cc <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 801c4cc:	b580      	push	{r7, lr}
 801c4ce:	b084      	sub	sp, #16
 801c4d0:	af00      	add	r7, sp, #0
 801c4d2:	6078      	str	r0, [r7, #4]
 801c4d4:	460b      	mov	r3, r1
 801c4d6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801c4d8:	2300      	movs	r3, #0
 801c4da:	2200      	movs	r2, #0
 801c4dc:	f240 2101 	movw	r1, #513	; 0x201
 801c4e0:	f240 2001 	movw	r0, #513	; 0x201
 801c4e4:	f001 fd66 	bl	801dfb4 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801c4e8:	4b73      	ldr	r3, [pc, #460]	; (801c6b8 <RadioSend+0x1ec>)
 801c4ea:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c4ee:	2101      	movs	r1, #1
 801c4f0:	4618      	mov	r0, r3
 801c4f2:	f002 fa03 	bl	801e8fc <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801c4f6:	4b70      	ldr	r3, [pc, #448]	; (801c6b8 <RadioSend+0x1ec>)
 801c4f8:	781b      	ldrb	r3, [r3, #0]
 801c4fa:	2b01      	cmp	r3, #1
 801c4fc:	d112      	bne.n	801c524 <RadioSend+0x58>
 801c4fe:	4b6e      	ldr	r3, [pc, #440]	; (801c6b8 <RadioSend+0x1ec>)
 801c500:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c504:	2b06      	cmp	r3, #6
 801c506:	d10d      	bne.n	801c524 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801c508:	f640 0089 	movw	r0, #2185	; 0x889
 801c50c:	f002 f916 	bl	801e73c <SUBGRF_ReadRegister>
 801c510:	4603      	mov	r3, r0
 801c512:	f023 0304 	bic.w	r3, r3, #4
 801c516:	b2db      	uxtb	r3, r3
 801c518:	4619      	mov	r1, r3
 801c51a:	f640 0089 	movw	r0, #2185	; 0x889
 801c51e:	f002 f8f9 	bl	801e714 <SUBGRF_WriteRegister>
 801c522:	e00c      	b.n	801c53e <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801c524:	f640 0089 	movw	r0, #2185	; 0x889
 801c528:	f002 f908 	bl	801e73c <SUBGRF_ReadRegister>
 801c52c:	4603      	mov	r3, r0
 801c52e:	f043 0304 	orr.w	r3, r3, #4
 801c532:	b2db      	uxtb	r3, r3
 801c534:	4619      	mov	r1, r3
 801c536:	f640 0089 	movw	r0, #2185	; 0x889
 801c53a:	f002 f8eb 	bl	801e714 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 801c53e:	4b5e      	ldr	r3, [pc, #376]	; (801c6b8 <RadioSend+0x1ec>)
 801c540:	781b      	ldrb	r3, [r3, #0]
 801c542:	2b04      	cmp	r3, #4
 801c544:	f200 80a8 	bhi.w	801c698 <RadioSend+0x1cc>
 801c548:	a201      	add	r2, pc, #4	; (adr r2, 801c550 <RadioSend+0x84>)
 801c54a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c54e:	bf00      	nop
 801c550:	0801c57f 	.word	0x0801c57f
 801c554:	0801c565 	.word	0x0801c565
 801c558:	0801c57f 	.word	0x0801c57f
 801c55c:	0801c5e1 	.word	0x0801c5e1
 801c560:	0801c601 	.word	0x0801c601
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801c564:	4a54      	ldr	r2, [pc, #336]	; (801c6b8 <RadioSend+0x1ec>)
 801c566:	78fb      	ldrb	r3, [r7, #3]
 801c568:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c56a:	4854      	ldr	r0, [pc, #336]	; (801c6bc <RadioSend+0x1f0>)
 801c56c:	f001 ff8a 	bl	801e484 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801c570:	78fb      	ldrb	r3, [r7, #3]
 801c572:	2200      	movs	r2, #0
 801c574:	4619      	mov	r1, r3
 801c576:	6878      	ldr	r0, [r7, #4]
 801c578:	f001 fa3a 	bl	801d9f0 <SUBGRF_SendPayload>
            break;
 801c57c:	e08d      	b.n	801c69a <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801c57e:	f002 fbb6 	bl	801ecee <RFW_Is_Init>
 801c582:	4603      	mov	r3, r0
 801c584:	2b01      	cmp	r3, #1
 801c586:	d11e      	bne.n	801c5c6 <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801c588:	f107 020d 	add.w	r2, r7, #13
 801c58c:	78fb      	ldrb	r3, [r7, #3]
 801c58e:	4619      	mov	r1, r3
 801c590:	6878      	ldr	r0, [r7, #4]
 801c592:	f002 fbc4 	bl	801ed1e <RFW_TransmitInit>
 801c596:	4603      	mov	r3, r0
 801c598:	2b00      	cmp	r3, #0
 801c59a:	d10c      	bne.n	801c5b6 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801c59c:	7b7a      	ldrb	r2, [r7, #13]
 801c59e:	4b46      	ldr	r3, [pc, #280]	; (801c6b8 <RadioSend+0x1ec>)
 801c5a0:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c5a2:	4846      	ldr	r0, [pc, #280]	; (801c6bc <RadioSend+0x1f0>)
 801c5a4:	f001 ff6e 	bl	801e484 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801c5a8:	7b7b      	ldrb	r3, [r7, #13]
 801c5aa:	2200      	movs	r2, #0
 801c5ac:	4619      	mov	r1, r3
 801c5ae:	6878      	ldr	r0, [r7, #4]
 801c5b0:	f001 fa1e 	bl	801d9f0 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801c5b4:	e071      	b.n	801c69a <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801c5b6:	4b42      	ldr	r3, [pc, #264]	; (801c6c0 <RadioSend+0x1f4>)
 801c5b8:	2201      	movs	r2, #1
 801c5ba:	2100      	movs	r1, #0
 801c5bc:	2002      	movs	r0, #2
 801c5be:	f003 fcef 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 801c5c2:	2303      	movs	r3, #3
 801c5c4:	e073      	b.n	801c6ae <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801c5c6:	4a3c      	ldr	r2, [pc, #240]	; (801c6b8 <RadioSend+0x1ec>)
 801c5c8:	78fb      	ldrb	r3, [r7, #3]
 801c5ca:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c5cc:	483b      	ldr	r0, [pc, #236]	; (801c6bc <RadioSend+0x1f0>)
 801c5ce:	f001 ff59 	bl	801e484 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 801c5d2:	78fb      	ldrb	r3, [r7, #3]
 801c5d4:	2200      	movs	r2, #0
 801c5d6:	4619      	mov	r1, r3
 801c5d8:	6878      	ldr	r0, [r7, #4]
 801c5da:	f001 fa09 	bl	801d9f0 <SUBGRF_SendPayload>
            break;
 801c5de:	e05c      	b.n	801c69a <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801c5e0:	4b35      	ldr	r3, [pc, #212]	; (801c6b8 <RadioSend+0x1ec>)
 801c5e2:	2202      	movs	r2, #2
 801c5e4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801c5e6:	4a34      	ldr	r2, [pc, #208]	; (801c6b8 <RadioSend+0x1ec>)
 801c5e8:	78fb      	ldrb	r3, [r7, #3]
 801c5ea:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c5ec:	4833      	ldr	r0, [pc, #204]	; (801c6bc <RadioSend+0x1f0>)
 801c5ee:	f001 ff49 	bl	801e484 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801c5f2:	78fb      	ldrb	r3, [r7, #3]
 801c5f4:	2200      	movs	r2, #0
 801c5f6:	4619      	mov	r1, r3
 801c5f8:	6878      	ldr	r0, [r7, #4]
 801c5fa:	f001 f9f9 	bl	801d9f0 <SUBGRF_SendPayload>
            break;
 801c5fe:	e04c      	b.n	801c69a <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801c600:	78fb      	ldrb	r3, [r7, #3]
 801c602:	461a      	mov	r2, r3
 801c604:	6879      	ldr	r1, [r7, #4]
 801c606:	482f      	ldr	r0, [pc, #188]	; (801c6c4 <RadioSend+0x1f8>)
 801c608:	f000 fccc 	bl	801cfa4 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801c60c:	4b2a      	ldr	r3, [pc, #168]	; (801c6b8 <RadioSend+0x1ec>)
 801c60e:	2202      	movs	r2, #2
 801c610:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801c612:	78fb      	ldrb	r3, [r7, #3]
 801c614:	3301      	adds	r3, #1
 801c616:	b2da      	uxtb	r2, r3
 801c618:	4b27      	ldr	r3, [pc, #156]	; (801c6b8 <RadioSend+0x1ec>)
 801c61a:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c61c:	4827      	ldr	r0, [pc, #156]	; (801c6bc <RadioSend+0x1f0>)
 801c61e:	f001 ff31 	bl	801e484 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801c622:	2100      	movs	r1, #0
 801c624:	20f1      	movs	r0, #241	; 0xf1
 801c626:	f000 f966 	bl	801c8f6 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801c62a:	2100      	movs	r1, #0
 801c62c:	20f0      	movs	r0, #240	; 0xf0
 801c62e:	f000 f962 	bl	801c8f6 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801c632:	4b21      	ldr	r3, [pc, #132]	; (801c6b8 <RadioSend+0x1ec>)
 801c634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c636:	2b64      	cmp	r3, #100	; 0x64
 801c638:	d108      	bne.n	801c64c <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801c63a:	2170      	movs	r1, #112	; 0x70
 801c63c:	20f3      	movs	r0, #243	; 0xf3
 801c63e:	f000 f95a 	bl	801c8f6 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801c642:	211d      	movs	r1, #29
 801c644:	20f2      	movs	r0, #242	; 0xf2
 801c646:	f000 f956 	bl	801c8f6 <RadioWrite>
 801c64a:	e007      	b.n	801c65c <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801c64c:	21e1      	movs	r1, #225	; 0xe1
 801c64e:	20f3      	movs	r0, #243	; 0xf3
 801c650:	f000 f951 	bl	801c8f6 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801c654:	2104      	movs	r1, #4
 801c656:	20f2      	movs	r0, #242	; 0xf2
 801c658:	f000 f94d 	bl	801c8f6 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801c65c:	78fb      	ldrb	r3, [r7, #3]
 801c65e:	b29b      	uxth	r3, r3
 801c660:	00db      	lsls	r3, r3, #3
 801c662:	b29b      	uxth	r3, r3
 801c664:	3302      	adds	r3, #2
 801c666:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801c668:	89fb      	ldrh	r3, [r7, #14]
 801c66a:	0a1b      	lsrs	r3, r3, #8
 801c66c:	b29b      	uxth	r3, r3
 801c66e:	b2db      	uxtb	r3, r3
 801c670:	4619      	mov	r1, r3
 801c672:	20f4      	movs	r0, #244	; 0xf4
 801c674:	f000 f93f 	bl	801c8f6 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801c678:	89fb      	ldrh	r3, [r7, #14]
 801c67a:	b2db      	uxtb	r3, r3
 801c67c:	4619      	mov	r1, r3
 801c67e:	20f5      	movs	r0, #245	; 0xf5
 801c680:	f000 f939 	bl	801c8f6 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801c684:	78fb      	ldrb	r3, [r7, #3]
 801c686:	3301      	adds	r3, #1
 801c688:	b2db      	uxtb	r3, r3
 801c68a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801c68e:	4619      	mov	r1, r3
 801c690:	480c      	ldr	r0, [pc, #48]	; (801c6c4 <RadioSend+0x1f8>)
 801c692:	f001 f9ad 	bl	801d9f0 <SUBGRF_SendPayload>
            break;
 801c696:	e000      	b.n	801c69a <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801c698:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801c69a:	4b07      	ldr	r3, [pc, #28]	; (801c6b8 <RadioSend+0x1ec>)
 801c69c:	685b      	ldr	r3, [r3, #4]
 801c69e:	4619      	mov	r1, r3
 801c6a0:	4809      	ldr	r0, [pc, #36]	; (801c6c8 <RadioSend+0x1fc>)
 801c6a2:	f003 fae3 	bl	801fc6c <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801c6a6:	4808      	ldr	r0, [pc, #32]	; (801c6c8 <RadioSend+0x1fc>)
 801c6a8:	f003 fa02 	bl	801fab0 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 801c6ac:	2300      	movs	r3, #0
}
 801c6ae:	4618      	mov	r0, r3
 801c6b0:	3710      	adds	r7, #16
 801c6b2:	46bd      	mov	sp, r7
 801c6b4:	bd80      	pop	{r7, pc}
 801c6b6:	bf00      	nop
 801c6b8:	20001d9c 	.word	0x20001d9c
 801c6bc:	20001daa 	.word	0x20001daa
 801c6c0:	080217dc 	.word	0x080217dc
 801c6c4:	20001c98 	.word	0x20001c98
 801c6c8:	20001df8 	.word	0x20001df8

0801c6cc <RadioSleep>:

static void RadioSleep( void )
{
 801c6cc:	b580      	push	{r7, lr}
 801c6ce:	b082      	sub	sp, #8
 801c6d0:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801c6d2:	2300      	movs	r3, #0
 801c6d4:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801c6d6:	793b      	ldrb	r3, [r7, #4]
 801c6d8:	f043 0304 	orr.w	r3, r3, #4
 801c6dc:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801c6de:	7938      	ldrb	r0, [r7, #4]
 801c6e0:	f001 fa62 	bl	801dba8 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801c6e4:	2002      	movs	r0, #2
 801c6e6:	f7e6 f8d7 	bl	8002898 <HAL_Delay>
}
 801c6ea:	bf00      	nop
 801c6ec:	3708      	adds	r7, #8
 801c6ee:	46bd      	mov	sp, r7
 801c6f0:	bd80      	pop	{r7, pc}

0801c6f2 <RadioStandby>:

static void RadioStandby( void )
{
 801c6f2:	b580      	push	{r7, lr}
 801c6f4:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801c6f6:	2000      	movs	r0, #0
 801c6f8:	f001 fa88 	bl	801dc0c <SUBGRF_SetStandby>
}
 801c6fc:	bf00      	nop
 801c6fe:	bd80      	pop	{r7, pc}

0801c700 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801c700:	b580      	push	{r7, lr}
 801c702:	b082      	sub	sp, #8
 801c704:	af00      	add	r7, sp, #0
 801c706:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 801c708:	f002 faf1 	bl	801ecee <RFW_Is_Init>
 801c70c:	4603      	mov	r3, r0
 801c70e:	2b01      	cmp	r3, #1
 801c710:	d102      	bne.n	801c718 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801c712:	f002 fb14 	bl	801ed3e <RFW_ReceiveInit>
 801c716:	e007      	b.n	801c728 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801c718:	2300      	movs	r3, #0
 801c71a:	2200      	movs	r2, #0
 801c71c:	f240 2162 	movw	r1, #610	; 0x262
 801c720:	f240 2062 	movw	r0, #610	; 0x262
 801c724:	f001 fc46 	bl	801dfb4 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801c728:	687b      	ldr	r3, [r7, #4]
 801c72a:	2b00      	cmp	r3, #0
 801c72c:	d006      	beq.n	801c73c <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801c72e:	6879      	ldr	r1, [r7, #4]
 801c730:	4811      	ldr	r0, [pc, #68]	; (801c778 <RadioRx+0x78>)
 801c732:	f003 fa9b 	bl	801fc6c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801c736:	4810      	ldr	r0, [pc, #64]	; (801c778 <RadioRx+0x78>)
 801c738:	f003 f9ba 	bl	801fab0 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801c73c:	4b0f      	ldr	r3, [pc, #60]	; (801c77c <RadioRx+0x7c>)
 801c73e:	2200      	movs	r2, #0
 801c740:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801c742:	4b0e      	ldr	r3, [pc, #56]	; (801c77c <RadioRx+0x7c>)
 801c744:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c748:	2100      	movs	r1, #0
 801c74a:	4618      	mov	r0, r3
 801c74c:	f002 f8d6 	bl	801e8fc <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801c750:	4b0a      	ldr	r3, [pc, #40]	; (801c77c <RadioRx+0x7c>)
 801c752:	785b      	ldrb	r3, [r3, #1]
 801c754:	2b00      	cmp	r3, #0
 801c756:	d004      	beq.n	801c762 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801c758:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c75c:	f001 fa92 	bl	801dc84 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801c760:	e005      	b.n	801c76e <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801c762:	4b06      	ldr	r3, [pc, #24]	; (801c77c <RadioRx+0x7c>)
 801c764:	689b      	ldr	r3, [r3, #8]
 801c766:	019b      	lsls	r3, r3, #6
 801c768:	4618      	mov	r0, r3
 801c76a:	f001 fa8b 	bl	801dc84 <SUBGRF_SetRx>
}
 801c76e:	bf00      	nop
 801c770:	3708      	adds	r7, #8
 801c772:	46bd      	mov	sp, r7
 801c774:	bd80      	pop	{r7, pc}
 801c776:	bf00      	nop
 801c778:	20001e10 	.word	0x20001e10
 801c77c:	20001d9c 	.word	0x20001d9c

0801c780 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801c780:	b580      	push	{r7, lr}
 801c782:	b082      	sub	sp, #8
 801c784:	af00      	add	r7, sp, #0
 801c786:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 801c788:	f002 fab1 	bl	801ecee <RFW_Is_Init>
 801c78c:	4603      	mov	r3, r0
 801c78e:	2b01      	cmp	r3, #1
 801c790:	d102      	bne.n	801c798 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801c792:	f002 fad4 	bl	801ed3e <RFW_ReceiveInit>
 801c796:	e007      	b.n	801c7a8 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801c798:	2300      	movs	r3, #0
 801c79a:	2200      	movs	r2, #0
 801c79c:	f240 2162 	movw	r1, #610	; 0x262
 801c7a0:	f240 2062 	movw	r0, #610	; 0x262
 801c7a4:	f001 fc06 	bl	801dfb4 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801c7a8:	687b      	ldr	r3, [r7, #4]
 801c7aa:	2b00      	cmp	r3, #0
 801c7ac:	d006      	beq.n	801c7bc <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801c7ae:	6879      	ldr	r1, [r7, #4]
 801c7b0:	4811      	ldr	r0, [pc, #68]	; (801c7f8 <RadioRxBoosted+0x78>)
 801c7b2:	f003 fa5b 	bl	801fc6c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801c7b6:	4810      	ldr	r0, [pc, #64]	; (801c7f8 <RadioRxBoosted+0x78>)
 801c7b8:	f003 f97a 	bl	801fab0 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801c7bc:	4b0f      	ldr	r3, [pc, #60]	; (801c7fc <RadioRxBoosted+0x7c>)
 801c7be:	2200      	movs	r2, #0
 801c7c0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801c7c2:	4b0e      	ldr	r3, [pc, #56]	; (801c7fc <RadioRxBoosted+0x7c>)
 801c7c4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c7c8:	2100      	movs	r1, #0
 801c7ca:	4618      	mov	r0, r3
 801c7cc:	f002 f896 	bl	801e8fc <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801c7d0:	4b0a      	ldr	r3, [pc, #40]	; (801c7fc <RadioRxBoosted+0x7c>)
 801c7d2:	785b      	ldrb	r3, [r3, #1]
 801c7d4:	2b00      	cmp	r3, #0
 801c7d6:	d004      	beq.n	801c7e2 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801c7d8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c7dc:	f001 fa72 	bl	801dcc4 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801c7e0:	e005      	b.n	801c7ee <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801c7e2:	4b06      	ldr	r3, [pc, #24]	; (801c7fc <RadioRxBoosted+0x7c>)
 801c7e4:	689b      	ldr	r3, [r3, #8]
 801c7e6:	019b      	lsls	r3, r3, #6
 801c7e8:	4618      	mov	r0, r3
 801c7ea:	f001 fa6b 	bl	801dcc4 <SUBGRF_SetRxBoosted>
}
 801c7ee:	bf00      	nop
 801c7f0:	3708      	adds	r7, #8
 801c7f2:	46bd      	mov	sp, r7
 801c7f4:	bd80      	pop	{r7, pc}
 801c7f6:	bf00      	nop
 801c7f8:	20001e10 	.word	0x20001e10
 801c7fc:	20001d9c 	.word	0x20001d9c

0801c800 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801c800:	b580      	push	{r7, lr}
 801c802:	b082      	sub	sp, #8
 801c804:	af00      	add	r7, sp, #0
 801c806:	6078      	str	r0, [r7, #4]
 801c808:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801c80a:	687b      	ldr	r3, [r7, #4]
 801c80c:	005a      	lsls	r2, r3, #1
 801c80e:	683b      	ldr	r3, [r7, #0]
 801c810:	4413      	add	r3, r2
 801c812:	4a0c      	ldr	r2, [pc, #48]	; (801c844 <RadioSetRxDutyCycle+0x44>)
 801c814:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801c816:	2300      	movs	r3, #0
 801c818:	2200      	movs	r2, #0
 801c81a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c81e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801c822:	f001 fbc7 	bl	801dfb4 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801c826:	4b07      	ldr	r3, [pc, #28]	; (801c844 <RadioSetRxDutyCycle+0x44>)
 801c828:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c82c:	2100      	movs	r1, #0
 801c82e:	4618      	mov	r0, r3
 801c830:	f002 f864 	bl	801e8fc <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801c834:	6839      	ldr	r1, [r7, #0]
 801c836:	6878      	ldr	r0, [r7, #4]
 801c838:	f001 fa68 	bl	801dd0c <SUBGRF_SetRxDutyCycle>
}
 801c83c:	bf00      	nop
 801c83e:	3708      	adds	r7, #8
 801c840:	46bd      	mov	sp, r7
 801c842:	bd80      	pop	{r7, pc}
 801c844:	20001d9c 	.word	0x20001d9c

0801c848 <RadioStartCad>:

static void RadioStartCad( void )
{
 801c848:	b580      	push	{r7, lr}
 801c84a:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801c84c:	4b09      	ldr	r3, [pc, #36]	; (801c874 <RadioStartCad+0x2c>)
 801c84e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c852:	2100      	movs	r1, #0
 801c854:	4618      	mov	r0, r3
 801c856:	f002 f851 	bl	801e8fc <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801c85a:	2300      	movs	r3, #0
 801c85c:	2200      	movs	r2, #0
 801c85e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801c862:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801c866:	f001 fba5 	bl	801dfb4 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801c86a:	f001 fa7b 	bl	801dd64 <SUBGRF_SetCad>
}
 801c86e:	bf00      	nop
 801c870:	bd80      	pop	{r7, pc}
 801c872:	bf00      	nop
 801c874:	20001d9c 	.word	0x20001d9c

0801c878 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801c878:	b580      	push	{r7, lr}
 801c87a:	b084      	sub	sp, #16
 801c87c:	af00      	add	r7, sp, #0
 801c87e:	6078      	str	r0, [r7, #4]
 801c880:	460b      	mov	r3, r1
 801c882:	70fb      	strb	r3, [r7, #3]
 801c884:	4613      	mov	r3, r2
 801c886:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 801c888:	883b      	ldrh	r3, [r7, #0]
 801c88a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c88e:	fb02 f303 	mul.w	r3, r2, r3
 801c892:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801c894:	6878      	ldr	r0, [r7, #4]
 801c896:	f001 fbe9 	bl	801e06c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801c89a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c89e:	4618      	mov	r0, r3
 801c8a0:	f002 f854 	bl	801e94c <SUBGRF_SetRfTxPower>
 801c8a4:	4603      	mov	r3, r0
 801c8a6:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801c8a8:	210e      	movs	r1, #14
 801c8aa:	f640 101f 	movw	r0, #2335	; 0x91f
 801c8ae:	f001 ff31 	bl	801e714 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801c8b2:	7afb      	ldrb	r3, [r7, #11]
 801c8b4:	2101      	movs	r1, #1
 801c8b6:	4618      	mov	r0, r3
 801c8b8:	f002 f820 	bl	801e8fc <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801c8bc:	f001 fa60 	bl	801dd80 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801c8c0:	68f9      	ldr	r1, [r7, #12]
 801c8c2:	4805      	ldr	r0, [pc, #20]	; (801c8d8 <RadioSetTxContinuousWave+0x60>)
 801c8c4:	f003 f9d2 	bl	801fc6c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801c8c8:	4803      	ldr	r0, [pc, #12]	; (801c8d8 <RadioSetTxContinuousWave+0x60>)
 801c8ca:	f003 f8f1 	bl	801fab0 <UTIL_TIMER_Start>
}
 801c8ce:	bf00      	nop
 801c8d0:	3710      	adds	r7, #16
 801c8d2:	46bd      	mov	sp, r7
 801c8d4:	bd80      	pop	{r7, pc}
 801c8d6:	bf00      	nop
 801c8d8:	20001df8 	.word	0x20001df8

0801c8dc <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801c8dc:	b580      	push	{r7, lr}
 801c8de:	b082      	sub	sp, #8
 801c8e0:	af00      	add	r7, sp, #0
 801c8e2:	4603      	mov	r3, r0
 801c8e4:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801c8e6:	f001 fe82 	bl	801e5ee <SUBGRF_GetRssiInst>
 801c8ea:	4603      	mov	r3, r0
 801c8ec:	b21b      	sxth	r3, r3
}
 801c8ee:	4618      	mov	r0, r3
 801c8f0:	3708      	adds	r7, #8
 801c8f2:	46bd      	mov	sp, r7
 801c8f4:	bd80      	pop	{r7, pc}

0801c8f6 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801c8f6:	b580      	push	{r7, lr}
 801c8f8:	b082      	sub	sp, #8
 801c8fa:	af00      	add	r7, sp, #0
 801c8fc:	4603      	mov	r3, r0
 801c8fe:	460a      	mov	r2, r1
 801c900:	80fb      	strh	r3, [r7, #6]
 801c902:	4613      	mov	r3, r2
 801c904:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801c906:	797a      	ldrb	r2, [r7, #5]
 801c908:	88fb      	ldrh	r3, [r7, #6]
 801c90a:	4611      	mov	r1, r2
 801c90c:	4618      	mov	r0, r3
 801c90e:	f001 ff01 	bl	801e714 <SUBGRF_WriteRegister>
}
 801c912:	bf00      	nop
 801c914:	3708      	adds	r7, #8
 801c916:	46bd      	mov	sp, r7
 801c918:	bd80      	pop	{r7, pc}

0801c91a <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801c91a:	b580      	push	{r7, lr}
 801c91c:	b082      	sub	sp, #8
 801c91e:	af00      	add	r7, sp, #0
 801c920:	4603      	mov	r3, r0
 801c922:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801c924:	88fb      	ldrh	r3, [r7, #6]
 801c926:	4618      	mov	r0, r3
 801c928:	f001 ff08 	bl	801e73c <SUBGRF_ReadRegister>
 801c92c:	4603      	mov	r3, r0
}
 801c92e:	4618      	mov	r0, r3
 801c930:	3708      	adds	r7, #8
 801c932:	46bd      	mov	sp, r7
 801c934:	bd80      	pop	{r7, pc}

0801c936 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801c936:	b580      	push	{r7, lr}
 801c938:	b082      	sub	sp, #8
 801c93a:	af00      	add	r7, sp, #0
 801c93c:	4603      	mov	r3, r0
 801c93e:	6039      	str	r1, [r7, #0]
 801c940:	80fb      	strh	r3, [r7, #6]
 801c942:	4613      	mov	r3, r2
 801c944:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801c946:	797b      	ldrb	r3, [r7, #5]
 801c948:	b29a      	uxth	r2, r3
 801c94a:	88fb      	ldrh	r3, [r7, #6]
 801c94c:	6839      	ldr	r1, [r7, #0]
 801c94e:	4618      	mov	r0, r3
 801c950:	f001 ff08 	bl	801e764 <SUBGRF_WriteRegisters>
}
 801c954:	bf00      	nop
 801c956:	3708      	adds	r7, #8
 801c958:	46bd      	mov	sp, r7
 801c95a:	bd80      	pop	{r7, pc}

0801c95c <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801c95c:	b580      	push	{r7, lr}
 801c95e:	b082      	sub	sp, #8
 801c960:	af00      	add	r7, sp, #0
 801c962:	4603      	mov	r3, r0
 801c964:	6039      	str	r1, [r7, #0]
 801c966:	80fb      	strh	r3, [r7, #6]
 801c968:	4613      	mov	r3, r2
 801c96a:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801c96c:	797b      	ldrb	r3, [r7, #5]
 801c96e:	b29a      	uxth	r2, r3
 801c970:	88fb      	ldrh	r3, [r7, #6]
 801c972:	6839      	ldr	r1, [r7, #0]
 801c974:	4618      	mov	r0, r3
 801c976:	f001 ff17 	bl	801e7a8 <SUBGRF_ReadRegisters>
}
 801c97a:	bf00      	nop
 801c97c:	3708      	adds	r7, #8
 801c97e:	46bd      	mov	sp, r7
 801c980:	bd80      	pop	{r7, pc}
	...

0801c984 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801c984:	b580      	push	{r7, lr}
 801c986:	b082      	sub	sp, #8
 801c988:	af00      	add	r7, sp, #0
 801c98a:	4603      	mov	r3, r0
 801c98c:	460a      	mov	r2, r1
 801c98e:	71fb      	strb	r3, [r7, #7]
 801c990:	4613      	mov	r3, r2
 801c992:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801c994:	79fb      	ldrb	r3, [r7, #7]
 801c996:	2b01      	cmp	r3, #1
 801c998:	d10a      	bne.n	801c9b0 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801c99a:	4a0e      	ldr	r2, [pc, #56]	; (801c9d4 <RadioSetMaxPayloadLength+0x50>)
 801c99c:	79bb      	ldrb	r3, [r7, #6]
 801c99e:	7013      	strb	r3, [r2, #0]
 801c9a0:	4b0c      	ldr	r3, [pc, #48]	; (801c9d4 <RadioSetMaxPayloadLength+0x50>)
 801c9a2:	781a      	ldrb	r2, [r3, #0]
 801c9a4:	4b0c      	ldr	r3, [pc, #48]	; (801c9d8 <RadioSetMaxPayloadLength+0x54>)
 801c9a6:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c9a8:	480c      	ldr	r0, [pc, #48]	; (801c9dc <RadioSetMaxPayloadLength+0x58>)
 801c9aa:	f001 fd6b 	bl	801e484 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801c9ae:	e00d      	b.n	801c9cc <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801c9b0:	4b09      	ldr	r3, [pc, #36]	; (801c9d8 <RadioSetMaxPayloadLength+0x54>)
 801c9b2:	7d5b      	ldrb	r3, [r3, #21]
 801c9b4:	2b01      	cmp	r3, #1
 801c9b6:	d109      	bne.n	801c9cc <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801c9b8:	4a06      	ldr	r2, [pc, #24]	; (801c9d4 <RadioSetMaxPayloadLength+0x50>)
 801c9ba:	79bb      	ldrb	r3, [r7, #6]
 801c9bc:	7013      	strb	r3, [r2, #0]
 801c9be:	4b05      	ldr	r3, [pc, #20]	; (801c9d4 <RadioSetMaxPayloadLength+0x50>)
 801c9c0:	781a      	ldrb	r2, [r3, #0]
 801c9c2:	4b05      	ldr	r3, [pc, #20]	; (801c9d8 <RadioSetMaxPayloadLength+0x54>)
 801c9c4:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c9c6:	4805      	ldr	r0, [pc, #20]	; (801c9dc <RadioSetMaxPayloadLength+0x58>)
 801c9c8:	f001 fd5c 	bl	801e484 <SUBGRF_SetPacketParams>
}
 801c9cc:	bf00      	nop
 801c9ce:	3708      	adds	r7, #8
 801c9d0:	46bd      	mov	sp, r7
 801c9d2:	bd80      	pop	{r7, pc}
 801c9d4:	20000134 	.word	0x20000134
 801c9d8:	20001d9c 	.word	0x20001d9c
 801c9dc:	20001daa 	.word	0x20001daa

0801c9e0 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801c9e0:	b580      	push	{r7, lr}
 801c9e2:	b082      	sub	sp, #8
 801c9e4:	af00      	add	r7, sp, #0
 801c9e6:	4603      	mov	r3, r0
 801c9e8:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801c9ea:	4a13      	ldr	r2, [pc, #76]	; (801ca38 <RadioSetPublicNetwork+0x58>)
 801c9ec:	79fb      	ldrb	r3, [r7, #7]
 801c9ee:	7313      	strb	r3, [r2, #12]
 801c9f0:	4b11      	ldr	r3, [pc, #68]	; (801ca38 <RadioSetPublicNetwork+0x58>)
 801c9f2:	7b1a      	ldrb	r2, [r3, #12]
 801c9f4:	4b10      	ldr	r3, [pc, #64]	; (801ca38 <RadioSetPublicNetwork+0x58>)
 801c9f6:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801c9f8:	2001      	movs	r0, #1
 801c9fa:	f7ff f811 	bl	801ba20 <RadioSetModem>
    if( enable == true )
 801c9fe:	79fb      	ldrb	r3, [r7, #7]
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	d00a      	beq.n	801ca1a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801ca04:	2134      	movs	r1, #52	; 0x34
 801ca06:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801ca0a:	f001 fe83 	bl	801e714 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801ca0e:	2144      	movs	r1, #68	; 0x44
 801ca10:	f240 7041 	movw	r0, #1857	; 0x741
 801ca14:	f001 fe7e 	bl	801e714 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801ca18:	e009      	b.n	801ca2e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801ca1a:	2114      	movs	r1, #20
 801ca1c:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801ca20:	f001 fe78 	bl	801e714 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801ca24:	2124      	movs	r1, #36	; 0x24
 801ca26:	f240 7041 	movw	r0, #1857	; 0x741
 801ca2a:	f001 fe73 	bl	801e714 <SUBGRF_WriteRegister>
}
 801ca2e:	bf00      	nop
 801ca30:	3708      	adds	r7, #8
 801ca32:	46bd      	mov	sp, r7
 801ca34:	bd80      	pop	{r7, pc}
 801ca36:	bf00      	nop
 801ca38:	20001d9c 	.word	0x20001d9c

0801ca3c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801ca3c:	b580      	push	{r7, lr}
 801ca3e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801ca40:	f001 ffb8 	bl	801e9b4 <SUBGRF_GetRadioWakeUpTime>
 801ca44:	4603      	mov	r3, r0
 801ca46:	3303      	adds	r3, #3
}
 801ca48:	4618      	mov	r0, r3
 801ca4a:	bd80      	pop	{r7, pc}

0801ca4c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801ca4c:	b580      	push	{r7, lr}
 801ca4e:	b082      	sub	sp, #8
 801ca50:	af00      	add	r7, sp, #0
 801ca52:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801ca54:	f000 f80e 	bl	801ca74 <RadioOnTxTimeoutProcess>
}
 801ca58:	bf00      	nop
 801ca5a:	3708      	adds	r7, #8
 801ca5c:	46bd      	mov	sp, r7
 801ca5e:	bd80      	pop	{r7, pc}

0801ca60 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801ca60:	b580      	push	{r7, lr}
 801ca62:	b082      	sub	sp, #8
 801ca64:	af00      	add	r7, sp, #0
 801ca66:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801ca68:	f000 f818 	bl	801ca9c <RadioOnRxTimeoutProcess>
}
 801ca6c:	bf00      	nop
 801ca6e:	3708      	adds	r7, #8
 801ca70:	46bd      	mov	sp, r7
 801ca72:	bd80      	pop	{r7, pc}

0801ca74 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801ca74:	b580      	push	{r7, lr}
 801ca76:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801ca78:	4b07      	ldr	r3, [pc, #28]	; (801ca98 <RadioOnTxTimeoutProcess+0x24>)
 801ca7a:	681b      	ldr	r3, [r3, #0]
 801ca7c:	2b00      	cmp	r3, #0
 801ca7e:	d008      	beq.n	801ca92 <RadioOnTxTimeoutProcess+0x1e>
 801ca80:	4b05      	ldr	r3, [pc, #20]	; (801ca98 <RadioOnTxTimeoutProcess+0x24>)
 801ca82:	681b      	ldr	r3, [r3, #0]
 801ca84:	685b      	ldr	r3, [r3, #4]
 801ca86:	2b00      	cmp	r3, #0
 801ca88:	d003      	beq.n	801ca92 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801ca8a:	4b03      	ldr	r3, [pc, #12]	; (801ca98 <RadioOnTxTimeoutProcess+0x24>)
 801ca8c:	681b      	ldr	r3, [r3, #0]
 801ca8e:	685b      	ldr	r3, [r3, #4]
 801ca90:	4798      	blx	r3
    }
}
 801ca92:	bf00      	nop
 801ca94:	bd80      	pop	{r7, pc}
 801ca96:	bf00      	nop
 801ca98:	20001d98 	.word	0x20001d98

0801ca9c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801ca9c:	b580      	push	{r7, lr}
 801ca9e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801caa0:	4b07      	ldr	r3, [pc, #28]	; (801cac0 <RadioOnRxTimeoutProcess+0x24>)
 801caa2:	681b      	ldr	r3, [r3, #0]
 801caa4:	2b00      	cmp	r3, #0
 801caa6:	d008      	beq.n	801caba <RadioOnRxTimeoutProcess+0x1e>
 801caa8:	4b05      	ldr	r3, [pc, #20]	; (801cac0 <RadioOnRxTimeoutProcess+0x24>)
 801caaa:	681b      	ldr	r3, [r3, #0]
 801caac:	68db      	ldr	r3, [r3, #12]
 801caae:	2b00      	cmp	r3, #0
 801cab0:	d003      	beq.n	801caba <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801cab2:	4b03      	ldr	r3, [pc, #12]	; (801cac0 <RadioOnRxTimeoutProcess+0x24>)
 801cab4:	681b      	ldr	r3, [r3, #0]
 801cab6:	68db      	ldr	r3, [r3, #12]
 801cab8:	4798      	blx	r3
    }
}
 801caba:	bf00      	nop
 801cabc:	bd80      	pop	{r7, pc}
 801cabe:	bf00      	nop
 801cac0:	20001d98 	.word	0x20001d98

0801cac4 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801cac4:	b580      	push	{r7, lr}
 801cac6:	b082      	sub	sp, #8
 801cac8:	af00      	add	r7, sp, #0
 801caca:	4603      	mov	r3, r0
 801cacc:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801cace:	4a05      	ldr	r2, [pc, #20]	; (801cae4 <RadioOnDioIrq+0x20>)
 801cad0:	88fb      	ldrh	r3, [r7, #6]
 801cad2:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801cad6:	f000 f807 	bl	801cae8 <RadioIrqProcess>
}
 801cada:	bf00      	nop
 801cadc:	3708      	adds	r7, #8
 801cade:	46bd      	mov	sp, r7
 801cae0:	bd80      	pop	{r7, pc}
 801cae2:	bf00      	nop
 801cae4:	20001d9c 	.word	0x20001d9c

0801cae8 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801cae8:	b5b0      	push	{r4, r5, r7, lr}
 801caea:	b082      	sub	sp, #8
 801caec:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801caee:	2300      	movs	r3, #0
 801caf0:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801caf2:	2300      	movs	r3, #0
 801caf4:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801caf6:	4ba8      	ldr	r3, [pc, #672]	; (801cd98 <RadioIrqProcess+0x2b0>)
 801caf8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801cafc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cb00:	f000 810d 	beq.w	801cd1e <RadioIrqProcess+0x236>
 801cb04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cb08:	f300 81e8 	bgt.w	801cedc <RadioIrqProcess+0x3f4>
 801cb0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cb10:	f000 80f1 	beq.w	801ccf6 <RadioIrqProcess+0x20e>
 801cb14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cb18:	f300 81e0 	bgt.w	801cedc <RadioIrqProcess+0x3f4>
 801cb1c:	2b80      	cmp	r3, #128	; 0x80
 801cb1e:	f000 80d6 	beq.w	801ccce <RadioIrqProcess+0x1e6>
 801cb22:	2b80      	cmp	r3, #128	; 0x80
 801cb24:	f300 81da 	bgt.w	801cedc <RadioIrqProcess+0x3f4>
 801cb28:	2b20      	cmp	r3, #32
 801cb2a:	dc49      	bgt.n	801cbc0 <RadioIrqProcess+0xd8>
 801cb2c:	2b00      	cmp	r3, #0
 801cb2e:	f340 81d5 	ble.w	801cedc <RadioIrqProcess+0x3f4>
 801cb32:	3b01      	subs	r3, #1
 801cb34:	2b1f      	cmp	r3, #31
 801cb36:	f200 81d1 	bhi.w	801cedc <RadioIrqProcess+0x3f4>
 801cb3a:	a201      	add	r2, pc, #4	; (adr r2, 801cb40 <RadioIrqProcess+0x58>)
 801cb3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cb40:	0801cbc9 	.word	0x0801cbc9
 801cb44:	0801cc03 	.word	0x0801cc03
 801cb48:	0801cedd 	.word	0x0801cedd
 801cb4c:	0801cdb9 	.word	0x0801cdb9
 801cb50:	0801cedd 	.word	0x0801cedd
 801cb54:	0801cedd 	.word	0x0801cedd
 801cb58:	0801cedd 	.word	0x0801cedd
 801cb5c:	0801ce35 	.word	0x0801ce35
 801cb60:	0801cedd 	.word	0x0801cedd
 801cb64:	0801cedd 	.word	0x0801cedd
 801cb68:	0801cedd 	.word	0x0801cedd
 801cb6c:	0801cedd 	.word	0x0801cedd
 801cb70:	0801cedd 	.word	0x0801cedd
 801cb74:	0801cedd 	.word	0x0801cedd
 801cb78:	0801cedd 	.word	0x0801cedd
 801cb7c:	0801ce51 	.word	0x0801ce51
 801cb80:	0801cedd 	.word	0x0801cedd
 801cb84:	0801cedd 	.word	0x0801cedd
 801cb88:	0801cedd 	.word	0x0801cedd
 801cb8c:	0801cedd 	.word	0x0801cedd
 801cb90:	0801cedd 	.word	0x0801cedd
 801cb94:	0801cedd 	.word	0x0801cedd
 801cb98:	0801cedd 	.word	0x0801cedd
 801cb9c:	0801cedd 	.word	0x0801cedd
 801cba0:	0801cedd 	.word	0x0801cedd
 801cba4:	0801cedd 	.word	0x0801cedd
 801cba8:	0801cedd 	.word	0x0801cedd
 801cbac:	0801cedd 	.word	0x0801cedd
 801cbb0:	0801cedd 	.word	0x0801cedd
 801cbb4:	0801cedd 	.word	0x0801cedd
 801cbb8:	0801cedd 	.word	0x0801cedd
 801cbbc:	0801ce5f 	.word	0x0801ce5f
 801cbc0:	2b40      	cmp	r3, #64	; 0x40
 801cbc2:	f000 816d 	beq.w	801cea0 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 801cbc6:	e189      	b.n	801cedc <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801cbc8:	4874      	ldr	r0, [pc, #464]	; (801cd9c <RadioIrqProcess+0x2b4>)
 801cbca:	f002 ffdf 	bl	801fb8c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801cbce:	2000      	movs	r0, #0
 801cbd0:	f001 f81c 	bl	801dc0c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801cbd4:	f002 f892 	bl	801ecfc <RFW_Is_LongPacketModeEnabled>
 801cbd8:	4603      	mov	r3, r0
 801cbda:	2b01      	cmp	r3, #1
 801cbdc:	d101      	bne.n	801cbe2 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801cbde:	f002 f8b6 	bl	801ed4e <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801cbe2:	4b6f      	ldr	r3, [pc, #444]	; (801cda0 <RadioIrqProcess+0x2b8>)
 801cbe4:	681b      	ldr	r3, [r3, #0]
 801cbe6:	2b00      	cmp	r3, #0
 801cbe8:	f000 817a 	beq.w	801cee0 <RadioIrqProcess+0x3f8>
 801cbec:	4b6c      	ldr	r3, [pc, #432]	; (801cda0 <RadioIrqProcess+0x2b8>)
 801cbee:	681b      	ldr	r3, [r3, #0]
 801cbf0:	681b      	ldr	r3, [r3, #0]
 801cbf2:	2b00      	cmp	r3, #0
 801cbf4:	f000 8174 	beq.w	801cee0 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801cbf8:	4b69      	ldr	r3, [pc, #420]	; (801cda0 <RadioIrqProcess+0x2b8>)
 801cbfa:	681b      	ldr	r3, [r3, #0]
 801cbfc:	681b      	ldr	r3, [r3, #0]
 801cbfe:	4798      	blx	r3
        break;
 801cc00:	e16e      	b.n	801cee0 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801cc02:	4868      	ldr	r0, [pc, #416]	; (801cda4 <RadioIrqProcess+0x2bc>)
 801cc04:	f002 ffc2 	bl	801fb8c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801cc08:	4b63      	ldr	r3, [pc, #396]	; (801cd98 <RadioIrqProcess+0x2b0>)
 801cc0a:	785b      	ldrb	r3, [r3, #1]
 801cc0c:	f083 0301 	eor.w	r3, r3, #1
 801cc10:	b2db      	uxtb	r3, r3
 801cc12:	2b00      	cmp	r3, #0
 801cc14:	d014      	beq.n	801cc40 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801cc16:	2000      	movs	r0, #0
 801cc18:	f000 fff8 	bl	801dc0c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801cc1c:	2100      	movs	r1, #0
 801cc1e:	f640 1002 	movw	r0, #2306	; 0x902
 801cc22:	f001 fd77 	bl	801e714 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801cc26:	f640 1044 	movw	r0, #2372	; 0x944
 801cc2a:	f001 fd87 	bl	801e73c <SUBGRF_ReadRegister>
 801cc2e:	4603      	mov	r3, r0
 801cc30:	f043 0302 	orr.w	r3, r3, #2
 801cc34:	b2db      	uxtb	r3, r3
 801cc36:	4619      	mov	r1, r3
 801cc38:	f640 1044 	movw	r0, #2372	; 0x944
 801cc3c:	f001 fd6a 	bl	801e714 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801cc40:	1dfb      	adds	r3, r7, #7
 801cc42:	22ff      	movs	r2, #255	; 0xff
 801cc44:	4619      	mov	r1, r3
 801cc46:	4858      	ldr	r0, [pc, #352]	; (801cda8 <RadioIrqProcess+0x2c0>)
 801cc48:	f000 feb0 	bl	801d9ac <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801cc4c:	4857      	ldr	r0, [pc, #348]	; (801cdac <RadioIrqProcess+0x2c4>)
 801cc4e:	f001 fd0f 	bl	801e670 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801cc52:	4b53      	ldr	r3, [pc, #332]	; (801cda0 <RadioIrqProcess+0x2b8>)
 801cc54:	681b      	ldr	r3, [r3, #0]
 801cc56:	2b00      	cmp	r3, #0
 801cc58:	f000 8144 	beq.w	801cee4 <RadioIrqProcess+0x3fc>
 801cc5c:	4b50      	ldr	r3, [pc, #320]	; (801cda0 <RadioIrqProcess+0x2b8>)
 801cc5e:	681b      	ldr	r3, [r3, #0]
 801cc60:	689b      	ldr	r3, [r3, #8]
 801cc62:	2b00      	cmp	r3, #0
 801cc64:	f000 813e 	beq.w	801cee4 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801cc68:	4b4b      	ldr	r3, [pc, #300]	; (801cd98 <RadioIrqProcess+0x2b0>)
 801cc6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801cc6e:	2b01      	cmp	r3, #1
 801cc70:	d10e      	bne.n	801cc90 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801cc72:	4b4b      	ldr	r3, [pc, #300]	; (801cda0 <RadioIrqProcess+0x2b8>)
 801cc74:	681b      	ldr	r3, [r3, #0]
 801cc76:	689c      	ldr	r4, [r3, #8]
 801cc78:	79fb      	ldrb	r3, [r7, #7]
 801cc7a:	b299      	uxth	r1, r3
 801cc7c:	4b46      	ldr	r3, [pc, #280]	; (801cd98 <RadioIrqProcess+0x2b0>)
 801cc7e:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801cc82:	b21a      	sxth	r2, r3
 801cc84:	4b44      	ldr	r3, [pc, #272]	; (801cd98 <RadioIrqProcess+0x2b0>)
 801cc86:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801cc8a:	4847      	ldr	r0, [pc, #284]	; (801cda8 <RadioIrqProcess+0x2c0>)
 801cc8c:	47a0      	blx	r4
                break;
 801cc8e:	e01d      	b.n	801cccc <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801cc90:	4b41      	ldr	r3, [pc, #260]	; (801cd98 <RadioIrqProcess+0x2b0>)
 801cc92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cc94:	463a      	mov	r2, r7
 801cc96:	4611      	mov	r1, r2
 801cc98:	4618      	mov	r0, r3
 801cc9a:	f001 ff7d 	bl	801eb98 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801cc9e:	4b40      	ldr	r3, [pc, #256]	; (801cda0 <RadioIrqProcess+0x2b8>)
 801cca0:	681b      	ldr	r3, [r3, #0]
 801cca2:	689c      	ldr	r4, [r3, #8]
 801cca4:	79fb      	ldrb	r3, [r7, #7]
 801cca6:	b299      	uxth	r1, r3
 801cca8:	4b3b      	ldr	r3, [pc, #236]	; (801cd98 <RadioIrqProcess+0x2b0>)
 801ccaa:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801ccae:	b218      	sxth	r0, r3
 801ccb0:	683b      	ldr	r3, [r7, #0]
 801ccb2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801ccb6:	4a3e      	ldr	r2, [pc, #248]	; (801cdb0 <RadioIrqProcess+0x2c8>)
 801ccb8:	fb82 5203 	smull	r5, r2, r2, r3
 801ccbc:	1192      	asrs	r2, r2, #6
 801ccbe:	17db      	asrs	r3, r3, #31
 801ccc0:	1ad3      	subs	r3, r2, r3
 801ccc2:	b25b      	sxtb	r3, r3
 801ccc4:	4602      	mov	r2, r0
 801ccc6:	4838      	ldr	r0, [pc, #224]	; (801cda8 <RadioIrqProcess+0x2c0>)
 801ccc8:	47a0      	blx	r4
                break;
 801ccca:	bf00      	nop
        break;
 801cccc:	e10a      	b.n	801cee4 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801ccce:	2000      	movs	r0, #0
 801ccd0:	f000 ff9c 	bl	801dc0c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801ccd4:	4b32      	ldr	r3, [pc, #200]	; (801cda0 <RadioIrqProcess+0x2b8>)
 801ccd6:	681b      	ldr	r3, [r3, #0]
 801ccd8:	2b00      	cmp	r3, #0
 801ccda:	f000 8105 	beq.w	801cee8 <RadioIrqProcess+0x400>
 801ccde:	4b30      	ldr	r3, [pc, #192]	; (801cda0 <RadioIrqProcess+0x2b8>)
 801cce0:	681b      	ldr	r3, [r3, #0]
 801cce2:	699b      	ldr	r3, [r3, #24]
 801cce4:	2b00      	cmp	r3, #0
 801cce6:	f000 80ff 	beq.w	801cee8 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 801ccea:	4b2d      	ldr	r3, [pc, #180]	; (801cda0 <RadioIrqProcess+0x2b8>)
 801ccec:	681b      	ldr	r3, [r3, #0]
 801ccee:	699b      	ldr	r3, [r3, #24]
 801ccf0:	2000      	movs	r0, #0
 801ccf2:	4798      	blx	r3
        break;
 801ccf4:	e0f8      	b.n	801cee8 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 801ccf6:	2000      	movs	r0, #0
 801ccf8:	f000 ff88 	bl	801dc0c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801ccfc:	4b28      	ldr	r3, [pc, #160]	; (801cda0 <RadioIrqProcess+0x2b8>)
 801ccfe:	681b      	ldr	r3, [r3, #0]
 801cd00:	2b00      	cmp	r3, #0
 801cd02:	f000 80f3 	beq.w	801ceec <RadioIrqProcess+0x404>
 801cd06:	4b26      	ldr	r3, [pc, #152]	; (801cda0 <RadioIrqProcess+0x2b8>)
 801cd08:	681b      	ldr	r3, [r3, #0]
 801cd0a:	699b      	ldr	r3, [r3, #24]
 801cd0c:	2b00      	cmp	r3, #0
 801cd0e:	f000 80ed 	beq.w	801ceec <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801cd12:	4b23      	ldr	r3, [pc, #140]	; (801cda0 <RadioIrqProcess+0x2b8>)
 801cd14:	681b      	ldr	r3, [r3, #0]
 801cd16:	699b      	ldr	r3, [r3, #24]
 801cd18:	2001      	movs	r0, #1
 801cd1a:	4798      	blx	r3
        break;
 801cd1c:	e0e6      	b.n	801ceec <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801cd1e:	4b25      	ldr	r3, [pc, #148]	; (801cdb4 <RadioIrqProcess+0x2cc>)
 801cd20:	2201      	movs	r2, #1
 801cd22:	2100      	movs	r1, #0
 801cd24:	2002      	movs	r0, #2
 801cd26:	f003 f93b 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801cd2a:	f000 fe25 	bl	801d978 <SUBGRF_GetOperatingMode>
 801cd2e:	4603      	mov	r3, r0
 801cd30:	2b04      	cmp	r3, #4
 801cd32:	d115      	bne.n	801cd60 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801cd34:	4819      	ldr	r0, [pc, #100]	; (801cd9c <RadioIrqProcess+0x2b4>)
 801cd36:	f002 ff29 	bl	801fb8c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801cd3a:	2000      	movs	r0, #0
 801cd3c:	f000 ff66 	bl	801dc0c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801cd40:	4b17      	ldr	r3, [pc, #92]	; (801cda0 <RadioIrqProcess+0x2b8>)
 801cd42:	681b      	ldr	r3, [r3, #0]
 801cd44:	2b00      	cmp	r3, #0
 801cd46:	f000 80d3 	beq.w	801cef0 <RadioIrqProcess+0x408>
 801cd4a:	4b15      	ldr	r3, [pc, #84]	; (801cda0 <RadioIrqProcess+0x2b8>)
 801cd4c:	681b      	ldr	r3, [r3, #0]
 801cd4e:	685b      	ldr	r3, [r3, #4]
 801cd50:	2b00      	cmp	r3, #0
 801cd52:	f000 80cd 	beq.w	801cef0 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801cd56:	4b12      	ldr	r3, [pc, #72]	; (801cda0 <RadioIrqProcess+0x2b8>)
 801cd58:	681b      	ldr	r3, [r3, #0]
 801cd5a:	685b      	ldr	r3, [r3, #4]
 801cd5c:	4798      	blx	r3
        break;
 801cd5e:	e0c7      	b.n	801cef0 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801cd60:	f000 fe0a 	bl	801d978 <SUBGRF_GetOperatingMode>
 801cd64:	4603      	mov	r3, r0
 801cd66:	2b05      	cmp	r3, #5
 801cd68:	f040 80c2 	bne.w	801cef0 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801cd6c:	480d      	ldr	r0, [pc, #52]	; (801cda4 <RadioIrqProcess+0x2bc>)
 801cd6e:	f002 ff0d 	bl	801fb8c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801cd72:	2000      	movs	r0, #0
 801cd74:	f000 ff4a 	bl	801dc0c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801cd78:	4b09      	ldr	r3, [pc, #36]	; (801cda0 <RadioIrqProcess+0x2b8>)
 801cd7a:	681b      	ldr	r3, [r3, #0]
 801cd7c:	2b00      	cmp	r3, #0
 801cd7e:	f000 80b7 	beq.w	801cef0 <RadioIrqProcess+0x408>
 801cd82:	4b07      	ldr	r3, [pc, #28]	; (801cda0 <RadioIrqProcess+0x2b8>)
 801cd84:	681b      	ldr	r3, [r3, #0]
 801cd86:	68db      	ldr	r3, [r3, #12]
 801cd88:	2b00      	cmp	r3, #0
 801cd8a:	f000 80b1 	beq.w	801cef0 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801cd8e:	4b04      	ldr	r3, [pc, #16]	; (801cda0 <RadioIrqProcess+0x2b8>)
 801cd90:	681b      	ldr	r3, [r3, #0]
 801cd92:	68db      	ldr	r3, [r3, #12]
 801cd94:	4798      	blx	r3
        break;
 801cd96:	e0ab      	b.n	801cef0 <RadioIrqProcess+0x408>
 801cd98:	20001d9c 	.word	0x20001d9c
 801cd9c:	20001df8 	.word	0x20001df8
 801cda0:	20001d98 	.word	0x20001d98
 801cda4:	20001e10 	.word	0x20001e10
 801cda8:	20001c98 	.word	0x20001c98
 801cdac:	20001dc0 	.word	0x20001dc0
 801cdb0:	10624dd3 	.word	0x10624dd3
 801cdb4:	080217f4 	.word	0x080217f4
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801cdb8:	4b54      	ldr	r3, [pc, #336]	; (801cf0c <RadioIrqProcess+0x424>)
 801cdba:	2201      	movs	r2, #1
 801cdbc:	2100      	movs	r1, #0
 801cdbe:	2002      	movs	r0, #2
 801cdc0:	f003 f8ee 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801cdc4:	4b52      	ldr	r3, [pc, #328]	; (801cf10 <RadioIrqProcess+0x428>)
 801cdc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	f000 8093 	beq.w	801cef4 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801cdce:	4a51      	ldr	r2, [pc, #324]	; (801cf14 <RadioIrqProcess+0x42c>)
 801cdd0:	4b4f      	ldr	r3, [pc, #316]	; (801cf10 <RadioIrqProcess+0x428>)
 801cdd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cdd4:	0c1b      	lsrs	r3, r3, #16
 801cdd6:	b2db      	uxtb	r3, r3
 801cdd8:	4619      	mov	r1, r3
 801cdda:	f640 1003 	movw	r0, #2307	; 0x903
 801cdde:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801cde0:	4a4c      	ldr	r2, [pc, #304]	; (801cf14 <RadioIrqProcess+0x42c>)
 801cde2:	4b4b      	ldr	r3, [pc, #300]	; (801cf10 <RadioIrqProcess+0x428>)
 801cde4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cde6:	0a1b      	lsrs	r3, r3, #8
 801cde8:	b2db      	uxtb	r3, r3
 801cdea:	4619      	mov	r1, r3
 801cdec:	f640 1004 	movw	r0, #2308	; 0x904
 801cdf0:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801cdf2:	4a48      	ldr	r2, [pc, #288]	; (801cf14 <RadioIrqProcess+0x42c>)
 801cdf4:	4b46      	ldr	r3, [pc, #280]	; (801cf10 <RadioIrqProcess+0x428>)
 801cdf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cdf8:	b2db      	uxtb	r3, r3
 801cdfa:	4619      	mov	r1, r3
 801cdfc:	f640 1005 	movw	r0, #2309	; 0x905
 801ce00:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801ce02:	4c44      	ldr	r4, [pc, #272]	; (801cf14 <RadioIrqProcess+0x42c>)
 801ce04:	4b44      	ldr	r3, [pc, #272]	; (801cf18 <RadioIrqProcess+0x430>)
 801ce06:	f640 1002 	movw	r0, #2306	; 0x902
 801ce0a:	4798      	blx	r3
 801ce0c:	4603      	mov	r3, r0
 801ce0e:	f043 0301 	orr.w	r3, r3, #1
 801ce12:	b2db      	uxtb	r3, r3
 801ce14:	4619      	mov	r1, r3
 801ce16:	f640 1002 	movw	r0, #2306	; 0x902
 801ce1a:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801ce1c:	4b3c      	ldr	r3, [pc, #240]	; (801cf10 <RadioIrqProcess+0x428>)
 801ce1e:	2200      	movs	r2, #0
 801ce20:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801ce22:	2300      	movs	r3, #0
 801ce24:	2200      	movs	r2, #0
 801ce26:	f240 2162 	movw	r1, #610	; 0x262
 801ce2a:	f240 2062 	movw	r0, #610	; 0x262
 801ce2e:	f001 f8c1 	bl	801dfb4 <SUBGRF_SetDioIrqParams>
        break;
 801ce32:	e05f      	b.n	801cef4 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801ce34:	4b39      	ldr	r3, [pc, #228]	; (801cf1c <RadioIrqProcess+0x434>)
 801ce36:	2201      	movs	r2, #1
 801ce38:	2100      	movs	r1, #0
 801ce3a:	2002      	movs	r0, #2
 801ce3c:	f003 f8b0 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801ce40:	f001 ff55 	bl	801ecee <RFW_Is_Init>
 801ce44:	4603      	mov	r3, r0
 801ce46:	2b01      	cmp	r3, #1
 801ce48:	d156      	bne.n	801cef8 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801ce4a:	f001 ff86 	bl	801ed5a <RFW_ReceivePayload>
        break;
 801ce4e:	e053      	b.n	801cef8 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801ce50:	4b33      	ldr	r3, [pc, #204]	; (801cf20 <RadioIrqProcess+0x438>)
 801ce52:	2201      	movs	r2, #1
 801ce54:	2100      	movs	r1, #0
 801ce56:	2002      	movs	r0, #2
 801ce58:	f003 f8a2 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801ce5c:	e051      	b.n	801cf02 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801ce5e:	4831      	ldr	r0, [pc, #196]	; (801cf24 <RadioIrqProcess+0x43c>)
 801ce60:	f002 fe94 	bl	801fb8c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801ce64:	4b2a      	ldr	r3, [pc, #168]	; (801cf10 <RadioIrqProcess+0x428>)
 801ce66:	785b      	ldrb	r3, [r3, #1]
 801ce68:	f083 0301 	eor.w	r3, r3, #1
 801ce6c:	b2db      	uxtb	r3, r3
 801ce6e:	2b00      	cmp	r3, #0
 801ce70:	d002      	beq.n	801ce78 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801ce72:	2000      	movs	r0, #0
 801ce74:	f000 feca 	bl	801dc0c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801ce78:	4b2b      	ldr	r3, [pc, #172]	; (801cf28 <RadioIrqProcess+0x440>)
 801ce7a:	681b      	ldr	r3, [r3, #0]
 801ce7c:	2b00      	cmp	r3, #0
 801ce7e:	d03d      	beq.n	801cefc <RadioIrqProcess+0x414>
 801ce80:	4b29      	ldr	r3, [pc, #164]	; (801cf28 <RadioIrqProcess+0x440>)
 801ce82:	681b      	ldr	r3, [r3, #0]
 801ce84:	68db      	ldr	r3, [r3, #12]
 801ce86:	2b00      	cmp	r3, #0
 801ce88:	d038      	beq.n	801cefc <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801ce8a:	4b27      	ldr	r3, [pc, #156]	; (801cf28 <RadioIrqProcess+0x440>)
 801ce8c:	681b      	ldr	r3, [r3, #0]
 801ce8e:	68db      	ldr	r3, [r3, #12]
 801ce90:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801ce92:	4b26      	ldr	r3, [pc, #152]	; (801cf2c <RadioIrqProcess+0x444>)
 801ce94:	2201      	movs	r2, #1
 801ce96:	2100      	movs	r1, #0
 801ce98:	2002      	movs	r0, #2
 801ce9a:	f003 f881 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801ce9e:	e02d      	b.n	801cefc <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801cea0:	4b23      	ldr	r3, [pc, #140]	; (801cf30 <RadioIrqProcess+0x448>)
 801cea2:	2201      	movs	r2, #1
 801cea4:	2100      	movs	r1, #0
 801cea6:	2002      	movs	r0, #2
 801cea8:	f003 f87a 	bl	801ffa0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801ceac:	4b18      	ldr	r3, [pc, #96]	; (801cf10 <RadioIrqProcess+0x428>)
 801ceae:	785b      	ldrb	r3, [r3, #1]
 801ceb0:	f083 0301 	eor.w	r3, r3, #1
 801ceb4:	b2db      	uxtb	r3, r3
 801ceb6:	2b00      	cmp	r3, #0
 801ceb8:	d002      	beq.n	801cec0 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801ceba:	2000      	movs	r0, #0
 801cebc:	f000 fea6 	bl	801dc0c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801cec0:	4b19      	ldr	r3, [pc, #100]	; (801cf28 <RadioIrqProcess+0x440>)
 801cec2:	681b      	ldr	r3, [r3, #0]
 801cec4:	2b00      	cmp	r3, #0
 801cec6:	d01b      	beq.n	801cf00 <RadioIrqProcess+0x418>
 801cec8:	4b17      	ldr	r3, [pc, #92]	; (801cf28 <RadioIrqProcess+0x440>)
 801ceca:	681b      	ldr	r3, [r3, #0]
 801cecc:	691b      	ldr	r3, [r3, #16]
 801cece:	2b00      	cmp	r3, #0
 801ced0:	d016      	beq.n	801cf00 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801ced2:	4b15      	ldr	r3, [pc, #84]	; (801cf28 <RadioIrqProcess+0x440>)
 801ced4:	681b      	ldr	r3, [r3, #0]
 801ced6:	691b      	ldr	r3, [r3, #16]
 801ced8:	4798      	blx	r3
        break;
 801ceda:	e011      	b.n	801cf00 <RadioIrqProcess+0x418>
        break;
 801cedc:	bf00      	nop
 801cede:	e010      	b.n	801cf02 <RadioIrqProcess+0x41a>
        break;
 801cee0:	bf00      	nop
 801cee2:	e00e      	b.n	801cf02 <RadioIrqProcess+0x41a>
        break;
 801cee4:	bf00      	nop
 801cee6:	e00c      	b.n	801cf02 <RadioIrqProcess+0x41a>
        break;
 801cee8:	bf00      	nop
 801ceea:	e00a      	b.n	801cf02 <RadioIrqProcess+0x41a>
        break;
 801ceec:	bf00      	nop
 801ceee:	e008      	b.n	801cf02 <RadioIrqProcess+0x41a>
        break;
 801cef0:	bf00      	nop
 801cef2:	e006      	b.n	801cf02 <RadioIrqProcess+0x41a>
        break;
 801cef4:	bf00      	nop
 801cef6:	e004      	b.n	801cf02 <RadioIrqProcess+0x41a>
        break;
 801cef8:	bf00      	nop
 801cefa:	e002      	b.n	801cf02 <RadioIrqProcess+0x41a>
        break;
 801cefc:	bf00      	nop
 801cefe:	e000      	b.n	801cf02 <RadioIrqProcess+0x41a>
        break;
 801cf00:	bf00      	nop
    }
}
 801cf02:	bf00      	nop
 801cf04:	3708      	adds	r7, #8
 801cf06:	46bd      	mov	sp, r7
 801cf08:	bdb0      	pop	{r4, r5, r7, pc}
 801cf0a:	bf00      	nop
 801cf0c:	08021808 	.word	0x08021808
 801cf10:	20001d9c 	.word	0x20001d9c
 801cf14:	0801c8f7 	.word	0x0801c8f7
 801cf18:	0801c91b 	.word	0x0801c91b
 801cf1c:	08021814 	.word	0x08021814
 801cf20:	08021820 	.word	0x08021820
 801cf24:	20001e10 	.word	0x20001e10
 801cf28:	20001d98 	.word	0x20001d98
 801cf2c:	0802182c 	.word	0x0802182c
 801cf30:	08021838 	.word	0x08021838

0801cf34 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801cf34:	b580      	push	{r7, lr}
 801cf36:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801cf38:	4b09      	ldr	r3, [pc, #36]	; (801cf60 <RadioTxPrbs+0x2c>)
 801cf3a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801cf3e:	2101      	movs	r1, #1
 801cf40:	4618      	mov	r0, r3
 801cf42:	f001 fcdb 	bl	801e8fc <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801cf46:	4b07      	ldr	r3, [pc, #28]	; (801cf64 <RadioTxPrbs+0x30>)
 801cf48:	212d      	movs	r1, #45	; 0x2d
 801cf4a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801cf4e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801cf50:	f000 ff1f 	bl	801dd92 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801cf54:	4804      	ldr	r0, [pc, #16]	; (801cf68 <RadioTxPrbs+0x34>)
 801cf56:	f000 fe75 	bl	801dc44 <SUBGRF_SetTx>
}
 801cf5a:	bf00      	nop
 801cf5c:	bd80      	pop	{r7, pc}
 801cf5e:	bf00      	nop
 801cf60:	20001d9c 	.word	0x20001d9c
 801cf64:	0801c8f7 	.word	0x0801c8f7
 801cf68:	000fffff 	.word	0x000fffff

0801cf6c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801cf6c:	b580      	push	{r7, lr}
 801cf6e:	b084      	sub	sp, #16
 801cf70:	af00      	add	r7, sp, #0
 801cf72:	4603      	mov	r3, r0
 801cf74:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801cf76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801cf7a:	4618      	mov	r0, r3
 801cf7c:	f001 fce6 	bl	801e94c <SUBGRF_SetRfTxPower>
 801cf80:	4603      	mov	r3, r0
 801cf82:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801cf84:	210e      	movs	r1, #14
 801cf86:	f640 101f 	movw	r0, #2335	; 0x91f
 801cf8a:	f001 fbc3 	bl	801e714 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801cf8e:	7bfb      	ldrb	r3, [r7, #15]
 801cf90:	2101      	movs	r1, #1
 801cf92:	4618      	mov	r0, r3
 801cf94:	f001 fcb2 	bl	801e8fc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801cf98:	f000 fef2 	bl	801dd80 <SUBGRF_SetTxContinuousWave>
}
 801cf9c:	bf00      	nop
 801cf9e:	3710      	adds	r7, #16
 801cfa0:	46bd      	mov	sp, r7
 801cfa2:	bd80      	pop	{r7, pc}

0801cfa4 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801cfa4:	b480      	push	{r7}
 801cfa6:	b089      	sub	sp, #36	; 0x24
 801cfa8:	af00      	add	r7, sp, #0
 801cfaa:	60f8      	str	r0, [r7, #12]
 801cfac:	60b9      	str	r1, [r7, #8]
 801cfae:	4613      	mov	r3, r2
 801cfb0:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801cfb2:	2300      	movs	r3, #0
 801cfb4:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801cfb6:	2300      	movs	r3, #0
 801cfb8:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801cfba:	2300      	movs	r3, #0
 801cfbc:	61bb      	str	r3, [r7, #24]
 801cfbe:	e011      	b.n	801cfe4 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801cfc0:	69bb      	ldr	r3, [r7, #24]
 801cfc2:	68ba      	ldr	r2, [r7, #8]
 801cfc4:	4413      	add	r3, r2
 801cfc6:	781a      	ldrb	r2, [r3, #0]
 801cfc8:	69bb      	ldr	r3, [r7, #24]
 801cfca:	68b9      	ldr	r1, [r7, #8]
 801cfcc:	440b      	add	r3, r1
 801cfce:	43d2      	mvns	r2, r2
 801cfd0:	b2d2      	uxtb	r2, r2
 801cfd2:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801cfd4:	69bb      	ldr	r3, [r7, #24]
 801cfd6:	68fa      	ldr	r2, [r7, #12]
 801cfd8:	4413      	add	r3, r2
 801cfda:	2200      	movs	r2, #0
 801cfdc:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801cfde:	69bb      	ldr	r3, [r7, #24]
 801cfe0:	3301      	adds	r3, #1
 801cfe2:	61bb      	str	r3, [r7, #24]
 801cfe4:	79fb      	ldrb	r3, [r7, #7]
 801cfe6:	69ba      	ldr	r2, [r7, #24]
 801cfe8:	429a      	cmp	r2, r3
 801cfea:	dbe9      	blt.n	801cfc0 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801cfec:	2300      	movs	r3, #0
 801cfee:	61bb      	str	r3, [r7, #24]
 801cff0:	e049      	b.n	801d086 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801cff2:	69bb      	ldr	r3, [r7, #24]
 801cff4:	425a      	negs	r2, r3
 801cff6:	f003 0307 	and.w	r3, r3, #7
 801cffa:	f002 0207 	and.w	r2, r2, #7
 801cffe:	bf58      	it	pl
 801d000:	4253      	negpl	r3, r2
 801d002:	b2db      	uxtb	r3, r3
 801d004:	f1c3 0307 	rsb	r3, r3, #7
 801d008:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801d00a:	69bb      	ldr	r3, [r7, #24]
 801d00c:	2b00      	cmp	r3, #0
 801d00e:	da00      	bge.n	801d012 <payload_integration+0x6e>
 801d010:	3307      	adds	r3, #7
 801d012:	10db      	asrs	r3, r3, #3
 801d014:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801d016:	69bb      	ldr	r3, [r7, #24]
 801d018:	3301      	adds	r3, #1
 801d01a:	425a      	negs	r2, r3
 801d01c:	f003 0307 	and.w	r3, r3, #7
 801d020:	f002 0207 	and.w	r2, r2, #7
 801d024:	bf58      	it	pl
 801d026:	4253      	negpl	r3, r2
 801d028:	b2db      	uxtb	r3, r3
 801d02a:	f1c3 0307 	rsb	r3, r3, #7
 801d02e:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801d030:	69bb      	ldr	r3, [r7, #24]
 801d032:	3301      	adds	r3, #1
 801d034:	2b00      	cmp	r3, #0
 801d036:	da00      	bge.n	801d03a <payload_integration+0x96>
 801d038:	3307      	adds	r3, #7
 801d03a:	10db      	asrs	r3, r3, #3
 801d03c:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801d03e:	7dbb      	ldrb	r3, [r7, #22]
 801d040:	68ba      	ldr	r2, [r7, #8]
 801d042:	4413      	add	r3, r2
 801d044:	781b      	ldrb	r3, [r3, #0]
 801d046:	461a      	mov	r2, r3
 801d048:	7dfb      	ldrb	r3, [r7, #23]
 801d04a:	fa42 f303 	asr.w	r3, r2, r3
 801d04e:	b2db      	uxtb	r3, r3
 801d050:	f003 0301 	and.w	r3, r3, #1
 801d054:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801d056:	7ffa      	ldrb	r2, [r7, #31]
 801d058:	7cfb      	ldrb	r3, [r7, #19]
 801d05a:	4053      	eors	r3, r2
 801d05c:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801d05e:	7d3b      	ldrb	r3, [r7, #20]
 801d060:	68fa      	ldr	r2, [r7, #12]
 801d062:	4413      	add	r3, r2
 801d064:	781b      	ldrb	r3, [r3, #0]
 801d066:	b25a      	sxtb	r2, r3
 801d068:	7ff9      	ldrb	r1, [r7, #31]
 801d06a:	7d7b      	ldrb	r3, [r7, #21]
 801d06c:	fa01 f303 	lsl.w	r3, r1, r3
 801d070:	b25b      	sxtb	r3, r3
 801d072:	4313      	orrs	r3, r2
 801d074:	b259      	sxtb	r1, r3
 801d076:	7d3b      	ldrb	r3, [r7, #20]
 801d078:	68fa      	ldr	r2, [r7, #12]
 801d07a:	4413      	add	r3, r2
 801d07c:	b2ca      	uxtb	r2, r1
 801d07e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801d080:	69bb      	ldr	r3, [r7, #24]
 801d082:	3301      	adds	r3, #1
 801d084:	61bb      	str	r3, [r7, #24]
 801d086:	79fb      	ldrb	r3, [r7, #7]
 801d088:	00db      	lsls	r3, r3, #3
 801d08a:	69ba      	ldr	r2, [r7, #24]
 801d08c:	429a      	cmp	r2, r3
 801d08e:	dbb0      	blt.n	801cff2 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801d090:	7ffb      	ldrb	r3, [r7, #31]
 801d092:	01db      	lsls	r3, r3, #7
 801d094:	b25a      	sxtb	r2, r3
 801d096:	7ffb      	ldrb	r3, [r7, #31]
 801d098:	019b      	lsls	r3, r3, #6
 801d09a:	b25b      	sxtb	r3, r3
 801d09c:	4313      	orrs	r3, r2
 801d09e:	b25b      	sxtb	r3, r3
 801d0a0:	7ffa      	ldrb	r2, [r7, #31]
 801d0a2:	2a00      	cmp	r2, #0
 801d0a4:	d101      	bne.n	801d0aa <payload_integration+0x106>
 801d0a6:	2220      	movs	r2, #32
 801d0a8:	e000      	b.n	801d0ac <payload_integration+0x108>
 801d0aa:	2200      	movs	r2, #0
 801d0ac:	4313      	orrs	r3, r2
 801d0ae:	b259      	sxtb	r1, r3
 801d0b0:	79fb      	ldrb	r3, [r7, #7]
 801d0b2:	68fa      	ldr	r2, [r7, #12]
 801d0b4:	4413      	add	r3, r2
 801d0b6:	b2ca      	uxtb	r2, r1
 801d0b8:	701a      	strb	r2, [r3, #0]
}
 801d0ba:	bf00      	nop
 801d0bc:	3724      	adds	r7, #36	; 0x24
 801d0be:	46bd      	mov	sp, r7
 801d0c0:	bc80      	pop	{r7}
 801d0c2:	4770      	bx	lr

0801d0c4 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801d0c4:	b580      	push	{r7, lr}
 801d0c6:	b08c      	sub	sp, #48	; 0x30
 801d0c8:	af00      	add	r7, sp, #0
 801d0ca:	60b9      	str	r1, [r7, #8]
 801d0cc:	607a      	str	r2, [r7, #4]
 801d0ce:	603b      	str	r3, [r7, #0]
 801d0d0:	4603      	mov	r3, r0
 801d0d2:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801d0d4:	2300      	movs	r3, #0
 801d0d6:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801d0d8:	2300      	movs	r3, #0
 801d0da:	623b      	str	r3, [r7, #32]
 801d0dc:	2300      	movs	r3, #0
 801d0de:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801d0e0:	f001 fdff 	bl	801ece2 <RFW_DeInit>

    if( rxContinuous != 0 )
 801d0e4:	687b      	ldr	r3, [r7, #4]
 801d0e6:	2b00      	cmp	r3, #0
 801d0e8:	d001      	beq.n	801d0ee <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801d0ea:	2300      	movs	r3, #0
 801d0ec:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801d0ee:	687b      	ldr	r3, [r7, #4]
 801d0f0:	2b00      	cmp	r3, #0
 801d0f2:	bf14      	ite	ne
 801d0f4:	2301      	movne	r3, #1
 801d0f6:	2300      	moveq	r3, #0
 801d0f8:	b2da      	uxtb	r2, r3
 801d0fa:	4ba3      	ldr	r3, [pc, #652]	; (801d388 <RadioSetRxGenericConfig+0x2c4>)
 801d0fc:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801d0fe:	7bfb      	ldrb	r3, [r7, #15]
 801d100:	2b00      	cmp	r3, #0
 801d102:	d003      	beq.n	801d10c <RadioSetRxGenericConfig+0x48>
 801d104:	2b01      	cmp	r3, #1
 801d106:	f000 80dc 	beq.w	801d2c2 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801d10a:	e194      	b.n	801d436 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801d10c:	68bb      	ldr	r3, [r7, #8]
 801d10e:	689b      	ldr	r3, [r3, #8]
 801d110:	2b00      	cmp	r3, #0
 801d112:	d003      	beq.n	801d11c <RadioSetRxGenericConfig+0x58>
 801d114:	68bb      	ldr	r3, [r7, #8]
 801d116:	68db      	ldr	r3, [r3, #12]
 801d118:	2b00      	cmp	r3, #0
 801d11a:	d102      	bne.n	801d122 <RadioSetRxGenericConfig+0x5e>
            return -1;
 801d11c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d120:	e18a      	b.n	801d438 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801d122:	68bb      	ldr	r3, [r7, #8]
 801d124:	7f9b      	ldrb	r3, [r3, #30]
 801d126:	2b08      	cmp	r3, #8
 801d128:	d902      	bls.n	801d130 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801d12a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d12e:	e183      	b.n	801d438 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801d130:	68bb      	ldr	r3, [r7, #8]
 801d132:	6919      	ldr	r1, [r3, #16]
 801d134:	68bb      	ldr	r3, [r7, #8]
 801d136:	7f9b      	ldrb	r3, [r3, #30]
 801d138:	b29a      	uxth	r2, r3
 801d13a:	f107 0320 	add.w	r3, r7, #32
 801d13e:	4618      	mov	r0, r3
 801d140:	f001 fec2 	bl	801eec8 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801d144:	68bb      	ldr	r3, [r7, #8]
 801d146:	681b      	ldr	r3, [r3, #0]
 801d148:	2b00      	cmp	r3, #0
 801d14a:	bf14      	ite	ne
 801d14c:	2301      	movne	r3, #1
 801d14e:	2300      	moveq	r3, #0
 801d150:	b2db      	uxtb	r3, r3
 801d152:	4618      	mov	r0, r3
 801d154:	f000 fe26 	bl	801dda4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801d158:	4b8b      	ldr	r3, [pc, #556]	; (801d388 <RadioSetRxGenericConfig+0x2c4>)
 801d15a:	2200      	movs	r2, #0
 801d15c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801d160:	68bb      	ldr	r3, [r7, #8]
 801d162:	689b      	ldr	r3, [r3, #8]
 801d164:	4a88      	ldr	r2, [pc, #544]	; (801d388 <RadioSetRxGenericConfig+0x2c4>)
 801d166:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801d168:	68bb      	ldr	r3, [r7, #8]
 801d16a:	f893 2020 	ldrb.w	r2, [r3, #32]
 801d16e:	4b86      	ldr	r3, [pc, #536]	; (801d388 <RadioSetRxGenericConfig+0x2c4>)
 801d170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801d174:	68bb      	ldr	r3, [r7, #8]
 801d176:	685b      	ldr	r3, [r3, #4]
 801d178:	4618      	mov	r0, r3
 801d17a:	f001 fce5 	bl	801eb48 <SUBGRF_GetFskBandwidthRegValue>
 801d17e:	4603      	mov	r3, r0
 801d180:	461a      	mov	r2, r3
 801d182:	4b81      	ldr	r3, [pc, #516]	; (801d388 <RadioSetRxGenericConfig+0x2c4>)
 801d184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801d188:	4b7f      	ldr	r3, [pc, #508]	; (801d388 <RadioSetRxGenericConfig+0x2c4>)
 801d18a:	2200      	movs	r2, #0
 801d18c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801d18e:	68bb      	ldr	r3, [r7, #8]
 801d190:	68db      	ldr	r3, [r3, #12]
 801d192:	b29b      	uxth	r3, r3
 801d194:	00db      	lsls	r3, r3, #3
 801d196:	b29a      	uxth	r2, r3
 801d198:	4b7b      	ldr	r3, [pc, #492]	; (801d388 <RadioSetRxGenericConfig+0x2c4>)
 801d19a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801d19c:	68bb      	ldr	r3, [r7, #8]
 801d19e:	7fda      	ldrb	r2, [r3, #31]
 801d1a0:	4b79      	ldr	r3, [pc, #484]	; (801d388 <RadioSetRxGenericConfig+0x2c4>)
 801d1a2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801d1a4:	68bb      	ldr	r3, [r7, #8]
 801d1a6:	7f9b      	ldrb	r3, [r3, #30]
 801d1a8:	00db      	lsls	r3, r3, #3
 801d1aa:	b2da      	uxtb	r2, r3
 801d1ac:	4b76      	ldr	r3, [pc, #472]	; (801d388 <RadioSetRxGenericConfig+0x2c4>)
 801d1ae:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801d1b0:	68bb      	ldr	r3, [r7, #8]
 801d1b2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801d1b6:	4b74      	ldr	r3, [pc, #464]	; (801d388 <RadioSetRxGenericConfig+0x2c4>)
 801d1b8:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801d1ba:	68bb      	ldr	r3, [r7, #8]
 801d1bc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	d105      	bne.n	801d1d0 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801d1c4:	68bb      	ldr	r3, [r7, #8]
 801d1c6:	695b      	ldr	r3, [r3, #20]
 801d1c8:	b2da      	uxtb	r2, r3
 801d1ca:	4b6f      	ldr	r3, [pc, #444]	; (801d388 <RadioSetRxGenericConfig+0x2c4>)
 801d1cc:	759a      	strb	r2, [r3, #22]
 801d1ce:	e00b      	b.n	801d1e8 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801d1d0:	68bb      	ldr	r3, [r7, #8]
 801d1d2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801d1d6:	2b02      	cmp	r3, #2
 801d1d8:	d103      	bne.n	801d1e2 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801d1da:	4b6b      	ldr	r3, [pc, #428]	; (801d388 <RadioSetRxGenericConfig+0x2c4>)
 801d1dc:	22ff      	movs	r2, #255	; 0xff
 801d1de:	759a      	strb	r2, [r3, #22]
 801d1e0:	e002      	b.n	801d1e8 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801d1e2:	4b69      	ldr	r3, [pc, #420]	; (801d388 <RadioSetRxGenericConfig+0x2c4>)
 801d1e4:	22ff      	movs	r2, #255	; 0xff
 801d1e6:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801d1e8:	68bb      	ldr	r3, [r7, #8]
 801d1ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801d1ee:	2b02      	cmp	r3, #2
 801d1f0:	d004      	beq.n	801d1fc <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801d1f2:	68bb      	ldr	r3, [r7, #8]
 801d1f4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801d1f8:	2b02      	cmp	r3, #2
 801d1fa:	d12d      	bne.n	801d258 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801d1fc:	68bb      	ldr	r3, [r7, #8]
 801d1fe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801d202:	2bf1      	cmp	r3, #241	; 0xf1
 801d204:	d00c      	beq.n	801d220 <RadioSetRxGenericConfig+0x15c>
 801d206:	68bb      	ldr	r3, [r7, #8]
 801d208:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801d20c:	2bf2      	cmp	r3, #242	; 0xf2
 801d20e:	d007      	beq.n	801d220 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801d210:	68bb      	ldr	r3, [r7, #8]
 801d212:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801d216:	2b01      	cmp	r3, #1
 801d218:	d002      	beq.n	801d220 <RadioSetRxGenericConfig+0x15c>
                return -1;
 801d21a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d21e:	e10b      	b.n	801d438 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 801d220:	2300      	movs	r3, #0
 801d222:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801d224:	68bb      	ldr	r3, [r7, #8]
 801d226:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801d228:	4b58      	ldr	r3, [pc, #352]	; (801d38c <RadioSetRxGenericConfig+0x2c8>)
 801d22a:	6819      	ldr	r1, [r3, #0]
 801d22c:	f107 0314 	add.w	r3, r7, #20
 801d230:	4a57      	ldr	r2, [pc, #348]	; (801d390 <RadioSetRxGenericConfig+0x2cc>)
 801d232:	4618      	mov	r0, r3
 801d234:	f001 fd48 	bl	801ecc8 <RFW_Init>
 801d238:	4603      	mov	r3, r0
 801d23a:	2b00      	cmp	r3, #0
 801d23c:	d002      	beq.n	801d244 <RadioSetRxGenericConfig+0x180>
                return -1;
 801d23e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d242:	e0f9      	b.n	801d438 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801d244:	4b50      	ldr	r3, [pc, #320]	; (801d388 <RadioSetRxGenericConfig+0x2c4>)
 801d246:	2200      	movs	r2, #0
 801d248:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801d24a:	4b4f      	ldr	r3, [pc, #316]	; (801d388 <RadioSetRxGenericConfig+0x2c4>)
 801d24c:	2201      	movs	r2, #1
 801d24e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801d250:	4b4d      	ldr	r3, [pc, #308]	; (801d388 <RadioSetRxGenericConfig+0x2c4>)
 801d252:	2200      	movs	r2, #0
 801d254:	755a      	strb	r2, [r3, #21]
        {
 801d256:	e00e      	b.n	801d276 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801d258:	68bb      	ldr	r3, [r7, #8]
 801d25a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801d25e:	4b4a      	ldr	r3, [pc, #296]	; (801d388 <RadioSetRxGenericConfig+0x2c4>)
 801d260:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801d262:	68bb      	ldr	r3, [r7, #8]
 801d264:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801d268:	4b47      	ldr	r3, [pc, #284]	; (801d388 <RadioSetRxGenericConfig+0x2c4>)
 801d26a:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801d26c:	68bb      	ldr	r3, [r7, #8]
 801d26e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801d272:	4b45      	ldr	r3, [pc, #276]	; (801d388 <RadioSetRxGenericConfig+0x2c4>)
 801d274:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801d276:	f7ff fa3c 	bl	801c6f2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801d27a:	2000      	movs	r0, #0
 801d27c:	f7fe fbd0 	bl	801ba20 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d280:	4844      	ldr	r0, [pc, #272]	; (801d394 <RadioSetRxGenericConfig+0x2d0>)
 801d282:	f001 f82d 	bl	801e2e0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d286:	4844      	ldr	r0, [pc, #272]	; (801d398 <RadioSetRxGenericConfig+0x2d4>)
 801d288:	f001 f8fc 	bl	801e484 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801d28c:	f107 0320 	add.w	r3, r7, #32
 801d290:	4618      	mov	r0, r3
 801d292:	f000 fbc0 	bl	801da16 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801d296:	68bb      	ldr	r3, [r7, #8]
 801d298:	8b9b      	ldrh	r3, [r3, #28]
 801d29a:	4618      	mov	r0, r3
 801d29c:	f000 fc0a 	bl	801dab4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801d2a0:	68bb      	ldr	r3, [r7, #8]
 801d2a2:	8b1b      	ldrh	r3, [r3, #24]
 801d2a4:	4618      	mov	r0, r3
 801d2a6:	f000 fbe5 	bl	801da74 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801d2aa:	683b      	ldr	r3, [r7, #0]
 801d2ac:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801d2b0:	fb03 f202 	mul.w	r2, r3, r2
 801d2b4:	68bb      	ldr	r3, [r7, #8]
 801d2b6:	689b      	ldr	r3, [r3, #8]
 801d2b8:	fbb2 f3f3 	udiv	r3, r2, r3
 801d2bc:	4a32      	ldr	r2, [pc, #200]	; (801d388 <RadioSetRxGenericConfig+0x2c4>)
 801d2be:	6093      	str	r3, [r2, #8]
        break;
 801d2c0:	e0b9      	b.n	801d436 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801d2c2:	68bb      	ldr	r3, [r7, #8]
 801d2c4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801d2c6:	2b00      	cmp	r3, #0
 801d2c8:	d102      	bne.n	801d2d0 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801d2ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d2ce:	e0b3      	b.n	801d438 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801d2d0:	68bb      	ldr	r3, [r7, #8]
 801d2d2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801d2d6:	2b01      	cmp	r3, #1
 801d2d8:	d104      	bne.n	801d2e4 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801d2da:	68bb      	ldr	r3, [r7, #8]
 801d2dc:	695b      	ldr	r3, [r3, #20]
 801d2de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801d2e2:	e002      	b.n	801d2ea <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801d2e4:	23ff      	movs	r3, #255	; 0xff
 801d2e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801d2ea:	68bb      	ldr	r3, [r7, #8]
 801d2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d2ee:	2b00      	cmp	r3, #0
 801d2f0:	bf14      	ite	ne
 801d2f2:	2301      	movne	r3, #1
 801d2f4:	2300      	moveq	r3, #0
 801d2f6:	b2db      	uxtb	r3, r3
 801d2f8:	4618      	mov	r0, r3
 801d2fa:	f000 fd53 	bl	801dda4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801d2fe:	683b      	ldr	r3, [r7, #0]
 801d300:	b2db      	uxtb	r3, r3
 801d302:	4618      	mov	r0, r3
 801d304:	f000 fd5d 	bl	801ddc2 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801d308:	4b1f      	ldr	r3, [pc, #124]	; (801d388 <RadioSetRxGenericConfig+0x2c4>)
 801d30a:	2201      	movs	r2, #1
 801d30c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801d310:	68bb      	ldr	r3, [r7, #8]
 801d312:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801d316:	4b1c      	ldr	r3, [pc, #112]	; (801d388 <RadioSetRxGenericConfig+0x2c4>)
 801d318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801d31c:	68bb      	ldr	r3, [r7, #8]
 801d31e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801d322:	4b19      	ldr	r3, [pc, #100]	; (801d388 <RadioSetRxGenericConfig+0x2c4>)
 801d324:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801d328:	68bb      	ldr	r3, [r7, #8]
 801d32a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801d32e:	4b16      	ldr	r3, [pc, #88]	; (801d388 <RadioSetRxGenericConfig+0x2c4>)
 801d330:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801d334:	68bb      	ldr	r3, [r7, #8]
 801d336:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801d33a:	2b02      	cmp	r3, #2
 801d33c:	d010      	beq.n	801d360 <RadioSetRxGenericConfig+0x29c>
 801d33e:	2b02      	cmp	r3, #2
 801d340:	dc2c      	bgt.n	801d39c <RadioSetRxGenericConfig+0x2d8>
 801d342:	2b00      	cmp	r3, #0
 801d344:	d002      	beq.n	801d34c <RadioSetRxGenericConfig+0x288>
 801d346:	2b01      	cmp	r3, #1
 801d348:	d005      	beq.n	801d356 <RadioSetRxGenericConfig+0x292>
            break;
 801d34a:	e027      	b.n	801d39c <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d34c:	4b0e      	ldr	r3, [pc, #56]	; (801d388 <RadioSetRxGenericConfig+0x2c4>)
 801d34e:	2200      	movs	r2, #0
 801d350:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d354:	e023      	b.n	801d39e <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d356:	4b0c      	ldr	r3, [pc, #48]	; (801d388 <RadioSetRxGenericConfig+0x2c4>)
 801d358:	2201      	movs	r2, #1
 801d35a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d35e:	e01e      	b.n	801d39e <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801d360:	68bb      	ldr	r3, [r7, #8]
 801d362:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801d366:	2b0b      	cmp	r3, #11
 801d368:	d004      	beq.n	801d374 <RadioSetRxGenericConfig+0x2b0>
 801d36a:	68bb      	ldr	r3, [r7, #8]
 801d36c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801d370:	2b0c      	cmp	r3, #12
 801d372:	d104      	bne.n	801d37e <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d374:	4b04      	ldr	r3, [pc, #16]	; (801d388 <RadioSetRxGenericConfig+0x2c4>)
 801d376:	2201      	movs	r2, #1
 801d378:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d37c:	e00f      	b.n	801d39e <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d37e:	4b02      	ldr	r3, [pc, #8]	; (801d388 <RadioSetRxGenericConfig+0x2c4>)
 801d380:	2200      	movs	r2, #0
 801d382:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d386:	e00a      	b.n	801d39e <RadioSetRxGenericConfig+0x2da>
 801d388:	20001d9c 	.word	0x20001d9c
 801d38c:	20001d98 	.word	0x20001d98
 801d390:	20001e10 	.word	0x20001e10
 801d394:	20001dd4 	.word	0x20001dd4
 801d398:	20001daa 	.word	0x20001daa
            break;
 801d39c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801d39e:	4b28      	ldr	r3, [pc, #160]	; (801d440 <RadioSetRxGenericConfig+0x37c>)
 801d3a0:	2201      	movs	r2, #1
 801d3a2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801d3a4:	68bb      	ldr	r3, [r7, #8]
 801d3a6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801d3a8:	4b25      	ldr	r3, [pc, #148]	; (801d440 <RadioSetRxGenericConfig+0x37c>)
 801d3aa:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801d3ac:	68bb      	ldr	r3, [r7, #8]
 801d3ae:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801d3b2:	4b23      	ldr	r3, [pc, #140]	; (801d440 <RadioSetRxGenericConfig+0x37c>)
 801d3b4:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801d3b6:	4a22      	ldr	r2, [pc, #136]	; (801d440 <RadioSetRxGenericConfig+0x37c>)
 801d3b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801d3bc:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801d3be:	68bb      	ldr	r3, [r7, #8]
 801d3c0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801d3c4:	4b1e      	ldr	r3, [pc, #120]	; (801d440 <RadioSetRxGenericConfig+0x37c>)
 801d3c6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801d3ca:	68bb      	ldr	r3, [r7, #8]
 801d3cc:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801d3d0:	4b1b      	ldr	r3, [pc, #108]	; (801d440 <RadioSetRxGenericConfig+0x37c>)
 801d3d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801d3d6:	f7ff f98c 	bl	801c6f2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801d3da:	2001      	movs	r0, #1
 801d3dc:	f7fe fb20 	bl	801ba20 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d3e0:	4818      	ldr	r0, [pc, #96]	; (801d444 <RadioSetRxGenericConfig+0x380>)
 801d3e2:	f000 ff7d 	bl	801e2e0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d3e6:	4818      	ldr	r0, [pc, #96]	; (801d448 <RadioSetRxGenericConfig+0x384>)
 801d3e8:	f001 f84c 	bl	801e484 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801d3ec:	4b14      	ldr	r3, [pc, #80]	; (801d440 <RadioSetRxGenericConfig+0x37c>)
 801d3ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801d3f2:	2b01      	cmp	r3, #1
 801d3f4:	d10d      	bne.n	801d412 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801d3f6:	f240 7036 	movw	r0, #1846	; 0x736
 801d3fa:	f001 f99f 	bl	801e73c <SUBGRF_ReadRegister>
 801d3fe:	4603      	mov	r3, r0
 801d400:	f023 0304 	bic.w	r3, r3, #4
 801d404:	b2db      	uxtb	r3, r3
 801d406:	4619      	mov	r1, r3
 801d408:	f240 7036 	movw	r0, #1846	; 0x736
 801d40c:	f001 f982 	bl	801e714 <SUBGRF_WriteRegister>
 801d410:	e00c      	b.n	801d42c <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801d412:	f240 7036 	movw	r0, #1846	; 0x736
 801d416:	f001 f991 	bl	801e73c <SUBGRF_ReadRegister>
 801d41a:	4603      	mov	r3, r0
 801d41c:	f043 0304 	orr.w	r3, r3, #4
 801d420:	b2db      	uxtb	r3, r3
 801d422:	4619      	mov	r1, r3
 801d424:	f240 7036 	movw	r0, #1846	; 0x736
 801d428:	f001 f974 	bl	801e714 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801d42c:	4b04      	ldr	r3, [pc, #16]	; (801d440 <RadioSetRxGenericConfig+0x37c>)
 801d42e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d432:	609a      	str	r2, [r3, #8]
        break;
 801d434:	bf00      	nop
    }
    return status;
 801d436:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801d438:	4618      	mov	r0, r3
 801d43a:	3730      	adds	r7, #48	; 0x30
 801d43c:	46bd      	mov	sp, r7
 801d43e:	bd80      	pop	{r7, pc}
 801d440:	20001d9c 	.word	0x20001d9c
 801d444:	20001dd4 	.word	0x20001dd4
 801d448:	20001daa 	.word	0x20001daa

0801d44c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801d44c:	b580      	push	{r7, lr}
 801d44e:	b08e      	sub	sp, #56	; 0x38
 801d450:	af00      	add	r7, sp, #0
 801d452:	60b9      	str	r1, [r7, #8]
 801d454:	607b      	str	r3, [r7, #4]
 801d456:	4603      	mov	r3, r0
 801d458:	73fb      	strb	r3, [r7, #15]
 801d45a:	4613      	mov	r3, r2
 801d45c:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801d45e:	2300      	movs	r3, #0
 801d460:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d462:	2300      	movs	r3, #0
 801d464:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801d466:	f001 fc3c 	bl	801ece2 <RFW_DeInit>
    switch( modem )
 801d46a:	7bfb      	ldrb	r3, [r7, #15]
 801d46c:	2b03      	cmp	r3, #3
 801d46e:	f200 8204 	bhi.w	801d87a <RadioSetTxGenericConfig+0x42e>
 801d472:	a201      	add	r2, pc, #4	; (adr r2, 801d478 <RadioSetTxGenericConfig+0x2c>)
 801d474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d478:	0801d5fd 	.word	0x0801d5fd
 801d47c:	0801d745 	.word	0x0801d745
 801d480:	0801d83d 	.word	0x0801d83d
 801d484:	0801d489 	.word	0x0801d489
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801d488:	68bb      	ldr	r3, [r7, #8]
 801d48a:	7c9b      	ldrb	r3, [r3, #18]
 801d48c:	2b08      	cmp	r3, #8
 801d48e:	d902      	bls.n	801d496 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801d490:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d494:	e206      	b.n	801d8a4 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801d496:	68bb      	ldr	r3, [r7, #8]
 801d498:	6899      	ldr	r1, [r3, #8]
 801d49a:	68bb      	ldr	r3, [r7, #8]
 801d49c:	7c9b      	ldrb	r3, [r3, #18]
 801d49e:	b29a      	uxth	r2, r3
 801d4a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d4a4:	4618      	mov	r0, r3
 801d4a6:	f001 fd0f 	bl	801eec8 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801d4aa:	68bb      	ldr	r3, [r7, #8]
 801d4ac:	681b      	ldr	r3, [r3, #0]
 801d4ae:	2b00      	cmp	r3, #0
 801d4b0:	d102      	bne.n	801d4b8 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801d4b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d4b6:	e1f5      	b.n	801d8a4 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801d4b8:	68bb      	ldr	r3, [r7, #8]
 801d4ba:	681b      	ldr	r3, [r3, #0]
 801d4bc:	f242 7210 	movw	r2, #10000	; 0x2710
 801d4c0:	4293      	cmp	r3, r2
 801d4c2:	d813      	bhi.n	801d4ec <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801d4c4:	2302      	movs	r3, #2
 801d4c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801d4ca:	4b99      	ldr	r3, [pc, #612]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d4cc:	2203      	movs	r2, #3
 801d4ce:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801d4d0:	4b97      	ldr	r3, [pc, #604]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d4d2:	2203      	movs	r2, #3
 801d4d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801d4d8:	68bb      	ldr	r3, [r7, #8]
 801d4da:	681b      	ldr	r3, [r3, #0]
 801d4dc:	4a94      	ldr	r2, [pc, #592]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d4de:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801d4e0:	68bb      	ldr	r3, [r7, #8]
 801d4e2:	7cda      	ldrb	r2, [r3, #19]
 801d4e4:	4b92      	ldr	r3, [pc, #584]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d4e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801d4ea:	e017      	b.n	801d51c <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801d4ec:	2300      	movs	r3, #0
 801d4ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801d4f2:	4b8f      	ldr	r3, [pc, #572]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d4f4:	2200      	movs	r2, #0
 801d4f6:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801d4f8:	4b8d      	ldr	r3, [pc, #564]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d4fa:	2200      	movs	r2, #0
 801d4fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801d500:	68bb      	ldr	r3, [r7, #8]
 801d502:	681b      	ldr	r3, [r3, #0]
 801d504:	4a8a      	ldr	r2, [pc, #552]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d506:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801d508:	68bb      	ldr	r3, [r7, #8]
 801d50a:	7cda      	ldrb	r2, [r3, #19]
 801d50c:	4b88      	ldr	r3, [pc, #544]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d50e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801d512:	68bb      	ldr	r3, [r7, #8]
 801d514:	681b      	ldr	r3, [r3, #0]
 801d516:	089b      	lsrs	r3, r3, #2
 801d518:	4a85      	ldr	r2, [pc, #532]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d51a:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801d51c:	68bb      	ldr	r3, [r7, #8]
 801d51e:	685b      	ldr	r3, [r3, #4]
 801d520:	b29b      	uxth	r3, r3
 801d522:	00db      	lsls	r3, r3, #3
 801d524:	b29a      	uxth	r2, r3
 801d526:	4b82      	ldr	r3, [pc, #520]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d528:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801d52a:	4b81      	ldr	r3, [pc, #516]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d52c:	2204      	movs	r2, #4
 801d52e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801d530:	68bb      	ldr	r3, [r7, #8]
 801d532:	7c9b      	ldrb	r3, [r3, #18]
 801d534:	00db      	lsls	r3, r3, #3
 801d536:	b2da      	uxtb	r2, r3
 801d538:	4b7d      	ldr	r3, [pc, #500]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d53a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801d53c:	4b7c      	ldr	r3, [pc, #496]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d53e:	2200      	movs	r2, #0
 801d540:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801d542:	68bb      	ldr	r3, [r7, #8]
 801d544:	7d9b      	ldrb	r3, [r3, #22]
 801d546:	2b02      	cmp	r3, #2
 801d548:	d003      	beq.n	801d552 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801d54a:	68bb      	ldr	r3, [r7, #8]
 801d54c:	7d1b      	ldrb	r3, [r3, #20]
 801d54e:	2b02      	cmp	r3, #2
 801d550:	d12b      	bne.n	801d5aa <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801d552:	68bb      	ldr	r3, [r7, #8]
 801d554:	7d5b      	ldrb	r3, [r3, #21]
 801d556:	2bf1      	cmp	r3, #241	; 0xf1
 801d558:	d00a      	beq.n	801d570 <RadioSetTxGenericConfig+0x124>
 801d55a:	68bb      	ldr	r3, [r7, #8]
 801d55c:	7d5b      	ldrb	r3, [r3, #21]
 801d55e:	2bf2      	cmp	r3, #242	; 0xf2
 801d560:	d006      	beq.n	801d570 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801d562:	68bb      	ldr	r3, [r7, #8]
 801d564:	7d5b      	ldrb	r3, [r3, #21]
 801d566:	2b01      	cmp	r3, #1
 801d568:	d002      	beq.n	801d570 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801d56a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d56e:	e199      	b.n	801d8a4 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801d570:	68bb      	ldr	r3, [r7, #8]
 801d572:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801d574:	2301      	movs	r3, #1
 801d576:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801d57a:	4b6e      	ldr	r3, [pc, #440]	; (801d734 <RadioSetTxGenericConfig+0x2e8>)
 801d57c:	6819      	ldr	r1, [r3, #0]
 801d57e:	f107 0320 	add.w	r3, r7, #32
 801d582:	4a6d      	ldr	r2, [pc, #436]	; (801d738 <RadioSetTxGenericConfig+0x2ec>)
 801d584:	4618      	mov	r0, r3
 801d586:	f001 fb9f 	bl	801ecc8 <RFW_Init>
 801d58a:	4603      	mov	r3, r0
 801d58c:	2b00      	cmp	r3, #0
 801d58e:	d002      	beq.n	801d596 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801d590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d594:	e186      	b.n	801d8a4 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801d596:	4b66      	ldr	r3, [pc, #408]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d598:	2200      	movs	r2, #0
 801d59a:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801d59c:	4b64      	ldr	r3, [pc, #400]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d59e:	2201      	movs	r2, #1
 801d5a0:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801d5a2:	4b63      	ldr	r3, [pc, #396]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d5a4:	2200      	movs	r2, #0
 801d5a6:	755a      	strb	r2, [r3, #21]
        {
 801d5a8:	e00b      	b.n	801d5c2 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801d5aa:	68bb      	ldr	r3, [r7, #8]
 801d5ac:	7d5a      	ldrb	r2, [r3, #21]
 801d5ae:	4b60      	ldr	r3, [pc, #384]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d5b0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801d5b2:	68bb      	ldr	r3, [r7, #8]
 801d5b4:	7d9a      	ldrb	r2, [r3, #22]
 801d5b6:	4b5e      	ldr	r3, [pc, #376]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d5b8:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801d5ba:	68bb      	ldr	r3, [r7, #8]
 801d5bc:	7d1a      	ldrb	r2, [r3, #20]
 801d5be:	4b5c      	ldr	r3, [pc, #368]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d5c0:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801d5c2:	f7ff f896 	bl	801c6f2 <RadioStandby>
        RadioSetModem( radio_modem );
 801d5c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801d5ca:	4618      	mov	r0, r3
 801d5cc:	f7fe fa28 	bl	801ba20 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d5d0:	485a      	ldr	r0, [pc, #360]	; (801d73c <RadioSetTxGenericConfig+0x2f0>)
 801d5d2:	f000 fe85 	bl	801e2e0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d5d6:	485a      	ldr	r0, [pc, #360]	; (801d740 <RadioSetTxGenericConfig+0x2f4>)
 801d5d8:	f000 ff54 	bl	801e484 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801d5dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d5e0:	4618      	mov	r0, r3
 801d5e2:	f000 fa18 	bl	801da16 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801d5e6:	68bb      	ldr	r3, [r7, #8]
 801d5e8:	8a1b      	ldrh	r3, [r3, #16]
 801d5ea:	4618      	mov	r0, r3
 801d5ec:	f000 fa62 	bl	801dab4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801d5f0:	68bb      	ldr	r3, [r7, #8]
 801d5f2:	899b      	ldrh	r3, [r3, #12]
 801d5f4:	4618      	mov	r0, r3
 801d5f6:	f000 fa3d 	bl	801da74 <SUBGRF_SetCrcPolynomial>
        break;
 801d5fa:	e13f      	b.n	801d87c <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801d5fc:	68bb      	ldr	r3, [r7, #8]
 801d5fe:	681b      	ldr	r3, [r3, #0]
 801d600:	2b00      	cmp	r3, #0
 801d602:	d102      	bne.n	801d60a <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801d604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d608:	e14c      	b.n	801d8a4 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801d60a:	68bb      	ldr	r3, [r7, #8]
 801d60c:	7c9b      	ldrb	r3, [r3, #18]
 801d60e:	2b08      	cmp	r3, #8
 801d610:	d902      	bls.n	801d618 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801d612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d616:	e145      	b.n	801d8a4 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801d618:	68bb      	ldr	r3, [r7, #8]
 801d61a:	6899      	ldr	r1, [r3, #8]
 801d61c:	68bb      	ldr	r3, [r7, #8]
 801d61e:	7c9b      	ldrb	r3, [r3, #18]
 801d620:	b29a      	uxth	r2, r3
 801d622:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d626:	4618      	mov	r0, r3
 801d628:	f001 fc4e 	bl	801eec8 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801d62c:	4b40      	ldr	r3, [pc, #256]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d62e:	2200      	movs	r2, #0
 801d630:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801d634:	68bb      	ldr	r3, [r7, #8]
 801d636:	681b      	ldr	r3, [r3, #0]
 801d638:	4a3d      	ldr	r2, [pc, #244]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d63a:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801d63c:	68bb      	ldr	r3, [r7, #8]
 801d63e:	7cda      	ldrb	r2, [r3, #19]
 801d640:	4b3b      	ldr	r3, [pc, #236]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801d646:	68bb      	ldr	r3, [r7, #8]
 801d648:	699b      	ldr	r3, [r3, #24]
 801d64a:	4a39      	ldr	r2, [pc, #228]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d64c:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801d64e:	4b38      	ldr	r3, [pc, #224]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d650:	2200      	movs	r2, #0
 801d652:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801d654:	68bb      	ldr	r3, [r7, #8]
 801d656:	685b      	ldr	r3, [r3, #4]
 801d658:	b29b      	uxth	r3, r3
 801d65a:	00db      	lsls	r3, r3, #3
 801d65c:	b29a      	uxth	r2, r3
 801d65e:	4b34      	ldr	r3, [pc, #208]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d660:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801d662:	4b33      	ldr	r3, [pc, #204]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d664:	2204      	movs	r2, #4
 801d666:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801d668:	68bb      	ldr	r3, [r7, #8]
 801d66a:	7c9b      	ldrb	r3, [r3, #18]
 801d66c:	00db      	lsls	r3, r3, #3
 801d66e:	b2da      	uxtb	r2, r3
 801d670:	4b2f      	ldr	r3, [pc, #188]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d672:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801d674:	4b2e      	ldr	r3, [pc, #184]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d676:	2200      	movs	r2, #0
 801d678:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801d67a:	68bb      	ldr	r3, [r7, #8]
 801d67c:	7d9b      	ldrb	r3, [r3, #22]
 801d67e:	2b02      	cmp	r3, #2
 801d680:	d003      	beq.n	801d68a <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801d682:	68bb      	ldr	r3, [r7, #8]
 801d684:	7d1b      	ldrb	r3, [r3, #20]
 801d686:	2b02      	cmp	r3, #2
 801d688:	d12a      	bne.n	801d6e0 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801d68a:	68bb      	ldr	r3, [r7, #8]
 801d68c:	7d5b      	ldrb	r3, [r3, #21]
 801d68e:	2bf1      	cmp	r3, #241	; 0xf1
 801d690:	d00a      	beq.n	801d6a8 <RadioSetTxGenericConfig+0x25c>
 801d692:	68bb      	ldr	r3, [r7, #8]
 801d694:	7d5b      	ldrb	r3, [r3, #21]
 801d696:	2bf2      	cmp	r3, #242	; 0xf2
 801d698:	d006      	beq.n	801d6a8 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801d69a:	68bb      	ldr	r3, [r7, #8]
 801d69c:	7d5b      	ldrb	r3, [r3, #21]
 801d69e:	2b01      	cmp	r3, #1
 801d6a0:	d002      	beq.n	801d6a8 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801d6a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d6a6:	e0fd      	b.n	801d8a4 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801d6a8:	2301      	movs	r3, #1
 801d6aa:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801d6ac:	68bb      	ldr	r3, [r7, #8]
 801d6ae:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801d6b0:	4b20      	ldr	r3, [pc, #128]	; (801d734 <RadioSetTxGenericConfig+0x2e8>)
 801d6b2:	6819      	ldr	r1, [r3, #0]
 801d6b4:	f107 0314 	add.w	r3, r7, #20
 801d6b8:	4a1f      	ldr	r2, [pc, #124]	; (801d738 <RadioSetTxGenericConfig+0x2ec>)
 801d6ba:	4618      	mov	r0, r3
 801d6bc:	f001 fb04 	bl	801ecc8 <RFW_Init>
 801d6c0:	4603      	mov	r3, r0
 801d6c2:	2b00      	cmp	r3, #0
 801d6c4:	d002      	beq.n	801d6cc <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801d6c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d6ca:	e0eb      	b.n	801d8a4 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801d6cc:	4b18      	ldr	r3, [pc, #96]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d6ce:	2200      	movs	r2, #0
 801d6d0:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801d6d2:	4b17      	ldr	r3, [pc, #92]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d6d4:	2201      	movs	r2, #1
 801d6d6:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801d6d8:	4b15      	ldr	r3, [pc, #84]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d6da:	2200      	movs	r2, #0
 801d6dc:	755a      	strb	r2, [r3, #21]
        {
 801d6de:	e00b      	b.n	801d6f8 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801d6e0:	68bb      	ldr	r3, [r7, #8]
 801d6e2:	7d5a      	ldrb	r2, [r3, #21]
 801d6e4:	4b12      	ldr	r3, [pc, #72]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d6e6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801d6e8:	68bb      	ldr	r3, [r7, #8]
 801d6ea:	7d9a      	ldrb	r2, [r3, #22]
 801d6ec:	4b10      	ldr	r3, [pc, #64]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d6ee:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801d6f0:	68bb      	ldr	r3, [r7, #8]
 801d6f2:	7d1a      	ldrb	r2, [r3, #20]
 801d6f4:	4b0e      	ldr	r3, [pc, #56]	; (801d730 <RadioSetTxGenericConfig+0x2e4>)
 801d6f6:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801d6f8:	f7fe fffb 	bl	801c6f2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801d6fc:	2000      	movs	r0, #0
 801d6fe:	f7fe f98f 	bl	801ba20 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d702:	480e      	ldr	r0, [pc, #56]	; (801d73c <RadioSetTxGenericConfig+0x2f0>)
 801d704:	f000 fdec 	bl	801e2e0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d708:	480d      	ldr	r0, [pc, #52]	; (801d740 <RadioSetTxGenericConfig+0x2f4>)
 801d70a:	f000 febb 	bl	801e484 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801d70e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d712:	4618      	mov	r0, r3
 801d714:	f000 f97f 	bl	801da16 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801d718:	68bb      	ldr	r3, [r7, #8]
 801d71a:	8a1b      	ldrh	r3, [r3, #16]
 801d71c:	4618      	mov	r0, r3
 801d71e:	f000 f9c9 	bl	801dab4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801d722:	68bb      	ldr	r3, [r7, #8]
 801d724:	899b      	ldrh	r3, [r3, #12]
 801d726:	4618      	mov	r0, r3
 801d728:	f000 f9a4 	bl	801da74 <SUBGRF_SetCrcPolynomial>
        break;
 801d72c:	e0a6      	b.n	801d87c <RadioSetTxGenericConfig+0x430>
 801d72e:	bf00      	nop
 801d730:	20001d9c 	.word	0x20001d9c
 801d734:	20001d98 	.word	0x20001d98
 801d738:	20001df8 	.word	0x20001df8
 801d73c:	20001dd4 	.word	0x20001dd4
 801d740:	20001daa 	.word	0x20001daa
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801d744:	4b59      	ldr	r3, [pc, #356]	; (801d8ac <RadioSetTxGenericConfig+0x460>)
 801d746:	2201      	movs	r2, #1
 801d748:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801d74c:	68bb      	ldr	r3, [r7, #8]
 801d74e:	781a      	ldrb	r2, [r3, #0]
 801d750:	4b56      	ldr	r3, [pc, #344]	; (801d8ac <RadioSetTxGenericConfig+0x460>)
 801d752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801d756:	68bb      	ldr	r3, [r7, #8]
 801d758:	785a      	ldrb	r2, [r3, #1]
 801d75a:	4b54      	ldr	r3, [pc, #336]	; (801d8ac <RadioSetTxGenericConfig+0x460>)
 801d75c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801d760:	68bb      	ldr	r3, [r7, #8]
 801d762:	789a      	ldrb	r2, [r3, #2]
 801d764:	4b51      	ldr	r3, [pc, #324]	; (801d8ac <RadioSetTxGenericConfig+0x460>)
 801d766:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801d76a:	68bb      	ldr	r3, [r7, #8]
 801d76c:	78db      	ldrb	r3, [r3, #3]
 801d76e:	2b02      	cmp	r3, #2
 801d770:	d010      	beq.n	801d794 <RadioSetTxGenericConfig+0x348>
 801d772:	2b02      	cmp	r3, #2
 801d774:	dc20      	bgt.n	801d7b8 <RadioSetTxGenericConfig+0x36c>
 801d776:	2b00      	cmp	r3, #0
 801d778:	d002      	beq.n	801d780 <RadioSetTxGenericConfig+0x334>
 801d77a:	2b01      	cmp	r3, #1
 801d77c:	d005      	beq.n	801d78a <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801d77e:	e01b      	b.n	801d7b8 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d780:	4b4a      	ldr	r3, [pc, #296]	; (801d8ac <RadioSetTxGenericConfig+0x460>)
 801d782:	2200      	movs	r2, #0
 801d784:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d788:	e017      	b.n	801d7ba <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d78a:	4b48      	ldr	r3, [pc, #288]	; (801d8ac <RadioSetTxGenericConfig+0x460>)
 801d78c:	2201      	movs	r2, #1
 801d78e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d792:	e012      	b.n	801d7ba <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801d794:	68bb      	ldr	r3, [r7, #8]
 801d796:	781b      	ldrb	r3, [r3, #0]
 801d798:	2b0b      	cmp	r3, #11
 801d79a:	d003      	beq.n	801d7a4 <RadioSetTxGenericConfig+0x358>
 801d79c:	68bb      	ldr	r3, [r7, #8]
 801d79e:	781b      	ldrb	r3, [r3, #0]
 801d7a0:	2b0c      	cmp	r3, #12
 801d7a2:	d104      	bne.n	801d7ae <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d7a4:	4b41      	ldr	r3, [pc, #260]	; (801d8ac <RadioSetTxGenericConfig+0x460>)
 801d7a6:	2201      	movs	r2, #1
 801d7a8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d7ac:	e005      	b.n	801d7ba <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d7ae:	4b3f      	ldr	r3, [pc, #252]	; (801d8ac <RadioSetTxGenericConfig+0x460>)
 801d7b0:	2200      	movs	r2, #0
 801d7b2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d7b6:	e000      	b.n	801d7ba <RadioSetTxGenericConfig+0x36e>
            break;
 801d7b8:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801d7ba:	4b3c      	ldr	r3, [pc, #240]	; (801d8ac <RadioSetTxGenericConfig+0x460>)
 801d7bc:	2201      	movs	r2, #1
 801d7be:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801d7c0:	68bb      	ldr	r3, [r7, #8]
 801d7c2:	889a      	ldrh	r2, [r3, #4]
 801d7c4:	4b39      	ldr	r3, [pc, #228]	; (801d8ac <RadioSetTxGenericConfig+0x460>)
 801d7c6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801d7c8:	68bb      	ldr	r3, [r7, #8]
 801d7ca:	799a      	ldrb	r2, [r3, #6]
 801d7cc:	4b37      	ldr	r3, [pc, #220]	; (801d8ac <RadioSetTxGenericConfig+0x460>)
 801d7ce:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801d7d0:	68bb      	ldr	r3, [r7, #8]
 801d7d2:	79da      	ldrb	r2, [r3, #7]
 801d7d4:	4b35      	ldr	r3, [pc, #212]	; (801d8ac <RadioSetTxGenericConfig+0x460>)
 801d7d6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801d7da:	68bb      	ldr	r3, [r7, #8]
 801d7dc:	7a1a      	ldrb	r2, [r3, #8]
 801d7de:	4b33      	ldr	r3, [pc, #204]	; (801d8ac <RadioSetTxGenericConfig+0x460>)
 801d7e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801d7e4:	f7fe ff85 	bl	801c6f2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801d7e8:	2001      	movs	r0, #1
 801d7ea:	f7fe f919 	bl	801ba20 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d7ee:	4830      	ldr	r0, [pc, #192]	; (801d8b0 <RadioSetTxGenericConfig+0x464>)
 801d7f0:	f000 fd76 	bl	801e2e0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d7f4:	482f      	ldr	r0, [pc, #188]	; (801d8b4 <RadioSetTxGenericConfig+0x468>)
 801d7f6:	f000 fe45 	bl	801e484 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801d7fa:	4b2c      	ldr	r3, [pc, #176]	; (801d8ac <RadioSetTxGenericConfig+0x460>)
 801d7fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801d800:	2b06      	cmp	r3, #6
 801d802:	d10d      	bne.n	801d820 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801d804:	f640 0089 	movw	r0, #2185	; 0x889
 801d808:	f000 ff98 	bl	801e73c <SUBGRF_ReadRegister>
 801d80c:	4603      	mov	r3, r0
 801d80e:	f023 0304 	bic.w	r3, r3, #4
 801d812:	b2db      	uxtb	r3, r3
 801d814:	4619      	mov	r1, r3
 801d816:	f640 0089 	movw	r0, #2185	; 0x889
 801d81a:	f000 ff7b 	bl	801e714 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801d81e:	e02d      	b.n	801d87c <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801d820:	f640 0089 	movw	r0, #2185	; 0x889
 801d824:	f000 ff8a 	bl	801e73c <SUBGRF_ReadRegister>
 801d828:	4603      	mov	r3, r0
 801d82a:	f043 0304 	orr.w	r3, r3, #4
 801d82e:	b2db      	uxtb	r3, r3
 801d830:	4619      	mov	r1, r3
 801d832:	f640 0089 	movw	r0, #2185	; 0x889
 801d836:	f000 ff6d 	bl	801e714 <SUBGRF_WriteRegister>
        break;
 801d83a:	e01f      	b.n	801d87c <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801d83c:	68bb      	ldr	r3, [r7, #8]
 801d83e:	681b      	ldr	r3, [r3, #0]
 801d840:	2b00      	cmp	r3, #0
 801d842:	d004      	beq.n	801d84e <RadioSetTxGenericConfig+0x402>
 801d844:	68bb      	ldr	r3, [r7, #8]
 801d846:	681b      	ldr	r3, [r3, #0]
 801d848:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801d84c:	d902      	bls.n	801d854 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801d84e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d852:	e027      	b.n	801d8a4 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801d854:	2003      	movs	r0, #3
 801d856:	f7fe f8e3 	bl	801ba20 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801d85a:	4b14      	ldr	r3, [pc, #80]	; (801d8ac <RadioSetTxGenericConfig+0x460>)
 801d85c:	2202      	movs	r2, #2
 801d85e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801d862:	68bb      	ldr	r3, [r7, #8]
 801d864:	681b      	ldr	r3, [r3, #0]
 801d866:	4a11      	ldr	r2, [pc, #68]	; (801d8ac <RadioSetTxGenericConfig+0x460>)
 801d868:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801d86a:	4b10      	ldr	r3, [pc, #64]	; (801d8ac <RadioSetTxGenericConfig+0x460>)
 801d86c:	2216      	movs	r2, #22
 801d86e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d872:	480f      	ldr	r0, [pc, #60]	; (801d8b0 <RadioSetTxGenericConfig+0x464>)
 801d874:	f000 fd34 	bl	801e2e0 <SUBGRF_SetModulationParams>
        break;
 801d878:	e000      	b.n	801d87c <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801d87a:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801d87c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d880:	4618      	mov	r0, r3
 801d882:	f001 f863 	bl	801e94c <SUBGRF_SetRfTxPower>
 801d886:	4603      	mov	r3, r0
 801d888:	461a      	mov	r2, r3
 801d88a:	4b08      	ldr	r3, [pc, #32]	; (801d8ac <RadioSetTxGenericConfig+0x460>)
 801d88c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801d890:	4b06      	ldr	r3, [pc, #24]	; (801d8ac <RadioSetTxGenericConfig+0x460>)
 801d892:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801d896:	4618      	mov	r0, r3
 801d898:	f001 fa37 	bl	801ed0a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801d89c:	4a03      	ldr	r2, [pc, #12]	; (801d8ac <RadioSetTxGenericConfig+0x460>)
 801d89e:	687b      	ldr	r3, [r7, #4]
 801d8a0:	6053      	str	r3, [r2, #4]
    return 0;
 801d8a2:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801d8a4:	4618      	mov	r0, r3
 801d8a6:	3738      	adds	r7, #56	; 0x38
 801d8a8:	46bd      	mov	sp, r7
 801d8aa:	bd80      	pop	{r7, pc}
 801d8ac:	20001d9c 	.word	0x20001d9c
 801d8b0:	20001dd4 	.word	0x20001dd4
 801d8b4:	20001daa 	.word	0x20001daa

0801d8b8 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801d8b8:	b480      	push	{r7}
 801d8ba:	b085      	sub	sp, #20
 801d8bc:	af00      	add	r7, sp, #0
 801d8be:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801d8c0:	2301      	movs	r3, #1
 801d8c2:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801d8c4:	7bfb      	ldrb	r3, [r7, #15]
}
 801d8c6:	4618      	mov	r0, r3
 801d8c8:	3714      	adds	r7, #20
 801d8ca:	46bd      	mov	sp, r7
 801d8cc:	bc80      	pop	{r7}
 801d8ce:	4770      	bx	lr

0801d8d0 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801d8d0:	b480      	push	{r7}
 801d8d2:	b083      	sub	sp, #12
 801d8d4:	af00      	add	r7, sp, #0
 801d8d6:	6078      	str	r0, [r7, #4]
 801d8d8:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801d8da:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801d8dc:	4618      	mov	r0, r3
 801d8de:	370c      	adds	r7, #12
 801d8e0:	46bd      	mov	sp, r7
 801d8e2:	bc80      	pop	{r7}
 801d8e4:	4770      	bx	lr
	...

0801d8e8 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801d8e8:	b580      	push	{r7, lr}
 801d8ea:	b084      	sub	sp, #16
 801d8ec:	af00      	add	r7, sp, #0
 801d8ee:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801d8f0:	687b      	ldr	r3, [r7, #4]
 801d8f2:	2b00      	cmp	r3, #0
 801d8f4:	d002      	beq.n	801d8fc <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801d8f6:	4a1d      	ldr	r2, [pc, #116]	; (801d96c <SUBGRF_Init+0x84>)
 801d8f8:	687b      	ldr	r3, [r7, #4]
 801d8fa:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801d8fc:	f7e4 fdfe 	bl	80024fc <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801d900:	2002      	movs	r0, #2
 801d902:	f001 f8ff 	bl	801eb04 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801d906:	4b1a      	ldr	r3, [pc, #104]	; (801d970 <SUBGRF_Init+0x88>)
 801d908:	2200      	movs	r2, #0
 801d90a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801d90c:	2000      	movs	r0, #0
 801d90e:	f000 f97d 	bl	801dc0c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801d912:	f7f1 f9c1 	bl	800ec98 <RBI_IsTCXO>
 801d916:	4603      	mov	r3, r0
 801d918:	2b01      	cmp	r3, #1
 801d91a:	d10e      	bne.n	801d93a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801d91c:	2140      	movs	r1, #64	; 0x40
 801d91e:	2001      	movs	r0, #1
 801d920:	f000 fb82 	bl	801e028 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801d924:	2100      	movs	r1, #0
 801d926:	f640 1011 	movw	r0, #2321	; 0x911
 801d92a:	f000 fef3 	bl	801e714 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801d92e:	237f      	movs	r3, #127	; 0x7f
 801d930:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801d932:	7b38      	ldrb	r0, [r7, #12]
 801d934:	f000 fa8b 	bl	801de4e <SUBGRF_Calibrate>
 801d938:	e009      	b.n	801d94e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801d93a:	2120      	movs	r1, #32
 801d93c:	f640 1011 	movw	r0, #2321	; 0x911
 801d940:	f000 fee8 	bl	801e714 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801d944:	2120      	movs	r1, #32
 801d946:	f640 1012 	movw	r0, #2322	; 0x912
 801d94a:	f000 fee3 	bl	801e714 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801d94e:	210e      	movs	r1, #14
 801d950:	f640 101f 	movw	r0, #2335	; 0x91f
 801d954:	f000 fede 	bl	801e714 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801d958:	f7f1 f982 	bl	800ec60 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801d95c:	4b05      	ldr	r3, [pc, #20]	; (801d974 <SUBGRF_Init+0x8c>)
 801d95e:	2201      	movs	r2, #1
 801d960:	701a      	strb	r2, [r3, #0]
}
 801d962:	bf00      	nop
 801d964:	3710      	adds	r7, #16
 801d966:	46bd      	mov	sp, r7
 801d968:	bd80      	pop	{r7, pc}
 801d96a:	bf00      	nop
 801d96c:	20001e34 	.word	0x20001e34
 801d970:	20001e30 	.word	0x20001e30
 801d974:	20001e28 	.word	0x20001e28

0801d978 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801d978:	b480      	push	{r7}
 801d97a:	af00      	add	r7, sp, #0
    return OperatingMode;
 801d97c:	4b02      	ldr	r3, [pc, #8]	; (801d988 <SUBGRF_GetOperatingMode+0x10>)
 801d97e:	781b      	ldrb	r3, [r3, #0]
}
 801d980:	4618      	mov	r0, r3
 801d982:	46bd      	mov	sp, r7
 801d984:	bc80      	pop	{r7}
 801d986:	4770      	bx	lr
 801d988:	20001e28 	.word	0x20001e28

0801d98c <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801d98c:	b580      	push	{r7, lr}
 801d98e:	b082      	sub	sp, #8
 801d990:	af00      	add	r7, sp, #0
 801d992:	6078      	str	r0, [r7, #4]
 801d994:	460b      	mov	r3, r1
 801d996:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801d998:	78fb      	ldrb	r3, [r7, #3]
 801d99a:	461a      	mov	r2, r3
 801d99c:	6879      	ldr	r1, [r7, #4]
 801d99e:	2000      	movs	r0, #0
 801d9a0:	f000 ff24 	bl	801e7ec <SUBGRF_WriteBuffer>
}
 801d9a4:	bf00      	nop
 801d9a6:	3708      	adds	r7, #8
 801d9a8:	46bd      	mov	sp, r7
 801d9aa:	bd80      	pop	{r7, pc}

0801d9ac <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801d9ac:	b580      	push	{r7, lr}
 801d9ae:	b086      	sub	sp, #24
 801d9b0:	af00      	add	r7, sp, #0
 801d9b2:	60f8      	str	r0, [r7, #12]
 801d9b4:	60b9      	str	r1, [r7, #8]
 801d9b6:	4613      	mov	r3, r2
 801d9b8:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801d9ba:	2300      	movs	r3, #0
 801d9bc:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801d9be:	f107 0317 	add.w	r3, r7, #23
 801d9c2:	4619      	mov	r1, r3
 801d9c4:	68b8      	ldr	r0, [r7, #8]
 801d9c6:	f000 fe27 	bl	801e618 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801d9ca:	68bb      	ldr	r3, [r7, #8]
 801d9cc:	781b      	ldrb	r3, [r3, #0]
 801d9ce:	79fa      	ldrb	r2, [r7, #7]
 801d9d0:	429a      	cmp	r2, r3
 801d9d2:	d201      	bcs.n	801d9d8 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801d9d4:	2301      	movs	r3, #1
 801d9d6:	e007      	b.n	801d9e8 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801d9d8:	7df8      	ldrb	r0, [r7, #23]
 801d9da:	68bb      	ldr	r3, [r7, #8]
 801d9dc:	781b      	ldrb	r3, [r3, #0]
 801d9de:	461a      	mov	r2, r3
 801d9e0:	68f9      	ldr	r1, [r7, #12]
 801d9e2:	f000 ff25 	bl	801e830 <SUBGRF_ReadBuffer>

    return 0;
 801d9e6:	2300      	movs	r3, #0
}
 801d9e8:	4618      	mov	r0, r3
 801d9ea:	3718      	adds	r7, #24
 801d9ec:	46bd      	mov	sp, r7
 801d9ee:	bd80      	pop	{r7, pc}

0801d9f0 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801d9f0:	b580      	push	{r7, lr}
 801d9f2:	b084      	sub	sp, #16
 801d9f4:	af00      	add	r7, sp, #0
 801d9f6:	60f8      	str	r0, [r7, #12]
 801d9f8:	460b      	mov	r3, r1
 801d9fa:	607a      	str	r2, [r7, #4]
 801d9fc:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801d9fe:	7afb      	ldrb	r3, [r7, #11]
 801da00:	4619      	mov	r1, r3
 801da02:	68f8      	ldr	r0, [r7, #12]
 801da04:	f7ff ffc2 	bl	801d98c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801da08:	6878      	ldr	r0, [r7, #4]
 801da0a:	f000 f91b 	bl	801dc44 <SUBGRF_SetTx>
}
 801da0e:	bf00      	nop
 801da10:	3710      	adds	r7, #16
 801da12:	46bd      	mov	sp, r7
 801da14:	bd80      	pop	{r7, pc}

0801da16 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801da16:	b580      	push	{r7, lr}
 801da18:	b082      	sub	sp, #8
 801da1a:	af00      	add	r7, sp, #0
 801da1c:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801da1e:	2208      	movs	r2, #8
 801da20:	6879      	ldr	r1, [r7, #4]
 801da22:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801da26:	f000 fe9d 	bl	801e764 <SUBGRF_WriteRegisters>
    return 0;
 801da2a:	2300      	movs	r3, #0
}
 801da2c:	4618      	mov	r0, r3
 801da2e:	3708      	adds	r7, #8
 801da30:	46bd      	mov	sp, r7
 801da32:	bd80      	pop	{r7, pc}

0801da34 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801da34:	b580      	push	{r7, lr}
 801da36:	b084      	sub	sp, #16
 801da38:	af00      	add	r7, sp, #0
 801da3a:	4603      	mov	r3, r0
 801da3c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801da3e:	88fb      	ldrh	r3, [r7, #6]
 801da40:	0a1b      	lsrs	r3, r3, #8
 801da42:	b29b      	uxth	r3, r3
 801da44:	b2db      	uxtb	r3, r3
 801da46:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801da48:	88fb      	ldrh	r3, [r7, #6]
 801da4a:	b2db      	uxtb	r3, r3
 801da4c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801da4e:	f000 fb6f 	bl	801e130 <SUBGRF_GetPacketType>
 801da52:	4603      	mov	r3, r0
 801da54:	2b00      	cmp	r3, #0
 801da56:	d108      	bne.n	801da6a <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801da58:	f107 030c 	add.w	r3, r7, #12
 801da5c:	2202      	movs	r2, #2
 801da5e:	4619      	mov	r1, r3
 801da60:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801da64:	f000 fe7e 	bl	801e764 <SUBGRF_WriteRegisters>
            break;
 801da68:	e000      	b.n	801da6c <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801da6a:	bf00      	nop
    }
}
 801da6c:	bf00      	nop
 801da6e:	3710      	adds	r7, #16
 801da70:	46bd      	mov	sp, r7
 801da72:	bd80      	pop	{r7, pc}

0801da74 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801da74:	b580      	push	{r7, lr}
 801da76:	b084      	sub	sp, #16
 801da78:	af00      	add	r7, sp, #0
 801da7a:	4603      	mov	r3, r0
 801da7c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801da7e:	88fb      	ldrh	r3, [r7, #6]
 801da80:	0a1b      	lsrs	r3, r3, #8
 801da82:	b29b      	uxth	r3, r3
 801da84:	b2db      	uxtb	r3, r3
 801da86:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801da88:	88fb      	ldrh	r3, [r7, #6]
 801da8a:	b2db      	uxtb	r3, r3
 801da8c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801da8e:	f000 fb4f 	bl	801e130 <SUBGRF_GetPacketType>
 801da92:	4603      	mov	r3, r0
 801da94:	2b00      	cmp	r3, #0
 801da96:	d108      	bne.n	801daaa <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801da98:	f107 030c 	add.w	r3, r7, #12
 801da9c:	2202      	movs	r2, #2
 801da9e:	4619      	mov	r1, r3
 801daa0:	f240 60be 	movw	r0, #1726	; 0x6be
 801daa4:	f000 fe5e 	bl	801e764 <SUBGRF_WriteRegisters>
            break;
 801daa8:	e000      	b.n	801daac <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801daaa:	bf00      	nop
    }
}
 801daac:	bf00      	nop
 801daae:	3710      	adds	r7, #16
 801dab0:	46bd      	mov	sp, r7
 801dab2:	bd80      	pop	{r7, pc}

0801dab4 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801dab4:	b580      	push	{r7, lr}
 801dab6:	b084      	sub	sp, #16
 801dab8:	af00      	add	r7, sp, #0
 801daba:	4603      	mov	r3, r0
 801dabc:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801dabe:	2300      	movs	r3, #0
 801dac0:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801dac2:	f000 fb35 	bl	801e130 <SUBGRF_GetPacketType>
 801dac6:	4603      	mov	r3, r0
 801dac8:	2b00      	cmp	r3, #0
 801daca:	d121      	bne.n	801db10 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801dacc:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801dad0:	f000 fe34 	bl	801e73c <SUBGRF_ReadRegister>
 801dad4:	4603      	mov	r3, r0
 801dad6:	f023 0301 	bic.w	r3, r3, #1
 801dada:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801dadc:	88fb      	ldrh	r3, [r7, #6]
 801dade:	0a1b      	lsrs	r3, r3, #8
 801dae0:	b29b      	uxth	r3, r3
 801dae2:	b25b      	sxtb	r3, r3
 801dae4:	f003 0301 	and.w	r3, r3, #1
 801dae8:	b25a      	sxtb	r2, r3
 801daea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801daee:	4313      	orrs	r3, r2
 801daf0:	b25b      	sxtb	r3, r3
 801daf2:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801daf4:	7bfb      	ldrb	r3, [r7, #15]
 801daf6:	4619      	mov	r1, r3
 801daf8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801dafc:	f000 fe0a 	bl	801e714 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801db00:	88fb      	ldrh	r3, [r7, #6]
 801db02:	b2db      	uxtb	r3, r3
 801db04:	4619      	mov	r1, r3
 801db06:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801db0a:	f000 fe03 	bl	801e714 <SUBGRF_WriteRegister>
            break;
 801db0e:	e000      	b.n	801db12 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801db10:	bf00      	nop
    }
}
 801db12:	bf00      	nop
 801db14:	3710      	adds	r7, #16
 801db16:	46bd      	mov	sp, r7
 801db18:	bd80      	pop	{r7, pc}

0801db1a <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801db1a:	b580      	push	{r7, lr}
 801db1c:	b082      	sub	sp, #8
 801db1e:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801db20:	2300      	movs	r3, #0
 801db22:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801db24:	2300      	movs	r3, #0
 801db26:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801db28:	2300      	movs	r3, #0
 801db2a:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801db2c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801db30:	f000 fe04 	bl	801e73c <SUBGRF_ReadRegister>
 801db34:	4603      	mov	r3, r0
 801db36:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801db38:	79fb      	ldrb	r3, [r7, #7]
 801db3a:	f023 0301 	bic.w	r3, r3, #1
 801db3e:	b2db      	uxtb	r3, r3
 801db40:	4619      	mov	r1, r3
 801db42:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801db46:	f000 fde5 	bl	801e714 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801db4a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801db4e:	f000 fdf5 	bl	801e73c <SUBGRF_ReadRegister>
 801db52:	4603      	mov	r3, r0
 801db54:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801db56:	79bb      	ldrb	r3, [r7, #6]
 801db58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801db5c:	b2db      	uxtb	r3, r3
 801db5e:	4619      	mov	r1, r3
 801db60:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801db64:	f000 fdd6 	bl	801e714 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801db68:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801db6c:	f000 f88a 	bl	801dc84 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801db70:	463b      	mov	r3, r7
 801db72:	2204      	movs	r2, #4
 801db74:	4619      	mov	r1, r3
 801db76:	f640 0019 	movw	r0, #2073	; 0x819
 801db7a:	f000 fe15 	bl	801e7a8 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801db7e:	2000      	movs	r0, #0
 801db80:	f000 f844 	bl	801dc0c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801db84:	79fb      	ldrb	r3, [r7, #7]
 801db86:	4619      	mov	r1, r3
 801db88:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801db8c:	f000 fdc2 	bl	801e714 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801db90:	79bb      	ldrb	r3, [r7, #6]
 801db92:	4619      	mov	r1, r3
 801db94:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801db98:	f000 fdbc 	bl	801e714 <SUBGRF_WriteRegister>

    return number;
 801db9c:	683b      	ldr	r3, [r7, #0]
}
 801db9e:	4618      	mov	r0, r3
 801dba0:	3708      	adds	r7, #8
 801dba2:	46bd      	mov	sp, r7
 801dba4:	bd80      	pop	{r7, pc}
	...

0801dba8 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801dba8:	b580      	push	{r7, lr}
 801dbaa:	b084      	sub	sp, #16
 801dbac:	af00      	add	r7, sp, #0
 801dbae:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801dbb0:	2000      	movs	r0, #0
 801dbb2:	f7f1 f85c 	bl	800ec6e <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801dbb6:	2002      	movs	r0, #2
 801dbb8:	f000 ffa4 	bl	801eb04 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801dbbc:	793b      	ldrb	r3, [r7, #4]
 801dbbe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801dbc2:	b2db      	uxtb	r3, r3
 801dbc4:	009b      	lsls	r3, r3, #2
 801dbc6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801dbc8:	793b      	ldrb	r3, [r7, #4]
 801dbca:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801dbce:	b2db      	uxtb	r3, r3
 801dbd0:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801dbd2:	b25b      	sxtb	r3, r3
 801dbd4:	4313      	orrs	r3, r2
 801dbd6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801dbd8:	793b      	ldrb	r3, [r7, #4]
 801dbda:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801dbde:	b2db      	uxtb	r3, r3
 801dbe0:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801dbe2:	4313      	orrs	r3, r2
 801dbe4:	b25b      	sxtb	r3, r3
 801dbe6:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801dbe8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801dbea:	f107 030f 	add.w	r3, r7, #15
 801dbee:	2201      	movs	r2, #1
 801dbf0:	4619      	mov	r1, r3
 801dbf2:	2084      	movs	r0, #132	; 0x84
 801dbf4:	f000 fe3e 	bl	801e874 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801dbf8:	4b03      	ldr	r3, [pc, #12]	; (801dc08 <SUBGRF_SetSleep+0x60>)
 801dbfa:	2200      	movs	r2, #0
 801dbfc:	701a      	strb	r2, [r3, #0]
}
 801dbfe:	bf00      	nop
 801dc00:	3710      	adds	r7, #16
 801dc02:	46bd      	mov	sp, r7
 801dc04:	bd80      	pop	{r7, pc}
 801dc06:	bf00      	nop
 801dc08:	20001e28 	.word	0x20001e28

0801dc0c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801dc0c:	b580      	push	{r7, lr}
 801dc0e:	b082      	sub	sp, #8
 801dc10:	af00      	add	r7, sp, #0
 801dc12:	4603      	mov	r3, r0
 801dc14:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801dc16:	1dfb      	adds	r3, r7, #7
 801dc18:	2201      	movs	r2, #1
 801dc1a:	4619      	mov	r1, r3
 801dc1c:	2080      	movs	r0, #128	; 0x80
 801dc1e:	f000 fe29 	bl	801e874 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801dc22:	79fb      	ldrb	r3, [r7, #7]
 801dc24:	2b00      	cmp	r3, #0
 801dc26:	d103      	bne.n	801dc30 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801dc28:	4b05      	ldr	r3, [pc, #20]	; (801dc40 <SUBGRF_SetStandby+0x34>)
 801dc2a:	2201      	movs	r2, #1
 801dc2c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801dc2e:	e002      	b.n	801dc36 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801dc30:	4b03      	ldr	r3, [pc, #12]	; (801dc40 <SUBGRF_SetStandby+0x34>)
 801dc32:	2202      	movs	r2, #2
 801dc34:	701a      	strb	r2, [r3, #0]
}
 801dc36:	bf00      	nop
 801dc38:	3708      	adds	r7, #8
 801dc3a:	46bd      	mov	sp, r7
 801dc3c:	bd80      	pop	{r7, pc}
 801dc3e:	bf00      	nop
 801dc40:	20001e28 	.word	0x20001e28

0801dc44 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801dc44:	b580      	push	{r7, lr}
 801dc46:	b084      	sub	sp, #16
 801dc48:	af00      	add	r7, sp, #0
 801dc4a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801dc4c:	4b0c      	ldr	r3, [pc, #48]	; (801dc80 <SUBGRF_SetTx+0x3c>)
 801dc4e:	2204      	movs	r2, #4
 801dc50:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801dc52:	687b      	ldr	r3, [r7, #4]
 801dc54:	0c1b      	lsrs	r3, r3, #16
 801dc56:	b2db      	uxtb	r3, r3
 801dc58:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801dc5a:	687b      	ldr	r3, [r7, #4]
 801dc5c:	0a1b      	lsrs	r3, r3, #8
 801dc5e:	b2db      	uxtb	r3, r3
 801dc60:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801dc62:	687b      	ldr	r3, [r7, #4]
 801dc64:	b2db      	uxtb	r3, r3
 801dc66:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801dc68:	f107 030c 	add.w	r3, r7, #12
 801dc6c:	2203      	movs	r2, #3
 801dc6e:	4619      	mov	r1, r3
 801dc70:	2083      	movs	r0, #131	; 0x83
 801dc72:	f000 fdff 	bl	801e874 <SUBGRF_WriteCommand>
}
 801dc76:	bf00      	nop
 801dc78:	3710      	adds	r7, #16
 801dc7a:	46bd      	mov	sp, r7
 801dc7c:	bd80      	pop	{r7, pc}
 801dc7e:	bf00      	nop
 801dc80:	20001e28 	.word	0x20001e28

0801dc84 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801dc84:	b580      	push	{r7, lr}
 801dc86:	b084      	sub	sp, #16
 801dc88:	af00      	add	r7, sp, #0
 801dc8a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801dc8c:	4b0c      	ldr	r3, [pc, #48]	; (801dcc0 <SUBGRF_SetRx+0x3c>)
 801dc8e:	2205      	movs	r2, #5
 801dc90:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801dc92:	687b      	ldr	r3, [r7, #4]
 801dc94:	0c1b      	lsrs	r3, r3, #16
 801dc96:	b2db      	uxtb	r3, r3
 801dc98:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801dc9a:	687b      	ldr	r3, [r7, #4]
 801dc9c:	0a1b      	lsrs	r3, r3, #8
 801dc9e:	b2db      	uxtb	r3, r3
 801dca0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801dca2:	687b      	ldr	r3, [r7, #4]
 801dca4:	b2db      	uxtb	r3, r3
 801dca6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801dca8:	f107 030c 	add.w	r3, r7, #12
 801dcac:	2203      	movs	r2, #3
 801dcae:	4619      	mov	r1, r3
 801dcb0:	2082      	movs	r0, #130	; 0x82
 801dcb2:	f000 fddf 	bl	801e874 <SUBGRF_WriteCommand>
}
 801dcb6:	bf00      	nop
 801dcb8:	3710      	adds	r7, #16
 801dcba:	46bd      	mov	sp, r7
 801dcbc:	bd80      	pop	{r7, pc}
 801dcbe:	bf00      	nop
 801dcc0:	20001e28 	.word	0x20001e28

0801dcc4 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801dcc4:	b580      	push	{r7, lr}
 801dcc6:	b084      	sub	sp, #16
 801dcc8:	af00      	add	r7, sp, #0
 801dcca:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801dccc:	4b0e      	ldr	r3, [pc, #56]	; (801dd08 <SUBGRF_SetRxBoosted+0x44>)
 801dcce:	2205      	movs	r2, #5
 801dcd0:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801dcd2:	2197      	movs	r1, #151	; 0x97
 801dcd4:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801dcd8:	f000 fd1c 	bl	801e714 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801dcdc:	687b      	ldr	r3, [r7, #4]
 801dcde:	0c1b      	lsrs	r3, r3, #16
 801dce0:	b2db      	uxtb	r3, r3
 801dce2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801dce4:	687b      	ldr	r3, [r7, #4]
 801dce6:	0a1b      	lsrs	r3, r3, #8
 801dce8:	b2db      	uxtb	r3, r3
 801dcea:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801dcec:	687b      	ldr	r3, [r7, #4]
 801dcee:	b2db      	uxtb	r3, r3
 801dcf0:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801dcf2:	f107 030c 	add.w	r3, r7, #12
 801dcf6:	2203      	movs	r2, #3
 801dcf8:	4619      	mov	r1, r3
 801dcfa:	2082      	movs	r0, #130	; 0x82
 801dcfc:	f000 fdba 	bl	801e874 <SUBGRF_WriteCommand>
}
 801dd00:	bf00      	nop
 801dd02:	3710      	adds	r7, #16
 801dd04:	46bd      	mov	sp, r7
 801dd06:	bd80      	pop	{r7, pc}
 801dd08:	20001e28 	.word	0x20001e28

0801dd0c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801dd0c:	b580      	push	{r7, lr}
 801dd0e:	b084      	sub	sp, #16
 801dd10:	af00      	add	r7, sp, #0
 801dd12:	6078      	str	r0, [r7, #4]
 801dd14:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801dd16:	687b      	ldr	r3, [r7, #4]
 801dd18:	0c1b      	lsrs	r3, r3, #16
 801dd1a:	b2db      	uxtb	r3, r3
 801dd1c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801dd1e:	687b      	ldr	r3, [r7, #4]
 801dd20:	0a1b      	lsrs	r3, r3, #8
 801dd22:	b2db      	uxtb	r3, r3
 801dd24:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801dd26:	687b      	ldr	r3, [r7, #4]
 801dd28:	b2db      	uxtb	r3, r3
 801dd2a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801dd2c:	683b      	ldr	r3, [r7, #0]
 801dd2e:	0c1b      	lsrs	r3, r3, #16
 801dd30:	b2db      	uxtb	r3, r3
 801dd32:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801dd34:	683b      	ldr	r3, [r7, #0]
 801dd36:	0a1b      	lsrs	r3, r3, #8
 801dd38:	b2db      	uxtb	r3, r3
 801dd3a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801dd3c:	683b      	ldr	r3, [r7, #0]
 801dd3e:	b2db      	uxtb	r3, r3
 801dd40:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801dd42:	f107 0308 	add.w	r3, r7, #8
 801dd46:	2206      	movs	r2, #6
 801dd48:	4619      	mov	r1, r3
 801dd4a:	2094      	movs	r0, #148	; 0x94
 801dd4c:	f000 fd92 	bl	801e874 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801dd50:	4b03      	ldr	r3, [pc, #12]	; (801dd60 <SUBGRF_SetRxDutyCycle+0x54>)
 801dd52:	2206      	movs	r2, #6
 801dd54:	701a      	strb	r2, [r3, #0]
}
 801dd56:	bf00      	nop
 801dd58:	3710      	adds	r7, #16
 801dd5a:	46bd      	mov	sp, r7
 801dd5c:	bd80      	pop	{r7, pc}
 801dd5e:	bf00      	nop
 801dd60:	20001e28 	.word	0x20001e28

0801dd64 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801dd64:	b580      	push	{r7, lr}
 801dd66:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801dd68:	2200      	movs	r2, #0
 801dd6a:	2100      	movs	r1, #0
 801dd6c:	20c5      	movs	r0, #197	; 0xc5
 801dd6e:	f000 fd81 	bl	801e874 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801dd72:	4b02      	ldr	r3, [pc, #8]	; (801dd7c <SUBGRF_SetCad+0x18>)
 801dd74:	2207      	movs	r2, #7
 801dd76:	701a      	strb	r2, [r3, #0]
}
 801dd78:	bf00      	nop
 801dd7a:	bd80      	pop	{r7, pc}
 801dd7c:	20001e28 	.word	0x20001e28

0801dd80 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801dd80:	b580      	push	{r7, lr}
 801dd82:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801dd84:	2200      	movs	r2, #0
 801dd86:	2100      	movs	r1, #0
 801dd88:	20d1      	movs	r0, #209	; 0xd1
 801dd8a:	f000 fd73 	bl	801e874 <SUBGRF_WriteCommand>
}
 801dd8e:	bf00      	nop
 801dd90:	bd80      	pop	{r7, pc}

0801dd92 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801dd92:	b580      	push	{r7, lr}
 801dd94:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801dd96:	2200      	movs	r2, #0
 801dd98:	2100      	movs	r1, #0
 801dd9a:	20d2      	movs	r0, #210	; 0xd2
 801dd9c:	f000 fd6a 	bl	801e874 <SUBGRF_WriteCommand>
}
 801dda0:	bf00      	nop
 801dda2:	bd80      	pop	{r7, pc}

0801dda4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801dda4:	b580      	push	{r7, lr}
 801dda6:	b082      	sub	sp, #8
 801dda8:	af00      	add	r7, sp, #0
 801ddaa:	4603      	mov	r3, r0
 801ddac:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801ddae:	1dfb      	adds	r3, r7, #7
 801ddb0:	2201      	movs	r2, #1
 801ddb2:	4619      	mov	r1, r3
 801ddb4:	209f      	movs	r0, #159	; 0x9f
 801ddb6:	f000 fd5d 	bl	801e874 <SUBGRF_WriteCommand>
}
 801ddba:	bf00      	nop
 801ddbc:	3708      	adds	r7, #8
 801ddbe:	46bd      	mov	sp, r7
 801ddc0:	bd80      	pop	{r7, pc}

0801ddc2 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801ddc2:	b580      	push	{r7, lr}
 801ddc4:	b084      	sub	sp, #16
 801ddc6:	af00      	add	r7, sp, #0
 801ddc8:	4603      	mov	r3, r0
 801ddca:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801ddcc:	1dfb      	adds	r3, r7, #7
 801ddce:	2201      	movs	r2, #1
 801ddd0:	4619      	mov	r1, r3
 801ddd2:	20a0      	movs	r0, #160	; 0xa0
 801ddd4:	f000 fd4e 	bl	801e874 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801ddd8:	79fb      	ldrb	r3, [r7, #7]
 801ddda:	2b3f      	cmp	r3, #63	; 0x3f
 801dddc:	d91c      	bls.n	801de18 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801ddde:	79fb      	ldrb	r3, [r7, #7]
 801dde0:	085b      	lsrs	r3, r3, #1
 801dde2:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801dde4:	2300      	movs	r3, #0
 801dde6:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801dde8:	2300      	movs	r3, #0
 801ddea:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801ddec:	e005      	b.n	801ddfa <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801ddee:	7bfb      	ldrb	r3, [r7, #15]
 801ddf0:	089b      	lsrs	r3, r3, #2
 801ddf2:	73fb      	strb	r3, [r7, #15]
            exp++;
 801ddf4:	7bbb      	ldrb	r3, [r7, #14]
 801ddf6:	3301      	adds	r3, #1
 801ddf8:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801ddfa:	7bfb      	ldrb	r3, [r7, #15]
 801ddfc:	2b1f      	cmp	r3, #31
 801ddfe:	d8f6      	bhi.n	801ddee <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801de00:	7bfb      	ldrb	r3, [r7, #15]
 801de02:	00db      	lsls	r3, r3, #3
 801de04:	b2da      	uxtb	r2, r3
 801de06:	7bbb      	ldrb	r3, [r7, #14]
 801de08:	4413      	add	r3, r2
 801de0a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801de0c:	7b7b      	ldrb	r3, [r7, #13]
 801de0e:	4619      	mov	r1, r3
 801de10:	f240 7006 	movw	r0, #1798	; 0x706
 801de14:	f000 fc7e 	bl	801e714 <SUBGRF_WriteRegister>
    }
}
 801de18:	bf00      	nop
 801de1a:	3710      	adds	r7, #16
 801de1c:	46bd      	mov	sp, r7
 801de1e:	bd80      	pop	{r7, pc}

0801de20 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801de20:	b580      	push	{r7, lr}
 801de22:	b082      	sub	sp, #8
 801de24:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801de26:	f7f0 ff3e 	bl	800eca6 <RBI_IsDCDC>
 801de2a:	4603      	mov	r3, r0
 801de2c:	2b01      	cmp	r3, #1
 801de2e:	d102      	bne.n	801de36 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801de30:	2301      	movs	r3, #1
 801de32:	71fb      	strb	r3, [r7, #7]
 801de34:	e001      	b.n	801de3a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801de36:	2300      	movs	r3, #0
 801de38:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801de3a:	1dfb      	adds	r3, r7, #7
 801de3c:	2201      	movs	r2, #1
 801de3e:	4619      	mov	r1, r3
 801de40:	2096      	movs	r0, #150	; 0x96
 801de42:	f000 fd17 	bl	801e874 <SUBGRF_WriteCommand>
}
 801de46:	bf00      	nop
 801de48:	3708      	adds	r7, #8
 801de4a:	46bd      	mov	sp, r7
 801de4c:	bd80      	pop	{r7, pc}

0801de4e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801de4e:	b580      	push	{r7, lr}
 801de50:	b084      	sub	sp, #16
 801de52:	af00      	add	r7, sp, #0
 801de54:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801de56:	793b      	ldrb	r3, [r7, #4]
 801de58:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801de5c:	b2db      	uxtb	r3, r3
 801de5e:	019b      	lsls	r3, r3, #6
 801de60:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801de62:	793b      	ldrb	r3, [r7, #4]
 801de64:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801de68:	b2db      	uxtb	r3, r3
 801de6a:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801de6c:	b25b      	sxtb	r3, r3
 801de6e:	4313      	orrs	r3, r2
 801de70:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801de72:	793b      	ldrb	r3, [r7, #4]
 801de74:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801de78:	b2db      	uxtb	r3, r3
 801de7a:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801de7c:	b25b      	sxtb	r3, r3
 801de7e:	4313      	orrs	r3, r2
 801de80:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801de82:	793b      	ldrb	r3, [r7, #4]
 801de84:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801de88:	b2db      	uxtb	r3, r3
 801de8a:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801de8c:	b25b      	sxtb	r3, r3
 801de8e:	4313      	orrs	r3, r2
 801de90:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801de92:	793b      	ldrb	r3, [r7, #4]
 801de94:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801de98:	b2db      	uxtb	r3, r3
 801de9a:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801de9c:	b25b      	sxtb	r3, r3
 801de9e:	4313      	orrs	r3, r2
 801dea0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801dea2:	793b      	ldrb	r3, [r7, #4]
 801dea4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801dea8:	b2db      	uxtb	r3, r3
 801deaa:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801deac:	b25b      	sxtb	r3, r3
 801deae:	4313      	orrs	r3, r2
 801deb0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801deb2:	793b      	ldrb	r3, [r7, #4]
 801deb4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801deb8:	b2db      	uxtb	r3, r3
 801deba:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801debc:	4313      	orrs	r3, r2
 801debe:	b25b      	sxtb	r3, r3
 801dec0:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801dec2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801dec4:	f107 030f 	add.w	r3, r7, #15
 801dec8:	2201      	movs	r2, #1
 801deca:	4619      	mov	r1, r3
 801decc:	2089      	movs	r0, #137	; 0x89
 801dece:	f000 fcd1 	bl	801e874 <SUBGRF_WriteCommand>
}
 801ded2:	bf00      	nop
 801ded4:	3710      	adds	r7, #16
 801ded6:	46bd      	mov	sp, r7
 801ded8:	bd80      	pop	{r7, pc}
	...

0801dedc <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801dedc:	b580      	push	{r7, lr}
 801dede:	b084      	sub	sp, #16
 801dee0:	af00      	add	r7, sp, #0
 801dee2:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801dee4:	687b      	ldr	r3, [r7, #4]
 801dee6:	4a1d      	ldr	r2, [pc, #116]	; (801df5c <SUBGRF_CalibrateImage+0x80>)
 801dee8:	4293      	cmp	r3, r2
 801deea:	d904      	bls.n	801def6 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801deec:	23e1      	movs	r3, #225	; 0xe1
 801deee:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801def0:	23e9      	movs	r3, #233	; 0xe9
 801def2:	737b      	strb	r3, [r7, #13]
 801def4:	e027      	b.n	801df46 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801def6:	687b      	ldr	r3, [r7, #4]
 801def8:	4a19      	ldr	r2, [pc, #100]	; (801df60 <SUBGRF_CalibrateImage+0x84>)
 801defa:	4293      	cmp	r3, r2
 801defc:	d904      	bls.n	801df08 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801defe:	23d7      	movs	r3, #215	; 0xd7
 801df00:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801df02:	23db      	movs	r3, #219	; 0xdb
 801df04:	737b      	strb	r3, [r7, #13]
 801df06:	e01e      	b.n	801df46 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801df08:	687b      	ldr	r3, [r7, #4]
 801df0a:	4a16      	ldr	r2, [pc, #88]	; (801df64 <SUBGRF_CalibrateImage+0x88>)
 801df0c:	4293      	cmp	r3, r2
 801df0e:	d904      	bls.n	801df1a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801df10:	23c1      	movs	r3, #193	; 0xc1
 801df12:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801df14:	23c5      	movs	r3, #197	; 0xc5
 801df16:	737b      	strb	r3, [r7, #13]
 801df18:	e015      	b.n	801df46 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801df1a:	687b      	ldr	r3, [r7, #4]
 801df1c:	4a12      	ldr	r2, [pc, #72]	; (801df68 <SUBGRF_CalibrateImage+0x8c>)
 801df1e:	4293      	cmp	r3, r2
 801df20:	d904      	bls.n	801df2c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801df22:	2375      	movs	r3, #117	; 0x75
 801df24:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801df26:	2381      	movs	r3, #129	; 0x81
 801df28:	737b      	strb	r3, [r7, #13]
 801df2a:	e00c      	b.n	801df46 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801df2c:	687b      	ldr	r3, [r7, #4]
 801df2e:	4a0f      	ldr	r2, [pc, #60]	; (801df6c <SUBGRF_CalibrateImage+0x90>)
 801df30:	4293      	cmp	r3, r2
 801df32:	d904      	bls.n	801df3e <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801df34:	236b      	movs	r3, #107	; 0x6b
 801df36:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801df38:	236f      	movs	r3, #111	; 0x6f
 801df3a:	737b      	strb	r3, [r7, #13]
 801df3c:	e003      	b.n	801df46 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801df3e:	2329      	movs	r3, #41	; 0x29
 801df40:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801df42:	232b      	movs	r3, #43	; 0x2b
 801df44:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801df46:	f107 030c 	add.w	r3, r7, #12
 801df4a:	2202      	movs	r2, #2
 801df4c:	4619      	mov	r1, r3
 801df4e:	2098      	movs	r0, #152	; 0x98
 801df50:	f000 fc90 	bl	801e874 <SUBGRF_WriteCommand>
}
 801df54:	bf00      	nop
 801df56:	3710      	adds	r7, #16
 801df58:	46bd      	mov	sp, r7
 801df5a:	bd80      	pop	{r7, pc}
 801df5c:	35a4e900 	.word	0x35a4e900
 801df60:	32a9f880 	.word	0x32a9f880
 801df64:	2de54480 	.word	0x2de54480
 801df68:	1b6b0b00 	.word	0x1b6b0b00
 801df6c:	1954fc40 	.word	0x1954fc40

0801df70 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801df70:	b590      	push	{r4, r7, lr}
 801df72:	b085      	sub	sp, #20
 801df74:	af00      	add	r7, sp, #0
 801df76:	4604      	mov	r4, r0
 801df78:	4608      	mov	r0, r1
 801df7a:	4611      	mov	r1, r2
 801df7c:	461a      	mov	r2, r3
 801df7e:	4623      	mov	r3, r4
 801df80:	71fb      	strb	r3, [r7, #7]
 801df82:	4603      	mov	r3, r0
 801df84:	71bb      	strb	r3, [r7, #6]
 801df86:	460b      	mov	r3, r1
 801df88:	717b      	strb	r3, [r7, #5]
 801df8a:	4613      	mov	r3, r2
 801df8c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801df8e:	79fb      	ldrb	r3, [r7, #7]
 801df90:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801df92:	79bb      	ldrb	r3, [r7, #6]
 801df94:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801df96:	797b      	ldrb	r3, [r7, #5]
 801df98:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801df9a:	793b      	ldrb	r3, [r7, #4]
 801df9c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801df9e:	f107 030c 	add.w	r3, r7, #12
 801dfa2:	2204      	movs	r2, #4
 801dfa4:	4619      	mov	r1, r3
 801dfa6:	2095      	movs	r0, #149	; 0x95
 801dfa8:	f000 fc64 	bl	801e874 <SUBGRF_WriteCommand>
}
 801dfac:	bf00      	nop
 801dfae:	3714      	adds	r7, #20
 801dfb0:	46bd      	mov	sp, r7
 801dfb2:	bd90      	pop	{r4, r7, pc}

0801dfb4 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801dfb4:	b590      	push	{r4, r7, lr}
 801dfb6:	b085      	sub	sp, #20
 801dfb8:	af00      	add	r7, sp, #0
 801dfba:	4604      	mov	r4, r0
 801dfbc:	4608      	mov	r0, r1
 801dfbe:	4611      	mov	r1, r2
 801dfc0:	461a      	mov	r2, r3
 801dfc2:	4623      	mov	r3, r4
 801dfc4:	80fb      	strh	r3, [r7, #6]
 801dfc6:	4603      	mov	r3, r0
 801dfc8:	80bb      	strh	r3, [r7, #4]
 801dfca:	460b      	mov	r3, r1
 801dfcc:	807b      	strh	r3, [r7, #2]
 801dfce:	4613      	mov	r3, r2
 801dfd0:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801dfd2:	88fb      	ldrh	r3, [r7, #6]
 801dfd4:	0a1b      	lsrs	r3, r3, #8
 801dfd6:	b29b      	uxth	r3, r3
 801dfd8:	b2db      	uxtb	r3, r3
 801dfda:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801dfdc:	88fb      	ldrh	r3, [r7, #6]
 801dfde:	b2db      	uxtb	r3, r3
 801dfe0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801dfe2:	88bb      	ldrh	r3, [r7, #4]
 801dfe4:	0a1b      	lsrs	r3, r3, #8
 801dfe6:	b29b      	uxth	r3, r3
 801dfe8:	b2db      	uxtb	r3, r3
 801dfea:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801dfec:	88bb      	ldrh	r3, [r7, #4]
 801dfee:	b2db      	uxtb	r3, r3
 801dff0:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801dff2:	887b      	ldrh	r3, [r7, #2]
 801dff4:	0a1b      	lsrs	r3, r3, #8
 801dff6:	b29b      	uxth	r3, r3
 801dff8:	b2db      	uxtb	r3, r3
 801dffa:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801dffc:	887b      	ldrh	r3, [r7, #2]
 801dffe:	b2db      	uxtb	r3, r3
 801e000:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801e002:	883b      	ldrh	r3, [r7, #0]
 801e004:	0a1b      	lsrs	r3, r3, #8
 801e006:	b29b      	uxth	r3, r3
 801e008:	b2db      	uxtb	r3, r3
 801e00a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801e00c:	883b      	ldrh	r3, [r7, #0]
 801e00e:	b2db      	uxtb	r3, r3
 801e010:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801e012:	f107 0308 	add.w	r3, r7, #8
 801e016:	2208      	movs	r2, #8
 801e018:	4619      	mov	r1, r3
 801e01a:	2008      	movs	r0, #8
 801e01c:	f000 fc2a 	bl	801e874 <SUBGRF_WriteCommand>
}
 801e020:	bf00      	nop
 801e022:	3714      	adds	r7, #20
 801e024:	46bd      	mov	sp, r7
 801e026:	bd90      	pop	{r4, r7, pc}

0801e028 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801e028:	b580      	push	{r7, lr}
 801e02a:	b084      	sub	sp, #16
 801e02c:	af00      	add	r7, sp, #0
 801e02e:	4603      	mov	r3, r0
 801e030:	6039      	str	r1, [r7, #0]
 801e032:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801e034:	79fb      	ldrb	r3, [r7, #7]
 801e036:	f003 0307 	and.w	r3, r3, #7
 801e03a:	b2db      	uxtb	r3, r3
 801e03c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801e03e:	683b      	ldr	r3, [r7, #0]
 801e040:	0c1b      	lsrs	r3, r3, #16
 801e042:	b2db      	uxtb	r3, r3
 801e044:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801e046:	683b      	ldr	r3, [r7, #0]
 801e048:	0a1b      	lsrs	r3, r3, #8
 801e04a:	b2db      	uxtb	r3, r3
 801e04c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801e04e:	683b      	ldr	r3, [r7, #0]
 801e050:	b2db      	uxtb	r3, r3
 801e052:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801e054:	f107 030c 	add.w	r3, r7, #12
 801e058:	2204      	movs	r2, #4
 801e05a:	4619      	mov	r1, r3
 801e05c:	2097      	movs	r0, #151	; 0x97
 801e05e:	f000 fc09 	bl	801e874 <SUBGRF_WriteCommand>
}
 801e062:	bf00      	nop
 801e064:	3710      	adds	r7, #16
 801e066:	46bd      	mov	sp, r7
 801e068:	bd80      	pop	{r7, pc}
	...

0801e06c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801e06c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801e070:	b084      	sub	sp, #16
 801e072:	af00      	add	r7, sp, #0
 801e074:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801e076:	2300      	movs	r3, #0
 801e078:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801e07a:	4b1d      	ldr	r3, [pc, #116]	; (801e0f0 <SUBGRF_SetRfFrequency+0x84>)
 801e07c:	781b      	ldrb	r3, [r3, #0]
 801e07e:	f083 0301 	eor.w	r3, r3, #1
 801e082:	b2db      	uxtb	r3, r3
 801e084:	2b00      	cmp	r3, #0
 801e086:	d005      	beq.n	801e094 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801e088:	6878      	ldr	r0, [r7, #4]
 801e08a:	f7ff ff27 	bl	801dedc <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801e08e:	4b18      	ldr	r3, [pc, #96]	; (801e0f0 <SUBGRF_SetRfFrequency+0x84>)
 801e090:	2201      	movs	r2, #1
 801e092:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801e094:	687b      	ldr	r3, [r7, #4]
 801e096:	2200      	movs	r2, #0
 801e098:	461c      	mov	r4, r3
 801e09a:	4615      	mov	r5, r2
 801e09c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801e0a0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801e0a4:	4a13      	ldr	r2, [pc, #76]	; (801e0f4 <SUBGRF_SetRfFrequency+0x88>)
 801e0a6:	f04f 0300 	mov.w	r3, #0
 801e0aa:	4640      	mov	r0, r8
 801e0ac:	4649      	mov	r1, r9
 801e0ae:	f7e3 f831 	bl	8001114 <__aeabi_uldivmod>
 801e0b2:	4602      	mov	r2, r0
 801e0b4:	460b      	mov	r3, r1
 801e0b6:	4613      	mov	r3, r2
 801e0b8:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801e0ba:	68fb      	ldr	r3, [r7, #12]
 801e0bc:	0e1b      	lsrs	r3, r3, #24
 801e0be:	b2db      	uxtb	r3, r3
 801e0c0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801e0c2:	68fb      	ldr	r3, [r7, #12]
 801e0c4:	0c1b      	lsrs	r3, r3, #16
 801e0c6:	b2db      	uxtb	r3, r3
 801e0c8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801e0ca:	68fb      	ldr	r3, [r7, #12]
 801e0cc:	0a1b      	lsrs	r3, r3, #8
 801e0ce:	b2db      	uxtb	r3, r3
 801e0d0:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801e0d2:	68fb      	ldr	r3, [r7, #12]
 801e0d4:	b2db      	uxtb	r3, r3
 801e0d6:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801e0d8:	f107 0308 	add.w	r3, r7, #8
 801e0dc:	2204      	movs	r2, #4
 801e0de:	4619      	mov	r1, r3
 801e0e0:	2086      	movs	r0, #134	; 0x86
 801e0e2:	f000 fbc7 	bl	801e874 <SUBGRF_WriteCommand>
}
 801e0e6:	bf00      	nop
 801e0e8:	3710      	adds	r7, #16
 801e0ea:	46bd      	mov	sp, r7
 801e0ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801e0f0:	20001e30 	.word	0x20001e30
 801e0f4:	01e84800 	.word	0x01e84800

0801e0f8 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801e0f8:	b580      	push	{r7, lr}
 801e0fa:	b082      	sub	sp, #8
 801e0fc:	af00      	add	r7, sp, #0
 801e0fe:	4603      	mov	r3, r0
 801e100:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801e102:	79fa      	ldrb	r2, [r7, #7]
 801e104:	4b09      	ldr	r3, [pc, #36]	; (801e12c <SUBGRF_SetPacketType+0x34>)
 801e106:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801e108:	79fb      	ldrb	r3, [r7, #7]
 801e10a:	2b00      	cmp	r3, #0
 801e10c:	d104      	bne.n	801e118 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801e10e:	2100      	movs	r1, #0
 801e110:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801e114:	f000 fafe 	bl	801e714 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801e118:	1dfb      	adds	r3, r7, #7
 801e11a:	2201      	movs	r2, #1
 801e11c:	4619      	mov	r1, r3
 801e11e:	208a      	movs	r0, #138	; 0x8a
 801e120:	f000 fba8 	bl	801e874 <SUBGRF_WriteCommand>
}
 801e124:	bf00      	nop
 801e126:	3708      	adds	r7, #8
 801e128:	46bd      	mov	sp, r7
 801e12a:	bd80      	pop	{r7, pc}
 801e12c:	20001e29 	.word	0x20001e29

0801e130 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801e130:	b480      	push	{r7}
 801e132:	af00      	add	r7, sp, #0
    return PacketType;
 801e134:	4b02      	ldr	r3, [pc, #8]	; (801e140 <SUBGRF_GetPacketType+0x10>)
 801e136:	781b      	ldrb	r3, [r3, #0]
}
 801e138:	4618      	mov	r0, r3
 801e13a:	46bd      	mov	sp, r7
 801e13c:	bc80      	pop	{r7}
 801e13e:	4770      	bx	lr
 801e140:	20001e29 	.word	0x20001e29

0801e144 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801e144:	b580      	push	{r7, lr}
 801e146:	b084      	sub	sp, #16
 801e148:	af00      	add	r7, sp, #0
 801e14a:	4603      	mov	r3, r0
 801e14c:	71fb      	strb	r3, [r7, #7]
 801e14e:	460b      	mov	r3, r1
 801e150:	71bb      	strb	r3, [r7, #6]
 801e152:	4613      	mov	r3, r2
 801e154:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801e156:	79fb      	ldrb	r3, [r7, #7]
 801e158:	2b01      	cmp	r3, #1
 801e15a:	d149      	bne.n	801e1f0 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801e15c:	2000      	movs	r0, #0
 801e15e:	f7f0 fda9 	bl	800ecb4 <RBI_GetRFOMaxPowerConfig>
 801e162:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801e164:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801e168:	68fa      	ldr	r2, [r7, #12]
 801e16a:	429a      	cmp	r2, r3
 801e16c:	da01      	bge.n	801e172 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801e16e:	68fb      	ldr	r3, [r7, #12]
 801e170:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801e172:	68fb      	ldr	r3, [r7, #12]
 801e174:	2b0e      	cmp	r3, #14
 801e176:	d10e      	bne.n	801e196 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801e178:	2301      	movs	r3, #1
 801e17a:	2201      	movs	r2, #1
 801e17c:	2100      	movs	r1, #0
 801e17e:	2004      	movs	r0, #4
 801e180:	f7ff fef6 	bl	801df70 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801e184:	79ba      	ldrb	r2, [r7, #6]
 801e186:	68fb      	ldr	r3, [r7, #12]
 801e188:	b2db      	uxtb	r3, r3
 801e18a:	1ad3      	subs	r3, r2, r3
 801e18c:	b2db      	uxtb	r3, r3
 801e18e:	330e      	adds	r3, #14
 801e190:	b2db      	uxtb	r3, r3
 801e192:	71bb      	strb	r3, [r7, #6]
 801e194:	e01f      	b.n	801e1d6 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801e196:	68fb      	ldr	r3, [r7, #12]
 801e198:	2b0a      	cmp	r3, #10
 801e19a:	d10e      	bne.n	801e1ba <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801e19c:	2301      	movs	r3, #1
 801e19e:	2201      	movs	r2, #1
 801e1a0:	2100      	movs	r1, #0
 801e1a2:	2001      	movs	r0, #1
 801e1a4:	f7ff fee4 	bl	801df70 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801e1a8:	79ba      	ldrb	r2, [r7, #6]
 801e1aa:	68fb      	ldr	r3, [r7, #12]
 801e1ac:	b2db      	uxtb	r3, r3
 801e1ae:	1ad3      	subs	r3, r2, r3
 801e1b0:	b2db      	uxtb	r3, r3
 801e1b2:	330d      	adds	r3, #13
 801e1b4:	b2db      	uxtb	r3, r3
 801e1b6:	71bb      	strb	r3, [r7, #6]
 801e1b8:	e00d      	b.n	801e1d6 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801e1ba:	2301      	movs	r3, #1
 801e1bc:	2201      	movs	r2, #1
 801e1be:	2100      	movs	r1, #0
 801e1c0:	2007      	movs	r0, #7
 801e1c2:	f7ff fed5 	bl	801df70 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801e1c6:	79ba      	ldrb	r2, [r7, #6]
 801e1c8:	68fb      	ldr	r3, [r7, #12]
 801e1ca:	b2db      	uxtb	r3, r3
 801e1cc:	1ad3      	subs	r3, r2, r3
 801e1ce:	b2db      	uxtb	r3, r3
 801e1d0:	330e      	adds	r3, #14
 801e1d2:	b2db      	uxtb	r3, r3
 801e1d4:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801e1d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801e1da:	f113 0f11 	cmn.w	r3, #17
 801e1de:	da01      	bge.n	801e1e4 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801e1e0:	23ef      	movs	r3, #239	; 0xef
 801e1e2:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801e1e4:	2118      	movs	r1, #24
 801e1e6:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801e1ea:	f000 fa93 	bl	801e714 <SUBGRF_WriteRegister>
 801e1ee:	e067      	b.n	801e2c0 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801e1f0:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801e1f4:	f000 faa2 	bl	801e73c <SUBGRF_ReadRegister>
 801e1f8:	4603      	mov	r3, r0
 801e1fa:	f043 031e 	orr.w	r3, r3, #30
 801e1fe:	b2db      	uxtb	r3, r3
 801e200:	4619      	mov	r1, r3
 801e202:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801e206:	f000 fa85 	bl	801e714 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801e20a:	2001      	movs	r0, #1
 801e20c:	f7f0 fd52 	bl	800ecb4 <RBI_GetRFOMaxPowerConfig>
 801e210:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801e212:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801e216:	68fa      	ldr	r2, [r7, #12]
 801e218:	429a      	cmp	r2, r3
 801e21a:	da01      	bge.n	801e220 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801e21c:	68fb      	ldr	r3, [r7, #12]
 801e21e:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801e220:	68fb      	ldr	r3, [r7, #12]
 801e222:	2b14      	cmp	r3, #20
 801e224:	d10e      	bne.n	801e244 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801e226:	2301      	movs	r3, #1
 801e228:	2200      	movs	r2, #0
 801e22a:	2105      	movs	r1, #5
 801e22c:	2003      	movs	r0, #3
 801e22e:	f7ff fe9f 	bl	801df70 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801e232:	79ba      	ldrb	r2, [r7, #6]
 801e234:	68fb      	ldr	r3, [r7, #12]
 801e236:	b2db      	uxtb	r3, r3
 801e238:	1ad3      	subs	r3, r2, r3
 801e23a:	b2db      	uxtb	r3, r3
 801e23c:	3316      	adds	r3, #22
 801e23e:	b2db      	uxtb	r3, r3
 801e240:	71bb      	strb	r3, [r7, #6]
 801e242:	e031      	b.n	801e2a8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801e244:	68fb      	ldr	r3, [r7, #12]
 801e246:	2b11      	cmp	r3, #17
 801e248:	d10e      	bne.n	801e268 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801e24a:	2301      	movs	r3, #1
 801e24c:	2200      	movs	r2, #0
 801e24e:	2103      	movs	r1, #3
 801e250:	2002      	movs	r0, #2
 801e252:	f7ff fe8d 	bl	801df70 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801e256:	79ba      	ldrb	r2, [r7, #6]
 801e258:	68fb      	ldr	r3, [r7, #12]
 801e25a:	b2db      	uxtb	r3, r3
 801e25c:	1ad3      	subs	r3, r2, r3
 801e25e:	b2db      	uxtb	r3, r3
 801e260:	3316      	adds	r3, #22
 801e262:	b2db      	uxtb	r3, r3
 801e264:	71bb      	strb	r3, [r7, #6]
 801e266:	e01f      	b.n	801e2a8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801e268:	68fb      	ldr	r3, [r7, #12]
 801e26a:	2b0e      	cmp	r3, #14
 801e26c:	d10e      	bne.n	801e28c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801e26e:	2301      	movs	r3, #1
 801e270:	2200      	movs	r2, #0
 801e272:	2102      	movs	r1, #2
 801e274:	2002      	movs	r0, #2
 801e276:	f7ff fe7b 	bl	801df70 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801e27a:	79ba      	ldrb	r2, [r7, #6]
 801e27c:	68fb      	ldr	r3, [r7, #12]
 801e27e:	b2db      	uxtb	r3, r3
 801e280:	1ad3      	subs	r3, r2, r3
 801e282:	b2db      	uxtb	r3, r3
 801e284:	330e      	adds	r3, #14
 801e286:	b2db      	uxtb	r3, r3
 801e288:	71bb      	strb	r3, [r7, #6]
 801e28a:	e00d      	b.n	801e2a8 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801e28c:	2301      	movs	r3, #1
 801e28e:	2200      	movs	r2, #0
 801e290:	2107      	movs	r1, #7
 801e292:	2004      	movs	r0, #4
 801e294:	f7ff fe6c 	bl	801df70 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801e298:	79ba      	ldrb	r2, [r7, #6]
 801e29a:	68fb      	ldr	r3, [r7, #12]
 801e29c:	b2db      	uxtb	r3, r3
 801e29e:	1ad3      	subs	r3, r2, r3
 801e2a0:	b2db      	uxtb	r3, r3
 801e2a2:	3316      	adds	r3, #22
 801e2a4:	b2db      	uxtb	r3, r3
 801e2a6:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801e2a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801e2ac:	f113 0f09 	cmn.w	r3, #9
 801e2b0:	da01      	bge.n	801e2b6 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801e2b2:	23f7      	movs	r3, #247	; 0xf7
 801e2b4:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801e2b6:	2138      	movs	r1, #56	; 0x38
 801e2b8:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801e2bc:	f000 fa2a 	bl	801e714 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801e2c0:	79bb      	ldrb	r3, [r7, #6]
 801e2c2:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801e2c4:	797b      	ldrb	r3, [r7, #5]
 801e2c6:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801e2c8:	f107 0308 	add.w	r3, r7, #8
 801e2cc:	2202      	movs	r2, #2
 801e2ce:	4619      	mov	r1, r3
 801e2d0:	208e      	movs	r0, #142	; 0x8e
 801e2d2:	f000 facf 	bl	801e874 <SUBGRF_WriteCommand>
}
 801e2d6:	bf00      	nop
 801e2d8:	3710      	adds	r7, #16
 801e2da:	46bd      	mov	sp, r7
 801e2dc:	bd80      	pop	{r7, pc}
	...

0801e2e0 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801e2e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801e2e4:	b086      	sub	sp, #24
 801e2e6:	af00      	add	r7, sp, #0
 801e2e8:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801e2ea:	2300      	movs	r3, #0
 801e2ec:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801e2ee:	4a61      	ldr	r2, [pc, #388]	; (801e474 <SUBGRF_SetModulationParams+0x194>)
 801e2f0:	f107 0308 	add.w	r3, r7, #8
 801e2f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e2f8:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801e2fc:	687b      	ldr	r3, [r7, #4]
 801e2fe:	781a      	ldrb	r2, [r3, #0]
 801e300:	4b5d      	ldr	r3, [pc, #372]	; (801e478 <SUBGRF_SetModulationParams+0x198>)
 801e302:	781b      	ldrb	r3, [r3, #0]
 801e304:	429a      	cmp	r2, r3
 801e306:	d004      	beq.n	801e312 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801e308:	687b      	ldr	r3, [r7, #4]
 801e30a:	781b      	ldrb	r3, [r3, #0]
 801e30c:	4618      	mov	r0, r3
 801e30e:	f7ff fef3 	bl	801e0f8 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801e312:	687b      	ldr	r3, [r7, #4]
 801e314:	781b      	ldrb	r3, [r3, #0]
 801e316:	2b03      	cmp	r3, #3
 801e318:	f200 80a5 	bhi.w	801e466 <SUBGRF_SetModulationParams+0x186>
 801e31c:	a201      	add	r2, pc, #4	; (adr r2, 801e324 <SUBGRF_SetModulationParams+0x44>)
 801e31e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e322:	bf00      	nop
 801e324:	0801e335 	.word	0x0801e335
 801e328:	0801e3f5 	.word	0x0801e3f5
 801e32c:	0801e3b7 	.word	0x0801e3b7
 801e330:	0801e423 	.word	0x0801e423
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801e334:	2308      	movs	r3, #8
 801e336:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801e338:	687b      	ldr	r3, [r7, #4]
 801e33a:	685b      	ldr	r3, [r3, #4]
 801e33c:	4a4f      	ldr	r2, [pc, #316]	; (801e47c <SUBGRF_SetModulationParams+0x19c>)
 801e33e:	fbb2 f3f3 	udiv	r3, r2, r3
 801e342:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801e344:	697b      	ldr	r3, [r7, #20]
 801e346:	0c1b      	lsrs	r3, r3, #16
 801e348:	b2db      	uxtb	r3, r3
 801e34a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801e34c:	697b      	ldr	r3, [r7, #20]
 801e34e:	0a1b      	lsrs	r3, r3, #8
 801e350:	b2db      	uxtb	r3, r3
 801e352:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801e354:	697b      	ldr	r3, [r7, #20]
 801e356:	b2db      	uxtb	r3, r3
 801e358:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801e35a:	687b      	ldr	r3, [r7, #4]
 801e35c:	7b1b      	ldrb	r3, [r3, #12]
 801e35e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801e360:	687b      	ldr	r3, [r7, #4]
 801e362:	7b5b      	ldrb	r3, [r3, #13]
 801e364:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801e366:	687b      	ldr	r3, [r7, #4]
 801e368:	689b      	ldr	r3, [r3, #8]
 801e36a:	2200      	movs	r2, #0
 801e36c:	461c      	mov	r4, r3
 801e36e:	4615      	mov	r5, r2
 801e370:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801e374:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801e378:	4a41      	ldr	r2, [pc, #260]	; (801e480 <SUBGRF_SetModulationParams+0x1a0>)
 801e37a:	f04f 0300 	mov.w	r3, #0
 801e37e:	4640      	mov	r0, r8
 801e380:	4649      	mov	r1, r9
 801e382:	f7e2 fec7 	bl	8001114 <__aeabi_uldivmod>
 801e386:	4602      	mov	r2, r0
 801e388:	460b      	mov	r3, r1
 801e38a:	4613      	mov	r3, r2
 801e38c:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801e38e:	697b      	ldr	r3, [r7, #20]
 801e390:	0c1b      	lsrs	r3, r3, #16
 801e392:	b2db      	uxtb	r3, r3
 801e394:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801e396:	697b      	ldr	r3, [r7, #20]
 801e398:	0a1b      	lsrs	r3, r3, #8
 801e39a:	b2db      	uxtb	r3, r3
 801e39c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801e39e:	697b      	ldr	r3, [r7, #20]
 801e3a0:	b2db      	uxtb	r3, r3
 801e3a2:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801e3a4:	7cfb      	ldrb	r3, [r7, #19]
 801e3a6:	b29a      	uxth	r2, r3
 801e3a8:	f107 0308 	add.w	r3, r7, #8
 801e3ac:	4619      	mov	r1, r3
 801e3ae:	208b      	movs	r0, #139	; 0x8b
 801e3b0:	f000 fa60 	bl	801e874 <SUBGRF_WriteCommand>
        break;
 801e3b4:	e058      	b.n	801e468 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801e3b6:	2304      	movs	r3, #4
 801e3b8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801e3ba:	687b      	ldr	r3, [r7, #4]
 801e3bc:	691b      	ldr	r3, [r3, #16]
 801e3be:	4a2f      	ldr	r2, [pc, #188]	; (801e47c <SUBGRF_SetModulationParams+0x19c>)
 801e3c0:	fbb2 f3f3 	udiv	r3, r2, r3
 801e3c4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801e3c6:	697b      	ldr	r3, [r7, #20]
 801e3c8:	0c1b      	lsrs	r3, r3, #16
 801e3ca:	b2db      	uxtb	r3, r3
 801e3cc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801e3ce:	697b      	ldr	r3, [r7, #20]
 801e3d0:	0a1b      	lsrs	r3, r3, #8
 801e3d2:	b2db      	uxtb	r3, r3
 801e3d4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801e3d6:	697b      	ldr	r3, [r7, #20]
 801e3d8:	b2db      	uxtb	r3, r3
 801e3da:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801e3dc:	687b      	ldr	r3, [r7, #4]
 801e3de:	7d1b      	ldrb	r3, [r3, #20]
 801e3e0:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801e3e2:	7cfb      	ldrb	r3, [r7, #19]
 801e3e4:	b29a      	uxth	r2, r3
 801e3e6:	f107 0308 	add.w	r3, r7, #8
 801e3ea:	4619      	mov	r1, r3
 801e3ec:	208b      	movs	r0, #139	; 0x8b
 801e3ee:	f000 fa41 	bl	801e874 <SUBGRF_WriteCommand>
        break;
 801e3f2:	e039      	b.n	801e468 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801e3f4:	2304      	movs	r3, #4
 801e3f6:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801e3f8:	687b      	ldr	r3, [r7, #4]
 801e3fa:	7e1b      	ldrb	r3, [r3, #24]
 801e3fc:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801e3fe:	687b      	ldr	r3, [r7, #4]
 801e400:	7e5b      	ldrb	r3, [r3, #25]
 801e402:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801e404:	687b      	ldr	r3, [r7, #4]
 801e406:	7e9b      	ldrb	r3, [r3, #26]
 801e408:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801e40a:	687b      	ldr	r3, [r7, #4]
 801e40c:	7edb      	ldrb	r3, [r3, #27]
 801e40e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801e410:	7cfb      	ldrb	r3, [r7, #19]
 801e412:	b29a      	uxth	r2, r3
 801e414:	f107 0308 	add.w	r3, r7, #8
 801e418:	4619      	mov	r1, r3
 801e41a:	208b      	movs	r0, #139	; 0x8b
 801e41c:	f000 fa2a 	bl	801e874 <SUBGRF_WriteCommand>

        break;
 801e420:	e022      	b.n	801e468 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801e422:	2305      	movs	r3, #5
 801e424:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801e426:	687b      	ldr	r3, [r7, #4]
 801e428:	685b      	ldr	r3, [r3, #4]
 801e42a:	4a14      	ldr	r2, [pc, #80]	; (801e47c <SUBGRF_SetModulationParams+0x19c>)
 801e42c:	fbb2 f3f3 	udiv	r3, r2, r3
 801e430:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801e432:	697b      	ldr	r3, [r7, #20]
 801e434:	0c1b      	lsrs	r3, r3, #16
 801e436:	b2db      	uxtb	r3, r3
 801e438:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801e43a:	697b      	ldr	r3, [r7, #20]
 801e43c:	0a1b      	lsrs	r3, r3, #8
 801e43e:	b2db      	uxtb	r3, r3
 801e440:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801e442:	697b      	ldr	r3, [r7, #20]
 801e444:	b2db      	uxtb	r3, r3
 801e446:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801e448:	687b      	ldr	r3, [r7, #4]
 801e44a:	7b1b      	ldrb	r3, [r3, #12]
 801e44c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801e44e:	687b      	ldr	r3, [r7, #4]
 801e450:	7b5b      	ldrb	r3, [r3, #13]
 801e452:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801e454:	7cfb      	ldrb	r3, [r7, #19]
 801e456:	b29a      	uxth	r2, r3
 801e458:	f107 0308 	add.w	r3, r7, #8
 801e45c:	4619      	mov	r1, r3
 801e45e:	208b      	movs	r0, #139	; 0x8b
 801e460:	f000 fa08 	bl	801e874 <SUBGRF_WriteCommand>
        break;
 801e464:	e000      	b.n	801e468 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801e466:	bf00      	nop
    }
}
 801e468:	bf00      	nop
 801e46a:	3718      	adds	r7, #24
 801e46c:	46bd      	mov	sp, r7
 801e46e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801e472:	bf00      	nop
 801e474:	08021848 	.word	0x08021848
 801e478:	20001e29 	.word	0x20001e29
 801e47c:	3d090000 	.word	0x3d090000
 801e480:	01e84800 	.word	0x01e84800

0801e484 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801e484:	b580      	push	{r7, lr}
 801e486:	b086      	sub	sp, #24
 801e488:	af00      	add	r7, sp, #0
 801e48a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801e48c:	2300      	movs	r3, #0
 801e48e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801e490:	4a48      	ldr	r2, [pc, #288]	; (801e5b4 <SUBGRF_SetPacketParams+0x130>)
 801e492:	f107 030c 	add.w	r3, r7, #12
 801e496:	ca07      	ldmia	r2, {r0, r1, r2}
 801e498:	c303      	stmia	r3!, {r0, r1}
 801e49a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801e49c:	687b      	ldr	r3, [r7, #4]
 801e49e:	781a      	ldrb	r2, [r3, #0]
 801e4a0:	4b45      	ldr	r3, [pc, #276]	; (801e5b8 <SUBGRF_SetPacketParams+0x134>)
 801e4a2:	781b      	ldrb	r3, [r3, #0]
 801e4a4:	429a      	cmp	r2, r3
 801e4a6:	d004      	beq.n	801e4b2 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801e4a8:	687b      	ldr	r3, [r7, #4]
 801e4aa:	781b      	ldrb	r3, [r3, #0]
 801e4ac:	4618      	mov	r0, r3
 801e4ae:	f7ff fe23 	bl	801e0f8 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801e4b2:	687b      	ldr	r3, [r7, #4]
 801e4b4:	781b      	ldrb	r3, [r3, #0]
 801e4b6:	2b03      	cmp	r3, #3
 801e4b8:	d878      	bhi.n	801e5ac <SUBGRF_SetPacketParams+0x128>
 801e4ba:	a201      	add	r2, pc, #4	; (adr r2, 801e4c0 <SUBGRF_SetPacketParams+0x3c>)
 801e4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e4c0:	0801e4d1 	.word	0x0801e4d1
 801e4c4:	0801e561 	.word	0x0801e561
 801e4c8:	0801e555 	.word	0x0801e555
 801e4cc:	0801e4d1 	.word	0x0801e4d1
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801e4d0:	687b      	ldr	r3, [r7, #4]
 801e4d2:	7a5b      	ldrb	r3, [r3, #9]
 801e4d4:	2bf1      	cmp	r3, #241	; 0xf1
 801e4d6:	d10a      	bne.n	801e4ee <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801e4d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801e4dc:	f7ff faaa 	bl	801da34 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801e4e0:	f248 0005 	movw	r0, #32773	; 0x8005
 801e4e4:	f7ff fac6 	bl	801da74 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801e4e8:	2302      	movs	r3, #2
 801e4ea:	75bb      	strb	r3, [r7, #22]
 801e4ec:	e011      	b.n	801e512 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801e4ee:	687b      	ldr	r3, [r7, #4]
 801e4f0:	7a5b      	ldrb	r3, [r3, #9]
 801e4f2:	2bf2      	cmp	r3, #242	; 0xf2
 801e4f4:	d10a      	bne.n	801e50c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801e4f6:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801e4fa:	f7ff fa9b 	bl	801da34 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801e4fe:	f241 0021 	movw	r0, #4129	; 0x1021
 801e502:	f7ff fab7 	bl	801da74 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801e506:	2306      	movs	r3, #6
 801e508:	75bb      	strb	r3, [r7, #22]
 801e50a:	e002      	b.n	801e512 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801e50c:	687b      	ldr	r3, [r7, #4]
 801e50e:	7a5b      	ldrb	r3, [r3, #9]
 801e510:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801e512:	2309      	movs	r3, #9
 801e514:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801e516:	687b      	ldr	r3, [r7, #4]
 801e518:	885b      	ldrh	r3, [r3, #2]
 801e51a:	0a1b      	lsrs	r3, r3, #8
 801e51c:	b29b      	uxth	r3, r3
 801e51e:	b2db      	uxtb	r3, r3
 801e520:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801e522:	687b      	ldr	r3, [r7, #4]
 801e524:	885b      	ldrh	r3, [r3, #2]
 801e526:	b2db      	uxtb	r3, r3
 801e528:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801e52a:	687b      	ldr	r3, [r7, #4]
 801e52c:	791b      	ldrb	r3, [r3, #4]
 801e52e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801e530:	687b      	ldr	r3, [r7, #4]
 801e532:	795b      	ldrb	r3, [r3, #5]
 801e534:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801e536:	687b      	ldr	r3, [r7, #4]
 801e538:	799b      	ldrb	r3, [r3, #6]
 801e53a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801e53c:	687b      	ldr	r3, [r7, #4]
 801e53e:	79db      	ldrb	r3, [r3, #7]
 801e540:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801e542:	687b      	ldr	r3, [r7, #4]
 801e544:	7a1b      	ldrb	r3, [r3, #8]
 801e546:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801e548:	7dbb      	ldrb	r3, [r7, #22]
 801e54a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801e54c:	687b      	ldr	r3, [r7, #4]
 801e54e:	7a9b      	ldrb	r3, [r3, #10]
 801e550:	753b      	strb	r3, [r7, #20]
        break;
 801e552:	e022      	b.n	801e59a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801e554:	2301      	movs	r3, #1
 801e556:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801e558:	687b      	ldr	r3, [r7, #4]
 801e55a:	7b1b      	ldrb	r3, [r3, #12]
 801e55c:	733b      	strb	r3, [r7, #12]
        break;
 801e55e:	e01c      	b.n	801e59a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801e560:	2306      	movs	r3, #6
 801e562:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801e564:	687b      	ldr	r3, [r7, #4]
 801e566:	89db      	ldrh	r3, [r3, #14]
 801e568:	0a1b      	lsrs	r3, r3, #8
 801e56a:	b29b      	uxth	r3, r3
 801e56c:	b2db      	uxtb	r3, r3
 801e56e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801e570:	687b      	ldr	r3, [r7, #4]
 801e572:	89db      	ldrh	r3, [r3, #14]
 801e574:	b2db      	uxtb	r3, r3
 801e576:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801e578:	687b      	ldr	r3, [r7, #4]
 801e57a:	7c1a      	ldrb	r2, [r3, #16]
 801e57c:	4b0f      	ldr	r3, [pc, #60]	; (801e5bc <SUBGRF_SetPacketParams+0x138>)
 801e57e:	4611      	mov	r1, r2
 801e580:	7019      	strb	r1, [r3, #0]
 801e582:	4613      	mov	r3, r2
 801e584:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801e586:	687b      	ldr	r3, [r7, #4]
 801e588:	7c5b      	ldrb	r3, [r3, #17]
 801e58a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801e58c:	687b      	ldr	r3, [r7, #4]
 801e58e:	7c9b      	ldrb	r3, [r3, #18]
 801e590:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801e592:	687b      	ldr	r3, [r7, #4]
 801e594:	7cdb      	ldrb	r3, [r3, #19]
 801e596:	747b      	strb	r3, [r7, #17]
        break;
 801e598:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801e59a:	7dfb      	ldrb	r3, [r7, #23]
 801e59c:	b29a      	uxth	r2, r3
 801e59e:	f107 030c 	add.w	r3, r7, #12
 801e5a2:	4619      	mov	r1, r3
 801e5a4:	208c      	movs	r0, #140	; 0x8c
 801e5a6:	f000 f965 	bl	801e874 <SUBGRF_WriteCommand>
 801e5aa:	e000      	b.n	801e5ae <SUBGRF_SetPacketParams+0x12a>
        return;
 801e5ac:	bf00      	nop
}
 801e5ae:	3718      	adds	r7, #24
 801e5b0:	46bd      	mov	sp, r7
 801e5b2:	bd80      	pop	{r7, pc}
 801e5b4:	08021850 	.word	0x08021850
 801e5b8:	20001e29 	.word	0x20001e29
 801e5bc:	20001e2a 	.word	0x20001e2a

0801e5c0 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801e5c0:	b580      	push	{r7, lr}
 801e5c2:	b084      	sub	sp, #16
 801e5c4:	af00      	add	r7, sp, #0
 801e5c6:	4603      	mov	r3, r0
 801e5c8:	460a      	mov	r2, r1
 801e5ca:	71fb      	strb	r3, [r7, #7]
 801e5cc:	4613      	mov	r3, r2
 801e5ce:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801e5d0:	79fb      	ldrb	r3, [r7, #7]
 801e5d2:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801e5d4:	79bb      	ldrb	r3, [r7, #6]
 801e5d6:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801e5d8:	f107 030c 	add.w	r3, r7, #12
 801e5dc:	2202      	movs	r2, #2
 801e5de:	4619      	mov	r1, r3
 801e5e0:	208f      	movs	r0, #143	; 0x8f
 801e5e2:	f000 f947 	bl	801e874 <SUBGRF_WriteCommand>
}
 801e5e6:	bf00      	nop
 801e5e8:	3710      	adds	r7, #16
 801e5ea:	46bd      	mov	sp, r7
 801e5ec:	bd80      	pop	{r7, pc}

0801e5ee <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801e5ee:	b580      	push	{r7, lr}
 801e5f0:	b082      	sub	sp, #8
 801e5f2:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801e5f4:	2300      	movs	r3, #0
 801e5f6:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801e5f8:	1d3b      	adds	r3, r7, #4
 801e5fa:	2201      	movs	r2, #1
 801e5fc:	4619      	mov	r1, r3
 801e5fe:	2015      	movs	r0, #21
 801e600:	f000 f95a 	bl	801e8b8 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801e604:	793b      	ldrb	r3, [r7, #4]
 801e606:	425b      	negs	r3, r3
 801e608:	105b      	asrs	r3, r3, #1
 801e60a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801e60c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801e610:	4618      	mov	r0, r3
 801e612:	3708      	adds	r7, #8
 801e614:	46bd      	mov	sp, r7
 801e616:	bd80      	pop	{r7, pc}

0801e618 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801e618:	b580      	push	{r7, lr}
 801e61a:	b084      	sub	sp, #16
 801e61c:	af00      	add	r7, sp, #0
 801e61e:	6078      	str	r0, [r7, #4]
 801e620:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801e622:	f107 030c 	add.w	r3, r7, #12
 801e626:	2202      	movs	r2, #2
 801e628:	4619      	mov	r1, r3
 801e62a:	2013      	movs	r0, #19
 801e62c:	f000 f944 	bl	801e8b8 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801e630:	f7ff fd7e 	bl	801e130 <SUBGRF_GetPacketType>
 801e634:	4603      	mov	r3, r0
 801e636:	2b01      	cmp	r3, #1
 801e638:	d10d      	bne.n	801e656 <SUBGRF_GetRxBufferStatus+0x3e>
 801e63a:	4b0c      	ldr	r3, [pc, #48]	; (801e66c <SUBGRF_GetRxBufferStatus+0x54>)
 801e63c:	781b      	ldrb	r3, [r3, #0]
 801e63e:	b2db      	uxtb	r3, r3
 801e640:	2b01      	cmp	r3, #1
 801e642:	d108      	bne.n	801e656 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801e644:	f240 7002 	movw	r0, #1794	; 0x702
 801e648:	f000 f878 	bl	801e73c <SUBGRF_ReadRegister>
 801e64c:	4603      	mov	r3, r0
 801e64e:	461a      	mov	r2, r3
 801e650:	687b      	ldr	r3, [r7, #4]
 801e652:	701a      	strb	r2, [r3, #0]
 801e654:	e002      	b.n	801e65c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801e656:	7b3a      	ldrb	r2, [r7, #12]
 801e658:	687b      	ldr	r3, [r7, #4]
 801e65a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801e65c:	7b7a      	ldrb	r2, [r7, #13]
 801e65e:	683b      	ldr	r3, [r7, #0]
 801e660:	701a      	strb	r2, [r3, #0]
}
 801e662:	bf00      	nop
 801e664:	3710      	adds	r7, #16
 801e666:	46bd      	mov	sp, r7
 801e668:	bd80      	pop	{r7, pc}
 801e66a:	bf00      	nop
 801e66c:	20001e2a 	.word	0x20001e2a

0801e670 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801e670:	b580      	push	{r7, lr}
 801e672:	b084      	sub	sp, #16
 801e674:	af00      	add	r7, sp, #0
 801e676:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801e678:	f107 030c 	add.w	r3, r7, #12
 801e67c:	2203      	movs	r2, #3
 801e67e:	4619      	mov	r1, r3
 801e680:	2014      	movs	r0, #20
 801e682:	f000 f919 	bl	801e8b8 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801e686:	f7ff fd53 	bl	801e130 <SUBGRF_GetPacketType>
 801e68a:	4603      	mov	r3, r0
 801e68c:	461a      	mov	r2, r3
 801e68e:	687b      	ldr	r3, [r7, #4]
 801e690:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801e692:	687b      	ldr	r3, [r7, #4]
 801e694:	781b      	ldrb	r3, [r3, #0]
 801e696:	2b00      	cmp	r3, #0
 801e698:	d002      	beq.n	801e6a0 <SUBGRF_GetPacketStatus+0x30>
 801e69a:	2b01      	cmp	r3, #1
 801e69c:	d013      	beq.n	801e6c6 <SUBGRF_GetPacketStatus+0x56>
 801e69e:	e02a      	b.n	801e6f6 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801e6a0:	7b3a      	ldrb	r2, [r7, #12]
 801e6a2:	687b      	ldr	r3, [r7, #4]
 801e6a4:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801e6a6:	7b7b      	ldrb	r3, [r7, #13]
 801e6a8:	425b      	negs	r3, r3
 801e6aa:	105b      	asrs	r3, r3, #1
 801e6ac:	b25a      	sxtb	r2, r3
 801e6ae:	687b      	ldr	r3, [r7, #4]
 801e6b0:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801e6b2:	7bbb      	ldrb	r3, [r7, #14]
 801e6b4:	425b      	negs	r3, r3
 801e6b6:	105b      	asrs	r3, r3, #1
 801e6b8:	b25a      	sxtb	r2, r3
 801e6ba:	687b      	ldr	r3, [r7, #4]
 801e6bc:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801e6be:	687b      	ldr	r3, [r7, #4]
 801e6c0:	2200      	movs	r2, #0
 801e6c2:	609a      	str	r2, [r3, #8]
            break;
 801e6c4:	e020      	b.n	801e708 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801e6c6:	7b3b      	ldrb	r3, [r7, #12]
 801e6c8:	425b      	negs	r3, r3
 801e6ca:	105b      	asrs	r3, r3, #1
 801e6cc:	b25a      	sxtb	r2, r3
 801e6ce:	687b      	ldr	r3, [r7, #4]
 801e6d0:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801e6d2:	7b7b      	ldrb	r3, [r7, #13]
 801e6d4:	b25b      	sxtb	r3, r3
 801e6d6:	3302      	adds	r3, #2
 801e6d8:	109b      	asrs	r3, r3, #2
 801e6da:	b25a      	sxtb	r2, r3
 801e6dc:	687b      	ldr	r3, [r7, #4]
 801e6de:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801e6e0:	7bbb      	ldrb	r3, [r7, #14]
 801e6e2:	425b      	negs	r3, r3
 801e6e4:	105b      	asrs	r3, r3, #1
 801e6e6:	b25a      	sxtb	r2, r3
 801e6e8:	687b      	ldr	r3, [r7, #4]
 801e6ea:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801e6ec:	4b08      	ldr	r3, [pc, #32]	; (801e710 <SUBGRF_GetPacketStatus+0xa0>)
 801e6ee:	681a      	ldr	r2, [r3, #0]
 801e6f0:	687b      	ldr	r3, [r7, #4]
 801e6f2:	611a      	str	r2, [r3, #16]
            break;
 801e6f4:	e008      	b.n	801e708 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801e6f6:	2214      	movs	r2, #20
 801e6f8:	2100      	movs	r1, #0
 801e6fa:	6878      	ldr	r0, [r7, #4]
 801e6fc:	f000 fc03 	bl	801ef06 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801e700:	687b      	ldr	r3, [r7, #4]
 801e702:	220f      	movs	r2, #15
 801e704:	701a      	strb	r2, [r3, #0]
            break;
 801e706:	bf00      	nop
    }
}
 801e708:	bf00      	nop
 801e70a:	3710      	adds	r7, #16
 801e70c:	46bd      	mov	sp, r7
 801e70e:	bd80      	pop	{r7, pc}
 801e710:	20001e2c 	.word	0x20001e2c

0801e714 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801e714:	b580      	push	{r7, lr}
 801e716:	b082      	sub	sp, #8
 801e718:	af00      	add	r7, sp, #0
 801e71a:	4603      	mov	r3, r0
 801e71c:	460a      	mov	r2, r1
 801e71e:	80fb      	strh	r3, [r7, #6]
 801e720:	4613      	mov	r3, r2
 801e722:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801e724:	1d7a      	adds	r2, r7, #5
 801e726:	88f9      	ldrh	r1, [r7, #6]
 801e728:	2301      	movs	r3, #1
 801e72a:	4803      	ldr	r0, [pc, #12]	; (801e738 <SUBGRF_WriteRegister+0x24>)
 801e72c:	f7ec fcc8 	bl	800b0c0 <HAL_SUBGHZ_WriteRegisters>
}
 801e730:	bf00      	nop
 801e732:	3708      	adds	r7, #8
 801e734:	46bd      	mov	sp, r7
 801e736:	bd80      	pop	{r7, pc}
 801e738:	20000468 	.word	0x20000468

0801e73c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801e73c:	b580      	push	{r7, lr}
 801e73e:	b084      	sub	sp, #16
 801e740:	af00      	add	r7, sp, #0
 801e742:	4603      	mov	r3, r0
 801e744:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801e746:	f107 020f 	add.w	r2, r7, #15
 801e74a:	88f9      	ldrh	r1, [r7, #6]
 801e74c:	2301      	movs	r3, #1
 801e74e:	4804      	ldr	r0, [pc, #16]	; (801e760 <SUBGRF_ReadRegister+0x24>)
 801e750:	f7ec fd15 	bl	800b17e <HAL_SUBGHZ_ReadRegisters>
    return data;
 801e754:	7bfb      	ldrb	r3, [r7, #15]
}
 801e756:	4618      	mov	r0, r3
 801e758:	3710      	adds	r7, #16
 801e75a:	46bd      	mov	sp, r7
 801e75c:	bd80      	pop	{r7, pc}
 801e75e:	bf00      	nop
 801e760:	20000468 	.word	0x20000468

0801e764 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801e764:	b580      	push	{r7, lr}
 801e766:	b086      	sub	sp, #24
 801e768:	af00      	add	r7, sp, #0
 801e76a:	4603      	mov	r3, r0
 801e76c:	6039      	str	r1, [r7, #0]
 801e76e:	80fb      	strh	r3, [r7, #6]
 801e770:	4613      	mov	r3, r2
 801e772:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e774:	f3ef 8310 	mrs	r3, PRIMASK
 801e778:	60fb      	str	r3, [r7, #12]
  return(result);
 801e77a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e77c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e77e:	b672      	cpsid	i
}
 801e780:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801e782:	88bb      	ldrh	r3, [r7, #4]
 801e784:	88f9      	ldrh	r1, [r7, #6]
 801e786:	683a      	ldr	r2, [r7, #0]
 801e788:	4806      	ldr	r0, [pc, #24]	; (801e7a4 <SUBGRF_WriteRegisters+0x40>)
 801e78a:	f7ec fc99 	bl	800b0c0 <HAL_SUBGHZ_WriteRegisters>
 801e78e:	697b      	ldr	r3, [r7, #20]
 801e790:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e792:	693b      	ldr	r3, [r7, #16]
 801e794:	f383 8810 	msr	PRIMASK, r3
}
 801e798:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e79a:	bf00      	nop
 801e79c:	3718      	adds	r7, #24
 801e79e:	46bd      	mov	sp, r7
 801e7a0:	bd80      	pop	{r7, pc}
 801e7a2:	bf00      	nop
 801e7a4:	20000468 	.word	0x20000468

0801e7a8 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801e7a8:	b580      	push	{r7, lr}
 801e7aa:	b086      	sub	sp, #24
 801e7ac:	af00      	add	r7, sp, #0
 801e7ae:	4603      	mov	r3, r0
 801e7b0:	6039      	str	r1, [r7, #0]
 801e7b2:	80fb      	strh	r3, [r7, #6]
 801e7b4:	4613      	mov	r3, r2
 801e7b6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e7b8:	f3ef 8310 	mrs	r3, PRIMASK
 801e7bc:	60fb      	str	r3, [r7, #12]
  return(result);
 801e7be:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e7c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e7c2:	b672      	cpsid	i
}
 801e7c4:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801e7c6:	88bb      	ldrh	r3, [r7, #4]
 801e7c8:	88f9      	ldrh	r1, [r7, #6]
 801e7ca:	683a      	ldr	r2, [r7, #0]
 801e7cc:	4806      	ldr	r0, [pc, #24]	; (801e7e8 <SUBGRF_ReadRegisters+0x40>)
 801e7ce:	f7ec fcd6 	bl	800b17e <HAL_SUBGHZ_ReadRegisters>
 801e7d2:	697b      	ldr	r3, [r7, #20]
 801e7d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e7d6:	693b      	ldr	r3, [r7, #16]
 801e7d8:	f383 8810 	msr	PRIMASK, r3
}
 801e7dc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e7de:	bf00      	nop
 801e7e0:	3718      	adds	r7, #24
 801e7e2:	46bd      	mov	sp, r7
 801e7e4:	bd80      	pop	{r7, pc}
 801e7e6:	bf00      	nop
 801e7e8:	20000468 	.word	0x20000468

0801e7ec <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801e7ec:	b580      	push	{r7, lr}
 801e7ee:	b086      	sub	sp, #24
 801e7f0:	af00      	add	r7, sp, #0
 801e7f2:	4603      	mov	r3, r0
 801e7f4:	6039      	str	r1, [r7, #0]
 801e7f6:	71fb      	strb	r3, [r7, #7]
 801e7f8:	4613      	mov	r3, r2
 801e7fa:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e7fc:	f3ef 8310 	mrs	r3, PRIMASK
 801e800:	60fb      	str	r3, [r7, #12]
  return(result);
 801e802:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e804:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e806:	b672      	cpsid	i
}
 801e808:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801e80a:	79bb      	ldrb	r3, [r7, #6]
 801e80c:	b29b      	uxth	r3, r3
 801e80e:	79f9      	ldrb	r1, [r7, #7]
 801e810:	683a      	ldr	r2, [r7, #0]
 801e812:	4806      	ldr	r0, [pc, #24]	; (801e82c <SUBGRF_WriteBuffer+0x40>)
 801e814:	f7ec fdc7 	bl	800b3a6 <HAL_SUBGHZ_WriteBuffer>
 801e818:	697b      	ldr	r3, [r7, #20]
 801e81a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e81c:	693b      	ldr	r3, [r7, #16]
 801e81e:	f383 8810 	msr	PRIMASK, r3
}
 801e822:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e824:	bf00      	nop
 801e826:	3718      	adds	r7, #24
 801e828:	46bd      	mov	sp, r7
 801e82a:	bd80      	pop	{r7, pc}
 801e82c:	20000468 	.word	0x20000468

0801e830 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801e830:	b580      	push	{r7, lr}
 801e832:	b086      	sub	sp, #24
 801e834:	af00      	add	r7, sp, #0
 801e836:	4603      	mov	r3, r0
 801e838:	6039      	str	r1, [r7, #0]
 801e83a:	71fb      	strb	r3, [r7, #7]
 801e83c:	4613      	mov	r3, r2
 801e83e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e840:	f3ef 8310 	mrs	r3, PRIMASK
 801e844:	60fb      	str	r3, [r7, #12]
  return(result);
 801e846:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e848:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e84a:	b672      	cpsid	i
}
 801e84c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801e84e:	79bb      	ldrb	r3, [r7, #6]
 801e850:	b29b      	uxth	r3, r3
 801e852:	79f9      	ldrb	r1, [r7, #7]
 801e854:	683a      	ldr	r2, [r7, #0]
 801e856:	4806      	ldr	r0, [pc, #24]	; (801e870 <SUBGRF_ReadBuffer+0x40>)
 801e858:	f7ec fdf8 	bl	800b44c <HAL_SUBGHZ_ReadBuffer>
 801e85c:	697b      	ldr	r3, [r7, #20]
 801e85e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e860:	693b      	ldr	r3, [r7, #16]
 801e862:	f383 8810 	msr	PRIMASK, r3
}
 801e866:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e868:	bf00      	nop
 801e86a:	3718      	adds	r7, #24
 801e86c:	46bd      	mov	sp, r7
 801e86e:	bd80      	pop	{r7, pc}
 801e870:	20000468 	.word	0x20000468

0801e874 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801e874:	b580      	push	{r7, lr}
 801e876:	b086      	sub	sp, #24
 801e878:	af00      	add	r7, sp, #0
 801e87a:	4603      	mov	r3, r0
 801e87c:	6039      	str	r1, [r7, #0]
 801e87e:	71fb      	strb	r3, [r7, #7]
 801e880:	4613      	mov	r3, r2
 801e882:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e884:	f3ef 8310 	mrs	r3, PRIMASK
 801e888:	60fb      	str	r3, [r7, #12]
  return(result);
 801e88a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e88c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e88e:	b672      	cpsid	i
}
 801e890:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801e892:	88bb      	ldrh	r3, [r7, #4]
 801e894:	79f9      	ldrb	r1, [r7, #7]
 801e896:	683a      	ldr	r2, [r7, #0]
 801e898:	4806      	ldr	r0, [pc, #24]	; (801e8b4 <SUBGRF_WriteCommand+0x40>)
 801e89a:	f7ec fcd1 	bl	800b240 <HAL_SUBGHZ_ExecSetCmd>
 801e89e:	697b      	ldr	r3, [r7, #20]
 801e8a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e8a2:	693b      	ldr	r3, [r7, #16]
 801e8a4:	f383 8810 	msr	PRIMASK, r3
}
 801e8a8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e8aa:	bf00      	nop
 801e8ac:	3718      	adds	r7, #24
 801e8ae:	46bd      	mov	sp, r7
 801e8b0:	bd80      	pop	{r7, pc}
 801e8b2:	bf00      	nop
 801e8b4:	20000468 	.word	0x20000468

0801e8b8 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801e8b8:	b580      	push	{r7, lr}
 801e8ba:	b086      	sub	sp, #24
 801e8bc:	af00      	add	r7, sp, #0
 801e8be:	4603      	mov	r3, r0
 801e8c0:	6039      	str	r1, [r7, #0]
 801e8c2:	71fb      	strb	r3, [r7, #7]
 801e8c4:	4613      	mov	r3, r2
 801e8c6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e8c8:	f3ef 8310 	mrs	r3, PRIMASK
 801e8cc:	60fb      	str	r3, [r7, #12]
  return(result);
 801e8ce:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e8d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e8d2:	b672      	cpsid	i
}
 801e8d4:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801e8d6:	88bb      	ldrh	r3, [r7, #4]
 801e8d8:	79f9      	ldrb	r1, [r7, #7]
 801e8da:	683a      	ldr	r2, [r7, #0]
 801e8dc:	4806      	ldr	r0, [pc, #24]	; (801e8f8 <SUBGRF_ReadCommand+0x40>)
 801e8de:	f7ec fd0e 	bl	800b2fe <HAL_SUBGHZ_ExecGetCmd>
 801e8e2:	697b      	ldr	r3, [r7, #20]
 801e8e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e8e6:	693b      	ldr	r3, [r7, #16]
 801e8e8:	f383 8810 	msr	PRIMASK, r3
}
 801e8ec:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e8ee:	bf00      	nop
 801e8f0:	3718      	adds	r7, #24
 801e8f2:	46bd      	mov	sp, r7
 801e8f4:	bd80      	pop	{r7, pc}
 801e8f6:	bf00      	nop
 801e8f8:	20000468 	.word	0x20000468

0801e8fc <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801e8fc:	b580      	push	{r7, lr}
 801e8fe:	b084      	sub	sp, #16
 801e900:	af00      	add	r7, sp, #0
 801e902:	4603      	mov	r3, r0
 801e904:	460a      	mov	r2, r1
 801e906:	71fb      	strb	r3, [r7, #7]
 801e908:	4613      	mov	r3, r2
 801e90a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801e90c:	2301      	movs	r3, #1
 801e90e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801e910:	79bb      	ldrb	r3, [r7, #6]
 801e912:	2b01      	cmp	r3, #1
 801e914:	d10d      	bne.n	801e932 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801e916:	79fb      	ldrb	r3, [r7, #7]
 801e918:	2b01      	cmp	r3, #1
 801e91a:	d104      	bne.n	801e926 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801e91c:	2302      	movs	r3, #2
 801e91e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801e920:	2004      	movs	r0, #4
 801e922:	f000 f8ef 	bl	801eb04 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801e926:	79fb      	ldrb	r3, [r7, #7]
 801e928:	2b02      	cmp	r3, #2
 801e92a:	d107      	bne.n	801e93c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801e92c:	2303      	movs	r3, #3
 801e92e:	73fb      	strb	r3, [r7, #15]
 801e930:	e004      	b.n	801e93c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801e932:	79bb      	ldrb	r3, [r7, #6]
 801e934:	2b00      	cmp	r3, #0
 801e936:	d101      	bne.n	801e93c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801e938:	2301      	movs	r3, #1
 801e93a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801e93c:	7bfb      	ldrb	r3, [r7, #15]
 801e93e:	4618      	mov	r0, r3
 801e940:	f7f0 f995 	bl	800ec6e <RBI_ConfigRFSwitch>
}
 801e944:	bf00      	nop
 801e946:	3710      	adds	r7, #16
 801e948:	46bd      	mov	sp, r7
 801e94a:	bd80      	pop	{r7, pc}

0801e94c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801e94c:	b580      	push	{r7, lr}
 801e94e:	b084      	sub	sp, #16
 801e950:	af00      	add	r7, sp, #0
 801e952:	4603      	mov	r3, r0
 801e954:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801e956:	2301      	movs	r3, #1
 801e958:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801e95a:	f7f0 f996 	bl	800ec8a <RBI_GetTxConfig>
 801e95e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801e960:	68bb      	ldr	r3, [r7, #8]
 801e962:	2b02      	cmp	r3, #2
 801e964:	d016      	beq.n	801e994 <SUBGRF_SetRfTxPower+0x48>
 801e966:	68bb      	ldr	r3, [r7, #8]
 801e968:	2b02      	cmp	r3, #2
 801e96a:	dc16      	bgt.n	801e99a <SUBGRF_SetRfTxPower+0x4e>
 801e96c:	68bb      	ldr	r3, [r7, #8]
 801e96e:	2b00      	cmp	r3, #0
 801e970:	d003      	beq.n	801e97a <SUBGRF_SetRfTxPower+0x2e>
 801e972:	68bb      	ldr	r3, [r7, #8]
 801e974:	2b01      	cmp	r3, #1
 801e976:	d00a      	beq.n	801e98e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801e978:	e00f      	b.n	801e99a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801e97a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e97e:	2b0f      	cmp	r3, #15
 801e980:	dd02      	ble.n	801e988 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801e982:	2302      	movs	r3, #2
 801e984:	73fb      	strb	r3, [r7, #15]
            break;
 801e986:	e009      	b.n	801e99c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801e988:	2301      	movs	r3, #1
 801e98a:	73fb      	strb	r3, [r7, #15]
            break;
 801e98c:	e006      	b.n	801e99c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801e98e:	2301      	movs	r3, #1
 801e990:	73fb      	strb	r3, [r7, #15]
            break;
 801e992:	e003      	b.n	801e99c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801e994:	2302      	movs	r3, #2
 801e996:	73fb      	strb	r3, [r7, #15]
            break;
 801e998:	e000      	b.n	801e99c <SUBGRF_SetRfTxPower+0x50>
            break;
 801e99a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801e99c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801e9a0:	7bfb      	ldrb	r3, [r7, #15]
 801e9a2:	2202      	movs	r2, #2
 801e9a4:	4618      	mov	r0, r3
 801e9a6:	f7ff fbcd 	bl	801e144 <SUBGRF_SetTxParams>

    return paSelect;
 801e9aa:	7bfb      	ldrb	r3, [r7, #15]
}
 801e9ac:	4618      	mov	r0, r3
 801e9ae:	3710      	adds	r7, #16
 801e9b0:	46bd      	mov	sp, r7
 801e9b2:	bd80      	pop	{r7, pc}

0801e9b4 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801e9b4:	b480      	push	{r7}
 801e9b6:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801e9b8:	2301      	movs	r3, #1
}
 801e9ba:	4618      	mov	r0, r3
 801e9bc:	46bd      	mov	sp, r7
 801e9be:	bc80      	pop	{r7}
 801e9c0:	4770      	bx	lr
	...

0801e9c4 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e9c4:	b580      	push	{r7, lr}
 801e9c6:	b082      	sub	sp, #8
 801e9c8:	af00      	add	r7, sp, #0
 801e9ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801e9cc:	4b03      	ldr	r3, [pc, #12]	; (801e9dc <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801e9ce:	681b      	ldr	r3, [r3, #0]
 801e9d0:	2001      	movs	r0, #1
 801e9d2:	4798      	blx	r3
}
 801e9d4:	bf00      	nop
 801e9d6:	3708      	adds	r7, #8
 801e9d8:	46bd      	mov	sp, r7
 801e9da:	bd80      	pop	{r7, pc}
 801e9dc:	20001e34 	.word	0x20001e34

0801e9e0 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e9e0:	b580      	push	{r7, lr}
 801e9e2:	b082      	sub	sp, #8
 801e9e4:	af00      	add	r7, sp, #0
 801e9e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801e9e8:	4b03      	ldr	r3, [pc, #12]	; (801e9f8 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801e9ea:	681b      	ldr	r3, [r3, #0]
 801e9ec:	2002      	movs	r0, #2
 801e9ee:	4798      	blx	r3
}
 801e9f0:	bf00      	nop
 801e9f2:	3708      	adds	r7, #8
 801e9f4:	46bd      	mov	sp, r7
 801e9f6:	bd80      	pop	{r7, pc}
 801e9f8:	20001e34 	.word	0x20001e34

0801e9fc <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801e9fc:	b580      	push	{r7, lr}
 801e9fe:	b082      	sub	sp, #8
 801ea00:	af00      	add	r7, sp, #0
 801ea02:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801ea04:	4b03      	ldr	r3, [pc, #12]	; (801ea14 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801ea06:	681b      	ldr	r3, [r3, #0]
 801ea08:	2040      	movs	r0, #64	; 0x40
 801ea0a:	4798      	blx	r3
}
 801ea0c:	bf00      	nop
 801ea0e:	3708      	adds	r7, #8
 801ea10:	46bd      	mov	sp, r7
 801ea12:	bd80      	pop	{r7, pc}
 801ea14:	20001e34 	.word	0x20001e34

0801ea18 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801ea18:	b580      	push	{r7, lr}
 801ea1a:	b082      	sub	sp, #8
 801ea1c:	af00      	add	r7, sp, #0
 801ea1e:	6078      	str	r0, [r7, #4]
 801ea20:	460b      	mov	r3, r1
 801ea22:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801ea24:	78fb      	ldrb	r3, [r7, #3]
 801ea26:	2b00      	cmp	r3, #0
 801ea28:	d002      	beq.n	801ea30 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801ea2a:	2b01      	cmp	r3, #1
 801ea2c:	d005      	beq.n	801ea3a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801ea2e:	e00a      	b.n	801ea46 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801ea30:	4b07      	ldr	r3, [pc, #28]	; (801ea50 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801ea32:	681b      	ldr	r3, [r3, #0]
 801ea34:	2080      	movs	r0, #128	; 0x80
 801ea36:	4798      	blx	r3
            break;
 801ea38:	e005      	b.n	801ea46 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801ea3a:	4b05      	ldr	r3, [pc, #20]	; (801ea50 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801ea3c:	681b      	ldr	r3, [r3, #0]
 801ea3e:	f44f 7080 	mov.w	r0, #256	; 0x100
 801ea42:	4798      	blx	r3
            break;
 801ea44:	bf00      	nop
    }
}
 801ea46:	bf00      	nop
 801ea48:	3708      	adds	r7, #8
 801ea4a:	46bd      	mov	sp, r7
 801ea4c:	bd80      	pop	{r7, pc}
 801ea4e:	bf00      	nop
 801ea50:	20001e34 	.word	0x20001e34

0801ea54 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ea54:	b580      	push	{r7, lr}
 801ea56:	b082      	sub	sp, #8
 801ea58:	af00      	add	r7, sp, #0
 801ea5a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801ea5c:	4b04      	ldr	r3, [pc, #16]	; (801ea70 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801ea5e:	681b      	ldr	r3, [r3, #0]
 801ea60:	f44f 7000 	mov.w	r0, #512	; 0x200
 801ea64:	4798      	blx	r3
}
 801ea66:	bf00      	nop
 801ea68:	3708      	adds	r7, #8
 801ea6a:	46bd      	mov	sp, r7
 801ea6c:	bd80      	pop	{r7, pc}
 801ea6e:	bf00      	nop
 801ea70:	20001e34 	.word	0x20001e34

0801ea74 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ea74:	b580      	push	{r7, lr}
 801ea76:	b082      	sub	sp, #8
 801ea78:	af00      	add	r7, sp, #0
 801ea7a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801ea7c:	4b03      	ldr	r3, [pc, #12]	; (801ea8c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801ea7e:	681b      	ldr	r3, [r3, #0]
 801ea80:	2020      	movs	r0, #32
 801ea82:	4798      	blx	r3
}
 801ea84:	bf00      	nop
 801ea86:	3708      	adds	r7, #8
 801ea88:	46bd      	mov	sp, r7
 801ea8a:	bd80      	pop	{r7, pc}
 801ea8c:	20001e34 	.word	0x20001e34

0801ea90 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ea90:	b580      	push	{r7, lr}
 801ea92:	b082      	sub	sp, #8
 801ea94:	af00      	add	r7, sp, #0
 801ea96:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801ea98:	4b03      	ldr	r3, [pc, #12]	; (801eaa8 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801ea9a:	681b      	ldr	r3, [r3, #0]
 801ea9c:	2004      	movs	r0, #4
 801ea9e:	4798      	blx	r3
}
 801eaa0:	bf00      	nop
 801eaa2:	3708      	adds	r7, #8
 801eaa4:	46bd      	mov	sp, r7
 801eaa6:	bd80      	pop	{r7, pc}
 801eaa8:	20001e34 	.word	0x20001e34

0801eaac <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801eaac:	b580      	push	{r7, lr}
 801eaae:	b082      	sub	sp, #8
 801eab0:	af00      	add	r7, sp, #0
 801eab2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801eab4:	4b03      	ldr	r3, [pc, #12]	; (801eac4 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801eab6:	681b      	ldr	r3, [r3, #0]
 801eab8:	2008      	movs	r0, #8
 801eaba:	4798      	blx	r3
}
 801eabc:	bf00      	nop
 801eabe:	3708      	adds	r7, #8
 801eac0:	46bd      	mov	sp, r7
 801eac2:	bd80      	pop	{r7, pc}
 801eac4:	20001e34 	.word	0x20001e34

0801eac8 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801eac8:	b580      	push	{r7, lr}
 801eaca:	b082      	sub	sp, #8
 801eacc:	af00      	add	r7, sp, #0
 801eace:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801ead0:	4b03      	ldr	r3, [pc, #12]	; (801eae0 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801ead2:	681b      	ldr	r3, [r3, #0]
 801ead4:	2010      	movs	r0, #16
 801ead6:	4798      	blx	r3
}
 801ead8:	bf00      	nop
 801eada:	3708      	adds	r7, #8
 801eadc:	46bd      	mov	sp, r7
 801eade:	bd80      	pop	{r7, pc}
 801eae0:	20001e34 	.word	0x20001e34

0801eae4 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801eae4:	b580      	push	{r7, lr}
 801eae6:	b082      	sub	sp, #8
 801eae8:	af00      	add	r7, sp, #0
 801eaea:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801eaec:	4b04      	ldr	r3, [pc, #16]	; (801eb00 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801eaee:	681b      	ldr	r3, [r3, #0]
 801eaf0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801eaf4:	4798      	blx	r3
}
 801eaf6:	bf00      	nop
 801eaf8:	3708      	adds	r7, #8
 801eafa:	46bd      	mov	sp, r7
 801eafc:	bd80      	pop	{r7, pc}
 801eafe:	bf00      	nop
 801eb00:	20001e34 	.word	0x20001e34

0801eb04 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801eb04:	b580      	push	{r7, lr}
 801eb06:	b084      	sub	sp, #16
 801eb08:	af00      	add	r7, sp, #0
 801eb0a:	4603      	mov	r3, r0
 801eb0c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801eb0e:	f7f0 f8ca 	bl	800eca6 <RBI_IsDCDC>
 801eb12:	4603      	mov	r3, r0
 801eb14:	2b01      	cmp	r3, #1
 801eb16:	d112      	bne.n	801eb3e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801eb18:	f640 1023 	movw	r0, #2339	; 0x923
 801eb1c:	f7ff fe0e 	bl	801e73c <SUBGRF_ReadRegister>
 801eb20:	4603      	mov	r3, r0
 801eb22:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801eb24:	7bfb      	ldrb	r3, [r7, #15]
 801eb26:	f023 0306 	bic.w	r3, r3, #6
 801eb2a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801eb2c:	7bfa      	ldrb	r2, [r7, #15]
 801eb2e:	79fb      	ldrb	r3, [r7, #7]
 801eb30:	4313      	orrs	r3, r2
 801eb32:	b2db      	uxtb	r3, r3
 801eb34:	4619      	mov	r1, r3
 801eb36:	f640 1023 	movw	r0, #2339	; 0x923
 801eb3a:	f7ff fdeb 	bl	801e714 <SUBGRF_WriteRegister>
  }
}
 801eb3e:	bf00      	nop
 801eb40:	3710      	adds	r7, #16
 801eb42:	46bd      	mov	sp, r7
 801eb44:	bd80      	pop	{r7, pc}
	...

0801eb48 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801eb48:	b480      	push	{r7}
 801eb4a:	b085      	sub	sp, #20
 801eb4c:	af00      	add	r7, sp, #0
 801eb4e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801eb50:	687b      	ldr	r3, [r7, #4]
 801eb52:	2b00      	cmp	r3, #0
 801eb54:	d101      	bne.n	801eb5a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801eb56:	231f      	movs	r3, #31
 801eb58:	e016      	b.n	801eb88 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801eb5a:	2300      	movs	r3, #0
 801eb5c:	73fb      	strb	r3, [r7, #15]
 801eb5e:	e00f      	b.n	801eb80 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801eb60:	7bfb      	ldrb	r3, [r7, #15]
 801eb62:	4a0c      	ldr	r2, [pc, #48]	; (801eb94 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801eb64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801eb68:	687a      	ldr	r2, [r7, #4]
 801eb6a:	429a      	cmp	r2, r3
 801eb6c:	d205      	bcs.n	801eb7a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801eb6e:	7bfb      	ldrb	r3, [r7, #15]
 801eb70:	4a08      	ldr	r2, [pc, #32]	; (801eb94 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801eb72:	00db      	lsls	r3, r3, #3
 801eb74:	4413      	add	r3, r2
 801eb76:	791b      	ldrb	r3, [r3, #4]
 801eb78:	e006      	b.n	801eb88 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801eb7a:	7bfb      	ldrb	r3, [r7, #15]
 801eb7c:	3301      	adds	r3, #1
 801eb7e:	73fb      	strb	r3, [r7, #15]
 801eb80:	7bfb      	ldrb	r3, [r7, #15]
 801eb82:	2b15      	cmp	r3, #21
 801eb84:	d9ec      	bls.n	801eb60 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801eb86:	e7fe      	b.n	801eb86 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801eb88:	4618      	mov	r0, r3
 801eb8a:	3714      	adds	r7, #20
 801eb8c:	46bd      	mov	sp, r7
 801eb8e:	bc80      	pop	{r7}
 801eb90:	4770      	bx	lr
 801eb92:	bf00      	nop
 801eb94:	08021e8c 	.word	0x08021e8c

0801eb98 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801eb98:	b580      	push	{r7, lr}
 801eb9a:	b08a      	sub	sp, #40	; 0x28
 801eb9c:	af00      	add	r7, sp, #0
 801eb9e:	6078      	str	r0, [r7, #4]
 801eba0:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801eba2:	4b35      	ldr	r3, [pc, #212]	; (801ec78 <SUBGRF_GetCFO+0xe0>)
 801eba4:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801eba6:	f640 0007 	movw	r0, #2055	; 0x807
 801ebaa:	f7ff fdc7 	bl	801e73c <SUBGRF_ReadRegister>
 801ebae:	4603      	mov	r3, r0
 801ebb0:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801ebb2:	7ffb      	ldrb	r3, [r7, #31]
 801ebb4:	08db      	lsrs	r3, r3, #3
 801ebb6:	b2db      	uxtb	r3, r3
 801ebb8:	f003 0303 	and.w	r3, r3, #3
 801ebbc:	3328      	adds	r3, #40	; 0x28
 801ebbe:	443b      	add	r3, r7
 801ebc0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801ebc4:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801ebc6:	7ffb      	ldrb	r3, [r7, #31]
 801ebc8:	f003 0307 	and.w	r3, r3, #7
 801ebcc:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801ebce:	7fba      	ldrb	r2, [r7, #30]
 801ebd0:	7f7b      	ldrb	r3, [r7, #29]
 801ebd2:	3301      	adds	r3, #1
 801ebd4:	fa02 f303 	lsl.w	r3, r2, r3
 801ebd8:	461a      	mov	r2, r3
 801ebda:	4b28      	ldr	r3, [pc, #160]	; (801ec7c <SUBGRF_GetCFO+0xe4>)
 801ebdc:	fbb3 f3f2 	udiv	r3, r3, r2
 801ebe0:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801ebe2:	69ba      	ldr	r2, [r7, #24]
 801ebe4:	687b      	ldr	r3, [r7, #4]
 801ebe6:	fbb2 f3f3 	udiv	r3, r2, r3
 801ebea:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801ebec:	2301      	movs	r3, #1
 801ebee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801ebf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ebf6:	697a      	ldr	r2, [r7, #20]
 801ebf8:	fb02 f303 	mul.w	r3, r2, r3
 801ebfc:	2b07      	cmp	r3, #7
 801ebfe:	d802      	bhi.n	801ec06 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801ec00:	2302      	movs	r3, #2
 801ec02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801ec06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ec0a:	697a      	ldr	r2, [r7, #20]
 801ec0c:	fb02 f303 	mul.w	r3, r2, r3
 801ec10:	2b03      	cmp	r3, #3
 801ec12:	d802      	bhi.n	801ec1a <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801ec14:	2304      	movs	r3, #4
 801ec16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801ec1a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801ec1e:	69bb      	ldr	r3, [r7, #24]
 801ec20:	fb02 f303 	mul.w	r3, r2, r3
 801ec24:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801ec26:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801ec2a:	f7ff fd87 	bl	801e73c <SUBGRF_ReadRegister>
 801ec2e:	4603      	mov	r3, r0
 801ec30:	021b      	lsls	r3, r3, #8
 801ec32:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801ec36:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801ec38:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801ec3c:	f7ff fd7e 	bl	801e73c <SUBGRF_ReadRegister>
 801ec40:	4603      	mov	r3, r0
 801ec42:	461a      	mov	r2, r3
 801ec44:	6a3b      	ldr	r3, [r7, #32]
 801ec46:	4313      	orrs	r3, r2
 801ec48:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801ec4a:	6a3b      	ldr	r3, [r7, #32]
 801ec4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ec50:	2b00      	cmp	r3, #0
 801ec52:	d005      	beq.n	801ec60 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801ec54:	6a3b      	ldr	r3, [r7, #32]
 801ec56:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801ec5a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801ec5e:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801ec60:	693b      	ldr	r3, [r7, #16]
 801ec62:	095b      	lsrs	r3, r3, #5
 801ec64:	6a3a      	ldr	r2, [r7, #32]
 801ec66:	fb02 f303 	mul.w	r3, r2, r3
 801ec6a:	11da      	asrs	r2, r3, #7
 801ec6c:	683b      	ldr	r3, [r7, #0]
 801ec6e:	601a      	str	r2, [r3, #0]
}
 801ec70:	bf00      	nop
 801ec72:	3728      	adds	r7, #40	; 0x28
 801ec74:	46bd      	mov	sp, r7
 801ec76:	bd80      	pop	{r7, pc}
 801ec78:	0c0a0804 	.word	0x0c0a0804
 801ec7c:	01e84800 	.word	0x01e84800

0801ec80 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801ec80:	b480      	push	{r7}
 801ec82:	b087      	sub	sp, #28
 801ec84:	af00      	add	r7, sp, #0
 801ec86:	4603      	mov	r3, r0
 801ec88:	60b9      	str	r1, [r7, #8]
 801ec8a:	607a      	str	r2, [r7, #4]
 801ec8c:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801ec8e:	2300      	movs	r3, #0
 801ec90:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801ec92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ec96:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801ec98:	697b      	ldr	r3, [r7, #20]
}
 801ec9a:	4618      	mov	r0, r3
 801ec9c:	371c      	adds	r7, #28
 801ec9e:	46bd      	mov	sp, r7
 801eca0:	bc80      	pop	{r7}
 801eca2:	4770      	bx	lr

0801eca4 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801eca4:	b480      	push	{r7}
 801eca6:	b087      	sub	sp, #28
 801eca8:	af00      	add	r7, sp, #0
 801ecaa:	4603      	mov	r3, r0
 801ecac:	60b9      	str	r1, [r7, #8]
 801ecae:	607a      	str	r2, [r7, #4]
 801ecb0:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801ecb2:	2300      	movs	r3, #0
 801ecb4:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801ecb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ecba:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801ecbc:	697b      	ldr	r3, [r7, #20]
}
 801ecbe:	4618      	mov	r0, r3
 801ecc0:	371c      	adds	r7, #28
 801ecc2:	46bd      	mov	sp, r7
 801ecc4:	bc80      	pop	{r7}
 801ecc6:	4770      	bx	lr

0801ecc8 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801ecc8:	b480      	push	{r7}
 801ecca:	b085      	sub	sp, #20
 801eccc:	af00      	add	r7, sp, #0
 801ecce:	60f8      	str	r0, [r7, #12]
 801ecd0:	60b9      	str	r1, [r7, #8]
 801ecd2:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801ecd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 801ecd8:	4618      	mov	r0, r3
 801ecda:	3714      	adds	r7, #20
 801ecdc:	46bd      	mov	sp, r7
 801ecde:	bc80      	pop	{r7}
 801ece0:	4770      	bx	lr

0801ece2 <RFW_DeInit>:

void RFW_DeInit( void )
{
 801ece2:	b480      	push	{r7}
 801ece4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801ece6:	bf00      	nop
 801ece8:	46bd      	mov	sp, r7
 801ecea:	bc80      	pop	{r7}
 801ecec:	4770      	bx	lr

0801ecee <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801ecee:	b480      	push	{r7}
 801ecf0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801ecf2:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801ecf4:	4618      	mov	r0, r3
 801ecf6:	46bd      	mov	sp, r7
 801ecf8:	bc80      	pop	{r7}
 801ecfa:	4770      	bx	lr

0801ecfc <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801ecfc:	b480      	push	{r7}
 801ecfe:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801ed00:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801ed02:	4618      	mov	r0, r3
 801ed04:	46bd      	mov	sp, r7
 801ed06:	bc80      	pop	{r7}
 801ed08:	4770      	bx	lr

0801ed0a <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801ed0a:	b480      	push	{r7}
 801ed0c:	b083      	sub	sp, #12
 801ed0e:	af00      	add	r7, sp, #0
 801ed10:	4603      	mov	r3, r0
 801ed12:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801ed14:	bf00      	nop
 801ed16:	370c      	adds	r7, #12
 801ed18:	46bd      	mov	sp, r7
 801ed1a:	bc80      	pop	{r7}
 801ed1c:	4770      	bx	lr

0801ed1e <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801ed1e:	b480      	push	{r7}
 801ed20:	b087      	sub	sp, #28
 801ed22:	af00      	add	r7, sp, #0
 801ed24:	60f8      	str	r0, [r7, #12]
 801ed26:	460b      	mov	r3, r1
 801ed28:	607a      	str	r2, [r7, #4]
 801ed2a:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801ed2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ed30:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801ed32:	697b      	ldr	r3, [r7, #20]
}
 801ed34:	4618      	mov	r0, r3
 801ed36:	371c      	adds	r7, #28
 801ed38:	46bd      	mov	sp, r7
 801ed3a:	bc80      	pop	{r7}
 801ed3c:	4770      	bx	lr

0801ed3e <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801ed3e:	b480      	push	{r7}
 801ed40:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801ed42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 801ed46:	4618      	mov	r0, r3
 801ed48:	46bd      	mov	sp, r7
 801ed4a:	bc80      	pop	{r7}
 801ed4c:	4770      	bx	lr

0801ed4e <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801ed4e:	b480      	push	{r7}
 801ed50:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801ed52:	bf00      	nop
 801ed54:	46bd      	mov	sp, r7
 801ed56:	bc80      	pop	{r7}
 801ed58:	4770      	bx	lr

0801ed5a <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801ed5a:	b480      	push	{r7}
 801ed5c:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801ed5e:	bf00      	nop
 801ed60:	46bd      	mov	sp, r7
 801ed62:	bc80      	pop	{r7}
 801ed64:	4770      	bx	lr

0801ed66 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801ed66:	b480      	push	{r7}
 801ed68:	b083      	sub	sp, #12
 801ed6a:	af00      	add	r7, sp, #0
 801ed6c:	4603      	mov	r3, r0
 801ed6e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801ed70:	bf00      	nop
 801ed72:	370c      	adds	r7, #12
 801ed74:	46bd      	mov	sp, r7
 801ed76:	bc80      	pop	{r7}
 801ed78:	4770      	bx	lr
	...

0801ed7c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801ed7c:	b480      	push	{r7}
 801ed7e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801ed80:	4b04      	ldr	r3, [pc, #16]	; (801ed94 <UTIL_LPM_Init+0x18>)
 801ed82:	2200      	movs	r2, #0
 801ed84:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801ed86:	4b04      	ldr	r3, [pc, #16]	; (801ed98 <UTIL_LPM_Init+0x1c>)
 801ed88:	2200      	movs	r2, #0
 801ed8a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801ed8c:	bf00      	nop
 801ed8e:	46bd      	mov	sp, r7
 801ed90:	bc80      	pop	{r7}
 801ed92:	4770      	bx	lr
 801ed94:	20001e38 	.word	0x20001e38
 801ed98:	20001e3c 	.word	0x20001e3c

0801ed9c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ed9c:	b480      	push	{r7}
 801ed9e:	b087      	sub	sp, #28
 801eda0:	af00      	add	r7, sp, #0
 801eda2:	6078      	str	r0, [r7, #4]
 801eda4:	460b      	mov	r3, r1
 801eda6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eda8:	f3ef 8310 	mrs	r3, PRIMASK
 801edac:	613b      	str	r3, [r7, #16]
  return(result);
 801edae:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801edb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801edb2:	b672      	cpsid	i
}
 801edb4:	bf00      	nop
  
  switch( state )
 801edb6:	78fb      	ldrb	r3, [r7, #3]
 801edb8:	2b00      	cmp	r3, #0
 801edba:	d008      	beq.n	801edce <UTIL_LPM_SetStopMode+0x32>
 801edbc:	2b01      	cmp	r3, #1
 801edbe:	d10e      	bne.n	801edde <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801edc0:	4b0d      	ldr	r3, [pc, #52]	; (801edf8 <UTIL_LPM_SetStopMode+0x5c>)
 801edc2:	681a      	ldr	r2, [r3, #0]
 801edc4:	687b      	ldr	r3, [r7, #4]
 801edc6:	4313      	orrs	r3, r2
 801edc8:	4a0b      	ldr	r2, [pc, #44]	; (801edf8 <UTIL_LPM_SetStopMode+0x5c>)
 801edca:	6013      	str	r3, [r2, #0]
      break;
 801edcc:	e008      	b.n	801ede0 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801edce:	687b      	ldr	r3, [r7, #4]
 801edd0:	43da      	mvns	r2, r3
 801edd2:	4b09      	ldr	r3, [pc, #36]	; (801edf8 <UTIL_LPM_SetStopMode+0x5c>)
 801edd4:	681b      	ldr	r3, [r3, #0]
 801edd6:	4013      	ands	r3, r2
 801edd8:	4a07      	ldr	r2, [pc, #28]	; (801edf8 <UTIL_LPM_SetStopMode+0x5c>)
 801edda:	6013      	str	r3, [r2, #0]
      break;
 801eddc:	e000      	b.n	801ede0 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801edde:	bf00      	nop
 801ede0:	697b      	ldr	r3, [r7, #20]
 801ede2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ede4:	68fb      	ldr	r3, [r7, #12]
 801ede6:	f383 8810 	msr	PRIMASK, r3
}
 801edea:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801edec:	bf00      	nop
 801edee:	371c      	adds	r7, #28
 801edf0:	46bd      	mov	sp, r7
 801edf2:	bc80      	pop	{r7}
 801edf4:	4770      	bx	lr
 801edf6:	bf00      	nop
 801edf8:	20001e38 	.word	0x20001e38

0801edfc <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801edfc:	b480      	push	{r7}
 801edfe:	b087      	sub	sp, #28
 801ee00:	af00      	add	r7, sp, #0
 801ee02:	6078      	str	r0, [r7, #4]
 801ee04:	460b      	mov	r3, r1
 801ee06:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ee08:	f3ef 8310 	mrs	r3, PRIMASK
 801ee0c:	613b      	str	r3, [r7, #16]
  return(result);
 801ee0e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801ee10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ee12:	b672      	cpsid	i
}
 801ee14:	bf00      	nop
  
  switch(state)
 801ee16:	78fb      	ldrb	r3, [r7, #3]
 801ee18:	2b00      	cmp	r3, #0
 801ee1a:	d008      	beq.n	801ee2e <UTIL_LPM_SetOffMode+0x32>
 801ee1c:	2b01      	cmp	r3, #1
 801ee1e:	d10e      	bne.n	801ee3e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801ee20:	4b0d      	ldr	r3, [pc, #52]	; (801ee58 <UTIL_LPM_SetOffMode+0x5c>)
 801ee22:	681a      	ldr	r2, [r3, #0]
 801ee24:	687b      	ldr	r3, [r7, #4]
 801ee26:	4313      	orrs	r3, r2
 801ee28:	4a0b      	ldr	r2, [pc, #44]	; (801ee58 <UTIL_LPM_SetOffMode+0x5c>)
 801ee2a:	6013      	str	r3, [r2, #0]
      break;
 801ee2c:	e008      	b.n	801ee40 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801ee2e:	687b      	ldr	r3, [r7, #4]
 801ee30:	43da      	mvns	r2, r3
 801ee32:	4b09      	ldr	r3, [pc, #36]	; (801ee58 <UTIL_LPM_SetOffMode+0x5c>)
 801ee34:	681b      	ldr	r3, [r3, #0]
 801ee36:	4013      	ands	r3, r2
 801ee38:	4a07      	ldr	r2, [pc, #28]	; (801ee58 <UTIL_LPM_SetOffMode+0x5c>)
 801ee3a:	6013      	str	r3, [r2, #0]
      break;
 801ee3c:	e000      	b.n	801ee40 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801ee3e:	bf00      	nop
 801ee40:	697b      	ldr	r3, [r7, #20]
 801ee42:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ee44:	68fb      	ldr	r3, [r7, #12]
 801ee46:	f383 8810 	msr	PRIMASK, r3
}
 801ee4a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801ee4c:	bf00      	nop
 801ee4e:	371c      	adds	r7, #28
 801ee50:	46bd      	mov	sp, r7
 801ee52:	bc80      	pop	{r7}
 801ee54:	4770      	bx	lr
 801ee56:	bf00      	nop
 801ee58:	20001e3c 	.word	0x20001e3c

0801ee5c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801ee5c:	b580      	push	{r7, lr}
 801ee5e:	b084      	sub	sp, #16
 801ee60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ee62:	f3ef 8310 	mrs	r3, PRIMASK
 801ee66:	60bb      	str	r3, [r7, #8]
  return(result);
 801ee68:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801ee6a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ee6c:	b672      	cpsid	i
}
 801ee6e:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801ee70:	4b12      	ldr	r3, [pc, #72]	; (801eebc <UTIL_LPM_EnterLowPower+0x60>)
 801ee72:	681b      	ldr	r3, [r3, #0]
 801ee74:	2b00      	cmp	r3, #0
 801ee76:	d006      	beq.n	801ee86 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801ee78:	4b11      	ldr	r3, [pc, #68]	; (801eec0 <UTIL_LPM_EnterLowPower+0x64>)
 801ee7a:	681b      	ldr	r3, [r3, #0]
 801ee7c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801ee7e:	4b10      	ldr	r3, [pc, #64]	; (801eec0 <UTIL_LPM_EnterLowPower+0x64>)
 801ee80:	685b      	ldr	r3, [r3, #4]
 801ee82:	4798      	blx	r3
 801ee84:	e010      	b.n	801eea8 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801ee86:	4b0f      	ldr	r3, [pc, #60]	; (801eec4 <UTIL_LPM_EnterLowPower+0x68>)
 801ee88:	681b      	ldr	r3, [r3, #0]
 801ee8a:	2b00      	cmp	r3, #0
 801ee8c:	d006      	beq.n	801ee9c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801ee8e:	4b0c      	ldr	r3, [pc, #48]	; (801eec0 <UTIL_LPM_EnterLowPower+0x64>)
 801ee90:	689b      	ldr	r3, [r3, #8]
 801ee92:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801ee94:	4b0a      	ldr	r3, [pc, #40]	; (801eec0 <UTIL_LPM_EnterLowPower+0x64>)
 801ee96:	68db      	ldr	r3, [r3, #12]
 801ee98:	4798      	blx	r3
 801ee9a:	e005      	b.n	801eea8 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801ee9c:	4b08      	ldr	r3, [pc, #32]	; (801eec0 <UTIL_LPM_EnterLowPower+0x64>)
 801ee9e:	691b      	ldr	r3, [r3, #16]
 801eea0:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801eea2:	4b07      	ldr	r3, [pc, #28]	; (801eec0 <UTIL_LPM_EnterLowPower+0x64>)
 801eea4:	695b      	ldr	r3, [r3, #20]
 801eea6:	4798      	blx	r3
 801eea8:	68fb      	ldr	r3, [r7, #12]
 801eeaa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eeac:	687b      	ldr	r3, [r7, #4]
 801eeae:	f383 8810 	msr	PRIMASK, r3
}
 801eeb2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801eeb4:	bf00      	nop
 801eeb6:	3710      	adds	r7, #16
 801eeb8:	46bd      	mov	sp, r7
 801eeba:	bd80      	pop	{r7, pc}
 801eebc:	20001e38 	.word	0x20001e38
 801eec0:	080218b4 	.word	0x080218b4
 801eec4:	20001e3c 	.word	0x20001e3c

0801eec8 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801eec8:	b480      	push	{r7}
 801eeca:	b087      	sub	sp, #28
 801eecc:	af00      	add	r7, sp, #0
 801eece:	60f8      	str	r0, [r7, #12]
 801eed0:	60b9      	str	r1, [r7, #8]
 801eed2:	4613      	mov	r3, r2
 801eed4:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801eed6:	68fb      	ldr	r3, [r7, #12]
 801eed8:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801eeda:	68bb      	ldr	r3, [r7, #8]
 801eedc:	613b      	str	r3, [r7, #16]

  while( size-- )
 801eede:	e007      	b.n	801eef0 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801eee0:	693a      	ldr	r2, [r7, #16]
 801eee2:	1c53      	adds	r3, r2, #1
 801eee4:	613b      	str	r3, [r7, #16]
 801eee6:	697b      	ldr	r3, [r7, #20]
 801eee8:	1c59      	adds	r1, r3, #1
 801eeea:	6179      	str	r1, [r7, #20]
 801eeec:	7812      	ldrb	r2, [r2, #0]
 801eeee:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801eef0:	88fb      	ldrh	r3, [r7, #6]
 801eef2:	1e5a      	subs	r2, r3, #1
 801eef4:	80fa      	strh	r2, [r7, #6]
 801eef6:	2b00      	cmp	r3, #0
 801eef8:	d1f2      	bne.n	801eee0 <UTIL_MEM_cpy_8+0x18>
    }
}
 801eefa:	bf00      	nop
 801eefc:	bf00      	nop
 801eefe:	371c      	adds	r7, #28
 801ef00:	46bd      	mov	sp, r7
 801ef02:	bc80      	pop	{r7}
 801ef04:	4770      	bx	lr

0801ef06 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801ef06:	b480      	push	{r7}
 801ef08:	b085      	sub	sp, #20
 801ef0a:	af00      	add	r7, sp, #0
 801ef0c:	6078      	str	r0, [r7, #4]
 801ef0e:	460b      	mov	r3, r1
 801ef10:	70fb      	strb	r3, [r7, #3]
 801ef12:	4613      	mov	r3, r2
 801ef14:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801ef16:	687b      	ldr	r3, [r7, #4]
 801ef18:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801ef1a:	e004      	b.n	801ef26 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801ef1c:	68fb      	ldr	r3, [r7, #12]
 801ef1e:	1c5a      	adds	r2, r3, #1
 801ef20:	60fa      	str	r2, [r7, #12]
 801ef22:	78fa      	ldrb	r2, [r7, #3]
 801ef24:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801ef26:	883b      	ldrh	r3, [r7, #0]
 801ef28:	1e5a      	subs	r2, r3, #1
 801ef2a:	803a      	strh	r2, [r7, #0]
 801ef2c:	2b00      	cmp	r3, #0
 801ef2e:	d1f5      	bne.n	801ef1c <UTIL_MEM_set_8+0x16>
  }
}
 801ef30:	bf00      	nop
 801ef32:	bf00      	nop
 801ef34:	3714      	adds	r7, #20
 801ef36:	46bd      	mov	sp, r7
 801ef38:	bc80      	pop	{r7}
 801ef3a:	4770      	bx	lr

0801ef3c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801ef3c:	b082      	sub	sp, #8
 801ef3e:	b480      	push	{r7}
 801ef40:	b087      	sub	sp, #28
 801ef42:	af00      	add	r7, sp, #0
 801ef44:	60f8      	str	r0, [r7, #12]
 801ef46:	1d38      	adds	r0, r7, #4
 801ef48:	e880 0006 	stmia.w	r0, {r1, r2}
 801ef4c:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801ef4e:	2300      	movs	r3, #0
 801ef50:	613b      	str	r3, [r7, #16]
 801ef52:	2300      	movs	r3, #0
 801ef54:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801ef56:	687a      	ldr	r2, [r7, #4]
 801ef58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef5a:	4413      	add	r3, r2
 801ef5c:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801ef5e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801ef62:	b29a      	uxth	r2, r3
 801ef64:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801ef68:	b29b      	uxth	r3, r3
 801ef6a:	4413      	add	r3, r2
 801ef6c:	b29b      	uxth	r3, r3
 801ef6e:	b21b      	sxth	r3, r3
 801ef70:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801ef72:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ef76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801ef7a:	db0a      	blt.n	801ef92 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801ef7c:	693b      	ldr	r3, [r7, #16]
 801ef7e:	3301      	adds	r3, #1
 801ef80:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801ef82:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ef86:	b29b      	uxth	r3, r3
 801ef88:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801ef8c:	b29b      	uxth	r3, r3
 801ef8e:	b21b      	sxth	r3, r3
 801ef90:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801ef92:	68fb      	ldr	r3, [r7, #12]
 801ef94:	461a      	mov	r2, r3
 801ef96:	f107 0310 	add.w	r3, r7, #16
 801ef9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ef9e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801efa2:	68f8      	ldr	r0, [r7, #12]
 801efa4:	371c      	adds	r7, #28
 801efa6:	46bd      	mov	sp, r7
 801efa8:	bc80      	pop	{r7}
 801efaa:	b002      	add	sp, #8
 801efac:	4770      	bx	lr

0801efae <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801efae:	b082      	sub	sp, #8
 801efb0:	b480      	push	{r7}
 801efb2:	b087      	sub	sp, #28
 801efb4:	af00      	add	r7, sp, #0
 801efb6:	60f8      	str	r0, [r7, #12]
 801efb8:	1d38      	adds	r0, r7, #4
 801efba:	e880 0006 	stmia.w	r0, {r1, r2}
 801efbe:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801efc0:	2300      	movs	r3, #0
 801efc2:	613b      	str	r3, [r7, #16]
 801efc4:	2300      	movs	r3, #0
 801efc6:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801efc8:	687a      	ldr	r2, [r7, #4]
 801efca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801efcc:	1ad3      	subs	r3, r2, r3
 801efce:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801efd0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801efd4:	b29a      	uxth	r2, r3
 801efd6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801efda:	b29b      	uxth	r3, r3
 801efdc:	1ad3      	subs	r3, r2, r3
 801efde:	b29b      	uxth	r3, r3
 801efe0:	b21b      	sxth	r3, r3
 801efe2:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801efe4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801efe8:	2b00      	cmp	r3, #0
 801efea:	da0a      	bge.n	801f002 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801efec:	693b      	ldr	r3, [r7, #16]
 801efee:	3b01      	subs	r3, #1
 801eff0:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801eff2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801eff6:	b29b      	uxth	r3, r3
 801eff8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801effc:	b29b      	uxth	r3, r3
 801effe:	b21b      	sxth	r3, r3
 801f000:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801f002:	68fb      	ldr	r3, [r7, #12]
 801f004:	461a      	mov	r2, r3
 801f006:	f107 0310 	add.w	r3, r7, #16
 801f00a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f00e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f012:	68f8      	ldr	r0, [r7, #12]
 801f014:	371c      	adds	r7, #28
 801f016:	46bd      	mov	sp, r7
 801f018:	bc80      	pop	{r7}
 801f01a:	b002      	add	sp, #8
 801f01c:	4770      	bx	lr
	...

0801f020 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801f020:	b580      	push	{r7, lr}
 801f022:	b088      	sub	sp, #32
 801f024:	af02      	add	r7, sp, #8
 801f026:	463b      	mov	r3, r7
 801f028:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801f02c:	2300      	movs	r3, #0
 801f02e:	60bb      	str	r3, [r7, #8]
 801f030:	2300      	movs	r3, #0
 801f032:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801f034:	4b10      	ldr	r3, [pc, #64]	; (801f078 <SysTimeSet+0x58>)
 801f036:	691b      	ldr	r3, [r3, #16]
 801f038:	f107 0208 	add.w	r2, r7, #8
 801f03c:	3204      	adds	r2, #4
 801f03e:	4610      	mov	r0, r2
 801f040:	4798      	blx	r3
 801f042:	4603      	mov	r3, r0
 801f044:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801f046:	f107 0010 	add.w	r0, r7, #16
 801f04a:	68fb      	ldr	r3, [r7, #12]
 801f04c:	9300      	str	r3, [sp, #0]
 801f04e:	68bb      	ldr	r3, [r7, #8]
 801f050:	463a      	mov	r2, r7
 801f052:	ca06      	ldmia	r2, {r1, r2}
 801f054:	f7ff ffab 	bl	801efae <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801f058:	4b07      	ldr	r3, [pc, #28]	; (801f078 <SysTimeSet+0x58>)
 801f05a:	681b      	ldr	r3, [r3, #0]
 801f05c:	693a      	ldr	r2, [r7, #16]
 801f05e:	4610      	mov	r0, r2
 801f060:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801f062:	4b05      	ldr	r3, [pc, #20]	; (801f078 <SysTimeSet+0x58>)
 801f064:	689b      	ldr	r3, [r3, #8]
 801f066:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801f06a:	4610      	mov	r0, r2
 801f06c:	4798      	blx	r3
}
 801f06e:	bf00      	nop
 801f070:	3718      	adds	r7, #24
 801f072:	46bd      	mov	sp, r7
 801f074:	bd80      	pop	{r7, pc}
 801f076:	bf00      	nop
 801f078:	08021998 	.word	0x08021998

0801f07c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801f07c:	b580      	push	{r7, lr}
 801f07e:	b08a      	sub	sp, #40	; 0x28
 801f080:	af02      	add	r7, sp, #8
 801f082:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801f084:	2300      	movs	r3, #0
 801f086:	61bb      	str	r3, [r7, #24]
 801f088:	2300      	movs	r3, #0
 801f08a:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801f08c:	2300      	movs	r3, #0
 801f08e:	613b      	str	r3, [r7, #16]
 801f090:	2300      	movs	r3, #0
 801f092:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801f094:	4b14      	ldr	r3, [pc, #80]	; (801f0e8 <SysTimeGet+0x6c>)
 801f096:	691b      	ldr	r3, [r3, #16]
 801f098:	f107 0218 	add.w	r2, r7, #24
 801f09c:	3204      	adds	r2, #4
 801f09e:	4610      	mov	r0, r2
 801f0a0:	4798      	blx	r3
 801f0a2:	4603      	mov	r3, r0
 801f0a4:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801f0a6:	4b10      	ldr	r3, [pc, #64]	; (801f0e8 <SysTimeGet+0x6c>)
 801f0a8:	68db      	ldr	r3, [r3, #12]
 801f0aa:	4798      	blx	r3
 801f0ac:	4603      	mov	r3, r0
 801f0ae:	b21b      	sxth	r3, r3
 801f0b0:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801f0b2:	4b0d      	ldr	r3, [pc, #52]	; (801f0e8 <SysTimeGet+0x6c>)
 801f0b4:	685b      	ldr	r3, [r3, #4]
 801f0b6:	4798      	blx	r3
 801f0b8:	4603      	mov	r3, r0
 801f0ba:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801f0bc:	f107 0010 	add.w	r0, r7, #16
 801f0c0:	69fb      	ldr	r3, [r7, #28]
 801f0c2:	9300      	str	r3, [sp, #0]
 801f0c4:	69bb      	ldr	r3, [r7, #24]
 801f0c6:	f107 0208 	add.w	r2, r7, #8
 801f0ca:	ca06      	ldmia	r2, {r1, r2}
 801f0cc:	f7ff ff36 	bl	801ef3c <SysTimeAdd>

  return sysTime;
 801f0d0:	687b      	ldr	r3, [r7, #4]
 801f0d2:	461a      	mov	r2, r3
 801f0d4:	f107 0310 	add.w	r3, r7, #16
 801f0d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f0dc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f0e0:	6878      	ldr	r0, [r7, #4]
 801f0e2:	3720      	adds	r7, #32
 801f0e4:	46bd      	mov	sp, r7
 801f0e6:	bd80      	pop	{r7, pc}
 801f0e8:	08021998 	.word	0x08021998

0801f0ec <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801f0ec:	b580      	push	{r7, lr}
 801f0ee:	b084      	sub	sp, #16
 801f0f0:	af00      	add	r7, sp, #0
 801f0f2:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801f0f4:	2300      	movs	r3, #0
 801f0f6:	60bb      	str	r3, [r7, #8]
 801f0f8:	2300      	movs	r3, #0
 801f0fa:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801f0fc:	4b0a      	ldr	r3, [pc, #40]	; (801f128 <SysTimeGetMcuTime+0x3c>)
 801f0fe:	691b      	ldr	r3, [r3, #16]
 801f100:	f107 0208 	add.w	r2, r7, #8
 801f104:	3204      	adds	r2, #4
 801f106:	4610      	mov	r0, r2
 801f108:	4798      	blx	r3
 801f10a:	4603      	mov	r3, r0
 801f10c:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801f10e:	687b      	ldr	r3, [r7, #4]
 801f110:	461a      	mov	r2, r3
 801f112:	f107 0308 	add.w	r3, r7, #8
 801f116:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f11a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f11e:	6878      	ldr	r0, [r7, #4]
 801f120:	3710      	adds	r7, #16
 801f122:	46bd      	mov	sp, r7
 801f124:	bd80      	pop	{r7, pc}
 801f126:	bf00      	nop
 801f128:	08021998 	.word	0x08021998

0801f12c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801f12c:	b580      	push	{r7, lr}
 801f12e:	b088      	sub	sp, #32
 801f130:	af02      	add	r7, sp, #8
 801f132:	463b      	mov	r3, r7
 801f134:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801f138:	4b0f      	ldr	r3, [pc, #60]	; (801f178 <SysTimeToMs+0x4c>)
 801f13a:	68db      	ldr	r3, [r3, #12]
 801f13c:	4798      	blx	r3
 801f13e:	4603      	mov	r3, r0
 801f140:	b21b      	sxth	r3, r3
 801f142:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801f144:	4b0c      	ldr	r3, [pc, #48]	; (801f178 <SysTimeToMs+0x4c>)
 801f146:	685b      	ldr	r3, [r3, #4]
 801f148:	4798      	blx	r3
 801f14a:	4603      	mov	r3, r0
 801f14c:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801f14e:	f107 0008 	add.w	r0, r7, #8
 801f152:	697b      	ldr	r3, [r7, #20]
 801f154:	9300      	str	r3, [sp, #0]
 801f156:	693b      	ldr	r3, [r7, #16]
 801f158:	463a      	mov	r2, r7
 801f15a:	ca06      	ldmia	r2, {r1, r2}
 801f15c:	f7ff ff27 	bl	801efae <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801f160:	68bb      	ldr	r3, [r7, #8]
 801f162:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801f166:	fb02 f303 	mul.w	r3, r2, r3
 801f16a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801f16e:	4413      	add	r3, r2
}
 801f170:	4618      	mov	r0, r3
 801f172:	3718      	adds	r7, #24
 801f174:	46bd      	mov	sp, r7
 801f176:	bd80      	pop	{r7, pc}
 801f178:	08021998 	.word	0x08021998

0801f17c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801f17c:	b580      	push	{r7, lr}
 801f17e:	b08a      	sub	sp, #40	; 0x28
 801f180:	af02      	add	r7, sp, #8
 801f182:	6078      	str	r0, [r7, #4]
 801f184:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801f186:	683b      	ldr	r3, [r7, #0]
 801f188:	4a19      	ldr	r2, [pc, #100]	; (801f1f0 <SysTimeFromMs+0x74>)
 801f18a:	fba2 2303 	umull	r2, r3, r2, r3
 801f18e:	099b      	lsrs	r3, r3, #6
 801f190:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801f192:	69fb      	ldr	r3, [r7, #28]
 801f194:	617b      	str	r3, [r7, #20]
 801f196:	683b      	ldr	r3, [r7, #0]
 801f198:	b29a      	uxth	r2, r3
 801f19a:	69fb      	ldr	r3, [r7, #28]
 801f19c:	b29b      	uxth	r3, r3
 801f19e:	4619      	mov	r1, r3
 801f1a0:	0149      	lsls	r1, r1, #5
 801f1a2:	1ac9      	subs	r1, r1, r3
 801f1a4:	0089      	lsls	r1, r1, #2
 801f1a6:	440b      	add	r3, r1
 801f1a8:	00db      	lsls	r3, r3, #3
 801f1aa:	b29b      	uxth	r3, r3
 801f1ac:	1ad3      	subs	r3, r2, r3
 801f1ae:	b29b      	uxth	r3, r3
 801f1b0:	b21b      	sxth	r3, r3
 801f1b2:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801f1b4:	f107 030c 	add.w	r3, r7, #12
 801f1b8:	2200      	movs	r2, #0
 801f1ba:	601a      	str	r2, [r3, #0]
 801f1bc:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801f1be:	4b0d      	ldr	r3, [pc, #52]	; (801f1f4 <SysTimeFromMs+0x78>)
 801f1c0:	68db      	ldr	r3, [r3, #12]
 801f1c2:	4798      	blx	r3
 801f1c4:	4603      	mov	r3, r0
 801f1c6:	b21b      	sxth	r3, r3
 801f1c8:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801f1ca:	4b0a      	ldr	r3, [pc, #40]	; (801f1f4 <SysTimeFromMs+0x78>)
 801f1cc:	685b      	ldr	r3, [r3, #4]
 801f1ce:	4798      	blx	r3
 801f1d0:	4603      	mov	r3, r0
 801f1d2:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801f1d4:	6878      	ldr	r0, [r7, #4]
 801f1d6:	693b      	ldr	r3, [r7, #16]
 801f1d8:	9300      	str	r3, [sp, #0]
 801f1da:	68fb      	ldr	r3, [r7, #12]
 801f1dc:	f107 0214 	add.w	r2, r7, #20
 801f1e0:	ca06      	ldmia	r2, {r1, r2}
 801f1e2:	f7ff feab 	bl	801ef3c <SysTimeAdd>
}
 801f1e6:	6878      	ldr	r0, [r7, #4]
 801f1e8:	3720      	adds	r7, #32
 801f1ea:	46bd      	mov	sp, r7
 801f1ec:	bd80      	pop	{r7, pc}
 801f1ee:	bf00      	nop
 801f1f0:	10624dd3 	.word	0x10624dd3
 801f1f4:	08021998 	.word	0x08021998

0801f1f8 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801f1f8:	b480      	push	{r7}
 801f1fa:	b085      	sub	sp, #20
 801f1fc:	af00      	add	r7, sp, #0
 801f1fe:	6078      	str	r0, [r7, #4]
  int i = 0;
 801f200:	2300      	movs	r3, #0
 801f202:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801f204:	e00e      	b.n	801f224 <ee_skip_atoi+0x2c>
 801f206:	68fa      	ldr	r2, [r7, #12]
 801f208:	4613      	mov	r3, r2
 801f20a:	009b      	lsls	r3, r3, #2
 801f20c:	4413      	add	r3, r2
 801f20e:	005b      	lsls	r3, r3, #1
 801f210:	4618      	mov	r0, r3
 801f212:	687b      	ldr	r3, [r7, #4]
 801f214:	681b      	ldr	r3, [r3, #0]
 801f216:	1c59      	adds	r1, r3, #1
 801f218:	687a      	ldr	r2, [r7, #4]
 801f21a:	6011      	str	r1, [r2, #0]
 801f21c:	781b      	ldrb	r3, [r3, #0]
 801f21e:	4403      	add	r3, r0
 801f220:	3b30      	subs	r3, #48	; 0x30
 801f222:	60fb      	str	r3, [r7, #12]
 801f224:	687b      	ldr	r3, [r7, #4]
 801f226:	681b      	ldr	r3, [r3, #0]
 801f228:	781b      	ldrb	r3, [r3, #0]
 801f22a:	2b2f      	cmp	r3, #47	; 0x2f
 801f22c:	d904      	bls.n	801f238 <ee_skip_atoi+0x40>
 801f22e:	687b      	ldr	r3, [r7, #4]
 801f230:	681b      	ldr	r3, [r3, #0]
 801f232:	781b      	ldrb	r3, [r3, #0]
 801f234:	2b39      	cmp	r3, #57	; 0x39
 801f236:	d9e6      	bls.n	801f206 <ee_skip_atoi+0xe>
  return i;
 801f238:	68fb      	ldr	r3, [r7, #12]
}
 801f23a:	4618      	mov	r0, r3
 801f23c:	3714      	adds	r7, #20
 801f23e:	46bd      	mov	sp, r7
 801f240:	bc80      	pop	{r7}
 801f242:	4770      	bx	lr

0801f244 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801f244:	b480      	push	{r7}
 801f246:	b099      	sub	sp, #100	; 0x64
 801f248:	af00      	add	r7, sp, #0
 801f24a:	60f8      	str	r0, [r7, #12]
 801f24c:	60b9      	str	r1, [r7, #8]
 801f24e:	607a      	str	r2, [r7, #4]
 801f250:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801f252:	4b71      	ldr	r3, [pc, #452]	; (801f418 <ee_number+0x1d4>)
 801f254:	681b      	ldr	r3, [r3, #0]
 801f256:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801f258:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f25a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f25e:	2b00      	cmp	r3, #0
 801f260:	d002      	beq.n	801f268 <ee_number+0x24>
 801f262:	4b6e      	ldr	r3, [pc, #440]	; (801f41c <ee_number+0x1d8>)
 801f264:	681b      	ldr	r3, [r3, #0]
 801f266:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801f268:	683b      	ldr	r3, [r7, #0]
 801f26a:	2b01      	cmp	r3, #1
 801f26c:	dd02      	ble.n	801f274 <ee_number+0x30>
 801f26e:	683b      	ldr	r3, [r7, #0]
 801f270:	2b24      	cmp	r3, #36	; 0x24
 801f272:	dd01      	ble.n	801f278 <ee_number+0x34>
 801f274:	2300      	movs	r3, #0
 801f276:	e0ca      	b.n	801f40e <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801f278:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f27a:	f003 0301 	and.w	r3, r3, #1
 801f27e:	2b00      	cmp	r3, #0
 801f280:	d001      	beq.n	801f286 <ee_number+0x42>
 801f282:	2330      	movs	r3, #48	; 0x30
 801f284:	e000      	b.n	801f288 <ee_number+0x44>
 801f286:	2320      	movs	r3, #32
 801f288:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801f28c:	2300      	movs	r3, #0
 801f28e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801f292:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f294:	f003 0302 	and.w	r3, r3, #2
 801f298:	2b00      	cmp	r3, #0
 801f29a:	d00b      	beq.n	801f2b4 <ee_number+0x70>
  {
    if (num < 0)
 801f29c:	687b      	ldr	r3, [r7, #4]
 801f29e:	2b00      	cmp	r3, #0
 801f2a0:	da08      	bge.n	801f2b4 <ee_number+0x70>
    {
      sign = '-';
 801f2a2:	232d      	movs	r3, #45	; 0x2d
 801f2a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801f2a8:	687b      	ldr	r3, [r7, #4]
 801f2aa:	425b      	negs	r3, r3
 801f2ac:	607b      	str	r3, [r7, #4]
      size--;
 801f2ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801f2b0:	3b01      	subs	r3, #1
 801f2b2:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801f2b4:	2300      	movs	r3, #0
 801f2b6:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801f2b8:	687b      	ldr	r3, [r7, #4]
 801f2ba:	2b00      	cmp	r3, #0
 801f2bc:	d11e      	bne.n	801f2fc <ee_number+0xb8>
    tmp[i++] = '0';
 801f2be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f2c0:	1c5a      	adds	r2, r3, #1
 801f2c2:	657a      	str	r2, [r7, #84]	; 0x54
 801f2c4:	3360      	adds	r3, #96	; 0x60
 801f2c6:	443b      	add	r3, r7
 801f2c8:	2230      	movs	r2, #48	; 0x30
 801f2ca:	f803 2c50 	strb.w	r2, [r3, #-80]
 801f2ce:	e018      	b.n	801f302 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801f2d0:	687b      	ldr	r3, [r7, #4]
 801f2d2:	683a      	ldr	r2, [r7, #0]
 801f2d4:	fbb3 f1f2 	udiv	r1, r3, r2
 801f2d8:	fb01 f202 	mul.w	r2, r1, r2
 801f2dc:	1a9b      	subs	r3, r3, r2
 801f2de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801f2e0:	441a      	add	r2, r3
 801f2e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f2e4:	1c59      	adds	r1, r3, #1
 801f2e6:	6579      	str	r1, [r7, #84]	; 0x54
 801f2e8:	7812      	ldrb	r2, [r2, #0]
 801f2ea:	3360      	adds	r3, #96	; 0x60
 801f2ec:	443b      	add	r3, r7
 801f2ee:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801f2f2:	687a      	ldr	r2, [r7, #4]
 801f2f4:	683b      	ldr	r3, [r7, #0]
 801f2f6:	fbb2 f3f3 	udiv	r3, r2, r3
 801f2fa:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801f2fc:	687b      	ldr	r3, [r7, #4]
 801f2fe:	2b00      	cmp	r3, #0
 801f300:	d1e6      	bne.n	801f2d0 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801f302:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f306:	429a      	cmp	r2, r3
 801f308:	dd01      	ble.n	801f30e <ee_number+0xca>
 801f30a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f30c:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801f30e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801f310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f312:	1ad3      	subs	r3, r2, r3
 801f314:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801f316:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f318:	f003 0301 	and.w	r3, r3, #1
 801f31c:	2b00      	cmp	r3, #0
 801f31e:	d112      	bne.n	801f346 <ee_number+0x102>
 801f320:	e00c      	b.n	801f33c <ee_number+0xf8>
 801f322:	68fb      	ldr	r3, [r7, #12]
 801f324:	1c5a      	adds	r2, r3, #1
 801f326:	60fa      	str	r2, [r7, #12]
 801f328:	2220      	movs	r2, #32
 801f32a:	701a      	strb	r2, [r3, #0]
 801f32c:	68bb      	ldr	r3, [r7, #8]
 801f32e:	3b01      	subs	r3, #1
 801f330:	60bb      	str	r3, [r7, #8]
 801f332:	68bb      	ldr	r3, [r7, #8]
 801f334:	2b00      	cmp	r3, #0
 801f336:	d101      	bne.n	801f33c <ee_number+0xf8>
 801f338:	68fb      	ldr	r3, [r7, #12]
 801f33a:	e068      	b.n	801f40e <ee_number+0x1ca>
 801f33c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801f33e:	1e5a      	subs	r2, r3, #1
 801f340:	66ba      	str	r2, [r7, #104]	; 0x68
 801f342:	2b00      	cmp	r3, #0
 801f344:	dced      	bgt.n	801f322 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801f346:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801f34a:	2b00      	cmp	r3, #0
 801f34c:	d01b      	beq.n	801f386 <ee_number+0x142>
 801f34e:	68fb      	ldr	r3, [r7, #12]
 801f350:	1c5a      	adds	r2, r3, #1
 801f352:	60fa      	str	r2, [r7, #12]
 801f354:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801f358:	701a      	strb	r2, [r3, #0]
 801f35a:	68bb      	ldr	r3, [r7, #8]
 801f35c:	3b01      	subs	r3, #1
 801f35e:	60bb      	str	r3, [r7, #8]
 801f360:	68bb      	ldr	r3, [r7, #8]
 801f362:	2b00      	cmp	r3, #0
 801f364:	d10f      	bne.n	801f386 <ee_number+0x142>
 801f366:	68fb      	ldr	r3, [r7, #12]
 801f368:	e051      	b.n	801f40e <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801f36a:	68fb      	ldr	r3, [r7, #12]
 801f36c:	1c5a      	adds	r2, r3, #1
 801f36e:	60fa      	str	r2, [r7, #12]
 801f370:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801f374:	701a      	strb	r2, [r3, #0]
 801f376:	68bb      	ldr	r3, [r7, #8]
 801f378:	3b01      	subs	r3, #1
 801f37a:	60bb      	str	r3, [r7, #8]
 801f37c:	68bb      	ldr	r3, [r7, #8]
 801f37e:	2b00      	cmp	r3, #0
 801f380:	d101      	bne.n	801f386 <ee_number+0x142>
 801f382:	68fb      	ldr	r3, [r7, #12]
 801f384:	e043      	b.n	801f40e <ee_number+0x1ca>
 801f386:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801f388:	1e5a      	subs	r2, r3, #1
 801f38a:	66ba      	str	r2, [r7, #104]	; 0x68
 801f38c:	2b00      	cmp	r3, #0
 801f38e:	dcec      	bgt.n	801f36a <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801f390:	e00c      	b.n	801f3ac <ee_number+0x168>
 801f392:	68fb      	ldr	r3, [r7, #12]
 801f394:	1c5a      	adds	r2, r3, #1
 801f396:	60fa      	str	r2, [r7, #12]
 801f398:	2230      	movs	r2, #48	; 0x30
 801f39a:	701a      	strb	r2, [r3, #0]
 801f39c:	68bb      	ldr	r3, [r7, #8]
 801f39e:	3b01      	subs	r3, #1
 801f3a0:	60bb      	str	r3, [r7, #8]
 801f3a2:	68bb      	ldr	r3, [r7, #8]
 801f3a4:	2b00      	cmp	r3, #0
 801f3a6:	d101      	bne.n	801f3ac <ee_number+0x168>
 801f3a8:	68fb      	ldr	r3, [r7, #12]
 801f3aa:	e030      	b.n	801f40e <ee_number+0x1ca>
 801f3ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f3ae:	1e5a      	subs	r2, r3, #1
 801f3b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 801f3b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f3b4:	429a      	cmp	r2, r3
 801f3b6:	dbec      	blt.n	801f392 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801f3b8:	e010      	b.n	801f3dc <ee_number+0x198>
 801f3ba:	68fb      	ldr	r3, [r7, #12]
 801f3bc:	1c5a      	adds	r2, r3, #1
 801f3be:	60fa      	str	r2, [r7, #12]
 801f3c0:	f107 0110 	add.w	r1, r7, #16
 801f3c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f3c6:	440a      	add	r2, r1
 801f3c8:	7812      	ldrb	r2, [r2, #0]
 801f3ca:	701a      	strb	r2, [r3, #0]
 801f3cc:	68bb      	ldr	r3, [r7, #8]
 801f3ce:	3b01      	subs	r3, #1
 801f3d0:	60bb      	str	r3, [r7, #8]
 801f3d2:	68bb      	ldr	r3, [r7, #8]
 801f3d4:	2b00      	cmp	r3, #0
 801f3d6:	d101      	bne.n	801f3dc <ee_number+0x198>
 801f3d8:	68fb      	ldr	r3, [r7, #12]
 801f3da:	e018      	b.n	801f40e <ee_number+0x1ca>
 801f3dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f3de:	1e5a      	subs	r2, r3, #1
 801f3e0:	657a      	str	r2, [r7, #84]	; 0x54
 801f3e2:	2b00      	cmp	r3, #0
 801f3e4:	dce9      	bgt.n	801f3ba <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801f3e6:	e00c      	b.n	801f402 <ee_number+0x1be>
 801f3e8:	68fb      	ldr	r3, [r7, #12]
 801f3ea:	1c5a      	adds	r2, r3, #1
 801f3ec:	60fa      	str	r2, [r7, #12]
 801f3ee:	2220      	movs	r2, #32
 801f3f0:	701a      	strb	r2, [r3, #0]
 801f3f2:	68bb      	ldr	r3, [r7, #8]
 801f3f4:	3b01      	subs	r3, #1
 801f3f6:	60bb      	str	r3, [r7, #8]
 801f3f8:	68bb      	ldr	r3, [r7, #8]
 801f3fa:	2b00      	cmp	r3, #0
 801f3fc:	d101      	bne.n	801f402 <ee_number+0x1be>
 801f3fe:	68fb      	ldr	r3, [r7, #12]
 801f400:	e005      	b.n	801f40e <ee_number+0x1ca>
 801f402:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801f404:	1e5a      	subs	r2, r3, #1
 801f406:	66ba      	str	r2, [r7, #104]	; 0x68
 801f408:	2b00      	cmp	r3, #0
 801f40a:	dced      	bgt.n	801f3e8 <ee_number+0x1a4>

  return str;
 801f40c:	68fb      	ldr	r3, [r7, #12]
}
 801f40e:	4618      	mov	r0, r3
 801f410:	3764      	adds	r7, #100	; 0x64
 801f412:	46bd      	mov	sp, r7
 801f414:	bc80      	pop	{r7}
 801f416:	4770      	bx	lr
 801f418:	20000138 	.word	0x20000138
 801f41c:	2000013c 	.word	0x2000013c

0801f420 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801f420:	b580      	push	{r7, lr}
 801f422:	b092      	sub	sp, #72	; 0x48
 801f424:	af04      	add	r7, sp, #16
 801f426:	60f8      	str	r0, [r7, #12]
 801f428:	60b9      	str	r1, [r7, #8]
 801f42a:	607a      	str	r2, [r7, #4]
 801f42c:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801f42e:	68bb      	ldr	r3, [r7, #8]
 801f430:	2b00      	cmp	r3, #0
 801f432:	dc01      	bgt.n	801f438 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801f434:	2300      	movs	r3, #0
 801f436:	e13e      	b.n	801f6b6 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801f438:	68fb      	ldr	r3, [r7, #12]
 801f43a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f43c:	e128      	b.n	801f690 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801f43e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f440:	68fb      	ldr	r3, [r7, #12]
 801f442:	1ad2      	subs	r2, r2, r3
 801f444:	68bb      	ldr	r3, [r7, #8]
 801f446:	3b01      	subs	r3, #1
 801f448:	429a      	cmp	r2, r3
 801f44a:	f280 812e 	bge.w	801f6aa <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801f44e:	687b      	ldr	r3, [r7, #4]
 801f450:	781b      	ldrb	r3, [r3, #0]
 801f452:	2b25      	cmp	r3, #37	; 0x25
 801f454:	d006      	beq.n	801f464 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801f456:	687a      	ldr	r2, [r7, #4]
 801f458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f45a:	1c59      	adds	r1, r3, #1
 801f45c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801f45e:	7812      	ldrb	r2, [r2, #0]
 801f460:	701a      	strb	r2, [r3, #0]
      continue;
 801f462:	e112      	b.n	801f68a <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801f464:	2300      	movs	r3, #0
 801f466:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801f468:	687b      	ldr	r3, [r7, #4]
 801f46a:	3301      	adds	r3, #1
 801f46c:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801f46e:	687b      	ldr	r3, [r7, #4]
 801f470:	781b      	ldrb	r3, [r3, #0]
 801f472:	2b30      	cmp	r3, #48	; 0x30
 801f474:	d103      	bne.n	801f47e <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801f476:	6a3b      	ldr	r3, [r7, #32]
 801f478:	f043 0301 	orr.w	r3, r3, #1
 801f47c:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801f47e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f482:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801f484:	687b      	ldr	r3, [r7, #4]
 801f486:	781b      	ldrb	r3, [r3, #0]
 801f488:	2b2f      	cmp	r3, #47	; 0x2f
 801f48a:	d908      	bls.n	801f49e <tiny_vsnprintf_like+0x7e>
 801f48c:	687b      	ldr	r3, [r7, #4]
 801f48e:	781b      	ldrb	r3, [r3, #0]
 801f490:	2b39      	cmp	r3, #57	; 0x39
 801f492:	d804      	bhi.n	801f49e <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801f494:	1d3b      	adds	r3, r7, #4
 801f496:	4618      	mov	r0, r3
 801f498:	f7ff feae 	bl	801f1f8 <ee_skip_atoi>
 801f49c:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801f49e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f4a2:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801f4a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f4a8:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801f4aa:	230a      	movs	r3, #10
 801f4ac:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801f4ae:	687b      	ldr	r3, [r7, #4]
 801f4b0:	781b      	ldrb	r3, [r3, #0]
 801f4b2:	3b58      	subs	r3, #88	; 0x58
 801f4b4:	2b20      	cmp	r3, #32
 801f4b6:	f200 8094 	bhi.w	801f5e2 <tiny_vsnprintf_like+0x1c2>
 801f4ba:	a201      	add	r2, pc, #4	; (adr r2, 801f4c0 <tiny_vsnprintf_like+0xa0>)
 801f4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f4c0:	0801f5cb 	.word	0x0801f5cb
 801f4c4:	0801f5e3 	.word	0x0801f5e3
 801f4c8:	0801f5e3 	.word	0x0801f5e3
 801f4cc:	0801f5e3 	.word	0x0801f5e3
 801f4d0:	0801f5e3 	.word	0x0801f5e3
 801f4d4:	0801f5e3 	.word	0x0801f5e3
 801f4d8:	0801f5e3 	.word	0x0801f5e3
 801f4dc:	0801f5e3 	.word	0x0801f5e3
 801f4e0:	0801f5e3 	.word	0x0801f5e3
 801f4e4:	0801f5e3 	.word	0x0801f5e3
 801f4e8:	0801f5e3 	.word	0x0801f5e3
 801f4ec:	0801f54f 	.word	0x0801f54f
 801f4f0:	0801f5d9 	.word	0x0801f5d9
 801f4f4:	0801f5e3 	.word	0x0801f5e3
 801f4f8:	0801f5e3 	.word	0x0801f5e3
 801f4fc:	0801f5e3 	.word	0x0801f5e3
 801f500:	0801f5e3 	.word	0x0801f5e3
 801f504:	0801f5d9 	.word	0x0801f5d9
 801f508:	0801f5e3 	.word	0x0801f5e3
 801f50c:	0801f5e3 	.word	0x0801f5e3
 801f510:	0801f5e3 	.word	0x0801f5e3
 801f514:	0801f5e3 	.word	0x0801f5e3
 801f518:	0801f5e3 	.word	0x0801f5e3
 801f51c:	0801f5e3 	.word	0x0801f5e3
 801f520:	0801f5e3 	.word	0x0801f5e3
 801f524:	0801f5e3 	.word	0x0801f5e3
 801f528:	0801f5e3 	.word	0x0801f5e3
 801f52c:	0801f56f 	.word	0x0801f56f
 801f530:	0801f5e3 	.word	0x0801f5e3
 801f534:	0801f62f 	.word	0x0801f62f
 801f538:	0801f5e3 	.word	0x0801f5e3
 801f53c:	0801f5e3 	.word	0x0801f5e3
 801f540:	0801f5d3 	.word	0x0801f5d3
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801f544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f546:	1c5a      	adds	r2, r3, #1
 801f548:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f54a:	2220      	movs	r2, #32
 801f54c:	701a      	strb	r2, [r3, #0]
 801f54e:	69fb      	ldr	r3, [r7, #28]
 801f550:	3b01      	subs	r3, #1
 801f552:	61fb      	str	r3, [r7, #28]
 801f554:	69fb      	ldr	r3, [r7, #28]
 801f556:	2b00      	cmp	r3, #0
 801f558:	dcf4      	bgt.n	801f544 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801f55a:	683b      	ldr	r3, [r7, #0]
 801f55c:	1d1a      	adds	r2, r3, #4
 801f55e:	603a      	str	r2, [r7, #0]
 801f560:	6819      	ldr	r1, [r3, #0]
 801f562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f564:	1c5a      	adds	r2, r3, #1
 801f566:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f568:	b2ca      	uxtb	r2, r1
 801f56a:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801f56c:	e08d      	b.n	801f68a <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801f56e:	683b      	ldr	r3, [r7, #0]
 801f570:	1d1a      	adds	r2, r3, #4
 801f572:	603a      	str	r2, [r7, #0]
 801f574:	681b      	ldr	r3, [r3, #0]
 801f576:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801f578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f57a:	2b00      	cmp	r3, #0
 801f57c:	d101      	bne.n	801f582 <tiny_vsnprintf_like+0x162>
 801f57e:	4b50      	ldr	r3, [pc, #320]	; (801f6c0 <tiny_vsnprintf_like+0x2a0>)
 801f580:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801f582:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f584:	f7e0 fdfc 	bl	8000180 <strlen>
 801f588:	4603      	mov	r3, r0
 801f58a:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801f58c:	e004      	b.n	801f598 <tiny_vsnprintf_like+0x178>
 801f58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f590:	1c5a      	adds	r2, r3, #1
 801f592:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f594:	2220      	movs	r2, #32
 801f596:	701a      	strb	r2, [r3, #0]
 801f598:	69fb      	ldr	r3, [r7, #28]
 801f59a:	1e5a      	subs	r2, r3, #1
 801f59c:	61fa      	str	r2, [r7, #28]
 801f59e:	693a      	ldr	r2, [r7, #16]
 801f5a0:	429a      	cmp	r2, r3
 801f5a2:	dbf4      	blt.n	801f58e <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801f5a4:	2300      	movs	r3, #0
 801f5a6:	62bb      	str	r3, [r7, #40]	; 0x28
 801f5a8:	e00a      	b.n	801f5c0 <tiny_vsnprintf_like+0x1a0>
 801f5aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f5ac:	1c53      	adds	r3, r2, #1
 801f5ae:	627b      	str	r3, [r7, #36]	; 0x24
 801f5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5b2:	1c59      	adds	r1, r3, #1
 801f5b4:	62f9      	str	r1, [r7, #44]	; 0x2c
 801f5b6:	7812      	ldrb	r2, [r2, #0]
 801f5b8:	701a      	strb	r2, [r3, #0]
 801f5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f5bc:	3301      	adds	r3, #1
 801f5be:	62bb      	str	r3, [r7, #40]	; 0x28
 801f5c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f5c2:	693b      	ldr	r3, [r7, #16]
 801f5c4:	429a      	cmp	r2, r3
 801f5c6:	dbf0      	blt.n	801f5aa <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801f5c8:	e05f      	b.n	801f68a <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801f5ca:	6a3b      	ldr	r3, [r7, #32]
 801f5cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f5d0:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801f5d2:	2310      	movs	r3, #16
 801f5d4:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801f5d6:	e02b      	b.n	801f630 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801f5d8:	6a3b      	ldr	r3, [r7, #32]
 801f5da:	f043 0302 	orr.w	r3, r3, #2
 801f5de:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801f5e0:	e025      	b.n	801f62e <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801f5e2:	687b      	ldr	r3, [r7, #4]
 801f5e4:	781b      	ldrb	r3, [r3, #0]
 801f5e6:	2b25      	cmp	r3, #37	; 0x25
 801f5e8:	d004      	beq.n	801f5f4 <tiny_vsnprintf_like+0x1d4>
 801f5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5ec:	1c5a      	adds	r2, r3, #1
 801f5ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f5f0:	2225      	movs	r2, #37	; 0x25
 801f5f2:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801f5f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f5f6:	68fb      	ldr	r3, [r7, #12]
 801f5f8:	1ad2      	subs	r2, r2, r3
 801f5fa:	68bb      	ldr	r3, [r7, #8]
 801f5fc:	3b01      	subs	r3, #1
 801f5fe:	429a      	cmp	r2, r3
 801f600:	da16      	bge.n	801f630 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801f602:	687b      	ldr	r3, [r7, #4]
 801f604:	781b      	ldrb	r3, [r3, #0]
 801f606:	2b00      	cmp	r3, #0
 801f608:	d006      	beq.n	801f618 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801f60a:	687a      	ldr	r2, [r7, #4]
 801f60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f60e:	1c59      	adds	r1, r3, #1
 801f610:	62f9      	str	r1, [r7, #44]	; 0x2c
 801f612:	7812      	ldrb	r2, [r2, #0]
 801f614:	701a      	strb	r2, [r3, #0]
 801f616:	e002      	b.n	801f61e <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801f618:	687b      	ldr	r3, [r7, #4]
 801f61a:	3b01      	subs	r3, #1
 801f61c:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801f61e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f620:	68fb      	ldr	r3, [r7, #12]
 801f622:	1ad2      	subs	r2, r2, r3
 801f624:	68bb      	ldr	r3, [r7, #8]
 801f626:	3b01      	subs	r3, #1
 801f628:	429a      	cmp	r2, r3
 801f62a:	db2d      	blt.n	801f688 <tiny_vsnprintf_like+0x268>
 801f62c:	e000      	b.n	801f630 <tiny_vsnprintf_like+0x210>
        break;
 801f62e:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801f630:	697b      	ldr	r3, [r7, #20]
 801f632:	2b6c      	cmp	r3, #108	; 0x6c
 801f634:	d105      	bne.n	801f642 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801f636:	683b      	ldr	r3, [r7, #0]
 801f638:	1d1a      	adds	r2, r3, #4
 801f63a:	603a      	str	r2, [r7, #0]
 801f63c:	681b      	ldr	r3, [r3, #0]
 801f63e:	637b      	str	r3, [r7, #52]	; 0x34
 801f640:	e00f      	b.n	801f662 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801f642:	6a3b      	ldr	r3, [r7, #32]
 801f644:	f003 0302 	and.w	r3, r3, #2
 801f648:	2b00      	cmp	r3, #0
 801f64a:	d005      	beq.n	801f658 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801f64c:	683b      	ldr	r3, [r7, #0]
 801f64e:	1d1a      	adds	r2, r3, #4
 801f650:	603a      	str	r2, [r7, #0]
 801f652:	681b      	ldr	r3, [r3, #0]
 801f654:	637b      	str	r3, [r7, #52]	; 0x34
 801f656:	e004      	b.n	801f662 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801f658:	683b      	ldr	r3, [r7, #0]
 801f65a:	1d1a      	adds	r2, r3, #4
 801f65c:	603a      	str	r2, [r7, #0]
 801f65e:	681b      	ldr	r3, [r3, #0]
 801f660:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801f662:	68bb      	ldr	r3, [r7, #8]
 801f664:	1e5a      	subs	r2, r3, #1
 801f666:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f668:	68fb      	ldr	r3, [r7, #12]
 801f66a:	1acb      	subs	r3, r1, r3
 801f66c:	1ad1      	subs	r1, r2, r3
 801f66e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f670:	6a3b      	ldr	r3, [r7, #32]
 801f672:	9302      	str	r3, [sp, #8]
 801f674:	69bb      	ldr	r3, [r7, #24]
 801f676:	9301      	str	r3, [sp, #4]
 801f678:	69fb      	ldr	r3, [r7, #28]
 801f67a:	9300      	str	r3, [sp, #0]
 801f67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f67e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801f680:	f7ff fde0 	bl	801f244 <ee_number>
 801f684:	62f8      	str	r0, [r7, #44]	; 0x2c
 801f686:	e000      	b.n	801f68a <tiny_vsnprintf_like+0x26a>
        continue;
 801f688:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801f68a:	687b      	ldr	r3, [r7, #4]
 801f68c:	3301      	adds	r3, #1
 801f68e:	607b      	str	r3, [r7, #4]
 801f690:	687b      	ldr	r3, [r7, #4]
 801f692:	781b      	ldrb	r3, [r3, #0]
 801f694:	2b00      	cmp	r3, #0
 801f696:	f47f aed2 	bne.w	801f43e <tiny_vsnprintf_like+0x1e>
 801f69a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f69c:	68fb      	ldr	r3, [r7, #12]
 801f69e:	1ad2      	subs	r2, r2, r3
 801f6a0:	68bb      	ldr	r3, [r7, #8]
 801f6a2:	3b01      	subs	r3, #1
 801f6a4:	429a      	cmp	r2, r3
 801f6a6:	f6bf aeca 	bge.w	801f43e <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801f6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f6ac:	2200      	movs	r2, #0
 801f6ae:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801f6b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f6b2:	68fb      	ldr	r3, [r7, #12]
 801f6b4:	1ad3      	subs	r3, r2, r3
}
 801f6b6:	4618      	mov	r0, r3
 801f6b8:	3738      	adds	r7, #56	; 0x38
 801f6ba:	46bd      	mov	sp, r7
 801f6bc:	bd80      	pop	{r7, pc}
 801f6be:	bf00      	nop
 801f6c0:	080218ac 	.word	0x080218ac

0801f6c4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801f6c4:	b580      	push	{r7, lr}
 801f6c6:	b090      	sub	sp, #64	; 0x40
 801f6c8:	af00      	add	r7, sp, #0
 801f6ca:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801f6cc:	4b73      	ldr	r3, [pc, #460]	; (801f89c <UTIL_SEQ_Run+0x1d8>)
 801f6ce:	681b      	ldr	r3, [r3, #0]
 801f6d0:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801f6d2:	4b72      	ldr	r3, [pc, #456]	; (801f89c <UTIL_SEQ_Run+0x1d8>)
 801f6d4:	681a      	ldr	r2, [r3, #0]
 801f6d6:	687b      	ldr	r3, [r7, #4]
 801f6d8:	4013      	ands	r3, r2
 801f6da:	4a70      	ldr	r2, [pc, #448]	; (801f89c <UTIL_SEQ_Run+0x1d8>)
 801f6dc:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801f6de:	4b70      	ldr	r3, [pc, #448]	; (801f8a0 <UTIL_SEQ_Run+0x1dc>)
 801f6e0:	681b      	ldr	r3, [r3, #0]
 801f6e2:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801f6e4:	4b6f      	ldr	r3, [pc, #444]	; (801f8a4 <UTIL_SEQ_Run+0x1e0>)
 801f6e6:	681b      	ldr	r3, [r3, #0]
 801f6e8:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801f6ea:	4b6f      	ldr	r3, [pc, #444]	; (801f8a8 <UTIL_SEQ_Run+0x1e4>)
 801f6ec:	681b      	ldr	r3, [r3, #0]
 801f6ee:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801f6f0:	4b6e      	ldr	r3, [pc, #440]	; (801f8ac <UTIL_SEQ_Run+0x1e8>)
 801f6f2:	681b      	ldr	r3, [r3, #0]
 801f6f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801f6f6:	e08d      	b.n	801f814 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801f6f8:	2300      	movs	r3, #0
 801f6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801f6fc:	e002      	b.n	801f704 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801f6fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f700:	3301      	adds	r3, #1
 801f702:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801f704:	4a6a      	ldr	r2, [pc, #424]	; (801f8b0 <UTIL_SEQ_Run+0x1ec>)
 801f706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f708:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801f70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f70e:	401a      	ands	r2, r3
 801f710:	4b62      	ldr	r3, [pc, #392]	; (801f89c <UTIL_SEQ_Run+0x1d8>)
 801f712:	681b      	ldr	r3, [r3, #0]
 801f714:	4013      	ands	r3, r2
 801f716:	2b00      	cmp	r3, #0
 801f718:	d0f1      	beq.n	801f6fe <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801f71a:	4a65      	ldr	r2, [pc, #404]	; (801f8b0 <UTIL_SEQ_Run+0x1ec>)
 801f71c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f71e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801f722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f724:	401a      	ands	r2, r3
 801f726:	4b5d      	ldr	r3, [pc, #372]	; (801f89c <UTIL_SEQ_Run+0x1d8>)
 801f728:	681b      	ldr	r3, [r3, #0]
 801f72a:	4013      	ands	r3, r2
 801f72c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801f72e:	4a60      	ldr	r2, [pc, #384]	; (801f8b0 <UTIL_SEQ_Run+0x1ec>)
 801f730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f732:	00db      	lsls	r3, r3, #3
 801f734:	4413      	add	r3, r2
 801f736:	685a      	ldr	r2, [r3, #4]
 801f738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f73a:	4013      	ands	r3, r2
 801f73c:	2b00      	cmp	r3, #0
 801f73e:	d106      	bne.n	801f74e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801f740:	4a5b      	ldr	r2, [pc, #364]	; (801f8b0 <UTIL_SEQ_Run+0x1ec>)
 801f742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f744:	00db      	lsls	r3, r3, #3
 801f746:	4413      	add	r3, r2
 801f748:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f74c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801f74e:	4a58      	ldr	r2, [pc, #352]	; (801f8b0 <UTIL_SEQ_Run+0x1ec>)
 801f750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f752:	00db      	lsls	r3, r3, #3
 801f754:	4413      	add	r3, r2
 801f756:	685a      	ldr	r2, [r3, #4]
 801f758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f75a:	4013      	ands	r3, r2
 801f75c:	4618      	mov	r0, r3
 801f75e:	f000 f927 	bl	801f9b0 <SEQ_BitPosition>
 801f762:	4603      	mov	r3, r0
 801f764:	461a      	mov	r2, r3
 801f766:	4b53      	ldr	r3, [pc, #332]	; (801f8b4 <UTIL_SEQ_Run+0x1f0>)
 801f768:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801f76a:	4a51      	ldr	r2, [pc, #324]	; (801f8b0 <UTIL_SEQ_Run+0x1ec>)
 801f76c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f76e:	00db      	lsls	r3, r3, #3
 801f770:	4413      	add	r3, r2
 801f772:	685a      	ldr	r2, [r3, #4]
 801f774:	4b4f      	ldr	r3, [pc, #316]	; (801f8b4 <UTIL_SEQ_Run+0x1f0>)
 801f776:	681b      	ldr	r3, [r3, #0]
 801f778:	2101      	movs	r1, #1
 801f77a:	fa01 f303 	lsl.w	r3, r1, r3
 801f77e:	43db      	mvns	r3, r3
 801f780:	401a      	ands	r2, r3
 801f782:	494b      	ldr	r1, [pc, #300]	; (801f8b0 <UTIL_SEQ_Run+0x1ec>)
 801f784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f786:	00db      	lsls	r3, r3, #3
 801f788:	440b      	add	r3, r1
 801f78a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f78c:	f3ef 8310 	mrs	r3, PRIMASK
 801f790:	61bb      	str	r3, [r7, #24]
  return(result);
 801f792:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801f794:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801f796:	b672      	cpsid	i
}
 801f798:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801f79a:	4b46      	ldr	r3, [pc, #280]	; (801f8b4 <UTIL_SEQ_Run+0x1f0>)
 801f79c:	681b      	ldr	r3, [r3, #0]
 801f79e:	2201      	movs	r2, #1
 801f7a0:	fa02 f303 	lsl.w	r3, r2, r3
 801f7a4:	43da      	mvns	r2, r3
 801f7a6:	4b3e      	ldr	r3, [pc, #248]	; (801f8a0 <UTIL_SEQ_Run+0x1dc>)
 801f7a8:	681b      	ldr	r3, [r3, #0]
 801f7aa:	4013      	ands	r3, r2
 801f7ac:	4a3c      	ldr	r2, [pc, #240]	; (801f8a0 <UTIL_SEQ_Run+0x1dc>)
 801f7ae:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801f7b0:	2301      	movs	r3, #1
 801f7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801f7b4:	e013      	b.n	801f7de <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801f7b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f7b8:	3b01      	subs	r3, #1
 801f7ba:	4a3d      	ldr	r2, [pc, #244]	; (801f8b0 <UTIL_SEQ_Run+0x1ec>)
 801f7bc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801f7c0:	4b3c      	ldr	r3, [pc, #240]	; (801f8b4 <UTIL_SEQ_Run+0x1f0>)
 801f7c2:	681b      	ldr	r3, [r3, #0]
 801f7c4:	2201      	movs	r2, #1
 801f7c6:	fa02 f303 	lsl.w	r3, r2, r3
 801f7ca:	43da      	mvns	r2, r3
 801f7cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f7ce:	3b01      	subs	r3, #1
 801f7d0:	400a      	ands	r2, r1
 801f7d2:	4937      	ldr	r1, [pc, #220]	; (801f8b0 <UTIL_SEQ_Run+0x1ec>)
 801f7d4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801f7d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f7da:	3b01      	subs	r3, #1
 801f7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 801f7de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f7e0:	2b00      	cmp	r3, #0
 801f7e2:	d1e8      	bne.n	801f7b6 <UTIL_SEQ_Run+0xf2>
 801f7e4:	6a3b      	ldr	r3, [r7, #32]
 801f7e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f7e8:	697b      	ldr	r3, [r7, #20]
 801f7ea:	f383 8810 	msr	PRIMASK, r3
}
 801f7ee:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801f7f0:	4b30      	ldr	r3, [pc, #192]	; (801f8b4 <UTIL_SEQ_Run+0x1f0>)
 801f7f2:	681b      	ldr	r3, [r3, #0]
 801f7f4:	4a30      	ldr	r2, [pc, #192]	; (801f8b8 <UTIL_SEQ_Run+0x1f4>)
 801f7f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f7fa:	4798      	blx	r3

    local_taskset = TaskSet;
 801f7fc:	4b28      	ldr	r3, [pc, #160]	; (801f8a0 <UTIL_SEQ_Run+0x1dc>)
 801f7fe:	681b      	ldr	r3, [r3, #0]
 801f800:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801f802:	4b28      	ldr	r3, [pc, #160]	; (801f8a4 <UTIL_SEQ_Run+0x1e0>)
 801f804:	681b      	ldr	r3, [r3, #0]
 801f806:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801f808:	4b27      	ldr	r3, [pc, #156]	; (801f8a8 <UTIL_SEQ_Run+0x1e4>)
 801f80a:	681b      	ldr	r3, [r3, #0]
 801f80c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801f80e:	4b27      	ldr	r3, [pc, #156]	; (801f8ac <UTIL_SEQ_Run+0x1e8>)
 801f810:	681b      	ldr	r3, [r3, #0]
 801f812:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801f814:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801f816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f818:	401a      	ands	r2, r3
 801f81a:	4b20      	ldr	r3, [pc, #128]	; (801f89c <UTIL_SEQ_Run+0x1d8>)
 801f81c:	681b      	ldr	r3, [r3, #0]
 801f81e:	4013      	ands	r3, r2
 801f820:	2b00      	cmp	r3, #0
 801f822:	d005      	beq.n	801f830 <UTIL_SEQ_Run+0x16c>
 801f824:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f828:	4013      	ands	r3, r2
 801f82a:	2b00      	cmp	r3, #0
 801f82c:	f43f af64 	beq.w	801f6f8 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801f830:	4b20      	ldr	r3, [pc, #128]	; (801f8b4 <UTIL_SEQ_Run+0x1f0>)
 801f832:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f836:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801f838:	f000 f8ae 	bl	801f998 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f83c:	f3ef 8310 	mrs	r3, PRIMASK
 801f840:	613b      	str	r3, [r7, #16]
  return(result);
 801f842:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801f844:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801f846:	b672      	cpsid	i
}
 801f848:	bf00      	nop
  local_taskset = TaskSet;
 801f84a:	4b15      	ldr	r3, [pc, #84]	; (801f8a0 <UTIL_SEQ_Run+0x1dc>)
 801f84c:	681b      	ldr	r3, [r3, #0]
 801f84e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801f850:	4b14      	ldr	r3, [pc, #80]	; (801f8a4 <UTIL_SEQ_Run+0x1e0>)
 801f852:	681b      	ldr	r3, [r3, #0]
 801f854:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801f856:	4b14      	ldr	r3, [pc, #80]	; (801f8a8 <UTIL_SEQ_Run+0x1e4>)
 801f858:	681b      	ldr	r3, [r3, #0]
 801f85a:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801f85c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801f85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f860:	401a      	ands	r2, r3
 801f862:	4b0e      	ldr	r3, [pc, #56]	; (801f89c <UTIL_SEQ_Run+0x1d8>)
 801f864:	681b      	ldr	r3, [r3, #0]
 801f866:	4013      	ands	r3, r2
 801f868:	2b00      	cmp	r3, #0
 801f86a:	d107      	bne.n	801f87c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801f86c:	4b0f      	ldr	r3, [pc, #60]	; (801f8ac <UTIL_SEQ_Run+0x1e8>)
 801f86e:	681a      	ldr	r2, [r3, #0]
 801f870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f872:	4013      	ands	r3, r2
 801f874:	2b00      	cmp	r3, #0
 801f876:	d101      	bne.n	801f87c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801f878:	f7e2 fec4 	bl	8002604 <UTIL_SEQ_Idle>
 801f87c:	69fb      	ldr	r3, [r7, #28]
 801f87e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f880:	68fb      	ldr	r3, [r7, #12]
 801f882:	f383 8810 	msr	PRIMASK, r3
}
 801f886:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801f888:	f000 f88c 	bl	801f9a4 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801f88c:	4a03      	ldr	r2, [pc, #12]	; (801f89c <UTIL_SEQ_Run+0x1d8>)
 801f88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f890:	6013      	str	r3, [r2, #0]

  return;
 801f892:	bf00      	nop
}
 801f894:	3740      	adds	r7, #64	; 0x40
 801f896:	46bd      	mov	sp, r7
 801f898:	bd80      	pop	{r7, pc}
 801f89a:	bf00      	nop
 801f89c:	20000144 	.word	0x20000144
 801f8a0:	20001e40 	.word	0x20001e40
 801f8a4:	20001e44 	.word	0x20001e44
 801f8a8:	20000140 	.word	0x20000140
 801f8ac:	20001e48 	.word	0x20001e48
 801f8b0:	20001e60 	.word	0x20001e60
 801f8b4:	20001e4c 	.word	0x20001e4c
 801f8b8:	20001e50 	.word	0x20001e50

0801f8bc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801f8bc:	b580      	push	{r7, lr}
 801f8be:	b088      	sub	sp, #32
 801f8c0:	af00      	add	r7, sp, #0
 801f8c2:	60f8      	str	r0, [r7, #12]
 801f8c4:	60b9      	str	r1, [r7, #8]
 801f8c6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f8c8:	f3ef 8310 	mrs	r3, PRIMASK
 801f8cc:	617b      	str	r3, [r7, #20]
  return(result);
 801f8ce:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801f8d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801f8d2:	b672      	cpsid	i
}
 801f8d4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801f8d6:	68f8      	ldr	r0, [r7, #12]
 801f8d8:	f000 f86a 	bl	801f9b0 <SEQ_BitPosition>
 801f8dc:	4603      	mov	r3, r0
 801f8de:	4619      	mov	r1, r3
 801f8e0:	4a06      	ldr	r2, [pc, #24]	; (801f8fc <UTIL_SEQ_RegTask+0x40>)
 801f8e2:	687b      	ldr	r3, [r7, #4]
 801f8e4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801f8e8:	69fb      	ldr	r3, [r7, #28]
 801f8ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f8ec:	69bb      	ldr	r3, [r7, #24]
 801f8ee:	f383 8810 	msr	PRIMASK, r3
}
 801f8f2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801f8f4:	bf00      	nop
}
 801f8f6:	3720      	adds	r7, #32
 801f8f8:	46bd      	mov	sp, r7
 801f8fa:	bd80      	pop	{r7, pc}
 801f8fc:	20001e50 	.word	0x20001e50

0801f900 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801f900:	b480      	push	{r7}
 801f902:	b087      	sub	sp, #28
 801f904:	af00      	add	r7, sp, #0
 801f906:	6078      	str	r0, [r7, #4]
 801f908:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f90a:	f3ef 8310 	mrs	r3, PRIMASK
 801f90e:	60fb      	str	r3, [r7, #12]
  return(result);
 801f910:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801f912:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801f914:	b672      	cpsid	i
}
 801f916:	bf00      	nop

  TaskSet |= TaskId_bm;
 801f918:	4b0d      	ldr	r3, [pc, #52]	; (801f950 <UTIL_SEQ_SetTask+0x50>)
 801f91a:	681a      	ldr	r2, [r3, #0]
 801f91c:	687b      	ldr	r3, [r7, #4]
 801f91e:	4313      	orrs	r3, r2
 801f920:	4a0b      	ldr	r2, [pc, #44]	; (801f950 <UTIL_SEQ_SetTask+0x50>)
 801f922:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801f924:	4a0b      	ldr	r2, [pc, #44]	; (801f954 <UTIL_SEQ_SetTask+0x54>)
 801f926:	683b      	ldr	r3, [r7, #0]
 801f928:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801f92c:	687b      	ldr	r3, [r7, #4]
 801f92e:	431a      	orrs	r2, r3
 801f930:	4908      	ldr	r1, [pc, #32]	; (801f954 <UTIL_SEQ_SetTask+0x54>)
 801f932:	683b      	ldr	r3, [r7, #0]
 801f934:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801f938:	697b      	ldr	r3, [r7, #20]
 801f93a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f93c:	693b      	ldr	r3, [r7, #16]
 801f93e:	f383 8810 	msr	PRIMASK, r3
}
 801f942:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801f944:	bf00      	nop
}
 801f946:	371c      	adds	r7, #28
 801f948:	46bd      	mov	sp, r7
 801f94a:	bc80      	pop	{r7}
 801f94c:	4770      	bx	lr
 801f94e:	bf00      	nop
 801f950:	20001e40 	.word	0x20001e40
 801f954:	20001e60 	.word	0x20001e60

0801f958 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 801f958:	b480      	push	{r7}
 801f95a:	b087      	sub	sp, #28
 801f95c:	af00      	add	r7, sp, #0
 801f95e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f960:	f3ef 8310 	mrs	r3, PRIMASK
 801f964:	60fb      	str	r3, [r7, #12]
  return(result);
 801f966:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801f968:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801f96a:	b672      	cpsid	i
}
 801f96c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 801f96e:	687b      	ldr	r3, [r7, #4]
 801f970:	43da      	mvns	r2, r3
 801f972:	4b08      	ldr	r3, [pc, #32]	; (801f994 <UTIL_SEQ_PauseTask+0x3c>)
 801f974:	681b      	ldr	r3, [r3, #0]
 801f976:	4013      	ands	r3, r2
 801f978:	4a06      	ldr	r2, [pc, #24]	; (801f994 <UTIL_SEQ_PauseTask+0x3c>)
 801f97a:	6013      	str	r3, [r2, #0]
 801f97c:	697b      	ldr	r3, [r7, #20]
 801f97e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f980:	693b      	ldr	r3, [r7, #16]
 801f982:	f383 8810 	msr	PRIMASK, r3
}
 801f986:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801f988:	bf00      	nop
}
 801f98a:	371c      	adds	r7, #28
 801f98c:	46bd      	mov	sp, r7
 801f98e:	bc80      	pop	{r7}
 801f990:	4770      	bx	lr
 801f992:	bf00      	nop
 801f994:	20000140 	.word	0x20000140

0801f998 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801f998:	b480      	push	{r7}
 801f99a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801f99c:	bf00      	nop
}
 801f99e:	46bd      	mov	sp, r7
 801f9a0:	bc80      	pop	{r7}
 801f9a2:	4770      	bx	lr

0801f9a4 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801f9a4:	b480      	push	{r7}
 801f9a6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801f9a8:	bf00      	nop
}
 801f9aa:	46bd      	mov	sp, r7
 801f9ac:	bc80      	pop	{r7}
 801f9ae:	4770      	bx	lr

0801f9b0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801f9b0:	b480      	push	{r7}
 801f9b2:	b085      	sub	sp, #20
 801f9b4:	af00      	add	r7, sp, #0
 801f9b6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801f9b8:	2300      	movs	r3, #0
 801f9ba:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801f9bc:	687b      	ldr	r3, [r7, #4]
 801f9be:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801f9c0:	68bb      	ldr	r3, [r7, #8]
 801f9c2:	0c1b      	lsrs	r3, r3, #16
 801f9c4:	041b      	lsls	r3, r3, #16
 801f9c6:	2b00      	cmp	r3, #0
 801f9c8:	d104      	bne.n	801f9d4 <SEQ_BitPosition+0x24>
 801f9ca:	2310      	movs	r3, #16
 801f9cc:	73fb      	strb	r3, [r7, #15]
 801f9ce:	68bb      	ldr	r3, [r7, #8]
 801f9d0:	041b      	lsls	r3, r3, #16
 801f9d2:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801f9d4:	68bb      	ldr	r3, [r7, #8]
 801f9d6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801f9da:	2b00      	cmp	r3, #0
 801f9dc:	d105      	bne.n	801f9ea <SEQ_BitPosition+0x3a>
 801f9de:	7bfb      	ldrb	r3, [r7, #15]
 801f9e0:	3308      	adds	r3, #8
 801f9e2:	73fb      	strb	r3, [r7, #15]
 801f9e4:	68bb      	ldr	r3, [r7, #8]
 801f9e6:	021b      	lsls	r3, r3, #8
 801f9e8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801f9ea:	68bb      	ldr	r3, [r7, #8]
 801f9ec:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801f9f0:	2b00      	cmp	r3, #0
 801f9f2:	d105      	bne.n	801fa00 <SEQ_BitPosition+0x50>
 801f9f4:	7bfb      	ldrb	r3, [r7, #15]
 801f9f6:	3304      	adds	r3, #4
 801f9f8:	73fb      	strb	r3, [r7, #15]
 801f9fa:	68bb      	ldr	r3, [r7, #8]
 801f9fc:	011b      	lsls	r3, r3, #4
 801f9fe:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801fa00:	68bb      	ldr	r3, [r7, #8]
 801fa02:	0f1b      	lsrs	r3, r3, #28
 801fa04:	4a06      	ldr	r2, [pc, #24]	; (801fa20 <SEQ_BitPosition+0x70>)
 801fa06:	5cd2      	ldrb	r2, [r2, r3]
 801fa08:	7bfb      	ldrb	r3, [r7, #15]
 801fa0a:	4413      	add	r3, r2
 801fa0c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801fa0e:	7bfb      	ldrb	r3, [r7, #15]
 801fa10:	f1c3 031f 	rsb	r3, r3, #31
 801fa14:	b2db      	uxtb	r3, r3
}
 801fa16:	4618      	mov	r0, r3
 801fa18:	3714      	adds	r7, #20
 801fa1a:	46bd      	mov	sp, r7
 801fa1c:	bc80      	pop	{r7}
 801fa1e:	4770      	bx	lr
 801fa20:	08021f3c 	.word	0x08021f3c

0801fa24 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801fa24:	b580      	push	{r7, lr}
 801fa26:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801fa28:	4b04      	ldr	r3, [pc, #16]	; (801fa3c <UTIL_TIMER_Init+0x18>)
 801fa2a:	2200      	movs	r2, #0
 801fa2c:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801fa2e:	4b04      	ldr	r3, [pc, #16]	; (801fa40 <UTIL_TIMER_Init+0x1c>)
 801fa30:	681b      	ldr	r3, [r3, #0]
 801fa32:	4798      	blx	r3
 801fa34:	4603      	mov	r3, r0
}
 801fa36:	4618      	mov	r0, r3
 801fa38:	bd80      	pop	{r7, pc}
 801fa3a:	bf00      	nop
 801fa3c:	20001e68 	.word	0x20001e68
 801fa40:	0802196c 	.word	0x0802196c

0801fa44 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801fa44:	b580      	push	{r7, lr}
 801fa46:	b084      	sub	sp, #16
 801fa48:	af00      	add	r7, sp, #0
 801fa4a:	60f8      	str	r0, [r7, #12]
 801fa4c:	60b9      	str	r1, [r7, #8]
 801fa4e:	603b      	str	r3, [r7, #0]
 801fa50:	4613      	mov	r3, r2
 801fa52:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801fa54:	68fb      	ldr	r3, [r7, #12]
 801fa56:	2b00      	cmp	r3, #0
 801fa58:	d023      	beq.n	801faa2 <UTIL_TIMER_Create+0x5e>
 801fa5a:	683b      	ldr	r3, [r7, #0]
 801fa5c:	2b00      	cmp	r3, #0
 801fa5e:	d020      	beq.n	801faa2 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801fa60:	68fb      	ldr	r3, [r7, #12]
 801fa62:	2200      	movs	r2, #0
 801fa64:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801fa66:	4b11      	ldr	r3, [pc, #68]	; (801faac <UTIL_TIMER_Create+0x68>)
 801fa68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fa6a:	68b8      	ldr	r0, [r7, #8]
 801fa6c:	4798      	blx	r3
 801fa6e:	4602      	mov	r2, r0
 801fa70:	68fb      	ldr	r3, [r7, #12]
 801fa72:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801fa74:	68fb      	ldr	r3, [r7, #12]
 801fa76:	2200      	movs	r2, #0
 801fa78:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801fa7a:	68fb      	ldr	r3, [r7, #12]
 801fa7c:	2200      	movs	r2, #0
 801fa7e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801fa80:	68fb      	ldr	r3, [r7, #12]
 801fa82:	2200      	movs	r2, #0
 801fa84:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801fa86:	68fb      	ldr	r3, [r7, #12]
 801fa88:	683a      	ldr	r2, [r7, #0]
 801fa8a:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801fa8c:	68fb      	ldr	r3, [r7, #12]
 801fa8e:	69ba      	ldr	r2, [r7, #24]
 801fa90:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801fa92:	68fb      	ldr	r3, [r7, #12]
 801fa94:	79fa      	ldrb	r2, [r7, #7]
 801fa96:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801fa98:	68fb      	ldr	r3, [r7, #12]
 801fa9a:	2200      	movs	r2, #0
 801fa9c:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801fa9e:	2300      	movs	r3, #0
 801faa0:	e000      	b.n	801faa4 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801faa2:	2301      	movs	r3, #1
  }
}
 801faa4:	4618      	mov	r0, r3
 801faa6:	3710      	adds	r7, #16
 801faa8:	46bd      	mov	sp, r7
 801faaa:	bd80      	pop	{r7, pc}
 801faac:	0802196c 	.word	0x0802196c

0801fab0 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801fab0:	b580      	push	{r7, lr}
 801fab2:	b08a      	sub	sp, #40	; 0x28
 801fab4:	af00      	add	r7, sp, #0
 801fab6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801fab8:	2300      	movs	r3, #0
 801faba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801fabe:	687b      	ldr	r3, [r7, #4]
 801fac0:	2b00      	cmp	r3, #0
 801fac2:	d056      	beq.n	801fb72 <UTIL_TIMER_Start+0xc2>
 801fac4:	6878      	ldr	r0, [r7, #4]
 801fac6:	f000 f9a9 	bl	801fe1c <TimerExists>
 801faca:	4603      	mov	r3, r0
 801facc:	f083 0301 	eor.w	r3, r3, #1
 801fad0:	b2db      	uxtb	r3, r3
 801fad2:	2b00      	cmp	r3, #0
 801fad4:	d04d      	beq.n	801fb72 <UTIL_TIMER_Start+0xc2>
 801fad6:	687b      	ldr	r3, [r7, #4]
 801fad8:	7a5b      	ldrb	r3, [r3, #9]
 801fada:	2b00      	cmp	r3, #0
 801fadc:	d149      	bne.n	801fb72 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fade:	f3ef 8310 	mrs	r3, PRIMASK
 801fae2:	613b      	str	r3, [r7, #16]
  return(result);
 801fae4:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801fae6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801fae8:	b672      	cpsid	i
}
 801faea:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801faec:	687b      	ldr	r3, [r7, #4]
 801faee:	685b      	ldr	r3, [r3, #4]
 801faf0:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801faf2:	4b24      	ldr	r3, [pc, #144]	; (801fb84 <UTIL_TIMER_Start+0xd4>)
 801faf4:	6a1b      	ldr	r3, [r3, #32]
 801faf6:	4798      	blx	r3
 801faf8:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801fafa:	6a3a      	ldr	r2, [r7, #32]
 801fafc:	69bb      	ldr	r3, [r7, #24]
 801fafe:	429a      	cmp	r2, r3
 801fb00:	d201      	bcs.n	801fb06 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801fb02:	69bb      	ldr	r3, [r7, #24]
 801fb04:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801fb06:	687b      	ldr	r3, [r7, #4]
 801fb08:	6a3a      	ldr	r2, [r7, #32]
 801fb0a:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801fb0c:	687b      	ldr	r3, [r7, #4]
 801fb0e:	2200      	movs	r2, #0
 801fb10:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801fb12:	687b      	ldr	r3, [r7, #4]
 801fb14:	2201      	movs	r2, #1
 801fb16:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801fb18:	687b      	ldr	r3, [r7, #4]
 801fb1a:	2200      	movs	r2, #0
 801fb1c:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801fb1e:	4b1a      	ldr	r3, [pc, #104]	; (801fb88 <UTIL_TIMER_Start+0xd8>)
 801fb20:	681b      	ldr	r3, [r3, #0]
 801fb22:	2b00      	cmp	r3, #0
 801fb24:	d106      	bne.n	801fb34 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801fb26:	4b17      	ldr	r3, [pc, #92]	; (801fb84 <UTIL_TIMER_Start+0xd4>)
 801fb28:	691b      	ldr	r3, [r3, #16]
 801fb2a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801fb2c:	6878      	ldr	r0, [r7, #4]
 801fb2e:	f000 f9eb 	bl	801ff08 <TimerInsertNewHeadTimer>
 801fb32:	e017      	b.n	801fb64 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801fb34:	4b13      	ldr	r3, [pc, #76]	; (801fb84 <UTIL_TIMER_Start+0xd4>)
 801fb36:	699b      	ldr	r3, [r3, #24]
 801fb38:	4798      	blx	r3
 801fb3a:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801fb3c:	687b      	ldr	r3, [r7, #4]
 801fb3e:	681a      	ldr	r2, [r3, #0]
 801fb40:	697b      	ldr	r3, [r7, #20]
 801fb42:	441a      	add	r2, r3
 801fb44:	687b      	ldr	r3, [r7, #4]
 801fb46:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801fb48:	687b      	ldr	r3, [r7, #4]
 801fb4a:	681a      	ldr	r2, [r3, #0]
 801fb4c:	4b0e      	ldr	r3, [pc, #56]	; (801fb88 <UTIL_TIMER_Start+0xd8>)
 801fb4e:	681b      	ldr	r3, [r3, #0]
 801fb50:	681b      	ldr	r3, [r3, #0]
 801fb52:	429a      	cmp	r2, r3
 801fb54:	d203      	bcs.n	801fb5e <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801fb56:	6878      	ldr	r0, [r7, #4]
 801fb58:	f000 f9d6 	bl	801ff08 <TimerInsertNewHeadTimer>
 801fb5c:	e002      	b.n	801fb64 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801fb5e:	6878      	ldr	r0, [r7, #4]
 801fb60:	f000 f9a2 	bl	801fea8 <TimerInsertTimer>
 801fb64:	69fb      	ldr	r3, [r7, #28]
 801fb66:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fb68:	68fb      	ldr	r3, [r7, #12]
 801fb6a:	f383 8810 	msr	PRIMASK, r3
}
 801fb6e:	bf00      	nop
  {
 801fb70:	e002      	b.n	801fb78 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801fb72:	2301      	movs	r3, #1
 801fb74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801fb78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801fb7c:	4618      	mov	r0, r3
 801fb7e:	3728      	adds	r7, #40	; 0x28
 801fb80:	46bd      	mov	sp, r7
 801fb82:	bd80      	pop	{r7, pc}
 801fb84:	0802196c 	.word	0x0802196c
 801fb88:	20001e68 	.word	0x20001e68

0801fb8c <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801fb8c:	b580      	push	{r7, lr}
 801fb8e:	b088      	sub	sp, #32
 801fb90:	af00      	add	r7, sp, #0
 801fb92:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801fb94:	2300      	movs	r3, #0
 801fb96:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801fb98:	687b      	ldr	r3, [r7, #4]
 801fb9a:	2b00      	cmp	r3, #0
 801fb9c:	d05b      	beq.n	801fc56 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fb9e:	f3ef 8310 	mrs	r3, PRIMASK
 801fba2:	60fb      	str	r3, [r7, #12]
  return(result);
 801fba4:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801fba6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801fba8:	b672      	cpsid	i
}
 801fbaa:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801fbac:	4b2d      	ldr	r3, [pc, #180]	; (801fc64 <UTIL_TIMER_Stop+0xd8>)
 801fbae:	681b      	ldr	r3, [r3, #0]
 801fbb0:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801fbb2:	4b2c      	ldr	r3, [pc, #176]	; (801fc64 <UTIL_TIMER_Stop+0xd8>)
 801fbb4:	681b      	ldr	r3, [r3, #0]
 801fbb6:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801fbb8:	687b      	ldr	r3, [r7, #4]
 801fbba:	2201      	movs	r2, #1
 801fbbc:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801fbbe:	4b29      	ldr	r3, [pc, #164]	; (801fc64 <UTIL_TIMER_Stop+0xd8>)
 801fbc0:	681b      	ldr	r3, [r3, #0]
 801fbc2:	2b00      	cmp	r3, #0
 801fbc4:	d041      	beq.n	801fc4a <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801fbc6:	687b      	ldr	r3, [r7, #4]
 801fbc8:	2200      	movs	r2, #0
 801fbca:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801fbcc:	4b25      	ldr	r3, [pc, #148]	; (801fc64 <UTIL_TIMER_Stop+0xd8>)
 801fbce:	681b      	ldr	r3, [r3, #0]
 801fbd0:	687a      	ldr	r2, [r7, #4]
 801fbd2:	429a      	cmp	r2, r3
 801fbd4:	d134      	bne.n	801fc40 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801fbd6:	4b23      	ldr	r3, [pc, #140]	; (801fc64 <UTIL_TIMER_Stop+0xd8>)
 801fbd8:	681b      	ldr	r3, [r3, #0]
 801fbda:	2200      	movs	r2, #0
 801fbdc:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801fbde:	4b21      	ldr	r3, [pc, #132]	; (801fc64 <UTIL_TIMER_Stop+0xd8>)
 801fbe0:	681b      	ldr	r3, [r3, #0]
 801fbe2:	695b      	ldr	r3, [r3, #20]
 801fbe4:	2b00      	cmp	r3, #0
 801fbe6:	d00a      	beq.n	801fbfe <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801fbe8:	4b1e      	ldr	r3, [pc, #120]	; (801fc64 <UTIL_TIMER_Stop+0xd8>)
 801fbea:	681b      	ldr	r3, [r3, #0]
 801fbec:	695b      	ldr	r3, [r3, #20]
 801fbee:	4a1d      	ldr	r2, [pc, #116]	; (801fc64 <UTIL_TIMER_Stop+0xd8>)
 801fbf0:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801fbf2:	4b1c      	ldr	r3, [pc, #112]	; (801fc64 <UTIL_TIMER_Stop+0xd8>)
 801fbf4:	681b      	ldr	r3, [r3, #0]
 801fbf6:	4618      	mov	r0, r3
 801fbf8:	f000 f92c 	bl	801fe54 <TimerSetTimeout>
 801fbfc:	e023      	b.n	801fc46 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801fbfe:	4b1a      	ldr	r3, [pc, #104]	; (801fc68 <UTIL_TIMER_Stop+0xdc>)
 801fc00:	68db      	ldr	r3, [r3, #12]
 801fc02:	4798      	blx	r3
            TimerListHead = NULL;
 801fc04:	4b17      	ldr	r3, [pc, #92]	; (801fc64 <UTIL_TIMER_Stop+0xd8>)
 801fc06:	2200      	movs	r2, #0
 801fc08:	601a      	str	r2, [r3, #0]
 801fc0a:	e01c      	b.n	801fc46 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801fc0c:	697a      	ldr	r2, [r7, #20]
 801fc0e:	687b      	ldr	r3, [r7, #4]
 801fc10:	429a      	cmp	r2, r3
 801fc12:	d110      	bne.n	801fc36 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801fc14:	697b      	ldr	r3, [r7, #20]
 801fc16:	695b      	ldr	r3, [r3, #20]
 801fc18:	2b00      	cmp	r3, #0
 801fc1a:	d006      	beq.n	801fc2a <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801fc1c:	697b      	ldr	r3, [r7, #20]
 801fc1e:	695b      	ldr	r3, [r3, #20]
 801fc20:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801fc22:	69bb      	ldr	r3, [r7, #24]
 801fc24:	697a      	ldr	r2, [r7, #20]
 801fc26:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801fc28:	e00d      	b.n	801fc46 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801fc2a:	2300      	movs	r3, #0
 801fc2c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801fc2e:	69bb      	ldr	r3, [r7, #24]
 801fc30:	697a      	ldr	r2, [r7, #20]
 801fc32:	615a      	str	r2, [r3, #20]
            break;
 801fc34:	e007      	b.n	801fc46 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801fc36:	697b      	ldr	r3, [r7, #20]
 801fc38:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801fc3a:	697b      	ldr	r3, [r7, #20]
 801fc3c:	695b      	ldr	r3, [r3, #20]
 801fc3e:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801fc40:	697b      	ldr	r3, [r7, #20]
 801fc42:	2b00      	cmp	r3, #0
 801fc44:	d1e2      	bne.n	801fc0c <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801fc46:	2300      	movs	r3, #0
 801fc48:	77fb      	strb	r3, [r7, #31]
 801fc4a:	693b      	ldr	r3, [r7, #16]
 801fc4c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fc4e:	68bb      	ldr	r3, [r7, #8]
 801fc50:	f383 8810 	msr	PRIMASK, r3
}
 801fc54:	e001      	b.n	801fc5a <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801fc56:	2301      	movs	r3, #1
 801fc58:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801fc5a:	7ffb      	ldrb	r3, [r7, #31]
}
 801fc5c:	4618      	mov	r0, r3
 801fc5e:	3720      	adds	r7, #32
 801fc60:	46bd      	mov	sp, r7
 801fc62:	bd80      	pop	{r7, pc}
 801fc64:	20001e68 	.word	0x20001e68
 801fc68:	0802196c 	.word	0x0802196c

0801fc6c <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801fc6c:	b580      	push	{r7, lr}
 801fc6e:	b084      	sub	sp, #16
 801fc70:	af00      	add	r7, sp, #0
 801fc72:	6078      	str	r0, [r7, #4]
 801fc74:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801fc76:	2300      	movs	r3, #0
 801fc78:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801fc7a:	687b      	ldr	r3, [r7, #4]
 801fc7c:	2b00      	cmp	r3, #0
 801fc7e:	d102      	bne.n	801fc86 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801fc80:	2301      	movs	r3, #1
 801fc82:	73fb      	strb	r3, [r7, #15]
 801fc84:	e014      	b.n	801fcb0 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801fc86:	4b0d      	ldr	r3, [pc, #52]	; (801fcbc <UTIL_TIMER_SetPeriod+0x50>)
 801fc88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fc8a:	6838      	ldr	r0, [r7, #0]
 801fc8c:	4798      	blx	r3
 801fc8e:	4602      	mov	r2, r0
 801fc90:	687b      	ldr	r3, [r7, #4]
 801fc92:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801fc94:	6878      	ldr	r0, [r7, #4]
 801fc96:	f000 f8c1 	bl	801fe1c <TimerExists>
 801fc9a:	4603      	mov	r3, r0
 801fc9c:	2b00      	cmp	r3, #0
 801fc9e:	d007      	beq.n	801fcb0 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801fca0:	6878      	ldr	r0, [r7, #4]
 801fca2:	f7ff ff73 	bl	801fb8c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801fca6:	6878      	ldr	r0, [r7, #4]
 801fca8:	f7ff ff02 	bl	801fab0 <UTIL_TIMER_Start>
 801fcac:	4603      	mov	r3, r0
 801fcae:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801fcb0:	7bfb      	ldrb	r3, [r7, #15]
}
 801fcb2:	4618      	mov	r0, r3
 801fcb4:	3710      	adds	r7, #16
 801fcb6:	46bd      	mov	sp, r7
 801fcb8:	bd80      	pop	{r7, pc}
 801fcba:	bf00      	nop
 801fcbc:	0802196c 	.word	0x0802196c

0801fcc0 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801fcc0:	b590      	push	{r4, r7, lr}
 801fcc2:	b089      	sub	sp, #36	; 0x24
 801fcc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fcc6:	f3ef 8310 	mrs	r3, PRIMASK
 801fcca:	60bb      	str	r3, [r7, #8]
  return(result);
 801fccc:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801fcce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801fcd0:	b672      	cpsid	i
}
 801fcd2:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801fcd4:	4b38      	ldr	r3, [pc, #224]	; (801fdb8 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801fcd6:	695b      	ldr	r3, [r3, #20]
 801fcd8:	4798      	blx	r3
 801fcda:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801fcdc:	4b36      	ldr	r3, [pc, #216]	; (801fdb8 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801fcde:	691b      	ldr	r3, [r3, #16]
 801fce0:	4798      	blx	r3
 801fce2:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801fce4:	693a      	ldr	r2, [r7, #16]
 801fce6:	697b      	ldr	r3, [r7, #20]
 801fce8:	1ad3      	subs	r3, r2, r3
 801fcea:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801fcec:	4b33      	ldr	r3, [pc, #204]	; (801fdbc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fcee:	681b      	ldr	r3, [r3, #0]
 801fcf0:	2b00      	cmp	r3, #0
 801fcf2:	d037      	beq.n	801fd64 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801fcf4:	4b31      	ldr	r3, [pc, #196]	; (801fdbc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fcf6:	681b      	ldr	r3, [r3, #0]
 801fcf8:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801fcfa:	69fb      	ldr	r3, [r7, #28]
 801fcfc:	681b      	ldr	r3, [r3, #0]
 801fcfe:	68fa      	ldr	r2, [r7, #12]
 801fd00:	429a      	cmp	r2, r3
 801fd02:	d206      	bcs.n	801fd12 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801fd04:	69fb      	ldr	r3, [r7, #28]
 801fd06:	681a      	ldr	r2, [r3, #0]
 801fd08:	68fb      	ldr	r3, [r7, #12]
 801fd0a:	1ad2      	subs	r2, r2, r3
 801fd0c:	69fb      	ldr	r3, [r7, #28]
 801fd0e:	601a      	str	r2, [r3, #0]
 801fd10:	e002      	b.n	801fd18 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801fd12:	69fb      	ldr	r3, [r7, #28]
 801fd14:	2200      	movs	r2, #0
 801fd16:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801fd18:	69fb      	ldr	r3, [r7, #28]
 801fd1a:	695b      	ldr	r3, [r3, #20]
 801fd1c:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801fd1e:	69fb      	ldr	r3, [r7, #28]
 801fd20:	2b00      	cmp	r3, #0
 801fd22:	d1ea      	bne.n	801fcfa <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801fd24:	e01e      	b.n	801fd64 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801fd26:	4b25      	ldr	r3, [pc, #148]	; (801fdbc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fd28:	681b      	ldr	r3, [r3, #0]
 801fd2a:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801fd2c:	4b23      	ldr	r3, [pc, #140]	; (801fdbc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fd2e:	681b      	ldr	r3, [r3, #0]
 801fd30:	695b      	ldr	r3, [r3, #20]
 801fd32:	4a22      	ldr	r2, [pc, #136]	; (801fdbc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fd34:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801fd36:	69fb      	ldr	r3, [r7, #28]
 801fd38:	2200      	movs	r2, #0
 801fd3a:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801fd3c:	69fb      	ldr	r3, [r7, #28]
 801fd3e:	2200      	movs	r2, #0
 801fd40:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801fd42:	69fb      	ldr	r3, [r7, #28]
 801fd44:	68db      	ldr	r3, [r3, #12]
 801fd46:	69fa      	ldr	r2, [r7, #28]
 801fd48:	6912      	ldr	r2, [r2, #16]
 801fd4a:	4610      	mov	r0, r2
 801fd4c:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801fd4e:	69fb      	ldr	r3, [r7, #28]
 801fd50:	7adb      	ldrb	r3, [r3, #11]
 801fd52:	2b01      	cmp	r3, #1
 801fd54:	d106      	bne.n	801fd64 <UTIL_TIMER_IRQ_Handler+0xa4>
 801fd56:	69fb      	ldr	r3, [r7, #28]
 801fd58:	7a9b      	ldrb	r3, [r3, #10]
 801fd5a:	2b00      	cmp	r3, #0
 801fd5c:	d102      	bne.n	801fd64 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801fd5e:	69f8      	ldr	r0, [r7, #28]
 801fd60:	f7ff fea6 	bl	801fab0 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801fd64:	4b15      	ldr	r3, [pc, #84]	; (801fdbc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fd66:	681b      	ldr	r3, [r3, #0]
 801fd68:	2b00      	cmp	r3, #0
 801fd6a:	d00d      	beq.n	801fd88 <UTIL_TIMER_IRQ_Handler+0xc8>
 801fd6c:	4b13      	ldr	r3, [pc, #76]	; (801fdbc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fd6e:	681b      	ldr	r3, [r3, #0]
 801fd70:	681b      	ldr	r3, [r3, #0]
 801fd72:	2b00      	cmp	r3, #0
 801fd74:	d0d7      	beq.n	801fd26 <UTIL_TIMER_IRQ_Handler+0x66>
 801fd76:	4b11      	ldr	r3, [pc, #68]	; (801fdbc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fd78:	681b      	ldr	r3, [r3, #0]
 801fd7a:	681c      	ldr	r4, [r3, #0]
 801fd7c:	4b0e      	ldr	r3, [pc, #56]	; (801fdb8 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801fd7e:	699b      	ldr	r3, [r3, #24]
 801fd80:	4798      	blx	r3
 801fd82:	4603      	mov	r3, r0
 801fd84:	429c      	cmp	r4, r3
 801fd86:	d3ce      	bcc.n	801fd26 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801fd88:	4b0c      	ldr	r3, [pc, #48]	; (801fdbc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fd8a:	681b      	ldr	r3, [r3, #0]
 801fd8c:	2b00      	cmp	r3, #0
 801fd8e:	d009      	beq.n	801fda4 <UTIL_TIMER_IRQ_Handler+0xe4>
 801fd90:	4b0a      	ldr	r3, [pc, #40]	; (801fdbc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fd92:	681b      	ldr	r3, [r3, #0]
 801fd94:	7a1b      	ldrb	r3, [r3, #8]
 801fd96:	2b00      	cmp	r3, #0
 801fd98:	d104      	bne.n	801fda4 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801fd9a:	4b08      	ldr	r3, [pc, #32]	; (801fdbc <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fd9c:	681b      	ldr	r3, [r3, #0]
 801fd9e:	4618      	mov	r0, r3
 801fda0:	f000 f858 	bl	801fe54 <TimerSetTimeout>
 801fda4:	69bb      	ldr	r3, [r7, #24]
 801fda6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fda8:	687b      	ldr	r3, [r7, #4]
 801fdaa:	f383 8810 	msr	PRIMASK, r3
}
 801fdae:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801fdb0:	bf00      	nop
 801fdb2:	3724      	adds	r7, #36	; 0x24
 801fdb4:	46bd      	mov	sp, r7
 801fdb6:	bd90      	pop	{r4, r7, pc}
 801fdb8:	0802196c 	.word	0x0802196c
 801fdbc:	20001e68 	.word	0x20001e68

0801fdc0 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801fdc0:	b580      	push	{r7, lr}
 801fdc2:	b082      	sub	sp, #8
 801fdc4:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801fdc6:	4b06      	ldr	r3, [pc, #24]	; (801fde0 <UTIL_TIMER_GetCurrentTime+0x20>)
 801fdc8:	69db      	ldr	r3, [r3, #28]
 801fdca:	4798      	blx	r3
 801fdcc:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801fdce:	4b04      	ldr	r3, [pc, #16]	; (801fde0 <UTIL_TIMER_GetCurrentTime+0x20>)
 801fdd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fdd2:	6878      	ldr	r0, [r7, #4]
 801fdd4:	4798      	blx	r3
 801fdd6:	4603      	mov	r3, r0
}
 801fdd8:	4618      	mov	r0, r3
 801fdda:	3708      	adds	r7, #8
 801fddc:	46bd      	mov	sp, r7
 801fdde:	bd80      	pop	{r7, pc}
 801fde0:	0802196c 	.word	0x0802196c

0801fde4 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801fde4:	b580      	push	{r7, lr}
 801fde6:	b084      	sub	sp, #16
 801fde8:	af00      	add	r7, sp, #0
 801fdea:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801fdec:	4b0a      	ldr	r3, [pc, #40]	; (801fe18 <UTIL_TIMER_GetElapsedTime+0x34>)
 801fdee:	69db      	ldr	r3, [r3, #28]
 801fdf0:	4798      	blx	r3
 801fdf2:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801fdf4:	4b08      	ldr	r3, [pc, #32]	; (801fe18 <UTIL_TIMER_GetElapsedTime+0x34>)
 801fdf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fdf8:	6878      	ldr	r0, [r7, #4]
 801fdfa:	4798      	blx	r3
 801fdfc:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801fdfe:	4b06      	ldr	r3, [pc, #24]	; (801fe18 <UTIL_TIMER_GetElapsedTime+0x34>)
 801fe00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fe02:	68f9      	ldr	r1, [r7, #12]
 801fe04:	68ba      	ldr	r2, [r7, #8]
 801fe06:	1a8a      	subs	r2, r1, r2
 801fe08:	4610      	mov	r0, r2
 801fe0a:	4798      	blx	r3
 801fe0c:	4603      	mov	r3, r0
}
 801fe0e:	4618      	mov	r0, r3
 801fe10:	3710      	adds	r7, #16
 801fe12:	46bd      	mov	sp, r7
 801fe14:	bd80      	pop	{r7, pc}
 801fe16:	bf00      	nop
 801fe18:	0802196c 	.word	0x0802196c

0801fe1c <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801fe1c:	b480      	push	{r7}
 801fe1e:	b085      	sub	sp, #20
 801fe20:	af00      	add	r7, sp, #0
 801fe22:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801fe24:	4b0a      	ldr	r3, [pc, #40]	; (801fe50 <TimerExists+0x34>)
 801fe26:	681b      	ldr	r3, [r3, #0]
 801fe28:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801fe2a:	e008      	b.n	801fe3e <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801fe2c:	68fa      	ldr	r2, [r7, #12]
 801fe2e:	687b      	ldr	r3, [r7, #4]
 801fe30:	429a      	cmp	r2, r3
 801fe32:	d101      	bne.n	801fe38 <TimerExists+0x1c>
    {
      return true;
 801fe34:	2301      	movs	r3, #1
 801fe36:	e006      	b.n	801fe46 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801fe38:	68fb      	ldr	r3, [r7, #12]
 801fe3a:	695b      	ldr	r3, [r3, #20]
 801fe3c:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801fe3e:	68fb      	ldr	r3, [r7, #12]
 801fe40:	2b00      	cmp	r3, #0
 801fe42:	d1f3      	bne.n	801fe2c <TimerExists+0x10>
  }
  return false;
 801fe44:	2300      	movs	r3, #0
}
 801fe46:	4618      	mov	r0, r3
 801fe48:	3714      	adds	r7, #20
 801fe4a:	46bd      	mov	sp, r7
 801fe4c:	bc80      	pop	{r7}
 801fe4e:	4770      	bx	lr
 801fe50:	20001e68 	.word	0x20001e68

0801fe54 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801fe54:	b590      	push	{r4, r7, lr}
 801fe56:	b085      	sub	sp, #20
 801fe58:	af00      	add	r7, sp, #0
 801fe5a:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801fe5c:	4b11      	ldr	r3, [pc, #68]	; (801fea4 <TimerSetTimeout+0x50>)
 801fe5e:	6a1b      	ldr	r3, [r3, #32]
 801fe60:	4798      	blx	r3
 801fe62:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801fe64:	687b      	ldr	r3, [r7, #4]
 801fe66:	2201      	movs	r2, #1
 801fe68:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801fe6a:	687b      	ldr	r3, [r7, #4]
 801fe6c:	681c      	ldr	r4, [r3, #0]
 801fe6e:	4b0d      	ldr	r3, [pc, #52]	; (801fea4 <TimerSetTimeout+0x50>)
 801fe70:	699b      	ldr	r3, [r3, #24]
 801fe72:	4798      	blx	r3
 801fe74:	4602      	mov	r2, r0
 801fe76:	68fb      	ldr	r3, [r7, #12]
 801fe78:	4413      	add	r3, r2
 801fe7a:	429c      	cmp	r4, r3
 801fe7c:	d207      	bcs.n	801fe8e <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801fe7e:	4b09      	ldr	r3, [pc, #36]	; (801fea4 <TimerSetTimeout+0x50>)
 801fe80:	699b      	ldr	r3, [r3, #24]
 801fe82:	4798      	blx	r3
 801fe84:	4602      	mov	r2, r0
 801fe86:	68fb      	ldr	r3, [r7, #12]
 801fe88:	441a      	add	r2, r3
 801fe8a:	687b      	ldr	r3, [r7, #4]
 801fe8c:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801fe8e:	4b05      	ldr	r3, [pc, #20]	; (801fea4 <TimerSetTimeout+0x50>)
 801fe90:	689b      	ldr	r3, [r3, #8]
 801fe92:	687a      	ldr	r2, [r7, #4]
 801fe94:	6812      	ldr	r2, [r2, #0]
 801fe96:	4610      	mov	r0, r2
 801fe98:	4798      	blx	r3
}
 801fe9a:	bf00      	nop
 801fe9c:	3714      	adds	r7, #20
 801fe9e:	46bd      	mov	sp, r7
 801fea0:	bd90      	pop	{r4, r7, pc}
 801fea2:	bf00      	nop
 801fea4:	0802196c 	.word	0x0802196c

0801fea8 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801fea8:	b480      	push	{r7}
 801feaa:	b085      	sub	sp, #20
 801feac:	af00      	add	r7, sp, #0
 801feae:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801feb0:	4b14      	ldr	r3, [pc, #80]	; (801ff04 <TimerInsertTimer+0x5c>)
 801feb2:	681b      	ldr	r3, [r3, #0]
 801feb4:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801feb6:	4b13      	ldr	r3, [pc, #76]	; (801ff04 <TimerInsertTimer+0x5c>)
 801feb8:	681b      	ldr	r3, [r3, #0]
 801feba:	695b      	ldr	r3, [r3, #20]
 801febc:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801febe:	e012      	b.n	801fee6 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801fec0:	687b      	ldr	r3, [r7, #4]
 801fec2:	681a      	ldr	r2, [r3, #0]
 801fec4:	68bb      	ldr	r3, [r7, #8]
 801fec6:	681b      	ldr	r3, [r3, #0]
 801fec8:	429a      	cmp	r2, r3
 801feca:	d905      	bls.n	801fed8 <TimerInsertTimer+0x30>
    {
        cur = next;
 801fecc:	68bb      	ldr	r3, [r7, #8]
 801fece:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801fed0:	68bb      	ldr	r3, [r7, #8]
 801fed2:	695b      	ldr	r3, [r3, #20]
 801fed4:	60bb      	str	r3, [r7, #8]
 801fed6:	e006      	b.n	801fee6 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801fed8:	68fb      	ldr	r3, [r7, #12]
 801feda:	687a      	ldr	r2, [r7, #4]
 801fedc:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801fede:	687b      	ldr	r3, [r7, #4]
 801fee0:	68ba      	ldr	r2, [r7, #8]
 801fee2:	615a      	str	r2, [r3, #20]
        return;
 801fee4:	e009      	b.n	801fefa <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801fee6:	68fb      	ldr	r3, [r7, #12]
 801fee8:	695b      	ldr	r3, [r3, #20]
 801feea:	2b00      	cmp	r3, #0
 801feec:	d1e8      	bne.n	801fec0 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801feee:	68fb      	ldr	r3, [r7, #12]
 801fef0:	687a      	ldr	r2, [r7, #4]
 801fef2:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801fef4:	687b      	ldr	r3, [r7, #4]
 801fef6:	2200      	movs	r2, #0
 801fef8:	615a      	str	r2, [r3, #20]
}
 801fefa:	3714      	adds	r7, #20
 801fefc:	46bd      	mov	sp, r7
 801fefe:	bc80      	pop	{r7}
 801ff00:	4770      	bx	lr
 801ff02:	bf00      	nop
 801ff04:	20001e68 	.word	0x20001e68

0801ff08 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801ff08:	b580      	push	{r7, lr}
 801ff0a:	b084      	sub	sp, #16
 801ff0c:	af00      	add	r7, sp, #0
 801ff0e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801ff10:	4b0b      	ldr	r3, [pc, #44]	; (801ff40 <TimerInsertNewHeadTimer+0x38>)
 801ff12:	681b      	ldr	r3, [r3, #0]
 801ff14:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801ff16:	68fb      	ldr	r3, [r7, #12]
 801ff18:	2b00      	cmp	r3, #0
 801ff1a:	d002      	beq.n	801ff22 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801ff1c:	68fb      	ldr	r3, [r7, #12]
 801ff1e:	2200      	movs	r2, #0
 801ff20:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801ff22:	687b      	ldr	r3, [r7, #4]
 801ff24:	68fa      	ldr	r2, [r7, #12]
 801ff26:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801ff28:	4a05      	ldr	r2, [pc, #20]	; (801ff40 <TimerInsertNewHeadTimer+0x38>)
 801ff2a:	687b      	ldr	r3, [r7, #4]
 801ff2c:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801ff2e:	4b04      	ldr	r3, [pc, #16]	; (801ff40 <TimerInsertNewHeadTimer+0x38>)
 801ff30:	681b      	ldr	r3, [r3, #0]
 801ff32:	4618      	mov	r0, r3
 801ff34:	f7ff ff8e 	bl	801fe54 <TimerSetTimeout>
}
 801ff38:	bf00      	nop
 801ff3a:	3710      	adds	r7, #16
 801ff3c:	46bd      	mov	sp, r7
 801ff3e:	bd80      	pop	{r7, pc}
 801ff40:	20001e68 	.word	0x20001e68

0801ff44 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801ff44:	b580      	push	{r7, lr}
 801ff46:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801ff48:	2218      	movs	r2, #24
 801ff4a:	2100      	movs	r1, #0
 801ff4c:	4807      	ldr	r0, [pc, #28]	; (801ff6c <UTIL_ADV_TRACE_Init+0x28>)
 801ff4e:	f7fe ffda 	bl	801ef06 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801ff52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801ff56:	2100      	movs	r1, #0
 801ff58:	4805      	ldr	r0, [pc, #20]	; (801ff70 <UTIL_ADV_TRACE_Init+0x2c>)
 801ff5a:	f7fe ffd4 	bl	801ef06 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801ff5e:	4b05      	ldr	r3, [pc, #20]	; (801ff74 <UTIL_ADV_TRACE_Init+0x30>)
 801ff60:	681b      	ldr	r3, [r3, #0]
 801ff62:	4805      	ldr	r0, [pc, #20]	; (801ff78 <UTIL_ADV_TRACE_Init+0x34>)
 801ff64:	4798      	blx	r3
 801ff66:	4603      	mov	r3, r0
}
 801ff68:	4618      	mov	r0, r3
 801ff6a:	bd80      	pop	{r7, pc}
 801ff6c:	20001e6c 	.word	0x20001e6c
 801ff70:	20001e84 	.word	0x20001e84
 801ff74:	080219ac 	.word	0x080219ac
 801ff78:	080201e5 	.word	0x080201e5

0801ff7c <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801ff7c:	b480      	push	{r7}
 801ff7e:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801ff80:	4b06      	ldr	r3, [pc, #24]	; (801ff9c <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801ff82:	8a5a      	ldrh	r2, [r3, #18]
 801ff84:	4b05      	ldr	r3, [pc, #20]	; (801ff9c <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801ff86:	8a1b      	ldrh	r3, [r3, #16]
 801ff88:	429a      	cmp	r2, r3
 801ff8a:	d101      	bne.n	801ff90 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801ff8c:	2301      	movs	r3, #1
 801ff8e:	e000      	b.n	801ff92 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801ff90:	2300      	movs	r3, #0
}
 801ff92:	4618      	mov	r0, r3
 801ff94:	46bd      	mov	sp, r7
 801ff96:	bc80      	pop	{r7}
 801ff98:	4770      	bx	lr
 801ff9a:	bf00      	nop
 801ff9c:	20001e6c 	.word	0x20001e6c

0801ffa0 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801ffa0:	b408      	push	{r3}
 801ffa2:	b580      	push	{r7, lr}
 801ffa4:	b08d      	sub	sp, #52	; 0x34
 801ffa6:	af00      	add	r7, sp, #0
 801ffa8:	60f8      	str	r0, [r7, #12]
 801ffaa:	60b9      	str	r1, [r7, #8]
 801ffac:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801ffae:	2300      	movs	r3, #0
 801ffb0:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801ffb2:	2300      	movs	r3, #0
 801ffb4:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801ffb6:	4b37      	ldr	r3, [pc, #220]	; (8020094 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801ffb8:	7a1b      	ldrb	r3, [r3, #8]
 801ffba:	461a      	mov	r2, r3
 801ffbc:	68fb      	ldr	r3, [r7, #12]
 801ffbe:	4293      	cmp	r3, r2
 801ffc0:	d902      	bls.n	801ffc8 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801ffc2:	f06f 0304 	mvn.w	r3, #4
 801ffc6:	e05e      	b.n	8020086 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801ffc8:	4b32      	ldr	r3, [pc, #200]	; (8020094 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801ffca:	68da      	ldr	r2, [r3, #12]
 801ffcc:	68bb      	ldr	r3, [r7, #8]
 801ffce:	4013      	ands	r3, r2
 801ffd0:	68ba      	ldr	r2, [r7, #8]
 801ffd2:	429a      	cmp	r2, r3
 801ffd4:	d002      	beq.n	801ffdc <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801ffd6:	f06f 0305 	mvn.w	r3, #5
 801ffda:	e054      	b.n	8020086 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801ffdc:	4b2d      	ldr	r3, [pc, #180]	; (8020094 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801ffde:	685b      	ldr	r3, [r3, #4]
 801ffe0:	2b00      	cmp	r3, #0
 801ffe2:	d00a      	beq.n	801fffa <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801ffe4:	687b      	ldr	r3, [r7, #4]
 801ffe6:	2b00      	cmp	r3, #0
 801ffe8:	d007      	beq.n	801fffa <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801ffea:	4b2a      	ldr	r3, [pc, #168]	; (8020094 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801ffec:	685b      	ldr	r3, [r3, #4]
 801ffee:	f107 0116 	add.w	r1, r7, #22
 801fff2:	f107 0218 	add.w	r2, r7, #24
 801fff6:	4610      	mov	r0, r2
 801fff8:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801fffa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801fffe:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8020000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020002:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8020004:	f44f 7100 	mov.w	r1, #512	; 0x200
 8020008:	4823      	ldr	r0, [pc, #140]	; (8020098 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 802000a:	f7ff fa09 	bl	801f420 <tiny_vsnprintf_like>
 802000e:	4603      	mov	r3, r0
 8020010:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 8020012:	f000 f9f1 	bl	80203f8 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8020016:	8afa      	ldrh	r2, [r7, #22]
 8020018:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 802001a:	4413      	add	r3, r2
 802001c:	b29b      	uxth	r3, r3
 802001e:	f107 0214 	add.w	r2, r7, #20
 8020022:	4611      	mov	r1, r2
 8020024:	4618      	mov	r0, r3
 8020026:	f000 f969 	bl	80202fc <TRACE_AllocateBufer>
 802002a:	4603      	mov	r3, r0
 802002c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8020030:	d025      	beq.n	802007e <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 8020032:	2300      	movs	r3, #0
 8020034:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8020036:	e00e      	b.n	8020056 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8020038:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802003a:	8aba      	ldrh	r2, [r7, #20]
 802003c:	3330      	adds	r3, #48	; 0x30
 802003e:	443b      	add	r3, r7
 8020040:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 8020044:	4b15      	ldr	r3, [pc, #84]	; (802009c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 8020046:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 8020048:	8abb      	ldrh	r3, [r7, #20]
 802004a:	3301      	adds	r3, #1
 802004c:	b29b      	uxth	r3, r3
 802004e:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 8020050:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8020052:	3301      	adds	r3, #1
 8020054:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8020056:	8afb      	ldrh	r3, [r7, #22]
 8020058:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 802005a:	429a      	cmp	r2, r3
 802005c:	d3ec      	bcc.n	8020038 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 802005e:	8abb      	ldrh	r3, [r7, #20]
 8020060:	461a      	mov	r2, r3
 8020062:	4b0e      	ldr	r3, [pc, #56]	; (802009c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 8020064:	18d0      	adds	r0, r2, r3
 8020066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020068:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802006a:	f44f 7100 	mov.w	r1, #512	; 0x200
 802006e:	f7ff f9d7 	bl	801f420 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 8020072:	f000 f9df 	bl	8020434 <TRACE_UnLock>

    return TRACE_Send();
 8020076:	f000 f831 	bl	80200dc <TRACE_Send>
 802007a:	4603      	mov	r3, r0
 802007c:	e003      	b.n	8020086 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 802007e:	f000 f9d9 	bl	8020434 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 8020082:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 8020086:	4618      	mov	r0, r3
 8020088:	3734      	adds	r7, #52	; 0x34
 802008a:	46bd      	mov	sp, r7
 802008c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8020090:	b001      	add	sp, #4
 8020092:	4770      	bx	lr
 8020094:	20001e6c 	.word	0x20001e6c
 8020098:	20002284 	.word	0x20002284
 802009c:	20001e84 	.word	0x20001e84

080200a0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 80200a0:	b480      	push	{r7}
 80200a2:	b083      	sub	sp, #12
 80200a4:	af00      	add	r7, sp, #0
 80200a6:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 80200a8:	4a03      	ldr	r2, [pc, #12]	; (80200b8 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 80200aa:	687b      	ldr	r3, [r7, #4]
 80200ac:	6053      	str	r3, [r2, #4]
}
 80200ae:	bf00      	nop
 80200b0:	370c      	adds	r7, #12
 80200b2:	46bd      	mov	sp, r7
 80200b4:	bc80      	pop	{r7}
 80200b6:	4770      	bx	lr
 80200b8:	20001e6c 	.word	0x20001e6c

080200bc <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 80200bc:	b480      	push	{r7}
 80200be:	b083      	sub	sp, #12
 80200c0:	af00      	add	r7, sp, #0
 80200c2:	4603      	mov	r3, r0
 80200c4:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 80200c6:	4a04      	ldr	r2, [pc, #16]	; (80200d8 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 80200c8:	79fb      	ldrb	r3, [r7, #7]
 80200ca:	7213      	strb	r3, [r2, #8]
}
 80200cc:	bf00      	nop
 80200ce:	370c      	adds	r7, #12
 80200d0:	46bd      	mov	sp, r7
 80200d2:	bc80      	pop	{r7}
 80200d4:	4770      	bx	lr
 80200d6:	bf00      	nop
 80200d8:	20001e6c 	.word	0x20001e6c

080200dc <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 80200dc:	b580      	push	{r7, lr}
 80200de:	b088      	sub	sp, #32
 80200e0:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 80200e2:	2300      	movs	r3, #0
 80200e4:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 80200e6:	2300      	movs	r3, #0
 80200e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80200ea:	f3ef 8310 	mrs	r3, PRIMASK
 80200ee:	613b      	str	r3, [r7, #16]
  return(result);
 80200f0:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 80200f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80200f4:	b672      	cpsid	i
}
 80200f6:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 80200f8:	f000 f9ba 	bl	8020470 <TRACE_IsLocked>
 80200fc:	4603      	mov	r3, r0
 80200fe:	2b00      	cmp	r3, #0
 8020100:	d15d      	bne.n	80201be <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 8020102:	f000 f979 	bl	80203f8 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8020106:	4b34      	ldr	r3, [pc, #208]	; (80201d8 <TRACE_Send+0xfc>)
 8020108:	8a1a      	ldrh	r2, [r3, #16]
 802010a:	4b33      	ldr	r3, [pc, #204]	; (80201d8 <TRACE_Send+0xfc>)
 802010c:	8a5b      	ldrh	r3, [r3, #18]
 802010e:	429a      	cmp	r2, r3
 8020110:	d04d      	beq.n	80201ae <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8020112:	4b31      	ldr	r3, [pc, #196]	; (80201d8 <TRACE_Send+0xfc>)
 8020114:	789b      	ldrb	r3, [r3, #2]
 8020116:	2b01      	cmp	r3, #1
 8020118:	d117      	bne.n	802014a <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 802011a:	4b2f      	ldr	r3, [pc, #188]	; (80201d8 <TRACE_Send+0xfc>)
 802011c:	881a      	ldrh	r2, [r3, #0]
 802011e:	4b2e      	ldr	r3, [pc, #184]	; (80201d8 <TRACE_Send+0xfc>)
 8020120:	8a1b      	ldrh	r3, [r3, #16]
 8020122:	1ad3      	subs	r3, r2, r3
 8020124:	b29a      	uxth	r2, r3
 8020126:	4b2c      	ldr	r3, [pc, #176]	; (80201d8 <TRACE_Send+0xfc>)
 8020128:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 802012a:	4b2b      	ldr	r3, [pc, #172]	; (80201d8 <TRACE_Send+0xfc>)
 802012c:	2202      	movs	r2, #2
 802012e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8020130:	4b29      	ldr	r3, [pc, #164]	; (80201d8 <TRACE_Send+0xfc>)
 8020132:	2200      	movs	r2, #0
 8020134:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8020136:	4b28      	ldr	r3, [pc, #160]	; (80201d8 <TRACE_Send+0xfc>)
 8020138:	8a9b      	ldrh	r3, [r3, #20]
 802013a:	2b00      	cmp	r3, #0
 802013c:	d105      	bne.n	802014a <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 802013e:	4b26      	ldr	r3, [pc, #152]	; (80201d8 <TRACE_Send+0xfc>)
 8020140:	2200      	movs	r2, #0
 8020142:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8020144:	4b24      	ldr	r3, [pc, #144]	; (80201d8 <TRACE_Send+0xfc>)
 8020146:	2200      	movs	r2, #0
 8020148:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 802014a:	4b23      	ldr	r3, [pc, #140]	; (80201d8 <TRACE_Send+0xfc>)
 802014c:	789b      	ldrb	r3, [r3, #2]
 802014e:	2b00      	cmp	r3, #0
 8020150:	d115      	bne.n	802017e <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8020152:	4b21      	ldr	r3, [pc, #132]	; (80201d8 <TRACE_Send+0xfc>)
 8020154:	8a5a      	ldrh	r2, [r3, #18]
 8020156:	4b20      	ldr	r3, [pc, #128]	; (80201d8 <TRACE_Send+0xfc>)
 8020158:	8a1b      	ldrh	r3, [r3, #16]
 802015a:	429a      	cmp	r2, r3
 802015c:	d908      	bls.n	8020170 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 802015e:	4b1e      	ldr	r3, [pc, #120]	; (80201d8 <TRACE_Send+0xfc>)
 8020160:	8a5a      	ldrh	r2, [r3, #18]
 8020162:	4b1d      	ldr	r3, [pc, #116]	; (80201d8 <TRACE_Send+0xfc>)
 8020164:	8a1b      	ldrh	r3, [r3, #16]
 8020166:	1ad3      	subs	r3, r2, r3
 8020168:	b29a      	uxth	r2, r3
 802016a:	4b1b      	ldr	r3, [pc, #108]	; (80201d8 <TRACE_Send+0xfc>)
 802016c:	829a      	strh	r2, [r3, #20]
 802016e:	e006      	b.n	802017e <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8020170:	4b19      	ldr	r3, [pc, #100]	; (80201d8 <TRACE_Send+0xfc>)
 8020172:	8a1b      	ldrh	r3, [r3, #16]
 8020174:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8020178:	b29a      	uxth	r2, r3
 802017a:	4b17      	ldr	r3, [pc, #92]	; (80201d8 <TRACE_Send+0xfc>)
 802017c:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 802017e:	4b16      	ldr	r3, [pc, #88]	; (80201d8 <TRACE_Send+0xfc>)
 8020180:	8a1b      	ldrh	r3, [r3, #16]
 8020182:	461a      	mov	r2, r3
 8020184:	4b15      	ldr	r3, [pc, #84]	; (80201dc <TRACE_Send+0x100>)
 8020186:	4413      	add	r3, r2
 8020188:	61bb      	str	r3, [r7, #24]
 802018a:	697b      	ldr	r3, [r7, #20]
 802018c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802018e:	68fb      	ldr	r3, [r7, #12]
 8020190:	f383 8810 	msr	PRIMASK, r3
}
 8020194:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 8020196:	f7e2 fb3b 	bl	8002810 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 802019a:	4b11      	ldr	r3, [pc, #68]	; (80201e0 <TRACE_Send+0x104>)
 802019c:	68db      	ldr	r3, [r3, #12]
 802019e:	4a0e      	ldr	r2, [pc, #56]	; (80201d8 <TRACE_Send+0xfc>)
 80201a0:	8a92      	ldrh	r2, [r2, #20]
 80201a2:	4611      	mov	r1, r2
 80201a4:	69b8      	ldr	r0, [r7, #24]
 80201a6:	4798      	blx	r3
 80201a8:	4603      	mov	r3, r0
 80201aa:	77fb      	strb	r3, [r7, #31]
 80201ac:	e00d      	b.n	80201ca <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 80201ae:	f000 f941 	bl	8020434 <TRACE_UnLock>
 80201b2:	697b      	ldr	r3, [r7, #20]
 80201b4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80201b6:	68bb      	ldr	r3, [r7, #8]
 80201b8:	f383 8810 	msr	PRIMASK, r3
}
 80201bc:	e005      	b.n	80201ca <TRACE_Send+0xee>
 80201be:	697b      	ldr	r3, [r7, #20]
 80201c0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80201c2:	687b      	ldr	r3, [r7, #4]
 80201c4:	f383 8810 	msr	PRIMASK, r3
}
 80201c8:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 80201ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80201ce:	4618      	mov	r0, r3
 80201d0:	3720      	adds	r7, #32
 80201d2:	46bd      	mov	sp, r7
 80201d4:	bd80      	pop	{r7, pc}
 80201d6:	bf00      	nop
 80201d8:	20001e6c 	.word	0x20001e6c
 80201dc:	20001e84 	.word	0x20001e84
 80201e0:	080219ac 	.word	0x080219ac

080201e4 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 80201e4:	b580      	push	{r7, lr}
 80201e6:	b088      	sub	sp, #32
 80201e8:	af00      	add	r7, sp, #0
 80201ea:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 80201ec:	2300      	movs	r3, #0
 80201ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80201f0:	f3ef 8310 	mrs	r3, PRIMASK
 80201f4:	617b      	str	r3, [r7, #20]
  return(result);
 80201f6:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 80201f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 80201fa:	b672      	cpsid	i
}
 80201fc:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 80201fe:	4b3c      	ldr	r3, [pc, #240]	; (80202f0 <TRACE_TxCpltCallback+0x10c>)
 8020200:	789b      	ldrb	r3, [r3, #2]
 8020202:	2b02      	cmp	r3, #2
 8020204:	d106      	bne.n	8020214 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8020206:	4b3a      	ldr	r3, [pc, #232]	; (80202f0 <TRACE_TxCpltCallback+0x10c>)
 8020208:	2200      	movs	r2, #0
 802020a:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 802020c:	4b38      	ldr	r3, [pc, #224]	; (80202f0 <TRACE_TxCpltCallback+0x10c>)
 802020e:	2200      	movs	r2, #0
 8020210:	821a      	strh	r2, [r3, #16]
 8020212:	e00a      	b.n	802022a <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8020214:	4b36      	ldr	r3, [pc, #216]	; (80202f0 <TRACE_TxCpltCallback+0x10c>)
 8020216:	8a1a      	ldrh	r2, [r3, #16]
 8020218:	4b35      	ldr	r3, [pc, #212]	; (80202f0 <TRACE_TxCpltCallback+0x10c>)
 802021a:	8a9b      	ldrh	r3, [r3, #20]
 802021c:	4413      	add	r3, r2
 802021e:	b29b      	uxth	r3, r3
 8020220:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8020224:	b29a      	uxth	r2, r3
 8020226:	4b32      	ldr	r3, [pc, #200]	; (80202f0 <TRACE_TxCpltCallback+0x10c>)
 8020228:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 802022a:	4b31      	ldr	r3, [pc, #196]	; (80202f0 <TRACE_TxCpltCallback+0x10c>)
 802022c:	8a1a      	ldrh	r2, [r3, #16]
 802022e:	4b30      	ldr	r3, [pc, #192]	; (80202f0 <TRACE_TxCpltCallback+0x10c>)
 8020230:	8a5b      	ldrh	r3, [r3, #18]
 8020232:	429a      	cmp	r2, r3
 8020234:	d04d      	beq.n	80202d2 <TRACE_TxCpltCallback+0xee>
 8020236:	4b2e      	ldr	r3, [pc, #184]	; (80202f0 <TRACE_TxCpltCallback+0x10c>)
 8020238:	8adb      	ldrh	r3, [r3, #22]
 802023a:	2b01      	cmp	r3, #1
 802023c:	d149      	bne.n	80202d2 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 802023e:	4b2c      	ldr	r3, [pc, #176]	; (80202f0 <TRACE_TxCpltCallback+0x10c>)
 8020240:	789b      	ldrb	r3, [r3, #2]
 8020242:	2b01      	cmp	r3, #1
 8020244:	d117      	bne.n	8020276 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8020246:	4b2a      	ldr	r3, [pc, #168]	; (80202f0 <TRACE_TxCpltCallback+0x10c>)
 8020248:	881a      	ldrh	r2, [r3, #0]
 802024a:	4b29      	ldr	r3, [pc, #164]	; (80202f0 <TRACE_TxCpltCallback+0x10c>)
 802024c:	8a1b      	ldrh	r3, [r3, #16]
 802024e:	1ad3      	subs	r3, r2, r3
 8020250:	b29a      	uxth	r2, r3
 8020252:	4b27      	ldr	r3, [pc, #156]	; (80202f0 <TRACE_TxCpltCallback+0x10c>)
 8020254:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8020256:	4b26      	ldr	r3, [pc, #152]	; (80202f0 <TRACE_TxCpltCallback+0x10c>)
 8020258:	2202      	movs	r2, #2
 802025a:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 802025c:	4b24      	ldr	r3, [pc, #144]	; (80202f0 <TRACE_TxCpltCallback+0x10c>)
 802025e:	2200      	movs	r2, #0
 8020260:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8020262:	4b23      	ldr	r3, [pc, #140]	; (80202f0 <TRACE_TxCpltCallback+0x10c>)
 8020264:	8a9b      	ldrh	r3, [r3, #20]
 8020266:	2b00      	cmp	r3, #0
 8020268:	d105      	bne.n	8020276 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 802026a:	4b21      	ldr	r3, [pc, #132]	; (80202f0 <TRACE_TxCpltCallback+0x10c>)
 802026c:	2200      	movs	r2, #0
 802026e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8020270:	4b1f      	ldr	r3, [pc, #124]	; (80202f0 <TRACE_TxCpltCallback+0x10c>)
 8020272:	2200      	movs	r2, #0
 8020274:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8020276:	4b1e      	ldr	r3, [pc, #120]	; (80202f0 <TRACE_TxCpltCallback+0x10c>)
 8020278:	789b      	ldrb	r3, [r3, #2]
 802027a:	2b00      	cmp	r3, #0
 802027c:	d115      	bne.n	80202aa <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 802027e:	4b1c      	ldr	r3, [pc, #112]	; (80202f0 <TRACE_TxCpltCallback+0x10c>)
 8020280:	8a5a      	ldrh	r2, [r3, #18]
 8020282:	4b1b      	ldr	r3, [pc, #108]	; (80202f0 <TRACE_TxCpltCallback+0x10c>)
 8020284:	8a1b      	ldrh	r3, [r3, #16]
 8020286:	429a      	cmp	r2, r3
 8020288:	d908      	bls.n	802029c <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 802028a:	4b19      	ldr	r3, [pc, #100]	; (80202f0 <TRACE_TxCpltCallback+0x10c>)
 802028c:	8a5a      	ldrh	r2, [r3, #18]
 802028e:	4b18      	ldr	r3, [pc, #96]	; (80202f0 <TRACE_TxCpltCallback+0x10c>)
 8020290:	8a1b      	ldrh	r3, [r3, #16]
 8020292:	1ad3      	subs	r3, r2, r3
 8020294:	b29a      	uxth	r2, r3
 8020296:	4b16      	ldr	r3, [pc, #88]	; (80202f0 <TRACE_TxCpltCallback+0x10c>)
 8020298:	829a      	strh	r2, [r3, #20]
 802029a:	e006      	b.n	80202aa <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 802029c:	4b14      	ldr	r3, [pc, #80]	; (80202f0 <TRACE_TxCpltCallback+0x10c>)
 802029e:	8a1b      	ldrh	r3, [r3, #16]
 80202a0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80202a4:	b29a      	uxth	r2, r3
 80202a6:	4b12      	ldr	r3, [pc, #72]	; (80202f0 <TRACE_TxCpltCallback+0x10c>)
 80202a8:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80202aa:	4b11      	ldr	r3, [pc, #68]	; (80202f0 <TRACE_TxCpltCallback+0x10c>)
 80202ac:	8a1b      	ldrh	r3, [r3, #16]
 80202ae:	461a      	mov	r2, r3
 80202b0:	4b10      	ldr	r3, [pc, #64]	; (80202f4 <TRACE_TxCpltCallback+0x110>)
 80202b2:	4413      	add	r3, r2
 80202b4:	61fb      	str	r3, [r7, #28]
 80202b6:	69bb      	ldr	r3, [r7, #24]
 80202b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80202ba:	693b      	ldr	r3, [r7, #16]
 80202bc:	f383 8810 	msr	PRIMASK, r3
}
 80202c0:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80202c2:	4b0d      	ldr	r3, [pc, #52]	; (80202f8 <TRACE_TxCpltCallback+0x114>)
 80202c4:	68db      	ldr	r3, [r3, #12]
 80202c6:	4a0a      	ldr	r2, [pc, #40]	; (80202f0 <TRACE_TxCpltCallback+0x10c>)
 80202c8:	8a92      	ldrh	r2, [r2, #20]
 80202ca:	4611      	mov	r1, r2
 80202cc:	69f8      	ldr	r0, [r7, #28]
 80202ce:	4798      	blx	r3
 80202d0:	e00a      	b.n	80202e8 <TRACE_TxCpltCallback+0x104>
 80202d2:	69bb      	ldr	r3, [r7, #24]
 80202d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80202d6:	68fb      	ldr	r3, [r7, #12]
 80202d8:	f383 8810 	msr	PRIMASK, r3
}
 80202dc:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 80202de:	f7e2 fa9f 	bl	8002820 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 80202e2:	f000 f8a7 	bl	8020434 <TRACE_UnLock>
  }
}
 80202e6:	bf00      	nop
 80202e8:	bf00      	nop
 80202ea:	3720      	adds	r7, #32
 80202ec:	46bd      	mov	sp, r7
 80202ee:	bd80      	pop	{r7, pc}
 80202f0:	20001e6c 	.word	0x20001e6c
 80202f4:	20001e84 	.word	0x20001e84
 80202f8:	080219ac 	.word	0x080219ac

080202fc <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 80202fc:	b480      	push	{r7}
 80202fe:	b087      	sub	sp, #28
 8020300:	af00      	add	r7, sp, #0
 8020302:	4603      	mov	r3, r0
 8020304:	6039      	str	r1, [r7, #0]
 8020306:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 8020308:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802030c:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802030e:	f3ef 8310 	mrs	r3, PRIMASK
 8020312:	60fb      	str	r3, [r7, #12]
  return(result);
 8020314:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8020316:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8020318:	b672      	cpsid	i
}
 802031a:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 802031c:	4b35      	ldr	r3, [pc, #212]	; (80203f4 <TRACE_AllocateBufer+0xf8>)
 802031e:	8a5a      	ldrh	r2, [r3, #18]
 8020320:	4b34      	ldr	r3, [pc, #208]	; (80203f4 <TRACE_AllocateBufer+0xf8>)
 8020322:	8a1b      	ldrh	r3, [r3, #16]
 8020324:	429a      	cmp	r2, r3
 8020326:	d11b      	bne.n	8020360 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8020328:	4b32      	ldr	r3, [pc, #200]	; (80203f4 <TRACE_AllocateBufer+0xf8>)
 802032a:	8a5b      	ldrh	r3, [r3, #18]
 802032c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8020330:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8020332:	88fa      	ldrh	r2, [r7, #6]
 8020334:	8afb      	ldrh	r3, [r7, #22]
 8020336:	429a      	cmp	r2, r3
 8020338:	d33a      	bcc.n	80203b0 <TRACE_AllocateBufer+0xb4>
 802033a:	4b2e      	ldr	r3, [pc, #184]	; (80203f4 <TRACE_AllocateBufer+0xf8>)
 802033c:	8a1b      	ldrh	r3, [r3, #16]
 802033e:	88fa      	ldrh	r2, [r7, #6]
 8020340:	429a      	cmp	r2, r3
 8020342:	d235      	bcs.n	80203b0 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8020344:	4b2b      	ldr	r3, [pc, #172]	; (80203f4 <TRACE_AllocateBufer+0xf8>)
 8020346:	2201      	movs	r2, #1
 8020348:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 802034a:	4b2a      	ldr	r3, [pc, #168]	; (80203f4 <TRACE_AllocateBufer+0xf8>)
 802034c:	8a5a      	ldrh	r2, [r3, #18]
 802034e:	4b29      	ldr	r3, [pc, #164]	; (80203f4 <TRACE_AllocateBufer+0xf8>)
 8020350:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8020352:	4b28      	ldr	r3, [pc, #160]	; (80203f4 <TRACE_AllocateBufer+0xf8>)
 8020354:	8a1b      	ldrh	r3, [r3, #16]
 8020356:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8020358:	4b26      	ldr	r3, [pc, #152]	; (80203f4 <TRACE_AllocateBufer+0xf8>)
 802035a:	2200      	movs	r2, #0
 802035c:	825a      	strh	r2, [r3, #18]
 802035e:	e027      	b.n	80203b0 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8020360:	4b24      	ldr	r3, [pc, #144]	; (80203f4 <TRACE_AllocateBufer+0xf8>)
 8020362:	8a5a      	ldrh	r2, [r3, #18]
 8020364:	4b23      	ldr	r3, [pc, #140]	; (80203f4 <TRACE_AllocateBufer+0xf8>)
 8020366:	8a1b      	ldrh	r3, [r3, #16]
 8020368:	429a      	cmp	r2, r3
 802036a:	d91b      	bls.n	80203a4 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 802036c:	4b21      	ldr	r3, [pc, #132]	; (80203f4 <TRACE_AllocateBufer+0xf8>)
 802036e:	8a5b      	ldrh	r3, [r3, #18]
 8020370:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8020374:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8020376:	88fa      	ldrh	r2, [r7, #6]
 8020378:	8afb      	ldrh	r3, [r7, #22]
 802037a:	429a      	cmp	r2, r3
 802037c:	d318      	bcc.n	80203b0 <TRACE_AllocateBufer+0xb4>
 802037e:	4b1d      	ldr	r3, [pc, #116]	; (80203f4 <TRACE_AllocateBufer+0xf8>)
 8020380:	8a1b      	ldrh	r3, [r3, #16]
 8020382:	88fa      	ldrh	r2, [r7, #6]
 8020384:	429a      	cmp	r2, r3
 8020386:	d213      	bcs.n	80203b0 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8020388:	4b1a      	ldr	r3, [pc, #104]	; (80203f4 <TRACE_AllocateBufer+0xf8>)
 802038a:	2201      	movs	r2, #1
 802038c:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 802038e:	4b19      	ldr	r3, [pc, #100]	; (80203f4 <TRACE_AllocateBufer+0xf8>)
 8020390:	8a5a      	ldrh	r2, [r3, #18]
 8020392:	4b18      	ldr	r3, [pc, #96]	; (80203f4 <TRACE_AllocateBufer+0xf8>)
 8020394:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8020396:	4b17      	ldr	r3, [pc, #92]	; (80203f4 <TRACE_AllocateBufer+0xf8>)
 8020398:	8a1b      	ldrh	r3, [r3, #16]
 802039a:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 802039c:	4b15      	ldr	r3, [pc, #84]	; (80203f4 <TRACE_AllocateBufer+0xf8>)
 802039e:	2200      	movs	r2, #0
 80203a0:	825a      	strh	r2, [r3, #18]
 80203a2:	e005      	b.n	80203b0 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 80203a4:	4b13      	ldr	r3, [pc, #76]	; (80203f4 <TRACE_AllocateBufer+0xf8>)
 80203a6:	8a1a      	ldrh	r2, [r3, #16]
 80203a8:	4b12      	ldr	r3, [pc, #72]	; (80203f4 <TRACE_AllocateBufer+0xf8>)
 80203aa:	8a5b      	ldrh	r3, [r3, #18]
 80203ac:	1ad3      	subs	r3, r2, r3
 80203ae:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 80203b0:	8afa      	ldrh	r2, [r7, #22]
 80203b2:	88fb      	ldrh	r3, [r7, #6]
 80203b4:	429a      	cmp	r2, r3
 80203b6:	d90f      	bls.n	80203d8 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 80203b8:	4b0e      	ldr	r3, [pc, #56]	; (80203f4 <TRACE_AllocateBufer+0xf8>)
 80203ba:	8a5a      	ldrh	r2, [r3, #18]
 80203bc:	683b      	ldr	r3, [r7, #0]
 80203be:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 80203c0:	4b0c      	ldr	r3, [pc, #48]	; (80203f4 <TRACE_AllocateBufer+0xf8>)
 80203c2:	8a5a      	ldrh	r2, [r3, #18]
 80203c4:	88fb      	ldrh	r3, [r7, #6]
 80203c6:	4413      	add	r3, r2
 80203c8:	b29b      	uxth	r3, r3
 80203ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80203ce:	b29a      	uxth	r2, r3
 80203d0:	4b08      	ldr	r3, [pc, #32]	; (80203f4 <TRACE_AllocateBufer+0xf8>)
 80203d2:	825a      	strh	r2, [r3, #18]
    ret = 0;
 80203d4:	2300      	movs	r3, #0
 80203d6:	82bb      	strh	r3, [r7, #20]
 80203d8:	693b      	ldr	r3, [r7, #16]
 80203da:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80203dc:	68bb      	ldr	r3, [r7, #8]
 80203de:	f383 8810 	msr	PRIMASK, r3
}
 80203e2:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 80203e4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 80203e8:	4618      	mov	r0, r3
 80203ea:	371c      	adds	r7, #28
 80203ec:	46bd      	mov	sp, r7
 80203ee:	bc80      	pop	{r7}
 80203f0:	4770      	bx	lr
 80203f2:	bf00      	nop
 80203f4:	20001e6c 	.word	0x20001e6c

080203f8 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 80203f8:	b480      	push	{r7}
 80203fa:	b085      	sub	sp, #20
 80203fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80203fe:	f3ef 8310 	mrs	r3, PRIMASK
 8020402:	607b      	str	r3, [r7, #4]
  return(result);
 8020404:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8020406:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8020408:	b672      	cpsid	i
}
 802040a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 802040c:	4b08      	ldr	r3, [pc, #32]	; (8020430 <TRACE_Lock+0x38>)
 802040e:	8adb      	ldrh	r3, [r3, #22]
 8020410:	3301      	adds	r3, #1
 8020412:	b29a      	uxth	r2, r3
 8020414:	4b06      	ldr	r3, [pc, #24]	; (8020430 <TRACE_Lock+0x38>)
 8020416:	82da      	strh	r2, [r3, #22]
 8020418:	68fb      	ldr	r3, [r7, #12]
 802041a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802041c:	68bb      	ldr	r3, [r7, #8]
 802041e:	f383 8810 	msr	PRIMASK, r3
}
 8020422:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8020424:	bf00      	nop
 8020426:	3714      	adds	r7, #20
 8020428:	46bd      	mov	sp, r7
 802042a:	bc80      	pop	{r7}
 802042c:	4770      	bx	lr
 802042e:	bf00      	nop
 8020430:	20001e6c 	.word	0x20001e6c

08020434 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 8020434:	b480      	push	{r7}
 8020436:	b085      	sub	sp, #20
 8020438:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802043a:	f3ef 8310 	mrs	r3, PRIMASK
 802043e:	607b      	str	r3, [r7, #4]
  return(result);
 8020440:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8020442:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8020444:	b672      	cpsid	i
}
 8020446:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 8020448:	4b08      	ldr	r3, [pc, #32]	; (802046c <TRACE_UnLock+0x38>)
 802044a:	8adb      	ldrh	r3, [r3, #22]
 802044c:	3b01      	subs	r3, #1
 802044e:	b29a      	uxth	r2, r3
 8020450:	4b06      	ldr	r3, [pc, #24]	; (802046c <TRACE_UnLock+0x38>)
 8020452:	82da      	strh	r2, [r3, #22]
 8020454:	68fb      	ldr	r3, [r7, #12]
 8020456:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020458:	68bb      	ldr	r3, [r7, #8]
 802045a:	f383 8810 	msr	PRIMASK, r3
}
 802045e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8020460:	bf00      	nop
 8020462:	3714      	adds	r7, #20
 8020464:	46bd      	mov	sp, r7
 8020466:	bc80      	pop	{r7}
 8020468:	4770      	bx	lr
 802046a:	bf00      	nop
 802046c:	20001e6c 	.word	0x20001e6c

08020470 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 8020470:	b480      	push	{r7}
 8020472:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8020474:	4b05      	ldr	r3, [pc, #20]	; (802048c <TRACE_IsLocked+0x1c>)
 8020476:	8adb      	ldrh	r3, [r3, #22]
 8020478:	2b00      	cmp	r3, #0
 802047a:	bf14      	ite	ne
 802047c:	2301      	movne	r3, #1
 802047e:	2300      	moveq	r3, #0
 8020480:	b2db      	uxtb	r3, r3
}
 8020482:	4618      	mov	r0, r3
 8020484:	46bd      	mov	sp, r7
 8020486:	bc80      	pop	{r7}
 8020488:	4770      	bx	lr
 802048a:	bf00      	nop
 802048c:	20001e6c 	.word	0x20001e6c

08020490 <floor>:
 8020490:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8020494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020498:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 802049c:	2e13      	cmp	r6, #19
 802049e:	460b      	mov	r3, r1
 80204a0:	4607      	mov	r7, r0
 80204a2:	460c      	mov	r4, r1
 80204a4:	4605      	mov	r5, r0
 80204a6:	dc32      	bgt.n	802050e <floor+0x7e>
 80204a8:	2e00      	cmp	r6, #0
 80204aa:	da14      	bge.n	80204d6 <floor+0x46>
 80204ac:	a334      	add	r3, pc, #208	; (adr r3, 8020580 <floor+0xf0>)
 80204ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204b2:	f7df fec3 	bl	800023c <__adddf3>
 80204b6:	2200      	movs	r2, #0
 80204b8:	2300      	movs	r3, #0
 80204ba:	f7e0 fb05 	bl	8000ac8 <__aeabi_dcmpgt>
 80204be:	b138      	cbz	r0, 80204d0 <floor+0x40>
 80204c0:	2c00      	cmp	r4, #0
 80204c2:	da56      	bge.n	8020572 <floor+0xe2>
 80204c4:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80204c8:	4325      	orrs	r5, r4
 80204ca:	d055      	beq.n	8020578 <floor+0xe8>
 80204cc:	4c2e      	ldr	r4, [pc, #184]	; (8020588 <floor+0xf8>)
 80204ce:	2500      	movs	r5, #0
 80204d0:	4623      	mov	r3, r4
 80204d2:	462f      	mov	r7, r5
 80204d4:	e025      	b.n	8020522 <floor+0x92>
 80204d6:	4a2d      	ldr	r2, [pc, #180]	; (802058c <floor+0xfc>)
 80204d8:	fa42 f806 	asr.w	r8, r2, r6
 80204dc:	ea01 0208 	and.w	r2, r1, r8
 80204e0:	4302      	orrs	r2, r0
 80204e2:	d01e      	beq.n	8020522 <floor+0x92>
 80204e4:	a326      	add	r3, pc, #152	; (adr r3, 8020580 <floor+0xf0>)
 80204e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204ea:	f7df fea7 	bl	800023c <__adddf3>
 80204ee:	2200      	movs	r2, #0
 80204f0:	2300      	movs	r3, #0
 80204f2:	f7e0 fae9 	bl	8000ac8 <__aeabi_dcmpgt>
 80204f6:	2800      	cmp	r0, #0
 80204f8:	d0ea      	beq.n	80204d0 <floor+0x40>
 80204fa:	2c00      	cmp	r4, #0
 80204fc:	bfbe      	ittt	lt
 80204fe:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8020502:	4133      	asrlt	r3, r6
 8020504:	18e4      	addlt	r4, r4, r3
 8020506:	ea24 0408 	bic.w	r4, r4, r8
 802050a:	2500      	movs	r5, #0
 802050c:	e7e0      	b.n	80204d0 <floor+0x40>
 802050e:	2e33      	cmp	r6, #51	; 0x33
 8020510:	dd0b      	ble.n	802052a <floor+0x9a>
 8020512:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8020516:	d104      	bne.n	8020522 <floor+0x92>
 8020518:	4602      	mov	r2, r0
 802051a:	f7df fe8f 	bl	800023c <__adddf3>
 802051e:	4607      	mov	r7, r0
 8020520:	460b      	mov	r3, r1
 8020522:	4638      	mov	r0, r7
 8020524:	4619      	mov	r1, r3
 8020526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802052a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 802052e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8020532:	fa28 f802 	lsr.w	r8, r8, r2
 8020536:	ea10 0f08 	tst.w	r0, r8
 802053a:	d0f2      	beq.n	8020522 <floor+0x92>
 802053c:	a310      	add	r3, pc, #64	; (adr r3, 8020580 <floor+0xf0>)
 802053e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020542:	f7df fe7b 	bl	800023c <__adddf3>
 8020546:	2200      	movs	r2, #0
 8020548:	2300      	movs	r3, #0
 802054a:	f7e0 fabd 	bl	8000ac8 <__aeabi_dcmpgt>
 802054e:	2800      	cmp	r0, #0
 8020550:	d0be      	beq.n	80204d0 <floor+0x40>
 8020552:	2c00      	cmp	r4, #0
 8020554:	da0a      	bge.n	802056c <floor+0xdc>
 8020556:	2e14      	cmp	r6, #20
 8020558:	d101      	bne.n	802055e <floor+0xce>
 802055a:	3401      	adds	r4, #1
 802055c:	e006      	b.n	802056c <floor+0xdc>
 802055e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8020562:	2301      	movs	r3, #1
 8020564:	40b3      	lsls	r3, r6
 8020566:	441d      	add	r5, r3
 8020568:	42af      	cmp	r7, r5
 802056a:	d8f6      	bhi.n	802055a <floor+0xca>
 802056c:	ea25 0508 	bic.w	r5, r5, r8
 8020570:	e7ae      	b.n	80204d0 <floor+0x40>
 8020572:	2500      	movs	r5, #0
 8020574:	462c      	mov	r4, r5
 8020576:	e7ab      	b.n	80204d0 <floor+0x40>
 8020578:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 802057c:	e7a8      	b.n	80204d0 <floor+0x40>
 802057e:	bf00      	nop
 8020580:	8800759c 	.word	0x8800759c
 8020584:	7e37e43c 	.word	0x7e37e43c
 8020588:	bff00000 	.word	0xbff00000
 802058c:	000fffff 	.word	0x000fffff

08020590 <siprintf>:
 8020590:	b40e      	push	{r1, r2, r3}
 8020592:	b500      	push	{lr}
 8020594:	b09c      	sub	sp, #112	; 0x70
 8020596:	ab1d      	add	r3, sp, #116	; 0x74
 8020598:	9002      	str	r0, [sp, #8]
 802059a:	9006      	str	r0, [sp, #24]
 802059c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80205a0:	4809      	ldr	r0, [pc, #36]	; (80205c8 <siprintf+0x38>)
 80205a2:	9107      	str	r1, [sp, #28]
 80205a4:	9104      	str	r1, [sp, #16]
 80205a6:	4909      	ldr	r1, [pc, #36]	; (80205cc <siprintf+0x3c>)
 80205a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80205ac:	9105      	str	r1, [sp, #20]
 80205ae:	6800      	ldr	r0, [r0, #0]
 80205b0:	9301      	str	r3, [sp, #4]
 80205b2:	a902      	add	r1, sp, #8
 80205b4:	f000 f99e 	bl	80208f4 <_svfiprintf_r>
 80205b8:	9b02      	ldr	r3, [sp, #8]
 80205ba:	2200      	movs	r2, #0
 80205bc:	701a      	strb	r2, [r3, #0]
 80205be:	b01c      	add	sp, #112	; 0x70
 80205c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80205c4:	b003      	add	sp, #12
 80205c6:	4770      	bx	lr
 80205c8:	20000194 	.word	0x20000194
 80205cc:	ffff0208 	.word	0xffff0208

080205d0 <memset>:
 80205d0:	4402      	add	r2, r0
 80205d2:	4603      	mov	r3, r0
 80205d4:	4293      	cmp	r3, r2
 80205d6:	d100      	bne.n	80205da <memset+0xa>
 80205d8:	4770      	bx	lr
 80205da:	f803 1b01 	strb.w	r1, [r3], #1
 80205de:	e7f9      	b.n	80205d4 <memset+0x4>

080205e0 <__errno>:
 80205e0:	4b01      	ldr	r3, [pc, #4]	; (80205e8 <__errno+0x8>)
 80205e2:	6818      	ldr	r0, [r3, #0]
 80205e4:	4770      	bx	lr
 80205e6:	bf00      	nop
 80205e8:	20000194 	.word	0x20000194

080205ec <__libc_init_array>:
 80205ec:	b570      	push	{r4, r5, r6, lr}
 80205ee:	4d0d      	ldr	r5, [pc, #52]	; (8020624 <__libc_init_array+0x38>)
 80205f0:	4c0d      	ldr	r4, [pc, #52]	; (8020628 <__libc_init_array+0x3c>)
 80205f2:	1b64      	subs	r4, r4, r5
 80205f4:	10a4      	asrs	r4, r4, #2
 80205f6:	2600      	movs	r6, #0
 80205f8:	42a6      	cmp	r6, r4
 80205fa:	d109      	bne.n	8020610 <__libc_init_array+0x24>
 80205fc:	4d0b      	ldr	r5, [pc, #44]	; (802062c <__libc_init_array+0x40>)
 80205fe:	4c0c      	ldr	r4, [pc, #48]	; (8020630 <__libc_init_array+0x44>)
 8020600:	f000 fc68 	bl	8020ed4 <_init>
 8020604:	1b64      	subs	r4, r4, r5
 8020606:	10a4      	asrs	r4, r4, #2
 8020608:	2600      	movs	r6, #0
 802060a:	42a6      	cmp	r6, r4
 802060c:	d105      	bne.n	802061a <__libc_init_array+0x2e>
 802060e:	bd70      	pop	{r4, r5, r6, pc}
 8020610:	f855 3b04 	ldr.w	r3, [r5], #4
 8020614:	4798      	blx	r3
 8020616:	3601      	adds	r6, #1
 8020618:	e7ee      	b.n	80205f8 <__libc_init_array+0xc>
 802061a:	f855 3b04 	ldr.w	r3, [r5], #4
 802061e:	4798      	blx	r3
 8020620:	3601      	adds	r6, #1
 8020622:	e7f2      	b.n	802060a <__libc_init_array+0x1e>
 8020624:	08022060 	.word	0x08022060
 8020628:	08022060 	.word	0x08022060
 802062c:	08022060 	.word	0x08022060
 8020630:	08022068 	.word	0x08022068

08020634 <__retarget_lock_acquire_recursive>:
 8020634:	4770      	bx	lr

08020636 <__retarget_lock_release_recursive>:
 8020636:	4770      	bx	lr

08020638 <memcpy>:
 8020638:	440a      	add	r2, r1
 802063a:	4291      	cmp	r1, r2
 802063c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020640:	d100      	bne.n	8020644 <memcpy+0xc>
 8020642:	4770      	bx	lr
 8020644:	b510      	push	{r4, lr}
 8020646:	f811 4b01 	ldrb.w	r4, [r1], #1
 802064a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802064e:	4291      	cmp	r1, r2
 8020650:	d1f9      	bne.n	8020646 <memcpy+0xe>
 8020652:	bd10      	pop	{r4, pc}

08020654 <_free_r>:
 8020654:	b538      	push	{r3, r4, r5, lr}
 8020656:	4605      	mov	r5, r0
 8020658:	2900      	cmp	r1, #0
 802065a:	d041      	beq.n	80206e0 <_free_r+0x8c>
 802065c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020660:	1f0c      	subs	r4, r1, #4
 8020662:	2b00      	cmp	r3, #0
 8020664:	bfb8      	it	lt
 8020666:	18e4      	addlt	r4, r4, r3
 8020668:	f000 f8de 	bl	8020828 <__malloc_lock>
 802066c:	4a1d      	ldr	r2, [pc, #116]	; (80206e4 <_free_r+0x90>)
 802066e:	6813      	ldr	r3, [r2, #0]
 8020670:	b933      	cbnz	r3, 8020680 <_free_r+0x2c>
 8020672:	6063      	str	r3, [r4, #4]
 8020674:	6014      	str	r4, [r2, #0]
 8020676:	4628      	mov	r0, r5
 8020678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802067c:	f000 b8da 	b.w	8020834 <__malloc_unlock>
 8020680:	42a3      	cmp	r3, r4
 8020682:	d908      	bls.n	8020696 <_free_r+0x42>
 8020684:	6820      	ldr	r0, [r4, #0]
 8020686:	1821      	adds	r1, r4, r0
 8020688:	428b      	cmp	r3, r1
 802068a:	bf01      	itttt	eq
 802068c:	6819      	ldreq	r1, [r3, #0]
 802068e:	685b      	ldreq	r3, [r3, #4]
 8020690:	1809      	addeq	r1, r1, r0
 8020692:	6021      	streq	r1, [r4, #0]
 8020694:	e7ed      	b.n	8020672 <_free_r+0x1e>
 8020696:	461a      	mov	r2, r3
 8020698:	685b      	ldr	r3, [r3, #4]
 802069a:	b10b      	cbz	r3, 80206a0 <_free_r+0x4c>
 802069c:	42a3      	cmp	r3, r4
 802069e:	d9fa      	bls.n	8020696 <_free_r+0x42>
 80206a0:	6811      	ldr	r1, [r2, #0]
 80206a2:	1850      	adds	r0, r2, r1
 80206a4:	42a0      	cmp	r0, r4
 80206a6:	d10b      	bne.n	80206c0 <_free_r+0x6c>
 80206a8:	6820      	ldr	r0, [r4, #0]
 80206aa:	4401      	add	r1, r0
 80206ac:	1850      	adds	r0, r2, r1
 80206ae:	4283      	cmp	r3, r0
 80206b0:	6011      	str	r1, [r2, #0]
 80206b2:	d1e0      	bne.n	8020676 <_free_r+0x22>
 80206b4:	6818      	ldr	r0, [r3, #0]
 80206b6:	685b      	ldr	r3, [r3, #4]
 80206b8:	6053      	str	r3, [r2, #4]
 80206ba:	4408      	add	r0, r1
 80206bc:	6010      	str	r0, [r2, #0]
 80206be:	e7da      	b.n	8020676 <_free_r+0x22>
 80206c0:	d902      	bls.n	80206c8 <_free_r+0x74>
 80206c2:	230c      	movs	r3, #12
 80206c4:	602b      	str	r3, [r5, #0]
 80206c6:	e7d6      	b.n	8020676 <_free_r+0x22>
 80206c8:	6820      	ldr	r0, [r4, #0]
 80206ca:	1821      	adds	r1, r4, r0
 80206cc:	428b      	cmp	r3, r1
 80206ce:	bf04      	itt	eq
 80206d0:	6819      	ldreq	r1, [r3, #0]
 80206d2:	685b      	ldreq	r3, [r3, #4]
 80206d4:	6063      	str	r3, [r4, #4]
 80206d6:	bf04      	itt	eq
 80206d8:	1809      	addeq	r1, r1, r0
 80206da:	6021      	streq	r1, [r4, #0]
 80206dc:	6054      	str	r4, [r2, #4]
 80206de:	e7ca      	b.n	8020676 <_free_r+0x22>
 80206e0:	bd38      	pop	{r3, r4, r5, pc}
 80206e2:	bf00      	nop
 80206e4:	200025c4 	.word	0x200025c4

080206e8 <sbrk_aligned>:
 80206e8:	b570      	push	{r4, r5, r6, lr}
 80206ea:	4e0e      	ldr	r6, [pc, #56]	; (8020724 <sbrk_aligned+0x3c>)
 80206ec:	460c      	mov	r4, r1
 80206ee:	6831      	ldr	r1, [r6, #0]
 80206f0:	4605      	mov	r5, r0
 80206f2:	b911      	cbnz	r1, 80206fa <sbrk_aligned+0x12>
 80206f4:	f000 fba6 	bl	8020e44 <_sbrk_r>
 80206f8:	6030      	str	r0, [r6, #0]
 80206fa:	4621      	mov	r1, r4
 80206fc:	4628      	mov	r0, r5
 80206fe:	f000 fba1 	bl	8020e44 <_sbrk_r>
 8020702:	1c43      	adds	r3, r0, #1
 8020704:	d00a      	beq.n	802071c <sbrk_aligned+0x34>
 8020706:	1cc4      	adds	r4, r0, #3
 8020708:	f024 0403 	bic.w	r4, r4, #3
 802070c:	42a0      	cmp	r0, r4
 802070e:	d007      	beq.n	8020720 <sbrk_aligned+0x38>
 8020710:	1a21      	subs	r1, r4, r0
 8020712:	4628      	mov	r0, r5
 8020714:	f000 fb96 	bl	8020e44 <_sbrk_r>
 8020718:	3001      	adds	r0, #1
 802071a:	d101      	bne.n	8020720 <sbrk_aligned+0x38>
 802071c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8020720:	4620      	mov	r0, r4
 8020722:	bd70      	pop	{r4, r5, r6, pc}
 8020724:	200025c8 	.word	0x200025c8

08020728 <_malloc_r>:
 8020728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802072c:	1ccd      	adds	r5, r1, #3
 802072e:	f025 0503 	bic.w	r5, r5, #3
 8020732:	3508      	adds	r5, #8
 8020734:	2d0c      	cmp	r5, #12
 8020736:	bf38      	it	cc
 8020738:	250c      	movcc	r5, #12
 802073a:	2d00      	cmp	r5, #0
 802073c:	4607      	mov	r7, r0
 802073e:	db01      	blt.n	8020744 <_malloc_r+0x1c>
 8020740:	42a9      	cmp	r1, r5
 8020742:	d905      	bls.n	8020750 <_malloc_r+0x28>
 8020744:	230c      	movs	r3, #12
 8020746:	603b      	str	r3, [r7, #0]
 8020748:	2600      	movs	r6, #0
 802074a:	4630      	mov	r0, r6
 802074c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020750:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8020824 <_malloc_r+0xfc>
 8020754:	f000 f868 	bl	8020828 <__malloc_lock>
 8020758:	f8d8 3000 	ldr.w	r3, [r8]
 802075c:	461c      	mov	r4, r3
 802075e:	bb5c      	cbnz	r4, 80207b8 <_malloc_r+0x90>
 8020760:	4629      	mov	r1, r5
 8020762:	4638      	mov	r0, r7
 8020764:	f7ff ffc0 	bl	80206e8 <sbrk_aligned>
 8020768:	1c43      	adds	r3, r0, #1
 802076a:	4604      	mov	r4, r0
 802076c:	d155      	bne.n	802081a <_malloc_r+0xf2>
 802076e:	f8d8 4000 	ldr.w	r4, [r8]
 8020772:	4626      	mov	r6, r4
 8020774:	2e00      	cmp	r6, #0
 8020776:	d145      	bne.n	8020804 <_malloc_r+0xdc>
 8020778:	2c00      	cmp	r4, #0
 802077a:	d048      	beq.n	802080e <_malloc_r+0xe6>
 802077c:	6823      	ldr	r3, [r4, #0]
 802077e:	4631      	mov	r1, r6
 8020780:	4638      	mov	r0, r7
 8020782:	eb04 0903 	add.w	r9, r4, r3
 8020786:	f000 fb5d 	bl	8020e44 <_sbrk_r>
 802078a:	4581      	cmp	r9, r0
 802078c:	d13f      	bne.n	802080e <_malloc_r+0xe6>
 802078e:	6821      	ldr	r1, [r4, #0]
 8020790:	1a6d      	subs	r5, r5, r1
 8020792:	4629      	mov	r1, r5
 8020794:	4638      	mov	r0, r7
 8020796:	f7ff ffa7 	bl	80206e8 <sbrk_aligned>
 802079a:	3001      	adds	r0, #1
 802079c:	d037      	beq.n	802080e <_malloc_r+0xe6>
 802079e:	6823      	ldr	r3, [r4, #0]
 80207a0:	442b      	add	r3, r5
 80207a2:	6023      	str	r3, [r4, #0]
 80207a4:	f8d8 3000 	ldr.w	r3, [r8]
 80207a8:	2b00      	cmp	r3, #0
 80207aa:	d038      	beq.n	802081e <_malloc_r+0xf6>
 80207ac:	685a      	ldr	r2, [r3, #4]
 80207ae:	42a2      	cmp	r2, r4
 80207b0:	d12b      	bne.n	802080a <_malloc_r+0xe2>
 80207b2:	2200      	movs	r2, #0
 80207b4:	605a      	str	r2, [r3, #4]
 80207b6:	e00f      	b.n	80207d8 <_malloc_r+0xb0>
 80207b8:	6822      	ldr	r2, [r4, #0]
 80207ba:	1b52      	subs	r2, r2, r5
 80207bc:	d41f      	bmi.n	80207fe <_malloc_r+0xd6>
 80207be:	2a0b      	cmp	r2, #11
 80207c0:	d917      	bls.n	80207f2 <_malloc_r+0xca>
 80207c2:	1961      	adds	r1, r4, r5
 80207c4:	42a3      	cmp	r3, r4
 80207c6:	6025      	str	r5, [r4, #0]
 80207c8:	bf18      	it	ne
 80207ca:	6059      	strne	r1, [r3, #4]
 80207cc:	6863      	ldr	r3, [r4, #4]
 80207ce:	bf08      	it	eq
 80207d0:	f8c8 1000 	streq.w	r1, [r8]
 80207d4:	5162      	str	r2, [r4, r5]
 80207d6:	604b      	str	r3, [r1, #4]
 80207d8:	4638      	mov	r0, r7
 80207da:	f104 060b 	add.w	r6, r4, #11
 80207de:	f000 f829 	bl	8020834 <__malloc_unlock>
 80207e2:	f026 0607 	bic.w	r6, r6, #7
 80207e6:	1d23      	adds	r3, r4, #4
 80207e8:	1af2      	subs	r2, r6, r3
 80207ea:	d0ae      	beq.n	802074a <_malloc_r+0x22>
 80207ec:	1b9b      	subs	r3, r3, r6
 80207ee:	50a3      	str	r3, [r4, r2]
 80207f0:	e7ab      	b.n	802074a <_malloc_r+0x22>
 80207f2:	42a3      	cmp	r3, r4
 80207f4:	6862      	ldr	r2, [r4, #4]
 80207f6:	d1dd      	bne.n	80207b4 <_malloc_r+0x8c>
 80207f8:	f8c8 2000 	str.w	r2, [r8]
 80207fc:	e7ec      	b.n	80207d8 <_malloc_r+0xb0>
 80207fe:	4623      	mov	r3, r4
 8020800:	6864      	ldr	r4, [r4, #4]
 8020802:	e7ac      	b.n	802075e <_malloc_r+0x36>
 8020804:	4634      	mov	r4, r6
 8020806:	6876      	ldr	r6, [r6, #4]
 8020808:	e7b4      	b.n	8020774 <_malloc_r+0x4c>
 802080a:	4613      	mov	r3, r2
 802080c:	e7cc      	b.n	80207a8 <_malloc_r+0x80>
 802080e:	230c      	movs	r3, #12
 8020810:	603b      	str	r3, [r7, #0]
 8020812:	4638      	mov	r0, r7
 8020814:	f000 f80e 	bl	8020834 <__malloc_unlock>
 8020818:	e797      	b.n	802074a <_malloc_r+0x22>
 802081a:	6025      	str	r5, [r4, #0]
 802081c:	e7dc      	b.n	80207d8 <_malloc_r+0xb0>
 802081e:	605b      	str	r3, [r3, #4]
 8020820:	deff      	udf	#255	; 0xff
 8020822:	bf00      	nop
 8020824:	200025c4 	.word	0x200025c4

08020828 <__malloc_lock>:
 8020828:	4801      	ldr	r0, [pc, #4]	; (8020830 <__malloc_lock+0x8>)
 802082a:	f7ff bf03 	b.w	8020634 <__retarget_lock_acquire_recursive>
 802082e:	bf00      	nop
 8020830:	200025c0 	.word	0x200025c0

08020834 <__malloc_unlock>:
 8020834:	4801      	ldr	r0, [pc, #4]	; (802083c <__malloc_unlock+0x8>)
 8020836:	f7ff befe 	b.w	8020636 <__retarget_lock_release_recursive>
 802083a:	bf00      	nop
 802083c:	200025c0 	.word	0x200025c0

08020840 <__ssputs_r>:
 8020840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020844:	688e      	ldr	r6, [r1, #8]
 8020846:	461f      	mov	r7, r3
 8020848:	42be      	cmp	r6, r7
 802084a:	680b      	ldr	r3, [r1, #0]
 802084c:	4682      	mov	sl, r0
 802084e:	460c      	mov	r4, r1
 8020850:	4690      	mov	r8, r2
 8020852:	d82c      	bhi.n	80208ae <__ssputs_r+0x6e>
 8020854:	898a      	ldrh	r2, [r1, #12]
 8020856:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802085a:	d026      	beq.n	80208aa <__ssputs_r+0x6a>
 802085c:	6965      	ldr	r5, [r4, #20]
 802085e:	6909      	ldr	r1, [r1, #16]
 8020860:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020864:	eba3 0901 	sub.w	r9, r3, r1
 8020868:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802086c:	1c7b      	adds	r3, r7, #1
 802086e:	444b      	add	r3, r9
 8020870:	106d      	asrs	r5, r5, #1
 8020872:	429d      	cmp	r5, r3
 8020874:	bf38      	it	cc
 8020876:	461d      	movcc	r5, r3
 8020878:	0553      	lsls	r3, r2, #21
 802087a:	d527      	bpl.n	80208cc <__ssputs_r+0x8c>
 802087c:	4629      	mov	r1, r5
 802087e:	f7ff ff53 	bl	8020728 <_malloc_r>
 8020882:	4606      	mov	r6, r0
 8020884:	b360      	cbz	r0, 80208e0 <__ssputs_r+0xa0>
 8020886:	6921      	ldr	r1, [r4, #16]
 8020888:	464a      	mov	r2, r9
 802088a:	f7ff fed5 	bl	8020638 <memcpy>
 802088e:	89a3      	ldrh	r3, [r4, #12]
 8020890:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8020894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020898:	81a3      	strh	r3, [r4, #12]
 802089a:	6126      	str	r6, [r4, #16]
 802089c:	6165      	str	r5, [r4, #20]
 802089e:	444e      	add	r6, r9
 80208a0:	eba5 0509 	sub.w	r5, r5, r9
 80208a4:	6026      	str	r6, [r4, #0]
 80208a6:	60a5      	str	r5, [r4, #8]
 80208a8:	463e      	mov	r6, r7
 80208aa:	42be      	cmp	r6, r7
 80208ac:	d900      	bls.n	80208b0 <__ssputs_r+0x70>
 80208ae:	463e      	mov	r6, r7
 80208b0:	6820      	ldr	r0, [r4, #0]
 80208b2:	4632      	mov	r2, r6
 80208b4:	4641      	mov	r1, r8
 80208b6:	f000 faab 	bl	8020e10 <memmove>
 80208ba:	68a3      	ldr	r3, [r4, #8]
 80208bc:	1b9b      	subs	r3, r3, r6
 80208be:	60a3      	str	r3, [r4, #8]
 80208c0:	6823      	ldr	r3, [r4, #0]
 80208c2:	4433      	add	r3, r6
 80208c4:	6023      	str	r3, [r4, #0]
 80208c6:	2000      	movs	r0, #0
 80208c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80208cc:	462a      	mov	r2, r5
 80208ce:	f000 fac9 	bl	8020e64 <_realloc_r>
 80208d2:	4606      	mov	r6, r0
 80208d4:	2800      	cmp	r0, #0
 80208d6:	d1e0      	bne.n	802089a <__ssputs_r+0x5a>
 80208d8:	6921      	ldr	r1, [r4, #16]
 80208da:	4650      	mov	r0, sl
 80208dc:	f7ff feba 	bl	8020654 <_free_r>
 80208e0:	230c      	movs	r3, #12
 80208e2:	f8ca 3000 	str.w	r3, [sl]
 80208e6:	89a3      	ldrh	r3, [r4, #12]
 80208e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80208ec:	81a3      	strh	r3, [r4, #12]
 80208ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80208f2:	e7e9      	b.n	80208c8 <__ssputs_r+0x88>

080208f4 <_svfiprintf_r>:
 80208f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208f8:	4698      	mov	r8, r3
 80208fa:	898b      	ldrh	r3, [r1, #12]
 80208fc:	061b      	lsls	r3, r3, #24
 80208fe:	b09d      	sub	sp, #116	; 0x74
 8020900:	4607      	mov	r7, r0
 8020902:	460d      	mov	r5, r1
 8020904:	4614      	mov	r4, r2
 8020906:	d50e      	bpl.n	8020926 <_svfiprintf_r+0x32>
 8020908:	690b      	ldr	r3, [r1, #16]
 802090a:	b963      	cbnz	r3, 8020926 <_svfiprintf_r+0x32>
 802090c:	2140      	movs	r1, #64	; 0x40
 802090e:	f7ff ff0b 	bl	8020728 <_malloc_r>
 8020912:	6028      	str	r0, [r5, #0]
 8020914:	6128      	str	r0, [r5, #16]
 8020916:	b920      	cbnz	r0, 8020922 <_svfiprintf_r+0x2e>
 8020918:	230c      	movs	r3, #12
 802091a:	603b      	str	r3, [r7, #0]
 802091c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020920:	e0d0      	b.n	8020ac4 <_svfiprintf_r+0x1d0>
 8020922:	2340      	movs	r3, #64	; 0x40
 8020924:	616b      	str	r3, [r5, #20]
 8020926:	2300      	movs	r3, #0
 8020928:	9309      	str	r3, [sp, #36]	; 0x24
 802092a:	2320      	movs	r3, #32
 802092c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020930:	f8cd 800c 	str.w	r8, [sp, #12]
 8020934:	2330      	movs	r3, #48	; 0x30
 8020936:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8020adc <_svfiprintf_r+0x1e8>
 802093a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802093e:	f04f 0901 	mov.w	r9, #1
 8020942:	4623      	mov	r3, r4
 8020944:	469a      	mov	sl, r3
 8020946:	f813 2b01 	ldrb.w	r2, [r3], #1
 802094a:	b10a      	cbz	r2, 8020950 <_svfiprintf_r+0x5c>
 802094c:	2a25      	cmp	r2, #37	; 0x25
 802094e:	d1f9      	bne.n	8020944 <_svfiprintf_r+0x50>
 8020950:	ebba 0b04 	subs.w	fp, sl, r4
 8020954:	d00b      	beq.n	802096e <_svfiprintf_r+0x7a>
 8020956:	465b      	mov	r3, fp
 8020958:	4622      	mov	r2, r4
 802095a:	4629      	mov	r1, r5
 802095c:	4638      	mov	r0, r7
 802095e:	f7ff ff6f 	bl	8020840 <__ssputs_r>
 8020962:	3001      	adds	r0, #1
 8020964:	f000 80a9 	beq.w	8020aba <_svfiprintf_r+0x1c6>
 8020968:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802096a:	445a      	add	r2, fp
 802096c:	9209      	str	r2, [sp, #36]	; 0x24
 802096e:	f89a 3000 	ldrb.w	r3, [sl]
 8020972:	2b00      	cmp	r3, #0
 8020974:	f000 80a1 	beq.w	8020aba <_svfiprintf_r+0x1c6>
 8020978:	2300      	movs	r3, #0
 802097a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802097e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020982:	f10a 0a01 	add.w	sl, sl, #1
 8020986:	9304      	str	r3, [sp, #16]
 8020988:	9307      	str	r3, [sp, #28]
 802098a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802098e:	931a      	str	r3, [sp, #104]	; 0x68
 8020990:	4654      	mov	r4, sl
 8020992:	2205      	movs	r2, #5
 8020994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020998:	4850      	ldr	r0, [pc, #320]	; (8020adc <_svfiprintf_r+0x1e8>)
 802099a:	f7df fbf9 	bl	8000190 <memchr>
 802099e:	9a04      	ldr	r2, [sp, #16]
 80209a0:	b9d8      	cbnz	r0, 80209da <_svfiprintf_r+0xe6>
 80209a2:	06d0      	lsls	r0, r2, #27
 80209a4:	bf44      	itt	mi
 80209a6:	2320      	movmi	r3, #32
 80209a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80209ac:	0711      	lsls	r1, r2, #28
 80209ae:	bf44      	itt	mi
 80209b0:	232b      	movmi	r3, #43	; 0x2b
 80209b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80209b6:	f89a 3000 	ldrb.w	r3, [sl]
 80209ba:	2b2a      	cmp	r3, #42	; 0x2a
 80209bc:	d015      	beq.n	80209ea <_svfiprintf_r+0xf6>
 80209be:	9a07      	ldr	r2, [sp, #28]
 80209c0:	4654      	mov	r4, sl
 80209c2:	2000      	movs	r0, #0
 80209c4:	f04f 0c0a 	mov.w	ip, #10
 80209c8:	4621      	mov	r1, r4
 80209ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80209ce:	3b30      	subs	r3, #48	; 0x30
 80209d0:	2b09      	cmp	r3, #9
 80209d2:	d94d      	bls.n	8020a70 <_svfiprintf_r+0x17c>
 80209d4:	b1b0      	cbz	r0, 8020a04 <_svfiprintf_r+0x110>
 80209d6:	9207      	str	r2, [sp, #28]
 80209d8:	e014      	b.n	8020a04 <_svfiprintf_r+0x110>
 80209da:	eba0 0308 	sub.w	r3, r0, r8
 80209de:	fa09 f303 	lsl.w	r3, r9, r3
 80209e2:	4313      	orrs	r3, r2
 80209e4:	9304      	str	r3, [sp, #16]
 80209e6:	46a2      	mov	sl, r4
 80209e8:	e7d2      	b.n	8020990 <_svfiprintf_r+0x9c>
 80209ea:	9b03      	ldr	r3, [sp, #12]
 80209ec:	1d19      	adds	r1, r3, #4
 80209ee:	681b      	ldr	r3, [r3, #0]
 80209f0:	9103      	str	r1, [sp, #12]
 80209f2:	2b00      	cmp	r3, #0
 80209f4:	bfbb      	ittet	lt
 80209f6:	425b      	neglt	r3, r3
 80209f8:	f042 0202 	orrlt.w	r2, r2, #2
 80209fc:	9307      	strge	r3, [sp, #28]
 80209fe:	9307      	strlt	r3, [sp, #28]
 8020a00:	bfb8      	it	lt
 8020a02:	9204      	strlt	r2, [sp, #16]
 8020a04:	7823      	ldrb	r3, [r4, #0]
 8020a06:	2b2e      	cmp	r3, #46	; 0x2e
 8020a08:	d10c      	bne.n	8020a24 <_svfiprintf_r+0x130>
 8020a0a:	7863      	ldrb	r3, [r4, #1]
 8020a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8020a0e:	d134      	bne.n	8020a7a <_svfiprintf_r+0x186>
 8020a10:	9b03      	ldr	r3, [sp, #12]
 8020a12:	1d1a      	adds	r2, r3, #4
 8020a14:	681b      	ldr	r3, [r3, #0]
 8020a16:	9203      	str	r2, [sp, #12]
 8020a18:	2b00      	cmp	r3, #0
 8020a1a:	bfb8      	it	lt
 8020a1c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8020a20:	3402      	adds	r4, #2
 8020a22:	9305      	str	r3, [sp, #20]
 8020a24:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8020ae0 <_svfiprintf_r+0x1ec>
 8020a28:	7821      	ldrb	r1, [r4, #0]
 8020a2a:	2203      	movs	r2, #3
 8020a2c:	4650      	mov	r0, sl
 8020a2e:	f7df fbaf 	bl	8000190 <memchr>
 8020a32:	b138      	cbz	r0, 8020a44 <_svfiprintf_r+0x150>
 8020a34:	9b04      	ldr	r3, [sp, #16]
 8020a36:	eba0 000a 	sub.w	r0, r0, sl
 8020a3a:	2240      	movs	r2, #64	; 0x40
 8020a3c:	4082      	lsls	r2, r0
 8020a3e:	4313      	orrs	r3, r2
 8020a40:	3401      	adds	r4, #1
 8020a42:	9304      	str	r3, [sp, #16]
 8020a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020a48:	4826      	ldr	r0, [pc, #152]	; (8020ae4 <_svfiprintf_r+0x1f0>)
 8020a4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020a4e:	2206      	movs	r2, #6
 8020a50:	f7df fb9e 	bl	8000190 <memchr>
 8020a54:	2800      	cmp	r0, #0
 8020a56:	d038      	beq.n	8020aca <_svfiprintf_r+0x1d6>
 8020a58:	4b23      	ldr	r3, [pc, #140]	; (8020ae8 <_svfiprintf_r+0x1f4>)
 8020a5a:	bb1b      	cbnz	r3, 8020aa4 <_svfiprintf_r+0x1b0>
 8020a5c:	9b03      	ldr	r3, [sp, #12]
 8020a5e:	3307      	adds	r3, #7
 8020a60:	f023 0307 	bic.w	r3, r3, #7
 8020a64:	3308      	adds	r3, #8
 8020a66:	9303      	str	r3, [sp, #12]
 8020a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a6a:	4433      	add	r3, r6
 8020a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8020a6e:	e768      	b.n	8020942 <_svfiprintf_r+0x4e>
 8020a70:	fb0c 3202 	mla	r2, ip, r2, r3
 8020a74:	460c      	mov	r4, r1
 8020a76:	2001      	movs	r0, #1
 8020a78:	e7a6      	b.n	80209c8 <_svfiprintf_r+0xd4>
 8020a7a:	2300      	movs	r3, #0
 8020a7c:	3401      	adds	r4, #1
 8020a7e:	9305      	str	r3, [sp, #20]
 8020a80:	4619      	mov	r1, r3
 8020a82:	f04f 0c0a 	mov.w	ip, #10
 8020a86:	4620      	mov	r0, r4
 8020a88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020a8c:	3a30      	subs	r2, #48	; 0x30
 8020a8e:	2a09      	cmp	r2, #9
 8020a90:	d903      	bls.n	8020a9a <_svfiprintf_r+0x1a6>
 8020a92:	2b00      	cmp	r3, #0
 8020a94:	d0c6      	beq.n	8020a24 <_svfiprintf_r+0x130>
 8020a96:	9105      	str	r1, [sp, #20]
 8020a98:	e7c4      	b.n	8020a24 <_svfiprintf_r+0x130>
 8020a9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8020a9e:	4604      	mov	r4, r0
 8020aa0:	2301      	movs	r3, #1
 8020aa2:	e7f0      	b.n	8020a86 <_svfiprintf_r+0x192>
 8020aa4:	ab03      	add	r3, sp, #12
 8020aa6:	9300      	str	r3, [sp, #0]
 8020aa8:	462a      	mov	r2, r5
 8020aaa:	4b10      	ldr	r3, [pc, #64]	; (8020aec <_svfiprintf_r+0x1f8>)
 8020aac:	a904      	add	r1, sp, #16
 8020aae:	4638      	mov	r0, r7
 8020ab0:	f3af 8000 	nop.w
 8020ab4:	1c42      	adds	r2, r0, #1
 8020ab6:	4606      	mov	r6, r0
 8020ab8:	d1d6      	bne.n	8020a68 <_svfiprintf_r+0x174>
 8020aba:	89ab      	ldrh	r3, [r5, #12]
 8020abc:	065b      	lsls	r3, r3, #25
 8020abe:	f53f af2d 	bmi.w	802091c <_svfiprintf_r+0x28>
 8020ac2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020ac4:	b01d      	add	sp, #116	; 0x74
 8020ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020aca:	ab03      	add	r3, sp, #12
 8020acc:	9300      	str	r3, [sp, #0]
 8020ace:	462a      	mov	r2, r5
 8020ad0:	4b06      	ldr	r3, [pc, #24]	; (8020aec <_svfiprintf_r+0x1f8>)
 8020ad2:	a904      	add	r1, sp, #16
 8020ad4:	4638      	mov	r0, r7
 8020ad6:	f000 f879 	bl	8020bcc <_printf_i>
 8020ada:	e7eb      	b.n	8020ab4 <_svfiprintf_r+0x1c0>
 8020adc:	08021f4c 	.word	0x08021f4c
 8020ae0:	08021f52 	.word	0x08021f52
 8020ae4:	08021f56 	.word	0x08021f56
 8020ae8:	00000000 	.word	0x00000000
 8020aec:	08020841 	.word	0x08020841

08020af0 <_printf_common>:
 8020af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020af4:	4616      	mov	r6, r2
 8020af6:	4699      	mov	r9, r3
 8020af8:	688a      	ldr	r2, [r1, #8]
 8020afa:	690b      	ldr	r3, [r1, #16]
 8020afc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020b00:	4293      	cmp	r3, r2
 8020b02:	bfb8      	it	lt
 8020b04:	4613      	movlt	r3, r2
 8020b06:	6033      	str	r3, [r6, #0]
 8020b08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020b0c:	4607      	mov	r7, r0
 8020b0e:	460c      	mov	r4, r1
 8020b10:	b10a      	cbz	r2, 8020b16 <_printf_common+0x26>
 8020b12:	3301      	adds	r3, #1
 8020b14:	6033      	str	r3, [r6, #0]
 8020b16:	6823      	ldr	r3, [r4, #0]
 8020b18:	0699      	lsls	r1, r3, #26
 8020b1a:	bf42      	ittt	mi
 8020b1c:	6833      	ldrmi	r3, [r6, #0]
 8020b1e:	3302      	addmi	r3, #2
 8020b20:	6033      	strmi	r3, [r6, #0]
 8020b22:	6825      	ldr	r5, [r4, #0]
 8020b24:	f015 0506 	ands.w	r5, r5, #6
 8020b28:	d106      	bne.n	8020b38 <_printf_common+0x48>
 8020b2a:	f104 0a19 	add.w	sl, r4, #25
 8020b2e:	68e3      	ldr	r3, [r4, #12]
 8020b30:	6832      	ldr	r2, [r6, #0]
 8020b32:	1a9b      	subs	r3, r3, r2
 8020b34:	42ab      	cmp	r3, r5
 8020b36:	dc26      	bgt.n	8020b86 <_printf_common+0x96>
 8020b38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8020b3c:	1e13      	subs	r3, r2, #0
 8020b3e:	6822      	ldr	r2, [r4, #0]
 8020b40:	bf18      	it	ne
 8020b42:	2301      	movne	r3, #1
 8020b44:	0692      	lsls	r2, r2, #26
 8020b46:	d42b      	bmi.n	8020ba0 <_printf_common+0xb0>
 8020b48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020b4c:	4649      	mov	r1, r9
 8020b4e:	4638      	mov	r0, r7
 8020b50:	47c0      	blx	r8
 8020b52:	3001      	adds	r0, #1
 8020b54:	d01e      	beq.n	8020b94 <_printf_common+0xa4>
 8020b56:	6823      	ldr	r3, [r4, #0]
 8020b58:	6922      	ldr	r2, [r4, #16]
 8020b5a:	f003 0306 	and.w	r3, r3, #6
 8020b5e:	2b04      	cmp	r3, #4
 8020b60:	bf02      	ittt	eq
 8020b62:	68e5      	ldreq	r5, [r4, #12]
 8020b64:	6833      	ldreq	r3, [r6, #0]
 8020b66:	1aed      	subeq	r5, r5, r3
 8020b68:	68a3      	ldr	r3, [r4, #8]
 8020b6a:	bf0c      	ite	eq
 8020b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020b70:	2500      	movne	r5, #0
 8020b72:	4293      	cmp	r3, r2
 8020b74:	bfc4      	itt	gt
 8020b76:	1a9b      	subgt	r3, r3, r2
 8020b78:	18ed      	addgt	r5, r5, r3
 8020b7a:	2600      	movs	r6, #0
 8020b7c:	341a      	adds	r4, #26
 8020b7e:	42b5      	cmp	r5, r6
 8020b80:	d11a      	bne.n	8020bb8 <_printf_common+0xc8>
 8020b82:	2000      	movs	r0, #0
 8020b84:	e008      	b.n	8020b98 <_printf_common+0xa8>
 8020b86:	2301      	movs	r3, #1
 8020b88:	4652      	mov	r2, sl
 8020b8a:	4649      	mov	r1, r9
 8020b8c:	4638      	mov	r0, r7
 8020b8e:	47c0      	blx	r8
 8020b90:	3001      	adds	r0, #1
 8020b92:	d103      	bne.n	8020b9c <_printf_common+0xac>
 8020b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b9c:	3501      	adds	r5, #1
 8020b9e:	e7c6      	b.n	8020b2e <_printf_common+0x3e>
 8020ba0:	18e1      	adds	r1, r4, r3
 8020ba2:	1c5a      	adds	r2, r3, #1
 8020ba4:	2030      	movs	r0, #48	; 0x30
 8020ba6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020baa:	4422      	add	r2, r4
 8020bac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020bb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020bb4:	3302      	adds	r3, #2
 8020bb6:	e7c7      	b.n	8020b48 <_printf_common+0x58>
 8020bb8:	2301      	movs	r3, #1
 8020bba:	4622      	mov	r2, r4
 8020bbc:	4649      	mov	r1, r9
 8020bbe:	4638      	mov	r0, r7
 8020bc0:	47c0      	blx	r8
 8020bc2:	3001      	adds	r0, #1
 8020bc4:	d0e6      	beq.n	8020b94 <_printf_common+0xa4>
 8020bc6:	3601      	adds	r6, #1
 8020bc8:	e7d9      	b.n	8020b7e <_printf_common+0x8e>
	...

08020bcc <_printf_i>:
 8020bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020bd0:	7e0f      	ldrb	r7, [r1, #24]
 8020bd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020bd4:	2f78      	cmp	r7, #120	; 0x78
 8020bd6:	4691      	mov	r9, r2
 8020bd8:	4680      	mov	r8, r0
 8020bda:	460c      	mov	r4, r1
 8020bdc:	469a      	mov	sl, r3
 8020bde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8020be2:	d807      	bhi.n	8020bf4 <_printf_i+0x28>
 8020be4:	2f62      	cmp	r7, #98	; 0x62
 8020be6:	d80a      	bhi.n	8020bfe <_printf_i+0x32>
 8020be8:	2f00      	cmp	r7, #0
 8020bea:	f000 80d4 	beq.w	8020d96 <_printf_i+0x1ca>
 8020bee:	2f58      	cmp	r7, #88	; 0x58
 8020bf0:	f000 80c0 	beq.w	8020d74 <_printf_i+0x1a8>
 8020bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020bf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8020bfc:	e03a      	b.n	8020c74 <_printf_i+0xa8>
 8020bfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8020c02:	2b15      	cmp	r3, #21
 8020c04:	d8f6      	bhi.n	8020bf4 <_printf_i+0x28>
 8020c06:	a101      	add	r1, pc, #4	; (adr r1, 8020c0c <_printf_i+0x40>)
 8020c08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020c0c:	08020c65 	.word	0x08020c65
 8020c10:	08020c79 	.word	0x08020c79
 8020c14:	08020bf5 	.word	0x08020bf5
 8020c18:	08020bf5 	.word	0x08020bf5
 8020c1c:	08020bf5 	.word	0x08020bf5
 8020c20:	08020bf5 	.word	0x08020bf5
 8020c24:	08020c79 	.word	0x08020c79
 8020c28:	08020bf5 	.word	0x08020bf5
 8020c2c:	08020bf5 	.word	0x08020bf5
 8020c30:	08020bf5 	.word	0x08020bf5
 8020c34:	08020bf5 	.word	0x08020bf5
 8020c38:	08020d7d 	.word	0x08020d7d
 8020c3c:	08020ca5 	.word	0x08020ca5
 8020c40:	08020d37 	.word	0x08020d37
 8020c44:	08020bf5 	.word	0x08020bf5
 8020c48:	08020bf5 	.word	0x08020bf5
 8020c4c:	08020d9f 	.word	0x08020d9f
 8020c50:	08020bf5 	.word	0x08020bf5
 8020c54:	08020ca5 	.word	0x08020ca5
 8020c58:	08020bf5 	.word	0x08020bf5
 8020c5c:	08020bf5 	.word	0x08020bf5
 8020c60:	08020d3f 	.word	0x08020d3f
 8020c64:	682b      	ldr	r3, [r5, #0]
 8020c66:	1d1a      	adds	r2, r3, #4
 8020c68:	681b      	ldr	r3, [r3, #0]
 8020c6a:	602a      	str	r2, [r5, #0]
 8020c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020c70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020c74:	2301      	movs	r3, #1
 8020c76:	e09f      	b.n	8020db8 <_printf_i+0x1ec>
 8020c78:	6820      	ldr	r0, [r4, #0]
 8020c7a:	682b      	ldr	r3, [r5, #0]
 8020c7c:	0607      	lsls	r7, r0, #24
 8020c7e:	f103 0104 	add.w	r1, r3, #4
 8020c82:	6029      	str	r1, [r5, #0]
 8020c84:	d501      	bpl.n	8020c8a <_printf_i+0xbe>
 8020c86:	681e      	ldr	r6, [r3, #0]
 8020c88:	e003      	b.n	8020c92 <_printf_i+0xc6>
 8020c8a:	0646      	lsls	r6, r0, #25
 8020c8c:	d5fb      	bpl.n	8020c86 <_printf_i+0xba>
 8020c8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8020c92:	2e00      	cmp	r6, #0
 8020c94:	da03      	bge.n	8020c9e <_printf_i+0xd2>
 8020c96:	232d      	movs	r3, #45	; 0x2d
 8020c98:	4276      	negs	r6, r6
 8020c9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020c9e:	485a      	ldr	r0, [pc, #360]	; (8020e08 <_printf_i+0x23c>)
 8020ca0:	230a      	movs	r3, #10
 8020ca2:	e012      	b.n	8020cca <_printf_i+0xfe>
 8020ca4:	682b      	ldr	r3, [r5, #0]
 8020ca6:	6820      	ldr	r0, [r4, #0]
 8020ca8:	1d19      	adds	r1, r3, #4
 8020caa:	6029      	str	r1, [r5, #0]
 8020cac:	0605      	lsls	r5, r0, #24
 8020cae:	d501      	bpl.n	8020cb4 <_printf_i+0xe8>
 8020cb0:	681e      	ldr	r6, [r3, #0]
 8020cb2:	e002      	b.n	8020cba <_printf_i+0xee>
 8020cb4:	0641      	lsls	r1, r0, #25
 8020cb6:	d5fb      	bpl.n	8020cb0 <_printf_i+0xe4>
 8020cb8:	881e      	ldrh	r6, [r3, #0]
 8020cba:	4853      	ldr	r0, [pc, #332]	; (8020e08 <_printf_i+0x23c>)
 8020cbc:	2f6f      	cmp	r7, #111	; 0x6f
 8020cbe:	bf0c      	ite	eq
 8020cc0:	2308      	moveq	r3, #8
 8020cc2:	230a      	movne	r3, #10
 8020cc4:	2100      	movs	r1, #0
 8020cc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020cca:	6865      	ldr	r5, [r4, #4]
 8020ccc:	60a5      	str	r5, [r4, #8]
 8020cce:	2d00      	cmp	r5, #0
 8020cd0:	bfa2      	ittt	ge
 8020cd2:	6821      	ldrge	r1, [r4, #0]
 8020cd4:	f021 0104 	bicge.w	r1, r1, #4
 8020cd8:	6021      	strge	r1, [r4, #0]
 8020cda:	b90e      	cbnz	r6, 8020ce0 <_printf_i+0x114>
 8020cdc:	2d00      	cmp	r5, #0
 8020cde:	d04b      	beq.n	8020d78 <_printf_i+0x1ac>
 8020ce0:	4615      	mov	r5, r2
 8020ce2:	fbb6 f1f3 	udiv	r1, r6, r3
 8020ce6:	fb03 6711 	mls	r7, r3, r1, r6
 8020cea:	5dc7      	ldrb	r7, [r0, r7]
 8020cec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8020cf0:	4637      	mov	r7, r6
 8020cf2:	42bb      	cmp	r3, r7
 8020cf4:	460e      	mov	r6, r1
 8020cf6:	d9f4      	bls.n	8020ce2 <_printf_i+0x116>
 8020cf8:	2b08      	cmp	r3, #8
 8020cfa:	d10b      	bne.n	8020d14 <_printf_i+0x148>
 8020cfc:	6823      	ldr	r3, [r4, #0]
 8020cfe:	07de      	lsls	r6, r3, #31
 8020d00:	d508      	bpl.n	8020d14 <_printf_i+0x148>
 8020d02:	6923      	ldr	r3, [r4, #16]
 8020d04:	6861      	ldr	r1, [r4, #4]
 8020d06:	4299      	cmp	r1, r3
 8020d08:	bfde      	ittt	le
 8020d0a:	2330      	movle	r3, #48	; 0x30
 8020d0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8020d10:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8020d14:	1b52      	subs	r2, r2, r5
 8020d16:	6122      	str	r2, [r4, #16]
 8020d18:	f8cd a000 	str.w	sl, [sp]
 8020d1c:	464b      	mov	r3, r9
 8020d1e:	aa03      	add	r2, sp, #12
 8020d20:	4621      	mov	r1, r4
 8020d22:	4640      	mov	r0, r8
 8020d24:	f7ff fee4 	bl	8020af0 <_printf_common>
 8020d28:	3001      	adds	r0, #1
 8020d2a:	d14a      	bne.n	8020dc2 <_printf_i+0x1f6>
 8020d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020d30:	b004      	add	sp, #16
 8020d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020d36:	6823      	ldr	r3, [r4, #0]
 8020d38:	f043 0320 	orr.w	r3, r3, #32
 8020d3c:	6023      	str	r3, [r4, #0]
 8020d3e:	4833      	ldr	r0, [pc, #204]	; (8020e0c <_printf_i+0x240>)
 8020d40:	2778      	movs	r7, #120	; 0x78
 8020d42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8020d46:	6823      	ldr	r3, [r4, #0]
 8020d48:	6829      	ldr	r1, [r5, #0]
 8020d4a:	061f      	lsls	r7, r3, #24
 8020d4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8020d50:	d402      	bmi.n	8020d58 <_printf_i+0x18c>
 8020d52:	065f      	lsls	r7, r3, #25
 8020d54:	bf48      	it	mi
 8020d56:	b2b6      	uxthmi	r6, r6
 8020d58:	07df      	lsls	r7, r3, #31
 8020d5a:	bf48      	it	mi
 8020d5c:	f043 0320 	orrmi.w	r3, r3, #32
 8020d60:	6029      	str	r1, [r5, #0]
 8020d62:	bf48      	it	mi
 8020d64:	6023      	strmi	r3, [r4, #0]
 8020d66:	b91e      	cbnz	r6, 8020d70 <_printf_i+0x1a4>
 8020d68:	6823      	ldr	r3, [r4, #0]
 8020d6a:	f023 0320 	bic.w	r3, r3, #32
 8020d6e:	6023      	str	r3, [r4, #0]
 8020d70:	2310      	movs	r3, #16
 8020d72:	e7a7      	b.n	8020cc4 <_printf_i+0xf8>
 8020d74:	4824      	ldr	r0, [pc, #144]	; (8020e08 <_printf_i+0x23c>)
 8020d76:	e7e4      	b.n	8020d42 <_printf_i+0x176>
 8020d78:	4615      	mov	r5, r2
 8020d7a:	e7bd      	b.n	8020cf8 <_printf_i+0x12c>
 8020d7c:	682b      	ldr	r3, [r5, #0]
 8020d7e:	6826      	ldr	r6, [r4, #0]
 8020d80:	6961      	ldr	r1, [r4, #20]
 8020d82:	1d18      	adds	r0, r3, #4
 8020d84:	6028      	str	r0, [r5, #0]
 8020d86:	0635      	lsls	r5, r6, #24
 8020d88:	681b      	ldr	r3, [r3, #0]
 8020d8a:	d501      	bpl.n	8020d90 <_printf_i+0x1c4>
 8020d8c:	6019      	str	r1, [r3, #0]
 8020d8e:	e002      	b.n	8020d96 <_printf_i+0x1ca>
 8020d90:	0670      	lsls	r0, r6, #25
 8020d92:	d5fb      	bpl.n	8020d8c <_printf_i+0x1c0>
 8020d94:	8019      	strh	r1, [r3, #0]
 8020d96:	2300      	movs	r3, #0
 8020d98:	6123      	str	r3, [r4, #16]
 8020d9a:	4615      	mov	r5, r2
 8020d9c:	e7bc      	b.n	8020d18 <_printf_i+0x14c>
 8020d9e:	682b      	ldr	r3, [r5, #0]
 8020da0:	1d1a      	adds	r2, r3, #4
 8020da2:	602a      	str	r2, [r5, #0]
 8020da4:	681d      	ldr	r5, [r3, #0]
 8020da6:	6862      	ldr	r2, [r4, #4]
 8020da8:	2100      	movs	r1, #0
 8020daa:	4628      	mov	r0, r5
 8020dac:	f7df f9f0 	bl	8000190 <memchr>
 8020db0:	b108      	cbz	r0, 8020db6 <_printf_i+0x1ea>
 8020db2:	1b40      	subs	r0, r0, r5
 8020db4:	6060      	str	r0, [r4, #4]
 8020db6:	6863      	ldr	r3, [r4, #4]
 8020db8:	6123      	str	r3, [r4, #16]
 8020dba:	2300      	movs	r3, #0
 8020dbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020dc0:	e7aa      	b.n	8020d18 <_printf_i+0x14c>
 8020dc2:	6923      	ldr	r3, [r4, #16]
 8020dc4:	462a      	mov	r2, r5
 8020dc6:	4649      	mov	r1, r9
 8020dc8:	4640      	mov	r0, r8
 8020dca:	47d0      	blx	sl
 8020dcc:	3001      	adds	r0, #1
 8020dce:	d0ad      	beq.n	8020d2c <_printf_i+0x160>
 8020dd0:	6823      	ldr	r3, [r4, #0]
 8020dd2:	079b      	lsls	r3, r3, #30
 8020dd4:	d413      	bmi.n	8020dfe <_printf_i+0x232>
 8020dd6:	68e0      	ldr	r0, [r4, #12]
 8020dd8:	9b03      	ldr	r3, [sp, #12]
 8020dda:	4298      	cmp	r0, r3
 8020ddc:	bfb8      	it	lt
 8020dde:	4618      	movlt	r0, r3
 8020de0:	e7a6      	b.n	8020d30 <_printf_i+0x164>
 8020de2:	2301      	movs	r3, #1
 8020de4:	4632      	mov	r2, r6
 8020de6:	4649      	mov	r1, r9
 8020de8:	4640      	mov	r0, r8
 8020dea:	47d0      	blx	sl
 8020dec:	3001      	adds	r0, #1
 8020dee:	d09d      	beq.n	8020d2c <_printf_i+0x160>
 8020df0:	3501      	adds	r5, #1
 8020df2:	68e3      	ldr	r3, [r4, #12]
 8020df4:	9903      	ldr	r1, [sp, #12]
 8020df6:	1a5b      	subs	r3, r3, r1
 8020df8:	42ab      	cmp	r3, r5
 8020dfa:	dcf2      	bgt.n	8020de2 <_printf_i+0x216>
 8020dfc:	e7eb      	b.n	8020dd6 <_printf_i+0x20a>
 8020dfe:	2500      	movs	r5, #0
 8020e00:	f104 0619 	add.w	r6, r4, #25
 8020e04:	e7f5      	b.n	8020df2 <_printf_i+0x226>
 8020e06:	bf00      	nop
 8020e08:	08021f5d 	.word	0x08021f5d
 8020e0c:	08021f6e 	.word	0x08021f6e

08020e10 <memmove>:
 8020e10:	4288      	cmp	r0, r1
 8020e12:	b510      	push	{r4, lr}
 8020e14:	eb01 0402 	add.w	r4, r1, r2
 8020e18:	d902      	bls.n	8020e20 <memmove+0x10>
 8020e1a:	4284      	cmp	r4, r0
 8020e1c:	4623      	mov	r3, r4
 8020e1e:	d807      	bhi.n	8020e30 <memmove+0x20>
 8020e20:	1e43      	subs	r3, r0, #1
 8020e22:	42a1      	cmp	r1, r4
 8020e24:	d008      	beq.n	8020e38 <memmove+0x28>
 8020e26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020e2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020e2e:	e7f8      	b.n	8020e22 <memmove+0x12>
 8020e30:	4402      	add	r2, r0
 8020e32:	4601      	mov	r1, r0
 8020e34:	428a      	cmp	r2, r1
 8020e36:	d100      	bne.n	8020e3a <memmove+0x2a>
 8020e38:	bd10      	pop	{r4, pc}
 8020e3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020e3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020e42:	e7f7      	b.n	8020e34 <memmove+0x24>

08020e44 <_sbrk_r>:
 8020e44:	b538      	push	{r3, r4, r5, lr}
 8020e46:	4d06      	ldr	r5, [pc, #24]	; (8020e60 <_sbrk_r+0x1c>)
 8020e48:	2300      	movs	r3, #0
 8020e4a:	4604      	mov	r4, r0
 8020e4c:	4608      	mov	r0, r1
 8020e4e:	602b      	str	r3, [r5, #0]
 8020e50:	f7e1 fd86 	bl	8002960 <_sbrk>
 8020e54:	1c43      	adds	r3, r0, #1
 8020e56:	d102      	bne.n	8020e5e <_sbrk_r+0x1a>
 8020e58:	682b      	ldr	r3, [r5, #0]
 8020e5a:	b103      	cbz	r3, 8020e5e <_sbrk_r+0x1a>
 8020e5c:	6023      	str	r3, [r4, #0]
 8020e5e:	bd38      	pop	{r3, r4, r5, pc}
 8020e60:	200025bc 	.word	0x200025bc

08020e64 <_realloc_r>:
 8020e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020e68:	4680      	mov	r8, r0
 8020e6a:	4614      	mov	r4, r2
 8020e6c:	460e      	mov	r6, r1
 8020e6e:	b921      	cbnz	r1, 8020e7a <_realloc_r+0x16>
 8020e70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020e74:	4611      	mov	r1, r2
 8020e76:	f7ff bc57 	b.w	8020728 <_malloc_r>
 8020e7a:	b92a      	cbnz	r2, 8020e88 <_realloc_r+0x24>
 8020e7c:	f7ff fbea 	bl	8020654 <_free_r>
 8020e80:	4625      	mov	r5, r4
 8020e82:	4628      	mov	r0, r5
 8020e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020e88:	f000 f81b 	bl	8020ec2 <_malloc_usable_size_r>
 8020e8c:	4284      	cmp	r4, r0
 8020e8e:	4607      	mov	r7, r0
 8020e90:	d802      	bhi.n	8020e98 <_realloc_r+0x34>
 8020e92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8020e96:	d812      	bhi.n	8020ebe <_realloc_r+0x5a>
 8020e98:	4621      	mov	r1, r4
 8020e9a:	4640      	mov	r0, r8
 8020e9c:	f7ff fc44 	bl	8020728 <_malloc_r>
 8020ea0:	4605      	mov	r5, r0
 8020ea2:	2800      	cmp	r0, #0
 8020ea4:	d0ed      	beq.n	8020e82 <_realloc_r+0x1e>
 8020ea6:	42bc      	cmp	r4, r7
 8020ea8:	4622      	mov	r2, r4
 8020eaa:	4631      	mov	r1, r6
 8020eac:	bf28      	it	cs
 8020eae:	463a      	movcs	r2, r7
 8020eb0:	f7ff fbc2 	bl	8020638 <memcpy>
 8020eb4:	4631      	mov	r1, r6
 8020eb6:	4640      	mov	r0, r8
 8020eb8:	f7ff fbcc 	bl	8020654 <_free_r>
 8020ebc:	e7e1      	b.n	8020e82 <_realloc_r+0x1e>
 8020ebe:	4635      	mov	r5, r6
 8020ec0:	e7df      	b.n	8020e82 <_realloc_r+0x1e>

08020ec2 <_malloc_usable_size_r>:
 8020ec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020ec6:	1f18      	subs	r0, r3, #4
 8020ec8:	2b00      	cmp	r3, #0
 8020eca:	bfbc      	itt	lt
 8020ecc:	580b      	ldrlt	r3, [r1, r0]
 8020ece:	18c0      	addlt	r0, r0, r3
 8020ed0:	4770      	bx	lr
	...

08020ed4 <_init>:
 8020ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020ed6:	bf00      	nop
 8020ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020eda:	bc08      	pop	{r3}
 8020edc:	469e      	mov	lr, r3
 8020ede:	4770      	bx	lr

08020ee0 <_fini>:
 8020ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020ee2:	bf00      	nop
 8020ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020ee6:	bc08      	pop	{r3}
 8020ee8:	469e      	mov	lr, r3
 8020eea:	4770      	bx	lr
